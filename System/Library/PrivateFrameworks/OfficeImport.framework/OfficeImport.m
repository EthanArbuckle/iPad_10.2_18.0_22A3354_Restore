void *operator new[](size_t a1)
{
  _DWORD *exception;

  if (!a1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return operator new[](a1);
}

uint64_t OIPreviewProcessWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OIPreviewProcessWithDataAndOptions(a1, a2, a3, 0, a4, a5);
}

uint64_t OIPreviewProcessWithDataAndOptions(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  unint64_t v13;

  objc_opt_class();
  objc_opt_class();
  createArchiverForClient(a5, a6, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a3 || (v13 = +[CMFileManager getFileTypeFromUTI:](CMFileManager, "getFileTypeFromUTI:", a3)) == 0)
    v13 = +[CMFileManager getFileTypeFromPath:](CMFileManager, "getFileTypeFromPath:", a2);
  +[QLTop fillHTMLArchiveForOfficeData:fileName:dataFormat:archiver:](QLTop, "fillHTMLArchiveForOfficeData:fileName:dataFormat:archiver:", a1, a2, v13, v12);

  return 0;
}

void sub_22A0CDFAC(void *exc_buf, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (a2 == 2)
  {
    v4 = objc_begin_catch(exc_buf);
    handleExceptionForClientWithCallbacks(v4, v3, v2);
    objc_end_catch();
    JUMPOUT(0x22A0CDF8CLL);
  }
  objc_begin_catch(exc_buf);

  objc_exception_rethrow();
}

void sub_22A0CE000(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

CMProgressiveArchiveManager *createArchiverForClient(uint64_t a1, uint64_t a2, void *a3)
{
  CMProgressiveArchiveManager *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v4 = -[CMProgressiveArchiveManager initWithClient:andCallBacks:]([CMProgressiveArchiveManager alloc], "initWithClient:andCallBacks:", a1, a2);
  objc_msgSend(a3, "objectForKey:", CFSTR("IsOnPhone"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    v7 = objc_msgSend(v5, "BOOLValue");
  else
    v7 = 0;
  -[CMArchiveManager setIsOnPhone:](v4, "setIsOnPhone:", v7);
  objc_msgSend(a3, "objectForKey:", kOIPreviewOptionsPassphrase);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CMArchiveManager setPassphrase:](v4, "setPassphrase:", v8);

  return v4;
}

void sub_22A0CE0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A0CE198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0CE26C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0CE4BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0CE58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0CE6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0CE7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_22A0CEB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_22A0CF288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A0CF4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0CF9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void PptObjectFactory::PptObjectFactory(PptObjectFactory *this)
{
  this->var0 = (void **)&off_24F3BC700;
  this->var1 = 0;
}

void PptObjectFactory::init(PptObjectFactory *this)
{
  PptEshObjectFactory *v2;

  v2 = (PptEshObjectFactory *)operator new(0x10uLL);
  PptEshObjectFactory::PptEshObjectFactory(v2);
  this->var1 = v2;
}

void sub_22A0CFA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *operator new(size_t a1)
{
  return operator new(a1);
}

void PptEshObjectFactory::PptEshObjectFactory(PptEshObjectFactory *this)
{
  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = &off_24F3BC6C0;
}

void PptBinaryReader::PptBinaryReader(PptBinaryReader *this, PptObjectFactory *a2)
{
  char *v4;

  *(_QWORD *)this = off_24F3B1310;
  v4 = (char *)this + 8;
  OcReader::OcReader((OcReader *)((char *)this + 8));
  *(_QWORD *)this = &off_24F3BCED8;
  *((_QWORD *)this + 1) = &unk_24F3BCFF8;
  *((_QWORD *)this + 3) = &unk_24F3BD0D8;
  *((_QWORD *)this + 4) = 0;
  SsrwOORootStorage::SsrwOORootStorage((PptBinaryReader *)((char *)this + 40));
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 2;
  *((_BYTE *)this + 164) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = a2;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_BYTE *)this + 312) = 0;
  (*(void (**)(char *, PptEshObjectFactory *))(*((_QWORD *)this + 1) + 144))(v4, a2->var1);
}

void sub_22A0CFBA0(_Unwind_Exception *a1)
{
  OcReader *v1;
  uint64_t v2;
  SsrwOORootStorage *v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  void *v8;

  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v2 + 296) = v8;
    operator delete(v8);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(v4, *v5);
  SsrwOORootStorage::~SsrwOORootStorage(v3);
  OcReader::~OcReader(v1);
  _Unwind_Resume(a1);
}

void OcReader::OcReader(OcReader *this)
{
  this->var0 = (void **)off_24F3A63B0;
  this->var1 = 0;
}

void SsrwOORootStorage::SsrwOORootStorage(SsrwOORootStorage *this)
{
  uint64_t v1;

  SsrwOOStorage::SsrwOOStorage((SsrwOOStorage *)this, 0);
  *(_QWORD *)(v1 + 80) = 0;
}

void SsrwOOStorage::SsrwOOStorage(SsrwOOStorage *this, _Storage *a2)
{
  this->var0 = a2;
}

OcReader *OcReader::setEscherObjectFactory(OcReader *this, EshObjectFactory *a2)
{
  this->var1 = a2;
  return this;
}

void sub_22A0CFDB0(void *a1, int a2)
{
  void *v2;
  unsigned int *v5;
  void *v6;

  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    PBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v6, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A0CFD98);
}

void sub_22A0CFE3C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 2)
  {
    objc_msgSend(v2, "setStartErrorMessageFromException:", objc_begin_catch(exception_object));
    objc_end_catch();
    JUMPOUT(0x22A0CFD98);
  }
  _Unwind_Resume(exception_object);
}

void PptBinaryReader::start(PptBinaryReader *this, const void **a2, unsigned int a3)
{
  SsrwOORootStorage *v6;

  v6 = (PptBinaryReader *)((char *)this + 40);
  (*(void (**)(PptBinaryReader *))(*(_QWORD *)this + 24))(this);
  PptBinaryReader::initSkipConditions(this);
  SsrwOORootStorage::openInBuf(v6, a2, a3);
  PptBinaryReader::commonStart(this);
}

double PptBinaryReader::finish(PptBinaryReader *this)
{
  uint64_t v2;
  uint64_t v3;
  SsrwOOStorage *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  PptPersistDir *v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v2 = *((_QWORD *)this + 19);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 19) = 0;
  v3 = *((_QWORD *)this + 18);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 18) = 0;
  v4 = (SsrwOOStorage *)*((_QWORD *)this + 16);
  if (v4)
  {
    SsrwOOStorage::~SsrwOOStorage(v4);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 16) = 0;
  if (SsrwOORootStorage::isOpen((PptBinaryReader *)((char *)this + 40)))
    SsrwOORootStorage::close((PptBinaryReader *)((char *)this + 40), 0);
  *((_QWORD *)this + 17) = 0;
  v5 = *((_QWORD *)this + 23);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 23) = 0;
  v6 = *((_QWORD *)this + 21);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 21) = 0;
  v7 = *((_QWORD *)this + 22);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 22) = 0;
  v8 = (PptPersistDir *)*((_QWORD *)this + 24);
  if (v8)
  {
    PptPersistDir::~PptPersistDir(v8);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 24) = 0;
  v9 = *((_QWORD *)this + 25);
  if (v9)
    MEMORY[0x22E2DD408](v9, 0x1000C408B6DE1C6);
  v10 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 25) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_BYTE *)this + 164) = 0;
  result = 0.0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 37) = *((_QWORD *)this + 36);
  return result;
}

BOOL SsrwOORootStorage::isOpen(SsrwOORootStorage *this)
{
  return *((_QWORD *)this + 10) != 0;
}

uint64_t *PptBinaryReader::initSkipConditions(PptBinaryReader *this)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t *result;
  unsigned int v4;
  unsigned int *v5;

  v1 = (_QWORD *)((char *)this + 248);
  v2 = (uint64_t **)((char *)this + 240);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v4 = 6002;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  v4 = 4085;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  v4 = 1000;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  v4 = 1006;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  v4 = 1016;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  v4 = 1008;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  v4 = 4041;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 1;
  v4 = 4011;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  v4 = 6003;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  v4 = 6010;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  v4 = 6024;
  v5 = &v4;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5)+ 8) = 0;
  v4 = 6025;
  v5 = &v4;
  result = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v2, &v4, (uint64_t)&std::piecewise_construct, &v5);
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t SsrwOORootStorage::openInBuf(SsrwOORootStorage *this, const void **a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  _DWORD *exception;

  LODWORD(result) = openStructuredStorageInBuf(a2, a3, 0, (uint64_t *)this + 10);
  if ((_DWORD)result || (result = getStorageFromRoot(*((_QWORD *)this + 10), this), (_DWORD)result))
  {
    v5 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  return result;
}

uint64_t openStructuredStorageInBuf(_QWORD *a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t v5;
  _DWORD *v8;
  _QWORD *v9;

  if (!a1)
    return 6;
  v5 = 6;
  if (a4 && *a1)
  {
    if ((a3 & 0xFFFFFFFD) != 0)
    {
      return 2;
    }
    else
    {
      v8 = SsrwOpenMemForReading((uint64_t)a1, a2);
      if (v8)
      {
        v9 = v8;
        v5 = openStructuredStorageInternal((uint64_t)v8, a4, 1, a3);
        if ((_DWORD)v5)
          SsrwFclose(v9);
      }
      else
      {
        return 1;
      }
    }
  }
  return v5;
}

_DWORD *SsrwOpenMemForReading(uint64_t a1, unsigned int a2)
{
  _DWORD *result;

  result = malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  if (result)
  {
    result[11] = 0;
    *(_DWORD *)((char *)result + 41) = 0;
    *((_QWORD *)result + 6) = SsrwMemFread;
    *((_QWORD *)result + 7) = SsrwMemFwrite;
    *((_QWORD *)result + 8) = SsrwMemFclose;
    *((_QWORD *)result + 9) = SsrwMemFseek;
    *((_QWORD *)result + 10) = SsrwMemFtell;
    *((_QWORD *)result + 11) = SsrwMemFtruncate;
    *(_QWORD *)result = a1;
    *((_QWORD *)result + 1) = a2;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = 0;
    *((_QWORD *)result + 2) = a2;
    *((_BYTE *)result + 40) = 1;
  }
  return result;
}

uint64_t openStructuredStorageInternal(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ChainLastSector;
  uint64_t Fat;
  int v13;
  void *v14;
  unsigned int FatSize;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int XFatSize;
  void *v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t FatSectorsFromXFat;
  uint64_t v25;
  char SmallSectorShift;
  uint64_t v27;
  unsigned int DirectoryStartSector;
  uint64_t EntryAtIndex;
  uint64_t v30;
  unsigned int StartSector;
  int v32;

  v32 = 0;
  v8 = malloc_type_malloc(0x70uLL, 0x10300407518E08AuLL);
  if (!v8)
    return 5;
  v9 = (uint64_t)v8;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  rootStorageInit((uint64_t)v8, a4, 0x200u);
  if (!(_DWORD)v10)
  {
    *(_QWORD *)v9 = a1;
    Fat = headerRead(a1, *(_QWORD *)(v9 + 16));
    if ((_DWORD)Fat)
      goto LABEL_5;
    v13 = 1 << headerGetSectorShift(*(_QWORD *)(v9 + 16));
    tocSetSectorSize(*(_QWORD *)(v9 + 40), v13);
    v14 = malloc_type_malloc(v13, 0x7358A8CDuLL);
    *(_QWORD *)(v9 + 80) = v14;
    if (!v14)
      goto LABEL_15;
    bzero(v14, v13);
    Fat = fatConstruct(v9, (_QWORD *)(v9 + 24), v13);
    if ((_DWORD)Fat)
      goto LABEL_5;
    FatSize = headerGetFatSize(*(_QWORD *)(v9 + 16));
    if (FatSize >> 30)
      goto LABEL_15;
    v16 = malloc_type_malloc(4 * FatSize, 0x5E92E671uLL);
    if (!v16)
      goto LABEL_15;
    v17 = v16;
    v18 = headerGetFatSize(*(_QWORD *)(v9 + 16));
    bzero(v17, 4 * v18);
    XFatSize = headerGetXFatSize(*(_QWORD *)(v9 + 16));
    if (XFatSize)
    {
      v20 = malloc_type_malloc(4 * XFatSize, 0xBF89B1ADuLL);
      if (!v20)
      {
        free(v17);
LABEL_15:
        *(_QWORD *)v9 = 0;
        closeStg((char *)v9);
        return 5;
      }
    }
    else
    {
      v20 = 0;
    }
    v22 = headerReadFatSectors(*(_QWORD *)v9, *(_QWORD *)(v9 + 16), (uint64_t)v17, &v32);
    if ((_DWORD)v22)
    {
      ChainLastSector = v22;
      if (v20)
        free(v20);
      free(v17);
      goto LABEL_6;
    }
    v23 = headerGetFatSize(*(_QWORD *)(v9 + 16));
    if (v23 >= 0x6E)
    {
      FatSectorsFromXFat = readFatSectorsFromXFat(v9, (uint64_t)v17, (int *)v20);
      if ((_DWORD)FatSectorsFromXFat)
      {
        ChainLastSector = FatSectorsFromXFat;
        *(_QWORD *)v9 = 0;
        if (v20)
          free(v20);
        free(v17);
        goto LABEL_7;
      }
    }
    fatSetFatSectors(*(_QWORD *)(v9 + 24), (uint64_t)v17, v23);
    *(_QWORD *)(v9 + 96) = v20;
    Fat = fatReadFat(*(unsigned int ***)(v9 + 24));
    if (!(_DWORD)Fat)
    {
      if (headerGetSmallFatSize(*(_QWORD *)(v9 + 16)))
      {
        v25 = initializeSmallFat((_QWORD *)v9);
      }
      else
      {
        SmallSectorShift = headerGetSmallSectorShift(*(_QWORD *)(v9 + 16));
        v25 = fatConstruct(v9, (_QWORD *)(v9 + 32), 1 << SmallSectorShift);
      }
      ChainLastSector = v25;
      if ((_DWORD)v25)
        goto LABEL_6;
      v27 = *(_QWORD *)(v9 + 24);
      DirectoryStartSector = headerGetDirectoryStartSector(*(_QWORD *)(v9 + 16));
      Fat = fatGetChain(v27, DirectoryStartSector, (unsigned int *)(v9 + 72), (_QWORD *)(v9 + 64));
      if (!(_DWORD)Fat)
      {
        Fat = tocRead(*(_QWORD *)(v9 + 40), v9);
        if (!(_DWORD)Fat)
        {
          Fat = storageConstructRoot(v9, (_QWORD *)(v9 + 48));
          if (!(_DWORD)Fat)
          {
            EntryAtIndex = tocGetEntryAtIndex(*(uint64_t **)(v9 + 40), 0);
            if (!EntryAtIndex)
            {
              *(_QWORD *)v9 = 0;
              closeStg((char *)v9);
              return 11;
            }
            v30 = *(_QWORD *)(v9 + 24);
            StartSector = directoryGetStartSector(EntryAtIndex);
            ChainLastSector = fatGetChainLastSector(v30, StartSector, (unsigned int *)(v9 + 92));
            if (!(_DWORD)ChainLastSector)
            {
              *(_BYTE *)(v9 + 8) = a3;
              *a2 = v9;
              return ChainLastSector;
            }
            goto LABEL_6;
          }
        }
      }
    }
LABEL_5:
    ChainLastSector = Fat;
LABEL_6:
    *(_QWORD *)v9 = 0;
    goto LABEL_7;
  }
  ChainLastSector = v10;
LABEL_7:
  closeStg((char *)v9);
  return ChainLastSector;
}

double rootStorageInit(uint64_t a1, int a2, unsigned int a3)
{
  double result;
  _WORD *v7;
  unsigned __int16 v8;
  char SectorShift;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (!headerInit((_QWORD *)(a1 + 16)))
  {
    v7 = *(_WORD **)(a1 + 16);
    v8 = SsrwUINTLog2(a3);
    headerSetSectorShift(v7, v8);
    SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
    if (!tocConstruct(1 << SectorShift, (_QWORD *)(a1 + 40)))
    {
      tocSetSectorSize(*(_QWORD *)(a1 + 40), a3);
      *(_DWORD *)(a1 + 56) = a2;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = a2 == 1;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 72) = -1;
      result = NAN;
      *(_QWORD *)(a1 + 88) = 0xFFFFFFFF00000000;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  return result;
}

uint64_t headerInit(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = malloc_type_malloc(0x4CuLL, 0x100004015A9971DuLL);
  if (!v2)
    return 5;
  v3 = v2;
  result = 0;
  v3[3] = 0x9FFFE0003003ELL;
  *((_WORD *)v3 + 16) = 6;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0xE11AB1A1E011CFD0;
  *(_QWORD *)((char *)v3 + 34) = 0;
  v3[5] = 0;
  *((_OWORD *)v3 + 3) = xmmword_22A4C1270;
  v3[8] = 0xFFFFFFFF00000000;
  *((_DWORD *)v3 + 18) = 0;
  *a1 = v3;
  return result;
}

uint64_t SsrwUINTLog2(unsigned int a1)
{
  uint64_t v1;
  BOOL v2;

  if (a1 < 2)
    return 0;
  LODWORD(v1) = 0;
  do
  {
    v1 = (v1 + 1);
    v2 = a1 > 3;
    a1 >>= 1;
  }
  while (v2);
  return v1;
}

_WORD *headerSetSectorShift(_WORD *result, unsigned int a2)
{
  if (result)
  {
    result[15] = a2;
    if ((unsigned __int16)result[16] >= a2)
      result[16] = a2 >> 1;
    if (a2 != 9)
      result[13] = 4;
  }
  return result;
}

uint64_t headerGetSectorShift(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 30);
  return result;
}

uint64_t tocConstruct(int a1, _QWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;

  v4 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  if (!v4)
    return 5;
  v5 = v4;
  result = 0;
  v5[2] = 0;
  v5[3] = a1;
  *(_QWORD *)v5 = 0;
  *a2 = v5;
  return result;
}

uint64_t tocSetSectorSize(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 12) = a2;
  return 0;
}

uint64_t headerRead(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  char *v5;
  unsigned int UInt16;
  unsigned int v7;
  uint64_t v8;
  __int16 v10;

  SsrwFseek(a1);
  if (!SsrwFtell(a1))
    return 17;
  SsrwFseek(a1);
  v4 = malloc_type_malloc(0x4CuLL, 0x8FE19A4uLL);
  if (!v4)
    return 5;
  v5 = (char *)v4;
  *(_OWORD *)((char *)v4 + 60) = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  if (SsrwFread((uint64_t)v4, 76, 1, a1) == 1
    && *(_QWORD *)v5 == 0xE11AB1A1E011CFD0
    && (*(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 8),
        *(_WORD *)(a2 + 24) = CsLeReadUInt16((unsigned __int16 *)v5 + 12),
        *(_WORD *)(a2 + 26) = CsLeReadUInt16((unsigned __int16 *)v5 + 13),
        UInt16 = CsLeReadUInt16((unsigned __int16 *)v5 + 14),
        *(_WORD *)(a2 + 28) = UInt16,
        UInt16 >= 0xFFFE)
    && (v7 = CsLeReadUInt16((unsigned __int16 *)v5 + 15), *(_WORD *)(a2 + 30) = v7, v7 <= 0xC))
  {
    *(_WORD *)(a2 + 32) = CsLeReadUInt16((unsigned __int16 *)v5 + 16);
    v10 = *((_WORD *)v5 + 19);
    *(_DWORD *)(a2 + 34) = *(_DWORD *)(v5 + 34);
    *(_WORD *)(a2 + 38) = v10;
    *(_DWORD *)(a2 + 40) = CsLeReadSInt32((unsigned int *)v5 + 10);
    *(_DWORD *)(a2 + 44) = CsLeReadSInt32((unsigned int *)v5 + 11);
    *(_DWORD *)(a2 + 48) = CsLeReadSInt32((unsigned int *)v5 + 12);
    *(_DWORD *)(a2 + 52) = CsLeReadSInt32((unsigned int *)v5 + 13);
    *(_DWORD *)(a2 + 56) = CsLeReadSInt32((unsigned int *)v5 + 14);
    *(_DWORD *)(a2 + 60) = CsLeReadSInt32((unsigned int *)v5 + 15);
    *(_DWORD *)(a2 + 64) = CsLeReadSInt32((unsigned int *)v5 + 16);
    *(_DWORD *)(a2 + 68) = CsLeReadSInt32((unsigned int *)v5 + 17);
    v8 = 0;
    *(_DWORD *)(a2 + 72) = CsLeReadSInt32((unsigned int *)v5 + 18);
  }
  else
  {
    v8 = 3;
  }
  free(v5);
  return v8;
}

uint64_t SsrwFseek(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(a1 + 72)) != 0)
    return v1();
  else
    return 0;
}

uint64_t SsrwMemFseek(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 == 2)
  {
    v3 = *(_QWORD *)(a1 + 8) + a2;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = v3 + a2;
    if (!a3)
      v3 = a2;
    if (a3 == 1)
      v3 = v4;
  }
  *(_QWORD *)(a1 + 24) = v3;
  return 0;
}

uint64_t SsrwFtell(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(a1 + 80)) != 0)
    return v1();
  else
    return 0;
}

_QWORD *SsrwMemFtell(_QWORD *result)
{
  if (result)
  {
    if (*result)
      return (_QWORD *)result[3];
    else
      return 0;
  }
  return result;
}

uint64_t SsrwFread(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(void);

  if (a4 && a1 && (v4 = *(uint64_t (**)(void))(a4 + 48)) != 0)
    return v4();
  else
    return 0;
}

uint64_t SsrwMemFread(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a4)
    return 0;
  if ((*(_BYTE *)(a4 + 40) & 1) == 0)
    return 0;
  v5 = a3;
  v6 = a3 * a2;
  if (a3 * a2 < 0)
    return 0;
  v7 = *(_QWORD *)(a4 + 24);
  v8 = (*(_QWORD *)(a4 + 16) - v7) & ~((*(_QWORD *)(a4 + 16) - v7) >> 63);
  if (v8 < (int)v6)
  {
    v5 = v8 / (int)a2;
    v6 = v5 * a2;
  }
  if (v6)
  {
    memcpy(a1, (const void *)(**(_QWORD **)a4 + v7), v6);
    *(_QWORD *)(a4 + 24) += (int)v6;
  }
  return v5;
}

uint64_t CsLeReadUInt16(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t CsLeReadSInt32(unsigned int *a1)
{
  return *a1;
}

uint64_t fatConstruct(uint64_t a1, _QWORD *a2, __int16 a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t result;

  v6 = malloc_type_malloc(0x38uLL, 0x10300407B4512BAuLL);
  if (!v6)
    return 5;
  v7 = v6;
  result = 0;
  v7[1] = 0u;
  v7[2] = 0u;
  *((_QWORD *)v7 + 6) = 0;
  *v7 = 0u;
  *((_QWORD *)v7 + 4) = a1;
  *((_DWORD *)v7 + 12) = 0;
  *((_DWORD *)v7 + 6) = 0;
  *((_DWORD *)v7 + 10) = -2;
  *((_WORD *)v7 + 22) = a3;
  *a2 = v7;
  return result;
}

uint64_t headerGetFatSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 44);
  return result;
}

uint64_t headerGetXFatSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 72);
  return result;
}

uint64_t headerReadFatSectors(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  int v6;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;

  v5 = *(unsigned int *)(a2 + 44);
  if (v5 >= 0x6D)
    v6 = 109;
  else
    v6 = *(_DWORD *)(a2 + 44);
  if (v6)
  {
    v9 = (char *)malloc_type_malloc((4 * v6), 0xBF89B1ADuLL);
    if (v9)
    {
      v10 = v9;
      bzero(v9, (4 * v6));
      if (SsrwFseek(a1) || SsrwFread((uint64_t)v10, (4 * v6), 1, a1) != 1)
      {
        free(v10);
        return 4;
      }
      else
      {
        v11 = 0;
        v12 = 109;
        if (v5 < 0x6D)
          v12 = v5;
        v13 = 4 * v12;
        do
        {
          *(_DWORD *)(a3 + v11) = CsLeReadSInt32((unsigned int *)&v10[v11]);
          v11 += 4;
        }
        while (v13 != (_DWORD)v11);
        free(v10);
        result = 0;
        *a4 = v6;
      }
    }
    else
    {
      return 5;
    }
  }
  else
  {
    result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t fatSetFatSectors(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t fatReadFat(unsigned int **a1)
{
  uint64_t v2;
  uint64_t Header;
  unsigned int v4;
  unint64_t v5;
  uint64_t result;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *Sector;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unsigned int SInt32;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  if (!a1)
    return 6;
  v2 = (uint64_t)a1[4];
  if (!v2 || !*((_DWORD *)a1 + 6) || !*a1)
    return 6;
  Header = rootStorageGetHeader(v2);
  v4 = 1 << headerGetSectorShift(Header) >> 2;
  v5 = *((unsigned int *)a1 + 6) * (unint64_t)v4;
  *((_DWORD *)a1 + 4) = v5;
  if ((v5 & 0xFFFFFFFF00000000) != 0)
    return 8;
  v7 = (unsigned int *)malloc_type_calloc(v5, 4uLL, 0x100004052888210uLL);
  a1[1] = v7;
  v8 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 12) = 4 * v8;
  if (!v7)
    return 5;
  *((_DWORD *)a1 + 5) = v8;
  v9 = *a1;
  if (**a1 == -2 || !*((_DWORD *)a1 + 6))
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  Sector = 0;
  v27 = -2;
  v28 = -2;
  v14 = -2;
  while (1)
  {
    v15 = (uint64_t)a1[4];
    v16 = *v9;
    if (v12)
    {
      result = rootStorageGetSector(v15, v16, (uint64_t)Sector);
      if ((_DWORD)result)
        goto LABEL_39;
    }
    else
    {
      Sector = (unsigned int *)rootStorageReadSector(v15, v16);
      if (!Sector)
      {
        result = rootStorageGetStatus((uint64_t)a1[4]);
        if ((_DWORD)result)
          goto LABEL_39;
      }
    }
    v17 = v10;
    v18 = v12 * v4;
    ++v12;
    v26 = Sector;
    if (v18 < v12 * v4)
      break;
LABEL_34:
    ++v9;
    v10 = v17 + v4;
    Sector = v26;
    if (v12 >= *((_DWORD *)a1 + 6))
    {
      result = 0;
      v24 = v28;
      goto LABEL_40;
    }
  }
  v19 = 0;
  v20 = v17;
  while (v20 < *((unsigned int *)a1 + 4))
  {
    SInt32 = CsLeReadSInt32(Sector);
    if (SInt32 > v11 && SInt32 < 0xFFFFFFF0)
      v11 = SInt32;
    if (SInt32 == -1)
    {
      if (v14 == -2)
      {
        *((_DWORD *)a1 + 10) = v17 + v19;
        v23 = a1[1];
        v14 = v20;
      }
      else
      {
        v23 = a1[1];
        v23[v14] = v17 + v19;
        v14 = v17 + v19;
      }
      v23[v20] = -2;
    }
    else
    {
      a1[1][v20] = SInt32;
      v27 = v14;
      v28 = v17 + v19;
    }
    ++v20;
    ++Sector;
    if (v4 == ++v19)
      goto LABEL_34;
  }
  result = 8;
LABEL_39:
  v24 = v28;
  if (v11 > v28)
    return 8;
LABEL_40:
  v25 = v24 + 1;
  if (v24 != -2 && v25 > *((_DWORD *)a1 + 4))
    return 8;
  if (v24 != -2 && !(_DWORD)result)
  {
    *((_DWORD *)a1 + 4) = v25;
    result = 0;
    if (v27 == -2)
      *((_DWORD *)a1 + 10) = -2;
    else
      a1[1][v27] = -2;
  }
  return result;
}

uint64_t rootStorageGetHeader(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  result = *(_QWORD *)(a1 + 16);
  if (!result)
    return 0;
  return result;
}

uint64_t rootStorageReadSector(uint64_t a1, int a2)
{
  int Sector;

  if (*(_DWORD *)(a1 + 76) == a2)
    return *(_QWORD *)(a1 + 80);
  Sector = readSector(a1, a2);
  *(_DWORD *)(a1 + 88) = Sector;
  if (!Sector)
    return *(_QWORD *)(a1 + 80);
  else
    return 0;
}

uint64_t readSector(uint64_t a1, int a2)
{
  char SectorShift;
  int v5;
  uint64_t v6;
  uint64_t result;

  SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
  SsrwFseek(*(_QWORD *)a1);
  if (SsrwFtell(*(_QWORD *)a1) != (unint64_t)(a2 + 1) << SectorShift)
    return 4;
  v5 = 1 << SectorShift;
  v6 = SsrwFread(*(_QWORD *)(a1 + 80), 1, v5, *(_QWORD *)a1);
  if (v6 != v5)
    return 4 * (v6 == 0);
  result = 0;
  *(_DWORD *)(a1 + 76) = a2;
  return result;
}

uint64_t rootStorageGetSector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char SectorShift;
  uint64_t result;

  SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
  SsrwFseek(*(_QWORD *)a1);
  result = 4 * (SsrwFread(a3, 1 << SectorShift, 1, *(_QWORD *)a1) != 1);
  *(_DWORD *)(a1 + 88) = result;
  return result;
}

uint64_t headerGetSmallFatSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 64);
  return result;
}

uint64_t headerGetSmallSectorShift(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 32);
  return result;
}

uint64_t headerGetSmallFatStartSector(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 60);
  return result;
}

uint64_t fatGetChain(uint64_t a1, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v13;
  uint64_t result;
  BOOL v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;

  if (!a3)
    return 6;
  v5 = *a3;
  if (!*a3)
    return 0;
  v6 = a2;
  v8 = *(_DWORD *)(a1 + 16);
  if (v8 <= a2)
    return 8;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v9 + 4 * a2);
  if (v10 > v8 && v10 != -2)
    return 8;
  v13 = 1;
  result = 8;
  while (v10 != -2)
  {
    if (v10 >= v8)
      return 8;
    if (v13 + 1 > v8)
    {
      ++v13;
      break;
    }
    v10 = *(_DWORD *)(v9 + 4 * v10);
    v15 = v10 <= v8 || v10 == -2;
    ++v13;
    if (!v15)
      return result;
  }
  if (v5 == -1)
  {
    *a3 = v13;
    v5 = v13;
  }
  else if (v5 > v13)
  {
    return 8;
  }
  if (!v5)
    return 0;
  result = 5;
  if (!(v5 >> 30) && (v5 & 0x3FFFFFFF) != 0)
  {
    v16 = malloc_type_calloc(v5, 4uLL, 0x100004052888210uLL);
    if (!v16)
      return 5;
    *a4 = v16;
    *v16 = v6;
    if (v6 != -2)
    {
      v17 = *(_DWORD *)(a1 + 16);
      if (v17 <= v6)
      {
LABEL_45:
        free(v16);
        *a4 = 0;
        return 8;
      }
      v18 = 0;
      v19 = *(_QWORD *)(a1 + 8);
      while (1)
      {
        v20 = (unsigned int *)(v19 + 4 * v6);
        if ((unint64_t)v20 > v19 - 4 + (unint64_t)*(unsigned int *)(a1 + 48))
          break;
        v21 = *v20;
        if (*v20 == -2 || v18 >= *a3 - 1)
          break;
        if ((v21 + 4 > 3 || v21 == -2) && v21 <= v17)
        {
          v16[v18 + 1] = v21;
          v6 = *v20;
          v17 = *(_DWORD *)(a1 + 16);
          ++v18;
          if (*v20 < v17)
            continue;
        }
        goto LABEL_45;
      }
    }
    return 0;
  }
  return result;
}

uint64_t headerSetSmallFatSize(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 64) = a2;
  return result;
}

uint64_t headerGetDirectoryStartSector(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 48);
  return result;
}

uint64_t tocRead(uint64_t a1, uint64_t a2)
{
  return directoryConstructAllDirs(a2, (uint64_t *)a1, (signed int *)(a1 + 8));
}

uint64_t directoryConstructAllDirs(uint64_t a1, uint64_t *a2, signed int *a3)
{
  uint64_t result;
  uint64_t Header;
  char SectorShift;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t Sector;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int MajorVersion;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _WORD *v37;
  uint64_t v38;
  BOOL v40;
  signed int v41;
  int *v42;
  int *v43;
  uint64_t v44;
  _WORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v47 = 0;
  v46 = 0;
  result = 6;
  if (a1 && a2 && a3 && !*a2 && !*a3)
  {
    rootStorageGetDirChain(a1, &v47, &v46);
    Header = rootStorageGetHeader(a1);
    SectorShift = headerGetSectorShift(Header);
    v9 = v46 << SectorShift;
    if ((v46 << SectorShift) < 0x80)
      return 8;
    if (v9 <= 0xC30C307F)
    {
      v10 = v9 >> 7;
      v11 = malloc_type_malloc(168 * (v9 >> 7) + 168, 0x13AB5A48uLL);
      if (v11)
      {
        v12 = (uint64_t)v11;
        bzero(v11, 168 * v10);
        directoryConstructEntry(-1, v12);
        v13 = 0;
        *(_BYTE *)(v12 + 88) = 1;
        *a2 = v12 + 168;
        v41 = v10;
        if (v10 <= 1)
          v14 = 1;
        else
          v14 = v10;
        v15 = 16;
        v44 = v14;
        while (1)
        {
          *(_QWORD *)(*a2 + 168 * v13) = a1;
          v16 = *a2;
          v17 = (uint64_t *)(*a2 + 168 * v13);
          v49 = 0;
          v48 = 0;
          rootStorageGetDirChain(*v17, &v49, &v48);
          v18 = rootStorageGetHeader(*v17);
          v19 = headerGetSectorShift(v18);
          if (v19 >= 7)
          {
            v21 = (1 << v19) / 128;
            Sector = rootStorageReadSector(*v17, *(_DWORD *)(v49 + 4 * ((int)v13 / v21)));
            if (!Sector)
            {
              v14 = v44;
              if (!rootStorageGetStatus(*v17))
                goto LABEL_16;
              goto LABEL_15;
            }
            v23 = 0;
            *(_DWORD *)(v16 + 168 * v13 + 12) = v13;
            v24 = Sector + (((int)v13 % v21) << 7);
            do
            {
              *(_WORD *)(v16 + v15 + v23) = CsLeReadUInt16((unsigned __int16 *)(v24 + v23));
              v23 += 2;
            }
            while (v23 != 64);
            v25 = v16 + 168 * v13;
            *(_WORD *)(v25 + 80) = CsLeReadUInt16((unsigned __int16 *)(v24 + 64));
            v45 = (_WORD *)(v25 + 80);
            *(_DWORD *)(v25 + 84) = *(char *)(v24 + 66);
            v26 = (int *)(v25 + 84);
            *(_BYTE *)(v25 + 88) = *(_BYTE *)(v24 + 67);
            *(_DWORD *)(v25 + 92) = CsLeReadSInt32((unsigned int *)(v24 + 68));
            v43 = (int *)(v25 + 92);
            *(_DWORD *)(v25 + 96) = CsLeReadSInt32((unsigned int *)(v24 + 72));
            v42 = (int *)(v25 + 96);
            *(_DWORD *)(v25 + 100) = CsLeReadSInt32((unsigned int *)(v24 + 76));
            v27 = v25 + 100;
            *(_DWORD *)(v27 + 8) = CsLeReadSInt32((unsigned int *)(v24 + 80));
            *(_WORD *)(v27 + 12) = CsLeReadUInt16((unsigned __int16 *)(v24 + 84));
            *(_WORD *)(v27 + 14) = CsLeReadUInt16((unsigned __int16 *)(v24 + 86));
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v24 + 88);
            *(_DWORD *)(v27 + 4) = CsLeReadSInt32((unsigned int *)(v24 + 96));
            *(_QWORD *)(v27 + 28) = leReadTime((uint64_t *)(v24 + 100));
            *(_QWORD *)(v27 + 36) = leReadTime((uint64_t *)(v24 + 108));
            *(_DWORD *)(v27 + 44) = CsLeReadSInt32((unsigned int *)(v24 + 116));
            v28 = rootStorageGetHeader(*v17);
            MajorVersion = headerGetMajorVersion(v28);
            v30 = (unsigned int *)(v24 + 120);
            v31 = MajorVersion < 4 ? CsLeReadSInt32(v30) : CsLeReadUInt64((uint64_t)v30);
            v32 = v16 + 168 * v13;
            *(_QWORD *)(v32 + 152) = v31;
            *(_QWORD *)(v32 + 160) = 0;
            v33 = *v26;
            v34 = *v26 - 1;
            v14 = v44;
            if (v34 < 2)
              goto LABEL_30;
            if (!v33)
              goto LABEL_16;
            if (v33 == 5)
            {
LABEL_30:
              v35 = (unsigned __int16)*v45;
              if ((v35 & 1) == 0 && v35 <= 0x41)
              {
                if (v35 < 4)
                {
                  if (v33 == 5)
                    goto LABEL_44;
                }
                else
                {
                  v36 = v35 >> 1;
                  v37 = (_WORD *)(v16 + 168 * v13 + 16);
                  LODWORD(v38) = v36 - 1;
                  if (!v37[v38])
                    goto LABEL_35;
                  if (v33 == 5)
                  {
                    *v37 = 0;
                    *v45 = 1;
LABEL_35:
                    if ((int)v38 <= 1)
                      v38 = 1;
                    else
                      v38 = v38;
                    do
                    {
                      if (!*(_WORD *)(v16 + v15))
                      {
                        if (v33 != 5)
                          goto LABEL_15;
                        *v37 = 0;
                        *v45 = 1;
                      }
                      v16 += 2;
                      --v38;
                    }
                    while (v38);
LABEL_44:
                    if (*v43 >= -1 && *v43 < v41)
                    {
                      v40 = *v42 >= -1 && *v42 < v41;
                      if (v40 && *(int *)v27 >= -1 && *(_DWORD *)v27 < v41)
                        goto LABEL_16;
                    }
                  }
                }
              }
            }
          }
LABEL_15:
          v20 = *a2 + 168 * v13;
          directoryConstructEntry(-1, v20);
          *(_BYTE *)(v20 + 88) = 1;
LABEL_16:
          ++v13;
          v15 += 168;
          if (v13 == v14)
          {
            result = directoryNormalize(*a2, (_DWORD *)*a2);
            *a3 = v41;
            return result;
          }
        }
      }
    }
    return 5;
  }
  return result;
}

uint64_t rootStorageGetDirChain(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;

  if (result)
  {
    v3 = *(_QWORD *)(result + 64);
    if (v3)
    {
      v4 = *(_DWORD *)(result + 72);
      if (v4)
      {
        *a2 = v3;
        *a3 = v4;
      }
    }
  }
  return result;
}

uint64_t directoryConstructEntry(int a1, uint64_t a2)
{
  *(_WORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 8) = -1;
  *(_DWORD *)(a2 + 12) = a1;
  *(_DWORD *)(a2 + 84) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 92) = xmmword_22A4C11F0;
  *(_QWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 144) = -1;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  return 0;
}

uint64_t leReadTime(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = 0;
  v2 = *a1;
  time_tFromWinFileTime((unsigned int *)&v2, &v3);
  return v3;
}

uint64_t time_tFromWinFileTime(unsigned int *a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL4 v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  v2 = *a1;
  if (*(_QWORD *)a1)
  {
    v4 = HIWORD(v2);
    v5 = (unsigned __int16)*a1 < 0x8000u;
    if ((unsigned __int16)*a1 < 0x8000u)
      v6 = 0x8000;
    else
      v6 = -32768;
    v7 = (__PAIR64__(v4, (unsigned __int16)*a1) - 0x8000) >> 32;
    v8 = v4 >= (v5 | 0xD53Eu);
    v9 = v4 - (v5 | 0xD53E);
    if (!v8)
    {
      v9 = v7 + 10946;
      v5 = 1;
    }
    if (v5)
      v10 = -27111903;
    else
      v10 = -27111902;
    v11 = a1[1] + v10;
    if (v11 < 0)
      v9 = 0xFFFF - v9;
    v12 = v11 ^ (v11 >> 31);
    v13 = v9 + ((v12 % 0x2710) << 16);
    v14 = v13 / 0x2710 + ((v12 / 0x2710 - 1000 * ((4294968 * (unint64_t)(v12 / 0x2710)) >> 32)) << 16);
    v15 = v6 + (unsigned __int16)v2;
    if (v11 >= 0)
      v16 = v14 / 0x3E8;
    else
      v16 = 0xFFFF - v14 / 0x3E8;
    if (v11 < 0)
      v15 = 0xFFFF - v15;
    LODWORD(v17) = ((v15 + ((v13 % 0x2710) << 16)) / 0x2710 + ((v14 % 0x3E8) << 16)) / 0x3E8;
    if (v11 >= 0)
      v17 = v17;
    else
      v17 = (0xFFFF - v17);
    v3 = ((v16 << 16) | ((unint64_t)((v12 / 0x989680) ^ (v11 >> 31)) << 32)) + v17;
  }
  else
  {
    v3 = 0;
  }
  *a2 = v3;
  return 0;
}

uint64_t headerGetMajorVersion(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 26);
}

uint64_t directoryNormalize(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t result;
  int v6;
  int v7;
  int v8;

  v2 = a2[21];
  if (v2 == 10)
    return 16;
  if (!v2)
    return 0;
  a2[21] = 10;
  v6 = a2[25];
  if (v6 != -1)
  {
    result = directoryNormalize(a1, a1 + 168 * v6);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 168 * (int)a2[25] + 8) = -1;
  }
  v7 = a2[23];
  if (v7 != -1)
  {
    result = directoryNormalize(a1, a1 + 168 * v7);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 168 * (int)a2[23] + 8) = a2[3];
  }
  v8 = a2[24];
  if (v8 != -1)
  {
    result = directoryNormalize(a1, a1 + 168 * v8);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 168 * (int)a2[24] + 8) = a2[3];
  }
  result = 0;
  a2[21] = v2;
  return result;
}

uint64_t storageConstructRoot(uint64_t a1, _QWORD *a2)
{
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t result;
  uint64_t v7;
  int SmallStreamCutoff;
  uint64_t *v9;
  uint64_t v10;

  TOC = (uint64_t *)rootStorageGetTOC(a1);
  EntryAtIndex = tocGetEntryAtIndex(TOC, 0);
  if (!EntryAtIndex)
    return 11;
  result = storageConstructFromDirEntry(EntryAtIndex, a2);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(*a2 + 16) = 0;
    v7 = *a2;
    *(_DWORD *)(v7 + 8) = 0;
    *(_QWORD *)v7 = a1;
    SmallStreamCutoff = headerGetSmallStreamCutoff(a1);
    result = 0;
    v9 = (uint64_t *)(*a2 + 40);
    v10 = *v9;
    *(_DWORD *)(*a2 + 32) = SmallStreamCutoff;
    if (!v10)
    {
      documentPropertiesConstruct((uint64_t)v9);
      return 0;
    }
  }
  return result;
}

uint64_t rootStorageGetTOC(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  result = *(_QWORD *)(a1 + 40);
  if (!result)
    return 0;
  return result;
}

uint64_t tocGetEntryAtIndex(uint64_t *a1, unsigned int a2)
{
  return directoryGetAtIndex(*a1, a2);
}

uint64_t directoryGetAtIndex(uint64_t a1, unsigned int a2)
{
  return a1 + 168 * a2;
}

uint64_t storageConstructFromDirEntry(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int Index;
  uint64_t v8;

  v8 = 0;
  if ((directoryGetType(a1) & 0xFFFFFFFB) != 1)
    return 9;
  v4 = storageConstruct(&v8);
  result = 5;
  if (!v4)
  {
    v6 = v8;
    if (v8)
    {
      Index = directoryGetIndex(a1);
      result = 0;
      *(_DWORD *)(v6 + 8) = Index;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t directoryGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t storageConstruct(_QWORD *a1)
{
  _OWORD *v2;
  void *v3;
  uint64_t v4;

  v2 = malloc_type_malloc(0x30uLL, 0x1020040F265C080uLL);
  if (!v2)
    return 5;
  v3 = v2;
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  *((_DWORD *)v2 + 2) = -1;
  v4 = openListConstruct((_QWORD *)v2 + 3);
  if ((_DWORD)v4)
    free(v3);
  else
    *a1 = v3;
  return v4;
}

uint64_t openListConstruct(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  if (!a1)
    return 6;
  v2 = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
  if (!v2)
    return 5;
  v3 = v2;
  result = 0;
  *v3 = 0;
  v3[1] = 0;
  *a1 = v3;
  return result;
}

uint64_t directoryGetIndex(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

uint64_t headerGetSmallStreamCutoff(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 56);
  return result;
}

uint64_t documentPropertiesConstruct(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v2 = malloc_type_malloc(0x28uLL, 0x20040769AC3DAuLL);
  *(_QWORD *)a1 = v2;
  if (!v2)
    return 5;
  v3 = v2;
  result = 0;
  v3[4] = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  **(_QWORD **)a1 = 0;
  *(_QWORD *)(*(_QWORD *)a1 + 24) = 0;
  *(_QWORD *)(*(_QWORD *)a1 + 8) = 0;
  *(_QWORD *)(*(_QWORD *)a1 + 16) = 0;
  *(_QWORD *)(*(_QWORD *)a1 + 32) = 0;
  return result;
}

uint64_t directoryGetStartSector(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t fatGetChainLastSector(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v9;
  unsigned int *v10;

  if (a2 > 0xFFFFFFFD)
  {
    a2 = -1;
LABEL_3:
    result = 0;
    *a3 = a2;
    return result;
  }
  v4 = *(_DWORD *)(a1 + 16);
  if (v4 > a2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (unsigned int *)(v5 + 4 * a2);
    v7 = *v6;
    if (*v6 <= v4 || v7 == -2)
    {
      if (v7 == -2)
        goto LABEL_3;
      v9 = 1;
      while (v7 < v4)
      {
        if (++v9 > v4)
          break;
        v10 = v6;
        v6 = (unsigned int *)(v5 + 4 * v7);
        v7 = *v6;
        if (*v6 > v4 && v7 != -2)
          break;
        if (v7 == -2)
        {
          a2 = *v10;
          goto LABEL_3;
        }
      }
    }
  }
  return 8;
}

uint64_t getStorageFromRoot(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = 6;
  if (a1 && a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      result = 0;
      *a2 = v4;
    }
    else
    {
      return 11;
    }
  }
  return result;
}

void PptBinaryReader::commonStart(PptBinaryReader *this)
{
  SsrwOOStorage *v2;
  EshHeader *v3;
  const void *v4;
  PptEshObjectFactory *v5;
  PptParserVisitor *v6;
  PptCurrentUserAtom *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  PptParserVisitor *v15;
  PptEshReader *v16;
  EshHeader *v17;
  SsrwOOStgInfo *v18;
  PptPersistDir *v19;
  int OffsetByRef;
  uint64_t NextOffset;
  SsrwOOStgStream *v22;
  SsrwOOStgInfo *v23;
  unsigned int Size;
  PptEshReader *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *exception;

  v2 = (SsrwOOStorage *)((char *)this + 40);
  if (SsrwOOStorage::hasChild((SsrwOOStorage *)((char *)this + 40), (const unsigned __int16 *)"P"))
  {
    v2 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v2, (const unsigned __int16 *)"P");
    *((_QWORD *)this + 16) = v2;
  }
  *((_QWORD *)this + 17) = v2;
  *((_QWORD *)this + 19) = SsrwOOStorage::openStream(v2, (const unsigned __int16 *)"C");
  v3 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4)
  else
    v5 = 0;
  v6 = (PptParserVisitor *)operator new(0x48uLL);
  PptParserVisitor::PptParserVisitor(v6, v5);
  *((_QWORD *)this + 23) = v6;
  PptParserVisitor::init(v6, *((SsrwOOStream **)this + 19));
  PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), v3, 0);
  if (v3->var3 == 4086)
  {
    v7 = (PptCurrentUserAtom *)operator new(0x58uLL);
    PptCurrentUserAtom::PptCurrentUserAtom(v7, v3);
    *((_QWORD *)this + 26) = v7;
    if (v7)
    else
      v8 = 0;
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v8 + 112))(v8, *((_QWORD *)this + 23));
    v11 = v8 + 13;
    v10 = v8[13];
    v9 = v11[1];
    v12 = *((_QWORD *)this + 23);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *((_QWORD *)this + 23) = 0;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 19) + 152))(*((_QWORD *)this + 19), 0);
    v13 = *((_QWORD *)this + 19);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    *((_QWORD *)this + 19) = 0;
    v14 = *((_QWORD *)this + 26);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    *((_QWORD *)this + 26) = 0;
    if (v10 == -476987297 || v10 == -204356385)
    {
      *((_QWORD *)this + 19) = SsrwOOStorage::openStream(*((SsrwOOStorage **)this + 17), L"PowerPoint Document");
      v15 = (PptParserVisitor *)operator new(0x48uLL);
      PptParserVisitor::PptParserVisitor(v15, v5);
      *((_QWORD *)this + 23) = v15;
      PptParserVisitor::init(v15, *((SsrwOOStream **)this + 19));
      v16 = (PptEshReader *)operator new(0x60uLL);
      PptEshReader::PptEshReader(v16);
      *((_QWORD *)this + 21) = v16;
      EshGroupProperties::init((uint64_t)v16, *((_QWORD *)this + 2));
      v17 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v17);
      *((_QWORD *)this + 25) = v17;
      v18 = (SsrwOOStgInfo *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 168))(*((_QWORD *)this + 19));
      *((_DWORD *)this + 55) = SsrwOOStgInfo::getSize(v18);
      v19 = (PptPersistDir *)operator new(0x68uLL);
      PptPersistDir::PptPersistDir(v19, *((PptParserVisitor **)this + 23));
      *((_QWORD *)this + 24) = v19;
      PptPersistDir::getDirEntries(v19, v9);
      OffsetByRef = PptPersistDir::getOffsetByRef(*((PptPersistDir **)this + 24), *(_DWORD *)(*((_QWORD *)this + 24) + 84));
      *((_DWORD *)this + 54) = OffsetByRef;
      if (OffsetByRef)
      {
        if (PptPersistDir::getRefByOffset(*((PptPersistDir **)this + 24), 0) == -1)
          NextOffset = PptPersistDir::getNextOffset(*((PptPersistDir **)this + 24), 0);
        else
          NextOffset = 0;
        *((_DWORD *)this + 54) = NextOffset;
      }
      else
      {
        NextOffset = 0;
      }
      PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), *((EshHeader **)this + 25), NextOffset);
      *((_BYTE *)this + 164) = 0;
      if (SsrwOOStorage::hasChild(*((SsrwOOStorage **)this + 17), L"Pictures"))
      {
        v22 = SsrwOOStorage::openStream(*((SsrwOOStorage **)this + 17), L"Pictures");
        *((_QWORD *)this + 18) = v22;
        *((_DWORD *)this + 56) = (*(uint64_t (**)(SsrwOOStgStream *))(*(_QWORD *)v22 + 40))(v22);
        v23 = (SsrwOOStgInfo *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 168))(*((_QWORD *)this + 18));
        Size = SsrwOOStgInfo::getSize(v23);
        *((_DWORD *)this + 57) = Size;
        if (Size < 9)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 18) + 152))(*((_QWORD *)this + 18), 0);
          v26 = *((_QWORD *)this + 18);
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          *((_QWORD *)this + 18) = 0;
        }
        else
        {
          v25 = (PptEshReader *)operator new(0x60uLL);
          PptEshReader::PptEshReader(v25);
          *((_QWORD *)this + 22) = v25;
          EshGroupProperties::init((uint64_t)v25, *((_QWORD *)this + 2));
        }
      }
      *((_QWORD *)this + 29) = 0;
      JUMPOUT(0x22E2DD408);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8003;
  }
  v27 = __cxa_allocate_exception(4uLL);
  *v27 = 4001;
}

void sub_22A0D2208(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t SsrwOOStorage::hasChild(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  int ChildrenInfo;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v12;
  _DWORD *exception;
  void *v14;
  signed int v15;

  v15 = 0;
  v14 = 0;
  ChildrenInfo = getChildrenInfo((uint64_t)this->var0, (void ***)&v14, (unsigned int *)&v15);
  if (ChildrenInfo)
  {
    v12 = ChildrenInfo;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v12;
  }
  if (v15 < 1 || v14 == 0)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  do
  {
    if (!_ChWcscmp(*(const unsigned __int16 **)((char *)v14 + v6), a2))
      v7 = 1;
    v5 = v7 & 1;
    v6 += 64;
  }
  while (v8++ < v15 && (_DWORD)v5 == 0);
  freeInfo((void **)v14, v15);
  free(v14);
  return v5;
}

size_t getChildrenInfo(uint64_t a1, void ***a2, unsigned int *a3)
{
  size_t result;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  void **v12;
  void **v13;
  unsigned int v14;

  result = 6;
  if (a1 && a2 && a3)
  {
    TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    if (!EntryAtIndex)
      return 6;
    v9 = EntryAtIndex;
    result = tocCountEntryChildren((uint64_t)TOC, EntryAtIndex);
    if (!(_DWORD)result)
    {
      *a3 = 0;
      return result;
    }
    v10 = result;
    if ((_DWORD)result == -1)
    {
      *a3 = 0;
      return 16;
    }
    v11 = (unint64_t)result << 6;
    if (v11 >= v10)
    {
      v12 = (void **)malloc_type_malloc(v11, 0xBF89B1ADuLL);
      if (v12)
      {
        v13 = v12;
        v14 = tocFillChildrenStgArray(TOC, v9, (uint64_t)v12);
        if (v14 == v10)
        {
          result = 0;
          *a2 = v13;
          *a3 = v10;
          return result;
        }
        freeInfo(v13, v14);
        free(v13);
      }
    }
    return 5;
  }
  return result;
}

size_t tocCountEntryChildren(uint64_t a1, uint64_t a2)
{
  size_t result;

  result = directoryGetFirstChild(*(_QWORD *)a1, a2);
  if (result)
    return directoryCountChildren(result, 0, *(_QWORD *)a1, *(unsigned int *)(a1 + 8));
  return result;
}

uint64_t directoryGetFirstChild(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 100);
  if (v2 == -1)
    return 0;
  else
    return a1 + 168 * v2;
}

size_t directoryCountChildren(uint64_t a1, int a2, uint64_t a3, size_t count)
{
  size_t v4;
  _BYTE *v8;
  _BYTE v10[1024];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if ((count & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = count;
  if ((_DWORD)count)
  {
    if (count > 0x3FF)
    {
      v8 = malloc_type_calloc(count, 1uLL, 0x100004077774924uLL);
      v4 = directoryCountChildrenAndCheck(a1, a2, a3, v4, (uint64_t)v8);
      if (v8 != v10)
        free(v8);
    }
    else
    {
      bzero(v10, 0x400uLL);
      return directoryCountChildrenAndCheck(a1, a2, a3, v4, (uint64_t)v10);
    }
  }
  return v4;
}

uint64_t directoryCountChildrenAndCheck(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v8 = result;
    v9 = (a2 + 1);
    v10 = *(unsigned int *)(result + 92);
    if ((_DWORD)v10 == -1
      || (result = 0xFFFFFFFFLL, (v10 & 0x80000000) == 0)
      && (int)v10 < (int)a4
      && !*(_BYTE *)(a5 + v10)
      && (*(_BYTE *)(a5 + v10) = 1,
          result = directoryCountChildrenAndCheck(a3 + 168 * v10, v9, a3, a4, a5),
          v9 = result,
          *(_BYTE *)(a5 + v10) = 0,
          (_DWORD)result != -1))
    {
      v11 = *(unsigned int *)(v8 + 96);
      if ((_DWORD)v11 == -1)
      {
        return v9;
      }
      else
      {
        result = 0xFFFFFFFFLL;
        if ((v11 & 0x80000000) == 0 && (int)v11 < (int)a4 && !*(_BYTE *)(a5 + v11))
        {
          *(_BYTE *)(a5 + v11) = 1;
          result = directoryCountChildrenAndCheck(a3 + 168 * v11, v9, a3, a4, a5);
          *(_BYTE *)(a5 + v11) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t tocFillChildrenStgArray(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  unsigned int v7;

  result = directoryGetFirstChild(*a1, a2);
  if (result)
  {
    v7 = 0;
    directoryFillStgArray(result, a3, &v7, *a1);
    if (v6)
      return 0;
    else
      return v7;
  }
  return result;
}

void directoryFillStgArray(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  __n128 v8;
  int v9;
  int v10;
  int v11;

  v8 = directoryFillStgInfo(a1, (uint64_t *)(a2 + ((unint64_t)*a3 << 6)));
  if (!v9)
  {
    ++*a3;
    v10 = *(_DWORD *)(a1 + 92);
    if (v10 == -1 || !directoryFillStgArray(a4 + 168 * v10, a2, a3, a4, v8))
    {
      v11 = *(_DWORD *)(a1 + 96);
      if (v11 != -1)
        directoryFillStgArray(a4 + 168 * v11, a2, a3, a4, v8);
    }
  }
}

__n128 directoryFillStgInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  int v14;

  if (a1 && a2)
  {
    v4 = _ChWcslen((const unsigned __int16 *)(a1 + 16));
    v6 = v4 + 1;
    if (v4 == -1 || v6 < 0 || !(2 * v6))
    {
      *a2 = 0;
    }
    else
    {
      v7 = malloc_type_malloc(2 * v6, 0xBF89B1ADuLL);
      *a2 = (uint64_t)v7;
      if (v7)
      {
        v8 = v7;
        v9 = _ChWcslen((const unsigned __int16 *)(a1 + 16));
        bzero(v8, 2 * v9 + 2);
        v10 = (_WORD *)*a2;
        v11 = _ChWcslen((const unsigned __int16 *)(a1 + 16));
        memcpy(v10, (const void *)(a1 + 16), 2 * v11);
        v12 = (_WORD *)*a2;
        v12[_ChWcslen((const unsigned __int16 *)(a1 + 16))] = 0;
        v13 = *(int *)(a1 + 84);
        if (v13 <= 5 && ((0x27u >> v13) & 1) != 0)
        {
          v14 = *(_DWORD *)(a1 + 104);
          *((_DWORD *)a2 + 2) = dword_22A4C1200[v13];
          *((_DWORD *)a2 + 3) = v14;
          a2[2] = *(_QWORD *)(a1 + 152);
          *(_OWORD *)(a2 + 3) = *(_OWORD *)(a1 + 128);
          *((_DWORD *)a2 + 10) = headerGetSmallStreamCutoff(*(_QWORD *)a1);
          result = *(__n128 *)(a1 + 108);
          *(__n128 *)((char *)a2 + 44) = result;
        }
      }
    }
  }
  return result;
}

uint64_t _ChWcslenA(uint64_t a1)
{
  uint64_t v1;

  v1 = 0;
  while (*(_DWORD *)(a1 + 4 * v1++))
    ;
  return v1 - 1;
}

_WORD *WcharToChCHAR2(_WORD *result, int *a2)
{
  int v2;
  _WORD *v3;
  int *v4;
  int v5;

  v2 = *a2;
  v3 = result;
  if (*a2)
  {
    v4 = a2 + 1;
    v3 = result;
    do
    {
      *v3++ = v2;
      v5 = *v4++;
      LOWORD(v2) = v5;
    }
    while (v5);
  }
  *v3 = 0;
  return result;
}

uint64_t _ChWcscmp(const unsigned __int16 *a1, const unsigned __int16 *a2)
{
  unsigned int v2;
  const unsigned __int16 *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1 + 1;
    while (1)
    {
      v4 = *a2;
      if (v2 < v4)
        return 0xFFFFFFFFLL;
      if (v4 < v2)
        return 1;
      ++a2;
      v5 = *v3++;
      v2 = v5;
      if (!v5)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    if (*a2)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
}

uint64_t freeInfo(void **a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;

  result = 6;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (a2)
    {
      v4 = a2;
      do
      {
        if (*a1)
          free(*a1);
        a1 += 8;
        --v4;
      }
      while (v4);
    }
    return 0;
  }
  return result;
}

SsrwOOStgStream *SsrwOOStorage::openStream(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  int v2;
  SsrwOOStgStream *v3;
  int v5;
  _DWORD *exception;
  _Stream *v7;

  v7 = 0;
  v2 = openStream((uint64_t)this->var0, a2, (uint64_t *)&v7);
  if (v2)
  {
    v5 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  v3 = (SsrwOOStgStream *)operator new(0xC8uLL);
  SsrwOOStgStream::SsrwOOStgStream(v3, v7);
  return v3;
}

void sub_22A0D2A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v12;
  _DWORD *exception;

  v12 = v10;
  operator delete(v12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    closeStream(&a10);
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5;
  }
  _Unwind_Resume(a1);
}

uint64_t _ChWcslen(const unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = 0;
  while (a1[v1++])
    ;
  return v1 - 1;
}

_DWORD *ChCHAR2ToWchar(_DWORD *result, _WORD *a2)
{
  int v2;
  _DWORD *v3;
  unsigned __int16 *v4;
  int v5;

  v2 = (unsigned __int16)*a2;
  v3 = result;
  if (*a2)
  {
    v4 = a2 + 1;
    v3 = result;
    do
    {
      *v3++ = v2;
      v5 = *v4++;
      v2 = v5;
    }
    while (v5);
  }
  *v3 = 0;
  return result;
}

uint64_t openStream(uint64_t a1, const unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t ChildEntry;
  uint64_t v6;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t v11;

  if (!a1)
    return 6;
  ChildEntry = 6;
  if (a2)
  {
    v6 = *(_QWORD *)a1;
    if (v6)
    {
      if (a3 && *a2)
      {
        if ((*(_DWORD *)(a1 + 32) | 2) == 2)
        {
          v11 = 0;
          TOC = (uint64_t *)rootStorageGetTOC(v6);
          EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
          if (EntryAtIndex)
          {
            ChildEntry = tocFindChildEntry(TOC, EntryAtIndex, a2, &v11);
            if (!(_DWORD)ChildEntry)
            {
              ChildEntry = streamConstruct(*(_QWORD *)a1, a1, v11, *(unsigned int *)(a1 + 32), a3);
              if (!(_DWORD)ChildEntry)
              {
                if ((*(_DWORD *)(a1 + 32) - 1) <= 1
                  && (ChildEntry = streamUpgradeMiniToRegular((uint64_t *)*a3), (_DWORD)ChildEntry)
                  || (ChildEntry = openListAppend(*(_QWORD *)(a1 + 24), 2, *a3), (_DWORD)ChildEntry))
                {
                  streamDestroy((void **)a3);
                }
              }
            }
          }
          else
          {
            return 11;
          }
        }
        else
        {
          return 2;
        }
      }
    }
  }
  return ChildEntry;
}

uint64_t tocFindChildEntry(uint64_t *a1, uint64_t a2, const unsigned __int16 *a3, uint64_t *a4)
{
  return directoryFindChild(a2, a3, *a1, a4);
}

uint64_t directoryFindChild(uint64_t a1, const unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  int v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;

  v7 = *(_DWORD *)(a1 + 100);
  v8 = *(_DWORD *)(a1 + 84);
  if (v8 == 1)
  {
    if (!a4)
      return 6;
  }
  else
  {
    result = 6;
    if (!a4 || v8 != 5)
      return result;
  }
  *a4 = 0;
  if (v7 == -1)
    return 11;
  while (1)
  {
    if (!*(_DWORD *)(a3 + 168 * v7 + 84))
      return 16;
    v10 = v7;
    v11 = compareNames((const unsigned __int16 *)(a3 + 168 * v7 + 16), a2);
    if (!v11)
      break;
    v12 = a3 + 168 * v10;
    v13 = (int *)(v12 + 92);
    v14 = (int *)(v12 + 96);
    if (v11 > 0)
      v14 = v13;
    v7 = *v14;
    if (v7 == -1)
    {
      v15 = *a4;
      goto LABEL_16;
    }
  }
  v15 = a3 + 168 * v10;
  *a4 = v15;
LABEL_16:
  if (v15)
    return 0;
  else
    return 11;
}

uint64_t compareNames(const unsigned __int16 *a1, const unsigned __int16 *a2)
{
  const unsigned __int16 *v3;
  int v4;
  int v5;
  uint64_t v6;
  __darwin_ct_rune_t v7;
  unsigned __int16 v8;
  __darwin_ct_rune_t v9;
  unsigned __int16 v10;

  v3 = a1;
  v4 = _ChWcslen(a1);
  v5 = _ChWcslen(a2);
  if (v4 == v5)
  {
    if (v4 < 1)
    {
      return 0;
    }
    else
    {
      v6 = v4;
      while (1)
      {
        v7 = *v3++;
        v8 = __toupper(v7);
        v9 = *a2++;
        v10 = __toupper(v9);
        if (v8 < v10)
          return 0xFFFFFFFFLL;
        if (v8 > v10)
          break;
        if (!--v6)
          return 0;
      }
      return 1;
    }
  }
  else if (v4 < v5)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

uint64_t streamConstruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Header;
  uint64_t *TOC;
  int Type;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char SectorShift;
  char SmallSectorShift;
  uint64_t StreamSharedBlock;
  uint64_t v19;
  uint64_t StreamLength;
  void *v21;
  uint64_t *v22;
  uint64_t EntryAtIndex;
  uint64_t v24;
  uint64_t SmallFat;
  uint64_t v27;
  uint64_t Chain;
  unsigned int StartSector;
  uint64_t *v30;

  Header = rootStorageGetHeader(a1);
  TOC = (uint64_t *)rootStorageGetTOC(a1);
  Type = directoryGetType(a3);
  if (Type != 5 && Type != 2)
    return 10;
  v13 = (char *)malloc_type_malloc(0x80uLL, 0x1030040FF6B07E4uLL);
  if (!v13)
    return 5;
  v14 = (uint64_t)v13;
  v30 = a5;
  *(_OWORD *)(v13 + 8) = 0u;
  *((_QWORD *)v13 + 15) = 0;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  v15 = (uint64_t *)(v13 + 56);
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 2) = a2;
  *((_DWORD *)v13 + 2) = directoryGetIndex(a3);
  SectorShift = headerGetSectorShift(Header);
  SmallSectorShift = headerGetSmallSectorShift(Header);
  StreamSharedBlock = directoryQueryStreamSharedBlock(a3, v15);
  if (!(_DWORD)StreamSharedBlock)
  {
    v19 = *v15;
    if (!*(_DWORD *)(*v15 + 20))
    {
      StreamLength = directoryGetStreamLength(a3);
      v19 = *v15;
      *(_QWORD *)*v15 = StreamLength;
    }
    *(_WORD *)(v19 + 32) = 0;
    if (headerGetSmallStreamCutoff(a1) != 1 && headerGetSmallStreamCutoff(a1) != 2)
    {
      *(_QWORD *)(v14 + 32) = 0;
LABEL_15:
      if ((a4 & 0xFFFFFFFD) != 0)
        goto LABEL_16;
      if (streamShouldBeMini(v14))
      {
        SmallFat = rootStorageGetSmallFat(a1);
      }
      else
      {
        SmallFat = rootStorageGetFat(a1);
        SmallSectorShift = SectorShift;
      }
      if (!*(_DWORD *)(*v15 + 20))
      {
        *(_DWORD *)(*v15 + 20) = calcReqdSectors(*(_QWORD *)*v15, 1 << SmallSectorShift);
        StartSector = directoryGetStartSector(a3);
        Chain = fatGetChain(SmallFat, StartSector, (unsigned int *)(*v15 + 20), (_QWORD *)(*v15 + 8));
        if ((_DWORD)Chain)
          goto LABEL_30;
        *(_DWORD *)(*v15 + 16) = *(_DWORD *)(*v15 + 20);
      }
      if (!streamShouldBeMini(v14)
        || *(_QWORD *)(*v15 + 24)
        || *(_DWORD *)(*v15 + 36) != 1
        || (v27 = tocGetEntryAtIndex(TOC, 0), Chain = streamConstruct(a1, a2, v27, a4, *v15 + 24), !(_DWORD)Chain))
      {
LABEL_16:
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 40) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 48) = a4;
        v22 = (uint64_t *)rootStorageGetTOC(*(_QWORD *)v14);
        EntryAtIndex = tocGetEntryAtIndex(v22, *(_DWORD *)(v14 + 8));
        directoryFillStgInfo(EntryAtIndex, (uint64_t *)(v14 + 64));
        StreamSharedBlock = v24;
        if (!(_DWORD)v24)
        {
          *v30 = v14;
          return StreamSharedBlock;
        }
        goto LABEL_17;
      }
LABEL_30:
      StreamSharedBlock = Chain;
LABEL_17:
      directoryReleaseStreamSharedBlock(a3);
      free((void *)v14);
      return StreamSharedBlock;
    }
    v21 = malloc_type_malloc(1 << SectorShift, 0x8B150643uLL);
    *(_QWORD *)(v14 + 32) = v21;
    if (v21)
    {
      bzero(v21, 1 << SectorShift);
      goto LABEL_15;
    }
    free((void *)v14);
    return 5;
  }
  return StreamSharedBlock;
}

uint64_t directoryQueryStreamSharedBlock(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v5;
  uint64_t *v6;
  int RefCount;
  uint64_t result;
  int v9;

  if (!a1)
    return 6;
  v2 = *(_DWORD *)(a1 + 84);
  if (v2 != 5 && v2 != 2)
    return 6;
  v6 = (uint64_t *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 160);
  if (!v5)
  {
    if (!a2)
      return 6;
    goto LABEL_14;
  }
  RefCount = streamSharedBlockGetRefCount(v5);
  result = 6;
  if (a2 && RefCount)
  {
    if (*v6)
    {
      v9 = streamSharedBlockGetRefCount(*v6);
      streamSharedBlockSetRefCount(*v6, v9 + 1);
      result = 0;
      *a2 = *v6;
      return result;
    }
LABEL_14:
    result = streamConstructSharedBlock(v6);
    if (!(_DWORD)result)
    {
      *a2 = *v6;
      streamSharedBlockSetRefCount(*v6, 1);
      return 0;
    }
  }
  return result;
}

uint64_t streamConstructSharedBlock(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t result;

  if (!a1)
    return 6;
  v2 = malloc_type_malloc(0x28uLL, 0x1030040D90EF640uLL);
  if (!v2)
    return 5;
  v3 = v2;
  result = 0;
  v3[9] = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_WORD *)v3 + 16) = 0;
  *a1 = v3;
  return result;
}

uint64_t streamSharedBlockSetRefCount(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

uint64_t directoryGetStreamLength(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t streamShouldBeMini(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Header;
  unsigned int SmallStreamCutoff;
  uint64_t *TOC;
  uint64_t EntryAtIndex;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v1 + 32))
    return *(unsigned __int8 *)(v1 + 33);
  Header = rootStorageGetHeader(*(_QWORD *)a1);
  SmallStreamCutoff = headerGetSmallStreamCutoff(Header);
  TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
  EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
  *(_BYTE *)(v1 + 32) = 1;
  result = **(_QWORD **)(a1 + 56) < (unint64_t)SmallStreamCutoff
        && directoryGetType(EntryAtIndex) != 5;
  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t rootStorageGetSmallFat(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    return 0;
  return result;
}

unint64_t calcReqdSectors(uint64_t a1, unsigned int a2)
{
  return ((unint64_t)(a2 - 1) + a1) / a2;
}

uint64_t rootStorageGetFat(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  result = *(_QWORD *)(a1 + 24);
  if (!result)
    return 0;
  return result;
}

uint64_t openListAppend(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 6;
  v6 = malloc_type_malloc(0x18uLL, 0x1020040F89CB87BuLL);
  if (!v6)
    return 5;
  *v6 = a2;
  v6[1] = 0;
  v7 = (_QWORD *)a1;
  *((_QWORD *)v6 + 1) = a3;
  *((_QWORD *)v6 + 2) = 0;
  do
  {
    v8 = v7;
    v9 = *v7;
    v7 = (_QWORD *)(*v7 + 16);
  }
  while (v9);
  v10 = 0;
  *v8 = v6;
  ++*(_DWORD *)(a1 + 8);
  return v10;
}

void SsrwOOStgStream::SsrwOOStgStream(SsrwOOStgStream *this, _Stream *a2)
{
  const _StgInfo *StreamInfo;

  *(_QWORD *)this = &off_24F3A68B8;
  StreamInfo = (const _StgInfo *)getStreamInfo((uint64_t)a2);
  SsrwOOStgInfo::SsrwOOStgInfo((SsrwOOStgStream *)((char *)this + 8), StreamInfo);
  *((_QWORD *)this + 24) = a2;
}

EshHeader *EshHeader::makeDefault(EshHeader *this)
{
  *(_QWORD *)((char *)&this->var1 + 1) = 0;
  *(_QWORD *)&this->var0 = 0;
  return this;
}

void PptParserVisitor::PptParserVisitor(PptParserVisitor *this, PptEshObjectFactory *a2)
{
  *(_QWORD *)this = &off_24F3BC9F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = 0;
  EshHeader::makeDefault((EshHeader *)this + 3);
  *((_DWORD *)this + 16) = 0;
}

void PptParserVisitor::init(PptParserVisitor *this, SsrwOOStream *a2)
{
  EshParserVisitor *v3;
  PptSkipVisitor *v4;
  _DWORD *exception;

  *((_QWORD *)this + 1) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4001;
  }
  v3 = (EshParserVisitor *)operator new(0x40uLL);
  EshParserVisitor::EshParserVisitor(v3, *((SsrwOOStream **)this + 1), *((const EshObjectFactory **)this + 4));
  *((_QWORD *)this + 2) = v3;
  v4 = (PptSkipVisitor *)operator new(0xB8uLL);
  PptSkipVisitor::PptSkipVisitor(v4, *((SsrwOOStream **)this + 1), 1, 0);
  *((_QWORD *)this + 3) = v4;
}

void sub_22A0D3414(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshParserVisitor::EshParserVisitor(EshParserVisitor *this, SsrwOOStream *a2, const EshObjectFactory *a3)
{
  uint64_t v5;

  EshDataModelVisitor::EshDataModelVisitor(this);
  *(_QWORD *)v5 = &off_24F3A5668;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = a2;
  *(_DWORD *)(v5 + 48) = 255;
  *(_QWORD *)(v5 + 56) = a3;
}

void EshDataModelVisitor::EshDataModelVisitor(EshDataModelVisitor *this)
{
  *(_QWORD *)this = off_24F39E9A0;
  *((_QWORD *)this + 1) = 0;
}

void PptSkipVisitor::PptSkipVisitor(PptSkipVisitor *this, SsrwOOStream *a2, char a3, char a4)
{
  *(_QWORD *)this = a2;
  *((_BYTE *)this + 8) = a3;
  *((_BYTE *)this + 9) = a4;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
}

double PptParserVisitor::parse(SsrwOOStream **this, EshHeader *a2, uint64_t a3)
{
  return PptParserVisitor::parse((PptParserVisitor *)this, a2, a3, this[1]);
}

double PptParserVisitor::parse(PptParserVisitor *this, EshHeader *a2, uint64_t a3, SsrwOOStream *a4)
{
  void **var0;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *exception;

  var0 = a4->var0;
  if ((_DWORD)a3 == -1)
  {
    v8 = ((uint64_t (*)(SsrwOOStream *))var0[5])(a4);
  }
  else
  {
    v8 = a3;
    ((void (*)(SsrwOOStream *, uint64_t, _QWORD))var0[2])(a4, a3, 0);
  }
  v9 = (*((uint64_t (**)(SsrwOOStream *))a4->var0 + 10))(a4);
  a2->var4 = v9 & 0xF;
  a2->var2 = v9 >> 4;
  a2->var3 = (*((uint64_t (**)(SsrwOOStream *))a4->var0 + 10))(a4);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if (v10 >= 0x10000001)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  a2->var0 = v10;
  a2->var1 = v8;
  if (a2->var3 == 5003)
    a2->var4 = 15;
  return EshHeader::operator=((uint64_t)this + 48, (uint64_t)a2);
}

uint64_t SsrwOOStgStream::seek(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  int v4;
  _DWORD *exception;

  result = streamSeek(*(_QWORD *)(a1 + 192), a2, a3);
  if ((_DWORD)result)
  {
    v4 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
  }
  return result;
}

uint64_t streamSeek(uint64_t a1, int a2, int a3)
{
  return streamSeek64(a1, a2, a3);
}

uint64_t streamSeek64(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t result;

  if (a3)
  {
    if (a3 == 1)
    {
      v5 = (unint64_t *)(a1 + 24);
    }
    else
    {
      if (a3 != 2)
        return 6;
      v5 = *(unint64_t **)(a1 + 56);
    }
    v6 = *v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = __CFADD__(v6, a2);
  if (a2 >= 1 && v7 || a2 < 0 && v6 < -a2)
    return 6;
  if ((*(_DWORD *)(a1 + 48) - 1) > 1
    || *(_DWORD *)(a1 + 44) == -1
    || (result = streamFlushToDisk(a1), !(_DWORD)result))
  {
    result = 0;
    *(_QWORD *)(a1 + 24) = v6 + a2;
  }
  return result;
}

uint64_t SsrwOOStgStream::readUInt16(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  unsigned __int16 v5;

  v5 = 0;
  v1 = readUInt16(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t readUInt16(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  unsigned __int16 v5;
  unsigned int v6;

  v6 = 2;
  v2 = 6;
  if (a1 && a2)
  {
    v2 = streamRead(a1, (uint64_t)&v5, &v6);
    *a2 = CsLeReadUInt16(&v5);
  }
  return v2;
}

uint64_t streamRead(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t Status;
  uint64_t v7;
  uint64_t Header;
  char SectorShift;
  char SmallSectorShift;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *Sector;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  uint64_t v30;
  int v31;

  v31 = 0;
  if (!a1)
    return 6;
  Status = 6;
  if (a3)
  {
    if (a2)
    {
      v7 = *(_QWORD *)a1;
      if (v7)
      {
        if ((*(_DWORD *)(a1 + 48) | 2) == 2)
        {
          if (*a3)
          {
            if (*(_QWORD *)(a1 + 24) >= **(_QWORD **)(a1 + 56))
            {
              *a3 = 0;
              return 15;
            }
            else
            {
              Header = rootStorageGetHeader(v7);
              SectorShift = headerGetSectorShift(Header);
              SmallSectorShift = headerGetSmallSectorShift(Header);
              v11 = *(uint64_t **)(a1 + 56);
              v12 = v11[3];
              if (v12)
              {
                v13 = (1 << SmallSectorShift);
                v14 = (char *)malloc_type_malloc(v13, 0xCB53EB4CuLL);
                if (!v14)
                  return 5;
                Sector = v14;
                bzero(v14, v13);
                v11 = *(uint64_t **)(a1 + 56);
              }
              else
              {
                Sector = 0;
                v13 = (1 << SectorShift);
              }
              v30 = v12;
              v17 = *a3;
              v18 = *v11;
              v19 = *(_QWORD *)(a1 + 24);
              v20 = v18 - v19;
              if (v20 <= v17)
                LODWORD(v17) = v20;
              *a3 = v17;
              v21 = 0;
              if ((_DWORD)v17)
              {
                v22 = v19 % v13;
                v23 = (v19 / v13);
                while (1)
                {
                  v24 = *(_QWORD *)(a1 + 56);
                  if (v23 >= *(unsigned int *)(v24 + 16))
                    break;
                  v25 = *(_DWORD *)(*(_QWORD *)(v24 + 8) + 4 * v23);
                  v26 = *(_QWORD *)(v24 + 24);
                  if (v26)
                  {
                    v27 = streamSeek64(v26, v13 * (unint64_t)v25, 0);
                    if ((_DWORD)v27
                      || (v31 = v13,
                          v27 = streamRead(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24), Sector, &v31),
                          (_DWORD)v27))
                    {
                      Status = v27;
                      goto LABEL_34;
                    }
                  }
                  else
                  {
                    Sector = (char *)rootStorageReadSector(*(_QWORD *)a1, v25);
                    if (!Sector)
                    {
                      Status = rootStorageGetStatus(*(_QWORD *)a1);
                      goto LABEL_37;
                    }
                  }
                  v28 = *a3 - v21;
                  if ((int)v13 - v22 >= v28)
                    v29 = v28;
                  else
                    v29 = (v13 - v22);
                  memcpy((void *)(a2 + v21), &Sector[v22], v29);
                  v22 = 0;
                  Status = 0;
                  ++v23;
                  v21 += v29;
                  if (v21 >= *a3)
                    goto LABEL_34;
                }
                Status = 15;
                if (v30 && Sector)
                  free(Sector);
              }
              else
              {
                Status = 0;
LABEL_34:
                if (v30 && Sector)
                  free(Sector);
LABEL_37:
                *a3 = v21;
                *(_QWORD *)(a1 + 24) += v21;
              }
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return Status;
}

uint64_t SsrwOOStgStream::readSInt32(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  unsigned int v5;

  v5 = 0;
  v1 = readSInt32(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t readSInt32(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  unsigned int v6;

  v6 = 4;
  v2 = 6;
  if (a1 && a2)
  {
    v2 = streamRead(a1, (uint64_t)&v5, &v6);
    *a2 = CsLeReadSInt32(&v5);
  }
  return v2;
}

double EshHeader::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return result;
}

void PptCurrentUserAtom::PptCurrentUserAtom(PptCurrentUserAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6D78;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6E28;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
}

void EshAtom::EshAtom(EshAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  EshRecord::EshRecord(this, a2);
  *v2 = &off_24F39E2D8;
}

void EshRecord::EshRecord(EshRecord *this, const EshHeader *a2)
{
  _QWORD *v3;

  EshObject::EshObject((EshObject *)this, a2->var3);
  *v3 = off_24F39F638;
  EshHeader::operator=((uint64_t)v3 + 12, (uint64_t)a2);
}

void EshObject::EshObject(EshObject *this, unsigned __int16 a2)
{
  this->var0 = (void **)&off_24F3A4680;
  this->var1 = a2;
}

uint64_t PptCurrentUserAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 72))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptCurrentUserAtom *a2)
{
  int v4;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  CsString *v12;
  unsigned int v13;
  unsigned __int16 v14;
  const unsigned __int16 *var1;
  _DWORD *exception;
  unsigned int v18;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    goto LABEL_24;
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    goto LABEL_24;
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    goto LABEL_24;
  *((_WORD *)a2 + 30) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 14)
    goto LABEL_24;
  *((_WORD *)a2 + 31) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    goto LABEL_24;
  *((_BYTE *)a2 + 64) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 17)
    goto LABEL_24;
  *((_BYTE *)a2 + 65) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 18)
    goto LABEL_24;
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 2u);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v5 != v4 + 20)
    goto LABEL_24;
  v6 = v5;
  v7 = operator new[](*((unsigned __int16 *)a2 + 30) + 1);
  *((_QWORD *)this + 5) = v7;
  v18 = *((unsigned __int16 *)a2 + 30);
  (*(void (**)(_QWORD, void *, unsigned int *))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), v7, &v18);
  if (v18 != *((unsigned __int16 *)a2 + 30))
    goto LABEL_24;
  *(_BYTE *)(*((_QWORD *)this + 5) + v18) = 0;
  PptCurrentUserAtom::setSingleByteUserName(a2, *((const char **)this + 5));
  v8 = *((_QWORD *)this + 5);
  if (v8)
    MEMORY[0x22E2DD3F0](v8, 0x1000C8077774924);
  *((_QWORD *)this + 5) = 0;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v6 + *((unsigned __int16 *)a2 + 30))
  {
LABEL_24:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 4u);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  v10 = 0;
  v11 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1)) >> 1;
  while (v11 != v10)
  {
    ++v10;
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1)))
    {
      v11 = v10 - 1;
      break;
    }
  }
  v12 = (CsString *)operator new(0x18uLL);
  CsString::CsString(v12);
  CsString::reserve(v12, v11 + 1);
  v12->var2 = 0;
  bzero(v12->var1, 2 * v12->var3);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  if (v11)
  {
    v13 = v11;
    do
    {
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
      CsString::append(v12, v14);
      --v13;
    }
    while (v13);
  }
  CsString::setCount(v12, v11);
  if (v12->var1)
    var1 = v12->var1;
  else
    var1 = (const unsigned __int16 *)&unk_22A4D4C3C;
  PptCurrentUserAtom::setDoubleByteUserName(a2, var1);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v9, 0);
  PptParserVisitor::endRead(this, a2);
  (*((void (**)(CsString *))v12->var0 + 1))(v12);
  return 1;
}

void sub_22A0D3F6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptSkipVisitor::beginRead(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 160);
  return result;
}

uint64_t SsrwOOStgStream::getPos(SsrwOOStgStream *this)
{
  int Pos;
  int v3;
  _DWORD *exception;
  unsigned int v5;

  v5 = 0;
  Pos = streamGetPos(*((_QWORD *)this + 24), &v5);
  if (Pos)
  {
    v3 = Pos;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t streamGetPos(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 6;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t SsrwOOStgStream::readUInt32(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  unsigned int v5;

  v5 = 0;
  v1 = readSInt32(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t SsrwOOStgStream::readSInt16(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  __int16 v5;

  v5 = 0;
  v1 = readSInt16(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t readSInt16(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  __int16 v5;
  unsigned int v6;

  v6 = 2;
  v2 = 6;
  if (a1 && a2)
  {
    v2 = streamRead(a1, (uint64_t)&v5, &v6);
    *a2 = CsLeReadSInt16(&v5);
  }
  return v2;
}

uint64_t CsLeReadSInt16(__int16 *a1)
{
  return *a1;
}

uint64_t SsrwOOStgStream::readByte(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  unsigned __int8 v5;
  unsigned int v6;

  v6 = 1;
  v5 = 0;
  v1 = streamRead(*((_QWORD *)this + 24), (uint64_t)&v5, &v6);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

_BYTE *PptSkipVisitor::skipKnownBytes(_BYTE *this, const EshRecord *a2, unsigned int a3)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  _DWORD *exception;

  if (a3)
  {
    LODWORD(v3) = a3;
    v4 = this;
    if (this[8])
    {
      if ((*(unsigned int (**)(void))(**(_QWORD **)this + 40))() + a3 > *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8
        || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 176))(*v4) < v3)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 4003;
      }
      v6 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4) - *((_DWORD *)a2 + 4) - 8;
      v7 = v4[22];
      v8 = (unint64_t *)v4[21];
      if ((unint64_t)v8 >= v7)
      {
        v13 = v4[20];
        v14 = (unint64_t)v8 - v13;
        v15 = (v7 - v13) >> 3;
        v16 = 2 * v15;
        if (2 * (int)v15 <= (v14 >> 3) + 1)
          v16 = (v14 >> 3) + 1;
        if (v15 >= 0x7FFFFFFF)
          v17 = 0xFFFFFFFFLL;
        else
          v17 = v16;
        if ((_DWORD)v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(v4 + 22), v17);
          v20 = v19;
        }
        else
        {
          v18 = 0;
          v20 = 0;
        }
        v21 = (unint64_t *)&v18[v14 & 0x7FFFFFFF8];
        v22 = &v18[8 * v20];
        v3 = v3;
        *v21 = v6 | ((unint64_t)v3 << 32);
        v9 = v21 + 1;
        v24 = (char *)v4[20];
        v23 = (char *)v4[21];
        if (v23 != v24)
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v21 = v25;
          }
          while (v23 != v24);
          v23 = (char *)v4[20];
        }
        v4[20] = v21;
        v4[21] = v9;
        v4[22] = v22;
        if (v23)
          operator delete(v23);
      }
      else
      {
        v3 = v3;
        *v8 = v6 | ((unint64_t)v3 << 32);
        v9 = v8 + 1;
      }
      v4[21] = v9;
      v11 = operator new[](v3);
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*v4 + 56);
    }
    else
    {
      v10 = a3;
      v11 = operator new[](a3);
      bzero(v11, v10);
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*v4 + 184);
    }
    this = (_BYTE *)v12();
    if (v11)
      return (_BYTE *)MEMORY[0x22E2DD3F0](v11, 0x1000C8077774924);
  }
  return this;
}

uint64_t SsrwOOStgStream::getBytesAvailableToRead(SsrwOOStgStream *this)
{
  int BytesAvailableToRead;
  int v3;
  _DWORD *exception;
  unsigned int v5;

  v5 = 0;
  BytesAvailableToRead = streamGetBytesAvailableToRead(*((_QWORD *)this + 24), &v5);
  if (BytesAvailableToRead)
  {
    v3 = BytesAvailableToRead;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t streamGetBytesAvailableToRead(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = 6;
  if (a1 && a2 && (*(_DWORD *)(a1 + 48) | 2) == 2)
  {
    result = 0;
    *a2 = **(_DWORD **)(a1 + 56) - *(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t SsrwOOStgStream::readBytes(SsrwOOStgStream *this, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v4;
  _DWORD *exception;

  result = streamRead(*((_QWORD *)this + 24), a2, a3);
  if ((_DWORD)result)
  {
    v4 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
  }
  return result;
}

char *PptCurrentUserAtom::setSingleByteUserName(PptCurrentUserAtom *this, const char *__s)
{
  uint64_t v4;
  int v5;
  char *v6;

  v4 = *((_QWORD *)this + 9);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  v5 = strlen(__s);
  v6 = (char *)operator new[]((v5 + 1));
  *((_QWORD *)this + 9) = v6;
  return strcpy(v6, __s);
}

uint64_t SsrwOOStgStream::readChar16(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  unsigned __int16 v5;

  v5 = 0;
  v1 = readUInt16(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

void CsString::CsString(CsString *this)
{
  this->var1 = 0;
  *(_QWORD *)&this->var2 = 0;
  this->var0 = (void **)&off_24F3A5F18;
}

CsString *CsString::reserve(CsString *this, int a2)
{
  CsString *v2;
  unint64_t v3;
  _WORD *v4;
  uint64_t var2;
  _DWORD *exception;

  if (a2 == -1)
    goto LABEL_10;
  v2 = this;
  if (a2 + 1 < this->var3)
    return this;
  v3 = 64 - ((a2 + 1) & 0x3Fu) + (unint64_t)(a2 + 1);
  if (HIDWORD(v3))
  {
LABEL_10:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  this->var3 = v3;
  v4 = operator new[](2 * (64 - ((a2 + 1) & 0x3Fu) + a2 + 1));
  bzero(v4, 2 * v2->var3);
  var2 = v2->var2;
  if ((_DWORD)var2)
    _ChWcsncpy(v4, v2->var1, var2);
  this = (CsString *)v2->var1;
  if (this)
    this = (CsString *)MEMORY[0x22E2DD3F0](this, 0x1000C80BDFB0063);
  v2->var1 = v4;
  return this;
}

CsString *CsString::append(CsString *this, unsigned __int16 a2)
{
  unsigned int v4;
  CsString *result;
  unsigned __int16 *var1;

  v4 = this->var2 + 1;
  result = CsString::reserve(this, v4);
  var1 = this->var1;
  var1[this->var2] = a2;
  this->var2 = v4;
  var1[v4] = 0;
  return result;
}

CsString *CsString::setCount(CsString *this, unsigned int a2)
{
  CsString *v3;
  unsigned __int16 *var1;

  v3 = this;
  if (this->var3 < a2)
    this = CsString::reserve(this, a2);
  v3->var2 = a2;
  var1 = v3->var1;
  if (var1)
    var1[a2] = 0;
  return this;
}

_WORD *PptCurrentUserAtom::setDoubleByteUserName(PptCurrentUserAtom *this, const unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;

  v4 = *((_QWORD *)this + 10);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C80BDFB0063);
  *((_QWORD *)this + 10) = 0;
  v5 = _ChWcslen(a2);
  v6 = operator new[]((2 * v5 + 4) & 0x1FFFFFFFELL);
  *((_QWORD *)this + 10) = v6;
  return _ChWcscpy(v6, a2);
}

_WORD *_ChWcscpy(_WORD *result, const unsigned __int16 *a2)
{
  __int16 v2;
  _WORD *v3;
  const unsigned __int16 *v4;
  int v5;

  v2 = *a2;
  v3 = result;
  if (*a2)
  {
    v4 = a2 + 1;
    v3 = result;
    do
    {
      *v3++ = v2;
      v5 = *v4++;
      v2 = v5;
    }
    while (v5);
  }
  *v3 = 0;
  return result;
}

_BYTE *PptParserVisitor::endRead(PptParserVisitor *this, EshRecord *a2)
{
  _DWORD *exception;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) > *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  return PptSkipVisitor::skipUnknownToEnd(*((PptSkipVisitor **)this + 3), a2);
}

_BYTE *PptSkipVisitor::skipUnknownToEnd(PptSkipVisitor *this, const EshRecord *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  _DWORD *exception;

  v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v4 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  v6 = v5 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this) + 8;
  return PptSkipVisitor::skipUnknownBytes(this, a2, v6);
}

_BYTE *PptSkipVisitor::skipUnknownBytes(PptSkipVisitor *this, const EshRecord *a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int16 *v8;
  __n128 v9;

  if (a3 && *((_BYTE *)this + 9))
  {
    v6 = (*(uint64_t (**)(void))(**(_QWORD **)this + 40))();
    v7 = *((_DWORD *)a2 + 4);
    v8 = (unsigned __int16 *)operator new(0xCuLL);
    *v8 = EshRecord::getRecordType(a2);
    *((_DWORD *)v8 + 1) = v6 - v7 - 8;
    *((_DWORD *)v8 + 2) = a3;
    if (EshRecord::getVersion(a2) != 15
      && !ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::find_internal((uint64_t)this + 144, v8, *((_QWORD *)this + 18)))
    {
      if (*((_BYTE *)this + 8))
        snprintf((char *)this + 10, 0x80uLL, "Record: #%04hX(%d), Header offset: #%04lX(%lu) - Read unknown bytes (%lu-%lu) as 0!\n", *((unsigned __int16 *)a2 + 11));
      else
        snprintf((char *)this + 10, 0x80uLL, "Record: %d, Offset: %lu - Wrote unknown bytes (%lu-%lu) as 0!\n");
      ChLogFunction((const char *)this + 10, 0, 1, 0, 0);
      v9.n128_f64[0] = ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::insert_internal((uint64_t)this + 144, v8, (uint64_t *)this + 18, 0);
    }
    MEMORY[0x22E2DD408](v8, 0x1000C4054111E92, v9);
  }
  return PptSkipVisitor::skipKnownBytes(this, a2, a3);
}

void sub_22A0D4964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4054111E92);
  _Unwind_Resume(a1);
}

void CsString::~CsString(CsString *this)
{
  unsigned __int16 *var1;
  unsigned __int16 **p_var1;

  this->var0 = (void **)&off_24F3A5F18;
  p_var1 = &this->var1;
  var1 = this->var1;
  if (var1)
    MEMORY[0x22E2DD3F0](var1, 0x1000C80BDFB0063);
  *p_var1 = 0;
  p_var1[1] = 0;
  JUMPOUT(0x22E2DD408);
}

{
  unsigned __int16 *var1;
  unsigned __int16 **p_var1;

  this->var0 = (void **)&off_24F3A5F18;
  p_var1 = &this->var1;
  var1 = this->var1;
  if (var1)
    MEMORY[0x22E2DD3F0](var1, 0x1000C80BDFB0063);
  *p_var1 = 0;
  p_var1[1] = 0;
}

void PptParserVisitor::~PptParserVisitor(PptParserVisitor *this)
{
  PptParserVisitor::~PptParserVisitor(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F3BC9F0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = (void *)v3[20];
    if (v4)
    {
      v3[21] = (uint64_t)v4;
      operator delete(v4);
    }
    ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::clear(v3 + 18);
    MEMORY[0x22E2DD408](v3, 0x1020C401FB183FFLL);
  }
  *((_QWORD *)this + 3) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
  *((_QWORD *)this + 5) = 0;
}

void EshParserVisitor::~EshParserVisitor(EshParserVisitor *this)
{
  EshParserVisitor::~EshParserVisitor(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A5668;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
  *((_QWORD *)this + 2) = 0;
  EshDataModelVisitor::~EshDataModelVisitor(this);
}

void EshDataModelVisitor::~EshDataModelVisitor(EshDataModelVisitor *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24F39E9A0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

uint64_t ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::clear(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = *a1;
  if (result)
  {
    v3 = ChBinaryTree<PptSkipVisitor::PptSkipWarning,PptSkipVisitor::PptWarningLess>::node::~node(result);
    result = MEMORY[0x22E2DD408](v3, 0x1020C40E213B89CLL);
  }
  *a1 = 0;
  return result;
}

uint64_t SsrwOOStgStream::close(SsrwOOStgStream *this, char a2)
{
  uint64_t result;
  uint64_t *v3;
  int v5;
  int v6;
  _DWORD *exception;

  v3 = (uint64_t *)((char *)this + 192);
  result = *((_QWORD *)this + 24);
  if (result)
  {
    v5 = streamSeek(result, 0, 2);
    if ((a2 & 1) == 0)
    {
      if (v5)
      {
        v6 = v5;
        exception = __cxa_allocate_exception(4uLL);
        *exception = v6;
      }
    }
    result = closeStream(v3);
    *v3 = 0;
  }
  return result;
}

uint64_t closeStream(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int ShouldBeMini;

  if (!a1)
    return 6;
  v2 = *a1;
  if (!v2)
    return 6;
  if ((*(_DWORD *)(v2 + 48) - 1) <= 1)
  {
    streamFlushToDisk(v2);
    streamResize(*a1, *(_QWORD *)(*a1 + 24));
    v2 = *a1;
  }
  TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)v2);
  EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(*a1 + 8));
  v5 = *a1;
  if ((*(_DWORD *)(*a1 + 48) - 1) <= 1)
  {
    v6 = EntryAtIndex;
    v7 = directorySetSize(EntryAtIndex, **(_QWORD **)(v5 + 56));
    if ((_DWORD)v7)
      goto LABEL_14;
    v7 = directorySetCurrentCreationTime(v6);
    if ((_DWORD)v7)
      goto LABEL_14;
    v7 = directorySetCurrentModificationTime(v6);
    if ((_DWORD)v7)
      goto LABEL_14;
    v8 = *a1;
    *(_BYTE *)(*(_QWORD *)(*a1 + 56) + 32) = 0;
    ShouldBeMini = streamShouldBeMini(v8);
    v5 = *a1;
    if (ShouldBeMini)
    {
      if (*(_DWORD *)(*(_QWORD *)(v5 + 56) + 36) == 1)
      {
        v7 = convertToSmallStream(*a1);
        if ((_DWORD)v7)
        {
LABEL_14:
          streamDestroy((void **)a1);
          return v7;
        }
        v5 = *a1;
      }
    }
  }
  v7 = storageRemoveOpenChild(*(_QWORD *)(v5 + 16), 2, v5);
  if (!(_DWORD)v7)
    goto LABEL_14;
  return v7;
}

uint64_t storageRemoveOpenChild(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;

  v5 = -1;
  result = openListFindItem(*(int ***)(a1 + 24), &v5, a2, a3);
  if (!(_DWORD)result)
    return openListRemoveItem(*(_QWORD *)(a1 + 24), v5);
  return result;
}

uint64_t openListFindItem(int **a1, _DWORD *a2, int a3, uint64_t a4)
{
  int *v4;
  int i;
  int v6;
  uint64_t result;

  v4 = *a1;
  if (!*a1)
    return 11;
  for (i = 0; ; ++i)
  {
    if ((v6 = *v4, a3 == 2) && v6 == 2 || a3 == 1 && v6 == 1)
    {
      if (*((_QWORD *)v4 + 1) == a4)
        break;
    }
    v4 = (int *)*((_QWORD *)v4 + 2);
    if (!v4)
      return 11;
  }
  result = 0;
  *a2 = i;
  return result;
}

uint64_t openListRemoveItem(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  if (!a1)
    return 6;
  if (*(_DWORD *)(a1 + 8) <= a2)
    return 6;
  v3 = *(_QWORD **)a1;
  if (a2)
  {
    while (1)
    {
      v4 = v3;
      v3 = (_QWORD *)v3[2];
      if (!v3)
        return 11;
      if (!--a2)
      {
        v5 = v4 + 2;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)a1;
LABEL_10:
    *v5 = v3[2];
    free(v3);
    result = 0;
    --*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t streamDestroy(void **a1)
{
  void *v1;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    if (*((_QWORD *)v1 + 7))
    {
      TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)v1);
      EntryAtIndex = tocGetEntryAtIndex(TOC, *((_DWORD *)*a1 + 2));
      directoryReleaseStreamSharedBlock(EntryAtIndex);
      v1 = *a1;
    }
    v5 = (void *)*((_QWORD *)v1 + 4);
    if (v5)
    {
      free(v5);
      v1 = *a1;
    }
    freeInfo((void **)v1 + 8, 1u);
    free(*a1);
    *a1 = 0;
  }
  return 0;
}

uint64_t directoryReleaseStreamSharedBlock(uint64_t a1)
{
  int v1;
  _QWORD *v3;
  _QWORD **v4;
  int RefCount;
  uint64_t result;

  if (!a1)
    return 6;
  v1 = *(_DWORD *)(a1 + 84);
  if (v1 != 5 && v1 != 2)
    return 6;
  v4 = (_QWORD **)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 160);
  if (v3)
  {
    if (!streamSharedBlockGetRefCount((uint64_t)v3))
      return 6;
    v3 = *v4;
  }
  RefCount = streamSharedBlockGetRefCount((uint64_t)v3);
  if (RefCount == 1)
  {
    result = streamDestroySharedBlock(v4);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    streamSharedBlockSetRefCount((uint64_t)*v4, RefCount - 1);
  }
  return 0;
}

uint64_t streamSharedBlockGetRefCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t streamDestroySharedBlock(_QWORD **a1)
{
  _QWORD *v1;
  void *v3;
  uint64_t result;

  v1 = *a1;
  if (!*a1)
    return 6;
  v3 = (void *)v1[1];
  if (v3)
    free(v3);
  if (v1[3])
    streamDestroy(v1 + 3);
  free(v1);
  result = 0;
  *a1 = 0;
  return result;
}

void SsrwOOStgStream::~SsrwOOStgStream(SsrwOOStgStream *this)
{
  SsrwOOStgStream::~SsrwOOStgStream(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3A68B8;
  if (*((_QWORD *)this + 24))
    SsrwOOStgStream::close(this, 1);
  TSURectWithOriginAndSize((char *)this + 8);
}

void PptCurrentUserAtom::~PptCurrentUserAtom(PptCurrentUserAtom *this)
{
  PptCurrentUserAtom::~PptCurrentUserAtom(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3B6D78;
  *((_QWORD *)this + 4) = &unk_24F3B6E28;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  v3 = *((_QWORD *)this + 10);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C80BDFB0063);
  *((_QWORD *)this + 10) = 0;
}

void PptEshReader::PptEshReader(PptEshReader *this)
{
  _QWORD *v1;

  EshBinaryReader::EshBinaryReader(this);
  *v1 = &off_24F3BD160;
}

void EshBinaryReader::EshBinaryReader(EshBinaryReader *this)
{
  *(_QWORD *)this = &off_24F3A5800;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 10;
  *((_DWORD *)this + 18) = 0;
  EshHeader::makeDefault((EshHeader *)((char *)this + 76));
  *((_BYTE *)this + 92) = 0;
}

void sub_22A0D5134(_Unwind_Exception *a1)
{
  uint64_t v1;

  ChStack<EshHeader>::~ChStack(v1 + 40);
  _Unwind_Resume(a1);
}

uint64_t EshGroupProperties::init(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t getStreamInfo(uint64_t a1)
{
  return a1 + 64;
}

void PptPersistDir::PptPersistDir(PptPersistDir *this, PptParserVisitor *a2)
{
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 10) = -1;
  *((_BYTE *)this + 92) = 0;
  *((_DWORD *)this + 24) = 0;
}

PptPersistDir *PptPersistDir::getDirEntries(PptPersistDir *this, uint64_t a2)
{
  EshHeader *v4;
  PptPersistDir *result;
  PptPersistDir *v6;
  char **v7;
  PptUserEditAtom *v8;
  int v9;
  uint64_t v10;
  int DataLength;
  uint64_t v12;
  PptPersistPtrIncrAtom *v13;
  _QWORD *v14;
  PptPersistDir *v15;
  _QWORD *v16;
  unsigned int v17;
  char *v18;
  char **v19;
  unsigned int v20;
  BOOL v21;
  char **v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _DWORD *v27;
  _DWORD *exception;
  EshHeader *v29;
  PptPersistDir *v30;
  int v31;
  unsigned int v32;
  unsigned int *v33;

  v4 = (EshHeader *)operator new(0x10uLL);
  result = (PptPersistDir *)EshHeader::makeDefault(v4);
  *(_QWORD *)((char *)this + 84) = -1;
  if ((int)a2 >= 1)
  {
    v6 = 0;
    v7 = (char **)((char *)this + 40);
    v29 = v4;
    do
    {
      PptParserVisitor::parse(*(SsrwOOStream ***)this, v4, a2);
      if (v4->var3 != 4085)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 4001;
      }
      v8 = (PptUserEditAtom *)operator new(0x50uLL);
      PptUserEditAtom::PptUserEditAtom(v8, v4);
      *((_QWORD *)this + 3) = v8;
      if (v8)
      (*(void (**)(PptUserEditAtom *, _QWORD))(*(_QWORD *)v8 + 112))(v8, *(_QWORD *)this);
      v9 = *((_DWORD *)v8 + 14);
      v10 = *((unsigned int *)v8 + 15);
      if (!*((_DWORD *)this + 12))
      {
        *((_DWORD *)this + 21) = *((_DWORD *)v8 + 16);
        DataLength = EshRecord::getDataLength(v8);
        *((_BYTE *)this + 92) = DataLength == 32;
        if (DataLength == 32)
          *((_DWORD *)this + 24) = *((_DWORD *)v8 + 19);
        *((_DWORD *)this + 20) = *((_DWORD *)v8 + 17);
      }
      v12 = *((_QWORD *)this + 3);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 3) = 0;
      PptParserVisitor::parse(*(SsrwOOStream ***)this, v4, v10);
      if (v4->var3 != 6002)
      {
        v27 = __cxa_allocate_exception(4uLL);
        *v27 = 4001;
      }
      v13 = (PptPersistPtrIncrAtom *)operator new(0x68uLL);
      PptPersistPtrIncrAtom::PptPersistPtrIncrAtom(v13, v4);
      *((_QWORD *)this + 3) = v13;
      if (v13)
      else
        v14 = 0;
      v31 = v9;
      (*(void (**)(_QWORD *, _QWORD))(*v14 + 112))(v14, *(_QWORD *)this);
      result = (PptPersistDir *)operator new(0x10uLL);
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)this + 2) = result;
      *(_QWORD *)result = v14;
      *((_QWORD *)this + 3) = 0;
      if (v6)
        v15 = v6;
      else
        v15 = this;
      v30 = result;
      *((_QWORD *)v15 + 1) = result;
      v16 = (_QWORD *)v14[9];
      if (v16 != v14 + 10)
      {
        do
        {
          v17 = *((_DWORD *)v16 + 7);
          if (*((_DWORD *)this + 22) < (signed int)v17)
            *((_DWORD *)this + 22) = v17;
          v18 = *v7;
          if (!*v7)
            goto LABEL_33;
          v19 = (char **)((char *)this + 40);
          do
          {
            v20 = *((_DWORD *)v18 + 7);
            v21 = v20 >= v17;
            if (v20 >= v17)
              v22 = (char **)v18;
            else
              v22 = (char **)(v18 + 8);
            if (v21)
              v19 = (char **)v18;
            v18 = *v22;
          }
          while (*v22);
          if (v19 == v7 || v17 < *((_DWORD *)v19 + 7))
          {
LABEL_33:
            v23 = *((_DWORD *)v16 + 8);
            v32 = v17;
            v33 = &v32;
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 4, &v32, (uint64_t)&std::piecewise_construct, &v33)+ 8) = v23;
            v33 = (unsigned int *)(v16 + 4);
            result = (PptPersistDir *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 7, (unsigned int *)v16 + 8, (uint64_t)&std::piecewise_construct, &v33);
            *((_DWORD *)result + 8) = v17;
          }
          v24 = (_QWORD *)v16[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v16[2];
              v26 = *v25 == (_QWORD)v16;
              v16 = v25;
            }
            while (!v26);
          }
          v16 = v25;
        }
        while (v25 != v14 + 10);
      }
      a2 = v31;
      v4 = v29;
      v6 = v30;
    }
    while (v31 >= 1);
  }
  if (v4)
    return (PptPersistDir *)MEMORY[0x22E2DD408](v4, 0x1000C408B6DE1C6);
  return result;
}

void sub_22A0D54E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

void PptUserEditAtom::PptUserEditAtom(PptUserEditAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBFF8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BC0A0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 72) = 0;
}

uint64_t PptUserEditAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 384))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptUserEditAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    goto LABEL_12;
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    goto LABEL_12;
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    goto LABEL_12;
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    goto LABEL_12;
  *((_DWORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 20)
    goto LABEL_12;
  *((_DWORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 24)
    goto LABEL_12;
  *((_DWORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 26)
    goto LABEL_12;
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 2u);
  if (EshRecord::getDataLength(a2) == 32)
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) == v4 + 28)
    {
      *((_DWORD *)a2 + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
      goto LABEL_11;
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
LABEL_11:
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshRecord::getDataLength(EshRecord *this)
{
  return *((unsigned int *)this + 3);
}

void PptUserEditAtom::~PptUserEditAtom(PptUserEditAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptPersistPtrIncrAtom::PptPersistPtrIncrAtom(PptPersistPtrIncrAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA088;
  *(_QWORD *)(v2 + 32) = &unk_24F3BA138;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = v2 + 80;
  *(_DWORD *)(v2 + 96) = 0;
}

uint64_t PptPersistPtrIncrAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 224))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptPersistPtrIncrAtom *a2)
{
  int DataLength;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  DataLength = EshRecord::getDataLength(a2);
  if (DataLength >= 4)
  {
    v5 = 0;
    v6 = DataLength >> 2;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
      EshAlignRule::addShapeId(a2, v7);
      ++v5;
      if (v7 >= 0x100000)
      {
        v8 = v7 & 0xFFFFF;
        v9 = v7 >> 20;
        v10 = v9;
        do
        {
          v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
          PptPersistPtrIncrAtom::addReference((uint64_t **)a2, v8++, v11);
          --v10;
        }
        while (v10);
        v5 += v9;
      }
    }
    while (v5 < v6);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t *PptPersistPtrIncrAtom::addReference(uint64_t **this, unsigned int a2, unsigned int a3)
{
  uint64_t *result;
  unint64_t v6;

  v6 = __PAIR64__(a3, a2);
  result = std::__tree<ChPair<unsigned int,unsigned int>,PptPersistPtrIncrAtom::RefLess<ChPair<unsigned int,unsigned int>>,std::allocator<ChPair<unsigned int,unsigned int>>>::__emplace_unique_key_args<ChPair<unsigned int,unsigned int>,ChPair<unsigned int,unsigned int> const&>(this + 9, (unsigned int *)&v6, (uint64_t *)&v6);
  if (*((_DWORD *)this + 24) < a2)
    *((_DWORD *)this + 24) = a2;
  return result;
}

_QWORD *ChAutoPtr<SsrwOOStgInfo>::~ChAutoPtr(_QWORD *a1)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = TSURectWithOriginAndSize();
    MEMORY[0x22E2DD408](v2, 0x1020C40285AA8CALL);
  }
  *a1 = 0;
  return a1;
}

void sub_22A0D5B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'PptBinaryReader::readEncryptionInfo(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return PptBinaryReader::readEncryptionInfo(a1 - 24, a2, a3, a4);
}

uint64_t PptBinaryReader::readEncryptionInfo(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t OffsetByRef;
  uint64_t v9;
  void *v10;
  _DWORD v12[14];
  void *__src;
  EshHeader v14;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 92))
  {
    *a4 = 8001;
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152));
    OffsetByRef = PptPersistDir::getOffsetByRef(*(PptPersistDir **)(a1 + 192), *(_DWORD *)(*(_QWORD *)(a1 + 192) + 96));
    EshHeader::makeDefault(&v14);
    PptParserVisitor::parse(*(SsrwOOStream ***)(a1 + 184), &v14, OffsetByRef);
    PptCryptSession10ContainerAtom::PptCryptSession10ContainerAtom((PptCryptSession10ContainerAtom *)v12, &v14);
    v9 = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 184) + 984))(*(_QWORD *)(a1 + 184), v12);
    if ((_DWORD)v9)
    {
      *a3 = v12[12];
      v10 = (void *)operator new[]();
      *a2 = v10;
      memcpy(v10, __src, *a3);
    }
    SsrwOOStream::seekFromStart(*(SsrwOOStream **)(a1 + 152), v7);
    PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom((PptCryptSession10ContainerAtom *)v12);
  }
  else
  {
    v9 = 0;
    *a4 = 8011;
  }
  return v9;
}

void sub_22A0D5D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PptCryptSession10ContainerAtom::~PptCryptSession10ContainerAtom((PptCryptSession10ContainerAtom *)&a9);
  _Unwind_Resume(a1);
}

void sub_22A0D5F08(void *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int *v7;
  void *v8;

  v4 = v2;

  if (a2 == 3)
  {
    v7 = (unsigned int *)__cxa_begin_catch(a1);
    PBConvertCsException(v7);
    __cxa_end_catch();
  }
  else
  {
    v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v8, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A0D5EC4);
}

void sub_22A0D5FCC(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  id v9;

  if (a2 == 2)
  {
    v9 = objc_begin_catch(exc_buf);

    objc_end_catch();
    JUMPOUT(0x22A0D5EC4);
  }
  JUMPOUT(0x22A0D5F34);
}

void sub_22A0D61C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D62EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D6364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D6420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D664C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_22A0D6908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A0D6A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0D6AE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0D6C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0D6F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0D6FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0D7038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0D7094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0D70F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0D7558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D75FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D7BC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *exc_buf, void *a10, uint64_t a11)
{
  void *v11;
  void *v12;

  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x22A0D7A78);
  }
  objc_exception_rethrow();
}

void sub_22A0D7C30()
{
  __break(1u);
}

void sub_22A0D7D94()
{
  JUMPOUT(0x22A0D7D84);
}

void sub_22A0D7DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, id a18)
{
  void *v18;
  void *v19;
  void *v20;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_22A0D7FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;
  operator delete(v5);

  _Unwind_Resume(a1);
}

void sub_22A0D8060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0D8120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D819C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D8254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0D839C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshAtom::versionForAtomType(EshAtom *this)
{
  int v1;
  uint64_t result;

  v1 = (_DWORD)this - 61447;
  result = 0;
  switch(v1)
  {
    case 0:
    case 3:
      result = 2;
      break;
    case 1:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return result;
    case 2:
    case 11:
      result = 1;
      break;
    case 4:
      result = 3;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

EshDgg *PptEshObjectFactory::createObject(PptEshObjectFactory *this, int a2, int a3)
{
  PptEshClientTextBox *v3;

  if (a2 > 61452)
  {
    switch(a2)
    {
      case 61453:
        v3 = (PptEshClientTextBox *)operator new(0x38uLL);
        PptEshClientTextBox::PptEshClientTextBox(v3);
        return v3;
      case 61456:
        v3 = (PptEshClientTextBox *)operator new(0x30uLL);
        PptEshClientAnchor::PptEshClientAnchor(v3);
        return v3;
      case 61457:
        v3 = (PptEshClientTextBox *)operator new(0x38uLL);
        PptEshClientData::PptEshClientData(v3);
        return v3;
    }
  }
  else
  {
    switch(a2)
    {
      case 6:
        v3 = (PptEshClientTextBox *)operator new(0x190uLL);
        PptEshGroup::PptEshGroup(v3);
        (*(void (**)(PptEshClientTextBox *))(*(_QWORD *)v3 + 120))(v3);
        return v3;
      case 7:
        v3 = (PptEshClientTextBox *)operator new(0x260uLL);
        PptEshShape::PptEshShape(v3);
        return v3;
      case 12:
        v3 = (PptEshClientTextBox *)operator new(0x168uLL);
        PptEshBackground::PptEshBackground(v3);
        return v3;
    }
  }
  return EshObjectFactory::createObject((EshObjectFactory *)this, a2, a3);
}

void sub_22A0D852C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

EshDgg *EshObjectFactory::createObject(EshObjectFactory *this, int a2, int a3)
{
  EshRoot *v3;

  if (a2 == 1)
  {
    v3 = (EshRoot *)operator new(0x28uLL);
    EshRoot::EshRoot(v3);
    return v3;
  }
  else if ((a2 - 2) > 0x1A)
  {
    return EshObjectFactory::createRecord(this, a2, a3);
  }
  else
  {
    return EshObjectFactory::createSemanticObject(this, a2);
  }
}

void sub_22A0D85CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshRoot::EshRoot(EshRoot *this)
{
  _QWORD *v1;

  EshObject::EshObject((EshObject *)this, 1u);
  *v1 = &off_24F3A47E0;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
}

void sub_22A0D8680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptBinaryReader::read(PptBinaryReader *this, EshRoot *a2)
{
  int v4;
  SsrwOOStgInfo *v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  EshHeader *v9;
  int v10;
  unsigned int v11;
  EshHeader *v12;
  int v13;
  int v14;
  uint64_t OffsetByRef;
  uint64_t v16;
  uint64_t v17;
  EshHeader *v18;
  SsrwOOStgInfo *v19;
  unsigned int Size;
  __n128 v21;
  int var0;
  EshHeader *v23;
  int v24;
  uint64_t v25;
  _DWORD *exception;
  int v27;

  (*(void (**)(EshRoot *, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0);
  PptBinaryReader::checkStarted(this);
  *((_QWORD *)this + 29) = 0;
  v4 = *((_DWORD *)this + 40);
  if (v4 != 2)
    goto LABEL_6;
  if (!*((_BYTE *)this + 164))
  {
    *((_BYTE *)this + 164) = 1;
    if (*(_DWORD *)(*((_QWORD *)this + 25) + 4) == *((_DWORD *)this + 54))
    {
      v13 = *(_DWORD *)(*((_QWORD *)this + 24) + 88);
      if (v13 >= 1)
      {
        v14 = 0;
        do
        {
          OffsetByRef = PptPersistDir::getOffsetByRef(*((PptPersistDir **)this + 24), ++v14);
          if ((OffsetByRef & 0x80000000) == 0)
          {
            PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), OffsetByRef, *((SsrwOOStream **)this + 19));
            EshRoot::appendChild(a2, *((const EshHeader **)this + 25));
          }
        }
        while (v13 != v14);
      }
      return;
    }
    exception = __cxa_allocate_exception(4uLL);
    v27 = 7010;
    goto LABEL_55;
  }
  if ((unsigned __int16)(*(_WORD *)(*((_QWORD *)this + 25) + 10) + 4096) <= 0x122u)
  {
    if (!PptBinaryReader::isBadHeader(this))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19), *(unsigned int *)(*((_QWORD *)this + 25) + 4), 0);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), *((_QWORD *)this + 19));
      v16 = *((_QWORD *)this + 21);
      goto LABEL_52;
    }
    v4 = *((_DWORD *)this + 40);
LABEL_6:
    if (v4)
      goto LABEL_7;
    if (!*((_QWORD *)this + 22) || PptBinaryReader::isBadHeader(this))
      goto LABEL_20;
    if (!EshBinaryReader::isStarted(*((EshBinaryReader **)this + 22))
      || EshBinaryReader::atEnd(*((EshBinaryReader **)this + 22)))
    {
      if (!EshBinaryReader::isStarted(*((EshBinaryReader **)this + 22)))
        PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), 0, *((SsrwOOStream **)this + 18));
      (*(void (**)(void))(**((_QWORD **)this + 18) + 16))();
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 18) + 176))(*((_QWORD *)this + 18)) >= 8)
      {
        v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18));
        v18 = (EshHeader *)operator new(0x10uLL);
        EshHeader::makeDefault(v18);
        v19 = (SsrwOOStgInfo *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 168))(*((_QWORD *)this + 18));
        Size = SsrwOOStgInfo::getSize(v19);
        v21.n128_f64[0] = PptParserVisitor::parse(*((PptParserVisitor **)this + 23), v18, 0, *((SsrwOOStream **)this + 18));
        if ((unsigned __int16)(v18->var3 + 4096) <= 0x122u)
        {
          var0 = v18->var0;
          if (v18->var0 != -8 && var0 && Size >= var0 + v18->var1 + 8)
          {
            (*(void (**)(_QWORD, uint64_t, _QWORD, double))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), v17, 0, v21.n128_f64[0]);
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22), *((_QWORD *)this + 18));
            v23 = (EshHeader *)*((_QWORD *)this + 25);
            v24 = v23->var1 + v23->var0;
            v25 = (v24 + 8);
            if (Size >= v24 + 16)
            {
              PptParserVisitor::parse(*((PptParserVisitor **)this + 23), v23, v25, *((SsrwOOStream **)this + 18));
              if (PptBinaryReader::isBadHeader(this) && (PptBinaryReader::findGoodHeader(this, v25) & 1) == 0)
                EshHeader::makeDefault(*((EshHeader **)this + 25));
            }
            else
            {
              v23->var1 = v25;
            }
          }
        }
        MEMORY[0x22E2DD408](v18, 0x1000C408B6DE1C6, v21);
      }
    }
    if (EshBinaryReader::atEnd(*((EshBinaryReader **)this + 22)))
      return;
    v16 = *((_QWORD *)this + 22);
LABEL_52:
    (*(void (**)(uint64_t, EshRoot *))(*(_QWORD *)v16 + 32))(v16, a2);
    return;
  }
LABEL_7:
  if (!*((_QWORD *)this + 22))
  {
LABEL_20:
    v8 = *((_QWORD *)this + 25);
LABEL_21:
    *(_DWORD *)v8 = 0;
    return;
  }
  v5 = (SsrwOOStgInfo *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 168))(*((_QWORD *)this + 18));
  v6 = SsrwOOStgInfo::getSize(v5);
  if (*((_QWORD *)this + 36) == *((_QWORD *)this + 37))
  {
    if (!*((_BYTE *)this + 312))
    {
      *((_BYTE *)this + 312) = 1;
      PptBinaryReader::parseStore(this);
      *((_BYTE *)this + 312) = 0;
      goto LABEL_11;
    }
    exception = __cxa_allocate_exception(4uLL);
    v27 = 1000;
LABEL_55:
    *exception = v27;
  }
LABEL_11:
  *((_DWORD *)this + 40) = 0;
  v7 = PptParserVisitor::parse(*((PptParserVisitor **)this + 23), *((EshHeader **)this + 25), 0, *((SsrwOOStream **)this + 18));
  v8 = *((_QWORD *)this + 25);
  if (*(_DWORD *)(v8 + 4) + *(_DWORD *)v8 + 8 > v6 || (unsigned __int16)(*(_WORD *)(v8 + 10) + 4096) >= 0x123u)
    goto LABEL_21;
  (*(void (**)(_QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), 0, 0, v7);
  v9 = (EshHeader *)*((_QWORD *)this + 25);
  v10 = v9->var0;
  if (v9->var0)
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22), *((_QWORD *)this + 18));
    (*(void (**)(_QWORD, EshRoot *))(**((_QWORD **)this + 22) + 32))(*((_QWORD *)this + 22), a2);
    v9 = (EshHeader *)*((_QWORD *)this + 25);
    v10 = v9->var0;
  }
  v11 = v9->var1 + v10;
  if (v11 + 16 > v6)
  {
    v12 = v9;
LABEL_17:
    EshHeader::makeDefault(v12);
    return;
  }
  PptParserVisitor::parse(*((PptParserVisitor **)this + 23), v9, v11 + 8, *((SsrwOOStream **)this + 18));
  if (PptBinaryReader::isBadHeader(this)
    && (PptBinaryReader::findGoodHeader(this, *(_DWORD *)(*((_QWORD *)this + 25) + 4) + **((_DWORD **)this + 25) + 8) & 1) == 0)
  {
    v12 = (EshHeader *)*((_QWORD *)this + 25);
    goto LABEL_17;
  }
}

void sub_22A0D8BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

void EshRoot::setNumChildren(EshRoot *this, unsigned int a2)
{
  char **v3;
  unint64_t v4;
  unint64_t v5;
  char *v7;
  unint64_t v8;
  EshHeader *v9;
  unint64_t v10;
  EshHeader **v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  EshHeader **v20;
  char *v21;
  char *v22;
  EshHeader *v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v3 = (char **)((char *)this + 16);
  v4 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  v5 = v4 >> 3;
  if ((v4 >> 3) < a2)
  {
    v7 = (char *)this + 32;
    v8 = v4 >> 3;
    do
    {
      v9 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v9);
      v11 = (EshHeader **)*((_QWORD *)this + 3);
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)v11 >= v10)
      {
        v13 = (char *)v11 - *v3;
        v14 = (v10 - (unint64_t)*v3) >> 3;
        v15 = 2 * v14;
        if (2 * (int)v14 <= (v13 >> 3) + 1)
          v15 = (v13 >> 3) + 1;
        if (v14 >= 0x7FFFFFFF)
          v16 = 0xFFFFFFFFLL;
        else
          v16 = v15;
        if ((_DWORD)v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v7, v16);
          v19 = v18;
        }
        else
        {
          v17 = 0;
          v19 = 0;
        }
        v20 = (EshHeader **)&v17[v13 & 0x7FFFFFFF8];
        *v20 = v9;
        v12 = v20 + 1;
        v22 = (char *)*((_QWORD *)this + 2);
        v21 = (char *)*((_QWORD *)this + 3);
        if (v21 != v22)
        {
          do
          {
            v23 = (EshHeader *)*((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = *v3;
        }
        *((_QWORD *)this + 2) = v20;
        *((_QWORD *)this + 3) = v12;
        *((_QWORD *)this + 4) = &v17[8 * v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      *((_QWORD *)this + 3) = v12;
      LODWORD(v8) = v8 + 1;
    }
    while ((_DWORD)v8 != a2);
  }
  v24 = v5 - a2;
  if (v5 > a2)
  {
    v25 = 8 * a2;
    do
    {
      v26 = *v3;
      v27 = *(_QWORD *)&(*v3)[v25];
      if (v27)
      {
        MEMORY[0x22E2DD408](v27, 0x1000C408B6DE1C6);
        v26 = *v3;
      }
      *(_QWORD *)&v26[v25] = 0;
      v25 += 8;
      --v24;
    }
    while (v24);
  }
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v3, a2);
}

void sub_22A0D8D88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

BOOL PptBinaryReader::checkStarted(PptBinaryReader *this)
{
  _BOOL8 result;
  _DWORD *exception;

  result = SsrwOORootStorage::isOpen((PptBinaryReader *)((char *)this + 40));
  if (!result
    || !*((_QWORD *)this + 19)
    || !*((_QWORD *)this + 21)
    || !*((_QWORD *)this + 23)
    || !*((_QWORD *)this + 25))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return result;
}

BOOL PptBinaryReader::isBadHeader(PptBinaryReader *this)
{
  uint64_t v2;
  SsrwOOStgInfo *v3;
  unsigned int Size;
  EshHeader *v5;
  unsigned int v6;
  unsigned int v8;
  BOOL v9;

  v2 = 152;
  if (!*((_DWORD *)this + 40))
    v2 = 144;
  v3 = (SsrwOOStgInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)((char *)this + v2) + 168))(*(_QWORD *)((char *)this + v2));
  Size = SsrwOOStgInfo::getSize(v3);
  v5 = (EshHeader *)*((_QWORD *)this + 25);
  if (!*((_DWORD *)this + 40))
  {
    if (((unsigned __int16)(v5->var3 + 3816) >> 8) != 255)
      return 1;
    v8 = v5->var2 & 0xFFFE;
    if (v8 <= 0x6DF)
    {
      if ((v5->var2 & 0xFFFEu) > 0x469)
      {
        if (v8 != 1130 && v8 != 1346)
          return 1;
      }
      else if (v8 != 534 && v8 != 980)
      {
        return 1;
      }
    }
    else
    {
      v9 = v8 - 1760 > 4 || ((1 << (v8 + 32)) & 0x15) == 0;
      if (v9 && v8 != 2048 && v8 != 1960)
        return 1;
    }
  }
  v6 = v5->var1 + 8;
  if (v6 <= Size && v5->var0 + v6 <= Size)
    return EshHeader::isDefault(v5);
  return 1;
}

BOOL EshHeader::isDefault(EshHeader *this)
{
  return !this->var0 && !this->var1 && !this->var2 && !this->var3 && this->var4 == 0;
}

BOOL PptBinaryReader::isHeaderSkipped(PptBinaryReader *this, const EshHeader *a2)
{
  uint64_t *v2;
  uint64_t **v5;
  unsigned int var3;
  unsigned int v7;
  unsigned int v9;
  unsigned int *v10;

  v2 = (uint64_t *)*((_QWORD *)this + 31);
  if (!v2)
    return 0;
  v5 = (uint64_t **)((char *)this + 240);
  var3 = a2->var3;
  while (1)
  {
    v7 = *((_DWORD *)v2 + 7);
    if (v7 <= var3)
      break;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v7 < var3)
  {
    ++v2;
    goto LABEL_6;
  }
  v9 = a2->var3;
  v10 = &v9;
  if (!*((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 30, &v9, (uint64_t)&std::piecewise_construct, &v10)+ 8))return 1;
  v9 = a2->var3;
  v10 = &v9;
  if (*((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v9, (uint64_t)&std::piecewise_construct, &v10)+ 8) == 1)return PptPersistDir::getRefByOffset(*((PptPersistDir **)this + 24), a2->var1) == -1;
  return 0;
}

uint64_t PptPersistDir::getRefByOffset(PptPersistDir *this, unsigned int a2)
{
  uint64_t *v2;
  uint64_t **v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int *v7;

  v6 = a2;
  v2 = (uint64_t *)*((_QWORD *)this + 8);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = (uint64_t **)((char *)this + 56);
  while (1)
  {
    v4 = *((_DWORD *)v2 + 7);
    if (v4 <= a2)
      break;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0xFFFFFFFFLL;
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  v7 = &v6;
  return *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v6, (uint64_t)&std::piecewise_construct, &v7)+ 8);
}

void EshRoot::appendChild(EshRoot *this, const EshHeader *a2)
{
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = operator new(0x10uLL);
  EshHeader::operator=((uint64_t)v4, (uint64_t)a2);
  v5 = *((_QWORD *)this + 4);
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)this + 2);
    v9 = (unint64_t)v6 - v8;
    v10 = (v5 - v8) >> 3;
    v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1)
      v11 = (v9 >> 3) + 1;
    if (v10 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v11;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 32, v12);
      v15 = v14;
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v9 & 0x7FFFFFFF8];
    v17 = &v13[8 * v15];
    *(_QWORD *)v16 = v4;
    v7 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 2);
    v18 = (char *)*((_QWORD *)this + 3);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 3) = v7;
}

void sub_22A0D91B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

uint64_t PptBinaryReader::goToNextHeader(PptBinaryReader *this, char a2)
{
  const EshHeader *v3;
  int var3;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t NextOffset;
  uint64_t result;

  if ((a2 & 1) != 0)
    goto LABEL_13;
  v3 = (const EshHeader *)*((_QWORD *)this + 25);
  var3 = v3->var3;
  if (v3->var4 == 15)
  {
    if (var3 == 1064 || var3 == 12052 || var3 == 14003)
      goto LABEL_13;
  }
  else if (var3 != 5003)
  {
LABEL_13:
    v7 = (int *)*((_QWORD *)this + 25);
    v8 = *v7;
    v9 = v7[1] + 8;
    goto LABEL_14;
  }
  if (PptBinaryReader::isHeaderSkipped(this, v3))
    goto LABEL_13;
  v9 = *(_DWORD *)(*((_QWORD *)this + 25) + 4);
  v8 = 8;
LABEL_14:
  v10 = (v9 + v8);
  v11 = 152;
  if (!*((_DWORD *)this + 40))
    v11 = 144;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)((char *)this + v11) + 16))(*(_QWORD *)((char *)this + v11), v10, 0);
  *(_DWORD *)(*((_QWORD *)this + 25) + 4) = v10;
  if (!*((_DWORD *)this + 40) && !PptBinaryReader::isBadHeader(this))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22), *((_QWORD *)this + 18));
  do
  {
    v12 = (_DWORD *)*((_QWORD *)this + 25);
    v13 = v12[1];
    *v12 = 0;
    v12[1] = v10;
    if (!PptBinaryReader::isBadHeader(this))
    {
      PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), *((EshHeader **)this + 25), v10);
      v10 = (*(_DWORD *)(*((_QWORD *)this + 25) + 4) + **((_DWORD **)this + 25) + 8);
    }
    if (PptBinaryReader::isBadHeader(this))
    {
      NextOffset = PptPersistDir::getNextOffset(*((PptPersistDir **)this + 24), v13);
      if ((_DWORD)NextOffset == -1)
      {
        v10 = 0xFFFFFFFFLL;
      }
      else
      {
        PptParserVisitor::parse(*((SsrwOOStream ***)this + 23), *((EshHeader **)this + 25), NextOffset);
        v10 = (*(_DWORD *)(*((_QWORD *)this + 25) + 4) + **((_DWORD **)this + 25) + 8);
      }
    }
    result = PptBinaryReader::isBadHeader(this);
    if ((result & 1) != 0)
      break;
    result = PptBinaryReader::isHeaderSkipped(this, *((const EshHeader **)this + 25));
  }
  while ((result & 1) != 0);
  return result;
}

uint64_t PptPersistDir::getNextOffset(PptPersistDir *this, int a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v15;
  unsigned int *v16;

  if (*((int *)this + 20) < 1)
    return 0xFFFFFFFFLL;
  v4 = (uint64_t **)((char *)this + 32);
  v5 = (_QWORD *)((char *)this + 40);
  v6 = 0xFFFFFFFFLL;
  v7 = 1;
  do
  {
    v8 = *v5;
    if (*v5)
    {
      v9 = v5;
      do
      {
        v10 = *(_DWORD *)(v8 + 28);
        v11 = v10 >= v7;
        if (v10 >= v7)
          v12 = (uint64_t *)v8;
        else
          v12 = (uint64_t *)(v8 + 8);
        if (v11)
          v9 = (_QWORD *)v8;
        v8 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v7 >= *((_DWORD *)v9 + 7))
      {
        v15 = v7;
        v16 = &v15;
        if (*((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) > a2)
        {
          if ((_DWORD)v6 == -1
            || (v15 = v7,
                v16 = &v15,
                *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) < (int)v6))
          {
            v15 = v7;
            v16 = &v15;
            v6 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8);
          }
        }
      }
    }
  }
  while ((int)v7++ < *((_DWORD *)this + 20));
  return v6;
}

uint64_t EshRoot::getChildHeader(EshRoot *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (((unint64_t)(*((_QWORD *)this + 3) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * a2);
}

void sub_22A0D97BC(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  uint64_t v3;
  id v5;
  void *v6;

  if (a2 == 1)
  {
    v5 = objc_begin_catch(exc_buf);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    objc_exception_throw(objc_retainAutorelease(v5));
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A0D9844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v4;

  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_22A0D9854()
{
  JUMPOUT(0x22A0D9870);
}

uint64_t EshRoot::getNumChildren(EshRoot *this)
{
  return (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
}

uint64_t EshRoot::getChildType(EshRoot *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (((unint64_t)(*((_QWORD *)this + 3) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(*(_QWORD *)(v2 + 8 * a2) + 10);
}

uint64_t EshRoot::getChildVersion(EshRoot *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (((unint64_t)(*((_QWORD *)this + 3) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 8 * a2) + 12);
}

uint64_t PptBinaryReader::getObjectFactory(PptBinaryReader *this)
{
  return *((_QWORD *)this + 33);
}

EshRoot *PptObjectFactory::createObject(PptObjectFactory *this, PptObjectFactory *a2, uint64_t a3)
{
  int v3;
  EshRoot *v5;
  EshContainer *PowerPointObject;

  v3 = a3;
  if ((_DWORD)a2 == 1)
  {
    v5 = (EshRoot *)operator new(0x28uLL);
    EshRoot::EshRoot(v5);
  }
  else
  {
    if (((_DWORD)a2 - 1) < 0x1C || (unsigned __int16)((_WORD)a2 + 4096) <= 0x122u)
      PowerPointObject = (EshContainer *)(*(uint64_t (**)(PptEshObjectFactory *, PptObjectFactory *, uint64_t))(*(_QWORD *)this->var1 + 16))(this->var1, a2, a3);
    else
      PowerPointObject = PptObjectFactory::createPowerPointObject(a2, a3);
    v5 = PowerPointObject;
  }
  EshObjectFactory::verifyTypeAndVersionOfObject((EshObjectFactory *)v5, (EshObject *)a2, v3);
  return v5;
}

void sub_22A0D999C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

EshContainer *PptObjectFactory::createPowerPointObject(PptObjectFactory *this, int a2)
{
  char v2;
  int v3;
  EshContainer *v4;
  void (**v6)(PptTextRulerAtom *__hidden);
  EshHeader v7;

  v2 = a2;
  v3 = (int)this;
  if (a2 == 15)
  {
    if ((_DWORD)this != 1064 && (_DWORD)this != 12052 && (_DWORD)this != 14003)
      goto LABEL_5;
  }
  else if ((_DWORD)this == 5003)
  {
LABEL_5:
    v4 = (EshContainer *)operator new(0x48uLL);
    EshContainer::EshContainer(v4, v3);
    *(_QWORD *)v4 = &off_24F3B4BB0;
    *((_QWORD *)v4 + 7) = &unk_24F3B4C60;
    *((_BYTE *)v4 + 64) = 0;
    *((_DWORD *)v4 + 17) = -1;
    EshRecord::setVersion((uint64_t)v4, v2);
    return v4;
  }
  EshHeader::makeDefault(&v7);
  v7.var3 = v3;
  v7.var4 = v2;
  if (v3 <= 3997)
  {
    if (v3 > 2020)
    {
      if (v3 > 3010)
      {
        switch(v3)
        {
          case 3031:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptGRatioAtom::PptGRatioAtom(v4, &v7);
            return v4;
          case 3032:
          case 3033:
          case 3036:
            goto LABEL_178;
          case 3034:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptGPointAtom::PptGPointAtom(v4, &v7);
            return v4;
          case 3035:
            v4 = (EshContainer *)operator new(0x30uLL);
            PptOEShapeAtom::PptOEShapeAtom(v4, &v7);
            return v4;
          case 3037:
            v4 = (EshContainer *)operator new(0x30uLL);
            PptRoundTripNewPlaceholderIdAtom::PptRoundTripNewPlaceholderIdAtom(v4, &v7);
            return v4;
          default:
            if (v3 == 3011)
            {
              v4 = (EshContainer *)operator new(0x38uLL);
              PptOEPlaceholderAtom::PptOEPlaceholderAtom((PptOEPlaceholderAtom *)v4, &v7);
            }
            else
            {
              if (v3 != 3025)
                goto LABEL_178;
              v4 = (EshContainer *)operator new(0x40uLL);
              PptGRectAtom::PptGRectAtom(v4, &v7);
            }
            break;
        }
      }
      else
      {
        switch(v3)
        {
          case 2021:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptSoundCollAtom::PptSoundCollAtom(v4, &v7);
            return v4;
          case 2022:
          case 2024:
          case 2026:
          case 2027:
          case 2028:
          case 2029:
          case 2030:
            goto LABEL_178;
          case 2023:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptSoundDataAtom::PptSoundDataAtom(v4, &v7);
            return v4;
          case 2025:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptBookmarkSeedAtom::PptBookmarkSeedAtom(v4, &v7);
            return v4;
          case 2031:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptInt4ArrayAtom::PptInt4ArrayAtom(v4, &v7);
            return v4;
          case 2032:
            v4 = (EshContainer *)operator new(0x78uLL);
            PptColorSchemeAtom::PptColorSchemeAtom((PptColorSchemeAtom *)v4, &v7);
            return v4;
          default:
            if (v3 == 2041)
            {
              v4 = (EshContainer *)operator new(0x38uLL);
              PptBinaryTagBlipAtom::PptBinaryTagBlipAtom(v4, &v7);
            }
            else
            {
              if (v3 != 3009)
                goto LABEL_178;
              v4 = (EshContainer *)operator new(0x38uLL);
              PptExObjRefAtom::PptExObjRefAtom(v4, &v7);
            }
            break;
        }
      }
    }
    else
    {
      switch(v3)
      {
        case 1001:
          v4 = (EshContainer *)operator new(0x58uLL);
          PptDocumentAtom::PptDocumentAtom(v4, &v7);
          break;
        case 1005:
          v4 = (EshContainer *)operator new(0x78uLL);
          PptSlideBaseAtom::PptSlideBaseAtom(v4, &v7);
          break;
        case 1007:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptSlideAtom::PptSlideAtom(v4, &v7);
          break;
        case 1009:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptNotesAtom::PptNotesAtom(v4, &v7);
          break;
        case 1011:
          v4 = (EshContainer *)operator new(0x40uLL);
          PptSlidePersistAtom::PptSlidePersistAtom(v4, &v7);
          break;
        case 1015:
          v4 = (EshContainer *)operator new(0x58uLL);
          PptSSlideLayoutAtom::PptSSlideLayoutAtom(v4, &v7);
          break;
        case 1017:
          v4 = (EshContainer *)operator new(0x48uLL);
          PptSSSlideInfoAtom::PptSSSlideInfoAtom((PptSSSlideInfoAtom *)v4, &v7);
          break;
        case 1019:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptGuideAtom::PptGuideAtom(v4, &v7);
          break;
        case 1021:
          v4 = (EshContainer *)operator new(0x1E8uLL);
          PptViewInfoAtom::PptViewInfoAtom(v4, &v7);
          break;
        case 1022:
          v4 = (EshContainer *)operator new(0x30uLL);
          PptSlideViewInfoAtom::PptSlideViewInfoAtom(v4, &v7);
          break;
        case 1024:
          v4 = (EshContainer *)operator new(0x40uLL);
          PptVBAInfoAtom::PptVBAInfoAtom(v4, &v7);
          break;
        case 1025:
          v4 = (EshContainer *)operator new(0x68uLL);
          PptSSDocInfoAtom::PptSSDocInfoAtom(v4, &v7);
          break;
        case 1030:
          v4 = (EshContainer *)operator new(0xA8uLL);
          PptDocRoutingSlip::PptDocRoutingSlip(v4, &v7);
          break;
        case 1034:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptExObjListAtom::PptExObjListAtom(v4, &v7);
          break;
        case 1037:
          v4 = (EshContainer *)operator new(0x30uLL);
          PptGridSpacing10Atom::PptGridSpacing10Atom(v4, &v7);
          break;
        case 1038:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripThemeAtom::PptRoundTripThemeAtom(v4, &v7);
          break;
        case 1039:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripColorMappingAtom::PptRoundTripColorMappingAtom(v4, &v7);
          break;
        case 1042:
          v4 = (EshContainer *)operator new(0x48uLL);
          PptNamedShowSlidesAtom::PptNamedShowSlidesAtom(v4, &v7);
          break;
        case 1045:
          v4 = (EshContainer *)operator new(0x48uLL);
          PptViewSettingsAtom::PptViewSettingsAtom(v4, &v7);
          break;
        case 1052:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripOriginalMainMasterIdAtom::PptRoundTripOriginalMainMasterIdAtom(v4, &v7);
          break;
        case 1053:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripCompositeMasterIdAtom::PptRoundTripCompositeMasterIdAtom(v4, &v7);
          break;
        case 1054:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripContentMasterInfoAtom::PptRoundTripContentMasterInfoAtom(v4, &v7);
          break;
        case 1055:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripShapeIdAtom::PptRoundTripShapeIdAtom(v4, &v7);
          break;
        case 1056:
          v4 = (EshContainer *)operator new(0x30uLL);
          PptRoundTripHeaderFooterPlaceholderAtom::PptRoundTripHeaderFooterPlaceholderAtom(v4, &v7);
          break;
        case 1058:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripContentMasterIdAtom::PptRoundTripContentMasterIdAtom(v4, &v7);
          break;
        case 1059:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripOfficeArtTextStylesAtom::PptRoundTripOfficeArtTextStylesAtom(v4, &v7);
          break;
        case 1060:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripHeaderFooterDefaultsAtom::PptRoundTripHeaderFooterDefaultsAtom(v4, &v7);
          break;
        case 1061:
          v4 = (EshContainer *)operator new(0x30uLL);
          PptRoundTripDocFlagsAtom::PptRoundTripDocFlagsAtom(v4, &v7);
          break;
        case 1062:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripShapeCheckSumForCustomLayoutsAtom::PptRoundTripShapeCheckSumForCustomLayoutsAtom(v4, &v7);
          break;
        case 1063:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripNotesMasterTextStylesAtom::PptRoundTripNotesMasterTextStylesAtom(v4, &v7);
          break;
        case 1064:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripCustomTableStylesAtom::PptRoundTripCustomTableStylesAtom(v4, &v7);
          break;
        default:
          goto LABEL_178;
      }
    }
  }
  else if (v3 > 6020)
  {
    if (v3 > 12051)
    {
      if (v3 <= 61734)
      {
        switch(v3)
        {
          case 12052:
            v4 = (EshContainer *)operator new(0x40uLL);
            PptCryptSession10ContainerAtom::PptCryptSession10ContainerAtom(v4, &v7);
            break;
          case 14001:
            v4 = (EshContainer *)operator new(0x30uLL);
            PptReviewAtom::PptReviewAtom(v4, &v7);
            break;
          case 14101:
            v4 = (EshContainer *)operator new(0x48uLL);
            PptRoundTripSlideSyncInfoAtom::PptRoundTripSlideSyncInfoAtom(v4, &v7);
            break;
          default:
LABEL_178:
            v4 = (EshContainer *)operator new(0x30uLL);
            EshAtom::EshAtom(v4, &v7);
            *(_QWORD *)v4 = &off_24F3BC910;
            *((_QWORD *)v4 + 4) = &unk_24F3BC9B8;
            *((_DWORD *)v4 + 10) = -1;
            *((_BYTE *)v4 + 44) = 0;
            break;
        }
      }
      else
      {
        switch(v3)
        {
          case 61735:
            v4 = (EshContainer *)operator new(0x48uLL);
            PptAnimNodeAtom::PptAnimNodeAtom(v4, &v7);
            break;
          case 61736:
            v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimConditionAtom::PptAnimConditionAtom(v4, &v7);
            break;
          case 61737:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimModifierAtom::PptAnimModifierAtom(v4, &v7);
            break;
          case 61747:
            v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimBehaviorAtom::PptAnimBehaviorAtom(v4, &v7);
            break;
          case 61748:
            v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimAnimateBehaviorAtom::PptAnimAnimateBehaviorAtom(v4, &v7);
            break;
          case 61749:
            v4 = (EshContainer *)operator new(0x60uLL);
            PptAnimColorBehaviorAtom::PptAnimColorBehaviorAtom(v4, &v7);
            break;
          case 61750:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimEffectBehaviorAtom::PptAnimEffectBehaviorAtom(v4, &v7);
            break;
          case 61751:
            v4 = (EshContainer *)operator new(0x48uLL);
            PptAnimMotionBehaviorAtom::PptAnimMotionBehaviorAtom(v4, &v7);
            break;
          case 61752:
            v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimRotationBehaviorAtom::PptAnimRotationBehaviorAtom(v4, &v7);
            break;
          case 61753:
            v4 = (EshContainer *)operator new(0x50uLL);
            PptAnimScaleBehaviorAtom::PptAnimScaleBehaviorAtom(v4, &v7);
            break;
          case 61754:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimSetBehaviorAtom::PptAnimSetBehaviorAtom(v4, &v7);
            break;
          case 61755:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimCmdBehaviorAtom::PptAnimCmdBehaviorAtom(v4, &v7);
            break;
          case 61760:
            v4 = (EshContainer *)operator new(0x30uLL);
            PptAnimIterateDataAtom::PptAnimIterateDataAtom(v4, &v7);
            break;
          case 61761:
            v4 = (EshContainer *)operator new(0x40uLL);
            PptAnimSequenceDataAtom::PptAnimSequenceDataAtom(v4, &v7);
            break;
          case 61762:
            v4 = (EshContainer *)operator new(0x58uLL);
            PptAnimVariantAtom::PptAnimVariantAtom(v4, &v7);
            break;
          case 61763:
            v4 = (EshContainer *)operator new(0x38uLL);
            PptAnimAnimationValueAtom::PptAnimAnimationValueAtom(v4, &v7);
            break;
          default:
            goto LABEL_178;
        }
      }
    }
    else if (v3 <= 11002)
    {
      switch(v3)
      {
        case 10000:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRulerIndentAtom::PptRulerIndentAtom(v4, &v7);
          return v4;
        case 10001:
          v4 = (EshContainer *)operator new(0xA0uLL);
          PptGScalingAtom::PptGScalingAtom(v4, &v7);
          return v4;
        case 10002:
          v4 = (EshContainer *)operator new(0x40uLL);
          PptGRColorAtom::PptGRColorAtom(v4, &v7);
          return v4;
        case 10003:
          goto LABEL_178;
        case 10004:
          v4 = (EshContainer *)operator new(0xA0uLL);
          PptGLineAtom::PptGLineAtom(v4, &v7);
          return v4;
        default:
          if (v3 == 6021)
          {
            v4 = (EshContainer *)operator new(0x180uLL);
            PptEnvelopeData9Atom::PptEnvelopeData9Atom(v4, &v7);
          }
          else
          {
            if (v3 != 6023)
              goto LABEL_178;
            v4 = (EshContainer *)operator new(0x68uLL);
            PptExitAnimationInfoAtom::PptExitAnimationInfoAtom(v4, &v7);
          }
          break;
      }
    }
    else
    {
      switch(v3)
      {
        case 11003:
          v4 = (EshContainer *)operator new(0x48uLL);
          PptAnimVisualElementAtom::PptAnimVisualElementAtom(v4, &v7);
          break;
        case 11004:
        case 11005:
        case 11006:
        case 11007:
        case 11010:
        case 11012:
        case 11014:
        case 11015:
        case 11016:
        case 11018:
        case 11020:
          goto LABEL_178;
        case 11008:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptAnimHashCode10Atom::PptAnimHashCode10Atom(v4, &v7);
          break;
        case 11009:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptAnimVisualPageAtom::PptAnimVisualPageAtom(v4, &v7);
          break;
        case 11011:
          v4 = (EshContainer *)operator new(0x40uLL);
          PptAnimBuildAtom::PptAnimBuildAtom(v4, &v7);
          break;
        case 11013:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptAnimChartBuildAtom::PptAnimChartBuildAtom(v4, &v7);
          break;
        case 11017:
          v4 = (EshContainer *)operator new(0x40uLL);
          PptAnimParagraphBuildAtom::PptAnimParagraphBuildAtom(v4, &v7);
          break;
        case 11019:
          v4 = (EshContainer *)operator new(0x60uLL);
          PptRoundTripAnimationAtom::PptRoundTripAnimationAtom(v4, &v7);
          break;
        case 11021:
          v4 = (EshContainer *)operator new(0x38uLL);
          PptRoundTripAnimationHashAtom::PptRoundTripAnimationHashAtom(v4, &v7);
          break;
        default:
          switch(v3)
          {
            case 12001:
              v4 = (EshContainer *)operator new(0x48uLL);
              PptComment10Atom::PptComment10Atom(v4, &v7);
              break;
            case 12005:
              v4 = (EshContainer *)operator new(0x38uLL);
              PptCommentIndex10Atom::PptCommentIndex10Atom(v4, &v7);
              break;
            case 12006:
              v4 = (EshContainer *)operator new(0x30uLL);
              PptLinkedShape10Atom::PptLinkedShape10Atom(v4, &v7);
              break;
            case 12007:
              v4 = (EshContainer *)operator new(0x30uLL);
              PptLinkedSlide10Atom::PptLinkedSlide10Atom(v4, &v7);
              break;
            case 12010:
              v4 = (EshContainer *)operator new(0x30uLL);
              PptSlideFlags10Atom::PptSlideFlags10Atom(v4, &v7);
              break;
            case 12011:
              v4 = (EshContainer *)operator new(0x30uLL);
              PptSlideTime10Atom::PptSlideTime10Atom(v4, &v7);
              break;
            default:
              goto LABEL_178;
          }
          break;
      }
    }
  }
  else
  {
    switch(v3)
    {
      case 3998:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptOutlineTextRefAtom::PptOutlineTextRefAtom(v4, &v7);
        return v4;
      case 3999:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptTextHeaderAtom::PptTextHeaderAtom((PptTextHeaderAtom *)v4, &v7);
        return v4;
      case 4000:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextCharsAtom::PptTextCharsAtom(v4, &v7);
        return v4;
      case 4001:
        v4 = (EshContainer *)operator new(0x68uLL);
        PptTextBlockStylingAtom::PptTextBlockStylingAtom(v4, &v7);
        return v4;
      case 4002:
        v4 = (EshContainer *)operator new(0x68uLL);
        PptBaseTextPropertyAtom::PptBaseTextPropertyAtom(v4, &v7);
        return v4;
      case 4003:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextMasterStyleAtom::PptTextMasterStyleAtom((PptTextMasterStyleAtom *)v4, &v7);
        return v4;
      case 4004:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptTextDefaultCharacterStyleAtom::PptTextDefaultCharacterStyleAtom(v4, &v7);
        return v4;
      case 4005:
        v4 = (EshContainer *)operator new(0x60uLL);
        PptTextDefaultParagraphStyleAtom::PptTextDefaultParagraphStyleAtom(v4, &v7);
        return v4;
      case 4006:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptTextGenericRulerAtom::PptTextGenericRulerAtom(v4, &v7);
        v6 = &off_24F3BC738;
        goto LABEL_132;
      case 4007:
        v4 = (EshContainer *)operator new(0x40uLL);
        PptTextBookmarkAtom::PptTextBookmarkAtom(v4, &v7);
        return v4;
      case 4008:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptTextBytesAtom::PptTextBytesAtom(v4, &v7);
        return v4;
      case 4009:
        v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultSpecialInfoAtom::PptTextDefaultSpecialInfoAtom(v4, &v7);
        return v4;
      case 4010:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockSpecialInfoAtom::PptTextBlockSpecialInfoAtom(v4, &v7);
        return v4;
      case 4011:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptTextGenericRulerAtom::PptTextGenericRulerAtom(v4, &v7);
        v6 = &off_24F3BC818;
LABEL_132:
        *(_QWORD *)v4 = v6;
        *((_QWORD *)v4 + 4) = v6 + 21;
        return v4;
      case 4012:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStyling9Atom::PptTextBlockStyling9Atom(v4, &v7);
        return v4;
      case 4013:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextMasterStyle9Atom::PptTextMasterStyle9Atom((PptTextMasterStyle9Atom *)v4, &v7);
        return v4;
      case 4014:
      case 4019:
      case 4021:
      case 4025:
      case 4027:
      case 4028:
      case 4029:
      case 4030:
      case 4031:
      case 4032:
      case 4033:
      case 4036:
      case 4037:
      case 4039:
      case 4040:
      case 4041:
      case 4042:
      case 4043:
      case 4044:
      case 4046:
      case 4047:
      case 4052:
      case 4053:
      case 4054:
      case 4055:
      case 4057:
      case 4059:
      case 4060:
      case 4061:
      case 4062:
      case 4064:
      case 4068:
      case 4069:
      case 4070:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4076:
      case 4077:
      case 4078:
      case 4079:
      case 4080:
      case 4082:
      case 4084:
      case 4092:
      case 4093:
      case 4094:
      case 4095:
      case 4096:
      case 4097:
      case 4098:
      case 4099:
      case 4101:
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4110:
      case 4111:
      case 4112:
      case 4116:
      case 4118:
      case 4119:
      case 4123:
        goto LABEL_178;
      case 4015:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptTextOutlineBlockKeyAtom::PptTextOutlineBlockKeyAtom(v4, &v7);
        return v4;
      case 4016:
        v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultStyle9Atom::PptTextDefaultStyle9Atom(v4, &v7);
        return v4;
      case 4017:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStyling10Atom::PptTextBlockStyling10Atom(v4, &v7);
        return v4;
      case 4018:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextMasterStyle10Atom::PptTextMasterStyle10Atom(v4, &v7);
        return v4;
      case 4020:
        v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultStyle10Atom::PptTextDefaultStyle10Atom(v4, &v7);
        return v4;
      case 4022:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStyling11Atom::PptTextBlockStyling11Atom(v4, &v7);
        return v4;
      case 4023:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptFontEntityAtom::PptFontEntityAtom(v4, &v7);
        return v4;
      case 4024:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptFontEmbedDataAtom::PptFontEmbedDataAtom(v4, &v7);
        return v4;
      case 4026:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptCString::PptCString(v4, &v7);
        return v4;
      case 4034:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExOleObj::PptExOleObj(v4, &v7);
        return v4;
      case 4035:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptExOleObjAtom::PptExOleObjAtom(v4, &v7);
        return v4;
      case 4038:
        v4 = (EshContainer *)operator new(0x70uLL);
        PptCorePictAtom::PptCorePictAtom(v4, &v7);
        return v4;
      case 4045:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExEmbedAtom::PptExEmbedAtom(v4, &v7);
        return v4;
      case 4048:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptBookmarkEntityAtom::PptBookmarkEntityAtom(v4, &v7);
        return v4;
      case 4049:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExLinkAtom::PptExLinkAtom(v4, &v7);
        return v4;
      case 4050:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptSrKinsokuAtom::PptSrKinsokuAtom(v4, &v7);
        return v4;
      case 4051:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExHyperlinkAtom::PptExHyperlinkAtom(v4, &v7);
        return v4;
      case 4056:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptSlideNumberMCAtom::PptSlideNumberMCAtom(v4, &v7);
        return v4;
      case 4058:
        v4 = (EshContainer *)operator new(0x40uLL);
        PptHeadersFootersAtom::PptHeadersFootersAtom((PptHeadersFootersAtom *)v4, &v7);
        return v4;
      case 4063:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptTxInteracInfoAtom::PptTxInteracInfoAtom((PptTxInteracInfoAtom *)v4, &v7);
        return v4;
      case 4065:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptEmFormatAtom::PptEmFormatAtom(v4, &v7);
        return v4;
      case 4066:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptCharFormatAtom::PptCharFormatAtom(v4, &v7);
        return v4;
      case 4067:
        v4 = (EshContainer *)operator new(0x78uLL);
        PptParaFormatAtom::PptParaFormatAtom(v4, &v7);
        return v4;
      case 4071:
        v4 = (EshContainer *)operator new(0x60uLL);
        PptRecolorInfoAtom::PptRecolorInfoAtom(v4, &v7);
        return v4;
      case 4081:
        v4 = (EshContainer *)operator new(0x68uLL);
        PptEntranceAnimationInfoAtom::PptEntranceAnimationInfoAtom(v4, &v7);
        return v4;
      case 4083:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptInteractiveInfoAtom::PptInteractiveInfoAtom(v4, &v7);
        return v4;
      case 4085:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptUserEditAtom::PptUserEditAtom(v4, &v7);
        return v4;
      case 4086:
        v4 = (EshContainer *)operator new(0x58uLL);
        PptCurrentUserAtom::PptCurrentUserAtom(v4, &v7);
        return v4;
      case 4087:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptDateTimeMCAtom::PptDateTimeMCAtom(v4, &v7);
        return v4;
      case 4088:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptGenericDateMCAtom::PptGenericDateMCAtom(v4, &v7);
        return v4;
      case 4089:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptHeaderMCAtom::PptHeaderMCAtom(v4, &v7);
        return v4;
      case 4090:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptFooterMCAtom::PptFooterMCAtom(v4, &v7);
        return v4;
      case 4091:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExControlAtom::PptExControlAtom(v4, &v7);
        return v4;
      case 4100:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExMediaAtom::PptExMediaAtom(v4, &v7);
        return v4;
      case 4113:
        v4 = (EshContainer *)operator new(0x68uLL);
        PptExOleObjStg::PptExOleObjStg(v4, &v7);
        return v4;
      case 4114:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExCDAudioAtom::PptExCDAudioAtom(v4, &v7);
        return v4;
      case 4115:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExWaveAudioEmbeddedAtom::PptExWaveAudioEmbeddedAtom(v4, &v7);
        return v4;
      case 4117:
        v4 = (EshContainer *)operator new(0xB8uLL);
        PptRTFDateTimeMCAtom::PptRTFDateTimeMCAtom(v4, &v7);
        return v4;
      case 4120:
        v4 = (EshContainer *)operator new(0x38uLL);
        PptExHyperlinkExtraAtom::PptExHyperlinkExtraAtom(v4, &v7);
        return v4;
      case 4121:
        v4 = (EshContainer *)operator new(0x48uLL);
        PptTextBlockStylingMac11Atom::PptTextBlockStylingMac11Atom(v4, &v7);
        return v4;
      case 4122:
        v4 = (EshContainer *)operator new(0x50uLL);
        PptTextMasterStyleMac11Atom::PptTextMasterStyleMac11Atom(v4, &v7);
        return v4;
      case 4124:
        v4 = (EshContainer *)operator new(0x40uLL);
        PptTextDefaultStyleMac11Atom::PptTextDefaultStyleMac11Atom(v4, &v7);
        return v4;
      default:
        if (v3 == 6000)
        {
          v4 = (EshContainer *)operator new(0x40uLL);
          PptPrintOptions::PptPrintOptions(v4, &v7);
        }
        else
        {
          if (v3 != 6002)
            goto LABEL_178;
          v4 = (EshContainer *)operator new(0x68uLL);
          PptPersistPtrIncrAtom::PptPersistPtrIncrAtom(v4, &v7);
        }
        break;
    }
  }
  return v4;
}

void sub_22A0DAC58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshContainer::EshContainer(EshContainer *this, unsigned __int16 a2)
{
  _QWORD *v2;

  EshRecord::EshRecord(this, a2, 0xFu);
  *v2 = &off_24F39E8F0;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
}

void EshRecord::EshRecord(EshRecord *this, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v5;

  EshObject::EshObject((EshObject *)this, a2);
  *(_QWORD *)v5 = off_24F39F638;
  EshHeader::EshHeader((EshHeader *)(v5 + 12), a3, 0, a2, 0, 0);
}

void EshHeader::EshHeader(EshHeader *this, unsigned __int8 a2, signed __int16 a3, unsigned __int16 a4, int a5, unsigned int a6)
{
  this->var0 = a5;
  this->var1 = a6;
  this->var2 = a3;
  this->var3 = a4;
  this->var4 = a2;
}

EshObjectFactory *EshObjectFactory::verifyTypeAndVersionOfObject(EshObjectFactory *this, EshObject *a2, int a3)
{
  int v4;
  EshObjectFactory *v5;
  _DWORD *exception;

  if (this)
  {
    v4 = (int)a2;
    v5 = this;
    this = (EshObjectFactory *)(*((uint64_t (**)(EshObjectFactory *))this->var0 + 4))(this);
    if ((_DWORD)this)
    {
      if (EshRecord::getVersion((EshRecord *)v5) != a3
        || (this = (EshObjectFactory *)EshRecord::getRecordType((EshRecord *)v5), (_DWORD)this != v4))
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 7005;
      }
    }
  }
  return this;
}

uint64_t EshRecord::isRecord(EshRecord *this)
{
  return 1;
}

uint64_t EshRecord::getVersion(EshRecord *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t EshRecord::getRecordType(EshRecord *this)
{
  return *((unsigned __int16 *)this + 11);
}

uint64_t PptBinaryReader::read(PptBinaryReader *this, EshObject *a2)
{
  uint64_t (*v4)(PptBinaryReader *, EshObject *);
  uint64_t v5;

  if ((*((unsigned int (**)(EshObject *))a2->var0 + 11))(a2))
  {
    v4 = *(uint64_t (**)(PptBinaryReader *, EshObject *))(*(_QWORD *)this + 248);
  }
  else
  {
    v5 = *(_QWORD *)this;
    if (a2->var1 - 2 > 0x1A)
      v4 = *(uint64_t (**)(PptBinaryReader *, EshObject *))(v5 + 256);
    else
      v4 = *(uint64_t (**)(PptBinaryReader *, EshObject *))(v5 + 264);
  }
  return v4(this, a2);
}

uint64_t EshObject::isContainer(EshObject *this)
{
  return (*((unsigned int (**)(EshObject *))this->var0 + 10))(this) ^ 1;
}

uint64_t EshContainer::isAtom(EshContainer *this)
{
  return 0;
}

uint64_t PptBinaryReader::readContainer(PptBinaryReader *this, EshObject *a2)
{
  uint64_t result;
  uint64_t v5;
  const EshHeader *v6;

  PptBinaryReader::readRecord(this, a2);
  result = (*((uint64_t (**)(EshObject *))a2->var0 + 5))(a2);
  if ((_DWORD)result)
  {
    v5 = 0;
    do
    {
      v6 = (const EshHeader *)(*((uint64_t (**)(EshObject *, uint64_t))a2->var0 + 13))(a2, v5);
      if (PptBinaryReader::isHeaderSkipped(this, v6))
      {
        EshContainer::removeChild((EshContainer *)a2, v5);
      }
      else if ((unsigned __int16)(v6->var3 + 4096) > 0x122u
             || EshObject::isEscher(a2)
             || a2->var1 - 2 < 0x1B)
      {
        v5 = (v5 + 1);
      }
      else
      {
        (*((void (**)(EshObject *, uint64_t, uint64_t))a2->var0 + 16))(a2, v5, 1);
      }
      result = (*((uint64_t (**)(EshObject *))a2->var0 + 5))(a2);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t PptBinaryReader::readRecord(PptBinaryReader *this, EshObject *a2)
{
  EshRecord *v4;
  EshBinaryReader *v5;
  int v6;
  double v7;
  uint64_t v8;
  PptBinaryReader *v9;
  char v10;
  uint64_t v11;
  PptPersistDir *v12;
  unsigned int Offset;
  uint64_t RefByOffset;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t result;

  PptBinaryReader::checkStarted(this);
  if ((unsigned __int16)((*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2) + 4096) <= 0x122u)
  {
    if (*((_DWORD *)this + 40) == 2 && !EshBinaryReader::atEnd(*((EshBinaryReader **)this + 21)))
    {
      v11 = *((_QWORD *)this + 21);
      goto LABEL_18;
    }
    v5 = (EshBinaryReader *)*((_QWORD *)this + 22);
    if (v5)
    {
      if (!EshBinaryReader::atEnd(v5))
        goto LABEL_13;
    }
  }
  if (PptBinaryReader::isBadHeader(this) && *((_QWORD *)this + 18) && *((_DWORD *)this + 40))
    *((_DWORD *)this + 40) = 0;
  v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
  PptBinaryReader::skipTo(this, v6);
  v7 = EshRecord::setHeader(v4, *((const EshHeader **)this + 25));
  if (!*((_DWORD *)this + 40))
  {
LABEL_13:
    v11 = *((_QWORD *)this + 22);
LABEL_18:
    (*(void (**)(uint64_t, EshObject *))(*(_QWORD *)v11 + 40))(v11, a2);
    goto LABEL_29;
  }
  v8 = *((_QWORD *)this + 25);
  if ((unsigned __int16)(*(_WORD *)(v8 + 10) + 4096) > 0x122u)
  {
    (*(void (**)(EshRecord *, _QWORD, double))(*(_QWORD *)v4 + 112))(v4, *((_QWORD *)this + 23), v7);
    v12 = (PptPersistDir *)*((_QWORD *)this + 24);
    Offset = EshRecord::getOffset(v4);
    RefByOffset = PptPersistDir::getRefByOffset(v12, Offset);
    if ((_DWORD)RefByOffset != -1)
    {
      v15 = RefByOffset;
      if ((*((unsigned int (**)(EshObject *))a2->var0 + 10))(a2))
      {
        v17 = v16 + 32;
      }
      else
      {
        v17 = v16 + 56;
      }
      if (v16)
        v18 = v17;
      else
        v18 = 0;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 24))(v18, v15);
    }
    v10 = EshRecord::getRecordType(v4) == 5003
       && (*(unsigned int (**)(EshRecord *))(*(_QWORD *)v4 + 40))(v4) == 0;
    v9 = this;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19), *(unsigned int *)(v8 + 4), 0, v7);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), *((_QWORD *)this + 19));
    (*(void (**)(_QWORD, EshObject *))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), a2);
    v9 = this;
    v10 = 1;
  }
  PptBinaryReader::goToNextHeader(v9, v10);
LABEL_29:
  *((_DWORD *)this + 58) = EshRecord::getOffset(v4);
  result = EshRecord::getDataLength(v4);
  *((_DWORD *)this + 59) = result;
  return result;
}

uint64_t EshObject::getType(EshObject *this)
{
  return this->var1;
}

BOOL PptBinaryReader::skipTo(PptBinaryReader *this, int a2)
{
  const EshHeader *v4;
  _BOOL8 result;
  _DWORD *exception;

  while (!PptBinaryReader::isBadHeader(this))
  {
    v4 = (const EshHeader *)*((_QWORD *)this + 25);
    if (v4->var3 == a2 && !PptBinaryReader::isHeaderSkipped(this, v4))
      break;
    PptBinaryReader::goToNextHeader(this, 0);
  }
  result = PptBinaryReader::isBadHeader(this);
  if (result)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7000;
  }
  return result;
}

double EshRecord::setHeader(EshRecord *this, const EshHeader *a2)
{
  return EshHeader::operator=((uint64_t)this + 12, (uint64_t)a2);
}

uint64_t EshContainer::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, EshContainer *a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  EshHeader *v9;
  uint64_t v10;
  BOOL v11;
  _DWORD *exception;
  _DWORD *v14;
  _DWORD v15[2];
  unsigned __int16 v16;

  v4 = (char *)a2 + 12;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  EshHeader::operator=((uint64_t)v15, (uint64_t)v4);
  v7 = v15[0];
  v6 = v15[1];
  EshContainer::removeChildren((uint64_t)a2);
  v8 = v16;
  v9 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v9);
  v10 = (v6 + v7 + 8);
  while (v5 < v10)
  {
    PptParserVisitor::parse(this, v9, v5, *((SsrwOOStream **)this + 1));
    EshContainer::addChild(a2, v9);
    v11 = (int)v5 + v9->var0 + 8 >= v5;
    v5 = (v5 + v9->var0 + 8);
    if (!v11)
    {
      if (v8 != 5003)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 7013;
      }
      goto LABEL_8;
    }
  }
  if (v5 <= v10)
    goto LABEL_9;
  if (v8 != 5003)
  {
    v14 = __cxa_allocate_exception(4uLL);
    *v14 = 7013;
  }
LABEL_8:
  EshContainer::removeChildren((uint64_t)a2);
LABEL_9:
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v10, 0);
  PptParserVisitor::endRead(this, a2);
  if (v9)
    MEMORY[0x22E2DD408](v9, 0x1000C408B6DE1C6);
  return 1;
}

void sub_22A0DB624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t EshContainer::removeChildren(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 32);
  v3 = *(_QWORD *)(this + 40);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C408B6DE1C6);
        v2 = *(_QWORD *)(v1 + 32);
        v3 = *(_QWORD *)(v1 + 40);
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3))
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v2 + 8 * v4++) = 0;
      v2 = *(_QWORD *)(v1 + 32);
      v3 = *(_QWORD *)(v1 + 40);
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 40) = v2;
  return this;
}

void EshContainer::addChild(EshContainer *this, const EshHeader *a2)
{
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = operator new(0x10uLL);
  EshHeader::operator=((uint64_t)v4, (uint64_t)a2);
  v5 = *((_QWORD *)this + 6);
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)this + 4);
    v9 = (unint64_t)v6 - v8;
    v10 = (v5 - v8) >> 3;
    v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1)
      v11 = (v9 >> 3) + 1;
    if (v10 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v11;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 48, v12);
      v15 = v14;
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v9 & 0x7FFFFFFF8];
    v17 = &v13[8 * v15];
    *(_QWORD *)v16 = v4;
    v7 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 4);
    v18 = (char *)*((_QWORD *)this + 5);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v16;
    *((_QWORD *)this + 5) = v7;
    *((_QWORD *)this + 6) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 5) = v7;
}

void sub_22A0DB7EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

uint64_t EshRecord::getOffset(EshRecord *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t EshContainer::getNumChildren(EshContainer *this)
{
  return (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3;
}

uint64_t EshContainer::getChildHeader(EshContainer *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (((unint64_t)(*((_QWORD *)this + 5) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v2 + 8 * a2);
}

void sub_22A0DB8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshContainer::getChildType(EshContainer *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 4);
  if (((unint64_t)(*((_QWORD *)this + 5) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *(unsigned __int16 *)(*(_QWORD *)(v2 + 8 * a2) + 10);
}

uint64_t EshContainer::getChildVersion(EshContainer *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 4);
  if (((unint64_t)(*((_QWORD *)this + 5) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 8 * a2) + 12);
}

void PptDocumentAtom::PptDocumentAtom(PptDocumentAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B7070;
  *(_QWORD *)(v2 + 32) = &unk_24F3B7118;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 72) = 1;
  *(_DWORD *)(v2 + 76) = 0;
  *(_WORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 82) = 1;
}

uint64_t EshObject::isAtom(EshObject *this)
{
  return 1;
}

void PptBinaryReader::readAtom(PptBinaryReader *this, EshObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  EshRecord *v7;
  EshRecord *v8;
  int RecordType;
  int Version;
  double v11;
  _DWORD *v12;
  _DWORD *exception;
  _DWORD *v14;
  _BYTE v15[10];
  unsigned __int16 v16;
  unsigned __int8 v17;
  _BYTE v18[64];

  PptBinaryReader::readRecord(this, a2);
  if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 61447 && HIDWORD(a2[3].var0))
  {
    v4 = *((_QWORD *)this + 18);
    if (!v4)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    EshParserVisitor::EshParserVisitor((EshParserVisitor *)v18, *((SsrwOOStream **)this + 18), *((const EshObjectFactory **)this + 2));
    EshHeader::makeDefault((EshHeader *)v15);
    EshParserVisitor::visit((EshParserVisitor *)v18, (EshHeader *)v15, *(unsigned int *)&a2[3].var1);
    if (!EshBlip::isBlipRecordType((EshBlip *)v16))
    {
      v14 = __cxa_allocate_exception(4uLL);
      *v14 = 7005;
    }
    v6 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v16, v17);
    if (!v6
    {
      v12 = __cxa_allocate_exception(4uLL);
      *v12 = 7005;
    }
    v11 = EshRecord::setHeader(v8, (const EshHeader *)v15);
    (*(void (**)(EshRecord *, _BYTE *, double))(*(_QWORD *)v8 + 112))(v8, v18, v11);
    a2[2].var0 = (void **)v8;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), v5, 0);
    EshParserVisitor::~EshParserVisitor((EshParserVisitor *)v18);
  }
}

void sub_22A0DBB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  EshParserVisitor::~EshParserVisitor((EshParserVisitor *)va);
  _Unwind_Resume(a1);
}

uint64_t PptDocumentAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 88))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptDocumentAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    goto LABEL_12;
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    goto LABEL_12;
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), a2, 8u);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 24
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 28)
    || (*((_DWORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 32)
    || (*((_WORD *)a2 + 36) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 34)
    || (*((_DWORD *)a2 + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 36)
    || (*((_BYTE *)a2 + 80) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 37)
    || (*((_BYTE *)a2 + 81) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 38)
    || (PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 1u),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 39))
  {
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_BYTE *)a2 + 82) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSrKinsokuAtom::PptSrKinsokuAtom(PptSrKinsokuAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BAD80;
  *(_QWORD *)(v2 + 32) = &unk_24F3BAE28;
}

uint64_t PptSrKinsokuAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 680))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSrKinsokuAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptFontEntityAtom::PptFontEntityAtom(PptFontEntityAtom *this, const EshHeader *a2)
{
  uint64_t v3;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(_BYTE *)(v3 + 44) = 0;
  *(_QWORD *)v3 = &off_24F3B8A40;
  *(_QWORD *)(v3 + 32) = &unk_24F3B8AE8;
  CsString::CsString((CsString *)(v3 + 48));
  *((_WORD *)this + 36) = 0;
}

uint64_t PptFontEntityAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 120))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, CsString *a2)
{
  int v4;
  unsigned __int16 *var1;
  unsigned int v6;
  _DWORD *exception;
  unsigned int v9;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v9 = 32;
  CsString::reserve(a2 + 2, 32);
  a2[2].var2 = 0;
  bzero(a2[2].var1, 2 * a2[2].var3);
  (*(void (**)(_QWORD, unsigned int *, unsigned __int16 *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), &v9, a2[2].var1);
  CsString::setCount(a2 + 2, v9);
  var1 = (unsigned __int16 *)&unk_22A4D4C3C;
  if (a2[2].var1)
    var1 = a2[2].var1;
  v6 = v9;
  if (!var1[v9 - 1])
  {
    CsString::setCount(a2 + 2, v9 - 1);
    v6 = v9;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), (const EshRecord *)a2, 64 - 2 * v6);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 64
    || (BYTE1(a2[3].var0) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 65)
    || (PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 2u),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 67))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  LOBYTE(a2[3].var0) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

{
  int DataLength;
  int v5;
  unsigned int v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  DataLength = EshRecord::getDataLength((EshRecord *)a2);
  if (DataLength >= 0)
    v5 = DataLength;
  else
    v5 = DataLength + 1;
  v7 = v5 >> 1;
  CsString::reserve(a2 + 2, (v5 >> 1) + 1);
  a2[2].var2 = 0;
  bzero(a2[2].var1, 2 * a2[2].var3);
  (*(void (**)(_QWORD, unsigned int *, unsigned __int16 *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), &v7, a2[2].var1);
  CsString::setCount(a2 + 2, v7);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

{
  int DataLength;
  int v5;
  int v6;
  uint64_t v7;
  __int16 *var1;
  uint64_t v9;
  int v10;
  __int16 v11;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  DataLength = EshRecord::getDataLength((EshRecord *)a2);
  v5 = DataLength;
  if (DataLength >= 0)
    v6 = DataLength;
  else
    v6 = DataLength + 1;
  v7 = (v6 >> 1);
  CsString::reserve(a2 + 2, v7 + 1);
  a2[2].var2 = 0;
  bzero(a2[2].var1, 2 * a2[2].var3);
  if (v5 >= 2)
  {
    var1 = (__int16 *)a2[2].var1;
    v9 = v7;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
      if (v10)
        v11 = v10;
      else
        v11 = 32;
      *var1++ = v11;
      --v9;
    }
    while (v9);
  }
  CsString::setCount(a2 + 2, v7);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  *((_DWORD *)this + 16) = v7;
  return 1;
}

uint64_t SsrwOOStgStream::readString16(uint64_t this, int *a2, unsigned __int16 *a3)
{
  int v4;
  _DWORD *exception;
  int v6;

  v6 = *a2;
  if (v6)
  {
    this = readString16(*(_QWORD *)(this + 192), &v6, a3);
    if ((_DWORD)this)
    {
      v4 = this;
      exception = __cxa_allocate_exception(4uLL);
      *exception = v4;
    }
    *a2 = v6;
  }
  return this;
}

uint64_t readString16(uint64_t a1, int *a2, _WORD *a3)
{
  uint64_t result;
  _WORD *v6;
  int v7;
  int v8;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      v6 = a3;
      if (a3)
      {
        if (*a2 < 1)
        {
          result = 0;
          v8 = 0;
        }
        else
        {
          v7 = 1;
          do
          {
            v8 = v7;
            result = readUInt16(a1, v6);
            if (!*v6++)
              break;
            v7 = v8 + 1;
          }
          while (v8 < *a2 && (_DWORD)result == 0);
        }
        *a2 = v8;
      }
    }
  }
  return result;
}

_WORD *_ChWcsncpy(_WORD *result, const unsigned __int16 *a2, uint64_t a3)
{
  _WORD *v3;

  v3 = result;
  if (a3)
  {
    v3 = result;
    do
    {
      if (!*a2)
        break;
      *v3++ = *a2++;
      --a3;
    }
    while (a3);
  }
  *v3 = 0;
  return result;
}

void PptTextDefaultCharacterStyleAtom::PptTextDefaultCharacterStyleAtom(PptTextDefaultCharacterStyleAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBB18;
  *(_QWORD *)(v2 + 32) = &unk_24F3BBBC8;
  PptCharProperty::PptCharProperty((PptCharProperty *)(v2 + 48));
}

void PptCharProperty::PptCharProperty(PptCharProperty *this)
{
  *(_DWORD *)&this->var0 &= 0xFFE00000;
  *((_WORD *)this + 2) &= 0x8000u;
  *(_DWORD *)&this->var17 = 16711680;
  *(_QWORD *)&this->var13 = 0;
  *(_QWORD *)&this->var18.var0.var1 = 0;
  *(int *)((char *)&this->var18.var1 + 2) = 0;
}

uint64_t PptTextDefaultCharacterStyleAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 720))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultCharacterStyleAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EshRecord::getEndOffset(a2);
  PptParserVisitor::parseCharProperty(this, (PptCharProperty *)((char *)a2 + 48));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextDefaultParagraphStyleAtom::PptTextDefaultParagraphStyleAtom(PptTextDefaultParagraphStyleAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBE08;
  *(_QWORD *)(v2 + 32) = &unk_24F3BBEB0;
  PptParaProperty::PptParaProperty((PptParaProperty *)(v2 + 48));
}

void PptParaProperty::PptParaProperty(PptParaProperty *this)
{
  char v1;

  v1 = *((_BYTE *)this + 2);
  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = v1 & 0xE0;
  *(_WORD *)((char *)this + 3) &= 0xC000u;
  *(_QWORD *)((char *)this + 6) = 0xFF000000000000;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  *(_QWORD *)((char *)this + 14) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
}

uint64_t PptTextDefaultParagraphStyleAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 728))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextDefaultParagraphStyleAtom *a2)
{
  unsigned int EndOffset;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EndOffset = EshRecord::getEndOffset(a2);
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 2u);
  PptParserVisitor::parseParaProperty(this, (PptTextDefaultParagraphStyleAtom *)((char *)a2 + 48), EndOffset);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextDefaultSpecialInfoAtom::PptTextDefaultSpecialInfoAtom(PptTextDefaultSpecialInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBF00;
  *(_QWORD *)(v2 + 32) = &unk_24F3BBFA8;
  PptSpecialInfo::PptSpecialInfo((PptSpecialInfo *)(v2 + 48));
}

void PptSpecialInfo::PptSpecialInfo(PptSpecialInfo *this)
{
  char v1;

  v1 = *((_BYTE *)&this->var0 + 1) & 0xF8;
  *(_BYTE *)&this->var0 &= 0xF8u;
  *((_BYTE *)&this->var0 + 1) = v1;
  this->var1 = 0;
  this->var2 = 0;
}

uint64_t PptTextDefaultSpecialInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 736))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSpecialInfo *a2)
{
  unsigned int EndOffset;
  char v5;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*(_DWORD *)&a2[1].var0 + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EndOffset = EshRecord::getEndOffset((EshRecord *)a2);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 4 > EndOffset)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::parseSpecialInfo(this, a2 + 3, v5, EndOffset);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptTextMasterStyleAtom::PptTextMasterStyleAtom(PptTextMasterStyleAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBD10;
  *(_QWORD *)(v2 + 32) = &unk_24F3BBDB8;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextMasterStyleAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 376))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextMasterStyleAtom *a2)
{
  unsigned int EndOffset;
  int v5;
  int Instance;
  _BOOL4 isDerivedType;
  _BOOL4 v8;
  int v9;
  uint64_t v10;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EndOffset = EshRecord::getEndOffset((EshRecord *)a2);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  Instance = EshRecord::getInstance((EshRecord *)a2);
  isDerivedType = PptTextHeaderAtom::isDerivedType(Instance);
  if (v5)
  {
    v8 = isDerivedType;
    v9 = 0;
    do
    {
      v10 = PptTextMasterStyleAtom::addLevel(a2);
      if (v8)
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
      PptParserVisitor::parseParaProperty(this, (PptParaProperty *)v10, EndOffset);
      PptParserVisitor::parseCharProperty(this, (PptCharProperty *)(v10 + 48));
      ++v9;
    }
    while ((unsigned __int16)v9 < (unsigned __int16)v5);
  }
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t EshRecord::getInstance(EshRecord *this)
{
  return *((__int16 *)this + 10);
}

BOOL PptTextHeaderAtom::isDerivedType(int a1)
{
  return (a1 - 5) < 4;
}

uint64_t PptTextMasterStyleAtom::addLevel(PptTextMasterStyleAtom *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = operator new();
  PptParaProperty::PptParaProperty((PptParaProperty *)v2);
  PptCharProperty::PptCharProperty((PptCharProperty *)(v2 + 48));
  v3 = *((_QWORD *)this + 8);
  v4 = (uint64_t *)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (uint64_t *)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A0DC988(_Unwind_Exception *a1)
{
  PptParaProperty *v1;

  PptParaProperty::~PptParaProperty(v1);
  MEMORY[0x22E2DD408](v1, 0x1020C40E55D8E32);
  _Unwind_Resume(a1);
}

PptColor *PptColor::setColor(PptColor *this, unsigned int a2)
{
  this->var1 = HIBYTE(a2);
  this->var0.var3 = BYTE2(a2);
  this->var0.var2 = BYTE1(a2);
  this->var0.var1 = a2;
  return this;
}

BOOL EshObject::isEscher(EshObject *this)
{
  return (unsigned __int16)(this->var1 + 4096) < 0x123u;
}

uint64_t EshContainer::setChildType(uint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v3;
  _DWORD *exception;

  v3 = *(_QWORD *)(this + 32);
  if (((unint64_t)(*(_QWORD *)(this + 40) - v3) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  *(_WORD *)(*(_QWORD *)(v3 + 8 * a2) + 10) = a3;
  return this;
}

uint64_t EshObject::isRecord(EshObject *this)
{
  return 0;
}

uint64_t EshBinaryReader::start(EshBinaryReader *this, SsrwOOStream *a2)
{
  EshParserVisitor *v4;
  int v5;
  uint64_t v6;
  _DWORD *exception;
  int v9;

  (*(void (**)(EshBinaryReader *))(*(_QWORD *)this + 24))(this);
  if (*((_QWORD *)this + 1))
  {
    exception = __cxa_allocate_exception(4uLL);
    v9 = 7011;
    goto LABEL_10;
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v9 = 7001;
LABEL_10:
    *exception = v9;
  }
  if ((*((unsigned int (**)(SsrwOOStream *))a2->var0 + 22))(a2) <= 7)
    goto LABEL_7;
  *((_QWORD *)this + 1) = a2;
  v4 = (EshParserVisitor *)operator new(0x40uLL);
  EshParserVisitor::EshParserVisitor(v4, a2, *((const EshObjectFactory **)this + 3));
  *((_QWORD *)this + 2) = v4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)this + 8) = v5;
  *((_DWORD *)this + 18) = v5;
  EshHeader::makeDefault((EshHeader *)((char *)this + 76));
  *((_DWORD *)this + 20) = -1;
  v6 = (*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)this + 96))(this);
  *((_DWORD *)this + 9) = *(_DWORD *)(v6 + 4) + *(_DWORD *)v6 + 8;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1)) < *(_DWORD *)v6
    || (unsigned __int16)(*(_WORD *)(v6 + 10) + 4096) >= 0x123u)
  {
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    v9 = 7009;
    goto LABEL_10;
  }
  *((_DWORD *)this + 9) = *(_DWORD *)v6 + *(_DWORD *)(v6 + 4) + 8;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned int *)this + 8), 0);
}

void sub_22A0DCBA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshBinaryReader::finish(EshBinaryReader *this)
{
  uint64_t v2;
  EshHeader v3;

  *((_QWORD *)this + 1) = 0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  EshHeader::makeDefault(&v3);
  EshHeader::operator=((uint64_t)this + 76, (uint64_t)&v3);
  *((_QWORD *)this + 4) = 0;
  if (*((_DWORD *)this + 14))
    *((_DWORD *)this + 14) = 0;
}

EshHeader *EshBinaryReader::getNextHeader(EshParserVisitor **this)
{
  EshHeader *v1;
  uint64_t v2;

  v1 = (EshHeader *)((char *)this + 76);
  v2 = *((unsigned int *)this + 18);
  if (*((_DWORD *)this + 20) != (_DWORD)v2)
    EshParserVisitor::visit(this[2], v1, v2);
  return v1;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshHeader *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  _DWORD *exception;

  if ((_DWORD)a3 == -1)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  }
  else
  {
    v5 = a3;
    if ((a3 & 0x80000000) != 0)
      goto LABEL_8;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a3, 0);
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
  a2->var4 = v6 & 0xF;
  a2->var2 = v6 >> 4;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
  if (v7 == 1
    || (a2->var3 = v7,
        v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3)),
        v8 >= 0x10000001))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  a2->var0 = v8;
  a2->var1 = v5;
  return 1;
}

void EshBinaryReader::read(EshBinaryReader *this, EshRoot *a2)
{
  EshHeader *v4;
  void (*v5)(EshRoot *, _QWORD);
  _DWORD *exception;

  EshBinaryReader::checkStarted((uint64_t)this);
  if (*((_DWORD *)this + 18) == *((_DWORD *)this + 8))
  {
    v4 = (EshHeader *)operator new(0x10uLL);
    EshHeader::makeDefault(v4);
    (*(void (**)(EshBinaryReader *, _QWORD, EshHeader *))(*(_QWORD *)this + 88))(this, *((unsigned int *)this + 8), v4);
    v5 = *(void (**)(EshRoot *, _QWORD))(*(_QWORD *)a2 + 104);
    if (v4->var0)
    {
      v5(a2, 0);
      EshRoot::appendChild(a2, v4);
    }
    else
    {
      v5(a2, 0);
    }
    JUMPOUT(0x22E2DD408);
  }
  exception = __cxa_allocate_exception(4uLL);
  *exception = 7010;
}

void sub_22A0DCE20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

uint64_t EshBinaryReader::checkStarted(uint64_t this)
{
  _DWORD *exception;

  if (!*(_QWORD *)(this + 8) || !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return this;
}

uint64_t EshBinaryReader::getObjectHeader(EshParserVisitor **this, uint64_t a2, EshHeader *a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  int var3;
  int v12;
  unsigned int v13;
  EshHeader *v14;
  unsigned __int16 v15;
  EshContainer *v16;
  uint64_t HeaderOfType;
  EshSp *v18;
  unsigned int var1;
  _DWORD *exception;
  _DWORD *v21;
  _DWORD *v22;

  result = EshParserVisitor::visit(this[2], a3, a2);
  if (!*((_BYTE *)this + 92))
  {
    if (*((_DWORD *)this + 14))
    {
      result = ChStack<EshHeader>::top((uint64_t)(this + 5));
      v6 = *(_DWORD *)(result + 4) + *(_DWORD *)result + 8;
      v7 = a3->var1 + a3->var0 + 8;
      v8 = v6 >= v7;
      v9 = v6 - v7;
      if (!v8 || (v9 ? (v10 = v9 > 7) : (v10 = 1), !v10))
      {
LABEL_39:
        exception = __cxa_allocate_exception(4uLL);
        *exception = 7013;
      }
      var3 = a3->var3;
      if (*((_DWORD *)this + 14))
      {
        result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        v12 = *(unsigned __int16 *)(result + 10);
LABEL_14:
        if (var3 != 61444)
        {
          if (var3 != 61451)
            return result;
          if (v12 != 61440)
            goto LABEL_39;
          v13 = a3->var1 + a3->var0 + 8;
          result = ChStack<EshHeader>::top((uint64_t)(this + 5));
          if (v13 < *(_DWORD *)(result + 4) + *(_DWORD *)result + 8)
          {
            v14 = (EshHeader *)operator new(0x10uLL);
            EshHeader::makeDefault(v14);
            EshParserVisitor::visit(this[2], v14, a3->var1 + a3->var0 + 8);
            if ((__int16)v14->var3 == -3806)
              a3->var0 += v14->var0 + 8;
            result = MEMORY[0x22E2DD408](v14, 0x1000C408B6DE1C6);
          }
          v15 = 4;
          goto LABEL_37;
        }
        if (v12 == 2)
          goto LABEL_32;
        if (v12 != 61443)
        {
          if (v12 != 61442)
            goto LABEL_39;
          v16 = (EshContainer *)operator new(0x38uLL);
          EshContainer::EshContainer(v16, 0xF004u);
          (*((void (**)(EshParserVisitor **, EshContainer *, EshHeader *))*this + 13))(this, v16, a3);
          HeaderOfType = EshContainer::getHeaderOfType(v16, 61450);
          if (!HeaderOfType)
          {
            v21 = __cxa_allocate_exception(4uLL);
            *v21 = 7013;
          }
          v18 = (EshSp *)operator new(0x30uLL);
          EshSp::EshSp(v18);
          (*((void (**)(EshParserVisitor **, EshSp *, uint64_t))*this + 13))(this, v18, HeaderOfType);
          if (*((_BYTE *)v18 + 42))
          {
            v15 = 12;
          }
          else
          {
            if (!*((_BYTE *)v18 + 35))
            {
              v22 = __cxa_allocate_exception(4uLL);
              *v22 = 7013;
            }
            v15 = 7;
          }
          result = (*(uint64_t (**)(EshSp *))(*(_QWORD *)v18 + 8))(v18);
          if (v16)
            result = (*(uint64_t (**)(EshContainer *))(*(_QWORD *)v16 + 8))(v16);
          goto LABEL_37;
        }
        var1 = a3->var1;
        result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        if (var1 != *(_DWORD *)(result + 4) + 8)
        {
LABEL_32:
          v15 = 7;
        }
        else if (*((_DWORD *)this + 14) <= 2u)
        {
          v15 = 5;
        }
        else
        {
          v15 = 6;
        }
LABEL_37:
        a3->var3 = v15;
        a3->var4 = 0;
        a3->var2 = 0;
        return result;
      }
    }
    else
    {
      var3 = a3->var3;
    }
    v12 = 2;
    goto LABEL_14;
  }
  return result;
}

void sub_22A0DD17C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

EshDgg *EshObjectFactory::createRecord(EshObjectFactory *this, __int16 a2, int a3)
{
  EshContainer *v4;

  if (a3 != 15)
    return EshObjectFactory::createAtom(this, a2, a3);
  v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, a2);
  return v4;
}

void sub_22A0DD268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL EshBinaryReader::atEnd(EshBinaryReader *this)
{
  return *((_DWORD *)this + 18) == *((_DWORD *)this + 9);
}

void EshBinaryReader::read(EshBinaryReader *this, EshObject *a2)
{
  int v4;
  EshHeader *v5;
  int v6;
  uint64_t v7;
  _DWORD *exception;
  int v9;

  EshBinaryReader::checkStarted((uint64_t)this);
  v4 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
  v5 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v5);
  EshBinaryReader::findObjectHeader(this, v5, v4);
  if (*((_DWORD *)this + 18) != *((_DWORD *)this + 9))
  {
    if ((unsigned __int16)(v4 + 4096) <= 0x122u)
    {
      v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 11))(a2);
      v7 = *(_QWORD *)this;
      if (v6)
        (*(void (**)(EshBinaryReader *, EshObject *))(v7 + 112))(this, a2);
      else
        (*(void (**)(EshBinaryReader *, EshObject *))(v7 + 120))(this, a2);
LABEL_12:
      EshBinaryReader::movePastObject(this, v5);
      JUMPOUT(0x22E2DD408);
    }
    switch(v4)
    {
      case 4:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(_QWORD *)this + 128))(this, a2);
        goto LABEL_12;
      case 5:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(_QWORD *)this + 136))(this, a2);
        goto LABEL_12;
      case 6:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(_QWORD *)this + 160))(this, a2);
        goto LABEL_12;
      case 7:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(_QWORD *)this + 152))(this, a2);
        goto LABEL_12;
      case 12:
        (*(void (**)(EshBinaryReader *, EshObject *))(*(_QWORD *)this + 144))(this, a2);
        goto LABEL_12;
      default:
        exception = __cxa_allocate_exception(4uLL);
        v9 = 1004;
        goto LABEL_14;
    }
  }
  exception = __cxa_allocate_exception(4uLL);
  v9 = 7000;
LABEL_14:
  *exception = v9;
}

void sub_22A0DD444(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshBinaryReader::findObjectHeader(EshBinaryReader *this, EshHeader *a2, int a3)
{
  while (*((_DWORD *)this + 18) != *((_DWORD *)this + 9))
  {
    (*(void (**)(EshBinaryReader *))(*(_QWORD *)this + 88))(this);
    if (a2->var3 == a3)
      break;
    EshBinaryReader::movePastObject(this, a2);
  }
}

EshHeader *EshBinaryReader::readObject(EshBinaryReader *this, EshContainer *a2)
{
  uint64_t *v4;
  const EshHeader *v5;
  int v6;
  int v7;
  EshHeader *v8;
  EshHeader *result;

  v4 = (uint64_t *)((char *)this + 40);
  v5 = (const EshHeader *)(*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)this + 96))(this);
  EshRecord::setHeader(a2, v5);
  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 3);
  EshContainer::removeChildren((uint64_t)a2);
  ChStack<EshHeader>::push(v4, (uint64_t)a2 + 12);
  v8 = (EshHeader *)operator new(0x10uLL);
  result = EshHeader::makeDefault(v8);
  if (v6 + 8 < (v6 + 8 + v7))
  {
    do
    {
      (*(void (**)(EshBinaryReader *))(*(_QWORD *)this + 88))(this);
      if ((__int16)v8->var3 != -3816)
        EshContainer::addChild(a2, v8);
    }
    while (v8->var1 + v8->var0 + 8 < v6 + 8 + v7);
    --*((_DWORD *)this + 14);
LABEL_7:
    JUMPOUT(0x22E2DD408);
  }
  --*((_DWORD *)this + 14);
  if (v8)
    goto LABEL_7;
  return result;
}

void sub_22A0DD610(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ChStack<EshHeader>::push(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  LODWORD(v4) = *((_DWORD *)a1 + 4);
  v5 = *((_DWORD *)a1 + 5);
  if ((int)v4 + 1 <= v5)
  {
    v12 = *a1;
  }
  else
  {
    v6 = *((_DWORD *)a1 + 6) + v5;
    *((_DWORD *)a1 + 5) = v6;
    v7 = operator new[](16 * v6 + 16);
    *v7 = 16;
    v7[1] = v6;
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = 16 * v6;
      do
      {
        EshHeader::makeDefault((EshHeader *)&v7[v8 / 8 + 2]);
        v8 += 16;
      }
      while (v9 != v8);
    }
    a1[1] = (uint64_t)(v7 + 2);
    LODWORD(v4) = *((_DWORD *)a1 + 4);
    if ((_DWORD)v4)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        EshHeader::operator=(a1[1] + v10, *a1 + v10);
        ++v11;
        v4 = *((unsigned int *)a1 + 4);
        v10 += 16;
      }
      while (v11 < v4);
    }
    if (*a1)
    {
      MEMORY[0x22E2DD3F0](*a1 - 16, 0x1000C808B6DE1C6);
      LODWORD(v4) = *((_DWORD *)a1 + 4);
    }
    v12 = a1[1];
    *a1 = v12;
    a1[1] = 0;
  }
  EshHeader::operator=(v12 + 16 * v4, a2);
  ++*((_DWORD *)a1 + 4);
}

void sub_22A0DD768(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t ChStack<EshHeader>::top(uint64_t a1)
{
  int v1;
  _DWORD *exception;

  if (!*(_QWORD *)a1 || (v1 = *(_DWORD *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1000;
  }
  return *(_QWORD *)a1 + 16 * (v1 - 1);
}

void EshBinaryReader::movePastObject(EshBinaryReader *this, const EshHeader *a2)
{
  unsigned int var1;
  int var3;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  _DWORD *exception;
  int v13;

  var1 = a2->var1;
  if (var1 != *((_DWORD *)this + 18))
    goto LABEL_22;
  var3 = a2->var3;
  if (a2->var4 == 15)
  {
    if (var3 != 1064 && var3 != 12052 && var3 != 14003)
      goto LABEL_13;
LABEL_11:
    *((_DWORD *)this + 18) = var1 + a2->var0 + 8;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    v8 = *((_DWORD *)this + 18);
    goto LABEL_14;
  }
  if (var3 != 5003)
    goto LABEL_11;
LABEL_13:
  ChStack<EshHeader>::push((uint64_t *)this + 5, (uint64_t)a2);
  v8 = a2->var1 + 8;
  *((_DWORD *)this + 18) = v8;
LABEL_14:
  if (v8 > *((_DWORD *)this + 9))
  {
LABEL_22:
    exception = __cxa_allocate_exception(4uLL);
    v13 = 1004;
    goto LABEL_21;
  }
  if (*((_DWORD *)this + 14))
  {
    while (1)
    {
      v9 = (_DWORD *)ChStack<EshHeader>::top((uint64_t)this + 40);
      if (v8 < v9[1] + *v9 + 8)
        return;
      v10 = (_DWORD *)ChStack<EshHeader>::top((uint64_t)this + 40);
      v8 = v10[1] + *v10 + 8;
      if (v8 != *((_DWORD *)this + 18))
        break;
      v11 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v11;
      if (!v11)
        return;
    }
    exception = __cxa_allocate_exception(4uLL);
    v13 = 7013;
LABEL_21:
    *exception = v13;
  }
}

EshDgg *EshObjectFactory::createAtom(EshObjectFactory *this, int a2, int a3)
{
  unsigned __int8 v3;
  unsigned __int16 v4;
  EshDgg *v5;
  _DWORD *exception;

  if (a3 == 15)
  {
LABEL_36:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7000;
  }
  v3 = a3;
  v4 = a2;
  v5 = 0;
  switch(a2)
  {
    case 61446:
      v5 = (EshDgg *)operator new(0x48uLL);
      EshDgg::EshDgg(v5);
      return v5;
    case 61447:
      v5 = (EshDgg *)operator new(0x68uLL);
      EshBSE::EshBSE((EshBSE *)v5);
      return v5;
    case 61448:
      v5 = (EshDgg *)operator new(0x28uLL);
      EshDg::EshDg(v5);
      return v5;
    case 61449:
    case 61450:
    case 61452:
    case 61453:
    case 61455:
    case 61456:
    case 61457:
    case 61461:
    case 61462:
    case 61464:
    case 61465:
    case 61472:
    case 61473:
    case 61474:
    case 61475:
    case 61476:
    case 61477:
    case 61478:
    case 61479:
    case 61480:
LABEL_20:
      if (!this->var1)
        goto LABEL_36;
      v5 = 0;
      if (a2 > 61461)
      {
        if (a2 != 61462)
        {
          if (a2 == 61720)
          {
            v5 = (EshDgg *)operator new(0x38uLL);
            EshRegroupItems::EshRegroupItems(v5);
          }
          else if (a2 != 61727)
          {
LABEL_32:
            v5 = (EshDgg *)operator new(0x50uLL);
            EshRawAtom::EshRawAtom(v5, v4, v3);
          }
        }
      }
      else
      {
        switch(a2)
        {
          case 61449:
            v5 = (EshDgg *)operator new(0x30uLL);
            EshSpgr::EshSpgr(v5);
            break;
          case 61450:
            v5 = (EshDgg *)operator new(0x30uLL);
            EshSp::EshSp(v5);
            break;
          case 61452:
            return v5;
          case 61455:
            v5 = (EshDgg *)operator new(0x30uLL);
            EshChildAnchor::EshChildAnchor(v5);
            break;
          default:
            goto LABEL_32;
        }
      }
      return v5;
    case 61451:
LABEL_5:
      v5 = (EshDgg *)operator new(0x40uLL);
      EshOpt::EshOpt(v5, v4);
      return v5;
    case 61454:
      return v5;
    case 61458:
      v5 = (EshDgg *)operator new(0x38uLL);
      EshConnectorRule::EshConnectorRule(v5);
      return v5;
    case 61459:
      v5 = (EshDgg *)operator new(0x48uLL);
      EshAlignRule::EshAlignRule(v5);
      return v5;
    case 61460:
      v5 = (EshDgg *)operator new(0x28uLL);
      EshArcRule::EshArcRule(v5);
      return v5;
    case 61463:
      v5 = (EshDgg *)operator new(0x28uLL);
      EshCalloutRule::EshCalloutRule(v5);
      return v5;
    case 61466:
      v5 = (EshDgg *)operator new(0x118uLL);
      EshMetafileBlip::EshMetafileBlip(v5, 0xF01Au);
      return v5;
    case 61467:
      v5 = (EshDgg *)operator new(0x118uLL);
      EshMetafileBlip::EshMetafileBlip(v5, 0xF01Bu);
      return v5;
    case 61468:
      v5 = (EshDgg *)operator new(0x118uLL);
      EshMetafileBlip::EshMetafileBlip(v5, 0xF01Cu);
      return v5;
    case 61469:
      v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF01Du);
      return v5;
    case 61470:
      v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF01Eu);
      return v5;
    case 61471:
      v5 = (EshDgg *)operator new(0x1E8uLL);
      EshDibBlip::EshDibBlip(v5, 0xF01Fu);
      return v5;
    case 61481:
      v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF029u);
      return v5;
    case 61482:
      v5 = (EshDgg *)operator new(0xD8uLL);
      EshBitmapBlip::EshBitmapBlip(v5, 0xF02Au);
      return v5;
    default:
      switch(a2)
      {
        case 61721:
          v5 = (EshDgg *)operator new(0x40uLL);
          EshSelection::EshSelection(v5);
          return v5;
        case 61722:
          v5 = (EshDgg *)operator new(0x38uLL);
          EshColorMRU::EshColorMRU(v5);
          return v5;
        case 61725:
          v5 = (EshDgg *)operator new(0x28uLL);
          EshDeletedPspl::EshDeletedPspl(v5);
          return v5;
        case 61726:
          v5 = (EshDgg *)operator new(0x38uLL);
          EshSplitMenuColors::EshSplitMenuColors(v5);
          return v5;
        case 61728:
          return v5;
        case 61729:
        case 61730:
          goto LABEL_5;
        default:
          goto LABEL_20;
      }
  }
}

void sub_22A0DDC98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshDgg::EshDgg(EshDgg *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF006u, 0);
  *v1 = &off_24F39EBD0;
  v1[7] = 0;
  v1[8] = 0;
  v1[6] = 0;
  *(_QWORD *)((char *)v1 + 36) = 0;
  *(_QWORD *)((char *)v1 + 28) = 0;
}

void EshAtom::EshAtom(EshAtom *this, unsigned __int16 a2, unsigned __int8 a3)
{
  _QWORD *v3;

  EshRecord::EshRecord(this, a2, a3);
  *v3 = &off_24F39E2D8;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshAtom *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)this + 96))(this);
  return (*(uint64_t (**)(EshBinaryReader *, EshAtom *, uint64_t))(*(_QWORD *)this + 104))(this, a2, v4);
}

uint64_t EshBinaryReader::readRecordData(EshParserVisitor **this, EshRecord *a2, const EshHeader *a3)
{
  _DWORD *exception;

  if (EshRecord::getRecordType(a2) != a3->var3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  EshRecord::setHeader(a2, a3);
  EshParserVisitor::beginRead(this[2], a2);
  (*(void (**)(EshRecord *, EshParserVisitor *))(*(_QWORD *)a2 + 112))(a2, this[2]);
  return EshParserVisitor::endRead(this[2], a2);
}

void sub_22A0DDE3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A0DDE04);
}

uint64_t EshParserVisitor::beginRead(EshParserVisitor *this, EshRecord *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 3);
  v3 = EshRecord::getOffset(a2) + 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, v3, 0);
}

uint64_t EshDgg::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 120))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshDgg *a2)
{
  uint64_t v4;
  int Offset;
  int DataLength;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  DataLength = EshRecord::getDataLength(a2);
  v7 = DataLength - 9;
  if ((DataLength - 9) >= 0xF)
  {
    if (DataLength >= 16)
      v7 = DataLength - 16;
    v8 = v7 >> 3;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
      EshDgg::addIdCluster(a2, v10 | (unint64_t)(v11 << 32));
      --v9;
    }
    while (v9);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::endRead(EshParserVisitor *this, EshRecord *a2)
{
  uint64_t result;
  int v5;
  _DWORD *exception;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v5 < 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if ((_DWORD)result != v5)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return result;
}

void EshBSE::EshBSE(EshBSE *this)
{
  uint64_t v1;

  EshAtom::EshAtom((EshAtom *)this, 0xF007u, 2u);
  *(_QWORD *)v1 = &off_24F39E578;
  *(_DWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 68) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 54) = 0;
  *(_QWORD *)(v1 + 72) = 0x100000001;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 96) = 0;
}

uint64_t EshBSE::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 72))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshBSE *a2)
{
  uint64_t v4;
  int Offset;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  EshHeader *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  EshRecord *v14;
  EshBlip *v15;
  double v16;
  _DWORD *exception;
  _DWORD *v19;
  _DWORD *v20;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset((EshRecord *)a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  a2->var11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  a2->var12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  EshParserVisitor::parseBlipUid(this, &a2->var15);
  a2->var8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
  a2->var5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  a2->var6 = v6;
  a2->var7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  a2->var9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  a2->var10 = v7;
  a2->var13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  a2->var14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  if (v7)
    goto LABEL_13;
  v8 = a2->var2.var1 + a2->var2.var0 + 8;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if (v8 <= v9)
    goto LABEL_12;
  if (!v6 || v8 - v9 <= 7)
  {
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  v10 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v10);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  EshParserVisitor::visit(this, v10, v11);
  if (v10->var3 - 1 <= 0x1B)
  {
    v19 = __cxa_allocate_exception(4uLL);
    *v19 = 7005;
  }
  v12 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  v13 = v12;
  if (v12)
  {
    if (v14)
    {
      v15 = (EshBlip *)v14;
      v16 = EshRecord::setHeader(v14, v10);
      (*((void (**)(EshBlip *, EshParserVisitor *, double))v15->var0 + 14))(v15, this, v16);
      if (v15->var2.var1 + v15->var2.var0 != a2->var2.var1 + a2->var2.var0)
      {
        v20 = __cxa_allocate_exception(4uLL);
        *v20 = 7005;
      }
      a2->var3 = v15;
    }
    else
    {
      (*(void (**)(const void *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  MEMORY[0x22E2DD408](v10, 0x1000C408B6DE1C6);
LABEL_12:
  EshParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void sub_22A0DE3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t EshParserVisitor::parseBlipUid(EshParserVisitor *this, UID *a2)
{
  uint64_t result;
  _DWORD *exception;
  int v4;

  v4 = 16;
  result = (*(uint64_t (**)(_QWORD, UID *, int *))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3), a2, &v4);
  if (v4 != 16)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  return result;
}

BOOL EshBlip::isBlipRecordType(EshBlip *this)
{
  return (unsigned __int16)((_WORD)this + 4072) < 0x100u;
}

void EshBitmapBlip::EshBitmapBlip(EshBitmapBlip *this, unsigned __int16 a2)
{
  *(_QWORD *)EshBlipT<EshBitmapBlipInfo>::EshBlipT((uint64_t)this, a2) = &off_24F39E380;
}

uint64_t EshBlipT<EshBitmapBlipInfo>::EshBlipT(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;

  EshBlip::EshBlip((EshBlip *)a1, a2);
  *(_QWORD *)v3 = &off_24F39E440;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = v3 + 20;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 72));
  *(_WORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 120) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 160));
  *(_BYTE *)(a1 + 208) = -1;
  return a1;
}

void sub_22A0DE51C(_Unwind_Exception *a1)
{
  EshBlip *v1;
  OcBinaryData *v2;

  OcBinaryData::~OcBinaryData(v2);
  EshBlip::~EshBlip(v1);
  _Unwind_Resume(a1);
}

void EshBlip::EshBlip(EshBlip *this, unsigned __int16 a2)
{
  _QWORD *v2;

  EshAtom::EshAtom((EshAtom *)this, a2, 0);
  *v2 = &off_24F39E4D0;
  *(_QWORD *)((char *)v2 + 36) = 0;
  *(_QWORD *)((char *)v2 + 28) = 0;
}

void OcBinaryData::OcBinaryData(OcBinaryData *this)
{
  this->var0 = (void **)&off_24F3A5F50;
  *(_QWORD *)&this->var1 = 0;
  *(_QWORD *)&this->var3 = 0;
  this->var5 = 0;
  this->var6 = 1;
  this->var7 = 0;
}

uint64_t EshBitmapBlip::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshBitmapBlip *a2)
{
  uint64_t v4;
  int Offset;
  int v6;
  int v7;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 28));
  if ((**((_WORD **)a2 + 6) & 1) != 0)
    EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 56));
  *((_BYTE *)a2 + 120) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  v6 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  EshParserVisitor::delayReadData(this, (OcBinaryData *)((char *)a2 + 72), (v6 - v7 + 8));
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::delayReadData(EshParserVisitor *this, OcBinaryData *a2, uint64_t a3)
{
  SsrwOOStream *v6;
  unsigned int v7;
  unsigned int v8;

  v6 = (SsrwOOStream *)*((_QWORD *)this + 3);
  v7 = (*((uint64_t (**)(SsrwOOStream *))v6->var0 + 4))(v6);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  OcBinaryData::setDataInfo(a2, v6, v7, v8, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), a3, 1);
}

uint64_t SsrwOOStgStream::getID(SsrwOOStgStream *this)
{
  return 0;
}

OcBinaryData *OcBinaryData::setDataInfo(OcBinaryData *this, SsrwOOStream *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  OcBinaryData *v9;

  v9 = this;
  if (this->var6)
  {
    this = (OcBinaryData *)this->var5;
    if (this)
      this = (OcBinaryData *)MEMORY[0x22E2DD3F0](this, 0x1000C8077774924);
  }
  v9->var5 = 0;
  v9->var7 = a2;
  v9->var1 = a4;
  v9->var2 = a3;
  v9->var3 = a5;
  v9->var4 = 0;
  return this;
}

EshShapeDefaults *EshObjectFactory::createSemanticObject(EshObjectFactory *this, int a2)
{
  EshShapeDefaults *v2;

  v2 = 0;
  switch(a2)
  {
    case 4:
      v2 = (EshShapeDefaults *)operator new(0x1E0uLL);
      EshShapeDefaults::EshShapeDefaults(v2);
      break;
    case 5:
      v2 = (EshShapeDefaults *)operator new(0x10uLL);
      EshPatriarch::EshPatriarch(v2);
      break;
    case 6:
      v2 = (EshShapeDefaults *)operator new(0x170uLL);
      EshGroup::EshGroup(v2);
      (*(void (**)(EshShapeDefaults *))(*(_QWORD *)v2 + 120))(v2);
      break;
    case 7:
      v2 = (EshShapeDefaults *)operator new(0x240uLL);
      EshShape::EshShape((EshShape *)v2);
      break;
    case 12:
      v2 = (EshShapeDefaults *)operator new(0x148uLL);
      EshBackground::EshBackground(v2);
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_22A0DE860(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshShapeDefaults::EshShapeDefaults(EshShapeDefaults *this)
{
  EshObject *v2;
  EshObject *v3;

  EshShapeBase::EshShapeBase(this, 4u);
  v2->var0 = (void **)&off_24F3A5048;
  v3 = v2 + 1;
  EshObject::EshObject(v2 + 26, 0xDu);
  *((_QWORD *)this + 52) = &unk_24F3A5188;
  *((_QWORD *)this + 54) = v3;
  *((_QWORD *)this + 55) = &unk_24F3A52B0;
  *((_QWORD *)this + 56) = &unk_24F3A5318;
  EshObject::EshObject((EshObject *)((char *)this + 456), 0x13u);
  *((_QWORD *)this + 59) = v3;
  *((_QWORD *)this + 57) = &off_24F3A5110;
}

void sub_22A0DE924(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshShapeBase::EshShapeBase(EshShapeBase *this, unsigned __int16 a2)
{
  EshObject *v3;
  EshObject *v4;

  EshContentBase::EshContentBase(this, a2);
  v3->var0 = (void **)&unk_24F3A4F80;
  v4 = v3 + 1;
  EshObject::EshObject(v3 + 17, 0xFu);
  *((_QWORD *)this + 36) = v4;
  *((_QWORD *)this + 34) = &off_24F3A49C8;
  EshObject::EshObject((EshObject *)((char *)this + 296), 0x14u);
  *((_QWORD *)this + 39) = v4;
  *((_QWORD *)this + 37) = &off_24F3A40D8;
  EshObject::EshObject((EshObject *)this + 20, 0x10u);
  *((_QWORD *)this + 42) = v4;
  *((_QWORD *)this + 40) = &off_24F3A4A58;
  EshObject::EshObject((EshObject *)((char *)this + 344), 0x15u);
  *((_QWORD *)this + 45) = v4;
  *((_QWORD *)this + 43) = &off_24F3A4AE8;
  EshObject::EshObject((EshObject *)this + 23, 0x18u);
  *((_QWORD *)this + 48) = v4;
  *((_QWORD *)this + 46) = &off_24F3A4B78;
  EshObject::EshObject((EshObject *)((char *)this + 392), 0x16u);
  *((_QWORD *)this + 51) = v4;
  *((_QWORD *)this + 49) = &off_24F3A4C08;
}

void sub_22A0DEA1C(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshContentBase::EshContentBase(EshContentBase *this, unsigned __int16 a2)
{
  uint64_t v2;

  EshObject::EshObject((EshObject *)this, a2);
  *(_QWORD *)v2 = &off_24F3A42D8;
  EshContentData::EshContentData((EshContentData *)(v2 + 16));
}

void EshContentData::EshContentData(EshContentData *this)
{
  uint64_t v2;

  EshOpt::EshOpt((EshOpt *)this, 0xF00Bu);
  EshOpt::EshOpt((EshOpt *)(v2 + 64), 0xF121u);
  EshOpt::EshOpt((EshOpt *)((char *)this + 128), 0xF122u);
  EshSp::EshSp((EshSp *)((char *)this + 192));
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
}

void sub_22A0DEAD8(_Unwind_Exception *a1)
{
  EshOpt *v1;
  EshOpt *v2;
  EshOpt *v3;
  EshOpt *v4;

  v4 = v3;
  EshOpt::~EshOpt(v4);
  EshOpt::~EshOpt(v2);
  EshOpt::~EshOpt(v1);
  _Unwind_Resume(a1);
}

void EshOpt::EshOpt(EshOpt *this, unsigned __int16 a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2, 3u);
  *(_QWORD *)v2 = &off_24F39EF88;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 40;
  *(_DWORD *)(v2 + 56) = 255;
}

void EshSp::EshSp(EshSp *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF00Au, 2u);
  *v1 = &off_24F3A3E28;
  *(_QWORD *)((char *)v1 + 36) = 0;
  *(_QWORD *)((char *)v1 + 28) = 0;
}

void PptBinaryReader::readEshObject(PptBinaryReader *this, EshObject *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  _DWORD *exception;

  if (*((_DWORD *)this + 40) == 2)
  {
    (*(void (**)(_QWORD, EshObject *))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), a2);
    if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 7
      || (*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 6
      || (*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 12)
    {
      if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 7)
      {
        v5 = v4 + 576;
      }
      else if ((*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 6)
      {
        v5 = v4 + 368;
      }
      else
      {
        v5 = v4 + 328;
      }
      if (!v4)
        v5 = 0;
      v8 = v5 + 8;
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      if (((*((_QWORD *)v8 + 1) - (_QWORD)v7) & 0x7FFFFFFF8) != 0)
      {
        v9 = *v7;
        EshHeader::operator=(*((_QWORD *)this + 25), *v7);
        *(_DWORD *)(*((_QWORD *)this + 21) + 72) = *(_DWORD *)(v9 + 4);
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 22);
    if (!v6)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1000;
    }
    (*(void (**)(uint64_t, EshObject *))(*(_QWORD *)v6 + 40))(v6, a2);
  }
}

_DWORD *EshBinaryReader::readObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *result;
  EshHeader v15;

  v4 = a2 + 16;
  v5 = a1 + 40;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v7.n128_f64[0] = EshHeader::operator=((uint64_t)&v15, v6);
  v8 = a2 + 144;
  v9 = a2 + 80;
  while (1)
  {
    v10 = v4;
    if (v15.var3 != 61451)
    {
      if (v15.var3 == 61730)
      {
        v10 = v8;
      }
      else
      {
        v10 = v9;
        if (v15.var3 != 61729)
          break;
      }
    }
    (*(void (**)(uint64_t, uint64_t, EshHeader *, __n128))(*(_QWORD *)a1 + 104))(a1, v10, &v15, v7);
    v11 = v15.var1 + v15.var0 + 8;
    v12 = (_DWORD *)ChStack<EshHeader>::top(v5);
    if (v11 >= v12[1] + *v12 + 8)
      break;
    EshParserVisitor::visit(*(EshParserVisitor **)(a1 + 16), &v15, v15.var1 + v15.var0 + 8);
  }
  v13 = *(_DWORD *)(a1 + 36);
  result = (_DWORD *)ChStack<EshHeader>::top(v5);
  if (v13 < result[1] + *result + 8)
  {
    result = (_DWORD *)ChStack<EshHeader>::top(v5);
    *(_DWORD *)(a1 + 36) = result[1] + *result + 8;
  }
  return result;
}

uint64_t EshOpt::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 128))(v3, a1);
}

BOOL EshParserVisitor::visit(EshParserVisitor *this, EshOpt *a2)
{
  uint64_t v4;
  int Offset;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  __int16 v14;
  uint64_t v15;
  EshColor *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int PropertyType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  BOOL v33;
  _BYTE *v34;
  EshColor *v35;
  CsString *v36;
  unsigned int v37;
  signed int v38;
  unsigned __int16 *var1;
  EshHeader *v40;
  uint64_t v41;
  const void *v42;
  const void *v43;
  EshRecord *v44;
  uint64_t *v45;
  double v46;
  uint64_t *PropVal;
  uint64_t *v48;
  CsData *v49;
  _DWORD *v51;
  _DWORD *exception;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  EshPropValParserVisitor *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int Version;
  __n128 v62;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  Version = EshRecord::getVersion(a2);
  if (Version >= 3)
    v6 = 6;
  else
    v6 = 8;
  v7 = EshRecord::getInstance(a2) & 0xFFF;
  if ((int)EshRecord::getDataLength(a2) / v6 <= v7)
    v7 = (int)EshRecord::getDataLength(a2) / v6;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  v10 = *((_DWORD *)a2 + 3);
  v9 = *((_DWORD *)a2 + 4);
  v56 = (EshPropValParserVisitor *)operator new(0x18uLL);
  EshPropValParserVisitor::EshPropValParserVisitor(v56, *((SsrwOOStream **)this + 3));
  v11 = v8 + (unsigned __int16)v7 * v6;
  v59 = v9 + v10 + 8;
  v60 = (unsigned __int16)v7;
  if ((_WORD)v7)
  {
    v57 = v8;
    v58 = v6;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
      if (Version <= 2)
        (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
      v16 = (EshColor *)v15;
      v17 = v14;
      if (v14 < 0 && (v15 & 0x80000000) != 0)
        break;
      v18 = v14 & 0x3FFF;
      if ((~v18 & 0x3F) != 0)
      {
        PropertyType = EshOpt::getPropertyType(v14 & 0x3FFF);
        v30 = PropertyType;
        if (v17 < 0)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v11, 0);
          v32 = ((_DWORD)v16 + v11);
          v33 = __CFADD__((_DWORD)v16, (_DWORD)v11);
          if (v32 > v59 || v33 || v32 < v11)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = 7005;
          }
          switch(v30)
          {
            case 0:
              v34 = operator new(0x20uLL);
              *v34 = (v17 & 0x4000) != 0;
              v34[1] = 1;
              *((_DWORD *)v34 + 1) = 0;
              *((_QWORD *)v34 + 1) = &off_24F39F2C0;
              *((_QWORD *)v34 + 2) = 0;
              *((_DWORD *)v34 + 6) = 0;
              v62.n128_u64[0] = (unint64_t)v34;
              if ((_DWORD)v16)
              {
                *((_DWORD *)v56 + 4) = (_DWORD)v16;
                (*(void (**)(EshPropValParserVisitor *, _BYTE *, _BYTE *))(*(_QWORD *)v56 + 16))(v56, v34 + 8, v34);
                v34 = (_BYTE *)v62.n128_u64[0];
              }
              EshOpt::takeGenericProperty((uint64_t)a2, v17 & 0x3FFF, (uint64_t *)v34);
              v62.n128_u64[0] = 0;
              ChAutoPtr<EshOpt::GenericValue>::~ChAutoPtr((uint64_t *)&v62);
              break;
            case 8:
              if ((_DWORD)v16)
              {
                v40 = (EshHeader *)operator new(0x10uLL);
                EshHeader::makeDefault(v40);
                v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
                EshParserVisitor::visit(this, v40, v41);
                v42 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), v40->var3, v40->var4);
                v43 = v42;
                if (v42)
                {
                  if (v44)
                  {
                    v45 = (uint64_t *)v44;
                    v46 = EshRecord::setHeader(v44, v40);
                    (*(void (**)(uint64_t *, EshParserVisitor *, double))(*v45 + 112))(v45, this, v46);
                    if (*((_DWORD *)v45 + 4) + *((_DWORD *)v45 + 3) + 8 != (_DWORD)v32)
                    {
                      v55 = __cxa_allocate_exception(4uLL);
                      *v55 = 7005;
                    }
                    EshOpt::takeBlipRecordProperty((uint64_t)a2, v17 & 0x3FFF, v45);
                  }
                  else
                  {
                    (*(void (**)(const void *))(*(_QWORD *)v43 + 8))(v43);
                  }
                }
                MEMORY[0x22E2DD408](v40, 0x1000C408B6DE1C6);
              }
              else
              {
                v62 = (__n128)1uLL;
                EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 8, &v62);
              }
              break;
            case 9:
              v36 = (CsString *)operator new(0x18uLL);
              CsString::CsString(v36);
              if ((_DWORD)v16)
              {
                v37 = v16 >> 1;
                v38 = (v16 >> 1) - 1;
                CsString::reserve(v36, v38);
                CsString::setCount(v36, v38);
                var1 = v36->var1;
                v62.n128_u32[0] = v37;
                (*(void (**)(_QWORD, __n128 *, unsigned __int16 *))(**((_QWORD **)this + 3) + 136))(*((_QWORD *)this + 3), &v62, var1);
                if (v62.n128_u32[0] != v37 || var1[v38])
                {
                  v54 = __cxa_allocate_exception(4uLL);
                  *v54 = 7005;
                }
              }
              EshOpt::takeComplexProperty((uint64_t)a2, v18, (uint64_t *)v36);
              break;
            case 10:
              if ((_DWORD)v16)
              {
                PropVal = EshPropValFactory::createPropVal((EshPropValFactory *)(v17 & 0x3FFF));
                v48 = PropVal;
                *((_DWORD *)v56 + 4) = (_DWORD)v16;
                if (PropVal)
                  (*(void (**)(uint64_t *, EshPropValParserVisitor *))(*PropVal + 24))(PropVal, v56);
                v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
              }
              else
              {
                v48 = 0;
              }
              EshOpt::takeComplexProperty((uint64_t)a2, v17 & 0x3FFF, v48);
              break;
            case 11:
              v49 = (CsData *)operator new(0x10uLL);
              CsData::CsData(v49);
              v62.n128_u64[0] = (unint64_t)v49;
              if ((_DWORD)v16)
              {
                SsrwOOStream::readCsData(*((SsrwOOStream **)this + 3), v49, v16);
                v49 = (CsData *)v62.n128_u64[0];
              }
              EshOpt::takeDataProperty((uint64_t)a2, v17 & 0x3FFF, (uint64_t *)v49);
              v62.n128_u64[0] = 0;
              ChAutoPtr<CsData>::~ChAutoPtr((CsData **)&v62);
              break;
            default:
              break;
          }
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), (v58 + v58 * v12 + v57), 0);
          v11 = v32;
        }
        else
        {
          switch(PropertyType)
          {
            case 0:
              v31 = operator new(0x20uLL);
              *v31 = (unsigned __int16)v17 >> 14;
              v31[1] = 0;
              *((_DWORD *)v31 + 1) = (_DWORD)v16;
              *((_DWORD *)v31 + 6) = 0;
              *((_QWORD *)v31 + 1) = &off_24F39F2C0;
              *((_QWORD *)v31 + 2) = 0;
              v62.n128_u64[0] = (unint64_t)v31;
              EshOpt::takeGenericProperty((uint64_t)a2, v17 & 0x3FFF, (uint64_t *)v31);
              v62.n128_u64[0] = 0;
              ChAutoPtr<EshOpt::GenericValue>::~ChAutoPtr((uint64_t *)&v62);
              break;
            case 2:
              v62 = (__n128)v16;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 2, &v62);
              break;
            case 3:
              v62 = (__n128)v16;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 3, &v62);
              break;
            case 4:
              v35 = EshParserVisitor::decodeColor((EshColor *)this, v16);
              v62.n128_u64[1] = 0;
              v62.n128_u64[0] = (unint64_t)*v35;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 4, &v62);
              break;
            case 5:
              *((_DWORD *)this + 8) = v16 & 3;
              *((_BYTE *)this + 36) = (v16 & 4) != 0;
              *((_BYTE *)this + 37) = (v16 & 8) != 0;
              v62 = (__n128)*((unint64_t *)this + 4);
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 5, &v62);
              break;
            case 6:
              *((_BYTE *)this + 42) = v16 & 3 | (4 * ((v16 & 8) != 0)) | *((_BYTE *)this + 42) & 0xF8;
              *((_WORD *)this + 20) = WORD1(v16);
              v62 = 0uLL;
              v62.n128_u32[0] = *((_DWORD *)this + 10);
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 6, &v62);
              break;
            case 7:
              *((_BYTE *)this + 44) = v16 & 1;
              *((_BYTE *)this + 45) = (v16 & 2) != 0;
              *((_BYTE *)this + 46) = (v16 & 4) != 0;
              v62.n128_u64[1] = 0;
              *(unint64_t *)((char *)v62.n128_u64 + 3) = 0;
              v62.n128_u16[0] = *((_WORD *)this + 22);
              v62.n128_u8[2] = *((_BYTE *)this + 46);
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 7, &v62);
              break;
            case 8:
              if (v16 >= 0x10000)
                ChLogF("Blip ID with non-zero high word (0x%04X)\n", v23, v24, v25, v26, v27, v28, v29, SBYTE2(v16));
              v62.n128_u64[0] = 1;
              v62.n128_u64[1] = (unsigned __int16)v16;
              EshOpt::setProperty((uint64_t)a2, v17 & 0x3FFF, 8, &v62);
              break;
            default:
              break;
          }
        }
      }
      else
      {
        if (v14 < 0)
        {
          v51 = __cxa_allocate_exception(4uLL);
          *v51 = 7005;
        }
        v19 = 0;
        v20 = WORD1(v15);
        v21 = (unsigned __int16)v15;
        do
        {
          if (((1 << v19) & v20) != 0)
          {
            v62 = (__n128)(((1 << v19) & v21) != 0);
            EshOpt::setProperty((uint64_t)a2, v18, 1, &v62);
          }
          ++v19;
          --v18;
        }
        while (v19 != 16);
      }
      v13 = v60 <= ++v12;
      if (v12 == v60)
        goto LABEL_64;
    }
  }
  else
  {
LABEL_64:
    if (v59 != (_DWORD)v11)
    {
      v53 = __cxa_allocate_exception(4uLL);
      *v53 = 7005;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
    EshParserVisitor::endRead(this, a2);
    v13 = 1;
  }
  if (v56)
    (*(void (**)(EshPropValParserVisitor *))(*(_QWORD *)v56 + 8))(v56);
  return v13;
}

void sub_22A0DF69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  MEMORY[0x22E2DD408](v17, 0x1000C408B6DE1C6);
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  _Unwind_Resume(a1);
}

void EshPropValParserVisitor::EshPropValParserVisitor(EshPropValParserVisitor *this, SsrwOOStream *a2)
{
  *(_QWORD *)this = &off_24F3A5748;
  *((_QWORD *)this + 1) = a2;
}

uint64_t EshOpt::getPropertyType(int a1)
{
  int v1;
  int v2;
  int v4;

  if (a1 >= 0)
    v1 = a1;
  else
    v1 = a1 + 63;
  v2 = a1 - (v1 & 0xFFFFFFC0);
  if (v2 > 47)
    return 1;
  v4 = v1 >> 6;
  if (v4 << 16 >= 1703936 || v2 >= *((__int16 *)&EshOpt::getPropertyType(EshOpt::PID)::blocks + 8 * (__int16)v4 + 4))
    return 0;
  else
    return *((unsigned int *)*(&EshOpt::getPropertyType(EshOpt::PID)::blocks + 2 * (__int16)v4) + (__int16)v2);
}

EshColor *EshParserVisitor::decodeColor(EshColor *this, EshColor *a2)
{
  unsigned int v2;
  unsigned int v3;
  EshColor *v4;
  EshColor *v5;
  EshColor *v6;

  v2 = a2;
  v3 = a2 >> 24;
  v4 = this + 6;
  EshColor::none(this + 6, a2);
  switch(v3)
  {
    case 0u:
    case 2u:
    case 4u:
      EshColor::rgb(v2, SBYTE1(v2), SBYTE2(v2), (uint64_t)v4);
      break;
    case 1u:
      EshColor::paletteIndex((EshColor *)(unsigned __int16)v2, (uint64_t)v4, v6);
      break;
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      return v4;
    case 8u:
      EshColor::schemeIndex((EshColor *)(unsigned __int16)v2, (uint64_t)v4, v6);
      break;
    default:
      if (v3 == 16)
      {
        if (v2 <= 0x18u)
          EshColor::systemIndex(v2, (uint64_t)v4, BYTE1(v2) & 0xF, SBYTE2(v2), (v2 >> 13) & 1, (v2 >> 14) & 1, (v2 >> 15) & 1);
        if ((v2 & 0xF8) == 0xF0)
          EshColor::property(v2, (uint64_t)v4, BYTE1(v2) & 0xF, SBYTE2(v2), (v2 >> 13) & 1, (v2 >> 14) & 1, (v2 >> 15) & 1);
      }
      else if (v3 == 32)
      {
        EshColor::noModification(v4, v5);
      }
      break;
  }
  return v4;
}

EshColor *EshColor::none(EshColor *this, EshColor *a2)
{
  this->var0.var0 = 255;
  return this;
}

EshColor *EshColor::schemeIndex(EshColor *this, uint64_t a2, EshColor *a3)
{
  *(_DWORD *)a2 = 8;
  *(_WORD *)(a2 + 4) = (_WORD)this;
  return this;
}

__n128 EshOpt::setProperty(uint64_t a1, unsigned int a2, uint64_t a3, __n128 *a4)
{
  uint64_t **v5;
  __n128 result;
  unsigned int v7;
  unsigned int *v8;

  v7 = a2;
  v8 = &v7;
  v5 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v7, (uint64_t)&std::piecewise_construct, &v8);
  result = *a4;
  *(__n128 *)(v5 + 5) = *a4;
  return result;
}

void EshPropValParserVisitor::~EshPropValParserVisitor(EshPropValParserVisitor *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshSplitMenuColors::EshSplitMenuColors(EshSplitMenuColors *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF11Eu, 0);
  *v1 = &off_24F3A3F78;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
}

uint64_t EshSplitMenuColors::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 168))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshSplitMenuColors *a2)
{
  uint64_t v4;
  int Offset;
  int Instance;
  int v7;
  EshColor *v8;
  EshColor *v9;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  Instance = EshRecord::getInstance(a2);
  if (EshRecord::getDataLength(a2) != 4 * (unsigned __int16)Instance)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if (Instance)
  {
    v7 = 0;
    do
    {
      v8 = (EshColor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
      v9 = EshParserVisitor::decodeColor((EshColor *)this, v8);
      EshSplitMenuColors::addColor(a2, v9);
      ++v7;
    }
    while ((unsigned __int16)v7 < (unsigned __int16)Instance);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshColor::operator=(uint64_t result, uint64_t a2)
{
  __int16 v2;

  *(_DWORD *)result = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 2:
    case 4:
      v2 = *(_WORD *)(a2 + 4);
      *(_BYTE *)(result + 6) = *(_BYTE *)(a2 + 6);
      *(_WORD *)(result + 4) = v2;
      break;
    case 1:
    case 8:
      *(_WORD *)(result + 4) = *(_WORD *)(a2 + 4);
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    default:
      if ((*(_DWORD *)a2 - 33) < 2)
        *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      break;
  }
  return result;
}

uint64_t EshColor::property(uint64_t result, uint64_t a2, char a3, char a4, int a5, int a6, int a7)
{
  char v7;
  char v8;
  char v9;
  char v10;

  *(_DWORD *)a2 = 33;
  *(_BYTE *)(a2 + 4) = result;
  v7 = *(_BYTE *)(a2 + 6) & 0x80;
  *(_BYTE *)(a2 + 5) = a4;
  if (a5)
    v8 = 16;
  else
    v8 = 0;
  if (a6)
    v9 = 32;
  else
    v9 = 0;
  if (a7)
    v10 = 64;
  else
    v10 = 0;
  *(_BYTE *)(a2 + 6) = v8 & 0xF0 | a3 & 0xF | v9 | v10 | v7;
  return result;
}

void EshRoot::~EshRoot(EshRoot *this)
{
  EshRoot::~EshRoot(this);
  JUMPOUT(0x22E2DD408);
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)this = &off_24F3A47E0;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (((v3 - (_QWORD)v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      if (v2[v4])
      {
        MEMORY[0x22E2DD408](v2[v4], 0x1000C408B6DE1C6);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
        v3 = *((_QWORD *)this + 3);
      }
      if (v4 >= ((unint64_t)(v3 - (_QWORD)v2) >> 3))
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      v2[v4++] = 0;
      v2 = (_QWORD *)*((_QWORD *)this + 2);
      v3 = *((_QWORD *)this + 3);
    }
    while (v4 < ((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  *((_QWORD *)this + 3) = v2;
  if (v2)
    operator delete(v2);
}

void PptSlidePersistAtom::PptSlidePersistAtom(PptSlidePersistAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA990;
  *(_QWORD *)(v2 + 32) = &unk_24F3BAA38;
  *(_BYTE *)(v2 + 60) = 0;
}

uint64_t PptSlidePersistAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 264))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlidePersistAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_BYTE *)a2 + 60) = ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)) & 2) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 4u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptViewSettingsAtom::PptViewSettingsAtom(PptViewSettingsAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BC2E0;
  *(_QWORD *)(v2 + 32) = &unk_24F3BC388;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 64) = 0;
}

uint64_t PptViewSettingsAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 760))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptViewSettingsAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSlideViewInfoAtom::PptSlideViewInfoAtom(PptSlideViewInfoAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  EshAtom::EshAtom(this, a2);
  *v2 = &off_24F3BAA88;
  v2[4] = &unk_24F3BAB30;
  v2[5] = 0xFFFFFFFFLL;
}

uint64_t PptSlideViewInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 664))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideViewInfoAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 45) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 1
    || (*((_BYTE *)a2 + 46) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 2))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_BYTE *)a2 + 47) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptViewInfoAtom::PptViewInfoAtom(PptViewInfoAtom *this, const EshHeader *a2)
{
  uint64_t v3;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(_BYTE *)(v3 + 44) = 0;
  *(_QWORD *)v3 = &off_24F3BC1E8;
  *(_QWORD *)(v3 + 32) = &unk_24F3BC290;
  PptGScalingAtom::PptGScalingAtom((PptGScalingAtom *)(v3 + 48));
  PptGScalingAtom::PptGScalingAtom((PptViewInfoAtom *)((char *)this + 208));
  PptGPointAtom::PptGPointAtom((PptViewInfoAtom *)((char *)this + 368));
  PptGPointAtom::PptGPointAtom((PptViewInfoAtom *)((char *)this + 424));
  *((_WORD *)this + 240) = 256;
}

void PptGScalingAtom::PptGScalingAtom(PptGScalingAtom *this)
{
  uint64_t v2;

  EshAtom::EshAtom(this, 0x2711u, 0);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B92F8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B93A0;
  PptGRatioAtom::PptGRatioAtom((PptGRatioAtom *)(v2 + 48));
  PptGRatioAtom::PptGRatioAtom((PptGScalingAtom *)((char *)this + 104));
}

void PptGRatioAtom::PptGRatioAtom(PptGRatioAtom *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xBD7u, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(_BYTE *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_24F3B9010;
  *(_QWORD *)(v1 + 32) = &unk_24F3B90B8;
}

void PptGPointAtom::PptGPointAtom(PptGPointAtom *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xBDAu, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(_BYTE *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_24F3B8E20;
  *(_QWORD *)(v1 + 32) = &unk_24F3B8EC8;
  *(_QWORD *)(v1 + 48) = 0;
}

uint64_t PptViewInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 752))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptViewInfoAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 36) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 37) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 50) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 51) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    goto LABEL_8;
  *((_DWORD *)a2 + 76) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 77) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 90) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 91) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 32
    || (*((_DWORD *)a2 + 104) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        *((_DWORD *)a2 + 105) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 40)
    || (*((_DWORD *)a2 + 118) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        *((_DWORD *)a2 + 119) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 48)
    || (*((_BYTE *)a2 + 480) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 49)
    || (*((_BYTE *)a2 + 481) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 50))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 2u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptGuideAtom::PptGuideAtom(PptGuideAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B93F0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9498;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptGuideAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 472))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGuideAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptCString::PptCString(PptCString *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6C80;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6D28;
  CsString::CsString((CsString *)(v2 + 48));
}

uint64_t PptCString::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 64))(v3, a1);
}

void PptGridSpacing10Atom::PptGridSpacing10Atom(PptGridSpacing10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BEB78;
  *(_QWORD *)(v2 + 32) = &unk_24F3BEC20;
}

uint64_t PptGridSpacing10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1000))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGridSpacing10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptHeadersFootersAtom::PptHeadersFootersAtom(PptHeadersFootersAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B95E0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9688;
  *(_BYTE *)(v2 + 52) = 1;
  *(_DWORD *)(v2 + 53) = 0;
  *(_BYTE *)(v2 + 57) = 1;
}

uint64_t PptHeadersFootersAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 160))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptHeadersFootersAtom *a2)
{
  int v4;
  int16x8_t v5;
  unsigned int v6;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v5 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  a2->var7 = v6 & 1;
  v5.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)&a2->var8 = vmovn_s16(v5).u32[0];
  a2->var12 = (v6 & 0x20) != 0;
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptTextHeaderAtom::PptTextHeaderAtom(PptTextHeaderAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB640;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB6E8;
  *(_DWORD *)(v2 + 48) = -1;
}

uint64_t PptTextHeaderAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 304))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextHeaderAtom *a2)
{
  unsigned int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if (v4 >= 9)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  a2->var6 = v4;
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  *((_DWORD *)this + 16) = 0;
  return 1;
}

void PptTextBytesAtom::PptTextBytesAtom(PptTextBytesAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB448;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB4F8;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextBytesAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 288))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBytesAtom *a2)
{
  unsigned int DataLength;
  unsigned int v5;
  size_t v6;
  void *v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *exception;
  unsigned int v14;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  DataLength = EshRecord::getDataLength(a2);
  v14 = DataLength;
  if (DataLength)
  {
    v5 = DataLength;
    v6 = DataLength + 1;
    v7 = operator new[](v6);
    *((_QWORD *)this + 5) = v7;
    bzero(v7, v6);
    (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)this + 5), &v14);
    if (v14)
    {
      if (v14 != v5)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 4003;
      }
      for (i = 0; i < v5; ++i)
      {
        v9 = *((_QWORD *)this + 5);
        if (!*(_BYTE *)(v9 + i))
        {
          *(_BYTE *)(v9 + i) = 32;
          v5 = v14;
        }
      }
      v10 = *((_QWORD *)this + 5);
      v11 = *((_QWORD *)a2 + 6);
      if (v11)
        MEMORY[0x22E2DD3F0](v11, 0x1000C8077774924);
      *((_QWORD *)a2 + 6) = v10;
      *((_QWORD *)this + 5) = 0;
    }
  }
  PptParserVisitor::endRead(this, a2);
  *((_DWORD *)this + 16) = EshRecord::getDataLength(a2);
  return 1;
}

uint64_t SsrwOOStgStream::readString8(uint64_t this, unsigned int *a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  if ((int)v4 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v6 = this;
    v7 = 0;
    while (1)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      a3[v7] = this;
      if (!(_DWORD)this)
        break;
      if (v4 == ++v7)
        goto LABEL_8;
    }
    LODWORD(v4) = v7 + 1;
  }
LABEL_8:
  *a2 = v4;
  return this;
}

void PptTextBlockStylingAtom::PptTextBlockStylingAtom(PptTextBlockStylingAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB258;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB300;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
}

uint64_t PptTextBlockStylingAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 280))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStylingAtom *a2)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int EndOffset;
  int v8;
  int DataLength;
  unsigned int v10;
  unsigned int v11;
  PptParaRun *v12;
  int v13;
  unsigned int v14;
  PptCharRun *v15;
  int v16;
  int var0;
  PptParaRun *v19;

  v4 = *((_DWORD *)this + 16);
  *((_DWORD *)a2 + 24) = v4;
  v5 = v4 + 1;
  v6 = v4 == -1;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EndOffset = EshRecord::getEndOffset(a2);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  DataLength = EshRecord::getDataLength(a2);
  if (!v6)
  {
    v10 = 0;
    v11 = DataLength + v8;
    while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) < v11)
    {
      v12 = (PptParaRun *)operator new(0x38uLL);
      PptParaRun::PptParaRun(v12);
      v19 = v12;
      PptParserVisitor::parseParaRun(this, v12, EndOffset);
      v13 = *(_DWORD *)v19;
      if (!*(_DWORD *)v19)
      {
        ChAutoPtr<PptParaRun>::~ChAutoPtr((uint64_t *)&v19);
        break;
      }
      EshDgg::addIdCluster(a2, (uint64_t)v19);
      v10 += v13;
      v19 = 0;
      ChAutoPtr<PptParaRun>::~ChAutoPtr((uint64_t *)&v19);
      if (v10 >= v5)
        break;
    }
    v14 = 0;
    while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) < v11)
    {
      v15 = (PptCharRun *)operator new(0x24uLL);
      PptCharRun::PptCharRun(v15);
      v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
      v15->var0 = v16;
      if (!v16 || (PptParserVisitor::parseCharProperty(this, &v15->var1), (var0 = v15->var0) == 0))
      {
        MEMORY[0x22E2DD408](v15, 0x1000C40E65D7F0ALL);
        break;
      }
      PptTextBlockStylingAtom::addCharRun(a2, v15);
      v14 += var0;
      if (v14 >= v5)
        break;
    }
  }
  PptParserVisitor::endRead(this, a2);
  *((_DWORD *)this + 16) = 0;
  return 1;
}

void sub_22A0E1084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (v10)
    MEMORY[0x22E2DD408](v10, 0x1000C40E65D7F0ALL);
  _Unwind_Resume(exception_object);
}

void PptParaRun::PptParaRun(PptParaRun *this)
{
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  PptParaProperty::PptParaProperty((PptParaRun *)((char *)this + 8));
}

uint64_t *ChAutoPtr<PptParaRun>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    PptParaProperty::~PptParaProperty((PptParaProperty *)(v2 + 8));
    MEMORY[0x22E2DD408](v2, 0x1020C405935C4BCLL);
  }
  *a1 = 0;
  return a1;
}

void PptCharRun::PptCharRun(PptCharRun *this)
{
  this->var0 = 0;
  PptCharProperty::PptCharProperty(&this->var1);
}

void PptTextBlockSpecialInfoAtom::PptTextBlockSpecialInfoAtom(PptTextBlockSpecialInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB928;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB9D0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextBlockSpecialInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 320))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockSpecialInfoAtom *a2)
{
  unsigned int i;
  PptSpecialInfoRun *v5;
  __int16 v6;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  for (i = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) < i;
        PptParserVisitor::parseSpecialInfo11(this, (PptSpecialInfoRun *)((char *)v5 + 24), v6, i))
  {
    v5 = PptTextBlockSpecialInfoAtom::addSpecialInfoRun(a2);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 4 > i)
      goto LABEL_8;
    *(_DWORD *)v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 4 > i)
      goto LABEL_8;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
    PptParserVisitor::parseSpecialInfo(this, (PptSpecialInfo *)((char *)v5 + 8), v6, i);
    PptParserVisitor::parseSpecialInfo9(this, (PptSpecialInfoRun *)((char *)v5 + 20), v6, i);
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != i)
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

PptSpecialInfoRun *PptTextBlockSpecialInfoAtom::addSpecialInfoRun(PptTextBlockSpecialInfoAtom *this)
{
  PptSpecialInfoRun *v2;
  unint64_t v3;
  PptSpecialInfoRun **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptSpecialInfoRun **v14;
  char *v15;
  char *v16;
  char *v17;
  PptSpecialInfoRun *v18;

  v2 = (PptSpecialInfoRun *)operator new(0x28uLL);
  PptSpecialInfoRun::PptSpecialInfoRun(v2);
  v3 = *((_QWORD *)this + 8);
  v4 = (PptSpecialInfoRun **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptSpecialInfoRun **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptSpecialInfoRun *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A0E1464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptSpecialInfoRun::PptSpecialInfoRun(PptSpecialInfoRun *this)
{
  char v1;
  char v2;

  *(_DWORD *)this = 0;
  v1 = *((_BYTE *)this + 9) & 0xF8;
  *((_BYTE *)this + 8) &= 0xF8u;
  *((_BYTE *)this + 9) = v1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  v2 = *((_BYTE *)this + 22) & 0xE0;
  *((_BYTE *)this + 20) &= 0xFCu;
  *((_BYTE *)this + 21) &= ~1u;
  *((_BYTE *)this + 22) = v2;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
}

void PptTextCharsAtom::PptTextCharsAtom(PptTextCharsAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB548;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB5F0;
  CsString::CsString((CsString *)(v2 + 48));
}

uint64_t PptTextCharsAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 296))(v3, a1);
}

void sub_22A0E16D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshAtom::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, EshAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSlideAtom::PptSlideAtom(PptSlideAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA6A8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BA750;
  *(_WORD *)(v2 + 92) = 0;
  *(_BYTE *)(v2 + 94) = 0;
  *(_OWORD *)(v2 + 52) = 0u;
  *(_OWORD *)(v2 + 68) = 0u;
}

uint64_t PptSlideAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 248))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideAtom *a2)
{
  int v4;
  uint64_t i;
  char v6;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    goto LABEL_8;
  for (i = 52; i != 84; i += 4)
    *(_DWORD *)((char *)a2 + i) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12
    || (*((_DWORD *)a2 + 21) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    || (*((_DWORD *)a2 + 22) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 20))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 92) = v6 & 1;
  *((_BYTE *)a2 + 93) = (v6 & 2) != 0;
  *((_BYTE *)a2 + 94) = (v6 & 4) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptColorSchemeAtom::PptColorSchemeAtom(PptColorSchemeAtom *this, const EshHeader *a2)
{
  uint64_t v2;
  __int128 v3;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6A20;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6AD8;
  *(_QWORD *)(v2 + 48) = &unk_24F3B6B10;
  *(_QWORD *)&v3 = 255;
  *((_QWORD *)&v3 + 1) = 255;
  *(_OWORD *)(v2 + 56) = v3;
  *(_OWORD *)(v2 + 72) = v3;
  *(_OWORD *)(v2 + 88) = v3;
  *(_OWORD *)(v2 + 104) = v3;
}

uint64_t PptColorSchemeAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 56))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptColorSchemeAtom *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var7.var1 = v5;
  a2->var7.var2 = BYTE1(v5);
  a2->var7.var3 = BYTE2(v5);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    goto LABEL_9;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var8.var1 = v6;
  a2->var8.var2 = BYTE1(v6);
  a2->var8.var3 = BYTE2(v6);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    goto LABEL_9;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var9.var1 = v7;
  a2->var9.var2 = BYTE1(v7);
  a2->var9.var3 = BYTE2(v7);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    goto LABEL_9;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var10.var1 = v8;
  a2->var10.var2 = BYTE1(v8);
  a2->var10.var3 = BYTE2(v8);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    goto LABEL_9;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var11.var1 = v9;
  a2->var11.var2 = BYTE1(v9);
  a2->var11.var3 = BYTE2(v9);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 20)
    goto LABEL_9;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var12.var1 = v10;
  a2->var12.var2 = BYTE1(v10);
  a2->var12.var3 = BYTE2(v10);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 24
    || (v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        a2->var13.var1 = v11,
        a2->var13.var2 = BYTE1(v11),
        a2->var13.var3 = BYTE2(v11),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 28))
  {
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  a2->var14.var1 = v12;
  a2->var14.var2 = BYTE1(v12);
  a2->var14.var3 = BYTE2(v12);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshContainer *a2)
{
  uint64_t v4;
  int Offset;
  uint64_t v6;
  int DataLength;
  EshHeader *v8;
  unsigned int v9;
  BOOL v10;
  _DWORD *exception;
  _DWORD *v13;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  EshContainer::removeChildren((uint64_t)a2);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  DataLength = EshRecord::getDataLength(a2);
  EshContainer::removeChildren((uint64_t)a2);
  v8 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v8);
  v9 = DataLength + v6;
  while (v6 < v9)
  {
    EshParserVisitor::visit(this, v8, v6);
    EshContainer::addChild(a2, v8);
    v10 = (int)v6 + v8->var0 + 8 >= v6;
    v6 = (v6 + v8->var0 + 8);
    if (!v10)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 7013;
    }
  }
  if (v6 > v9)
  {
    v13 = __cxa_allocate_exception(4uLL);
    *v13 = 7013;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8), 0);
  EshParserVisitor::endRead(this, a2);
  if (v8)
    MEMORY[0x22E2DD408](v8, 0x1000C408B6DE1C6);
  return 1;
}

void sub_22A0E1E10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t EshContainer::getHeaderOfType(EshContainer *this, int a2)
{
  return EshContainer::getHeaderOfType(this, a2, 0xFFFFu);
}

uint64_t EshContainer::getHeaderOfType(EshContainer *this, int a2, unsigned __int16 a3)
{
  unsigned int IndexOfChild;
  uint64_t v5;

  IndexOfChild = EshContainer::getIndexOfChild(this, a2, a3);
  if (IndexOfChild == -1)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (IndexOfChild >= ((unint64_t)(*((_QWORD *)this + 5) - v5) >> 3))
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(v5 + 8 * IndexOfChild);
}

uint64_t EshContainer::getIndexOfChild(EshContainer *this, int a2, unsigned __int16 a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5) - v3;
  if ((v4 & 0x7FFFFFFF8) == 0)
    return 0xFFFFFFFFLL;
  result = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    v7 = *(_QWORD *)(v3 + 8 * result);
    if (*(unsigned __int16 *)(v7 + 10) == a2 && (a3 == 0xFFFF || *(unsigned __int16 *)(v7 + 8) == a3))
      break;
    if (v6 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t EshSp::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 160))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *a1, EshRecord *this)
{
  uint64_t v4;
  int Offset;
  int16x8_t v6;
  unsigned int v7;
  int16x8_t v8;

  v4 = *((_QWORD *)a1 + 3);
  Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  v6 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)a1 + 3) + 96))(*((_QWORD *)a1 + 3));
  *((_BYTE *)this + 32) = v7 & 1;
  v6.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v7) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)this + 33) = vmovn_s16(v6).u32[0];
  *((_BYTE *)this + 37) = (v7 & 0x20) != 0;
  *((_BYTE *)this + 38) = (v7 & 0x40) != 0;
  *((_BYTE *)this + 39) = (v7 & 0x80) != 0;
  v8 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v7), (uint32x4_t)xmmword_22A4C0690);
  *(int8x8_t *)v8.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v8), (int8x8_t)0x1000100010001);
  *((_DWORD *)this + 10) = vmovn_s16(v8).u32[0];
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  v4 = *((_QWORD *)a1 + 3);
  Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;
  int v6;
  int v7;
  int v8;
  uint64_t (*v9)(void);
  int v10;

  v4 = *((_QWORD *)a1 + 3);
  Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  if (EshRecord::getDataLength(this) == 8)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 72))(*((_QWORD *)a1 + 3));
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 72))(*((_QWORD *)a1 + 3));
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 72))(*((_QWORD *)a1 + 3));
    v9 = *(uint64_t (**)(void))(**((_QWORD **)a1 + 3) + 72);
  }
  else
  {
    if (EshRecord::getDataLength(this) != 16)
    {
      v7 = 0;
      v6 = 0;
      v8 = 0;
      v10 = 0;
      goto LABEL_7;
    }
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD *)a1 + 3));
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD *)a1 + 3));
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD *)a1 + 3));
    v9 = *(uint64_t (**)(void))(**((_QWORD **)a1 + 3) + 96);
  }
  v10 = v9();
LABEL_7:
  *((_DWORD *)this + 7) = v7;
  *((_DWORD *)this + 8) = v6;
  *((_DWORD *)this + 9) = v8;
  *((_DWORD *)this + 10) = v10;
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  v4 = *((_QWORD *)a1 + 3);
  Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  v4 = *((_QWORD *)a1 + 3);
  Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

{
  uint64_t v4;
  int Offset;

  v4 = *((_QWORD *)a1 + 3);
  Offset = EshRecord::getOffset(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  *((_DWORD *)this + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  *((_DWORD *)this + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD *)a1 + 3));
  EshParserVisitor::endRead(a1, this);
  return 1;
}

void EshSp::~EshSp(EshSp *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshContainer::~EshContainer(EshContainer *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F39E8F0;
  EshContainer::removeChildren((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

void EshDg::EshDg(EshDg *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xF008u, 0);
  *(_QWORD *)v1 = &off_24F39EB28;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t EshDg::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 112))(v3, a1);
}

void EshPatriarch::EshPatriarch(EshPatriarch *this)
{
  uint64_t v1;

  EshObject::EshObject((EshObject *)this, 5u);
  *(_QWORD *)v1 = &off_24F3A4750;
  *(_DWORD *)(v1 + 12) = 0;
}

uint64_t EshPatriarch::isAtom(EshPatriarch *this)
{
  return 1;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshPatriarch *a2)
{
  EshContainer *v4;
  uint64_t v5;
  EshSpgr *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;

  v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  v5 = (*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)this + 96))(this);
  (*(void (**)(EshBinaryReader *, EshContainer *, uint64_t))(*(_QWORD *)this + 104))(this, v4, v5);
  v6 = (EshSpgr *)operator new(0x30uLL);
  EshSpgr::EshSpgr(v6);
  v7 = (*(uint64_t (**)(EshContainer *, _QWORD))(*(_QWORD *)v4 + 104))(v4, 0);
  (*(void (**)(EshBinaryReader *, EshSpgr *, uint64_t))(*(_QWORD *)this + 104))(this, v6, v7);
  v8 = (int *)operator new(0x30uLL);
  EshSp::EshSp((EshSp *)v8);
  v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(_QWORD *)v4 + 104))(v4, 1);
  (*(void (**)(EshBinaryReader *, int *, uint64_t))(*(_QWORD *)this + 104))(this, v8, v9);
  EshRecord::setDataLength((uint64_t)a2, v8[7]);
  (*(void (**)(int *))(*(_QWORD *)v8 + 8))(v8);
  if (v6)
    (*(void (**)(EshSpgr *))(*(_QWORD *)v6 + 8))(v6);
  return (*(uint64_t (**)(EshContainer *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A0E2304(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshSpgr::EshSpgr(EshSpgr *this)
{
  _QWORD *v1;

  EshRectAtom::EshRectAtom(this, 0xF009u, 1u);
  *v1 = &off_24F3A3ED0;
}

void EshRectAtom::EshRectAtom(EshRectAtom *this, unsigned __int16 a2, unsigned __int8 a3)
{
  _QWORD *v3;

  EshAtom::EshAtom(this, a2, a3);
  *v3 = &off_24F39F6C0;
  *(_QWORD *)((char *)v3 + 36) = 0;
  *(_QWORD *)((char *)v3 + 28) = 0;
}

uint64_t EshRectAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 136))(v3, a1);
}

uint64_t EshRecord::setDataLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void EshSpgr::~EshSpgr(EshSpgr *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptEshShape::PptEshShape(PptEshShape *this)
{
  uint64_t v2;

  EshShape::EshShape((EshShape *)this);
  PptEshClientContainer::PptEshClientContainer((PptEshClientContainer *)(v2 + 576));
  *(_QWORD *)this = &off_24F3B7840;
  *((_QWORD *)this + 52) = &unk_24F3B7918;
  *((_QWORD *)this + 72) = &unk_24F3B7958;
}

void sub_22A0E25E0(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshShape::EshShape(EshShape *this)
{
  uint64_t v2;

  EshShapeBase::EshShapeBase((EshShapeBase *)this, 7u);
  *(_QWORD *)v2 = &off_24F3A4880;
  *(_QWORD *)(v2 + 416) = &unk_24F3A4950;
  EshObject::EshObject((EshObject *)(v2 + 424), 0x12u);
  *((_QWORD *)this + 53) = &unk_24F3A5438;
  *((_QWORD *)this + 55) = (char *)this + 16;
  *((_QWORD *)this + 56) = &unk_24F3A5560;
  EshObject::EshObject((EshObject *)((char *)this + 456), 0x17u);
  *((_QWORD *)this + 59) = (char *)this + 16;
  *((_QWORD *)this + 57) = &off_24F3A4C98;
  EshObject::EshObject((EshObject *)this + 30, 0x13u);
  *((_QWORD *)this + 62) = (char *)this + 16;
  *((_QWORD *)this + 60) = &off_24F3A4D28;
  EshObject::EshObject((EshObject *)((char *)this + 504), 0xEu);
  *((_QWORD *)this + 65) = (char *)this + 16;
  *((_QWORD *)this + 63) = &off_24F3A4DD0;
  EshObject::EshObject((EshObject *)this + 33, 0x19u);
  *((_QWORD *)this + 68) = (char *)this + 16;
  *((_QWORD *)this + 66) = &off_24F3A4E60;
  EshObject::EshObject((EshObject *)((char *)this + 552), 0x11u);
  *((_QWORD *)this + 71) = (char *)this + 16;
  *((_QWORD *)this + 69) = &off_24F3A4EF0;
}

void sub_22A0E26E4(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void PptEshClientContainer::PptEshClientContainer(PptEshClientContainer *this)
{
  *(_QWORD *)this = &off_24F3B7590;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

BOOL PptEshShape::isAtom(PptEshShape *this)
{
  return ((*((_QWORD *)this + 74) - *((_QWORD *)this + 73)) & 0x7FFFFFFF8) == 0;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshShape *a2)
{
  EshContainer *v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  EshChildAnchor *v13;
  _DWORD *exception;

  v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  v5 = (*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)this + 96))(this);
  (*(void (**)(EshBinaryReader *, EshContainer *, uint64_t))(*(_QWORD *)this + 104))(this, v4, v5);
  for (i = 0; ; i = (i + 1))
  {
    v7 = (*(uint64_t (**)(EshContainer *))(*(_QWORD *)v4 + 40))(v4);
    v8 = *(_QWORD *)v4;
    if (i >= v7)
      break;
    v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(v8 + 48))(v4, i);
    v10 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(_QWORD *)v4 + 104))(v4, i);
    if (v9 <= 61724)
    {
      v11 = (char *)a2 + 16;
      v12 = 22;
      switch(v9)
      {
        case 61450:
          v11 = (char *)a2 + 208;
          goto LABEL_9;
        case 61451:
          goto LABEL_9;
        case 61453:
          (*(void (**)(EshBinaryReader *, EshShape *, uint64_t))(*(_QWORD *)this + 184))(this, a2, v10);
          continue;
        case 61455:
          v13 = (EshChildAnchor *)operator new(0x30uLL);
          EshChildAnchor::EshChildAnchor(v13);
          (*(void (**)(EshBinaryReader *, EshChildAnchor *, uint64_t))(*(_QWORD *)this + 104))(this, v13, v10);
          *((_DWORD *)a2 + 64) = *((_DWORD *)v13 + 7);
          *((_DWORD *)a2 + 65) = *((_DWORD *)v13 + 8);
          *((_DWORD *)a2 + 66) = *((_DWORD *)v13 + 9);
          *((_DWORD *)a2 + 67) = *((_DWORD *)v13 + 10);
          (*(void (**)(EshChildAnchor *))(*(_QWORD *)v13 + 8))(v13);
          continue;
        case 61456:
          v12 = 21;
          goto LABEL_12;
        case 61457:
LABEL_12:
          (*(void (**)(EshBinaryReader *, EshShape *, uint64_t))(*(_QWORD *)this + 8 * v12))(this, a2, v10);
          continue;
        default:
          goto LABEL_16;
      }
    }
    if (v9 != 61725)
    {
      v11 = (char *)a2 + 80;
      if (v9 != 61729)
      {
        v11 = (char *)a2 + 144;
        if (v9 != 61730)
        {
LABEL_16:
          exception = __cxa_allocate_exception(4uLL);
          *exception = 7013;
        }
      }
LABEL_9:
      (*(void (**)(EshBinaryReader *, char *, uint64_t))(*(_QWORD *)this + 104))(this, v11, v10);
    }
  }
  return (*(uint64_t (**)(EshContainer *))(v8 + 8))(v4);
}

void sub_22A0E2978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptEshReader::readClientAnchor(PptEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  char *v5;
  PptEshClientContainer *v6;
  PptEshClientContainer *v7;
  _DWORD *exception;

  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 7
    && (*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 6)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    v6 = (PptEshClientContainer *)(v5 + 576);
  }
  else
  {
    v6 = (PptEshClientContainer *)(v5 + 368);
  }
  if (v5)
    v7 = v6;
  else
    v7 = 0;
  PptEshClientContainer::addChild(v7, a3);
}

void PptEshClientContainer::addChild(PptEshClientContainer *this, const EshHeader *a2)
{
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = operator new(0x10uLL);
  EshHeader::operator=((uint64_t)v4, (uint64_t)a2);
  v5 = *((_QWORD *)this + 3);
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)this + 1);
    v9 = (unint64_t)v6 - v8;
    v10 = (v5 - v8) >> 3;
    v11 = 2 * v10;
    if (2 * (int)v10 <= (v9 >> 3) + 1)
      v11 = (v9 >> 3) + 1;
    if (v10 >= 0x7FFFFFFF)
      v12 = 0xFFFFFFFFLL;
    else
      v12 = v11;
    if ((_DWORD)v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v12);
      v15 = v14;
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    v16 = &v13[v9 & 0x7FFFFFFF8];
    v17 = &v13[8 * v15];
    *(_QWORD *)v16 = v4;
    v7 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 1);
    v18 = (char *)*((_QWORD *)this + 2);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v16;
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 2) = v7;
}

void sub_22A0E2BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

void PptEshReader::readClientData(PptEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  char *v5;
  PptEshClientContainer *v6;
  PptEshClientContainer *v7;
  _DWORD *exception;

  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 7
    && (*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 6
    && (*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 12)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    v6 = (PptEshClientContainer *)(v5 + 576);
  }
  else if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 6)
  {
    v6 = (PptEshClientContainer *)(v5 + 368);
  }
  else
  {
    v6 = (PptEshClientContainer *)(v5 + 328);
  }
  if (v5)
    v7 = v6;
  else
    v7 = 0;
  PptEshClientContainer::addChild(v7, a3);
}

void PptEshReader::readClientTextBox(PptEshReader *this, EshShape *lpsrc, const EshHeader *a3)
{
  char *v4;
  PptEshClientContainer *v5;

  if (v4)
    v5 = (PptEshClientContainer *)(v4 + 576);
  else
    v5 = 0;
  PptEshClientContainer::addChild(v5, a3);
}

uint64_t PptEshShape::getNumChildren(PptEshShape *this)
{
  return (*((_QWORD *)this + 74) - *((_QWORD *)this + 73)) >> 3;
}

uint64_t PptEshShape::getChildType(PptEshShape *this, unsigned int a2)
{
  return PptEshClientContainer::getChildType((PptEshShape *)((char *)this + 576), a2);
}

uint64_t PptEshClientContainer::getChildType(PptEshClientContainer *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *(unsigned __int16 *)(*(_QWORD *)(v2 + 8 * a2) + 10);
}

uint64_t PptEshShape::getChildVersion(PptEshShape *this, unsigned int a2)
{
  return PptEshClientContainer::getChildVersion((PptEshShape *)((char *)this + 576), a2);
}

uint64_t PptEshClientContainer::getChildVersion(PptEshClientContainer *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 8 * a2) + 12);
}

void PptEshClientAnchor::PptEshClientAnchor(PptEshClientAnchor *this)
{
  _QWORD *v1;

  EshRectAtom::EshRectAtom(this, 0xF010u, 0);
  *v1 = &off_24F3B7500;
}

void PptEshClientData::PptEshClientData(PptEshClientData *this)
{
  _QWORD *v1;

  EshContainer::EshContainer(this, 0xF011u);
  *v1 = &off_24F3B75C8;
}

void PptOEPlaceholderAtom::PptOEPlaceholderAtom(PptOEPlaceholderAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B9BB0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9C58;
  *(_DWORD *)(v2 + 48) = -1;
  *(_WORD *)(v2 + 52) = -256;
}

uint64_t PptOEPlaceholderAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 192))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptOEPlaceholderAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_BYTE *)a2 + 52) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 5)
    || (*((_BYTE *)a2 + 53) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 6))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 2u);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void PptEshClientTextBox::PptEshClientTextBox(PptEshClientTextBox *this)
{
  _QWORD *v1;

  EshContainer::EshContainer(this, 0xF00Du);
  *v1 = &off_24F3B7678;
}

void PptBaseTextPropertyAtom::PptBaseTextPropertyAtom(PptBaseTextPropertyAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  PptTextBlockStylingAtom::PptTextBlockStylingAtom(this, a2);
  *v2 = &off_24F3B6150;
  v2[4] = &unk_24F3B61F8;
}

uint64_t PptBaseTextPropertyAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptBaseTextPropertyAtom *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  PptParaRun *v8;
  __int16 v9;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = *((_DWORD *)this + 12);
  if (v4 >= 6)
  {
    v5 = v4 / 6;
    do
    {
      v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
      v8 = (PptParaRun *)operator new(0x38uLL);
      PptParaRun::PptParaRun(v8);
      if (v7 <= 5)
        v9 = v7;
      else
        v9 = 0;
      *(_DWORD *)v8 = v6;
      *((_WORD *)v8 + 2) = v9;
      EshDgg::addIdCluster(a2, (uint64_t)v8);
      --v5;
    }
    while (v5);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A0E3194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PptGenericDateMCAtom::PptGenericDateMCAtom(PptGenericDateMCAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8C30;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8CD8;
}

uint64_t PptGenericDateMCAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 136))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptGenericDateMCAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptFooterMCAtom::PptFooterMCAtom(PptFooterMCAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8B38;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8BE0;
}

uint64_t PptFooterMCAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 128))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptFooterMCAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSlideNumberMCAtom::PptSlideNumberMCAtom(PptSlideNumberMCAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA898;
  *(_QWORD *)(v2 + 32) = &unk_24F3BA940;
}

uint64_t PptSlideNumberMCAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 256))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideNumberMCAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptEshBackground::PptEshBackground(PptEshBackground *this)
{
  uint64_t v2;

  EshBackground::EshBackground(this);
  PptEshClientContainer::PptEshClientContainer((PptEshClientContainer *)(v2 + 328));
  *(_QWORD *)this = &off_24F3B7260;
  *((_QWORD *)this + 41) = &unk_24F3B72E8;
}

void sub_22A0E34A8(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

void EshBackground::EshBackground(EshBackground *this)
{
  EshObject *v2;
  EshObject *v3;

  EshContentBase::EshContentBase(this, 0xCu);
  v2->var0 = (void **)&off_24F3A4020;
  v3 = v2 + 1;
  EshObject::EshObject(v2 + 17, 0xDu);
  *((_QWORD *)this + 34) = &unk_24F3A4168;
  *((_QWORD *)this + 36) = v3;
  *((_QWORD *)this + 37) = &unk_24F3A4228;
  EshObject::EshObject((EshObject *)this + 19, 0x14u);
  *((_QWORD *)this + 40) = v3;
  *((_QWORD *)this + 38) = &off_24F3A40D8;
}

void sub_22A0E3534(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

BOOL PptEshBackground::isAtom(PptEshBackground *this)
{
  return ((*((_QWORD *)this + 43) - *((_QWORD *)this + 42)) & 0x7FFFFFFF8) == 0;
}

uint64_t EshBinaryReader::readObject(uint64_t a1, uint64_t a2)
{
  EshContainer *v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  (*(void (**)(uint64_t, EshContainer *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v4, v5);
  for (i = 0; ; i = (i + 1))
  {
    v7 = (*(uint64_t (**)(EshContainer *))(*(_QWORD *)v4 + 40))(v4);
    v8 = *(_QWORD *)v4;
    if (i >= v7)
      break;
    v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(v8 + 48))(v4, i);
    v10 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(_QWORD *)v4 + 104))(v4, i);
    if (v9 > 61456)
    {
      if (v9 != 61457)
      {
        if (v9 != 61730)
          continue;
        v11 = a2 + 144;
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v11, v10);
        continue;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, v10);
    }
    else
    {
      v11 = a2 + 208;
      if (v9 == 61450)
        goto LABEL_10;
      v11 = a2 + 16;
      if (v9 == 61451)
        goto LABEL_10;
    }
  }
  return (*(uint64_t (**)(EshContainer *))(v8 + 8))(v4);
}

void sub_22A0E36C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptEshBackground::getNumChildren(PptEshBackground *this)
{
  return (*((_QWORD *)this + 43) - *((_QWORD *)this + 42)) >> 3;
}

void PptSlideTime10Atom::PptSlideTime10Atom(PptSlideTime10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BF240;
  *(_QWORD *)(v2 + 32) = &unk_24F3BF2E8;
}

uint64_t PptSlideTime10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1048))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideTime10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptOutlineTextRefAtom::PptOutlineTextRefAtom(PptOutlineTextRefAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B9E98;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9F40;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptOutlineTextRefAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 216))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptOutlineTextRefAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextGenericRulerAtom::PptTextGenericRulerAtom(PptTextGenericRulerAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB830;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB8D8;
  *(_QWORD *)(v2 + 56) = -1;
  *(_QWORD *)(v2 + 64) = -1;
  *(_QWORD *)(v2 + 70) = -1;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextGenericRulerAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 312))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextGenericRulerAtom *a2)
{
  unsigned int EndOffset;
  unsigned int v5;
  _QWORD *v6;
  int i;
  __int16 v8;
  __int16 v9;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EndOffset = EshRecord::getEndOffset(a2);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((v5 & 1) != 0)
    *((_WORD *)a2 + 38) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  if ((v5 & 4) != 0)
  {
    v6 = operator new(0x18uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    *((_QWORD *)a2 + 6) = v6;
    PptParserVisitor::parseTabs((uint64_t)this, v6, EndOffset);
  }
  for (i = 0; i != 5; ++i)
  {
    if (((v5 >> i) & 8) != 0)
    {
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
      PptTextGenericRulerAtom::setIndent((uint64_t)a2, (__int16)i, v8);
    }
    if (((v5 >> i) & 0x100) != 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
      PptTextGenericRulerAtom::setFirstLine((uint64_t)a2, (__int16)i, v9);
    }
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptTextGenericRulerAtom::setIndent(uint64_t this, int a2, __int16 a3)
{
  _DWORD *exception;

  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *(_WORD *)(this + 2 * a2 + 56) = a3;
  return this;
}

uint64_t **EshOpt::takeComplexProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **result;
  unsigned int v10;
  unsigned int *v11;

  v6 = *(uint64_t **)(a1 + 40);
  if (!v6)
    goto LABEL_9;
  while (1)
  {
    v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2)
      break;
LABEL_5:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_9;
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_5;
  }
  v10 = a2;
  v11 = &v10;
  v8 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11)[5];
  if (v8)
    (*(void (**)(uint64_t *))(*v8 + 8))(v8);
LABEL_9:
  v10 = a2;
  v11 = &v10;
  result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v10, (uint64_t)&std::piecewise_construct, &v11);
  result[5] = a3;
  result[6] = 0;
  return result;
}

void PptAnimHashCode10Atom::PptAnimHashCode10Atom(PptAnimHashCode10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5A88;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5B30;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimHashCode10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 792))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimHashCode10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimNodeAtom::PptAnimNodeAtom(PptAnimNodeAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE4B0;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE558;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
}

uint64_t PptAnimNodeAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 888))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimNodeAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 20
    || ((*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        *((_BYTE *)a2 + 64) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 32))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptAnimVariantAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 896))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimVariantAtom *a2)
{
  int v4;
  unsigned int v5;
  float v6;
  CsString *v7;
  int DataLength;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD *exception;
  _DWORD *v16;
  int v17;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 1)
  {
LABEL_19:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  switch(*((_DWORD *)a2 + 12))
  {
    case 0:
      if (EshRecord::getDataLength(a2) != 2)
        goto LABEL_19;
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
      if (v5 >= 2)
        goto LABEL_19;
      PptAnimVariantAtom::setBoolean((uint64_t)a2, v5 != 0);
      break;
    case 1:
      if (EshRecord::getDataLength(a2) != 5)
        goto LABEL_19;
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
      PptAnimVariantAtom::setInteger((uint64_t)a2, v13);
      break;
    case 2:
      if (EshRecord::getDataLength(a2) != 5)
        goto LABEL_19;
      v6 = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
      PptAnimVariantAtom::setReal((uint64_t)a2, v6);
      break;
    case 3:
      if ((int)EshRecord::getDataLength(a2) <= 2 || (EshRecord::getDataLength(a2) & 0x80000001) != 1)
        goto LABEL_19;
      v7 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v7);
      DataLength = EshRecord::getDataLength(a2);
      v9 = DataLength - 1;
      if (DataLength < 1)
        v9 = DataLength;
      v17 = v9 >> 1;
      CsString::reserve(v7, v9 >> 1);
      v7->var2 = 0;
      bzero(v7->var1, 2 * v7->var3);
      (*(void (**)(_QWORD, int *, unsigned __int16 *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), &v17, v7->var1);
      v10 = v17;
      v11 = EshRecord::getDataLength(a2);
      v12 = v11 - 1;
      if (v11 < 1)
        v12 = v11;
      if (v10 > v12 >> 1)
      {
        v16 = __cxa_allocate_exception(4uLL);
        *v16 = 4003;
      }
      CsString::setCount(v7, v17 - 1);
      PptAnimVariantAtom::setWString(a2, v7);
      (*((void (**)(CsString *))v7->var0 + 1))(v7);
      break;
    default:
      break;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A0E4158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptAnimVariantAtom::setInteger(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = 1;
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t PptBinaryReader::getDocumentRef(PptBinaryReader *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 24) + 84);
}

void sub_22A0E4288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E4348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0E44A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0E45B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0E467C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0E47F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0E4A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A0E4FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0E5114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0E54F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

char *PptParaProperty::copyValuesOfNonOverriddenPropertiesFromParent(char *this, const PptParaProperty *a2)
{
  char *v3;
  int v4;
  int v5;
  uint64_t **v6;

  v3 = this;
  v4 = *(unsigned __int16 *)this;
  v5 = v4 | (this[2] << 16);
  if ((v4 & 1) != 0)
  {
    if ((v4 & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFFE | *(_WORD *)((_BYTE *)a2 + 3) & 1;
    if ((v5 & 2) != 0)
    {
LABEL_3:
      if ((v5 & 4) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFFD | *(_WORD *)((_BYTE *)a2 + 3) & 2;
  if ((v5 & 4) != 0)
  {
LABEL_4:
    if ((v5 & 8) != 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFFB | *(_WORD *)((_BYTE *)a2 + 3) & 4;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    if ((v5 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFF7 | *(_WORD *)((_BYTE *)a2 + 3) & 8;
  if ((v5 & 0x10) != 0)
  {
LABEL_6:
    if ((v5 & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  if ((v5 & 0x20) != 0)
  {
LABEL_7:
    if ((v5 & 0x40) != 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  *(_QWORD *)(this + 12) = *(_QWORD *)((char *)a2 + 12);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40) != 0)
  {
LABEL_8:
    if ((v5 & 0x80) != 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  *((_WORD *)this + 5) = *((_WORD *)a2 + 5);
  if ((v5 & 0x80) != 0)
  {
LABEL_9:
    if ((v5 & 0x100) != 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  *((_WORD *)this + 3) = *((_WORD *)a2 + 3);
  if ((v5 & 0x100) != 0)
  {
LABEL_10:
    if ((v5 & 0x200) != 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  *((_WORD *)this + 15) = *((_WORD *)a2 + 15);
  if ((v5 & 0x200) != 0)
  {
LABEL_11:
    if ((v5 & 0x400) != 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  if ((v5 & 0x400) != 0)
  {
LABEL_12:
    if ((v5 & 0x800) != 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xF0FF | *(_WORD *)((_BYTE *)a2 + 3) & 0xF00;
  if ((v5 & 0x800) != 0)
  {
LABEL_13:
    if ((v5 & 0x1000) != 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  *((_WORD *)this + 12) = *((_WORD *)a2 + 12);
  if ((v5 & 0x1000) != 0)
  {
LABEL_14:
    if ((v5 & 0x2000) != 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  *((_WORD *)this + 13) = *((_WORD *)a2 + 13);
  if ((v5 & 0x2000) != 0)
  {
LABEL_15:
    if ((v5 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  *((_WORD *)this + 14) = *((_WORD *)a2 + 14);
  if ((v5 & 0x4000) != 0)
  {
LABEL_16:
    if ((v5 & 0x10000) != 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  *((_WORD *)this + 17) = *((_WORD *)a2 + 17);
  if ((v5 & 0x10000) != 0)
  {
LABEL_17:
    if ((v5 & 0x20000) != 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xCFFF | *(_WORD *)((_BYTE *)a2 + 3) & 0x3000;
  if ((v5 & 0x20000) != 0)
  {
LABEL_18:
    if ((v5 & 0x40000) != 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFEF | *(_WORD *)((_BYTE *)a2 + 3) & 0x10;
  if ((v5 & 0x40000) != 0)
  {
LABEL_19:
    if ((v5 & 0x80000) != 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFDF | *(_WORD *)((_BYTE *)a2 + 3) & 0x20;
  if ((v5 & 0x80000) != 0)
  {
LABEL_20:
    if ((v5 & 0x100000) != 0)
      goto LABEL_21;
LABEL_42:
    *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFF7F | *(_WORD *)((_BYTE *)a2 + 3) & 0x80;
    if ((v5 & 0x8000) != 0)
      return this;
    goto LABEL_43;
  }
LABEL_41:
  *(_WORD *)(this + 3) = *(_WORD *)(this + 3) & 0xFFBF | *(_WORD *)((_BYTE *)a2 + 3) & 0x40;
  if ((v5 & 0x100000) == 0)
    goto LABEL_42;
LABEL_21:
  if ((v5 & 0x8000) != 0)
    return this;
LABEL_43:
  if (!*((_QWORD *)this + 5) && *((_QWORD *)a2 + 5))
  {
    this = (char *)operator new(0x18uLL);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)v3 + 5) = this;
    v6 = (uint64_t **)*((_QWORD *)a2 + 5);
    if (this != (char *)v6)
      return std::vector<PptTab,ChAllocator<PptTab>>::__assign_with_size[abi:ne180100]<PptTab*,PptTab*>((uint64_t)this, *v6, v6[1], v6[1] - *v6);
  }
  return this;
}

PptCharProperty *PptCharProperty::copyValuesOfNonOverriddenPropertiesFromParent(PptCharProperty *this, const PptCharProperty *a2)
{
  $4A9E05CF4EB813CDA9C8B3A246960F55 var0;

  var0 = this->var0;
  if ((*(_DWORD *)&this->var0 & 1) != 0)
  {
    if ((*(_BYTE *)&var0 & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFFE | *((_WORD *)a2 + 2) & 1;
    if ((*(_BYTE *)&var0 & 2) != 0)
    {
LABEL_3:
      if ((*(_BYTE *)&var0 & 4) != 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFFD | *((_WORD *)a2 + 2) & 2;
  if ((*(_BYTE *)&var0 & 4) != 0)
  {
LABEL_4:
    if ((*(_BYTE *)&var0 & 8) != 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFFB | *((_WORD *)a2 + 2) & 4;
  if ((*(_BYTE *)&var0 & 8) != 0)
  {
LABEL_5:
    if ((*(_BYTE *)&var0 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFF7 | *((_WORD *)a2 + 2) & 8;
  if ((*(_BYTE *)&var0 & 0x10) != 0)
  {
LABEL_6:
    if ((*(_BYTE *)&var0 & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFEF | *((_WORD *)a2 + 2) & 0x10;
  if ((*(_BYTE *)&var0 & 0x20) != 0)
  {
LABEL_7:
    if ((*(_BYTE *)&var0 & 0x40) != 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFDF | *((_WORD *)a2 + 2) & 0x20;
  if ((*(_BYTE *)&var0 & 0x40) != 0)
  {
LABEL_8:
    if ((*(_BYTE *)&var0 & 0x80) != 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFFBF | *((_WORD *)a2 + 2) & 0x40;
  if ((*(_BYTE *)&var0 & 0x80) != 0)
  {
LABEL_9:
    if ((*(_WORD *)&var0 & 0x100) != 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFF7F | *((_WORD *)a2 + 2) & 0x80;
  if ((*(_WORD *)&var0 & 0x100) != 0)
  {
LABEL_10:
    if ((*(_WORD *)&var0 & 0x200) != 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFEFF | *((_WORD *)a2 + 2) & 0x100;
  if ((*(_WORD *)&var0 & 0x200) != 0)
  {
LABEL_11:
    if ((*(_WORD *)&var0 & 0x400) != 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  *((_WORD *)this + 2) = *((_WORD *)this + 2) & 0xFDFF | *((_WORD *)a2 + 2) & 0x200;
  if ((*(_WORD *)&var0 & 0x400) != 0)
  {
LABEL_12:
    if ((*(_WORD *)&var0 & 0x800) != 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this->var13 = a2->var13;
  if ((*(_WORD *)&var0 & 0x800) != 0)
  {
LABEL_13:
    if ((*(_WORD *)&var0 & 0x1000) != 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this->var14 = a2->var14;
  if ((*(_WORD *)&var0 & 0x1000) != 0)
  {
LABEL_14:
    if ((*(_WORD *)&var0 & 0x2000) != 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this->var15 = a2->var15;
  if ((*(_WORD *)&var0 & 0x2000) != 0)
  {
LABEL_15:
    if ((*(_WORD *)&var0 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this->var16 = a2->var16;
  if ((*(_WORD *)&var0 & 0x4000) != 0)
  {
LABEL_16:
    if ((*(_WORD *)&var0 & 0x8000) != 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this->var17 = a2->var17;
  if ((*(_WORD *)&var0 & 0x8000) != 0)
  {
LABEL_17:
    if ((*(_DWORD *)&var0 & 0x10000) != 0)
      return this;
LABEL_35:
    this->var19 = a2->var19;
    return this;
  }
LABEL_34:
  this->var18 = a2->var18;
  if ((*(_DWORD *)&var0 & 0x10000) == 0)
    goto LABEL_35;
  return this;
}

void sub_22A0E5C94(_Unwind_Exception *a1, void *a2, void *a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a3);

  OcSummary::~OcSummary((OcSummary *)va);
  _Unwind_Resume(a1);
}

void OcSummary::OcSummary(OcSummary *this)
{
  OcText *v2;

  *(_QWORD *)this = &off_24F3A6468;
  v2 = (OcText *)((char *)this + 56);
  OcText::OcText((OcText *)((char *)this + 8));
  OcText::OcText(v2);
  OcText::OcText((OcText *)((char *)this + 104));
  OcText::OcText((OcText *)((char *)this + 152));
  OcText::OcText((OcText *)((char *)this + 200));
  OcText::OcText((OcText *)((char *)this + 248));
  OcText::OcText((OcText *)((char *)this + 296));
  OcText::OcText((OcText *)((char *)this + 344));
  OcText::OcText((OcText *)((char *)this + 392));
  OcText::OcText((OcText *)((char *)this + 440));
  OcText::OcText((OcText *)((char *)this + 488));
  OcText::OcText((OcText *)((char *)this + 536));
  OcText::OcText((OcText *)((char *)this + 584));
  OcText::OcText((OcText *)((char *)this + 632));
  OcBinaryData::OcBinaryData((OcBinaryData *)((char *)this + 712));
  *((_WORD *)this + 380) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
}

void sub_22A0E5E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OcText *a10, OcText *a11, OcText *a12, OcText *a13, OcText *a14)
{
  OcText *v14;
  OcText *v15;
  OcText *v16;
  OcText *v17;
  OcText *v18;
  OcText *v19;
  OcText *v20;
  OcText *v21;
  OcText *v22;

  OcText::~OcText(v19);
  OcText::~OcText(v18);
  OcText::~OcText(v17);
  OcText::~OcText(v16);
  OcText::~OcText(v14);
  OcText::~OcText(v22);
  OcText::~OcText(v21);
  OcText::~OcText(v20);
  OcText::~OcText(a10);
  OcText::~OcText(a11);
  OcText::~OcText(a12);
  OcText::~OcText(a13);
  OcText::~OcText(v15);
  OcText::~OcText(a14);
  _Unwind_Resume(a1);
}

void sub_22A0E5F14()
{
  JUMPOUT(0x22A0E5EC4);
}

void sub_22A0E5F1C()
{
  JUMPOUT(0x22A0E5ECCLL);
}

void sub_22A0E5F24()
{
  JUMPOUT(0x22A0E5ED4);
}

void sub_22A0E5F2C()
{
  JUMPOUT(0x22A0E5EDCLL);
}

void sub_22A0E5F34()
{
  JUMPOUT(0x22A0E5EE4);
}

void sub_22A0E5F3C()
{
  JUMPOUT(0x22A0E5EECLL);
}

void sub_22A0E5F44()
{
  JUMPOUT(0x22A0E5EF4);
}

void sub_22A0E5F4C()
{
  JUMPOUT(0x22A0E5EFCLL);
}

void sub_22A0E5F54()
{
  JUMPOUT(0x22A0E5F04);
}

void OcText::OcText(OcText *this)
{
  this->var0 = (void **)&off_24F3A64A0;
  *(_OWORD *)&this->var1 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 1;
}

unsigned __int8 *OcBinaryReader::readSummary(OcBinaryReader *this, OcSummary *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;

  v4 = OcBinaryReader::parseChUINT2Prop((uint64_t)this, 1, 1);
  v5 = OcBinaryReader::parseChUINT2Prop((uint64_t)this, 2, 1);
  if (v5 > 931)
  {
    if (v5 > 1360)
    {
      if (v5 > 10078)
      {
        if ((v5 - 65000) >= 2 && v5 != 10079 && v5 != 10081)
          goto LABEL_39;
      }
      else if (((v5 - 10000) > 0x1D || ((1 << (v5 - 16)) & 0x200000C3) == 0) && v5 != 1361)
      {
        goto LABEL_39;
      }
    }
    else if (((v5 - 1200) > 0x3A || ((1 << (v5 + 80)) & 0x7FC000000000001) == 0)
           && ((v5 - 932) > 0x12 || ((1 << (v5 + 92)) & 0x60011) == 0)
           && v5 != 1026)
    {
      goto LABEL_39;
    }
  }
  else if (v5 > 707)
  {
    if (((v5 - 850) > 0x19 || ((1 << (v5 - 82)) & 0x309FCA5) == 0)
      && (v5 - 708) >= 3
      && ((v5 - 720) > 0x37 || ((1 << (v5 + 48)) & 0x80000000020001) == 0))
    {
      goto LABEL_39;
    }
  }
  else if (v5 > 36)
  {
    if (((v5 - 37) > 0x3F || ((1 << (v5 - 37)) & 0x8000000000000021) == 0)
      && v5 != 437
      && v5 != 500)
    {
      goto LABEL_39;
    }
  }
  else if (v5 >= 5)
  {
LABEL_39:
    v7 = 1252;
    if (v4)
      v6 = v4;
    else
      v6 = 1252;
    goto LABEL_38;
  }
  if (v4)
    v6 = v4;
  else
    v6 = 1252;
  if (v5)
    v7 = v5;
  else
    v7 = 1252;
LABEL_38:
  *((_DWORD *)a2 + 4) = v6;
  *((_DWORD *)a2 + 16) = v6;
  *((_DWORD *)a2 + 28) = v6;
  *((_DWORD *)a2 + 40) = v6;
  *((_DWORD *)a2 + 52) = v6;
  *((_DWORD *)a2 + 64) = v6;
  *((_DWORD *)a2 + 76) = v6;
  *((_DWORD *)a2 + 88) = v6;
  *((_DWORD *)a2 + 100) = v6;
  *((_DWORD *)a2 + 124) = v7;
  *((_DWORD *)a2 + 136) = v7;
  *((_DWORD *)a2 + 148) = v7;
  *((_DWORD *)a2 + 160) = v7;
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 2, (OcText *)((char *)a2 + 8));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 3, (OcText *)((char *)a2 + 56));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 4, (OcText *)((char *)a2 + 104));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 5, (OcText *)((char *)a2 + 152));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 6, (OcText *)((char *)a2 + 200));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 7, (OcText *)((char *)a2 + 248));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 8, (OcText *)((char *)a2 + 296));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 9, (OcText *)((char *)a2 + 344));
  OcBinaryReader::parseStringProp((uint64_t)this, 1, 18, (OcText *)((char *)a2 + 392));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 2, (OcText *)((char *)a2 + 488));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 3, (OcText *)((char *)a2 + 536));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 14, (OcText *)((char *)a2 + 584));
  OcBinaryReader::parseStringProp((uint64_t)this, 2, 15, (OcText *)((char *)a2 + 632));
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 10, (unsigned int *)a2 + 170);
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 11, (unsigned int *)a2 + 172);
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 12, (unsigned int *)a2 + 174);
  OcBinaryReader::parseDateTimeProp((uint64_t)this, 1, 13, (unsigned int *)a2 + 176);
  *((_BYTE *)a2 + 761) = OcBinaryReader::parseBoolProp((uint64_t)this, 2, 16);
  *((_BYTE *)a2 + 760) = OcBinaryReader::parseBoolProp((uint64_t)this, 2, 11);
  OcBinaryReader::parseBLOBProp((uint64_t)this, 3, 4096, (uint64_t)a2 + 440);
  OcBinaryReader::parseHyperlinksProp(this, a2);
  return OcBinaryReader::parseClipboardProp((uint64_t)this, 1, 17, (OcBinaryData *)((char *)a2 + 712));
}

uint64_t OcBinaryReader::parseChUINT2Prop(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  SsrwOORootStorage *v9;
  unsigned __int16 *v11;
  int v12;

  v12 = 7;
  v11 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  SsrwOORootStorage::getDocumentProperty(v6, a2, a3, &v12, (void **)&v11);
  if (v11)
    v7 = v12 == 0;
  else
    v7 = 0;
  if (!v7)
    return 0;
  v8 = *v11;
  v9 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  SsrwOORootStorage::freeDocumentProperty(v9, (void **)&v11);
  return v8;
}

uint64_t PptBinaryReader::getRootStorage(PptBinaryReader *this)
{
  return (uint64_t)this + 40;
}

uint64_t SsrwOORootStorage::getDocumentProperty(uint64_t a1, int a2, uint64_t a3, int *a4, void **a5)
{
  uint64_t result;
  int v7;
  _DWORD *exception;

  result = getDocumentProperty(*(_QWORD *)(a1 + 80), a2, a3, a4, a5);
  if ((result & 0xFFFFFFFE) == 0xC)
  {
    if (*a5)
      return SsrwOORootStorage::freeDocumentProperty((SsrwOORootStorage *)result, a5);
  }
  else if ((_DWORD)result)
  {
    v7 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v7;
  }
  return result;
}

uint64_t getDocumentProperty(uint64_t a1, int a2, uint64_t a3, int *a4, void **a5)
{
  uint64_t StorageFromRoot;
  uint64_t (*v9)[2];
  uint64_t *v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  size_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char *__s;
  void *__src;
  uint64_t *v23;
  uint64_t *v24;

  v23 = 0;
  v24 = 0;
  if (!a1)
    return 6;
  StorageFromRoot = 6;
  if ((a2 - 4) < 0xFFFFFFFD || !a4 || !a5)
    return StorageFromRoot;
  v9 = (a2 - 1) > 2 ? 0 : *(&off_24F3A69F8 + a2 - 1);
  v20 = 0;
  __s = 0;
  __src = 0;
  StorageFromRoot = getStorageFromRoot(a1, &v23);
  if ((_DWORD)StorageFromRoot)
    return StorageFromRoot;
  StorageFromRoot = propertyStorageOpen(v23, v9, &v24);
  if ((_DWORD)StorageFromRoot)
    return StorageFromRoot;
  v10 = v24;
  if (!v24)
    return 6;
  if (*v24)
  {
    StorageFromRoot = propertySetGet(*v24, a3, (uint64_t)&v20);
    if (!(_DWORD)StorageFromRoot)
    {
      free(v10);
      if ((unsigned __int16)v20 <= 0x1Du)
      {
        v11 = 2;
        switch((__int16)v20)
        {
          case 2:
          case 11:
            goto LABEL_32;
          case 3:
            v11 = 4;
            goto LABEL_32;
          case 5:
            goto LABEL_23;
          default:
            goto LABEL_45;
        }
      }
      if ((unsigned __int16)v20 > 0x40u)
      {
        if ((unsigned __int16)v20 == 65)
        {
          v13 = __s;
        }
        else
        {
          if ((unsigned __int16)v20 != 71)
            goto LABEL_45;
          v13 = *(_DWORD *)__s;
        }
        if (v13 >= 0xFFFFFFFC)
          goto LABEL_44;
        v11 = v13 + 4;
      }
      else if ((unsigned __int16)v20 == 30)
      {
        v14 = strlen(__s);
        if (v14 == -1)
          goto LABEL_44;
        v11 = v14 + 1;
      }
      else
      {
        if ((unsigned __int16)v20 != 64)
          goto LABEL_45;
LABEL_23:
        v11 = 8;
      }
LABEL_32:
      v15 = v11;
      v16 = malloc_type_malloc(v11, 0x39E88954uLL);
      *a5 = v16;
      if (v16)
      {
        bzero(v16, v15);
        if ((unsigned __int16)v20 <= 0x1Du)
        {
          switch((__int16)v20)
          {
            case 2:
              memcpy(*a5, &__s, v15);
              v17 = 0;
              goto LABEL_53;
            case 3:
              memcpy(*a5, &__s, v15);
              v17 = 1;
              goto LABEL_53;
            case 5:
              memcpy(*a5, &__s, v15);
              v17 = 7;
              goto LABEL_53;
            case 11:
              memcpy(*a5, &__s, v15);
              v17 = 5;
              goto LABEL_53;
            default:
              goto LABEL_45;
          }
        }
        if ((unsigned __int16)v20 <= 0x40u)
        {
          if ((unsigned __int16)v20 == 30)
          {
            memcpy(*a5, __s, v15);
            v17 = 2;
            goto LABEL_53;
          }
          if ((unsigned __int16)v20 == 64)
          {
            v18 = time_tFromWinFileTime((unsigned int *)&__s, *a5);
            if ((_DWORD)v18)
            {
              StorageFromRoot = v18;
              propVariantCleanup((uint64_t)&v20);
              return StorageFromRoot;
            }
            v17 = 3;
LABEL_53:
            *a4 = v17;
            return propVariantCleanup((uint64_t)&v20);
          }
LABEL_45:
          propVariantCleanup((uint64_t)&v20);
          return 12;
        }
        if ((unsigned __int16)v20 == 65)
        {
          v19 = *a5;
          *v19 = (_DWORD)__s;
          memcpy(v19 + 1, __src, __s);
          v17 = 6;
          goto LABEL_53;
        }
        if ((unsigned __int16)v20 != 71)
          goto LABEL_45;
        CsLeWriteUInt32(*(unsigned int *)__s, *a5);
        CsLeWriteUInt32(*((unsigned int *)__s + 1), (_DWORD *)*a5 + 1);
        if (*(_DWORD *)__s > 3u)
        {
          memcpy((char *)*a5 + 8, *((const void **)__s + 1), (*(_DWORD *)__s - 4));
          v17 = 4;
          goto LABEL_53;
        }
      }
LABEL_44:
      propVariantCleanup((uint64_t)&v20);
      return 5;
    }
  }
  else
  {
    StorageFromRoot = 6;
  }
  free(v10);
  return StorageFromRoot;
}

uint64_t propertyStorageOpen(uint64_t *a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t PropertySetFromStorage;

  v6 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  *a3 = v6;
  if (v6)
  {
    *v6 = 0;
    v6[1] = 0;
    PropertySetFromStorage = getPropertySetFromStorage((uint64_t)a1, a2, *a3);
    if ((_DWORD)PropertySetFromStorage)
    {
      free(*a3);
      *a3 = 0;
    }
    else
    {
      (*a3)[1] = storageGetRoot(a1);
    }
  }
  else
  {
    *a3 = 0;
    return 5;
  }
  return PropertySetFromStorage;
}

uint64_t getPropertySetFromStorage(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t TOC;
  uint64_t *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t *v11;
  int Mode;
  uint64_t Stream;
  int v14;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v6 = storageEnsureDocumentPropertiesExist(a1);
  if (!(_DWORD)v6)
  {
    TOC = rootStorageGetTOC(a1);
    v8 = (uint64_t *)TOC;
    if (!areGUIDsEqual(a2, SSRW_FMTID_SummaryInformation))
    {
      if (areGUIDsEqual(a2, &SSRW_FMTID_DocumentSummaryInformation))
      {
        v8 = (uint64_t *)(TOC + 8);
      }
      else
      {
        if (!areGUIDsEqual(a2, &SSRW_FMTID_UserDefinedProperties))
          return 12;
        v8 = (uint64_t *)(TOC + 16);
      }
    }
    v9 = areGUIDsEqual(a2, SSRW_FMTID_SummaryInformation);
    if (v9)
      v10 = 24;
    else
      v10 = 32;
    if (v9)
      v11 = (uint64_t *)(TOC + 24);
    else
      v11 = (uint64_t *)(TOC + 32);
    Mode = storageGetMode(a1);
    if (*(_QWORD *)(TOC + v10))
    {
      Stream = 0;
      v14 = 1;
    }
    else
    {
      if (*v8)
      {
        Stream = 0;
        goto LABEL_25;
      }
      if (areGUIDsEqual(a2, SSRW_FMTID_SummaryInformation))
        v16 = (unsigned __int16 *)&SUMMARY_INFO_NAME;
      else
        v16 = (unsigned __int16 *)&DOC_SUMMARY_INFO_NAME;
      if ((Mode & 0xFFFFFFFD) != 0)
        Stream = 0;
      else
        Stream = openStream(a1, v16, v11);
      v17 = *(_QWORD *)(TOC + v10);
      v18 = 1;
      if (!v17 && (Mode - 1) <= 1)
      {
        Stream = createStream(a1, v16, v11);
        v18 = 0;
        v17 = *(_QWORD *)(TOC + v10);
      }
      if ((_DWORD)Stream)
        v14 = 0;
      else
        v14 = v18;
      if (!v17)
        return 13;
    }
    if (*v8)
    {
LABEL_25:
      *a3 = *v8;
      return Stream;
    }
    v6 = propertySetConstruct(a2, Mode, v8);
    if ((_DWORD)v6)
      return v6;
    if ((Mode & 0xFFFFFFFD) == 0 && v14)
    {
      v6 = streamSeek(*(_QWORD *)(TOC + v10), 0, 0);
      if ((_DWORD)v6)
        return v6;
      v6 = propertySetRead(*v8, *(_QWORD *)(TOC + v10), a2);
      Stream = 0;
      if ((_DWORD)v6)
      {
        if ((_DWORD)v6 != 15)
          return v6;
      }
      goto LABEL_25;
    }
    if (!areGUIDsEqual(a2, &SSRW_FMTID_DocumentSummaryInformation))
    {
      Stream = areGUIDsEqual(a2, &SSRW_FMTID_UserDefinedProperties);
      if (!(_DWORD)Stream)
        goto LABEL_25;
    }
    LOWORD(v19) = 2;
    LOWORD(v20) = 1252;
    Stream = propertySetPut(*v8, 1, (unsigned __int16 *)&v19);
    v6 = Stream;
    if (!(_DWORD)Stream)
      goto LABEL_25;
  }
  return v6;
}

uint64_t storageEnsureDocumentPropertiesExist(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  v1 = a1 + 40;
  if (v2)
    return 0;
  else
    return documentPropertiesConstruct(v1);
}

BOOL areGUIDsEqual(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t storageGetMode(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 32);
  return result;
}

uint64_t propertySetConstruct(_OWORD *a1, int a2, uint64_t *a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;

  v6 = malloc_type_malloc(0x990uLL, 0x1032040B935A2E1uLL);
  *a3 = (uint64_t)v6;
  if (!v6)
    return 5;
  bzero(v6, 0x990uLL);
  result = 0;
  v8 = *a3;
  *(_DWORD *)(v8 + 1600) = 0;
  *(_QWORD *)(v8 + 1624) = 0;
  *(_OWORD *)(*a3 + 1608) = *a1;
  *(_DWORD *)(*a3 + 1636) = a2;
  return result;
}

uint64_t propertySetRead(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  char v7;
  unsigned int v8;
  char v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _WORD *v19;
  int Float64;
  unint64_t v21;
  void **v22;
  void *v23;
  int BytesAvailableToRead;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _DWORD *v28;
  int SInt32;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  v32 = 0;
  LOWORD(v36) = 0;
  LOWORD(v35) = 0;
  HIDWORD(v36) = 0;
  LODWORD(v37) = 0;
  v40 = 0;
  v41[0] = 0;
  v38 = 0;
  v39 = 0;
  result = readSInt16(a2, &v36);
  if (!(_DWORD)result)
  {
    result = readSInt16(a2, &v35);
    if (!(_DWORD)result)
    {
      result = readSInt32(a2, &v37);
      if (!(_DWORD)result)
      {
        result = readSInt32(a2, &v40);
        if (!(_DWORD)result)
        {
          result = readUInt16(a2, (_WORD *)&v40 + 2);
          if (!(_DWORD)result)
          {
            result = readUInt16(a2, (_WORD *)&v40 + 3);
            if (!(_DWORD)result)
            {
              HIDWORD(v37) = 8;
              result = streamRead(a2, (uint64_t)v41, (unsigned int *)&v37 + 1);
              if (!(_DWORD)result)
              {
                result = readSInt32(a2, &v37);
                if (!(_DWORD)result)
                {
                  v7 = 1;
                  v8 = v37;
                  while (1)
                  {
                    result = readGUID(a2, (uint64_t)&v38);
                    if ((_DWORD)result)
                      goto LABEL_9;
                    result = readSInt32(a2, (_DWORD *)&v36 + 1);
                    if ((_DWORD)result)
                      goto LABEL_9;
                    if (*a3 == v38 && a3[1] == v39)
                      break;
                    v10 = (v8 < 2) | ~v7;
                    v7 = 0;
                    if ((v10 & 1) != 0)
                    {
                      v11 = *(_DWORD *)(a1 + 1632);
                      goto LABEL_21;
                    }
                  }
                  v11 = HIDWORD(v36);
                  *(_DWORD *)(a1 + 1632) = HIDWORD(v36);
LABEL_21:
                  if (!v11)
                    return 0;
                  *(_QWORD *)(a1 + 1624) = a2;
                  streamSeek(a2, v11, 0);
                  readSInt32(a2, (_DWORD *)&v32 + 1);
                  v12 = HIDWORD(v32);
                  readSInt32(a2, (_DWORD *)&v32 + 1);
                  v13 = HIDWORD(v32);
                  if (HIDWORD(v32) > 0x32)
                    return 12;
                  *(_DWORD *)(a1 + 1600) = HIDWORD(v32);
                  if (!(_DWORD)v13)
                    return 0;
                  v14 = 0;
                  while (1)
                  {
                    result = readSInt32(a2, &v32);
                    if ((_DWORD)result)
                      return result;
                    v15 = (_DWORD *)(a1 + 32 * v14);
                    *v15 = v32;
                    result = readSInt32(a2, (_DWORD *)&v32 + 1);
                    if ((_DWORD)result)
                      return result;
                    v15[1] = HIDWORD(v32);
                    result = streamGetPos64(a2, &v31);
                    if ((_DWORD)result)
                      return result;
                    result = streamSeek(*(_QWORD *)(a1 + 1624), v15[1] + *(_DWORD *)(a1 + 1632), 0);
                    if ((_DWORD)result)
                      return result;
                    if (!*v15)
                    {
                      if (propertySetLoadNameList(a1, a2, v12))
                      {
                        if (*(_DWORD *)(a1 + 2440))
                        {
                          v21 = 0;
                          v22 = (void **)(a1 + 1640);
                          do
                          {
                            v23 = *v22;
                            v22 += 2;
                            free(v23);
                            ++v21;
                          }
                          while (v21 < *(unsigned int *)(a1 + 2440));
                        }
                        *(_DWORD *)(a1 + 2440) = 0;
                      }
                      goto LABEL_61;
                    }
                    v35 = 0;
                    v34 = 0;
                    v33 = 0;
                    v38 = 0;
                    v16 = *(_QWORD *)(a1 + 1624);
                    if (v16)
                    {
                      readSInt32(v16, (_DWORD *)&v33 + 1);
                      v17 = HIDWORD(v33);
                      v18 = a1 + 32 * v14;
                      *(_WORD *)(v18 + 8) = WORD2(v33);
                      v19 = (_WORD *)(v18 + 8);
                      if (v17 <= 29)
                      {
                        switch(v17)
                        {
                          case 2:
                          case 11:
                            Float64 = readSInt16(*(_QWORD *)(a1 + 1624), &v34);
                            *(_WORD *)(a1 + 32 * v14 + 16) = v34;
                            goto LABEL_59;
                          case 3:
                            break;
                          case 4:
                          case 6:
                          case 7:
                          case 8:
                          case 9:
                          case 10:
                            goto LABEL_57;
                          case 5:
                            Float64 = readFloat64(*(_QWORD *)(a1 + 1624), (double *)&v38);
                            *(_QWORD *)(a1 + 32 * v14 + 16) = v38;
                            goto LABEL_59;
                          default:
                            if (v17 != 22)
                              goto LABEL_57;
                            break;
                        }
                        Float64 = readSInt32(*(_QWORD *)(a1 + 1624), &v35);
                        *(_DWORD *)(a1 + 32 * v14 + 16) = v35;
                        goto LABEL_59;
                      }
                      if (v17 <= 64)
                      {
                        if (v17 == 30)
                        {
                          if (!propertySetReadSizePrefixedBlob(a1, &v33, (uint64_t *)(a1 + 32 * v14 + 16))
                            && !*(_BYTE *)(*(_QWORD *)(a1 + 32 * v14 + 16) + (v33 - 1)))
                          {
                            goto LABEL_61;
                          }
                        }
                        else
                        {
                          if (v17 == 64)
                          {
                            if (!readSInt32(*(_QWORD *)(a1 + 1624), (_DWORD *)&v33 + 1))
                            {
                              *(_DWORD *)(a1 + 32 * v14 + 16) = HIDWORD(v33);
                              if (!readSInt32(*(_QWORD *)(a1 + 1624), (_DWORD *)&v33 + 1))
                              {
                                v15[5] = HIDWORD(v33);
                                goto LABEL_61;
                              }
                            }
                            goto LABEL_60;
                          }
LABEL_57:
                          *v19 = 0;
                        }
LABEL_60:
                        propVariantCleanup((uint64_t)v19);
                        goto LABEL_61;
                      }
                      if (v17 != 65)
                      {
                        if (v17 != 71)
                          goto LABEL_57;
                        v36 = 0;
                        v37 = 0;
                        *v19 = 0;
                        Float64 = streamGetPos(*(_QWORD *)(a1 + 1624), &v37);
                        if (Float64)
                          goto LABEL_59;
                        Float64 = readSInt32(*(_QWORD *)(a1 + 1624), (_DWORD *)&v37 + 1);
                        if (Float64)
                          goto LABEL_59;
                        BytesAvailableToRead = streamGetBytesAvailableToRead(*(_QWORD *)(a1 + 1624), &v36);
                        Float64 = 14;
                        if (v36 < HIDWORD(v37))
                          goto LABEL_59;
                        if (HIDWORD(v37) < 5)
                          goto LABEL_59;
                        Float64 = BytesAvailableToRead;
                        if (BytesAvailableToRead)
                          goto LABEL_59;
                        v40 = 0;
                        streamGetBytesAvailableToRead64(*(_QWORD *)(a1 + 1624), &v40);
                        if (v40 < HIDWORD(v37))
                        {
                          Float64 = 14;
                          goto LABEL_59;
                        }
                        v26 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040466105CCuLL);
                        v27 = a1 + 32 * v14;
                        *(_QWORD *)(v27 + 16) = v26;
                        v30 = (void **)(v27 + 16);
                        if (v26)
                        {
                          *((_QWORD *)*v30 + 1) = malloc_type_calloc(1uLL, (HIDWORD(v37) - 4), 0x50399FC8uLL);
                          v28 = *v30;
                          if (*((_QWORD *)*v30 + 1))
                          {
                            *v28 = HIDWORD(v37);
                            SInt32 = readSInt32(*(_QWORD *)(a1 + 1624), (_DWORD *)&v36 + 1);
                            if (SInt32)
                            {
                              Float64 = SInt32;
                              goto LABEL_76;
                            }
                            *((_DWORD *)*v30 + 1) = HIDWORD(v36);
                            HIDWORD(v37) -= 4;
                            Float64 = streamRead(*(_QWORD *)(a1 + 1624), *((_QWORD *)*v30 + 1), (unsigned int *)&v37 + 1);
                            if (Float64)
                            {
LABEL_76:
                              free(*((void **)*v30 + 1));
                              free(*v30);
                            }
                            else
                            {
                              *v19 = 71;
                            }
LABEL_59:
                            if (!Float64)
                              goto LABEL_61;
                            goto LABEL_60;
                          }
                          free(v28);
                        }
                        Float64 = 5;
                        goto LABEL_59;
                      }
                      v25 = a1 + 32 * v14;
                      if (propertySetReadSizePrefixedBlob(a1, &v33, (uint64_t *)(v25 + 24)))
                        goto LABEL_60;
                      *(_DWORD *)(v25 + 16) = v33;
                    }
LABEL_61:
                    result = streamSeek64(a2, v31, 0);
                    if (!(_DWORD)result && ++v14 != v13)
                      continue;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  *(_QWORD *)(a1 + 1624) = 0;
  return result;
}

uint64_t streamGetPos64(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 6;
  result = 0;
  *a2 = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t streamGetBytesAvailableToRead64(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = 6;
  if (a1 && a2 && (*(_DWORD *)(a1 + 48) | 2) == 2)
  {
    result = 0;
    *a2 = **(_QWORD **)(a1 + 56) - *(_QWORD *)(a1 + 24);
  }
  return result;
}

uint64_t storageGetRoot(uint64_t *a1)
{
  uint64_t result;

  if (!a1)
    return 0;
  result = *a1;
  if (!result)
    return 0;
  return result;
}

uint64_t propertySetGet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int RealID;
  uint64_t v6;
  unsigned __int16 *i;

  RealID = propertyGetRealID(a1, a2);
  if (RealID == -1)
    return 13;
  v6 = *(unsigned int *)(a1 + 1600);
  if (!(_DWORD)v6)
    return 13;
  for (i = (unsigned __int16 *)(a1 + 8); *((_DWORD *)i - 2) != RealID; i += 16)
  {
    if (!--v6)
      return 13;
  }
  if (!*i || *i == 10)
    return 13;
  else
    return propVariantCopyContents(i, a3);
}

uint64_t propertyGetRealID(uint64_t a1, uint64_t a2)
{
  int *Info;
  uint64_t v4;
  int *v5;
  const char **i;

  if ((a2 & 0xFFFFFFFE) == 0x1000)
  {
    Info = propertyGetInfo((_QWORD *)(a1 + 1608), a2);
    v4 = *(unsigned int *)(a1 + 2440);
    if ((_DWORD)v4)
    {
      v5 = Info;
      for (i = (const char **)(a1 + 1648); !v5 || strcmp(*((const char **)v5 + 1), *(i - 1)); i += 2)
      {
        if (!--v4)
          return 0xFFFFFFFFLL;
      }
      return *(unsigned int *)i;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return a2;
}

uint64_t propVariantCopyContents(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  __int128 v6;
  void *v7;
  size_t v8;
  void *v9;
  size_t v10;
  char *v11;
  size_t v12;
  void *v13;
  size_t v14;
  char *v15;
  char *v16;

  result = 6;
  if (a1 && a2)
  {
    *(_WORD *)a2 = 0;
    v5 = *a1;
    result = 12;
    if (v5 > 0x3F)
    {
      switch(v5)
      {
        case '@':
LABEL_6:
          v6 = *(_OWORD *)a1;
          *(_QWORD *)(a2 + 16) = *((_QWORD *)a1 + 2);
          *(_OWORD *)a2 = v6;
LABEL_7:
          result = 0;
          *(_WORD *)a2 = *a1;
          return result;
        case 'A':
          v12 = *((unsigned int *)a1 + 2);
          *(_DWORD *)(a2 + 8) = v12;
          v13 = malloc_type_malloc(v12, 0xF02908FDuLL);
          *(_QWORD *)(a2 + 16) = v13;
          if (v13)
          {
            memcpy(v13, *((const void **)a1 + 2), v12);
            goto LABEL_7;
          }
          return 5;
        case 'G':
          v7 = malloc_type_malloc(0x10uLL, 0x1010040466105CCuLL);
          *(_QWORD *)(a2 + 8) = v7;
          if (v7)
          {
            v8 = (**((_DWORD **)a1 + 1) - 4);
            *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) = malloc_type_malloc(v8, 0x2D9BAF94uLL);
            v9 = *(void **)(*(_QWORD *)(a2 + 8) + 8);
            if (v9)
            {
              memcpy(v9, *(const void **)(*((_QWORD *)a1 + 1) + 8), v8);
              **(_DWORD **)(a2 + 8) = **((_DWORD **)a1 + 1);
              *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4) = *(_DWORD *)(*((_QWORD *)a1 + 1) + 4);
              goto LABEL_7;
            }
            free(*(void **)(a2 + 8));
            *(_QWORD *)(a2 + 8) = 0;
          }
          return 5;
      }
    }
    else
    {
      if (v5 > 0x1E)
        return result;
      if (((1 << v5) & 0x10C2D) != 0)
        goto LABEL_6;
      if (v5 == 8)
      {
        v14 = (2 * *(_DWORD *)(*((_QWORD *)a1 + 1) - 4) + 6);
        v15 = (char *)malloc_type_malloc(v14, 0x6DE31CD3uLL);
        if (v15)
        {
          v16 = v15;
          memcpy(v15, (const void *)(*((_QWORD *)a1 + 1) - 4), v14);
          *(_QWORD *)(a2 + 8) = v16 + 4;
          free(v16);
          goto LABEL_7;
        }
        return 5;
      }
      if (v5 == 30)
      {
        v10 = strlen(*((const char **)a1 + 1)) + 1;
        v11 = (char *)malloc_type_malloc(v10, 0x92CF2245uLL);
        *(_QWORD *)(a2 + 8) = v11;
        if (v11)
        {
          strncpy(v11, *((const char **)a1 + 1), v10);
          goto LABEL_7;
        }
        return 5;
      }
    }
  }
  return result;
}

uint64_t propVariantCleanup(uint64_t result)
{
  uint64_t v1;
  int v2;
  void **v3;
  uint64_t v4;
  void *v5;

  if (result)
  {
    v1 = result;
    v2 = *(unsigned __int16 *)result;
    result = 12;
    if (v2 > 63)
    {
      switch(v2)
      {
        case '@':
LABEL_16:
          result = 0;
          *(_WORD *)v1 = 0;
          return result;
        case 'A':
          v3 = (void **)(v1 + 16);
          break;
        case 'G':
          v3 = (void **)(v1 + 8);
          v4 = *(_QWORD *)(v1 + 8);
          if (!v4)
          {
            v5 = 0;
            goto LABEL_15;
          }
          free(*(void **)(v4 + 8));
          break;
        default:
          return result;
      }
LABEL_14:
      v5 = *v3;
LABEL_15:
      free(v5);
      goto LABEL_16;
    }
    if (v2 > 0x1E)
      return result;
    if (((1 << v2) & 0x10C2D) != 0)
      goto LABEL_16;
    if (v2 == 8 || v2 == 30)
    {
      v3 = (void **)(v1 + 8);
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t SsrwOORootStorage::freeDocumentProperty(SsrwOORootStorage *this, void **a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = freeDocumentProperty(a2);
  if ((_DWORD)result)
  {
    v3 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return result;
}

uint64_t freeDocumentProperty(void **a1)
{
  free(*a1);
  *a1 = 0;
  return 0;
}

uint64_t OcBinaryReader::parseStringProp(uint64_t a1, int a2, uint64_t a3, OcText *a4)
{
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  unsigned int v11;
  SsrwOORootStorage *v12;
  char *__s;
  int v14;

  v14 = 0;
  __s = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  result = SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v14, (void **)&__s);
  if (__s)
    v10 = v14 == 2;
  else
    v10 = 0;
  if (v10)
  {
    v11 = strlen(__s);
    OcText::copyBuffer(a4, (const unsigned __int8 *)__s, v11 + 1);
    a4->var3 = v11 >> (OcText::isSingleByteEncoding(a4->var1) ^ 1);
    v12 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return SsrwOORootStorage::freeDocumentProperty(v12, (void **)&__s);
  }
  return result;
}

void *OcText::copyBuffer(OcText *this, const unsigned __int8 *a2, unsigned int a3)
{
  char *var5;
  _DWORD *exception;

  if (!a2 || (OcText::allocBuffer(this, a3, 0), (var5 = this->var5) == 0))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return memcpy(var5, a2, a3);
}

void OcText::allocBuffer(OcText *this, unsigned int a2, int a3)
{
  unsigned int var4;
  char *var5;
  char *v8;
  char *v9;
  _DWORD *exception;

  var4 = this->var4;
  if (var4 >= a2)
  {
    if (this->var7)
      goto LABEL_9;
  }
  else if (this->var7)
  {
    var5 = this->var5;
    if (var5)
      MEMORY[0x22E2DD3F0](var5, 0x1000C8077774924);
    this->var5 = 0;
    goto LABEL_8;
  }
  this->var7 = 1;
LABEL_8:
  v8 = (char *)operator new[](a2);
  this->var5 = v8;
  this->var4 = a2;
  var4 = a2;
  if (!v8)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1001;
  }
LABEL_9:
  if (a3)
  {
    v9 = this->var5;
    if (v9)
      bzero(v9, var4);
  }
}

uint64_t OcText::isSingleByteEncoding(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 > 949)
  {
    if (a1 > 9999)
    {
      if (a1 > 10078)
      {
        if (a1 == 10079 || a1 == 10081 || a1 == 65001)
          return result;
      }
      else
      {
        v3 = a1 - 10000;
        if (v3 <= 0x1D && ((1 << v3) & 0x200000C1) != 0)
          return result;
      }
    }
    else if ((a1 - 1250) < 9 || a1 == 950)
    {
      return result;
    }
    return 0;
  }
  if (a1 <= 774)
  {
    if (a1 == 2 || a1 == 437 || a1 == 737)
      return result;
    return 0;
  }
  if (((a1 - 850) > 0x13 || ((1 << (a1 - 82)) & 0x9FCA5) == 0) && a1 != 775 && a1 != 932)
    return 0;
  return result;
}

uint64_t OcBinaryReader::parseDateTimeProp(uint64_t a1, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  SsrwOORootStorage *v11;
  uint64_t *v12;
  int v13;

  v13 = 7;
  v12 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  result = SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v13, (void **)&v12);
  if (v12)
    v10 = v13 == 3;
  else
    v10 = 0;
  if (v10)
  {
    ChWindowsTimeFromTime_t(*v12, a4);
    v11 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return SsrwOORootStorage::freeDocumentProperty(v11, (void **)&v12);
  }
  return result;
}

uint64_t ChWindowsTimeFromTime_t(uint64_t result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = 10000 * WORD1(result) + ((10000 * (unsigned __int16)result) >> 16);
  v3 = HIWORD(v2);
  v4 = 1000 * (unsigned __int16)v2 + ((1000 * (unsigned __int16)(10000 * result)) >> 16);
  v5 = (unsigned __int16)(-27008 * result) + 0x8000;
  v6 = HIWORD(v5) + (unsigned __int16)v4 + 54590;
  *a2 = v5 & 0xFF80 | (v6 << 16);
  a2[1] = 1000 * v3 + HIWORD(v4) + HIWORD(v6) + 27111902;
  return result;
}

BOOL OcBinaryReader::parseBoolProp(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  _BOOL8 v8;
  SsrwOORootStorage *v9;
  unsigned __int16 *v11;
  int v12;

  v12 = 7;
  v11 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  SsrwOORootStorage::getDocumentProperty(v6, a2, a3, &v12, (void **)&v11);
  if (v11)
    v7 = v12 == 5;
  else
    v7 = 0;
  if (!v7)
    return 0;
  v8 = *v11 == 1;
  v9 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  SsrwOORootStorage::freeDocumentProperty(v9, (void **)&v11);
  return v8;
}

uint64_t OcBinaryReader::parseBLOBProp(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  int *v10;
  BOOL v11;
  int v12;
  int v13;
  char isSingleByteEncoding;
  int v15;
  SsrwOORootStorage *v16;
  int *v17;
  int v18;

  v18 = 0;
  v17 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  result = SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v18, (void **)&v17);
  v10 = v17;
  if (v17)
    v11 = v18 == 6;
  else
    v11 = 0;
  if (v11)
  {
    *(_DWORD *)(a4 + 8) = 1;
    v12 = *v10;
    if (v12 >= 0)
      v13 = v12;
    else
      v13 = v12 + 1;
    isSingleByteEncoding = OcText::isSingleByteEncoding(1);
    v15 = v13 >> 1;
    OcText::setMinimumCapacity((OcText *)a4, v15 << (isSingleByteEncoding ^ 1));
    CsLeReadChars16((uint64_t)(v17 + 1), v15, *(_WORD **)(a4 + 24));
    *(_DWORD *)(a4 + 16) = v15;
    v16 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return SsrwOORootStorage::freeDocumentProperty(v16, (void **)&v17);
  }
  return result;
}

uint64_t propertySetLoadNameList(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;

  v11 = 0;
  if (*(_DWORD *)(a1 + 2440))
    return 2;
  result = readSInt32(a2, (_DWORD *)&v11 + 1);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v11) >= 0x32)
      v7 = 50;
    else
      v7 = HIDWORD(v11);
    if ((_DWORD)v7)
    {
      v8 = a1 + 1640;
      while (1)
      {
        result = readSInt32(a2, (_DWORD *)&v11 + 1);
        if ((_DWORD)result)
          break;
        v9 = HIDWORD(v11);
        result = readSInt32(a2, (_DWORD *)&v11 + 1);
        if ((_DWORD)result)
          break;
        LODWORD(v11) = HIDWORD(v11);
        if (HIDWORD(v11) >= a3)
          return 14;
        v10 = malloc_type_malloc(HIDWORD(v11) + 1, 0x2545C4F3uLL);
        *(_QWORD *)v8 = v10;
        if (!v10)
          return 5;
        ++*(_DWORD *)(a1 + 2440);
        v10[v11] = 0;
        result = streamRead(a2, *(_QWORD *)v8, (unsigned int *)&v11);
        if (!(_DWORD)result)
        {
          *(_DWORD *)(v8 + 8) = v9;
          v8 += 16;
          if (--v7)
            continue;
        }
        return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *propertyGetInfo(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = 0;
  while (1)
  {
    if (!(v2 * 4)
      || ((v3 = *(uint64_t **)&s_PropertyInfoTable[v2 + 4], v5 = *v3, v4 = v3[1], v5 == *a1)
        ? (v6 = v4 == a1[1])
        : (v6 = 0),
          v6))
    {
      if (s_PropertyInfoTable[v2] == a2)
        break;
    }
    v2 += 8;
    if (v2 == 272)
      return 0;
  }
  return &s_PropertyInfoTable[v2];
}

uint64_t OcBinaryReader::parseHyperlinksProp(OcBinaryReader *this, OcSummary *a2)
{
  SsrwOOPropVariant *v4;
  unsigned __int8 *BlobValueData;
  unsigned int BlobValueSize;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  OcHyperlink *v12;
  OcBinaryReader *v13;
  uint64_t v14;
  OcBinaryReader *v15;
  OcBinaryReader *v16;
  OcBinaryReader *v17;
  OcBinaryReader *v18;
  OcBinaryReader *v19;
  unsigned __int8 *v21;

  v4 = (SsrwOOPropVariant *)operator new(0x10uLL);
  SsrwOOPropVariant::SsrwOOPropVariant(v4);
  OcBinaryReader::getPropertyValue((uint64_t)this, 3, 4097, v4);
  if (SsrwOOPropVariant::getType(v4) == 65)
  {
    BlobValueData = (unsigned __int8 *)SsrwOOPropVariant::getBlobValueData(v4);
    v21 = BlobValueData;
    BlobValueSize = SsrwOOPropVariant::getBlobValueSize(v4);
    if (BlobValueSize >= 4)
    {
      v21 = BlobValueData + 4;
      v7 = CsLeReadSInt32((unsigned int *)BlobValueData) / 6;
    }
    else
    {
      v7 = 0;
    }
    v8 = (_QWORD *)((char *)a2 + 768);
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v8, v7);
    if (v7)
    {
      v9 = 0;
      v10 = (unsigned int *)&BlobValueData[BlobValueSize];
      v11 = 8 * v7;
      do
      {
        v12 = (OcHyperlink *)operator new(0x48uLL);
        v13 = (OcBinaryReader *)OcHyperlink::OcHyperlink(v12);
        *(_QWORD *)(*v8 + v9) = v12;
        if (v21 + 16 <= (unsigned __int8 *)v10)
        {
          v14 = *(_QWORD *)(*v8 + v9);
          v15 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v13, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 8) = (_DWORD)v15;
          v16 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v15, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 12) = (_DWORD)v16;
          v17 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v16, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 16) = (_DWORD)v17;
          v18 = (OcBinaryReader *)OcBinaryReader::parseLongPropInsideHyperlink(v17, (unsigned int **)&v21, v10);
          *(_DWORD *)(v14 + 20) = (_DWORD)v18;
          OcBinaryReader::parseStringPropInsideHyperlink(v18, (unsigned __int16 **)&v21, (unsigned __int8 *)v10, (CsString *)(v14 + 24));
          OcBinaryReader::parseStringPropInsideHyperlink(v19, (unsigned __int16 **)&v21, (unsigned __int8 *)v10, (CsString *)(v14 + 48));
        }
        v9 += 8;
      }
      while (v11 != v9);
    }
  }
  return (*(uint64_t (**)(SsrwOOPropVariant *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A0E7E94(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x22A0E7E7CLL);
  }
  _Unwind_Resume(exception_object);
}

void SsrwOOPropVariant::SsrwOOPropVariant(SsrwOOPropVariant *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24F3A6880;
  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *((_QWORD *)this + 1) = v2;
}

SsrwOOStorage **OcBinaryReader::getPropertyValue(uint64_t a1, int a2, uint64_t a3, SsrwOOPropVariant *a4)
{
  SsrwOOStorage *v8;
  const unsigned __int16 *v9;
  SsrwOOStorage *v10;
  _SsrwOO_GUID *FMTIDForStreamType;
  uint64_t **v12;
  SsrwOOStorage *v14;

  v8 = (SsrwOOStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v14 = 0;
  v9 = (const unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (v9 && SsrwOOStorage::hasChild(v8, v9))
  {
    v10 = (SsrwOOStorage *)SsrwOOStorage::openStorage(v8, v9);
    ChAutoPtr<SsrwOOStorage>::setValue(&v14, v10);
    v8 = v14;
  }
  FMTIDForStreamType = (_SsrwOO_GUID *)SsrwOOPropertyStorage::getFMTIDForStreamType(a2);
  v12 = (uint64_t **)SsrwOOStorage::openPropertyStorage(v8, FMTIDForStreamType);
  SsrwOOPropertyStorage::getPropertyValue(v12, a3, a4);
  SsrwOOPropertyStorage::close((uint64_t)v12);
  if (v14)
    SsrwOOStorage::close(v14, 0);
  if (v12)
    ((void (*)(uint64_t **))(*v12)[1])(v12);
  return ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(&v14);
}

void sub_22A0E8054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ChAutoPtr<SsrwOOStorage>::~ChAutoPtr((SsrwOOStorage **)va);
  _Unwind_Resume(a1);
}

const char *PptBinaryReader::getDualStorageName(PptBinaryReader *this)
{
  return "P";
}

uint64_t SsrwOOPropertyStorage::getFMTIDForStreamType(int a1)
{
  if ((a1 - 1) > 2)
    return 0;
  else
    return (uint64_t)*(&off_24F3A6848 + a1 - 1);
}

_QWORD *SsrwOOStorage::openPropertyStorage(SsrwOOStorage *this, _SsrwOO_GUID *a2)
{
  int v2;
  _QWORD *result;
  uint64_t *v4;
  int v5;
  _DWORD *exception;
  uint64_t *v7;

  v7 = 0;
  v2 = propertyStorageOpen((uint64_t *)this->var0, a2, &v7);
  if (v2)
  {
    v5 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  result = operator new(0x10uLL);
  v4 = v7;
  *result = &off_24F3A6820;
  result[1] = v4;
  return result;
}

BOOL SsrwOOPropertyStorage::getPropertyValue(uint64_t **this, uint64_t a2, SsrwOOPropVariant *a3)
{
  int PropertyValue;
  BOOL v4;
  int v6;
  _DWORD *exception;

  PropertyValue = propertyStorageGetPropertyValue(this[1], a2, *((_QWORD *)a3 + 1));
  if (PropertyValue)
    v4 = PropertyValue == 13;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = PropertyValue;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v6;
  }
  return PropertyValue != 13;
}

uint64_t propertyStorageGetPropertyValue(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1 && a3 && (v3 = *a1) != 0)
    return propertySetGet(v3, a2, a3);
  else
    return 6;
}

uint64_t SsrwOOPropertyStorage::close(uint64_t this)
{
  _QWORD *v1;

  v1 = (_QWORD *)(this + 8);
  if (*(_QWORD *)(this + 8))
  {
    this = propertyStorageClose((void **)(this + 8));
    *v1 = 0;
  }
  return this;
}

uint64_t propertyStorageClose(void **a1)
{
  void *v2;
  uint64_t result;

  if (!a1)
    return 6;
  v2 = *a1;
  if (!v2)
    return 6;
  free(v2);
  result = 0;
  *a1 = 0;
  return result;
}

void SsrwOOPropertyStorage::~SsrwOOPropertyStorage(void **this)
{
  SsrwOOPropertyStorage::~SsrwOOPropertyStorage(this);
  JUMPOUT(0x22E2DD408);
}

{
  _QWORD *v1;

  *this = &off_24F3A6820;
  v1 = this + 1;
  if (this[1])
  {
    propertyStorageClose(this + 1);
    *v1 = 0;
  }
}

SsrwOOStorage **ChAutoPtr<SsrwOOStorage>::~ChAutoPtr(SsrwOOStorage **a1)
{
  SsrwOOStorage *v2;

  v2 = *a1;
  if (v2)
  {
    SsrwOOStorage::~SsrwOOStorage(v2);
    MEMORY[0x22E2DD408]();
  }
  *a1 = 0;
  return a1;
}

uint64_t SsrwOOPropVariant::getType(SsrwOOPropVariant *this)
{
  return **((unsigned __int16 **)this + 1);
}

void SsrwOOPropVariant::~SsrwOOPropVariant(SsrwOOPropVariant *this)
{
  SsrwOOPropVariant::~SsrwOOPropVariant(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A6880;
  propVariantCleanup(*((_QWORD *)this + 1));
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1032C40458B8274);
  *((_QWORD *)this + 1) = 0;
}

unsigned __int8 *OcBinaryReader::parseClipboardProp(uint64_t a1, int a2, uint64_t a3, OcBinaryData *a4)
{
  uint64_t v8;
  unsigned __int8 *result;
  unsigned int v10;
  SsrwOORootStorage *v11;
  unsigned __int8 *v12;
  int v13;

  v13 = 0;
  v12 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  SsrwOORootStorage::getDocumentProperty(v8, a2, a3, &v13, (void **)&v12);
  result = v12;
  if (v12)
  {
    if (v13 == 6)
    {
      v10 = CsLeReadSInt32((unsigned int *)v12) - 4;
      OcBinaryData::setMinimumCapacity(a4, v10);
      OcBinaryData::copyBuffer(a4, v12 + 4, v10);
    }
    v11 = (SsrwOORootStorage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (unsigned __int8 *)SsrwOORootStorage::freeDocumentProperty(v11, (void **)&v12);
  }
  return result;
}

uint64_t CsLeWriteUInt32(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

void OcSummary::~OcSummary(OcSummary *this)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F3A6468;
  v2 = *((_QWORD *)this + 97);
  v3 = (_QWORD *)*((_QWORD *)this + 96);
  if (((v2 - (_QWORD)v3) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      v5 = v3[v4];
      if (v5)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v5 + 8))(v3[v4]);
        v3 = (_QWORD *)*((_QWORD *)this + 96);
      }
      v3[v4++] = 0;
      v3 = (_QWORD *)*((_QWORD *)this + 96);
    }
    while (v4 < ((*((_QWORD *)this + 97) - (_QWORD)v3) >> 3));
  }
  if (v3)
  {
    *((_QWORD *)this + 97) = v3;
    operator delete(v3);
  }
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 712));
  OcText::~OcText((OcText *)((char *)this + 632));
  OcText::~OcText((OcText *)((char *)this + 584));
  OcText::~OcText((OcText *)((char *)this + 536));
  OcText::~OcText((OcText *)((char *)this + 488));
  OcText::~OcText((OcText *)((char *)this + 440));
  OcText::~OcText((OcText *)((char *)this + 392));
  OcText::~OcText((OcText *)((char *)this + 344));
  OcText::~OcText((OcText *)((char *)this + 296));
  OcText::~OcText((OcText *)((char *)this + 248));
  OcText::~OcText((OcText *)((char *)this + 200));
  OcText::~OcText((OcText *)((char *)this + 152));
  OcText::~OcText((OcText *)((char *)this + 104));
  OcText::~OcText((OcText *)((char *)this + 56));
  OcText::~OcText((OcText *)((char *)this + 8));
}

{
  OcSummary::~OcSummary(this);
  JUMPOUT(0x22E2DD408);
}

void OcBinaryData::~OcBinaryData(OcBinaryData *this)
{
  char *var5;

  this->var0 = (void **)&off_24F3A5F50;
  if (this->var6)
  {
    var5 = this->var5;
    if (var5)
      MEMORY[0x22E2DD3F0](var5, 0x1000C8077774924);
  }
  *(_QWORD *)&this->var3 = 0;
  this->var5 = 0;
}

{
  char *var5;

  this->var0 = (void **)&off_24F3A5F50;
  if (this->var6)
  {
    var5 = this->var5;
    if (var5)
      MEMORY[0x22E2DD3F0](var5, 0x1000C8077774924);
  }
  *(_QWORD *)&this->var3 = 0;
  this->var5 = 0;
  JUMPOUT(0x22E2DD408);
}

OcBinaryData *OcBinaryData::removeBuffer(OcBinaryData *this)
{
  OcBinaryData *v1;

  v1 = this;
  if (this->var6)
  {
    this = (OcBinaryData *)this->var5;
    if (this)
      this = (OcBinaryData *)MEMORY[0x22E2DD3F0](this, 0x1000C8077774924);
  }
  *(_QWORD *)&v1->var3 = 0;
  v1->var5 = 0;
  return this;
}

void OcText::~OcText(OcText *this)
{
  char *var6;
  char *var5;

  this->var0 = (void **)&off_24F3A64A0;
  var6 = this->var6;
  if (var6)
    MEMORY[0x22E2DD3F0](var6, 0x1000C8077774924);
  this->var6 = 0;
  if (this->var7)
  {
    var5 = this->var5;
    if (var5)
      MEMORY[0x22E2DD3F0](var5, 0x1000C8077774924);
  }
  *(_QWORD *)&this->var3 = 0;
  this->var5 = 0;
}

{
  OcText::~OcText(this);
  JUMPOUT(0x22E2DD408);
}

OcText *OcText::removeBuffer(OcText *this)
{
  OcText *v1;

  v1 = this;
  if (this->var7)
  {
    this = (OcText *)this->var5;
    if (this)
      this = (OcText *)MEMORY[0x22E2DD3F0](this, 0x1000C8077774924);
  }
  *(_QWORD *)&v1->var3 = 0;
  v1->var5 = 0;
  return this;
}

void sub_22A0E86FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0E87D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A0E8880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E89E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL CsString::operator==(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  unsigned int v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  _BOOL8 result;

  v2 = a2;
  v4 = _ChWcslen(a2);
  if (*(_DWORD *)(a1 + 16) != v4)
    return 0;
  if (!v4)
    return 1;
  v5 = *(unsigned __int16 **)(a1 + 8);
  v6 = v4 - 1;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v2++;
    v9 = v10;
    v12 = v6-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

void sub_22A0E8AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0E8BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A0E8DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A0E8F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0E9108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0E9420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0E953C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E95F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_22A0E98DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0E99A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9B94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9D6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0E9E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EA074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A0EA148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EA4B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_22A0EA5F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EA680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EA810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EA930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EAB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0EB008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A0EB23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A0EB8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A0EBA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A0EBBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshFill::isFillTypeSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x180u);
}

uint64_t EshOpt::isPropertySet(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v3;

  v2 = *(uint64_t **)(a1 + 40);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)v2 + 8);
    if (v3 <= a2)
      break;
LABEL_5:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_5;
  }
  return 1;
}

uint64_t EshContentProperties::getDefaultPositionHorizontal(EshContentProperties *this)
{
  return 0;
}

uint64_t EshFill::isOnSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1BBu);
}

uint64_t EshFill::getOn(EshFill *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x1BBu);
}

uint64_t **EshOpt::getProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int *v4;

  v3 = a2;
  v4 = &v3;
  return std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5;
}

uint64_t EshFill::isColorSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x181u);
}

uint64_t EshFill::getColor(EshFill *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x181u);
}

uint64_t EshOpt::getColorProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int *v5;

  v4 = a2;
  v5 = &v4;
  *(_QWORD *)(a1 + 56) = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v4, (uint64_t)&std::piecewise_construct, &v5)[5];
  return a1 + 56;
}

uint64_t EshFill::isOpacitySet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x182u);
}

uint64_t EshFill::getDefaultOpacity(EshFill *this)
{
  return 0x10000;
}

float EshFixedPointUtil::toFloat(EshFixedPointUtil *this)
{
  return (float)(int)this * 0.000015259;
}

uint64_t EshColor::getSchemeIndex(EshColor *this)
{
  return this->var0.var1.var1;
}

uint64_t EshStroke::isColorSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C0u);
}

uint64_t EshStroke::getColor(EshStroke *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x1C0u);
}

uint64_t EshStroke::isOpacitySet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C1u);
}

uint64_t EshStroke::isOnSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1FCu);
}

uint64_t EshStroke::getOn(EshStroke *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x1FCu);
}

uint64_t EshStroke::isFillTypeSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1C4u);
}

uint64_t EshStroke::isDashStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CFu);
}

uint64_t EshFill::getDefaultBlipName(EshFill *this)
{
  return 0;
}

uint64_t EshStroke::isPredefDashStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CEu);
}

uint64_t EshStroke::isJoinStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D6u);
}

uint64_t EshContentProperties::getDefaultPositionHorizontalRelative(EshContentProperties *this)
{
  return 2;
}

uint64_t EshStroke::isStartArrowSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D0u);
}

uint64_t EshStroke::isStartArrowWidthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D2u);
}

uint64_t EshContentProperties::getDefaultAllowOverlap(EshContentProperties *this)
{
  return 1;
}

uint64_t EshStroke::isStartArrowLengthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D3u);
}

uint64_t EshStroke::isEndArrowSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D1u);
}

uint64_t EshStroke::isEndArrowWidthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D4u);
}

uint64_t EshStroke::isEndArrowLengthSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D5u);
}

uint64_t EshStroke::isWeightSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CBu);
}

uint64_t EshStroke::getDefaultWeight(EshStroke *this)
{
  return 9525;
}

uint64_t EshStroke::isCapStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1D7u);
}

uint64_t EshStroke::isLineStyleSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CDu);
}

uint64_t EshShadow::isOnSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x23Eu);
}

void sub_22A0EC9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isInsetLeftSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x81u);
}

uint64_t EshTextBox::getDefaultInsetLeft(EshTextBox *this)
{
  return 91440;
}

uint64_t EshTextBox::isInsetRightSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x83u);
}

uint64_t EshTextBox::isInsetTopSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x82u);
}

uint64_t EshTextBox::getDefaultInsetTop(EshTextBox *this)
{
  return 45720;
}

uint64_t EshTextBox::isInsetBottomSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x84u);
}

uint64_t EshTextBox::isColumnCountSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x8Cu);
}

uint64_t EshTextBox::isColumnMarginSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x8Du);
}

uint64_t EshTextBox::isRotateSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x89u);
}

void sub_22A0ECAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isFlowSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x88u);
}

void sub_22A0ECB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isDirectionSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x8Bu);
}

void sub_22A0ECBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isFitShapeToTextSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0xBEu);
}

void sub_22A0ECC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isWrapStyleSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x85u);
}

uint64_t EshTextBox::isAnchorSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x87u);
}

void sub_22A0ECCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0ECD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0ECD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0ED0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

PptParaProperty *PptParaProperty::operator=(PptParaProperty *this, PptParaProperty *a2)
{
  __int16 v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t **v16;
  uint64_t **v17;

  if (a2 != this)
  {
    PptParaProperty::reset((uint64_t)this);
    v4 = *(_WORD *)a2;
    *((_BYTE *)this + 2) = *((_BYTE *)a2 + 2);
    *(_WORD *)this = v4;
    v5 = *(_WORD *)((_BYTE *)this + 3) & 0xFFFE | *(_WORD *)((_BYTE *)a2 + 3) & 1;
    *(_WORD *)((char *)this + 3) = *(_WORD *)((_BYTE *)this + 3) & 0xFFFE | *(_WORD *)((_BYTE *)a2 + 3) & 1;
    v6 = v5 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 1) & 1));
    *(_WORD *)((char *)this + 3) = v6;
    v7 = v6 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 2) & 1));
    *(_WORD *)((char *)this + 3) = v7;
    v8 = v7 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 3) & 1));
    *(_WORD *)((char *)this + 3) = v8;
    v9 = v8 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 4) & 1));
    *(_WORD *)((char *)this + 3) = v9;
    v10 = v9 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)((char *)a2 + 3) >> 5) & 1));
    *(_WORD *)((char *)this + 3) = v10;
    v11 = v10 & 0xFFFFFFBF | (((*(unsigned __int16 *)((char *)a2 + 3) >> 6) & 1) << 6);
    *(_WORD *)((char *)this + 3) = v11;
    v12 = v11 & 0xFFFFFF7F | (((*(unsigned __int16 *)((char *)a2 + 3) >> 7) & 1) << 7);
    *(_WORD *)((char *)this + 3) = v12;
    v13 = v12 & 0xFFFFF0FF | ((HIBYTE(*(unsigned __int16 *)((char *)a2 + 3)) & 0xF) << 8);
    *(_WORD *)((char *)this + 3) = v13;
    *(_WORD *)((char *)this + 3) = v13 & 0xCFFF | *(_WORD *)((_BYTE *)a2 + 3) & 0x3000;
    *(_QWORD *)((char *)this + 6) = *(_QWORD *)((char *)a2 + 6);
    *(_DWORD *)((char *)this + 14) = *(_DWORD *)((char *)a2 + 14);
    *((_WORD *)this + 9) = *((_WORD *)a2 + 9);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    if (*((_QWORD *)a2 + 5))
    {
      v14 = *((_QWORD *)this + 5);
      if (v14)
      {
        v15 = *(void **)v14;
        if (*(_QWORD *)v14)
        {
          *(_QWORD *)(v14 + 8) = v15;
          operator delete(v15);
        }
        MEMORY[0x22E2DD408](v14, 0x20C40960023A9);
      }
      *((_QWORD *)this + 5) = 0;
      v16 = (uint64_t **)operator new(0x18uLL);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      *((_QWORD *)this + 5) = v16;
      v17 = (uint64_t **)*((_QWORD *)a2 + 5);
      if (v16 != v17)
        std::vector<PptTab,ChAllocator<PptTab>>::__assign_with_size[abi:ne180100]<PptTab*,PptTab*>((uint64_t)v16, *v17, v17[1], v17[1] - *v17);
    }
    else
    {
      *((_QWORD *)this + 5) = 0;
    }
  }
  return this;
}

uint64_t PptParaProperty::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 40);
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    this = MEMORY[0x22E2DD408](v2, 0x20C40960023A9);
  }
  *(_QWORD *)(v1 + 40) = 0;
  return this;
}

void PptParaProperty::~PptParaProperty(PptParaProperty *this)
{
  PptParaProperty::reset((uint64_t)this);
}

void sub_22A0ED424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0ED4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0ED5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0ED840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0ED934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0ED990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t PptTextHeaderAtom::getBaseType(int a1)
{
  _DWORD *exception;

  if ((a1 - 5) >= 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return *((unsigned int *)&xmmword_22A4BF720 + a1 - 5);
}

void sub_22A0EDB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0EDF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0EEA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0EEDF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EEE68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EEF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A0EF0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0EF238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0EF2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0EF3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CsColour *PptColorSchemeAtom::getSchemeColor(PptColorSchemeAtom *this, int a2)
{
  CsColour *result;

  switch(a2)
  {
    case 0:
      result = &this->var7;
      break;
    case 1:
      result = &this->var8;
      break;
    case 2:
      result = &this->var9;
      break;
    case 3:
      result = &this->var10;
      break;
    case 4:
      result = &this->var11;
      break;
    case 5:
      result = &this->var12;
      break;
    case 6:
      result = &this->var13;
      break;
    case 7:
      result = &this->var14;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_22A0EF538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sfaxmlParseFile(uint64_t a1)
{
  return sfaxmlSAXParseFile(0, a1, 0, 1);
}

uint64_t sfaxmlSAXParseFile(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v8;
  _QWORD v10[7];
  int v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (sfaxmlSAXParseFile::once != -1)
    dispatch_once(&sfaxmlSAXParseFile::once, &__block_literal_global_6_3);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __sfaxmlSAXParseFile_block_invoke_2;
  v10[3] = &unk_24F39CEE8;
  v12 = a4;
  v10[4] = &v13;
  v10[5] = a1;
  v10[6] = a2;
  v11 = a3;
  dispatch_sync((dispatch_queue_t)sfaxmlSAXParseFile::parsingQueue, v10);
  v8 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v8;
}

uint64_t sfagzfileMatch_libxml(const char *a1)
{
  return 1;
}

gzFile sfagzfileOpen_libxml(const char *a1)
{
  if (a1 && xmlCheckFilename(a1))
    return gzopen(a1, "rb");
  else
    return 0;
}

uint64_t sfagzfileClose_libxml(gzFile_s *a1)
{
  if (gzclose(a1))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

_xmlNode *pCXFindChild(_xmlNode *a1, CXNamespace *a2, xmlChar *str1)
{
  _xmlNode *i;

  if (!a1)
    return 0;
  for (i = a1->children; i; i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE
      && xmlStrEqual(str1, i->name)
      && -[CXNamespace containsNode:](a2, "containsNode:", i))
    {
      break;
    }
  }
  return i;
}

void sub_22A0EFA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_xmlNode *CXFirstChild(_xmlNode *a1)
{
  _xmlNode *result;
  uint64_t v2;

  if (a1)
  {
    for (result = a1->children; result; result = result->next)
    {
      if (result->type == XML_ELEMENT_NODE)
        break;
    }
  }
  else
  {
    v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "xmlNodePtr CXFirstChild(xmlNodePtr)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCXmlUtilities.mm"), 120, 0, "Bad node.");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return 0;
  }
  return result;
}

void sub_22A0EFDBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0EFE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0EFECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F00A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F013C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredStringAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlAttr *result;

  result = CXFindAttribute(a1, a2, a3);
  if (result)
    return (_xmlAttr *)(id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithValueOfXmlAttribute:", result);
  return result;
}

_xmlAttr *CXFindAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *str2)
{
  _xmlAttr *i;
  const xmlChar *name;

  if (!a1)
    return 0;
  for (i = a1->properties; i; i = i->next)
  {
    name = i->name;
    if (name && xmlStrEqual(name, str2) && -[CXNamespace containsAttribute:](a2, "containsAttribute:", i))
      break;
  }
  return i;
}

void sub_22A0F0410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlNode *CXNextSibling(_xmlNode *a1)
{
  _xmlNode *v1;
  uint64_t v2;

  v1 = a1;
  if (!a1)
  {
    v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "xmlNodePtr CXNextSibling(xmlNodePtr)");
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Common/Utilities/TCXmlUtilities.mm"), 133, 0, "Bad node.");
    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  do
    v1 = v1->next;
  while (v1 && v1->type != XML_ELEMENT_NODE);
  return v1;
}

void sub_22A0F06A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_22A0F0770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F08D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F09DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F0AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F0B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F0C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_xmlAttr *CXRequiredLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3)
{
  _xmlAttr *result;

  result = CXFindAttribute(a1, a2, a3);
  if (result)
    return (_xmlAttr *)CXLongValue((uint64_t)result, 0);
  return result;
}

char *sfaxmlXmlCharToLong(char *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  char *result;
  char *__endptr;

  __endptr = 0;
  v4 = strtol(a1, &__endptr, 10);
  if (*__endptr || !*a1)
  {
    if (strchr(a1, 37))
    {
      v4 *= 1000;
    }
    else
    {
      v5 = strchr(a1, 112);
      if (v5 && v5[1] == 116)
      {
        v4 *= 20;
      }
      else
      {
        result = strchr(a1, 46);
        if (!result)
          return result;
      }
    }
  }
  *a2 = v4;
  return (char *)1;
}

void sub_22A0F0E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_xmlNode *CXFindNextChild(_xmlNode *a1, CXNamespace *a2, xmlChar *str1)
{
  _xmlNode *i;

  for (i = a1->next; i; i = i->next)
  {
    if (i->type == XML_ELEMENT_NODE
      && xmlStrEqual(str1, i->name)
      && -[CXNamespace containsNode:](a2, "containsNode:", i))
    {
      break;
    }
  }
  return i;
}

uint64_t CXBoolValue(_xmlAttr *a1)
{
  _xmlNode *children;
  xmlChar *String;
  char v3;
  unsigned __int8 v5;

  v5 = 0;
  children = a1->children;
  if (!children || children->next || children->type - 3 > 1)
  {
    String = xmlNodeListGetString(a1->doc, children, 1);
    v3 = 0;
    if (!String)
      goto LABEL_8;
    goto LABEL_7;
  }
  String = children->content;
  v3 = 1;
  if (String)
LABEL_7:
    sfaxmlXmlCharToBool(String, &v5);
LABEL_8:
  if ((v3 & 1) == 0)
    ((void (*)(xmlChar *))*MEMORY[0x24BEDE758])(String);
  return v5;
}

uint64_t sfaxmlXmlCharToBool(const xmlChar *a1, _BYTE *a2)
{
  int v4;
  uint64_t result;

  if (!xmlStrcasecmp(a1, (const xmlChar *)"TRUE"))
    goto LABEL_4;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"FALSE"))
    goto LABEL_6;
  if (xmlStrEqual(a1, (const xmlChar *)"1"))
  {
LABEL_4:
    LOBYTE(v4) = 1;
LABEL_7:
    *a2 = v4;
    return 1;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"0"))
    goto LABEL_6;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"y"))
    goto LABEL_4;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"n"))
    goto LABEL_6;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"t"))
    goto LABEL_4;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"f"))
    goto LABEL_6;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"yes"))
    goto LABEL_4;
  if (!xmlStrcasecmp(a1, (const xmlChar *)"no"))
  {
LABEL_6:
    LOBYTE(v4) = 0;
    goto LABEL_7;
  }
  if (!xmlStrcasecmp(a1, (const xmlChar *)"on"))
    goto LABEL_4;
  v4 = xmlStrcasecmp(a1, (const xmlChar *)"off");
  result = 0;
  if (!v4)
    goto LABEL_7;
  return result;
}

NSString *CXDefaultStringAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, NSString *a4)
{
  _xmlAttr *v5;

  v5 = CXFindAttribute(a1, a2, a3);
  if (v5)
    return (NSString *)(id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "tc_initWithValueOfXmlAttribute:", v5);
  else
    return a4;
}

BOOL CXOptionalLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t *a4)
{
  _xmlAttr *v5;
  _xmlAttr *v6;

  v5 = CXFindAttribute(a1, a2, a3);
  v6 = v5;
  if (v5)
    *a4 = CXLongValue((uint64_t)v5, 0);
  return v6 != 0;
}

void sub_22A0F1564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A0F1770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A0F19EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A0F1C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F1D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F1E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A0F1F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CXDefaultLongAttribute(_xmlNode *a1, CXNamespace *a2, xmlChar *a3, uint64_t a4)
{
  _xmlAttr *v5;

  v5 = CXFindAttribute(a1, a2, a3);
  if (v5)
    return CXLongValue((uint64_t)v5, 0);
  else
    return a4;
}

void sub_22A0F2370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A0F2520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A0F262C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0F2790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0F2864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t EshShape::getContentProperties(EshShape *this)
{
  return (uint64_t)this + 424;
}

uint64_t EshShapeImageData::isBlipSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x104u);
}

uint64_t EshShapeImageData::isBlipNameSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x105u);
}

uint64_t EshShapeProperties::getShapeType(EshShapeProperties *this)
{
  return EshRecord::getInstance((EshRecord *)((char *)this->var2 + 192));
}

uint64_t EshShape::isConnector(EshShape *this)
{
  return *((unsigned __int8 *)this + 248);
}

void sub_22A0F297C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F2A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F2A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::isMasterIdSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x301u);
}

__n128 EshContentProperties::getBounds(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int isPropertySet;
  double v8;
  uint64_t **Property;
  float v10;
  __n128 result;

  v4 = *(__n128 **)(a1 + 16);
  v5 = v4[14].n128_u8[6];
  v6 = v4[14].n128_u8[7];
  isPropertySet = EshOpt::isPropertySet((uint64_t)v4, 4u);
  v8 = 0.0;
  if (isPropertySet)
  {
    Property = EshOpt::getProperty(*(_QWORD *)(a1 + 16), 4u);
    v10 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)*(unsigned int *)Property);
    v8 = v10;
    if (fabs(v10) > 365.0)
    {
      if (v10 >= 0.0)
        v8 = v8 + -365.0;
      else
        v8 = v8 + 365.0;
    }
  }
  result = v4[15];
  *a2 = result;
  a2[1].n128_f64[0] = v8;
  a2[1].n128_u8[8] = v5;
  a2[1].n128_u8[9] = v6;
  return result;
}

uint64_t EshContentLocks::isAspectRatioSet(EshContentLocks *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x78u);
}

uint64_t EshContentProperties::isWrdInlineSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x53Fu);
}

uint64_t EshContentProperties::getShapeID(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 55);
}

void sub_22A0F2CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0F2D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshTextPath::isOnSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xF1u);
}

BOOL EshShapeLib::isWordArt(EshShapeLib *this)
{
  return ((unsigned __int16)this & 0xFFF8) == 0x18 || ((_DWORD)this - 136) < 0x28;
}

void sub_22A0F3278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EshPath::isParamsSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x145u);
}

uint64_t EshPath::isCommandsSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x146u);
}

uint64_t EshPath::isPathTypeSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x144u);
}

uint64_t EshPath::isFormulasSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x156u);
}

uint64_t EshPath::isTextBoxRectsSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x157u);
}

uint64_t EshPath::isLimoXSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x153u);
}

uint64_t EshPath::isLimoYSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x154u);
}

uint64_t EshShapeProperties::isCoordLeftSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x140u);
}

uint64_t EshShapeProperties::isCoordTopSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x141u);
}

uint64_t EshShapeProperties::isCoordRightSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x142u);
}

uint64_t EshShapeProperties::isCoordBottomSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x143u);
}

void sub_22A0F33B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F3460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::isAdjSet(EshShapeProperties *this, int a2)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, a2 + 327);
}

uint64_t EshContentProperties::isBehindTextSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x3BAu);
}

void sub_22A0F36D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A0F386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A0F38F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F3960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F3D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F3E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0F40B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0F41B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0F4498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0F48C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A0F4AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0F4B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F4C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F5064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A0F51E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0F5744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, id a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_22A0F5900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F598C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F5A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F5DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A0F5EA4()
{
  JUMPOUT(0x22A0F5E80);
}

void sub_22A0F5EAC()
{
  JUMPOUT(0x22A0F5E84);
}

void sub_22A0F60B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v14;

  _Unwind_Resume(a1);
}

void sub_22A0F610C()
{
  JUMPOUT(0x22A0F60F0);
}

void sub_22A0F6114()
{
  JUMPOUT(0x22A0F60F4);
}

void sub_22A0F611C()
{
  JUMPOUT(0x22A0F60F8);
}

void sub_22A0F6780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::getAnchor(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x87u);
}

uint64_t EshShapeProperties::isHiddenSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x3BEu);
}

void sub_22A0F6ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F6B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0F6BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F6C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F6D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0F6E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PptHeadersFootersAtom::PptHeadersFootersAtom(PptHeadersFootersAtom *this)
{
  uint64_t v1;

  EshAtom::EshAtom((EshAtom *)this, 0xFDAu, 0);
  *(_DWORD *)(v1 + 40) = -1;
  *(_BYTE *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_24F3B95E0;
  *(_QWORD *)(v1 + 32) = &unk_24F3B9688;
  *(_BYTE *)(v1 + 52) = 1;
  *(_DWORD *)(v1 + 53) = 0;
  *(_BYTE *)(v1 + 57) = 1;
}

BOOL PptHeadersFootersAtom::isRendered(unsigned __int8 *a1, int a2)
{
  int v2;
  _BOOL8 result;

  switch(a2)
  {
    case 7:
      v2 = a1[52];
      goto LABEL_7;
    case 8:
      v2 = a1[55];
      goto LABEL_7;
    case 9:
      v2 = a1[57];
      goto LABEL_7;
    case 10:
      v2 = a1[56];
LABEL_7:
      result = v2 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_22A0F70F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A0F71F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F729C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F7348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F73EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0F7460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0F7538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0F7668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F7EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0F82B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F85E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0F914C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FA1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A0FA3C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA42C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA5F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FA654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FA8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FAF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FB398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FB7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FB99C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FBA80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FBC5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FBD00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FBDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FC21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22A0FC448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FC590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FC730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0FC858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FC8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t pdSlideLayoutTypeForPptSlideHolder(ESDContainer *a1)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v10;
  int32x4_t v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  int32x4_t v26;
  int32x4_t v27;

  v1 = ESDAtomAccess<PptSlideAtom>::first(a1, 1);
  v3 = v1[13];
  v2 = v1[14];
  v4 = v1[15];
  v5 = *((_QWORD *)v1 + 8);
  switch(v1[12])
  {
    case 0:
      if ((v3 & 0xFFFFFFFD) != 0xD || v2 != 16 || v4 != 0)
        goto LABEL_117;
      return 1;
    case 1:
      if (v3 != 13 || v4 != 0)
        goto LABEL_117;
      v10 = v2 - 14;
      if (v10 >= 0xA)
        goto LABEL_117;
      return dword_22A4D3AE8[v10];
    case 7:
      if (v3 != 13 || v2 != 0)
        goto LABEL_117;
      return 6;
    case 8:
      if (v3 != 13 || (_DWORD)v5 != 0)
        goto LABEL_117;
      if (v2 == 14 && v4 == 14)
        return 32;
      if (v2 == 19 && v4 == 19)
        return 4;
      if (v2 == 14 && v4 == 19)
        return 24;
      if (v2 == 19 && v4 == 14)
        return 22;
      if (v2 == 22 && v4 == 18)
        return 14;
      if (v2 == 14 && v4 == 22)
        return 15;
      if (v2 == 22 && v4 == 14)
        return 13;
      if (v2 == 14 && v4 == 20)
        return 19;
      if (v2 == 20 && v4 == 14)
        return 20;
      if (v2 == 14 && v4 == 24)
        return 33;
      if (v2 != 24 || v4 != 14)
        goto LABEL_117;
      return 30;
    case 9:
      if (v3 != 13 || (_DWORD)v5 != 0)
        goto LABEL_117;
      if (v2 == 14 && v4 == 19)
        return 28;
      if (v2 != 19 || v4 != 14)
        goto LABEL_117;
      return 26;
    case 0xA:
      v19.i32[0] = v1[15];
      v19.i32[1] = v1[13];
      v19.i64[1] = *((_QWORD *)v1 + 8);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v19, (int32x4_t)xmmword_22A4D38A0)))) & 1) != 0)
        goto LABEL_117;
      if (v2 == 19)
        v20 = 29;
      else
        v20 = 7;
      v21 = v2 == 14;
      v22 = 25;
      goto LABEL_79;
    case 0xB:
      if (v3 != 13 || v2 != 19 || v4 != 19 || HIDWORD(v5) != 0)
        goto LABEL_117;
      if ((_DWORD)v5 == 19)
        v20 = 34;
      else
        v20 = 7;
      v21 = (_DWORD)v5 == 14;
      v22 = 23;
LABEL_79:
      if (v21)
        result = v22;
      else
        result = v20;
      break;
    case 0xD:
      v26.i64[1] = *((_QWORD *)v1 + 8);
      v26.i32[0] = v1[13];
      v26.i32[1] = v1[15];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v26, (int32x4_t)xmmword_22A4D3880)))) & 1) != 0
        || v2 != 19)
      {
        goto LABEL_117;
      }
      result = 21;
      break;
    case 0xE:
      v27.i64[1] = *((_QWORD *)v1 + 8);
      v27.i32[0] = v1[13];
      v27.i32[1] = v1[15];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v27, (int32x4_t)xmmword_22A4D3890)))) & 1) != 0)
        goto LABEL_117;
      if (v2 != 19 || v1[18] != 0)
        goto LABEL_117;
      result = 17;
      break;
    case 0xF:
      if (v3 != 19 || v2 != 0)
        goto LABEL_117;
      result = 27;
      break;
    case 0x11:
      if (v3 != 17 || v2 != 18 || v4 != 0)
        goto LABEL_117;
      result = 11;
      break;
    case 0x12:
      if (v3 != 17 || v2 != 18 || v4 != 20 || (_DWORD)v5 != 0)
        goto LABEL_117;
      result = 35;
      break;
    default:
LABEL_117:
      result = 7;
      break;
  }
  return result;
}

void sub_22A0FCC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0FDC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

void sub_22A0FE100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A0FE1E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FE23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FE2A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FE344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FE3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0FE488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0FE6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22A0FE814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FE93C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A0FEA40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FEB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A0FEBB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FEC44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FECB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A0FEE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A0FEF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A0FF060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FF0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A0FF1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id layoutMapForSlideMaster(PDSlideMaster *a1)
{
  PDSlideMaster *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[PDSlideMaster slideLayoutCount](v1, "slideLayoutCount");
  if (v3)
  {
    v4 = 0;
    do
    {
      -[PDSlideMaster slideLayoutAtIndex:](v1, "slideLayoutAtIndex:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "slideLayoutType");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setObject:forKey:", v5, v7);

      ++v4;
    }
    while (v3 != v4);
  }

  return v2;
}

void sub_22A0FF310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FF60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A0FF72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FF7B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FF8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FF970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A0FFB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  _Unwind_Resume(a1);
}

void sub_22A0FFC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A0FFFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A100114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1002C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A1003E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A1004C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A100734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1007D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1008A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A100984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A100B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A100C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A100CE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A100E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1017BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A101834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A101944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A101B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::getMasterId(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x301u);
}

void sub_22A101C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShapeLib::isFillOn(EshShapeLib *this, uint64_t a2)
{
  unsigned __int16 *ShapeType;

  ShapeType = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType)
    return (*ShapeType >> 2) & 1;
  return a2;
}

#error "22A101C5C: too big function (funcsize=0)"

uint64_t EshShapeLib::isStrokeOn(EshShapeLib *this, uint64_t a2)
{
  unsigned __int16 *ShapeType;

  ShapeType = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType)
    return (*ShapeType >> 3) & 1;
  return a2;
}

void sub_22A14E6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void EshContainer::addChild(EshContainer *this, EshObject *a2)
{
  void *v4;
  EshHeader *v5;
  unsigned __int16 v6;
  unint64_t v7;
  EshHeader **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  EshHeader **v18;
  char *v19;
  char *v20;
  char *v21;
  EshHeader *v22;

  if (EshObject::isEscher(a2))
  {
    v5 = (EshHeader *)operator new(0x10uLL);
    EshHeader::operator=((uint64_t)v5, (uint64_t)v4 + 12);
  }
  else
  {
    v5 = (EshHeader *)operator new(0x10uLL);
    v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
    EshHeader::EshHeader(v5, 0, 0, v6, 0, 0);
  }
  v7 = *((_QWORD *)this + 6);
  v8 = (EshHeader **)*((_QWORD *)this + 5);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *((_QWORD *)this + 4);
    v11 = (unint64_t)v8 - v10;
    v12 = (v7 - v10) >> 3;
    v13 = 2 * v12;
    if (2 * (int)v12 <= (v11 >> 3) + 1)
      v13 = (v11 >> 3) + 1;
    if (v12 >= 0x7FFFFFFF)
      v14 = 0xFFFFFFFFLL;
    else
      v14 = v13;
    if ((_DWORD)v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 48, v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = (EshHeader **)&v15[v11 & 0x7FFFFFFF8];
    v19 = &v15[8 * v17];
    *v18 = v5;
    v9 = v18 + 1;
    v21 = (char *)*((_QWORD *)this + 4);
    v20 = (char *)*((_QWORD *)this + 5);
    if (v20 != v21)
    {
      do
      {
        v22 = (EshHeader *)*((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v18;
    *((_QWORD *)this + 5) = v9;
    *((_QWORD *)this + 6) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 5) = v9;
}

void sub_22A14E858(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

void sub_22A14E91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A14E998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PptEshClientTextBox::~PptEshClientTextBox(PptEshClientTextBox *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A14EB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A14EC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A14EE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A14EF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A14F0FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A14F258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A14F338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A14F390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A14F3E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A14F4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A14F51C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A14F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A14F820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A14F9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v11;

  _Unwind_Resume(a1);
}

void sub_22A14FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A14FCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A14FE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A14FF3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A14FFD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1501F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1502D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A150468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A15069C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A150828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_22A150970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A150A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A150C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A150D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1510C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A151180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A151230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1512E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A151418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1514A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A151534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1515D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1516B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1517BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A151C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A151D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A151EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A152218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_22A152304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A152648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1526F4()
{
  void *v0;

  JUMPOUT(0x22A1526D0);
}

void sub_22A15284C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A152A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A152EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A15301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A15318C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A153218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A15327C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A153398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1535E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A1538B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1539E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A153AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A153C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A153D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A153DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A153E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A153ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A153FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A154150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1541E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1542B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A15439C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1546A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A15479C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A154B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A155104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A1552DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A155734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_22A155948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CMDrawingContext;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A155A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A155C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A155CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A155D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A155EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A156048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A156100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1561B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

EshColor *EshColor::black(EshColor *this, EshColor *a2)
{
  *(int *)((char *)&this->var0.var0 + 3) = 0;
  this->var0.var0 = 0;
  return this;
}

uint64_t EshColor::getRed(EshColor *this)
{
  return this->var0.var1.var0.var0;
}

uint64_t EshColor::getGreen(EshColor *this)
{
  return this->var0.var1.var0.var1;
}

uint64_t EshColor::getBlue(EshColor *this)
{
  return this->var0.var1.var0.var2;
}

void sub_22A156728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A156988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A156AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A156C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A156DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A156ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A156FAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getBlipId(EshShapeImageData *this)
{
  return *((unsigned __int16 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x104u) + 4);
}

uint64_t *EshShapeImageData::getBlipName(EshShapeImageData *this)
{
  return *EshOpt::getProperty(*((_QWORD *)this + 2), 0x105u);
}

void sub_22A157118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1571F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::isCropTopSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x100u);
}

uint64_t EshShapeImageData::isCropBottomSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x101u);
}

uint64_t EshShapeImageData::isCropLeftSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x102u);
}

uint64_t EshShapeImageData::isCropRightSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x103u);
}

uint64_t EshShapeImageData::isGainSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x108u);
}

uint64_t EshShapeImageData::isBlackLevelSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x109u);
}

uint64_t EshShapeImageData::isGrayScaleSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x13Du);
}

uint64_t EshShapeImageData::isBilevelSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x13Eu);
}

uint64_t EshShapeImageData::isChromakeySet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x107u);
}

uint64_t EshShapeImageData::isQuicktimeDataSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2) + 64, 0x112u);
}

void sub_22A1573A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1576B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A15785C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A157998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A157CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A157DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A157EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1580D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A158164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A158224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A158340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1583B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SsrwOOStgStream::seek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, a4);
}

void sub_22A158738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A158860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1588FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1589A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A158A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A158AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A158C90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  unsigned int *v14;
  void *v15;

  v11 = v10;

  if (a2 == 3)
  {
    v14 = (unsigned int *)__cxa_begin_catch(a1);
    OCConvertCsException(v14);
    __cxa_end_catch();
  }
  else
  {
    v15 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v15, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A158C54);
}

void sub_22A158D4C(void *exc_buf)
{
  uint64_t v1;

  objc_begin_catch(exc_buf);
  if (!v1)
    JUMPOUT(0x22A158C6CLL);
  JUMPOUT(0x22A158C5CLL);
}

unsigned __int8 *`non-virtual thunk to'PptBinaryReader::read(OcBinaryReader *this, OcSummary *a2)
{
  return OcBinaryReader::readSummary(this - 1, a2);
}

void sub_22A158F20(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2DD408](v2, 0x1091C4095979E0DLL);

  _Unwind_Resume(a1);
}

unint64_t OCNsEncodingForOcEncoding(UInt32 a1)
{
  CFStringEncoding v1;

  switch(a1)
  {
    case 0u:
      return 0;
    case 0xFDE9u:
      return 4;
    case 1u:
      return 10;
  }
  v1 = CFStringConvertWindowsCodepageToEncoding(a1);
  if (v1 == -1)
    return 10;
  return CFStringConvertEncodingToNSStringEncoding(v1);
}

void sub_22A15914C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A15928C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PBPresentationReaderState;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void PptContainer::~PptContainer(PptContainer *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x22E2DD408);
}

void PptSlideAtom::~PptSlideAtom(PptSlideAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshDg::~EshDg(EshDg *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshPatriarch::~EshPatriarch(EshPatriarch *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptEshClientAnchor::~PptEshClientAnchor(PptEshClientAnchor *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptOEPlaceholderAtom::~PptOEPlaceholderAtom(PptOEPlaceholderAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptEshClientData::~PptEshClientData(PptEshClientData *this)
{
  EshContainer::~EshContainer(this);
  JUMPOUT(0x22E2DD408);
}

void PptOutlineTextRefAtom::~PptOutlineTextRefAtom(PptOutlineTextRefAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptEshShape::~PptEshShape(PptEshShape *this)
{
  PptEshClientContainer::~PptEshClientContainer((PptEshShape *)((char *)this + 576));
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

{
  PptEshClientContainer::~PptEshClientContainer((PptEshShape *)((char *)this + 576));
  EshContentBase::~EshContentBase(this);
}

void PptEshClientContainer::~PptEshClientContainer(PptEshClientContainer *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3B7590;
  PptEshClientContainer::removeChildren((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  PptEshClientContainer::~PptEshClientContainer(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t PptEshClientContainer::removeChildren(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  v3 = *(_QWORD *)(this + 16);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C408B6DE1C6);
        v2 = *(_QWORD *)(v1 + 8);
        v3 = *(_QWORD *)(v1 + 16);
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3))
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v2 + 8 * v4++) = 0;
      v2 = *(_QWORD *)(v1 + 8);
      v3 = *(_QWORD *)(v1 + 16);
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 16) = v2;
  return this;
}

void EshContentBase::~EshContentBase(EshContentBase *this)
{
  *(_QWORD *)this = &off_24F3A42D8;
  EshContentData::~EshContentData((EshContentData *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_24F3A42D8;
  EshContentData::~EshContentData((EshContentData *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_24F3A42D8;
  EshContentData::~EshContentData((EshContentData *)((char *)this + 16));
  JUMPOUT(0x22E2DD408);
}

void EshContentData::~EshContentData(EshContentData *this)
{
  EshOpt::~EshOpt((EshOpt *)((char *)this + 128));
  EshOpt::~EshOpt((EshOpt *)((char *)this + 64));
  EshOpt::~EshOpt((EshOpt *)this);
}

void EshOpt::~EshOpt(EshOpt *this)
{
  *(_QWORD *)this = &off_24F39EF88;
  EshOpt::destroy(this);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  EshOpt::~EshOpt(this);
  JUMPOUT(0x22E2DD408);
}

void EshOpt::destroy(EshOpt *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;

  v3 = (char *)this + 32;
  v2 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  if (v2 != (char *)this + 40)
  {
    do
    {
      v5 = (char *)*((_QWORD *)v2 + 1);
      v6 = v2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v6 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      EshOpt::deleteComplexPropertyValue((uint64_t)this, *((_DWORD *)v2 + 8));
      v2 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v3, *((_QWORD **)this + 5));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v4;
}

uint64_t EshOpt::deleteComplexPropertyValue(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  CsData *v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int *v15;

  result = EshOpt::getPropertyType(a2);
  switch((int)result)
  {
    case 0:
      v5 = (uint64_t **)(a1 + 32);
      v14 = a2;
      v15 = &v14;
      v7 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v7)
      {
        v7[1] = (uint64_t)off_24F39F1D0;
        v8 = v7[2];
        if (v8)
          MEMORY[0x22E2DD3F0](v8, 0x1000C8077774924);
        v7[2] = 0;
        *((_DWORD *)v7 + 6) = 0;
        MEMORY[0x22E2DD408](v7, 0x1090C40DF1FC404);
      }
      v14 = a2;
      v15 = &v14;
      goto LABEL_18;
    case 8:
      v9 = *(uint64_t **)(a1 + 40);
      if (!v9)
        return result;
      break;
    case 9:
    case 10:
      v5 = (uint64_t **)(a1 + 32);
      v14 = a2;
      v15 = &v14;
      v6 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v6)
        (*(void (**)(uint64_t *))(*v6 + 8))(v6);
      goto LABEL_17;
    case 11:
      v5 = (uint64_t **)(a1 + 32);
      v14 = a2;
      v15 = &v14;
      v11 = (CsData *)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15)[5];
      if (v11)
      {
        CsData::~CsData(v11);
        MEMORY[0x22E2DD408]();
      }
LABEL_17:
      v14 = a2;
      v15 = &v14;
LABEL_18:
      result = (uint64_t)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v14, (uint64_t)&std::piecewise_construct, &v15);
      *(_QWORD *)(result + 40) = 0;
      return result;
    default:
      return result;
  }
  while (1)
  {
    v10 = *((_DWORD *)v9 + 8);
    if (v10 <= a2)
      break;
LABEL_13:
    v9 = (uint64_t *)*v9;
    if (!v9)
      return result;
  }
  if (v10 < a2)
  {
    ++v9;
    goto LABEL_13;
  }
  v12 = (uint64_t **)(a1 + 32);
  v14 = a2;
  v15 = &v14;
  result = (uint64_t)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v14, (uint64_t)&std::piecewise_construct, &v15);
  if (!*(_BYTE *)(result + 40))
  {
    v14 = a2;
    v15 = &v14;
    v13 = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v14, (uint64_t)&std::piecewise_construct, &v15)[6];
    if (v13)
      (*(void (**)(uint64_t *))(*v13 + 8))(v13);
    v14 = a2;
    v15 = &v14;
    result = (uint64_t)std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v12, &v14, (uint64_t)&std::piecewise_construct, &v15);
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
  }
  return result;
}

void PptEshBackground::~PptEshBackground(PptEshBackground *this)
{
  PptEshClientContainer::~PptEshClientContainer((PptEshBackground *)((char *)this + 328));
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

{
  PptEshClientContainer::~PptEshClientContainer((PptEshBackground *)((char *)this + 328));
  EshContentBase::~EshContentBase(this);
}

void PptColorSchemeAtom::~PptColorSchemeAtom(PptColorSchemeAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptCString::~PptCString(CsString *this)
{
  this->var0 = (void **)&off_24F3B6C80;
  this[1].var1 = (unsigned __int16 *)&unk_24F3B6D28;
  CsString::~CsString(this + 2);
  JUMPOUT(0x22E2DD408);
}

{
  this->var0 = (void **)&off_24F3B6C80;
  this[1].var1 = (unsigned __int16 *)&unk_24F3B6D28;
  CsString::~CsString(this + 2);
}

void PptSlideTime10Atom::~PptSlideTime10Atom(PptSlideTime10Atom *this)
{
  *(_QWORD *)this = &off_24F3BF240;
  *((_QWORD *)this + 4) = &unk_24F3BF2E8;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BF240;
  *((_QWORD *)this + 4) = &unk_24F3BF2E8;
}

void PptAnimHashCode10Atom::~PptAnimHashCode10Atom(PptAnimHashCode10Atom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimNodeAtom::~PptAnimNodeAtom(PptAnimNodeAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimVariantAtom::~PptAnimVariantAtom(PptAnimVariantAtom *this)
{
  *(_QWORD *)this = &off_24F3BE798;
  *((_QWORD *)this + 4) = &unk_24F3BE840;
  CsString::~CsString((CsString *)((char *)this + 64));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BE798;
  *((_QWORD *)this + 4) = &unk_24F3BE840;
  CsString::~CsString((CsString *)((char *)this + 64));
}

void PptTextRulerAtom::~PptTextRulerAtom(PptTextRulerAtom *this)
{
  *(_QWORD *)this = &off_24F3BB830;
  *((_QWORD *)this + 4) = &unk_24F3BB8D8;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BB830;
  *((_QWORD *)this + 4) = &unk_24F3BB8D8;
  PptTextGenericRulerAtom::clearTabs((uint64_t)this);
}

uint64_t PptTextGenericRulerAtom::clearTabs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    this = MEMORY[0x22E2DD408](v2, 0x20C40960023A9);
  }
  *(_QWORD *)(v1 + 48) = 0;
  return this;
}

void PptTextMasterStyleAtom::~PptTextMasterStyleAtom(PptTextMasterStyleAtom *this)
{
  PptTextMasterStyleAtom::~PptTextMasterStyleAtom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BBD10;
  *((_QWORD *)this + 4) = &unk_24F3BBDB8;
  PptTextMasterStyleAtom::reset(this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

PptTextMasterStyleAtom *PptTextMasterStyleAtom::reset(PptTextMasterStyleAtom *this)
{
  PptTextMasterStyleAtom *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if ((unsigned __int16)((*((_DWORD *)this + 14) - v2) >> 3))
  {
    v3 = 0;
    v4 = 8 * (unsigned __int16)((*((_DWORD *)this + 14) - v2) >> 3);
    do
    {
      v5 = *((_QWORD *)v1 + 6);
      this = *(PptTextMasterStyleAtom **)(v5 + v3);
      if (this)
      {
        PptParaProperty::~PptParaProperty((PptParaProperty *)this);
        this = (PptTextMasterStyleAtom *)MEMORY[0x22E2DD408]();
        v5 = *((_QWORD *)v1 + 6);
      }
      *(_QWORD *)(v5 + v3) = 0;
      *(_QWORD *)(*((_QWORD *)v1 + 6) + v3) = 0;
      v3 += 8;
    }
    while (v4 != v3);
    v2 = *((_QWORD *)v1 + 6);
  }
  *((_QWORD *)v1 + 7) = v2;
  return this;
}

void PptTextHeaderAtom::~PptTextHeaderAtom(PptTextHeaderAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptTextBytesAtom::~PptTextBytesAtom(PptTextBytesAtom *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3BB448;
  *((_QWORD *)this + 4) = &unk_24F3BB4F8;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3BB448;
  *((_QWORD *)this + 4) = &unk_24F3BB4F8;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
}

void PptBaseTextPropertyAtom::~PptBaseTextPropertyAtom(PptBaseTextPropertyAtom *this)
{
  PptTextBlockStylingAtom::~PptTextBlockStylingAtom(this);
  JUMPOUT(0x22E2DD408);
}

void PptTextBlockStylingAtom::~PptTextBlockStylingAtom(PptTextBlockStylingAtom *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3BB258;
  *((_QWORD *)this + 4) = &unk_24F3BB300;
  PptTextBlockStylingAtom::reset((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

{
  PptTextBlockStylingAtom::~PptTextBlockStylingAtom(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t PptTextBlockStylingAtom::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  if (((*(_QWORD *)(this + 56) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v2 + 8 * v3);
      if (v4)
      {
        PptParaProperty::~PptParaProperty((PptParaProperty *)(v4 + 8));
        this = MEMORY[0x22E2DD408](v4, 0x1020C405935C4BCLL);
        v2 = *(_QWORD *)(v1 + 48);
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = *(_QWORD *)(v1 + 48);
    }
    while (v3 < ((unint64_t)(*(_QWORD *)(v1 + 56) - v2) >> 3));
  }
  *(_QWORD *)(v1 + 56) = v2;
  v5 = *(_QWORD *)(v1 + 72);
  if (((*(_QWORD *)(v1 + 80) - v5) & 0x7FFFFFFF8) != 0)
  {
    v6 = 0;
    do
    {
      this = *(_QWORD *)(v5 + 8 * v6);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C40E65D7F0ALL);
        v5 = *(_QWORD *)(v1 + 72);
      }
      *(_QWORD *)(v5 + 8 * v6++) = 0;
      v5 = *(_QWORD *)(v1 + 72);
    }
    while (v6 < ((unint64_t)(*(_QWORD *)(v1 + 80) - v5) >> 3));
  }
  *(_QWORD *)(v1 + 80) = v5;
  *(_DWORD *)(v1 + 96) = 0;
  return this;
}

void PptTextBlockSpecialInfoAtom::~PptTextBlockSpecialInfoAtom(PptTextBlockSpecialInfoAtom *this)
{
  PptTextBlockSpecialInfoAtom::~PptTextBlockSpecialInfoAtom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BB928;
  *((_QWORD *)this + 4) = &unk_24F3BB9D0;
  PptTextBlockSpecialInfoAtom::reset((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextBlockSpecialInfoAtom::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  if ((unsigned __int16)((*(_DWORD *)(this + 56) - v2) >> 3))
  {
    v3 = 0;
    v4 = 8 * (unsigned __int16)((*(_DWORD *)(this + 56) - v2) >> 3);
    do
    {
      v5 = *(_QWORD *)(v1 + 48);
      v6 = *(_QWORD *)(v5 + v3);
      if (v6)
      {
        PptSpecialInfo11::~PptSpecialInfo11((PptSpecialInfo11 *)(v6 + 24));
        this = MEMORY[0x22E2DD408](v6, 0x1020C4089842113);
        v5 = *(_QWORD *)(v1 + 48);
      }
      *(_QWORD *)(v5 + v3) = 0;
      *(_QWORD *)(*(_QWORD *)(v1 + 48) + v3) = 0;
      v3 += 8;
    }
    while (v4 != v3);
    v2 = *(_QWORD *)(v1 + 48);
  }
  *(_QWORD *)(v1 + 56) = v2;
  return this;
}

void PptSpecialInfo11::~PptSpecialInfo11(PptSpecialInfo11 *this)
{
  PptSpecialInfo11::reset((uint64_t)this);
}

uint64_t PptSpecialInfo11::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    this = MEMORY[0x22E2DD408](v2, 0x10C402FEFCB83);
  }
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)v1 = 0;
  return this;
}

void PptTextCharsAtom::~PptTextCharsAtom(CsString *this)
{
  this->var0 = (void **)&off_24F3BB548;
  this[1].var1 = (unsigned __int16 *)&unk_24F3BB5F0;
  CsString::~CsString(this + 2);
  JUMPOUT(0x22E2DD408);
}

{
  this->var0 = (void **)&off_24F3BB548;
  this[1].var1 = (unsigned __int16 *)&unk_24F3BB5F0;
  CsString::~CsString(this + 2);
}

void PptGenericDateMCAtom::~PptGenericDateMCAtom(PptGenericDateMCAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptFooterMCAtom::~PptFooterMCAtom(PptFooterMCAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSlideNumberMCAtom::~PptSlideNumberMCAtom(PptSlideNumberMCAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptDocumentAtom::~PptDocumentAtom(PptDocumentAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSrKinsokuAtom::~PptSrKinsokuAtom(PptSrKinsokuAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptFontEntityAtom::~PptFontEntityAtom(CsString *this)
{
  this->var0 = (void **)&off_24F3B8A40;
  this[1].var1 = (unsigned __int16 *)&unk_24F3B8AE8;
  CsString::~CsString(this + 2);
  JUMPOUT(0x22E2DD408);
}

{
  this->var0 = (void **)&off_24F3B8A40;
  this[1].var1 = (unsigned __int16 *)&unk_24F3B8AE8;
  CsString::~CsString(this + 2);
}

void PptTextDefaultCharacterStyleAtom::~PptTextDefaultCharacterStyleAtom(PptTextDefaultCharacterStyleAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptTextDefaultParagraphStyleAtom::~PptTextDefaultParagraphStyleAtom(PptTextDefaultParagraphStyleAtom *this)
{
  *(_QWORD *)this = &off_24F3BBE08;
  *((_QWORD *)this + 4) = &unk_24F3BBEB0;
  PptParaProperty::~PptParaProperty((PptTextDefaultParagraphStyleAtom *)((char *)this + 48));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BBE08;
  *((_QWORD *)this + 4) = &unk_24F3BBEB0;
  PptParaProperty::~PptParaProperty((PptTextDefaultParagraphStyleAtom *)((char *)this + 48));
}

void PptTextDefaultSpecialInfoAtom::~PptTextDefaultSpecialInfoAtom(PptTextDefaultSpecialInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshDgg::~EshDgg(EshDgg *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F39EBD0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F39EBD0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

void EshBSE::~EshBSE(EshBSE *this)
{
  EshBSE::~EshBSE(this);
  JUMPOUT(0x22E2DD408);
}

{
  EshBlip *var3;
  unsigned __int16 *var4;

  this->var0 = (void **)&off_24F39E578;
  var3 = this->var3;
  if (var3)
    (*((void (**)(EshBlip *))var3->var0 + 1))(var3);
  this->var3 = 0;
  var4 = this->var4;
  if (var4)
    MEMORY[0x22E2DD3F0](var4, 0x1000C80BDFB0063);
  this->var4 = 0;
}

void EshBitmapBlip::~EshBitmapBlip(EshBitmapBlip *this)
{
  *(_QWORD *)this = &off_24F39E440;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F39E440;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 160));
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
}

void EshBlip::~EshBlip(EshBlip *this)
{
  this->var0 = (void **)&off_24F39E4D0;
}

{
  this->var0 = (void **)&off_24F39E4D0;
}

{
  this->var0 = (void **)&off_24F39E4D0;
  JUMPOUT(0x22E2DD408);
}

void EshShapeDefaults::~EshShapeDefaults(EshShapeDefaults *this)
{
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

void EshSplitMenuColors::~EshSplitMenuColors(EshSplitMenuColors *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3A3F78;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3A3F78;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

void PptSlidePersistAtom::~PptSlidePersistAtom(PptSlidePersistAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptViewSettingsAtom::~PptViewSettingsAtom(PptViewSettingsAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSlideViewInfoAtom::~PptSlideViewInfoAtom(PptSlideViewInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptViewInfoAtom::~PptViewInfoAtom(PptViewInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptGuideAtom::~PptGuideAtom(PptGuideAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptGridSpacing10Atom::~PptGridSpacing10Atom(PptGridSpacing10Atom *this)
{
  *(_QWORD *)this = &off_24F3BEB78;
  *((_QWORD *)this + 4) = &unk_24F3BEC20;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BEB78;
  *((_QWORD *)this + 4) = &unk_24F3BEC20;
}

void PptHeadersFootersAtom::~PptHeadersFootersAtom(PptHeadersFootersAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAtom::~PptAtom(PptAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptObjectFactory::~PptObjectFactory(PptObjectFactory *this)
{
  PptEshObjectFactory *var1;

  this->var0 = (void **)&off_24F3BC700;
  var1 = this->var1;
  if (var1)
    (*(void (**)(PptEshObjectFactory *))(*(_QWORD *)var1 + 8))(var1);
  this->var1 = 0;
  JUMPOUT(0x22E2DD408);
}

{
  PptEshObjectFactory *var1;

  this->var0 = (void **)&off_24F3BC700;
  var1 = this->var1;
  if (var1)
    (*(void (**)(PptEshObjectFactory *))(*(_QWORD *)var1 + 8))(var1);
  this->var1 = 0;
}

void PptEshObjectFactory::~PptEshObjectFactory(PptEshObjectFactory *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A15A584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OCBReader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void PptBinaryReader::~PptBinaryReader(PptBinaryReader *this)
{
  PptBinaryReader::~PptBinaryReader(this);
  JUMPOUT(0x22E2DD408);
}

{
  OcReader *v2;
  uint64_t v3;
  uint64_t v4;
  SsrwOOStorage *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PptPersistDir *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  *(_QWORD *)this = &off_24F3BCED8;
  *((_QWORD *)this + 1) = &unk_24F3BCFF8;
  v2 = (OcReader *)((char *)this + 8);
  *((_QWORD *)this + 3) = &unk_24F3BD0D8;
  v3 = *((_QWORD *)this + 19);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 19) = 0;
  v4 = *((_QWORD *)this + 18);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 18) = 0;
  v5 = (SsrwOOStorage *)*((_QWORD *)this + 16);
  if (v5)
  {
    SsrwOOStorage::~SsrwOOStorage(v5);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 16) = 0;
  v6 = *((_QWORD *)this + 23);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 23) = 0;
  v7 = *((_QWORD *)this + 21);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 21) = 0;
  v8 = *((_QWORD *)this + 22);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 22) = 0;
  v9 = (PptPersistDir *)*((_QWORD *)this + 24);
  if (v9)
  {
    PptPersistDir::~PptPersistDir(v9);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 24) = 0;
  v10 = *((_QWORD *)this + 25);
  if (v10)
    MEMORY[0x22E2DD408](v10, 0x1000C408B6DE1C6);
  *((_QWORD *)this + 25) = 0;
  v11 = *((_QWORD *)this + 26);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 26) = 0;
  v12 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 37) = v12;
  if (*((_QWORD *)this + 34))
  {
    EshMark::~EshMark(*((EshMark **)this + 34));
    MEMORY[0x22E2DD408]();
    v12 = (void *)*((_QWORD *)this + 36);
  }
  *((_QWORD *)this + 34) = 0;
  if (v12)
  {
    *((_QWORD *)this + 37) = v12;
    operator delete(v12);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  SsrwOORootStorage::~SsrwOORootStorage((PptBinaryReader *)((char *)this + 40));
  OcReader::~OcReader(v2);
}

void PptEshReader::~PptEshReader(PptEshReader *this)
{
  PptEshReader::~PptEshReader(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BD160;
  EshBinaryReader::finish(this);
  EshBinaryReader::~EshBinaryReader(this);
}

void EshBinaryReader::~EshBinaryReader(EshBinaryReader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A5800;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  if (*((_DWORD *)this + 14))
    *((_DWORD *)this + 14) = 0;
  ChStack<EshHeader>::~ChStack((uint64_t)this + 40);
}

{
  EshBinaryReader::~EshBinaryReader(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t ChStack<EshHeader>::~ChStack(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)a1)
    MEMORY[0x22E2DD3F0](*(_QWORD *)a1 - 16, 0x1000C808B6DE1C6);
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    MEMORY[0x22E2DD3F0](v2 - 16, 0x1000C808B6DE1C6);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void PptPersistDir::~PptPersistDir(PptPersistDir *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)v3[1];
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      *v3 = 0;
      MEMORY[0x22E2DD408](v3, 0x20C40A4A59CD2);
      v3 = v4;
    }
    while (v4);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

void PptPersistPtrIncrAtom::~PptPersistPtrIncrAtom(PptPersistPtrIncrAtom *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3BA088;
  *((_QWORD *)this + 4) = &unk_24F3BA138;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BA088;
  *((_QWORD *)this + 4) = &unk_24F3BA138;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

void SsrwOORootStorage::~SsrwOORootStorage(SsrwOOStorage *this)
{
  uint64_t **v2;
  _Storage *var0;

  var0 = this[1].var0;
  v2 = (uint64_t **)&this[1];
  if (var0)
  {
    closeStructuredStorage(v2);
    this->var0 = 0;
  }
  SsrwOOStorage::~SsrwOOStorage(this);
}

uint64_t closeStructuredStorage(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t FatSectors;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 6;
  v2 = *a1;
  if (!*a1)
    return 6;
  if (v2[13])
  {
    v5 = 0;
    v6 = 0;
    if (!v2[6] || (FatSectors = closeStorageInternal((uint64_t)(v2 + 6)), !(_DWORD)FatSectors))
    {
      FatSectors = tocWrite(v2[5], (uint64_t)v2);
      if (!(_DWORD)FatSectors)
      {
        FatSectors = fatTrimFreeSectorsAtEnd(v2[3], (unsigned int *)&v5);
        if (!(_DWORD)FatSectors)
        {
          FatSectors = fatMarkFreeChain(v2[3]);
          if (!(_DWORD)FatSectors)
          {
            FatSectors = fatWriteMiniFat(v2[4]);
            if (!(_DWORD)FatSectors)
            {
              FatSectors = fatWriteFatAndXFat(v2[3]);
              if (!(_DWORD)FatSectors)
              {
                FatSectors = headerWrite(*v2, v2[2]);
                if (!(_DWORD)FatSectors)
                {
                  FatSectors = fatGetFatSectors(v2[3], &v6, (_DWORD *)&v5 + 1);
                  if (!(_DWORD)FatSectors)
                  {
                    FatSectors = headerWriteFatSectors(*v2, v6, HIDWORD(v5));
                    if (!(_DWORD)FatSectors)
                    {
                      FatSectors = headerWriteSectorFiller(v2[2], *v2);
                      if (!(_DWORD)FatSectors)
                      {
                        headerGetSectorShift(v2[2]);
                        fatGetLength(v2[3]);
                        SsrwFtruncate(*v2);
                        FatSectors = 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v2 = *a1;
  }
  else
  {
    FatSectors = 0;
  }
  closeStg((char *)v2);
  *a1 = 0;
  return FatSectors;
}

void closeStg(char *a1)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v3 = *((_QWORD *)a1 + 6);
    v2 = a1 + 48;
    if (v3)
      closeStorageInternal((uint64_t)v2);
    v4 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      if (a1[8])
        SsrwFclose(v4);
      else
        SsrwDisconnect(v4);
    }
    v5 = (void *)*((_QWORD *)a1 + 10);
    if (v5)
      free(v5);
    if (*((_QWORD *)a1 + 4))
      fatDestroy((void ***)a1 + 4);
    v6 = (void *)*((_QWORD *)a1 + 8);
    if (v6)
      free(v6);
    if (*((_QWORD *)a1 + 3))
      fatDestroy((void ***)a1 + 3);
    v7 = (void *)*((_QWORD *)a1 + 2);
    if (v7)
      free(v7);
    if (*((_QWORD *)a1 + 5))
      tocDestroy((uint64_t **)a1 + 5);
    v8 = (void *)*((_QWORD *)a1 + 12);
    if (v8)
      free(v8);
    free(a1);
  }
}

uint64_t closeStorageInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v13 = 2;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  if (!a1)
    return 6;
  v2 = *(_QWORD *)a1;
  if (!v2)
    return 6;
  result = documentPropertiesWrite(v2);
  if ((_DWORD)result)
    return result;
  v4 = openListItemCount(*(_QWORD *)(*(_QWORD *)a1 + 24));
  if (!v4)
  {
LABEL_13:
    v6 = *(uint64_t **)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 32) - 1) > 1)
    {
LABEL_17:
      v9 = v6[2];
      if (!v9)
        return storageDestroy(a1);
      result = storageRemoveOpenChild(v9, 1, (uint64_t)v6);
      if (!(_DWORD)result)
        return storageDestroy(a1);
      return result;
    }
    TOC = (uint64_t *)rootStorageGetTOC(*v6);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(*(_QWORD *)a1 + 8));
    if (EntryAtIndex)
    {
      result = directorySetCurrentModificationTime(EntryAtIndex);
      if ((_DWORD)result)
        return result;
      v6 = *(uint64_t **)a1;
      goto LABEL_17;
    }
    return 6;
  }
  v5 = v4 - 1;
  while (1)
  {
    result = openListGetItem(*(uint64_t **)(*(_QWORD *)a1 + 24), v5, &v13, &v12);
    if ((_DWORD)result)
      return result;
    if (v13 == 1)
    {
      v10 = v12;
      result = closeStorageInternal(&v10);
      if ((_DWORD)result)
        return result;
    }
    else if (v13 == 2)
    {
      v11 = v12;
      result = closeStream(&v11);
      if ((_DWORD)result)
        return result;
    }
    if (--v5 == -1)
      goto LABEL_13;
  }
}

uint64_t documentPropertiesWrite(uint64_t a1)
{
  uint64_t result;
  _QWORD *TOC;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = 0;
  result = storageHasDocumentProperties(a1);
  if (!(_DWORD)result)
    return result;
  if (storageGetMode(a1) - 1 > 1)
    return 0;
  TOC = (_QWORD *)rootStorageGetTOC(a1);
  v4 = TOC;
  if (*TOC)
  {
    v12 = *TOC;
    result = propertySetWrite(TOC[3], SSRW_FMTID_SummaryInformation, (uint64_t)&v12);
    if ((_DWORD)result)
      return result;
  }
  v6 = v4 + 1;
  v5 = v4[1];
  v8 = v4 + 2;
  v7 = v4[2];
  if (v5)
  {
    if (v7)
      goto LABEL_7;
    goto LABEL_10;
  }
  if (!v7)
    return 0;
LABEL_10:
  result = streamSeek(v4[4], 0, 0);
  if ((_DWORD)result)
    return result;
  v5 = *v6;
  if (*v6)
  {
    v7 = *v8;
    if (*v8)
      goto LABEL_7;
    v9 = &SSRW_FMTID_UserDefinedProperties;
    v10 = a1;
    v11 = v4 + 2;
  }
  else
  {
    v9 = &SSRW_FMTID_DocumentSummaryInformation;
    v10 = a1;
    v11 = v4 + 1;
  }
  result = getPropertySetFromStorage(v10, v9, v11);
  if (!(_DWORD)result)
  {
    v5 = *v6;
    v7 = *v8;
LABEL_7:
    v12 = v5;
    v13 = v7;
    result = propertySetWrite(v4[4], &SSRW_FMTID_DocumentSummaryInformation, (uint64_t)&v12);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  return result;
}

BOOL storageHasDocumentProperties(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 40) != 0;
  return result;
}

uint64_t openListItemCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t openListGetItem(uint64_t *a1, unsigned int a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t result;

  if (!a1 || *((_DWORD *)a1 + 2) <= a2)
    return 6;
  v4 = *a1;
  if (a2)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 16);
      if (!v4)
        return 11;
      if (!--a2)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    result = 0;
    *a3 = *(_DWORD *)v4;
    *a4 = *(_QWORD *)(v4 + 8);
  }
  return result;
}

uint64_t storageDestroy(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = openListDestroy((_QWORD **)(*(_QWORD *)a1 + 24));
  v3 = *(void **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 40))
  {
    documentPropertiesDestroy((unsigned int ***)(*(_QWORD *)a1 + 40));
    v3 = *(void **)a1;
  }
  free(v3);
  *(_QWORD *)a1 = 0;
  return v2;
}

uint64_t openListDestroy(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  if (!a1)
    return 6;
  v2 = *a1;
  if (!*a1)
    return 6;
  v3 = (_QWORD *)*v2;
  if (*v2)
  {
    do
    {
      v4 = (_QWORD *)v3[2];
      free(v3);
      v3 = v4;
    }
    while (v4);
    v2 = *a1;
  }
  free(v2);
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t documentPropertiesDestroy(unsigned int ***a1)
{
  unsigned int **v2;

  v2 = *a1;
  if (*v2)
  {
    propertySetDestroy(v2);
    v2 = *a1;
  }
  if (v2[1])
  {
    propertySetDestroy(v2 + 1);
    v2 = *a1;
  }
  if (v2[2])
  {
    propertySetDestroy(v2 + 2);
    v2 = *a1;
  }
  free(v2);
  *a1 = 0;
  return 0;
}

uint64_t propertySetDestroy(unsigned int **a1)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *a1;
  if ((*a1)[400])
  {
    v3 = 0;
    v4 = 2;
    do
    {
      propVariantCleanup((uint64_t)&v2[v4]);
      ++v3;
      v2 = *a1;
      v4 += 8;
    }
    while (v3 < (*a1)[400]);
  }
  if (v2[610])
  {
    v5 = 0;
    v6 = 410;
    do
    {
      v7 = *(void **)&v2[v6];
      if (v7)
      {
        free(v7);
        *(_QWORD *)&v2[v6] = 0;
        v2 = *a1;
      }
      ++v5;
      v6 += 4;
    }
    while (v5 < v2[610]);
  }
  free(v2);
  *a1 = 0;
  return 0;
}

uint64_t SsrwFclose(_QWORD *a1)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;

  if (!a1)
    return 0;
  v2 = (uint64_t (*)(_QWORD *))a1[8];
  if (!v2)
    return 0;
  v3 = v2(a1);
  free(a1);
  return v3;
}

uint64_t SsrwMemFclose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 && ((*(_BYTE *)(a1 + 40) & 2) == 0 || *(_QWORD *)(a1 + 32)) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16))
  {
    v2 = (*(uint64_t (**)(_QWORD))(a1 + 32))(**(_QWORD **)a1);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 8);
      **(_QWORD **)a1 = v2;
      *(_QWORD *)(a1 + 16) = v3;
    }
  }
  return 0;
}

uint64_t fatDestroy(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (v2[1])
  {
    free(v2[1]);
    v2 = *a1;
  }
  if (*v2)
  {
    free(*v2);
    v2 = *a1;
  }
  free(v2);
  *a1 = 0;
  return 0;
}

uint64_t tocDestroy(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = sizeOfDirectoryEntry();
        free((void *)(v3 - v4));
        v2 = *a1;
      }
      free(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t sizeOfDirectoryEntry()
{
  return 168;
}

void SsrwOOStorage::~SsrwOOStorage(SsrwOOStorage *this)
{
  if (this->var0)
  {
    closeStorage((uint64_t)this);
    this->var0 = 0;
  }
}

void OcReader::~OcReader(OcReader *this)
{
  this->var0 = (void **)off_24F3A63B0;
}

void sub_22A15B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_22A15B504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void WrdBinaryReader::WrdBinaryReader(WrdBinaryReader *this)
{
  uint64_t v2;
  char *v3;
  uint64_t i;
  _QWORD *v5;

  *(_QWORD *)this = off_24F3B1310;
  OcReader::OcReader((OcReader *)((char *)this + 8));
  *(_QWORD *)this = &off_24F3B44A0;
  *((_QWORD *)this + 1) = &unk_24F3B4688;
  *((_QWORD *)this + 3) = &unk_24F3B4848;
  *((_QWORD *)this + 4) = 0;
  WrdEshReader::WrdEshReader((WrdBinaryReader *)((char *)this + 40));
  v2 = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = -1;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = -1;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *((_DWORD *)this + 55) = 0;
  do
  {
    v3 = (char *)this + v2;
    *((_QWORD *)v3 + 29) = 0;
    *((_QWORD *)v3 + 30) = 0;
    *(_QWORD *)((char *)this + v2 + 224) = (char *)this + v2 + 232;
    v2 += 24;
  }
  while (v2 != 192);
  for (i = 0; i != 192; i += 24)
  {
    v5 = (_QWORD *)((char *)this + i);
    v5[53] = 0;
    v5[54] = 0;
    v5[52] = v5 + 53;
  }
  *((_OWORD *)this + 38) = xmmword_22A4C1930;
  *((_DWORD *)this + 156) = 0;
  WrdText::WrdText((WrdBinaryReader *)((char *)this + 632));
  *((_QWORD *)this + 87) = 0;
}

void sub_22A15B62C(_Unwind_Exception *a1)
{
  OcReader *v1;
  EshBinaryReader *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  WrdBinaryReader::WrdBinaryReader(v5, v4, v3, v2);
  OcReader::~OcReader(v1);
  _Unwind_Resume(a1);
}

void WrdEshReader::WrdEshReader(WrdEshReader *this)
{
  _QWORD *v1;

  EshBinaryReader::EshBinaryReader(this);
  *v1 = &off_24F3B4938;
}

void WrdText::WrdText(WrdText *this)
{
  *(_QWORD *)this = &off_24F3B40E8;
  OcText::OcText((OcText *)((char *)this + 8));
  *((_DWORD *)this + 14) = 0;
}

void sub_22A15B818(void *a1, int a2)
{
  void *v2;
  unsigned int *v5;
  void *v6;

  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v6, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A15B7FCLL);
}

void sub_22A15B8A4(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2 == 2)
  {
    objc_msgSend(v2, "setStartErrorMessageFromException:", objc_begin_catch(exception_object));
    objc_end_catch();
    JUMPOUT(0x22A15B7FCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WrdBinaryReader::start(WrdBinaryReader *this, unsigned __int8 *a2, unsigned int a3)
{
  WrdParser *v6;
  _DWORD *exception;

  (*(void (**)(WrdBinaryReader *))(*(_QWORD *)this + 24))(this);
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v6 = (WrdParser *)operator new(0x138uLL);
  WrdParser::WrdParser(v6);
  *((_QWORD *)this + 4) = v6;
  return WrdParser::openInBuf(v6, a2, a3);
}

void sub_22A15B99C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdBinaryReader::finish(WrdBinaryReader *this)
{
  WrdParser *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WrdBinTable *v6;
  WrdBinTable *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (WrdParser *)*((_QWORD *)this + 4);
  if (v2)
  {
    WrdParser::closeDoc(v2);
    v3 = *((_QWORD *)this + 4);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 4) = 0;
  }
  for (i = 0; i != 192; i += 24)
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 224, *(_QWORD **)((char *)this + i + 232));
    *(_QWORD *)((char *)this + i + 224) = (char *)this + i + 232;
    *(_QWORD *)((char *)this + i + 232) = 0;
    *(_QWORD *)((char *)this + i + 240) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 416, *(_QWORD **)((char *)this + i + 424));
    *(_QWORD *)((char *)this + i + 424) = 0;
    *(_QWORD *)((char *)this + i + 432) = 0;
    *(_QWORD *)((char *)this + i + 416) = (char *)this + i + 424;
  }
  v5 = *((_QWORD *)this + 17);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 17) = 0;
  v6 = (WrdBinTable *)*((_QWORD *)this + 18);
  if (v6)
  {
    WrdBinTable::~WrdBinTable(v6);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 18) = 0;
  v7 = (WrdBinTable *)*((_QWORD *)this + 21);
  if (v7)
  {
    WrdBinTable::~WrdBinTable(v7);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 21) = 0;
  v8 = *((_QWORD *)this + 22);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 22) = 0;
  v9 = *((_QWORD *)this + 19);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 19) = 0;
  v10 = *((_QWORD *)this + 24);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 24) = 0;
  v11 = *((_QWORD *)this + 25);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 25) = 0;
  v12 = *((_QWORD *)this + 26);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 26) = 0;
  v13 = *((_QWORD *)this + 27);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 27) = 0;
  v14 = *((_QWORD *)this + 87);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 87) = 0;
  EshBinaryReader::finish((WrdBinaryReader *)((char *)this + 40));
}

void WrdParser::WrdParser(WrdParser *this)
{
  OcParser *v2;
  uint64_t v3;

  v2 = (OcParser *)TSURectWithOriginAndSize(this);
  OcParser::OcParser(v2);
  *(_QWORD *)v3 = &off_24F3B4A40;
  *(_DWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  SsrwOORootStorage::SsrwOORootStorage((SsrwOORootStorage *)(v3 + 24));
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 38) = -1;
  WrdFileInformationBlock::WrdFileInformationBlock((WrdParser *)((char *)this + 160));
  *((_BYTE *)this + 248) = 0;
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 252));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 256));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 260));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 264));
  WrdChpParser::WrdChpParser((WrdParser *)((char *)this + 268));
  *((_DWORD *)this + 76) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
}

void sub_22A15BBF4(_Unwind_Exception *a1)
{
  OcParser *v1;
  SsrwOORootStorage *v2;

  SsrwOORootStorage::~SsrwOORootStorage(v2);
  OcParser::OcParser(v1);
  _Unwind_Resume(a1);
}

void OcParser::OcParser(OcParser *this)
{
  *(_QWORD *)this = &off_24F3A6380;
}

void WrdFileInformationBlock::WrdFileInformationBlock(WrdFileInformationBlock *this)
{
  uint64_t v1;

  WrdFileInformationBlockHeader::WrdFileInformationBlockHeader(this);
  *(_WORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
}

void WrdFileInformationBlockHeader::WrdFileInformationBlockHeader(WrdFileInformationBlockHeader *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 2) = 0xFFFFFFFFLL;
  *(_DWORD *)((char *)this + 23) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_WORD *)this + 18) = 0;
  *((_WORD *)this + 19) &= 0xFE00u;
}

void WrdPropertyParser::WrdPropertyParser(WrdPropertyParser *this)
{
  *(_DWORD *)TSURectWithOriginAndSize(this) = -1;
}

uint64_t WrdParser::openInBuf(WrdParser *this, unsigned __int8 *a2, unsigned int a3)
{
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  WrdParser::createFactories((uint64_t)this);
  *((_QWORD *)this + 37) = a2;
  *((_DWORD *)this + 76) = a3;
  *((_QWORD *)this + 2) = 0;
  SsrwOORootStorage::openInBuf((WrdParser *)((char *)this + 24), (const void **)this + 37, a3);
  return WrdParser::initStreamsAndFibBase(this);
}

uint64_t WrdParser::createFactories(uint64_t this)
{
  uint64_t v1;
  WrdObjectFactory *v2;
  _QWORD *v3;

  if (!*(_QWORD *)(this + 280))
  {
    v1 = this;
    v2 = (WrdObjectFactory *)operator new(0x10uLL);
    WrdObjectFactory::WrdObjectFactory(v2);
    *(_QWORD *)(v1 + 280) = v2;
    v3 = operator new(0x10uLL);
    *v3 = &unk_24F3B30A0;
    v3[1] = 0;
    return EshDataModelVisitor::takeClientVisitor((uint64_t)v2, (uint64_t)v3);
  }
  return this;
}

void sub_22A15BD90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdObjectFactory::WrdObjectFactory(WrdObjectFactory *this)
{
  *(_QWORD *)this = &off_24F3B3868;
  *((_QWORD *)this + 1) = 0;
}

uint64_t EshDataModelVisitor::takeClientVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t WrdParser::initStreamsAndFibBase(WrdParser *this)
{
  SsrwOOStgInfo **v2;
  SsrwOOStorage *v3;
  uint64_t v4;
  uint64_t v5;
  SsrwOOStgStream *v6;
  SsrwOOStgStream *v7;
  char v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *Name;
  const char *v15;
  const char *v16;
  uint64_t result;
  _DWORD *exception;

  *((_QWORD *)this + 18) = 0;
  v2 = (SsrwOOStgInfo **)((char *)this + 144);
  v3 = (SsrwOOStorage *)((char *)this + 24);
  *((_QWORD *)this + 14) = SsrwOOStorage::openStream((SsrwOOStorage *)((char *)this + 24), "WordDocument");
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 17) = 0;
  SsrwOOStorage::getChildrenInfo(v3, v2, (int *)this + 2);
  if (*((int *)this + 2) < 1)
  {
    v7 = 0;
    v6 = 0;
    v8 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 1;
    do
    {
      if (!v6
        && (v9 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4)), !strcmp(v9, "0Table")))
      {
        Name = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        v6 = SsrwOOStorage::openStream(v3, Name);
      }
      else if (!v7
             && (v10 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4)), !strcmp(v10, "1Table")))
      {
        v15 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        v7 = SsrwOOStorage::openStream(v3, v15);
        v8 &= v6 != 0;
      }
      else if (!*((_QWORD *)this + 15)
             && (v11 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4)), !strcmp(v11, "Data")))
      {
        v16 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        *((_QWORD *)this + 15) = SsrwOOStorage::openStream(v3, v16);
      }
      else if (!*((_QWORD *)this + 17))
      {
        v12 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
        if (!strcmp(v12, "ObjectPool"))
        {
          v13 = (const char *)SsrwOOStgInfo::getName((SsrwOOStgInfo *)((char *)*v2 + v4));
          *((_QWORD *)this + 17) = SsrwOOStorage::openStorage(v3, v13);
        }
      }
      ++v5;
      v4 += 184;
    }
    while (v5 < *((int *)this + 2));
  }
  result = WrdParser::parse(this, (WrdParser *)((char *)this + 160));
  if (!v6)
  {
    if (!v7)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 11;
    }
LABEL_29:
    *((_QWORD *)this + 16) = v7;
    return result;
  }
  if (!v7)
  {
LABEL_27:
    *((_QWORD *)this + 16) = v6;
    return result;
  }
  if ((*((_BYTE *)this + 186) & 0x20) == 0)
  {
    if ((v8 & 1) != 0)
    {
      *((_QWORD *)this + 16) = v7;
      (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)v6 + 152))(v6, 0);
      return (*(uint64_t (**)(SsrwOOStgStream *))(*(_QWORD *)v6 + 8))(v6);
    }
    (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)v6 + 152))(v6, 0);
    result = (*(uint64_t (**)(SsrwOOStgStream *))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_29;
  }
  if ((v8 & 1) != 0)
  {
    (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)v7 + 152))(v7, 0);
    result = (*(uint64_t (**)(SsrwOOStgStream *))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_27;
  }
  *((_QWORD *)this + 16) = v6;
  (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)v7 + 152))(v7, 0);
  return (*(uint64_t (**)(SsrwOOStgStream *))(*(_QWORD *)v7 + 8))(v7);
}

void sub_22A15C144()
{
  uint64_t v0;
  uint64_t v1;
  _Unwind_Exception *v2;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  _Unwind_Resume(v2);
}

void sub_22A15C168()
{
  JUMPOUT(0x22A15C170);
}

SsrwOOStgStream *SsrwOOStorage::openStream(SsrwOOStorage *this, const char *__s)
{
  size_t v4;

  v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::openStream(this, this->var1);
}

void SsrwOOStorage::getChildrenInfo(SsrwOOStorage *this, SsrwOOStgInfo **a2, int *a3)
{
  int ChildrenInfo;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  SsrwOOStgInfo *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *exception;
  void *v18;
  int v19;

  v19 = 0;
  v18 = 0;
  ChildrenInfo = getChildrenInfo((uint64_t)this->var0, (void ***)&v18, (unsigned int *)&v19);
  if (ChildrenInfo)
  {
    v16 = ChildrenInfo;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v16;
  }
  v6 = v19;
  if (v19 < 1 || v18 == 0)
  {
    v10 = 0;
  }
  else
  {
    v8 = operator new[](184 * v19 + 16);
    v9 = 0;
    *v8 = 184;
    v8[1] = v6;
    v10 = (SsrwOOStgInfo *)(v8 + 2);
    v11 = 184 * v6;
    do
    {
      SsrwOOStgInfo::SsrwOOStgInfo((SsrwOOStgInfo *)&v8[v9 / 8 + 2]);
      v9 += 184;
    }
    while (v11 != v9);
    v12 = v19;
    if (v19 >= 1)
    {
      v13 = 0;
      v14 = 0;
      v15 = (uint64_t)(v8 + 2);
      do
      {
        SsrwOOStgInfo::operator=(v15, (__int128 *)((char *)v18 + v13));
        ++v14;
        v12 = v19;
        v15 += 184;
        v13 += 64;
      }
      while (v14 < v19);
    }
    freeInfo((void **)v18, v12);
    free(v18);
    LODWORD(v6) = v19;
  }
  *a2 = v10;
  *a3 = v6;
}

void sub_22A15C324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, int a10, unsigned int a11)
{
  _DWORD *exception;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    freeInfo(a9, a11);
    free(a9);
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5;
  }
  _Unwind_Resume(exception_object);
}

void SsrwOOStgInfo::SsrwOOStgInfo(SsrwOOStgInfo *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = this;
  *(_QWORD *)this = (char *)this + 108;
  *((_BYTE *)this + 72) = 0;
}

uint64_t SsrwOOStgInfo::operator=(uint64_t a1, __int128 *a2)
{
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)a2)
  {
    v3 = *(_OWORD **)(a1 + 64);
    v3[2] = 0u;
    v3[3] = 0u;
    *v3 = 0u;
    v3[1] = 0u;
    *(_BYTE *)(a1 + 72) = 0;
    v4 = *(_OWORD **)(a1 + 64);
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    v4[2] = a2[2];
    v4[3] = v7;
    *v4 = v5;
    v4[1] = v6;
    **(_QWORD **)(a1 + 64) = a1 + 108;
    SsrwOOStgInfo::setNamePrivate<unsigned short>(a1, *(_QWORD *)a2);
  }
  return a1;
}

uint64_t SsrwOOStgInfo::getName(SsrwOOStgInfo *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v3 = *((unsigned __int8 *)this + 72);
  result = (uint64_t)this + 72;
  if (!v3)
  {
    v4 = 0;
    v5 = (_QWORD *)*((_QWORD *)this + 8);
    while (*(unsigned __int16 *)(*v5 + 2 * v4++))
      ;
    v7 = 0;
    do
    {
      *(_BYTE *)(result + v7) = *(_WORD *)(*v5 + 2 * v7);
      ++v7;
    }
    while (v4 != v7);
  }
  return result;
}

_QWORD *SsrwOOStorage::openStorage(SsrwOOStorage *this, const char *__s)
{
  size_t v4;

  v4 = 0;
  do
  {
    this->var1[v4] = __s[v4];
    ++v4;
  }
  while (v4 <= strlen(__s));
  return SsrwOOStorage::openStorage(this, this->var1);
}

_QWORD *SsrwOOStorage::openStorage(SsrwOOStorage *this, const unsigned __int16 *a2)
{
  int v2;
  _QWORD *result;
  int v4;
  _DWORD *exception;
  uint64_t v6;

  v6 = 0;
  v2 = openStorage((uint64_t)this->var0, a2, &v6);
  if (v2)
  {
    v4 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
  }
  result = operator new(0x50uLL);
  *result = v6;
  return result;
}

uint64_t openStorage(uint64_t a1, const unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  if (!a1)
    return 6;
  result = 6;
  if (a2 && *(_QWORD *)a1 && a3 && *a2 && (*(_DWORD *)(a1 + 32) | 2) == 2)
  {
    TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    if (EntryAtIndex)
    {
      result = tocFindChildEntry(TOC, EntryAtIndex, a2, &v10);
      if (!(_DWORD)result)
      {
        result = storageConstructFromDirEntry(v10, a3);
        if (!(_DWORD)result)
        {
          *(_QWORD *)(*a3 + 16) = a1;
          *(_QWORD *)*a3 = *(_QWORD *)a1;
          v9 = *a3;
          *(_DWORD *)(v9 + 32) = *(_DWORD *)(a1 + 32);
          return openListAppend(*(_QWORD *)(a1 + 24), 1, v9);
        }
      }
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFileInformationBlockHeader *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  __int16 v8;
  uint64_t result;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14), 0, 0);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14)) != 42476)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8003;
  }
  *((_WORD *)a2 + 8) = -23060;
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  *((_WORD *)a2 + 9) = v4;
  if (v4 < 0x6000)
  {
    if (v4 < 0x4000)
    {
      if ((v4 & 0xF000) == 0x2000)
      {
        v5 = 9;
      }
      else
      {
        if (v4 - 5 >= 0x9FB)
        {
          v5 = *((_DWORD *)this + 38);
          goto LABEL_11;
        }
        v5 = 8;
      }
    }
    else
    {
      v5 = 10;
    }
  }
  else
  {
    v5 = 11;
  }
  *((_DWORD *)this + 38) = v5;
LABEL_11:
  *(int32x4_t *)((char *)this + 252) = vdupq_n_s32(v5);
  *((_DWORD *)this + 67) = v5;
  *(_DWORD *)a2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 72))(*((_QWORD *)this + 14));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  *((_WORD *)a2 + 17) = v6 >> 4;
  v7 = *((_WORD *)a2 + 19) & 0xFFF0 | (v6 >> 10) & 3 | (v6 >> 11) & 4;
  *((_BYTE *)a2 + 26) = ((v6 >> 4) & 0x30 | v6 & 0xF | (v6 >> 6) & 0x40 | (v6 >> 7) & 0x80) ^ 0x20;
  *((_WORD *)a2 + 19) = v7 | (v6 >> 12) & 8;
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14));
  *((_DWORD *)a2 + 1) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 64))(*((_QWORD *)this + 14));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 64))(*((_QWORD *)this + 14));
  *((_WORD *)a2 + 19) = *((_WORD *)a2 + 19) & 0xFE0F | (16 * v8) & 0x10 | (16 * v8) & 0x60 | (16 * v8) & 0x180;
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14));
  *((_DWORD *)a2 + 3) = result;
  *((_BYTE *)this + 248) = 1;
  return result;
}

BOOL `non-virtual thunk to'WrdBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t *a2, int *a3, int *a4)
{
  return WrdBinaryReader::readEncryptionInfo(a1 - 24, a2, a3, a4);
}

BOOL WrdBinaryReader::readEncryptionInfo(uint64_t a1, uint64_t *a2, int *a3, int *a4)
{
  uint64_t v4;
  _BOOL8 v5;
  int v6;
  SsrwOOStream *v10;
  uint64_t v11;
  int v12;
  _DWORD *exception;
  int v15;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || !*(_QWORD *)(v4 + 128))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8000;
  }
  if ((*(_BYTE *)(v4 + 186) & 0x10) == 0)
  {
    v5 = 0;
    v6 = 8011;
LABEL_11:
    *a4 = v6;
    return v5;
  }
  if ((*(_WORD *)(v4 + 198) & 8) != 0)
  {
    v5 = 0;
    v6 = 8003;
    goto LABEL_11;
  }
  *a3 = *(_DWORD *)(v4 + 188);
  *a2 = operator new[]();
  v10 = *(SsrwOOStream **)(*(_QWORD *)(a1 + 32) + 128);
  v11 = (*((uint64_t (**)(SsrwOOStream *))v10->var0 + 5))(v10);
  SsrwOOStream::seekFromStart(v10, 0);
  v15 = *a3;
  (*((void (**)(SsrwOOStream *, uint64_t, int *))v10->var0 + 7))(v10, *a2, &v15);
  SsrwOOStream::seekFromStart(v10, v11);
  v12 = *a3;
  v5 = v15 == *a3;
  if (v15 != v12)
  {
    if (*a2)
      MEMORY[0x22E2DD3F0](*a2, 0x1000C8077774924);
    *a2 = 0;
  }
  return v5;
}

void sub_22A15CAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A15D0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double WrdBinaryReader::initForReading(WrdParser **this)
{
  WrdRdrText *v2;
  WrdBinTable *v3;
  WrdBinTable *v4;
  WrdPAPXFKP *v5;
  WrdCHPXFKP *v6;
  WrdSectionDescriptorTable *v7;
  WrdParser *v8;
  WrdStyleSheet *v9;
  WrdEmbeddedTTFRecordTable *v10;
  WrdDocumentFileRecord *v11;
  double result;

  WrdParser::parse(this[4], (WrdParser *)((char *)this[4] + 160));
  EshGroupProperties::init((uint64_t)(this + 5), *(_QWORD *)(*((_QWORD *)this[4] + 35) + 8));
  (*((void (**)(char *, _QWORD))this[1] + 18))((char *)this + 8, *(_QWORD *)(*((_QWORD *)this[4] + 35) + 8));
  *((_DWORD *)this + 40) = -1;
  this[23] = (WrdParser *)0xFFFFFFFFLL;
  v2 = (WrdRdrText *)operator new(0x68uLL);
  WrdRdrText::WrdRdrText(v2, *((SsrwOOStream **)this[4] + 14));
  this[17] = v2;
  WrdParser::parse(this[4], v2);
  v3 = (WrdBinTable *)operator new(0x40uLL);
  WrdBinTable::WrdBinTable(v3);
  this[18] = v3;
  WrdParser::parse(this[4], (uint64_t)v3, 0xDu);
  v4 = (WrdBinTable *)operator new(0x40uLL);
  WrdBinTable::WrdBinTable(v4);
  this[21] = v4;
  WrdParser::parse(this[4], (uint64_t)v4, 0xCu);
  v5 = (WrdPAPXFKP *)operator new(0x28uLL);
  WrdPAPXFKP::WrdPAPXFKP(v5);
  this[19] = v5;
  WrdFormattedDiskPage::init(v5);
  v6 = (WrdCHPXFKP *)operator new(0x28uLL);
  WrdCHPXFKP::WrdCHPXFKP(v6);
  this[22] = v6;
  WrdFormattedDiskPage::init(v6);
  v7 = (WrdSectionDescriptorTable *)operator new(0x20uLL);
  WrdSectionDescriptorTable::WrdSectionDescriptorTable(v7);
  this[24] = v7;
  WrdParser::parse(this[4], v7);
  v8 = this[4];
  if ((*((_BYTE *)v8 + 186) & 4) != 0)
  {
    v9 = (WrdStyleSheet *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v8 + 35) + 16))(*((_QWORD *)v8 + 35), 57);
    this[25] = v9;
    WrdParser::parse(this[4], v9);
  }
  v10 = (WrdEmbeddedTTFRecordTable *)operator new(0x20uLL);
  WrdEmbeddedTTFRecordTable::WrdEmbeddedTTFRecordTable(v10);
  this[26] = v10;
  v11 = (WrdDocumentFileRecord *)operator new(0x50uLL);
  WrdDocumentFileRecord::WrdDocumentFileRecord(v11);
  this[27] = v11;
  WrdParser::parse(this[4], v11);
  *((_DWORD *)this + 156) = 0;
  result = NAN;
  *((_OWORD *)this + 38) = xmmword_22A4C1930;
  return result;
}

void sub_22A15D2BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdParser::parse(WrdParser *this, WrdFileInformationBlock *a2)
{
  uint64_t v3;
  unsigned int v5;
  int v6;
  __int16 v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *exception;

  v3 = *((_QWORD *)this + 14);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  if (*((_BYTE *)this + 248))
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 32, 0);
  else
    WrdParser::parse(this, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  WrdFileInformationBlock::setCountOfShorts(a2, v5);
  if (*((_WORD *)a2 + 20))
  {
    v6 = 0;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 72))(*((_QWORD *)this + 14));
      WrdFileInformationBlock::setValueFromShortArray((uint64_t)a2, (unsigned __int16)v6++, v7);
    }
    while (*((unsigned __int16 *)a2 + 20) > (__int16)v6);
  }
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  WrdFileInformationBlock::setCountOfLongs(a2, v8);
  if (*((_WORD *)a2 + 28))
  {
    v9 = 0;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14));
      WrdFileInformationBlock::setValueFromLongArray((uint64_t)a2, (unsigned __int16)v9++, v10);
    }
    while (*((unsigned __int16 *)a2 + 28) > (__int16)v9);
  }
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
  WrdFileInformationBlock::setCountOfFCLCBs(a2, v11);
  if (*((_WORD *)a2 + 36))
  {
    v12 = 0;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14));
      *(_DWORD *)WrdFileInformationBlock::getFCLCB(a2, (unsigned __int16)v12) = v13;
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 104))(*((_QWORD *)this + 14));
      *(_DWORD *)(WrdFileInformationBlock::getFCLCB(a2, (unsigned __int16)v12++) + 4) = v14;
    }
    while (*((unsigned __int16 *)a2 + 36) > (__int16)v12);
  }
}

void WrdFileInformationBlock::setCountOfShorts(WrdFileInformationBlock *this, unsigned int a2)
{
  uint64_t v3;
  void *v4;

  *((_WORD *)this + 20) = a2;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    MEMORY[0x22E2DD3F0](v3, 0x1000C80BDFB0063);
    a2 = *((unsigned __int16 *)this + 20);
  }
  *((_QWORD *)this + 6) = 0;
  v4 = operator new[](2 * a2);
  *((_QWORD *)this + 6) = v4;
  bzero(v4, 2 * *((unsigned __int16 *)this + 20));
}

uint64_t WrdFileInformationBlock::setValueFromShortArray(uint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v3;
  _DWORD *exception;

  v3 = *(_QWORD *)(this + 48);
  if (!v3 || *(unsigned __int16 *)(this + 40) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  *(_WORD *)(v3 + 2 * a2) = a3;
  return this;
}

void WrdFileInformationBlock::setCountOfLongs(WrdFileInformationBlock *this, unsigned int a2)
{
  uint64_t v3;
  void *v4;

  *((_WORD *)this + 28) = a2;
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    MEMORY[0x22E2DD3F0](v3, 0x1000C8052888210);
    a2 = *((unsigned __int16 *)this + 28);
  }
  *((_QWORD *)this + 8) = 0;
  v4 = operator new[](4 * a2);
  *((_QWORD *)this + 8) = v4;
  bzero(v4, 4 * *((unsigned __int16 *)this + 28));
}

uint64_t WrdFileInformationBlock::setValueFromLongArray(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 64);
  if (v3)
  {
    if (*(unsigned __int16 *)(this + 56) > a2)
      *(_DWORD *)(v3 + 4 * a2) = a3;
  }
  return this;
}

void WrdFileInformationBlock::setCountOfFCLCBs(WrdFileInformationBlock *this, unsigned int a2)
{
  uint64_t v3;
  void *v4;

  *((_WORD *)this + 36) = a2;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    MEMORY[0x22E2DD3F0](v3, 0x1000C8000313F17);
    a2 = *((unsigned __int16 *)this + 36);
  }
  *((_QWORD *)this + 10) = 0;
  v4 = operator new[](8 * a2);
  *((_QWORD *)this + 10) = v4;
  bzero(v4, 8 * *((unsigned __int16 *)this + 36));
}

uint64_t WrdFileInformationBlock::getFCLCB(WrdFileInformationBlock *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 10);
  if (!v2 || *((unsigned __int16 *)this + 36) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return v2 + 8 * a2;
}

void WrdRdrText::WrdRdrText(WrdRdrText *this, SsrwOOStream *a2)
{
  *(_QWORD *)this = &off_24F3B4AA8;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
}

uint64_t WrdParser::parse(WrdParser *this, WrdRdrText *a2)
{
  _QWORD *v4;
  WrdClxGrpprls *v5;
  unsigned int started;

  started = WrdParser::startFCLCB(this, 0x21u);
  v4 = (_QWORD *)*((_QWORD *)this + 34);
  if (v4)
  {
    if (*v4)
      MEMORY[0x22E2DD3F0](*v4, 0x1000C8052888210);
    *v4 = 0;
    MEMORY[0x22E2DD408](v4, 0x1010C40A1D9428BLL);
  }
  *((_QWORD *)this + 34) = 0;
  v5 = (WrdClxGrpprls *)operator new(0x10uLL);
  *(_QWORD *)v5 = 0;
  *((_DWORD *)v5 + 2) = 0;
  *((_QWORD *)this + 34) = v5;
  WrdParser::parse(this, v5, &started);
  return WrdParser::parse(this, a2, started);
}

uint64_t WrdFileInformationBlock::getFCLCB(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2 || *(unsigned __int16 *)(a1 + 72) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return v2 + 8 * (unsigned __int16)a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdClxGrpprls *a2, unsigned int *a3)
{
  uint64_t result;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), *a3, 0);
  *((_WORD *)a2 + 5) = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v7 = 0;
  if ((_DWORD)result == 1)
  {
    v7 = 0;
    do
    {
      v8 = *((unsigned __int16 *)a2 + 4);
      v9 = *((unsigned __int16 *)a2 + 5);
      if (v8 <= v9)
      {
        WrdClxGrpprls::reallocGrpprls((const void **)a2, (unsigned __int16)(v8 + 8));
        v9 = *((unsigned __int16 *)a2 + 5);
      }
      v10 = v7 + 1 + *a3;
      v11 = *(_QWORD *)a2;
      *((_WORD *)a2 + 5) = v9 + 1;
      *(_DWORD *)(v11 + 4 * v9) = v10;
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
      v13 = v7 + v12;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v12, 1);
      v7 = v13 + 3;
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    }
    while ((_DWORD)result == 1);
  }
  *a3 += v7;
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdRdrText *a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t result;
  int v10;
  _DWORD *exception;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), a3, 0);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16)) != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 2001;
  }
  WrdParser::parse(this, (WrdRdrText *)((char *)a2 + 72));
  v5 = 0;
  v6 = 0;
  v7 = (char *)this + 160;
  do
  {
    v8 = (char *)a2 + 4 * v5;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 10) = WrdFileInformationBlock::getNumberOfCharInText((uint64_t)v7, v5);
    result = WrdFileInformationBlock::getNumberOfCharInText((uint64_t)v7, v5);
    v6 += result;
    v10 = v5 << 16;
    v5 = (__int16)v5 + 1;
  }
  while (v10 < 458752);
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdPieceTable *a2)
{
  unsigned int v2;
  int v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _DWORD *exception;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
  WrdPieceTable::setCPCount(a2, (v5 + 8) / 0xCu);
  if (!*(_DWORD *)a2)
    goto LABEL_6;
  v6 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
    if (v6 >= *(unsigned int *)a2)
      goto LABEL_12;
    *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v6++) = result;
    v8 = *(unsigned int *)a2;
  }
  while (v6 < v8);
  if ((_DWORD)v8 != 1)
  {
LABEL_6:
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
      if (v10 >= (*(_DWORD *)a2 - 1))
        break;
      v13 = (v12 >> 1) ^ 0x20000000;
      if ((v12 & 0x40000000) == 0)
        v13 = v12;
      v2 = v2 & 0xFFFFFFFC | (2 * (v11 & 1)) | ((v12 & 0x40000000) == 0);
      v14 = *((_QWORD *)a2 + 2) + v9;
      *(_DWORD *)v14 = v13;
      *(_WORD *)(v14 + 4) = result;
      *(_BYTE *)(v14 + 6) = v2;
      ++v10;
      v9 += 8;
      if (v10 >= (*(_DWORD *)a2 - 1))
        return result;
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

char *WrdPieceTable::setCPCount(WrdPieceTable *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  *(_DWORD *)this = a2;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    MEMORY[0x22E2DD3F0](v3, 0x1000C8052888210);
    a2 = *(_DWORD *)this;
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 1) = operator new[](4 * a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C80C899CFE7);
  *((_QWORD *)this + 2) = 0;
  v5 = (*(_DWORD *)this - 1);
  result = (char *)operator new[](8 * v5);
  if ((_DWORD)v5)
  {
    v7 = (uint64_t)result;
    do
    {
      *(_DWORD *)v7 = 0;
      *(_WORD *)(v7 + 4) = 0;
      *(_BYTE *)(v7 + 6) &= 0xFCu;
      v7 += 8;
    }
    while ((char *)v7 != &result[8 * v5]);
  }
  *((_QWORD *)this + 2) = result;
  return result;
}

uint64_t WrdFileInformationBlock::getNumberOfCharInText(uint64_t a1, __int16 a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2 && *(unsigned __int16 *)(a1 + 56) > (unsigned __int16)(a2 + 3))
    return *(unsigned int *)(v2 + 4 * (unsigned __int16)(a2 + 3));
  else
    return 0;
}

void WrdBinTable::WrdBinTable(WrdBinTable *this)
{
  *(_QWORD *)this = 0xFFFFFFFFLL;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
}

void WrdParser::parse(WrdParser *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t started;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  started = WrdParser::startFCLCB(a1, a3);
  if (HIDWORD(started) > 3)
  {
    v6 = HIDWORD(started) - 4;
    v7 = (HIDWORD(started) - 4) >> 3;
    WrdBinTable::setNumberOfBTEs((WrdBinTable *)a2, v7);
    v8 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 16) + v8) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 16) + 104))(*((_QWORD **)a1 + 16));
      v8 += 4;
    }
    while (((v6 >> 1) & 0x7FFFFFFC) + 4 != v8);
    if (v6 >= 8)
    {
      v9 = 0;
      if (v7 <= 1)
        v10 = 1;
      else
        v10 = v7;
      v11 = 4 * v10;
      do
      {
        v12 = (*(unsigned __int16 (**)(_QWORD *))(**((_QWORD **)a1 + 16) + 104))(*((_QWORD **)a1 + 16));
        *(_DWORD *)(*(_QWORD *)(a2 + 40) + v9) = v12;
        if (v12 < *(_DWORD *)a2)
          *(_DWORD *)a2 = v12;
        if (v12 > *(_DWORD *)(a2 + 4))
          *(_DWORD *)(a2 + 4) = v12;
        v9 += 4;
      }
      while (v11 != v9);
    }
  }
  else
  {
    WrdBinTable::setNumberOfBTEs((WrdBinTable *)a2, 0);
  }
}

void WrdBinTable::setNumberOfBTEs(WrdBinTable *this, unsigned int a2)
{
  std::vector<int,ChAllocator<int>>::resize((uint64_t)this + 16, a2 + 1);
  std::vector<int,ChAllocator<int>>::resize((uint64_t)this + 40, a2);
  *((_DWORD *)this + 2) = a2;
}

void WrdPAPXFKP::WrdPAPXFKP(WrdPAPXFKP *this)
{
  _QWORD *v1;

  WrdFormattedDiskPage::WrdFormattedDiskPage(this);
  *v1 = &off_24F3B38F0;
}

void WrdFormattedDiskPage::WrdFormattedDiskPage(WrdFormattedDiskPage *this)
{
  *(_QWORD *)this = off_24F3B3400;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = -1;
  *((_QWORD *)this + 4) = 0;
}

double WrdFormattedDiskPage::init(WrdFormattedDiskPage *this)
{
  _OWORD *v2;
  double result;

  if (!*((_QWORD *)this + 2))
  {
    v2 = operator new[](0x200uLL);
    *((_QWORD *)this + 2) = v2;
    result = 0.0;
    *v2 = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[9] = 0u;
    v2[10] = 0u;
    v2[11] = 0u;
    v2[12] = 0u;
    v2[13] = 0u;
    v2[14] = 0u;
    v2[15] = 0u;
    v2[16] = 0u;
    v2[17] = 0u;
    v2[18] = 0u;
    v2[19] = 0u;
    v2[20] = 0u;
    v2[21] = 0u;
    v2[22] = 0u;
    v2[23] = 0u;
    v2[24] = 0u;
    v2[25] = 0u;
    v2[26] = 0u;
    v2[27] = 0u;
    v2[28] = 0u;
    v2[29] = 0u;
    v2[30] = 0u;
    v2[31] = 0u;
  }
  return result;
}

void WrdCHPXFKP::WrdCHPXFKP(WrdCHPXFKP *this)
{
  _QWORD *v1;

  WrdFormattedDiskPage::WrdFormattedDiskPage(this);
  *v1 = &off_24F3B2950;
}

void WrdSectionDescriptorTable::WrdSectionDescriptorTable(WrdSectionDescriptorTable *this)
{
  *(_QWORD *)this = &off_24F3B3C30;
  *((_WORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *((_DWORD *)this + 7) = 0;
}

void WrdParser::parse(WrdParser *this, WrdSectionDescriptorTable *a2)
{
  uint64_t started;
  unsigned int v5;
  int i;
  int v7;
  int v8;
  int j;
  WrdSectionDescriptor *SectionDescriptorReference;
  int v11;

  started = WrdParser::startFCLCB(this, 6u);
  if (HIDWORD(started) > 3)
  {
    v5 = (unsigned __int16)((HIDWORD(started) + 1048572) >> 4);
    WrdSectionDescriptorTable::setNumberOfSections(a2, v5);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
        WrdSectionDescriptorTable::setCP((uint64_t)a2, (unsigned __int16)i, v7);
      }
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
      EshRecord::setDataLength((uint64_t)a2, v8);
      for (j = 0; j != v5; ++j)
      {
        SectionDescriptorReference = (WrdSectionDescriptor *)WrdSectionDescriptorTable::getSectionDescriptorReference(a2, (unsigned __int16)j);
        WrdParser::parse(this, SectionDescriptorReference);
      }
    }
    else
    {
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
      EshRecord::setDataLength((uint64_t)a2, v11);
    }
  }
  else
  {
    WrdSectionDescriptorTable::setNumberOfSections(a2, 0);
  }
}

void WrdSectionDescriptorTable::setNumberOfSections(WrdSectionDescriptorTable *this, unsigned int a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  WrdSectionDescriptorTable::cleanup(this);
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    v4 = operator new[](4 * a2);
    *((_QWORD *)this + 2) = v4;
    bzero(v4, 4 * *((unsigned __int16 *)this + 4));
    v5 = *((unsigned __int16 *)this + 4);
    v6 = 8 * v5;
    v7 = (char *)operator new[](8 * v5);
    if (v5)
    {
      v8 = 0;
      do
      {
        WrdSectionDescriptor::WrdSectionDescriptor((WrdSectionDescriptor *)&v7[v8]);
        v8 += 8;
      }
      while (v6 != v8);
    }
    *((_QWORD *)this + 3) = v7;
  }
}

void sub_22A15DFA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t WrdSectionDescriptorTable::cleanup(WrdSectionDescriptorTable *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8000313F17);
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 4) = 0;
  return result;
}

void WrdSectionDescriptor::WrdSectionDescriptor(WrdSectionDescriptor *this)
{
  *(_QWORD *)this = -1;
}

uint64_t WrdSectionDescriptorTable::setCP(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 16);
  if (v3 && *(unsigned __int16 *)(this + 8) > a2)
  {
    *(_DWORD *)(v3 + 4 * a2) = a3;
    if (*(_DWORD *)(this + 12) <= a3)
      *(_DWORD *)(this + 12) = a3 + 1;
  }
  return this;
}

uint64_t WrdSectionDescriptorTable::getSectionDescriptorReference(WrdSectionDescriptorTable *this, unsigned int a2)
{
  return *((_QWORD *)this + 3) + 8 * a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdSectionDescriptor *a2)
{
  uint64_t result;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2, 1);
  *(_DWORD *)a2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2, 1);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 1) = result;
  return result;
}

void WrdEmbeddedTTFRecordTable::WrdEmbeddedTTFRecordTable(WrdEmbeddedTTFRecordTable *this)
{
  *(_QWORD *)this = &off_24F3B2CB0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t WrdParser::parse(WrdParser *this, WrdDocumentFileRecord *a2)
{
  uint64_t result;
  unint64_t started;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  _WORD *v13;
  unsigned int v14;

  result = (uint64_t)WrdDocumentFileRecord::clear(a2);
  if (*((unsigned __int16 *)this + 116) >= 0x63u)
  {
    started = WrdParser::startFCLCB(this, 0x63u);
    v6 = HIDWORD(started);
    v7 = HIDWORD(started) + started;
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
    if ((int)result + 4 <= v7)
    {
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16)) == 8)
      {
        v14 = v6 - 4;
        *((_DWORD *)a2 + 10) = 0;
        OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 32), v6 - 4);
        (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 16) + 56))(*((_QWORD *)this + 16), *((_QWORD *)a2 + 7), &v14);
        v8 = v14;
        *((_DWORD *)a2 + 10) = v14;
        result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a2 + 32), v8);
        *((_DWORD *)a2 + 12) = v8;
      }
      else
      {
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
        if ((int)result + 4 <= v7)
        {
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
          if ((_DWORD)result == 6)
          {
            result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
            if ((int)result + 4 <= v7)
            {
              result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
              v9 = 4 * result;
              if ((_DWORD)result)
                v10 = v9 > result;
              else
                v10 = 0;
              if (v10)
              {
                v11 = result;
                v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) + v9;
                result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
                if (v12 >= result)
                {
                  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
                  if (result + v9 <= v7)
                  {
                    v13 = operator new(4uLL);
                    *(_DWORD *)v13 = 0;
                    do
                    {
                      *v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
                      v13[1] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 1, 1);
                      WrdDocumentFileRecord::appendListToStyleIndex(a2, v13);
                      --v11;
                    }
                    while (v11);
                    JUMPOUT(0x22E2DD408);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_22A15E328(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

OcBinaryData *WrdDocumentFileRecord::clear(WrdDocumentFileRecord *this)
{
  *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
  return OcBinaryData::removeBuffer((OcBinaryData *)((char *)this + 32));
}

void ***WrdObjectFactory::createObject(uint64_t a1, int a2)
{
  WrdAnnotationReferenceDescriptor *v3;
  WrdDateTime *v4;
  char *v5;
  WrdAutoNumberLevelDescriptor *v6;
  WrdShading *v7;
  WrdBorder *v8;
  WrdDateTime *v9;
  WrdDateTime *v10;
  WrdDateTime *v11;
  WrdDateTime *v12;
  WrdDateTime *v13;
  WrdCharacterProperties *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  WrdDOPTypography *v20;
  WrdDrawingObjectGrid *v21;
  WrdAutoSummaryInfo *v22;
  WrdDateTime *v23;
  WrdDateTime *v24;
  WrdDateTime *v25;
  WrdFieldDescriptor *v26;
  WrdListLevelFormatOverride *v27;
  uint64_t v28;
  uint64_t v29;
  WrdListLevelFormat *v30;
  WrdParagraphProperties *v31;
  WrdCharacterProperties *v32;
  WrdListLevelFormat *v33;
  WrdAutoNumberLevelDescriptor *v34;
  WrdBorder *v35;
  WrdBorder *v36;
  WrdBorder *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WrdNumberRevisionMarkData *v42;
  WrdTabDescriptor *v43;
  WrdParagraphProperties *v44;
  char *v45;
  WrdBorder *v46;
  WrdBorder *v47;
  WrdBorder *v48;
  WrdBorder *v49;
  WrdPictureProperties *v50;
  WrdBorder *v51;
  WrdBorder *v52;
  WrdBorder *v53;
  WrdBorder *v54;
  WrdDateTime *v55;
  WrdOutlineListData *v56;
  WrdSectionProperties *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WrdDateTime *v69;
  WrdStyle *v70;
  WrdParagraphProperties *v71;
  WrdParagraphProperties *v72;
  WrdCharacterProperties *v73;
  WrdCharacterProperties *v74;
  WrdTableProperties *v75;
  WrdShading *v76;
  WrdBorder *v77;
  WrdBorder *v78;
  WrdBorder *v79;
  WrdBorder *v80;
  WrdBorder *v81;
  WrdBorder *v82;
  WrdBorder *v83;
  WrdBorder *v84;
  WrdBorder *v85;
  WrdBorder *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WrdDateTime *v91;
  WrdTableProperties *v92;
  WrdDateTime *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WrdStyle *v104;
  _DWORD *exception;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  WrdBorder *v111;
  WrdShading *v112;
  WrdShading *v113;
  WrdLineSpaceDescriptor *v114;
  WrdTableCellDescriptor *v115;
  WrdShading *v116;
  WrdTableAutoformatLookSpecifier *v117;

  switch(a2)
  {
    case 0:
      v3 = (WrdAnnotationReferenceDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 1);
      v4 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v5 = (char *)operator new(0x28uLL);
      WrdAnnotation::WrdAnnotation((WrdAnnotation *)v5, v3, v4);
      goto LABEL_133;
    case 1:
      v5 = (char *)operator new(0x28uLL);
      WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor((WrdAnnotationReferenceDescriptor *)v5);
      goto LABEL_133;
    case 2:
      v5 = (char *)operator new(0x20uLL);
      WrdAnnotationTable::WrdAnnotationTable((WrdAnnotationTable *)v5);
      goto LABEL_133;
    case 3:
      v5 = (char *)operator new(0x38uLL);
      WrdAssociatedStrings::WrdAssociatedStrings((WrdAssociatedStrings *)v5);
      goto LABEL_133;
    case 4:
      v5 = (char *)operator new(0x30uLL);
      WrdAutoNumberLevelDescriptor::WrdAutoNumberLevelDescriptor((WrdAutoNumberLevelDescriptor *)v5);
      goto LABEL_133;
    case 5:
      v6 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 4);
      v5 = (char *)operator new(0x30uLL);
      WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor((WrdAutoNumberListDescriptor *)v5, v6);
      goto LABEL_133;
    case 6:
      v5 = (char *)operator new(0x18uLL);
      WrdAutoSummaryInfo::WrdAutoSummaryInfo((WrdAutoSummaryInfo *)v5);
      goto LABEL_133;
    case 7:
      v5 = (char *)operator new(0x40uLL);
      WrdBookmark::WrdBookmark((WrdBookmark *)v5);
      goto LABEL_133;
    case 8:
      v5 = (char *)operator new(0x28uLL);
      WrdBookmarkTable::WrdBookmarkTable((WrdBookmarkTable *)v5);
      goto LABEL_133;
    case 9:
      v5 = (char *)operator new(0x20uLL);
      WrdBorder::WrdBorder((WrdBorder *)v5);
      goto LABEL_133;
    case 10:
      v7 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 49);
      v8 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v9 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v10 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v11 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v12 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v13 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v14 = (WrdCharacterProperties *)operator new(0x160uLL);
      WrdCharacterProperties::WrdCharacterProperties(v14, v7, v8, v9, v10, v11, v12, v13);
      if (!v14)
        goto LABEL_136;
      return &v14->var1;
    case 11:
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 10);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 10);
      v17 = (char *)operator new(0x28uLL);
      v5 = v17;
      if (v15)
        v18 = v15 - 8;
      else
        v18 = 0;
      if (v16)
        v19 = v16 - 8;
      else
        v19 = 0;
      WrdCharacterTextRun::WrdCharacterTextRun(v17, 0, 0, v18, v19);
      goto LABEL_133;
    case 12:
      v5 = (char *)operator new(0x20uLL);
      WrdCPTable::WrdCPTable((WrdCPTable *)v5);
      goto LABEL_133;
    case 13:
      v5 = (char *)operator new(0x20uLL);
      WrdCPTableHeaders::WrdCPTableHeaders((WrdCPTableHeaders *)v5);
      goto LABEL_133;
    case 14:
      v5 = (char *)operator new(0x18uLL);
      WrdDateTime::WrdDateTime((WrdDateTime *)v5);
      goto LABEL_133;
    case 15:
      v20 = (WrdDOPTypography *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 16);
      v21 = (WrdDrawingObjectGrid *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 17);
      v22 = (WrdAutoSummaryInfo *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 6);
      v23 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v24 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v25 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v5 = (char *)operator new(0x108uLL);
      WrdDocumentProperties::WrdDocumentProperties((WrdDocumentProperties *)v5, v20, v21, v22, v23, v24, v25);
      goto LABEL_133;
    case 16:
      v5 = (char *)operator new(0x48uLL);
      WrdDOPTypography::WrdDOPTypography((WrdDOPTypography *)v5);
      goto LABEL_133;
    case 17:
      v5 = (char *)operator new(0x18uLL);
      WrdDrawingObjectGrid::WrdDrawingObjectGrid((WrdDrawingObjectGrid *)v5);
      goto LABEL_133;
    case 18:
      v5 = (char *)operator new(0x10uLL);
      WrdDropCap::WrdDropCap((WrdDropCap *)v5);
      goto LABEL_133;
    case 19:
      v5 = (char *)operator new(0x40uLL);
      *(_QWORD *)v5 = &off_24F3B2C28;
      OcBinaryData::OcBinaryData((OcBinaryData *)(v5 + 8));
      *((_WORD *)v5 + 28) = 0;
      return (void ***)v5;
    case 20:
      v5 = (char *)operator new(0x28uLL);
      WrdEmbeddedTrueTypeFontTable::WrdEmbeddedTrueTypeFontTable((WrdEmbeddedTrueTypeFontTable *)v5);
      goto LABEL_133;
    case 21:
      v5 = (char *)operator new(0x18uLL);
      WrdFieldDescriptor::WrdFieldDescriptor((WrdFieldDescriptor *)v5);
      goto LABEL_133;
    case 22:
      v26 = (WrdFieldDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 21);
      v5 = (char *)operator new(0x18uLL);
      WrdFieldPosition::WrdFieldPosition((WrdFieldPosition *)v5, v26);
      goto LABEL_133;
    case 23:
      v5 = (char *)operator new(0x28uLL);
      WrdFieldPositionTable::WrdFieldPositionTable((uint64_t)v5, 0);
      goto LABEL_133;
    case 24:
      v5 = (char *)operator new(0x38uLL);
      WrdFileShapeAddress::WrdFileShapeAddress((WrdFileShapeAddress *)v5);
      goto LABEL_133;
    case 25:
      v5 = (char *)operator new(0x28uLL);
      WrdFileShapeAddressTable::WrdFileShapeAddressTable((WrdFileShapeAddressTable *)v5);
      goto LABEL_133;
    case 26:
      v5 = (char *)operator new(0x58uLL);
      WrdFontFamilyName::WrdFontFamilyName((WrdFontFamilyName *)v5);
      WrdFontFamilyName::init((WrdFontFamilyName *)v5);
      goto LABEL_133;
    case 27:
      v5 = (char *)operator new(0x20uLL);
      WrdFontFamilyNameTable::WrdFontFamilyNameTable((WrdFontFamilyNameTable *)v5);
      goto LABEL_133;
    case 28:
      v5 = (char *)operator new(0x168uLL);
      WrdFormFieldBinaryData::WrdFormFieldBinaryData((WrdFormFieldBinaryData *)v5);
      goto LABEL_133;
    case 29:
      v5 = (char *)operator new(0x38uLL);
      *(_QWORD *)v5 = &off_24F3B34A8;
      OcBinaryData::OcBinaryData((OcBinaryData *)(v5 + 8));
      return (void ***)v5;
    case 30:
      v5 = (char *)operator new(0x10uLL);
      WrdLineSpaceDescriptor::WrdLineSpaceDescriptor((WrdLineSpaceDescriptor *)v5);
      goto LABEL_133;
    case 31:
      v5 = (char *)operator new(0x38uLL);
      WrdListFormat::WrdListFormat((WrdListFormat *)v5);
      WrdListFormat::init(v5);
      goto LABEL_133;
    case 32:
      v27 = (WrdListLevelFormatOverride *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 36);
      v5 = (char *)operator new(0x38uLL);
      WrdListFormatOverride::WrdListFormatOverride((WrdListFormatOverride *)v5, v27);
      goto LABEL_133;
    case 33:
      v5 = (char *)operator new(0x20uLL);
      WrdListFormatOverrideTable::WrdListFormatOverrideTable((WrdListFormatOverrideTable *)v5);
      goto LABEL_133;
    case 34:
      v5 = (char *)operator new(0x20uLL);
      WrdListFormatTable::WrdListFormatTable((WrdListFormatTable *)v5);
      goto LABEL_133;
    case 35:
      v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 41);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 10);
      v30 = (WrdListLevelFormat *)operator new(0x58uLL);
      v5 = (char *)v30;
      if (v28)
        v31 = (WrdParagraphProperties *)(v28 - 8);
      else
        v31 = 0;
      if (v29)
        v32 = (WrdCharacterProperties *)(v29 - 8);
      else
        v32 = 0;
      WrdListLevelFormat::WrdListLevelFormat(v30, v31, v32);
      goto LABEL_133;
    case 36:
      v33 = (WrdListLevelFormat *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 35);
      v5 = (char *)operator new(0x18uLL);
      WrdListLevelFormatOverride::WrdListLevelFormatOverride((WrdListLevelFormatOverride *)v5, v33);
      goto LABEL_133;
    case 37:
      v5 = (char *)operator new(0x18uLL);
      WrdNote::WrdNote((WrdNote *)v5);
      goto LABEL_133;
    case 38:
      v5 = (char *)operator new(0x28uLL);
      WrdNoteTable::WrdNoteTable((uint64_t)v5, 0);
      goto LABEL_133;
    case 39:
      v93 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v5 = (char *)operator new(0x48uLL);
      WrdNumberRevisionMarkData::WrdNumberRevisionMarkData((WrdNumberRevisionMarkData *)v5, v93);
      WrdNumberRevisionMarkData::init((WrdNumberRevisionMarkData *)v5);
      goto LABEL_133;
    case 40:
      v34 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 4);
      v5 = (char *)operator new(0x48uLL);
      WrdOutlineListData::WrdOutlineListData((WrdOutlineListData *)v5, v34);
      (*(void (**)(char *))(*(_QWORD *)v5 + 32))(v5);
      return (void ***)v5;
    case 41:
      v116 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 49);
      v114 = (WrdLineSpaceDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 30);
      v112 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 18);
      v111 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v35 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v36 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v37 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 5);
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v42 = (WrdNumberRevisionMarkData *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 39);
      v43 = (WrdTabDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 58);
      v44 = (WrdParagraphProperties *)operator new(0x130uLL);
      *(_QWORD *)&v109 = v40;
      *((_QWORD *)&v109 + 1) = v41;
      *(_QWORD *)&v107 = v38;
      *((_QWORD *)&v107 + 1) = v39;
      WrdParagraphProperties::WrdParagraphProperties(v44, v116, v114, (WrdDropCap *)v112, v111, v35, v36, v37, v107, v109, v42, v43);
      if (v44)
        v5 = (char *)v44 + 8;
      else
        v5 = 0;
      if (v44)
        v45 = v5 - 8;
      else
        v45 = 0;
      (*(void (**)(char *))(*(_QWORD *)v45 + 32))(v45);
      goto LABEL_133;
    case 42:
      v94 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 41);
      v95 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 41);
      v96 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 61);
      v97 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 61);
      v98 = (char *)operator new(0x38uLL);
      v5 = v98;
      if (v94)
        v99 = v94 - 8;
      else
        v99 = 0;
      if (v95)
        v100 = v95 - 8;
      else
        v100 = 0;
      if (v96)
        v101 = v96 - 8;
      else
        v101 = 0;
      if (v97)
        v102 = v97 - 8;
      else
        v102 = 0;
      WrdParagraphTextRun::WrdParagraphTextRun((uint64_t)v98, 0, 0, v99, v100, v101, v102);
      goto LABEL_133;
    case 43:
      v5 = (char *)operator new(0x38uLL);
      *(_QWORD *)v5 = &off_24F3B3A40;
      OcBinaryData::OcBinaryData((OcBinaryData *)(v5 + 8));
      return (void ***)v5;
    case 44:
      v5 = (char *)operator new(0x20uLL);
      *(_QWORD *)v5 = &off_24F3B3A80;
      CsString::CsString((CsString *)(v5 + 8));
      return (void ***)v5;
    case 45:
      v46 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v47 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v48 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v49 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v50 = (WrdPictureProperties *)operator new(0x70uLL);
      WrdPictureProperties::WrdPictureProperties(v50, v46, v47, v48, v49);
      if (!v50)
        goto LABEL_136;
      return (void ***)((char *)v50 + 8);
    case 46:
      v5 = (char *)operator new(0x50uLL);
      WrdRoutingRecipient::WrdRoutingRecipient((WrdRoutingRecipient *)v5);
      goto LABEL_133;
    case 47:
      v51 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v52 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v53 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v54 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v55 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v56 = (WrdOutlineListData *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 40);
      v57 = (WrdSectionProperties *)operator new(0x148uLL);
      WrdSectionProperties::WrdSectionProperties(v57, v51, v52, v53, v54, v55, v56);
      if (!v57)
        goto LABEL_136;
      return (void ***)((char *)v57 + 8);
    case 48:
      v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 47);
      v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 47);
      v60 = (char *)operator new(0x28uLL);
      v5 = v60;
      if (v58)
        v61 = v58 - 8;
      else
        v61 = 0;
      if (v59)
        v62 = v59 - 8;
      else
        v62 = 0;
      WrdSectionTextRun::WrdSectionTextRun((uint64_t)v60, 0, 0, v61, v62);
      goto LABEL_133;
    case 49:
      v5 = (char *)operator new(0x28uLL);
      WrdShading::WrdShading((WrdShading *)v5);
      goto LABEL_133;
    case 50:
      v5 = (char *)operator new(0x28uLL);
      WrdStory::WrdStory((WrdStory *)v5);
      goto LABEL_133;
    case 51:
      v5 = (char *)operator new(0x28uLL);
      WrdStoryTable::WrdStoryTable((uint64_t)v5, 0);
      goto LABEL_133;
    case 52:
      v5 = (char *)operator new(0x20uLL);
      WrdStringTable::WrdStringTable((WrdStringTable *)v5);
      goto LABEL_133;
    case 53:
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 52);
      v5 = (char *)operator new(0x18uLL);
      WrdStringTypedTable::WrdStringTypedTable((uint64_t)v5, 36, v63);
      goto LABEL_133;
    case 54:
      v5 = (char *)operator new(0x18uLL);
      WrdStringWithDataTable::WrdStringWithDataTable((WrdStringWithDataTable *)v5);
      goto LABEL_133;
    case 55:
      v103 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 54);
      v5 = (char *)operator new(0x18uLL);
      WrdStringWithDataTypedTable::WrdStringWithDataTypedTable((uint64_t)v5, 51, v103);
      goto LABEL_133;
    case 56:
      v64 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 41);
      v65 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 41);
      v66 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 10);
      v67 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 10);
      v68 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 61);
      v69 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v70 = (WrdStyle *)operator new(0xA8uLL);
      v5 = (char *)v70;
      if (v64)
        v71 = (WrdParagraphProperties *)(v64 - 8);
      else
        v71 = 0;
      if (v65)
        v72 = (WrdParagraphProperties *)(v65 - 8);
      else
        v72 = 0;
      if (v66)
        v73 = (WrdCharacterProperties *)(v66 - 8);
      else
        v73 = 0;
      if (v67)
        v74 = (WrdCharacterProperties *)(v67 - 8);
      else
        v74 = 0;
      if (v68)
        v75 = (WrdTableProperties *)(v68 - 8);
      else
        v75 = 0;
      WrdStyle::WrdStyle(v70, v71, v72, v73, v74, v75, v69);
      goto LABEL_133;
    case 57:
      v104 = (WrdStyle *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 56);
      v5 = (char *)operator new(0x170uLL);
      WrdStyleSheet::WrdStyleSheet((WrdStyleSheet *)v5, v104);
      goto LABEL_133;
    case 58:
      v5 = (char *)operator new(0x10uLL);
      WrdTabDescriptor::WrdTabDescriptor((WrdTabDescriptor *)v5);
      goto LABEL_133;
    case 59:
      v5 = (char *)operator new(0x10uLL);
      WrdTableAutoformatLookSpecifier::WrdTableAutoformatLookSpecifier((WrdTableAutoformatLookSpecifier *)v5);
      goto LABEL_133;
    case 60:
      v76 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 49);
      v77 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v78 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v79 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v80 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v81 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v82 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v5 = (char *)operator new(0x88uLL);
      WrdTableCellDescriptor::WrdTableCellDescriptor((WrdTableCellDescriptor *)v5, v76, v77, v78, v79, v80, v81, v82);
      goto LABEL_133;
    case 61:
      v117 = (WrdTableAutoformatLookSpecifier *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 59);
      v115 = (WrdTableCellDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 60);
      v113 = (WrdShading *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 49);
      v83 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v84 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v85 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v86 = (WrdBorder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v87 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v88 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v90 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 9);
      v91 = (WrdDateTime *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, 14);
      v92 = (WrdTableProperties *)operator new(0x190uLL);
      *((_QWORD *)&v110 + 1) = v90;
      *((_QWORD *)&v108 + 1) = v88;
      *(_QWORD *)&v110 = v89;
      *(_QWORD *)&v108 = v87;
      WrdTableProperties::WrdTableProperties(v92, v117, v115, v113, v83, v84, v85, v86, v108, v110, v91);
      if (!v92)
        goto LABEL_136;
      return (void ***)((char *)v92 + 8);
    case 62:
      v5 = (char *)operator new(0x40uLL);
      WrdText::WrdText((WrdText *)v5);
      goto LABEL_133;
    case 63:
      v5 = (char *)operator new(0x18uLL);
      *(_QWORD *)v5 = &off_24F3B1BC0;
      return (void ***)v5;
    case 64:
      v5 = (char *)operator new(0x28uLL);
      WrdUserRestrictionTable::WrdUserRestrictionTable((WrdUserRestrictionTable *)v5);
      goto LABEL_133;
    case 65:
      v5 = (char *)operator new(0x18uLL);
      WrdWorkBook::WrdWorkBook((WrdWorkBook *)v5);
      goto LABEL_133;
    case 66:
      v5 = (char *)operator new(0x40uLL);
      WrdWorkBookTable::WrdWorkBookTable((WrdWorkBookTable *)v5);
      goto LABEL_133;
    case 67:
      v5 = (char *)operator new(0x40uLL);
      WrdVariable::WrdVariable((WrdVariable *)v5);
      goto LABEL_133;
    case 68:
      v5 = (char *)operator new(0x20uLL);
      WrdVariableTable::WrdVariableTable((WrdVariableTable *)v5);
      goto LABEL_133;
    case 69:
      v5 = (char *)operator new(0x20uLL);
      WrdVersionInfoTable::WrdVersionInfoTable((WrdVersionInfoTable *)v5);
      goto LABEL_133;
    case 70:
      v5 = (char *)operator new(0xC8uLL);
      WrdCustomization::WrdCustomization((WrdCustomization *)v5);
      goto LABEL_133;
    case 71:
      v5 = (char *)operator new(0x28uLL);
      WrdXmlAttribute::WrdXmlAttribute((WrdXmlAttribute *)v5);
      goto LABEL_133;
    case 72:
      v5 = (char *)operator new(0x20uLL);
      WrdXmlElementTable::WrdXmlElementTable((WrdXmlElementTable *)v5);
      goto LABEL_133;
    case 73:
      v5 = (char *)operator new(0x38uLL);
      WrdXmlElement::WrdXmlElement((WrdXmlElement *)v5);
      goto LABEL_133;
    case 74:
      v5 = (char *)operator new(0x20uLL);
      WrdXmlSchemaTable::WrdXmlSchemaTable((WrdXmlSchemaTable *)v5);
      goto LABEL_133;
    case 75:
      v5 = (char *)operator new(0x50uLL);
      WrdXmlSchema::WrdXmlSchema((WrdXmlSchema *)v5);
LABEL_133:
      if (!v5)
        goto LABEL_136;
      return (void ***)v5;
    default:
      ChLogFunction("Unknown object type passed to WrdObjectFactory\n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Model/WrdObjectFactory.cpp", 547);
LABEL_136:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1001;
  }
}

void sub_22A15F5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  operator delete(v20);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

uint64_t WrdNoteTable::WrdNoteTable(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24F3B37E8;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdNoteTable *a2)
{
  WrdNoteReferencePositionTable *v4;
  WrdCPTable *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  OcCustomProperty *v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  BOOL v17;
  int v18;

  v4 = (WrdNoteReferencePositionTable *)operator new(0x28uLL);
  WrdNoteReferencePositionTable::WrdNoteReferencePositionTable(v4);
  v5 = (WrdCPTable *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 12);
  WrdBookmarkTable::clear(a2);
  WrdParser::parse(*((WrdParser **)this + 4), v4, *((_DWORD *)a2 + 2));
  v6 = *((_DWORD *)a2 + 2);
  if (!v6)
  {
    v7 = 3;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    v7 = 47;
LABEL_5:
    WrdParser::parse(*((WrdParser **)this + 4), v5, v7);
    goto LABEL_7;
  }
  ChLogFunction("Unknown note type \n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdBinaryReader.cpp", 939);
LABEL_7:
  v8 = *((unsigned __int16 *)v4 + 16);
  if (*((_WORD *)v4 + 16))
  {
    v9 = 0;
    v10 = *((unsigned __int16 *)v4 + 4);
    v11 = (unsigned __int16)((*((_DWORD *)v5 + 4) - *((_DWORD *)v5 + 2)) >> 2) - 1;
    do
    {
      if ((uint64_t)v9 >= v11 || v9 >= v10)
        break;
      v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 37);
      v13 = (OcCustomProperty *)v12;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v9);
      v14 = (_DWORD *)(*((_QWORD *)v5 + 1) + 4 * v9);
      *(_DWORD *)(v12 + 12) = *v14;
      v16 = v14;
      LODWORD(v14) = *v14;
      v15 = v16[1];
      v17 = __OFSUB__(v15, (_DWORD)v14);
      v18 = v15 - (_DWORD)v14;
      if (v18 < 0 != v17)
        v18 = 0;
      *(_DWORD *)(v12 + 16) = v18;
      *(_WORD *)(v12 + 20) = WrdNoteReferencePositionTable::getAuto(v4, (unsigned __int16)v9);
      OcCustomProperties::appendProperty(a2, v13);
      ++v9;
    }
    while (v8 != v9);
    goto LABEL_16;
  }
  if (v5)
LABEL_16:
    (*(void (**)(WrdCPTable *))(*(_QWORD *)v5 + 8))(v5);
  return (*(uint64_t (**)(WrdNoteReferencePositionTable *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A15FE88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void WrdNoteReferencePositionTable::WrdNoteReferencePositionTable(WrdNoteReferencePositionTable *this)
{
  *(_QWORD *)this = &off_24F3B37B0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
}

void WrdCPTable::WrdCPTable(WrdCPTable *this)
{
  *(_QWORD *)this = &off_24F3B2A00;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

_QWORD *WrdBookmarkTable::clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = this[2];
  if (((this[3] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[2];
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = v1[2];
    }
    while (v3 < ((unint64_t)(v1[3] - v2) >> 3));
  }
  v1[3] = v2;
  return this;
}

void *WrdParser::parse(WrdParser *a1, WrdNoteReferencePositionTable *a2, int a3)
{
  unsigned __int16 NoteReferencePositionFCLCBIndex;
  uint64_t started;
  void *result;
  unsigned int v8;
  int i;
  int v10;
  int j;
  __int16 v12;

  NoteReferencePositionFCLCBIndex = WrdFileInformationBlock::getNoteReferencePositionFCLCBIndex(a3);
  started = WrdParser::startFCLCB(a1, NoteReferencePositionFCLCBIndex);
  if (HIDWORD(started) <= 3)
    return WrdNoteReferencePositionTable::setNumberOfNoteReferences(a2, 0);
  v8 = (unsigned __int16)((HIDWORD(started) - 4) / 6u);
  WrdNoteReferencePositionTable::setNumberOfNoteReferences(a2, v8);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v10 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 16) + 96))(*((_QWORD **)a1 + 16));
      WrdNoteReferencePositionTable::setCP((uint64_t)a2, (unsigned __int16)i, v10);
    }
  }
  result = (void *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 16) + 96))(*((_QWORD **)a1 + 16));
  *((_DWORD *)a2 + 2) = (_DWORD)result;
  if (v8)
  {
    for (j = 0; j != v8; ++j)
    {
      v12 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 16) + 72))(*((_QWORD **)a1 + 16));
      result = (void *)WrdNoteReferencePositionTable::setAuto((uint64_t)a2, (unsigned __int16)j, v12);
    }
  }
  return result;
}

uint64_t WrdFileInformationBlock::getNoteReferencePositionFCLCBIndex(int a1)
{
  if (a1 == 1)
    return 46;
  else
    return 2;
}

void *WrdNoteReferencePositionTable::setNumberOfNoteReferences(WrdNoteReferencePositionTable *this, unsigned int a2)
{
  void *result;

  result = (void *)WrdNoteReferencePositionTable::cleanup(this);
  *((_WORD *)this + 16) = a2;
  if (a2)
  {
    *((_QWORD *)this + 2) = operator new[](4 * a2);
    result = operator new[](2 * *((unsigned __int16 *)this + 16));
    *((_QWORD *)this + 3) = result;
  }
  return result;
}

uint64_t WrdNoteReferencePositionTable::cleanup(WrdNoteReferencePositionTable *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
  return result;
}

void WrdParser::parse(WrdParser *a1, WrdCPTable *a2, unsigned int a3)
{
  unint64_t started;
  unsigned int v7;
  __int16 v8;
  unsigned __int16 v9;
  int v10;
  int v11;

  started = WrdParser::startFCLCB(a1, (unsigned __int16)a3);
  *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 1);
  v7 = HIDWORD(started) - 4;
  if (HIDWORD(started) < 4)
    return;
  if (a3 <= 0x3B && ((1 << a3) & 0xA010000000F0000) != 0)
  {
    v8 = v7 / 6;
  }
  else if ((a3 & 0xFFFFFFFE) == 0x28)
  {
    v8 = v7 / 0x1E;
  }
  else if ((a3 & 0xFFFFFFFD) == 0x38)
  {
    v8 = v7 / 0x1A;
  }
  else
  {
    if (a3 != 4)
    {
      if (a3 == 42 || a3 == 22)
      {
        v9 = ((HIDWORD(started) + 524284) >> 3) + 1;
      }
      else if (a3 - 75 <= 1)
      {
        v9 = (unsigned __int16)(WORD2(started) - 4) / 0xAu + 1;
      }
      else
      {
        v9 = started >> 34;
      }
      goto LABEL_6;
    }
    v8 = v7 / 0x22;
  }
  v9 = v8 + 1;
LABEL_6:
  v10 = v9;
  if (v9)
  {
    do
    {
      v11 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 16) + 96))(*((_QWORD **)a1 + 16));
      WrdCPTable::append(a2, v11);
      --v10;
    }
    while (v10);
  }
}

void WrdCPTable::~WrdCPTable(WrdCPTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3B2A00;
  v2 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = v2;
  if (v2)
    operator delete(v2);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B2A00;
  v2 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = v2;
  if (v2)
    operator delete(v2);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B2A00;
  v2 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = v2;
  if (v2)
    operator delete(v2);
}

void WrdNoteReferencePositionTable::~WrdNoteReferencePositionTable(WrdNoteReferencePositionTable *this)
{
  *(_QWORD *)this = &off_24F3B37B0;
  WrdNoteReferencePositionTable::cleanup(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B37B0;
  WrdNoteReferencePositionTable::cleanup(this);
}

void WrdAnnotationTable::WrdAnnotationTable(WrdAnnotationTable *this)
{
  *(_QWORD *)this = &off_24F3B2628;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdAnnotationTable *a2)
{
  unsigned __int16 *v4;
  WrdAnnotationDateTimeTable *v5;
  WrdCPTable *v6;
  WrdCPTable *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t Descriptor;
  uint64_t DateTime;
  _DWORD *exception;

  v4 = (unsigned __int16 *)operator new(0x18uLL);
  WrdAnnotationReferenceDescriptorTable::WrdAnnotationReferenceDescriptorTable((WrdAnnotationReferenceDescriptorTable *)v4);
  v5 = (WrdAnnotationDateTimeTable *)operator new(0x20uLL);
  WrdAnnotationDateTimeTable::WrdAnnotationDateTimeTable(v5);
  v6 = (WrdCPTable *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 12);
  v7 = (WrdCPTable *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 12);
  WrdAnnotationDateTimeTable::clear(a2);
  WrdParser::parse(*((WrdParser **)this + 4), v6, 4u);
  v8 = *((_QWORD *)this + 4);
  if (*(unsigned __int16 *)(v8 + 232) >= 0x70u)
  {
    v9 = *(_DWORD *)(WrdFileInformationBlock::getFCLCB(v8 + 160, 112) + 4);
    v8 = *((_QWORD *)this + 4);
    if (v9)
    {
      WrdParser::parse((SsrwOOStream **)v8, v5);
      v8 = *((_QWORD *)this + 4);
    }
  }
  WrdParser::parse((WrdParser *)v8, (WrdAnnotationReferenceDescriptorTable *)v4);
  WrdParser::parse(*((WrdParser **)this + 4), v7, 5u);
  v10 = v4[8];
  if (v4[8])
  {
    if (v10 >= (unsigned __int16)((*((_DWORD *)v7 + 4) - *((_DWORD *)v7 + 2)) >> 2))
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
    }
    v11 = 0;
    do
    {
      v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 0);
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v11);
      v13 = (_DWORD *)(*((_QWORD *)v7 + 1) + 4 * v11);
      *(_DWORD *)(v12 + 12) = *v13;
      *(_DWORD *)(v12 + 16) = v13[1] + ~*v13;
      Descriptor = WrdAnnotationReferenceDescriptorTable::getDescriptor((WrdAnnotationReferenceDescriptorTable *)v4, (unsigned __int16)v11);
      WrdAnnotationReferenceDescriptor::operator=(*(_QWORD *)(v12 + 24), Descriptor);
      if (((*((_DWORD *)v5 + 4) - *((_DWORD *)v5 + 2)) & 0x7FFF8) != 0)
      {
        DateTime = WrdAnnotationDateTimeTable::getDateTime(v5, v11);
        WrdDateTime::operator=(*(_QWORD *)(v12 + 32), DateTime);
      }
      XlFormatInfo::takeSection(a2, (XlFormatSection *)v12);
      ++v11;
    }
    while (v10 != v11);
  }
  (*(void (**)(WrdCPTable *))(*(_QWORD *)v7 + 8))(v7);
  (*(void (**)(WrdCPTable *))(*(_QWORD *)v6 + 8))(v6);
  if (v5)
    (*(void (**)(WrdAnnotationDateTimeTable *))(*(_QWORD *)v5 + 8))(v5);
  return (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A160570(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
    {
LABEL_8:
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      if (!v1)
LABEL_5:
        _Unwind_Resume(a1);
LABEL_4:
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
      goto LABEL_5;
    }
  }
  else if (v2)
  {
    goto LABEL_8;
  }
  if (!v1)
    goto LABEL_5;
  goto LABEL_4;
}

void WrdAnnotationReferenceDescriptorTable::WrdAnnotationReferenceDescriptorTable(WrdAnnotationReferenceDescriptorTable *this)
{
  *(_QWORD *)this = &off_24F3B25F0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
}

void WrdAnnotationDateTimeTable::WrdAnnotationDateTimeTable(WrdAnnotationDateTimeTable *this)
{
  *(_QWORD *)this = &off_24F3B2578;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

_QWORD *WrdAnnotationDateTimeTable::clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = this[1];
  if (((this[2] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[1];
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = v1[1];
    }
    while (v3 < ((unint64_t)(v1[2] - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

void WrdParser::parse(WrdParser *this, WrdAnnotationReferenceDescriptorTable *a2)
{
  uint64_t started;
  int v5;
  unsigned int v6;
  int v7;
  WrdAnnotationReferenceDescriptor *Descriptor;

  started = WrdParser::startFCLCB(this, 4u);
  if (HIDWORD(started) > 3)
  {
    v5 = started;
    v6 = (HIDWORD(started) - 4) / 0x22u;
    WrdAnnotationReferenceDescriptorTable::setNumberOfAnnotationReferences(a2, (unsigned __int16)v6);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v5 + 4 * (unsigned __int16)v6 + 4, 0);
    if ((_WORD)v6)
    {
      v7 = 0;
      do
      {
        Descriptor = (WrdAnnotationReferenceDescriptor *)WrdAnnotationReferenceDescriptorTable::getDescriptor(a2, (unsigned __int16)v7);
        WrdParser::parse(this, Descriptor);
        ++v7;
      }
      while ((unsigned __int16)v6 != v7);
    }
  }
  else
  {
    WrdAnnotationReferenceDescriptorTable::setNumberOfAnnotationReferences(a2, 0);
  }
}

void WrdAnnotationReferenceDescriptorTable::setNumberOfAnnotationReferences(WrdAnnotationReferenceDescriptorTable *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  WrdAnnotationReferenceDescriptorTable::cleanup((uint64_t)this);
  *((_WORD *)this + 8) = a2;
  if (a2)
  {
    v4 = a2;
    v5 = 40 * a2;
    v6 = operator new[](v5 + 16);
    v7 = 0;
    *v6 = 40;
    v6[1] = v4;
    do
    {
      WrdAnnotationReferenceDescriptor::WrdAnnotationReferenceDescriptor((WrdAnnotationReferenceDescriptor *)&v6[v7 / 8 + 2]);
      v7 += 40;
    }
    while (v5 != v7);
    *((_QWORD *)this + 1) = v6 + 2;
  }
}

void sub_22A160834(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;

  for (; v2; v2 -= 40)
  {
    *(_QWORD *)&v1[v2 - 24] = &off_24F3B25B0;
    CsString::~CsString((CsString *)&v1[v2 - 16]);
  }
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationReferenceDescriptorTable::cleanup(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 40 * v3;
      do
      {
        *(_QWORD *)(v2 + v4 - 40) = &off_24F3B25B0;
        CsString::~CsString((CsString *)(v2 + v4 - 32));
        v4 -= 40;
      }
      while (v4);
    }
    this = MEMORY[0x22E2DD3F0](v2 - 16, 0x1091C8016F80D2CLL);
  }
  *(_QWORD *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 0;
  return this;
}

void WrdAnnotationDateTimeTable::~WrdAnnotationDateTimeTable(WrdAnnotationDateTimeTable *this)
{
  WrdAnnotationDateTimeTable::~WrdAnnotationDateTimeTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B2578;
  WrdAnnotationDateTimeTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdAnnotationReferenceDescriptorTable::~WrdAnnotationReferenceDescriptorTable(WrdAnnotationReferenceDescriptorTable *this)
{
  *(_QWORD *)this = &off_24F3B25F0;
  WrdAnnotationReferenceDescriptorTable::cleanup((uint64_t)this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B25F0;
  WrdAnnotationReferenceDescriptorTable::cleanup((uint64_t)this);
}

void WrdStringTable::WrdStringTable(WrdStringTable *this)
{
  *(_QWORD *)this = &off_24F3B3DF0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t WrdStringTypedTable::WrdStringTypedTable(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)result = &off_24F3B3E30;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

unint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdStringTypedTable *a2)
{
  _DWORD *exception;

  if (*((_DWORD *)a2 + 2) != 36)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return WrdParser::parse(*((_QWORD *)this + 4), *((WrdStringTable **)a2 + 2), 0x24u);
}

unint64_t WrdParser::parse(uint64_t a1, WrdStringTable *a2, unsigned __int16 a3)
{
  unint64_t result;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 v9;
  const unsigned __int16 *v10;
  const unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;

  result = WrdParser::startFCLCB((WrdParser *)a1, a3);
  v6 = HIDWORD(result);
  if (HIDWORD(result))
  {
    v7 = 0;
    do
    {
      LODWORD(v8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128));
      v9 = v8 + 1;
      v10 = (const unsigned __int16 *)operator new[]((2 * (v8 + 1)));
      v11 = v10;
      *(_QWORD *)(a1 + 288) = v10;
      if ((_DWORD)v8)
      {
        v12 = v8;
        v7 += 2 * v8 + 2;
        v8 = v8;
        v13 = (unsigned __int16 *)v10;
        do
        {
          *v13++ = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128));
          --v8;
        }
        while (v8);
      }
      else
      {
        v12 = 0;
        v7 += 2;
      }
      v11[v12] = 0;
      WrdStringTable::appendString(a2, v11, v9);
      result = *(_QWORD *)(a1 + 288);
      if (result)
        result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
      *(_QWORD *)(a1 + 288) = 0;
    }
    while (v7 < v6);
  }
  return result;
}

void WrdStringTypedTable::~WrdStringTypedTable(WrdStringTypedTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3E30;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3E30;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void WrdStringTable::~WrdStringTable(WrdStringTable *this)
{
  WrdStringTable::~WrdStringTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B3DF0;
  WrdAnnotationDateTimeTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdCPTableHeaders::WrdCPTableHeaders(WrdCPTableHeaders *this)
{
  _QWORD *v1;

  WrdCPTable::WrdCPTable(this);
  *v1 = &off_24F3B2A40;
}

void WrdBinaryReader::read(WrdParser **this, WrdCPTableHeaders *a2)
{
  WrdParser::parse(this[4], a2, 0xBu);
}

void WrdBookmarkTable::WrdBookmarkTable(WrdBookmarkTable *this)
{
  *(_QWORD *)this = &off_24F3B27F0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdBookmarkTable *a2)
{
  unsigned __int16 *v3;
  WrdCPTable *v4;
  unsigned __int16 *v5;
  WrdCPTable *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int CPOffsetOfText;
  uint64_t v16;
  const CsString *v17;
  uint64_t StringDataReference;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  _DWORD *v22;
  _DWORD *exception;
  WrdBinaryReader *v24;
  uint64_t v25;
  int v27;

  v3 = (unsigned __int16 *)operator new(0x18uLL);
  WrdStringWithDataTable::WrdStringWithDataTable((WrdStringWithDataTable *)v3);
  v4 = (WrdCPTable *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 12);
  v5 = (unsigned __int16 *)operator new(0x18uLL);
  WrdBookmarkFirstDescriptorTable::WrdBookmarkFirstDescriptorTable((uint64_t)v5, *((_DWORD *)a2 + 2));
  v6 = (WrdCPTable *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 12);
  WrdBookmarkTable::clear(a2);
  v7 = *((_QWORD *)this + 4);
  if (*((_DWORD *)a2 + 2))
  {
    WrdParser::parse(v7, v3, 37);
    WrdParser::parse(*((WrdParser **)this + 4), v4, 0x2Au);
    WrdParser::parse(*((WrdParser **)this + 4), (WrdBookmarkFirstDescriptorTable *)v5);
    v8 = 43;
  }
  else
  {
    WrdParser::parse(v7, v3, 21);
    WrdParser::parse(*((WrdParser **)this + 4), v4, 0x16u);
    WrdParser::parse(*((WrdParser **)this + 4), (WrdBookmarkFirstDescriptorTable *)v5);
    v8 = 23;
  }
  WrdParser::parse(*((WrdParser **)this + 4), v6, v8);
  v25 = v5[4];
  if (v5[4])
  {
    if ((unsigned __int16)((*((_DWORD *)v6 + 4) - *((_DWORD *)v6 + 2)) >> 2) - 1 != (_DWORD)v25
      || (_DWORD)v25 != v3[4])
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 2001;
    }
    v9 = 0;
    v24 = this;
    do
    {
      v10 = *(unsigned __int16 *)WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9);
      v11 = *((_QWORD *)v6 + 1);
      if (v10 >= (unsigned __int16)((*((_DWORD *)v6 + 4) - v11) >> 2))
      {
        v22 = __cxa_allocate_exception(4uLL);
        *v22 = 2001;
      }
      v12 = *(_DWORD *)(*((_QWORD *)v4 + 1) + 4 * v9);
      v13 = *(_DWORD *)(v11 + 4 * v10);
      v14 = 7;
      while (1)
      {
        CPOffsetOfText = WrdFileInformationBlock::getCPOffsetOfText(*((_QWORD *)this + 4) + 160, v14);
        if (v12 >= CPOffsetOfText)
          break;
        if (--v14 == -1)
        {
          v27 = v13;
          goto LABEL_14;
        }
      }
      v27 = v13 - CPOffsetOfText;
      v12 -= CPOffsetOfText;
LABEL_14:
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 7);
      v17 = (const CsString *)(WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v3, (unsigned __int16)v9)+ 8);
      *(_DWORD *)(v16 + 24) = 0;
      bzero(*(void **)(v16 + 16), 2 * *(unsigned int *)(v16 + 28));
      CsString::append((CsString *)(v16 + 8), v17);
      StringDataReference = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v3, (unsigned __int16)v9);
      WrdBookmark::setExtraDataLength((WrdBookmark *)v16, *(unsigned __int16 *)(StringDataReference + 40));
      if (*(_WORD *)(v16 + 40))
      {
        v19 = 0;
        do
        {
          v20 = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)v3, (unsigned __int16)v9);
          WrdBookmark::setExtraData(v16, (unsigned __int16)v19, *(_BYTE *)(*(_QWORD *)(v20 + 32) + v19));
          ++v19;
        }
        while (v19 < *(unsigned __int16 *)(v16 + 40));
      }
      *(_DWORD *)(v16 + 44) = v12;
      *(_DWORD *)(v16 + 48) = v27;
      *(_DWORD *)(v16 + 52) = v14;
      *(_BYTE *)(v16 + 58) = *(_BYTE *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 4);
      *(_BYTE *)(v16 + 59) = *(_BYTE *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 5);
      *(_BYTE *)(v16 + 56) = *(_BYTE *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 2);
      *(_BYTE *)(v16 + 57) = *(_BYTE *)(WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference((WrdBookmarkFirstDescriptorTable *)v5, (unsigned __int16)v9)+ 3);
      WrdBookmarkTable::append(a2, (WrdBookmark *)v16);
      ++v9;
      this = v24;
    }
    while (v9 != v25);
  }
  result = (*(uint64_t (**)(WrdCPTable *))(*(_QWORD *)v6 + 8))(v6);
  if (v5)
    result = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v5 + 8))(v5);
  if (v4)
    result = (*(uint64_t (**)(WrdCPTable *))(*(_QWORD *)v4 + 8))(v4);
  if (v3)
    return (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void sub_22A160FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    if (v3)
      goto LABEL_3;
  }
  else if (v3)
  {
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (!v2)
LABEL_8:
      _Unwind_Resume(a1);
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_8;
  goto LABEL_7;
}

void WrdStringWithDataTable::WrdStringWithDataTable(WrdStringWithDataTable *this)
{
  *(_QWORD *)this = &off_24F3B3E70;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t WrdBookmarkFirstDescriptorTable::WrdBookmarkFirstDescriptorTable(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24F3B27B8;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void WrdParser::parse(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned __int16 v9;
  uint64_t StringDataReference;
  unsigned int v11;
  _WORD *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  size_t v17;
  void *v18;
  _DWORD *exception;
  int v20;

  if (!((unint64_t)WrdParser::startFCLCB((WrdParser *)a1, (unsigned __int16)a3) >> 32)
    || *(_WORD *)(a1 + 178) == 71 && a3 == 32 && *(_DWORD *)(a1 + 160) == 1031 && (*(_WORD *)(a1 + 198) & 0x100) == 0)
  {
    WrdStringWithDataTable::setNumberOfStrings((WrdStringWithDataTable *)a2, 0);
  }
  else
  {
    v20 = 0;
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128));
    v7 = v6;
    v8 = v6;
    if ((_DWORD)v6 == 0xFFFF)
      v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128), v6);
    WrdStringWithDataTable::setNumberOfStrings((WrdStringWithDataTable *)a2, v8);
    a2[5] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128));
    if (a2[4])
    {
      v9 = 0;
      do
      {
        StringDataReference = WrdStringWithDataTable::getStringDataReference((WrdStringWithDataTable *)a2, v9);
        v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128));
        CsString::reserve((CsString *)(StringDataReference + 8), v11);
        CsString::setCount((CsString *)(StringDataReference + 8), v11);
        v12 = *(_WORD **)(StringDataReference + 16);
        if (!v12)
        {
          exception = __cxa_allocate_exception(4uLL);
          *exception = 2001;
        }
        if (v11)
        {
          v13 = v11;
          v14 = *(_WORD **)(StringDataReference + 16);
          do
          {
            v15 = **(_QWORD **)(a1 + 128);
            if (v7 == 0xFFFF)
              v16 = *(uint64_t (**)(void))(v15 + 80);
            else
              v16 = *(uint64_t (**)(void))(v15 + 64);
            *v14++ = v16();
            --v13;
          }
          while (v13);
        }
        if (v7 != 0xFFFF)
          ChConvertANSICharactersToUnicode(v12, v11);
        v17 = a2[5];
        if (a2[5])
        {
          v20 = a2[5];
          v18 = operator new[](v17);
          *(_QWORD *)(StringDataReference + 32) = v18;
          *(_WORD *)(StringDataReference + 40) = v20;
          (*(void (**)(_QWORD, void *, int *))(**(_QWORD **)(a1 + 128) + 56))(*(_QWORD *)(a1 + 128), v18, &v20);
        }
        ++v9;
      }
      while (a2[4] > v9);
    }
  }
}

void WrdStringWithDataTable::setNumberOfStrings(WrdStringWithDataTable *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  WrdStringWithDataTable::cleanup((uint64_t)this);
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    v4 = a2;
    v5 = 48 * a2;
    v6 = operator new[](v5 + 16);
    v7 = 0;
    *v6 = 48;
    v6[1] = v4;
    do
    {
      v8 = &v6[v7 / 8];
      v6[v7 / 8 + 2] = &off_24F3B3E98;
      CsString::CsString((CsString *)&v6[v7 / 8 + 3]);
      v8[6] = 0;
      *((_WORD *)v8 + 28) = 0;
      v7 += 48;
    }
    while (v5 != v7);
    *((_QWORD *)this + 2) = v6 + 2;
  }
}

void sub_22A1613B0(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;

  for (; v2; v2 -= 48)
    WrdStringWithDataTable::StringData::~StringData((WrdStringWithDataTable::StringData *)&v1[v2 - 32]);
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t WrdStringWithDataTable::cleanup(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (v2)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v2 - 48;
      v6 = 48 * v4;
      do
      {
        WrdStringWithDataTable::StringData::~StringData((WrdStringWithDataTable::StringData *)(v5 + v6));
        v6 -= 48;
      }
      while (v6);
    }
    this = MEMORY[0x22E2DD3F0](v3, 0x1091C8072689AA3);
  }
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 8) = 0;
  return this;
}

uint64_t WrdStringWithDataTable::getStringDataReference(WrdStringWithDataTable *this, unsigned int a2)
{
  return *((_QWORD *)this + 2) + 48 * a2;
}

void WrdParser::parse(WrdParser *this, WrdBookmarkFirstDescriptorTable *a2)
{
  unsigned int v4;
  uint64_t started;
  int v6;
  unsigned int v7;
  int i;
  uint64_t BookmarkFirstDescriptorReference;
  unsigned int v10;

  if (*((_DWORD *)a2 + 3))
    v4 = 42;
  else
    v4 = 22;
  started = WrdParser::startFCLCB(this, v4);
  if (HIDWORD(started) > 3)
  {
    v6 = started;
    v7 = (unsigned __int16)((HIDWORD(started) + 524284) >> 3);
    WrdBookmarkFirstDescriptorTable::setNumberOfBookmarks(a2, v7);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v6 + 4 * v7 + 4, 0);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        BookmarkFirstDescriptorReference = WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference(a2, (unsigned __int16)i);
        *(_WORD *)BookmarkFirstDescriptorReference = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
        v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
        *(_BYTE *)(BookmarkFirstDescriptorReference + 2) = v10 & 0x7F;
        *(_BYTE *)(BookmarkFirstDescriptorReference + 4) = (v10 & 0x80) != 0;
        *(_BYTE *)(BookmarkFirstDescriptorReference + 3) = BYTE1(v10) & 0x7F;
        *(_BYTE *)(BookmarkFirstDescriptorReference + 5) = v10 >> 15;
      }
    }
  }
  else
  {
    WrdBookmarkFirstDescriptorTable::setNumberOfBookmarks(a2, 0);
  }
}

void WrdBookmarkFirstDescriptorTable::setNumberOfBookmarks(WrdBookmarkFirstDescriptorTable *this, unsigned int a2)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C80274DC3F3);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    v5 = 6 * a2;
    v6 = (char *)operator new[](v5);
    v7 = 0;
    do
    {
      WrdBookmarkFirstDescriptor::WrdBookmarkFirstDescriptor((WrdBookmarkFirstDescriptor *)&v6[v7]);
      v7 += 6;
    }
    while (v5 != v7);
    *((_QWORD *)this + 2) = v6;
  }
}

void sub_22A1615FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void WrdBookmarkFirstDescriptor::WrdBookmarkFirstDescriptor(WrdBookmarkFirstDescriptor *this)
{
  *((_WORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
}

uint64_t WrdBookmarkFirstDescriptorTable::getBookmarkFirstDescriptorReference(WrdBookmarkFirstDescriptorTable *this, unsigned int a2)
{
  return *((_QWORD *)this + 2) + 6 * a2;
}

uint64_t WrdFileInformationBlock::getCPOffsetOfText(uint64_t a1, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;

  if (a2 < 0)
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    if (v3)
    {
      v6 = *(_QWORD *)(a1 + 64);
      if (v6 && (v7 = v4 + 2, *(unsigned __int16 *)(a1 + 56) > v7))
        v8 = *(_DWORD *)(v6 + 4 * v7);
      else
        v8 = 0;
      v5 = (v8 + v5);
    }
    else
    {
      v5 = 0;
    }
    v4 = v2 + 1;
    v3 = (v2 + 1) << 16;
    v2 = (__int16)(v2 + 1);
  }
  while (v2 <= a2);
  return v5;
}

void WrdBookmark::WrdBookmark(WrdBookmark *this)
{
  *(_QWORD *)this = &off_24F3B2778;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_WORD *)this + 29) = 0;
}

CsString *CsString::append(CsString *this, const CsString *a2)
{
  unsigned __int16 *var1;

  var1 = a2->var1;
  if (!var1)
    var1 = (unsigned __int16 *)&unk_22A4C0F70;
  return CsString::append(this, var1, a2->var2);
}

CsString *CsString::append(CsString *this, const unsigned __int16 *a2, unsigned int a3)
{
  CsString *v5;
  unsigned int v6;

  if (a2)
  {
    v5 = this;
    v6 = this->var2 + a3;
    this = CsString::reserve(this, v6);
    if (a3)
      this = (CsString *)_ChWcsncpy(&v5->var1[v5->var2], a2, a3);
    v5->var2 = v6;
    v5->var1[v6] = 0;
  }
  return this;
}

void *WrdBookmark::setExtraDataLength(WrdBookmark *this, unsigned int a2)
{
  void *result;

  result = (void *)*((_QWORD *)this + 4);
  if (result)
    result = (void *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = a2;
  if (a2)
  {
    result = operator new[](a2);
    *((_QWORD *)this + 4) = result;
  }
  return result;
}

void WrdBookmarkTable::append(WrdBookmarkTable *this, WrdBookmark *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a2)
  {
    v6 = *((_QWORD *)this + 4);
    v4 = (char *)this + 32;
    v5 = v6;
    v7 = (_QWORD *)*((_QWORD *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *((_QWORD *)this + 2);
      v10 = (unint64_t)v7 - v9;
      v11 = (v5 - v9) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v17 = &v14[v10 & 0x7FFFFFFF8];
      v18 = &v14[8 * v16];
      *(_QWORD *)v17 = a2;
      v8 = v17 + 8;
      v20 = (char *)*((_QWORD *)this + 2);
      v19 = (char *)*((_QWORD *)this + 3);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*((_QWORD *)this + 2);
      }
      *((_QWORD *)this + 2) = v17;
      *((_QWORD *)this + 3) = v8;
      *((_QWORD *)this + 4) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 3) = v8;
  }
}

void WrdBookmarkFirstDescriptorTable::~WrdBookmarkFirstDescriptorTable(WrdBookmarkFirstDescriptorTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B27B8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80274DC3F3);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B27B8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80274DC3F3);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
}

void WrdStringWithDataTable::~WrdStringWithDataTable(WrdStringWithDataTable *this)
{
  *(_QWORD *)this = &off_24F3B3E70;
  WrdStringWithDataTable::cleanup((uint64_t)this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B3E70;
  WrdStringWithDataTable::cleanup((uint64_t)this);
}

void WrdStringWithDataTable::StringData::~StringData(WrdStringWithDataTable::StringData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3E98;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

{
  WrdStringWithDataTable::StringData::~StringData(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t WrdFieldPositionTable::WrdFieldPositionTable(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24F3B32C0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdFieldPositionTable *a2)
{
  WrdCPTable *v4;
  WrdFieldDescriptorTable *v5;
  WrdParser *v6;
  unsigned int FieldPositionFCLCBIndex;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *exception;

  if (*((_DWORD *)a2 + 2) == 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v4 = (WrdCPTable *)operator new(0x20uLL);
  WrdCPTable::WrdCPTable(v4);
  v5 = (WrdFieldDescriptorTable *)operator new(0x18uLL);
  WrdFieldDescriptorTable::WrdFieldDescriptorTable(v5);
  WrdBookmarkTable::clear(a2);
  v6 = (WrdParser *)*((_QWORD *)this + 4);
  FieldPositionFCLCBIndex = WrdFileInformationBlock::getFieldPositionFCLCBIndex(*((_DWORD *)a2 + 2));
  WrdParser::parse(v6, v4, FieldPositionFCLCBIndex);
  WrdParser::parse(*((WrdParser **)this + 4), v5, *((_DWORD *)a2 + 2));
  if (*((_WORD *)v5 + 4))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 22);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(*((_QWORD *)v4 + 1) + 4 * v9);
      WrdFieldDescriptor::operator=(*(_QWORD *)(v10 + 16), *((_QWORD *)v5 + 2) + v8);
      OcCustomProperties::appendProperty((OcCustomProperties *)a2, (OcCustomProperty *)v10);
      ++v9;
      v8 += 24;
    }
    while (v9 < *((unsigned __int16 *)v5 + 4));
  }
  (*(void (**)(WrdFieldDescriptorTable *))(*(_QWORD *)v5 + 8))(v5);
  return (*(uint64_t (**)(WrdCPTable *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A161AEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdFieldDescriptorTable::WrdFieldDescriptorTable(WrdFieldDescriptorTable *this)
{
  *(_QWORD *)this = &off_24F3B3248;
  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t WrdFileInformationBlock::getFieldPositionFCLCBIndex(int a1)
{
  if ((a1 - 1) > 6)
    return 16;
  else
    return dword_22A4D276C[a1 - 1];
}

void WrdParser::parse(WrdParser *a1, WrdFieldDescriptorTable *a2, int a3)
{
  unsigned __int16 FieldPositionFCLCBIndex;
  uint64_t started;
  int v7;
  unsigned int v8;
  uint64_t v9;

  FieldPositionFCLCBIndex = WrdFileInformationBlock::getFieldPositionFCLCBIndex(a3);
  started = WrdParser::startFCLCB(a1, FieldPositionFCLCBIndex);
  if (HIDWORD(started) > 3)
  {
    v7 = started;
    v8 = (HIDWORD(started) - 4) / 6u;
    WrdFieldDescriptorTable::setNumberOfFieldDescriptors(a2, (unsigned __int16)v8);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(**((_QWORD **)a1 + 16) + 16))(*((_QWORD **)a1 + 16), v7 + 4 * (unsigned __int16)v8 + 4, 0);
    if ((_WORD)v8)
    {
      v9 = 0;
      do
      {
        WrdParser::parse(a1, (WrdFieldDescriptor *)(*((_QWORD *)a2 + 2) + v9));
        v9 += 24;
      }
      while (24 * (unsigned __int16)v8 != v9);
    }
  }
  else
  {
    WrdFieldDescriptorTable::setNumberOfFieldDescriptors(a2, 0);
  }
}

void WrdFieldDescriptorTable::setNumberOfFieldDescriptors(WrdFieldDescriptorTable *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x22E2DD3F0](v4 - 16, 0x1081C807FDEFFD3);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    v5 = a2;
    v6 = 24 * a2;
    v7 = operator new[](v6 + 16);
    v8 = 0;
    *v7 = 24;
    v7[1] = v5;
    do
    {
      WrdFieldDescriptor::WrdFieldDescriptor((WrdFieldDescriptor *)&v7[v8 / 8 + 2]);
      v8 += 24;
    }
    while (v6 != v8);
    *((_QWORD *)this + 2) = v7 + 2;
  }
}

void sub_22A161D30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void WrdFieldDescriptor::WrdFieldDescriptor(WrdFieldDescriptor *this)
{
  *(_QWORD *)this = &off_24F3B3208;
  *((_QWORD *)this + 1) = 0xFF00000013;
  *((_BYTE *)this + 16) &= 0x80u;
}

WrdFieldDescriptor *WrdParser::parse(WrdParser *this, WrdFieldDescriptor *a2)
{
  char v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 2) = v4 & 0x1F;
  v5 = (v4 & 0x1F) - 19;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v7 = v6;
  if (v5 <= 1)
    return (WrdFieldDescriptor *)EshRecord::setDataLength((uint64_t)a2, v6);
  WrdFieldDescriptor::setZombieEmbed(a2, (v6 & 2) != 0);
  WrdFieldDescriptor::setResultDirty(a2, (v7 & 4) != 0);
  WrdFieldDescriptor::setResultEdited(a2, (v7 & 8) != 0);
  WrdFieldDescriptor::setLocked(a2, (v7 & 0x10) != 0);
  WrdFieldDescriptor::setPrivateResult(a2, (v7 & 0x20) != 0);
  WrdFieldDescriptor::setNested(a2, (v7 & 0x40) != 0);
  return WrdFieldDescriptor::setHasSeparator(a2, v7 >> 7);
}

WrdFieldDescriptor *WrdFieldDescriptor::setZombieEmbed(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xFE | a2 & 1;
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setResultDirty(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xFD | (2 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setResultEdited(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xFB | (4 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setLocked(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xF7 | (8 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setPrivateResult(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xEF | (16 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setNested(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xDF | (32 * (a2 & 1));
  return this;
}

WrdFieldDescriptor *WrdFieldDescriptor::setHasSeparator(WrdFieldDescriptor *this, char a2)
{
  *((_BYTE *)this + 16) = *((_BYTE *)this + 16) & 0xBF | ((a2 & 1) << 6);
  return this;
}

void WrdFieldPosition::WrdFieldPosition(WrdFieldPosition *this, WrdFieldDescriptor *a2)
{
  this->var0 = (void **)&off_24F3B3280;
  this->var1 = 0;
  this->var2 = a2;
}

double WrdFieldDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  v3 = *(_BYTE *)(a1 + 16) & 0xFE | *(_BYTE *)(a2 + 16) & 1;
  *(_BYTE *)(a1 + 16) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 16) >> 1) & 1));
  *(_BYTE *)(a1 + 16) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 16) >> 2) & 1));
  *(_BYTE *)(a1 + 16) = v5;
  v6 = v5 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 16) >> 3) & 1));
  *(_BYTE *)(a1 + 16) = v6;
  v7 = v6 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 16) >> 4) & 1));
  *(_BYTE *)(a1 + 16) = v7;
  v8 = v7 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a2 + 16) >> 5) & 1));
  *(_BYTE *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 16) = v8 & 0xBF | *(_BYTE *)(a2 + 16) & 0x40;
  return result;
}

void OcCustomProperties::appendProperty(OcCustomProperties *this, OcCustomProperty *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 2);
    v19 = (char *)*((_QWORD *)this + 3);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 3) = v8;
}

void WrdFieldDescriptorTable::~WrdFieldDescriptorTable(WrdFieldDescriptorTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3248;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2 - 16, 0x1081C807FDEFFD3);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3248;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2 - 16, 0x1081C807FDEFFD3);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
}

uint64_t WrdStoryTable::WrdStoryTable(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24F3B3DB0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, WrdStoryTable *a2)
{
  WrdCPTable *v4;
  WrdTextBoxStoryTable *v5;
  WrdParser *v6;
  unsigned int TextBoxStoryFCLCBIndex;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  _DWORD *v14;
  _DWORD *exception;

  if ((*((_DWORD *)a2 + 2) & 0xFFFFFFFE) != 6)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v4 = (WrdCPTable *)operator new(0x20uLL);
  WrdCPTable::WrdCPTable(v4);
  v5 = (WrdTextBoxStoryTable *)operator new(0x18uLL);
  WrdTextBoxStoryTable::WrdTextBoxStoryTable(v5);
  WrdBookmarkTable::clear(a2);
  v6 = (WrdParser *)*((_QWORD *)this + 4);
  TextBoxStoryFCLCBIndex = WrdFileInformationBlock::getTextBoxStoryFCLCBIndex(*((_DWORD *)a2 + 2));
  WrdParser::parse(v6, v4, TextBoxStoryFCLCBIndex);
  WrdParser::parse(*((WrdParser **)this + 4), v5, *((_DWORD *)a2 + 2));
  if (*((_WORD *)v5 + 4))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *((_QWORD *)v5 + 2);
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 50);
      v12 = (unsigned __int8 *)(v10 + v8);
      v13 = v12[16];
      *(_BYTE *)(v11 + 32) = v13 ^ 1;
      v14 = (_DWORD *)(*((_QWORD *)v4 + 1) + 4 * v9);
      *(_DWORD *)(v11 + 8) = *v14;
      *(_DWORD *)(v11 + 12) = v14[1] + ~*v14;
      if (v13)
      {
        *(_DWORD *)(v11 + 24) = openListItemCount((uint64_t)v12);
        *(_DWORD *)(v11 + 28) = EshRecord::getDataLength((EshRecord *)v12);
      }
      else
      {
        *(_DWORD *)(v11 + 16) = CsLeReadSInt32((unsigned int *)v12);
        *(_DWORD *)(v11 + 20) = WrdTextBoxStory::getOfficeArtShapeIDForFirstShapeInStoryChain((WrdTextBoxStory *)v12);
      }
      WrdBookmarkTable::append(a2, (WrdBookmark *)v11);
      ++v9;
      v8 += 20;
    }
    while (v9 < *((unsigned __int16 *)v5 + 4));
  }
  (*(void (**)(WrdTextBoxStoryTable *))(*(_QWORD *)v5 + 8))(v5);
  return (*(uint64_t (**)(WrdCPTable *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A162258(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WrdTextBoxStoryTable::WrdTextBoxStoryTable(WrdTextBoxStoryTable *this)
{
  *(_QWORD *)this = &off_24F3B4128;
  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t WrdFileInformationBlock::getTextBoxStoryFCLCBIndex(int a1)
{
  if (a1 == 7)
    return 58;
  else
    return 56;
}

void WrdParser::parse(WrdParser *a1, WrdTextBoxStoryTable *a2, int a3)
{
  unsigned __int16 TextBoxStoryFCLCBIndex;
  uint64_t started;
  int v7;
  unsigned int v8;
  uint64_t v9;

  TextBoxStoryFCLCBIndex = WrdFileInformationBlock::getTextBoxStoryFCLCBIndex(a3);
  started = WrdParser::startFCLCB(a1, TextBoxStoryFCLCBIndex);
  if (HIDWORD(started) > 3)
  {
    v7 = started;
    v8 = (HIDWORD(started) - 4) / 0x1Au;
    WrdTextBoxStoryTable::setNumberOfTextBoxStories(a2, (unsigned __int16)v8);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(**((_QWORD **)a1 + 16) + 16))(*((_QWORD **)a1 + 16), v7 + 4 * (unsigned __int16)v8 + 4, 0);
    if ((_WORD)v8)
    {
      v9 = 0;
      do
      {
        WrdParser::parse(a1, (WrdTextBoxStory *)(*((_QWORD *)a2 + 2) + v9));
        v9 += 20;
      }
      while (20 * (unsigned __int16)v8 != v9);
    }
  }
  else
  {
    WrdTextBoxStoryTable::setNumberOfTextBoxStories(a2, 0);
  }
}

void WrdTextBoxStoryTable::setNumberOfTextBoxStories(WrdTextBoxStoryTable *this, unsigned int a2)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C80C46099A0);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = a2;
  if (a2)
  {
    v5 = 20 * a2;
    v6 = (char *)operator new[](v5);
    v7 = 0;
    do
    {
      WrdTextBoxStory::WrdTextBoxStory((WrdTextBoxStory *)&v6[v7]);
      v7 += 20;
    }
    while (v5 != v7);
    *((_QWORD *)this + 2) = v6;
  }
}

void sub_22A162468(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void WrdTextBoxStoryTable::~WrdTextBoxStoryTable(WrdTextBoxStoryTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B4128;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80C46099A0);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B4128;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80C46099A0);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 4) = 0;
}

void WrdFileShapeAddressTable::WrdFileShapeAddressTable(WrdFileShapeAddressTable *this)
{
  *(_QWORD *)this = &off_24F3B3340;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

uint64_t WrdBinaryReader::read(WrdParser **this, WrdFileShapeAddressTable *a2)
{
  WrdCPTable *v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *exception;

  if ((*((_DWORD *)a2 + 2) | 2) != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v4 = (WrdCPTable *)operator new(0x20uLL);
  WrdCPTable::WrdCPTable(v4);
  if (*((_DWORD *)a2 + 2))
    v5 = 41;
  else
    v5 = 40;
  WrdParser::parse(this[4], v4, v5);
  WrdParser::parse(this[4], a2);
  v6 = (_DWORD *)*((_QWORD *)v4 + 1);
  v7 = (unsigned __int16)((*((_DWORD *)v4 + 4) - (_DWORD)v6) >> 2);
  if (v7 >= 2)
  {
    v8 = v7 - 1;
    v9 = (uint64_t *)*((_QWORD *)a2 + 2);
    do
    {
      v11 = *v9++;
      v10 = v11;
      LODWORD(v11) = *v6++;
      *(_DWORD *)(v10 + 8) = v11;
      --v8;
    }
    while (v8);
  }
  return (*(uint64_t (**)(WrdCPTable *))(*(_QWORD *)v4 + 8))(v4);
}

void sub_22A1625D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdParser::parse(WrdParser *this, WrdFileShapeAddressTable *a2)
{
  unsigned __int16 FileShapeAddressFCLCBIndex;
  unint64_t started;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  WrdFileShapeAddress *v10;

  FileShapeAddressFCLCBIndex = WrdFileInformationBlock::getFileShapeAddressFCLCBIndex(*((_DWORD *)a2 + 2));
  started = WrdParser::startFCLCB(this, FileShapeAddressFCLCBIndex);
  v6 = started;
  v7 = HIDWORD(started);
  WrdBookmarkTable::clear(a2);
  if (v7 >= 4)
  {
    v8 = (unsigned __int16)(((int)v7 - 4) / 0x1Eu);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), (v6 + 4 * v8 + 4), 0);
    if (v8)
    {
      v9 = -v8;
      do
      {
        v10 = (WrdFileShapeAddress *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), 24);
        WrdParser::parse(this, v10);
        OcCustomProperties::appendProperty(a2, (OcCustomProperty *)v10);
      }
      while (!__CFADD__(v9++, 1));
    }
  }
}

void sub_22A1626C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WrdFileInformationBlock::getFileShapeAddressFCLCBIndex(int a1)
{
  if (a1 == 2)
    return 41;
  else
    return 40;
}

void sub_22A162E3C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  unsigned int *v16;
  void *v17;

  MEMORY[0x22E2DD408](a11, 0x1000C4000313F17);
  if (a2 == 3)
  {
    v16 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v16);
    __cxa_end_catch();
  }
  else
  {
    v17 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v17, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A162E08);
}

void sub_22A163050(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A162E08);
  }
  JUMPOUT(0x22A162EC4);
}

void sub_22A1630AC()
{
  objc_end_catch();
  JUMPOUT(0x22A162EC4);
}

void sub_22A1634B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A163658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1636F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1637BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A163878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A163970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A163EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A16403C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1644A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A164724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1647E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A164990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A164A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22A164A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22A164FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1650A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A16516C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A165234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1655E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A165750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A16588C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1659C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A165B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A165C40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A165D7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A165EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A165FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A16626C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1663A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1664E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A16675C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166D48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A166EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1673B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1674F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A16776C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1678A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1679E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A167ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A168010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A16814C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A168288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1683C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A168650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1687C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A168864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A168904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1689D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A168A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  WrdFontFamilyNameTable::~WrdFontFamilyNameTable((WrdFontFamilyNameTable *)&a9);

  _Unwind_Resume(a1);
}

void WrdFontFamilyNameTable::WrdFontFamilyNameTable(WrdFontFamilyNameTable *this)
{
  *(_QWORD *)this = &off_24F3B33C0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

unint64_t WrdBinaryReader::read(WrdParser **this, WrdFontFamilyNameTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

unint64_t WrdParser::parse(WrdParser *this, WrdFontFamilyNameTable *a2)
{
  unint64_t result;
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  WrdFontFamilyName *v9;

  WrdAnnotationDateTimeTable::clear(a2);
  result = WrdParser::startFCLCB(this, 0xFu);
  v5 = HIDWORD(result);
  if (HIDWORD(result) >= 4)
  {
    v6 = result;
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
    if ((_DWORD)result)
    {
      v7 = result;
      v8 = v5 + v6;
      while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) != v8)
      {
        v9 = (WrdFontFamilyName *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), 26);
        WrdParser::parse(this, v9);
        WrdEmbeddedTrueTypeFontTable::append(a2, (WrdEmbeddedTrueTypeFont *)v9);
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
        if (result > v8)
          break;
        if (!--v7)
          return result;
      }
      return (unint64_t)WrdAnnotationDateTimeTable::clear(a2);
    }
  }
  return result;
}

void sub_22A168C7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void WrdFontFamilyName::WrdFontFamilyName(WrdFontFamilyName *this)
{
  CsString *p_var2;

  this->var0 = (void **)&off_24F3B3380;
  p_var2 = &this->var2;
  CsString::CsString(&this->var1);
  CsString::CsString(p_var2);
  this->var3 = 0;
  this->var4 = 0;
  this->var5 = 0;
  *(char **)((char *)&this->var5 + 6) = 0;
}

void sub_22A168CF8(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

WrdFontFamilyName *WrdFontFamilyName::init(WrdFontFamilyName *this)
{
  WrdFontFamilyName *v1;

  v1 = this;
  if (!this->var4)
  {
    this = (WrdFontFamilyName *)operator new[](0xAuLL);
    v1->var4 = (char *)this;
    this->var0 = 0;
    LOWORD(this->var1.var0) = 0;
  }
  if (!v1->var5)
  {
    this = (WrdFontFamilyName *)operator new[](0x18uLL);
    v1->var5 = (char *)this;
    this->var1.var0 = 0;
    this->var1.var1 = 0;
    this->var0 = 0;
  }
  return this;
}

CsString *WrdParser::parse(WrdParser *this, WrdFontFamilyName *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  char v7;
  int v8;
  char v9;
  unsigned int v10;
  CsString *p_var1;
  uint64_t v12;
  unsigned __int16 *var1;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 v16;
  unsigned int v17;
  CsString *p_var2;
  const unsigned __int16 *v19;
  unsigned int v20;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  a2->var8 = v5 & 3;
  a2->var7 = (v5 & 4) != 0;
  a2->var9 = (v5 >> 4) & 7;
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  a2->var10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  if (WrdFontFamilyName::s_bPanoseSize)
  {
    v6 = 0;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
      WrdFontFamilyName::setPanose(a2, v6++, v7);
    }
    while (WrdFontFamilyName::s_bPanoseSize > v6);
  }
  if (WrdFontFamilyName::s_bFontSignatureSize)
  {
    v8 = 0;
    do
    {
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
      WrdFontFamilyName::setFontSignature(a2, v8++, v9);
    }
    while (WrdFontFamilyName::s_bFontSignatureSize > v8);
  }
  v10 = v4
      - (WrdFontFamilyName::s_bPanoseSize
       + WrdFontFamilyName::s_bFontSignatureSize)
      + 507;
  p_var1 = &a2->var1;
  v12 = (v10 >> 1);
  CsString::reserve(&a2->var1, (v10 >> 1));
  CsString::setCount(&a2->var1, v12);
  var1 = a2->var1.var1;
  if (!var1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 2001;
  }
  if ((_DWORD)v12)
  {
    v14 = v12;
    v15 = a2->var1.var1;
    do
    {
      *v15++ = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
      --v14;
    }
    while (v14);
  }
  v16 = _ChWcslen(var1);
  v17 = v16;
  if (v16 + 1 < v12)
  {
    p_var2 = &a2->var2;
    v19 = &var1[v16 + 1];
    CsString::append(p_var2, v19);
    v20 = _ChWcslen(v19);
    CsString::setCount(p_var2, v20);
  }
  return CsString::setCount(p_var1, v17);
}

WrdFontFamilyName *WrdFontFamilyName::setPanose(WrdFontFamilyName *this, unsigned int a2, char a3)
{
  char *var4;

  if (a2 <= 9)
  {
    var4 = this->var4;
    if (var4)
      var4[a2] = a3;
  }
  return this;
}

WrdFontFamilyName *WrdFontFamilyName::setFontSignature(WrdFontFamilyName *this, unsigned int a2, char a3)
{
  char *var5;

  if (a2 <= 0x17)
  {
    var5 = this->var5;
    if (var5)
      var5[a2] = a3;
  }
  return this;
}

void WrdEmbeddedTrueTypeFontTable::append(WrdEmbeddedTrueTypeFontTable *this, WrdEmbeddedTrueTypeFont *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 1);
    v19 = (char *)*((_QWORD *)this + 2);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v17;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 2) = v8;
}

void sub_22A16911C(void *a1, int a2)
{
  unsigned int *v3;
  void *v4;

  if (a2 == 3)
  {
    v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v4, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A1690FCLL);
}

void sub_22A16918C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A1690FCLL);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(WrdEmbeddedTTFRecordTable *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2);
}

void sub_22A169370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A169438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WrdFontFamilyNameTable::~WrdFontFamilyNameTable(WrdFontFamilyNameTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3B33C0;
  WrdAnnotationDateTimeTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  WrdFontFamilyNameTable::~WrdFontFamilyNameTable(this);
  JUMPOUT(0x22E2DD408);
}

void WrdFontFamilyName::~WrdFontFamilyName(WrdFontFamilyName *this)
{
  WrdFontFamilyName::~WrdFontFamilyName(this);
  JUMPOUT(0x22E2DD408);
}

{
  char *var4;
  char *var5;

  this->var0 = (void **)&off_24F3B3380;
  var4 = this->var4;
  if (var4)
    MEMORY[0x22E2DD3F0](var4, 0x1000C8077774924);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    MEMORY[0x22E2DD3F0](var5, 0x1000C8077774924);
  this->var5 = 0;
  CsString::~CsString(&this->var2);
  CsString::~CsString(&this->var1);
}

void sub_22A1698D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;

  CsString::~CsString((CsString *)&a15);
  CsString::~CsString((CsString *)&a12);

  _Unwind_Resume(a1);
}

void WrdDOPTypography::WrdDOPTypography(WrdDOPTypography *this)
{
  *(_QWORD *)this = &off_24F3B1C00;
  *((_QWORD *)this + 1) = 0;
  CsString::CsString((CsString *)((char *)this + 16));
  CsString::CsString((CsString *)((char *)this + 40));
  *((_WORD *)this + 32) = 0;
  *((_BYTE *)this + 66) &= 0xF0u;
}

void sub_22A1699AC(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdDrawingObjectGrid::WrdDrawingObjectGrid(WrdDrawingObjectGrid *this)
{
  *(_QWORD *)this = &off_24F3B2BA8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xFC | 1;
}

void WrdAutoSummaryInfo::WrdAutoSummaryInfo(WrdAutoSummaryInfo *this)
{
  *(_QWORD *)this = &off_24F3B2738;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 14) = 0;
  *((_BYTE *)this + 22) &= 0xF8u;
}

void WrdDateTime::WrdDateTime(WrdDateTime *this)
{
  this->var0 = (void **)&off_24F3B2AE8;
  *(_QWORD *)&this->var1 = 0;
  *(_QWORD *)&this->var3 = 0;
}

void WrdDocumentProperties::WrdDocumentProperties(WrdDocumentProperties *this, WrdDOPTypography *a2, WrdDrawingObjectGrid *a3, WrdAutoSummaryInfo *a4, WrdDateTime *a5, WrdDateTime *a6, WrdDateTime *a7)
{
  this->var0 = (void **)&off_24F3B2B68;
  WrdDocumentProperties::simpleDefaults(this);
  this->var2 = a2;
  this->var3 = a3;
  this->var4 = a4;
  this->var5 = a5;
  this->var6 = a6;
  this->var7 = a7;
}

double WrdDocumentProperties::simpleDefaults(WrdDocumentProperties *this)
{
  unint64_t v1;
  double result;

  this->var1 = 1;
  *(_OWORD *)&this->var8 = xmmword_22A4D2590;
  *(_OWORD *)&this->var12 = xmmword_22A4D25A0;
  *(_OWORD *)&this->var16 = xmmword_22A4D25B0;
  *(_QWORD *)&this->var20 = 0x300000001;
  *(_QWORD *)&this->var22 = 0;
  *(_DWORD *)&this->var24 = 0;
  *(_OWORD *)&this->var26 = xmmword_22A4D25C0;
  v1 = *(_QWORD *)((char *)this + 156) & 0xFC00000018000000 | 0x20000000000;
  *(_QWORD *)((char *)this + 148) = 0x3900189012;
  *(_QWORD *)((char *)this + 156) = v1;
  this->var175 = 0;
  this->var177 = 0;
  this->var178 = 0;
  result = 0.0;
  *(_OWORD *)&this->var156 = 0u;
  *(_OWORD *)&this->var160 = 0u;
  *(_OWORD *)&this->var164 = 0u;
  *(_OWORD *)((char *)&this->var167 + 1) = 0u;
  return result;
}

uint64_t WrdBinaryReader::read(WrdParser **this, WrdDocumentProperties *a2)
{
  return WrdParser::parse(this[4], a2);
}

uint64_t WrdParser::parse(WrdParser *this, WrdDocumentProperties *a2)
{
  unint64_t started;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unsigned __int16 v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  uint16x4_t v19;
  int8x8_t v20;
  uint32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint32x4_t v26;
  unint64_t v27;
  unsigned __int16 v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  __int16 v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t result;
  unsigned int v46;
  char *v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;

  started = WrdParser::startFCLCB(this, 0x1Fu);
  v5 = started;
  v6 = HIDWORD(started);
  WrdDocumentProperties::setDefaultBasedOnVersion((uint64_t)a2, *((_DWORD *)this + 38), *((_BYTE *)this + 186) >> 7);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  v8 = (unint64_t *)((char *)a2 + 148);
  *(_QWORD *)((char *)a2 + 148) = *(_QWORD *)((char *)a2 + 148) & 0xFFFFFFFFFFFFFFF8 | v7 & 1 | v7 & 2 | v7 & 4;
  a2->var8 = (v7 >> 5) & 3;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  a2->var9 = v9 & 3;
  a2->var33 = v9 >> 2;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  v11 = *(_QWORD *)((char *)a2 + 156) & 0xFFFFFFFE1FFFFFFFLL | ((unint64_t)(v10 & 1) << 29) | ((unint64_t)((v10 >> 1) & 1) << 30) | ((unint64_t)((v10 >> 8) & 1) << 31) | ((unint64_t)((v10 >> 9) & 1) << 32);
  *(_QWORD *)((char *)a2 + 148) = *(_QWORD *)((char *)a2 + 148) & 0xFFFFFFFFFFFFFE07 | ((unsigned __int16)v10 >> 7) & 8 | ((unsigned __int16)v10 >> 7) & 0x10 | (unint64_t)(((unsigned __int16)v10 >> 7) & 0x1E0);
  *(_QWORD *)((char *)a2 + 156) = v11;
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  v13 = *(_QWORD *)((char *)a2 + 156);
  v14 = (v12 >> 15) & 1;
  v15 = *(_QWORD *)((char *)a2 + 148) & 0xFFFFFFFFFF8001FFLL | (v12 << 9) & 0x200 | (v12 << 9) & 0xC00 | (v12 << 9) & 0x7000 | (v12 << 8) & 0x8000 | ((unint64_t)((unsigned __int16)v12 >> 14) << 21) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)((v12 >> 8) & 1) << 16) | ((unint64_t)((v12 >> 9) & 1) << 17) | ((unint64_t)((v12 >> 10) & 1) << 18) | ((unint64_t)((v12 >> 11) & 1) << 19) | ((unint64_t)((v12 >> 12) & 1) << 20);
  v16 = __CFADD__(v15, v14 << 22);
  v17 = v15 + (v14 << 22);
  if (v16)
    ++v13;
  *v8 = v17;
  *(_QWORD *)((char *)a2 + 156) = v13;
  if (*((unsigned __int16 *)this + 92) < 0x67u)
    goto LABEL_8;
  v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  if (*((int *)this + 38) <= 7)
  {
    v19 = (uint16x4_t)vdup_n_s16(v18);
    v20 = (int8x8_t)vshl_u16(v19, (uint16x4_t)0xFFF7FFFDFFFEFFFFLL);
    v21 = vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vshl_u16(v19, (uint16x4_t)0xFFF9FFFAFFFBFFFCLL), (int8x8_t)0x1000100010001));
    v22 = v21.u32[3];
    v23 = v21.u32[2];
    v24 = v21.u32[1];
    v25 = (unint64_t)v21.u32[0] << 45;
    v26 = vmovl_u16((uint16x4_t)vand_s8(v20, (int8x8_t)0x1000100010001));
    v27 = *(_QWORD *)((char *)a2 + 156) | ((unint64_t)v26.u32[3] >> 14);
    *v8 = v25 | (v24 << 46) | (v23 << 47) | (v22 << 48) | ((unint64_t)v26.u32[0] << 42) | ((unint64_t)v26.u32[1] << 43) | ((unint64_t)v26.u32[2] << 44) | ((unint64_t)v26.u32[3] << 50) | ((unint64_t)((v18 >> 8) & 1) << 49) | ((unint64_t)((v18 >> 10) & 1) << 51) | ((unint64_t)(v18 & 1) << 41) | *v8 & 0xFFE001FFFFFFFFFFLL | ((unint64_t)((v18 >> 11) & 1) << 52);
    *(_QWORD *)((char *)a2 + 156) = v27;
  }
  if (*((unsigned __int16 *)this + 92) < 0x6Au)
  {
LABEL_8:
    v31 = 0;
  }
  else
  {
    a2->var30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    a2->var31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    a2->var32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    WrdBaseParser::parseStream(this, a2->var5, *((SsrwOOStream **)this + 16));
    WrdBaseParser::parseStream(this, a2->var6, *((SsrwOOStream **)this + 16));
    WrdBaseParser::parseStream(this, a2->var7, *((SsrwOOStream **)this + 16));
    a2->var169 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var156 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var157 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var158 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var170 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var159 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var10 = v28 & 3;
    a2->var1 = v28 >> 2;
    v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var11 = v29 & 3;
    *(int8x8_t *)&a2->var12 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v29), (uint32x2_t)0xFFFFFFFAFFFFFFFELL), (int8x8_t)0xF0000000FLL);
    *(_QWORD *)((char *)a2 + 148) = *(_QWORD *)((char *)a2 + 148) & 0xFFFFFFFFF87FFFFFLL | ((unint64_t)((v29 >> 10) & 1) << 23) | ((unint64_t)((v29 >> 11) & 1) << 24) | ((unint64_t)((v29 >> 12) & 1) << 25) | v29 & 0x4000000;
    a2->var160 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var161 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var162 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var171 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var163 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var164 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var26 = (v30 >> 3) & 0x1FF;
    a2->var14 = v30 & 7;
    a2->var15 = (v30 >> 12) & 3;
    *(_QWORD *)((char *)a2 + 148) = *(_QWORD *)((char *)a2 + 148) & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)((v30 & 0x4000) != 0) << 31);
    a2->var17 = (v30 >> 15) & 1;
    v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
  }
  v32 = *((_DWORD *)this + 38);
  if (v32 == 8 || v32 == -1)
  {
    if ((v31 & 1) != 0)
    {
      *v8 |= 0x20000000000uLL;
      if ((v31 & 2) == 0)
      {
LABEL_13:
        if ((v31 & 4) == 0)
          goto LABEL_14;
        goto LABEL_111;
      }
    }
    else if ((v31 & 2) == 0)
    {
      goto LABEL_13;
    }
    *v8 |= 0x40000000000uLL;
    if ((v31 & 4) == 0)
    {
LABEL_14:
      if ((v31 & 8) == 0)
        goto LABEL_15;
      goto LABEL_112;
    }
LABEL_111:
    *v8 |= 0x80000000000uLL;
    if ((v31 & 8) == 0)
    {
LABEL_15:
      if ((v31 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_113;
    }
LABEL_112:
    *v8 |= 0x100000000000uLL;
    if ((v31 & 0x10) == 0)
    {
LABEL_16:
      if ((v31 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_114;
    }
LABEL_113:
    *v8 |= 0x200000000000uLL;
    if ((v31 & 0x20) == 0)
    {
LABEL_17:
      if ((v31 & 0x40) == 0)
        goto LABEL_18;
      goto LABEL_115;
    }
LABEL_114:
    *v8 |= 0x400000000000uLL;
    if ((v31 & 0x40) == 0)
    {
LABEL_18:
      if ((v31 & 0x80) == 0)
        goto LABEL_19;
      goto LABEL_116;
    }
LABEL_115:
    *v8 |= 0x800000000000uLL;
    if ((v31 & 0x80) == 0)
    {
LABEL_19:
      if ((v31 & 0x100) == 0)
        goto LABEL_20;
      goto LABEL_117;
    }
LABEL_116:
    *v8 |= 0x1000000000000uLL;
    if ((v31 & 0x100) == 0)
    {
LABEL_20:
      if ((v31 & 0x200) == 0)
        goto LABEL_21;
      goto LABEL_118;
    }
LABEL_117:
    *v8 |= 0x2000000000000uLL;
    if ((v31 & 0x200) == 0)
    {
LABEL_21:
      if ((v31 & 0x400) == 0)
        goto LABEL_22;
      goto LABEL_119;
    }
LABEL_118:
    *v8 |= 0x4000000000000uLL;
    if ((v31 & 0x400) == 0)
    {
LABEL_22:
      if ((v31 & 0x800) == 0)
        goto LABEL_23;
      goto LABEL_120;
    }
LABEL_119:
    *v8 |= 0x8000000000000uLL;
    if ((v31 & 0x800) == 0)
    {
LABEL_23:
      if ((v31 & 0x1000) == 0)
        goto LABEL_24;
      goto LABEL_121;
    }
LABEL_120:
    *v8 |= 0x10000000000000uLL;
    if ((v31 & 0x1000) == 0)
    {
LABEL_24:
      if ((v31 & 0x2000) == 0)
        goto LABEL_25;
      goto LABEL_122;
    }
LABEL_121:
    *v8 |= 0x20000000000000uLL;
    if ((v31 & 0x2000) == 0)
    {
LABEL_25:
      if ((v31 & 0x4000) == 0)
        goto LABEL_26;
      goto LABEL_123;
    }
LABEL_122:
    *v8 |= 0x40000000000000uLL;
    if ((v31 & 0x4000) == 0)
    {
LABEL_26:
      if ((v31 & 0x8000) == 0)
        goto LABEL_27;
      goto LABEL_124;
    }
LABEL_123:
    *v8 |= 0x80000000000000uLL;
    if ((v31 & 0x8000) == 0)
    {
LABEL_27:
      if ((v31 & 0x10000) == 0)
        goto LABEL_28;
      goto LABEL_125;
    }
LABEL_124:
    *v8 |= 0x100000000000000uLL;
    if ((v31 & 0x10000) == 0)
    {
LABEL_28:
      if ((v31 & 0x20000) == 0)
        goto LABEL_29;
      goto LABEL_126;
    }
LABEL_125:
    *v8 |= 0x200000000000000uLL;
    if ((v31 & 0x20000) == 0)
    {
LABEL_29:
      if ((v31 & 0x40000) == 0)
        goto LABEL_30;
      goto LABEL_127;
    }
LABEL_126:
    *v8 |= 0x400000000000000uLL;
    if ((v31 & 0x40000) == 0)
    {
LABEL_30:
      if ((v31 & 0x80000) == 0)
        goto LABEL_31;
      goto LABEL_128;
    }
LABEL_127:
    *v8 |= 0x800000000000000uLL;
    if ((v31 & 0x80000) == 0)
    {
LABEL_31:
      if ((v31 & 0x100000) == 0)
        goto LABEL_32;
      goto LABEL_129;
    }
LABEL_128:
    *v8 |= 0x1000000000000000uLL;
    if ((v31 & 0x100000) == 0)
    {
LABEL_32:
      if ((v31 & 0x200000) == 0)
        goto LABEL_33;
      goto LABEL_130;
    }
LABEL_129:
    *v8 |= 0x2000000000000000uLL;
    if ((v31 & 0x200000) == 0)
    {
LABEL_33:
      if ((v31 & 0x400000) == 0)
        goto LABEL_34;
      goto LABEL_131;
    }
LABEL_130:
    *v8 |= 0x4000000000000000uLL;
    if ((v31 & 0x400000) == 0)
    {
LABEL_34:
      if ((v31 & 0x800000) == 0)
        goto LABEL_35;
      goto LABEL_132;
    }
LABEL_131:
    *v8 |= 0x8000000000000000;
    if ((v31 & 0x800000) == 0)
    {
LABEL_35:
      if ((v31 & 0x1000000) == 0)
        goto LABEL_36;
      goto LABEL_133;
    }
LABEL_132:
    *(_QWORD *)((char *)a2 + 156) |= 1uLL;
    if ((v31 & 0x1000000) == 0)
    {
LABEL_36:
      if ((v31 & 0x2000000) == 0)
        goto LABEL_37;
      goto LABEL_134;
    }
LABEL_133:
    *(_QWORD *)((char *)a2 + 156) |= 2uLL;
    if ((v31 & 0x2000000) == 0)
    {
LABEL_37:
      if ((v31 & 0x4000000) == 0)
        goto LABEL_38;
      goto LABEL_135;
    }
LABEL_134:
    *(_QWORD *)((char *)a2 + 156) |= 4uLL;
    if ((v31 & 0x4000000) == 0)
    {
LABEL_38:
      if ((v31 & 0x8000000) == 0)
        goto LABEL_39;
      goto LABEL_136;
    }
LABEL_135:
    *(_QWORD *)((char *)a2 + 156) |= 8uLL;
    if ((v31 & 0x8000000) == 0)
    {
LABEL_39:
      if ((v31 & 0x10000000) == 0)
        goto LABEL_40;
      goto LABEL_137;
    }
LABEL_136:
    *(_QWORD *)((char *)a2 + 156) |= 0x10uLL;
    if ((v31 & 0x10000000) == 0)
    {
LABEL_40:
      if ((v31 & 0x20000000) == 0)
        goto LABEL_41;
      goto LABEL_138;
    }
LABEL_137:
    *(_QWORD *)((char *)a2 + 156) |= 0x20uLL;
    if ((v31 & 0x20000000) == 0)
    {
LABEL_41:
      if ((v31 & 0x40000000) == 0)
        goto LABEL_42;
      goto LABEL_139;
    }
LABEL_138:
    *(_QWORD *)((char *)a2 + 156) |= 0x40uLL;
    if ((v31 & 0x40000000) == 0)
    {
LABEL_42:
      if ((v31 & 0x80000000) == 0)
        goto LABEL_43;
LABEL_140:
      *(_QWORD *)((char *)a2 + 156) |= 0x100uLL;
      goto LABEL_43;
    }
LABEL_139:
    *(_QWORD *)((char *)a2 + 156) |= 0x80uLL;
    if ((v31 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_140;
  }
LABEL_43:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) - v5 < v6)
  {
    a2->var16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    WrdParser::parse(this, a2->var2);
    WrdParser::parse(this, a2->var3);
    v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var18 = (v33 >> 1) & 0xF;
    *(_QWORD *)((char *)a2 + 156) = ((((v33 >> 14) & 1) << 25) | ((unint64_t)((v33 >> 13) & 1) << 24)) & 0xFFFFFFFFFBFFFFFFLL | *(_QWORD *)((char *)a2 + 156) & 0xFFFFFFF9F80FFFFFLL | ((unint64_t)((v33 >> 5) & 1) << 33) | ((unint64_t)((v33 >> 6) & 1) << 34) | ((unint64_t)((v33 >> 7) & 1) << 20) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)((v33 >> 9) & 1) << 21) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)((v33 >> 11) & 1) << 22) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)((v33 >> 12) & 1) << 23) & 0xFFFFFFFFFBFFFFFFLL | ((((unint64_t)((unsigned __int16)v33 & 0x8000) >> 15) & 1) << 26);
    v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFFFFFFFFE7FFFFFFLL | ((unint64_t)(v34 & 1) << 27) | ((unint64_t)((v34 >> 1) & 1) << 28);
    WrdParser::parse(this, a2->var4);
    a2->var165 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var166 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    v35 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFFFFFFE7FFFFFFFFLL | ((unint64_t)(v35 & 1) << 35) | ((unint64_t)((v35 >> 1) & 1) << 36);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 30, 1);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 8, 1);
    a2->var167 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    a2->var168 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 4, 1);
    a2->var12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    a2->var25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) - v5 < v6)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2, 1);
    a2->var27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    v36 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 148) = ((unint64_t)((v36 >> 9) & 1) << 32) | ((unint64_t)((v36 >> 10) & 1) << 33) | ((unint64_t)((v36 >> 11) & 1) << 34) | *(_QWORD *)((char *)a2 + 148) & 0xFFFFFFF887FFFFFFLL | ((unint64_t)(v36 & 1) << 27) | ((unint64_t)((v36 >> 1) & 1) << 28) | ((unint64_t)((v36 >> 2) & 1) << 29) | ((unint64_t)((v36 >> 3) & 1) << 30);
    a2->var174 = v36 >> 12;
    v37 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    v38 = *(_QWORD *)((char *)a2 + 148) & 0xFFFFFE07FFFFFFFFLL | ((unint64_t)(v37 & 1) << 35) | ((unint64_t)((v37 >> 1) & 1) << 36);
    a2->var29 = (v37 >> 2) & 0x3FF;
    *(_QWORD *)((char *)a2 + 148) = v38 | ((unint64_t)((v37 >> 12) & 1) << 37) | ((unint64_t)((v37 >> 13) & 1) << 38) | (v37 << 25) & 0x8000000000 | ((unint64_t)(v37 >> 15) << 40);
    v39 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
    if ((v39 & 1) != 0)
    {
      *v8 |= 0x20000000000uLL;
      if ((v39 & 2) == 0)
      {
LABEL_48:
        if ((v39 & 4) == 0)
          goto LABEL_49;
        goto LABEL_143;
      }
    }
    else if ((v39 & 2) == 0)
    {
      goto LABEL_48;
    }
    *v8 |= 0x40000000000uLL;
    if ((v39 & 4) == 0)
    {
LABEL_49:
      if ((v39 & 8) == 0)
        goto LABEL_50;
      goto LABEL_144;
    }
LABEL_143:
    *v8 |= 0x80000000000uLL;
    if ((v39 & 8) == 0)
    {
LABEL_50:
      if ((v39 & 0x10) == 0)
        goto LABEL_51;
      goto LABEL_145;
    }
LABEL_144:
    *v8 |= 0x100000000000uLL;
    if ((v39 & 0x10) == 0)
    {
LABEL_51:
      if ((v39 & 0x20) == 0)
        goto LABEL_52;
      goto LABEL_146;
    }
LABEL_145:
    *v8 |= 0x200000000000uLL;
    if ((v39 & 0x20) == 0)
    {
LABEL_52:
      if ((v39 & 0x40) == 0)
        goto LABEL_53;
      goto LABEL_147;
    }
LABEL_146:
    *v8 |= 0x400000000000uLL;
    if ((v39 & 0x40) == 0)
    {
LABEL_53:
      if ((v39 & 0x80) == 0)
        goto LABEL_54;
      goto LABEL_148;
    }
LABEL_147:
    *v8 |= 0x800000000000uLL;
    if ((v39 & 0x80) == 0)
    {
LABEL_54:
      if ((v39 & 0x100) == 0)
        goto LABEL_55;
      goto LABEL_149;
    }
LABEL_148:
    *v8 |= 0x1000000000000uLL;
    if ((v39 & 0x100) == 0)
    {
LABEL_55:
      if ((v39 & 0x200) == 0)
        goto LABEL_56;
      goto LABEL_150;
    }
LABEL_149:
    *v8 |= 0x2000000000000uLL;
    if ((v39 & 0x200) == 0)
    {
LABEL_56:
      if ((v39 & 0x400) == 0)
        goto LABEL_57;
      goto LABEL_151;
    }
LABEL_150:
    *v8 |= 0x4000000000000uLL;
    if ((v39 & 0x400) == 0)
    {
LABEL_57:
      if ((v39 & 0x800) == 0)
        goto LABEL_58;
      goto LABEL_152;
    }
LABEL_151:
    *v8 |= 0x8000000000000uLL;
    if ((v39 & 0x800) == 0)
    {
LABEL_58:
      if ((v39 & 0x1000) != 0)
        goto LABEL_59;
      goto LABEL_153;
    }
LABEL_152:
    *v8 |= 0x10000000000000uLL;
    if ((v39 & 0x1000) != 0)
    {
LABEL_59:
      if ((v39 & 0x2000) == 0)
        goto LABEL_60;
      goto LABEL_154;
    }
LABEL_153:
    *v8 &= ~0x20000000000000uLL;
    if ((v39 & 0x2000) == 0)
    {
LABEL_60:
      if ((v39 & 0x4000) == 0)
        goto LABEL_61;
      goto LABEL_155;
    }
LABEL_154:
    *v8 |= 0x40000000000000uLL;
    if ((v39 & 0x4000) == 0)
    {
LABEL_61:
      if ((v39 & 0x8000) == 0)
        goto LABEL_62;
      goto LABEL_156;
    }
LABEL_155:
    *v8 |= 0x80000000000000uLL;
    if ((v39 & 0x8000) == 0)
    {
LABEL_62:
      if ((v39 & 0x10000) == 0)
        goto LABEL_63;
      goto LABEL_157;
    }
LABEL_156:
    *v8 |= 0x100000000000000uLL;
    if ((v39 & 0x10000) == 0)
    {
LABEL_63:
      if ((v39 & 0x20000) == 0)
        goto LABEL_64;
      goto LABEL_158;
    }
LABEL_157:
    *v8 |= 0x200000000000000uLL;
    if ((v39 & 0x20000) == 0)
    {
LABEL_64:
      if ((v39 & 0x40000) == 0)
        goto LABEL_65;
      goto LABEL_159;
    }
LABEL_158:
    *v8 |= 0x400000000000000uLL;
    if ((v39 & 0x40000) == 0)
    {
LABEL_65:
      if ((v39 & 0x80000) == 0)
        goto LABEL_66;
      goto LABEL_160;
    }
LABEL_159:
    *v8 |= 0x800000000000000uLL;
    if ((v39 & 0x80000) == 0)
    {
LABEL_66:
      if ((v39 & 0x100000) == 0)
        goto LABEL_67;
      goto LABEL_161;
    }
LABEL_160:
    *v8 |= 0x1000000000000000uLL;
    if ((v39 & 0x100000) == 0)
    {
LABEL_67:
      if ((v39 & 0x200000) == 0)
        goto LABEL_68;
      goto LABEL_162;
    }
LABEL_161:
    *v8 |= 0x2000000000000000uLL;
    if ((v39 & 0x200000) == 0)
    {
LABEL_68:
      if ((v39 & 0x400000) == 0)
        goto LABEL_69;
      goto LABEL_163;
    }
LABEL_162:
    *v8 |= 0x4000000000000000uLL;
    if ((v39 & 0x400000) == 0)
    {
LABEL_69:
      if ((v39 & 0x800000) == 0)
        goto LABEL_70;
      goto LABEL_164;
    }
LABEL_163:
    *v8 |= 0x8000000000000000;
    if ((v39 & 0x800000) == 0)
    {
LABEL_70:
      if ((v39 & 0x1000000) == 0)
        goto LABEL_71;
      goto LABEL_165;
    }
LABEL_164:
    *(_QWORD *)((char *)a2 + 156) |= 1uLL;
    if ((v39 & 0x1000000) == 0)
    {
LABEL_71:
      if ((v39 & 0x2000000) == 0)
        goto LABEL_72;
      goto LABEL_166;
    }
LABEL_165:
    *(_QWORD *)((char *)a2 + 156) |= 2uLL;
    if ((v39 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v39 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_167;
    }
LABEL_166:
    *(_QWORD *)((char *)a2 + 156) |= 4uLL;
    if ((v39 & 0x4000000) == 0)
    {
LABEL_73:
      if ((v39 & 0x8000000) == 0)
        goto LABEL_74;
      goto LABEL_168;
    }
LABEL_167:
    *(_QWORD *)((char *)a2 + 156) |= 8uLL;
    if ((v39 & 0x8000000) == 0)
    {
LABEL_74:
      if ((v39 & 0x10000000) == 0)
        goto LABEL_75;
      goto LABEL_169;
    }
LABEL_168:
    *(_QWORD *)((char *)a2 + 156) |= 0x10uLL;
    if ((v39 & 0x10000000) == 0)
    {
LABEL_75:
      if ((v39 & 0x20000000) == 0)
        goto LABEL_76;
      goto LABEL_170;
    }
LABEL_169:
    *(_QWORD *)((char *)a2 + 156) |= 0x20uLL;
    if ((v39 & 0x20000000) == 0)
    {
LABEL_76:
      if ((v39 & 0x40000000) == 0)
        goto LABEL_77;
      goto LABEL_171;
    }
LABEL_170:
    *(_QWORD *)((char *)a2 + 156) |= 0x40uLL;
    if ((v39 & 0x40000000) == 0)
    {
LABEL_77:
      if ((v39 & 0x80000000) == 0)
        goto LABEL_78;
LABEL_172:
      *(_QWORD *)((char *)a2 + 156) |= 0x100uLL;
LABEL_78:
      v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
      if ((v40 & 1) != 0)
      {
        *(_QWORD *)((char *)a2 + 156) |= 0x200uLL;
        if ((v40 & 2) == 0)
        {
LABEL_80:
          if ((v40 & 4) == 0)
            goto LABEL_81;
          goto LABEL_175;
        }
      }
      else if ((v40 & 2) == 0)
      {
        goto LABEL_80;
      }
      *(_QWORD *)((char *)a2 + 156) |= 0x400uLL;
      if ((v40 & 4) == 0)
      {
LABEL_81:
        if ((v40 & 8) != 0)
          goto LABEL_82;
        goto LABEL_176;
      }
LABEL_175:
      *(_QWORD *)((char *)a2 + 156) |= 0x800uLL;
      if ((v40 & 8) != 0)
      {
LABEL_82:
        if ((v40 & 0x10) == 0)
          goto LABEL_83;
        goto LABEL_177;
      }
LABEL_176:
      *(_QWORD *)((char *)a2 + 156) &= ~0x1000uLL;
      if ((v40 & 0x10) == 0)
      {
LABEL_83:
        if ((v40 & 0x20) == 0)
          goto LABEL_84;
        goto LABEL_178;
      }
LABEL_177:
      *(_QWORD *)((char *)a2 + 156) |= 0x2000uLL;
      if ((v40 & 0x20) == 0)
      {
LABEL_84:
        if ((v40 & 0x40) == 0)
          goto LABEL_85;
        goto LABEL_179;
      }
LABEL_178:
      *(_QWORD *)((char *)a2 + 156) |= 0x4000uLL;
      if ((v40 & 0x40) == 0)
      {
LABEL_85:
        if ((v40 & 0x80) == 0)
          goto LABEL_86;
        goto LABEL_180;
      }
LABEL_179:
      *(_QWORD *)((char *)a2 + 156) |= 0x8000uLL;
      if ((v40 & 0x80) == 0)
      {
LABEL_86:
        if ((v40 & 0x100) == 0)
          goto LABEL_87;
        goto LABEL_181;
      }
LABEL_180:
      *(_QWORD *)((char *)a2 + 156) |= 0x10000uLL;
      if ((v40 & 0x100) == 0)
      {
LABEL_87:
        if ((v40 & 0x200) == 0)
          goto LABEL_88;
        goto LABEL_182;
      }
LABEL_181:
      *(_QWORD *)((char *)a2 + 156) |= 0x20000uLL;
      if ((v40 & 0x200) == 0)
      {
LABEL_88:
        if ((v40 & 0x400) == 0)
          goto LABEL_89;
        goto LABEL_183;
      }
LABEL_182:
      *(_QWORD *)((char *)a2 + 156) |= 0x40000uLL;
      if ((v40 & 0x400) == 0)
      {
LABEL_89:
        if ((v40 & 0x800) == 0)
          goto LABEL_90;
        goto LABEL_184;
      }
LABEL_183:
      *(_QWORD *)((char *)a2 + 156) |= 0x80000uLL;
      if ((v40 & 0x800) == 0)
      {
LABEL_90:
        if ((v40 & 0x1000) == 0)
          goto LABEL_91;
        goto LABEL_185;
      }
LABEL_184:
      *(_QWORD *)((char *)a2 + 156) |= 0x1000000000000uLL;
      if ((v40 & 0x1000) == 0)
      {
LABEL_91:
        if ((v40 & 0x2000) == 0)
          goto LABEL_92;
        goto LABEL_186;
      }
LABEL_185:
      *(_QWORD *)((char *)a2 + 156) |= 0x4000000000000uLL;
      if ((v40 & 0x2000) == 0)
      {
LABEL_92:
        if ((v40 & 0x4000) == 0)
          goto LABEL_93;
        goto LABEL_187;
      }
LABEL_186:
      *(_QWORD *)((char *)a2 + 156) |= 0x8000000000000uLL;
      if ((v40 & 0x4000) == 0)
      {
LABEL_93:
        if ((v40 & 0x8000) == 0)
        {
LABEL_95:
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 24, 1);
          v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
          a2->var28 = v41;
          *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFFBFBFFFFFFFFFFFLL | ((unint64_t)(HIWORD(v41) & 1) << 46) | ((unint64_t)((v41 >> 23) & 1) << 54);
          goto LABEL_96;
        }
LABEL_94:
        *(_QWORD *)((char *)a2 + 156) |= 0x800000000000uLL;
        goto LABEL_95;
      }
LABEL_187:
      *(_QWORD *)((char *)a2 + 156) |= 0x2000000000000uLL;
      if ((v40 & 0x8000) == 0)
        goto LABEL_95;
      goto LABEL_94;
    }
LABEL_171:
    *(_QWORD *)((char *)a2 + 156) |= 0x80uLL;
    if ((v39 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_172;
  }
LABEL_96:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) - v5 < v6)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 4, 1);
    v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFFCFFFFFFFFFFFFFLL | (((v42 >> 6) & 1) << 52) | ((unint64_t)(v42 >> 7) << 53);
    v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFFFFFE1FFFFFFFFFLL | ((unint64_t)((v43 >> 4) & 1) << 37) & 0xFFFFFF7FFFFFFFFFLL | ((unint64_t)((v43 >> 5) & 1) << 38) & 0xFFFFFF7FFFFFFFFFLL | (((v43 >> 6) & 1) << 39) | ((unint64_t)(v43 >> 7) << 40);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 4, 1);
    a2->var20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFFFFC1FFFFFFFFFFLL | ((unint64_t)(v44 & 1) << 43) | ((unint64_t)((v44 >> 1) & 1) << 44) | ((unint64_t)((v44 >> 2) & 1) << 45) | ((unint64_t)((v44 >> 4) & 1) << 42) | ((unint64_t)((v44 >> 5) & 1) << 41);
    a2->var19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 36, 1);
  }
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
  if ((int)result - v5 < v6)
  {
    v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFE7FFFFFFFFFFFFFLL | ((unint64_t)((v46 >> 1) & 1) << 55) | ((unint64_t)((v46 >> 2) & 1) << 56);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
    *(_QWORD *)((char *)a2 + 156) = *(_QWORD *)((char *)a2 + 156) & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)((result & 8) != 0) << 57);
    a2->var21 = result >> 4;
  }
  if (v6 <= 0x220)
    *(_QWORD *)((char *)a2 + 156) |= (*v8 << 18) & 0x2000000000 | 0x3DC000000000;
  if (*((unsigned __int16 *)this + 116) >= 0xB5u)
  {
    result = (unint64_t)WrdParser::startFCLCB(this, 0xB5u) >> 32;
    if ((_DWORD)result)
    {
      v50 = result;
      v47 = (char *)operator new[](result);
      (*(void (**)(_QWORD, char *, unsigned int *))(**((_QWORD **)this + 16) + 56))(*((_QWORD *)this + 16), v47, &v50);
      result = (uint64_t)WrdDocumentProperties::takeThemeData(a2, v47, v50);
    }
    if (*((unsigned __int16 *)this + 116) >= 0xB6u)
    {
      result = (unint64_t)WrdParser::startFCLCB(this, 0xB6u) >> 32;
      if ((_DWORD)result)
      {
        v49 = result;
        v48 = (char *)operator new[](result);
        (*(void (**)(_QWORD, char *, unsigned int *))(**((_QWORD **)this + 16) + 56))(*((_QWORD *)this + 16), v48, &v49);
        return (uint64_t)WrdDocumentProperties::takeColorSchemeMapXmlStream(a2, v48, v49);
      }
    }
  }
  return result;
}

uint64_t WrdDocumentProperties::setDefaultBasedOnVersion(uint64_t result, int a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 > 9)
  {
    if ((a2 - 10) >= 2)
      return result;
    goto LABEL_7;
  }
  if (a2 == -1)
  {
LABEL_7:
    v3 = *(_QWORD *)(result + 148);
    v4 = *(_QWORD *)(result + 156) | 0x1000;
LABEL_8:
    *(_QWORD *)(result + 156) = v4;
    if ((a3 & 1) != 0)
      return result;
    v5 = v3 | 0x20000000000000;
    goto LABEL_12;
  }
  if (a2 != 8)
  {
    if (a2 != 9)
      return result;
    v3 = *(_QWORD *)(result + 148);
    v4 = *(_QWORD *)(result + 156) | 0x7800000081000;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(result + 148);
  v4 = *(_QWORD *)(result + 156) | 0x78000000FBE00;
  *(_QWORD *)(result + 156) = v4;
  if ((a3 & 1) != 0)
    return result;
  v5 = v6 | 0x21E0000000000000;
LABEL_12:
  *(_QWORD *)(result + 148) = v5;
  *(_QWORD *)(result + 156) = v4;
  return result;
}

uint64_t WrdBaseParser::parseStream(WrdBaseParser *this, WrdDateTime *a2, SsrwOOStream *a3)
{
  unsigned int v5;
  uint64_t result;
  int v7;
  BOOL v8;

  v5 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  a2->var2 = v5 & 0x3F;
  a2->var3 = (v5 >> 6) & 0x1F;
  a2->var4 = (unsigned __int16)v5 >> 11;
  result = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 9))(a3);
  v7 = (unsigned __int16)result >> 13;
  a2->var1 = v7;
  a2->var5 = result & 0xF;
  a2->var6 = (result >> 4) & 0x1FF;
  if (a2->var2 > 0x3Bu
    || a2->var3 > 0x17u
    || a2->var4 > 0x1Fu
    || ((result & 0xFu) <= 0xC ? (v8 = v7 == 7) : (v8 = 1), v8))
  {
    *(_QWORD *)&a2->var3 = 0;
    *(_QWORD *)&a2->var1 = 0;
  }
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdDOPTypography *a2)
{
  unsigned int v4;
  char v5;
  unsigned int v6;
  uint64_t result;
  int v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  v5 = *((_BYTE *)a2 + 66) & 0xF0 | v4 & 1;
  *((int8x8_t *)a2 + 1) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32((unsigned __int16)v4), (uint32x2_t)0xFFFFFFFDFFFFFFFFLL), (int8x8_t)0x300000003);
  *((_WORD *)a2 + 32) = ((unsigned __int16)v4 >> 7) & 7;
  *((_BYTE *)a2 + 66) = (v4 >> 4) & 6 | v5 | ((unsigned __int16)v4 >> 7) & 8;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  if ((v6 & 0x80000000) == 0)
  {
    v8 = result;
    if ((result & 0x80000000) == 0)
    {
      CsString::reserve((CsString *)((char *)a2 + 16), v6);
      CsString::setCount((CsString *)((char *)a2 + 16), v6);
      CsString::reserve((CsString *)((char *)a2 + 40), v8);
      CsString::setCount((CsString *)((char *)a2 + 40), v8);
      v9 = (_WORD *)*((_QWORD *)a2 + 3);
      if (!v9)
        goto LABEL_13;
      if (v6)
      {
        v10 = (unsigned __int16)v6;
        do
        {
          *v9++ = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 128))(*((_QWORD *)this + 16));
          --v10;
        }
        while (v10);
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2 * (WrdDOPTypography::s_bMaximumNumberOfCharactersThatShouldNeverAppearAtFront - v6), 1);
      v11 = (_WORD *)*((_QWORD *)a2 + 6);
      if (!v11)
      {
LABEL_13:
        exception = __cxa_allocate_exception(4uLL);
        *exception = 2001;
      }
      if (v8 >= 1)
      {
        v12 = (unsigned __int16)v8;
        do
        {
          *v11++ = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 128))(*((_QWORD *)this + 16));
          --v12;
        }
        while (v12);
      }
      return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2* (WrdDOPTypography::s_bMaximumNumberOfCharactersThatShouldNeverAppearAtEnd- v8), 1);
    }
  }
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdDrawingObjectGrid *a2)
{
  uint64_t result;
  unsigned int v5;

  *((_WORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  *((_WORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  *((_WORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  *((_WORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  *((_WORD *)a2 + 8) = result & 0x7F;
  v5 = *((_BYTE *)a2 + 20) & 0xFC | (result >> 7) & 1;
  *((_WORD *)a2 + 9) = (result >> 8) & 0x7F;
  *((_BYTE *)a2 + 20) = v5 | (result >> 14) & 2;
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdAutoSummaryInfo *a2)
{
  unsigned int v4;
  char v5;
  uint64_t result;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  v5 = *((_BYTE *)a2 + 22) & 0xF8 | v4 & 3;
  *((_DWORD *)a2 + 2) = (v4 >> 2) & 3;
  *((_BYTE *)a2 + 22) = v5 | (v4 >> 2) & 4;
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 3) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 4) = result;
  return result;
}

void WrdDOPTypography::WrdDOPTypography(WrdDOPTypography *this, const WrdDOPTypography *a2)
{
  CsString *v4;

  *(_QWORD *)this = &off_24F3B1C00;
  v4 = (CsString *)((char *)this + 40);
  CsString::CsString((CsString *)((char *)this + 16));
  CsString::CsString(v4);
  WrdDOPTypography::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_22A16B3F0(_Unwind_Exception *a1)
{
  CsString *v1;
  CsString *v2;

  CsString::~CsString(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdDOPTypography::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  const CsString *v7;
  CsString *v8;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v4 = *(_BYTE *)(a1 + 66) & 0xFE | *(_BYTE *)(a2 + 66) & 1;
  *(_BYTE *)(a1 + 66) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 66) >> 1) & 1));
  *(_BYTE *)(a1 + 66) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 66) >> 2) & 1));
  *(_BYTE *)(a1 + 66) = v6;
  *(_BYTE *)(a1 + 66) = v6 & 0xF7 | *(_BYTE *)(a2 + 66) & 8;
  v7 = (const CsString *)(a2 + 16);
  v8 = (CsString *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  bzero(*(void **)(a1 + 24), 2 * *(unsigned int *)(a1 + 36));
  CsString::append(v8, v7);
  *(_DWORD *)(a1 + 56) = 0;
  bzero(*(void **)(a1 + 48), 2 * *(unsigned int *)(a1 + 60));
  CsString::append((CsString *)(a1 + 40), (const CsString *)(a2 + 40));
  return a1;
}

void WrdDocumentProperties::~WrdDocumentProperties(WrdDocumentProperties *this)
{
  WrdDocumentProperties::~WrdDocumentProperties(this);
  JUMPOUT(0x22E2DD408);
}

{
  WrdDOPTypography *var2;
  WrdDrawingObjectGrid *var3;
  WrdAutoSummaryInfo *var4;
  WrdDateTime *var5;
  WrdDateTime *var6;
  WrdDateTime *var7;
  char *var175;
  char *var177;

  this->var0 = (void **)&off_24F3B2B68;
  var2 = this->var2;
  if (var2)
    (*(void (**)(WrdDOPTypography *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
  var3 = this->var3;
  if (var3)
    (*(void (**)(WrdDrawingObjectGrid *))(*(_QWORD *)var3 + 8))(var3);
  this->var3 = 0;
  var4 = this->var4;
  if (var4)
    (*(void (**)(WrdAutoSummaryInfo *))(*(_QWORD *)var4 + 8))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*((void (**)(WrdDateTime *))var5->var0 + 1))(var5);
  this->var5 = 0;
  var6 = this->var6;
  if (var6)
    (*((void (**)(WrdDateTime *))var6->var0 + 1))(var6);
  this->var6 = 0;
  var7 = this->var7;
  if (var7)
    (*((void (**)(WrdDateTime *))var7->var0 + 1))(var7);
  this->var7 = 0;
  var175 = this->var175;
  if (var175)
    MEMORY[0x22E2DD3F0](var175, 0x1000C8077774924);
  this->var175 = 0;
  var177 = this->var177;
  if (var177)
    MEMORY[0x22E2DD3F0](var177, 0x1000C8077774924);
  this->var177 = 0;
}

void WrdDOPTypography::~WrdDOPTypography(WrdDOPTypography *this)
{
  CsString *v1;

  *(_QWORD *)this = &off_24F3B1C00;
  v1 = (CsString *)((char *)this + 16);
  CsString::~CsString((CsString *)((char *)this + 40));
  CsString::~CsString(v1);
  JUMPOUT(0x22E2DD408);
}

{
  CsString *v1;

  *(_QWORD *)this = &off_24F3B1C00;
  v1 = (CsString *)((char *)this + 16);
  CsString::~CsString((CsString *)((char *)this + 40));
  CsString::~CsString(v1);
}

void WrdDrawingObjectGrid::~WrdDrawingObjectGrid(WrdDrawingObjectGrid *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdAutoSummaryInfo::~WrdAutoSummaryInfo(WrdAutoSummaryInfo *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdDateTime::~WrdDateTime(WrdDateTime *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t WrdBinaryReader::read(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_DWORD *)(v2 + 152);
  LODWORD(v2) = *(_DWORD *)(v2 + 160);
  *a2 = v3;
  a2[1] = v2;
  return result;
}

unsigned __int8 *`non-virtual thunk to'WrdBinaryReader::read(OcBinaryReader *this, OcSummary *a2)
{
  return OcBinaryReader::readSummary(this - 1, a2);
}

uint64_t WrdBinaryReader::getRootStorage(WrdBinaryReader *this)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1006;
  }
  return v1 + 24;
}

uint64_t OcBinaryReader::getDualStorageName(OcBinaryReader *this)
{
  return 0;
}

uint64_t SsrwOOPropVariant::getBlobValueData(SsrwOOPropVariant *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16);
}

uint64_t SsrwOOPropVariant::getBlobValueSize(SsrwOOPropVariant *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 8);
}

void OcHyperlink::OcHyperlink(OcHyperlink *this)
{
  CsString *v1;

  *(_QWORD *)this = &off_24F3A60B8;
  v1 = (CsString *)((char *)this + 48);
  CsString::CsString((CsString *)this + 1);
  CsString::CsString(v1);
}

void sub_22A16B794(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void OcHyperlink::~OcHyperlink(CsString *this)
{
  CsString *v1;

  this->var0 = (void **)&off_24F3A60B8;
  v1 = this + 1;
  CsString::~CsString(this + 2);
  CsString::~CsString(v1);
  JUMPOUT(0x22E2DD408);
}

{
  CsString *v1;

  this->var0 = (void **)&off_24F3A60B8;
  v1 = this + 1;
  CsString::~CsString(this + 2);
  CsString::~CsString(v1);
}

void sub_22A16B98C(void *a1, int a2)
{
  uint64_t v2;
  void *v3;
  unsigned int *v6;
  void *v7;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (a2 == 3)
  {
    v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    v7 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v7, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A16B96CLL);
}

void sub_22A16BA34(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (a2 == 2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A16B96CLL);
  }

  _Unwind_Resume(exc_buf);
}

void WrdShading::WrdShading(WrdShading *this)
{
  __int128 v2;
  CsColour *p_var4;

  this->var0 = (void **)&off_24F3B3D30;
  *(_QWORD *)&v2 = 255;
  *((_QWORD *)&v2 + 1) = 255;
  *(_OWORD *)&this->var3.var0 = v2;
  p_var4 = &this->var4;
  this->var1 = 0;
  this->var2 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var3);
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)p_var4);
  this->var5 = 0;
  *(_QWORD *)&this->var6 = 0;
}

uint64_t WrdProperty::convertWord97ColorEnumToColor(uint64_t result, uint64_t a2)
{
  int v2;
  char *v3;
  int v4;
  int v5;

  if ((int)result <= 16)
    v2 = result;
  else
    v2 = 31;
  if (v2)
  {
    if (v2 == 31)
    {
      *(_QWORD *)a2 = 0xFF00FF00FF0000;
    }
    else
    {
      v3 = (char *)&WrdProperty::s_word97Colors + 16 * v2;
      v4 = *((_DWORD *)v3 - 3);
      v5 = *((_DWORD *)v3 - 2);
      LODWORD(v3) = *((_DWORD *)v3 - 1);
      *(_WORD *)a2 = 255;
      *(_WORD *)(a2 + 2) = v4;
      *(_WORD *)(a2 + 4) = v5;
      *(_WORD *)(a2 + 6) = (_WORD)v3;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return result;
}

void WrdLineSpaceDescriptor::WrdLineSpaceDescriptor(WrdLineSpaceDescriptor *this)
{
  *(_QWORD *)this = &off_24F3B3530;
  *((_DWORD *)this + 2) = 65776;
}

void WrdDropCap::WrdDropCap(WrdDropCap *this)
{
  *(_QWORD *)this = &off_24F3B2BE8;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
}

void WrdBorder::WrdBorder(WrdBorder *this)
{
  this->var0 = (void **)&off_24F3B2830;
  this->var1.var0 = 255;
  *(_WORD *)&this->var6 = 0;
  *(_QWORD *)&this->var1.var1 = 0;
  HIWORD(this->var2) = 0;
  *((_BYTE *)this + 24) &= 0xFCu;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var1);
  this->var3 = 0;
}

void WrdAutoNumberLevelDescriptor::WrdAutoNumberLevelDescriptor(WrdAutoNumberLevelDescriptor *this)
{
  *(_QWORD *)this = &off_24F3B26A8;
  *((_WORD *)this + 22) = 0;
  *((_WORD *)this + 21) &= 0x8000u;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 255;
}

void WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(WrdAutoNumberListDescriptor *this, WrdAutoNumberLevelDescriptor *a2)
{
  *(_QWORD *)this = &off_24F3B26F0;
  CsString::CsString((CsString *)((char *)this + 16));
  *((_QWORD *)this + 1) = a2;
  (*(void (**)(WrdAutoNumberListDescriptor *))(*(_QWORD *)this + 24))(this);
}

void sub_22A16BC7C(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdAutoNumberListDescriptor::reset(WrdAutoNumberListDescriptor *this)
{
  *(_WORD *)((char *)this + 41) = 0;
  *((_BYTE *)this + 40) &= ~1u;
  *((_DWORD *)this + 8) = 0;
  bzero(*((void **)this + 3), 2 * *((unsigned int *)this + 9));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

double WrdAutoNumberLevelDescriptor::reset(WrdAutoNumberLevelDescriptor *this)
{
  double result;

  *((_WORD *)this + 22) = 0;
  *((_WORD *)this + 21) &= 0x8000u;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)&result = 255;
  *((_QWORD *)this + 1) = 255;
  return result;
}

void WrdNumberRevisionMarkData::WrdNumberRevisionMarkData(WrdNumberRevisionMarkData *this, WrdDateTime *a2)
{
  *(_QWORD *)this = &off_24F3B3828;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_WORD *)this + 32) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 66) &= ~1u;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = 0;
}

void WrdNumberRevisionMarkData::init(WrdNumberRevisionMarkData *this)
{
  WrdDateTime *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  if (!*((_QWORD *)this + 4))
  {
    v2 = (WrdDateTime *)operator new(0x18uLL);
    WrdDateTime::WrdDateTime(v2);
    *((_QWORD *)this + 4) = v2;
  }
  if (!*((_QWORD *)this + 6) && !*((_QWORD *)this + 7) && !*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 6) = operator new[](0x24uLL);
    *((_QWORD *)this + 7) = operator new[](9uLL);
    v3 = operator new[](0x24uLL);
    v4 = 0;
    *((_QWORD *)this + 5) = v3;
    do
    {
      *(_BYTE *)(*((_QWORD *)this + 7) + v4) = 0;
      v5 = *((_QWORD *)this + 6);
      *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v4) = 0;
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    }
    while (v4 != 9);
  }
}

void sub_22A16BDF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdTabDescriptor::WrdTabDescriptor(WrdTabDescriptor *this)
{
  *(_QWORD *)this = &off_24F3B3FA0;
  *((_QWORD *)this + 1) = 0;
}

uint64_t WrdParagraphProperties::reset(WrdParagraphProperties *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 300) = 9;
  v2 = (unsigned int *)((char *)this + 294);
  v3 = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFC;
  *(_DWORD *)((char *)this + 294) = v3;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 17) = 0;
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    v5 = *((_QWORD *)this + 26);
    if (v5)
    {
      v6 = *((_QWORD *)this + 27);
      if (v6)
      {
        for (i = 0; i != 128; i += 2)
        {
          *(_WORD *)(v4 + i) = 0;
          *(_WORD *)(v5 + i) = 0;
          *(_WORD *)(v6 + i) = 0;
        }
        v3 = *v2;
      }
    }
  }
  *((_QWORD *)this + 34) = 0;
  *((_OWORD *)this + 9) = xmmword_22A4D2A70;
  *((_WORD *)this + 149) = 2304;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = 0;
  *v2 = v3 & 0xC0000003 | 0x200;
  *((_WORD *)this + 146) = 0;
  WrdShading::reset(*((WrdShading **)this + 4));
  WrdLineSpaceDescriptor::reset(*((_QWORD *)this + 5));
  WrdDropCap::reset(*((_QWORD *)this + 6));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14));
  return WrdNumberRevisionMarkData::reset(*((WrdNumberRevisionMarkData **)this + 15));
}

uint64_t WrdShading::reset(WrdShading *this)
{
  uint64_t result;

  this->var1 = 0;
  this->var2 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var3);
  result = WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var4);
  this->var5 = 0;
  *(_QWORD *)&this->var6 = 0;
  return result;
}

uint64_t WrdLineSpaceDescriptor::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) = 65776;
  return this;
}

uint64_t WrdDropCap::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 12) = 0;
  return this;
}

uint64_t WrdBorder::reset(WrdBorder *this)
{
  uint64_t result;

  *(_WORD *)&this->var6 = 0;
  this->var2 = 0;
  *((_BYTE *)this + 24) &= 0xFCu;
  result = WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var1);
  this->var3 = 0;
  return result;
}

WrdDateTime *WrdDateTime::reset(WrdDateTime *this)
{
  *(_QWORD *)&this->var3 = 0;
  *(_QWORD *)&this->var1 = 0;
  return this;
}

uint64_t WrdNumberRevisionMarkData::reset(WrdNumberRevisionMarkData *this)
{
  uint64_t result;
  uint64_t i;
  uint64_t v4;

  result = *((_QWORD *)this + 4);
  if (result && *((_QWORD *)this + 7) && *((_QWORD *)this + 5) && *((_QWORD *)this + 6))
  {
    *((_WORD *)this + 32) = 0;
    *((_BYTE *)this + 66) &= ~1u;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    for (i = 0; i != 9; ++i)
    {
      *(_BYTE *)(*((_QWORD *)this + 7) + i) = 0;
      v4 = *((_QWORD *)this + 6);
      *(_DWORD *)(*((_QWORD *)this + 5) + 4 * i) = 0;
      *(_DWORD *)(v4 + 4 * i) = 0;
    }
  }
  return result;
}

char *WrdParagraphProperties::init(WrdParagraphProperties *this)
{
  _QWORD *v2;
  uint64_t i;
  uint64_t j;
  char *result;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)((char *)this + 176);
  if (((*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) & 0x7FFFFFFF8) == 0)
  {
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 176, 0x40u);
    for (i = 0; i != 512; i += 8)
      *(_QWORD *)(*v2 + i) = 0;
    for (j = 0; j != 512; j += 8)
      *(_QWORD *)(*((_QWORD *)this + 22) + j) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
  }
  if (!*((_QWORD *)this + 25))
    *((_QWORD *)this + 25) = operator new[](0x80uLL);
  result = (char *)*((_QWORD *)this + 26);
  if (!result)
  {
    result = (char *)operator new[](0x80uLL);
    *((_QWORD *)this + 26) = result;
  }
  v6 = (char *)*((_QWORD *)this + 27);
  if (!v6)
  {
    v6 = (char *)operator new[](0x80uLL);
    *((_QWORD *)this + 27) = v6;
    result = (char *)*((_QWORD *)this + 26);
  }
  v7 = 0;
  v8 = *((_QWORD *)this + 25);
  do
  {
    *(_WORD *)(v8 + v7) = 0;
    *(_WORD *)&result[v7] = 0;
    *(_WORD *)&v6[v7] = 0;
    v7 += 2;
  }
  while (v7 != 128);
  return result;
}

double WrdTabDescriptor::clone(WrdTabDescriptor *this)
{
  double *v2;
  double result;

  v2 = (double *)operator new(0x10uLL);
  *(_QWORD *)v2 = &off_24F3B3FA0;
  result = *((double *)this + 1);
  v2[1] = result;
  return result;
}

void WrdCharacterProperties::WrdCharacterProperties(WrdCharacterProperties *this, WrdShading *a2, WrdBorder *a3, WrdDateTime *a4, WrdDateTime *a5, WrdDateTime *a6, WrdDateTime *a7, WrdDateTime *a8)
{
  WrdCharacterPropertiesOverridden v16;

  this->var0 = (void **)&off_24F3B2878;
  this->var1 = (void **)&unk_24F3B28A8;
  *(_QWORD *)&v16 = 255;
  *((_QWORD *)&v16 + 1) = 255;
  *(WrdCharacterPropertiesOverridden *)((char *)&this->var2 + 14) = v16;
  CsString::CsString(&this->var5);
  this->var6 = a2;
  this->var7 = a3;
  this->var8 = a4;
  this->var9 = a5;
  this->var10 = a6;
  this->var11 = a7;
  this->var12 = a8;
  (*((void (**)(WrdCharacterProperties *))this->var0 + 2))(this);
}

void sub_22A16C278(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::reset(WrdCharacterProperties *this)
{
  unsigned __int16 *p_var64;
  int v3;
  int v4;

  p_var64 = &this->var64;
  *(_QWORD *)((char *)&this->var2 + 6) = 0;
  *(_QWORD *)&this->var2 = 0;
  v3 = *((_DWORD *)this + 85);
  *(_OWORD *)&this->var23 = 0u;
  *(_OWORD *)&this->var27 = 0u;
  *(_OWORD *)&this->var31 = 0u;
  *(_OWORD *)&this->var35 = 0u;
  *((_DWORD *)this + 85) = v3 & 0xEFFFFC00;
  this->var62 = 20;
  this->var49 = 0;
  *(_QWORD *)&this->var43 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var2 + 14);
  this->var60 = 100;
  *(_QWORD *)&this->var39 = 0x40000000400;
  this->var41 = 0;
  *((_DWORD *)this + 85) &= ~0x8000000u;
  *(_WORD *)&this->var107 = 0;
  *(_OWORD *)&this->var13 = 0u;
  this->var17 = 0;
  this->var63 = 0;
  this->var105 = 0;
  WrdProperty::convertWord97ColorEnumToColor(0, (uint64_t)&this->var3.var3);
  this->var61 = 0;
  v4 = *((_DWORD *)this + 85);
  *(_WORD *)&this->var109 = 0;
  this->var47 = 0;
  this->var50 = 0;
  this->var59 = 0;
  this->var22 = 0;
  this->var106 = 0;
  this->var42 = 0;
  *((_QWORD *)p_var64 + 2) = 10;
  *((_DWORD *)this + 85) = v4 & 0xF80003FF;
  *(_OWORD *)p_var64 = 0u;
  this->var48 = 0;
  *(_OWORD *)&this->var18 = 0u;
  *(_OWORD *)&this->var51 = xmmword_22A4C11F0;
  *(_OWORD *)&this->var55 = xmmword_22A4D24C0;
  this->var5.var2 = 0;
  bzero(this->var5.var1, 2 * this->var5.var3);
  WrdShading::reset(this->var6);
  (*((void (**)(WrdBorder *))this->var7->var0 + 3))(this->var7);
  (*((void (**)(WrdDateTime *))this->var8->var0 + 3))(this->var8);
  (*((void (**)(WrdDateTime *))this->var9->var0 + 3))(this->var9);
  (*((void (**)(WrdDateTime *))this->var10->var0 + 3))(this->var10);
  (*((void (**)(WrdDateTime *))this->var11->var0 + 3))(this->var11);
  return (*((uint64_t (**)(WrdDateTime *))this->var12->var0 + 3))(this->var12);
}

void WrdTableAutoformatLookSpecifier::WrdTableAutoformatLookSpecifier(WrdTableAutoformatLookSpecifier *this)
{
  *(_QWORD *)this = &off_24F3B3FE0;
  *((_DWORD *)this + 2) = 0;
  *((_WORD *)this + 6) &= 0xFE00u;
}

void WrdTableCellDescriptor::WrdTableCellDescriptor(WrdTableCellDescriptor *this, WrdShading *a2, WrdBorder *a3, WrdBorder *a4, WrdBorder *a5, WrdBorder *a6, WrdBorder *a7, WrdBorder *a8)
{
  *(_QWORD *)this = &off_24F3B4020;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = a5;
  *((_QWORD *)this + 6) = a6;
  *((_QWORD *)this + 7) = a7;
  *((_QWORD *)this + 8) = a8;
  WrdTableCellDescriptor::reset(this);
}

uint64_t WrdTableCellDescriptor::reset(WrdTableCellDescriptor *this)
{
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 114) = 0u;
  *((_WORD *)this + 65) &= 0xFE00u;
  WrdShading::reset(*((WrdShading **)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
}

uint64_t WrdTableProperties::reset(WrdTableProperties *this)
{
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 148) = xmmword_22A4D2EB0;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_QWORD *)((char *)this + 326) = 0;
  *((_BYTE *)this + 334) &= 0xC0u;
  *((_WORD *)this + 172) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 32) = *((_QWORD *)this + 31);
  WrdTableProperties::resetTableCellDescriptors(this);
  *(_QWORD *)((char *)this + 346) = 0x6C0000006C0000;
  *(_OWORD *)((char *)this + 354) = 0u;
  *(_OWORD *)((char *)this + 370) = 0u;
  *(_QWORD *)((char *)this + 386) = 0;
  WrdTableAutoformatLookSpecifier::reset(*((_QWORD *)this + 4));
  WrdShading::reset(*((WrdShading **)this + 6));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 24))(*((_QWORD *)this + 15));
}

WrdTableProperties *WrdTableProperties::resetTableCellDescriptors(WrdTableProperties *this)
{
  WrdTableProperties *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = *((_QWORD *)this + 34);
  if (((*((_QWORD *)this + 35) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(WrdTableProperties **)(v2 + 8 * v3);
      if (this)
      {
        this = (WrdTableProperties *)(*(uint64_t (**)(WrdTableProperties *))(*(_QWORD *)this + 8))(this);
        v2 = *((_QWORD *)v1 + 34);
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = *((_QWORD *)v1 + 34);
    }
    while (v3 < ((unint64_t)(*((_QWORD *)v1 + 35) - v2) >> 3));
  }
  *((_QWORD *)v1 + 35) = v2;
  return this;
}

uint64_t WrdTableAutoformatLookSpecifier::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  *(_WORD *)(this + 12) &= 0xFE00u;
  return this;
}

void WrdStyle::WrdStyle(WrdStyle *this, WrdParagraphProperties *a2, WrdParagraphProperties *a3, WrdCharacterProperties *a4, WrdCharacterProperties *a5, WrdTableProperties *a6, WrdDateTime *a7)
{
  *(_QWORD *)this = &off_24F3B3F20;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_DWORD *)this + 38) = 1;
  *(_QWORD *)((char *)this + 156) = 0xFFF0FFF0FFFLL;
  *((_BYTE *)this + 164) &= 0xE1u;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 6) = a4;
  *((_QWORD *)this + 7) = a5;
  *((_QWORD *)this + 8) = a6;
  *((_QWORD *)this + 9) = a7;
}

void WrdStyleSheet::WrdStyleSheet(WrdStyleSheet *this, WrdStyle *a2)
{
  uint64_t i;

  *(_QWORD *)this = &off_24F3B3F60;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  for (i = 48; i != 360; i += 2)
    *((_BYTE *)this + i) |= 1u;
  *((_WORD *)this + 180) = 0;
}

WrdStyleSheet *WrdBinaryReader::read(WrdBinaryReader *this, WrdStyleSheet *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 25);
  if (v2)
    return WrdStyleSheet::operator=(a2, v2);
  else
    return (WrdStyleSheet *)WrdParser::parse(*((WrdParser **)this + 4), a2);
}

uint64_t WrdParser::parse(WrdParser *this, WrdStyleSheet *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int i;
  char v8;
  _BYTE *PredefinedStyleInfoReference;
  unsigned int j;
  WrdStyle *v11;
  uint64_t result;

  WrdParser::startFCLCB(this, 1u);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  *((_WORD *)a2 + 180) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 8, 1);
  if (v4 >= 0xF)
  {
    *((_WORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    *((_WORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    *((_WORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
    v6 = v4 - 18;
    if (v6 >= 2)
    {
      *((_WORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
      v6 = v4 - 20;
      if (v6 >= 2)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2, 1);
        v6 = v4 - 22;
        if (v6 >= 0x270)
        {
          for (i = 0; i != 156; ++i)
          {
            v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
            PredefinedStyleInfoReference = (_BYTE *)WrdStyleSheet::getPredefinedStyleInfoReference((uint64_t)a2, i);
            *PredefinedStyleInfoReference = *PredefinedStyleInfoReference & 0xFE | v8 & 1;
          }
          v6 = v4 - 646;
        }
      }
    }
    if ((_DWORD)v6)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v6, 1);
  }
  if (v5)
  {
    for (j = 0; j < v5; ++j)
    {
      v11 = (WrdStyle *)WrdStyleSheet::addStyle(a2);
      WrdParser::parse(this, v11, *((unsigned __int16 *)a2 + 180));
    }
  }
  result = *(_QWORD *)(WrdStyleSheet::getStyleReference(a2, 0) + 48);
  if ((*(_QWORD *)(result + 16) & 0x400000000000) == 0)
    return WrdCharacterProperties::setLanguageIDForFarEastAsianText(result, 1041);
  return result;
}

void WrdStyleSheet::setNumberOfStyles(WrdStyleSheet *this, unsigned int a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t *)((char *)this + 24);
  v5 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v6 = 0;
    v7 = (v5 >> 3);
    do
    {
      v8 = *v4;
      v9 = *(_QWORD *)(*v4 + 8 * v6);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v8 = *v4;
      }
      *(_QWORD *)(v8 + 8 * v6++) = 0;
    }
    while (v7 != v6);
  }
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)v4, a2);
  if (a2)
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*v4 + v10) = 0;
      v10 += 8;
    }
    while (8 * a2 != v10);
    v11 = 0;
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)(*((_QWORD *)this + 3) + v11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
      v11 += 8;
    }
    while (v12 != v11);
  }
}

WrdStyle *WrdStyle::clone(WrdStyle *this)
{
  WrdParagraphProperties *v2;
  WrdParagraphProperties *v3;
  WrdCharacterProperties *v4;
  WrdCharacterProperties *v5;
  WrdTableProperties *v6;
  WrdDateTime *v7;
  WrdStyle *v8;

  v2 = (WrdParagraphProperties *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  v3 = (WrdParagraphProperties *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
  v4 = (WrdCharacterProperties *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  v5 = (WrdCharacterProperties *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  v6 = (WrdTableProperties *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
  v7 = (WrdDateTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
  v8 = (WrdStyle *)operator new(0xA8uLL);
  WrdStyle::WrdStyle(v8, v2, v3, v4, v5, v6, v7);
  WrdStyle::operator=((uint64_t)v8, (uint64_t)this);
  return v8;
}

void sub_22A16CB68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_22A16CBD8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16CBE0);
  JUMPOUT(0x22A16CB98);
}

void sub_22A16CBF8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16CC00);
  JUMPOUT(0x22A16CB9CLL);
}

void sub_22A16CC18()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16CC20);
  JUMPOUT(0x22A16CBA0);
}

void sub_22A16CC38()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16CC40);
  JUMPOUT(0x22A16CBA4);
}

void sub_22A16CC58()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x22A16CBB8);
  JUMPOUT(0x22A16CBA8);
}

WrdParagraphProperties *WrdParagraphProperties::clone(WrdParagraphProperties *this)
{
  WrdBorder *v2;
  WrdBorder *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WrdNumberRevisionMarkData *v8;
  WrdTabDescriptor *v9;
  WrdParagraphProperties *v10;
  __int128 v12;
  __int128 v13;
  WrdBorder *v14;
  WrdBorder *v15;
  WrdDropCap *v16;
  WrdLineSpaceDescriptor *v17;
  WrdShading *v18;

  v18 = (WrdShading *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  v17 = (WrdLineSpaceDescriptor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v16 = (WrdDropCap *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v15 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  v14 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v2 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
  v3 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
  v8 = (WrdNumberRevisionMarkData *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15));
  v9 = (WrdTabDescriptor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
  v10 = (WrdParagraphProperties *)operator new(0x130uLL);
  *(_QWORD *)&v13 = v6;
  *((_QWORD *)&v13 + 1) = v7;
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v5;
  WrdParagraphProperties::WrdParagraphProperties(v10, v18, v17, v16, v15, v14, v2, v3, v12, v13, v8, v9);
  (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)v10 + 32))(v10);
  WrdParagraphProperties::operator=((uint64_t)v10, (uint64_t)this);
  return v10;
}

void sub_22A16CE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  operator delete(v24);
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (!v22)
    {
LABEL_3:
      if (!v21)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (!v21)
  {
LABEL_4:
    if (!v20)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v20)
  {
LABEL_5:
    if (!v28)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (!v28)
  {
LABEL_6:
    if (!v27)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (!v27)
  {
LABEL_7:
    if (!v26)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (!v26)
  {
LABEL_8:
    if (!v25)
    {
LABEL_18:
      if (a16)
        (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
      if (a17)
        (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
      if (a18)
        (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
      if (a19)
        (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
      if (a20)
        (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
      _Unwind_Resume(a1);
    }
LABEL_17:
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    goto LABEL_18;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (!v25)
    goto LABEL_18;
  goto LABEL_17;
}

double WrdShading::clone(WrdShading *this)
{
  char *v2;
  __int128 v3;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F3B3D30;
  *(_QWORD *)&v3 = 255;
  *((_QWORD *)&v3 + 1) = 255;
  *(_OWORD *)(v2 + 14) = v3;
  return WrdShading::operator=((uint64_t)v2, (uint64_t)this);
}

double WrdShading::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 14) = *(_QWORD *)(a2 + 14);
  *(_QWORD *)(a1 + 22) = *(_QWORD *)(a2 + 22);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

_DWORD *WrdLineSpaceDescriptor::clone(WrdLineSpaceDescriptor *this)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F3B3530;
  result[2] = *((_DWORD *)this + 2);
  return result;
}

_DWORD *WrdDropCap::clone(WrdDropCap *this)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F3B2BE8;
  result[2] = *((_DWORD *)this + 2);
  *((_BYTE *)result + 12) = *((_BYTE *)this + 12);
  return result;
}

double WrdBorder::clone(WrdBorder *this)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  *v2 = &off_24F3B2830;
  v2[1] = 255;
  return WrdBorder::operator=((uint64_t)v2, (uint64_t)this);
}

double WrdBorder::operator=(uint64_t a1, uint64_t a2)
{
  double result;
  char v3;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  v3 = *(_BYTE *)(a1 + 24) & 0xFE | *(_BYTE *)(a2 + 24) & 1;
  *(_BYTE *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 24) = v3 & 0xFD | *(_BYTE *)(a2 + 24) & 2;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  return result;
}

WrdAutoNumberListDescriptor *WrdAutoNumberListDescriptor::clone(WrdAutoNumberListDescriptor *this)
{
  WrdAutoNumberLevelDescriptor *v2;
  WrdAutoNumberListDescriptor *v3;

  v2 = (WrdAutoNumberLevelDescriptor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v3 = (WrdAutoNumberListDescriptor *)operator new(0x30uLL);
  WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(v3, v2);
  WrdAutoNumberListDescriptor::operator=((uint64_t)v3, (uint64_t)this);
  return v3;
}

void sub_22A16D1C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

double WrdAutoNumberLevelDescriptor::clone(WrdAutoNumberLevelDescriptor *this)
{
  _QWORD *v2;
  double result;

  v2 = operator new(0x30uLL);
  *v2 = &off_24F3B26A8;
  v2[1] = 255;
  *(_QWORD *)&result = WrdAutoNumberLevelDescriptor::operator=((uint64_t)v2, (uint64_t)this).n128_u64[0];
  return result;
}

__n128 WrdAutoNumberLevelDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 38) = *(_DWORD *)(a2 + 38);
  v3 = *(_WORD *)(a1 + 42) & 0xFFFE | *(_WORD *)(a2 + 42) & 1;
  *(_WORD *)(a1 + 42) = *(_WORD *)(a1 + 42) & 0xFFFE | *(_WORD *)(a2 + 42) & 1;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 42) >> 1) & 1));
  *(_WORD *)(a1 + 42) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 42) >> 2) & 1));
  *(_WORD *)(a1 + 42) = v5;
  v6 = v5 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 42) >> 3) & 1));
  *(_WORD *)(a1 + 42) = v6;
  v7 = v6 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 42) >> 4) & 1));
  *(_WORD *)(a1 + 42) = v7;
  v8 = v7 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 42) >> 5) & 1));
  *(_WORD *)(a1 + 42) = v8;
  v9 = v8 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 42) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 42) = v9;
  v10 = v9 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 42) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 42) = v10;
  v11 = v10 & 0xFFFFFEFF | ((HIBYTE(*(unsigned __int16 *)(a2 + 42)) & 1) << 8);
  *(_WORD *)(a1 + 42) = v11;
  v12 = v11 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a2 + 42) >> 9) & 1) << 9);
  *(_WORD *)(a1 + 42) = v12;
  v13 = v12 & 0xFFFFFBFF | (((*(unsigned __int16 *)(a2 + 42) >> 10) & 1) << 10);
  *(_WORD *)(a1 + 42) = v13;
  v14 = v13 & 0xFFFFF7FF | (((*(unsigned __int16 *)(a2 + 42) >> 11) & 1) << 11);
  *(_WORD *)(a1 + 42) = v14;
  v15 = v14 & 0xFFFFEFFF | (((*(unsigned __int16 *)(a2 + 42) >> 12) & 1) << 12);
  *(_WORD *)(a1 + 42) = v15;
  LOWORD(v15) = v15 & 0xDFFF | (((*(_WORD *)(a2 + 42) >> 13) & 1) << 13);
  *(_WORD *)(a1 + 42) = v15;
  *(_WORD *)(a1 + 42) = v15 & 0xBFFF | *(_WORD *)(a2 + 42) & 0x4000;
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  return result;
}

uint64_t WrdAutoNumberListDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  WrdAutoNumberLevelDescriptor::operator=(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = 0;
  bzero(*(void **)(a1 + 24), 2 * *(unsigned int *)(a1 + 36));
  CsString::append((CsString *)(a1 + 16), (const CsString *)(a2 + 16));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 40) & 0xFE | *(_BYTE *)(a2 + 40) & 1;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  return a1;
}

double WrdDateTime::clone(WrdDateTime *this)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F3B2AE8;
  *((_DWORD *)v2 + 2) = this->var1;
  result = *(double *)&this->var2;
  *(double *)(v2 + 12) = result;
  *((_WORD *)v2 + 10) = this->var6;
  return result;
}

char *WrdNumberRevisionMarkData::clone(WrdNumberRevisionMarkData *this)
{
  char *v2;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24F3B3828;
  CsString::CsString((CsString *)(v2 + 8));
  *((_WORD *)v2 + 32) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  v2[66] &= ~1u;
  WrdNumberRevisionMarkData::init((WrdNumberRevisionMarkData *)v2);
  WrdNumberRevisionMarkData::operator=((uint64_t)v2, (uint64_t)this);
  return v2;
}

void sub_22A16D4A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdNumberRevisionMarkData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 && *(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48))
  {
    WrdDateTime::operator=(v3, *(_QWORD *)(a2 + 32));
    for (i = 0; i != 9; ++i)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + i) = *(_BYTE *)(*(_QWORD *)(a2 + 56) + i);
      v6 = *(_QWORD *)(a2 + 48);
      v7 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * i) = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * i);
      *(_DWORD *)(v7 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
    *(_DWORD *)(a1 + 24) = 0;
    bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
    CsString::append((CsString *)(a1 + 8), (const CsString *)(a2 + 8));
    CsString::erase((CsString *)(a1 + 8), 0x20u);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_BYTE *)(a1 + 66) = *(_BYTE *)(a1 + 66) & 0xFE | *(_BYTE *)(a2 + 66) & 1;
  }
  return a1;
}

double WrdDateTime::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(double *)(a2 + 12);
  *(double *)(a1 + 12) = result;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  return result;
}

CsString *CsString::erase(CsString *this, unsigned int a2)
{
  CsString *v3;

  if (this->var2 >= a2)
  {
    v3 = this;
    this = CsString::reserve(this, a2 + 1);
    v3->var2 = a2;
    v3->var1[a2] = 0;
  }
  return this;
}

uint64_t WrdParagraphProperties::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  v4 = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  WrdShading::operator=(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  v5 = 0;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_DWORD *)(a1 + 138) = *(_DWORD *)(a2 + 138);
  v6 = (_DWORD *)(a2 + 294);
  v7 = (unsigned int *)(a1 + 294);
  v8 = *(_DWORD *)(a1 + 294) & 0xFFFFFFFE | *(_DWORD *)(a2 + 294) & 1;
  *(_DWORD *)(a1 + 294) = v8;
  *(_DWORD *)(a1 + 294) = v8 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 294) >> 1) & 1));
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_WORD *)(a1 + 142) = *(_WORD *)(a2 + 142);
  do
  {
    v9 = *(_QWORD *)(a2 + 208);
    v10 = *(_QWORD *)(a1 + 208);
    *(_WORD *)(*(_QWORD *)(a1 + 200) + 2 * v5) = *(_WORD *)(*(_QWORD *)(a2 + 200) + 2 * v5);
    *(_WORD *)(v10 + 2 * v5) = *(_WORD *)(v9 + 2 * v5);
    *(_WORD *)(*(_QWORD *)(a1 + 216) + 2 * v5) = *(_WORD *)(*(_QWORD *)(a2 + 216) + 2 * v5);
    WrdTabDescriptor::operator=(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v5), *(_QWORD *)(*(_QWORD *)(a2 + 176) + 8 * v5));
    ++v5;
  }
  while (v5 != 64);
  WrdLineSpaceDescriptor::operator=(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  WrdDropCap::operator=(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  WrdBorder::operator=(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  WrdBorder::operator=(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
  WrdBorder::operator=(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
  WrdBorder::operator=(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
  WrdBorder::operator=(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88));
  WrdBorder::operator=(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  WrdAutoNumberListDescriptor::operator=(*(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112));
  WrdNumberRevisionMarkData::operator=(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  v11 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v11;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_WORD *)(a1 + 292) = *(_WORD *)(a2 + 292);
  v12 = *v7 & 0xFFFFFFFB | (4 * ((*v6 >> 2) & 1));
  *v7 = v12;
  v13 = v12 & 0xFFFFFFF7 | (8 * ((*v6 >> 3) & 1));
  *v7 = v13;
  v14 = v13 & 0xFFFFFFEF | (16 * ((*v6 >> 4) & 1));
  *v7 = v14;
  v15 = v14 & 0xFFFFFFDF | (32 * ((*v6 >> 5) & 1));
  *v7 = v15;
  v16 = v15 & 0xFFFFFFBF | (((*v6 >> 6) & 1) << 6);
  *v7 = v16;
  v17 = v16 & 0xFFFFFF7F | (((*v6 >> 7) & 1) << 7);
  *v7 = v17;
  v18 = v17 & 0xFFFFFEFF | (((*v6 >> 8) & 1) << 8);
  *v7 = v18;
  v19 = v18 & 0xFFFFFDFF | (((*v6 >> 9) & 1) << 9);
  *v7 = v19;
  v20 = v19 & 0xFFFFFBFF | (((*v6 >> 10) & 1) << 10);
  *v7 = v20;
  v21 = v20 & 0xFFFFF7FF | (((*v6 >> 11) & 1) << 11);
  *v7 = v21;
  v22 = v21 & 0xFFFFEFFF | (((*v6 >> 12) & 1) << 12);
  *v7 = v22;
  v23 = v22 & 0xFFFFDFFF | (((*v6 >> 13) & 1) << 13);
  *v7 = v23;
  v24 = v23 & 0xFFFFBFFF | (((*v6 >> 14) & 1) << 14);
  *v7 = v24;
  v25 = v24 & 0xFFFF7FFF | (((*v6 >> 15) & 1) << 15);
  *v7 = v25;
  v26 = v25 & 0xFFFEFFFF | ((HIWORD(*v6) & 1) << 16);
  *v7 = v26;
  v27 = v26 & 0xFFFDFFFF | (((*v6 >> 17) & 1) << 17);
  *v7 = v27;
  v28 = v27 & 0xFFFBFFFF | (((*v6 >> 18) & 1) << 18);
  *v7 = v28;
  v29 = v28 & 0xFFF7FFFF | (((*v6 >> 19) & 1) << 19);
  *v7 = v29;
  v30 = v29 & 0xFFEFFFFF | (((*v6 >> 20) & 1) << 20);
  *v7 = v30;
  v31 = v30 & 0xFFDFFFFF | (((*v6 >> 21) & 1) << 21);
  *v7 = v31;
  v32 = v31 & 0xFFBFFFFF | (((*v6 >> 22) & 1) << 22);
  *v7 = v32;
  v33 = v32 & 0xFF7FFFFF | (((*v6 >> 23) & 1) << 23);
  *v7 = v33;
  v34 = v33 & 0xFEFFFFFF | ((HIBYTE(*v6) & 1) << 24);
  *v7 = v34;
  v35 = v34 & 0xFDFFFFFF | (((*v6 >> 25) & 1) << 25);
  *v7 = v35;
  v36 = v35 & 0xFBFFFFFF | (((*v6 >> 26) & 1) << 26);
  *v7 = v36;
  v37 = v36 & 0xF7FFFFFF | (((*v6 >> 27) & 1) << 27);
  *v7 = v37;
  v38 = v37 & 0xEFFFFFFF | (((*v6 >> 28) & 1) << 28);
  *v7 = v38;
  *v7 = v38 & 0xDFFFFFFF | (((*v6 >> 29) & 1) << 29);
  *(_WORD *)(a1 + 298) = *(_WORD *)(a2 + 298);
  return a1;
}

double WrdTabDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t WrdLineSpaceDescriptor::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t WrdDropCap::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::clone(WrdCharacterProperties *this)
{
  WrdShading *v2;
  WrdBorder *v3;
  WrdDateTime *v4;
  WrdDateTime *v5;
  WrdDateTime *v6;
  WrdDateTime *v7;
  WrdDateTime *v8;
  WrdCharacterProperties *v9;

  v2 = (WrdShading *)(*((uint64_t (**)(WrdShading *))this->var6->var0 + 2))(this->var6);
  v3 = (WrdBorder *)(*((uint64_t (**)(WrdBorder *))this->var7->var0 + 2))(this->var7);
  v4 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var8->var0 + 2))(this->var8);
  v5 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var9->var0 + 2))(this->var9);
  v6 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var10->var0 + 2))(this->var10);
  v7 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var11->var0 + 2))(this->var11);
  v8 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))this->var12->var0 + 2))(this->var12);
  v9 = (WrdCharacterProperties *)operator new(0x160uLL);
  WrdCharacterProperties::WrdCharacterProperties(v9, v2, v3, v4, v5, v6, v7, v8);
  WrdCharacterProperties::operator=((uint64_t)v9, (uint64_t)this);
  return v9;
}

void sub_22A16DABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_22A16DB30()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16DB38);
  JUMPOUT(0x22A16DAECLL);
}

void sub_22A16DB50()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16DB58);
  JUMPOUT(0x22A16DAF0);
}

void sub_22A16DB70()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16DB78);
  JUMPOUT(0x22A16DAF4);
}

void sub_22A16DB90()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16DB98);
  JUMPOUT(0x22A16DAF8);
}

void sub_22A16DBB0()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16DBB8);
  JUMPOUT(0x22A16DAFCLL);
}

void sub_22A16DBD0()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x22A16DB10);
  JUMPOUT(0x22A16DB00);
}

uint64_t WrdCharacterProperties::operator=(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v4 = (_OWORD *)(a1 + 292);
  v5 = (_OWORD *)(a2 + 292);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 22) = *(_QWORD *)(a2 + 22);
  *(_QWORD *)(a1 + 16) = v6;
  WrdShading::operator=(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
  WrdBorder::operator=(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 30) = *(_QWORD *)(a2 + 30);
  *(_QWORD *)(a1 + 38) = *(_QWORD *)(a2 + 38);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_WORD *)(a1 + 268) = *(_WORD *)(a2 + 268);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  v7 = v5[1];
  *v4 = *v5;
  v4[1] = v7;
  v8 = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = v8;
  v4[2] = v5[2];
  *(_QWORD *)(a1 + 220) = *(_QWORD *)(a2 + 220);
  v9 = *(_DWORD *)(a1 + 340) & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 340) >> 1) & 1));
  *(_DWORD *)(a1 + 340) = v9;
  v10 = v9 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 340) >> 2) & 1));
  *(_DWORD *)(a1 + 340) = v10;
  v11 = v10 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(a2 + 340) >> 3) & 1));
  *(_DWORD *)(a1 + 340) = v11;
  v12 = v11 & 0xFFFFFFEF | (16 * ((*(_DWORD *)(a2 + 340) >> 4) & 1));
  *(_DWORD *)(a1 + 340) = v12;
  v13 = v12 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a2 + 340) >> 5) & 1));
  *(_DWORD *)(a1 + 340) = v13;
  v14 = v13 & 0xFFFFFFBF | (((*(_DWORD *)(a2 + 340) >> 6) & 1) << 6);
  *(_DWORD *)(a1 + 340) = v14;
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  v15 = v14 & 0xFFFFFF7F | (((*(_DWORD *)(a2 + 340) >> 7) & 1) << 7);
  *(_DWORD *)(a1 + 340) = v15;
  v16 = v15 & 0xFFFFFEFF | (((*(_DWORD *)(a2 + 340) >> 8) & 1) << 8);
  *(_DWORD *)(a1 + 340) = v16;
  v17 = v16 & 0xFFFFFDFF | (((*(_DWORD *)(a2 + 340) >> 9) & 1) << 9);
  *(_DWORD *)(a1 + 340) = v17;
  v18 = v17 & 0xFFFFFBFF | (((*(_DWORD *)(a2 + 340) >> 10) & 1) << 10);
  *(_DWORD *)(a1 + 340) = v18;
  v19 = v18 & 0xFFFFF7FF | (((*(_DWORD *)(a2 + 340) >> 11) & 1) << 11);
  *(_DWORD *)(a1 + 340) = v19;
  *(_BYTE *)(a1 + 349) = *(_BYTE *)(a2 + 349);
  v20 = v19 & 0xFFFFEFFF | (((*(_DWORD *)(a2 + 340) >> 12) & 1) << 12);
  *(_DWORD *)(a1 + 340) = v20;
  v21 = v20 & 0xFFFFDFFF | (((*(_DWORD *)(a2 + 340) >> 13) & 1) << 13);
  *(_DWORD *)(a1 + 340) = v21;
  v22 = v21 & 0xFFFFBFFF | (((*(_DWORD *)(a2 + 340) >> 14) & 1) << 14);
  *(_DWORD *)(a1 + 340) = v22;
  v23 = v22 & 0xFFFF7FFF | (((*(_DWORD *)(a2 + 340) >> 15) & 1) << 15);
  *(_DWORD *)(a1 + 340) = v23;
  v24 = v23 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(a2 + 340)) & 1) << 16);
  *(_DWORD *)(a1 + 340) = v24;
  v25 = v24 & 0xFFFDFFFF | (((*(_DWORD *)(a2 + 340) >> 17) & 1) << 17);
  *(_DWORD *)(a1 + 340) = v25;
  v26 = v25 & 0xFFFBFFFF | (((*(_DWORD *)(a2 + 340) >> 18) & 1) << 18);
  *(_DWORD *)(a1 + 340) = v26;
  v27 = v26 & 0xFFF7FFFF | (((*(_DWORD *)(a2 + 340) >> 19) & 1) << 19);
  *(_DWORD *)(a1 + 340) = v27;
  v28 = v27 & 0xFFEFFFFF | (((*(_DWORD *)(a2 + 340) >> 20) & 1) << 20);
  *(_DWORD *)(a1 + 340) = v28;
  v29 = v28 & 0xFFDFFFFF | (((*(_DWORD *)(a2 + 340) >> 21) & 1) << 21);
  *(_DWORD *)(a1 + 340) = v29;
  v30 = v29 & 0xFFBFFFFF | (((*(_DWORD *)(a2 + 340) >> 22) & 1) << 22);
  *(_DWORD *)(a1 + 340) = v30;
  v31 = v30 & 0xFF7FFFFF | (((*(_DWORD *)(a2 + 340) >> 23) & 1) << 23);
  *(_DWORD *)(a1 + 340) = v31;
  v32 = v31 & 0xFEFFFFFF | ((HIBYTE(*(_DWORD *)(a2 + 340)) & 1) << 24);
  *(_DWORD *)(a1 + 340) = v32;
  v33 = v32 & 0xFDFFFFFF | (((*(_DWORD *)(a2 + 340) >> 25) & 1) << 25);
  *(_DWORD *)(a1 + 340) = v33;
  v34 = v33 & 0xFBFFFFFF | (((*(_DWORD *)(a2 + 340) >> 26) & 1) << 26);
  *(_DWORD *)(a1 + 340) = v34;
  v35 = v34 & 0xF7FFFFFF | (((*(_DWORD *)(a2 + 340) >> 27) & 1) << 27);
  *(_DWORD *)(a1 + 340) = v35;
  *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 344);
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(a2 + 346);
  *(_WORD *)(a1 + 347) = *(_WORD *)(a2 + 347);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_QWORD *)(a1 + 212) = *(_QWORD *)(a2 + 212);
  v36 = v35 & 0xEFFFFFFF | (((*(_DWORD *)(a2 + 340) >> 28) & 1) << 28);
  *(_DWORD *)(a1 + 340) = v36;
  *(_DWORD *)(a1 + 340) = v36 & 0xFFFFFFFE | *(_DWORD *)(a2 + 340) & 1;
  *(_DWORD *)(a1 + 64) = 0;
  bzero(*(void **)(a1 + 56), 2 * *(unsigned int *)(a1 + 68));
  CsString::append((CsString *)(a1 + 48), (const CsString *)(a2 + 48));
  *(_BYTE *)(a1 + 350) = *(_BYTE *)(a2 + 350);
  return a1;
}

WrdTableProperties *WrdTableProperties::clone(WrdTableProperties *this)
{
  WrdBorder *v2;
  WrdBorder *v3;
  WrdBorder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WrdDateTime *v9;
  WrdTableProperties *v10;
  __int128 v12;
  __int128 v13;
  WrdBorder *v14;
  WrdShading *v15;
  WrdTableCellDescriptor *v16;
  WrdTableAutoformatLookSpecifier *v17;

  v17 = (WrdTableAutoformatLookSpecifier *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  v16 = (WrdTableCellDescriptor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v15 = (WrdShading *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v14 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  v2 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v3 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9));
  v4 = (WrdBorder *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
  v9 = (WrdDateTime *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15));
  v10 = (WrdTableProperties *)operator new(0x190uLL);
  *((_QWORD *)&v13 + 1) = v8;
  *((_QWORD *)&v12 + 1) = v6;
  *(_QWORD *)&v13 = v7;
  *(_QWORD *)&v12 = v5;
  WrdTableProperties::WrdTableProperties(v10, v17, v16, v15, v14, v2, v3, v4, v12, v13, v9);
  WrdTableProperties::operator=((uint64_t)v10, (uint64_t)this);
  return v10;
}

void sub_22A16E0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

void sub_22A16E27C()
{
  JUMPOUT(0x22A16E214);
}

void sub_22A16E284()
{
  JUMPOUT(0x22A16E22CLL);
}

void sub_22A16E28C()
{
  JUMPOUT(0x22A16E244);
}

void sub_22A16E294()
{
  JUMPOUT(0x22A16E25CLL);
}

uint64_t WrdTableAutoformatLookSpecifier::clone(WrdTableAutoformatLookSpecifier *this)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24F3B3FE0;
  return WrdTableAutoformatLookSpecifier::operator=((uint64_t)v2, (uint64_t)this);
}

uint64_t WrdTableAutoformatLookSpecifier::operator=(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  v2 = *(_WORD *)(result + 12) & 0xFFFE | *(_WORD *)(a2 + 12) & 1;
  *(_WORD *)(result + 12) = *(_WORD *)(result + 12) & 0xFFFE | *(_WORD *)(a2 + 12) & 1;
  v3 = v2 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 12) >> 1) & 1));
  *(_WORD *)(result + 12) = v3;
  v4 = v3 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 12) >> 2) & 1));
  *(_WORD *)(result + 12) = v4;
  v5 = v4 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 12) >> 3) & 1));
  *(_WORD *)(result + 12) = v5;
  v6 = v5 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 12) >> 4) & 1));
  *(_WORD *)(result + 12) = v6;
  v7 = v6 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 12) >> 5) & 1));
  *(_WORD *)(result + 12) = v7;
  v8 = v7 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 12) >> 6) & 1) << 6);
  *(_WORD *)(result + 12) = v8;
  v9 = v8 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 12) >> 7) & 1) << 7);
  *(_WORD *)(result + 12) = v9;
  *(_WORD *)(result + 12) = v9 & 0xFEFF | *(_WORD *)(a2 + 12) & 0x100;
  return result;
}

WrdTableCellDescriptor *WrdTableCellDescriptor::clone(WrdTableCellDescriptor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WrdTableCellDescriptor *v9;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v9 = (WrdTableCellDescriptor *)operator new(0x88uLL);
  *(_QWORD *)v9 = &off_24F3B4020;
  *((_QWORD *)v9 + 2) = v2;
  *((_QWORD *)v9 + 3) = v3;
  *((_QWORD *)v9 + 4) = v4;
  *((_QWORD *)v9 + 5) = v5;
  *((_QWORD *)v9 + 6) = v6;
  *((_QWORD *)v9 + 7) = v7;
  *((_QWORD *)v9 + 8) = v8;
  WrdTableCellDescriptor::reset(v9);
  WrdTableCellDescriptor::operator=((uint64_t)v9, (uint64_t)this);
  return v9;
}

void sub_22A16E47C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22A16E4EC()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16E4F4);
  JUMPOUT(0x22A16E4A8);
}

void sub_22A16E50C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16E514);
  JUMPOUT(0x22A16E4ACLL);
}

void sub_22A16E52C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16E534);
  JUMPOUT(0x22A16E4B0);
}

void sub_22A16E54C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16E554);
  JUMPOUT(0x22A16E4B4);
}

void sub_22A16E56C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A16E574);
  JUMPOUT(0x22A16E4B8);
}

void sub_22A16E58C()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x22A16E4CCLL);
  JUMPOUT(0x22A16E4BCLL);
}

uint64_t WrdTableCellDescriptor::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  WrdShading::operator=(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  WrdBorder::operator=(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  WrdBorder::operator=(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  WrdBorder::operator=(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  WrdBorder::operator=(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  WrdBorder::operator=(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  WrdBorder::operator=(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v5 = *(_WORD *)(a1 + 130) & 0xFFFE | *(_WORD *)(a2 + 130) & 1;
  *(_WORD *)(a1 + 130) = *(_WORD *)(a1 + 130) & 0xFFFE | *(_WORD *)(a2 + 130) & 1;
  v6 = v5 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 130) >> 1) & 1));
  *(_WORD *)(a1 + 130) = v6;
  v7 = v6 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 130) >> 2) & 1));
  *(_WORD *)(a1 + 130) = v7;
  v8 = v7 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 130) >> 3) & 1));
  *(_WORD *)(a1 + 130) = v8;
  v9 = v8 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 130) >> 4) & 1));
  *(_WORD *)(a1 + 130) = v9;
  v10 = v9 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 130) >> 5) & 1));
  *(_WORD *)(a1 + 130) = v10;
  v11 = v10 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 130) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 130) = v11;
  v12 = v11 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 130) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 130) = v12;
  *(_WORD *)(a1 + 130) = v12 & 0xFEFF | *(_WORD *)(a2 + 130) & 0x100;
  return a1;
}

uint64_t WrdTableProperties::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int16 v62;

  v4 = a1 + 296;
  v5 = a2 + 296;
  v6 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  WrdTableAutoformatLookSpecifier::operator=(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  WrdShading::operator=(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  WrdBorder::operator=(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  WrdBorder::operator=(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
  WrdBorder::operator=(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72));
  WrdBorder::operator=(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
  WrdBorder::operator=(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 88));
  WrdBorder::operator=(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96));
  WrdBorder::operator=(*(_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104));
  WrdBorder::operator=(*(_QWORD *)(a1 + 112), *(_QWORD *)(a2 + 112));
  WrdDateTime::operator=(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v5 + 16);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  *(_DWORD *)(a1 + 330) = *(_DWORD *)(a2 + 330);
  v7 = *(_BYTE *)(a1 + 334) & 0xFE | *(_BYTE *)(a2 + 334) & 1;
  *(_BYTE *)(a1 + 334) = v7;
  v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 334) >> 1) & 1));
  *(_BYTE *)(a1 + 334) = v8;
  v9 = v8 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 334) >> 2) & 1));
  *(_BYTE *)(a1 + 334) = v9;
  v10 = v9 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 334) >> 3) & 1));
  *(_BYTE *)(a1 + 334) = v10;
  v11 = v10 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 334) >> 4) & 1));
  *(_BYTE *)(a1 + 334) = v11;
  *(_BYTE *)(a1 + 334) = v11 & 0xDF | *(_BYTE *)(a2 + 334) & 0x20;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a2 + 352);
  *(_OWORD *)(v4 + 66) = *(_OWORD *)(v5 + 66);
  *(_QWORD *)(v4 + 82) = *(_QWORD *)(v5 + 82);
  *(_QWORD *)(v4 + 90) = *(_QWORD *)(v5 + 90);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
  WrdTableProperties::resetTableCellDescriptors((WrdTableProperties *)a1);
  if (*(__int16 *)(a1 + 344) >= 1)
  {
    v12 = 0;
    v13 = (_QWORD *)(a1 + 264);
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 272) + 8 * v12);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      v16 = v15;
      v18 = *(uint64_t **)(a1 + 280);
      v17 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v18 >= v17)
      {
        v20 = *(_QWORD *)(a1 + 272);
        v21 = (unint64_t)v18 - v20;
        v22 = (v17 - v20) >> 3;
        v23 = 2 * v22;
        if (2 * (int)v22 <= (v21 >> 3) + 1)
          v23 = (v21 >> 3) + 1;
        if (v22 >= 0x7FFFFFFF)
          v24 = 0xFFFFFFFFLL;
        else
          v24 = v23;
        if ((_DWORD)v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(a1 + 288, v24);
          v27 = v26;
        }
        else
        {
          v25 = 0;
          v27 = 0;
        }
        v28 = (uint64_t *)&v25[v21 & 0x7FFFFFFF8];
        *v28 = v16;
        v19 = v28 + 1;
        v30 = *(char **)(a1 + 272);
        v29 = *(char **)(a1 + 280);
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v28;
        *(_QWORD *)(a1 + 280) = v19;
        *(_QWORD *)(a1 + 288) = &v25[8 * v27];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v18 = v15;
        v19 = v18 + 1;
      }
      *(_QWORD *)(a1 + 280) = v19;
      v32 = *(_QWORD *)(a2 + 248);
      v34 = *(char **)(a1 + 256);
      v33 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v34 >= v33)
      {
        v36 = *(_BYTE **)(a1 + 248);
        v37 = v34 - v36;
        v38 = (unint64_t)(v34 - v36) >> 1;
        v39 = (v33 - (unint64_t)v36) >> 1;
        if (2 * (int)v39 <= (v38 + 1))
          v40 = v38 + 1;
        else
          v40 = 2 * v39;
        if (v39 >= 0x7FFFFFFF)
          v41 = 0xFFFFFFFFLL;
        else
          v41 = v40;
        if ((_DWORD)v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 264, v41);
          v44 = v43;
          v36 = *(_BYTE **)(a1 + 248);
          v34 = *(char **)(a1 + 256);
        }
        else
        {
          v42 = 0;
          v44 = 0;
        }
        v45 = &v42[v37 & 0x1FFFFFFFELL];
        *(_WORD *)v45 = *(_WORD *)(v32 + 2 * v12);
        v35 = v45 + 2;
        while (v34 != v36)
        {
          v46 = *((_WORD *)v34 - 1);
          v34 -= 2;
          *((_WORD *)v45 - 1) = v46;
          v45 -= 2;
        }
        *(_QWORD *)(a1 + 248) = v45;
        *(_QWORD *)(a1 + 256) = v35;
        *(_QWORD *)(a1 + 264) = &v42[2 * v44];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_WORD *)v34 = *(_WORD *)(v32 + 2 * v12);
        v35 = v34 + 2;
      }
      *(_QWORD *)(a1 + 256) = v35;
      ++v12;
      v47 = *(__int16 *)(a1 + 344);
    }
    while (v12 < v47);
    v48 = *(_QWORD *)(a2 + 248);
    v49 = v47;
    if ((unint64_t)v35 >= *v13)
    {
      v51 = *(char **)(a1 + 248);
      v52 = v35 - v51;
      v53 = (unint64_t)(v35 - v51) >> 1;
      v54 = (*v13 - (_QWORD)v51) >> 1;
      if (2 * (int)v54 <= (v53 + 1))
        v55 = v53 + 1;
      else
        v55 = 2 * v54;
      if (v54 >= 0x7FFFFFFF)
        v56 = 0xFFFFFFFFLL;
      else
        v56 = v55;
      if ((_DWORD)v56)
      {
        v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 264, v56);
        v59 = v58;
        v51 = *(char **)(a1 + 248);
        v35 = *(char **)(a1 + 256);
      }
      else
      {
        v57 = 0;
        v59 = 0;
      }
      v60 = &v57[v52 & 0x1FFFFFFFELL];
      v61 = &v57[2 * v59];
      *(_WORD *)v60 = *(_WORD *)(v48 + 2 * v49);
      v50 = v60 + 2;
      while (v35 != v51)
      {
        v62 = *((_WORD *)v35 - 1);
        v35 -= 2;
        *((_WORD *)v60 - 1) = v62;
        v60 -= 2;
      }
      *(_QWORD *)(a1 + 248) = v60;
      *(_QWORD *)(a1 + 256) = v50;
      *(_QWORD *)(a1 + 264) = v61;
      if (v51)
        operator delete(v51);
    }
    else
    {
      *(_WORD *)v35 = *(_WORD *)(v48 + 2 * v47);
      v50 = v35 + 2;
    }
    *(_QWORD *)(a1 + 256) = v50;
  }
  return a1;
}

uint64_t WrdStyle::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *exception;
  unsigned int v37;
  unsigned int *v38;

  WrdStyle::reset((WrdStyle *)a1);
  *(_DWORD *)(a1 + 24) = 0;
  bzero(*(void **)(a1 + 16), 2 * *(unsigned int *)(a1 + 28));
  CsString::append((CsString *)(a1 + 8), (const CsString *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
  *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64));
  v4 = 0;
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 16))(*(_QWORD *)(a2 + 72));
  v5 = (uint64_t *)(a2 + 88);
  v6 = (uint64_t *)(a2 + 112);
  v7 = (uint64_t *)(a2 + 136);
  do
  {
    v8 = *v5;
    if (!*v5)
      goto LABEL_20;
    v9 = (uint64_t *)*v5;
    while (1)
    {
      v10 = *((_DWORD *)v9 + 8);
      if (v10 <= v4)
        break;
LABEL_7:
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_20;
    }
    if (v10 < v4)
    {
      ++v9;
      goto LABEL_7;
    }
    v11 = a2 + 88;
    do
    {
      v12 = *(_DWORD *)(v8 + 32);
      v13 = v12 >= v4;
      if (v12 >= v4)
        v14 = (uint64_t *)v8;
      else
        v14 = (uint64_t *)(v8 + 8);
      if (v13)
        v11 = v8;
      v8 = *v14;
    }
    while (*v14);
    if ((uint64_t *)v11 == v5 || *(_DWORD *)(v11 + 32) > v4)
      goto LABEL_58;
    v15 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 24))(*(_QWORD *)(v11 + 40));
    v37 = v4;
    v38 = &v37;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 80), &v37, (uint64_t)&std::piecewise_construct, &v38)[5] = v15;
LABEL_20:
    v16 = *v6;
    if (!*v6)
      goto LABEL_38;
    v17 = (uint64_t *)*v6;
    while (2)
    {
      v18 = *((_DWORD *)v17 + 8);
      if (v18 > v4)
      {
LABEL_25:
        v17 = (uint64_t *)*v17;
        if (!v17)
          goto LABEL_38;
        continue;
      }
      break;
    }
    if (v18 < v4)
    {
      ++v17;
      goto LABEL_25;
    }
    v19 = a2 + 112;
    do
    {
      v20 = *(_DWORD *)(v16 + 32);
      v21 = v20 >= v4;
      if (v20 >= v4)
        v22 = (uint64_t *)v16;
      else
        v22 = (uint64_t *)(v16 + 8);
      if (v21)
        v19 = v16;
      v16 = *v22;
    }
    while (*v22);
    if ((uint64_t *)v19 == v6 || *(_DWORD *)(v19 + 32) > v4)
      goto LABEL_58;
    v23 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 40) + 24))(*(_QWORD *)(v19 + 40));
    v37 = v4;
    v38 = &v37;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), &v37, (uint64_t)&std::piecewise_construct, &v38)[5] = v23;
LABEL_38:
    v24 = *v7;
    if (!*v7)
      goto LABEL_56;
    v25 = (uint64_t *)*v7;
    while (2)
    {
      v26 = *((_DWORD *)v25 + 8);
      if (v26 > v4)
      {
LABEL_43:
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_56;
        continue;
      }
      break;
    }
    if (v26 < v4)
    {
      ++v25;
      goto LABEL_43;
    }
    v27 = a2 + 136;
    do
    {
      v28 = *(_DWORD *)(v24 + 32);
      v29 = v28 >= v4;
      if (v28 >= v4)
        v30 = (uint64_t *)v24;
      else
        v30 = (uint64_t *)(v24 + 8);
      if (v29)
        v27 = v24;
      v24 = *v30;
    }
    while (*v30);
    if ((uint64_t *)v27 == v7 || *(_DWORD *)(v27 + 32) > v4)
    {
LABEL_58:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
    }
    v31 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 40) + 24))(*(_QWORD *)(v27 + 40));
    v37 = v4;
    v38 = &v37;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 128), &v37, (uint64_t)&std::piecewise_construct, &v38)[5] = v31;
LABEL_56:
    ++v4;
  }
  while (v4 != 11);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  v32 = *(_BYTE *)(a1 + 164) & 0xFD | (2 * ((*(unsigned __int8 *)(a2 + 164) >> 1) & 1));
  *(_BYTE *)(a1 + 164) = v32;
  v33 = v32 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 164) >> 4) & 1));
  *(_BYTE *)(a1 + 164) = v33;
  v34 = v33 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 164) >> 2) & 1));
  *(_BYTE *)(a1 + 164) = v34;
  *(_BYTE *)(a1 + 164) = v34 & 0xF7 | *(_BYTE *)(a2 + 164) & 8;
  return a1;
}

uint64_t WrdStyle::reset(WrdStyle *this)
{
  unsigned int v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  unsigned int *v25;

  v2 = 0;
  v3 = (uint64_t **)((char *)this + 80);
  v4 = (uint64_t **)((char *)this + 88);
  v5 = (uint64_t **)((char *)this + 104);
  v6 = (uint64_t **)((char *)this + 112);
  v7 = (uint64_t **)((char *)this + 128);
  v8 = (uint64_t **)((char *)this + 136);
  do
  {
    v9 = *v4;
    if (!*v4)
      goto LABEL_11;
    while (1)
    {
      v10 = *((_DWORD *)v9 + 8);
      if (v10 <= v2)
        break;
LABEL_6:
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_11;
    }
    if (v10 < v2)
    {
      ++v9;
      goto LABEL_6;
    }
    v24 = v2;
    v25 = &v24;
    v11 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
    if (v11)
      (*(void (**)(uint64_t *))(*v11 + 8))(v11);
    v24 = v2;
    v25 = &v24;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v24, (uint64_t)&std::piecewise_construct, &v25)[5] = 0;
LABEL_11:
    for (i = *v6; i; i = (uint64_t *)*i)
    {
      v13 = *((_DWORD *)i + 8);
      if (v13 <= v2)
      {
        if (v13 >= v2)
        {
          v24 = v2;
          v25 = &v24;
          v14 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
          if (v14)
            (*(void (**)(uint64_t *))(*v14 + 8))(v14);
          v24 = v2;
          v25 = &v24;
          std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v24, (uint64_t)&std::piecewise_construct, &v25)[5] = 0;
          break;
        }
        ++i;
      }
    }
    v15 = *v8;
    if (!*v8)
      goto LABEL_29;
    while (2)
    {
      v16 = *((_DWORD *)v15 + 8);
      if (v16 > v2)
      {
LABEL_24:
        v15 = (uint64_t *)*v15;
        if (!v15)
          goto LABEL_29;
        continue;
      }
      break;
    }
    if (v16 < v2)
    {
      ++v15;
      goto LABEL_24;
    }
    v24 = v2;
    v25 = &v24;
    v17 = std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, &v24, (uint64_t)&std::piecewise_construct, &v25)[5];
    if (v17)
      (*(void (**)(uint64_t *))(*v17 + 8))(v17);
    v24 = v2;
    v25 = &v24;
    std::__tree<std::__value_type<unsigned int,XlChartEnteredData *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,XlChartEnteredData *>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,XlChartEnteredData *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, &v24, (uint64_t)&std::piecewise_construct, &v25)[5] = 0;
LABEL_29:
    ++v2;
  }
  while (v2 != 12);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v3, *((_QWORD **)this + 11));
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = v4;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v5, *((_QWORD **)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = v6;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v7, *((_QWORD **)this + 17));
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = v8;
  v18 = *((_QWORD *)this + 4);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *((_QWORD *)this + 4) = 0;
  v19 = *((_QWORD *)this + 5);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  *((_QWORD *)this + 5) = 0;
  v20 = *((_QWORD *)this + 6);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  *((_QWORD *)this + 6) = 0;
  v21 = *((_QWORD *)this + 7);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  *((_QWORD *)this + 7) = 0;
  v22 = *((_QWORD *)this + 8);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *((_QWORD *)this + 8) = 0;
  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

void WrdParagraphProperties::~WrdParagraphProperties(WrdParagraphProperties *this)
{
  WrdParagraphProperties::~WrdParagraphProperties(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v2 = 0;
  *(_QWORD *)this = &off_24F3B3960;
  *((_QWORD *)this + 1) = &unk_24F3B39A8;
  do
  {
    v3 = *((_QWORD *)this + 22);
    v4 = *(_QWORD *)(v3 + v2);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 = *((_QWORD *)this + 22);
    }
    *(_QWORD *)(v3 + v2) = 0;
    v2 += 8;
  }
  while (v2 != 512);
  *((_QWORD *)this + 23) = *((_QWORD *)this + 22);
  v5 = *((_QWORD *)this + 25);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C80BDFB0063);
  *((_QWORD *)this + 25) = 0;
  v6 = *((_QWORD *)this + 26);
  if (v6)
    MEMORY[0x22E2DD3F0](v6, 0x1000C80BDFB0063);
  *((_QWORD *)this + 26) = 0;
  v7 = *((_QWORD *)this + 27);
  if (v7)
    MEMORY[0x22E2DD3F0](v7, 0x1000C80BDFB0063);
  *((_QWORD *)this + 27) = 0;
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 4) = 0;
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 5) = 0;
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 6) = 0;
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 7) = 0;
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 8) = 0;
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 9) = 0;
  v14 = *((_QWORD *)this + 10);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 10) = 0;
  v15 = *((_QWORD *)this + 11);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *((_QWORD *)this + 11) = 0;
  v16 = *((_QWORD *)this + 12);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *((_QWORD *)this + 12) = 0;
  v17 = *((_QWORD *)this + 13);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *((_QWORD *)this + 13) = 0;
  v18 = *((_QWORD *)this + 14);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *((_QWORD *)this + 14) = 0;
  v19 = *((_QWORD *)this + 15);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  *((_QWORD *)this + 15) = 0;
  v20 = *((_QWORD *)this + 16);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  *((_QWORD *)this + 16) = 0;
  v21 = (void *)*((_QWORD *)this + 22);
  if (v21)
  {
    *((_QWORD *)this + 23) = v21;
    operator delete(v21);
  }
}

void WrdTabDescriptor::~WrdTabDescriptor(WrdTabDescriptor *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdShading::~WrdShading(WrdShading *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdLineSpaceDescriptor::~WrdLineSpaceDescriptor(WrdLineSpaceDescriptor *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdDropCap::~WrdDropCap(WrdDropCap *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdBorder::~WrdBorder(WrdBorder *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdAutoNumberListDescriptor::~WrdAutoNumberListDescriptor(WrdAutoNumberListDescriptor *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B26F0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  CsString::~CsString((CsString *)((char *)this + 16));
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B26F0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  CsString::~CsString((CsString *)((char *)this + 16));
}

void WrdAutoNumberLevelDescriptor::~WrdAutoNumberLevelDescriptor(WrdAutoNumberLevelDescriptor *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdNumberRevisionMarkData::~WrdNumberRevisionMarkData(WrdNumberRevisionMarkData *this)
{
  WrdNumberRevisionMarkData::~WrdNumberRevisionMarkData(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F3B3828;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 6) = 0;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  *((_QWORD *)this + 7) = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8052888210);
  *((_QWORD *)this + 5) = 0;
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 4) = 0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

void WrdCharacterProperties::~WrdCharacterProperties(WrdCharacterProperties *this)
{
  WrdCharacterProperties::~WrdCharacterProperties(this);
  JUMPOUT(0x22E2DD408);
}

{
  WrdShading *var6;
  WrdBorder *var7;
  WrdDateTime *var8;
  WrdDateTime *var9;
  WrdDateTime *var10;
  WrdDateTime *var11;
  WrdDateTime *var12;

  this->var0 = (void **)&off_24F3B2878;
  this->var1 = (void **)&unk_24F3B28A8;
  var6 = this->var6;
  if (var6)
    (*((void (**)(WrdShading *))var6->var0 + 1))(var6);
  this->var6 = 0;
  var7 = this->var7;
  if (var7)
    (*((void (**)(WrdBorder *))var7->var0 + 1))(var7);
  this->var7 = 0;
  var8 = this->var8;
  if (var8)
    (*((void (**)(WrdDateTime *))var8->var0 + 1))(var8);
  this->var8 = 0;
  var9 = this->var9;
  if (var9)
    (*((void (**)(WrdDateTime *))var9->var0 + 1))(var9);
  this->var9 = 0;
  var10 = this->var10;
  if (var10)
    (*((void (**)(WrdDateTime *))var10->var0 + 1))(var10);
  this->var10 = 0;
  var11 = this->var11;
  if (var11)
    (*((void (**)(WrdDateTime *))var11->var0 + 1))(var11);
  this->var11 = 0;
  var12 = this->var12;
  if (var12)
    (*((void (**)(WrdDateTime *))var12->var0 + 1))(var12);
  this->var12 = 0;
  CsString::~CsString(&this->var5);
}

void WrdTableProperties::~WrdTableProperties(WrdTableProperties *this)
{
  WrdTableProperties::~WrdTableProperties(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  *(_QWORD *)this = &off_24F3B4060;
  *((_QWORD *)this + 1) = &unk_24F3B4090;
  *((_QWORD *)this + 32) = *((_QWORD *)this + 31);
  WrdTableProperties::resetTableCellDescriptors(this);
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 6) = 0;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 7) = 0;
  v6 = *((_QWORD *)this + 8);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 8) = 0;
  v7 = *((_QWORD *)this + 9);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 9) = 0;
  v8 = *((_QWORD *)this + 10);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 10) = 0;
  v9 = *((_QWORD *)this + 11);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 11) = 0;
  v10 = *((_QWORD *)this + 12);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 12) = 0;
  v11 = *((_QWORD *)this + 13);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 13) = 0;
  v12 = *((_QWORD *)this + 14);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 14) = 0;
  v13 = *((_QWORD *)this + 15);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 15) = 0;
  v14 = (void *)*((_QWORD *)this + 34);
  if (v14)
  {
    *((_QWORD *)this + 35) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 31);
  if (v15)
  {
    *((_QWORD *)this + 32) = v15;
    operator delete(v15);
  }
}

void WrdTableAutoformatLookSpecifier::~WrdTableAutoformatLookSpecifier(WrdTableAutoformatLookSpecifier *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdTableCellDescriptor::~WrdTableCellDescriptor(WrdTableCellDescriptor *this)
{
  WrdTableCellDescriptor::~WrdTableCellDescriptor(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24F3B4020;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
}

uint64_t WrdStyleSheet::getStyleReference(WrdStyleSheet *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 3);
  if (((unint64_t)(*((_QWORD *)this + 4) - v2) >> 3) <= a2)
    return *((_QWORD *)this + 2);
  v3 = *(_QWORD *)(v2 + 8 * a2);
  if (!v3)
    return *((_QWORD *)this + 2);
  return v3;
}

uint64_t WrdParser::parse(WrdParser *this, WrdStyle *a2, unsigned int a3)
{
  uint64_t result;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  void *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int UInt16;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned __int16 *v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  WrdParser *v31;
  WrdStyle *v32;
  unsigned __int16 *v33;
  int v34;
  const char *v35;
  int v36;
  uint64_t v37;
  char *v38;
  unsigned __int16 *v39;
  WrdParser *v40;
  WrdStyle *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _DWORD *exception;
  int v49;
  unsigned __int16 v50;
  unsigned int v51;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  v7 = *((_BYTE *)a2 + 164);
  if (!(_DWORD)result)
  {
    *((_BYTE *)a2 + 164) = v7 & 0xFB;
    return result;
  }
  v8 = result;
  *((_BYTE *)a2 + 164) = v7 | 4;
  *((_WORD *)a2 + 78) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16)) & 0xFFF;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 38) = v9 & 0xF;
  *((_WORD *)a2 + 79) = v9 >> 4;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  v11 = v10;
  *((_WORD *)a2 + 80) = v10 >> 4;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 2, 1);
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  *((_BYTE *)a2 + 164) = *((_BYTE *)a2 + 164) & 0xEC | v12 & 1 | (v12 >> 7) & 2 | (v12 >> 5) & 0x10;
  if (a3 < 0xB)
  {
    if (a3 != 10)
      goto LABEL_43;
    v14 = 12;
  }
  else
  {
    v13 = *((_QWORD *)this + 16);
    if (*((int *)this + 38) < 10)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 16))(v13, a3 - 10, 1);
      v14 = (unsigned __int16)(a3 + 2);
    }
    else
    {
      *((_BYTE *)a2 + 164) = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 80))(v13) >> 9) & 8 | *((_BYTE *)a2 + 164) & 0xF7;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 6, 1);
      v14 = 20;
    }
  }
  v15 = v8 - v14;
  v51 = v15 + 2;
  if (v15 >= 0xFFFFFFFE)
    goto LABEL_43;
  v16 = operator new[](v15 + 2);
  *((_QWORD *)this + 36) = v16;
  (*(void (**)(_QWORD, void *, unsigned int *))(**((_QWORD **)this + 16) + 56))(*((_QWORD *)this + 16), v16, &v51);
  v17 = (unsigned __int16 *)*((_QWORD *)this + 36);
  v18 = v51;
  UInt16 = CsLeReadUInt16(v17);
  CsString::reserve((CsString *)((char *)a2 + 8), UInt16);
  CsString::setCount((CsString *)((char *)a2 + 8), UInt16);
  v20 = *((_QWORD *)a2 + 2);
  if (!v20)
    goto LABEL_43;
  v21 = (unsigned __int8 *)v17 + v18;
  v22 = 2 * UInt16 + 2;
  if ((char *)v17 + v22 + 2 > (char *)v17 + v18)
    goto LABEL_43;
  v23 = 0;
  v24 = v11 & 0xF;
  do
  {
    *(_WORD *)(v20 + v23) = CsLeReadUInt16(&v17[v23 / 2 + 1]);
    v23 += 2;
  }
  while (v22 != v23);
  v50 = 0;
  v25 = &v17[v23 / 2 + 1];
  switch(v24)
  {
    case 1:
      v30 = *((_DWORD *)a2 + 38);
      if (v30 == 4)
      {
        v31 = this;
        v32 = a2;
        v33 = (unsigned __int16 *)((char *)v17 + v18);
        v34 = 1;
        goto LABEL_30;
      }
      if (v30 == 2)
      {
LABEL_26:
        v31 = this;
        v32 = a2;
        v33 = (unsigned __int16 *)((char *)v17 + v18);
        v34 = 0;
LABEL_30:
        WrdParser::parseUPX(v31, v32, v25, v33, v34, &v50);
        break;
      }
      v35 = "Number of UPXs is 1, but style type does NOT correspond";
      v36 = 590;
LABEL_34:
      ChLogFunction(v35, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", v36);
      break;
    case 2:
      v29 = *((_DWORD *)a2 + 38);
      if (v29 != 2)
      {
        if (v29 == 1)
        {
          WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 1, &v50);
          v28 = (char *)&v17[v23 / 2] + (v50 & 1) + v50;
          goto LABEL_23;
        }
        goto LABEL_28;
      }
      if ((*((_BYTE *)a2 + 164) & 8) == 0)
      {
LABEL_28:
        v35 = "Number of UPXs is 2, but style type does NOT correspond";
        v36 = 640;
        goto LABEL_34;
      }
      WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 0, &v50);
      v37 = (v50 & 1) + v50;
      v38 = (char *)&v17[v23 / 2] + v37;
      WrdBaseParser::parseBuffer(this, *((WrdDateTime **)a2 + 9), (unsigned __int8 *)v38 + 6, v21);
      v39 = (unsigned __int16 *)(v38 + 12);
      if (v39 <= (unsigned __int16 *)v21)
      {
        *((_WORD *)a2 + 81) = CsLeReadUInt16((unsigned __int16 *)((char *)v17 + v37 + v23 + 10));
        *((_BYTE *)a2 + 164) &= ~8u;
        v40 = this;
        v41 = a2;
        v42 = v39;
LABEL_42:
        WrdParser::parseUPX(v40, v41, v42, (unsigned __int16 *)v21, 0, &v50);
        *((_BYTE *)a2 + 164) |= 8u;
        break;
      }
LABEL_43:
      exception = __cxa_allocate_exception(4uLL);
      v49 = 2001;
      goto LABEL_44;
    case 3:
      v26 = *((_DWORD *)a2 + 38);
      if (v26 != 1)
      {
        if (v26 == 3)
        {
          WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 0, &v50);
          v27 = v50;
          WrdParser::parseUPX(this, a2, (unsigned __int16 *)((char *)&v17[v23 / 2 + 1] + (v50 & 1) + v50), (unsigned __int16 *)((char *)v17 + v18), 1, &v50);
          v28 = (char *)v17 + (v50 & 1) + v27 + v50 + (v27 & 1) + v23;
LABEL_23:
          v25 = (unsigned __int16 *)(v28 + 2);
          goto LABEL_26;
        }
        goto LABEL_32;
      }
      if ((*((_BYTE *)a2 + 164) & 8) == 0)
      {
LABEL_32:
        v35 = "Number of UPXs is 3, but style type does NOT correspond";
        v36 = 707;
        goto LABEL_34;
      }
      WrdParser::parseUPX(this, a2, v25, (unsigned __int16 *)((char *)v17 + v18), 1, &v50);
      v43 = v50;
      WrdParser::parseUPX(this, a2, (unsigned __int16 *)((char *)&v17[v23 / 2 + 1] + (v50 & 1) + v50), (unsigned __int16 *)((char *)v17 + v18), 0, &v50);
      v44 = v43 + v50;
      v45 = v43 & 1;
      v46 = v50 & 1;
      if ((uint64_t)(v18 - v46 - (v44 + v45) - v23 - 2) > 9)
      {
        v47 = (char *)v17 + v46 + v44 + v45 + v23;
        WrdBaseParser::parseBuffer(this, *((WrdDateTime **)a2 + 9), (unsigned __int8 *)v47 + 6, v21);
        *((_WORD *)a2 + 81) = CsLeReadUInt16((unsigned __int16 *)v47 + 5);
        *((_BYTE *)a2 + 164) &= ~8u;
        WrdParser::parseUPX(this, a2, (unsigned __int16 *)v47 + 6, (unsigned __int16 *)v21, 1, &v50);
        v42 = (unsigned __int16 *)((char *)v17 + (v50 & 1) + v23 + v44 + v50 + v45 + v46 + 12);
        v40 = this;
        v41 = a2;
        goto LABEL_42;
      }
      exception = __cxa_allocate_exception(4uLL);
      v49 = 1004;
LABEL_44:
      *exception = v49;
  }
  result = *((_QWORD *)this + 36);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 36) = 0;
  return result;
}

uint64_t WrdParser::parseUPX(WrdParser *this, WrdStyle *a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5, unsigned __int16 *a6)
{
  uint64_t result;
  char *v13;
  WrdParagraphProperties *ResolvedParaPropsReference;
  __int16 UInt16;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  int v21;
  _DWORD *exception;
  unsigned __int16 SizeOfSPRMParameter;

  if (!a3 || a3 >= a4 || (char *)a4 - (char *)a3 <= 1)
    goto LABEL_20;
  result = CsLeReadUInt16(a3);
  *a6 = result;
  if (!(_DWORD)result)
    return result;
  v13 = (char *)(a3 + 1);
  if (!a5)
  {
    v16 = 0;
    goto LABEL_9;
  }
  if ((char *)a4 - v13 <= 1)
  {
LABEL_20:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  ResolvedParaPropsReference = (WrdParagraphProperties *)WrdStyle::getResolvedParaPropsReference(a2);
  UInt16 = CsLeReadUInt16(a3 + 1);
  WrdParagraphProperties::setParagraphStyleIndex(ResolvedParaPropsReference, UInt16);
  v13 = (char *)(a3 + 2);
  v16 = 2;
LABEL_9:
  v17 = operator new(0x10uLL);
  *v17 = 0;
  v17[1] = 0;
  SizeOfSPRMParameter = 0;
  v18 = *a6;
  if (v16 < v18)
  {
    do
    {
      WrdPropertyParser::parseSPRM((unsigned __int16 *)v13, (unint64_t)a4, &SizeOfSPRMParameter, (uint64_t)v17);
      v19 = SizeOfSPRMParameter;
      v20 = (unsigned __int16 *)&v13[SizeOfSPRMParameter];
      v21 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 == 1)
      {
        WrdPapParser::applySprm((WrdParser *)((char *)this + 256), a2, (uint64_t)v17, v20, a4, &SizeOfSPRMParameter, (uint64_t)this);
      }
      else if (v21 == 2)
      {
        WrdChpParser::applySprm((WrdParser *)((char *)this + 252), a2, (uint64_t)v17, v20, a4, &SizeOfSPRMParameter, (uint64_t)this);
      }
      else if (v21 == 5)
      {
        WrdTapParser::applySprm((WrdParser *)((char *)this + 264), (uint64_t)a2, (uint64_t)v17, v20, a4, &SizeOfSPRMParameter, (uint64_t)this);
      }
      else
      {
        SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v17);
      }
      v13 = (char *)v20 + SizeOfSPRMParameter;
      LOWORD(v16) = SizeOfSPRMParameter + v19 + v16;
      v18 = *a6;
    }
    while (v18 > (unsigned __int16)v16);
  }
  *a6 = v18 + 2;
  return MEMORY[0x22E2DD408](v17, 0x1000C4099076E91);
}

uint64_t WrdStyle::getResolvedParaPropsReference(WrdStyle *this)
{
  uint64_t v1;

  v1 = 40;
  if ((*((_BYTE *)this + 164) & 8) == 0)
    v1 = 32;
  return *(_QWORD *)((char *)this + v1);
}

WrdParagraphProperties *WrdParagraphProperties::setParagraphStyleIndex(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 1uLL;
  *((_WORD *)this + 70) = a2;
  return this;
}

unsigned __int16 *WrdPropertyParser::parseSPRM(unsigned __int16 *result, unint64_t a2, _WORD *a3, uint64_t a4)
{
  unsigned __int16 *v5;
  unsigned int v8;
  int v9;
  _DWORD *exception;

  if (!result)
    goto LABEL_12;
  v5 = result;
  if ((unint64_t)result >= a2)
    goto LABEL_12;
  if (a2 - (unint64_t)result <= 2)
  {
    *(_DWORD *)(a4 + 8) = 0;
    *(_WORD *)(a4 + 12) = 0;
    *(_QWORD *)a4 = 0x100000000;
    *a3 = a2 - (_WORD)result;
    return result;
  }
  result = (unsigned __int16 *)CsLeReadUInt16(result);
  *(_WORD *)(a4 + 8) = (_WORD)result;
  *a3 = 2;
  v8 = *(unsigned __int16 *)(a4 + 8);
  *(_WORD *)(a4 + 10) = v8 & 0x1FF;
  *(_BYTE *)(a4 + 12) = (v8 & 0x200) != 0;
  *(_DWORD *)a4 = (v8 >> 10) & 7;
  *(_DWORD *)(a4 + 4) = v8 >> 13;
  if (v8 >> 13 == 6)
  {
    if ((unint64_t)(v5 + 1) < a2)
    {
      v9 = *((unsigned __int8 *)v5 + 2);
      *(_BYTE *)(a4 + 13) = v9;
      if (v9 || v8 == 50709 || v8 == 54792)
      {
        ++*a3;
        return result;
      }
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 2001;
  }
  *(_BYTE *)(a4 + 13) = 0;
  return result;
}

WrdBaseParser *WrdChpParser::applySprm(WrdBaseParser *result, WrdStyle *this, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  WrdBaseParser *v12;
  unsigned int i;
  _DWORD *v14;
  uint64_t v15;
  WrdCharacterProperties *v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  unsigned __int16 v19;
  unsigned __int8 *v20;
  int SizeOfSPRMParameter;
  uint64_t ResolvedCharProps;
  WrdCharacterProperties *v23;
  _DWORD *exception;
  unsigned __int16 *v25;
  unsigned int v28;
  unsigned __int16 v29;

  v12 = result;
  if (*(unsigned __int16 *)(a3 + 8) == 51845)
  {
    if (*((_DWORD *)this + 38) == 3)
    {
      *a6 = WrdProperty::getSizeOfSPRMParameter(a3);
      v25 = a4 + 1;
      if (a4 + 1 > a5)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 1004;
      }
      result = (WrdBaseParser *)CsLeReadUInt16(a4);
      v28 = result;
      for (i = 0; i != 12; ++i)
      {
        if (((v28 >> i) & 1) != 0)
        {
          v29 = 0;
          v14 = operator new(0x10uLL);
          v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a7 + 280) + 16))(*(_QWORD *)(a7 + 280), 10);
          if (v15)
            v16 = (WrdCharacterProperties *)(v15 - 8);
          else
            v16 = 0;
          if (*a6 >= 3u)
          {
            v17 = 2;
            v18 = v25;
            do
            {
              WrdPropertyParser::parseSPRM(v18, (unint64_t)a5, &v29, (uint64_t)v14);
              v19 = v29;
              v20 = (unsigned __int8 *)v18 + v29;
              if (*v14 == 2)
              {
                WrdChpParser::applySprm(v12, (uint64_t)v16, 0, (uint64_t)v14, v20, a5, &v29);
                SizeOfSPRMParameter = v29;
              }
              else
              {
                SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v14);
                v29 = SizeOfSPRMParameter;
              }
              v18 = (unsigned __int16 *)&v20[SizeOfSPRMParameter];
              v17 += SizeOfSPRMParameter + v19;
            }
            while (*a6 > v17);
          }
          WrdCharacterProperties::clearAllRevisionAttributes(v16);
          result = (WrdBaseParser *)WrdStyle::takeCharProps((uint64_t)this, i, (uint64_t *)v16);
          if (v14)
            result = (WrdBaseParser *)MEMORY[0x22E2DD408](v14, 0x1000C4099076E91);
        }
      }
    }
  }
  else
  {
    ResolvedCharProps = WrdStyle::getResolvedCharProps(this);
    WrdChpParser::applySprm(v12, ResolvedCharProps, 0, a3, (unsigned __int8 *)a4, a5, a6);
    v23 = (WrdCharacterProperties *)WrdStyle::getResolvedCharProps(this);
    return (WrdBaseParser *)WrdCharacterProperties::clearAllRevisionAttributes(v23);
  }
  return result;
}

void sub_22A170478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (v11)
    MEMORY[0x22E2DD408](v11, 0x1000C4099076E91);
  _Unwind_Resume(exception_object);
}

uint64_t WrdStyle::getResolvedCharProps(WrdStyle *this)
{
  uint64_t v1;

  v1 = 56;
  if ((*((_BYTE *)this + 164) & 8) == 0)
    v1 = 48;
  return *(_QWORD *)((char *)this + v1);
}

void WrdChpParser::applySprm(WrdBaseParser *a1, uint64_t a2, WrdCharacterProperties *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int16 *a6, _WORD *a7)
{
  unsigned __int8 *v7;
  unsigned int SizeOfSPRMParameter;
  unsigned int v15;
  int v16;
  WrdShading *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  uint64_t RevisionEditReference;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  CsColour *UnderlineColorReference;
  __int16 v34;
  WrdDateTime *RevisionListNumberDateTimeReference;
  uint64_t v36;
  uint64_t i;
  unsigned __int16 v38;
  int v39;
  __int16 v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned int v47;
  int v48;
  int v49;
  WrdShading *ShadingReference;
  __int16 v51;
  int v52;
  WrdBorder *BorderReference;
  int v54;
  int v55;
  int v56;
  unsigned __int16 *v57;
  CsColour *ColorReference;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  char v67;
  int v68;
  int SInt32;
  int v70;
  __int16 v71;
  WrdDateTime *RevisionPropertiesDateTimeReference;
  WrdBaseParser *v73;
  unsigned __int8 *v74;
  __int16 UInt16;
  signed __int16 SInt16;
  WrdBorder *v77;
  unsigned __int16 v78;
  __int16 v79;
  __int16 v80;
  unsigned __int16 v81;
  uint64_t v82;
  __int16 v83;
  _DWORD *exception;
  int v85;
  CsColour v86;
  CsColour v87;

  if (*(_DWORD *)a4 != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v85 = 2002;
LABEL_332:
    *exception = v85;
  }
  v7 = a5;
  if (!a5)
    goto LABEL_330;
  SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter(a4);
  *a7 = SizeOfSPRMParameter;
  v15 = *(unsigned __int16 *)(a4 + 8);
  if (v15 <= 0x484D)
  {
    if (*(unsigned __int16 *)(a4 + 8) <= 0x2858u)
    {
      if (*(unsigned __int16 *)(a4 + 8) > 0x853u)
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x854:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setEngraved(a2, *v7);
            return;
          case 0x855:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setSpecialCharacter((WrdCharacterProperties *)a2, *v7 == 1);
            return;
          case 0x856:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setEmbeddedObject((WrdCharacterProperties *)a2, *v7 == 1);
            return;
          case 0x857:
          case 0x859:
          case 0x85E:
          case 0x85F:
          case 0x860:
          case 0x861:
          case 0x862:
          case 0x863:
          case 0x864:
          case 0x865:
          case 0x866:
          case 0x867:
            return;
          case 0x858:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setEmbossed(a2, *v7);
            return;
          case 0x85A:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setRightToLeft(a2, *v7);
            return;
          case 0x85B:
            ChLogFunction("Unimplemented sprm code 0x085B\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 668);
            return;
          case 0x85C:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setBoldBi(a2, *v7);
            return;
          case 0x85D:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setItalicBi(a2, *v7);
            return;
          case 0x868:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setUsePageSetupLinePitch((WrdCharacterProperties *)a2, *v7);
            return;
          default:
            if (v15 != 2165)
              return;
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setNoProof((WrdCharacterProperties *)a2, *v7 == 1);
            break;
        }
      }
      else
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x835:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setBold(a2, *v7);
            if (a3)
            {
              v16 = WrdCharacterProperties::resolveToAbsolute(a3->var23, *(_DWORD *)(a2 + 168));
              WrdCharacterProperties::setBold((uint64_t)a3, v16);
            }
            break;
          case 0x836:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setItalic(a2, *v7);
            if (a3)
            {
              v59 = WrdCharacterProperties::resolveToAbsolute(a3->var24, *(_DWORD *)(a2 + 172));
              WrdCharacterProperties::setItalic((uint64_t)a3, v59);
            }
            break;
          case 0x837:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setStrikethrough(a2, *v7);
            if (a3)
            {
              v60 = WrdCharacterProperties::resolveToAbsolute(a3->var26, *(_DWORD *)(a2 + 180));
              WrdCharacterProperties::setStrikethrough((uint64_t)a3, v60);
            }
            break;
          case 0x838:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setOutline(a2, *v7);
            if (a3)
            {
              v61 = WrdCharacterProperties::resolveToAbsolute(a3->var25, *(_DWORD *)(a2 + 176));
              WrdCharacterProperties::setOutline((uint64_t)a3, v61);
            }
            break;
          case 0x839:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setShadow(a2, *v7);
            if (a3)
            {
              v62 = WrdCharacterProperties::resolveToAbsolute(a3->var30, *(_DWORD *)(a2 + 196));
              WrdCharacterProperties::setShadow((uint64_t)a3, v62);
            }
            break;
          case 0x83A:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setSmallCaps(a2, *v7);
            if (a3)
            {
              v63 = WrdCharacterProperties::resolveToAbsolute(a3->var27, *(_DWORD *)(a2 + 184));
              WrdCharacterProperties::setSmallCaps((uint64_t)a3, v63);
            }
            break;
          case 0x83B:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setCaps(a2, *v7);
            if (a3)
            {
              v64 = WrdCharacterProperties::resolveToAbsolute(a3->var28, *(_DWORD *)(a2 + 188));
              WrdCharacterProperties::setCaps((uint64_t)a3, v64);
            }
            break;
          case 0x83C:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            if (*v7 == 255)
              v65 = 1;
            else
              v65 = *v7;
            WrdCharacterProperties::setHidden(a2, v65);
            break;
          default:
            switch(*(_WORD *)(a4 + 8))
            {
              case 0x800:
                if (v7 >= (unsigned __int8 *)a6)
                  goto LABEL_330;
                WrdCharacterProperties::setRevisionMarkDelete(a2, *v7);
                return;
              case 0x801:
                if (v7 >= (unsigned __int8 *)a6)
                  goto LABEL_330;
                WrdCharacterProperties::setRevisionMark(a2, *v7);
                return;
              case 0x802:
                if (v7 >= (unsigned __int8 *)a6)
                  goto LABEL_330;
                WrdCharacterProperties::setFieldVanish(a2, *v7);
                return;
              case 0x803:
              case 0x804:
              case 0x805:
              case 0x807:
              case 0x808:
              case 0x809:
                return;
              case 0x806:
                if (v7 >= (unsigned __int8 *)a6)
                  goto LABEL_330;
                WrdCharacterProperties::setData((WrdCharacterProperties *)a2, *v7 == 1);
                return;
              case 0x80A:
                if (v7 >= (unsigned __int8 *)a6)
                  goto LABEL_330;
                WrdCharacterProperties::setOle2((WrdCharacterProperties *)a2, *v7 == 1);
                return;
              default:
                if (v15 != 2065)
                  return;
                if (v7 >= (unsigned __int8 *)a6)
                  goto LABEL_330;
                WrdCharacterProperties::setHiddenInWebView((WrdCharacterProperties *)a2, *v7 == 1);
                break;
            }
            return;
        }
      }
      return;
    }
    if (*(unsigned __int16 *)(a4 + 8) > 0x2A3Du)
    {
      if (*(unsigned __int16 *)(a4 + 8) <= 0x2A82u)
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0x2A3E:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            if (a3)
              WrdCharacterProperties::setUnderline((uint64_t)a3, *v7);
            WrdCharacterProperties::setUnderline(a2, *v7);
            return;
          case 0x2A3F:
          case 0x2A40:
          case 0x2A41:
          case 0x2A43:
          case 0x2A45:
          case 0x2A47:
            return;
          case 0x2A42:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            if (a3)
              WrdCharacterProperties::setColor97((uint64_t)a3, *v7);
            WrdCharacterProperties::setColor97(a2, *v7);
            return;
          case 0x2A44:
            ChLogFunction("Unimplemented sprm code 0x2A44\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 466);
            return;
          case 0x2A46:
            ChLogFunction("Unimplemented sprm code 0x2A46\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 478);
            return;
          case 0x2A48:
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setSuperSubscript(a2, *v7);
            return;
          default:
            if (v15 != 10835)
              return;
            if (v7 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            WrdCharacterProperties::setDoubleStrikethrough((WrdCharacterProperties *)a2, *v7 == 1);
            break;
        }
        return;
      }
      if (*(unsigned __int16 *)(a4 + 8) > 0x4806u)
      {
        switch(v15)
        {
          case 0x4807u:
            if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
            {
              UInt16 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdCharacterProperties::setIndexToStringsForReasons((WrdCharacterProperties *)a2, UInt16);
              return;
            }
            break;
          case 0x4845u:
            if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
            {
              SInt16 = CsLeReadSInt16((__int16 *)v7);
              WrdCharacterProperties::setCharacterPosition((WrdCharacterProperties *)a2, SInt16);
              return;
            }
            break;
          case 0x484Bu:
            if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
            {
              v30 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdCharacterProperties::setKerning((WrdCharacterProperties *)a2, v30);
              return;
            }
            break;
          default:
            return;
        }
        goto LABEL_330;
      }
      if (v15 != 10883)
      {
        if (v15 == 10896)
        {
          if (v7 < (unsigned __int8 *)a6)
          {
            WrdCharacterProperties::setXmlTag((WrdCharacterProperties *)a2, *v7);
            return;
          }
        }
        else
        {
          if (v15 != 18436)
            return;
          if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
          {
            v22 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setIndexToAuthorIDOfRevisionEdit((WrdCharacterProperties *)a2, v22);
            return;
          }
        }
        goto LABEL_330;
      }
      if (v7 < (unsigned __int8 *)a6)
      {
        v67 = *v7;
LABEL_316:
        WrdCharacterProperties::setRevisionProperties((WrdCharacterProperties *)a2, v67);
        return;
      }
      goto LABEL_330;
    }
    if (*(unsigned __int16 *)(a4 + 8) <= 0x2A0Bu)
    {
      switch(*(_WORD *)(a4 + 8))
      {
        case 0x2879:
          if (v7 >= (unsigned __int8 *)a6)
            goto LABEL_330;
          WrdCharacterProperties::setLineBreak(a2, *v7);
          return;
        case 0x287A:
        case 0x287B:
        case 0x287C:
          return;
        case 0x287D:
          ChLogFunction("Unimplemented sprm code 0x287D\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 841);
          return;
        case 0x287E:
          ChLogFunction("Unimplemented sprm code 0x287E\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 878);
          return;
        case 0x287F:
        case 0x2880:
          ChLogFunction("Unimplemented sprm code 0x287F or 0x2880\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 930);
          return;
        default:
          if (v15 == 10329)
          {
            if (v7 < (unsigned __int8 *)a6)
            {
              WrdCharacterProperties::setTextAnimation(a2, *v7);
              return;
            }
          }
          else
          {
            if (v15 != 10351)
              return;
            if (v7 < (unsigned __int8 *)a6)
            {
              WrdCharacterProperties::setCharacterTypeIDHint((WrdCharacterProperties *)a2, *v7);
              return;
            }
          }
          break;
      }
      goto LABEL_330;
    }
    if (*(unsigned __int16 *)(a4 + 8) > 0x2A32u)
    {
      if (v15 == 10803)
      {
        if (v7 < (unsigned __int8 *)a6)
        {
          WrdCharacterProperties::setUseParagraphStylesProperties((WrdCharacterProperties *)a2, *v7 == 1);
          return;
        }
      }
      else
      {
        if (v15 != 10804)
          return;
        if (v7 < (unsigned __int8 *)a6)
        {
          WrdCharacterProperties::setEmphasisMark(a2, *v7);
          return;
        }
      }
      goto LABEL_330;
    }
    if (v15 == 10764)
    {
      if (v7 < (unsigned __int8 *)a6)
      {
        WrdCharacterProperties::setHighlightColor97(a2, *v7);
        WrdCharacterProperties::setHighlighted((WrdCharacterProperties *)a2, *(_DWORD *)(a2 + 156) != 0);
        return;
      }
      goto LABEL_330;
    }
    if (v15 == 10802)
    {
      WrdCharacterProperties::setBold(a2, 0);
      WrdCharacterProperties::setItalic(a2, 0);
      WrdCharacterProperties::setOutline(a2, 0);
      WrdCharacterProperties::setStrikethrough(a2, 0);
      WrdCharacterProperties::setShadow(a2, 0);
      WrdCharacterProperties::setSmallCaps(a2, 0);
      WrdCharacterProperties::setCaps(a2, 0);
      WrdCharacterProperties::setHidden(a2, 0);
      WrdCharacterProperties::setUnderline(a2, 0);
      WrdCharacterProperties::setColor97(a2, 0);
    }
    return;
  }
  if (*(unsigned __int16 *)(a4 + 8) <= 0x6864u)
  {
    if (*(unsigned __int16 *)(a4 + 8) <= 0x4A2Fu)
    {
      if (*(unsigned __int16 *)(a4 + 8) <= 0x485Eu)
      {
        if (v15 == 18510)
        {
          if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
          {
            WrdCharacterProperties::setHyphenationRule(a2, *v7);
            WrdCharacterProperties::setHyphenationChangeCharacter((WrdCharacterProperties *)a2, v7[1]);
            return;
          }
        }
        else
        {
          if (v15 != 18514)
            return;
          if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
          {
            v31 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setCharacterScale((WrdCharacterProperties *)a2, v31);
            return;
          }
        }
        goto LABEL_330;
      }
      switch(*(_WORD *)(a4 + 8))
      {
        case 0x485F:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v48 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setLanguageIDForBiText(a2, v48);
          return;
        case 0x4860:
        case 0x4861:
        case 0x4862:
        case 0x4864:
        case 0x4865:
        case 0x4868:
        case 0x4869:
        case 0x486A:
        case 0x486C:
        case 0x486F:
        case 0x4870:
        case 0x4871:
        case 0x4872:
          return;
        case 0x4863:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v49 = CsLeReadUInt16((unsigned __int16 *)v7);
          if (v49 != 0xFFFF)
            WrdCharacterProperties::setIndexToAuthorIDOfRevisionDelete((WrdCharacterProperties *)a2, v49);
          return;
        case 0x4866:
          ShadingReference = WrdCharacterProperties::getShadingReference((WrdCharacterProperties *)a2);
          WrdBaseParser::parseSHD80(a1, ShadingReference, (unsigned __int16 *)v7, a6);
          return;
        case 0x4867:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v51 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setIndexToStringsForReasonsOfDeletion((WrdCharacterProperties *)a2, v51);
          return;
        case 0x486B:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v52 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setCodePageForPreUnicodeFiles(a2, v52);
          return;
        case 0x486D:
        case 0x4873:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v18 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setLanguageIDForDefaultText(a2, v18);
          return;
        case 0x486E:
        case 0x4874:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v39 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setLanguageIDForFarEastAsianText(a2, v39);
          return;
        default:
          if (v15 != 18568)
            return;
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v40 = CsLeReadUInt16((unsigned __int16 *)v7) != 0;
          WrdCharacterProperties::setListCharacterPictureBullet((WrdCharacterProperties *)a2, v40);
          break;
      }
      return;
    }
    if (*(unsigned __int16 *)(a4 + 8) <= 0x4A5Du)
    {
      switch(*(_WORD *)(a4 + 8))
      {
        case 0x4A4D:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v19 = CsLeReadSInt16((__int16 *)v7);
          ChLogFunction("Do not understand how percentage number is stored yet for CHP SPRM 0x4A4D which applies to font size", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 528);
          v20 = (int)((double)v19 / 100.0);
          goto LABEL_179;
        case 0x4A4E:
          return;
        case 0x4A4F:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          if (a3)
          {
            v41 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setFontIndexForASCIIText(a3, v41);
          }
          v42 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForASCIIText((WrdCharacterProperties *)a2, v42);
          return;
        case 0x4A50:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          v43 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForFarEastAsianText((WrdCharacterProperties *)a2, v43);
          return;
        case 0x4A51:
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          if (a3)
          {
            v44 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setFontIndexForOtherText(a3, v44);
          }
          v45 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForOtherText((WrdCharacterProperties *)a2, v45);
          return;
        default:
          if (v15 == 18992)
          {
            if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
            {
              v81 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdCharacterProperties::setStyleIndex((WrdCharacterProperties *)a2, v81);
              return;
            }
            goto LABEL_330;
          }
          if (v15 != 19011)
            return;
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          if (a3)
          {
            v32 = CsLeReadUInt16((unsigned __int16 *)v7);
            WrdCharacterProperties::setFontSize(a3, v32);
          }
LABEL_178:
          LOWORD(v20) = CsLeReadUInt16((unsigned __int16 *)v7);
LABEL_179:
          WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, v20);
          break;
      }
      return;
    }
    if (*(unsigned __int16 *)(a4 + 8) <= 0x6804u)
    {
      if (v15 == 19038)
      {
        if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
        {
          v78 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontIndexForBiText((WrdCharacterProperties *)a2, v78);
          return;
        }
      }
      else
      {
        if (v15 != 19041)
          return;
        if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
        {
          v38 = CsLeReadUInt16((unsigned __int16 *)v7);
          WrdCharacterProperties::setFontSizeForBiText((WrdCharacterProperties *)a2, v38);
          return;
        }
      }
      goto LABEL_330;
    }
    switch(v15)
    {
      case 0x6805u:
        RevisionEditReference = WrdCharacterProperties::getRevisionEditReference((WrdCharacterProperties *)a2);
        break;
      case 0x680Eu:
        if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 3)
        {
          v68 = *(_DWORD *)a1;
          SInt32 = CsLeReadSInt32((unsigned int *)v7);
          if (v68 < 10)
            WrdCharacterProperties::setOffsetToOLE1Object((WrdCharacterProperties *)a2, SInt32);
          else
            WrdCharacterProperties::setOffsetToOLEObjectData((WrdCharacterProperties *)a2, SInt32);
          return;
        }
        goto LABEL_330;
      case 0x6864u:
        RevisionEditReference = WrdCharacterProperties::getRevisionDeleteReference((WrdCharacterProperties *)a2);
        break;
      default:
        return;
    }
    goto LABEL_328;
  }
  if (*(unsigned __int16 *)(a4 + 8) > 0xCA46u)
  {
    if (*(unsigned __int16 *)(a4 + 8) > 0xCA70u)
    {
      if (*(unsigned __int16 *)(a4 + 8) <= 0xCA88u)
      {
        switch(*(_WORD *)(a4 + 8))
        {
          case 0xCA71:
            v17 = WrdCharacterProperties::getShadingReference((WrdCharacterProperties *)a2);
            WrdBaseParser::parseBuffer((uint64_t)a1, v17, v7, (const unsigned __int8 *)a6);
            return;
          case 0xCA72:
            BorderReference = WrdCharacterProperties::getBorderReference((WrdCharacterProperties *)a2);
            WrdBaseParser::parseBuffer(a1, BorderReference, v7, (const unsigned __int8 *)a6);
            return;
          case 0xCA76:
            if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 7)
              goto LABEL_330;
            v54 = CsLeReadSInt32((unsigned int *)v7);
            WrdCharacterProperties::setFitTextWidth((WrdCharacterProperties *)a2, v54);
            v55 = CsLeReadSInt32((unsigned int *)v7 + 1);
            WrdCharacterProperties::setFitTextID((WrdCharacterProperties *)a2, v55);
            return;
          case 0xCA78:
            if (v7 + 1 >= (unsigned __int8 *)a6)
              goto LABEL_330;
            v56 = v7[1];
            v57 = (unsigned __int16 *)(v7 + 2);
            if (v56 == 1)
            {
              if (a6 > v57 && (unint64_t)((char *)a6 - (char *)v57) > 2)
              {
                WrdCharacterProperties::setTatenakayoko((WrdCharacterProperties *)a2, 1);
                WrdCharacterProperties::setFitTextFE((WrdCharacterProperties *)a2, v7[2] == 16);
                WrdCharacterProperties::setTatenakayokoNewLineState((WrdCharacterProperties *)a2, v7[3]);
                WrdCharacterProperties::setTatenakayokoID((WrdCharacterProperties *)a2, v7[4]);
                return;
              }
            }
            else
            {
              if (v56 != 2)
              {
                ChLogFunction("Unknown type in SPRM 0xCA78 relating to Far East layout", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 872);
                return;
              }
              if (v57 < a6)
              {
                WrdCharacterProperties::setWarichu((WrdCharacterProperties *)a2, 1);
                WrdCharacterProperties::setWarichuBracket(a2, *(unsigned __int8 *)v57);
                return;
              }
            }
            break;
          case 0xCA7C:
            v86 = (CsColour)255;
            v87 = (CsColour)255;
            WrdBaseParser::parseBuffer(a1, &v87, v7, (const unsigned __int8 *)a6);
            WrdBaseParser::parseBuffer(a1, &v86, v7 + 4, (const unsigned __int8 *)a6);
            if (*(unsigned __int16 *)(a2 + 30) == v87.var0
              && *(unsigned __int16 *)(a2 + 32) == v87.var1
              && *(unsigned __int16 *)(a2 + 34) == v87.var2
              && *(unsigned __int16 *)(a2 + 36) == v87.var3)
            {
              ColorReference = (CsColour *)WrdCharacterProperties::getColorReference((WrdCharacterProperties *)a2);
              *ColorReference = v86;
            }
            return;
          default:
            return;
        }
        goto LABEL_330;
      }
      if (v15 != 51849)
      {
        if (v15 == 59912)
        {
          ChLogFunction("Unimplemented sprm code 0xEA08\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 198);
          return;
        }
        if (v15 == 59967)
        {
          if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
            goto LABEL_330;
          if (*v7)
          {
            if (a3)
              WrdCharacterProperties::setFontSize(a3, 0);
            WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, 0);
          }
          if (v7[1] >= 2u)
            ChLogFunction("Incomplete implementation of 0xEA3F CHP SPRM!", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 426);
          ChLogFunction("Incomplete implementation of 0xEA3F CHP SPRM!", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 430);
        }
        return;
      }
      if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 2)
        goto LABEL_330;
      WrdCharacterProperties::setRevisionProperties((WrdCharacterProperties *)a2, *v7);
      v71 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
      WrdCharacterProperties::setIndexToAuthorIDOfRevisionProperties((WrdCharacterProperties *)a2, v71);
      RevisionPropertiesDateTimeReference = (WrdDateTime *)WrdCharacterProperties::getRevisionPropertiesDateTimeReference((WrdCharacterProperties *)a2);
      v73 = a1;
      v74 = v7 + 3;
LABEL_329:
      WrdBaseParser::parseBuffer(v73, RevisionPropertiesDateTimeReference, v74, (unsigned __int8 *)a6);
      return;
    }
    switch(*(_WORD *)(a4 + 8))
    {
      case 0xCA47:
      case 0xCA4C:
        WrdChpParser::applyCMajoritySPRM(a1, (WrdCharacterProperties *)a2, a3, (unsigned __int16 *)v7, (const unsigned __int8 *)a6, SizeOfSPRMParameter);
        return;
      case 0xCA48:
      case 0xCA4B:
        return;
      case 0xCA49:
        if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
          goto LABEL_178;
        goto LABEL_330;
      case 0xCA4A:
        if (a6 <= (unsigned __int16 *)v7 || (unint64_t)((char *)a6 - (char *)v7) <= 1)
          goto LABEL_330;
        v46 = CsLeReadSInt16((__int16 *)v7);
        WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, v46);
        v47 = *(unsigned __int16 *)(a2 + 312);
        if (v47 > 7)
        {
          if (v47 >= 0x7FFF)
            WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, 0x7FFEu);
        }
        else
        {
          WrdCharacterProperties::setFontSize((WrdCharacterProperties *)a2, 8u);
        }
        return;
      default:
        if (v15 != 51799)
        {
          if (v15 != 51810)
            return;
          if (v7 >= (unsigned __int8 *)a6)
            goto LABEL_330;
          if (!*v7)
          {
            WrdCharacterProperties::clearListNumberRevisionAttributes((WrdCharacterProperties *)a2);
            return;
          }
          WrdCharacterProperties::setRevisionListNumber((WrdCharacterProperties *)a2, 1);
          if (a6 <= (unsigned __int16 *)(v7 + 1) || (unint64_t)((char *)a6 - (char *)(v7 + 1)) <= 0x25)
            goto LABEL_330;
          v34 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
          WrdCharacterProperties::setIndexToAuthorIDOfRevisionListNumber((WrdCharacterProperties *)a2, v34);
          RevisionListNumberDateTimeReference = (WrdDateTime *)WrdCharacterProperties::getRevisionListNumberDateTimeReference((WrdCharacterProperties *)a2);
          WrdBaseParser::parseBuffer(a1, RevisionListNumberDateTimeReference, v7 + 3, (unsigned __int8 *)a6);
          v36 = *(_QWORD *)(a2 + 56);
          if (v36)
          {
            for (i = 0; i != 32; ++i)
              *(_WORD *)(v36 + 2 * i) = v7[i + 7];
          }
          return;
        }
        if (v7 >= (unsigned __int8 *)a6)
          goto LABEL_330;
        v67 = *v7;
        if (!*v7)
          goto LABEL_316;
        if ((unint64_t)((char *)a6 - (char *)v7) < 7)
        {
LABEL_330:
          exception = __cxa_allocate_exception(4uLL);
          v85 = 1004;
          goto LABEL_332;
        }
        v82 = 0;
        while (v7[v82] == 255)
        {
          if (++v82 == 7)
            return;
        }
        WrdCharacterProperties::setRevisionProperties((WrdCharacterProperties *)a2, v67);
        v83 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
        WrdCharacterProperties::setIndexToAuthorIDOfRevisionProperties((WrdCharacterProperties *)a2, v83);
        v7 += 3;
        RevisionEditReference = WrdCharacterProperties::getRevisionPropertiesDateTimeReference((WrdCharacterProperties *)a2);
        break;
    }
LABEL_328:
    RevisionPropertiesDateTimeReference = (WrdDateTime *)RevisionEditReference;
    v73 = a1;
    v74 = v7;
    goto LABEL_329;
  }
  if (*(unsigned __int16 *)(a4 + 8) <= 0x6A08u)
  {
    if (*(unsigned __int16 *)(a4 + 8) <= 0x6876u)
    {
      if (v15 == 26725)
      {
        v77 = WrdCharacterProperties::getBorderReference((WrdCharacterProperties *)a2);
        WrdBaseParser::parseBRC80(a1, v77, (unsigned __int16 *)v7, a6);
        return;
      }
      if (v15 != 26736)
        return;
      UnderlineColorReference = (CsColour *)WrdCharacterProperties::getColorReference((WrdCharacterProperties *)a2);
    }
    else
    {
      if (v15 != 26743)
      {
        if (v15 == 26759)
        {
          if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 3)
          {
            v66 = CsLeReadSInt32((unsigned int *)v7);
            WrdCharacterProperties::setCharPositionOfPictureBulletInBookmark((WrdCharacterProperties *)a2, v66);
            return;
          }
        }
        else
        {
          if (v15 != 27139)
            return;
          if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 3)
          {
            v21 = CsLeReadSInt32((unsigned int *)v7);
            WrdCharacterProperties::setOffsetToPictureData((WrdCharacterProperties *)a2, v21);
            WrdCharacterProperties::setOffsetToFormFieldData((WrdCharacterProperties *)a2, v21);
            WrdCharacterProperties::setObjectIDForOLE2((WrdCharacterProperties *)a2, v21);
            WrdCharacterProperties::setOffsetToOLEObjectData((WrdCharacterProperties *)a2, v21);
            WrdCharacterProperties::setSpecialCharacter((WrdCharacterProperties *)a2, 1);
            return;
          }
        }
        goto LABEL_330;
      }
      UnderlineColorReference = (CsColour *)WrdCharacterProperties::getUnderlineColorReference((WrdCharacterProperties *)a2);
    }
    WrdBaseParser::parseBuffer(a1, UnderlineColorReference, v7, (const unsigned __int8 *)a6);
    return;
  }
  if (*(unsigned __int16 *)(a4 + 8) <= 0x883Fu)
  {
    if (v15 == 27145)
    {
      if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 3)
      {
        v79 = CsLeReadUInt16((unsigned __int16 *)v7);
        WrdCharacterProperties::setFontIndexForSymbol((WrdCharacterProperties *)a2, v79);
        v80 = CsLeReadUInt16((unsigned __int16 *)v7 + 1);
        WrdCharacterProperties::setSymbolCharacter((WrdCharacterProperties *)a2, v80);
        return;
      }
      goto LABEL_330;
    }
    if (v15 == 27154)
      ChLogFunction("Unimplemented sprm code 0x6A12\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 911);
  }
  else
  {
    if (v15 == 34880)
    {
      if (a6 > (unsigned __int16 *)v7 && (unint64_t)((char *)a6 - (char *)v7) > 1)
      {
        v70 = CsLeReadUInt16((unsigned __int16 *)v7);
        WrdCharacterProperties::setSpaceAfterEachChar((WrdCharacterProperties *)a2, v70);
        return;
      }
      goto LABEL_330;
    }
    if (v15 == 51731)
    {
      ChLogFunction("Unimplemented sprm code 0xCA13 relating to threading authors\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 923);
      return;
    }
    if (v15 == 51761 && *(unsigned __int8 *)(a4 + 13) >= 7u)
    {
      if (v7 < (unsigned __int8 *)a6 && (unint64_t)((char *)a6 - (char *)v7) > 5)
      {
        v24 = (unsigned __int16 *)(v7 + 2);
        v25 = CsLeReadUInt16(v24);
        v26 = CsLeReadUInt16(v24);
        v27 = *(unsigned __int16 *)(a2 + 332);
        if (v27 <= v25 || v27 > v26)
          return;
        v28 = &v24[v27 - v25];
        if (a6 > v28 && (unint64_t)((char *)a6 - (char *)v28) > 1)
        {
          v29 = CsLeReadUInt16(v28);
          WrdCharacterProperties::setStyleIndex((WrdCharacterProperties *)a2, v29);
          ChLogFunction("Need to apply CHPXs in rgstd entries.", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdChpParser.cpp", 274);
          return;
        }
      }
      goto LABEL_330;
    }
  }
}

uint64_t WrdProperty::getSizeOfSPRMParameter(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 4);
  if (v1 < 8 && ((0xBFu >> v1) & 1) != 0)
  {
    LOWORD(v1) = word_22A4D2C10[v1];
  }
  else
  {
    LODWORD(v1) = *(unsigned __int8 *)(a1 + 13);
    if ((_DWORD)v1 == 255)
      LOWORD(v1) = -1;
  }
  return (unsigned __int16)v1;
}

WrdCharacterProperties *WrdCharacterProperties::setFontSize(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x1000uLL;
  this->var62 = a2;
  return this;
}

uint64_t WrdCharacterProperties::clearAllRevisionAttributes(WrdCharacterProperties *this)
{
  unsigned int *v1;
  unint64_t v2;
  uint64_t var2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;

  v1 = (unsigned int *)&this->var2 + 2;
  v2 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  var2 = (uint64_t)this->var2;
  this->var36 = 0;
  v2 &= ~0x4000000000uLL;
  *(_QWORD *)&this->var2 = var2 & 0xFFFFFFFFFFFFFFF7;
  *((_DWORD *)&this->var2 + 2) = v2;
  *((_WORD *)&this->var2 + 6) = WORD2(v2);
  (*((void (**)(WrdDateTime *))this->var12->var0 + 3))(this->var12);
  v4 = *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32);
  v5 = *((_QWORD *)v1 - 1);
  *((_WORD *)v1 + 153) = 0;
  v1[50] = 0;
  v4 &= 0xFFDFFFFFBFFFuLL;
  *((_QWORD *)v1 - 1) = v5 & 0xFFFFFFFFFFFFFFBFLL;
  *v1 = v4;
  *((_WORD *)v1 + 2) = WORD2(v4);
  (*(void (**)(_QWORD))(**((_QWORD **)v1 + 11) + 24))(*((_QWORD *)v1 + 11));
  v6 = *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32);
  v7 = *((_QWORD *)v1 - 1);
  *((_WORD *)v1 + 143) = 0;
  v1[79] &= ~0x1000000u;
  v6 &= 0xFFFD7FFFFFFFuLL;
  *((_QWORD *)v1 - 1) = v7 & 0xFF7FFFFFFFFFFFFFLL;
  *v1 = v6;
  *((_WORD *)v1 + 2) = WORD2(v6);
  (*(void (**)(_QWORD))(**((_QWORD **)v1 + 10) + 24))(*((_QWORD *)v1 + 10));
  v8 = *v1;
  v9 = (v8 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *v1 = v8;
  *((_WORD *)v1 + 2) = WORD2(v9);
  *((_WORD *)v1 + 152) = 0;
  v1[10] = 0;
  bzero(*((void **)v1 + 4), 2 * v1[11]);
  v10 = *v1;
  v1[79] &= ~0x800000u;
  *v1 = v10 & 0xFD7FFFFF;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 8) + 24))(*((_QWORD *)v1 + 8));
  v12 = *v1;
  v13 = v12 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32);
  *v1 = v12 & 0xFEFFFFFF;
  *((_WORD *)v1 + 2) = WORD2(v13);
  *((_WORD *)v1 + 151) = 0;
  return result;
}

uint64_t WrdCharacterProperties::setLanguageIDForBiText(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x800000000000uLL;
  *(_DWORD *)(result + 240) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setLanguageIDForDefaultText(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x200000000000uLL;
  *(_DWORD *)(result + 232) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setLanguageIDForFarEastAsianText(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x400000000000uLL;
  *(_DWORD *)(result + 236) = a2;
  return result;
}

WrdBaseParser *WrdPapParser::applySprm(WrdBaseParser *result, WrdStyle *this, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  WrdBaseParser *v12;
  unsigned int i;
  _QWORD *v14;
  uint64_t v15;
  WrdParagraphProperties *v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  __int16 v19;
  unsigned __int8 *v20;
  int SizeOfSPRMParameter;
  uint64_t ResolvedParaPropsReference;
  uint64_t v23;
  WrdParagraphProperties *v24;
  WrdParagraphProperties *v25;
  _DWORD *exception;
  unsigned __int16 *v27;
  unsigned int v30;
  void *__p;
  void *v32;
  uint64_t v33;
  unsigned int v34;

  v12 = result;
  if (*(unsigned __int16 *)(a3 + 8) == 50790)
  {
    if (*((_DWORD *)this + 38) == 3)
    {
      *a6 = WrdProperty::getSizeOfSPRMParameter(a3);
      v27 = a4 + 1;
      if (a4 + 1 > a5)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 1004;
      }
      result = (WrdBaseParser *)CsLeReadUInt16(a4);
      v30 = result;
      for (i = 0; i != 12; ++i)
      {
        if (((v30 >> i) & 1) != 0)
        {
          LOWORD(v34) = 0;
          LODWORD(__p) = 0;
          v14 = operator new(0x10uLL);
          *v14 = 0;
          v14[1] = 0;
          v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a7 + 280) + 16))(*(_QWORD *)(a7 + 280), 41);
          if (v15)
            v16 = (WrdParagraphProperties *)(v15 - 8);
          else
            v16 = 0;
          if (*a6 >= 3u)
          {
            v17 = 2;
            v18 = v27;
            do
            {
              WrdPropertyParser::parseSPRM(v18, (unint64_t)a5, &v34, (uint64_t)v14);
              v19 = v34;
              v20 = (unsigned __int8 *)v18 + (unsigned __int16)v34;
              if (*(_DWORD *)v14 == 1)
              {
                WrdPapParser::applySprm(v12, (uint64_t)v16, (uint64_t)v14, v20, a5, &v34, &__p);
                SizeOfSPRMParameter = (unsigned __int16)v34;
              }
              else
              {
                SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v14);
                LOWORD(v34) = SizeOfSPRMParameter;
              }
              v18 = (unsigned __int16 *)&v20[SizeOfSPRMParameter];
              v17 += SizeOfSPRMParameter + v19;
            }
            while (*a6 > v17);
          }
          WrdParagraphProperties::clearAllRevisionAttributes(v16);
          WrdStyle::takeParaProps((uint64_t)this, i, (uint64_t *)v16);
          result = (WrdBaseParser *)MEMORY[0x22E2DD408](v14, 0x1000C4099076E91);
        }
      }
    }
  }
  else
  {
    v34 = 0;
    ResolvedParaPropsReference = WrdStyle::getResolvedParaPropsReference(this);
    WrdPapParser::applySprm(v12, ResolvedParaPropsReference, a3, (unsigned __int8 *)a4, a5, a6, &v34);
    v23 = v34;
    if ((v34 & 0x80000000) == 0)
    {
      __p = 0;
      v32 = 0;
      v33 = 0;
      v24 = (WrdParagraphProperties *)WrdStyle::getResolvedParaPropsReference(this);
      WrdParser::applyHugePapx((_QWORD *)a7, (char **)&__p, v23, v24, 0, *((WrdTableProperties **)this + 8), 0);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
    }
    v25 = (WrdParagraphProperties *)WrdStyle::getResolvedParaPropsReference(this);
    return (WrdBaseParser *)WrdParagraphProperties::clearAllRevisionAttributes(v25);
  }
  return result;
}

void sub_22A1723E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void WrdPapParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5, _WORD *a6, _DWORD *a7)
{
  unsigned int SizeOfSPRMParameter;
  unsigned int v15;
  int v16;
  WrdBorder *BorderTopReference;
  WrdBorder *BorderRightReference;
  WrdAutoNumberLevelDescriptor **AutoNumberListDescriptorReference;
  WrdBorder *BorderBottomReference;
  int v21;
  __int16 SInt16;
  unsigned int v23;
  const char *v24;
  int v25;
  int v26;
  WrdParagraphProperties *v27;
  CsColour *v28;
  WrdLineSpaceDescriptor *LineSpaceReference;
  __int16 v30;
  int v31;
  int v32;
  __int16 v33;
  WrdDateTime *DttmRevisionMarkReference;
  int v35;
  WrdParagraphProperties *v36;
  int v37;
  int v38;
  __int16 v39;
  char v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int16 v45;
  WrdDropCap *DropCapReference;
  WrdShading *ShadingReference;
  int v48;
  char v49;
  WrdNumberRevisionMarkData *NumberRevisionMarkDataReference;
  WrdBorder *BorderLeftReference;
  WrdShading *v52;
  int v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  int v58;
  int SInt32;
  char v60;
  int v61;
  __int16 UInt16;
  int v63;
  _DWORD *exception;
  int v65;

  *a7 = -1;
  if (*(_DWORD *)a3 != 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    v65 = 2002;
    goto LABEL_186;
  }
  if (!a4
    || (SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter(a3), *a6 = SizeOfSPRMParameter, SizeOfSPRMParameter)
    && SizeOfSPRMParameter != 0xFFFF
    && (a5 <= (unsigned __int16 *)a4 || (char *)a5 - (char *)a4 < (unint64_t)SizeOfSPRMParameter))
  {
LABEL_184:
    exception = __cxa_allocate_exception(4uLL);
    v65 = 1004;
    goto LABEL_186;
  }
  v15 = *(unsigned __int16 *)(a3 + 8);
  if (v15 <= 0x460F)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x245Au)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x4423u)
      {
        if (*(unsigned __int16 *)(a3 + 8) > 0x2609u)
        {
          if (*(unsigned __int16 *)(a3 + 8) > 0x263Fu)
          {
            if (v15 == 9792)
            {
              v40 = *a4;
LABEL_170:
              WrdParagraphProperties::setOutlineLevel((WrdParagraphProperties *)a2, v40);
            }
            else if (v15 == 9828)
            {
              WrdParagraphProperties::setRevisionMark((WrdParagraphProperties *)a2, *a4 == 1);
            }
          }
          else if (v15 == 9738)
          {
            WrdParagraphProperties::setListLevel((WrdParagraphProperties *)a2, *a4);
          }
          else if (v15 == 9755)
          {
            v23 = *a4;
            if ((v23 & 0x30) != 0x30)
              WrdCharacterProperties::setTextAnimation(a2, (v23 & 0x30) >> 4);
            if ((~v23 & 0xC0) != 0)
              WrdParagraphProperties::setHorizontalPosition(a2, v23 >> 6);
          }
        }
        else
        {
          switch(*(_WORD *)(a3 + 8))
          {
            case 0x245B:
              WrdParagraphProperties::setVerticalSpacingBeforeAutomatic((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            case 0x245C:
              WrdParagraphProperties::setVerticalSpacingAfterAutomatic((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            case 0x245D:
            case 0x245E:
            case 0x245F:
            case 0x2460:
              return;
            case 0x2461:
              WrdParagraphProperties::setJustification(a2, *a4);
              break;
            case 0x2462:
              WrdParagraphProperties::setNoOverlapAllowed((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            default:
              if (v15 == 9730)
              {
                v38 = *(unsigned __int16 *)(a2 + 140);
                if ((v38 - 1) <= 8)
                {
                  if ((*a4 & 0x50) != 0)
                    v39 = *a4 | 0xFF00;
                  else
                    v39 = *a4;
                  WrdParagraphProperties::setParagraphStyleIndex((WrdParagraphProperties *)a2, v38 + v39);
                  v40 = *(_BYTE *)(a2 + 299) + v39;
                  goto LABEL_170;
                }
              }
              break;
          }
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) > 0x4454u)
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x4455:
            SInt16 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setRightIndentCharacterUnits((WrdParagraphProperties *)a2, SInt16);
            break;
          case 0x4456:
            v54 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setLeftIndentCharacterUnits((WrdParagraphProperties *)a2, v54);
            break;
          case 0x4457:
            v55 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setFirstLineIndentCharacterUnits((WrdParagraphProperties *)a2, v55);
            break;
          case 0x4458:
            v56 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setLineSpaceBefore((WrdParagraphProperties *)a2, v56);
            break;
          case 0x4459:
            v57 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setLineSpaceAfter((WrdParagraphProperties *)a2, v57);
            break;
          default:
            if (v15 == 17920)
            {
              UInt16 = CsLeReadUInt16((unsigned __int16 *)a4);
              WrdParagraphProperties::setParagraphStyleIndex((WrdParagraphProperties *)a2, UInt16);
            }
            else if (v15 == 17931)
            {
              v30 = CsLeReadUInt16((unsigned __int16 *)a4);
              WrdParagraphProperties::setIndexToList((WrdParagraphProperties *)a2, v30);
            }
            break;
        }
      }
      else
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x4424:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
            goto LABEL_134;
          case 0x4425:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
            goto LABEL_134;
          case 0x4426:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
            goto LABEL_134;
          case 0x4427:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
            goto LABEL_134;
          case 0x4428:
            BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
            goto LABEL_134;
          case 0x442B:
            v45 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setAbsoluteHeight((WrdParagraphProperties *)a2, v45);
            break;
          case 0x442C:
            DropCapReference = (WrdDropCap *)WrdParagraphProperties::getDropCapReference((WrdParagraphProperties *)a2);
            WrdBaseParser::parseBuffer(a1, DropCapReference, (unsigned __int16 *)a4, a5);
            break;
          case 0x442D:
            ShadingReference = (WrdShading *)WrdParagraphProperties::getShadingReference((WrdParagraphProperties *)a2);
            WrdBaseParser::parseSHD80(a1, ShadingReference, (unsigned __int16 *)a4, a5);
            break;
          case 0x4439:
            v48 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setFontAlignment(a2, v48);
            break;
          case 0x443A:
            v49 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setVertical((WrdParagraphProperties *)a2, v49 & 1);
            WrdParagraphProperties::setBackward((WrdParagraphProperties *)a2, (v49 & 2) != 0);
            WrdParagraphProperties::setRotateFont((WrdParagraphProperties *)a2, (v49 & 4) != 0);
            break;
          default:
            return;
        }
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x242A:
          WrdParagraphProperties::setNoAutoHyphenate((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x242B:
        case 0x242C:
        case 0x242D:
        case 0x242E:
        case 0x242F:
        case 0x2432:
        case 0x2439:
        case 0x243A:
        case 0x243B:
        case 0x243C:
        case 0x243D:
        case 0x243E:
        case 0x243F:
        case 0x2440:
        case 0x2442:
        case 0x2444:
        case 0x2445:
        case 0x2446:
        case 0x2449:
        case 0x244A:
          return;
        case 0x2430:
          WrdParagraphProperties::setLocked((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2431:
          WrdParagraphProperties::setWidowed((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2433:
          WrdParagraphProperties::setKinsoku((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2434:
          WrdParagraphProperties::setWordWrap((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2435:
          WrdParagraphProperties::setOverflowPunctuation((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2436:
          WrdParagraphProperties::setTopLinePunctuationProcessing((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2437:
          WrdParagraphProperties::setAutoSpaceEastAsianAndAlphabeticCharacters((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2438:
          WrdParagraphProperties::setAutoSpaceEastAsianAndNumericCharacters((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2441:
          WrdParagraphProperties::setBiDi((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2443:
          WrdParagraphProperties::setParagraphNumberInserted((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2447:
          WrdParagraphProperties::setPageSetupLinePitch((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x2448:
          WrdParagraphProperties::setAdjustRightMargin((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x244B:
          WrdParagraphProperties::setInnerTableCell((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        case 0x244C:
          WrdParagraphProperties::setInnerTableTrailerParagraph((WrdParagraphProperties *)a2, *a4 == 1);
          break;
        default:
          switch(*(_WORD *)(a3 + 8))
          {
            case 0x2403:
              WrdParagraphProperties::setJustificationV8(a2, *a4);
              break;
            case 0x2404:
              WrdParagraphProperties::setSideBySide((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            case 0x2405:
              WrdParagraphProperties::setKeepOnOnePage((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            case 0x2406:
              WrdParagraphProperties::setKeepFollowingParagraph((WrdParagraphProperties *)a2, *a4 != 0);
              break;
            case 0x2407:
              WrdParagraphProperties::setPageBreakBefore((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            case 0x2408:
              WrdParagraphProperties::setBorderLineStyle(a2, *a4);
              break;
            case 0x2409:
              WrdParagraphProperties::setBorderCode(a2, *a4);
              break;
            case 0x240A:
            case 0x240B:
            case 0x240D:
            case 0x240E:
            case 0x240F:
            case 0x2410:
            case 0x2411:
            case 0x2412:
            case 0x2413:
            case 0x2414:
            case 0x2415:
              return;
            case 0x240C:
              WrdParagraphProperties::setNoLineNumbering((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            case 0x2416:
              v60 = *a4 == 1;
              goto LABEL_180;
            case 0x2417:
              WrdParagraphProperties::setTableTrailerParagraph((WrdParagraphProperties *)a2, *a4 == 1);
              break;
            default:
              if (v15 == 9251)
                WrdParagraphProperties::setWrapCode((WrdParagraphProperties *)a2, *a4);
              break;
          }
          break;
      }
    }
    return;
  }
  if (*(unsigned __int16 *)(a3 + 8) > 0x840Du)
  {
    if (*(unsigned __int16 *)(a3 + 8) <= 0xC60Cu)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x842Eu)
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x840E:
            v16 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setRightIndent((WrdParagraphProperties *)a2, v16);
            break;
          case 0x840F:
            v37 = CsLeReadSInt16((__int16 *)a4);
            v36 = (WrdParagraphProperties *)a2;
            goto LABEL_119;
          case 0x8410:
          case 0x8412:
          case 0x8413:
          case 0x8414:
          case 0x8415:
          case 0x8416:
          case 0x8417:
            return;
          case 0x8411:
            v41 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setFirstLineLeftIndent((WrdParagraphProperties *)a2, v41);
            break;
          case 0x8418:
            v42 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setHorizontalPlacement((WrdParagraphProperties *)a2, v42);
            break;
          case 0x8419:
            v43 = CsLeReadSInt16((__int16 *)a4);
            WrdParagraphProperties::setVerticalPlacement((WrdParagraphProperties *)a2, v43);
            break;
          case 0x841A:
            v44 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setWidth((WrdParagraphProperties *)a2, v44);
            break;
          default:
            if (v15 == 33838)
            {
              v32 = CsLeReadUInt16((unsigned __int16 *)a4);
              WrdParagraphProperties::setVerticalDistanceFromText((WrdParagraphProperties *)a2, v32);
            }
            break;
        }
        return;
      }
      if (*(unsigned __int16 *)(a3 + 8) > 0x845Fu)
      {
        if (*(unsigned __int16 *)(a3 + 8) > 0xA413u)
        {
          if (v15 == 42004)
          {
            v63 = CsLeReadUInt16((unsigned __int16 *)a4);
            WrdParagraphProperties::setSpaceAfter((WrdParagraphProperties *)a2, v63);
          }
          else if (v15 == 50689)
          {
            handleCase0xC601(a2, a3, (unint64_t)a4, a5);
          }
        }
        else if (v15 == 33888)
        {
          v53 = CsLeReadSInt16((__int16 *)a4);
          WrdParagraphProperties::setFirstLineLeadingIndent((WrdParagraphProperties *)a2, v53);
        }
        else if (v15 == 42003)
        {
          v21 = CsLeReadUInt16((unsigned __int16 *)a4);
          WrdParagraphProperties::setSpaceBefore((WrdParagraphProperties *)a2, v21);
        }
        return;
      }
      switch(v15)
      {
        case 0x842Fu:
LABEL_78:
          v31 = CsLeReadUInt16((unsigned __int16 *)a4);
          WrdParagraphProperties::setHorizontalDistanceFromText((WrdParagraphProperties *)a2, v31);
          return;
        case 0x845Du:
          v58 = CsLeReadSInt16((__int16 *)a4);
          WrdParagraphProperties::setTrailingIndent((WrdParagraphProperties *)a2, v58);
          return;
        case 0x845Eu:
          v26 = CsLeReadSInt16((__int16 *)a4);
          v27 = (WrdParagraphProperties *)a2;
          goto LABEL_167;
      }
      return;
    }
    if (*(unsigned __int16 *)(a3 + 8) <= 0xC63Du)
    {
      if (v15 == 50701 || v15 == 50709)
      {
        WrdPapParser::applyTabSPRM(SizeOfSPRMParameter, (WrdParagraphProperties *)a2, a3, (unint64_t)a4, (unsigned __int8 *)a5, a6);
      }
      else if (v15 == 50738)
      {
        v24 = "Unimplemented sprm code 0xC632\n";
        v25 = 497;
LABEL_183:
        ChLogFunction(v24, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdPapParser.cpp", v25);
      }
      return;
    }
    switch(*(_WORD *)(a3 + 8))
    {
      case 0xC63E:
        if (*(_BYTE *)(a3 + 13) == 84)
        {
          AutoNumberListDescriptorReference = (WrdAutoNumberLevelDescriptor **)WrdParagraphProperties::getAutoNumberListDescriptorReference((WrdParagraphProperties *)a2);
          WrdPapParser::parseANLD80(a1, AutoNumberListDescriptorReference, a4, (const unsigned __int8 *)a5);
          return;
        }
        v24 = "Unimplemented length for sprm code 0xC63E\n";
        v25 = 538;
        goto LABEL_183;
      case 0xC63F:
        goto LABEL_88;
      case 0xC640:
      case 0xC641:
      case 0xC642:
      case 0xC643:
      case 0xC644:
      case 0xC646:
      case 0xC647:
      case 0xC648:
      case 0xC649:
      case 0xC64A:
      case 0xC64B:
      case 0xC64C:
        return;
      case 0xC645:
        NumberRevisionMarkDataReference = (WrdNumberRevisionMarkData *)WrdParagraphProperties::getNumberRevisionMarkDataReference((WrdParagraphProperties *)a2);
        WrdBaseParser::parseBuffer(a1, NumberRevisionMarkDataReference, a4, (unsigned __int8 *)a5);
        return;
      case 0xC64D:
        if (*(_BYTE *)(a3 + 13) == 10)
        {
          v52 = (WrdShading *)WrdParagraphProperties::getShadingReference((WrdParagraphProperties *)a2);
          WrdBaseParser::parseBuffer((uint64_t)a1, v52, a4, (const unsigned __int8 *)a5);
          return;
        }
        exception = __cxa_allocate_exception(4uLL);
        v65 = 2001;
        break;
      case 0xC64E:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
        goto LABEL_149;
      case 0xC64F:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
        goto LABEL_149;
      case 0xC650:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
        goto LABEL_149;
      case 0xC651:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
        goto LABEL_149;
      case 0xC652:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
        goto LABEL_149;
      case 0xC653:
        BorderLeftReference = (WrdBorder *)WrdParagraphProperties::getBorderBarReference((WrdParagraphProperties *)a2);
LABEL_149:
        WrdBaseParser::parseBuffer(a1, BorderLeftReference, a4, (const unsigned __int8 *)a5);
        return;
      default:
        if (v15 != 50799)
          return;
LABEL_88:
        WrdParagraphProperties::setRevisionMark((WrdParagraphProperties *)a2, *a4 == 1);
        if (a5 <= (unsigned __int16 *)(a4 + 1) || (unint64_t)((char *)a5 - (char *)(a4 + 1)) <= 3)
          goto LABEL_184;
        v33 = CsLeReadUInt16((unsigned __int16 *)(a4 + 1));
        WrdParagraphProperties::setAuthorIDForRevision((WrdParagraphProperties *)a2, v33);
        DttmRevisionMarkReference = (WrdDateTime *)WrdParagraphProperties::getDttmRevisionMarkReference((WrdParagraphProperties *)a2);
        WrdBaseParser::parseBuffer(a1, DttmRevisionMarkReference, a4 + 3, (unsigned __int8 *)a5);
        return;
    }
LABEL_186:
    *exception = v65;
  }
  if (*(unsigned __int16 *)(a3 + 8) <= 0x6423u)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x465Eu)
    {
      if (v15 == 18015)
      {
        v61 = CsLeReadSInt16((__int16 *)a4);
        WrdParagraphProperties::setLeadingIndent((WrdParagraphProperties *)a2, *(_DWORD *)(a2 + 252) + v61);
        if ((*(_DWORD *)(a2 + 252) & 0x80000000) == 0)
          return;
        v27 = (WrdParagraphProperties *)a2;
        v26 = 0;
LABEL_167:
        WrdParagraphProperties::setLeadingIndent(v27, v26);
        return;
      }
      if (v15 == 25618)
      {
        LineSpaceReference = (WrdLineSpaceDescriptor *)WrdParagraphProperties::getLineSpaceReference((WrdParagraphProperties *)a2);
        WrdBaseParser::parseBuffer(a1, LineSpaceReference, a4, (unsigned __int8 *)a5);
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x461C:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
          goto LABEL_129;
        case 0x461D:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
          goto LABEL_129;
        case 0x461E:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
          goto LABEL_129;
        case 0x461F:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
          goto LABEL_129;
        case 0x4620:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
          goto LABEL_129;
        case 0x4621:
          BorderBottomReference = (WrdBorder *)WrdParagraphProperties::getBorderBarReference((WrdParagraphProperties *)a2);
LABEL_129:
          WrdBaseParser::parseBRC10(a1, BorderBottomReference, (unsigned __int16 *)a4, a5);
          break;
        case 0x4622:
          goto LABEL_78;
        case 0x4623:
        case 0x4624:
        case 0x4625:
        case 0x4626:
        case 0x4627:
        case 0x4628:
          return;
        case 0x4629:
          goto LABEL_46;
        default:
          if (v15 == 17936)
          {
            v35 = CsLeReadSInt16((__int16 *)a4);
            if (v35)
            {
              WrdParagraphProperties::setLeftIndent((WrdParagraphProperties *)a2, *(_DWORD *)(a2 + 268) + v35);
              if ((*(_DWORD *)(a2 + 268) & 0x80000000) != 0)
              {
                v36 = (WrdParagraphProperties *)a2;
                v37 = 0;
LABEL_119:
                WrdParagraphProperties::setLeftIndent(v36, v37);
              }
            }
          }
          break;
      }
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a3 + 8) <= 0x6628u)
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0x6424:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderTopReference((WrdParagraphProperties *)a2);
          goto LABEL_154;
        case 0x6425:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderLeftReference((WrdParagraphProperties *)a2);
          goto LABEL_154;
        case 0x6426:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderBottomReference((WrdParagraphProperties *)a2);
          goto LABEL_154;
        case 0x6427:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderRightReference((WrdParagraphProperties *)a2);
          goto LABEL_154;
        case 0x6428:
          BorderRightReference = (WrdBorder *)WrdParagraphProperties::getBorderBetweenReference((WrdParagraphProperties *)a2);
LABEL_154:
          WrdBaseParser::parseBRC80(a1, BorderRightReference, (unsigned __int16 *)a4, a5);
          break;
        default:
          if (v15 == 25707)
            goto LABEL_83;
          break;
      }
      return;
    }
    if (*(unsigned __int16 *)(a3 + 8) > 0x6648u)
    {
      if (v15 == 26185)
      {
        SInt32 = CsLeReadSInt32((unsigned int *)a4);
      }
      else
      {
        if (v15 != 26186)
        {
          if (v15 == 26196)
          {
            v28 = (CsColour *)(*(_QWORD *)(WrdParagraphProperties::getAutoNumberListDescriptorReference((WrdParagraphProperties *)a2)
                                         + 8)
                             + 8);
            WrdBaseParser::parseBuffer(a1, v28, a4, (const unsigned __int8 *)a5);
          }
          return;
        }
        SInt32 = *(_DWORD *)(a2 + 244) + CsLeReadSInt32((unsigned int *)a4);
      }
      WrdParagraphProperties::setTableNestingLevel((WrdParagraphProperties *)a2, SInt32);
      v60 = SInt32 > 0;
LABEL_180:
      WrdParagraphProperties::setParagraphInTable((WrdParagraphProperties *)a2, v60);
      return;
    }
    if (v15 - 26181 < 2)
    {
LABEL_83:
      *a7 = CsLeReadSInt32((unsigned int *)a4);
    }
    else if (v15 == 26153)
    {
LABEL_46:
      BorderTopReference = (WrdBorder *)WrdParagraphProperties::getBorderBarReference((WrdParagraphProperties *)a2);
LABEL_134:
      WrdBaseParser::parseBRC70(a1, BorderTopReference, a4, (unsigned __int8 *)a5);
    }
  }
}

WrdParagraphProperties *WrdParagraphProperties::setKeepFollowingParagraph(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x1000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFEF | (16 * (a2 & 1));
  return this;
}

uint64_t WrdParagraphProperties::clearAllRevisionAttributes(WrdParagraphProperties *this)
{
  __int16 v2;

  v2 = *((_WORD *)this + 12);
  *(_DWORD *)((char *)this + 294) &= ~0x4000000u;
  *((_WORD *)this + 146) = 0;
  *((_WORD *)this + 12) = v2 & 0xF1FF;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14));
  *((_WORD *)this + 12) &= ~0x1000u;
  return WrdNumberRevisionMarkData::reset(*((WrdNumberRevisionMarkData **)this + 15));
}

WrdParagraphProperties *WrdParagraphProperties::setListLevel(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 8uLL;
  *((_BYTE *)this + 300) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setIndexToList(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x10uLL;
  *((_WORD *)this + 71) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setSpaceBefore(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x40000uLL;
  *((_DWORD *)this + 68) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setSpaceAfter(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x80000uLL;
  *((_DWORD *)this + 69) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setOutlineLevel(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x80000000000uLL;
  *((_BYTE *)this + 299) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setBold(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 2uLL;
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setCaps(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x20000000uLL;
  *(_DWORD *)(result + 188) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setKerning(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x10000000000000uLL;
  this->var63 = a2;
  return this;
}

uint64_t WrdCharacterProperties::setBoldBi(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x800000000uLL;
  *(_DWORD *)(result + 208) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForBiText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x40000000000uLL;
  this->var46 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFontSizeForBiText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x4000000uLL;
  this->var66 = a2;
  return this;
}

uint64_t WrdCharacterProperties::setItalic(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 4uLL;
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setItalicBi(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x1000000000uLL;
  *(_DWORD *)(result + 212) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setSuperSubscript(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x80000uLL;
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setUnderline(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x100000uLL;
  *(_DWORD *)(result + 140) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setColor97(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x20000uLL;
  *(_DWORD *)(result + 128) = a2;
  return result;
}

uint64_t WrdCharacterProperties::getColorReference(WrdCharacterProperties *this)
{
  *(_QWORD *)&this->var2 |= 0x10000uLL;
  return (uint64_t)&this->var2 + 14;
}

uint64_t WrdParagraphProperties::setJustificationV8(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x40uLL;
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t WrdParagraphProperties::setJustification(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x20uLL;
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t WrdCharacterProperties::setUsePageSetupLinePitch(WrdCharacterProperties *this, char a2)
{
  uint64_t result;
  int v3;
  __int16 v4;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  v4 = *(_WORD *)(result + 4);
  *(_DWORD *)result = v3;
  *(_WORD *)(result + 4) = v4 | 0x400;
  *(_DWORD *)(result + 316) = *(_DWORD *)(result + 316) & 0xEFFFFFFF | ((a2 & 1) << 28);
  return result;
}

void WrdPapParser::applyTabSPRM(int a1, WrdParagraphProperties *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, _WORD *a6)
{
  int v7;
  BOOL v8;
  uint64_t v10;
  unsigned int v11;
  _WORD *v12;
  unsigned __int8 *Short;
  __int16 v15;
  __int16 v16;
  __int16 InsertionIndexForTabsToBeDeleted;
  unsigned __int8 *v18;
  __int16 v19;
  uint64_t v20;
  WrdTabDescriptor *v21;
  __int16 *v22;
  uint64_t v23;
  __int16 v24;
  __int16 InsertionIndexForTabsToBeAdded;
  int SInt16;
  unsigned int v27;
  __int16 v28;
  __int16 v30;
  uint64_t v31;
  __int16 v32[2];

  if (a4)
  {
    v7 = *(unsigned __int16 *)(a3 + 8);
    v8 = v7 == 50709 || v7 == 50701;
    if (v8 && a4 < (unint64_t)a5 && (uint64_t)&a5[-a4] >= 1)
    {
      v10 = *(unsigned __int8 *)a4;
      v11 = WrdParagraphProperties::s_bMaximumNumberOfTabStops;
      if (v10 <= WrdParagraphProperties::s_bMaximumNumberOfTabStops)
      {
        v12 = a6;
        Short = (unsigned __int8 *)(a4 + 1);
        v31 = a3;
        if (*(_BYTE *)a4)
        {
          v15 = 0;
          v16 = 0;
          *(_DWORD *)v32 = 0;
          InsertionIndexForTabsToBeDeleted = -1;
          v18 = &Short[2 * v10];
          do
          {
            Short = (unsigned __int8 *)readShort(Short, a5, &v32[1]);
            if (*(unsigned __int16 *)(v31 + 8) == 50709)
            {
              v18 = (unsigned __int8 *)readShort(v18, a5, v32);
              v15 = v32[0];
            }
            v19 = v32[1];
            if (!WrdParagraphProperties::deleteTabStopFromTabsToBeAdded(a2, v32[1], v15))
            {
              if (v16)
                ++InsertionIndexForTabsToBeDeleted;
              else
                InsertionIndexForTabsToBeDeleted = WrdParagraphProperties::findInsertionIndexForTabsToBeDeleted(a2, v19);
              WrdParagraphProperties::insertTabStopInTabsToBeDeleted(a2, InsertionIndexForTabsToBeDeleted, v19, v15);
            }
            ++v16;
          }
          while ((int)v10 > v16);
          v12 = a6;
          a3 = v31;
          v11 = WrdParagraphProperties::s_bMaximumNumberOfTabStops;
        }
        else
        {
          v18 = (unsigned __int8 *)(a4 + 1);
        }
        LOWORD(v20) = 0;
        if (a5 <= v18 || a5 - v18 < 1)
          goto LABEL_40;
        v20 = *v18;
        if (v20 > v11)
          return;
        if (!*v18)
          goto LABEL_40;
        v30 = v10;
        v21 = (WrdTabDescriptor *)operator new(0x10uLL);
        WrdTabDescriptor::WrdTabDescriptor(v21);
        v22 = (__int16 *)(v18 + 1);
        v23 = (uint64_t)&v18[2 * v20 + 1];
        if (v23 + v20 <= (unint64_t)a5)
        {
          v24 = 0;
          InsertionIndexForTabsToBeAdded = -1;
          do
          {
            SInt16 = CsLeReadSInt16(v22);
            v27 = *(unsigned __int8 *)(v23 + v24);
            *((_DWORD *)v21 + 2) = v27 & 7;
            *((_DWORD *)v21 + 3) = (v27 >> 3) & 7;
            if (v24)
              ++InsertionIndexForTabsToBeAdded;
            else
              InsertionIndexForTabsToBeAdded = WrdParagraphProperties::findInsertionIndexForTabsToBeAdded(a2, SInt16);
            WrdParagraphProperties::insertTabStopInTabsToBeAdded(a2, InsertionIndexForTabsToBeAdded, SInt16, v21);
            ++v22;
            ++v24;
          }
          while ((int)v20 > v24);
        }
        else
        {
          LOWORD(v20) = 0;
          if (!v21)
          {
            LOWORD(v20) = 0;
LABEL_39:
            LOWORD(v10) = v30;
            a3 = v31;
LABEL_40:
            if (*(unsigned __int16 *)(a3 + 8) == 50709)
              v28 = (4 * v10) | 2;
            else
              v28 = 2 * v10 + 2;
            *v12 = v28 + 3 * v20;
            return;
          }
        }
        (*(void (**)(WrdTabDescriptor *))(*(_QWORD *)v21 + 8))(v21);
        goto LABEL_39;
      }
    }
  }
}

void sub_22A173B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::findInsertionIndexForTabsToBeAdded(WrdParagraphProperties *this, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *((__int16 *)this + 68);
  if (v2 <= 63)
  {
    if ((__int16)v2 < 1)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      while (*(__int16 *)(*((_QWORD *)this + 25) + 2 * v3) <= a2)
      {
        if ((__int16)++v3 >= *((__int16 *)this + 68))
        {
          LOWORD(v3) = *((_WORD *)this + 68);
          return (__int16)v3;
        }
      }
    }
  }
  else
  {
    LOWORD(v3) = -1;
  }
  return (__int16)v3;
}

void WrdParagraphProperties::insertTabStopInTabsToBeAdded(WrdParagraphProperties *this, int a2, __int16 a3, const WrdTabDescriptor *a4)
{
  int v6;
  int v9;
  uint64_t v10;

  if (a2 != -1)
  {
    v6 = *((__int16 *)this + 68);
    if (v6 >= a2 && v6 <= 63)
    {
      if (v6 > a2)
      {
        LOWORD(v9) = v6 - 1;
        do
        {
          v10 = (__int16)v9 + 1;
          *(_WORD *)(*((_QWORD *)this + 25) + 2 * v10) = *(_WORD *)(*((_QWORD *)this + 25) + 2 * (__int16)v9);
          WrdTabDescriptor::operator=(*(_QWORD *)(*((_QWORD *)this + 22) + 8 * v10), *(_QWORD *)(*((_QWORD *)this + 22) + 8 * (__int16)v9));
          v9 = (__int16)(v9 - 1);
        }
        while (v9 >= a2 && v9 < 63);
      }
      *(_WORD *)(*((_QWORD *)this + 25) + 2 * a2) = a3;
      WrdTabDescriptor::operator=(*(_QWORD *)(*((_QWORD *)this + 22) + 8 * a2), (uint64_t)a4);
      ++*((_WORD *)this + 68);
      *((_QWORD *)this + 2) |= 0x100uLL;
    }
  }
}

WrdParagraphProperties *WrdParagraphProperties::setLeftIndent(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x4000000000000000uLL;
  *((_DWORD *)this + 67) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setFirstLineLeftIndent(WrdParagraphProperties *this, int a2)
{
  *((_WORD *)this + 12) |= 1u;
  *((_DWORD *)this + 65) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setLeadingIndent(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x1000000000000000uLL;
  *((_DWORD *)this + 63) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setFirstLineLeadingIndent(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x8000000000000000;
  *((_DWORD *)this + 64) = a2;
  return this;
}

void sub_22A174128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Unwind_Resume(a1);
}

void sub_22A1741F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A174290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A17446C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A17450C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A174580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A174618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1746B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1748C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1749BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A174AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A17528C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A17541C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A17550C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A175EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A176140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1762BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1763F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WrdTabDescriptor::WrdTabDescriptor(WrdTabDescriptor *this, const WrdTabDescriptor *a2)
{
  *(_QWORD *)this = &off_24F3B3FA0;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
}

void sub_22A176698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1767DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A176918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A176990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WrdStyleSheet::~WrdStyleSheet(WrdStyleSheet *this)
{
  WrdStyleSheet::~WrdStyleSheet(this);
  JUMPOUT(0x22E2DD408);
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_24F3B3F60;
  v2 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    v4 = (v2 >> 3);
    do
    {
      v5 = *((_QWORD *)this + 3);
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v5 = *((_QWORD *)this + 3);
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v4 != v3);
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 2) = 0;
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
}

void WrdStyle::~WrdStyle(WrdStyle *this)
{
  WrdStyle::~WrdStyle(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B3F20;
  WrdStyle::reset(this);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  CsString::~CsString((CsString *)((char *)this + 8));
}

void sub_22A176BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A176C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WrdBinaryReader::read(uint64_t a1, int *a2)
{
  int v2;
  unsigned int *FCLCB;
  int *v6;
  SsrwOOStream *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *exception;

  v2 = *a2;
  *(_DWORD *)(a1 + 188) = *a2;
  if ((v2 & 0xFFFFFFFE) != 4)
  {
    *a2 = 0;
    FCLCB = (unsigned int *)WrdFileInformationBlock::getFCLCB(*(_QWORD *)(a1 + 32) + 160, 50);
    if (FCLCB[1])
    {
      v6 = (int *)FCLCB;
      v7 = *(SsrwOOStream **)(*(_QWORD *)(a1 + 32) + 128);
      if (*(_DWORD *)(a1 + 624) != 24)
      {
        (*((void (**)(_QWORD, _QWORD, _QWORD))v7->var0 + 2))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128), *FCLCB, 0);
        v12 = 1;
LABEL_14:
        *a2 = v12;
LABEL_15:
        WrdEshReader::start((WrdEshReader *)(a1 + 40), v7);
        *(_DWORD *)(a1 + 624) = 24;
        return;
      }
      v8 = *(_QWORD *)(a1 + 48);
      if (!v8)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 1004;
      }
      v9 = *v6;
      if (v9 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8))
        goto LABEL_15;
      v10 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 8))(v7);
      v11 = v6[1] + *v6;
      if (v11 > (*((unsigned int (**)(SsrwOOStream *))v7->var0 + 5))(v7))
      {
        if (v10 == 1)
          v12 = 3;
        else
          v12 = 0;
        if (!v10)
          v12 = 2;
        goto LABEL_14;
      }
      EshBinaryReader::finish((EshBinaryReader *)(a1 + 40));
      *(_DWORD *)(a1 + 624) = 0;
    }
    *a2 = 0;
  }
}

uint64_t WrdBookmarkTable::getBookmark(WrdBookmarkTable *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
}

void sub_22A176FA8(void *a1, int a2)
{
  unsigned int *v3;
  void *v4;

  if (a2 == 3)
  {
    v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v4, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A176F74);
}

void sub_22A17704C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A176F74);
  }

  _Unwind_Resume(exc_buf);
}

void WrdListFormatTable::WrdListFormatTable(WrdListFormatTable *this)
{
  *(_QWORD *)this = &off_24F3B3630;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

WrdDocumentFileRecord *WrdBinaryReader::read(WrdParser **this, WrdListFormatTable *a2)
{
  WrdDocumentFileRecord *result;
  unsigned int v5;
  unsigned __int16 *ListToStyleIndex;
  uint64_t v7;
  uint64_t v8;

  WrdParser::parse(this[4], a2);
  result = this[27];
  if (((*((_QWORD *)result + 2) - *((_QWORD *)result + 1)) & 0x3FFFFFFFCLL) != 0)
  {
    v5 = 0;
    do
    {
      ListToStyleIndex = (unsigned __int16 *)WrdDocumentFileRecord::getListToStyleIndex(result, v5);
      v7 = *ListToStyleIndex;
      v8 = *((_QWORD *)a2 + 1);
      if (((unint64_t)(*((_QWORD *)a2 + 2) - v8) >> 3) <= v7)
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_WORD *)(*(_QWORD *)(v8 + 8 * v7) + 48) = ListToStyleIndex[1];
      ++v5;
      result = this[27];
    }
    while (v5 < ((*((_QWORD *)result + 2) - *((_QWORD *)result + 1)) >> 2));
  }
  return result;
}

void WrdParser::parse(WrdParser *this, WrdListFormatTable *a2)
{
  unint64_t started;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WrdEmbeddedTrueTypeFontTable *v13;
  int v14;
  _BOOL4 v15;
  BOOL v16;
  WrdListLevelFormat *v17;
  char v19;
  uint64_t v20;
  uint64_t v21;

  started = WrdParser::startFCLCB(this, 0x49u);
  CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  if (HIDWORD(started))
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16));
    if (v5 >= 1)
    {
      v6 = v5;
      do
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), 31);
        WrdParser::parse(this, (WrdListFormat *)v7);
        if ((*(_WORD *)(v7 + 50) & 1) != 0)
          v8 = 1;
        else
          v8 = WrdListFormat::s_bMaxNumberOfLevels;
        *(_BYTE *)(v7 + 52) = v8;
        WrdListFormatTable::append((void **)a2, (WrdListFormat *)v7);
        --v6;
      }
      while (v6);
      v9 = *((_DWORD *)a2 + 4) - *((_DWORD *)a2 + 2);
      v10 = (unsigned __int16)(v9 >> 3);
      if ((unsigned __int16)(v9 >> 3))
      {
        v11 = *((_QWORD *)a2 + 1);
        if (((*((_QWORD *)a2 + 2) - v11) & 0x7FFFFFFF8) == 0)
          goto LABEL_24;
        v12 = 0;
LABEL_11:
        v13 = *(WrdEmbeddedTrueTypeFontTable **)(v11 + 8 * v12);
        if (!*((_BYTE *)v13 + 52))
        {
          if (v10 <= ++v12)
            return;
          goto LABEL_23;
        }
        v14 = 0;
        while (1)
        {
          v15 = WrdParser::checkForValidListLevels(this);
          if (!v15)
            break;
          v16 = v15;
          v17 = (WrdListLevelFormat *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), 35);
          WrdParser::parse(this, v17);
          WrdEmbeddedTrueTypeFontTable::append(v13, (WrdEmbeddedTrueTypeFont *)v17);
          if (++v14 >= *((unsigned __int8 *)v13 + 52) || !v16)
          {
            ++v12;
            v19 = !v16;
            if (v10 <= v12)
              v19 = 1;
            if ((v19 & 1) != 0)
              return;
LABEL_23:
            v11 = *((_QWORD *)a2 + 1);
            if (v12 >= ((unint64_t)(*((_QWORD *)a2 + 2) - v11) >> 3))
LABEL_24:
              std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
            goto LABEL_11;
          }
        }
        if (v10 > (unsigned __int16)v12)
        {
          v20 = *((_QWORD *)a2 + 2);
          do
          {
            v21 = *(_QWORD *)(v20 - 8);
            if (v21)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              v20 = *((_QWORD *)a2 + 2);
            }
            *(_QWORD *)(v20 - 8) = 0;
            v20 = *((_QWORD *)a2 + 2) - 8;
            *((_QWORD *)a2 + 2) = v20;
            LODWORD(v12) = v12 + 1;
          }
          while (v10 > (unsigned __int16)v12);
        }
      }
    }
  }
}

void sub_22A177350(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *CsSimpleHeapVector<XlRecord>::clear(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = result[1];
  v2 = (unint64_t)(v1 - *result) >> 3;
  if ((_DWORD)v2)
  {
    v3 = result;
    do
    {
      result = *(_QWORD **)(v1 - 8);
      if (result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v1 = v3[1];
      }
      *(_QWORD *)(v1 - 8) = 0;
      v1 = v3[1] - 8;
      v3[1] = v1;
      LODWORD(v2) = v2 - 1;
    }
    while ((_DWORD)v2);
  }
  return result;
}

void WrdListFormat::WrdListFormat(WrdListFormat *this)
{
  *(_QWORD *)this = &off_24F3B3570;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 12;
  *((_WORD *)this + 25) &= 0xE000u;
  *((_BYTE *)this + 52) = 0;
}

_QWORD *WrdListFormat::init(_QWORD *this)
{
  _QWORD *v1;

  if (!this[4])
  {
    v1 = this;
    this = operator new[](0x12uLL);
    v1[4] = this;
    *this = 0;
    this[1] = 0;
    *((_WORD *)this + 8) = 0;
  }
  return this;
}

int8x8_t WrdParser::parse(WrdParser *this, WrdListFormat *a2)
{
  int v4;
  unsigned int v5;
  int8x8_t v6;
  int v7;
  unsigned int v8;
  int8x8_t result;

  *((_DWORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  *((_DWORD *)a2 + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  if (WrdListFormat::s_bMaxNumberOfLevels)
  {
    v4 = 0;
    do
      *(_WORD *)(*((_QWORD *)a2 + 4) + 2 * (__int16)v4++) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16)
                                                                                                + 72))(*((_QWORD *)this + 16));
    while (WrdListFormat::s_bMaxNumberOfLevels > (__int16)v4);
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v6 = vand_s8((int8x8_t)vdup_n_s16(v5), (int8x8_t)0x8000400020001);
  *((_WORD *)a2 + 25) = v6.i16[0] | v6.i16[2] | ((v6.i32[0] | v6.i32[1]) >> 16) | v5 & 0x10 | *((_WORD *)a2 + 25) & 0xFFE0;
  v7 = *((_DWORD *)this + 38);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  if (v7 >= 9)
  {
    result = vand_s8((int8x8_t)vshl_n_s16(vdup_n_s16(v8), 5uLL), (int8x8_t)0x400020001000800);
    *((_WORD *)a2 + 25) = (result.i16[0] | result.i16[2] | ((result.i32[0] | result.i32[1]) >> 16) | *((_WORD *)a2 + 25) & 0xE01F | (32 * v8) & 0x60 | (32 * v8) & 0x80)
                        + ((32 * v8) & 0x1000);
  }
  return result;
}

WrdListFormat *WrdListFormatTable::append(void **this, WrdListFormat *a2)
{
  WrdListFormat *result;
  WrdListFormat *v3;

  v3 = a2;
  CsSimpleHeapVector<XlRecord>::pushBack(this + 1, (uint64_t *)&v3);
  result = v3;
  if (v3)
    return (WrdListFormat *)(*(uint64_t (**)(WrdListFormat *))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void sub_22A1775D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void CsSimpleHeapVector<XlRecord>::pushBack(void **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v7 = (unint64_t)a1[2];
  v5 = (uint64_t)(a1 + 2);
  v6 = v7;
  v8 = *(_QWORD **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v8 - (_BYTE *)*a1;
    v11 = (v6 - (unint64_t)*a1) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>(v5, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = v2;
    v9 = v17 + 8;
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v8 = v2;
    v9 = v8 + 1;
  }
  a1[1] = v9;
  *a2 = 0;
}

BOOL WrdParser::checkForValidListLevels(WrdParser *this)
{
  unsigned int v2;
  int v3;
  unsigned int __n;
  _BYTE __n_6[18];

  *(_QWORD *)&__n_6[10] = *MEMORY[0x24BDAC8D0];
  __n = 10;
  (*(void (**)(_QWORD, _BYTE *, unsigned int *))(**((_QWORD **)this + 16) + 56))(*((_QWORD *)this + 16), __n_6, &__n);
  v2 = __n;
  v3 = memcmp(__n_6, "          ", __n);
  if (v3)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), -v2, 1);
  else
    ChLogFunction("Spaces appearing where the list level should!", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1461);
  return v3 != 0;
}

void WrdListLevelFormat::WrdListLevelFormat(WrdListLevelFormat *this, WrdParagraphProperties *a2, WrdCharacterProperties *a3)
{
  this->var12 = 0;
  *((_BYTE *)this + 80) &= 0xE0u;
  this->var3 = 0;
  this->var4 = 0;
  *(_QWORD *)&this->var5 = 0;
  this->var7 = 0;
  *(_QWORD *)&this->var9 = 0;
  this->var11 = 0;
  *(_WORD *)&this->var18 = 0;
  *(_QWORD *)this->var8 = 0;
  this->var8[8] = 0;
  this->var0 = (void **)&off_24F3B3670;
  this->var1 = a2;
  this->var2 = a3;
}

unsigned __int16 *WrdParser::parse(WrdParser *this, WrdListLevelFormat *a2)
{
  unsigned int v4;
  uint64_t i;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 *result;
  unint64_t v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  a2->var6 = v4 & 3;
  *((_BYTE *)a2 + 80) = *((_BYTE *)a2 + 80) & 0xE0 | (v4 >> 2) & 0x1F;
  for (i = 44; i != 53; ++i)
    *((_BYTE *)&a2->var0 + i) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  a2->var7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  a2->var9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  v8 = **((_QWORD **)this + 16);
  if (*((int *)this + 38) < 9)
  {
    (*(void (**)(void))(v8 + 16))();
  }
  else
  {
    a2->var18 = (*(uint64_t (**)(void))(v8 + 64))();
    *((_BYTE *)a2 + 82) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  }
  WrdParser::parseGrpprl(this, *((_QWORD *)this + 16), v7, 0, 0, 0, a2->var1, 0, 0, 0, 0, 0, 0, 0, 0);
  WrdParser::parseGrpprl(this, *((_QWORD *)this + 16), v6, 0, 0, 0, 0, a2->var2, 0, 0, 0, 0, 0, 0, 0);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 128))(*((_QWORD *)this + 16));
  result = WrdListLevelFormat::setNumberTextLength(a2, v9);
  if (a2->var11)
  {
    v11 = 0;
    do
    {
      result = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 128))(*((_QWORD *)this + 16));
      a2->var12[v11++] = (unsigned __int16)result;
    }
    while (v11 < a2->var11);
  }
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForASCIIText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x2000uLL;
  this->var43 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForOtherText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x8000uLL;
  this->var45 = a2;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setCharacterTypeIDHint(WrdCharacterProperties *this, unsigned __int8 a2)
{
  *(_QWORD *)&this->var2 |= 0x2000000000000uLL;
  this->var107 = a2;
  return this;
}

unsigned __int16 *WrdListLevelFormat::setNumberTextLength(WrdListLevelFormat *this, unsigned int a2)
{
  unsigned __int16 *result;

  result = this->var12;
  if (result)
    result = (unsigned __int16 *)MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  this->var12 = 0;
  if (a2)
  {
    result = (unsigned __int16 *)operator new[](2 * a2);
    this->var12 = result;
  }
  this->var11 = a2;
  return result;
}

void sub_22A177B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A177C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A177D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A178024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void WrdListFormatTable::~WrdListFormatTable(void **this)
{
  *this = &off_24F3B3630;
  CsSimpleHeapVector<WrdListFormat>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

{
  *this = &off_24F3B3630;
  CsSimpleHeapVector<WrdListFormat>::~CsSimpleHeapVector(this + 1);
}

void **CsSimpleHeapVector<WrdListFormat>::~CsSimpleHeapVector(void **a1)
{
  void *v2;

  CsSimpleHeapVector<XlRecord>::clear(a1);
  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void WrdListFormat::~WrdListFormat(WrdListFormat *this)
{
  WrdListFormat::~WrdListFormat(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B3570;
  WrdListFormat::cleanup(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t WrdListFormat::cleanup(WrdListFormat *this)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  result = *((_QWORD *)this + 4);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 1);
  if (((*((_QWORD *)this + 2) - v3) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      result = *(_QWORD *)(v3 + 8 * v4);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v3 = *((_QWORD *)this + 1);
      }
      *(_QWORD *)(v3 + 8 * v4++) = 0;
      v3 = *((_QWORD *)this + 1);
    }
    while (v4 < ((unint64_t)(*((_QWORD *)this + 2) - v3) >> 3));
  }
  *((_QWORD *)this + 2) = v3;
  return result;
}

void WrdListLevelFormat::~WrdListLevelFormat(WrdListLevelFormat *this)
{
  WrdListLevelFormat::~WrdListLevelFormat(this);
  JUMPOUT(0x22E2DD408);
}

{
  unsigned __int16 *var12;
  WrdParagraphProperties *var1;
  WrdCharacterProperties *var2;

  this->var0 = (void **)&off_24F3B3670;
  var12 = this->var12;
  if (var12)
    MEMORY[0x22E2DD3F0](var12, 0x1000C80BDFB0063);
  this->var12 = 0;
  var1 = this->var1;
  if (var1)
    (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)var1 + 8))(var1);
  this->var1 = 0;
  var2 = this->var2;
  if (var2)
    (*((void (**)(WrdCharacterProperties *))var2->var0 + 1))(var2);
  this->var2 = 0;
}

void sub_22A1784B0(void *a1, int a2)
{
  unsigned int *v3;
  void *v4;

  if (a2 == 3)
  {
    v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v4, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A17848CLL);
}

void sub_22A178524(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A17848CLL);
  }

  _Unwind_Resume(exc_buf);
}

void WrdListFormatOverrideTable::WrdListFormatOverrideTable(WrdListFormatOverrideTable *this)
{
  *(_QWORD *)this = &off_24F3B35F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

const char *WrdBinaryReader::read(WrdParser **this, WrdListFormatOverrideTable *a2)
{
  return WrdParser::parse(this[4], a2);
}

const char *WrdParser::parse(WrdParser *this, WrdListFormatOverrideTable *a2)
{
  unint64_t started;
  int v5;
  unint64_t v6;
  const char *result;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  XlChartDataSeries *EmbeddedFontReference;
  unsigned __int8 v13;
  WrdListLevelFormatOverride *DefaultFormat;
  WrdListLevelFormat *ClientVisitor;
  _DWORD *exception;

  started = WrdParser::startFCLCB(this, 0x4Au);
  v5 = started;
  v6 = HIDWORD(started);
  result = (const char *)WrdAnnotationDateTimeTable::clear(a2);
  if ((_DWORD)v6)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
    if (v8 >= 1)
    {
      v9 = v8;
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16)) < 16 * v8)
        goto LABEL_21;
      WrdParser::parseListFormatOverrides(this, a2, v9);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) > (int)v6 + v5)
        goto LABEL_21;
    }
    v10 = v6 + v5;
    if ((int)((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3) >= 1)
    {
      v11 = 0;
      while (1)
      {
        EmbeddedFontReference = (XlChartDataSeries *)WrdEmbeddedTTFRecordTable::getEmbeddedFontReference(a2, v11);
        if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) > v10)
          goto LABEL_21;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
        if (((*((_DWORD *)EmbeddedFontReference + 8) - *((_DWORD *)EmbeddedFontReference + 6)) & 0x7F8) != 0)
          break;
LABEL_16:
        if ((int)++v11 >= (int)((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3))
          goto LABEL_17;
      }
      v13 = 0;
      while (1)
      {
        DefaultFormat = (WrdListLevelFormatOverride *)XlChartDataSeries::getDefaultFormat(EmbeddedFontReference, v13);
        if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) > v10)
          break;
        WrdParser::parse(this, DefaultFormat);
        if (WrdListLevelFormatOverride::needsListLevel(DefaultFormat))
        {
          if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) > v10)
            break;
          ClientVisitor = (WrdListLevelFormat *)EshDataModelVisitor::getClientVisitor((EshDataModelVisitor *)DefaultFormat);
          WrdParser::parse(this, ClientVisitor);
        }
        if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) > v10)
          break;
        if (++v13 >= ((*((_DWORD *)EmbeddedFontReference + 8)
                                                                   - *((_DWORD *)EmbeddedFontReference + 6)) >> 3))
          goto LABEL_16;
      }
LABEL_21:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 2001;
    }
LABEL_17:
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16)) > v10)
      goto LABEL_21;
    result = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16));
    if ((_DWORD)result != v10)
      return ChLogFunction("Wrong number of bytes reading WrdListFormatOverrideTable\n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1532);
  }
  return result;
}

void WrdParser::parseListFormatOverrides(WrdParser *this, WrdListFormatOverrideTable *a2, int a3)
{
  int v3;
  WrdListFormatOverride *v6;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v6 = (WrdListFormatOverride *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 16))(*((_QWORD *)this + 35), 32);
      WrdParser::parse(this, v6);
      WrdEmbeddedTrueTypeFontTable::append(a2, v6);
      --v3;
    }
    while (v3);
  }
}

void sub_22A178884(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void WrdListLevelFormatOverride::WrdListLevelFormatOverride(WrdListLevelFormatOverride *this, WrdListLevelFormat *a2)
{
  this->var2 = 0;
  this->var3 = 0;
  *(_WORD *)((char *)this + 21) &= 0xFC00u;
  this->var0 = (void **)&off_24F3B36B0;
  this->var1 = a2;
}

void WrdListFormatOverride::WrdListFormatOverride(WrdListFormatOverride *this, WrdListLevelFormatOverride *a2)
{
  *((_DWORD *)this + 4) = -1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_DWORD *)((char *)this + 47) = 0;
  *(_QWORD *)this = &off_24F3B35B0;
  *((_QWORD *)this + 1) = a2;
}

uint64_t WrdParser::parse(WrdParser *this, WrdListFormatOverride *a2)
{
  unsigned int v4;
  uint64_t v5;

  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 8, 1);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  WrdListFormatOverride::setNumberOfLevelsOverridden(a2, v4);
  v5 = **((_QWORD **)this + 16);
  if (*((int *)this + 38) < 9)
  {
    (*(void (**)(void))(v5 + 16))();
  }
  else
  {
    *((_BYTE *)a2 + 48) = (*(uint64_t (**)(void))(v5 + 64))();
    *((_BYTE *)a2 + 50) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
}

void WrdListFormatOverride::setNumberOfLevelsOverridden(WrdListFormatOverride *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  WrdListFormatOverride::cleanup(this);
  *((_BYTE *)this + 49) = a2;
  if (a2)
  {
    v4 = 0;
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
      v6 = v5;
      v8 = (uint64_t *)*((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 5);
      if ((unint64_t)v8 >= v7)
      {
        v10 = *((_QWORD *)this + 3);
        v11 = (unint64_t)v8 - v10;
        v12 = (v7 - v10) >> 3;
        v13 = 2 * v12;
        if (2 * (int)v12 <= (v11 >> 3) + 1)
          v13 = (v11 >> 3) + 1;
        if (v12 >= 0x7FFFFFFF)
          v14 = 0xFFFFFFFFLL;
        else
          v14 = v13;
        if ((_DWORD)v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 40, v14);
          v17 = v16;
        }
        else
        {
          v15 = 0;
          v17 = 0;
        }
        v18 = (uint64_t *)&v15[v11 & 0x7FFFFFFF8];
        *v18 = v6;
        v9 = v18 + 1;
        v20 = (char *)*((_QWORD *)this + 3);
        v19 = (char *)*((_QWORD *)this + 4);
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v21;
          }
          while (v19 != v20);
          v19 = (char *)*((_QWORD *)this + 3);
        }
        *((_QWORD *)this + 3) = v18;
        *((_QWORD *)this + 4) = v9;
        *((_QWORD *)this + 5) = &v15[8 * v17];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v8 = v5;
        v9 = v8 + 1;
      }
      *((_QWORD *)this + 4) = v9;
      ++v4;
    }
    while (v4 < a2);
  }
}

void sub_22A178AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WrdListFormatOverride::cleanup(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = this[3];
  if (((this[4] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[3];
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = v1[3];
    }
    while (v3 < ((unint64_t)(v1[4] - v2) >> 3));
  }
  v1[4] = v2;
  return this;
}

void sub_22A178C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void WrdListFormatOverrideTable::~WrdListFormatOverrideTable(WrdListFormatOverrideTable *this)
{
  WrdListFormatOverrideTable::~WrdListFormatOverrideTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B35F0;
  WrdAnnotationDateTimeTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdListFormatOverride::~WrdListFormatOverride(WrdListFormatOverride *this)
{
  WrdListFormatOverride::~WrdListFormatOverride(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F3B35B0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  WrdListFormatOverride::cleanup(this);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

void WrdListLevelFormatOverride::~WrdListLevelFormatOverride(WrdListLevelFormatOverride *this)
{
  WrdListLevelFormat *var1;

  this->var0 = (void **)&off_24F3B36B0;
  var1 = this->var1;
  if (var1)
    (*((void (**)(WrdListLevelFormat *))var1->var0 + 1))(var1);
  this->var1 = 0;
  JUMPOUT(0x22E2DD408);
}

{
  WrdListLevelFormat *var1;

  this->var0 = (void **)&off_24F3B36B0;
  var1 = this->var1;
  if (var1)
    (*((void (**)(WrdListLevelFormat *))var1->var0 + 1))(var1);
  this->var1 = 0;
}

void sub_22A178ECC(void *a1, int a2)
{
  unsigned int *v3;
  void *v4;

  if (a2 == 3)
  {
    v3 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v4, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A178EA8);
}

void sub_22A178F50(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A178EA8);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdStringWithDataTypedTable::WrdStringWithDataTypedTable(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)result = &off_24F3B3EE0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

void WrdBinaryReader::read(WrdBinaryReader *this, WrdStringWithDataTypedTable *a2)
{
  int v2;
  uint64_t v3;
  _DWORD *exception;

  v2 = *((_DWORD *)a2 + 2);
  if (v2 > 90)
  {
    if (v2 == 91)
    {
      WrdParser::parse(*((_QWORD *)this + 4), *((unsigned __int16 **)a2 + 2), 91);
    }
    else
    {
      if (v2 != 123)
        goto LABEL_13;
      v3 = *((_QWORD *)this + 4);
      if (*(unsigned __int16 *)(v3 + 232) >= 0x90u)
        WrdParser::parse(v3, *((unsigned __int16 **)a2 + 2), 144);
    }
  }
  else
  {
    if (v2 != 51)
    {
      if (v2 == 72)
      {
        WrdParser::parse(*((_QWORD *)this + 4), *((unsigned __int16 **)a2 + 2), 72);
        return;
      }
LABEL_13:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
    }
    WrdParser::parse(*((_QWORD *)this + 4), *((unsigned __int16 **)a2 + 2), 51);
  }
}

void WrdStringWithDataTypedTable::~WrdStringWithDataTypedTable(WrdStringWithDataTypedTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3EE0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3EE0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void sub_22A179378()
{
  __break(1u);
}

void sub_22A179438()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A179408);
}

void WrdOutlineListData::init(WrdOutlineListData *this)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) & 0x7FFFFFFF8) == 0)
  {
    v2 = 0;
    v3 = (char *)this + 24;
    do
    {
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
      v5 = v4;
      v7 = (uint64_t *)*((_QWORD *)this + 2);
      v6 = *((_QWORD *)this + 3);
      if ((unint64_t)v7 >= v6)
      {
        v9 = *((_QWORD *)this + 1);
        v10 = (unint64_t)v7 - v9;
        v11 = (v6 - v9) >> 3;
        v12 = 2 * v11;
        if (2 * (int)v11 <= (v10 >> 3) + 1)
          v12 = (v10 >> 3) + 1;
        if (v11 >= 0x7FFFFFFF)
          v13 = 0xFFFFFFFFLL;
        else
          v13 = v12;
        if ((_DWORD)v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v3, v13);
          v16 = v15;
        }
        else
        {
          v14 = 0;
          v16 = 0;
        }
        v17 = (uint64_t *)&v14[v10 & 0x7FFFFFFF8];
        *v17 = v5;
        v8 = v17 + 1;
        v19 = (char *)*((_QWORD *)this + 1);
        v18 = (char *)*((_QWORD *)this + 2);
        if (v18 != v19)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (char *)*((_QWORD *)this + 1);
        }
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v8;
        *((_QWORD *)this + 3) = &v14[8 * v16];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v7 = v4;
        v8 = v7 + 1;
      }
      *((_QWORD *)this + 2) = v8;
    }
    while (v2++ < 8);
  }
}

uint64_t WrdSectionProperties::WrdSectionProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)a1 = &off_24F3B3C68;
  *(_QWORD *)(a1 + 8) = &unk_24F3B3C98;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 280));
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_22A179628(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  OcBinaryData *v5;

  OcBinaryData::~OcBinaryData(v5);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(v2, *v4);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

uint64_t WrdSectionProperties::reset(WrdSectionProperties *this)
{
  WrdSectionProperties *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = this;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 242) = 0x1000000;
  *(_OWORD *)((char *)this + 72) = xmmword_22A4D2CE0;
  *((_WORD *)this + 116) = 0;
  *(_OWORD *)((char *)this + 216) = xmmword_22A4D2CF0;
  *(_QWORD *)((char *)this + 234) = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_22A4BF980;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 136) = xmmword_22A4D2D00;
  *((_QWORD *)this + 19) = 0x2D000000000;
  *((_DWORD *)this + 40) = 720;
  *(_OWORD *)((char *)this + 120) = xmmword_22A4D2D10;
  *(_OWORD *)((char *)this + 252) = xmmword_22A4D2D20;
  *(_QWORD *)((char *)this + 268) = 0;
  *((_DWORD *)this + 69) = 65537;
  v2 = (_QWORD *)((char *)this + 200);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  *((_QWORD *)v1 + 24) = v2;
  *v2 = 0;
  v3 = (_QWORD *)*((_QWORD *)v1 + 22);
  v1 = (WrdSectionProperties *)((char *)v1 + 176);
  *((_QWORD *)v1 + 4) = 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)v1 - 8, v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)v1 - 19) + 24))(*((_QWORD *)v1 - 19));
  (*(void (**)(_QWORD))(**((_QWORD **)v1 - 18) + 24))(*((_QWORD *)v1 - 18));
  (*(void (**)(_QWORD))(**((_QWORD **)v1 - 17) + 24))(*((_QWORD *)v1 - 17));
  (*(void (**)(_QWORD))(**((_QWORD **)v1 - 16) + 24))(*((_QWORD *)v1 - 16));
  (*(void (**)(_QWORD))(**((_QWORD **)v1 - 15) + 24))(*((_QWORD *)v1 - 15));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 - 14) + 24))(*((_QWORD *)v1 - 14));
}

uint64_t WrdOutlineListData::reset(WrdOutlineListData *this)
{
  uint64_t i;
  uint64_t result;

  *((_BYTE *)this + 64) = 0;
  *((_DWORD *)this + 14) = 0;
  bzero(*((void **)this + 6), 2 * *((unsigned int *)this + 15));
  for (i = 0; i != 72; i += 8)
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + i) + 24))(*(_QWORD *)(*((_QWORD *)this + 1) + i));
  return result;
}

_QWORD *WrdSectionTextRun::WrdSectionTextRun(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)WrdTextRun::WrdTextRun(a1, a2, a3);
  *result = &off_24F3B3CF0;
  result[3] = a4;
  result[4] = a5;
  return result;
}

uint64_t WrdTextRun::WrdTextRun(uint64_t result, int a2, int a3)
{
  *(_QWORD *)result = &off_24F3B1BC0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

WrdSectionProperties *WrdBinaryReader::read(WrdBinaryReader *this, WrdSectionTextRun *a2)
{
  WrdSectionProperties *var4;
  WrdSectionProperties *var5;
  WrdSectionProperties *result;
  signed int v7;
  signed int var2;
  const WrdSectionDescriptorTable *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int PcdIdxFromCP;
  uint64_t v14;
  uint64_t v15;
  _DWORD *exception;
  int v17;
  unsigned int v18;

  v18 = 0;
  var4 = a2->var4;
  var5 = a2->var5;
  (*(void (**)(WrdSectionProperties *))(*(_QWORD *)var4 + 16))(var4);
  result = (WrdSectionProperties *)(*(uint64_t (**)(WrdSectionProperties *))(*(_QWORD *)var5 + 16))(var5);
  a2->var3 = 0;
  if (a2->var1)
  {
    exception = __cxa_allocate_exception(4uLL);
    v17 = 1004;
    goto LABEL_19;
  }
  v7 = *(_DWORD *)(*((_QWORD *)this + 17) + 40);
  if (!v7)
    return result;
  var2 = a2->var2;
  if (v7 <= var2)
    return result;
  v9 = (const WrdSectionDescriptorTable *)*((_QWORD *)this + 24);
  if (!v9)
  {
    exception = __cxa_allocate_exception(4uLL);
    v17 = 1003;
    goto LABEL_19;
  }
  result = (WrdSectionProperties *)WrdParser::applyExceptionsForCP(*((WrdParser **)this + 4), v9, a2->var2, var4, var5, &v18);
  v10 = v18;
  if (!v18)
  {
LABEL_11:
    v11 = *((_QWORD *)this + 4);
    goto LABEL_12;
  }
  a2->var3 = v18;
  v11 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(v11 + 186) & 4) != 0)
  {
    v12 = var2 + v10 - 1;
    if ((v12 & 0x80000000) == 0)
    {
      PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v12);
      v14 = *((_QWORD *)this + 17);
      if (*(_DWORD *)(v14 + 72) - 1 > PcdIdxFromCP)
      {
        v15 = *(_QWORD *)(v14 + 88);
        if (v15)
        {
          result = (WrdSectionProperties *)WrdParser::applyPiece(*((int **)this + 4), v15 + 8 * PcdIdxFromCP, 0, 0, 0, 0, 0, 0, 0, var4, var5, 0);
          goto LABEL_11;
        }
      }
      exception = __cxa_allocate_exception(4uLL);
      v17 = 1005;
LABEL_19:
      *exception = v17;
    }
  }
LABEL_12:
  if (!*(_DWORD *)(v11 + 164) && *(_DWORD *)(v11 + 152) == 10)
    return WrdSectionProperties::applyVersion10Defaults(a2->var4);
  return result;
}

uint64_t WrdParser::applyExceptionsForCP(WrdParser *this, const WrdSectionDescriptorTable *a2, int a3, WrdSectionProperties *a4, WrdSectionProperties *a5, unsigned int *a6)
{
  uint64_t result;
  const WrdSectionDescriptorTable *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  *a6 = 0;
  result = WrdSectionDescriptorTable::getIndexForCP(a2, a3);
  if ((result & 0x80000000) == 0)
  {
    v13 = (_DWORD)result == *((unsigned __int16 *)a2 + 4) - 1
        ? (const WrdSectionDescriptorTable *)((char *)a2 + 12)
        : (const WrdSectionDescriptorTable *)(*((_QWORD *)a2 + 2) + 4 * (unsigned __int16)(result + 1));
    v14 = *(_DWORD *)v13 - a3;
    if (v14)
    {
      result = WrdSectionDescriptorTable::getSectionDescriptorReference(a2, (unsigned __int16)result);
      if ((*(_DWORD *)result + 1) >= 2)
      {
        v15 = result;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
        v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
        result = (uint64_t)WrdParser::parseGrpprl(this, *((_QWORD *)this + 14), v16, 0, 0, 0, 0, 0, 0, 0, 0, 0, a4, a5, 0);
        v17 = *(_DWORD *)(v15 + 4);
        if (v17 + 1 >= 2)
        {
          v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 176))(*((_QWORD *)this + 14));
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14));
          if (v17 < (int)result + v18)
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14), *(unsigned int *)(v15 + 4), 0);
            v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 80))(*((_QWORD *)this + 14));
            v21 = v19 - 2;
            *((_DWORD *)a4 + 72) = 0;
            OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a4 + 280), v19 - 2);
            (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 14) + 56))(*((_QWORD *)this + 14), *((_QWORD *)a4 + 38), &v21);
            v20 = v21;
            *((_DWORD *)a4 + 72) = v21;
            result = OcBinaryData::setMinimumCapacity((OcBinaryData *)((char *)a4 + 280), v20);
            *((_DWORD *)a4 + 74) = v20;
          }
        }
      }
      *a6 = v14;
    }
  }
  return result;
}

uint64_t WrdSectionDescriptorTable::getIndexForCP(WrdSectionDescriptorTable *this, int a2)
{
  __int16 v2;

  if (a2 < 0 && *((_DWORD *)this + 3) <= a2)
    return 0xFFFFFFFFLL;
  v2 = *((_WORD *)this + 4);
  while ((--v2 & 0x8000) == 0)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * (unsigned __int16)v2) <= a2)
      return v2;
  }
  return -1;
}

uint64_t WrdSectionProperties::doRevisionsExist(WrdSectionProperties *this)
{
  return (*((unsigned __int8 *)this + 20) >> 6) & 1;
}

void WrdSectionTextRun::~WrdSectionTextRun(WrdSectionTextRun *this)
{
  WrdSectionTextRun::~WrdSectionTextRun(this);
  JUMPOUT(0x22E2DD408);
}

{
  WrdSectionProperties *var4;
  WrdSectionProperties *var5;

  this->var0 = (void **)&off_24F3B3CF0;
  var4 = this->var4;
  if (var4)
    (*(void (**)(WrdSectionProperties *))(*(_QWORD *)var4 + 8))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*(void (**)(WrdSectionProperties *))(*(_QWORD *)var5 + 8))(var5);
  this->var5 = 0;
}

void WrdSectionProperties::~WrdSectionProperties(WrdSectionProperties *this)
{
  WrdSectionProperties::~WrdSectionProperties(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24F3B3C68;
  *((_QWORD *)this + 1) = &unk_24F3B3C98;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 5) = 0;
  v5 = *((_QWORD *)this + 6);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 6) = 0;
  v6 = *((_QWORD *)this + 7);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 7) = 0;
  v7 = *((_QWORD *)this + 8);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 8) = 0;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 280));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
}

void WrdOutlineListData::~WrdOutlineListData(WrdOutlineListData *this)
{
  WrdOutlineListData::~WrdOutlineListData(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F3B38A0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  WrdAnnotationDateTimeTable::clear(this);
  CsString::~CsString((CsString *)((char *)this + 40));
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void sub_22A179E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A179FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A17A224(void *a1, int a2)
{
  void *v2;
  unsigned int *v5;
  void *v6;

  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v6, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A17A1F8);
}

void sub_22A17A2B4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A17A1F8);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A17A854(void *a1, int a2)
{
  void *v2;
  id v5;
  WrdParagraphTextRun v6;

  WrdParagraphTextRun::~WrdParagraphTextRun(&v6);
  if (a2 != 2)
  {
    objc_begin_catch(a1);
    JUMPOUT(0x22A17A7E8);
  }
  v5 = objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_22A17A928()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A17A8F8);
}

void sub_22A17A9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WrdParagraphTextRun::WrdParagraphTextRun(WrdParagraphTextRun *this)
{
  WrdParagraphProperties *v2;
  WrdParagraphProperties *v3;
  WrdTableProperties *v4;
  WrdTableProperties *v5;

  *(_QWORD *)WrdTextRun::WrdTextRun((uint64_t)this, 0, 0) = &off_24F3B3A00;
  v2 = (WrdParagraphProperties *)operator new(0x130uLL);
  WrdParagraphProperties::WrdParagraphProperties(v2);
  this->var4 = v2;
  v3 = (WrdParagraphProperties *)operator new(0x130uLL);
  WrdParagraphProperties::WrdParagraphProperties(v3);
  this->var5 = v3;
  v4 = (WrdTableProperties *)operator new(0x190uLL);
  WrdTableProperties::WrdTableProperties(v4);
  this->var6 = v4;
  v5 = (WrdTableProperties *)operator new(0x190uLL);
  WrdTableProperties::WrdTableProperties(v5);
  this->var7 = v5;
}

void sub_22A17AACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdParagraphProperties::WrdParagraphProperties(WrdParagraphProperties *this)
{
  _QWORD *v2;
  uint64_t i;
  WrdTabDescriptor *v4;
  WrdShading *v5;
  WrdLineSpaceDescriptor *v6;
  WrdDropCap *v7;
  WrdBorder *v8;
  WrdBorder *v9;
  WrdBorder *v10;
  WrdBorder *v11;
  WrdBorder *v12;
  WrdBorder *v13;
  WrdAutoNumberListDescriptor *v14;
  WrdDateTime *v15;
  WrdNumberRevisionMarkData *v16;
  WrdTabDescriptor *v17;

  *(_QWORD *)this = &off_24F3B3960;
  *((_QWORD *)this + 1) = &unk_24F3B39A8;
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 11) = 0u;
  v2 = (_QWORD *)((char *)this + 176);
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 176, 0x40u);
  for (i = 0; i != 512; i += 8)
  {
    v4 = (WrdTabDescriptor *)operator new(0x10uLL);
    WrdTabDescriptor::WrdTabDescriptor(v4);
    *(_QWORD *)(*v2 + i) = v4;
  }
  *((_QWORD *)this + 25) = operator new[](0x80uLL);
  *((_QWORD *)this + 26) = operator new[](0x80uLL);
  *((_QWORD *)this + 27) = operator new[](0x80uLL);
  v5 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v5);
  *((_QWORD *)this + 4) = v5;
  v6 = (WrdLineSpaceDescriptor *)operator new(0x10uLL);
  WrdLineSpaceDescriptor::WrdLineSpaceDescriptor(v6);
  *((_QWORD *)this + 5) = v6;
  v7 = (WrdDropCap *)operator new(0x10uLL);
  WrdDropCap::WrdDropCap(v7);
  *((_QWORD *)this + 6) = v7;
  v8 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v8);
  *((_QWORD *)this + 7) = v8;
  v9 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v9);
  *((_QWORD *)this + 8) = v9;
  v10 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v10);
  *((_QWORD *)this + 9) = v10;
  v11 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v11);
  *((_QWORD *)this + 10) = v11;
  v12 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v12);
  *((_QWORD *)this + 11) = v12;
  v13 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v13);
  *((_QWORD *)this + 12) = v13;
  v14 = (WrdAutoNumberListDescriptor *)operator new(0x30uLL);
  WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(v14);
  *((_QWORD *)this + 13) = v14;
  v15 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v15);
  *((_QWORD *)this + 14) = v15;
  v16 = (WrdNumberRevisionMarkData *)operator new(0x48uLL);
  WrdNumberRevisionMarkData::WrdNumberRevisionMarkData(v16);
  *((_QWORD *)this + 15) = v16;
  WrdNumberRevisionMarkData::init(v16);
  v17 = (WrdTabDescriptor *)operator new(0x10uLL);
  WrdTabDescriptor::WrdTabDescriptor(v17);
  *((_QWORD *)this + 16) = v17;
  (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)this + 16))(this);
}

void sub_22A17ACF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void *v4;
  void *v6;

  v4 = v3;
  operator delete(v4);
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 184) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void WrdAutoNumberListDescriptor::WrdAutoNumberListDescriptor(WrdAutoNumberListDescriptor *this)
{
  WrdAutoNumberLevelDescriptor *v2;

  *(_QWORD *)this = &off_24F3B26F0;
  CsString::CsString((CsString *)((char *)this + 16));
  v2 = (WrdAutoNumberLevelDescriptor *)operator new(0x30uLL);
  WrdAutoNumberLevelDescriptor::WrdAutoNumberLevelDescriptor(v2);
  *((_QWORD *)this + 1) = v2;
  (*(void (**)(WrdAutoNumberListDescriptor *))(*(_QWORD *)this + 24))(this);
}

void sub_22A17ADD0(_Unwind_Exception *a1)
{
  CsString *v1;
  void *v2;

  operator delete(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

void WrdNumberRevisionMarkData::WrdNumberRevisionMarkData(WrdNumberRevisionMarkData *this)
{
  *(_QWORD *)this = &off_24F3B3828;
  CsString::CsString((CsString *)((char *)this + 8));
  *((_WORD *)this + 32) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 66) &= ~1u;
}

void WrdTableProperties::WrdTableProperties(WrdTableProperties *this)
{
  WrdTableAutoformatLookSpecifier *v2;
  WrdTableCellDescriptor *v3;
  WrdShading *v4;
  WrdBorder *v5;
  WrdBorder *v6;
  WrdBorder *v7;
  WrdBorder *v8;
  WrdBorder *v9;
  WrdBorder *v10;
  WrdBorder *v11;
  WrdBorder *v12;
  WrdDateTime *v13;

  *(_QWORD *)this = &off_24F3B4060;
  *((_QWORD *)this + 1) = &unk_24F3B4090;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v2 = (WrdTableAutoformatLookSpecifier *)operator new(0x10uLL);
  WrdTableAutoformatLookSpecifier::WrdTableAutoformatLookSpecifier(v2);
  *((_QWORD *)this + 4) = v2;
  v3 = (WrdTableCellDescriptor *)operator new(0x88uLL);
  WrdTableCellDescriptor::WrdTableCellDescriptor(v3);
  *((_QWORD *)this + 5) = v3;
  v4 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v4);
  *((_QWORD *)this + 6) = v4;
  v5 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v5);
  *((_QWORD *)this + 7) = v5;
  v6 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v6);
  *((_QWORD *)this + 8) = v6;
  v7 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v7);
  *((_QWORD *)this + 9) = v7;
  v8 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v8);
  *((_QWORD *)this + 10) = v8;
  v9 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v9);
  *((_QWORD *)this + 11) = v9;
  v10 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v10);
  *((_QWORD *)this + 12) = v10;
  v11 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v11);
  *((_QWORD *)this + 13) = v11;
  v12 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v12);
  *((_QWORD *)this + 14) = v12;
  v13 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v13);
  *((_QWORD *)this + 15) = v13;
  (*(void (**)(WrdTableProperties *))(*(_QWORD *)this + 16))(this);
}

void sub_22A17AFBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void **v3;
  void *v4;
  void *v6;
  void *v7;

  v4 = v2;
  operator delete(v4);
  v6 = (void *)v1[34];
  if (v6)
  {
    v1[35] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[32] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void WrdTableCellDescriptor::WrdTableCellDescriptor(WrdTableCellDescriptor *this)
{
  WrdShading *v2;
  WrdBorder *v3;
  WrdBorder *v4;
  WrdBorder *v5;
  WrdBorder *v6;
  WrdBorder *v7;
  WrdBorder *v8;

  *(_QWORD *)this = &off_24F3B4020;
  v2 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v2);
  *((_QWORD *)this + 2) = v2;
  v3 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v3);
  *((_QWORD *)this + 3) = v3;
  v4 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v4);
  *((_QWORD *)this + 4) = v4;
  v5 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v5);
  *((_QWORD *)this + 5) = v5;
  v6 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v6);
  *((_QWORD *)this + 6) = v6;
  v7 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v7);
  *((_QWORD *)this + 7) = v7;
  v8 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v8);
  *((_QWORD *)this + 8) = v8;
  WrdTableCellDescriptor::reset(this);
}

void sub_22A17B10C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *WrdBinaryReader::read(WrdBinaryReader *this, WrdParagraphTextRun *a2)
{
  WrdParagraphProperties *var4;
  WrdParagraphProperties *var5;
  WrdTableProperties *var6;
  WrdTableProperties *var7;
  int *result;
  uint64_t v9;
  unsigned int var2;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  WrdPieceTable *v15;
  unsigned int v16;
  unsigned int NextParagraphEndCP;
  unsigned int NumberOfCharInText;
  unsigned int v20;
  unsigned int FCfromCP;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;

  a2->var3 = 0;
  var4 = a2->var4;
  (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)var4 + 16))(var4);
  var5 = a2->var5;
  (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)var5 + 16))(var5);
  var6 = a2->var6;
  (*(void (**)(WrdTableProperties *))(*(_QWORD *)var6 + 16))(var6);
  var7 = a2->var7;
  result = (int *)(*(uint64_t (**)(WrdTableProperties *))(*(_QWORD *)var7 + 16))(var7);
  v9 = *((_QWORD *)this + 17);
  var2 = a2->var2;
  v11 = v9 + 4 * a2->var1;
  v12 = *(_DWORD *)(v11 + 40);
  if (v12 > var2)
  {
    v24 = 0;
    v13 = *(_DWORD *)(v11 + 8);
    v14 = v13 + var2;
    v15 = (WrdPieceTable *)(v9 + 72);
    v16 = v12 + v13 - 1;
    NextParagraphEndCP = WrdBinaryReader::findNextParagraphEndCP(this, v13 + var2, v16);
    a2->var3 = NextParagraphEndCP - v14 + 1;
    NumberOfCharInText = WrdFileInformationBlock::getNumberOfCharInText(*((_QWORD *)this + 4) + 160);
    if (NextParagraphEndCP == v16 && a2->var1 == 0)
    {
      v20 = NumberOfCharInText;
      if (WrdFileInformationBlock::getNumberOfCharInText(*((_QWORD *)this + 4) + 160, 0) >= NumberOfCharInText)
        NextParagraphEndCP = v16;
      else
        NextParagraphEndCP = v20;
    }
    FCfromCP = WrdPieceTable::getFCfromCP(v15, NextParagraphEndCP, &v24);
    result = (int *)WrdBinaryReader::loadFKPPAPX((WrdBinTable **)this, FCfromCP);
    if ((_DWORD)result != -1)
      result = (int *)WrdParser::applyExceptionsForFC(*((WrdParser **)this + 4), *((SsrwOOStream **)this + 19), FCfromCP, var4, var5, var6, var7);
    if ((*(_BYTE *)(*((_QWORD *)this + 4) + 186) & 4) != 0)
    {
      result = (int *)WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), NextParagraphEndCP);
      v22 = *((_QWORD *)this + 17);
      if (*(_DWORD *)(v22 + 72) - 1 > result)
      {
        v23 = *(_QWORD *)(v22 + 88);
        if (v23)
          return WrdParser::applyPiece(*((int **)this + 4), v23 + 8 * result, 0, var4, 0, var5, 0, var6, var7, 0, 0, 0);
      }
    }
  }
  return result;
}

uint64_t WrdBinaryReader::findNextParagraphEndCP(WrdBinaryReader *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int PcdIdxFromCP;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t FCfromCP;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int BTEForFC;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  BOOL v37;

  v4 = a2;
  PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), a2);
  v7 = PcdIdxFromCP;
  v8 = *((_QWORD *)this + 17);
  v9 = *(_DWORD *)(v8 + 72);
  if (v9 - 1 <= PcdIdxFromCP)
    v10 = 0;
  else
    v10 = (unsigned int *)(*(_QWORD *)(v8 + 88) + 8 * PcdIdxFromCP);
  if (v9 <= PcdIdxFromCP)
    v11 = -1;
  else
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 80) + 4 * PcdIdxFromCP);
  v12 = (_DWORD)v4 - v11 + ((_DWORD)v4 - v11) * (*((_BYTE *)v10 + 6) & 1) + *v10;
  v37 = 0;
  v13 = *(uint64_t **)(*((_QWORD *)this + 4) + 112);
  (*(void (**)(uint64_t *, uint64_t, _QWORD))(*v13 + 16))(v13, v12, 0);
  while (2)
  {
    v14 = v7 + 1;
    while (1)
    {
      v15 = *((_QWORD *)this + 17);
      v16 = *(_DWORD *)(v15 + 72) <= v14 ? -1 : *(_DWORD *)(*(_QWORD *)(v15 + 80) + 4 * v14);
      if (v4 > a3 || v4 >= v16)
        break;
      v17 = *v13;
      if ((*((_BYTE *)v10 + 6) & 1) != 0)
        v18 = (*(uint64_t (**)(uint64_t *))(v17 + 80))(v13);
      else
        v18 = (*(uint64_t (**)(uint64_t *))(v17 + 64))(v13);
      if ((*((_BYTE *)v10 + 6) & 2) == 0 && v18 <= 0xD && ((1 << v18) & 0x3080) != 0)
      {
        v20 = *v13;
        if ((*((_BYTE *)v10 + 6) & 1) != 0)
          v21 = (*(uint64_t (**)(uint64_t *))(v20 + 80))(v13);
        else
          v21 = (*(uint64_t (**)(uint64_t *))(v20 + 64))(v13);
        if (v21 == 10)
        {
          v4 = (v4 + 1);
          v22 = *v13;
          if ((*((_BYTE *)v10 + 6) & 1) != 0)
            v21 = (*(uint64_t (**)(uint64_t *))(v22 + 80))(v13);
          else
            v21 = (*(uint64_t (**)(uint64_t *))(v22 + 64))(v13);
        }
        if (v4 < a3)
        {
          do
          {
            v23 = (v4 + 1);
            if (v23 >= a3)
            {
              v24 = 0;
            }
            else
            {
              v24 = 1;
              while (v21 > 0xD || ((1 << v21) & 0x3080) == 0)
              {
                v23 = (v23 + 1);
                FCfromCP = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v23, &v37);
                (*(void (**)(uint64_t *, uint64_t, _QWORD))(*v13 + 16))(v13, FCfromCP, 0);
                v7 = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v23);
                v26 = *v13;
                if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 88) + 8 * v7 + 6) & 1) != 0)
                  v21 = (*(uint64_t (**)(uint64_t *))(v26 + 80))(v13);
                else
                  v21 = (*(uint64_t (**)(uint64_t *))(v26 + 64))(v13);
                v24 = v23 < a3;
                if ((_DWORD)a3 == (_DWORD)v23)
                {
                  v23 = a3;
                  break;
                }
              }
            }
            v27 = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v4, &v37);
            v28 = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v23, &v37);
            BTEForFC = WrdBinTable::getBTEForFC(*((WrdBinTable **)this + 18), v27);
            v30 = WrdBinTable::getBTEForFC(*((WrdBinTable **)this + 18), v28);
            if (BTEForFC != -1
              && (BTEForFC != v30
               || WrdBinaryReader::loadFKPPAPX((WrdBinTable **)this, v27) == -1
               || (v24 & WrdParser::areFCsInSameRun(*((WrdParser **)this + 4), *((SsrwOOStream **)this + 19), v27, v28)) != 1))
            {
              break;
            }
            v31 = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), (int)v23 + 1, &v37);
            (*(void (**)(uint64_t *, uint64_t, _QWORD))(*v13 + 16))(v13, v31, 0);
            v7 = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v23);
            v32 = *v13;
            v21 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 88) + 8 * v7 + 6) & 1) != 0
                ? (*(uint64_t (**)(uint64_t *))(v32 + 80))(v13)
                : (*(uint64_t (**)(uint64_t *))(v32 + 64))(v13);
            v4 = v23;
          }
          while (v23 < a3);
        }
        break;
      }
      v4 = (v4 + 1);
    }
    v33 = *((_QWORD *)this + 17);
    v34 = *(_DWORD *)(v33 + 72);
    if (v7 < v34 - 2)
    {
      v35 = v34 <= ++v7 ? -1 : *(_DWORD *)(*(_QWORD *)(v33 + 80) + 4 * v7);
      if (v35 == (_DWORD)v4)
      {
        if (v34 - 1 <= v7)
          v10 = 0;
        else
          v10 = (unsigned int *)(*(_QWORD *)(v33 + 88) + 8 * v7);
        if (v34 <= v7)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = *(unsigned int *)(*(_QWORD *)(v33 + 80) + 4 * v7);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 112) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 112), *v10, 0);
        continue;
      }
    }
    break;
  }
  return v4;
}

uint64_t WrdPieceTable::getPcdIdxFromCP(WrdPieceTable *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  v2 = *(unsigned int *)this;
  if (v2 < 2)
  {
    LODWORD(v3) = 1;
  }
  else
  {
    v3 = 1;
    while (*(_DWORD *)(*((_QWORD *)this + 1) + 4 * v3) <= a2)
    {
      if (v2 == ++v3)
        goto LABEL_5;
    }
  }
  if ((_DWORD)v2 == (_DWORD)v3)
  {
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return (v3 - 1);
}

uint64_t WrdPieceTable::getFCfromCP(WrdPieceTable *this, unsigned int a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *exception;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v9;
  uint64_t v10;

  v3 = *(unsigned int *)this;
  if (v3 < 2)
  {
    LODWORD(v4) = 1;
  }
  else
  {
    v4 = 1;
    while (*(_DWORD *)(*((_QWORD *)this + 1) + 4 * v4) < a2)
    {
      if (v3 == ++v4)
        goto LABEL_5;
    }
  }
  if ((_DWORD)v3 == (_DWORD)v4)
    goto LABEL_5;
  v6 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v6 + 4 * v4) == a2)
  {
    if (v4 < (int)v3 - 1)
    {
      v7 = (_BYTE *)(*((_QWORD *)this + 2) + 8 * v4);
      *a3 = v7[6] & 1;
      return *(unsigned int *)v7;
    }
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  v9 = v4 - 1;
  v10 = *((_QWORD *)this + 2) + 8 * v9;
  *a3 = *(_BYTE *)(v10 + 6) & 1;
  return a2
       - *(_DWORD *)(v6 + 4 * v9)
       + (a2 - *(_DWORD *)(v6 + 4 * v9)) * (*(_BYTE *)(v10 + 6) & 1)
       + *(_DWORD *)v10;
}

uint64_t WrdBinTable::getBTEForFC(WrdBinTable *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 2);
    if (*v3 <= a2)
    {
      v5 = 0;
      v6 = 4 * v2;
      v7 = v3 + 1;
      while (v6 != v5)
      {
        v8 = v7[v5 / 4];
        v5 += 4;
        if (v8 > a2)
          return *(unsigned int *)(*((_QWORD *)this + 5) + v5 - 4);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t WrdBinaryReader::loadFKPPAPX(WrdBinTable **this, unsigned int a2)
{
  uint64_t BTEForFC;
  uint64_t v4;

  BTEForFC = WrdBinTable::getBTEForFC(this[18], a2);
  v4 = BTEForFC;
  if ((_DWORD)BTEForFC != -1 && (_DWORD)BTEForFC - *(_DWORD *)this[18] != *((_DWORD *)this + 40))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this[4] + 14) + 16))(*((_QWORD *)this[4] + 14), ((_DWORD)BTEForFC << 9), 0);
    WrdParser::parse(this[4], this[19]);
    *((_DWORD *)this + 40) = v4 - *(_DWORD *)this[18];
  }
  return v4;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFormattedDiskPage *a2)
{
  uint64_t v4;
  SsrwOOMemStream *StreamInterface;
  _DWORD *exception;
  int v8;

  v8 = (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize;
  *((_WORD *)a2 + 12) = WrdFormattedDiskPage::s_unUndefinedOffset;
  v4 = *((_QWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14));
  (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 14) + 56))(*((_QWORD *)this + 14), v4, &v8);
  if (v8 != (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 2001;
  }
  StreamInterface = WrdFormattedDiskPage::getStreamInterface((SsrwOOStream *)a2);
  return (*(uint64_t (**)(SsrwOOMemStream *, _QWORD, _QWORD))(*(_QWORD *)StreamInterface + 16))(StreamInterface, 0, 0);
}

SsrwOOMemStream *WrdFormattedDiskPage::getStreamInterface(SsrwOOStream *this)
{
  SsrwOOMemStream *result;

  result = (SsrwOOMemStream *)this[4].var0;
  if (!result)
  {
    result = SsrwOOStream::openMemStreamForReading(this + 2, (void **)0x200);
    this[4].var0 = (void **)result;
  }
  return result;
}

SsrwOOMemStream *SsrwOOStream::openMemStreamForReading(SsrwOOStream *this, void **a2)
{
  int v2;
  SsrwOOMemStream *v4;

  v2 = (int)a2;
  v4 = (SsrwOOMemStream *)operator new(0x28uLL);
  SsrwOOMemStream::SsrwOOMemStream(v4, (void **)&this->var0, v2);
  return v4;
}

void sub_22A17BA6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void SsrwOOMemStream::SsrwOOMemStream(SsrwOOMemStream *this, void **a2, int a3)
{
  *(_QWORD *)this = &off_24F3A66E0;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  *((_DWORD *)this + 9) = 0;
}

uint64_t SsrwOOMemStream::seek(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  if (a3)
  {
    if (a3 == 2)
    {
      v3 = *(_DWORD *)(result + 16);
      goto LABEL_6;
    }
    if (a3 == 1)
    {
      v3 = *(_DWORD *)(result + 20);
LABEL_6:
      a2 += v3;
      goto LABEL_8;
    }
    a2 = *(_DWORD *)(result + 20);
  }
LABEL_8:
  v4 = *(_DWORD *)(result + 16);
  if (a2 < v4)
    v4 = a2;
  *(_DWORD *)(result + 20) = v4;
  return result;
}

BOOL WrdParser::areFCsInSameRun(WrdParser *this, SsrwOOStream *a2, unsigned int a3, unsigned int a4)
{
  _BOOL8 result;
  SsrwOOMemStream *StreamInterface;
  unsigned __int8 v9;
  unsigned int v10;
  unsigned int FC;
  unsigned int v12;

  if (a3 > a4)
    return 0;
  StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
  (*(void (**)(SsrwOOMemStream *, _QWORD, _QWORD))(*(_QWORD *)StreamInterface + 16))(StreamInterface, 0, 0);
  v9 = 0;
  v10 = 0;
  do
  {
    FC = WrdFormattedDiskPage::getFC((WrdFormattedDiskPage *)a2, v9);
    v12 = FC;
    result = v10 <= a3 && FC > a4;
    if (result)
      break;
    ++v9;
    v10 = v12;
  }
  while (*((unsigned __int8 *)a2[2].var0 + (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1) >= v9);
  return result;
}

uint64_t WrdFormattedDiskPage::getFC(WrdFormattedDiskPage *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 2);
  if (*(unsigned __int8 *)(v2 + 511) < a2 || a2 >= 0x7F)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return CsLeReadSInt32((unsigned int *)(v2 + 4 * a2));
}

uint64_t WrdFileInformationBlock::getNumberOfCharInText(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;
  int v4;

  v1 = this;
  LODWORD(this) = 0;
  v2 = *(_QWORD *)(v1 + 64);
  for (i = 3; i != 11; ++i)
  {
    if (v2 && i < *(unsigned __int16 *)(v1 + 56))
      v4 = *(_DWORD *)(v2 + 4 * i);
    else
      v4 = 0;
    this = (v4 + this);
  }
  return this;
}

uint64_t WrdParser::applyExceptionsForFC(WrdParser *this, SsrwOOStream *a2, unsigned int a3, WrdParagraphProperties *a4, WrdParagraphProperties *a5, WrdTableProperties *a6, WrdTableProperties *a7)
{
  uint64_t result;
  SsrwOOMemStream *StreamInterface;
  int v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;

  result = WrdParser::seekToExceptionForFC(this, a2, a3, &v18);
  if ((_DWORD)result)
  {
    StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
    v15 = (*(uint64_t (**)(SsrwOOMemStream *))(*(_QWORD *)StreamInterface + 64))(StreamInterface);
    v16 = v15
        ? 2 * v15 - 1
        : 2 * (*(uint64_t (**)(SsrwOOMemStream *))(*(_QWORD *)StreamInterface + 64))(StreamInterface);
    v17 = (*(uint64_t (**)(SsrwOOMemStream *))(*(_QWORD *)StreamInterface + 80))(StreamInterface);
    result = (uint64_t)WrdParagraphProperties::setParagraphStyleIndex(a4, v17);
    if (v16 >= 3)
      result = (uint64_t)WrdParser::parseGrpprl(this, (uint64_t)StreamInterface, v16 - 2, 0, 0, 0, a4, 0, a5, 0, a6, a7, 0, 0, 0);
  }
  if (*((int *)this + 38) <= 9)
  {
    result = WrdTableProperties::WrdTablePropertiesOverridden::isAnythingOverridden((WrdTableProperties::WrdTablePropertiesOverridden *)((char *)a6 + 16));
    if ((_DWORD)result)
    {
      WrdFileInformationBlockHeader::isBiDiLanguage((WrdParser *)((char *)this + 160));
      result = (uint64_t)WrdTableProperties::upgradeToVersion10(a6);
    }
    if (*((int *)this + 38) <= 9)
    {
      result = WrdTableProperties::WrdTablePropertiesOverridden::isAnythingOverridden((WrdTableProperties::WrdTablePropertiesOverridden *)((char *)a7 + 16));
      if ((_DWORD)result)
      {
        WrdFileInformationBlockHeader::isBiDiLanguage((WrdParser *)((char *)this + 160));
        return (uint64_t)WrdTableProperties::upgradeToVersion10(a7);
      }
    }
  }
  return result;
}

uint64_t WrdParser::seekToExceptionForFC(WrdParser *this, SsrwOOStream *a2, unsigned int a3, unsigned int *a4)
{
  SsrwOOMemStream *StreamInterface;
  unsigned __int8 v8;
  unsigned int FC;
  uint64_t result;

  StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
  (*(void (**)(SsrwOOMemStream *, _QWORD, _QWORD))(*(_QWORD *)StreamInterface + 16))(StreamInterface, 0, 0);
  v8 = 0;
  while (1)
  {
    FC = WrdFormattedDiskPage::getFC((WrdFormattedDiskPage *)a2, v8);
    if (v8)
    {
      if (FC > a3)
        break;
    }
    if (*((unsigned __int8 *)a2[2].var0 + (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize - 1) < ++v8)
    {
      result = 0;
      *a4 = 0;
      return result;
    }
  }
  *a4 = FC - a3;
  result = (*((uint64_t (**)(SsrwOOStream *, _QWORD))a2->var0 + 4))(a2, (v8 - 1));
  if ((_DWORD)result)
  {
    (*(void (**)(SsrwOOMemStream *, uint64_t, _QWORD))(*(_QWORD *)StreamInterface + 16))(StreamInterface, result, 0);
    return 1;
  }
  return result;
}

uint64_t WrdPAPXFKP::getGrpprlOffset(WrdPAPXFKP *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 2);
  if (!v2
    || (v3 = *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + v2 - 1), v3 <= a2)
    || (v4 = 13 * a2 + 4 * v3 + 4, v4 >= (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return 2 * *(unsigned __int8 *)(v2 + v4);
}

uint64_t SsrwOOMemStream::readByte(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  v2 = *(unsigned __int8 *)(**((_QWORD **)this + 1) + v1);
  *((_DWORD *)this + 5) = v1 + 1;
  return v2;
}

uint64_t SsrwOOMemStream::readUInt16(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t result;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  result = CsLeReadUInt16((unsigned __int16 *)(**((_QWORD **)this + 1) + v1));
  *((_DWORD *)this + 5) += 2;
  return result;
}

BOOL WrdTableProperties::WrdTablePropertiesOverridden::isAnythingOverridden(WrdTableProperties::WrdTablePropertiesOverridden *this)
{
  return (*(_QWORD *)this & 0xFFFFFFFFF87FFFFFLL | *((_DWORD *)this + 2) & 0x3FFFFF87) != 0;
}

void sub_22A17C024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A17C120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A17C260(void *a1, int a2)
{
  void *v2;
  void *v3;
  unsigned int *v6;
  void *v7;

  if (a2 == 3)
  {
    v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    v7 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v7, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A17C23CLL);
}

void sub_22A17C2DC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A17C23CLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A17C53C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);
  v7 = v5;

  WBParagraphReadState::~WBParagraphReadState((WBParagraphReadState *)va);
  _Unwind_Resume(a1);
}

void sub_22A17C7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a9);
  _Unwind_Resume(a1);
}

void sub_22A17C8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WrdNoteTable::getCPOfNextNote(WrdNoteTable *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  v3 = (unint64_t)(*((_QWORD *)this + 3) - v2) >> 3;
  if (!(_DWORD)v3)
    return 0xFFFFFFFFLL;
  v4 = 0;
  while (1)
  {
    result = *(unsigned int *)(*(_QWORD *)(v2 + 8 * v4) + 8);
    if ((int)result > a2)
      break;
    if (v3 <= ++v4)
      return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_22A17CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WrdAnnotationTable::getCPOfNextAnnotation(WrdAnnotationTable *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = (unint64_t)(*((_QWORD *)this + 2) - v2) >> 3;
  if (!(_DWORD)v3)
    return 0xFFFFFFFFLL;
  v4 = 0;
  while (1)
  {
    result = *(unsigned int *)(*(_QWORD *)(v2 + 8 * v4) + 8);
    if ((int)result > a2)
      break;
    if (v3 <= ++v4)
      return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_22A17CCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A17CDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A17D06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WrdCharacterTextRun::WrdCharacterTextRun(WrdCharacterTextRun *this)
{
  WrdCharacterProperties *v2;
  WrdCharacterProperties *v3;
  _DWORD *exception;

  *(_QWORD *)WrdTextRun::WrdTextRun((uint64_t)this, 0, 0) = &off_24F3B2910;
  v2 = (WrdCharacterProperties *)operator new(0x160uLL);
  WrdCharacterProperties::WrdCharacterProperties(v2);
  this->var4 = v2;
  v3 = (WrdCharacterProperties *)operator new(0x160uLL);
  WrdCharacterProperties::WrdCharacterProperties(v3);
  this->var5 = v3;
  if (!v3 || !this->var4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1001;
  }
}

void sub_22A17D12C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdCharacterProperties::WrdCharacterProperties(WrdCharacterProperties *this)
{
  WrdCharacterPropertiesOverridden v2;
  WrdShading *v3;
  WrdBorder *v4;
  WrdDateTime *v5;
  WrdDateTime *v6;
  WrdDateTime *v7;
  WrdDateTime *v8;
  WrdDateTime *v9;

  this->var0 = (void **)&off_24F3B2878;
  this->var1 = (void **)&unk_24F3B28A8;
  *(_QWORD *)&v2 = 255;
  *((_QWORD *)&v2 + 1) = 255;
  *(WrdCharacterPropertiesOverridden *)((char *)&this->var2 + 14) = v2;
  CsString::CsString(&this->var5);
  v3 = (WrdShading *)operator new(0x28uLL);
  WrdShading::WrdShading(v3);
  this->var6 = v3;
  v4 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v4);
  this->var7 = v4;
  v5 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v5);
  this->var8 = v5;
  v6 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v6);
  this->var9 = v6;
  v7 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v7);
  this->var10 = v7;
  v8 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v8);
  this->var11 = v8;
  v9 = (WrdDateTime *)operator new(0x18uLL);
  WrdDateTime::WrdDateTime(v9);
  this->var12 = v9;
  (*((void (**)(WrdCharacterProperties *))this->var0 + 2))(this);
}

void sub_22A17D250(_Unwind_Exception *a1)
{
  CsString *v1;
  void *v2;

  operator delete(v2);
  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

uint64_t *WrdBinaryReader::read(uint64_t *this, WrdCharacterTextRun *a2)
{
  uint64_t *v3;
  unsigned int var1;
  WrdCharacterProperties **p_var4;
  WrdCharacterProperties *v6;
  uint64_t v7;
  WrdPictureProperties *v8;
  int var51;
  uint64_t **v10;
  unsigned int var2;
  unsigned int *p_var2;

  a2->var3 = 0;
  if (*(_DWORD *)(this[17] + 4 * a2->var1 + 40) > a2->var2)
  {
    v3 = this;
    WrdBinaryReader::readTextRunCHP((WrdBinaryReader *)this, a2);
    if (WrdCharacterTextRun::isPicture(a2)
      || WrdCharacterTextRun::isFormFieldData(a2)
      || (this = (uint64_t *)WrdCharacterTextRun::isOle1Object(a2), (_DWORD)this))
    {
      *((_DWORD *)v3 + 163) = a2->var2;
      *((_DWORD *)v3 + 172) = a2->var1;
      *((_DWORD *)v3 + 164) = 1;
      OcText::setMinimumCapacity((OcText *)(v3 + 80), 2u);
      WrdRdrText::getText((WrdRdrText *)v3[17], (WrdText *)(v3 + 79));
      this = (uint64_t *)OcText::getCharacter((OcText *)(v3 + 80), 0);
      if ((_DWORD)this == 1)
      {
        var1 = a2->var1;
        var2 = a2->var2;
        if (!WrdCharacterTextRun::isPicture(a2)
          || (this = (uint64_t *)WrdCharacterTextRun::isFormFieldData(a2), (this & 1) == 0))
        {
          p_var4 = &a2->var4;
          if (!WrdCharacterProperties::isPicture(a2->var4)
            && !WrdCharacterProperties::isFormFieldData(*p_var4)
            && !WrdCharacterProperties::isOle1Object(a2->var4))
          {
            p_var4 = &a2->var5;
          }
          v6 = *p_var4;
          if (WrdCharacterTextRun::isPicture(a2))
          {
            v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3[4] + 280) + 16))(*(_QWORD *)(v3[4] + 280), 45);
            if (v7)
              v8 = (WrdPictureProperties *)(v7 - 8);
            else
              v8 = 0;
            WrdParser::parse((WrdParser *)v3[4], v8, v6->var51);
            if (!*((_WORD *)v8 + 12))
              WrdCharacterProperties::setData(v6, 1);
            (*(void (**)(WrdPictureProperties *))(*(_QWORD *)v8 + 8))(v8);
          }
          if (WrdCharacterTextRun::isPicture(a2))
          {
            var51 = v6->var51;
          }
          else
          {
            if (!WrdCharacterTextRun::isOle1Object(a2))
            {
              var51 = v6->var51;
              v10 = (uint64_t **)&v3[3 * var1 + 52];
              goto LABEL_25;
            }
            var51 = v6->var56;
          }
          v10 = (uint64_t **)&v3[3 * var1 + 28];
LABEL_25:
          p_var2 = &var2;
          this = std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, &var2, (uint64_t)&std::piecewise_construct, &p_var2);
          *((_DWORD *)this + 8) = var51;
        }
      }
    }
  }
  return this;
}

void sub_22A17D484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

int *WrdBinaryReader::readTextRunCHP(WrdBinaryReader *this, WrdCharacterTextRun *a2)
{
  unsigned int v4;
  WrdCharacterProperties *var5;
  WrdCharacterProperties *var4;
  unsigned int FCfromCP;
  int *result;
  int v9;
  unsigned int PcdIdxFromCP;
  uint64_t v11;
  uint64_t v12;
  WrdCharacterProperties *v13;
  WrdCharacterProperties *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  _DWORD *exception;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WrdCharacterProperties *v36;
  unsigned int v37;
  BOOL v38;

  v38 = 0;
  v37 = 0;
  v4 = *(_DWORD *)(*((_QWORD *)this + 17) + 4 * a2->var1 + 8) + a2->var2;
  var4 = a2->var4;
  var5 = a2->var5;
  (*((void (**)(WrdCharacterProperties *))var4->var0 + 2))(var4);
  (*((void (**)(WrdCharacterProperties *))var5->var0 + 2))(var5);
  FCfromCP = WrdPieceTable::getFCfromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v4, &v38);
  result = (int *)WrdBinTable::getBTEForFC(*((WrdBinTable **)this + 21), FCfromCP);
  if ((_DWORD)result == -1)
    return result;
  v9 = (int)result;
  if ((_DWORD)result - **((_DWORD **)this + 21) != *((_DWORD *)this + 46))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 112) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 112), ((_DWORD)result << 9), 0);
    WrdParser::parse(*((WrdParser **)this + 4), *((WrdFormattedDiskPage **)this + 22));
    *((_DWORD *)this + 46) = v9 - **((_DWORD **)this + 21);
  }
  WrdParser::applyExceptionsForFC(*((WrdParser **)this + 4), *((SsrwOOStream **)this + 22), FCfromCP, var4, var5, &v37);
  if (v38)
    v37 >>= 1;
  PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), v4);
  result = (int *)*((_QWORD *)this + 4);
  if ((*((_BYTE *)result + 186) & 4) != 0)
  {
    v11 = *((_QWORD *)this + 17);
    if (*(_DWORD *)(v11 + 72) - 1 > PcdIdxFromCP)
    {
      v12 = *(_QWORD *)(v11 + 88);
      if (v12)
      {
        if ((*(_WORD *)(v12 + 8 * PcdIdxFromCP + 4) & 1) != 0)
        {
          v14 = (WrdCharacterProperties *)(*((uint64_t (**)(WrdCharacterProperties *))var5->var0 + 3))(var5);
          WrdCharacterProperties::applyBaseProperties(v14, var4);
          v36 = v14;
          v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 41);
          if (v15)
            v16 = v15 - 8;
          else
            v16 = 0;
          v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 41);
          v18 = v17 - 8;
          if (!v17)
            v18 = 0;
          v35 = v18;
          v19 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 61);
          v20 = v19 - 8;
          if (!v19)
            v20 = 0;
          v33 = v20;
          v34 = v16;
          v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 61);
          v22 = v21 - 8;
          v23 = v21;
          v24 = operator new(0x38uLL);
          v25 = v24;
          if (v23)
            v26 = v22;
          else
            v26 = 0;
          WrdParagraphTextRun::WrdParagraphTextRun((uint64_t)v24, a2->var1, a2->var2, v34, v35, v33, v26);
          v13 = v36;
          if (!v25)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = 1001;
          }
          (*(void (**)(WrdBinaryReader *, _QWORD *))(*(_QWORD *)this + 184))(this, v25);
          v27 = v25[4];
          if ((*(_QWORD *)(v27 + 16) & 1) == 0)
            v27 = v25[3];
          WrdStyleSheet::resolve(*((WrdStyleSheet **)this + 25), v36, *(unsigned __int16 *)(v27 + 140));
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
          result = (int *)*((_QWORD *)this + 4);
        }
        else
        {
          v13 = 0;
        }
        result = WrdParser::applyPiece(result, v12 + 8 * PcdIdxFromCP, v13, 0, var4, 0, var5, 0, 0, 0, 0, 0);
        if (v13)
          result = (int *)(*((uint64_t (**)(WrdCharacterProperties *))v13->var0 + 1))(v13);
      }
    }
  }
  v28 = v37;
  v29 = *((_QWORD *)this + 17);
  if (*(_DWORD *)(v29 + 72) > PcdIdxFromCP + 1)
  {
    v30 = *(_DWORD *)(*(_QWORD *)(v29 + 80) + 4 * (PcdIdxFromCP + 1));
    if (v37 < v30 - v4)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v37 >= ~v4)
  {
    v30 = -1;
LABEL_32:
    v28 = v30 - v4;
  }
LABEL_33:
  v37 = v28;
  v31 = *(_DWORD *)(v29 + 4 * (a2->var1 + 1) + 8) - v4;
  if (v28 < v31)
    v31 = v28;
  a2->var3 = v31;
  return result;
}

void sub_22A17D84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  uint64_t v22;

  operator delete(v21);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (*(_QWORD *)(v22 - 96))
    (*(void (**)(_QWORD))(**(_QWORD **)(v22 - 96) + 8))(*(_QWORD *)(v22 - 96));
  _Unwind_Resume(a1);
}

_QWORD *WrdParser::applyExceptionsForFC(WrdParser *this, SsrwOOStream *a2, unsigned int a3, WrdCharacterProperties *a4, WrdCharacterProperties *a5, unsigned int *a6)
{
  _QWORD *result;
  SsrwOOMemStream *StreamInterface;

  result = (_QWORD *)WrdParser::seekToExceptionForFC(this, a2, a3, a6);
  if ((_DWORD)result)
  {
    StreamInterface = WrdFormattedDiskPage::getStreamInterface(a2);
    result = (_QWORD *)(*(uint64_t (**)(SsrwOOMemStream *))(*(_QWORD *)StreamInterface + 64))(StreamInterface);
    if ((_DWORD)result)
      return WrdParser::parseGrpprl(this, (uint64_t)StreamInterface, result, 0, 0, 0, 0, a4, 0, a5, 0, 0, 0, 0, 0);
  }
  return result;
}

uint64_t WrdCHPXFKP::getGrpprlOffset(WrdCHPXFKP *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)((unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize + v2 - 1);
  if (v3 <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v4 = a2 + 4 + 4 * v3;
  if (v4 >= (unsigned __int16)WrdFormattedDiskPage::s_unPageBufferSize)
    return 0;
  else
    return 2 * *(unsigned __int8 *)(v2 + v4);
}

BOOL WrdCharacterProperties::doRevisionsExist(WrdCharacterProperties *this)
{
  return (*(_QWORD *)&this->var2 & 0x48 | (*((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32)) & 0x2080800000) != 0;
}

void *SsrwOOMemStream::readBytes(SsrwOOMemStream *this, void *__dst, unsigned int *a3)
{
  uint64_t v4;
  int v6;
  void *result;
  _DWORD *exception;

  if ((*a3 & 0x80000000) != 0 || (v4 = *((unsigned int *)this + 5), (v4 & 0x80000000) != 0))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  if ((int)*a3 >= *((_DWORD *)this + 4) - (int)v4)
    v6 = *((_DWORD *)this + 4) - v4;
  else
    v6 = *a3;
  result = memcpy(__dst, (const void *)(**((_QWORD **)this + 1) + v4), v6);
  *((_DWORD *)this + 5) += v6;
  *a3 = v6;
  return result;
}

BOOL WrdCharacterTextRun::isPicture(WrdCharacterTextRun *this)
{
  WrdCharacterProperties *var4;
  int var51;
  int v4;
  __int16 v5;
  _BOOL8 result;
  WrdCharacterProperties *var5;
  int v8;

  if (!this->var3)
    return 0;
  var4 = this->var4;
  var51 = var4->var51;
  if ((var51 & 0x80000000) == 0)
  {
    v4 = this->var5->var51;
    if ((v4 & 0x80000000) == 0 && var51 != v4)
      return 0;
  }
  v5 = *((_WORD *)var4 + 170);
  if ((v5 & 2) != 0)
  {
    if ((v5 & 0x10) != 0)
      return 0;
    var5 = this->var5;
    v8 = *((_DWORD *)var5 + 85);
  }
  else
  {
    result = 0;
    if ((v5 & 0x10) != 0)
      return result;
    var5 = this->var5;
    v8 = *((_DWORD *)var5 + 85);
    if ((v8 & 2) == 0)
      return result;
  }
  if (v5 & 0x24 | v8 & 0x14)
    return 0;
  result = (v8 & 0x20) == 0;
  if (var51 < 0 && (v8 & 0x20) == 0)
    return var5->var51 >= 0;
  return result;
}

BOOL WrdCharacterTextRun::isFormFieldData(WrdCharacterTextRun *this)
{
  WrdCharacterProperties *var4;
  int var51;
  int v3;
  __int16 v4;

  if (!this->var3)
    return 0;
  var4 = this->var4;
  var51 = var4->var51;
  if ((var51 & 0x80000000) == 0)
  {
    v3 = this->var5->var51;
    if ((v3 & 0x80000000) == 0 && var51 != v3)
      return 0;
  }
  v4 = *((_WORD *)var4 + 170);
  if ((v4 & 2) == 0 && (*((_BYTE *)this->var5 + 340) & 2) == 0)
    return 0;
  if ((v4 & 0x10) == 0 && (*((_BYTE *)this->var5 + 340) & 0x10) == 0)
    return 0;
  if (var4->var52 < 0)
    return this->var5->var52 >= 0;
  return 1;
}

BOOL WrdCharacterTextRun::isOle1Object(WrdCharacterTextRun *this)
{
  BOOL v1;
  WrdCharacterProperties *var4;
  int var56;
  int v5;
  int var53;
  int v7;
  __int16 v8;
  _BOOL8 result;
  WrdCharacterProperties *var5;
  int v11;

  if (!this->var3)
    return 0;
  var4 = this->var4;
  var56 = var4->var56;
  if ((var56 & 0x80000000) == 0)
  {
    v5 = this->var5->var56;
    if ((v5 & 0x80000000) == 0)
    {
      v1 = __OFSUB__(var56, v5);
      if (var56 != v5)
        return 0;
    }
  }
  var53 = var4->var53;
  if ((var53 & 0x80000000) == 0)
  {
    v7 = this->var5->var53;
    if ((v7 & 0x80000000) == 0)
    {
      v1 = __OFSUB__(var53, v7);
      if (var53 != v7)
        return 0;
    }
  }
  v8 = *((_WORD *)var4 + 170);
  if ((v8 & 2) != 0)
  {
    if ((v8 & 0x10) != 0)
      return 0;
    var5 = this->var5;
    v11 = *((_DWORD *)var5 + 85);
    if ((v11 & 0x10) != 0)
      return 0;
  }
  else
  {
    result = 0;
    if ((v8 & 0x10) != 0)
      return result;
    var5 = this->var5;
    v11 = *((_DWORD *)var5 + 85);
    if ((v11 & 2) == 0)
      return result;
    if ((v11 & 0x10) != 0)
      return 0;
  }
  result = 0;
  if ((v8 & 0x20) == 0)
  {
    if (v8 & 4 | v11 & 4)
    {
      result = (v11 & 0x20) == 0;
      if (var56 < 0 && (v11 & 0x20) == 0)
        return (var5->var56 & var53) < 0 == v1 || var5->var53 >= 0;
    }
  }
  return result;
}

uint64_t WrdCharacterTextRun::isSpecialCharacter(WrdCharacterTextRun *this)
{
  if (!this->var3)
    return 0;
  if ((WrdCharacterProperties::isSpecialCharacter(this->var4) & 1) != 0)
    return 1;
  return WrdCharacterProperties::isSpecialCharacter(this->var5);
}

uint64_t WrdCharacterProperties::isSpecialCharacter(WrdCharacterProperties *this)
{
  return (*((unsigned __int8 *)this + 340) >> 1) & 1;
}

void sub_22A17DD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A17DE70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A17DF08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A17DFF0(void *a1, int a2)
{
  void *v2;
  unsigned int *v5;
  void *v6;

  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v6, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A17DFC8);
}

void sub_22A17E070(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A17DFC8);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A17E1F8(_Unwind_Exception *a1)
{
  void *v1;
  OcText *v2;
  void *v3;

  OcText::~OcText(v2);
  _Unwind_Resume(a1);
}

uint64_t WrdText::WrdText(uint64_t a1, int a2, int a3, int a4)
{
  *(_QWORD *)a1 = &off_24F3B40E8;
  OcText::OcText((OcText *)(a1 + 8));
  *(_DWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  return a1;
}

WrdRdrText *WrdBinaryReader::read(WrdBinaryReader *this, WrdText *a2)
{
  WrdRdrText *result;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = (WrdRdrText *)*((_QWORD *)this + 17);
  v3 = *((_DWORD *)result + *((unsigned int *)a2 + 14) + 10);
  v4 = *((_DWORD *)a2 + 5);
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (v6 != 0 && v5)
  {
    if (*((_DWORD *)a2 + 6) > v6)
      *((_DWORD *)a2 + 6) = v6;
    return (WrdRdrText *)WrdRdrText::getText(result, a2);
  }
  else
  {
    *((_DWORD *)a2 + 5) = v3;
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 4) = 0;
  }
  return result;
}

uint64_t WrdRdrText::getText(WrdRdrText *this, WrdText *a2)
{
  uint64_t v2;
  char *v4;
  unsigned int v6;
  unsigned int *v7;
  unsigned int PcdIdxFromCP;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  char v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _DWORD *exception;
  unsigned int v42;

  v2 = *((unsigned int *)a2 + 14);
  if ((int)v2 >= 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v4 = (char *)this + 4 * v2;
  if (!*((_DWORD *)v4 + 10))
    return 0;
  v42 = 0;
  v6 = *((_DWORD *)a2 + 5) + *((_DWORD *)v4 + 2);
  v7 = (unsigned int *)((char *)this + 72);
  PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdRdrText *)((char *)this + 72), v6);
  v9 = 0;
  v10 = *((_DWORD *)this + 18);
  if (v10 - 1 <= PcdIdxFromCP)
    return v9;
  v11 = *((_QWORD *)this + 11);
  if (!v11)
    return 0;
  v12 = PcdIdxFromCP;
  if (v10 <= PcdIdxFromCP + 1)
    v13 = -1;
  else
    v13 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * (PcdIdxFromCP + 1));
  v14 = v11 + 8 * PcdIdxFromCP;
  v15 = (_BYTE *)(v14 + 6);
  v16 = *(_BYTE *)(v14 + 6) & 1;
  if (v16)
    v17 = 1;
  else
    v17 = 1252;
  *((_DWORD *)a2 + 4) = v17;
  v18 = *((_DWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 7))
  {
    if (!v18)
    {
LABEL_14:
      v18 = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 6) = v18 >> (*v15 & 1);
      goto LABEL_24;
    }
  }
  else if (!v18)
  {
    v19 = (v13 - v6) << v16;
    OcText::setMinimumCapacity((OcText *)((char *)a2 + 8), 0x200u);
    v18 = v19 >> (*v15 & 1);
    v7 = (unsigned int *)((char *)this + 72);
    *((_DWORD *)a2 + 6) = v18;
    if (!v18)
      goto LABEL_14;
  }
  if ((*v15 & 1) == 0)
  {
    v20 = *((_DWORD *)a2 + 7);
    if (v20)
      goto LABEL_19;
LABEL_23:
    OcText::setMinimumCapacity((OcText *)((char *)a2 + 8), v18);
    goto LABEL_24;
  }
  v18 *= 2;
  v20 = *((_DWORD *)a2 + 7);
  if (v20 <= 1)
    goto LABEL_23;
LABEL_19:
  if (v20 < v18)
    v18 = v20;
LABEL_24:
  v21 = 0;
  do
  {
    v22 = *(_BYTE *)(v14 + 6);
    v23 = *((_DWORD *)a2 + 4);
    if ((v22 & 1) != 0)
    {
      if (v23 == 1252)
        break;
    }
    else if (v23 == 1)
    {
      break;
    }
    v24 = v12 + 1;
    v25 = *v7;
    if (v12 + 1 >= v25)
      v26 = -1;
    else
      v26 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v24);
    v27 = v22 & 1;
    v28 = (v22 & 1) + 1;
    v29 = (v26 - v6) * v28;
    if (v29 >= v18)
      v30 = v18;
    else
      v30 = v29;
    v42 = v30 >> v27;
    if (v12 >= v25)
      v31 = -1;
    else
      v31 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v12);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), *(_DWORD *)v14 + (v6 - v31) * v28, 0);
    if ((*(_BYTE *)(v14 + 6) & 1) != 0)
    {
      if (v42)
      {
        v32 = 0;
        v33 = *((_QWORD *)a2 + 4) + v21;
        do
          *(_WORD *)(v33 + 2 * v32++) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 80))(*((_QWORD *)this + 12));
        while (v32 < v42);
      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 12) + 56))(*((_QWORD *)this + 12), *((_QWORD *)a2 + 4) + v21, &v42);
    }
    v21 += v30;
    v7 = (unsigned int *)((char *)this + 72);
    v34 = (*((_DWORD *)this + 18) - 1);
    if (v12 < v34 || v24 >= v34)
      break;
    v6 += v42;
    v14 = *((_QWORD *)this + 11) + 8 * v24;
    ++v12;
    v18 -= v30;
  }
  while (v18);
  LODWORD(v9) = v21 >> (OcText::isSingleByteEncoding(*((_DWORD *)a2 + 4)) ^ 1);
  v36 = *((_DWORD *)a2 + 5);
  v37 = v9 + v36;
  v38 = *((_DWORD *)this + *((unsigned int *)a2 + 14) + 10);
  v39 = v38 - v36;
  if (v37 <= v38)
    v9 = v9;
  else
    v9 = v39;
  *((_DWORD *)a2 + 6) = v9;
  return v9;
}

void OcText::setMinimumCapacity(OcText *this, unsigned int a2)
{
  if (this->var4 < a2)
    OcText::allocBuffer(this, a2, 1);
}

void WrdCharacterTextRun::~WrdCharacterTextRun(WrdCharacterTextRun *this)
{
  WrdCharacterProperties *var4;
  WrdCharacterProperties *var5;

  this->var0 = (void **)&off_24F3B2910;
  var4 = this->var4;
  if (var4)
    (*((void (**)(WrdCharacterProperties *))var4->var0 + 1))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*((void (**)(WrdCharacterProperties *))var5->var0 + 1))(var5);
  this->var5 = 0;
}

{
  WrdCharacterTextRun::~WrdCharacterTextRun(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A17E778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A17E844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

int *WrdCharacterProperties::setOffsetToPictureData(WrdCharacterProperties *this, int a2)
{
  int *result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (int *)&this->var2 + 2;
  *result = v3 | 0x40;
  result[62] = a2;
  return result;
}

int *WrdCharacterProperties::setOffsetToFormFieldData(WrdCharacterProperties *this, int a2)
{
  int *result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (int *)&this->var2 + 2;
  *result = v3 | 0x80;
  result[63] = a2;
  return result;
}

int *WrdCharacterProperties::setObjectIDForOLE2(WrdCharacterProperties *this, int a2)
{
  int *result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (int *)&this->var2 + 2;
  *result = v3 | 0x200;
  result[70] = a2;
  return result;
}

uint64_t WrdCharacterProperties::setOffsetToOLEObjectData(WrdCharacterProperties *this, int a2)
{
  uint64_t result;
  int v3;
  __int16 v4;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  v4 = *(_WORD *)(result + 4);
  *(_DWORD *)result = v3;
  *(_WORD *)(result + 4) = v4 | 8;
  *(_DWORD *)(result + 268) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setSpecialCharacter(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x40000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFD | (2 * (a2 & 1));
  return this;
}

uint64_t OcText::getCharacter(OcText *this, unsigned int a2)
{
  char *var5;
  _DWORD *exception;

  var5 = this->var5;
  if (!var5 || this->var3 <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  if (OcText::isSingleByteEncoding(this->var1))
    return var5[a2];
  else
    return *(unsigned __int16 *)&var5[2 * a2];
}

BOOL WrdCharacterProperties::isPicture(WrdCharacterProperties *this)
{
  return (*((_DWORD *)this + 85) & 0x36) == 2 && this->var51 >= 0;
}

void WrdPictureProperties::WrdPictureProperties(WrdPictureProperties *this, WrdBorder *a2, WrdBorder *a3, WrdBorder *a4, WrdBorder *a5)
{
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a3;
  *(_QWORD *)this = &off_24F3B3AC0;
  *((_QWORD *)this + 1) = &unk_24F3B3AF0;
  *((_QWORD *)this + 6) = a4;
  *((_QWORD *)this + 7) = a5;
  *((_OWORD *)this + 1) = xmmword_22A4D2AE0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 26) = 0;
}

double WrdPictureProperties::reset(WrdPictureProperties *this)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *((_OWORD *)this + 1) = xmmword_22A4D2AE0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 26) = 0;
  return result;
}

uint64_t WrdParser::parse(WrdParser *this, WrdPictureProperties *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v6;
  signed int v7;
  __int16 v8;
  __int16 v9;
  WrdBorder *BorderReference;
  WrdBorder *v11;
  WrdBorder *v12;
  WrdBorder *v13;

  result = *((_QWORD *)this + 15);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, a3, 0);
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 96))(*((_QWORD *)this + 15));
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    if ((v6 & 0x80000000) != 0
      || (v8 = v7, v7 < 0)
      || (int)v6 < v7
      || v6 > (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 15) + 48))(*((_QWORD *)this + 15)))
    {
      v8 = 0;
      v6 = 0;
    }
    *((_DWORD *)a2 + 19) = v6;
    *((_WORD *)a2 + 45) = v8;
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 34) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 35) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 44) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15), 14, 1);
    *((_WORD *)a2 + 36) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 37) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 46) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 47) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 40) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 41) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 42) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 43) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_BYTE *)a2 + 104) = (v9 & 0x10) != 0;
    *((_BYTE *)a2 + 105) = (v9 & 0x20) != 0;
    *((_BYTE *)a2 + 106) = (v9 & 0x40) != 0;
    *((_BYTE *)a2 + 107) = (v9 & 0x80) != 0;
    *((_DWORD *)a2 + 7) = HIBYTE(v9);
    BorderReference = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 1);
    WrdBaseParser::parseBRC80(this, BorderReference, *((SsrwOOStream **)this + 15));
    v11 = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 0);
    WrdBaseParser::parseBRC80(this, v11, *((SsrwOOStream **)this + 15));
    v12 = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 3);
    WrdBaseParser::parseBRC80(this, v12, *((SsrwOOStream **)this + 15));
    v13 = (WrdBorder *)WrdPictureProperties::getBorderReference((uint64_t *)a2, 2);
    WrdBaseParser::parseBRC80(this, v13, *((SsrwOOStream **)this + 15));
    *((_WORD *)a2 + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    *((_WORD *)a2 + 33) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15), 2, 1);
  }
  return result;
}

uint64_t WrdPictureProperties::getBorderReference(uint64_t *a1, int a2)
{
  uint64_t *v2;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v2 = a1 + 5;
      goto LABEL_7;
    case 1:
      v2 = a1 + 4;
      goto LABEL_7;
    case 2:
      v2 = a1 + 7;
      goto LABEL_7;
    case 3:
      v2 = a1 + 6;
LABEL_7:
      result = *v2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WrdBaseParser::parseBRC80(WrdBaseParser *this, WrdBorder *a2, SsrwOOStream *a3)
{
  SsrwOOStream *v3;
  unsigned int v5;
  uint64_t result;

  v3 = a3;
  v5 = (*((uint64_t (**)(SsrwOOStream *))a3->var0 + 10))(a3);
  LODWORD(v3) = (*((uint64_t (**)(SsrwOOStream *))v3->var0 + 10))(v3);
  a2->var6 = v5;
  a2->var2 = v5 >> 8;
  result = WrdProperty::convertWord97ColorEnumToColor(v3, (uint64_t)&a2->var1);
  a2->var3 = v3;
  a2->var7 = BYTE1(v3) & 0x1F;
  *((_BYTE *)a2 + 24) = *((_BYTE *)a2 + 24) & 0xFC | (v3 >> 13) & 3;
  return result;
}

void WrdPictureProperties::~WrdPictureProperties(WrdPictureProperties *this)
{
  WrdPictureProperties::~WrdPictureProperties(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F3B3AC0;
  *((_QWORD *)this + 1) = &unk_24F3B3AF0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 6) = 0;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 7) = 0;
}

void sub_22A17EEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A17F0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WrdCharacterProperties *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;

  WrdCharacterProperties::~WrdCharacterProperties((WrdCharacterProperties *)&a14);
  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a9);

  _Unwind_Resume(a1);
}

void WrdCharacterProperties::WrdCharacterProperties(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  WrdCharacterPropertiesOverridden v4;

  this->var0 = (void **)&off_24F3B2878;
  this->var1 = (void **)&unk_24F3B28A8;
  *(_QWORD *)&v4 = 255;
  *((_QWORD *)&v4 + 1) = 255;
  *(WrdCharacterPropertiesOverridden *)((char *)&this->var2 + 14) = v4;
  CsString::CsString(&this->var5);
  this->var6 = (WrdShading *)(*((uint64_t (**)(WrdShading *))a2->var6->var0 + 2))(a2->var6);
  this->var7 = (WrdBorder *)(*((uint64_t (**)(WrdBorder *))a2->var7->var0 + 2))(a2->var7);
  this->var8 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var12->var0 + 2))(a2->var12);
  this->var9 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var9->var0 + 2))(a2->var9);
  this->var10 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var10->var0 + 2))(a2->var10);
  this->var11 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var11->var0 + 2))(a2->var11);
  this->var12 = (WrdDateTime *)(*((uint64_t (**)(WrdDateTime *))a2->var12->var0 + 2))(a2->var12);
  WrdCharacterProperties::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_22A17F214(_Unwind_Exception *a1)
{
  CsString *v1;

  CsString::~CsString(v1);
  _Unwind_Resume(a1);
}

BOOL WrdCharacterProperties::isOle2Object(WrdCharacterProperties *this)
{
  return (*((_DWORD *)this + 85) & 0x36) == 0x26 && this->var59 != 0;
}

void sub_22A17F928(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, OcBinaryData *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int *v28;
  void *v29;

  WrdPictureProperties::~WrdPictureProperties((WrdPictureProperties *)&a24);
  if (a2 == 3)
  {
    v28 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v28);
    __cxa_end_catch();
  }
  else
  {
    v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v29, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A17F8ECLL);
}

void sub_22A17FB24(void *exc_buf, int a2)
{
  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A17FAF8);
  }
  JUMPOUT(0x22A17FB98);
}

void sub_22A17FB80()
{
  objc_end_catch();
  JUMPOUT(0x22A17FB98);
}

void WrdPictureProperties::WrdPictureProperties(WrdPictureProperties *this)
{
  WrdBorder *v2;
  WrdBorder *v3;
  WrdBorder *v4;
  WrdBorder *v5;

  *(_QWORD *)this = &off_24F3B3AC0;
  *((_QWORD *)this + 1) = &unk_24F3B3AF0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  v2 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v2);
  *((_QWORD *)this + 4) = v2;
  v3 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v3);
  *((_QWORD *)this + 5) = v3;
  v4 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v4);
  *((_QWORD *)this + 6) = v4;
  v5 = (WrdBorder *)operator new(0x20uLL);
  WrdBorder::WrdBorder(v5);
  *((_QWORD *)this + 7) = v5;
  (*(void (**)(WrdPictureProperties *))(*(_QWORD *)this + 16))(this);
}

void sub_22A17FCEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void WrdBinaryReader::read(WrdBinaryReader *this, WrdPictureProperties *a2)
{
  unsigned int v2;
  unsigned int v5;
  char *v6;
  char *v7;
  uint64_t *i;
  unsigned int v9;
  _DWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int PcdIdxFromCP;
  uint64_t v17;
  uint64_t v18;
  _DWORD *exception;
  int v20;
  unsigned int v21;
  unsigned int *v22;

  v2 = *((_DWORD *)a2 + 4);
  if ((v2 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    v20 = 1004;
    goto LABEL_22;
  }
  v5 = *((_DWORD *)a2 + 5);
  v21 = *((_DWORD *)a2 + 4);
  v6 = (char *)this + 24 * v5;
  v7 = v6 + 224;
  for (i = (uint64_t *)*((_QWORD *)v6 + 29); i; i = (uint64_t *)*i)
  {
    v9 = *((_DWORD *)i + 7);
    if (v2 >= v9)
    {
      if (v9 >= v2)
        goto LABEL_15;
      ++i;
    }
  }
  v10 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 4) + 280) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 280), 11);
  v10[2] = v5;
  v10[3] = v2;
  (*(void (**)(WrdBinaryReader *, _DWORD *))(*(_QWORD *)this + 192))(this, v10);
  v11 = (uint64_t *)*((_QWORD *)v7 + 1);
  if (!v11)
  {
LABEL_12:
    v13 = __cxa_allocate_exception(4uLL);
    *v13 = 1004;
  }
  while (1)
  {
    v12 = *((_DWORD *)v11 + 7);
    if (v2 >= v12)
      break;
LABEL_11:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_12;
  }
  if (v12 < v2)
  {
    ++v11;
    goto LABEL_11;
  }
  if (v10)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
LABEL_15:
  v22 = &v21;
  v14 = *((unsigned int *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v7, &v21, (uint64_t)&std::piecewise_construct, &v22)+ 8);
  *((_DWORD *)this + 152) = v14;
  WrdParser::parse(*((WrdParser **)this + 4), a2, v14);
  v15 = *((unsigned __int16 *)a2 + 45);
  *((_DWORD *)this + 153) = *((_DWORD *)this + 152) + v15;
  *((_DWORD *)this + 154) = *((_DWORD *)a2 + 19) - v15;
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + 186) & 4) != 0)
  {
    PcdIdxFromCP = WrdPieceTable::getPcdIdxFromCP((WrdPieceTable *)(*((_QWORD *)this + 17) + 72), *((_DWORD *)a2 + 4));
    v17 = *((_QWORD *)this + 17);
    if (*(_DWORD *)(v17 + 72) - 1 > PcdIdxFromCP)
    {
      v18 = *(_QWORD *)(v17 + 88);
      if (v18)
      {
        WrdParser::applyPiece(*((int **)this + 4), v18 + 8 * PcdIdxFromCP, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t *)a2);
        goto LABEL_19;
      }
    }
    exception = __cxa_allocate_exception(4uLL);
    v20 = 1005;
LABEL_22:
    *exception = v20;
  }
LABEL_19:
  EshBinaryReader::finish((WrdBinaryReader *)((char *)this + 40));
}

void sub_22A17FF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22A1803C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A180584(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

EshAtom *WrdEshObjectFactory::createObject(WrdEshObjectFactory *this, EshObject *a2, int a3)
{
  EshAtom *Object;
  char *v6;
  _DWORD *exception;

  if ((int)a2 > 61452)
  {
    switch((_DWORD)a2)
    {
      case 0xF00D:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF00Du, 0);
        break;
      case 0xF010:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF010u, 0);
        break;
      case 0xF011:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF011u, 0);
        break;
      default:
        goto LABEL_15;
    }
    *(_QWORD *)Object = v6 + 16;
    *((_DWORD *)Object + 7) = 0;
    goto LABEL_17;
  }
  switch((_DWORD)a2)
  {
    case 6:
      Object = (EshAtom *)operator new(0x180uLL);
      WrdEshGroup::WrdEshGroup(Object);
      (*(void (**)(EshAtom *))(*(_QWORD *)Object + 120))(Object);
      goto LABEL_17;
    case 7:
      Object = (EshAtom *)operator new(0x258uLL);
      WrdEshShape::WrdEshShape(Object);
      goto LABEL_16;
    case 0xC:
      Object = (EshAtom *)operator new(0x150uLL);
      WrdEshBackground::WrdEshBackground(Object);
      goto LABEL_16;
  }
LABEL_15:
  Object = EshObjectFactory::createObject((EshObjectFactory *)this, (int)a2, a3);
LABEL_16:
  if (!Object)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1001;
  }
LABEL_17:
  EshObjectFactory::verifyTypeAndVersionOfObject((EshObjectFactory *)Object, a2, a3);
  return Object;
}

void sub_22A1807F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'WrdBinaryReader::read(WrdBinaryReader *this, EshRoot *a2)
{
  return WrdBinaryReader::read((WrdBinaryReader *)((char *)this - 8), a2);
}

uint64_t WrdBinaryReader::read(WrdBinaryReader *this, EshRoot *a2)
{
  if ((*((_DWORD *)this + 47) & 0xFFFFFFFE) != 4)
    EshBinaryReader::read((WrdBinaryReader *)((char *)this + 40), a2);
  return WrdBinaryReader::readPicture(this, a2);
}

uint64_t WrdBinaryReader::readPicture(WrdBinaryReader *this, EshRoot *a2)
{
  uint64_t result;
  int v5;
  SsrwOOStream *v6;
  uint64_t v7;
  unsigned int v8;

  result = (*(uint64_t (**)(EshRoot *, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0);
  v5 = *((_DWORD *)this + 154);
  if (v5)
  {
    *((_DWORD *)this + 156) = 4;
    v6 = *(SsrwOOStream **)(*((_QWORD *)this + 4) + 120);
    v7 = *((unsigned int *)this + 153);
    if (*((_DWORD *)this + 47) == 4)
    {
      (*((void (**)(_QWORD, uint64_t, _QWORD))v6->var0 + 2))(*(_QWORD *)(*((_QWORD *)this + 4) + 120), v7, 0);
      goto LABEL_5;
    }
    v8 = v7 + v5;
    result = (*((uint64_t (**)(_QWORD))v6->var0 + 5))(*(_QWORD *)(*((_QWORD *)this + 4) + 120));
    if (v8 > result)
    {
LABEL_5:
      WrdEshReader::start((WrdBinaryReader *)((char *)this + 40), v6);
      *((_DWORD *)this + 156) = 4;
      EshBinaryReader::read((WrdBinaryReader *)((char *)this + 40), a2);
    }
  }
  return result;
}

uint64_t WrdEshReader::start(WrdEshReader *this, SsrwOOStream *a2)
{
  EshClientDataModelVisitor *v4;

  EshBinaryReader::start(this, a2);
  v4 = (EshClientDataModelVisitor *)operator new(0x10uLL);
  EshClientDataModelVisitor::EshClientDataModelVisitor(v4);
  *(_QWORD *)v4 = &unk_24F3B48E8;
  *((_QWORD *)v4 + 1) = a2;
  return EshDataModelVisitor::takeClientVisitor(*((_QWORD *)this + 2), (uint64_t)v4);
}

void sub_22A18097C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EshClientDataModelVisitor::EshClientDataModelVisitor(EshClientDataModelVisitor *this)
{
  *(_QWORD *)this = &off_24F39E770;
}

void sub_22A180B0C()
{
  JUMPOUT(0x22A180B1CLL);
}

void sub_22A180BF0(void *a1, int a2)
{
  void *v2;
  void *v4;
  unsigned int *v6;
  void *v7;

  v4 = v2;

  if (a2 == 3)
  {
    v6 = (unsigned int *)__cxa_begin_catch(a1);
    OAConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    v7 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v7, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A180BBCLL);
}

void sub_22A180C7C(void *exc_buf, int a2)
{
  uint64_t v2;

  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    objc_end_catch();
    JUMPOUT(0x22A180BD4);
  }
  JUMPOUT(0x22A180C10);
}

void WrdEshShape::WrdEshShape(WrdEshShape *this)
{
  _QWORD *v1;

  EshShape::EshShape((EshShape *)this);
  *v1 = &off_24F3B30E0;
  v1[52] = &unk_24F3B31B0;
  v1[72] = 0;
  v1[74] = 0;
  v1[73] = 0;
}

void `non-virtual thunk to'WrdBinaryReader::read(OcBinaryReader *this, EshObject *a2)
{
  WrdBinaryReader::read(this - 1, a2);
}

void WrdBinaryReader::read(OcBinaryReader *this, EshObject *a2)
{
  EshBSE *v4;

  EshBinaryReader::read((EshBinaryReader *)&this[5], a2);
  if (LODWORD(this[78].var0) == 24 && (*((unsigned int (**)(EshObject *))a2->var0 + 2))(a2) == 61447)
  {
    if (v4)
      OcBinaryReader::loadBlip(this, v4, *((SsrwOOStream **)this[4].var0 + 14));
  }
}

uint64_t EshColor::systemIndex(uint64_t result, uint64_t a2, char a3, char a4, int a5, int a6, int a7)
{
  char v7;
  char v8;
  char v9;
  char v10;

  *(_DWORD *)a2 = 34;
  *(_BYTE *)(a2 + 4) = result;
  v7 = *(_BYTE *)(a2 + 6) & 0x80;
  *(_BYTE *)(a2 + 5) = a4;
  if (a5)
    v8 = 16;
  else
    v8 = 0;
  if (a6)
    v9 = 32;
  else
    v9 = 0;
  if (a7)
    v10 = 64;
  else
    v10 = 0;
  *(_BYTE *)(a2 + 6) = v8 & 0xF0 | a3 & 0xF | v9 | v10 | v7;
  return result;
}

char *WrdEshReader::readClientAnchor(WrdEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  EshAtom *v6;
  char *result;
  EshAtom **v8;
  _DWORD *exception;

  v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF010u, 0);
  *(_QWORD *)v6 = &unk_24F3B2D88;
  *((_DWORD *)v6 + 7) = 0;
  (*(void (**)(WrdEshReader *, EshAtom *, const EshHeader *))(*(_QWORD *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    v8 = (EshAtom **)(result + 576);
  }
  else
  {
    if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 6)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 0;
    }
    v8 = (EshAtom **)(result + 368);
  }
  *v8 = v6;
  return result;
}

void sub_22A180F14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdEshClientAnchor::accept(uint64_t a1, void *lpsrc)
{
  EshDataModelVisitor *v3;
  const void *ClientVisitor;
  void *v5;

  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v3);
  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1);
}

uint64_t EshDataModelVisitor::getClientVisitor(EshDataModelVisitor *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WrdEshParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  return 1;
}

{
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  return 1;
}

{
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  *(_WORD *)(a2 + 30) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t EshShapeImageData::getGrayScale(EshShapeImageData *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x13Du);
}

void sub_22A1810BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getBilevel(EshShapeImageData *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x13Eu);
}

void sub_22A181228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A18165C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isTextIDSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x80u);
}

uint64_t EshShapeImageData::isOLEIDSet(EshShapeImageData *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x10Bu);
}

void WrdEshParserVisitor::~WrdEshParserVisitor(WrdEshParserVisitor *this)
{
  EshClientDataModelVisitor::EshClientDataModelVisitor(this);
  JUMPOUT(0x22E2DD408);
}

unint64_t WrdParagraphProperties::doRevisionsExist(WrdParagraphProperties *this)
{
  return ((unint64_t)*((unsigned __int16 *)this + 12) >> 9) & 1;
}

uint64_t WrdTableProperties::doRevisionsExist(WrdTableProperties *this)
{
  return *((_DWORD *)this + 4) & 1;
}

void sub_22A1818AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A18191C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1819F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22A181B64(_Unwind_Exception *a1, WrdCharacterTextRun *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a10);
  _Unwind_Resume(a1);
}

uint64_t WrdCharacterProperties::setFieldVanish(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x2000000000uLL;
  *(_DWORD *)(result + 216) = a2;
  return result;
}

WrdCharacterProperties *WrdCharacterProperties::setData(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x200000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFEF | (16 * (a2 & 1));
  return this;
}

BOOL WrdCharacterProperties::isFormFieldData(WrdCharacterProperties *this)
{
  return (~*((_DWORD *)this + 85) & 0x12) == 0 && this->var52 >= 0;
}

BOOL WrdCharacterProperties::isOle1Object(WrdCharacterProperties *this)
{
  if ((*((_DWORD *)this + 85) & 0x36) != 6)
    return 0;
  if (this->var56 < 0)
    return this->var53 >= 0;
  return 1;
}

WrdCharacterProperties *WrdCharacterProperties::setStyleIndex(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x8000000uLL;
  this->var72 = a2;
  return this;
}

void sub_22A181D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A181E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A181F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A181FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A182078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setOle2(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x400000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFDF | (32 * (a2 & 1));
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setEmbeddedObject(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x80000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFB | (4 * (a2 & 1));
  return this;
}

void sub_22A18222C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void EshMetafileBlip::EshMetafileBlip(EshMetafileBlip *this, unsigned __int16 a2)
{
  *(_QWORD *)EshBlipT<EshMetafileBlipInfo>::EshBlipT((uint64_t)this, a2) = &off_24F39EE38;
}

uint64_t EshBlipT<EshMetafileBlipInfo>::EshBlipT(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;

  EshBlip::EshBlip((EshBlip *)a1, a2);
  *(_QWORD *)v3 = &off_24F39EEF8;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = v3 + 20;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 72));
  *(_WORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 152) = -258;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 192));
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 272) = -258;
  return a1;
}

void sub_22A182324(_Unwind_Exception *a1)
{
  EshBlip *v1;
  OcBinaryData *v2;

  OcBinaryData::~OcBinaryData(v2);
  EshBlip::~EshBlip(v1);
  _Unwind_Resume(a1);
}

uint64_t EshMetafileBlip::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 64))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshMetafileBlip *a2)
{
  uint64_t v4;
  int Offset;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 28));
  if ((**((_WORD **)a2 + 6) & 1) != 0)
    EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 56));
  EshParserVisitor::parseMetafileInfo(this, (uint64_t)a2 + 48);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  v7 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v6 < v7)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
    **((_WORD **)a2 + 21) = v8;
    if ((v8 & 1) != 0)
      EshParserVisitor::parseBlipUid(this, (UID *)a2 + 11);
    EshParserVisitor::parseMetafileInfo(this, (uint64_t)a2 + 168);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3)) != v7)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 7005;
    }
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t EshParserVisitor::parseMetafileInfo(EshParserVisitor *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD **)a1 + 3));
  v4 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD **)a1 + 3));
  v5 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD **)a1 + 3));
  v6 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD **)a1 + 3));
  v7 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD **)a1 + 3));
  *(_DWORD *)(a2 + 76) = v4;
  *(_DWORD *)(a2 + 80) = v5;
  *(_DWORD *)(a2 + 84) = v6;
  *(_DWORD *)(a2 + 88) = v7;
  v8 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD **)a1 + 3));
  v9 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 96))(*((_QWORD **)a1 + 3));
  *(_DWORD *)(a2 + 92) = v8;
  *(_DWORD *)(a2 + 96) = v9;
  *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 104))(*((_QWORD **)a1 + 3));
  *(_BYTE *)(a2 + 104) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 64))(*((_QWORD **)a1 + 3));
  *(_BYTE *)(a2 + 105) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 64))(*((_QWORD **)a1 + 3));
  return EshParserVisitor::delayReadData(a1, (OcBinaryData *)(a2 + 24), *(unsigned int *)(a2 + 100));
}

void sub_22A1826B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WrdBinaryReader::getObjectPoolStorage(WrdBinaryReader *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 136);
}

void sub_22A18299C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;

  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)&a9);
  objc_begin_catch(a1);
  if (!v9)
    JUMPOUT(0x22A182964);
  JUMPOUT(0x22A18293CLL);
}

uint64_t SsrwOORootStorage::createInBuf(SsrwOORootStorage *this, void **a2, unsigned int a3, void *(*a4)(void *, unint64_t), int8x8_t a5)
{
  uint64_t result;
  int v7;
  _DWORD *exception;

  LODWORD(result) = createStructuredStorageInBuf(a2, a3, (uint64_t)a4, 1, (uint64_t *)this + 10, a5);
  if ((_DWORD)result || (result = getStorageFromRoot(*((_QWORD *)this + 10), this), (_DWORD)result))
  {
    v7 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v7;
  }
  return result;
}

uint64_t createStructuredStorageInBuf(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, uint64_t *a5, int8x8_t a6)
{
  return createStructuredStorageInBufEx(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t createStructuredStorageInBufEx(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, uint64_t *a5, unsigned int a6, int8x8_t a7)
{
  uint64_t StructuredStorageInternal;
  uint8x8_t v10;
  _DWORD *v12;
  _QWORD *v13;

  if (!a1)
    return 6;
  StructuredStorageInternal = 6;
  if (a5)
  {
    if (a3)
    {
      if (*a1)
      {
        a7.i32[0] = a6;
        v10 = (uint8x8_t)vcnt_s8(a7);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.i32[0] <= 1u)
        {
          if ((a4 - 1) > 1)
          {
            return 2;
          }
          else
          {
            v12 = SsrwOpenMemForReadWrite((uint64_t)a1, a2, a3);
            if (v12)
            {
              v13 = v12;
              StructuredStorageInternal = createStructuredStorageInternal((uint64_t)v12, a4, a5, 1, a6);
              if ((_DWORD)StructuredStorageInternal)
                SsrwFclose(v13);
            }
            else
            {
              return 4;
            }
          }
        }
      }
    }
  }
  return StructuredStorageInternal;
}

_DWORD *SsrwOpenMemForReadWrite(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *result;

  result = malloc_type_malloc(0x60uLL, 0x10A2040658F7E63uLL);
  if (result)
  {
    result[11] = 0;
    *(_DWORD *)((char *)result + 41) = 0;
    *((_QWORD *)result + 6) = SsrwMemFread;
    *((_QWORD *)result + 7) = SsrwMemFwrite;
    *((_QWORD *)result + 8) = SsrwMemFclose;
    *((_QWORD *)result + 9) = SsrwMemFseek;
    *((_QWORD *)result + 10) = SsrwMemFtell;
    *((_QWORD *)result + 11) = SsrwMemFtruncate;
    *(_QWORD *)result = a1;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = a2;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = a3;
    *((_BYTE *)result + 40) = 3;
  }
  return result;
}

uint64_t createStructuredStorageInternal(uint64_t a1, int a2, uint64_t *a3, char a4, unsigned int a5)
{
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  void *v14;
  char SectorShift;
  uint64_t v16;
  uint64_t v17;
  char SmallSectorShift;
  uint64_t v19;

  if ((a5 & (a5 - 1)) != 0)
    return 6;
  if ((a2 - 1) > 1)
    return 2;
  v10 = malloc_type_malloc(0x70uLL, 0x10300407518E08AuLL);
  if (!v10)
    return 5;
  v11 = (uint64_t)v10;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  if (a5)
    v12 = a5;
  else
    v12 = 512;
  *v10 = 0uLL;
  rootStorageInit((uint64_t)v10, 1, v12);
  v13 = 1 << headerGetSectorShift(*(_QWORD *)(v11 + 16));
  v14 = malloc_type_malloc(v13, 0xAAE849AFuLL);
  *(_QWORD *)(v11 + 80) = v14;
  if (!v14)
  {
    closeStg((char *)v11);
    return 5;
  }
  bzero(v14, v13);
  SectorShift = headerGetSectorShift(*(_QWORD *)(v11 + 16));
  v16 = fatConstruct(v11, (_QWORD *)(v11 + 24), 1 << SectorShift);
  if ((_DWORD)v16)
  {
    v17 = v16;
  }
  else
  {
    *(_QWORD *)v11 = a1;
    *(_DWORD *)(v11 + 56) = a2;
    SmallSectorShift = headerGetSmallSectorShift(*(_QWORD *)(v11 + 16));
    v19 = fatConstruct(v11, (_QWORD *)(v11 + 32), 1 << SmallSectorShift);
    if ((_DWORD)v19)
    {
      v17 = v19;
    }
    else
    {
      storageCreateAtRoot(v11, (uint64_t *)(v11 + 48));
      v17 = rootStorageInitWrite((uint64_t *)v11);
      if (!(_DWORD)v17)
      {
        *(_BYTE *)(v11 + 8) = a4;
        *a3 = v11;
        return v17;
      }
    }
    *(_QWORD *)v11 = 0;
  }
  closeStg((char *)v11);
  return v17;
}

uint64_t storageCreateAtRoot(uint64_t a1, uint64_t *a2)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t TOC;
  uint64_t v7;
  unsigned int Index;
  int v10[2];

  *(_QWORD *)v10 = 0;
  inited = 6;
  if (a1)
  {
    if (a2)
    {
      inited = storageConstruct(a2);
      if (!(_DWORD)inited)
      {
        v5 = *a2;
        *(_QWORD *)v5 = a1;
        *(_QWORD *)(v5 + 16) = 0;
        TOC = rootStorageGetTOC(a1);
        v7 = tocAddEntry(TOC, (uint64_t *)v10);
        if ((_DWORD)v7)
        {
          inited = v7;
        }
        else
        {
          inited = directoryInitEntry(*(uint64_t *)v10, L"Root Entry", 5, a1);
          Index = directoryGetIndex(*(uint64_t *)v10);
          if (!(_DWORD)inited)
          {
            *(_DWORD *)(v5 + 8) = Index;
            *(_DWORD *)(v5 + 32) = headerGetSmallStreamCutoff(a1);
            return inited;
          }
          tocInvalidateEntry(TOC, Index);
        }
        storageDestroy((uint64_t)a2);
      }
    }
  }
  return inited;
}

uint64_t tocAddEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  size_t v18;
  size_t v19;
  char *v21;

  v4 = *(unsigned int *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8))
  {
    v5 = 1;
    do
    {
      v6 = v5 - 1;
      v7 = directoryGetAtIndex(*(_QWORD *)a1, v5 - 1);
      if (directoryGetType(v7))
        v6 = -1;
    }
    while (v6 == -1 && v5++ < *(_DWORD *)(a1 + 8));
    if (v6 != -1)
      goto LABEL_18;
    v6 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v6 = 0;
  }
  v9 = v4 >> 7;
  if (v6 % v9)
  {
LABEL_17:
    *(_DWORD *)(a1 + 8) = v6 + 1;
LABEL_18:
    v16 = directoryGetAtIndex(*(_QWORD *)a1, v6);
    *a2 = v16;
    directoryConstructEntry(v6, v16);
    return 0;
  }
  v10 = *(_QWORD *)a1;
  v11 = sizeOfDirectoryEntry();
  if (v10)
  {
    v12 = (void *)(v10 - v11);
    v13 = v9 + *(_DWORD *)(a1 + 8);
    v14 = sizeOfDirectoryEntry();
    v15 = (char *)malloc_type_realloc(v12, (v14 + v14 * v13), 0x98484FA3uLL);
    if (v15)
    {
LABEL_16:
      *(_QWORD *)a1 = &v15[(int)sizeOfDirectoryEntry()];
      v6 = *(_DWORD *)(a1 + 8);
      goto LABEL_17;
    }
  }
  else if (v11)
  {
    v18 = v11;
    v19 = ((int)v9 + 1) * (uint64_t)v11;
    if (v19 >= v9 + 1 && v19 >= v18)
    {
      v21 = (char *)malloc_type_malloc(v19, 0xBF89B1ADuLL);
      if (v21)
      {
        v15 = v21;
        directoryConstructNilEntry((uint64_t)v21);
        goto LABEL_16;
      }
    }
  }
  return 5;
}

uint64_t directoryConstructNilEntry(uint64_t a1)
{
  directoryConstructEntry(-1, a1);
  *(_BYTE *)(a1 + 88) = 1;
  return 0;
}

uint64_t directoryInitEntry(uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t result;

  v8 = _ChWcslen(a2) + 1;
  if (v8 > 0x20)
    return 6;
  *(_WORD *)(a1 + 80) = 2 * v8;
  _ChWcscpy((_WORD *)(a1 + 16), a2);
  result = 0;
  *(_DWORD *)(a1 + 84) = a3;
  *(_QWORD *)a1 = a4;
  return result;
}

uint64_t headerWrite(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;

  v4 = (char *)malloc_type_malloc(0x4CuLL, 0x3C3384A1uLL);
  if (!v4)
    return 5;
  v5 = (uint64_t)v4;
  *(_QWORD *)v4 = 0xE11AB1A1E011CFD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 24), (_WORD *)v4 + 12);
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 26), (_WORD *)(v5 + 26));
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 28), (_WORD *)(v5 + 28));
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 30), (_WORD *)(v5 + 30));
  CsLeWriteUInt16(*(unsigned __int16 *)(a2 + 32), (_WORD *)(v5 + 32));
  v6 = *(_DWORD *)(a2 + 34);
  *(_WORD *)(v5 + 38) = *(_WORD *)(a2 + 38);
  *(_DWORD *)(v5 + 34) = v6;
  CsLeWriteUInt32(*(unsigned int *)(a2 + 40), (_DWORD *)(v5 + 40));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 44), (_DWORD *)(v5 + 44));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 48), (_DWORD *)(v5 + 48));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 52), (_DWORD *)(v5 + 52));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 56), (_DWORD *)(v5 + 56));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 60), (_DWORD *)(v5 + 60));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 64), (_DWORD *)(v5 + 64));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 68), (_DWORD *)(v5 + 68));
  CsLeWriteUInt32(*(unsigned int *)(a2 + 72), (_DWORD *)(v5 + 72));
  if (SsrwFseek(a1))
  {
    free((void *)v5);
    return 4;
  }
  else
  {
    v8 = SsrwFwrite(v5, 76, 1, a1) != 1;
    free((void *)v5);
    return (4 * v8);
  }
}

uint64_t CsLeWriteUInt16(uint64_t result, _WORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t SsrwFwrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(void);

  if (a4 && a1 && (v4 = *(uint64_t (**)(void))(a4 + 56)) != 0)
    return v4();
  else
    return 0;
}

uint64_t SsrwMemFwrite(void *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = 0;
  if (__src && a4)
  {
    if ((*(_BYTE *)(a4 + 40) & 2) != 0)
    {
      v7 = a3;
      v9 = a3 * a2;
      v10 = *(_QWORD *)(a4 + 16);
      v11 = *(_DWORD *)(a4 + 8) + a3 * a2;
      if ((int)v10 >= v11)
      {
        v12 = *(_QWORD *)(a4 + 16);
      }
      else
      {
        v12 = *(_QWORD *)(a4 + 16);
        do
        {
          LODWORD(v12) = 2 * v12;
          if ((int)v12 <= 1024)
            LODWORD(v12) = 1024;
        }
        while ((int)v12 < v11);
      }
      if (v10 != (int)v12)
      {
        v10 = (int)v12;
        v13 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 32))(**(_QWORD **)a4, (int)v12);
        if (v13)
        {
          **(_QWORD **)a4 = v13;
          *(_QWORD *)(a4 + 16) = v10;
        }
        else
        {
          v10 = *(_QWORD *)(a4 + 16);
        }
      }
      v14 = *(_QWORD *)(a4 + 24);
      v15 = v10 - v14;
      v16 = (int)v9;
      if ((int)v9 > v15)
      {
        v7 = (int)(v15 / (int)a2);
        v9 = v7 * a2;
        v16 = (int)v7 * (int)a2;
      }
      memcpy((void *)(**(_QWORD **)a4 + v14), __src, v9);
      v17 = *(_QWORD *)(a4 + 24) + v16;
      *(_QWORD *)(a4 + 24) = v17;
      if (v17 > *(_QWORD *)(a4 + 8))
        *(_QWORD *)(a4 + 8) = v17;
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void copyStorageToStorage(SsrwOOStorage *a1, SsrwOOStorage *a2)
{
  SsrwOOStgInfo *Info;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  SsrwOOStgInfo *v8;
  int Type;
  const unsigned __int16 *v10;
  SsrwOOStgStream *v11;
  unsigned __int16 *v12;
  SsrwOOStgStream *Stream;
  void *v14;
  void *v15;
  __n128 CLSID;
  const unsigned __int16 *WcsName;
  SsrwOOStorage *v18;
  unsigned __int16 *v19;
  SsrwOOStorage *Storage;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int Size;
  int v26;
  SsrwOOStgInfo *v27;
  _SsrwOO_GUID v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  Info = SsrwOOStorage::getInfo(a1);
  SsrwOOStgInfo::getCLSID(Info, &v28);
  SsrwOOStorage::setClass(a2, &v28);
  if (Info)
  {
    v5 = TSURectWithOriginAndSize(Info);
    MEMORY[0x22E2DD408](v5, 0x1020C40285AA8CALL);
  }
  v27 = 0;
  v26 = 0;
  SsrwOOStorage::getChildrenInfo(a1, &v27, &v26);
  if (v26 >= 1)
  {
    v6 = 0;
    for (i = 0; i < v26; ++i)
    {
      v8 = (SsrwOOStgInfo *)((char *)v27 + v6);
      Type = SsrwOOStgInfo::getType((SsrwOOStgInfo *)((char *)v27 + v6));
      if (Type == 1)
      {
        WcsName = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        v18 = (SsrwOOStorage *)SsrwOOStorage::openStorage(a1, WcsName);
        v19 = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        Storage = (SsrwOOStorage *)SsrwOOStorage::createStorage(a2, v19);
        copyStorageToStorage(v18, Storage);
        SsrwOOStorage::close(v18, 0);
        if (v18)
        {
          SsrwOOStorage::~SsrwOOStorage(v18);
          MEMORY[0x22E2DD408]();
        }
        SsrwOOStorage::close(Storage, 0);
        if (Storage)
        {
          SsrwOOStorage::~SsrwOOStorage(Storage);
          MEMORY[0x22E2DD408]();
        }
      }
      else if (Type == 2)
      {
        v10 = (const unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        v11 = SsrwOOStorage::openStream(a1, v10);
        v12 = (unsigned __int16 *)SsrwOOStgInfo::getWcsName(v8);
        Stream = SsrwOOStorage::createStream(a2, v12);
        Size = 0;
        Size = SsrwOOStgInfo::getSize(v8);
        v14 = malloc_type_malloc(Size, 0x3FCE536EuLL);
        if (v14)
        {
          v15 = v14;
          (*(void (**)(SsrwOOStgStream *, void *, unsigned int *))(*(_QWORD *)v11 + 56))(v11, v14, &Size);
          (*(void (**)(SsrwOOStgStream *, void *, unsigned int *))(*(_QWORD *)Stream + 184))(Stream, v15, &Size);
          free(v15);
        }
        CLSID = SsrwOOStgInfo::getCLSID(v8, &v28);
        (*(void (**)(SsrwOOStgStream *, _SsrwOO_GUID *, __n128))(*(_QWORD *)Stream + 160))(Stream, &v28, CLSID);
        (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)Stream + 152))(Stream, 0);
        (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)Stream + 8))(Stream);
        (*(void (**)(SsrwOOStgStream *, _QWORD))(*(_QWORD *)v11 + 152))(v11, 0);
        (*(void (**)(SsrwOOStgStream *))(*(_QWORD *)v11 + 8))(v11);
      }
      v6 += 184;
    }
  }
  if (v27)
  {
    v21 = (char *)v27 - 16;
    v22 = *((_QWORD *)v27 - 1);
    if (v22)
    {
      v23 = 184 * v22;
      v24 = (char *)v27 - 184;
      do
      {
        TSURectWithOriginAndSize(&v24[v23]);
        v23 -= 184;
      }
      while (v23);
    }
    MEMORY[0x22E2DD3F0](v21, 0x1020C80285AA8CALL);
  }
}

SsrwOOStgInfo *SsrwOOStorage::getInfo(SsrwOOStorage *this)
{
  int v1;
  SsrwOOStgInfo *v2;
  int v4;
  _DWORD *exception;
  _StgInfo *v6;

  v6 = 0;
  getStorageInfo((uint64_t)this->var0, (uint64_t **)&v6);
  if (v1)
  {
    v4 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
  }
  v2 = (SsrwOOStgInfo *)operator new(0xB8uLL);
  SsrwOOStgInfo::SsrwOOStgInfo(v2, v6);
  freeInfo((void **)&v6->var0, 1u);
  free(v6);
  return v2;
}

void sub_22A183648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  void *v10;
  void *v12;
  _DWORD *exception;

  v12 = v10;
  operator delete(v12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    freeInfo(a10, 1u);
    free(a10);
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5;
  }
  _Unwind_Resume(a1);
}

void getStorageInfo(uint64_t a1, uint64_t **a2)
{
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t v6;
  uint64_t *v7;

  if (a1)
  {
    if (a2)
    {
      if (*(_QWORD *)a1)
      {
        TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
        EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
        if (EntryAtIndex)
        {
          v6 = EntryAtIndex;
          v7 = (uint64_t *)malloc_type_malloc(0x40uLL, 0x1010040657E6F79uLL);
          *a2 = v7;
          if (v7)
          {
            *((_OWORD *)v7 + 2) = 0u;
            *((_OWORD *)v7 + 3) = 0u;
            *(_OWORD *)v7 = 0u;
            *((_OWORD *)v7 + 1) = 0u;
            directoryFillStgInfo(v6, *a2);
          }
        }
      }
    }
  }
}

uint64_t SsrwOOStorage::setClass(SsrwOOStorage *this, _SsrwOO_GUID *a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = (uint64_t)this->var0;
  if (result)
  {
    result = storageSetClass(result, a2);
    if ((_DWORD)result)
    {
      v3 = result;
      exception = __cxa_allocate_exception(4uLL);
      *exception = v3;
    }
  }
  return result;
}

uint64_t storageSetClass(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t *TOC;
  uint64_t EntryAtIndex;

  if (!a1 || (*(_DWORD *)(a1 + 32) - 1) > 1)
    return 6;
  result = rootStorageSetDirty(*(_QWORD *)a1);
  if (!(_DWORD)result)
  {
    TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    return directorySetClass(EntryAtIndex, a2);
  }
  return result;
}

uint64_t rootStorageSetDirty(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int XFatSize;

  if (!a1)
    return 6;
  if ((*(_DWORD *)(a1 + 56) - 1) > 1)
    return 2;
  if (*(_QWORD *)(a1 + 104))
    return 0;
  XFatSize = headerGetXFatSize(*(_QWORD *)(a1 + 16));
  result = fatAddFreeSectors(*(_QWORD *)(a1 + 24), (void **)(a1 + 96), &XFatSize);
  if (!(_DWORD)result)
  {
    result = fatAddFatToFreeSectors(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24));
    if (!(_DWORD)result)
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3)
        fatAddFatToFreeSectors(*(_QWORD *)(a1 + 24), v3);
      result = fatAddFreeSectors(*(_QWORD *)(a1 + 24), (void **)(a1 + 64), (unsigned int *)(a1 + 72));
      if (!(_DWORD)result)
        *(_QWORD *)(a1 + 104) = 1;
    }
  }
  return result;
}

uint64_t directorySetClass(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 108) = *a2;
  return 0;
}

SsrwOOStgStream *SsrwOOStorage::createStream(SsrwOOStorage *this, unsigned __int16 *a2)
{
  int Stream;
  SsrwOOStgStream *v3;
  int v5;
  _DWORD *exception;
  _Stream *v7;

  v7 = 0;
  Stream = createStream((uint64_t)this->var0, a2, (uint64_t *)&v7);
  if (Stream)
  {
    v5 = Stream;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v5;
  }
  v3 = (SsrwOOStgStream *)operator new(0xC8uLL);
  SsrwOOStgStream::SsrwOOStgStream(v3, v7);
  return v3;
}

void sub_22A183948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v12;
  _DWORD *exception;

  v12 = v10;
  operator delete(v12);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    closeStream(&a10);
    exception = __cxa_allocate_exception(4uLL);
    *exception = 5;
  }
  _Unwind_Resume(a1);
}

uint64_t createStream(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *TOC;
  uint64_t v8;
  uint64_t inited;
  uint64_t EntryAtIndex;
  unsigned int Index;
  uint64_t v13;
  unsigned int v14;
  int v15[2];

  *(_QWORD *)v15 = 0;
  v3 = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (*a2)
        {
          if ((*(_DWORD *)(a1 + 32) - 1) <= 1)
          {
            *a3 = 0;
            v3 = rootStorageSetDirty(*(_QWORD *)a1);
            if (!(_DWORD)v3)
            {
              TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
              v8 = tocAddEntry((uint64_t)TOC, (uint64_t *)v15);
              if ((_DWORD)v8)
              {
                v3 = v8;
              }
              else
              {
                inited = directoryInitEntry(*(uint64_t *)v15, a2, 2, *(_QWORD *)a1);
                if ((_DWORD)inited
                  || (EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8)),
                      inited = tocInsertChild(TOC, EntryAtIndex, *(uint64_t *)v15),
                      (_DWORD)inited))
                {
                  v3 = inited;
                  Index = directoryGetIndex(*(uint64_t *)v15);
                  tocInvalidateEntry((uint64_t)TOC, Index);
                  return v3;
                }
                v3 = streamConstruct(*(_QWORD *)a1, a1, *(uint64_t *)v15, *(unsigned int *)(a1 + 32), a3);
                if ((_DWORD)v3)
                  return v3;
                if (*(_DWORD *)(a1 + 32) == 2 && (v13 = streamUpgradeMiniToRegular((uint64_t *)*a3), (_DWORD)v13))
                {
                  v3 = v13;
                }
                else
                {
                  v3 = openListAppend(*(_QWORD *)(a1 + 24), 2, *a3);
                  if (!(_DWORD)v3)
                    return v3;
                }
                v14 = directoryGetIndex(*(uint64_t *)v15);
                tocInvalidateEntry((uint64_t)TOC, v14);
              }
              streamDestroy((void **)a3);
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t tocInsertChild(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return directoryInsertChild(a2, a3, *a1);
}

uint64_t directoryInsertChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 100);
  if (v4 != -1)
  {
    while (1)
    {
      v6 = v4;
      v7 = compareNames((const unsigned __int16 *)(a3 + 168 * v4 + 16), (const unsigned __int16 *)(a2 + 16));
      if (v7 <= 0)
      {
        if ((v7 & 0x80000000) == 0)
          return 2;
        v11 = a3 + 168 * v6;
        v12 = *(_DWORD *)(v11 + 96);
        v9 = (_DWORD *)(v11 + 96);
        v4 = v12;
      }
      else
      {
        v8 = a3 + 168 * v6;
        v10 = *(_DWORD *)(v8 + 92);
        v9 = (_DWORD *)(v8 + 92);
        v4 = v10;
      }
      if (v4 == -1)
      {
        v13 = 0;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 168 * v6 + 12);
        *v9 = *(_DWORD *)(a2 + 12);
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 12);
  v13 = 1;
LABEL_9:
  result = 0;
  *(_BYTE *)(a2 + 88) = v13;
  return result;
}

uint64_t SsrwOOStgStream::writeBytes(SsrwOOStgStream *this, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v4;
  _DWORD *exception;

  result = streamWrite(*((_QWORD *)this + 24), a2, a3);
  if ((_DWORD)result)
  {
    v4 = result;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
  }
  return result;
}

uint64_t streamWrite(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  _QWORD *v7;
  unint64_t v8;
  uint64_t Header;
  char SectorShift;
  size_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  const void *Sector;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if ((*(_DWORD *)(a1 + 48) - 1) <= 1)
        {
          v7 = *(_QWORD **)(a1 + 56);
          if (*(_QWORD *)(a1 + 24) >= *v7 || !v7[3])
          {
            result = rootStorageSetDirty(*(_QWORD *)a1);
            if (!(_DWORD)result)
            {
              v8 = *(_QWORD *)(a1 + 24);
              if (v8 <= **(_QWORD **)(a1 + 56) || (result = streamResize(a1, v8), !(_DWORD)result))
              {
                Header = rootStorageGetHeader(*(_QWORD *)a1);
                SectorShift = headerGetSectorShift(Header);
                v11 = (1 << SectorShift);
                v12 = *(_QWORD *)(a1 + 24);
                v13 = (v11 - 1) & v12;
                *(_DWORD *)(a1 + 40) = v13;
                v14 = v11 - v13;
                v15 = 0;
                if ((int)v11 - v13 >= *a3)
                  v16 = *a3;
                else
                  v16 = v11 - v13;
                if (!v16)
                {
LABEL_29:
                  result = 0;
                  *a3 = v15;
                  return result;
                }
                v17 = SectorShift;
                while (1)
                {
                  v18 = v12 >> v17;
                  if (*(_DWORD *)(a1 + 44) != (v12 >> v17))
                  {
                    v19 = *(_QWORD *)(a1 + 56);
                    if (*(_DWORD *)(v19 + 16) > v18)
                    {
                      Sector = (const void *)rootStorageReadSector(*(_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * v18));
                      if (!Sector)
                        return rootStorageGetStatus(*(_QWORD *)a1);
                      memcpy(*(void **)(a1 + 32), Sector, v11);
                      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 24) & (v11 - 1);
                    }
                  }
                  *(_DWORD *)(a1 + 44) = v18;
                  memcpy((void *)(*(_QWORD *)(a1 + 32) + *(unsigned int *)(a1 + 40)), (const void *)(a2 + v15), v16);
                  v21 = *(_DWORD *)(a1 + 40) + v16;
                  *(_DWORD *)(a1 + 40) = v21;
                  if (v21 == (_DWORD)v11)
                  {
                    result = streamFlushToDisk(a1);
                    v14 = v11;
                    if ((_DWORD)result)
                    {
                      *a3 = v15;
                      v24 = *(uint64_t **)(a1 + 56);
                      v25 = *v24;
                      if ((unint64_t)*v24 <= *(_QWORD *)(a1 + 24))
                        v25 = *(_QWORD *)(a1 + 24);
                      *v24 = v25;
                      return result;
                    }
                  }
                  else
                  {
                    v14 -= v16;
                  }
                  v15 += v16;
                  v12 = *(_QWORD *)(a1 + 24) + v16;
                  *(_QWORD *)(a1 + 24) = v12;
                  v22 = *(unint64_t **)(a1 + 56);
                  v23 = *v22;
                  if (*v22 <= v12)
                    v23 = v12;
                  *v22 = v23;
                  if (v14 >= *a3 - v15)
                    v16 = *a3 - v15;
                  else
                    v16 = v14;
                  if (!v16)
                    goto LABEL_29;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t SsrwOOStgStream::setClass(SsrwOOStgStream *this, _SsrwOO_GUID *a2)
{
  uint64_t result;
  int v3;
  _DWORD *exception;

  result = *((_QWORD *)this + 24);
  if (result)
  {
    result = streamSetClass(result, a2);
    if ((_DWORD)result)
    {
      v3 = result;
      exception = __cxa_allocate_exception(4uLL);
      *exception = v3;
    }
  }
  return result;
}

uint64_t streamSetClass(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t *TOC;
  uint64_t EntryAtIndex;

  if (!a1 || (*(_DWORD *)(a1 + 48) - 1) > 1)
    return 6;
  result = rootStorageSetDirty(*(_QWORD *)a1);
  if (!(_DWORD)result)
  {
    TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    return directorySetClass(EntryAtIndex, a2);
  }
  return result;
}

uint64_t streamFlushToDisk(uint64_t a1)
{
  uint64_t Header;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  uint64_t Fat;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  unsigned int v19;

  v19 = 0;
  if (!a1)
    return 6;
  if (!*(_DWORD *)(a1 + 40))
    return 0;
  Header = rootStorageGetHeader(*(_QWORD *)a1);
  v3 = *(_QWORD *)(a1 + 24) >> headerGetSectorShift(Header);
  v4 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v4 + 16) <= v3)
  {
    result = rootStorageWriteSector(*(_QWORD *)a1, *(const void **)(a1 + 32), &v19, 0);
    if ((_DWORD)result)
      return result;
    TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    Fat = rootStorageGetFat(*(_QWORD *)a1);
    v9 = Fat;
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_DWORD *)(v10 + 16);
    if (v11)
    {
      result = fatUpdate(Fat, *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * (v11 - 1)), v19);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      result = directorySetStartSector(EntryAtIndex, v19);
      if ((_DWORD)result)
        return result;
      result = fatTerminateChain(v9, v19);
      if ((_DWORD)result)
        return result;
    }
    v12 = v19;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_DWORD *)(v13 + 20);
    if (v14 <= v3)
    {
      v15 = 0xFFFFFFFFLL;
      if (v14 >= 0)
        v15 = (8 * v14);
      if (v14)
        v16 = v15;
      else
        v16 = 512;
      v17 = *(void **)(v13 + 8);
      if (v17)
        v18 = malloc_type_realloc(v17, v16, 0x36121049uLL);
      else
        v18 = malloc_type_malloc(v16, 0xE1F9A27BuLL);
      v13 = *(_QWORD *)(a1 + 56);
      if (!v18)
      {
        free(*(void **)(v13 + 8));
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
        return 5;
      }
      *(_QWORD *)(v13 + 8) = v18;
      *(_DWORD *)(v13 + 20) = v16 >> 2;
    }
    if (*(_DWORD *)(v13 + 16) <= v3)
      *(_DWORD *)(v13 + 16) = v3 + 1;
    *(_DWORD *)(*(_QWORD *)(v13 + 8) + 4 * v3) = v12;
    goto LABEL_5;
  }
  result = rootStorageRewriteSector(*(_QWORD *)a1, *(_BYTE **)(a1 + 32), *(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v3));
  if (!(_DWORD)result)
  {
LABEL_5:
    result = 0;
    *(_QWORD *)(a1 + 40) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t rootStorageWriteSector(uint64_t a1, const void *a2, _DWORD *a3, int a4)
{
  char SectorShift;
  uint64_t result;
  int v10;
  unint64_t v11;
  int v12;

  v12 = 0;
  SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
  result = fatNextFreeSector(*(_QWORD *)(a1 + 24), &v12, a4);
  if (!(_DWORD)result)
  {
    v10 = v12;
    if (v12 == *(_DWORD *)(a1 + 76))
    {
      memcpy(*(void **)(a1 + 80), a2, 1 << SectorShift);
      v10 = v12;
    }
    v11 = (unint64_t)(v10 + 1) << SectorShift;
    if (SsrwFseek(*(_QWORD *)a1) || SsrwFwrite((uint64_t)a2, 1 << SectorShift, 1, *(_QWORD *)a1) != 1)
    {
      return 4;
    }
    else
    {
      *a3 = v12;
      if (v11 < 0x7FFF0001)
        return 0;
      else
        return headerEnsureV4(*(_QWORD *)(a1 + 16));
    }
  }
  return result;
}

uint64_t fatNextFreeSector(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t result;

  if (a1)
  {
    v3 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v3 == -2)
    {
      *a2 = -1;
      LODWORD(v3) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v3);
    }
    result = 0;
    *a2 = v3;
    if (!a3 && v3 > 0xFF000000)
      goto LABEL_10;
  }
  else
  {
    *a2 = -1;
    if (!a3)
    {
LABEL_10:
      *a2 = -1;
      return 2;
    }
    return 6;
  }
  return result;
}

uint64_t directorySetStartSector(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 144) = a2;
  return 0;
}

uint64_t fatTerminateChain(uint64_t a1, unsigned int a2)
{
  return fatSetEntry(a1, a2, -2);
}

uint64_t fatSetEntry(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    return 6;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || !rootStorageGetHeader(v4))
    return 6;
  result = fatEnsureMinSize(a1, a2 + 1);
  if (!(_DWORD)result)
  {
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v8 + 4 * a2) = a3;
    v9 = *(unsigned int *)(a1 + 16);
    if (v9 <= a2)
    {
      if (v9 < a2)
        memset((void *)(v8 + 4 * v9), 255, 4 * (~(_DWORD)v9 + a2) + 4);
      result = 0;
      *(_DWORD *)(a1 + 16) = a2 + 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t fatEnsureMinSize(uint64_t a1, unsigned int a2)
{
  uint64_t Header;
  char SectorShift;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t result;

  if (*(_DWORD *)(a1 + 20) >= a2)
    return 0;
  Header = rootStorageGetHeader(*(_QWORD *)(a1 + 32));
  SectorShift = headerGetSectorShift(Header);
  v6 = (~(-1 << SectorShift) + 4 * a2) & (-1 << SectorShift);
  v7 = malloc_type_realloc(*(void **)(a1 + 8), (~(-1 << SectorShift) + 4 * a2) & (-1 << SectorShift), 0x615D6492uLL);
  if (!v7)
    return 5;
  v8 = v7;
  result = 0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 20) = v6 >> 2;
  *(_DWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t streamResize(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t Header;
  uint64_t *TOC;
  uint64_t EntryAtIndex;
  char SectorShift;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Fat;

  if (!a1)
    return 6;
  v4 = streamFlushToDisk(a1);
  if (!(_DWORD)v4)
  {
    if (**(_QWORD **)(a1 + 56) == a2)
      return 0;
    v4 = rootStorageSetDirty(*(_QWORD *)a1);
    if ((_DWORD)v4)
      return v4;
    Header = rootStorageGetHeader(*(_QWORD *)a1);
    TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
    Fat = rootStorageGetFat(*(_QWORD *)a1);
    SectorShift = headerGetSectorShift(Header);
    v10 = (1 << SectorShift);
    v11 = calcReqdSectors(a2, v10);
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)v14 < a2)
    {
      bzero(*(void **)(a1 + 32), v10);
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 16);
      if (v15 < v12)
      {
        v16 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 16);
        while (1)
        {
          *(_DWORD *)(a1 + 40) = v10;
          *(_QWORD *)(a1 + 24) = v16 << SectorShift;
          v17 = streamFlushToDisk(a1);
          if ((_DWORD)v17)
            break;
          if (v12 == ++v16)
            goto LABEL_23;
        }
        v4 = v17;
        if ((_DWORD)v15)
          fatTerminateChain(Fat, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 4 * (v15 - 1)));
        fatFreeChain(Fat, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 4 * v15));
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 16) = v15;
        *(_DWORD *)(a1 + 40) = 0;
        goto LABEL_24;
      }
LABEL_23:
      v4 = 0;
      v19 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(v19 + 16) = v12;
      *(_QWORD *)v19 = a2;
LABEL_24:
      *(_QWORD *)(a1 + 24) = v13;
      return v4;
    }
    if (v11 >= *(_DWORD *)(v14 + 16))
      goto LABEL_23;
    v18 = v11
        ? fatTerminateChain(Fat, *(_DWORD *)(*(_QWORD *)(v14 + 8) + 4 * (v11 - 1)))
        : directorySetStartSector(EntryAtIndex, -1);
    v4 = v18;
    if (!(_DWORD)v18)
    {
      v4 = fatFreeChain(Fat, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 4 * v12));
      if (!(_DWORD)v4)
        goto LABEL_23;
    }
  }
  return v4;
}

uint64_t directorySetSize(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 152) = a2;
  return 0;
}

uint64_t directorySetCurrentCreationTime(uint64_t a1)
{
  SsrwTime((time_t *)(a1 + 128));
  return 0;
}

time_t SsrwTime(time_t *a1)
{
  time_t result;

  result = time(0);
  if (a1)
    *a1 = result;
  return result;
}

uint64_t directorySetCurrentModificationTime(uint64_t a1)
{
  SsrwTime((time_t *)(a1 + 136));
  return 0;
}

uint64_t rootStorageWriteMiniSector(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char SectorShift;
  char SmallSectorShift;
  uint64_t EntryAtIndex;
  uint64_t StreamLength;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int StartSector;
  unint64_t v18;
  int v19;
  char v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v21 = 0;
  SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
  SmallSectorShift = headerGetSmallSectorShift(*(_QWORD *)(a1 + 16));
  EntryAtIndex = tocGetEntryAtIndex(*(uint64_t **)(a1 + 40), 0);
  StreamLength = directoryGetStreamLength(EntryAtIndex);
  result = fatNextFreeSector(*(_QWORD *)(a1 + 32), &v23, 0);
  if (!(_DWORD)result)
  {
    v11 = (1 << SmallSectorShift);
    v19 = 1 << (SectorShift - SmallSectorShift);
    v12 = v23;
    v13 = v23 >> (SectorShift - SmallSectorShift);
    v20 = SectorShift;
    if ((unint64_t)v23 * (int)v11 >= ((StreamLength + ~(-1 << SectorShift)) & (unint64_t)(-1 << SectorShift)))
    {
      result = fatNextFreeSector(*(_QWORD *)(a1 + 24), (_DWORD *)&v23 + 1, 0);
      if ((_DWORD)result)
        return result;
      v15 = *(_DWORD *)(a1 + 92);
      if (v15 == -1)
      {
        result = directorySetStartSector(EntryAtIndex, SHIDWORD(v23));
        if ((_DWORD)result)
          return result;
        result = fatTerminateChain(*(_QWORD *)(a1 + 24), HIDWORD(v23));
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = fatUpdate(*(_QWORD *)(a1 + 24), v15, HIDWORD(v23));
        if ((_DWORD)result)
          return result;
      }
      *(_DWORD *)(a1 + 92) = HIDWORD(v23);
      result = directorySetSize(EntryAtIndex, (v13 << SectorShift) + v11);
      if ((_DWORD)result)
        return result;
      v14 = HIDWORD(v23);
    }
    else if (v12 == fatGetLength(*(_QWORD *)(a1 + 32)))
    {
      v14 = *(_DWORD *)(a1 + 92);
      HIDWORD(v23) = v14;
      result = directorySetSize(EntryAtIndex, ((unint64_t)((v23 & (v19 - 1)) + 1) << SmallSectorShift) + (v13 << v20));
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v21 = -1;
      v16 = *(_QWORD *)(a1 + 24);
      StartSector = directoryGetStartSector(EntryAtIndex);
      result = fatGetChain(v16, StartSector, &v21, &v22);
      if ((_DWORD)result)
        return result;
      v14 = *((_DWORD *)v22 + v13);
      HIDWORD(v23) = v14;
      free(v22);
    }
    v18 = ((unint64_t)(v14 + 1) << v20) + ((v23 & (v19 - 1)) << SmallSectorShift);
    if (SsrwFseek(*(_QWORD *)a1) || SsrwFwrite(a2, v11, 1, *(_QWORD *)a1) != 1)
    {
      return 4;
    }
    else
    {
      *a3 = v23;
      if (v18 < 0x7FFF0001)
        return 0;
      else
        return headerEnsureV4(*(_QWORD *)(a1 + 16));
    }
  }
  return result;
}

uint64_t fatGetLength(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t fatUpdate(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = fatSetEntry(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (a3 > 0xFFFFFFFB)
      return 0;
    result = fatSetEntry(a1, a3, -2);
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t fatFreeChain(uint64_t a1, uint64_t a2)
{
  if (a2 <= 0xFFFFFFFD)
    fatOrderedMergeChain(a1, *(unsigned int *)(a1 + 40), a2, (_DWORD *)(a1 + 40));
  return 0;
}

uint64_t fatOrderedMergeChain(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v11;

  if ((_DWORD)a3 == -2)
  {
    LODWORD(v4) = a2;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = -2;
    v7 = a2;
    do
    {
      v8 = v6;
      v6 = a3;
      if (a3 >= v8)
        v9 = a2;
      else
        v9 = v7;
      if (a3 < v8 || v8 == -2)
        v11 = -2;
      else
        v11 = v8;
      if (v8 != -2)
        LODWORD(a2) = v9;
      for (; a3 > a2; LODWORD(a2) = *(_DWORD *)(v5 + 4 * a2))
        v11 = a2;
      v4 = a3;
      if (v11 != -2)
      {
        *(_DWORD *)(v5 + 4 * v11) = a3;
        v4 = v7;
      }
      a3 = *(unsigned int *)(v5 + 4 * a3);
      *(_DWORD *)(v5 + 4 * v6) = a2;
      v7 = v4;
    }
    while ((_DWORD)a3 != -2);
  }
  *a4 = v4;
  return 0;
}

_QWORD *SsrwOOStorage::createStorage(SsrwOOStorage *this, unsigned __int16 *a2)
{
  int v2;
  _QWORD *result;
  int v4;
  _DWORD *exception;
  uint64_t v6;

  v6 = 0;
  v2 = createStorage((uint64_t)this->var0, a2, &v6);
  if (v2)
  {
    v4 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v4;
  }
  result = operator new(0x50uLL);
  *result = v6;
  return result;
}

uint64_t createStorage(uint64_t a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t *TOC;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t EntryAtIndex;
  unsigned int Index;
  int v15[2];

  *(_QWORD *)v15 = 0;
  inited = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (*a2)
        {
          if ((*(_DWORD *)(a1 + 32) - 1) <= 1)
          {
            inited = rootStorageSetDirty(*(_QWORD *)a1);
            if (!(_DWORD)inited)
            {
              inited = storageConstruct(a3);
              if (!(_DWORD)inited)
              {
                v7 = *a3;
                *(_QWORD *)v7 = *(_QWORD *)a1;
                *(_QWORD *)(v7 + 16) = a1;
                TOC = (uint64_t *)rootStorageGetTOC(*(_QWORD *)a1);
                inited = tocAddEntry((uint64_t)TOC, (uint64_t *)v15);
                if ((_DWORD)inited)
                {
LABEL_15:
                  storageDestroy((uint64_t)a3);
                  return inited;
                }
                inited = directoryInitEntry(*(uint64_t *)v15, a2, 1, *(_QWORD *)a1);
                v9 = *(_QWORD *)v15;
                if (!(_DWORD)inited)
                {
                  v10 = directorySetCurrentCreationTime(*(uint64_t *)v15);
                  if ((_DWORD)v10)
                  {
                    inited = v10;
                  }
                  else
                  {
                    EntryAtIndex = tocGetEntryAtIndex(TOC, *(_DWORD *)(a1 + 8));
                    inited = tocInsertChild(TOC, EntryAtIndex, *(uint64_t *)v15);
                    Index = directoryGetIndex(*(uint64_t *)v15);
                    v11 = Index;
                    if ((_DWORD)inited)
                      goto LABEL_14;
                    *(_DWORD *)(v7 + 8) = Index;
                    *(_DWORD *)(v7 + 32) = *(_DWORD *)(a1 + 32);
                    inited = openListAppend(*(_QWORD *)(a1 + 24), 1, *a3);
                    if (!(_DWORD)inited)
                      return inited;
                  }
                  v9 = *(_QWORD *)v15;
                }
                v11 = directoryGetIndex(v9);
LABEL_14:
                tocInvalidateEntry((uint64_t)TOC, v11);
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return inited;
}

SsrwOOStorage *SsrwOOStorage::close(SsrwOOStorage *this, char a2)
{
  SsrwOOStorage *v3;
  int v4;
  _DWORD *exception;

  if (this->var0)
  {
    v3 = this;
    this = (SsrwOOStorage *)closeStorage((uint64_t)this);
    if ((a2 & 1) == 0)
    {
      if ((_DWORD)this)
      {
        v4 = (int)this;
        exception = __cxa_allocate_exception(4uLL);
        *exception = v4;
      }
    }
    v3->var0 = 0;
  }
  return this;
}

uint64_t closeStorage(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    return closeStorageInternal(a1);
  else
    return 6;
}

uint64_t SsrwOORootStorage::allocedSize(SsrwOORootStorage *this)
{
  return documentPropertiesGetAllocedSize(*((_QWORD *)this + 10));
}

uint64_t rootStorageAllocedSize(EshDataModelVisitor **a1)
{
  return EshDataModelVisitor::getClientVisitor(*a1);
}

uint64_t **SsrwOORootStorage::close(SsrwOORootStorage *this, char a2)
{
  uint64_t **result;
  uint64_t v4;
  int v6;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 10);
  result = (uint64_t **)((char *)this + 80);
  if (v4)
  {
    result = (uint64_t **)closeStructuredStorage(result);
    if ((a2 & 1) == 0)
    {
      if ((_DWORD)result)
      {
        v6 = (int)result;
        exception = __cxa_allocate_exception(4uLL);
        *exception = v6;
      }
    }
    *(_QWORD *)this = 0;
  }
  return result;
}

uint64_t tocWrite(uint64_t a1, uint64_t a2)
{
  uint64_t Fat;
  uint64_t Header;
  int SectorShift;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = 0;
  Fat = rootStorageGetFat(a2);
  Header = rootStorageGetHeader(a2);
  SectorShift = headerGetSectorShift(Header);
  v7 = 0;
  v8 = (1 << SectorShift);
  v9 = v8 >> 7;
  if (SectorShift != 9)
    v7 = (v9 + *(_DWORD *)(a1 + 8) - 1) / v9;
  v10 = headerSetNumDirSectors(Header, v7);
  if ((_DWORD)v10)
    return v10;
  v11 = malloc_type_malloc(v8, 0x1553D629uLL);
  if (!v11)
    return 5;
  v12 = v11;
  bzero(v11, v8);
  if (!*(_DWORD *)(a1 + 8))
  {
LABEL_20:
    v10 = 0;
    goto LABEL_23;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = v9 - 1;
  while (1)
  {
    v17 = directoryGetAtIndex(*(_QWORD *)a1, v15);
    directoryEntryWrite(v17, (uint64_t)v12, (int *)&v22 + 1);
    if (++v15 == *(_DWORD *)(a1 + 8) && (v15 & v16) != 0)
    {
      do
      {
        v19 = directoryGetAtIndex(*(_QWORD *)a1, v15);
        directoryConstructEntry(v15, v19);
        directoryEntryWrite(v19, (uint64_t)v12, (int *)&v22 + 1);
        ++v15;
      }
      while ((v15 & v16) != 0);
    }
    if ((v15 & v16) != 0)
      goto LABEL_19;
    v20 = rootStorageWriteSector(a2, v12, &v22, 1);
    if ((_DWORD)v20)
      break;
    if (v13)
    {
      v20 = fatUpdate(Fat, v14, v22);
      if ((_DWORD)v20)
        break;
      goto LABEL_18;
    }
    headerSetDirectoryStartSector(Header, v22);
    v20 = fatTerminateChain(Fat, v22);
    if ((_DWORD)v20)
      break;
LABEL_18:
    v14 = v22;
    HIDWORD(v22) = 0;
    v13 = 1;
LABEL_19:
    if (v15 >= *(_DWORD *)(a1 + 8))
      goto LABEL_20;
  }
  v10 = v20;
LABEL_23:
  free(v12);
  return v10;
}

uint64_t headerSetNumDirSectors(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t directoryEntryWrite(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = 0;
  v6 = a2 + *a3;
  v7 = a1 + 16;
  do
  {
    CsLeWriteUInt16(*(unsigned __int16 *)(v7 + v5), (_WORD *)(v6 + v5));
    v5 += 2;
  }
  while (v5 != 64);
  CsLeWriteUInt16(*(unsigned __int16 *)(a1 + 80), (_WORD *)(v6 + 64));
  *(_BYTE *)(v6 + 66) = *(_DWORD *)(a1 + 84);
  *(_BYTE *)(v6 + 67) = *(_BYTE *)(a1 + 88);
  CsLeWriteUInt32(*(unsigned int *)(a1 + 92), (_DWORD *)(v6 + 68));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 96), (_DWORD *)(v6 + 72));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 100), (_DWORD *)(v6 + 76));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 108), (_DWORD *)(v6 + 80));
  CsLeWriteUInt16(*(unsigned __int16 *)(a1 + 112), (_WORD *)(v6 + 84));
  CsLeWriteUInt16(*(unsigned __int16 *)(a1 + 114), (_WORD *)(v6 + 86));
  *(_QWORD *)(v6 + 88) = *(_QWORD *)(a1 + 116);
  CsLeWriteUInt32(*(unsigned int *)(a1 + 104), (_DWORD *)(v6 + 96));
  leWriteTime(*(_QWORD *)(a1 + 128), (_DWORD *)(v6 + 100));
  leWriteTime(*(_QWORD *)(a1 + 136), (_DWORD *)(v6 + 108));
  CsLeWriteUInt32(*(unsigned int *)(a1 + 144), (_DWORD *)(v6 + 116));
  leWriteUInt64(*(_QWORD *)(a1 + 152), (_QWORD *)(v6 + 120));
  *a3 += 128;
  return 0;
}

uint64_t leWriteTime(int a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  v5 = 0;
  result = WinFileTimeFromTime_t(a1, (unsigned int *)&v5);
  v4 = HIDWORD(v5);
  *a2 = v5;
  a2[1] = v4;
  return result;
}

uint64_t WinFileTimeFromTime_t(int a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = 10000 * HIWORD(a1) + ((10000 * (unsigned __int16)a1) >> 16);
  v3 = HIWORD(v2);
  v4 = 1000 * (unsigned __int16)v2 + ((1000 * (unsigned __int16)(10000 * a1)) >> 16);
  v5 = (unsigned __int16)(-27008 * a1) + 0x8000;
  v6 = HIWORD(v5) + (unsigned __int16)v4 + 54590;
  *a2 = v5 & 0xFF80 | (v6 << 16);
  a2[1] = 1000 * v3 + HIWORD(v4) + HIWORD(v6) + 27111902;
  return 0;
}

uint64_t leWriteUInt64(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t headerSetDirectoryStartSector(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t fatTrimFreeSectorsAtEnd(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -2)
  {
    v3 = (_DWORD *)(a1 + 16);
    v4 = *(_DWORD *)(a1 + 16);
    if (v4 == -1)
    {
      v5 = -3;
      goto LABEL_13;
    }
  }
  else
  {
    v5 = v2 - 1;
    v6 = -2;
    do
    {
      v7 = v2;
      v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v2);
      if (v2 != -2 && v2 > v7 + 1)
      {
        v6 = v7;
        v5 = v2 - 1;
      }
    }
    while (v2 != -2);
    v3 = (_DWORD *)(a1 + 16);
    v4 = *(_DWORD *)(a1 + 16);
    if (v7 == v4 - 1 && v5 < v4 - 1)
    {
      if (v6 != -2)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v6) = -2;
        goto LABEL_15;
      }
LABEL_13:
      *(_DWORD *)(a1 + 40) = -2;
LABEL_15:
      v4 = v5 + 1;
      *v3 = v5 + 1;
    }
  }
  *a2 = v4;
  return 0;
}

uint64_t fatMarkFreeChain(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!a1)
    return 6;
  v1 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v1 != -2)
  {
    do
    {
      if (v1 >= *(unsigned int *)(a1 + 16))
        break;
      v2 = *(_QWORD *)(a1 + 8);
      v3 = *(unsigned int *)(v2 + 4 * v1);
      *(_DWORD *)(v2 + 4 * v1) = -1;
      v1 = v3;
    }
    while ((_DWORD)v3 != -2);
  }
  v4 = 0;
  *(_DWORD *)(a1 + 40) = -2;
  return v4;
}

uint64_t fatWriteMiniFat(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t Header;
  char SectorShift;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t Fat;

  if (!a1)
    return 6;
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    return 6;
  if (!*(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 6;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -2)
  {
    do
    {
      if (v4 >= *(unsigned int *)(a1 + 16))
        break;
      v5 = *(unsigned int *)(v3 + 4 * v4);
      *(_DWORD *)(v3 + 4 * v4) = -1;
      v4 = v5;
    }
    while ((_DWORD)v5 != -2);
  }
  *(_DWORD *)(a1 + 40) = -2;
  v6 = *(_DWORD *)(rootStorageGetFat(v2) + 16);
  Header = rootStorageGetHeader(*(_QWORD *)(a1 + 32));
  SectorShift = headerGetSectorShift(Header);
  v9 = *(unsigned int *)(a1 + 16);
  result = fatWriteFat(a1, v6);
  if ((_DWORD)result)
    return result;
  v11 = ((unint64_t)~(-1 << SectorShift) + 4 * v9) >> SectorShift;
  if (v11 < 2)
  {
LABEL_13:
    Fat = rootStorageGetFat(*(_QWORD *)(a1 + 32));
    result = fatSetEntry(Fat, v6 + (int)v11 - 1, -2);
    if ((_DWORD)result)
      return result;
    headerSetSmallFatStartSector(Header, v6);
    headerSetSmallFatSize(Header, v11);
    return 0;
  }
  v12 = v11 - 1;
  v13 = v6;
  while (1)
  {
    v14 = rootStorageGetFat(*(_QWORD *)(a1 + 32));
    result = fatUpdate(v14, v13, v13 + 1);
    if ((_DWORD)result)
      return result;
    ++v13;
    if (!--v12)
      goto LABEL_13;
  }
}

uint64_t fatWriteFat(uint64_t a1, int a2)
{
  uint64_t Header;
  unsigned int SectorShift;
  size_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_DWORD *)(a1 + 16))
    return 0;
  Header = rootStorageGetHeader(*(_QWORD *)(a1 + 32));
  SectorShift = headerGetSectorShift(Header);
  v6 = (1 << SectorShift);
  v7 = malloc_type_malloc(v6, 0x71A3E856uLL);
  if (!v7)
    return 5;
  v8 = v7;
  bzero(v7, v6);
  if (*(_DWORD *)(a1 + 16))
  {
    v9 = 0;
    v10 = v6 >> 2;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    while (1)
    {
      if (SectorShift >= 2)
      {
        v12 = 0;
        v13 = v9;
        v9 += v11;
        v14 = v8;
        while (v13 < *(unsigned int *)(a1 + 16))
        {
          CsLeWriteUInt32(*(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v13), v14);
          ++v12;
          ++v13;
          ++v14;
          if (v11 == v12)
            goto LABEL_17;
        }
        v9 = v13;
      }
      else
      {
        LODWORD(v12) = 0;
      }
      if (v12 < v10)
      {
        v15 = &v8[4 * v12];
        v16 = v10 - v12;
        do
        {
          CsLeWriteUInt32(0xFFFFFFFFLL, v15++);
          --v16;
        }
        while (v16);
      }
LABEL_17:
      v17 = rootStorageRewriteSector(*(_QWORD *)(a1 + 32), v8, a2);
      if ((_DWORD)v17)
        break;
      ++a2;
      if (v9 >= *(_DWORD *)(a1 + 16))
        goto LABEL_19;
    }
    v18 = v17;
  }
  else
  {
LABEL_19:
    v18 = 0;
  }
  free(v8);
  return v18;
}

uint64_t rootStorageRewriteSector(uint64_t a1, _BYTE *a2, int a3)
{
  char SectorShift;
  unint64_t v7;

  if (*(_DWORD *)(a1 + 76) == a3)
    **(_BYTE **)(a1 + 80) = *a2;
  SectorShift = headerGetSectorShift(*(_QWORD *)(a1 + 16));
  v7 = (unint64_t)(a3 + 1) << SectorShift;
  SsrwFseek(*(_QWORD *)a1);
  if (SsrwFtell(*(_QWORD *)a1) != v7 || SsrwFwrite((uint64_t)a2, 1 << SectorShift, 1, *(_QWORD *)a1) != 1)
    return 4;
  *(_DWORD *)(a1 + 76) = -1;
  if (v7 < 0x7FFF0001)
    return 0;
  else
    return headerEnsureV4(*(_QWORD *)(a1 + 16));
}

uint64_t headerSetSmallFatStartSector(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 60) = a2;
  return result;
}

uint64_t fatWriteFatAndXFat(uint64_t a1)
{
  uint64_t v2;
  uint64_t Header;
  char SectorShift;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v40;
  unsigned int v41;
  size_t size;
  uint64_t v43;

  if (!a1)
    return 6;
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    return 6;
  if (!*(_DWORD *)(a1 + 16))
    return 0;
  if (!*(_QWORD *)(a1 + 8))
    return 6;
  Header = rootStorageGetHeader(v2);
  SectorShift = headerGetSectorShift(Header);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = ((1 << SectorShift) - 1);
  v7 = (unint64_t)(v6 + 4 * v5) >> SectorShift;
  v8 = ((1 << SectorShift) - 4);
  v9 = ((1 << SectorShift) - 5);
  if ((_DWORD)v7)
    v10 = 0;
  else
    v10 = v8 > v9;
  if (v10)
    goto LABEL_41;
  v11 = 0;
  LODWORD(v12) = 0;
  v13 = v9 / v8;
  do
  {
    v14 = v12;
    v15 = v11;
    v16 = v7;
    v17 = v13;
    v18 = v5;
    v12 = (v7 + v12);
    v11 += v13;
    LODWORD(v5) = v13 + v7 + v5;
    LODWORD(v7) = ((v6 + 4 * (unint64_t)v5) >> SectorShift) - v12;
    if (v12 <= 0x6D)
      v19 = 109;
    else
      v19 = v12;
    v13 = (v9 + 4 * (unint64_t)(v19 - 109)) / v8 - v11;
  }
  while (v7 | v13);
  *(_DWORD *)(a1 + 16) = v5;
  if (!(_DWORD)v12)
  {
LABEL_41:
    *(_QWORD *)a1 = 0;
    return 5;
  }
  v41 = (1 << SectorShift) >> 2;
  size = (1 << SectorShift);
  v20 = malloc_type_malloc(4 * v12, 0xBF89B1ADuLL);
  *(_QWORD *)a1 = v20;
  if (!v20)
    return 5;
  v43 = Header;
  bzero(v20, 4 * v12);
  if (v11)
  {
    v21 = v17 + v15;
    v22 = v16 + v18 + v17 - 1;
    while (1)
    {
      v23 = fatSetEntry(a1, v22, -4);
      if ((_DWORD)v23)
        break;
      --v22;
      if (!--v21)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    v24 = 0;
    if (v12 <= 1)
      v25 = 1;
    else
      v25 = v12;
    v26 = v18 - (v15 + v14);
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v24) = v26 + v24;
      v23 = fatSetEntry(a1, v26 + (int)v24, -3);
      if ((_DWORD)v23)
        break;
      if (v25 == ++v24)
      {
        *(_DWORD *)(a1 + 24) = v12;
        v27 = v5 - v11;
        v28 = fatWriteFat(a1, (int)v5 - v11 - (int)v12);
        v29 = v43;
        if ((_DWORD)v28)
          return v28;
        v30 = malloc_type_malloc(size, 0x71A2FAFBuLL);
        if (!v30)
          return 5;
        v31 = v30;
        bzero(v30, size);
        if (v12 < 0x6E)
        {
LABEL_37:
          free(v31);
          headerSetFatSize(v29, v12);
          headerSetXFatSize(v29, v11);
          if (v11)
            v38 = v27;
          else
            v38 = -1;
          headerSetXFatStartSector(v29, v38);
          return 0;
        }
        v32 = 0;
        v33 = v41 - 1;
        v34 = 109;
        v40 = v27;
        while (1)
        {
          if (v41 != 1)
          {
            v35 = v31;
            v36 = 0;
            do
            {
              CsLeWriteUInt32(*(unsigned int *)(*(_QWORD *)a1 + 4 * v34 + 4 * v36++), v35);
              if (v36 >= v33)
                break;
              ++v35;
            }
            while (v36 + v34 < v12);
            v34 += v36;
            v29 = v43;
            v27 = v40;
          }
          CsLeWriteUInt32((v32 + v27 + 1), &v31[4 * v33]);
          v37 = rootStorageRewriteSector(*(_QWORD *)(a1 + 32), v31, v32 + v27);
          if ((_DWORD)v37)
            break;
          ++v32;
          if (v34 >= v12)
            goto LABEL_37;
        }
        v28 = v37;
        free(v31);
        return v28;
      }
    }
  }
  return v23;
}

uint64_t headerSetFatSize(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 44) = a2;
  return result;
}

uint64_t headerSetXFatSize(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t headerSetXFatStartSector(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 68) = a2;
  return result;
}

uint64_t fatGetFatSectors(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)a1;
  if (a3)
    *a3 = *(_DWORD *)(a1 + 24);
  return 0;
}

uint64_t headerWriteFatSectors(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  size_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v14;

  if (a3 >= 0x6D)
    v3 = 109;
  else
    v3 = a3;
  if (!v3)
    return 0;
  v7 = (4 * v3);
  v8 = (char *)malloc_type_malloc(v7, 0xBF89B1ADuLL);
  if (!v8)
    return 5;
  v9 = v8;
  bzero(v8, v7);
  v10 = 0;
  v11 = a3;
  if (a3 >= 0x6DuLL)
    v11 = 109;
  v12 = 4 * v11;
  do
  {
    CsLeWriteUInt32(*(unsigned int *)(a2 + v10), &v9[v10]);
    v10 += 4;
  }
  while (v12 != (_DWORD)v10);
  if (SsrwFseek(a1))
  {
    free(v9);
    return 4;
  }
  else
  {
    v14 = SsrwFwrite((uint64_t)v9, v7, 1, a1) != 1;
    free(v9);
    return (4 * v14);
  }
}

uint64_t headerWriteSectorFiller(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  int v10;

  v9 = -1;
  v10 = 0;
  v3 = *(_DWORD *)(a1 + 44);
  if (v3 <= 0x6D)
    v4 = 4 * v3 + 76;
  else
    v4 = 512;
  v5 = *(unsigned __int16 *)(a1 + 30);
  if ((1 << v5) >= 0x200)
    v6 = 512;
  else
    v6 = 1 << v5;
  while (v4 < v6)
  {
    v7 = 4;
    if (SsrwFwrite((uint64_t)&v9, 4, 1, a2) != 1)
      return v7;
    v4 += 4;
  }
  if (v5 < 0xA)
    return 0;
  while (1)
  {
    v7 = 4;
    if (SsrwFwrite((uint64_t)&v10, 4, 1, a2) != 1)
      break;
    v6 += 4;
    if (v6 >= 1 << v5)
      return 0;
  }
  return v7;
}

uint64_t SsrwFtruncate(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(a1 + 88)) != 0)
    return v1();
  else
    return 0;
}

uint64_t SsrwMemFtruncate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  return 0;
}

void sub_22A185C08(void *exc_buf, int a2)
{
  void *v2;
  void *v3;

  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A185BB8);
  }

  JUMPOUT(0x22A185C8CLL);
}

void sub_22A185C74(void *a1, int a2)
{
  unsigned int *v3;
  void *v4;

  if (a2 == 3)
  {
    v3 = (unsigned int *)__cxa_begin_catch(a1);
    OCConvertCsException(v3);
    __cxa_end_catch();
  }
  else
  {
    v4 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v4, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A185BBCLL);
}

void sub_22A185C84()
{
  JUMPOUT(0x22A185C8CLL);
}

void sub_22A185C9C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  SsrwOORootStorage::~SsrwOORootStorage((SsrwOORootStorage *)va);
  JUMPOUT(0x22A185CACLL);
}

void sub_22A185D08(void *exc_buf, int a2)
{
  void *v2;

  if (a2 == 4)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A185BBCLL);
  }

  JUMPOUT(0x22A185C8CLL);
}

uint64_t rootStorageGetStatus(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 88);
  return result;
}

uint64_t OCConvertCsException(unsigned int *a1)
{
  unsigned int v1;
  uint64_t *v2;
  _DWORD *exception;

  v1 = *a1;
  v2 = &TCInvalidFileFormatMessage;
  if ((int)*a1 > 1003)
  {
    if (v1 - 1004 >= 2 && v1 != 8004)
    {
      if (v1 == 1011)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = *a1;
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (v1 > 0x11)
    {
LABEL_13:
      if (v1 == 1001)
        goto LABEL_14;
LABEL_15:
      v2 = &TCUnknownProblemMessage;
      return +[TCMessageException raise:](TCMessageException, "raise:", *v2);
    }
    if (((1 << v1) & 0x1EF40) == 0)
    {
      if (((1 << v1) & 0x20008) != 0)
      {
        +[TCMessageContext setIsFileStructuredStorage:](TCMessageContext, "setIsFileStructuredStorage:", 0);
        v2 = &TCInvalidFileFormatMessage;
        return +[TCMessageException raise:](TCMessageException, "raise:", *v2);
      }
      if (v1 == 5)
      {
LABEL_14:
        v2 = &TCOutOfMemoryMessage;
        return +[TCMessageException raise:](TCMessageException, "raise:", *v2);
      }
      goto LABEL_13;
    }
  }
  return +[TCMessageException raise:](TCMessageException, "raise:", *v2);
}

BOOL WrdParagraphProperties::deleteTabStopFromTabsToBeAdded(WrdParagraphProperties *this, int a2, int a3)
{
  unint64_t v4;
  __int16 *v5;
  int v6;
  int v7;
  unint64_t v8;
  int v10;
  _BOOL8 v12;
  __int16 v13;
  _WORD *v14;
  uint64_t *v15;

  if (*((__int16 *)this + 68) < 1)
    return 0;
  v4 = *((unsigned __int16 *)this + 68);
  v5 = (__int16 *)*((_QWORD *)this + 25);
  v6 = a3 + a2;
  v7 = *v5;
  v8 = 0;
  if (a2 - a3 > v7 || v6 < v7)
  {
    while (v4 - 1 != v8)
    {
      v10 = v5[++v8];
      if (a2 - a3 <= v10 && v6 >= v10)
      {
        v12 = v8 < v4;
        goto LABEL_14;
      }
    }
    return 0;
  }
  v12 = 1;
LABEL_14:
  v13 = v4 - 1;
  *((_WORD *)this + 68) = v13;
  if (v13 > (__int16)v8)
  {
    do
    {
      v14 = (_WORD *)(*((_QWORD *)this + 25) + 2 * v8);
      v15 = (uint64_t *)(*((_QWORD *)this + 22) + 8 * v8++);
      *v14 = v14[1];
      WrdTabDescriptor::operator=(*v15, v15[1]);
    }
    while ((uint64_t)v8 < *((__int16 *)this + 68));
    v5 = (__int16 *)*((_QWORD *)this + 25);
  }
  v5[(unsigned __int16)v8] = 0;
  *((_QWORD *)this + 2) |= 0x100uLL;
  return v12;
}

uint64_t WrdParagraphProperties::findInsertionIndexForTabsToBeDeleted(WrdParagraphProperties *this, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *((__int16 *)this + 69);
  if (v2 <= 63)
  {
    if ((__int16)v2 < 1)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      while (*(__int16 *)(*((_QWORD *)this + 26) + 2 * v3) <= a2)
      {
        if ((__int16)++v3 >= *((__int16 *)this + 69))
        {
          LOWORD(v3) = *((_WORD *)this + 69);
          return (__int16)v3;
        }
      }
    }
  }
  else
  {
    LOWORD(v3) = -1;
  }
  return (__int16)v3;
}

WrdParagraphProperties *WrdParagraphProperties::insertTabStopInTabsToBeDeleted(WrdParagraphProperties *this, int a2, __int16 a3, __int16 a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *exception;

  v4 = *((__int16 *)this + 69);
  if (v4 < a2 || v4 >= 64)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  if (v4 > a2)
  {
    LOWORD(v4) = v4 - 1;
    v5 = *((_QWORD *)this + 26);
    v6 = *((_QWORD *)this + 27);
    do
    {
      v7 = 2 * (__int16)v4 + 2;
      *(_WORD *)(v5 + v7) = *(_WORD *)(v5 + 2 * (__int16)v4);
      *(_WORD *)(v6 + v7) = *(_WORD *)(v6 + 2 * (__int16)v4);
      v4 = (__int16)(v4 - 1);
    }
    while (v4 >= a2);
  }
  v8 = *((_QWORD *)this + 27);
  *(_WORD *)(*((_QWORD *)this + 26) + 2 * a2) = a3;
  *(_WORD *)(v8 + 2 * a2) = a4;
  ++*((_WORD *)this + 69);
  *((_QWORD *)this + 2) |= 0x100uLL;
  return this;
}

void sub_22A18620C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getLineSpaceReference(WrdParagraphProperties *this)
{
  *((_QWORD *)this + 2) |= 0x20000uLL;
  return *((_QWORD *)this + 5);
}

WrdParagraphProperties *WrdParagraphProperties::setParagraphInTable(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 2uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFE | a2 & 1;
  return this;
}

_QWORD *WrdParagraphTextRun::clone(WrdParagraphTextRun *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (*(uint64_t (**)(WrdParagraphProperties *))(*(_QWORD *)this->var4 + 24))(this->var4);
  v3 = (*(uint64_t (**)(WrdParagraphProperties *))(*(_QWORD *)this->var5 + 24))(this->var5);
  v4 = (*(uint64_t (**)(WrdTableProperties *))(*(_QWORD *)this->var6 + 24))(this->var6);
  v5 = (*(uint64_t (**)(WrdTableProperties *))(*(_QWORD *)this->var7 + 24))(this->var7);
  v6 = operator new(0x38uLL);
  WrdTextRun::WrdTextRun((uint64_t)v6, this->var1, this->var2);
  *v6 = &off_24F3B3A00;
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v5;
  WrdParagraphTextRun::operator=((uint64_t)v6, (uint64_t)this);
  return v6;
}

void sub_22A18631C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22A186380()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A186388);
  JUMPOUT(0x22A186348);
}

void sub_22A1863A0()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x22A1863A8);
  JUMPOUT(0x22A18634CLL);
}

void sub_22A1863C0()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x22A186360);
  JUMPOUT(0x22A186350);
}

uint64_t WrdParagraphTextRun::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  WrdParagraphProperties::operator=(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  WrdParagraphProperties::operator=(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  WrdTableProperties::operator=(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  WrdTableProperties::operator=(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  return a1;
}

WrdParagraphProperties *WrdParagraphProperties::setTableTrailerParagraph(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 4uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFFD | (2 * (a2 & 1));
  return this;
}

void WrdTapParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5, _WORD *a6)
{
  unsigned __int8 *v7;
  WrdTapParser *SizeOfSPRMParameter;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  WrdTableCellDescriptor *v18;
  WrdShading *v19;
  unsigned int v20;
  signed int v21;
  int v22;
  int SInt16;
  __int16 v24;
  __int16 v25;
  WrdBorder *TopBorderReference;
  __int16 v27;
  WrdDateTime *DttmRevisionMarkReference;
  __int16 v29;
  int v30;
  char v31;
  WrdTapParser *TableAutoformatLookSpecifierReference;
  WrdShading *v33;
  uint64_t v34;
  unsigned int v35;
  WrdTableCellDescriptor *v36;
  WrdShading *v37;
  int v38;
  int v39;
  WrdTableCellDescriptor *v40;
  WrdShading *v41;
  __int16 v42;
  unsigned int v43;
  unsigned int v44;
  WrdTableCellDescriptor *v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  WrdTableCellDescriptor *v51;
  WrdTableCellDescriptor *v52;
  WrdTableCellDescriptor *v53;
  WrdTableCellDescriptor *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned __int8 v59;
  unsigned int v60;
  unsigned int v61;
  WrdTableCellDescriptor *v62;
  WrdTableCellDescriptor *v63;
  unsigned int v64;
  unsigned int v65;
  WrdTableCellDescriptor *v66;
  WrdTableCellDescriptor *v67;
  __int16 v68;
  __int16 v69;
  int v70;
  __int16 v71;
  __int16 v72;
  int v73;
  __int16 v74;
  char v75;
  int v76;
  WrdBorder *v77;
  WrdBorder *LeftBorderReference;
  WrdBorder *BottomBorderReference;
  WrdBorder *RightBorderReference;
  WrdBorder *InnerHorizontalBorderReference;
  unsigned __int16 *v82;
  WrdBorder *InnerVerticalBorderReference;
  unsigned __int16 *v84;
  int v85;
  int v86;
  unsigned __int8 *v87;
  __int16 v88;
  unsigned __int8 *v89;
  BOOL v90;
  int v91;
  int v92;
  unsigned __int8 v93;
  WrdTableCellDescriptor *v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  WrdTableCellDescriptor *v98;
  WrdShading *v99;
  int v100;
  int v101;
  int v102;
  unsigned __int8 v103;
  WrdTableCellDescriptor *v104;
  WrdShading *v105;
  uint64_t v106;
  unsigned int v107;
  WrdTableCellDescriptor *v108;
  WrdShading *v109;
  WrdBorder *v110;
  WrdBorder *v111;
  WrdBorder *v112;
  WrdBorder *v113;
  WrdBorder *v114;
  uint64_t v115;
  unsigned int v116;
  WrdTableCellDescriptor *v117;
  WrdShading *v118;
  int v119;
  int i;
  uint64_t v121;
  WrdTableCellDescriptor *v122;
  CsColour *v123;
  int v124;
  int j;
  uint64_t v126;
  WrdTableCellDescriptor *v127;
  CsColour *v128;
  int v129;
  int k;
  uint64_t v131;
  WrdTableCellDescriptor *v132;
  CsColour *v133;
  int v134;
  int m;
  uint64_t v136;
  WrdTableCellDescriptor *v137;
  CsColour *v138;
  unsigned int v139;
  unsigned int v140;
  char v141;
  WrdShading *v142;
  __n128 v143;
  WrdTapParser *v144;
  unsigned int v145;
  unsigned int v146;
  char v147;
  unsigned __int16 *v148;
  WrdTapParser *v149;
  WrdBorder *DiagonalDownBorderReference;
  unsigned int v151;
  int v152;
  WrdTableCellDescriptor *v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  WrdTableCellDescriptor *v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  int v165;
  WrdTableCellDescriptor *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  char v170;
  WrdTapParser *v171;
  WrdBorder *v172;
  unsigned int v173;
  unsigned int v174;
  __int16 *v175;
  int v176;
  __int16 v177;
  __int16 v178;
  WrdTableCellDescriptor *v179;
  unsigned int v180;
  unsigned int v181;
  WrdTableCellDescriptor *v182;
  unsigned __int8 v183;
  int v184;
  __int16 v185;
  unsigned int v186;
  unsigned int v187;
  __int16 v188;
  __int16 PositionOfCell;
  __int16 v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  __int16 v194;
  WrdTableCellDescriptor *TableCellDescriptorReference;
  uint64_t v196;
  unsigned int v197;
  __int16 v198;
  __int16 v199;
  unsigned int v200;
  unsigned int v201;
  WrdTableCellDescriptor *v202;
  uint64_t ShadingReference;
  int v204;
  unsigned int v205;
  unsigned __int8 v206;
  WrdTableCellDescriptor *v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int UInt16;
  char v212;
  int v213;
  int v214;
  WrdTableCellDescriptor *v215;
  WrdTableCellDescriptor *v216;
  WrdTableCellDescriptor *v217;
  WrdTableCellDescriptor *v218;
  WrdTableCellDescriptor *v219;
  char v220;
  _DWORD *exception;
  int v222;
  const char *v223;
  int v224;
  unsigned __int16 v225;

  if (*(_DWORD *)a3 != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    v222 = 2002;
    goto LABEL_444;
  }
  v7 = a4;
  if (a4 >= (unsigned __int8 *)a5
    || (SizeOfSPRMParameter = (WrdTapParser *)WrdProperty::getSizeOfSPRMParameter(a3),
        *a6 = (_WORD)SizeOfSPRMParameter,
        (_DWORD)SizeOfSPRMParameter)
    && (_DWORD)SizeOfSPRMParameter != 0xFFFF
    && (!v7 || (char *)a5 - (char *)v7 < (unint64_t)SizeOfSPRMParameter))
  {
LABEL_443:
    exception = __cxa_allocate_exception(4uLL);
    v222 = 1004;
LABEL_444:
    *exception = v222;
  }
  v225 = 0;
  v13 = *(unsigned __int16 *)(a3 + 8);
  if (v13 <= 0xD604)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0x5663u)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x9406u)
      {
        if (*(unsigned __int16 *)(a3 + 8) <= 0x7478u)
        {
          if (v13 == 22116)
          {
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v31 = CsLeReadUInt16((unsigned __int16 *)v7) != 0;
              WrdTableProperties::setRightToLeft((WrdTableProperties *)a2, v31);
              return;
            }
            v223 = "applySprm with bad TFBiDi data size\n";
            v224 = 346;
          }
          else
          {
            if (v13 != 29706)
            {
              if (v13 == 29708)
                ChLogFunction("Unimplemented sprm code 0x740C\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", 375);
              return;
            }
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
            {
              TableAutoformatLookSpecifierReference = (WrdTapParser *)WrdTableProperties::getTableAutoformatLookSpecifierReference((WrdTableProperties *)a2);
              WrdTapParser::parseTableAutoformatLookSpecifier(TableAutoformatLookSpecifierReference, TableAutoformatLookSpecifierReference, v7);
              return;
            }
            v223 = "applySprm with bad TTlp data size\n";
            v224 = 650;
          }
        }
        else
        {
          switch(*(_WORD *)(a3 + 8))
          {
            case 0x7621:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
              {
                v21 = *v7;
                v22 = v7[1];
                SInt16 = CsLeReadSInt16((__int16 *)v7 + 1);
                WrdTableProperties::insertCells((WrdTableProperties *)a2, v21, v22, SInt16);
                return;
              }
              v223 = "applySprm with bad TInsert data size\n";
              v224 = 381;
              goto LABEL_442;
            case 0x7622:
            case 0x7624:
            case 0x7625:
            case 0x7626:
              return;
            case 0x7623:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
              {
                v186 = *v7;
                v187 = v7[1];
                if (*(__int16 *)(a2 + 344) < (int)v187)
                  WrdTableProperties::setNumberOfCellsForRow((WrdTableProperties *)a2, v7[1]);
                v188 = CsLeReadSInt16((__int16 *)v7 + 1);
                PositionOfCell = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v187);
                v190 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v186);
                if (v186 < v187)
                {
                  v191 = v186;
                  do
                  {
                    v192 = v191 + 1;
                    v193 = v191;
                    v194 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v191);
                    WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v192, v194 + v188);
                    TableCellDescriptorReference = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v193);
                    WrdTableCellDescriptor::setWidth(TableCellDescriptorReference, v188);
                    v196 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v193);
                    WrdTableCellDescriptor::setWidthUnit(v196, 3);
                    v191 = v192;
                  }
                  while (v192 < v187);
                }
                v197 = v187 + 1;
                if (*(__int16 *)(a2 + 344) >= (int)(v187 + 1))
                {
                  v198 = v188 * (v187 - v186) - PositionOfCell + v190;
                  do
                  {
                    v199 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v197);
                    WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v197++, v198 + v199);
                  }
                  while (*(__int16 *)(a2 + 344) >= (int)v197);
                }
                return;
              }
              v223 = "applySprm with bad TDxaCol data size\n";
              v224 = 271;
              goto LABEL_442;
            case 0x7627:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                v200 = *v7;
                v201 = v7[1];
                v142 = (WrdShading *)operator new(0x28uLL);
                WrdShading::WrdShading(v142);
                WrdBaseParser::parseSHD80(a1, v142, (unsigned __int16 *)v7 + 1, a5);
                if (v200 < v201)
                {
                  do
                  {
                    v202 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v200);
                    ShadingReference = WrdTableCellDescriptor::getShadingReference(v202);
                    v143.n128_f64[0] = WrdShading::operator=(ShadingReference, (uint64_t)v142);
                    ++v200;
                  }
                  while (v201 > v200);
                }
                goto LABEL_371;
              }
              v223 = "applySprm with bad TSetShd80 data size\n";
              v224 = 485;
              goto LABEL_442;
            case 0x7628:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                v204 = *v7;
                v205 = v7[1];
                v142 = (WrdShading *)operator new(0x28uLL);
                WrdShading::WrdShading(v142);
                WrdBaseParser::parseSHD80(a1, v142, (unsigned __int16 *)v7 + 1, a5);
                v206 = v204 | 1;
                if ((v204 | 1u) < v205)
                {
                  do
                  {
                    if ((*(_DWORD *)(WrdTableProperties::getTableCellDescriptor((WrdTableProperties *)a2, v206) + 8) & 1) == 0)
                    {
                      v207 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v206);
                      v208 = WrdTableCellDescriptor::getShadingReference(v207);
                      v143.n128_f64[0] = WrdShading::operator=(v208, (uint64_t)v142);
                    }
                    v206 += 2;
                  }
                  while (v205 > v206);
                }
                goto LABEL_371;
              }
              v223 = "applySprm with bad TSetShdOdd80 data size\n";
              v224 = 501;
              goto LABEL_442;
            case 0x7629:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 3)
              {
                v209 = *v7;
                v210 = v7[1];
                UInt16 = CsLeReadUInt16((unsigned __int16 *)v7 + 1);
                if (v209 < v210)
                {
                  v212 = UInt16 & 1;
                  v213 = (UInt16 >> 4) & 1;
                  v214 = (UInt16 >> 8) & 1;
                  do
                  {
                    v215 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v209);
                    WrdTableCellDescriptor::setVerticalTextFlow(v215, v212);
                    v216 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v209);
                    WrdTableCellDescriptor::setBottomToTopTextFlow(v216, v213);
                    v217 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v209);
                    WrdTableCellDescriptor::setRotateFont(v217, v214);
                    ++v209;
                  }
                  while (v210 > v209);
                }
                return;
              }
              v223 = "applySprm with bad TTextFlow data size\n";
              v224 = 631;
              break;
            default:
              if (v13 != 29817)
                return;
              if (v7)
              {
                WrdTableProperties::setTableRevisionSaveID((WrdTableProperties *)a2, *v7);
                return;
              }
              v223 = "applySprm with bad 0x7479 data size\n";
              v224 = 1114;
              goto LABEL_442;
          }
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) > 0x941Du)
      {
        if (*(unsigned __int16 *)(a3 + 8) <= 0x9600u)
        {
          if (v13 == 37918)
          {
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v76 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setRightDistanceFromText((WrdTableProperties *)a2, v76);
              return;
            }
            v223 = "applySprm with bad TDxaFromTextRight data size\n";
            v224 = 869;
          }
          else
          {
            if (v13 != 37919)
              return;
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v30 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setBottomDistanceFromText((WrdTableProperties *)a2, v30);
              return;
            }
            v223 = "applySprm with bad TDyaFromTextBottom data size\n";
            v224 = 893;
          }
        }
        else if (v13 == 38401)
        {
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            v68 = CsLeReadUInt16((unsigned __int16 *)v7);
            v69 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, 0);
            if (*(__int16 *)(a2 + 344) >= 1)
            {
              v70 = 0;
              v71 = v68 - v69 - *(_WORD *)(a2 + 296);
              do
              {
                v72 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, v70);
                WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v70++, v71 + v72);
              }
              while (*(__int16 *)(a2 + 344) > (int)v70);
            }
            return;
          }
          v223 = "applySprm with bad TDxaLeft data size\n";
          v224 = 321;
        }
        else
        {
          if (v13 != 38402)
          {
            if (v13 == 54399)
            {
              TopBorderReference = (WrdBorder *)WrdTableProperties::getTopBorderReference((WrdTableProperties *)a2);
LABEL_325:
              WrdBaseParser::parseBuffer(a1, TopBorderReference, v7, (const unsigned __int8 *)a5);
            }
            return;
          }
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
          {
            v73 = CsLeReadUInt16((unsigned __int16 *)v7);
            v74 = WrdTableProperties::getPositionOfCell((WrdTableProperties *)a2, 0);
            WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, 0, v74 - v73 + *(_WORD *)(a2 + 296));
            WrdTableProperties::setHalfOfGapBetweenTextInAdjColOfTableRow((WrdTableProperties *)a2, v73);
            return;
          }
          v223 = "applySprm with bad TDxaGapHalf data size\n";
          v224 = 301;
        }
      }
      else
      {
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x9407:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v15 = CsLeReadSInt16((__int16 *)v7);
              WrdTableProperties::setRowHeight((WrdTableProperties *)a2, v15);
              return;
            }
            v223 = "applySprm with bad TDyaRowHeight data size\n";
            v224 = 338;
            goto LABEL_442;
          case 0x940E:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v55 = CsLeReadSInt16((__int16 *)v7);
              WrdTableProperties::setAbsoluteHorizontalPosition((WrdTableProperties *)a2, v55);
              return;
            }
            v223 = "applySprm with bad TDxaAbs data size\n";
            v224 = 853;
            goto LABEL_442;
          case 0x940F:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v56 = CsLeReadSInt16((__int16 *)v7);
              WrdTableProperties::setAbsoluteVerticalPosition((WrdTableProperties *)a2, v56);
              return;
            }
            v223 = "applySprm with bad TDyaAbs data size\n";
            v224 = 877;
            goto LABEL_442;
          case 0x9410:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v57 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setLeftDistanceFromText((WrdTableProperties *)a2, v57);
              return;
            }
            v223 = "applySprm with bad TDxaFromText data size\n";
            v224 = 861;
            goto LABEL_442;
          case 0x9411:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v58 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setTopDistanceFromText((WrdTableProperties *)a2, v58);
              return;
            }
            v223 = "applySprm with bad TDyaFromText data size\n";
            v224 = 885;
            break;
          default:
            return;
        }
      }
      goto LABEL_442;
    }
    if (*(unsigned __int16 *)(a3 + 8) > 0x3614u)
    {
      if (*(unsigned __int16 *)(a3 + 8) > 0x560Au)
      {
        if (*(unsigned __int16 *)(a3 + 8) <= 0x5623u)
        {
          if (v13 == 22027)
          {
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v75 = CsLeReadUInt16((unsigned __int16 *)v7) != 0;
              WrdTableProperties::setBiDirectional((WrdTableProperties *)a2, v75);
              return;
            }
            v223 = "applySprm with bad TFBiDi80 data size\n";
            v224 = 355;
          }
          else
          {
            if (v13 != 22050)
              return;
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              WrdTableProperties::deleteCells((WrdTableProperties *)a2, *v7, v7[1] - *v7);
              return;
            }
            v223 = "applySprm with bad TDelete data size\n";
            v224 = 245;
          }
        }
        else
        {
          switch(v13)
          {
            case 0x5624u:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                v60 = *v7;
                v61 = v7[1];
                v62 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v60);
                WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(v62, 1);
                while (1)
                {
                  LOBYTE(v60) = v60 + 1;
                  if (v61 <= v60)
                    break;
                  v63 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v60);
                  WrdTableCellDescriptor::setIsMergedWithPrecedingCell(v63, 1);
                }
                return;
              }
              v223 = "applySprm with bad TMerge data size\n";
              v224 = 405;
              break;
            case 0x5625u:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                v64 = *v7;
                v65 = v7[1];
                if (v64 < v65)
                {
                  do
                  {
                    v66 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v64);
                    WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(v66, 0);
                    v67 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v64);
                    WrdTableCellDescriptor::setIsMergedWithPrecedingCell(v67, 0);
                    ++v64;
                  }
                  while (v65 > v64);
                }
                return;
              }
              v223 = "applySprm with bad TSplit data size\n";
              v224 = 567;
              break;
            case 0x563Au:
              if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
              {
                v25 = CsLeReadUInt16((unsigned __int16 *)v7);
                WrdTableProperties::setTableStyleIndex((WrdTableProperties *)a2, v25);
                return;
              }
              v223 = "applySprm with bad 0x563A data size\n";
              v224 = 958;
              break;
            default:
              return;
          }
        }
      }
      else if (*(unsigned __int16 *)(a3 + 8) <= 0x3662u)
      {
        if (v13 == 13845)
        {
          if (v7)
          {
            WrdTableProperties::setAutoFit((WrdTableProperties *)a2, *v7);
            return;
          }
          v223 = "applySprm with bad TFAutoFit data size\n";
          v224 = 901;
        }
        else
        {
          if (v13 != 13849)
            return;
          if (v7)
          {
            WrdTableProperties::setKeepWithFollowing((WrdTableProperties *)a2, *v7);
            return;
          }
          v223 = "applySprm with bad TFKeepFollow data size\n";
          v224 = 724;
        }
      }
      else
      {
        switch(v13)
        {
          case 0x3663u:
            if (v7)
            {
              WrdTableProperties::setNeverBeenAutoFit((WrdTableProperties *)a2, *v7);
              return;
            }
            v223 = "applySprm with bad TFNeverBeenAutofit data size\n";
            v224 = 732;
            break;
          case 0x5400u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v59 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setJustification(a2, v59);
              return;
            }
            v223 = "applySprm with bad TJc data size\n";
            v224 = 396;
            break;
          case 0x548Au:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
            {
              v14 = CsLeReadUInt16((unsigned __int16 *)v7);
              WrdTableProperties::setTableAlignment(a2, v14);
              return;
            }
            v223 = "applySprm with bad 0x548A data size\n";
            v224 = 978;
            break;
          default:
            return;
        }
      }
      goto LABEL_442;
    }
    if (*(unsigned __int16 *)(a3 + 8) > 0x347Bu)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0x3487u)
      {
        if (v13 == 13436)
        {
          if (v7)
          {
            WrdTableProperties::setVerticalCellAlignment(a2, *v7);
            return;
          }
          v223 = "applySprm with bad 0x347C data size\n";
          v224 = 966;
        }
        else
        {
          if (v13 != 13437)
            return;
          if (v7)
          {
            WrdTableProperties::setDoNotWrapText((WrdTableProperties *)a2, *v7);
            return;
          }
          v223 = "applySprm with bad 0x347D data size\n";
          v224 = 1032;
        }
      }
      else
      {
        switch(v13)
        {
          case 0x3488u:
            if (v7)
            {
              WrdTableProperties::setNumberOfRowsInRowBand((WrdTableProperties *)a2, *v7);
              return;
            }
            v223 = "applySprm with bad 0x3488 data size\n";
            v224 = 1072;
            break;
          case 0x3489u:
            if (v7)
            {
              WrdTableProperties::setNumberOfColumnsInColumnBand((WrdTableProperties *)a2, *v7);
              return;
            }
            v223 = "applySprm with bad 0x3489 data size\n";
            v224 = 1080;
            break;
          case 0x360Du:
            if (v7)
            {
              v20 = *v7;
              if ((v20 & 0x30) != 0x30)
                WrdTableProperties::setVerticalPosition(a2, (v20 & 0x30) >> 4);
              if ((~v20 & 0xC0) != 0)
                WrdTableProperties::setHorizontalPosition(a2, v20 >> 6);
              return;
            }
            v223 = "applySprm with bad TPc data size\n";
            v224 = 748;
            break;
          default:
            return;
        }
      }
      goto LABEL_442;
    }
    if (*(unsigned __int16 *)(a3 + 8) > 0x3464u)
    {
      if (v13 == 13413)
      {
        if (v7)
        {
          WrdTableProperties::setDoNotAllowOverlap((WrdTableProperties *)a2, *v7);
          return;
        }
        v223 = "applySprm with bad TFNoAllowOverlap data size\n";
        v224 = 740;
        goto LABEL_442;
      }
      if (v13 != 13414)
        return;
    }
    else if (v13 != 13315)
    {
      if (v13 != 13316)
        return;
      if (v7)
      {
        WrdTableProperties::setTableHeader((WrdTableProperties *)a2, *v7);
        return;
      }
      v223 = "applySprm with bad TTableHeader data size\n";
      v224 = 623;
      goto LABEL_442;
    }
    if (v7)
    {
      WrdTableProperties::setCantSplit((WrdTableProperties *)a2, *v7);
      return;
    }
    v223 = "applySprm with bad TFCantSplit data size\n";
    v224 = 365;
LABEL_442:
    ChLogFunction(v223, 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", v224);
    goto LABEL_443;
  }
  if (*(unsigned __int16 *)(a3 + 8) > 0xD661u)
  {
    if (*(unsigned __int16 *)(a3 + 8) > 0xF613u)
    {
      if (*(unsigned __int16 *)(a3 + 8) <= 0xF617u)
      {
        if (v13 == 62996)
        {
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
          {
            WrdTableProperties::setPreferredTableWidthUnit(a2, *v7);
            v46 = CsLeReadSInt16((__int16 *)(v7 + 1));
            WrdTableProperties::setPreferredTableWidth((WrdTableProperties *)a2, v46);
            return;
          }
          v223 = "applySprm with bad TTableWidth data size\n";
          v224 = 909;
        }
        else
        {
          if (v13 != 62999)
            return;
          if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
          {
            WrdTableProperties::setWidthOfInvisibleCellBeforeUnit(a2, *v7);
            v29 = CsLeReadSInt16((__int16 *)(v7 + 1));
            WrdTableProperties::setWidthOfInvisibleCellBefore((WrdTableProperties *)a2, v29);
            return;
          }
          v223 = "applySprm with bad TWidthBefore data size\n";
          v224 = 933;
        }
      }
      else
      {
        switch(v13)
        {
          case 0xF618u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              WrdTableProperties::setWidthOfInvisibleCellAfterUnit(a2, *v7);
              v42 = CsLeReadSInt16((__int16 *)(v7 + 1));
              WrdTableProperties::setWidthOfInvisibleCellAfter((WrdTableProperties *)a2, v42);
              return;
            }
            v223 = "applySprm with bad TWidthAfter data size\n";
            v224 = 921;
            break;
          case 0xF636u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              v43 = *v7;
              v44 = v7[1];
              if (v43 < v44)
              {
                do
                {
                  v45 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v43);
                  WrdTableCellDescriptor::setFitText(v45, v7[2]);
                  ++v43;
                }
                while (v44 > v43);
              }
              return;
            }
            v223 = "applySprm with bad TFitText data size\n";
            v224 = 711;
            break;
          case 0xF661u:
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              WrdTableProperties::setWidthIndentUnit(a2, *v7);
              v24 = CsLeReadSInt16((__int16 *)(v7 + 1));
              WrdTableProperties::setWidthIndent((WrdTableProperties *)a2, v24);
              return;
            }
            v223 = "applySprm with bad TWidthIndent data size\n";
            v224 = 945;
            break;
          default:
            return;
        }
      }
    }
    else
    {
      switch(*(_WORD *)(a3 + 8))
      {
        case 0xD670:
          if (*(__int16 *)(a2 + 344) >= 1)
          {
            v16 = 0;
            v17 = 0;
            do
            {
              if (v16 >= *(unsigned __int8 *)(a3 + 13))
                break;
              v18 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v17);
              v19 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v18);
              WrdBaseParser::parseBuffer((uint64_t)a1, v19, &v7[v16], (const unsigned __int8 *)a5);
              if (v17 > 0x14)
                break;
              ++v17;
              v16 += 10;
            }
            while (*(__int16 *)(a2 + 344) > (__int16)v17);
          }
          return;
        case 0xD671:
          if (*(__int16 *)(a2 + 344) >= 23)
          {
            v34 = 0;
            v35 = 22;
            do
            {
              if (v34 >= *(unsigned __int8 *)(a3 + 13))
                break;
              v36 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v35);
              v37 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v36);
              WrdBaseParser::parseBuffer((uint64_t)a1, v37, &v7[v34], (const unsigned __int8 *)a5);
              if (v35 > 0x2A)
                break;
              ++v35;
              v34 += 10;
            }
            while (*(__int16 *)(a2 + 344) > (__int16)v35);
          }
          return;
        case 0xD672:
          if (*(__int16 *)(a2 + 344) >= 45)
          {
            v38 = 44;
            v39 = 44;
            do
            {
              if (10 * v38 - 440 >= *(unsigned __int8 *)(a3 + 13))
                break;
              v40 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v39);
              v41 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v40);
              WrdBaseParser::parseBuffer((uint64_t)a1, v41, v7, (const unsigned __int8 *)a5);
              v7 += 10;
              v38 = ++v39;
            }
            while (v39 < *(__int16 *)(a2 + 344));
          }
          return;
        case 0xD673:
        case 0xD674:
        case 0xD675:
        case 0xD676:
        case 0xD677:
        case 0xD678:
        case 0xD679:
        case 0xD67A:
        case 0xD67B:
        case 0xD67C:
        case 0xD67D:
        case 0xD67E:
        case 0xD67F:
          return;
        case 0xD680:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getBottomBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD681:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getLeftBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD682:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getRightBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD683:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getInnerHorizontalBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD684:
LABEL_247:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getInnerVerticalBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD685:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalDownBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD686:
LABEL_324:
          TopBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalUpBorderReference((WrdTableProperties *)a2);
          goto LABEL_325;
        case 0xD687:
LABEL_119:
          v33 = (WrdShading *)WrdTableProperties::getShadingReference((WrdTableProperties *)a2);
          WrdBaseParser::parseBuffer((uint64_t)a1, v33, v7, (const unsigned __int8 *)a5);
          return;
        default:
          if (v13 == 54882)
          {
            v47 = *(__int16 *)(a2 + 344);
            if (v47 >= *(unsigned __int8 *)(a3 + 13) >> 2)
              v47 = *(unsigned __int8 *)(a3 + 13) >> 2;
            if (!v47)
              return;
            if (v7 && (char *)a5 - (char *)v7 >= (unint64_t)(4 * (__int16)v47))
            {
              v48 = (__int16)v47;
              if ((__int16)v47 >= 1)
              {
                v49 = 0;
                do
                {
                  v50 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v49);
                  *(_DWORD *)(v50 + 8) |= 0x800u;
                  v51 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v49);
                  *(_DWORD *)(WrdTableCellDescriptor::getTopBorderReference(v51) + 16) = *v7;
                  v52 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v49);
                  *(_DWORD *)(WrdTableCellDescriptor::getLeftBorderReference(v52) + 16) = v7[1];
                  v53 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v49);
                  *(_DWORD *)(WrdTableCellDescriptor::getBottomBorderReference(v53) + 16) = v7[2];
                  v54 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v49);
                  *(_DWORD *)(WrdTableCellDescriptor::getRightBorderReference(v54) + 16) = v7[3];
                  v7 += 4;
                  ++v49;
                }
                while (v48 != v49);
              }
              return;
            }
            v223 = "applySprm with bad TCellBrcType data size\n";
            v224 = 804;
          }
          else
          {
            if (v13 != 54887)
              return;
            if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
            {
              WrdTableProperties::setRevisionMark((WrdTableProperties *)a2, *v7 == 1);
              v27 = CsLeReadUInt16((unsigned __int16 *)(v7 + 1));
              WrdTableProperties::setAuthorIDForRevision((WrdTableProperties *)a2, v27);
              DttmRevisionMarkReference = (WrdDateTime *)WrdTableProperties::getDttmRevisionMarkReference((WrdTableProperties *)a2);
              WrdBaseParser::parseBuffer(a1, DttmRevisionMarkReference, v7 + 3, (unsigned __int8 *)a5);
              return;
            }
            v223 = "applySprm with bad 0xD667 data size\n";
            v224 = 1088;
          }
          break;
      }
    }
    goto LABEL_442;
  }
  switch(*(_WORD *)(a3 + 8))
  {
    case 0xD605:
      *(_DWORD *)(a2 + 24) |= 0x8000000u;
      v77 = (WrdBorder *)WrdTableProperties::getTopBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, v77, (unsigned __int16 *)v7, a5);
      LeftBorderReference = (WrdBorder *)WrdTableProperties::getLeftBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, LeftBorderReference, (unsigned __int16 *)v7 + 2, a5);
      BottomBorderReference = (WrdBorder *)WrdTableProperties::getBottomBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, BottomBorderReference, (unsigned __int16 *)v7 + 4, a5);
      RightBorderReference = (WrdBorder *)WrdTableProperties::getRightBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, RightBorderReference, (unsigned __int16 *)v7 + 6, a5);
      InnerHorizontalBorderReference = (WrdBorder *)WrdTableProperties::getInnerHorizontalBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, InnerHorizontalBorderReference, (unsigned __int16 *)v7 + 8, a5);
      v82 = (unsigned __int16 *)(v7 + 20);
      InnerVerticalBorderReference = (WrdBorder *)WrdTableProperties::getInnerVerticalBorderReference((WrdTableProperties *)a2);
      goto LABEL_295;
    case 0xD606:
      ChLogFunction("Unimplemented sprm code 0xD606\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", 157);
      return;
    case 0xD607:
    case 0xD60A:
    case 0xD60B:
    case 0xD60D:
    case 0xD60E:
    case 0xD60F:
    case 0xD610:
    case 0xD611:
    case 0xD614:
    case 0xD615:
    case 0xD617:
    case 0xD618:
    case 0xD619:
    case 0xD61E:
    case 0xD61F:
    case 0xD621:
    case 0xD622:
    case 0xD623:
    case 0xD624:
    case 0xD625:
    case 0xD627:
    case 0xD628:
    case 0xD629:
    case 0xD636:
    case 0xD63A:
    case 0xD63B:
    case 0xD63C:
    case 0xD63D:
      return;
    case 0xD608:
      *a6 = *(unsigned __int8 *)(a3 + 13) | (*v7 << 8);
      if (v7 + 1 >= (unsigned __int8 *)a5)
      {
        ChLogFunction("applySprm with bad data size-- skipping\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", 123);
      }
      else
      {
        WrdTableProperties::setNumberOfCellsForRow((WrdTableProperties *)a2, v7[1]);
        v84 = (unsigned __int16 *)(v7 + 2);
        v85 = *(__int16 *)(a2 + 344);
        if ((v85 & 0x80000000) == 0 && v7 + 4 <= (unsigned __int8 *)a5)
        {
          v86 = 0;
          v87 = v7 + 6;
          do
          {
            v88 = CsLeReadUInt16((unsigned __int16 *)v87 - 2);
            WrdTableProperties::setPositionOfCell((WrdTableProperties *)a2, v86++, v88);
            v89 = v87 + 2;
            v90 = *(__int16 *)(a2 + 344) < (int)v86 || v87 > (unsigned __int8 *)a5;
            v87 += 2;
          }
          while (!v90);
          v85 = *(unsigned __int16 *)(a2 + 344);
          v84 = (unsigned __int16 *)(v89 - 4);
        }
        v91 = (unsigned __int16)*a6;
        v92 = v91 - 2 * v85 - 4;
        if ((unsigned __int16)(v91 - 2 * v85 - 4) >= 0x14u)
        {
          v93 = 0;
          do
          {
            if (*(__int16 *)(a2 + 344) <= (int)v93)
              break;
            v94 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v93);
            WrdTapParser::parsePartOfTableCellDescriptor(a1, v94, v84, a5);
            v84 += 10;
            v92 -= 20;
            ++v93;
          }
          while ((unsigned __int16)v92 > 0x13u);
        }
      }
      return;
    case 0xD609:
      if (*(__int16 *)(a2 + 344) >= 1)
      {
        v95 = 0;
        v96 = 0;
        do
        {
          v97 = v96;
          if (v96 >= *(unsigned __int8 *)(a3 + 13))
            break;
          if ((*(_DWORD *)(WrdTableProperties::getTableCellDescriptor((WrdTableProperties *)a2, v95) + 8) & 1) == 0)
          {
            v98 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v95);
            v99 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v98);
            WrdBaseParser::parseSHD80(a1, v99, (unsigned __int16 *)v7, a5);
          }
          v7 += 2;
          v96 = v97 + 2;
          ++v95;
        }
        while (*(__int16 *)(a2 + 344) > (int)v95);
      }
      return;
    case 0xD60C:
      v100 = *(__int16 *)(a2 + 344);
      if (v100 >= 45)
      {
        v101 = 44;
        do
        {
          if (10 * v101 - 440 >= *(unsigned __int8 *)(a3 + 13))
            break;
          v102 = (__int16)v100;
          v103 = 44;
          if ((__int16)v100 >= 45)
          {
            do
            {
              v104 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v103);
              v105 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v104);
              WrdBaseParser::parseBuffer((uint64_t)a1, v105, v7, (const unsigned __int8 *)a5);
              v7 += 10;
              ++v103;
              v102 = *(__int16 *)(a2 + 344);
            }
            while (v102 > v103);
            LOWORD(v100) = *(_WORD *)(a2 + 344);
          }
          v101 = (v103 + 1);
        }
        while (v102 > v101);
      }
      return;
    case 0xD612:
      if (*(__int16 *)(a2 + 344) >= 1)
      {
        v106 = 0;
        v107 = 0;
        do
        {
          if (v106 >= *(unsigned __int8 *)(a3 + 13))
            break;
          v108 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v107);
          v109 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v108);
          WrdBaseParser::parseBuffer((uint64_t)a1, v109, &v7[v106], (const unsigned __int8 *)a5);
          if (v107 > 0x14)
            break;
          ++v107;
          v106 += 10;
        }
        while (*(__int16 *)(a2 + 344) > (__int16)v107);
      }
      return;
    case 0xD613:
      *(_DWORD *)(a2 + 24) |= 0x8000000u;
      v110 = (WrdBorder *)WrdTableProperties::getTopBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v110, v7, (const unsigned __int8 *)a5);
      v111 = (WrdBorder *)WrdTableProperties::getLeftBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v111, v7 + 8, (const unsigned __int8 *)a5);
      v112 = (WrdBorder *)WrdTableProperties::getBottomBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v112, v7 + 16, (const unsigned __int8 *)a5);
      v113 = (WrdBorder *)WrdTableProperties::getRightBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v113, v7 + 24, (const unsigned __int8 *)a5);
      v114 = (WrdBorder *)WrdTableProperties::getInnerHorizontalBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v114, v7 + 32, (const unsigned __int8 *)a5);
      v7 += 40;
      goto LABEL_247;
    case 0xD616:
      if (*(__int16 *)(a2 + 344) >= 23)
      {
        v115 = 0;
        v116 = 22;
        do
        {
          if (v115 >= *(unsigned __int8 *)(a3 + 13))
            break;
          v117 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v116);
          v118 = (WrdShading *)WrdTableCellDescriptor::getShadingReference(v117);
          WrdBaseParser::parseBuffer((uint64_t)a1, v118, &v7[v115], (const unsigned __int8 *)a5);
          if (v116 > 0x2A)
            break;
          ++v116;
          v115 += 10;
        }
        while (*(__int16 *)(a2 + 344) > (__int16)v116);
      }
      return;
    case 0xD61A:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2)
        v119 = *(unsigned __int8 *)(a3 + 13) >> 2;
      else
        v119 = *(__int16 *)(a2 + 344);
      if (v119 >= 1)
      {
        for (i = 0; i != v119; ++i)
        {
          v121 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, i);
          *(_DWORD *)(v121 + 8) |= 0x80u;
          v122 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, i);
          v123 = (CsColour *)WrdTableCellDescriptor::getTopBorderReference(v122);
          WrdBaseParser::parseBuffer(a1, v123 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD61B:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2)
        v124 = *(unsigned __int8 *)(a3 + 13) >> 2;
      else
        v124 = *(__int16 *)(a2 + 344);
      if (v124 >= 1)
      {
        for (j = 0; j != v124; ++j)
        {
          v126 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, j);
          *(_DWORD *)(v126 + 8) |= 0x100u;
          v127 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, j);
          v128 = (CsColour *)WrdTableCellDescriptor::getLeftBorderReference(v127);
          WrdBaseParser::parseBuffer(a1, v128 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD61C:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2)
        v129 = *(unsigned __int8 *)(a3 + 13) >> 2;
      else
        v129 = *(__int16 *)(a2 + 344);
      if (v129 >= 1)
      {
        for (k = 0; k != v129; ++k)
        {
          v131 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, k);
          *(_DWORD *)(v131 + 8) |= 0x200u;
          v132 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, k);
          v133 = (CsColour *)WrdTableCellDescriptor::getBottomBorderReference(v132);
          WrdBaseParser::parseBuffer(a1, v133 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD61D:
      if (*(__int16 *)(a2 + 344) >= *(unsigned __int8 *)(a3 + 13) >> 2)
        v134 = *(unsigned __int8 *)(a3 + 13) >> 2;
      else
        v134 = *(__int16 *)(a2 + 344);
      if (v134 >= 1)
      {
        for (m = 0; m != v134; ++m)
        {
          v136 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, m);
          *(_DWORD *)(v136 + 8) |= 0x400u;
          v137 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, m);
          v138 = (CsColour *)WrdTableCellDescriptor::getRightBorderReference(v137);
          WrdBaseParser::parseBuffer(a1, v138 + 1, v7, (const unsigned __int8 *)a5);
          v7 += 4;
        }
      }
      return;
    case 0xD620:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        v139 = *v7;
        v140 = v7[1];
        v141 = v7[2];
        v142 = (WrdShading *)operator new(0x20uLL);
        WrdBorder::WrdBorder((WrdBorder *)v142);
        WrdBaseParser::parseBRC80(a1, (WrdBorder *)v142, (unsigned __int16 *)(v7 + 3), a5);
        if (v139 < v140)
        {
          do
          {
            v144 = (WrdTapParser *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v139);
            v143.n128_f64[0] = WrdTapParser::setBorderBasedOnFlags(v144, v141, (const WrdBorder *)v142, v144);
            ++v139;
          }
          while (v140 > v139);
        }
LABEL_371:
        (*((void (**)(WrdShading *, __n128))v142->var0 + 1))(v142, v143);
        return;
      }
      v223 = "applySprm with bad TSetBrc80 data size\n";
      v224 = 420;
      goto LABEL_442;
    case 0xD626:
      if (!v7 || (unint64_t)((char *)a5 - (char *)v7) <= 2)
      {
        v223 = "applySprm with bad TSetBrc10 data size\n";
        v224 = 442;
        goto LABEL_442;
      }
      v145 = *v7;
      v146 = v7[1];
      v147 = v7[2];
      v142 = (WrdShading *)operator new(0x20uLL);
      WrdBorder::WrdBorder((WrdBorder *)v142);
      if (v145 < v146)
      {
        v148 = (unsigned __int16 *)(v7 + 3);
        do
        {
          WrdBaseParser::parseBRC10(a1, (WrdBorder *)v142, v148, a5);
          v149 = (WrdTapParser *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v145);
          v143.n128_f64[0] = WrdTapParser::setBorderBasedOnFlags(v149, v147, (const WrdBorder *)v142, v149);
          ++v148;
          ++v145;
        }
        while (v146 > v145);
      }
      if (v142)
        goto LABEL_371;
      return;
    case 0xD62A:
      DiagonalDownBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalDownBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBRC80(a1, DiagonalDownBorderReference, (unsigned __int16 *)v7, a5);
      v82 = (unsigned __int16 *)(v7 + 4);
      InnerVerticalBorderReference = (WrdBorder *)WrdTableProperties::getDiagonalUpBorderReference((WrdTableProperties *)a2);
LABEL_295:
      WrdBaseParser::parseBRC80(a1, InnerVerticalBorderReference, v82, a5);
      return;
    case 0xD62B:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
      {
        v151 = *v7;
        v152 = v7[1];
        if (v152 == 3)
        {
          v218 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, *v7);
          WrdTableCellDescriptor::setIsVerticallyMergedCell(v218, 1);
          v219 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v151);
          v220 = 1;
        }
        else
        {
          if (v152 == 1)
          {
            v153 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, *v7);
            v154 = 1;
          }
          else
          {
            if (v7[1])
              return;
            v153 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, *v7);
            v154 = 0;
          }
          WrdTableCellDescriptor::setIsVerticallyMergedCell(v153, v154);
          v219 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v151);
          v220 = 0;
        }
        WrdTableCellDescriptor::setIsFirstInSetOfVerticallyMergedCells(v219, v220);
        return;
      }
      v223 = "applySprm with bad TVertMerge data size\n";
      v224 = 675;
      goto LABEL_442;
    case 0xD62C:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        v155 = *v7;
        v156 = v7[1];
        if (v155 < v156)
        {
          v157 = v7[2];
          do
          {
            v158 = WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v155);
            WrdTableCellDescriptor::setVerticalCellAlignment(v158, v157);
            ++v155;
          }
          while (v156 > v155);
        }
        return;
      }
      v223 = "applySprm with bad TVertAlign data size\n";
      v224 = 659;
      goto LABEL_442;
    case 0xD62D:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
      {
        v159 = *v7;
        v160 = v7[1];
        v142 = (WrdShading *)operator new(0x28uLL);
        WrdShading::WrdShading(v142);
        WrdBaseParser::parseBuffer((uint64_t)a1, v142, v7 + 2, (const unsigned __int8 *)a5);
        if (v159 < v160)
        {
          do
          {
            v161 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v159);
            v162 = WrdTableCellDescriptor::getShadingReference(v161);
            v143.n128_f64[0] = WrdShading::operator=(v162, (uint64_t)v142);
            ++v159;
          }
          while (v160 > v159);
        }
        goto LABEL_371;
      }
      v223 = "applySprm with bad TSetShd data size\n";
      v224 = 526;
      goto LABEL_442;
    case 0xD62E:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 1)
      {
        v163 = *v7;
        v164 = v7[1];
        v142 = (WrdShading *)operator new(0x28uLL);
        WrdShading::WrdShading(v142);
        WrdBaseParser::parseSHD80(a1, v142, (unsigned __int16 *)v7 + 1, a5);
        v165 = v163 | 1;
        if ((v163 | 1u) < v164)
        {
          do
          {
            v166 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v165);
            v167 = WrdTableCellDescriptor::getShadingReference(v166);
            v143.n128_f64[0] = WrdShading::operator=(v167, (uint64_t)v142);
            v165 += 2;
          }
          while (v164 > v165);
        }
        goto LABEL_371;
      }
      v223 = "applySprm with bad TSetShdOdd data size\n";
      v224 = 543;
      goto LABEL_442;
    case 0xD62F:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        v168 = *v7;
        v169 = v7[1];
        v170 = v7[2];
        v142 = (WrdShading *)operator new(0x20uLL);
        WrdBorder::WrdBorder((WrdBorder *)v142);
        WrdBaseParser::parseBuffer(a1, (WrdBorder *)v142, v7 + 3, (const unsigned __int8 *)a5);
        if (v168 < v169)
        {
          do
          {
            v171 = (WrdTapParser *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v168);
            v143.n128_f64[0] = WrdTapParser::setBorderBasedOnFlags(v171, v170, (const WrdBorder *)v142, v171);
            ++v168;
          }
          while (v169 > v168);
        }
        goto LABEL_371;
      }
      v223 = "applySprm with bad TSetBrc data size\n";
      v224 = 464;
      goto LABEL_442;
    case 0xD630:
      v172 = (WrdBorder *)WrdTableProperties::getDiagonalDownBorderReference((WrdTableProperties *)a2);
      WrdBaseParser::parseBuffer(a1, v172, v7, (const unsigned __int8 *)a5);
      v7 += 8;
      goto LABEL_324;
    case 0xD631:
    case 0xD632:
    case 0xD633:
    case 0xD634:
    case 0xD637:
    case 0xD638:
      if ((char *)a5 - (char *)v7 > 5)
      {
        WrdTapParser::parseSpacingAndPadding(SizeOfSPRMParameter, v13, (WrdTableProperties *)a2, v7, &v225);
        return;
      }
      ChLogFunction("applySprm with bad TCellPadding or TCellSpacing data size\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdTapParser.cpp", 824);
      exception = __cxa_allocate_exception(4uLL);
      v222 = 1005;
      goto LABEL_444;
    case 0xD635:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 4)
      {
        v173 = *v7;
        v174 = v7[1];
        v175 = (__int16 *)(v7 + 3);
        v176 = v7[2];
        v177 = CsLeReadSInt16(v175);
        if (v173 < v174)
        {
          v178 = v177;
          do
          {
            v179 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v173);
            WrdTableCellDescriptor::setWidthUnit((uint64_t)v179, v176);
            WrdTableCellDescriptor::setWidth(v179, v178);
            ++v173;
          }
          while (v174 > v173);
        }
        return;
      }
      v223 = "applySprm with bad TCellWidth data size\n";
      v224 = 833;
      goto LABEL_442;
    case 0xD639:
      if (v7 && (unint64_t)((char *)a5 - (char *)v7) > 2)
      {
        v180 = *v7;
        v181 = v7[1];
        if (v180 < v181)
        {
          do
          {
            v182 = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference((WrdTableProperties *)a2, v180);
            WrdTableCellDescriptor::setNoWrap(v182, v7[2]);
            ++v180;
          }
          while (v181 > v180);
        }
        return;
      }
      v223 = "applySprm with bad TFCellNoWrap data size\n";
      v224 = 698;
      goto LABEL_442;
    case 0xD63E:
      if (!v7 || (unint64_t)((char *)a5 - (char *)v7) <= 5)
      {
        v223 = "applySprm with bad 0xD63E data size\n";
        v224 = 989;
        goto LABEL_442;
      }
      if (a5 <= (unsigned __int16 *)v7 + 1 || (unint64_t)((char *)a5 - (char *)(v7 + 2)) <= 3)
        goto LABEL_443;
      v183 = v7[2];
      v184 = v7[3];
      v185 = CsLeReadSInt16((__int16 *)v7 + 2);
      if ((v183 & 1) != 0)
      {
        WrdTableProperties::setDefaultCellTopCellPaddingUnit(a2, v184);
        WrdTableProperties::setDefaultCellTopCellPadding((WrdTableProperties *)a2, v185);
        if ((v183 & 2) == 0)
        {
LABEL_343:
          if ((v183 & 4) == 0)
            goto LABEL_344;
          goto LABEL_382;
        }
      }
      else if ((v183 & 2) == 0)
      {
        goto LABEL_343;
      }
      WrdTableProperties::setDefaultCellLeftCellPaddingUnit(a2, v184);
      WrdTableProperties::setDefaultCellLeftCellPadding((WrdTableProperties *)a2, v185);
      if ((v183 & 4) == 0)
      {
LABEL_344:
        if ((v183 & 8) == 0)
          return;
        goto LABEL_383;
      }
LABEL_382:
      WrdTableProperties::setDefaultCellBottomCellPaddingUnit(a2, v184);
      WrdTableProperties::setDefaultCellBottomCellPadding((WrdTableProperties *)a2, v185);
      if ((v183 & 8) == 0)
        return;
LABEL_383:
      WrdTableProperties::setDefaultCellRightCellPaddingUnit(a2, v184);
      WrdTableProperties::setDefaultCellRightCellPadding((WrdTableProperties *)a2, v185);
      return;
    default:
      if (v13 == 54880)
        goto LABEL_119;
      return;
  }
}

void sub_22A1889E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WrdTableProperties::getPositionOfCell(WrdTableProperties *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 31);
  if (((unint64_t)(*((_QWORD *)this + 32) - v2) >> 1) <= a2)
    return 0;
  else
    return *(__int16 *)(v2 + 2 * a2);
}

WrdTableProperties *WrdTableProperties::setPositionOfCell(WrdTableProperties *this, unsigned int a2, __int16 a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 31);
  if (((*((_QWORD *)this + 32) - v3) & 0x1FFFFFFFELL) != 0)
  {
    *((_QWORD *)this + 2) |= 0x4000000000000000uLL;
    *(_WORD *)(v3 + 2 * a2) = a3;
  }
  return this;
}

WrdTableProperties *WrdTableProperties::setHalfOfGapBetweenTextInAdjColOfTableRow(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x80000000000uLL;
  *((_DWORD *)this + 74) = a2;
  return this;
}

uint64_t WrdTableProperties::getTopBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x20uLL;
  return *((_QWORD *)this + 7);
}

uint64_t WrdTableProperties::getLeftBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x40uLL;
  return *((_QWORD *)this + 8);
}

uint64_t WrdTableProperties::getBottomBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x80uLL;
  return *((_QWORD *)this + 9);
}

uint64_t WrdTableProperties::getRightBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x100uLL;
  return *((_QWORD *)this + 10);
}

uint64_t WrdTableProperties::getInnerHorizontalBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x200uLL;
  return *((_QWORD *)this + 11);
}

uint64_t WrdTableProperties::getInnerVerticalBorderReference(WrdTableProperties *this)
{
  *((_QWORD *)this + 2) |= 0x400uLL;
  return *((_QWORD *)this + 12);
}

void WrdTableProperties::setNumberOfCellsForRow(WrdTableProperties *this, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  __int16 v35;
  unint64_t v36;
  _WORD *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int16 v49;

  *((_QWORD *)this + 2) |= 0x2000000000000000uLL;
  *((_WORD *)this + 172) = a2;
  *((_QWORD *)this + 32) = *((_QWORD *)this + 31);
  WrdTableProperties::resetTableCellDescriptors(this);
  if (a2 >= 1)
  {
    if (*((__int16 *)this + 172) <= 0)
    {
      v24 = (char *)*((_QWORD *)this + 32);
    }
    else
    {
      LOWORD(v4) = 0;
      do
      {
        v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
        v6 = v5;
        v8 = (uint64_t *)*((_QWORD *)this + 35);
        v7 = *((_QWORD *)this + 36);
        if ((unint64_t)v8 >= v7)
        {
          v10 = *((_QWORD *)this + 34);
          v11 = (unint64_t)v8 - v10;
          v12 = (v7 - v10) >> 3;
          v13 = 2 * v12;
          if (2 * (int)v12 <= (v11 >> 3) + 1)
            v13 = (v11 >> 3) + 1;
          if (v12 >= 0x7FFFFFFF)
            v14 = 0xFFFFFFFFLL;
          else
            v14 = v13;
          if ((_DWORD)v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 288, v14);
            v17 = v16;
          }
          else
          {
            v15 = 0;
            v17 = 0;
          }
          v18 = (uint64_t *)&v15[v11 & 0x7FFFFFFF8];
          *v18 = v6;
          v9 = v18 + 1;
          v20 = (char *)*((_QWORD *)this + 34);
          v19 = (char *)*((_QWORD *)this + 35);
          if (v19 != v20)
          {
            do
            {
              v21 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *--v18 = v21;
            }
            while (v19 != v20);
            v19 = (char *)*((_QWORD *)this + 34);
          }
          *((_QWORD *)this + 34) = v18;
          *((_QWORD *)this + 35) = v9;
          *((_QWORD *)this + 36) = &v15[8 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v8 = v5;
          v9 = v8 + 1;
        }
        *((_QWORD *)this + 35) = v9;
        v23 = (char *)*((_QWORD *)this + 32);
        v22 = *((_QWORD *)this + 33);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (_BYTE *)*((_QWORD *)this + 31);
          v26 = v23 - v25;
          v27 = (unint64_t)(v23 - v25) >> 1;
          v28 = (v22 - (unint64_t)v25) >> 1;
          if (2 * (int)v28 <= (v27 + 1))
            v29 = v27 + 1;
          else
            v29 = 2 * v28;
          if (v28 >= 0x7FFFFFFF)
            v30 = 0xFFFFFFFFLL;
          else
            v30 = v29;
          if ((_DWORD)v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 264, v30);
            v33 = v32;
            v25 = (_BYTE *)*((_QWORD *)this + 31);
            v23 = (char *)*((_QWORD *)this + 32);
          }
          else
          {
            v31 = 0;
            v33 = 0;
          }
          v34 = &v31[v26 & 0x1FFFFFFFELL];
          *(_WORD *)v34 = 0;
          v24 = v34 + 2;
          while (v23 != v25)
          {
            v35 = *((_WORD *)v23 - 1);
            v23 -= 2;
            *((_WORD *)v34 - 1) = v35;
            v34 -= 2;
          }
          *((_QWORD *)this + 31) = v34;
          *((_QWORD *)this + 32) = v24;
          *((_QWORD *)this + 33) = &v31[2 * v33];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_WORD *)v23 = 0;
          v24 = v23 + 2;
        }
        *((_QWORD *)this + 32) = v24;
        v4 = (__int16)(v4 + 1);
      }
      while (v4 < *((__int16 *)this + 172));
    }
    v36 = *((_QWORD *)this + 33);
    if ((unint64_t)v24 >= v36)
    {
      v38 = (char *)*((_QWORD *)this + 31);
      v39 = v24 - v38;
      v40 = (unint64_t)(v24 - v38) >> 1;
      v41 = (v36 - (unint64_t)v38) >> 1;
      if (2 * (int)v41 <= (v40 + 1))
        v42 = v40 + 1;
      else
        v42 = 2 * v41;
      if (v41 >= 0x7FFFFFFF)
        v43 = 0xFFFFFFFFLL;
      else
        v43 = v42;
      if ((_DWORD)v43)
      {
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 264, v43);
        v46 = v45;
        v38 = (char *)*((_QWORD *)this + 31);
        v24 = (char *)*((_QWORD *)this + 32);
      }
      else
      {
        v44 = 0;
        v46 = 0;
      }
      v47 = &v44[v39 & 0x1FFFFFFFELL];
      v48 = &v44[2 * v46];
      *(_WORD *)v47 = 0;
      v37 = v47 + 2;
      while (v24 != v38)
      {
        v49 = *((_WORD *)v24 - 1);
        v24 -= 2;
        *((_WORD *)v47 - 1) = v49;
        v47 -= 2;
      }
      *((_QWORD *)this + 31) = v47;
      *((_QWORD *)this + 32) = v37;
      *((_QWORD *)this + 33) = v48;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_WORD *)v24 = 0;
      v37 = v24 + 2;
    }
    *((_QWORD *)this + 32) = v37;
  }
}

uint64_t WrdTableProperties::getTableCellDescriptorReference(WrdTableProperties *this, unsigned int a2)
{
  int v4;

  v4 = *((__int16 *)this + 172);
  if (v4 <= (int)a2)
    WrdTableProperties::insertCells(this, (__int16)v4, (__int16)(a2 - v4 + 1), 0);
  *((_QWORD *)this + 2) |= 0x2000uLL;
  return *(_QWORD *)(*((_QWORD *)this + 34) + 8 * a2);
}

uint64_t WrdTableCellDescriptor::setIsFirstInRangeOfMergedCells(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_DWORD *)result = v3 | 0x80000000;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFFE | a2 & 1;
  return result;
}

uint64_t WrdTableCellDescriptor::setIsMergedWithPrecedingCell(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 1;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFFD | (2 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setVerticalTextFlow(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 2;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFFB | (4 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setBottomToTopTextFlow(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 4;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFF7 | (8 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setRotateFont(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 8;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFEF | (16 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setIsVerticallyMergedCell(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 0x10;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFDF | (32 * (a2 & 1));
  return result;
}

uint64_t WrdTableCellDescriptor::setIsFirstInSetOfVerticallyMergedCells(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 0x20;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFFBF | ((a2 & 1) << 6);
  return result;
}

int *WrdTableCellDescriptor::setVerticalCellAlignment(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  *result = v3 | 0x1000;
  result[16] = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::setWidth(WrdTableCellDescriptor *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_DWORD *)result = v3 | 0x400000;
  *(_WORD *)(result + 104) = a2;
  return result;
}

uint64_t WrdTableCellDescriptor::getTopBorderReference(WrdTableCellDescriptor *this)
{
  char *v1;
  int v2;

  v2 = *((_DWORD *)this + 2);
  v1 = (char *)this + 8;
  *(_DWORD *)v1 = v2 | 2;
  return *((_QWORD *)v1 + 2);
}

uint64_t WrdTableCellDescriptor::getLeftBorderReference(WrdTableCellDescriptor *this)
{
  char *v1;
  int v2;

  v2 = *((_DWORD *)this + 2);
  v1 = (char *)this + 8;
  *(_DWORD *)v1 = v2 | 4;
  return *((_QWORD *)v1 + 3);
}

uint64_t WrdTableCellDescriptor::getBottomBorderReference(WrdTableCellDescriptor *this)
{
  char *v1;
  int v2;

  v2 = *((_DWORD *)this + 2);
  v1 = (char *)this + 8;
  *(_DWORD *)v1 = v2 | 8;
  return *((_QWORD *)v1 + 4);
}

uint64_t WrdTableCellDescriptor::getRightBorderReference(WrdTableCellDescriptor *this)
{
  char *v1;
  int v2;

  v2 = *((_DWORD *)this + 2);
  v1 = (char *)this + 8;
  *(_DWORD *)v1 = v2 | 0x10;
  return *((_QWORD *)v1 + 5);
}

uint64_t WrdFileInformationBlockHeader::isBiDiLanguage(WrdFileInformationBlockHeader *this)
{
  int v1;
  uint64_t result;
  BOOL v3;
  int v4;

  v1 = *(_DWORD *)this;
  result = 1;
  if (v1 > 7168)
  {
    if (v1 > 12288)
    {
      if (v1 <= 14336)
      {
        v3 = v1 == 12289;
        v4 = 13313;
      }
      else
      {
        v3 = v1 == 14337 || v1 == 15361;
        v4 = 16385;
      }
    }
    else if (v1 <= 9216)
    {
      v3 = v1 == 7169;
      v4 = 8193;
    }
    else
    {
      v3 = v1 == 9217 || v1 == 10241;
      v4 = 11265;
    }
    goto LABEL_31;
  }
  if (v1 <= 2048)
  {
    if (v1 <= 1024)
    {
      if (v1 != 1 && v1 != 13)
        return 0;
      return result;
    }
    if (v1 == 1025 || v1 == 1037)
      return result;
    return 0;
  }
  if (v1 <= 4096)
  {
    if (v1 == 2049 || v1 == 3073)
      return result;
    return 0;
  }
  v3 = v1 == 4097 || v1 == 5121;
  v4 = 6145;
LABEL_31:
  if (!v3 && v1 != v4)
    return 0;
  return result;
}

WrdTableProperties *WrdTableProperties::upgradeToVersion10(WrdTableProperties *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_DWORD *)this + 6);
  if ((v2 & 1) != 0)
  {
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
  }
  else
  {
    v3 = *((_DWORD *)this + 74);
    v2 |= 1u;
    *((_QWORD *)this + 2) = v1;
    *((_DWORD *)this + 6) = v2;
    *((_WORD *)this + 174) = v3;
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      if ((v2 & 4) != 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  v1 |= 0x100000uLL;
  *((_QWORD *)this + 2) = v1;
  *((_DWORD *)this + 6) = v2;
  *((_DWORD *)this + 38) = 3;
  if ((v2 & 4) != 0)
  {
LABEL_4:
    if ((v1 & 0x400000) != 0)
      return this;
LABEL_9:
    *((_QWORD *)this + 2) = v1 | 0x400000;
    *((_DWORD *)this + 6) = v2;
    *((_DWORD *)this + 40) = 3;
    return this;
  }
LABEL_8:
  v4 = *((_DWORD *)this + 74);
  v2 |= 4u;
  *((_QWORD *)this + 2) = v1;
  *((_DWORD *)this + 6) = v2;
  *((_WORD *)this + 176) = v4;
  if ((v1 & 0x400000) == 0)
    goto LABEL_9;
  return this;
}

void sub_22A189190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A189280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A189358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1895E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A1896DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A189BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A189D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A18A300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A18A388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18A498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A18A5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18A788(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, WrdCharacterTextRun *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v16;
  void *v17;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a14);
  if (a2 == 3)
  {
    v16 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v16);
    __cxa_end_catch();
  }
  else
  {
    v17 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v17, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A18A750);
}

void sub_22A18A868(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A18A83CLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A18A9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A18AB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A18AD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A18ADF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18AF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A18B01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18B138(void *a1, int a2)
{
  void *v2;
  void *v3;
  unsigned int *v6;
  void *v7;

  if (a2 == 3)
  {
    v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    v7 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v7, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A18B110);
}

void sub_22A18B1CC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A18B110);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A18B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A18B868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WrdTableProperties::insertCells(WrdTableProperties *this, signed int a2, int a3, int a4)
{
  unsigned int v4;
  signed int v6;
  __int16 v7;
  __int16 v8;
  signed int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  signed int v17;
  signed int i;
  unsigned int v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *exception;

  if ((a3 | a2 | a4) < 0 || (v4 = a2, v6 = *((__int16 *)this + 172), v6 < a2))
  {
    ChLogFunction("WrdTableProperties::insertCells with bad arguments-- skipping\n", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Model/WrdTableProperties.cpp", 1256);
  }
  else
  {
    v7 = a4;
    v8 = a3;
    *((_QWORD *)this + 2) |= 0x2000000000000000uLL;
    v9 = (__int16)(v6 + a3);
    v10 = (_QWORD *)((char *)this + 248);
    std::vector<short,ChAllocator<short>>::resize((uint64_t)this + 248, v9 + 1);
    v11 = (_QWORD *)((char *)this + 272);
    v13 = *((_QWORD *)this + 34);
    v12 = *((_QWORD *)this + 35);
    v14 = v12 - v13;
    v15 = (v12 - v13) >> 3;
    std::vector<EshHeader *,ChAllocator<EshHeader *>>::resize((uint64_t)this + 272, v9);
    if (v9 > (__int16)v15)
    {
      v16 = v14 << 45 >> 48;
      do
        *(_QWORD *)(*v11 + 8 * v16++) = 0;
      while (v9 != v16);
    }
    v17 = (__int16)(v8 + v4);
    for (i = (__int16)(v9 - 1); i >= v17; i = (__int16)(i - 1))
    {
      v19 = (__int16)(i - v8);
      *(_WORD *)(*v10 + 2 * ((__int16)i + 1)) = *(_WORD *)(*v10 + 2 * (v19 + 1)) + v7 * v8;
      *(_QWORD *)(*v11 + 8 * (__int16)i) = *(_QWORD *)(*v11 + 8 * v19);
    }
    if (v17 > (int)v4)
    {
      do
      {
        v20 = (_WORD *)*v10;
        if ((int)v4 < 1)
        {
          *v20 = 0;
          v20[1] = v7;
          **((_QWORD **)this + 34) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5));
          v22 = v4++;
        }
        else
        {
          v20[v4 + 1] = v20[v4] + v7;
          v21 = *(_QWORD *)(*v11 + 8 * (v4 - 1));
          if (!v21)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = 1004;
          }
          v22 = v4;
          *(_QWORD *)(*v11 + 8 * v4++) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        }
        WrdTableCellDescriptor::setWidth(*(WrdTableCellDescriptor **)(*v11 + 8 * v22), v7);
        WrdTableCellDescriptor::setWidthUnit(*(_QWORD *)(*v11 + 8 * v22), 3);
      }
      while ((unsigned __int16)v17 != (unsigned __int16)v4);
    }
    *((_WORD *)this + 172) = v9;
  }
}

int *WrdTableCellDescriptor::setWidthUnit(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  result = (int *)(a1 + 8);
  *result = v3 | 0x2000;
  result[17] = a2;
  return result;
}

void sub_22A18BF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WrdParagraphTextRun::~WrdParagraphTextRun(WrdParagraphTextRun *this)
{
  WrdParagraphProperties *var4;
  WrdParagraphProperties *var5;
  WrdTableProperties *var6;
  WrdTableProperties *var7;

  this->var0 = (void **)&off_24F3B3A00;
  var4 = this->var4;
  if (var4)
    (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)var4 + 8))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*(void (**)(WrdParagraphProperties *))(*(_QWORD *)var5 + 8))(var5);
  this->var5 = 0;
  var6 = this->var6;
  if (var6)
    (*(void (**)(WrdTableProperties *))(*(_QWORD *)var6 + 8))(var6);
  this->var6 = 0;
  var7 = this->var7;
  if (var7)
    (*(void (**)(WrdTableProperties *))(*(_QWORD *)var7 + 8))(var7);
  this->var7 = 0;
}

{
  WrdParagraphTextRun::~WrdParagraphTextRun(this);
  JUMPOUT(0x22E2DD408);
}

void purgeTextRuns(NSMutableArray *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSMutableArray *v5;

  v5 = a1;
  v1 = -[NSMutableArray count](v5, "count");
  if (v1)
  {
    v2 = 0;
    do
    {
      -[NSMutableArray objectAtIndex:](v5, "objectAtIndex:", v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "pointerValue");
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

      ++v2;
    }
    while (v1 != v2);
  }
  -[NSMutableArray removeAllObjects](v5, "removeAllObjects");

}

void sub_22A18C060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A18C124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A18C510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A18C96C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18CA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A18D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A18D31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A18D410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void EshMetafileBlip::~EshMetafileBlip(EshMetafileBlip *this)
{
  *(_QWORD *)this = &off_24F39EEF8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)this + 4);
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F39EEF8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)this + 4);
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 72));
  EshBlip::~EshBlip((EshBlip *)this);
}

void WrdEshShape::~WrdEshShape(WrdEshShape *this)
{
  *(_QWORD *)this = &off_24F3B30E0;
  *((_QWORD *)this + 52) = &unk_24F3B31B0;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B30E0;
  *((_QWORD *)this + 52) = &unk_24F3B31B0;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
}

uint64_t XlEshShape::cleanup(XlEshShape *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 72);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 72) = 0;
  v3 = *((_QWORD *)this + 73);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 73) = 0;
  result = *((_QWORD *)this + 74);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 74) = 0;
  return result;
}

void WrdEshClientAnchor::~WrdEshClientAnchor(WrdEshClientAnchor *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A18D65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18DC60()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A18DC6CLL);
}

void sub_22A18DC74()
{
  JUMPOUT(0x22A18DD6CLL);
}

void sub_22A18DEA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A18E1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18E3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18E510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18E644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18E7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A18E8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A18EA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A18EC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A18ECCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18EE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A18F070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A18F13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A18F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A18F5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v12;

  _Unwind_Resume(a1);
}

void sub_22A18F744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18F7F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18F980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A18FAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A18FB8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18FC3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A18FEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1901A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1902BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19041C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1905C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A190AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A191064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1912A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A191324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A191490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1916EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A19193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A191A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A191BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_22A191D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A192268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A192DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A192FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A193030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1930D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A19315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A19327C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A193304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A193584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A193738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A193830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1938B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A193A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A193C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A193D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A193E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19410C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A1942A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A19441C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1944F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A194608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1946A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A194898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1949A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A194C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A194DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A194E38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1950BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1951E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A195280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1952D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1953A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A195618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A195844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A19593C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A195A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A195DA4(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x22A195D30);
}

void sub_22A195DB4(void *a1)
{
  int v1;

  objc_begin_catch(a1);
  objc_end_catch();
  if (!v1)
    JUMPOUT(0x22A195D30);
  JUMPOUT(0x22A195D28);
}

void sub_22A195DC8(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x22A195D38);
}

void sub_22A195DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_22A195E08(void *a1, int a2)
{
  void *v2;

  objc_begin_catch(a1);
  if (a2 == 2)
  {

    objc_end_catch();
  }
  JUMPOUT(0x22A195D54);
}

void sub_22A195FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_22A196174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A196270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1964AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A196590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1969C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A196B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A196F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A197020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A197330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1973D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A197484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A197510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1978F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A197AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A197B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A197C58(_Unwind_Exception *a1, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x22A197C3CLL);
  }
  _Unwind_Resume(a1);
}

void sub_22A197D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x22A197CF4);
  }
  _Unwind_Resume(exception_object);
}

void sub_22A198048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A198248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A198394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19842C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A198608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A198684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A19893C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A198A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A198C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A19907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1996A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1997A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A199944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A199AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A199B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A199E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A199F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19A018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A19A1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A19A3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A19A624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A19A89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A19A998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A19AA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A19AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A19ACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A19AEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A19AF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A19B44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A19B738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A19BE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A19BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A19C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A19C1A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WMState;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A19C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)WBReader;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t **WrdParser::closeDoc(WrdParser *this)
{
  SsrwOORootStorage *v2;
  uint64_t **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  SsrwOOStorage *v13;

  v2 = (WrdParser *)((char *)this + 24);
  result = (uint64_t **)SsrwOORootStorage::isOpen((WrdParser *)((char *)this + 24));
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 18);
    if (v4)
    {
      v5 = v4 - 16;
      v6 = *(_QWORD *)(v4 - 8);
      if (v6)
      {
        v7 = 184 * v6;
        v8 = v4 - 184;
        do
        {
          TSURectWithOriginAndSize(v8 + v7);
          v7 -= 184;
        }
        while (v7);
      }
      MEMORY[0x22E2DD3F0](v5, 0x1020C80285AA8CALL);
    }
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 2) = 0;
    v9 = (_QWORD *)*((_QWORD *)this + 34);
    if (v9)
    {
      if (*v9)
        MEMORY[0x22E2DD3F0](*v9, 0x1000C8052888210);
      *v9 = 0;
      MEMORY[0x22E2DD408](v9, 0x1010C40A1D9428BLL);
    }
    *((_QWORD *)this + 34) = 0;
    v10 = *((_QWORD *)this + 16);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *((_QWORD *)this + 16) = 0;
    v11 = *((_QWORD *)this + 14);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *((_QWORD *)this + 14) = 0;
    v12 = *((_QWORD *)this + 15);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *((_QWORD *)this + 15) = 0;
    v13 = (SsrwOOStorage *)*((_QWORD *)this + 17);
    if (v13)
    {
      SsrwOOStorage::~SsrwOOStorage(v13);
      MEMORY[0x22E2DD408]();
    }
    *((_QWORD *)this + 17) = 0;
    result = SsrwOORootStorage::close(v2, 0);
  }
  *((_QWORD *)this + 2) = 0;
  return result;
}

void WrdParser::~WrdParser(WrdParser *this)
{
  WrdParser::~WrdParser(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3B4A40;
  WrdParser::closeDoc(this);
  v2 = *((_QWORD *)this + 35);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 35) = 0;
  v3 = *((_QWORD *)this + 36);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  *((_QWORD *)this + 36) = 0;
  WrdFileInformationBlock::~WrdFileInformationBlock((WrdParser *)((char *)this + 160));
  SsrwOORootStorage::~SsrwOORootStorage((WrdParser *)((char *)this + 24));
  OcParser::OcParser(this);
}

void WrdObjectFactory::~WrdObjectFactory(WrdObjectFactory *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3868;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B3868;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
}

void WrdEshObjectFactory::~WrdEshObjectFactory(WrdEshObjectFactory *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdFileInformationBlock::~WrdFileInformationBlock(WrdFileInformationBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
  *((_QWORD *)this + 6) = 0;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8052888210);
  *((_QWORD *)this + 8) = 0;
  v4 = *((_QWORD *)this + 10);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8000313F17);
  *((_QWORD *)this + 10) = 0;
  TSURectWithOriginAndSize(this);
}

void WrdRdrText::~WrdRdrText(WrdRdrText *this)
{
  *(_QWORD *)this = &off_24F3B4AA8;
  WrdPieceTable::~WrdPieceTable((WrdRdrText *)((char *)this + 72));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B4AA8;
  WrdPieceTable::~WrdPieceTable((WrdRdrText *)((char *)this + 72));
}

void WrdPieceTable::~WrdPieceTable(WrdPieceTable *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 1) = 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C80C899CFE7);
  *((_QWORD *)this + 2) = 0;
}

void WrdCHPXFKP::~WrdCHPXFKP(WrdCHPXFKP *this)
{
  WrdFormattedDiskPage::~WrdFormattedDiskPage(this);
  JUMPOUT(0x22E2DD408);
}

void WrdFormattedDiskPage::~WrdFormattedDiskPage(WrdFormattedDiskPage *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24F3B3400;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, 0);
    v4 = *((_QWORD *)this + 4);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 4) = 0;
  }
}

void SsrwOOMemStream::~SsrwOOMemStream(SsrwOOMemStream *this)
{
  *(_QWORD *)this = &off_24F3A66E0;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3A66E0;
}

void WrdPAPXFKP::~WrdPAPXFKP(WrdPAPXFKP *this)
{
  WrdFormattedDiskPage::~WrdFormattedDiskPage(this);
  JUMPOUT(0x22E2DD408);
}

void WrdSectionDescriptorTable::~WrdSectionDescriptorTable(WrdSectionDescriptorTable *this)
{
  *(_QWORD *)this = &off_24F3B3C30;
  WrdSectionDescriptorTable::cleanup(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B3C30;
  WrdSectionDescriptorTable::cleanup(this);
}

void WrdEmbeddedTTFRecordTable::~WrdEmbeddedTTFRecordTable(WrdEmbeddedTTFRecordTable *this)
{
  WrdEmbeddedTTFRecordTable::~WrdEmbeddedTTFRecordTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B2CB0;
  WrdEmbeddedTTFRecordTable::clear((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t WrdEmbeddedTTFRecordTable::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (((*(_QWORD *)(this + 16) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v3);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C40CE7E837CLL);
        v2 = *(_QWORD *)(v1 + 8);
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = *(_QWORD *)(v1 + 8);
    }
    while (v3 < ((unint64_t)(*(_QWORD *)(v1 + 16) - v2) >> 3));
  }
  *(_QWORD *)(v1 + 16) = v2;
  return this;
}

void WrdDocumentFileRecord::~WrdDocumentFileRecord(WrdDocumentFileRecord *this)
{
  WrdDocumentFileRecord::~WrdDocumentFileRecord(this);
  JUMPOUT(0x22E2DD408);
}

{
  OcBinaryData *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3B2B30;
  *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
  v2 = (OcBinaryData *)((char *)this + 32);
  OcBinaryData::removeBuffer((OcBinaryData *)((char *)this + 32));
  OcBinaryData::~OcBinaryData(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void WrdNoteTable::~WrdNoteTable(WrdNoteTable *this)
{
  WrdNoteTable::~WrdNoteTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B37E8;
  WrdBookmarkTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdAnnotationTable::~WrdAnnotationTable(WrdAnnotationTable *this)
{
  WrdAnnotationTable::~WrdAnnotationTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B2628;
  WrdAnnotationDateTimeTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void WrdCPTableHeaders::~WrdCPTableHeaders(WrdCPTableHeaders *this)
{
  WrdCPTable::~WrdCPTable(this);
  JUMPOUT(0x22E2DD408);
}

void WrdBookmarkTable::~WrdBookmarkTable(WrdBookmarkTable *this)
{
  WrdBookmarkTable::~WrdBookmarkTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B27F0;
  WrdBookmarkTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdBookmark::~WrdBookmark(WrdBookmark *this)
{
  WrdBookmark::~WrdBookmark(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B2778;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  CsString::~CsString((CsString *)((char *)this + 8));
}

void WrdStoryTable::~WrdStoryTable(WrdStoryTable *this)
{
  WrdStoryTable::~WrdStoryTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B3DB0;
  WrdBookmarkTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdFileShapeAddressTable::~WrdFileShapeAddressTable(WrdFileShapeAddressTable *this)
{
  WrdFileShapeAddressTable::~WrdFileShapeAddressTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B3340;
  WrdBookmarkTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdFieldPositionTable::~WrdFieldPositionTable(WrdFieldPositionTable *this)
{
  WrdFieldPositionTable::~WrdFieldPositionTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B32C0;
  WrdBookmarkTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void WrdFieldPosition::~WrdFieldPosition(WrdFieldPosition *this)
{
  WrdFieldDescriptor *var2;

  this->var0 = (void **)&off_24F3B3280;
  var2 = this->var2;
  if (var2)
    (*(void (**)(WrdFieldDescriptor *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
  JUMPOUT(0x22E2DD408);
}

{
  WrdFieldDescriptor *var2;

  this->var0 = (void **)&off_24F3B3280;
  var2 = this->var2;
  if (var2)
    (*(void (**)(WrdFieldDescriptor *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
}

void WrdFieldDescriptor::~WrdFieldDescriptor(WrdFieldDescriptor *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdBinaryReader::~WrdBinaryReader(WrdBinaryReader *this)
{
  WrdBinaryReader::~WrdBinaryReader(this);
  JUMPOUT(0x22E2DD408);
}

{
  OcReader *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WrdBinTable *v6;
  WrdBinTable *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t k;

  *(_QWORD *)this = &off_24F3B44A0;
  *((_QWORD *)this + 1) = &unk_24F3B4688;
  v2 = (OcReader *)((char *)this + 8);
  *((_QWORD *)this + 3) = &unk_24F3B4848;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 4) = 0;
  }
  for (i = 0; i != 192; i += 24)
  {
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 224, *(_QWORD **)((char *)this + i + 232));
    *(_QWORD *)((char *)this + i + 224) = (char *)this + i + 232;
    *(_QWORD *)((char *)this + i + 232) = 0;
    *(_QWORD *)((char *)this + i + 240) = 0;
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + i + 416, *(_QWORD **)((char *)this + i + 424));
    *(_QWORD *)((char *)this + i + 424) = 0;
    *(_QWORD *)((char *)this + i + 432) = 0;
    *(_QWORD *)((char *)this + i + 416) = (char *)this + i + 424;
  }
  v5 = *((_QWORD *)this + 17);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 17) = 0;
  v6 = (WrdBinTable *)*((_QWORD *)this + 18);
  if (v6)
  {
    WrdBinTable::~WrdBinTable(v6);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 18) = 0;
  v7 = (WrdBinTable *)*((_QWORD *)this + 21);
  if (v7)
  {
    WrdBinTable::~WrdBinTable(v7);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 21) = 0;
  v8 = *((_QWORD *)this + 22);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 22) = 0;
  v9 = *((_QWORD *)this + 19);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 19) = 0;
  v10 = *((_QWORD *)this + 24);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 24) = 0;
  v11 = *((_QWORD *)this + 25);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 25) = 0;
  v12 = *((_QWORD *)this + 26);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 26) = 0;
  v13 = *((_QWORD *)this + 27);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *((_QWORD *)this + 27) = 0;
  v14 = *((_QWORD *)this + 87);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 79) = &off_24F3B40E8;
  OcText::~OcText((OcText *)((char *)this + 640));
  for (j = 0; j != -192; j -= 24)
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + j + 584, *(_QWORD **)((char *)this + j + 592));
  for (k = 0; k != -192; k -= 24)
    std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + k + 392, *(_QWORD **)((char *)this + k + 400));
  EshBinaryReader::~EshBinaryReader((WrdBinaryReader *)((char *)this + 40));
  OcReader::~OcReader(v2);
}

void *WrdClxGrpprls::reallocGrpprls(const void **this, unsigned int a2)
{
  __int16 v2;
  const void *v4;
  void *result;
  void *v6;

  v2 = a2;
  v4 = *this;
  result = operator new[](4 * a2);
  v6 = result;
  if (v4)
  {
    memcpy(result, *this, 4 * *((unsigned __int16 *)this + 4));
    result = (void *)*this;
    if (*this)
      result = (void *)MEMORY[0x22E2DD3F0](result, 0x1000C8052888210);
  }
  *this = v6;
  *((_WORD *)this + 4) = v2;
  return result;
}

WrdStyleSheet *WrdStyleSheet::operator=(WrdStyleSheet *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *((_QWORD *)this + 1) = *(_QWORD *)(a2 + 8);
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4) - v4;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v6 = 0;
    v7 = (v5 >> 3);
    do
    {
      v8 = *((_QWORD *)this + 3);
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v8 = *((_QWORD *)this + 3);
      }
      *(_QWORD *)(v8 + 8 * v6++) = 0;
    }
    while (v7 != v6);
    v4 = *((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v4;
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v12 = v10 - v11;
  WrdStyleSheet::setNumberOfStyles(this, (unsigned __int16)((v10 - v11) >> 3));
  if ((v12 & 0x7FFFFFFF8) != 0)
  {
    v13 = 0;
    v14 = (v12 >> 3);
    do
    {
      WrdStyle::operator=(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v13), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v13));
      ++v13;
    }
    while (v14 != v13);
  }
  *((_WORD *)this + 180) = *(_WORD *)(a2 + 360);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setFontIndexForFarEastAsianText(WrdCharacterProperties *this, unsigned __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x4000uLL;
  this->var44 = a2;
  return this;
}

void WrdCharacterProperties::applyBaseProperties(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  unint64_t v4;
  uint64_t var2;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  WrdCharacterProperties::applyImplictProperties(this, a2);
  v4 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  var2 = (uint64_t)this->var2;
  if ((var2 & 2) == 0 && (*(_QWORD *)&a2->var2 & 2) != 0)
  {
    var2 |= 2uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var23 = a2->var23;
  }
  if ((var2 & 4) == 0 && (*(_QWORD *)&a2->var2 & 4) != 0)
  {
    var2 |= 4uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var24 = a2->var24;
  }
  if ((var2 & 0x10) == 0 && (*(_QWORD *)&a2->var2 & 0x10) != 0)
  {
    var2 |= 0x10uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var25 = a2->var25;
  }
  if ((var2 & 0x10000000) == 0 && (*(_QWORD *)&a2->var2 & 0x10000000) != 0)
  {
    var2 |= 0x10000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var27 = a2->var27;
  }
  if ((var2 & 0x20000000) == 0 && (*(_QWORD *)&a2->var2 & 0x20000000) != 0)
  {
    var2 |= 0x20000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var28 = a2->var28;
  }
  if ((var2 & 0x20) == 0 && (*(_QWORD *)&a2->var2 & 0x20) != 0)
  {
    var2 |= 0x20uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var29 = a2->var29;
  }
  if ((var2 & 0x40000000) == 0 && (*(_QWORD *)&a2->var2 & 0x40000000) != 0)
  {
    var2 |= 0x40000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 85) >> 1) & 1));
  }
  if ((var2 & 0x80) == 0 && (*(_QWORD *)&a2->var2 & 0x80) != 0)
  {
    var2 |= 0x80uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var26 = a2->var26;
  }
  if ((var2 & 0x80000000) == 0 && (*(_DWORD *)&a2->var2 & 0x80000000) != 0)
  {
    var2 |= 0x80000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 85) >> 2) & 1));
  }
  if ((var2 & 0x100) == 0 && (*(_QWORD *)&a2->var2 & 0x100) != 0)
  {
    var2 |= 0x100uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var30 = a2->var30;
  }
  if ((var2 & 0x100000000) == 0 && (*(_QWORD *)&a2->var2 & 0x100000000) != 0)
  {
    var2 |= 0x100000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFF7 | (8 * ((*((_DWORD *)a2 + 85) >> 3) & 1));
  }
  if ((var2 & 0x200000000) == 0 && (*(_QWORD *)&a2->var2 & 0x200000000) != 0)
  {
    var2 |= 0x200000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFEF | (16 * ((*((_DWORD *)a2 + 85) >> 4) & 1));
  }
  if ((var2 & 0x400000000) == 0 && (*(_QWORD *)&a2->var2 & 0x400000000) != 0)
  {
    var2 |= 0x400000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFDF | (32 * ((*((_DWORD *)a2 + 85) >> 5) & 1));
  }
  if ((var2 & 0x200) == 0 && (*(_QWORD *)&a2->var2 & 0x200) != 0)
  {
    var2 |= 0x200uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var31 = a2->var31;
  }
  if ((var2 & 0x400) == 0 && (*(_QWORD *)&a2->var2 & 0x400) != 0)
  {
    var2 |= 0x400uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var32 = a2->var32;
  }
  if ((var2 & 1) == 0 && (*(_QWORD *)&a2->var2 & 1) != 0)
  {
    var2 |= 1uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFFE | *((_DWORD *)a2 + 85) & 1;
  }
  if ((var2 & 0x800) == 0 && (*(_QWORD *)&a2->var2 & 0x800) != 0)
  {
    var2 |= 0x800uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFFBF | (((*((_DWORD *)a2 + 85) >> 6) & 1) << 6);
  }
  if ((var2 & 0x800000000) == 0 && (*(_QWORD *)&a2->var2 & 0x800000000) != 0)
  {
    var2 |= 0x800000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var33 = a2->var33;
  }
  if ((var2 & 0x1000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x1000000000) != 0)
  {
    var2 |= 0x1000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var34 = a2->var34;
  }
  if ((var2 & 0x2000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x2000000000) != 0)
  {
    var2 |= 0x2000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var35 = a2->var35;
  }
  if ((var2 & 0x4000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x4000000000) != 0)
  {
    var2 |= 0x4000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var38 = a2->var38;
  }
  if ((var2 & 0x8000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x8000000000) != 0)
  {
    var2 |= 0x8000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFF7F | (((*((_DWORD *)a2 + 85) >> 7) & 1) << 7);
  }
  if ((var2 & 0x10000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x10000000000) != 0)
  {
    var2 |= 0x10000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFEFF | (((*((_DWORD *)a2 + 85) >> 8) & 1) << 8);
  }
  if ((var2 & 0x20000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x20000000000) != 0)
  {
    var2 |= 0x20000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFDFF | (((*((_DWORD *)a2 + 85) >> 9) & 1) << 9);
  }
  if ((var2 & 0x1000) == 0 && (*(_QWORD *)&a2->var2 & 0x1000) != 0)
  {
    var2 |= 0x1000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var62 = a2->var62;
  }
  if ((var2 & 0x2000) == 0 && (*(_QWORD *)&a2->var2 & 0x2000) != 0)
  {
    var2 |= 0x2000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var43 = a2->var43;
  }
  if ((var2 & 0x4000) == 0 && (*(_QWORD *)&a2->var2 & 0x4000) != 0)
  {
    var2 |= 0x4000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var44 = a2->var44;
  }
  if ((var2 & 0x8000) == 0 && (*(_QWORD *)&a2->var2 & 0x8000) != 0)
  {
    var2 |= 0x8000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var45 = a2->var45;
  }
  if ((var2 & 0x40000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x40000000000) != 0)
  {
    var2 |= 0x40000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var46 = a2->var46;
  }
  if ((var2 & 0x80000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x80000000000) != 0)
  {
    var2 |= 0x80000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var49 = a2->var49;
  }
  if ((var2 & 0x10000) == 0 && (*(_QWORD *)&a2->var2 & 0x10000) != 0)
  {
    var2 |= 0x10000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(_QWORD *)((char *)&this->var2 + 14) = *(_QWORD *)((char *)&a2->var2 + 14);
  }
  if ((var2 & 0x20000) == 0 && (*(_QWORD *)&a2->var2 & 0x20000) != 0)
  {
    var2 |= 0x20000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var13 = a2->var13;
  }
  if ((var2 & 0x100000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x100000000000) != 0)
  {
    var2 |= 0x100000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var60 = a2->var60;
  }
  if ((var2 & 0x200000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x200000000000) != 0)
  {
    var2 |= 0x200000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var39 = a2->var39;
  }
  if ((var2 & 0x400000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x400000000000) != 0)
  {
    var2 |= 0x400000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var40 = a2->var40;
  }
  if ((var2 & 0x800000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x800000000000) != 0)
  {
    var2 |= 0x800000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var41 = a2->var41;
  }
  if ((var2 & 0x40000) == 0 && (*(_QWORD *)&a2->var2 & 0x40000) != 0)
  {
    var2 |= 0x40000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var14 = a2->var14;
  }
  if ((var2 & 0x1000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x1000000000000) != 0)
  {
    var2 |= 0x1000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xF7FFFFFF | (((*((_DWORD *)a2 + 85) >> 27) & 1) << 27);
  }
  if ((var2 & 0x80000) == 0 && (*(_QWORD *)&a2->var2 & 0x80000) != 0)
  {
    var2 |= 0x80000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var15 = a2->var15;
  }
  if ((var2 & 0x2000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x2000000000000) != 0)
  {
    var2 |= 0x2000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var107 = a2->var107;
  }
  if ((var2 & 0x100000) == 0 && (*(_QWORD *)&a2->var2 & 0x100000) != 0)
  {
    var2 |= 0x100000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var16 = a2->var16;
  }
  if ((var2 & 0x4000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x4000000000000) != 0)
  {
    var2 |= 0x4000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var17 = a2->var17;
  }
  if ((var2 & 0x8000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x8000000000000) != 0)
  {
    var2 |= 0x8000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var108 = a2->var108;
  }
  if ((var2 & 0x10000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x10000000000000) != 0)
  {
    var2 |= 0x10000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var63 = a2->var63;
  }
  if ((var2 & 0x200000) == 0 && (*(_QWORD *)&a2->var2 & 0x200000) != 0)
  {
    var2 |= 0x200000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var105 = a2->var105;
  }
  if ((var2 & 0x20000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x20000000000000) != 0)
  {
    var2 |= 0x20000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(_QWORD *)&this->var3.var3 = *(_QWORD *)&a2->var3.var3;
  }
  if ((var2 & 0x400000) == 0 && (*(_QWORD *)&a2->var2 & 0x400000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(_QWORD *)&this->var2 = var2 | 0x400000;
    WrdShading::operator=((uint64_t)this->var6, (uint64_t)a2->var6);
    v4 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    var2 = (uint64_t)this->var2;
  }
  if ((var2 & 0x40000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x40000000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *(_QWORD *)&this->var2 = var2 | 0x40000000000000;
    WrdBorder::operator=((uint64_t)this->var7, (uint64_t)a2->var7);
    v4 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    var2 = (uint64_t)this->var2;
  }
  if ((var2 & 0x80000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x80000000000000) != 0)
  {
    var2 |= 0x80000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var61 = a2->var61;
  }
  if ((var2 & 0x800000) == 0 && (*(_QWORD *)&a2->var2 & 0x800000) != 0)
  {
    var2 |= 0x800000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var19 = a2->var19;
  }
  if ((var2 & 0x100000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x100000000000000) != 0)
  {
    var2 |= 0x100000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFBFF | (((*((_DWORD *)a2 + 85) >> 10) & 1) << 10);
  }
  if ((var2 & 0x200000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x200000000000000) != 0)
  {
    var2 |= 0x200000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFF7FF | (((*((_DWORD *)a2 + 85) >> 11) & 1) << 11);
  }
  if ((var2 & 0x400000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x400000000000000) != 0)
  {
    var2 |= 0x400000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var109 = a2->var109;
  }
  if ((var2 & 0x800000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x800000000000000) != 0)
  {
    var2 |= 0x800000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFEFFF | (((*((_DWORD *)a2 + 85) >> 12) & 1) << 12);
  }
  if ((var2 & 0x1000000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x1000000000000000) != 0)
  {
    var2 |= 0x1000000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFDFFF | (((*((_DWORD *)a2 + 85) >> 13) & 1) << 13);
  }
  if ((var2 & 0x2000000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x2000000000000000) != 0)
  {
    var2 |= 0x2000000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFBFFF | (((*((_DWORD *)a2 + 85) >> 14) & 1) << 14);
  }
  if ((var2 & 0x4000000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x4000000000000000) != 0)
  {
    var2 |= 0x4000000000000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFF7FFF | (((*((_DWORD *)a2 + 85) >> 15) & 1) << 15);
  }
  if ((var2 & 0x8000000000000000) == 0 && (*(_QWORD *)&a2->var2 & 0x8000000000000000) != 0)
  {
    var2 |= 0x8000000000000000;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var18 = a2->var18;
  }
  if ((v4 & 1) == 0 && (*((_DWORD *)&a2->var2 + 2) & 1) != 0)
  {
    v6 = HIDWORD(v4);
    v4 |= 1uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_WORD *)&this->var2 + 6) = v6;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFEFFFF | ((HIWORD(*((_DWORD *)a2 + 85)) & 1) << 16);
  }
  if ((v4 & 2) == 0 && (*((_DWORD *)&a2->var2 + 2) & 2) != 0)
  {
    v7 = HIDWORD(v4);
    v4 |= 2uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_WORD *)&this->var2 + 6) = v7;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFDFFFF | (((*((_DWORD *)a2 + 85) >> 17) & 1) << 17);
  }
  if ((v4 & 4) == 0 && (*((_DWORD *)&a2->var2 + 2) & 4) != 0)
  {
    v8 = HIDWORD(v4);
    v4 |= 4uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_WORD *)&this->var2 + 6) = v8;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFBFFFF | (((*((_DWORD *)a2 + 85) >> 18) & 1) << 18);
  }
  if ((v4 & 8) == 0 && (*((_DWORD *)&a2->var2 + 2) & 8) != 0)
  {
    v9 = HIDWORD(v4);
    v4 |= 8uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_WORD *)&this->var2 + 6) = v9;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFF7FFFF | (((*((_DWORD *)a2 + 85) >> 19) & 1) << 19);
  }
  if ((var2 & 0x1000000) == 0 && (*(_QWORD *)&a2->var2 & 0x1000000) != 0)
  {
    var2 |= 0x1000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var64 = a2->var64;
  }
  if ((var2 & 0x2000000) == 0 && (*(_QWORD *)&a2->var2 & 0x2000000) != 0)
  {
    var2 |= 0x2000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var65 = a2->var65;
  }
  if ((var2 & 0x4000000) == 0 && (*(_QWORD *)&a2->var2 & 0x4000000) != 0)
  {
    var2 |= 0x4000000uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    this->var66 = a2->var66;
  }
  if ((v4 & 0x10) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10) != 0)
  {
    v10 = HIDWORD(v4);
    v4 |= 0x10uLL;
    *(_QWORD *)&this->var2 = var2;
    *((_DWORD *)&this->var2 + 2) = v4;
    *((_WORD *)&this->var2 + 6) = v10;
    this->var47 = a2->var47;
  }
  if ((v4 & 0x20) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x20) != 0)
  {
    *(_QWORD *)&this->var2 = var2;
    *((_WORD *)&this->var2 + 6) = WORD2(v4);
    *((_DWORD *)&this->var2 + 2) = v4 | 0x20;
    this->var50 = a2->var50;
  }
  v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
  v12 = (uint64_t)this->var2;
  if ((*((_DWORD *)&this->var2 + 2) & 0x40) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x40) != 0)
  {
    v13 = HIDWORD(v11);
    v11 |= 0x40uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v13;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var51 = a2->var51;
  }
  if ((v11 & 0x80) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x80) != 0)
  {
    v14 = HIDWORD(v11);
    v11 |= 0x80uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v14;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var52 = a2->var52;
  }
  if ((v11 & 0x100) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x100) != 0)
  {
    v15 = HIDWORD(v11);
    v11 |= 0x100uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v15;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var53 = a2->var53;
  }
  if ((v11 & 0x200) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x200) != 0)
  {
    v16 = HIDWORD(v11);
    v11 |= 0x200uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v16;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var59 = a2->var59;
  }
  if ((v11 & 0x400) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x400) != 0)
  {
    v17 = HIDWORD(v11);
    v11 |= 0x400uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v17;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var57 = a2->var57;
  }
  if ((v11 & 0x800) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x800) != 0)
  {
    v18 = HIDWORD(v11);
    v11 |= 0x800uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v18;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var58 = a2->var58;
  }
  if ((v11 & 0x1000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x1000) != 0)
  {
    v19 = HIDWORD(v11);
    v11 |= 0x1000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v19;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var22 = a2->var22;
  }
  if ((v11 & 0x2000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x2000) != 0)
  {
    v20 = HIDWORD(v11);
    v11 |= 0x2000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v20;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var106 = a2->var106;
  }
  if ((v11 & 0x4000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x4000) != 0)
  {
    v21 = HIDWORD(v11);
    v11 |= 0x4000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v21;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var71 = a2->var71;
  }
  if ((v11 & 0x2000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x2000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11) | 0x20;
    WrdDateTime::operator=((uint64_t)this->var11, (uint64_t)a2->var11);
    v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x4000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x4000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11) | 0x40;
    WrdDateTime::operator=((uint64_t)this->var12, (uint64_t)a2->var12);
    v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    v12 = (uint64_t)this->var2;
  }
  if ((v12 & 0x8000000) == 0 && (*(_QWORD *)&a2->var2 & 0x8000000) != 0)
  {
    v12 |= 0x8000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var72 = a2->var72;
  }
  if ((v11 & 0x8000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x8000) != 0)
  {
    v22 = HIDWORD(v11);
    v11 |= 0x8000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v22;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var73 = a2->var73;
  }
  if ((v11 & 0x10000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10000) != 0)
  {
    v23 = HIDWORD(v11);
    v11 |= 0x10000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_WORD *)&this->var2 + 6) = v23;
    this->var74 = a2->var74;
  }
  if ((v11 & 0x20000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x20000) != 0)
  {
    v24 = HIDWORD(v11);
    v11 |= 0x20000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v24;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var42 = a2->var42;
  }
  if ((v11 & 0x40000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x40000) != 0)
  {
    v25 = HIDWORD(v11);
    v11 |= 0x40000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v25;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var75 = a2->var75;
  }
  if ((v11 & 0x80000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x80000) != 0)
  {
    v26 = HIDWORD(v11);
    v11 |= 0x80000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v26;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var20 = a2->var20;
  }
  if ((v11 & 0x100000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x100000) != 0)
  {
    v27 = HIDWORD(v11);
    v11 |= 0x100000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v27;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFEFFFFF | (((*((_DWORD *)a2 + 85) >> 20) & 1) << 20);
  }
  if ((v11 & 0x200000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x200000) != 0)
  {
    v28 = HIDWORD(v11);
    v11 |= 0x200000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v28;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFDFFFFF | (((*((_DWORD *)a2 + 85) >> 21) & 1) << 21);
  }
  if ((v11 & 0x400000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x400000) != 0)
  {
    v29 = HIDWORD(v11);
    v11 |= 0x400000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v29;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFBFFFFF | (((*((_DWORD *)a2 + 85) >> 22) & 1) << 22);
  }
  if ((v11 & 0x800000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x800000) != 0)
  {
    v30 = HIDWORD(v11);
    v11 |= 0x800000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v30;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFF7FFFFF | (((*((_DWORD *)a2 + 85) >> 23) & 1) << 23);
  }
  if ((v11 & 0x1000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x1000000) != 0)
  {
    v31 = HIDWORD(v11);
    v11 |= 0x1000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v31;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var69 = a2->var69;
  }
  if ((v11 & 0x2000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x2000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11 | 0x2000000;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    *(_QWORD *)&this->var2 = v12;
    WrdDateTime::operator=((uint64_t)this->var8, (uint64_t)a2->var8);
    v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x4000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x4000000) != 0)
  {
    v32 = HIDWORD(v11);
    v11 |= 0x4000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v32;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFDFFFFFF | (((*((_DWORD *)a2 + 85) >> 25) & 1) << 25);
  }
  if ((v11 & 0x8000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x8000000) != 0)
  {
    v33 = HIDWORD(v11);
    v11 |= 0x8000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v33;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFBFFFFFF | (((*((_DWORD *)a2 + 85) >> 26) & 1) << 26);
  }
  if ((v11 & 0x10000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10000000) != 0)
  {
    v34 = HIDWORD(v11);
    v11 |= 0x10000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v34;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var67 = a2->var67;
  }
  if ((v11 & 0x20000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x20000000) != 0)
  {
    v35 = HIDWORD(v11);
    v11 |= 0x20000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v35;
    *((_DWORD *)&this->var2 + 2) = v11;
    this->var68 = a2->var68;
  }
  if ((v11 & 0x10000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x10000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11 | 0x10000000;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    *(_QWORD *)&this->var2 = v12;
    WrdDateTime::operator=((uint64_t)this->var9, (uint64_t)a2->var9);
    v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x80000000) == 0 && (*((_DWORD *)&a2->var2 + 2) & 0x80000000) != 0)
  {
    v36 = HIDWORD(v11);
    v11 |= 0x80000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = v36;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFEFFFFFF | ((HIBYTE(*((_DWORD *)a2 + 85)) & 1) << 24);
  }
  if ((v11 & 0x100000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x100000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x100000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var70 = a2->var70;
  }
  if ((v11 & 0x200000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x200000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11) | 2;
    WrdDateTime::operator=((uint64_t)this->var10, (uint64_t)a2->var10);
    v11 = *((unsigned int *)&this->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&this->var2 + 6) << 32);
    v12 = (uint64_t)this->var2;
  }
  if ((v11 & 0x800000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x800000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x800000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var56 = a2->var56;
  }
  if ((v11 & 0x1000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x1000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x1000000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var48 = a2->var48;
  }
  if ((v11 & 0x8000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x8000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x8000000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var54 = a2->var54;
  }
  if ((v11 & 0x10000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x10000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x10000000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var21 = a2->var21;
  }
  if ((v11 & 0x20000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x20000000000) != 0)
  {
    *((_DWORD *)&this->var2 + 2) = v11;
    v11 |= 0x20000000000uLL;
    *(_QWORD *)&this->var2 = v12;
    *((_WORD *)&this->var2 + 6) = WORD2(v11);
    this->var55 = a2->var55;
  }
  if ((v11 & 0x80000000000) == 0
    && ((*((unsigned int *)&a2->var2 + 2) | ((unint64_t)*((unsigned __int16 *)&a2->var2 + 6) << 32)) & 0x80000000000) != 0)
  {
    *(_QWORD *)&this->var2 = v12;
    *((_DWORD *)&this->var2 + 2) = v11;
    *((_WORD *)&this->var2 + 6) = (v11 | 0x80000000000) >> 32;
    this->var110 = a2->var110;
  }
}

WrdCharacterProperties *WrdCharacterProperties::applyImplictProperties(WrdCharacterProperties *this, const WrdCharacterProperties *a2)
{
  uint64_t var2;
  int var23;
  int v4;
  int var24;
  int v6;
  int var25;
  int v8;
  int var31;
  int v10;
  int var32;
  int v12;
  int var26;
  int v14;
  int var27;
  int v16;
  int var28;
  int v18;
  int var29;
  int v20;
  int var30;
  int v22;
  int var33;
  int v24;
  int var34;
  int v26;
  int var35;
  int v28;
  int var36;
  int v30;
  int var37;
  int v32;

  var2 = (uint64_t)this->var2;
  if ((var2 & 2) != 0)
  {
    var23 = this->var23;
    if ((var23 & 0xFFFFFFFE) == 0x80)
    {
      v4 = a2->var23;
      if (var23 == 128)
      {
LABEL_10:
        this->var23 = v4;
        goto LABEL_11;
      }
      switch(v4)
      {
        case 0:
          v4 = 1;
          goto LABEL_10;
        case 129:
          v4 = 128;
          goto LABEL_10;
        case 1:
          v4 = 0;
          goto LABEL_10;
      }
    }
  }
LABEL_11:
  if ((var2 & 4) != 0)
  {
    var24 = this->var24;
    if ((var24 & 0xFFFFFFFE) == 0x80)
    {
      v6 = a2->var24;
      if (var24 == 128)
      {
LABEL_20:
        this->var24 = v6;
        goto LABEL_21;
      }
      switch(v6)
      {
        case 0:
          v6 = 1;
          goto LABEL_20;
        case 129:
          v6 = 128;
          goto LABEL_20;
        case 1:
          v6 = 0;
          goto LABEL_20;
      }
    }
  }
LABEL_21:
  if ((var2 & 0x10) != 0)
  {
    var25 = this->var25;
    if ((var25 & 0xFFFFFFFE) == 0x80)
    {
      v8 = a2->var25;
      if (var25 == 128)
      {
LABEL_30:
        this->var25 = v8;
        goto LABEL_31;
      }
      switch(v8)
      {
        case 0:
          v8 = 1;
          goto LABEL_30;
        case 129:
          v8 = 128;
          goto LABEL_30;
        case 1:
          v8 = 0;
          goto LABEL_30;
      }
    }
  }
LABEL_31:
  if ((var2 & 0x200) != 0)
  {
    var31 = this->var31;
    if ((var31 & 0xFFFFFFFE) == 0x80)
    {
      v10 = a2->var31;
      if (var31 == 128)
      {
LABEL_40:
        this->var31 = v10;
        goto LABEL_41;
      }
      switch(v10)
      {
        case 0:
          v10 = 1;
          goto LABEL_40;
        case 129:
          v10 = 128;
          goto LABEL_40;
        case 1:
          v10 = 0;
          goto LABEL_40;
      }
    }
  }
LABEL_41:
  if ((var2 & 0x400) != 0)
  {
    var32 = this->var32;
    if ((var32 & 0xFFFFFFFE) == 0x80)
    {
      v12 = a2->var32;
      if (var32 == 128)
      {
LABEL_50:
        this->var32 = v12;
        goto LABEL_51;
      }
      switch(v12)
      {
        case 0:
          v12 = 1;
          goto LABEL_50;
        case 129:
          v12 = 128;
          goto LABEL_50;
        case 1:
          v12 = 0;
          goto LABEL_50;
      }
    }
  }
LABEL_51:
  if ((var2 & 0x80) != 0)
  {
    var26 = this->var26;
    if ((var26 & 0xFFFFFFFE) == 0x80)
    {
      v14 = a2->var26;
      if (var26 == 128)
      {
LABEL_60:
        this->var26 = v14;
        goto LABEL_61;
      }
      switch(v14)
      {
        case 0:
          v14 = 1;
          goto LABEL_60;
        case 129:
          v14 = 128;
          goto LABEL_60;
        case 1:
          v14 = 0;
          goto LABEL_60;
      }
    }
  }
LABEL_61:
  if ((var2 & 0x10000000) != 0)
  {
    var27 = this->var27;
    if ((var27 & 0xFFFFFFFE) == 0x80)
    {
      v16 = a2->var27;
      if (var27 == 128)
      {
LABEL_70:
        this->var27 = v16;
        goto LABEL_71;
      }
      switch(v16)
      {
        case 0:
          v16 = 1;
          goto LABEL_70;
        case 129:
          v16 = 128;
          goto LABEL_70;
        case 1:
          v16 = 0;
          goto LABEL_70;
      }
    }
  }
LABEL_71:
  if ((var2 & 0x20000000) != 0)
  {
    var28 = this->var28;
    if ((var28 & 0xFFFFFFFE) == 0x80)
    {
      v18 = a2->var28;
      if (var28 == 128)
      {
LABEL_80:
        this->var28 = v18;
        goto LABEL_81;
      }
      switch(v18)
      {
        case 0:
          v18 = 1;
          goto LABEL_80;
        case 129:
          v18 = 128;
          goto LABEL_80;
        case 1:
          v18 = 0;
          goto LABEL_80;
      }
    }
  }
LABEL_81:
  if ((var2 & 0x20) != 0)
  {
    var29 = this->var29;
    if ((var29 & 0xFFFFFFFE) == 0x80)
    {
      v20 = a2->var29;
      if (var29 == 128)
      {
LABEL_90:
        this->var29 = v20;
        goto LABEL_91;
      }
      switch(v20)
      {
        case 0:
          v20 = 1;
          goto LABEL_90;
        case 129:
          v20 = 128;
          goto LABEL_90;
        case 1:
          v20 = 0;
          goto LABEL_90;
      }
    }
  }
LABEL_91:
  if ((var2 & 0x100) != 0)
  {
    var30 = this->var30;
    if ((var30 & 0xFFFFFFFE) == 0x80)
    {
      v22 = a2->var30;
      if (var30 == 128)
      {
LABEL_100:
        this->var30 = v22;
        goto LABEL_101;
      }
      switch(v22)
      {
        case 0:
          v22 = 1;
          goto LABEL_100;
        case 129:
          v22 = 128;
          goto LABEL_100;
        case 1:
          v22 = 0;
          goto LABEL_100;
      }
    }
  }
LABEL_101:
  if ((var2 & 0x800000000) != 0)
  {
    var33 = this->var33;
    if ((var33 & 0xFFFFFFFE) == 0x80)
    {
      v24 = a2->var33;
      if (var33 == 128)
      {
LABEL_110:
        this->var33 = v24;
        goto LABEL_111;
      }
      switch(v24)
      {
        case 0:
          v24 = 1;
          goto LABEL_110;
        case 129:
          v24 = 128;
          goto LABEL_110;
        case 1:
          v24 = 0;
          goto LABEL_110;
      }
    }
  }
LABEL_111:
  if ((var2 & 0x1000000000) != 0)
  {
    var34 = this->var34;
    if ((var34 & 0xFFFFFFFE) == 0x80)
    {
      v26 = a2->var34;
      if (var34 == 128)
      {
LABEL_120:
        this->var34 = v26;
        goto LABEL_121;
      }
      switch(v26)
      {
        case 0:
          v26 = 1;
          goto LABEL_120;
        case 129:
          v26 = 128;
          goto LABEL_120;
        case 1:
          v26 = 0;
          goto LABEL_120;
      }
    }
  }
LABEL_121:
  if ((var2 & 0x2000000000) != 0)
  {
    var35 = this->var35;
    if ((var35 & 0xFFFFFFFE) == 0x80)
    {
      v28 = a2->var35;
      if (var35 == 128)
      {
LABEL_130:
        this->var35 = v28;
        goto LABEL_131;
      }
      switch(v28)
      {
        case 0:
          v28 = 1;
          goto LABEL_130;
        case 129:
          v28 = 128;
          goto LABEL_130;
        case 1:
          v28 = 0;
          goto LABEL_130;
      }
    }
  }
LABEL_131:
  if ((var2 & 8) != 0)
  {
    var36 = this->var36;
    if ((var36 & 0xFFFFFFFE) == 0x80)
    {
      v30 = a2->var36;
      if (var36 == 128)
      {
LABEL_140:
        this->var36 = v30;
        goto LABEL_141;
      }
      switch(v30)
      {
        case 0:
          v30 = 1;
          goto LABEL_140;
        case 129:
          v30 = 128;
          goto LABEL_140;
        case 1:
          v30 = 0;
          goto LABEL_140;
      }
    }
  }
LABEL_141:
  if ((var2 & 0x40) != 0)
  {
    var37 = this->var37;
    if ((var37 & 0xFFFFFFFE) == 0x80)
    {
      v32 = a2->var37;
      if (var37 != 128)
      {
        if (v32)
        {
          if (v32 == 129)
          {
            v32 = 128;
          }
          else
          {
            if (v32 != 1)
              return this;
            v32 = 0;
          }
        }
        else
        {
          v32 = 1;
        }
      }
      this->var37 = v32;
    }
  }
  return this;
}

_QWORD *WrdParagraphTextRun::WrdParagraphTextRun(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;

  result = (_QWORD *)WrdTextRun::WrdTextRun(a1, a2, a3);
  *result = &off_24F3B3A00;
  result[3] = a4;
  result[4] = a5;
  result[5] = a6;
  result[6] = a7;
  return result;
}

void WrdStyleSheet::resolve(WrdStyleSheet *this, WrdCharacterProperties *a2, unsigned int a3)
{
  unsigned int var72;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t ResolvedCharProps;
  const WrdCharacterProperties *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const WrdCharacterProperties *v15;
  uint64_t *v16;
  uint64_t v17;

  if ((*(_QWORD *)&a2->var2 & 0x8000000) != 0)
  {
    var72 = a2->var72;
    do
    {
      v7 = *((_QWORD *)this + 3);
      if (((unint64_t)(*((_QWORD *)this + 4) - v7) >> 3) <= var72
        || (v8 = *(unsigned __int16 **)(v7 + 8 * var72)) == 0)
      {
        v8 = (unsigned __int16 *)*((_QWORD *)this + 2);
      }
      ResolvedCharProps = WrdStyle::getResolvedCharProps((WrdStyle *)v8);
      v10 = (const WrdCharacterProperties *)ResolvedCharProps;
      v11 = *((_DWORD *)a2 + 85);
      if ((v11 & 1) != 0)
      {
        v12 = (v11 >> 1) & 1;
        WrdCharacterProperties::operator=((uint64_t)a2, ResolvedCharProps);
        WrdCharacterProperties::setSpecialCharacter(a2, v12);
      }
      else if (WrdCharacterProperties::WrdCharacterPropertiesOverridden::isAnythingOverridden((WrdCharacterProperties::WrdCharacterPropertiesOverridden *)(ResolvedCharProps + 16)))
      {
        WrdCharacterProperties::applyBaseProperties(a2, v10);
      }
      var72 = v8[79];
    }
    while (var72 != 4095);
  }
  do
  {
    v13 = *((_QWORD *)this + 3);
    if (((unint64_t)(*((_QWORD *)this + 4) - v13) >> 3) <= a3
      || (v14 = *(_QWORD *)(v13 + 8 * a3)) == 0)
    {
      v14 = *((_QWORD *)this + 2);
    }
    v15 = *(const WrdCharacterProperties **)(v14 + 48);
    if (WrdCharacterProperties::WrdCharacterPropertiesOverridden::isAnythingOverridden((WrdCharacterProperties::WrdCharacterPropertiesOverridden *)&v15->var2))
      WrdCharacterProperties::applyBaseProperties(a2, v15);
    a3 = *(unsigned __int16 *)(v14 + 158);
  }
  while (a3 != 4095);
  v16 = (uint64_t *)*((_QWORD *)this + 3);
  if (((*((_QWORD *)this + 4) - (_QWORD)v16) & 0x7FFFFFFF8) == 0 || (v17 = *v16) == 0)
    v17 = *((_QWORD *)this + 2);
  WrdCharacterProperties::applyBaseProperties(a2, *(const WrdCharacterProperties **)(v17 + 48));
  WrdCharacterProperties::applyBaseProperties(a2, *(const WrdCharacterProperties **)(*((_QWORD *)this + 2) + 48));
}

BOOL WrdCharacterProperties::WrdCharacterPropertiesOverridden::isAnythingOverridden(WrdCharacterProperties::WrdCharacterPropertiesOverridden *this)
{
  return (*(_QWORD *)this | (*((unsigned int *)this + 2) | ((unint64_t)*((unsigned __int16 *)this + 6) << 32)) & 0xFFFBFFFFFFFLL) != 0;
}

uint64_t WrdCPTableHeaders::getTextRun(uint64_t a1, _DWORD *a2, unsigned int a3, int a4)
{
  uint64_t result;

  a2[2] = 2;
  a2[3] = WrdCPTableHeaders::getStartCP(a1, a3, a4);
  result = WrdCPTableHeaders::getNumberOfCharacters(a1, a3, a4);
  a2[4] = result;
  return result;
}

uint64_t WrdCPTableHeaders::getStartCP(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;

  if ((int)a2 > 5)
  {
    a2 += 6 * a3;
    v3 = *(_QWORD *)(a1 + 8);
    if (a2 < ((unint64_t)(*(_QWORD *)(a1 + 16) - v3) >> 2))
      return *(unsigned int *)(v3 + 4 * a2);
LABEL_5:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (((unint64_t)(*(_QWORD *)(a1 + 16) - v3) >> 2) <= a2)
    goto LABEL_5;
  return *(unsigned int *)(v3 + 4 * a2);
}

uint64_t WrdCPTableHeaders::getNumberOfCharacters(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  if (a2 > 5)
  {
    a2 += 6 * a3;
    v3 = a2 + 1;
    v4 = *(_QWORD *)(a1 + 8);
    if (a2 + 1 >= ((unint64_t)(*(_QWORD *)(a1 + 16) - v4) >> 2))
      goto LABEL_4;
  }
  else
  {
    v3 = a2 + 1;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (unint64_t)(*(_QWORD *)(a1 + 16) - v4) >> 2;
    if (a2 + 1 >= v5 || v5 <= a2)
LABEL_4:
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  return (*(_DWORD *)(v4 + 4 * v3) - *(_DWORD *)(v4 + 4 * a2));
}

uint64_t WrdCharacterProperties::setTextAnimation(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x800000uLL;
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t WrdParagraphProperties::setHorizontalPosition(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x1000000uLL;
  *(_DWORD *)(result + 156) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setWrapCode(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x2000000uLL;
  *((_BYTE *)this + 298) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setHorizontalPlacement(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x100000uLL;
  *((_DWORD *)this + 56) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalPlacement(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x200000uLL;
  *((_DWORD *)this + 57) = a2;
  return this;
}

void sub_22A19EE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A19F19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A19F370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A19F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

WrdCharacterProperties *WrdCharacterProperties::setNoProof(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x8000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFF7F | ((a2 & 1) << 7);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setTableNestingLevel(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x1000000000000uLL;
  *((_DWORD *)this + 61) = a2;
  return this;
}

uint64_t WrdTableCellDescriptor::setFitText(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 0x40;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFF7F | ((a2 & 1) << 7);
  return result;
}

uint64_t WrdTableCellDescriptor::setNoWrap(WrdTableCellDescriptor *this, char a2)
{
  uint64_t result;
  int v3;
  char v4;

  v3 = *((_DWORD *)this + 2);
  result = (uint64_t)this + 8;
  v4 = *(_BYTE *)(result + 4);
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = v4 | 0x80;
  *(_WORD *)(result + 122) = *(_WORD *)(result + 122) & 0xFEFF | ((a2 & 1) << 8);
  return result;
}

uint64_t WrdTableProperties::setPreferredTableWidthUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x8000uLL;
  *(_DWORD *)(result + 132) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setPreferredTableWidth(WrdTableProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x200000000000000uLL;
  *((_WORD *)this + 168) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setAutoFit(WrdTableProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x10000000000000uLL;
  *((_BYTE *)this + 334) = *((_BYTE *)this + 334) & 0xFE | a2 & 1;
  return this;
}

WrdTableCellDescriptor *WrdTapParser::parseSpacingAndPadding(WrdTapParser *this, int a2, WrdTableProperties *a3, const unsigned __int8 *a4, unsigned __int16 *a5)
{
  unsigned int v8;
  unsigned int v9;
  __int16 v10;
  const unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  WrdTableCellDescriptor *result;
  __int16 v15;
  WrdTableCellDescriptor *v16;

  v8 = *a4;
  v9 = a4[1];
  v10 = *a5;
  *a5 += 2;
  v11 = &a4[(unsigned __int16)(v10 + 2)];
  v12 = *v11;
  *a5 = v10 + 3;
  v13 = v11[1];
  *a5 = v10 + 4;
  result = (WrdTableCellDescriptor *)CsLeReadSInt16((__int16 *)v11 + 1);
  v15 = (__int16)result;
  *a5 += 2;
  switch(a2)
  {
    case 54835:
      if ((v12 & 1) != 0)
      {
        WrdTableProperties::setDefaultTableTopCellSpacing(a3, (__int16)result);
        result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableTopCellSpacingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_4:
          if ((v12 & 4) == 0)
            goto LABEL_5;
          goto LABEL_47;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_4;
      }
      WrdTableProperties::setDefaultTableLeftCellSpacing(a3, v15);
      result = (WrdTableCellDescriptor *)WrdCharacterProperties::setSmallCaps((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_5:
        if ((v12 & 8) == 0)
          return result;
        goto LABEL_48;
      }
LABEL_47:
      WrdTableProperties::setDefaultTableBottomCellSpacing(a3, v15);
      result = (WrdTableCellDescriptor *)WrdCharacterProperties::setCaps((uint64_t)a3, v13);
      if ((v12 & 8) == 0)
        return result;
LABEL_48:
      WrdTableProperties::setDefaultTableRightCellSpacing(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableRightCellSpacingUnit((uint64_t)a3, v13);
    case 54836:
      if ((v12 & 1) != 0)
      {
        WrdTableProperties::setDefaultTableTopCellPadding(a3, (__int16)result);
        result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableTopCellPaddingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_9:
          if ((v12 & 4) == 0)
            goto LABEL_10;
          goto LABEL_51;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_9;
      }
      WrdTableProperties::setDefaultTableLeftCellPadding(a3, v15);
      result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableLeftCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_10:
        if ((v12 & 8) == 0)
          return result;
        goto LABEL_52;
      }
LABEL_51:
      WrdTableProperties::setDefaultTableBottomCellPadding(a3, v15);
      result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableBottomCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 8) == 0)
        return result;
LABEL_52:
      WrdTableProperties::setDefaultTableRightCellPadding(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableRightCellPaddingUnit((uint64_t)a3, v13);
    case 54839:
      if ((v12 & 1) != 0)
      {
        WrdTableProperties::setDefaultTableOuterTopCellSpacing(a3, (__int16)result);
        result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterTopCellSpacingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_14:
          if ((v12 & 4) == 0)
            goto LABEL_15;
          goto LABEL_55;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_14;
      }
      WrdTableProperties::setDefaultTableOuterLeftCellSpacing(a3, v15);
      result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterLeftCellSpacingUnit((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_15:
        if ((v12 & 8) == 0)
          return result;
        goto LABEL_56;
      }
LABEL_55:
      WrdTableProperties::setDefaultTableOuterBottomCellSpacing(a3, v15);
      result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterBottomCellSpacingUnit((uint64_t)a3, v13);
      if ((v12 & 8) == 0)
        return result;
LABEL_56:
      WrdTableProperties::setDefaultTableOuterRightCellSpacing(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterRightCellSpacingUnit((uint64_t)a3, v13);
    case 54840:
      if ((v12 & 1) != 0)
      {
        WrdTableProperties::setDefaultTableOuterTopCellPadding(a3, (__int16)result);
        result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterTopCellPaddingUnit((uint64_t)a3, v13);
        if ((v12 & 2) == 0)
        {
LABEL_19:
          if ((v12 & 4) == 0)
            goto LABEL_20;
          goto LABEL_59;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_19;
      }
      WrdTableProperties::setDefaultTableOuterLeftCellPadding(a3, v15);
      result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterLeftCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 4) == 0)
      {
LABEL_20:
        if ((v12 & 8) == 0)
          return result;
        goto LABEL_61;
      }
LABEL_59:
      WrdTableProperties::setDefaultTableOuterBottomCellPadding(a3, v15);
      result = (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterBottomCellPaddingUnit((uint64_t)a3, v13);
      if ((v12 & 8) == 0)
        return result;
LABEL_61:
      WrdTableProperties::setDefaultTableOuterRightCellPadding(a3, v15);
      return (WrdTableCellDescriptor *)WrdTableProperties::setDefaultTableOuterRightCellPaddingUnit((uint64_t)a3, v13);
    default:
      if (v8 >= v9)
        return result;
      break;
  }
  while (1)
  {
    result = (WrdTableCellDescriptor *)WrdTableProperties::getTableCellDescriptorReference(a3, v8);
    v16 = result;
    if (a2 == 54833)
    {
      if ((v12 & 1) != 0)
      {
        WrdTableCellDescriptor::setTopSpacing(result, v15);
        result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setTopSpacingUnit((uint64_t)v16, v13);
        if ((v12 & 2) == 0)
          goto LABEL_32;
      }
      else if ((v12 & 2) == 0)
      {
LABEL_32:
        if ((v12 & 4) == 0)
          goto LABEL_33;
LABEL_41:
        WrdTableCellDescriptor::setBottomSpacing(v16, v15);
        result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setBottomSpacingUnit((uint64_t)v16, v13);
        if ((v12 & 8) != 0)
          goto LABEL_42;
        goto LABEL_43;
      }
      WrdTableCellDescriptor::setLeftSpacing(v16, v15);
      result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setLeftSpacingUnit((uint64_t)v16, v13);
      if ((v12 & 4) == 0)
      {
LABEL_33:
        if ((v12 & 8) == 0)
          goto LABEL_43;
LABEL_42:
        WrdTableCellDescriptor::setRightSpacing(v16, v15);
        result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setRightSpacingUnit((uint64_t)v16, v13);
        goto LABEL_43;
      }
      goto LABEL_41;
    }
    if (a2 != 54834)
      goto LABEL_43;
    if ((v12 & 1) != 0)
    {
      WrdTableCellDescriptor::setTopPadding(result, v15);
      result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setTopPaddingUnit((uint64_t)v16, v13);
      if ((v12 & 2) != 0)
      {
LABEL_36:
        WrdTableCellDescriptor::setLeftPadding(v16, v15);
        result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setLeftPaddingUnit((uint64_t)v16, v13);
        if ((v12 & 4) == 0)
        {
LABEL_28:
          if ((v12 & 8) == 0)
            goto LABEL_43;
LABEL_38:
          WrdTableCellDescriptor::setRightPadding(v16, v15);
          result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setRightPaddingUnit((uint64_t)v16, v13);
          goto LABEL_43;
        }
        goto LABEL_37;
      }
    }
    else if ((v12 & 2) != 0)
    {
      goto LABEL_36;
    }
    if ((v12 & 4) == 0)
      goto LABEL_28;
LABEL_37:
    WrdTableCellDescriptor::setBottomPadding(v16, v15);
    result = (WrdTableCellDescriptor *)WrdTableCellDescriptor::setBottomPaddingUnit((uint64_t)v16, v13);
    if ((v12 & 8) != 0)
      goto LABEL_38;
LABEL_43:
    LOBYTE(v8) = v8 + 1;
    if (v9 <= v8)
      return result;
  }
}

WrdTableProperties *WrdTableProperties::setDefaultTableLeftCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 1u;
  *((_WORD *)this + 174) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableLeftCellPaddingUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x100000uLL;
  *(_DWORD *)(result + 152) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableRightCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 4u;
  *((_WORD *)this + 176) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableRightCellPaddingUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x400000uLL;
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t WrdTableProperties::setWidthIndentUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x10000uLL;
  *(_DWORD *)(result + 136) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setWidthIndent(WrdTableProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x400000000000000uLL;
  *((_WORD *)this + 169) = a2;
  return this;
}

void PptExObjListAtom::PptExObjListAtom(PptExObjListAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8270;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8318;
}

uint64_t PptExObjListAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 576))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExObjListAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExHyperlinkAtom::PptExHyperlinkAtom(PptExHyperlinkAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B7CA0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B7D48;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptExHyperlinkAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 96))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExHyperlinkAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExEmbedAtom::PptExEmbedAtom(PptExEmbedAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B7BA8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B7C50;
  *(_WORD *)(v2 + 52) = 0;
  *(_BYTE *)(v2 + 54) = 0;
}

uint64_t PptExEmbedAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 552))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExEmbedAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_BYTE *)a2 + 52) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) & 1,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 5)
    || (*((_BYTE *)a2 + 53) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) & 1,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 6)
    || (*((_BYTE *)a2 + 54) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) & 1,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 7))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 1u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExOleObjAtom::PptExOleObjAtom(PptExOleObjAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8558;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8600;
}

uint64_t PptExOleObjAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 600))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExOleObjAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 13)
    || (PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 3u),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16)
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 20))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 4u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

EshColor *EshColor::noModification(EshColor *this, EshColor *a2)
{
  this->var0.var0 = 32;
  return this;
}

uint64_t EshColor::rgb(uint64_t result, char a2, char a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 4) = result;
  *(_BYTE *)(a4 + 5) = a2;
  *(_BYTE *)(a4 + 6) = a3;
  return result;
}

uint64_t **EshOpt::takeGenericProperty(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t **result;
  unsigned int v5;
  unsigned int *v6;

  v5 = a2;
  v6 = &v5;
  result = std::__tree<std::__value_type<unsigned int,EshOpt::Value>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EshOpt::Value>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EshOpt::Value>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v5, (uint64_t)&std::piecewise_construct, &v6);
  result[5] = a3;
  result[6] = 0;
  return result;
}

uint64_t *ChAutoPtr<EshOpt::GenericValue>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1)
  {
    *(_QWORD *)(v2 + 8) = off_24F39F1D0;
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    MEMORY[0x22E2DD408](v2, 0x1090C40DF1FC404);
  }
  *a1 = 0;
  return a1;
}

void EshColorMRU::EshColorMRU(EshColorMRU *this)
{
  _QWORD *v1;

  EshAtom::EshAtom(this, 0xF11Au, 0);
  *v1 = &off_24F39E7A0;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
}

uint64_t EshColorMRU::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 88))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshColorMRU *a2)
{
  uint64_t v4;
  int Offset;
  int Instance;
  int v7;
  EshColor *v8;
  EshColor *v9;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  Instance = EshRecord::getInstance(a2);
  if (EshRecord::getDataLength(a2) != 4 * (unsigned __int16)Instance)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if (Instance)
  {
    v7 = 0;
    do
    {
      v8 = (EshColor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
      v9 = EshParserVisitor::decodeColor((EshColor *)this, v8);
      EshColorMRU::addColor(a2, v9);
      ++v7;
    }
    while ((unsigned __int16)v7 < (unsigned __int16)Instance);
  }
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void PptVBAInfoAtom::PptVBAInfoAtom(PptVBAInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BC0F0;
  *(_QWORD *)(v2 + 32) = &unk_24F3BC198;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
}

uint64_t PptVBAInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 744))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptVBAInfoAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptCommentIndex10Atom::PptCommentIndex10Atom(PptCommentIndex10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BED68;
  *(_QWORD *)(v2 + 32) = &unk_24F3BEE10;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptCommentIndex10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1016))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptCommentIndex10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptReviewAtom::PptReviewAtom(PptReviewAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA3C0;
  *(_QWORD *)(v2 + 32) = &unk_24F3BA468;
}

uint64_t PptReviewAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 768))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptReviewAtom *a2)
{
  unsigned int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if (v4 >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_BYTE *)a2 + 45) = v4 == 1;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptExObjRefAtom::PptExObjRefAtom(PptExObjRefAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8368;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8410;
}

uint64_t PptExObjRefAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 584))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExObjRefAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptNotesAtom::PptNotesAtom(PptNotesAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B9AB8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9B60;
  *(_DWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 51) = 0;
}

uint64_t PptNotesAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 184))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptNotesAtom *a2)
{
  char v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 52) = v4 & 1;
  *((_BYTE *)a2 + 53) = (v4 & 2) != 0;
  *((_BYTE *)a2 + 54) = (v4 & 4) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptHeaderMCAtom::PptHeaderMCAtom(PptHeaderMCAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B94E8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9590;
}

uint64_t PptHeaderMCAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 152))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptHeaderMCAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptTextGenericRulerAtom::setFirstLine(uint64_t this, int a2, __int16 a3)
{
  _DWORD *exception;

  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *(_WORD *)(this + 2 * a2 + 66) = a3;
  return this;
}

void PptEshGroup::PptEshGroup(PptEshGroup *this)
{
  uint64_t v2;

  EshGroup::EshGroup(this);
  PptEshClientContainer::PptEshClientContainer((PptEshClientContainer *)(v2 + 368));
  *(_QWORD *)this = &off_24F3B7728;
  *((_QWORD *)this + 34) = &unk_24F3B77D8;
  *((_QWORD *)this + 46) = &unk_24F3B7818;
}

void sub_22A1A0B20(_Unwind_Exception *a1)
{
  EshGroup *v1;

  EshGroup::~EshGroup(v1);
  _Unwind_Resume(a1);
}

void EshGroup::EshGroup(EshGroup *this)
{
  uint64_t v2;

  EshContentBase::EshContentBase(this, 6u);
  *(_QWORD *)v2 = &off_24F3A4378;
  *(_QWORD *)(v2 + 272) = &unk_24F3A4428;
  *(_QWORD *)(v2 + 280) = 0;
  EshObject::EshObject((EshObject *)(v2 + 288), 0x1Au);
  *((_QWORD *)this + 36) = &off_24F3A44A0;
  *((_QWORD *)this + 38) = (char *)this + 16;
  *((_QWORD *)this + 39) = 0;
  EshObject::EshObject((EshObject *)this + 20, 0x1Bu);
  *((_QWORD *)this + 42) = (char *)this + 16;
  *((_QWORD *)this + 40) = &off_24F3A4548;
  EshObject::EshObject((EshObject *)((char *)this + 344), 0x1Cu);
  *((_QWORD *)this + 45) = (char *)this + 16;
  *((_QWORD *)this + 43) = &off_24F3A45F0;
}

void sub_22A1A0BC8(_Unwind_Exception *a1)
{
  EshContentBase *v1;

  EshContentBase::~EshContentBase(v1);
  _Unwind_Resume(a1);
}

uint64_t EshGroup::init(EshGroup *this)
{
  EshSpgr *v2;

  v2 = (EshSpgr *)operator new(0x30uLL);
  EshSpgr::EshSpgr(v2);
  *((_QWORD *)this + 35) = v2;
  return EshGroupProperties::init((uint64_t)this + 288, (uint64_t)v2);
}

void sub_22A1A0C20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL PptEshGroup::isAtom(PptEshGroup *this)
{
  return ((*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) & 0x7FFFFFFF8) == 0;
}

uint64_t EshBinaryReader::readObject(EshBinaryReader *this, EshGroup *a2)
{
  EshContainer *v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  EshChildAnchor *v13;

  v4 = (EshContainer *)operator new(0x38uLL);
  EshContainer::EshContainer(v4, 0xF004u);
  v5 = (*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)this + 96))(this);
  (*(void (**)(EshBinaryReader *, EshContainer *, uint64_t))(*(_QWORD *)this + 104))(this, v4, v5);
  for (i = 0; ; i = (i + 1))
  {
    v7 = (*(uint64_t (**)(EshContainer *))(*(_QWORD *)v4 + 40))(v4);
    v8 = *(_QWORD *)v4;
    if (i >= v7)
      break;
    v9 = (*(uint64_t (**)(EshContainer *, uint64_t))(v8 + 48))(v4, i);
    v10 = (*(uint64_t (**)(EshContainer *, uint64_t))(*(_QWORD *)v4 + 104))(v4, i);
    v11 = (char *)a2 + 208;
    v12 = 21;
    switch(v9)
    {
      case 61449:
        v11 = (char *)*((_QWORD *)a2 + 35);
        goto LABEL_8;
      case 61450:
        goto LABEL_8;
      case 61451:
        v11 = (char *)a2 + 16;
        goto LABEL_8;
      case 61452:
      case 61453:
      case 61454:
        continue;
      case 61455:
        v13 = (EshChildAnchor *)operator new(0x30uLL);
        EshChildAnchor::EshChildAnchor(v13);
        (*(void (**)(EshBinaryReader *, EshChildAnchor *, uint64_t))(*(_QWORD *)this + 104))(this, v13, v10);
        *((_DWORD *)a2 + 64) = *((_DWORD *)v13 + 7);
        *((_DWORD *)a2 + 65) = *((_DWORD *)v13 + 8);
        *((_DWORD *)a2 + 66) = *((_DWORD *)v13 + 9);
        *((_DWORD *)a2 + 67) = *((_DWORD *)v13 + 10);
        (*(void (**)(EshChildAnchor *))(*(_QWORD *)v13 + 8))(v13);
        continue;
      case 61456:
        goto LABEL_11;
      case 61457:
        v12 = 22;
LABEL_11:
        (*(void (**)(EshBinaryReader *, EshGroup *, uint64_t))(*(_QWORD *)this + 8 * v12))(this, a2, v10);
        break;
      default:
        if (v9 == 61730)
        {
          v11 = (char *)a2 + 144;
LABEL_8:
          (*(void (**)(EshBinaryReader *, char *, uint64_t))(*(_QWORD *)this + 104))(this, v11, v10);
        }
        break;
    }
  }
  return (*(uint64_t (**)(EshContainer *))(v8 + 8))(v4);
}

void sub_22A1A0E24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptEshGroup::getNumChildren(PptEshGroup *this)
{
  return (*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 3;
}

uint64_t PptEshGroup::getChildType(PptEshGroup *this, unsigned int a2)
{
  return PptEshClientContainer::getChildType((PptEshGroup *)((char *)this + 368), a2);
}

uint64_t PptEshGroup::getChildVersion(PptEshGroup *this, unsigned int a2)
{
  return PptEshClientContainer::getChildVersion((PptEshGroup *)((char *)this + 368), a2);
}

void EshChildAnchor::EshChildAnchor(EshChildAnchor *this)
{
  _QWORD *v1;

  EshRectAtom::EshRectAtom(this, 0xF00Fu, 0);
  *v1 = &off_24F39E6C8;
}

void EshChildAnchor::~EshChildAnchor(EshChildAnchor *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptInteractiveInfoAtom::PptInteractiveInfoAtom(PptInteractiveInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B97D0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9878;
  *(_DWORD *)(v2 + 68) = 0;
}

uint64_t PptInteractiveInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 168))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptInteractiveInfoAtom *a2)
{
  int v4;
  char v5;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    goto LABEL_9;
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    goto LABEL_9;
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 9)
    goto LABEL_9;
  *((_BYTE *)a2 + 60) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 10
    || (*((_DWORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 11)
    || (v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        *((_BYTE *)a2 + 68) = v5 & 1,
        *((_BYTE *)a2 + 69) = (v5 & 2) != 0,
        *((_BYTE *)a2 + 70) = (v5 & 4) != 0,
        *((_BYTE *)a2 + 71) = (v5 & 8) != 0,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 13))
  {
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownToEnd(*((PptSkipVisitor **)this + 3), a2);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

_BYTE *PptSkipVisitor::skipKnownToEnd(PptSkipVisitor *this, const EshRecord *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  _DWORD *exception;

  v4 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  if (v4 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  v6 = v5 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this) + 8;
  return PptSkipVisitor::skipKnownBytes(this, a2, v6);
}

uint64_t PptTab::PptTab(uint64_t result, int a2, __int16 a3)
{
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 4) = a3;
  return result;
}

void PptExOleObjStg::PptExOleObjStg(PptExOleObjStg *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8650;
  *(_QWORD *)(v2 + 32) = &unk_24F3B86F8;
  *(_DWORD *)(v2 + 48) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v2 + 56));
}

uint64_t PptExOleObjStg::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 392))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExOleObjStg *a2)
{
  uint64_t v4;
  int v5;
  SsrwOOStream *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = *((unsigned int *)a2 + 3);
  if (*((_WORD *)a2 + 10) == 1)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
    if ((int)v4 <= 2080898 && v5 > 1032 * ((int)v4 - 4))
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 4003;
    }
    v4 = (v4 - 4);
  }
  else
  {
    v5 = 0;
  }
  *((_DWORD *)a2 + 12) = v5;
  v7 = (SsrwOOStream *)*((_QWORD *)this + 1);
  v8 = (*((uint64_t (**)(SsrwOOStream *))v7->var0 + 4))(v7);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  OcBinaryData::setDataInfo((OcBinaryData *)((char *)a2 + 56), v7, v8, v9, v4);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v4, 1);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t `non-virtual thunk to'PptAtom::setId(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 12) = 1;
  return this;
}

uint64_t CsLeReadChars16(uint64_t result, int a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a2 & ~(a2 >> 31);
  v4 = result + 1;
  do
  {
    if (!v3)
      break;
    v5 = *(unsigned __int16 *)(v4 - 1);
    *a3++ = v5;
    --v3;
    v4 += 2;
  }
  while (v5);
  return result;
}

void sub_22A1A149C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshFill::getFillType(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x180u);
}

uint64_t EshStroke::getOpacity(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1C1u);
}

uint64_t EshStroke::getFillType(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1C4u);
}

uint64_t *EshStroke::getDashStyle(EshStroke *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x1CFu);
}

uint64_t EshStroke::getPredefDashStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CEu);
}

uint64_t EshStroke::getWeight(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CBu);
}

uint64_t EshStroke::getCapStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D7u);
}

uint64_t EshStroke::getLineStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CDu);
}

uint64_t EshShadow::getOn(EshShadow *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x23Eu);
}

uint64_t EshTextBox::getInsetLeft(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x81u);
}

uint64_t EshTextBox::getInsetRight(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x83u);
}

uint64_t EshTextBox::getInsetTop(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x82u);
}

uint64_t EshTextBox::getInsetBottom(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x84u);
}

uint64_t EshTextBox::getColumnCount(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x8Cu);
}

uint64_t EshTextBox::getColumnMargin(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x8Du);
}

uint64_t EshTextBox::getRotate(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x89u);
}

uint64_t EshTextBox::getFlow(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x88u);
}

uint64_t EshTextBox::getFitShapeToText(EshTextBox *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0xBEu);
}

uint64_t EshTextBox::getWrapStyle(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x85u);
}

uint64_t EshContentLocks::getAspectRatio(EshContentLocks *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x78u);
}

uint64_t EshShapeProperties::getHidden(EshShapeProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x3BEu);
}

void sub_22A1A18A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A196C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A19F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A1AD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A1B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1A1C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EshPath::isStrokeOKSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x17Cu);
}

uint64_t EshShapeLib::isStrokeOK(EshShapeLib *this, uint64_t a2)
{
  unsigned __int16 *ShapeType;

  ShapeType = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType)
    return (*ShapeType >> 5) & 1;
  return a2;
}

uint64_t TSUDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return a2;
  return 0;
}

uint64_t EshShapeImageData::getCropLeft(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x102u);
}

uint64_t EshShapeImageData::getCropRight(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x103u);
}

uint64_t EshShapeImageData::getGain(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x108u);
}

uint64_t EshShapeImageData::getBlackLevel(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x109u);
}

void sub_22A1A22E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshPath::isFillOKSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x17Fu);
}

uint64_t EshShapeLib::isFillOK(EshShapeLib *this, uint64_t a2)
{
  unsigned __int16 *ShapeType;

  ShapeType = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType)
    return (*ShapeType >> 4) & 1;
  return a2;
}

uint64_t EshFill::isBlipSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x186u);
}

uint64_t EshFill::isBlipId(EshFill *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x186u);
}

uint64_t EshFill::getBlipId(EshFill *this)
{
  return *((unsigned __int16 *)EshOpt::getProperty((uint64_t)this->var2, 0x186u) + 4);
}

uint64_t EshFill::isBlipNameSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x187u);
}

uint64_t *EshFill::getBlipName(EshFill *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x187u);
}

EshColor *EshColor::white(EshColor *this, EshColor *a2)
{
  this->var0.var1.var1 = -1;
  this->var0.var1.var0.var2 = -1;
  this->var0.var0 = 0;
  return this;
}

void sub_22A1A2724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A28C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A2DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t OADTextCachedSpacingWithSpacing(OADTextSpacing *a1)
{
  uint64_t v1;
  OADTextSpacing *v2;
  float v3;

  v2 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[OADTextSpacing percent](v2, "percent");
    v1 = (int)v3;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      LODWORD(v1) = vcvts_n_s32_f32((float)-(int)-[OADTextSpacing points](v2, "points"), 3uLL);
    else
      v1 = 0;
  }

  return v1;
}

void sub_22A1A2F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TSUHash(char *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  for (result = 0xCBF29CE484222325; a2; --a2)
  {
    v4 = *a1++;
    result = 0x100000001B3 * (result ^ v4);
  }
  return result;
}

void sub_22A1A30C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A3190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A3430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1A36C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A3750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A37E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A383C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A3AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1A3D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A1A40CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A4964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1A4A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1A4C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

CGColorRef CMShapeRendererCreateGenericRGBA(float a1, float a2, float a3, float a4)
{
  CGColorSpace *DeviceRGB;
  CGColorRef v5;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x24BDAC8D0];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v5 = CGColorCreate(DeviceRGB, components);
  CGColorSpaceRelease(DeviceRGB);
  return v5;
}

void sub_22A1A4D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1A4DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A4E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1A4F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A5060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1A50FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A53C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1A54E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A5654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  EshGeometryProperties::~EshGeometryProperties((EshGeometryProperties *)va);
  _Unwind_Resume(a1);
}

void EshGeometryProperties::EshGeometryProperties(EshGeometryProperties *this)
{
  *((_WORD *)this + 4) = 5;
  *(_QWORD *)this = &off_24F39EDC8;
  *(_QWORD *)((char *)this + 12) = 0;
  *(int32x2_t *)((char *)this + 20) = vdup_n_s32(0x5460u);
  *((_QWORD *)this + 16) = 0x8000000080000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 34) = 1;
  *((_DWORD *)this + 35) = 65793;
  *((_WORD *)this + 72) = 256;
  *((_BYTE *)this + 146) = 0;
}

double EshGeometryProperties::init(EshGeometryProperties *this)
{
  double result;

  *(_OWORD *)((char *)this + 12) = xmmword_22A4BEBF0;
  *((_QWORD *)this + 16) = 0x8000000080000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 34) = 1;
  *(_QWORD *)&result = 65793;
  *((_DWORD *)this + 35) = 65793;
  *((_WORD *)this + 72) = 256;
  *((_BYTE *)this + 146) = 0;
  return result;
}

BOOL EshShapeLib::cloneShapeProperties(EshShapeLib *this, int32x2_t *a2, EshGeometryProperties *a3)
{
  uint64_t ShapeType;
  uint64_t v5;
  uint64_t v6;
  __int32 *v7;
  int32x2_t *v8;
  __int32 v9;

  ShapeType = getShapeType((int)this);
  v5 = ShapeType;
  if (ShapeType)
  {
    a2[4] = (int32x2_t)EshShapeLib::cloneVertices(*(EshShapeLib **)(ShapeType + 24), (const EshComputedValue *)*(unsigned int *)(ShapeType + 32));
    a2[5] = (int32x2_t)EshShapeLib::cloneSegments(*(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 16));
    a2[14] = (int32x2_t)EshShapeLib::cloneFormulas(*(_QWORD *)(v5 + 56), *(_DWORD *)(v5 + 64));
    a2[15] = (int32x2_t)EshShapeLib::cloneInscribe(*(_QWORD *)(v5 + 72), *(_DWORD *)(v5 + 80));
    v6 = *(unsigned int *)(v5 + 48);
    if ((int)v6 >= 1)
    {
      v7 = *(__int32 **)(v5 + 40);
      v8 = a2 + 6;
      do
      {
        v9 = *v7++;
        v8->i32[0] = v9;
        v8 = (int32x2_t *)((char *)v8 + 4);
        --v6;
      }
      while (v6);
    }
    if ((*(_WORD *)v5 & 1) != 0)
      a2[16] = vdup_n_s32(0x2A30u);
  }
  return v5 != 0;
}

_QWORD *EshShapeLib::cloneVertices(EshShapeLib *this, const EshComputedValue *a2)
{
  unsigned int v2;
  _QWORD *v4;

  v2 = a2;
  v4 = operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = &off_24F39D578;
  v4[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::init(v4, v2, (uint64_t)this);
  return v4;
}

void sub_22A1A583C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshComputedValue>::init(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = (char **)(a1 + 1);
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::reserve((void **)a1 + 1, a2);
  if (a2)
  {
    v7 = 0;
    v8 = a1 + 3;
    v9 = (char *)a1[2];
    do
    {
      if ((unint64_t)v9 >= *v8)
      {
        v10 = v9 - *v6;
        v11 = (*v8 - (_QWORD)*v6) >> 3;
        v12 = 2 * v11;
        if (2 * (int)v11 <= (v10 >> 3) + 1)
          v12 = (v10 >> 3) + 1;
        if (v11 >= 0x7FFFFFFF)
          v13 = 0xFFFFFFFFLL;
        else
          v13 = v12;
        if ((_DWORD)v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(a1 + 3), v13);
          v16 = v15;
        }
        else
        {
          v14 = 0;
          v16 = 0;
        }
        v17 = &v14[v10 & 0x7FFFFFFF8];
        *(_QWORD *)v17 = *(_QWORD *)(a3 + 8 * v7);
        v9 = v17 + 8;
        v19 = (char *)a1[1];
        v18 = (char *)a1[2];
        if (v18 != v19)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v17 - 1) = v20;
            v17 -= 8;
          }
          while (v18 != v19);
          v18 = *v6;
        }
        a1[1] = v17;
        a1[2] = v9;
        a1[3] = &v14[8 * v16];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)(a3 + 8 * v7);
        v9 += 8;
      }
      a1[2] = v9;
      ++v7;
    }
    while (v7 != a2);
  }
}

_QWORD *EshShapeLib::cloneSegments(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = &off_24F39D6E0;
  v4[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::init(v4, a2, a1);
  return v4;
}

void sub_22A1A59CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *EshShapeLib::cloneFormulas(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = (uint64_t)&off_24F39D780;
  v4[1] = 0;
  EshBasicTablePropVal<EshFormula>::init(v4, a2, a1);
  return v4;
}

void sub_22A1A5A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshFormula>::init(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v6 = a1 + 1;
  std::vector<EshFormula,ChAllocator<EshFormula>>::reserve(a1 + 1, a2);
  if (a2)
  {
    v7 = 0;
    v8 = a2;
    v9 = (_DWORD *)a1[2];
    do
    {
      v10 = (_DWORD *)(a3 + 28 * v7);
      if ((unint64_t)v9 >= a1[3])
      {
        v11 = std::vector<EshFormula,ChAllocator<EshFormula>>::__push_back_slow_path<EshFormula const&>(v6, v10);
      }
      else
      {
        v11 = (uint64_t)(v9 + 7);
        v12 = 1;
        do
        {
          v13 = &v9[v12];
          *v13 = 0;
          *((_WORD *)v13 + 2) = 0;
          v12 += 2;
        }
        while (v13 + 2 != (_DWORD *)v11);
        EshFormula::operator=(v9, v10);
        a1[2] = v11;
      }
      a1[2] = v11;
      ++v7;
      v9 = (_DWORD *)v11;
    }
    while (v7 != v8);
  }
}

void sub_22A1A5B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t *EshShapeLib::cloneInscribe(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = (uint64_t)&off_24F39D820;
  v4[1] = 0;
  EshBasicTablePropVal<EshComputedRect>::init(v4, a2, a1);
  return v4;
}

void sub_22A1A5B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void EshBasicTablePropVal<EshComputedRect>::init(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;

  v6 = a1 + 1;
  std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::reserve(a1 + 1, a2);
  if (a2)
  {
    v7 = 0;
    v8 = a1[2];
    v9 = a3;
    do
    {
      if (v8 >= a1[3])
      {
        v8 = std::vector<EshComputedRect,ChAllocator<EshComputedRect>>::__push_back_slow_path<EshComputedRect const&>(v6, a3 + 32 * v7);
      }
      else
      {
        for (i = 0; i != 32; i += 8)
        {
          v11 = v8 + i;
          *(_BYTE *)v11 = 0;
          *(_DWORD *)(v11 + 4) = 0;
        }
        for (j = 0; j != 32; j += 8)
          *(_QWORD *)(v8 + j) = *(_QWORD *)(v9 + j);
        v8 += 32;
      }
      a1[2] = v8;
      ++v7;
      v9 += 32;
    }
    while (v7 != a2);
  }
}

_QWORD *EshGeometryProperties::addImpliedSegments(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _DWORD *exception;

  if (!this[5])
  {
    v1 = this;
    if (this[4])
    {
      if (*((_DWORD *)this + 34) == 4)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 7007;
      }
      v2 = operator new(0x20uLL);
      v2[2] = 0;
      v2[3] = 0;
      *v2 = &off_24F39D6E0;
      v2[1] = 0;
      v1[5] = v2;
      return EshGeometryProperties::generateImpliedPath((unsigned __int16)((*(_DWORD *)(v1[4] + 16) - *(_DWORD *)(v1[4] + 8)) >> 3), *((__int16 *)v1 + 68), (uint64_t)v2);
    }
  }
  return this;
}

void sub_22A1A5E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshGeometryProperties::getVertices(EshGeometryProperties *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t EshGeometryProperties::getSegments(EshGeometryProperties *this)
{
  return *((_QWORD *)this + 5);
}

void sub_22A1A6494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_22A1A64CC(void *a1, int a2)
{
  void *v2;
  void *v3;

  if (a2 == 1)
  {
    objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x22A1A6438);
  }
  JUMPOUT(0x22A1A64A0);
}

uint64_t EshBasicTablePropVal<EshComputedValue>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 3) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 8 * a2;
}

void sub_22A1A66AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshGeometryProperties::getFormulas(EshGeometryProperties *this)
{
  return *((_QWORD *)this + 14);
}

void sub_22A1A6914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL EshGeometryProperties::isInscribesSet(EshGeometryProperties *this)
{
  return *((_QWORD *)this + 15) != 0;
}

uint64_t EshGeometryProperties::getInscribes(EshGeometryProperties *this)
{
  return *((_QWORD *)this + 15);
}

void sub_22A1A6A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A6BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void EshGeometryProperties::~EshGeometryProperties(EshGeometryProperties *this)
{
  *(_QWORD *)this = &off_24F39EDC8;
  EshGeometryProperties::cleanup(this);
}

{
  *(_QWORD *)this = &off_24F39EDC8;
  EshGeometryProperties::cleanup(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t EshGeometryProperties::cleanup(EshGeometryProperties *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)this + 11);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 11) = 0;
  v5 = *((_QWORD *)this + 12);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 12) = 0;
  v6 = *((_QWORD *)this + 13);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 13) = 0;
  v7 = *((_QWORD *)this + 14);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 14) = 0;
  result = *((_QWORD *)this + 15);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 15) = 0;
  return result;
}

void EshPathParamTable::~EshPathParamTable(EshPathParamTable *this)
{
  void *v2;

  *(_QWORD *)this = off_24F39D608;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = off_24F39D608;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void EshTablePropVal<EshPathCommand>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D748;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshTablePropVal<EshFormula>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D7E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshTablePropVal<EshComputedRect>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D888;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1A6FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A72B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A74D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CMDrawingAction;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t EshFill::isAngleSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Bu);
}

uint64_t EshFill::getAngle(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Bu);
}

uint64_t EshFill::isFocusSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Cu);
}

uint64_t EshFill::getFocus(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Cu);
}

uint64_t EshFill::isColor2Set(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x183u);
}

uint64_t EshFill::getColor2(EshFill *this)
{
  return EshOpt::getColorProperty((uint64_t)this->var2, 0x183u);
}

void sub_22A1A7738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshColor::getAdjustmentType(EshColor *this)
{
  return this->var0.var1.var0.var2 & 0xF;
}

uint64_t EshColor::isInvert(EshColor *this)
{
  return (this->var0.var1.var0.var2 >> 4) & 1;
}

uint64_t EshColor::isInvert128(EshColor *this)
{
  return (this->var0.var1.var0.var2 >> 5) & 1;
}

uint64_t EshColor::isGray(EshColor *this)
{
  return (this->var0.var1.var0.var2 >> 6) & 1;
}

void sub_22A1A7864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshFill::isColorsSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x197u);
}

uint64_t EshFill::isOpacity2Set(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x184u);
}

void sub_22A1A79B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshGroupProperties::isTablePropertiesSet(EshGroupProperties *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2) + 128, 0x39Fu);
}

void sub_22A1A7BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_22A1A7C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A7DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A1A82F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22A1A84AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1A8554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1A86C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A8C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_22A1A8FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A1A9340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1A96DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double TSUCenterOfRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

void sub_22A1A97FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1A9878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1A98FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1A99AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getCropTop(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x100u);
}

uint64_t EshShapeImageData::getCropBottom(EshShapeImageData *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x101u);
}

uint64_t EshFill::getOpacity(EshFill *this)
{
  int v1;

  v1 = *(_DWORD *)EshOpt::getProperty((uint64_t)this->var2, 0x182u);
  if (v1 >= 0x10000)
    return 0x10000;
  else
    return v1;
}

void sub_22A1A9AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::getAdj(EshShapeProperties *this, int a2)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, a2 + 327);
}

double NSTransposedRectWithSameCenter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  double Height;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetMidY(v11);
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  Height = CGRectGetHeight(v12);
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  CGRectGetWidth(v13);
  return MidX - Height * 0.5;
}

void sub_22A1A9C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A9CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1A9D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1A9FB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1AA154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1AA1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1AA474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1AA5B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1AA7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PptNotesAtom::~PptNotesAtom(PptNotesAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptHeaderMCAtom::~PptHeaderMCAtom(PptHeaderMCAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptExOleObjStg::~PptExOleObjStg(PptExOleObjStg *this)
{
  *(_QWORD *)this = &off_24F3B8650;
  *((_QWORD *)this + 4) = &unk_24F3B86F8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 56));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B8650;
  *((_QWORD *)this + 4) = &unk_24F3B86F8;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 56));
}

void PptEshGroup::~PptEshGroup(PptEshGroup *this)
{
  PptEshClientContainer::~PptEshClientContainer((PptEshGroup *)((char *)this + 368));
  EshGroup::~EshGroup(this);
  JUMPOUT(0x22E2DD408);
}

{
  PptEshClientContainer::~PptEshClientContainer((PptEshGroup *)((char *)this + 368));
  EshGroup::~EshGroup(this);
}

void EshGroup::~EshGroup(EshGroup *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3A4378;
  *((_QWORD *)this + 34) = &unk_24F3A4428;
  v2 = *((_QWORD *)this + 35);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 35) = 0;
  EshContentBase::~EshContentBase(this);
}

{
  EshGroup::~EshGroup(this);
  JUMPOUT(0x22E2DD408);
}

void PptInteractiveInfoAtom::~PptInteractiveInfoAtom(PptInteractiveInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptExObjRefAtom::~PptExObjRefAtom(PptExObjRefAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptExObjListAtom::~PptExObjListAtom(PptExObjListAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptExHyperlinkAtom::~PptExHyperlinkAtom(PptExHyperlinkAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptExEmbedAtom::~PptExEmbedAtom(PptExEmbedAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptExOleObjAtom::~PptExOleObjAtom(PptExOleObjAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshColorMRU::~EshColorMRU(EshColorMRU *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F39E7A0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F39E7A0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

void PptVBAInfoAtom::~PptVBAInfoAtom(PptVBAInfoAtom *this)
{
  *(_QWORD *)this = &off_24F3BC0F0;
  *((_QWORD *)this + 4) = &unk_24F3BC198;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BC0F0;
  *((_QWORD *)this + 4) = &unk_24F3BC198;
}

void PptCommentIndex10Atom::~PptCommentIndex10Atom(PptCommentIndex10Atom *this)
{
  *(_QWORD *)this = &off_24F3BED68;
  *((_QWORD *)this + 4) = &unk_24F3BEE10;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BED68;
  *((_QWORD *)this + 4) = &unk_24F3BEE10;
}

void PptReviewAtom::~PptReviewAtom(PptReviewAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlObjectFactory::XlObjectFactory(XlObjectFactory *this)
{
  this->var0 = (void **)&off_24F3AF9D8;
  this->var1 = 0;
}

void XlChartBinaryReader::XlChartBinaryReader(XlChartBinaryReader *this, XlObjectFactory *a2)
{
  OcReader::OcReader((OcReader *)this + 125);
  XlBinaryReader::XlBinaryReader(this, (XlObjectFactory *)&off_24F3AAA48, a2);
  *(_QWORD *)this = &off_24F3AA3E8;
  *((_QWORD *)this + 1) = &off_24F3AA708;
  *((_QWORD *)this + 2) = &unk_24F3AA738;
  *((_QWORD *)this + 250) = &unk_24F3AA9A8;
  *((_QWORD *)this + 169) = 0;
  *((_QWORD *)this + 171) = 0;
  *((_QWORD *)this + 170) = 0;
  XlSubstreamProperties::XlSubstreamProperties((XlChartBinaryReader *)((char *)this + 1376));
  *((_QWORD *)this + 204) = 0;
  *((_OWORD *)this + 101) = 0u;
  *((_QWORD *)this + 210) = 0;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_QWORD *)this + 217) = 0;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 113) = 0u;
  *((_QWORD *)this + 228) = (char *)this + 1832;
  *((_QWORD *)this + 232) = 0;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 231) = (char *)this + 1856;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 237) = 0;
  *((_QWORD *)this + 235) = (char *)this + 1888;
  *((_QWORD *)this + 240) = 0;
  *((_QWORD *)this + 239) = 0;
  *((_QWORD *)this + 238) = (char *)this + 1912;
  __asm { FMOV            V1.2S, #1.0 }
  *((_QWORD *)this + 241) = _D1;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  XlChartBinaryReader::reset(this);
}

void sub_22A1AAC24(_Unwind_Exception *a1)
{
  XlBinaryReader *v1;
  OcReader *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 170) = v6;
    operator delete(v6);
  }
  XlBinaryReader::~XlBinaryReader(v1, (uint64_t *)&off_24F3AAA48);
  OcReader::~OcReader(v2);
  _Unwind_Resume(a1);
}

void XlBinaryReader::XlBinaryReader(XlBinaryReader *this, XlObjectFactory *a2, XlObjectFactory *a3)
{
  XlEshObjectFactory *var1;
  void **var0;
  char *v7;
  __int128 v8;
  uint64_t v9;
  XlEshObjectFactory *EshObjectFactory;
  XlEshObjectFactory *v11;

  *(_QWORD *)this = off_24F3B1310;
  *((_QWORD *)this + 1) = off_24F3B1398;
  var1 = a2->var1;
  *((_QWORD *)this + 2) = var1;
  *(_QWORD *)((char *)this + *(_QWORD *)&var1[-2].var1 + 16) = a2[1].var0;
  var0 = a2->var0;
  *(_QWORD *)this = a2->var0;
  *((_QWORD *)this + 1) = &off_24F3B0C18;
  *((_QWORD *)this + 2) = a2[1].var1;
  *(_QWORD *)((char *)*(var0 - 3) + (_QWORD)this) = a2[2].var0;
  v7 = (char *)this + 40;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  XlEshBinaryReader::XlEshBinaryReader((XlBinaryReader *)((char *)this + 40));
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *(_OWORD *)((char *)this + 168) = v8;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 184) = v8;
  *(_OWORD *)((char *)this + 200) = v8;
  *(_OWORD *)((char *)this + 216) = v8;
  *(_OWORD *)((char *)this + 232) = v8;
  *(_OWORD *)((char *)this + 248) = v8;
  *(_OWORD *)((char *)this + 264) = v8;
  *((_DWORD *)this + 70) = -1;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_QWORD *)this + 49) = -1;
  *((_WORD *)this + 200) = -1;
  *(_QWORD *)((char *)this + 404) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 110) = -1;
  *((_BYTE *)this + 444) = 9;
  *((_DWORD *)this + 112) = 0;
  XlWorksheetProperties::XlWorksheetProperties((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::XlWorksheetProtection((XlBinaryReader *)((char *)this + 600));
  XlCalculationProperties::XlCalculationProperties((XlBinaryReader *)((char *)this + 632));
  XlSortInfo::XlSortInfo((XlBinaryReader *)((char *)this + 664));
  XlDocumentInfo::XlDocumentInfo((XlBinaryReader *)((char *)this + 824));
  XlDocumentProtection::XlDocumentProtection((XlBinaryReader *)((char *)this + 848));
  XlFileProtection::XlFileProtection((XlBinaryReader *)((char *)this + 864));
  *((_QWORD *)this + 126) = -1;
  XlDocumentProperties::XlDocumentProperties((XlBinaryReader *)((char *)this + 1016));
  XlSubstreamProperties::XlSubstreamProperties((XlBinaryReader *)((char *)this + 1136));
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_BYTE *)this + 1320) = 9;
  *((_QWORD *)this + 166) = a3;
  *((_QWORD *)this + 167) = 0;
  *((_BYTE *)this + 1344) = 0;
  *(_WORD *)((char *)this + 289) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)this - 24);
  EshObjectFactory = XlObjectFactory::getEshObjectFactory(a3);
  (*(void (**)(char *, XlEshObjectFactory *))(*(_QWORD *)((char *)this + v9) + 144))((char *)this + v9, EshObjectFactory);
  v11 = XlObjectFactory::getEshObjectFactory(*((XlObjectFactory **)this + 166));
  EshGroupProperties::init((uint64_t)v7, (uint64_t)v11);
}

void sub_22A1AAE2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  XlEshBinaryReader *v2;
  XlWorksheetProperties *v3;
  XlCalculationProperties *v4;
  XlSortInfo *v5;
  XlFileProtection *v6;
  XlDocumentProperties *v7;
  uint64_t v8;
  void *v10;
  void *v11;
  void **v12;
  void *v13;
  void *v14;

  XlDocumentProperties::~XlDocumentProperties(v7);
  XlFileProtection::~XlFileProtection(v6);
  XlSortInfo::~XlSortInfo(v5);
  XlCalculationProperties::~XlCalculationProperties(v4);
  XlWorksheetProperties::~XlWorksheetProperties(v3);
  v10 = *(void **)(v8 + 248);
  if (v10)
  {
    v1[53] = v10;
    operator delete(v10);
  }
  v11 = (void *)v1[43];
  if (v11)
  {
    v1[44] = v11;
    operator delete(v11);
  }
  v12 = (void **)(v8 + 128);
  v13 = (void *)v1[40];
  if (v13)
  {
    v1[41] = v13;
    operator delete(v13);
  }
  v14 = *v12;
  if (*v12)
  {
    v1[38] = v14;
    operator delete(v14);
  }
  XlEshBinaryReader::~XlEshBinaryReader(v2);
  _Unwind_Resume(a1);
}

void XlEshBinaryReader::XlEshBinaryReader(XlEshBinaryReader *this)
{
  uint64_t v1;

  EshBinaryReader::EshBinaryReader(this);
  *(_QWORD *)v1 = &off_24F3B1430;
  *(_BYTE *)(v1 + 93) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
}

void XlWorksheetProperties::XlWorksheetProperties(XlWorksheetProperties *this)
{
  *(_QWORD *)this = &off_24F3AFE80;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  OcText::OcText((OcText *)this + 2);
  XlWorksheetProperties::setDefault(this);
}

void sub_22A1AAF90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  OcText *v2;
  void **v3;
  OcText *v4;
  void *v6;
  void *v7;

  v4 = v2;
  OcText::~OcText(v4);
  v6 = (void *)v1[9];
  if (v6)
  {
    v1[10] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[7] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void XlWorksheetProperties::setDefault(XlWorksheetProperties *this)
{
  *((_WORD *)this + 4) = 8;
  *((_DWORD *)this + 3) = -1;
  *((_BYTE *)this + 18) = 1;
  *(_QWORD *)((char *)this + 20) = 0;
  *((_WORD *)this + 8) = 255;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 1;
  *(_QWORD *)((char *)this + 36) = 16843009;
  *((_WORD *)this + 22) = -1;
  XlWorksheetProperties::clearVertPageBreaks(this);
  XlWorksheetProperties::clearHorizPageBreaks(this);
  OcText::clearBuffer((OcText *)this + 2);
  *((_DWORD *)this + 28) = 0;
}

_QWORD *XlWorksheetProperties::clearVertPageBreaks(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[9];
  v3 = this[10];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
        v2 = v1[9];
        v3 = v1[10];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[10] = v2;
  return this;
}

_QWORD *XlWorksheetProperties::clearHorizPageBreaks(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[6];
  v3 = this[7];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
        v2 = v1[6];
        v3 = v1[7];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[7] = v2;
  return this;
}

void OcText::clearBuffer(OcText *this)
{
  char *var5;

  var5 = this->var5;
  if (var5)
    bzero(var5, this->var4);
}

void XlWorksheetProtection::XlWorksheetProtection(XlWorksheetProtection *this)
{
  *((_WORD *)this + 13) = 0;
  *(_QWORD *)this = &off_24F3AFEC0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  *(_DWORD *)((char *)this + 21) = 1;
  *((_BYTE *)this + 25) = 1;
}

void XlCalculationProperties::XlCalculationProperties(XlCalculationProperties *this)
{
  *(_QWORD *)this = &off_24F3AEEA8;
  *((_QWORD *)this + 1) = 0x3F50624DD2F1A9FCLL;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 100;
  *((_BYTE *)this + 22) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 1;
}

void XlSortInfo::XlSortInfo(XlSortInfo *this)
{
  OcText *v2;

  *(_QWORD *)this = &off_24F3AFE10;
  v2 = (OcText *)((char *)this + 64);
  OcText::OcText((OcText *)((char *)this + 16));
  OcText::OcText(v2);
  OcText::OcText((OcText *)((char *)this + 112));
  XlSortInfo::setDefault(this);
}

void sub_22A1AB1E4(_Unwind_Exception *a1)
{
  OcText *v1;
  OcText *v2;
  OcText *v3;

  OcText::~OcText(v3);
  OcText::~OcText(v2);
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

void XlSortInfo::setDefault(XlSortInfo *this)
{
  *(_DWORD *)((char *)this + 11) = 0;
  *((_DWORD *)this + 2) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 16));
  *((_DWORD *)this + 8) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 64));
  *((_DWORD *)this + 20) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 112));
  *((_DWORD *)this + 32) = 0;
}

void XlDocumentInfo::XlDocumentInfo(XlDocumentInfo *this)
{
  *(_QWORD *)this = &off_24F3AF2B0;
  *((_QWORD *)this + 1) = 0x607CC10D3;
  *((_QWORD *)this + 2) = 0;
}

void XlDocumentProtection::XlDocumentProtection(XlDocumentProtection *this)
{
  *(_QWORD *)this = &off_24F3AF398;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 4) = 0;
  *((_BYTE *)this + 10) = 0;
}

void XlFileProtection::XlFileProtection(XlFileProtection *this)
{
  OcText *v2;
  OcText *v3;

  *(_QWORD *)this = &off_24F3AF768;
  v2 = (OcText *)((char *)this + 64);
  v3 = (OcText *)((char *)this + 16);
  OcText::OcText((OcText *)((char *)this + 16));
  OcText::OcText(v2);
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 17) = 0;
  OcText::clearBuffer(v3);
  *((_DWORD *)this + 8) = 0;
  OcText::clearBuffer(v2);
  *((_DWORD *)this + 20) = 0;
  *((_WORD *)this + 56) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
}

void sub_22A1AB318(_Unwind_Exception *a1)
{
  OcText *v1;

  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

void XlDocumentProperties::XlDocumentProperties(XlDocumentProperties *this)
{
  XlRef *v2;
  OcText *v3;

  *(_QWORD *)this = &off_24F3AF360;
  v2 = (XlRef *)((char *)this + 92);
  v3 = (OcText *)((char *)this + 40);
  OcText::OcText((OcText *)((char *)this + 40));
  XlRef::XlRef(v2);
  *((_QWORD *)this + 1) = 0x104B0076CLL;
  *((_QWORD *)this + 2) = 0x10000;
  *((_DWORD *)this + 22) = 0;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = -1;
  OcText::clearBuffer(v3);
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 102) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
}

void sub_22A1AB3D4(_Unwind_Exception *a1)
{
  OcText *v1;

  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

void XlRef::XlRef(XlRef *this)
{
  *(_QWORD *)&this->var0 = -1;
  this->var4 = 0;
}

void XlSubstreamProperties::XlSubstreamProperties(XlSubstreamProperties *this)
{
  XlCellTableInfo *v2;

  *(_QWORD *)this = &off_24F3AB3E0;
  v2 = (XlSubstreamProperties *)((char *)this + 136);
  XlSheetInfo::XlSheetInfo((XlSubstreamProperties *)((char *)this + 8));
  XlPageProperties::XlPageProperties((XlSubstreamProperties *)((char *)this + 24));
  XlCellTableInfo::XlCellTableInfo(v2);
  XlSubstreamProperties::setDefault(this);
}

void sub_22A1AB45C(_Unwind_Exception *a1)
{
  XlPageProperties *v1;
  XlCellTableInfo *v2;

  XlCellTableInfo::~XlCellTableInfo(v2);
  XlPageProperties::~XlPageProperties(v1);
  _Unwind_Resume(a1);
}

void XlSheetInfo::XlSheetInfo(XlSheetInfo *this)
{
  *(_QWORD *)this = &off_24F3AFD30;
  *((_QWORD *)this + 1) = 0xFFFFFFFF00000010;
}

void XlPageProperties::XlPageProperties(XlPageProperties *this)
{
  *(_QWORD *)this = &off_24F3AFBA0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  XlPageProperties::setDefault(this);
}

__n128 XlPageProperties::setDefault(XlPageProperties *this)
{
  OcText *v2;
  OcText *v3;
  __n128 result;

  v2 = (OcText *)*((_QWORD *)this + 5);
  if (v2)
  {
    OcText::clearBuffer(v2);
    *(_DWORD *)(*((_QWORD *)this + 5) + 16) = 0;
  }
  v3 = (OcText *)*((_QWORD *)this + 6);
  if (v3)
  {
    OcText::clearBuffer(v3);
    *(_DWORD *)(*((_QWORD *)this + 6) + 16) = 0;
  }
  *((_WORD *)this + 28) = 0;
  *(_QWORD *)((char *)this + 58) = 0x1000100640000;
  *((_WORD *)this + 33) = 1;
  *((_BYTE *)this + 68) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) = 1;
  *(_QWORD *)((char *)this + 77) = 0;
  *((_BYTE *)this + 85) = 0;
  *((_WORD *)this + 43) = 1;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)((char *)this + 88) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 8) = _Q0;
  __asm { FMOV            V0.2D, #0.75 }
  *(__n128 *)((char *)this + 24) = result;
  *((_WORD *)this + 52) = 0;
  return result;
}

void XlCellTableInfo::XlCellTableInfo(XlCellTableInfo *this)
{
  *(_QWORD *)this = &off_24F3AEF58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

double XlSubstreamProperties::setDefault(XlSubstreamProperties *this)
{
  double result;

  XlSheetInfo::setDefault((XlSubstreamProperties *)((char *)this + 8));
  *((_DWORD *)this + 4) = 32;
  XlPageProperties::setDefault((XlSubstreamProperties *)((char *)this + 24));
  XlCellTableInfo::setDefault((uint64_t)this + 136);
  result = NAN;
  *((_QWORD *)this + 20) = -1;
  return result;
}

double XlSheetInfo::setDefault(XlSheetInfo *this)
{
  double result;

  result = NAN;
  *((_QWORD *)this + 1) = 0xFFFFFFFF00000010;
  return result;
}

uint64_t XlCellTableInfo::setDefault(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

XlEshObjectFactory *XlObjectFactory::getEshObjectFactory(XlObjectFactory *this)
{
  XlEshObjectFactory *var1;

  var1 = this->var1;
  if (!var1)
  {
    var1 = (XlEshObjectFactory *)operator new(0x10uLL);
    XlEshObjectFactory::XlEshObjectFactory(var1);
    this->var1 = var1;
  }
  return var1;
}

void sub_22A1AB614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlEshObjectFactory::XlEshObjectFactory(XlEshObjectFactory *this)
{
  this->var1 = 0;
  this->var0 = (void **)&off_24F3AF578;
}

void XlChartBinaryReader::reset(XlChartBinaryReader *this)
{
  *(_QWORD *)&_Q0 = -1;
  *((_QWORD *)&_Q0 + 1) = -1;
  *((_QWORD *)this + 193) = -1;
  *((_DWORD *)this + 388) = -1;
  *(_QWORD *)((char *)this + 1572) = -1;
  *(_QWORD *)((char *)this + 1580) = -1;
  *(_QWORD *)((char *)this + 1588) = -1;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_QWORD *)((char *)this + 1596) = -1;
  *(_QWORD *)((char *)this + 1604) = -1;
  *((_DWORD *)this + 403) = -1;
  *((_QWORD *)this + 209) = -1;
  *(_OWORD *)((char *)this + 1640) = _Q0;
  *(_OWORD *)((char *)this + 1656) = _Q0;
  *((_QWORD *)this + 211) = *((_QWORD *)this + 210);
  *((_QWORD *)this + 213) = -1;
  *((_DWORD *)this + 428) = -1;
  *((_QWORD *)this + 216) = -1;
  *((_QWORD *)this + 215) = -1;
  *((_QWORD *)this + 218) = *((_QWORD *)this + 217);
  *((_QWORD *)this + 220) = -1;
  *((_DWORD *)this + 442) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 241) = _Q0;
  *((_QWORD *)this + 242) = -4294901759;
  *((_DWORD *)this + 498) = -1;
  *((_WORD *)this + 998) = 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1824, *((_QWORD **)this + 229));
  *((_QWORD *)this + 228) = (char *)this + 1832;
  *((_QWORD *)this + 230) = 0;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 244) = *((_QWORD *)this + 243);
  *((_QWORD *)this + 247) = *((_QWORD *)this + 246);
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1848, *((_QWORD **)this + 232));
  *((_QWORD *)this + 231) = (char *)this + 1856;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 232) = 0;
  *((_WORD *)this + 936) = 0;
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1904, *((_QWORD **)this + 239));
  *((_QWORD *)this + 238) = (char *)this + 1912;
  *((_QWORD *)this + 240) = 0;
  *((_QWORD *)this + 239) = 0;
}

void sub_22A1AB8D0(void *a1, int a2)
{
  void *v2;
  unsigned int *v5;
  void *v6;

  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    EBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v6, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A1AB784);
}

void sub_22A1AB95C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;

  if (a2 == 2)
  {
    v3 = objc_begin_catch(exception_object);
    objc_msgSend(v2, "setStartErrorMessageFromException:", v3);
    objc_msgSend(v2, "setIsFileStructuredStorage:", +[TCMessageContext isFileStructuredStorage](TCMessageContext, "isFileStructuredStorage"));

    objc_end_catch();
    JUMPOUT(0x22A1AB784);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XlBinaryReader::start(XlBinaryReader *this, const void **a2, unsigned int a3)
{
  SsrwOORootStorage *v6;
  _DWORD *exception;

  if (*((_QWORD *)this + 4))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8007;
  }
  XlDocumentProperties::setDefault((XlBinaryReader *)((char *)this + 1016));
  XlDocumentInfo::setDefault((uint64_t)this + 824);
  XlDocumentProtection::setDefault((uint64_t)this + 848);
  XlFileProtection::setDefault((XlBinaryReader *)((char *)this + 864));
  XlWorksheetProperties::setDefault((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::setDefault((XlBinaryReader *)((char *)this + 600));
  XlSortInfo::setDefault((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::setDefault((uint64_t)this + 632);
  XlSubstreamProperties::setDefault((XlBinaryReader *)((char *)this + 1136));
  v6 = (SsrwOORootStorage *)operator new(0x58uLL);
  SsrwOORootStorage::SsrwOORootStorage(v6);
  *((_QWORD *)this + 3) = v6;
  SsrwOORootStorage::openInBuf(v6, a2, a3);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  return XlBinaryReader::start((SsrwOOStorage **)this);
}

void sub_22A1ABADC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlDocumentProperties::setDefault(XlDocumentProperties *this)
{
  uint64_t v2;
  _WORD *v3;

  *((_QWORD *)this + 1) = 0x104B0076CLL;
  *((_QWORD *)this + 2) = 0x10000;
  *((_DWORD *)this + 22) = 0;
  *((_WORD *)this + 14) = 1;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
  *((_QWORD *)this + 4) = 0;
  v3 = operator new[](2uLL);
  *((_QWORD *)this + 4) = v3;
  *v3 = 1;
  *((_DWORD *)this + 6) = -1;
  OcText::clearBuffer((OcText *)((char *)this + 40));
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 102) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
}

uint64_t XlDocumentInfo::setDefault(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0x607CC10D3;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t XlDocumentProtection::setDefault(uint64_t this)
{
  *(_DWORD *)(this + 12) = 0;
  *(_WORD *)(this + 8) = 0;
  *(_BYTE *)(this + 10) = 0;
  return this;
}

void XlFileProtection::setDefault(XlFileProtection *this)
{
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 2) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 16));
  *((_DWORD *)this + 8) = 0;
  OcText::clearBuffer((OcText *)((char *)this + 64));
  *((_DWORD *)this + 20) = 0;
}

double XlWorksheetProtection::setDefault(XlWorksheetProtection *this)
{
  double result;

  *((_WORD *)this + 13) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)((char *)this + 21) = 1;
  *((_BYTE *)this + 25) = 1;
  return result;
}

uint64_t XlCalculationProperties::setDefault(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0x3F50624DD2F1A9FCLL;
  *(_DWORD *)(this + 16) = 0;
  *(_WORD *)(this + 20) = 100;
  *(_BYTE *)(this + 22) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 28) = 1;
  return this;
}

uint64_t XlBinaryReader::start(SsrwOOStorage **this)
{
  int hasChild;
  SsrwOOStorage *v3;
  const unsigned __int16 *v4;
  int v5;
  SsrwOOStgStream *v6;
  uint64_t result;
  _DWORD *exception;
  int v9;

  hasChild = SsrwOOStorage::hasChild(this[4], L"Workbook");
  v3 = this[4];
  if (hasChild)
  {
    v4 = L"Workbook";
  }
  else
  {
    v5 = SsrwOOStorage::hasChild(v3, (const unsigned __int16 *)"W");
    v3 = this[4];
    if (!v5)
    {
      if ((SsrwOOStorage::hasChild(v3, L"Book") & 1) != 0)
      {
        exception = __cxa_allocate_exception(4uLL);
        v9 = 8003;
LABEL_11:
        *exception = v9;
      }
      if (this[164])
        goto LABEL_6;
LABEL_9:
      exception = __cxa_allocate_exception(4uLL);
      v9 = 8004;
      goto LABEL_11;
    }
    v4 = (const unsigned __int16 *)"W";
  }
  v6 = SsrwOOStorage::openStream(v3, v4);
  this[164] = (SsrwOOStorage *)v6;
  if (!v6)
    goto LABEL_9;
LABEL_6:
  result = (*(uint64_t (**)(SsrwOOStorage **))&(*this)[7].var1[32])(this);
  this[167] = (SsrwOOStorage *)result;
  *(_BYTE *)(result + 76) = 0;
  return result;
}

XlChartParserVisitor *XlChartBinaryReader::instantiateParser(XlChartBinaryReader *this, SsrwOOStream *a2)
{
  XlChartParserVisitor *v3;

  v3 = (XlChartParserVisitor *)operator new(0x68uLL);
  XlChartParserVisitor::XlChartParserVisitor(v3, a2);
  return v3;
}

void sub_22A1ABD4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartParserVisitor::XlChartParserVisitor(XlChartParserVisitor *this, SsrwOOStream *a2)
{
  _QWORD *v2;

  XlParserVisitor::XlParserVisitor(this, a2);
  *v2 = &off_24F3A9A58;
}

void XlParserVisitor::XlParserVisitor(XlParserVisitor *this, SsrwOOStream *a2)
{
  *(_QWORD *)this = &off_24F3AFF48;
  XlStringParser::XlStringParser((XlParserVisitor *)((char *)this + 8));
  *((_QWORD *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) = 1;
  *((_QWORD *)this + 10) = -1;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 93) = 0;
  if (!a2)
    ChLogFunction("NULL stream", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 61);
}

void sub_22A1ABE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  TSURectWithOriginAndSize(v1);
  _Unwind_Resume(a1);
}

void XlStringParser::XlStringParser(XlStringParser *this)
{
  *(_WORD *)this = 257;
  *((_BYTE *)this + 2) = 1;
}

BOOL `non-virtual thunk to'XlBinaryReader::readEncryptionInfo(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return XlBinaryReader::readEncryptionInfo(a1 - 8, a2, a3, a4);
}

BOOL XlBinaryReader::readEncryptionInfo(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  SsrwOOStream *v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  _DWORD v14[6];
  void *__src;
  XlHeader v16;

  v8 = *(SsrwOOStream **)(a1 + 1312);
  v9 = 20;
  SsrwOOStream::seekFromStart(v8, 20);
  v10 = (*((uint64_t (**)(SsrwOOStream *))v8->var0 + 10))(v8);
  if (v10 == 134)
  {
    v9 = 24;
    SsrwOOStream::seekFromStart(v8, 24);
    v10 = (*((uint64_t (**)(SsrwOOStream *))v8->var0 + 10))(v8);
  }
  v11 = v10;
  if (v10 == 47)
  {
    SsrwOOStream::seekFromStart(v8, v9);
    XlHeader::XlHeader(&v16);
    XlParserVisitor::getHeader(*(XlParserVisitor **)(a1 + 1336), &v16, 0);
    XlFilePass::XlFilePass((XlFilePass *)v14, &v16);
    (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 1336) + 72))(*(_QWORD *)(a1 + 1336), v14);
    *a3 = v14[2] - 2;
    v12 = (void *)operator new[]();
    *a2 = v12;
    memcpy(v12, __src, *a3);
    SsrwOOStream::seekFromStart(v8, 0);
    XlFilePass::~XlFilePass((XlFilePass *)v14);
  }
  else
  {
    *a4 = 8011;
    SsrwOOStream::seekFromStart(v8, 0);
  }
  return v11 == 47;
}

void sub_22A1ABFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XlFilePass::~XlFilePass((XlFilePass *)&a9);
  _Unwind_Resume(a1);
}

uint64_t SsrwOOStream::seekFromStart(SsrwOOStream *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))this->var0 + 2))(this, 0x7FFFFFFFLL, 0);
    v2 = (v2 - 0x7FFFFFFF);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return (*((uint64_t (**)(SsrwOOStream *, uint64_t, uint64_t))this->var0 + 2))(this, v2, v4);
}

void sub_22A1AC12C(void *a1, int a2)
{
  void *v2;
  unsigned int *v5;
  void *v6;

  if (a2 == 3)
  {
    v5 = (unsigned int *)__cxa_begin_catch(a1);
    EBConvertCsException(v5);
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v6, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A1AC0E8);
}

void sub_22A1AC1C4(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  void *v9;

  if (a2 == 2)
  {
    objc_begin_catch(exc_buf);
    objc_msgSend(v9, "pauseReading");

    objc_end_catch();
    JUMPOUT(0x22A1AC0E8);
  }

  JUMPOUT(0x22A1AC150);
}

uint64_t XlBinaryReader::startGlobals(XlBinaryReader *this)
{
  XlBof *v2;
  unsigned int v3;
  int16x8_t v4;
  _DWORD *exception;
  int v7;
  _DWORD *v8;
  XlHeader v9;

  if (!*((_QWORD *)this + 4) || !*((_QWORD *)this + 164) || !*((_QWORD *)this + 167))
  {
    exception = __cxa_allocate_exception(4uLL);
    v7 = 1003;
    goto LABEL_9;
  }
  XlHeader::XlHeader(&v9);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, 0);
  if (v9.var1 != 2057)
  {
    exception = __cxa_allocate_exception(4uLL);
    v7 = 8004;
LABEL_9:
    *exception = v7;
  }
  v2 = (XlBof *)operator new(0x28uLL);
  XlBof::XlBof(v2, &v9);
  (*(void (**)(_QWORD, XlBof *))(**((_QWORD **)this + 167) + 192))(*((_QWORD *)this + 167), v2);
  *((_BYTE *)this + 1320) = XlBof::verifyExcelVersion(v2);
  *((_DWORD *)this + 208) = *((_DWORD *)v2 + 8);
  v3 = *((_DWORD *)v2 + 5);
  *((_DWORD *)this + 209) = *((_DWORD *)v2 + 4);
  *((_BYTE *)this + 840) = v3 & 1;
  v4.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v3) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)this + 841) = vmovn_s16(v4).u32[0];
  *((_BYTE *)this + 845) = (v3 & 0x20) != 0;
  *((_BYTE *)this + 846) = BYTE1(v3) & 1;
  *((_BYTE *)this + 847) = (v3 & 0x40) != 0;
  (*(void (**)(XlBinaryReader *))(*(_QWORD *)this + 688))(this);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), 0, 0);
  if (*((_BYTE *)this + 1320) != 9)
  {
    v8 = __cxa_allocate_exception(4uLL);
    *v8 = 8003;
  }
  return (*(uint64_t (**)(XlBof *))(*(_QWORD *)v2 + 8))(v2);
}

void sub_22A1AC3D4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22A1AC33CLL);
}

void sub_22A1AC3E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlHeader::XlHeader(XlHeader *this)
{
  this->var0 = 0;
  this->var1 = 0;
  this->var2 = 0;
}

uint64_t XlParserVisitor::getHeader(XlParserVisitor *this, XlHeader *a2, unsigned __int8 a3)
{
  int v6;
  unsigned int v7;
  uint64_t result;

  *((_DWORD *)this + 21) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 22) = 4;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 20) = result + v7;
  *((_BYTE *)this + 100) = v6 == 2129;
  if (v6 == 2132)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    *((_DWORD *)this + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    *((_DWORD *)this + 24) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (*((_DWORD *)this + 22) + *((_DWORD *)this + 21)), 0);
LABEL_6:
    a2->var0 = v7;
    a2->var1 = v6;
    a2->var2 = a3;
    return result;
  }
  if (v6 == 2129)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
    LOWORD(v6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
    v7 = result;
    *((_DWORD *)this + 22) += 8;
    goto LABEL_6;
  }
  if (v6)
    goto LABEL_6;
  a2->var1 = 0;
  a2->var0 = 0;
  return result;
}

void XlBof::XlBof(XlBof *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB860;
  *(_QWORD *)(v2 + 16) = 6;
  *(_WORD *)(v2 + 24) = 1536;
  *(_QWORD *)(v2 + 28) = 0x7CC0DBB00000005;
}

void XlRecord::XlRecord(XlRecord *this, XlHeader *a2)
{
  *(_QWORD *)this = off_24F3AD590;
  XlHeader::XlHeader((XlHeader *)this + 1, a2);
}

void XlHeader::XlHeader(XlHeader *this, const XlHeader *a2)
{
  *this = *a2;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBof *a2)
{
  int v4;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  XlBof::verifyExcelVersion(a2);
  *((_WORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (*((_BYTE *)a2 + 14))
  {
    *((_WORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (*((unsigned __int8 *)a2 + 14) > 4u)
    {
      *((_WORD *)a2 + 17) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      if (*((_BYTE *)a2 + 14) != 8)
      {
        *((_DWORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
        v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
        goto LABEL_8;
      }
      v4 = 0;
    }
    else
    {
      v4 = 0;
      *((_WORD *)a2 + 17) = 0;
    }
  }
  else
  {
    v4 = 0;
    *((_DWORD *)a2 + 8) = 0;
  }
  *((_DWORD *)a2 + 5) = 0;
LABEL_8:
  *((_DWORD *)a2 + 4) = v4;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlBof::verifyExcelVersion(XlBof *this)
{
  int v1;
  uint64_t v2;

  *((_BYTE *)this + 14) = 0;
  v1 = (unsigned __int16)(((unsigned __int16)(*((_WORD *)this + 6) - 9) >> 9) | ((*((_WORD *)this + 6) - 9) << 7));
  if (v1 == 4)
  {
    v2 = *((unsigned int *)this + 2);
    if ((_DWORD)v2 == 8)
      goto LABEL_12;
    if ((_DWORD)v2 == 16)
    {
      v2 = 9;
      goto LABEL_12;
    }
    return 0;
  }
  if (v1 == 2)
  {
    if (*((_DWORD *)this + 2) != 6)
    {
      v2 = 4;
      goto LABEL_12;
    }
    return 0;
  }
  v2 = 0;
  if (v1 == 1)
  {
    if (*((_DWORD *)this + 2) == 6)
    {
      v2 = 2;
LABEL_12:
      *((_BYTE *)this + 14) = v2;
      return v2;
    }
    return 0;
  }
  return v2;
}

uint64_t XlParserVisitor::endRead(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  if (*(_BYTE *)(result + 100))
  {
    v3 = *(unsigned int *)(result + 80);
    if ((v3 & 0x80000000) != 0)
      goto LABEL_6;
  }
  else
  {
    v3 = (*(_DWORD *)(a2 + 8) + *(_DWORD *)(result + 72));
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), v3, 0);
LABEL_6:
  *(_DWORD *)(v2 + 72) = 0;
  return result;
}

void sub_22A1AC81C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 72) = 0;
  __cxa_rethrow();
}

void sub_22A1AC82C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::scanGlobals(XlChartBinaryReader *this)
{
  uint64_t result;
  signed __int16 i;
  XlBof *v4;
  _DWORD v5[6];
  XlHeader v6;

  XlBinaryReader::scanGlobals(this);
  XlHeader::XlHeader(&v6);
  v6.var1 = 10;
  v6.var2 = *((_BYTE *)this + 1320);
  result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v6);
  for (i = v6.var1; v6.var1 != 10; i = v6.var1)
  {
    if (i <= 2056)
    {
      if (i == 140)
      {
        XlCountry::XlCountry((XlCountry *)v5, &v6);
        XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
        (*(void (**)(_QWORD, _DWORD *))(**((_QWORD **)this + 167) + 224))(*((_QWORD *)this + 167), v5);
        *((_DWORD *)this + 257) = v5[4];
      }
      else if (i == 146)
      {
        *((_DWORD *)this + 252) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
      }
    }
    else
    {
      switch(i)
      {
        case 2057:
          v4 = (XlBof *)operator new(0x28uLL);
          XlBof::XlBof(v4, &v6);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, XlBof *))(**((_QWORD **)this + 167) + 192))(*((_QWORD *)this + 167), v4);
          if (*((_DWORD *)v4 + 7) != 0x8000)
            return (*(uint64_t (**)(XlBof *))(*(_QWORD *)v4 + 8))(v4);
          *((_BYTE *)this + 1344) = 1;
          (*(void (**)(XlBof *))(*(_QWORD *)v4 + 8))(v4);
          break;
        case 4188:
          if (!*((_BYTE *)this + 1344))
            *((_DWORD *)this + 253) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
          break;
        case 4098:
          return result;
      }
    }
    result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v6);
  }
  return result;
}

void sub_22A1AC9D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void XlBinaryReader::scanGlobals(XlBinaryReader *this)
{
  signed __int16 var1;
  _QWORD *v3;
  XlBoundSheet *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  __int16 *v11;
  uint64_t v12;
  XlStringExtractor *v13;
  XlExtSst *v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  uint64_t v20;
  int RecordDataOffset;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  int16x8_t v31;
  unsigned int v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  int v49;
  char *v50;
  int v51;
  uint64_t v52;
  int v53;
  __int16 v54[4];
  unsigned __int8 *v55;
  XlHeader v56;

  XlHeader::XlHeader(&v56);
  v56.var1 = 2057;
  v56.var2 = *((_BYTE *)this + 1320);
  XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v56);
  var1 = v56.var1;
  while (v56.var1 != 10)
  {
    if (var1 > 234)
    {
      if (var1 > 535)
      {
        if (var1 > 2056)
        {
          if (var1 > 2197)
          {
            if (var1 == 2198)
            {
              XlTheme::XlTheme((XlTheme *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 1600))(*((_QWORD *)this + 167), &v52);
              v33 = (int)v55;
              if ((_DWORD)v55)
              {
                v34 = (unsigned __int8 *)XlChartRichTextPropsStream::giveXmlStream((XlChartRichTextPropsStream *)&v52);
                XlDocumentProperties::takeThemeData((uint64_t)this + 1016, v34, v33);
              }
              XlTheme::~XlTheme((XlTheme *)&v52);
LABEL_141:
              if (v56.var1 == 10)
                return;
              goto LABEL_142;
            }
            if (var1 == 4188)
            {
              *((_DWORD *)this + 253) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_141;
            }
          }
          else
          {
            if (var1 == 2057)
            {
              v11 = (__int16 *)operator new(0x28uLL);
              XlBof::XlBof((XlBof *)v11, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              v31 = (int16x8_t)((__n128 (*)(_QWORD, __int16 *))*(_QWORD *)(**((_QWORD **)this + 167) + 192))(*((_QWORD *)this + 167), v11);
              *((_DWORD *)this + 208) = *((_DWORD *)v11 + 8);
              *((_DWORD *)this + 209) = *((_DWORD *)v11 + 4);
              v32 = *((_DWORD *)v11 + 5);
              *((_BYTE *)this + 840) = v32 & 1;
              v31.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v32) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
              *(_DWORD *)((char *)this + 841) = vmovn_s16(v31).u32[0];
              *((_BYTE *)this + 845) = (v32 & 0x20) != 0;
              *((_BYTE *)this + 846) = BYTE1(v32) & 1;
              *((_BYTE *)this + 847) = (v32 & 0x40) != 0;
              goto LABEL_113;
            }
            if (var1 == 2150)
            {
              if ((*((_DWORD *)this + 51) & 0x80000000) != 0)
                *((_DWORD *)this + 51) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_141;
            }
          }
        }
        else if (var1 > 1053)
        {
          if (var1 == 1054)
          {
LABEL_76:
            *((_DWORD *)this + 42) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            goto LABEL_141;
          }
          if (var1 == 1091)
          {
LABEL_57:
            v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            v16 = v15;
            v18 = (char *)*((_QWORD *)this + 41);
            v17 = *((_QWORD *)this + 42);
            if ((unint64_t)v18 >= v17)
            {
              v22 = (char *)*((_QWORD *)this + 40);
              v23 = v18 - v22;
              v24 = (unint64_t)(v18 - v22) >> 2;
              v25 = (v17 - (unint64_t)v22) >> 2;
              if (2 * (int)v25 <= (v24 + 1))
                v26 = v24 + 1;
              else
                v26 = 2 * v25;
              if (v25 >= 0x7FFFFFFF)
                v27 = 0xFFFFFFFFLL;
              else
                v27 = v26;
              if ((_DWORD)v27)
              {
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 336, v27);
                v30 = v29;
                v22 = (char *)*((_QWORD *)this + 40);
                v18 = (char *)*((_QWORD *)this + 41);
              }
              else
              {
                v28 = 0;
                v30 = 0;
              }
              v48 = &v28[v23 & 0x3FFFFFFFCLL];
              *(_DWORD *)v48 = v16;
              v19 = v48 + 4;
              while (v18 != v22)
              {
                v49 = *((_DWORD *)v18 - 1);
                v18 -= 4;
                *((_DWORD *)v48 - 1) = v49;
                v48 -= 4;
              }
              *((_QWORD *)this + 40) = v48;
              *((_QWORD *)this + 41) = v19;
              *((_QWORD *)this + 42) = &v28[4 * v30];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_DWORD *)v18 = v15;
              v19 = v18 + 4;
            }
            *((_QWORD *)this + 41) = v19;
            goto LABEL_141;
          }
        }
        else
        {
          if (var1 == 536)
          {
LABEL_65:
            *((_DWORD *)this + 46) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            goto LABEL_141;
          }
          if (var1 == 659)
          {
            *((_DWORD *)this + 47) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            goto LABEL_141;
          }
        }
      }
      else
      {
        if (var1 > 429)
        {
          switch(var1)
          {
            case 439:
              XlRefreshAll::XlRefreshAll((XlRefreshAll *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 960))(*((_QWORD *)this + 167), &v52);
              *((_BYTE *)this + 1035) = v54[0];
              goto LABEL_141;
            case 440:
            case 441:
            case 443:
            case 445:
            case 446:
            case 447:
              goto LABEL_142;
            case 442:
              v11 = (__int16 *)operator new(0x18uLL);
              XlCodeName::XlCodeName((XlCodeName *)v11, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, __int16 *))(**((_QWORD **)this + 167) + 1472))(*((_QWORD *)this + 167), v11);
              v37 = *((_QWORD *)v11 + 2);
              if (v37)
                OcText::operator=((uint64_t)this + 1056, v37 + 8);
              goto LABEL_113;
            case 444:
              XlProt4RevPass::XlProt4RevPass((XlProt4RevPass *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 912))(*((_QWORD *)this + 167), &v52);
              *((_WORD *)this + 431) = v54[0];
              goto LABEL_141;
            case 448:
              *((_BYTE *)this + 1032) = 1;
              goto LABEL_141;
            case 449:
              XlRecalcID::XlRecalcID((XlRecalcID *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 1432))(*((_QWORD *)this + 167), &v52);
              *((_DWORD *)this + 260) = *(_DWORD *)v54;
              goto LABEL_141;
            default:
              if (var1 == 430)
              {
                if ((*((_DWORD *)this + 43) & 0x80000000) != 0)
                {
                  v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
                  *((_DWORD *)this + 43) = v38;
                  *((_DWORD *)this + 45) = v38;
                }
              }
              else
              {
                if (var1 != 431)
                  goto LABEL_142;
                XlProt4Rev::XlProt4Rev((XlProt4Rev *)&v52, &v56);
                XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 904))(*((_QWORD *)this + 167), &v52);
                *((_BYTE *)this + 858) = v54[0];
              }
              break;
          }
          goto LABEL_141;
        }
        if (var1 <= 316)
        {
          if (var1 == 235)
          {
            if ((*((_DWORD *)this + 50) & 0x80000000) != 0)
              *((_DWORD *)this + 50) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            goto LABEL_141;
          }
          if (var1 == 252)
          {
            if (*((_QWORD *)this + 19))
              ChLogFunction("string table not NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 3782);
            v13 = (XlStringExtractor *)operator new(0xA8uLL);
            XlStringExtractor::XlStringExtractor(v13);
            *((_QWORD *)this + 19) = v13;
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            v11 = (__int16 *)operator new(0x40uLL);
            XlSst::XlSst((XlSst *)v11, &v56);
            (*(void (**)(_QWORD, __int16 *))(**((_QWORD **)this + 167) + 400))(*((_QWORD *)this + 167), v11);
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v56, *((_BYTE *)this + 1320));
            v14 = (XlExtSst *)operator new(0x20uLL);
            XlExtSst::XlExtSst(v14, &v56);
            if (v56.var1 == 255)
              (*(void (**)(_QWORD, XlExtSst *))(**((_QWORD **)this + 167) + 264))(*((_QWORD *)this + 167), v14);
            XlStringExtractor::setStringExtractor(*((XlStringExtractor **)this + 19), *((SsrwOOStream **)this + 164), (XlSst *)v11, v14);
            (*(void (**)(XlExtSst *))(*(_QWORD *)v14 + 8))(v14);
            goto LABEL_113;
          }
        }
        else
        {
          switch(var1)
          {
            case 317:
              v11 = (__int16 *)operator new(0x20uLL);
              XlTabId::XlTabId((XlTabId *)v11, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, __int16 *))(**((_QWORD **)this + 167) + 1272))(*((_QWORD *)this + 167), v11);
              XlDocumentProperties::takeTabIdTable((uint64_t)this + 1016, *((__int16 **)v11 + 3), v11[9]);
              *((_BYTE *)v11 + 16) = 0;
              goto LABEL_113;
            case 352:
              XlUsesElfs::XlUsesElfs((XlUsesElfs *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 1344))(*((_QWORD *)this + 167), &v52);
              *((_BYTE *)this + 1033) = v54[0];
              goto LABEL_141;
            case 425:
              *((_DWORD *)this + 54) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_141;
          }
        }
      }
    }
    else
    {
      if (var1 > 91)
      {
        if (var1 <= 183)
        {
          switch(var1)
          {
            case 133:
              if (!*((_QWORD *)this + 20))
              {
                v3 = operator new(0x28uLL);
                v3[3] = 0;
                v3[4] = 0;
                v3[1] = 0;
                v3[2] = 0;
                *v3 = &off_24F3AFD68;
                *((_QWORD *)this + 20) = v3;
              }
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              while (v56.var1 == 133)
              {
                v4 = (XlBoundSheet *)operator new(0x28uLL);
                XlBoundSheet::XlBoundSheet(v4, &v56);
                *((_QWORD *)this + 163) = v4;
                (*(void (**)(_QWORD, XlBoundSheet *))(**((_QWORD **)this + 167) + 208))(*((_QWORD *)this + 167), v4);
                v5 = *((_QWORD *)this + 20);
                v52 = *((_QWORD *)this + 163);
                CsSimpleHeapVector<XlRecord>::pushBack((void **)(v5 + 8), &v52);
                if (v52)
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
                *((_QWORD *)this + 163) = 0;
                XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v56, *((_BYTE *)this + 1320));
              }
              v20 = *((_QWORD *)this + 164);
              RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 16))(v20, -RecordDataOffset, 1);
              v56.var1 = 133;
              goto LABEL_142;
            case 134:
              *((_BYTE *)this + 872) = 1;
              goto LABEL_141;
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
              goto LABEL_142;
            case 140:
              XlCountry::XlCountry((XlCountry *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 224))(*((_QWORD *)this + 167), &v52);
              *((_DWORD *)this + 257) = *(_DWORD *)v54;
              goto LABEL_141;
            case 141:
              XlHideObj::XlHideObj((XlHideObj *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 736))(*((_QWORD *)this + 167), &v52);
              *((_DWORD *)this + 276) = *(_DWORD *)v54;
              goto LABEL_141;
            default:
              if (var1 == 92)
              {
                v11 = (__int16 *)operator new(0x18uLL);
                XlWriteAccess::XlWriteAccess((XlWriteAccess *)v11, &v56);
                XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                (*(void (**)(_QWORD, __int16 *))(**((_QWORD **)this + 167) + 1376))(*((_QWORD *)this + 167), v11);
                v36 = *((_QWORD *)v11 + 2);
                if (v36)
                  OcText::operator=((uint64_t)this + 928, v36 + 8);
                goto LABEL_113;
              }
              if (var1 != 146)
                goto LABEL_142;
              *((_DWORD *)this + 252) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
          }
        }
        else
        {
          switch(var1)
          {
            case 211:
              *((_BYTE *)this + 1039) = 1;
              goto LABEL_141;
            case 212:
            case 214:
            case 215:
            case 216:
            case 217:
            case 219:
            case 220:
            case 221:
            case 223:
              goto LABEL_142;
            case 213:
              goto LABEL_86;
            case 218:
              XlBookBool::XlBookBool((XlBookBool *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 480))(*((_QWORD *)this + 167), &v52);
              *((_BYTE *)this + 1036) = v54[0];
              *(_WORD *)((char *)this + 1037) = *(__int16 *)((char *)v54 + 1);
              goto LABEL_141;
            case 222:
              XlOleSize::XlOleSize((XlOleSize *)&v52, &v56);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 840))(*((_QWORD *)this + 167), &v52);
              XlDocumentProperties::setOleSize((uint64_t)this + 1016, (uint64_t)&v52);
              XlOleSize::~XlOleSize((XlOleSize *)&v52);
LABEL_86:
              if ((*((_DWORD *)this + 49) & 0x80000000) != 0)
                *((_DWORD *)this + 49) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
            case 224:
              goto LABEL_57;
            case 225:
              *((_DWORD *)this + 52) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_141;
            default:
              if (var1 != 184)
                goto LABEL_142;
              *((_DWORD *)this + 48) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
          }
        }
        goto LABEL_141;
      }
      if (var1 <= 33)
      {
        switch(var1)
        {
          case 14:
            XlPrecision::XlPrecision((XlPrecision *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 872))(*((_QWORD *)this + 167), &v52);
            *((_BYTE *)this + 1034) = v54[0];
            goto LABEL_141;
          case 15:
          case 16:
          case 17:
          case 20:
          case 21:
          case 22:
          case 23:
            goto LABEL_142;
          case 18:
            XlProtect::XlProtect((XlProtect *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 920))(*((_QWORD *)this + 167), &v52);
            *((_BYTE *)this + 856) = v54[0];
            goto LABEL_141;
          case 19:
            XlPassword::XlPassword((XlPassword *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 856))(*((_QWORD *)this + 167), &v52);
            *((_WORD *)this + 430) = v54[0];
            goto LABEL_141;
          case 24:
            goto LABEL_65;
          case 25:
            XlWindowProtect::XlWindowProtect((XlWindowProtect *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 1368))(*((_QWORD *)this + 167), &v52);
            *((_BYTE *)this + 857) = v54[0];
            goto LABEL_141;
          default:
            if (var1 == 30)
              goto LABEL_76;
            goto LABEL_142;
        }
      }
      if (var1 > 60)
      {
        switch(var1)
        {
          case '=':
            if ((*((_DWORD *)this + 53) & 0x80000000) != 0)
              *((_DWORD *)this + 53) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            goto LABEL_141;
          case 'B':
            XlCodePage::XlCodePage((XlCodePage *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 32))(*((_QWORD *)this + 167), &v52);
            XlDocumentProperties::setCodePage((uint64_t)this + 1016, v54[0]);
            goto LABEL_141;
          case '[':
            v11 = (__int16 *)operator new(0x20uLL);
            XlFileSharing::XlFileSharing((XlFileSharing *)v11, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, __int16 *))(**((_QWORD **)this + 167) + 656))(*((_QWORD *)this + 167), v11);
            *((_BYTE *)this + 873) = *((_BYTE *)v11 + 16);
            *((_WORD *)this + 437) = v11[9];
            v12 = *((_QWORD *)v11 + 3);
            if (v12)
              OcText::operator=((uint64_t)this + 880, v12 + 8);
LABEL_113:
            (*(void (**)(__int16 *))(*(_QWORD *)v11 + 8))(v11);
            goto LABEL_141;
        }
      }
      else
      {
        switch(var1)
        {
          case '"':
            Xl1904::Xl1904((Xl1904 *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 16))(*((_QWORD *)this + 167), &v52);
            if (LOBYTE(v54[0]))
              v35 = 1904;
            else
              v35 = 1900;
            XlDocumentProperties::setDateBase((uint64_t)this + 1016, v35);
            goto LABEL_141;
          case '/':
            XlFilePass::XlFilePass((XlFilePass *)&v52, &v56);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 167) + 72))(*((_QWORD *)this + 167), &v52);
            *((_WORD *)this + 488) = v54[0];
            XlFileProtection::setEncryptionInfo((XlBinaryReader *)((char *)this + 864), v55, v53 - 2);
            XlFilePass::~XlFilePass((XlFilePass *)&v52);
            goto LABEL_141;
          case '1':
            v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            v7 = v6;
            v9 = (char *)*((_QWORD *)this + 44);
            v8 = *((_QWORD *)this + 45);
            if ((unint64_t)v9 >= v8)
            {
              v39 = (char *)*((_QWORD *)this + 43);
              v40 = v9 - v39;
              v41 = (unint64_t)(v9 - v39) >> 2;
              v42 = (v8 - (unint64_t)v39) >> 2;
              if (2 * (int)v42 <= (v41 + 1))
                v43 = v41 + 1;
              else
                v43 = 2 * v42;
              if (v42 >= 0x7FFFFFFF)
                v44 = 0xFFFFFFFFLL;
              else
                v44 = v43;
              if ((_DWORD)v44)
              {
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 360, v44);
                v47 = v46;
                v39 = (char *)*((_QWORD *)this + 43);
                v9 = (char *)*((_QWORD *)this + 44);
              }
              else
              {
                v45 = 0;
                v47 = 0;
              }
              v50 = &v45[v40 & 0x3FFFFFFFCLL];
              *(_DWORD *)v50 = v7;
              v10 = v50 + 4;
              while (v9 != v39)
              {
                v51 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *((_QWORD *)this + 43) = v50;
              *((_QWORD *)this + 44) = v10;
              *((_QWORD *)this + 45) = &v45[4 * v47];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)v9 = v6;
              v10 = v9 + 4;
            }
            *((_QWORD *)this + 44) = v10;
            goto LABEL_141;
        }
      }
    }
LABEL_142:
    XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v56);
    var1 = v56.var1;
  }
}

void sub_22A1AD730(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlParserVisitor::getNextUniqueHeader(XlParserVisitor *this, XlHeader *a2)
{
  int var1;
  void (*v5)(void);

  var1 = (unsigned __int16)a2->var1;
  do
  {
    XlParserVisitor::getHeader(this, a2, a2->var2);
    if (*((_BYTE *)this + 100))
    {
      if ((*((_DWORD *)this + 20) & 0x80000000) != 0)
        continue;
      v5 = *(void (**)(void))(**((_QWORD **)this + 2) + 16);
    }
    else
    {
      v5 = *(void (**)(void))(**((_QWORD **)this + 2) + 16);
    }
    v5();
  }
  while ((unsigned __int16)a2->var1 == var1);
  if (*((_BYTE *)this + 100))
    return XlParserVisitor::seekCurrentRecord((uint64_t)this);
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), -4 - a2->var0, 1);
}

void XlWriteAccess::XlWriteAccess(XlWriteAccess *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AECF0;
  v2[2] = 0;
}

uint64_t XlParserVisitor::skipHeader(XlParserVisitor *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned __int8 *)this + 100);
  v3 = *((_QWORD *)this + 2);
  if (v2)
    v4 = *((unsigned int *)this + 22);
  else
    v4 = 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4, 1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlWriteAccess *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  XlString *v10;

  v4 = *((_DWORD *)a2 + 2)
     + (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (!v5)
    goto LABEL_11;
  v6 = v5;
  if (*((unsigned __int8 *)a2 + 14) < 9u)
    v7 = 0;
  else
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v8 = XlStringParser::estimateSize((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v6, v7);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + v8 <= v4
    || *((_DWORD *)a2 + 2) == 8228)
  {
    v10 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v10);
    *((_QWORD *)this + 4) = v10;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v6, v7, v4, v10);
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
LABEL_11:
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v4, 0);
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  ChLogFunction("Failure to parse XlWriteAccess", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 7054);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1ADB2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlStringParser::estimateSize(XlStringParser *this, SsrwOOStream *a2, int a3, char a4)
{
  uint64_t v7;
  int v8;

  v7 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  if ((a4 & 8) == 0)
  {
    v8 = 0;
    if ((a4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = (4 * (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2)) | 2;
  if ((a4 & 4) != 0)
LABEL_5:
    v8 += (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 13))(a2) + 4;
LABEL_6:
  (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))a2->var0 + 2))(a2, v7, 0);
  return (v8 + (a3 << (a4 & 1)));
}

void XlString::XlString(XlString *this)
{
  *(_QWORD *)this = &off_24F3AE138;
  OcText::OcText((OcText *)((char *)this + 8));
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 22) = -1;
  *((_QWORD *)this + 12) = 0;
}

uint64_t XlStringParser::parse(XlStringParser *this, SsrwOOStream *a2, unsigned int a3, char a4, int a5, XlString *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char *v38;
  uint64_t v39;
  char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  _WORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int i;
  _WORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  char *v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  char *v93;
  _WORD *v94;
  unsigned int v95;
  void **var0;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  void **v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  char *v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  char *v124;
  int v125;
  int v126;
  __int16 *v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  int v135;
  _DWORD *exception;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  size_t v142;
  char v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v149;
  char *v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;

  XlString::reset(a6);
  v11 = a5 - (*((unsigned int (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  if ((a4 & 8) != 0)
  {
    v12 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
    v11 = (v11 - 2);
    v13 = (4 * v12) | 2;
    if ((a4 & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if ((a4 & 4) != 0)
    {
LABEL_3:
      v138 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 13))(a2);
      v11 = (v11 - 4);
      v13 = v13 + v138 + 4;
      goto LABEL_6;
    }
  }
  v138 = 0;
LABEL_6:
  v140 = v12;
  v155 = 0;
  if (*(_BYTE *)this)
  {
    v14 = v13;
    if ((a4 & 1) != 0)
    {
      v15 = 2 * a3 + 2;
      *((_DWORD *)a6 + 4) = 1;
      v17 = (char *)operator new[](v15);
      *(_WORD *)&v17[2 * a3] = 0;
      v16 = v17;
    }
    else
    {
      v15 = a3 + 1;
      *((_DWORD *)a6 + 4) = 2;
      v16 = (char *)operator new[](a3 + 1);
      v17 = 0;
      v16[a3] = 0;
    }
    OcText::takeBuffer((OcText *)((char *)a6 + 8), v16, v15);
    v13 = v14;
    if (a3)
      goto LABEL_13;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    if (a3)
    {
LABEL_13:
      LODWORD(v19) = 0;
      v142 = 2 * a3 + 2;
      v139 = (int)a3;
      v141 = a3;
      v143 = a4;
      v18 = a3;
      v144 = a3;
      while (1)
      {
        if ((a4 & 1) != 0)
        {
          if (v11 >= 2 * v18)
          {
            v24 = 2 * v18;
            if (*(_BYTE *)this)
            {
              v154 = v18;
              (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v154, &v16[2 * v19]);
              v25 = v18;
              v20 = v18 >= v154;
              v26 = v18 - v154;
              if (v26 != 0 && v20)
              {
                (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, 2 * v26, 1);
                LODWORD(v11) = v11 - 2 * v26;
                v141 -= v26;
              }
              v18 = v25;
              a3 = v144;
            }
            else
            {
              (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, 2 * v18, 1);
            }
            v13 = (v13 + v24);
            v11 = (v11 - v24);
            LODWORD(v19) = v19 + v18;
            v17 = v16;
            v18 = 0;
            goto LABEL_60;
          }
          if (*(_BYTE *)this)
          {
            if ((int)v11 >= 0)
              v22 = v11;
            else
              v22 = v11 + 1;
            v154 = v22 >> 1;
            (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v154, &v16[2 * v19]);
          }
          else
          {
            (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v11, 1);
          }
          v27 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v28 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
          if (v27 != 60)
            goto LABEL_173;
          v29 = v28;
          LODWORD(v19) = v19 + (v11 >> 1);
          v18 -= v11 >> 1;
          a4 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
          v30 = v13 + v11;
          v11 = (v29 - 1);
          v13 = (v30 + 5);
          v17 = v16;
        }
        else
        {
          v151 = v18;
          v20 = v11 >= v18;
          v21 = v11 - v18;
          if (v20)
          {
            v23 = v13;
            if (*(_BYTE *)this)
            {
              if ((v143 & 1) != 0)
              {
                if (v151)
                {
                  v43 = v151;
                  v44 = v19;
                  do
                  {
                    *(_WORD *)&v17[2 * v44++] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
                    --v43;
                  }
                  while (v43);
                }
              }
              else
              {
                v155 = v151;
                (*((void (**)(SsrwOOStream *, char *, unsigned int *))a2->var0 + 7))(a2, &v16[v19], &v155);
              }
            }
            else
            {
              (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, v151, 1);
            }
            v13 = v23 + v151;
            LODWORD(v19) = v19 + v151;
            v11 = v21;
            v18 = 0;
          }
          else
          {
            v145 = v13;
            if (*(_BYTE *)this)
            {
              if ((v143 & 1) != 0)
              {
                if ((_DWORD)v11)
                {
                  v31 = v11;
                  v32 = v19;
                  do
                  {
                    *(_WORD *)&v17[2 * v32++] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
                    --v31;
                  }
                  while (v31);
                }
              }
              else
              {
                v155 = v11;
                (*((void (**)(SsrwOOStream *, char *, unsigned int *))a2->var0 + 7))(a2, &v16[v19], &v155);
              }
            }
            else
            {
              (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v11, 1);
            }
            v33 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            v34 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
            if (v33 != 60)
              goto LABEL_173;
            v35 = v34;
            v19 = (v11 + v19);
            v36 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
            a4 = v36;
            if (*(_BYTE *)this)
            {
              if ((v36 & 1) != 0 && (v143 & 1) == 0)
              {
                v38 = (char *)operator new[](v142);
                v17 = v38;
                *(_WORD *)&v38[2 * v139] = 0;
                if ((_DWORD)v19)
                {
                  v39 = v19;
                  v40 = v38;
                  do
                  {
                    v41 = *v16++;
                    *(_WORD *)v40 = v41;
                    v40 += 2;
                    --v39;
                  }
                  while (v39);
                }
                v143 = 1;
                *((_DWORD *)a6 + 4) = 1;
                OcText::takeBuffer((OcText *)((char *)a6 + 8), v38, v142);
                v16 = v17;
              }
            }
            v42 = v145 + v11;
            v18 = v151 - v11;
            v11 = (v35 - 1);
            v13 = (v42 + 5);
          }
        }
        a3 = v144;
LABEL_60:
        if (v19 >= a3)
          goto LABEL_61;
      }
    }
  }
  v18 = 0;
  v141 = 0;
LABEL_61:
  v152 = v18;
  v45 = v140;
  *((_DWORD *)a6 + 6) = v141;
  if (v140)
  {
    XlString::clearRichText(a6);
    v46 = 0;
    while (v11 < 4 * v45)
    {
      v47 = v46 + (v11 >> 2);
      if ((unsigned __int16)v46 < (unsigned __int16)(v46 + (v11 >> 2)))
      {
        v146 = v13;
        do
        {
          v48 = operator new[](4uLL);
          *v48 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v48[1] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v50 = (_QWORD *)*((_QWORD *)a6 + 8);
          v49 = *((_QWORD *)a6 + 9);
          if ((unint64_t)v50 >= v49)
          {
            v52 = *((_QWORD *)a6 + 7);
            v53 = (unint64_t)v50 - v52;
            v54 = (v49 - v52) >> 3;
            v55 = 2 * v54;
            if (2 * (int)v54 <= (v53 >> 3) + 1)
              v55 = (v53 >> 3) + 1;
            if (v54 >= 0x7FFFFFFF)
              v56 = 0xFFFFFFFFLL;
            else
              v56 = v55;
            if ((_DWORD)v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a6 + 72, v56);
              v59 = v58;
            }
            else
            {
              v57 = 0;
              v59 = 0;
            }
            v60 = &v57[v53 & 0x7FFFFFFF8];
            *(_QWORD *)v60 = v48;
            v51 = v60 + 8;
            v62 = (char *)*((_QWORD *)a6 + 7);
            v61 = (char *)*((_QWORD *)a6 + 8);
            if (v61 != v62)
            {
              do
              {
                v63 = *((_QWORD *)v61 - 1);
                v61 -= 8;
                *((_QWORD *)v60 - 1) = v63;
                v60 -= 8;
              }
              while (v61 != v62);
              v61 = (char *)*((_QWORD *)a6 + 7);
            }
            *((_QWORD *)a6 + 7) = v60;
            *((_QWORD *)a6 + 8) = v51;
            *((_QWORD *)a6 + 9) = &v57[8 * v59];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *v50 = v48;
            v51 = v50 + 1;
          }
          *((_QWORD *)a6 + 8) = v51;
          ++v46;
        }
        while ((unsigned __int16)v46 < (unsigned __int16)v47);
        v46 = v47;
        LODWORD(v13) = v146;
      }
      v64 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v65 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      if (v64 != 60)
        goto LABEL_173;
      v66 = v65;
      v67 = (unsigned __int16)(v11 >> 2);
      v13 = (v13 + 4);
      LODWORD(v11) = v65;
      v45 -= v67;
      if (!v45)
        goto LABEL_105;
    }
    v149 = 4 * v45;
    for (i = v140; i > (unsigned __int16)v46; ++v46)
    {
      v69 = operator new[](4uLL);
      *v69 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v69[1] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v71 = (_QWORD *)*((_QWORD *)a6 + 8);
      v70 = *((_QWORD *)a6 + 9);
      if ((unint64_t)v71 >= v70)
      {
        v73 = v13;
        v74 = *((_QWORD *)a6 + 7);
        v75 = (unint64_t)v71 - v74;
        v76 = ((unint64_t)v71 - v74) >> 3;
        v77 = (v70 - v74) >> 3;
        v78 = 2 * v77;
        if (2 * (int)v77 <= (v76 + 1))
          v78 = v76 + 1;
        if (v77 >= 0x7FFFFFFF)
          v79 = 0xFFFFFFFFLL;
        else
          v79 = v78;
        if ((_DWORD)v79)
        {
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a6 + 72, v79);
          v82 = v81;
        }
        else
        {
          v80 = 0;
          v82 = 0;
        }
        v83 = &v80[v75 & 0x7FFFFFFF8];
        *(_QWORD *)v83 = v69;
        v72 = v83 + 8;
        v85 = (char *)*((_QWORD *)a6 + 7);
        v84 = (char *)*((_QWORD *)a6 + 8);
        v13 = v73;
        if (v84 != v85)
        {
          do
          {
            v86 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            *((_QWORD *)v83 - 1) = v86;
            v83 -= 8;
          }
          while (v84 != v85);
          v84 = (char *)*((_QWORD *)a6 + 7);
        }
        i = v140;
        *((_QWORD *)a6 + 7) = v83;
        *((_QWORD *)a6 + 8) = v72;
        *((_QWORD *)a6 + 9) = &v80[8 * v82];
        if (v84)
          operator delete(v84);
      }
      else
      {
        *v71 = v69;
        v72 = v71 + 1;
      }
      *((_QWORD *)a6 + 8) = v72;
    }
    v66 = (v11 - v149);
  }
  else
  {
    v66 = v11;
  }
LABEL_105:
  v87 = v138 - 14;
  if (v138 >= 0xE)
  {
    v88 = (char *)operator new(0x60uLL);
    XlPhoneticInfo::XlPhoneticInfo((XlPhoneticInfo *)v88);
    v89 = (v66 - 14);
    if (v66 < 0xE)
    {
      var0 = a2->var0;
      if (v66 <= 1)
      {
        ((void (*)(SsrwOOStream *, uint64_t, uint64_t))var0[2])(a2, v66, 1);
        v97 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v98 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v97 != 60)
          goto LABEL_173;
        LODWORD(v66) = v98;
        v13 = (v13 + 4);
        var0 = a2->var0;
      }
      ((void (*)(SsrwOOStream *))var0[9])(a2);
      v99 = v66 - 2;
      if ((v66 - 2) <= 1)
      {
        (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, (v66 - 2), 1);
        v100 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v101 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v100 != 60)
          goto LABEL_173;
        v99 = v101;
        v13 = (v13 + 4);
      }
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v102 = (v99 - 2);
      if (v102 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v102, 1);
        v103 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v104 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v103 != 60)
          goto LABEL_173;
        LODWORD(v102) = v104;
        v13 = (v13 + 4);
      }
      *((_WORD *)v88 + 4) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v105 = (v102 - 2);
      v106 = a2->var0;
      if (v105 <= 1)
      {
        ((void (*)(SsrwOOStream *, uint64_t, uint64_t))v106[2])(a2, v105, 1);
        v107 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v108 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v107 != 60)
          goto LABEL_173;
        LODWORD(v105) = v108;
        v13 = (v13 + 4);
        v106 = a2->var0;
      }
      v109 = ((uint64_t (*)(SsrwOOStream *))v106[9])(a2);
      *((_DWORD *)v88 + 3) = v109 & 3;
      *((_DWORD *)v88 + 4) = (v109 >> 2) & 3;
      v110 = (v105 - 2);
      if (v110 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v110, 1);
        v111 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v112 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v111 != 60)
          goto LABEL_173;
        LODWORD(v110) = v112;
        v13 = (v13 + 4);
      }
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v113 = (v110 - 2);
      if (v113 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v113, 1);
        v114 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v115 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v114 != 60)
          goto LABEL_173;
        LODWORD(v113) = v115;
        v13 = (v13 + 4);
      }
      v91 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
      v116 = (v113 - 2);
      if (v116 <= 1)
      {
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v116, 1);
        v117 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v118 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v117 != 60)
          goto LABEL_173;
        LODWORD(v116) = v118;
        v13 = (v13 + 4);
      }
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v89 = (v116 - 2);
      if (v91)
      {
LABEL_108:
        v92 = 2 * v91;
        *((_DWORD *)v88 + 8) = 1;
        v93 = (char *)operator new[](2 * v91 + 2);
        if (v152 < 2 * v91 + 2)
          *(_WORD *)&v93[2 * v152] = 0;
        LODWORD(v94) = v89 - v92;
        if (v89 >= v92)
        {
          v154 = v91;
          v119 = v93;
          (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v154, v93);
          if (v91 > v154)
            (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, 2 * (v91 - v154), 1);
          goto LABEL_148;
        }
        v154 = v91;
        v147 = v13;
        v150 = v93;
        if (v89 >= 2)
        {
          v120 = v89 >> 1;
          v154 = v89 >> 1;
          (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v154, v93);
          v121 = v154;
          if (v89 >> 1 > v154)
          {
            (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, 2 * ((v89 >> 1) - v154), 1);
            v121 = v154;
          }
          v153 = v121;
          v89 &= 1u;
          v95 = v91 - v120;
        }
        else
        {
          v153 = 0;
          v95 = 0;
        }
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v89, 1);
        v122 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        v123 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
        if (v122 == 60)
        {
          LODWORD(v94) = v123;
          if (v123 >= 2 * v95)
          {
            v13 = (v147 + 4);
            v124 = v150;
            if (!v95)
            {
LABEL_149:
              if (v87 >= v92)
                v87 = v87 - v92;
              else
                v87 = 0;
              OcText::takeBuffer((OcText *)(v88 + 24), v124, v92 + 2);
              goto LABEL_153;
            }
            v154 = v95;
            v119 = v150;
            (*((void (**)(SsrwOOStream *, unsigned int *, char *))a2->var0 + 17))(a2, &v154, &v150[2 * v153]);
            if (v95 > v154)
              (*((void (**)(SsrwOOStream *, _QWORD, uint64_t))a2->var0 + 2))(a2, 2 * (v95 - v154), 1);
            LODWORD(v94) = (_DWORD)v94 - 2 * v95;
            v13 = v13;
LABEL_148:
            v124 = v119;
            goto LABEL_149;
          }
        }
LABEL_173:
        XlString::reset(a6);
        goto LABEL_174;
      }
    }
    else
    {
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      *((_WORD *)v88 + 4) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v90 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      *((_DWORD *)v88 + 3) = v90 & 3;
      *((_DWORD *)v88 + 4) = (v90 >> 2) & 3;
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      v91 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
      (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
      if (v91)
        goto LABEL_108;
    }
    if (v87 < 2)
    {
LABEL_169:
      if ((_DWORD)v87)
        (*((void (**)(SsrwOOStream *, uint64_t, uint64_t))a2->var0 + 2))(a2, v87, 1);
      XlDocRoute::setBookTitle((XlDocRoute *)a6, (XlString *)v88);
      return v13;
    }
    (*((void (**)(SsrwOOStream *))a2->var0 + 9))(a2);
    v87 = v138 - 16;
    LODWORD(v94) = v89 - 2;
LABEL_153:
    if (v87 >= 6)
    {
      while (1)
      {
        v125 = (_DWORD)v94 - 6;
        if (v94 < 6)
        {
          v126 = v13;
          if ((_DWORD)v94)
          {
            v127 = (__int16 *)operator new[](7uLL);
            v128 = 0;
            do
              *((_BYTE *)v127 + v128++) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
            while (v94 != v128);
            v129 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            v130 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            if (v129 != 60)
            {
              XlString::reset(a6);
              MEMORY[0x22E2DD408](v127, 0x1000C4077774924);
LABEL_174:
              exception = __cxa_allocate_exception(4uLL);
              *exception = 3003;
            }
            v131 = v130;
            v132 = 6 - (_DWORD)v94;
            v94 = (_WORD *)(int)v94;
            if (6 - (int)v94 <= 1)
              v133 = 1;
            else
              v133 = v132;
            do
            {
              *((_BYTE *)v94 + (_QWORD)v127) = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
              v94 = (_WORD *)((char *)v94 + 1);
              --v133;
            }
            while (v133);
            v94 = operator new(0x10uLL);
            XlPhoneticRun::XlPhoneticRun((XlPhoneticRun *)v94);
            v94[4] = CsLeReadSInt16(v127);
            v94[5] = CsLeReadSInt16(v127 + 1);
            v94[6] = CsLeReadSInt16(v127 + 2);
            XlPhoneticInfo::appendRun((XlPhoneticInfo *)v88, (XlPhoneticRun *)v94);
            v87 = (v87 - 6);
            LODWORD(v94) = v131 - v132;
            MEMORY[0x22E2DD408](v127, 0x1000C4077774924);
          }
          else
          {
            v134 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            v135 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
            if (v134 != 60)
              goto LABEL_173;
            LODWORD(v94) = v135;
          }
          v13 = (v126 + 4);
        }
        else
        {
          v94 = operator new(0x10uLL);
          XlPhoneticRun::XlPhoneticRun((XlPhoneticRun *)v94);
          v94[4] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v94[5] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          v94[6] = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 9))(a2);
          XlPhoneticInfo::appendRun((XlPhoneticInfo *)v88, (XlPhoneticRun *)v94);
          v87 = (v87 - 6);
          LODWORD(v94) = v125;
        }
        if (v87 <= 5)
          goto LABEL_169;
      }
    }
    goto LABEL_169;
  }
  return v13;
}

void sub_22A1AEBB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlString::reset(XlString *this)
{
  uint64_t v2;
  uint64_t result;

  OcText::clearBuffer((OcText *)((char *)this + 8));
  v2 = *((_QWORD *)this + 10);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 10) = 0;
  XlString::clearRichText(this);
  *((_DWORD *)this + 22) = -1;
  result = *((_QWORD *)this + 12);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  *((_QWORD *)this + 12) = 0;
  return result;
}

XlString *XlString::clearRichText(XlString *this)
{
  XlString *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = *((_QWORD *)this + 7);
  if (((*((_QWORD *)this + 8) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(XlString **)(v2 + 8 * v3);
      if (this)
      {
        this = (XlString *)MEMORY[0x22E2DD3F0](this, 0x1000C80BDFB0063);
        v2 = *((_QWORD *)v1 + 7);
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = *((_QWORD *)v1 + 7);
    }
    while (v3 < ((unint64_t)(*((_QWORD *)v1 + 8) - v2) >> 3));
  }
  *((_QWORD *)v1 + 8) = v2;
  return this;
}

OcText *OcText::takeBuffer(OcText *this, char *a2, unsigned int a3)
{
  OcText *result;

  result = OcText::setBuffer(this, a2, a3);
  this->var7 = 1;
  return result;
}

OcText *OcText::setBuffer(OcText *this, char *a2, unsigned int a3)
{
  OcText *v5;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v5 = this;
  if (this->var7)
  {
    this = (OcText *)this->var5;
    if (this)
      this = (OcText *)MEMORY[0x22E2DD3F0](this, 0x1000C8077774924);
  }
  v5->var5 = a2;
  v5->var7 = 0;
  v5->var4 = a3;
  return this;
}

uint64_t XlChartPlot::takeChartFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 16) = a2;
  return result;
}

uint64_t OcText::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  char isSingleByteEncoding;
  int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *exception;

  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 16) + 1;
    isSingleByteEncoding = OcText::isSingleByteEncoding(*(_DWORD *)(a2 + 8));
    OcText::allocBuffer((OcText *)a1, v4 << (isSingleByteEncoding ^ 1), 1);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v8 = v6 << (OcText::isSingleByteEncoding(*(_DWORD *)(a2 + 8)) ^ 1);
    if (v7 < v8)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
    }
    if (v6)
      OcText::copyBuffer((OcText *)a1, *(const unsigned __int8 **)(a2 + 24), v8);
  }
  return a1;
}

void XlWriteAccess::~XlWriteAccess(XlWriteAccess *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AECF0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AECF0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void XlString::~XlString(XlString *this)
{
  XlString::~XlString(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3AE138;
  XlString::reset(this);
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  OcText::~OcText((OcText *)((char *)this + 8));
}

void XlCodePage::XlCodePage(XlCodePage *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABAE0;
  *(_WORD *)(v2 + 16) = 1200;
}

uint64_t XlParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16)) == 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  int16x8_t v4;
  unsigned int v5;
  __int16 v6;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v4 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 26) = v5 & 1;
  v4.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFCFFFDFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 27) = vmovn_s16(v4).u32[0];
  if (*(_DWORD *)(a2 + 8) == 18)
  {
    *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
    *(_WORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
    *(_WORD *)(a2 + 34) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  }
  else
  {
    v6 = 0;
    *(_WORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 36) = v6;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  char v4;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a2 + 14))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
    *(_BYTE *)(a2 + 16) = v4 & 1;
    *(_BYTE *)(a2 + 17) = (v4 & 2) != 0;
    *(_BYTE *)(a2 + 18) = (v4 & 4) != 0;
    *(_BYTE *)(a2 + 19) = (v4 & 8) != 0;
  }
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  int16x8_t v4;
  unsigned int v5;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v4 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 26) = v5 & 1;
  *(_DWORD *)(a2 + 28) = (v5 >> 1) & 1;
  v4.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 32) = vmovn_s16(v4).u32[0];
  *(_BYTE *)(a2 + 36) = (v5 & 0x40) != 0;
  *(_BYTE *)(a2 + 37) = (v5 & 0x80) != 0;
  *(_WORD *)(a2 + 38) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 40) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 48) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 56) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 42) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t v4;
  int v5;
  uint64_t (*v6)(void);
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v4 = **(_QWORD **)(a1 + 16);
  if (*(unsigned __int8 *)(a2 + 14) < 9u)
  {
    v5 = (*(uint64_t (**)(void))(v4 + 80))();
    v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 80);
  }
  else
  {
    v5 = (*(uint64_t (**)(void))(v4 + 96))();
    v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 96);
  }
  v7 = v6();
  if (v7 <= v5)
    v8 = v5 + 1;
  else
    v8 = v7;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v8;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  if (v10 <= v9)
    v11 = v9 + 1;
  else
    v11 = v10;
  *(_WORD *)(a2 + 24) = v9;
  *(_WORD *)(a2 + 26) = v11;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 2, 1);
  return XlParserVisitor::endRead(a1, a2);
}

{
  __int16 v4;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 24) = v4 & 1;
  *(_BYTE *)(a2 + 25) = (v4 & 2) != 0;
  *(_BYTE *)(a2 + 26) = (v4 & 4) != 0;
  *(_BYTE *)(a2 + 27) = (v4 & 0x1000) != 0;
  *(_BYTE *)(a2 + 28) = HIBYTE(v4) & 7;
  return XlParserVisitor::endRead(a1, a2);
}

{
  __int16 v4;
  __int16 v5;
  __int16 v6;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 22) = v4 & 0x7FFF;
  *(_BYTE *)(a2 + 29) = v4 < 0;
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 2, 1);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 28) = v5 & 7;
  *(_BYTE *)(a2 + 30) = (v5 & 0x10) != 0;
  *(_BYTE *)(a2 + 31) = (v5 & 0x20) != 0;
  *(_BYTE *)(a2 + 32) = (v5 & 0x40) != 0;
  *(_BYTE *)(a2 + 33) = (v5 & 0x80) != 0;
  *(_BYTE *)(a2 + 37) = HIBYTE(v5) & 1;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 26) = v6 & 0xFFF;
  *(_BYTE *)(a2 + 34) = (v6 & 0x1000) != 0;
  *(_BYTE *)(a2 + 35) = (v6 & 0x2000) != 0;
  *(_BYTE *)(a2 + 36) = (v6 & 0x4000) != 0;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 22) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 23) = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16)) == 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 26) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  if (*(_WORD *)(a2 + 12) == 3)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(double *)(a2 + 16) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  unsigned int v4;
  __int16 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  int *v9;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  v5 = v4;
  if (v4)
  {
    v6 = 4 * v4;
    v7 = 0;
    *(_QWORD *)(a1 + 64) = operator new[](v6);
    do
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
      v9 = *(int **)(a1 + 64);
      v9[v7 / 4] = v8;
      v7 += 4;
    }
    while (v6 != v7);
  }
  else
  {
    v9 = *(int **)(a1 + 64);
  }
  XlPalette::takeColors(a2, v9, v5);
  *(_QWORD *)(a1 + 64) = 0;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  char v4;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = v4 & 1;
  *(_BYTE *)(a2 + 17) = (v4 & 2) != 0;
  *(_BYTE *)(a2 + 18) = (v4 & 4) != 0;
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1;
  return XlParserVisitor::endRead(a1, a2);
}

{
  int16x8_t v4;
  unsigned int v5;
  int16x8_t v6;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v4 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(int16x4_t *)v4.i8 = vdup_n_s16(v5);
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(uint16x4_t *)v6.i8 = vshl_u16(*(uint16x4_t *)v4.i8, (uint16x4_t)0xFFF5FFF6FFF7FFF8);
  v4.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(v4.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 17) = vmovn_s16(v4).u32[0];
  *(_BYTE *)(a2 + 21) = (v5 & 0x20) != 0;
  *(_BYTE *)(a2 + 22) = (v5 & 0x40) != 0;
  *(_BYTE *)(a2 + 23) = (v5 & 0x80) != 0;
  v6.i64[0] &= 0xFF01FF01FF01FF01;
  *(_DWORD *)(a2 + 24) = vmovn_s16(v6).u32[0];
  *(_BYTE *)(a2 + 28) = (v5 & 0x1000) != 0;
  *(_BYTE *)(a2 + 29) = (v5 & 0x2000) != 0;
  *(_BYTE *)(a2 + 30) = (v5 & 0x4000) != 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  unsigned int v5;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  if (!*(_BYTE *)(a2 + 36))
  {
    v5 = *(_DWORD *)(a2 + 8) - 8;
    *(_DWORD *)(a2 + 8) = XlParserVisitor::getDataAndContinues((XlParserVisitor *)a1, &v5, -1) - *(_DWORD *)(a1 + 72);
    XlChartGelFrame::setBinaryData((XlChartGelFrame *)a2, *(unsigned __int8 **)(a1 + 24), *(_DWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, a2);
}

{
  uint64_t result;

  *(_DWORD *)a2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 12) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_WORD *)(a2 + 14) = result;
  return result;
}

uint64_t XlDocumentProperties::setCodePage(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10) = a2;
  return this;
}

void XlTabId::XlTabId(XlTabId *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE8F0;
  *(_BYTE *)(v2 + 16) = 1;
  *(_WORD *)(v2 + 18) = 0;
  *(_QWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTabId *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  size_t v7;
  int v8;
  __int16 v9;
  __int16 *v10;

  v4 = *((_DWORD *)a2 + 2);
  v5 = v4 >> 1;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if ((int)(v4 >> 1 << 16) >= 1)
  {
    v6 = (__int16)(v4 >> 1);
    if (v6 < 0)
      v7 = -1;
    else
      v7 = 2 * (__int16)v5;
    v8 = 0;
    *((_QWORD *)this + 5) = operator new[](v7);
    do
    {
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v10 = (__int16 *)*((_QWORD *)this + 5);
      v10[(__int16)v8++] = v9;
    }
    while (v6 > (__int16)v8);
    XlTabId::setTabIdTable(a2, v10, v6);
    *((_QWORD *)this + 5) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlTabId::setTabIdTable(XlTabId *this, __int16 *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  *((_QWORD *)this + 3) = a2;
  *((_WORD *)this + 9) = a3;
  *((_BYTE *)this + 16) = 1;
  return result;
}

uint64_t XlDocumentProperties::takeTabIdTable(uint64_t this, __int16 *a2, int a3)
{
  __int16 v3;
  uint64_t v5;

  v3 = a3;
  v5 = this;
  if (a2 || a3 <= 0)
  {
    this = *(_QWORD *)(this + 32);
    if (this)
      this = MEMORY[0x22E2DD3F0](this, 0x1000C80BDFB0063);
    *(_WORD *)(v5 + 28) = v3;
    *(_QWORD *)(v5 + 32) = a2;
  }
  return this;
}

void XlTabId::~XlTabId(XlTabId *this)
{
  XlTabId::~XlTabId(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE8F0;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
    *((_QWORD *)this + 3) = 0;
    *((_WORD *)this + 9) = 0;
    *((_BYTE *)this + 16) = 1;
  }
}

void XlWindowProtect::XlWindowProtect(XlWindowProtect *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AECB0;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlProtect::XlProtect(XlProtect *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD410;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlPassword::XlPassword(XlPassword *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD1A0;
  *(_WORD *)(v2 + 16) = 0;
}

void XlProt4Rev::XlProt4Rev(XlProt4Rev *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD390;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlProt4RevPass::XlProt4RevPass(XlProt4RevPass *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD3D0;
  *(_WORD *)(v2 + 16) = 0;
}

void XlHideObj::XlHideObj(XlHideObj *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC8E0;
  *(_DWORD *)(v2 + 16) = 0;
}

void Xl1904::Xl1904(Xl1904 *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB5F0;
  *(_BYTE *)(v2 + 16) = 0;
}

uint64_t XlDocumentProperties::setDateBase(uint64_t this, int a2)
{
  _DWORD *exception;

  if (a2 != 1900 && a2 != 1904)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  *(_WORD *)(this + 8) = a2;
  return this;
}

void XlPrecision::XlPrecision(XlPrecision *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD290;
  *(_BYTE *)(v2 + 16) = 1;
}

void XlRefreshAll::XlRefreshAll(XlRefreshAll *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD5F8;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlBookBool::XlBookBool(XlBookBool *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB8A0;
  *(_WORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 18) = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, _BYTE *a2)
{
  char v4;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  a2[16] = v4 & 1;
  a2[17] = (v4 & 4) != 0;
  a2[18] = (v4 & 8) != 0;
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  __int16 v4;

  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  a2[16] = v4 & 1;
  a2[17] = (v4 & 0x10) != 0;
  a2[18] = (v4 & 0x20) != 0;
  a2[19] = (v4 & 0x40) != 0;
  a2[20] = (v4 & 0x80) != 0;
  a2[21] = HIBYTE(v4) & 1;
  a2[22] = (v4 & 0x400) != 0;
  a2[23] = (v4 & 0x4000) != 0;
  a2[24] = v4 < 0;
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void XlUsesElfs::XlUsesElfs(XlUsesElfs *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEB70;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlBoundSheet::XlBoundSheet(XlBoundSheet *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB960;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBoundSheet *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  int v14;
  XlString *v15;
  unsigned int v17;
  _BYTE *v18;
  XlString *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  XlString *v26;
  _DWORD *exception;
  unsigned int v28;
  int v29;
  unsigned int v30;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) < 5u)
  {
    v4 = 0;
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 8) = 0;
    v5 = 1;
  }
  else
  {
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    *((_DWORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2)) & 3;
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v5 = 7;
  }
  *((_DWORD *)a2 + 7) = v4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  if (!v6)
  {
    v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((_QWORD *)this + 4) = v15;
    XlChartPlot::takeChartFormat((uint64_t)a2, (uint64_t)v15);
    *((_QWORD *)this + 4) = 0;
    return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  }
  v7 = v6;
  v8 = *((unsigned __int8 *)a2 + 14);
  if (v8 < 9)
  {
    if (v8 != 8)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 8003;
    }
    v17 = *((_DWORD *)a2 + 2) - v5;
    v28 = v17;
    if (!v17)
      return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
    v18 = operator new[](v17 + 1);
    *((_QWORD *)this + 3) = v18;
    v18[v17] = 0;
    (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v28);
    v19 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v19);
    *((_QWORD *)this + 4) = v19;
    v20 = (char *)*((_QWORD *)this + 3);
    v21 = v28 + 1;
    v22 = (uint64_t)v19;
    v23 = v7;
    v24 = 0;
    goto LABEL_17;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v10 = *((_DWORD *)a2 + 2);
  v11 = v10 - (v5 + 1);
  if (v10 > v5 + 1)
  {
    v30 = v10 - (v5 + 1);
    if ((v9 & 1) != 0)
    {
      v13 = v11 + 2;
      v25 = operator new[](v11 + 2);
      *((_QWORD *)this + 3) = v25;
      v25[v11 + 1] = 0;
      *(_BYTE *)(*((_QWORD *)this + 3) + v11) = 0;
      if (v11 >> 1 < v7)
        LOBYTE(v7) = v11 >> 1;
      v29 = v7;
      (*(void (**)(_QWORD, int *, _QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2), &v29, *((_QWORD *)this + 3));
      v14 = 1;
    }
    else
    {
      v12 = operator new[]((v10 - v5));
      *((_QWORD *)this + 3) = v12;
      v12[v11] = 0;
      (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v30);
      v13 = v30 + 1;
      v14 = 2;
    }
    v30 = v13;
    v26 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v26);
    *((_QWORD *)this + 4) = v26;
    v20 = (char *)*((_QWORD *)this + 3);
    v23 = v7;
    v21 = v30;
    v22 = (uint64_t)v26;
    v24 = v14;
LABEL_17:
    XlString::takeString(v22, v20, v21, v23, v24);
    *((_QWORD *)this + 3) = 0;
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1AFAA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlString::takeString(uint64_t a1, char *a2, unsigned int a3, int a4, int a5)
{
  OcText *result;
  _DWORD *exception;

  if (!a2 || !a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  result = OcText::takeBuffer((OcText *)(a1 + 8), a2, a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  return result;
}

uint64_t XlParserVisitor::getRecordDataOffset(XlParserVisitor *this)
{
  return *((unsigned int *)this + 22);
}

void XlCountry::XlCountry(XlCountry *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ABC20;
  v2[2] = 0x100000001;
}

void XlRecalcID::XlRecalcID(XlRecalcID *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD510;
  *(_DWORD *)(v2 + 16) = -1;
}

void XlStringExtractor::XlStringExtractor(XlStringExtractor *this)
{
  *(_QWORD *)this = &off_24F3B1648;
  XlStringParser::XlStringParser((XlStringExtractor *)((char *)this + 8));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  XlString::XlString((XlString *)((char *)this + 32));
  *((_QWORD *)this + 17) = 0;
  *(_QWORD *)((char *)this + 156) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
}

void sub_22A1AFCB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  TSURectWithOriginAndSize(v1);
  _Unwind_Resume(a1);
}

void XlSst::XlSst(XlSst *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE0B8;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 42) = 0u;
  *(_BYTE *)(v2 + 58) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSst *a2)
{
  uint64_t v4;
  int v5;
  int v6;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v4 = (*((_DWORD *)a2 + 2) - 8);
  do
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    XlSst::registerTablePart(a2, v5, v4);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v4, 1);
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  }
  while (v6 == 60);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4294967292, 1);
  *((_DWORD *)a2 + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
                      - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlSst::registerTablePart(XlSst *this, int a2, int a3)
{
  char *v6;
  char **v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  _DWORD *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;

  v7 = (char **)((char *)this + 40);
  v6 = (char *)*((_QWORD *)this + 5);
  v8 = (char *)*((_QWORD *)this + 4);
  if (v8 >= v6)
  {
    v10 = (_BYTE *)*((_QWORD *)this + 3);
    v11 = v8 - v10;
    v12 = (unint64_t)(v8 - v10) >> 2;
    v13 = (unint64_t)(v6 - v10) >> 2;
    if (2 * (int)v13 <= (v12 + 1))
      v14 = v12 + 1;
    else
      v14 = 2 * v13;
    if (v13 >= 0x7FFFFFFF)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = v14;
    if ((_DWORD)v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v7, v15);
      v18 = v17;
      v10 = (_BYTE *)*((_QWORD *)this + 3);
      v8 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v16 = 0;
      v18 = 0;
    }
    v19 = &v16[v11 & 0x3FFFFFFFCLL];
    v6 = &v16[4 * v18];
    *(_DWORD *)v19 = a2;
    v9 = v19 + 4;
    while (v8 != v10)
    {
      v20 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v19 - 1) = v20;
      v19 -= 4;
    }
    *((_QWORD *)this + 3) = v19;
    *((_QWORD *)this + 4) = v9;
    *((_QWORD *)this + 5) = v6;
    if (v10)
    {
      operator delete(v10);
      v6 = *v7;
    }
  }
  else
  {
    *(_DWORD *)v8 = a2;
    v9 = v8 + 4;
  }
  *((_QWORD *)this + 4) = v9;
  v21 = a3 + a2;
  if (v9 >= v6)
  {
    v23 = (char *)*((_QWORD *)this + 3);
    v24 = v9 - v23;
    v25 = (unint64_t)(v9 - v23) >> 2;
    v26 = (unint64_t)(v6 - v23) >> 2;
    if (2 * (int)v26 <= (v25 + 1))
      v27 = v25 + 1;
    else
      v27 = 2 * v26;
    if (v26 >= 0x7FFFFFFF)
      v28 = 0xFFFFFFFFLL;
    else
      v28 = v27;
    if ((_DWORD)v28)
    {
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)v7, v28);
      v31 = v30;
      v23 = (char *)*((_QWORD *)this + 3);
      v9 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = &v29[v24 & 0x3FFFFFFFCLL];
    v33 = &v29[4 * v31];
    *(_DWORD *)v32 = v21;
    v22 = v32 + 4;
    while (v9 != v23)
    {
      v34 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v32 - 1) = v34;
      v32 -= 4;
    }
    *((_QWORD *)this + 3) = v32;
    *((_QWORD *)this + 4) = v22;
    *((_QWORD *)this + 5) = v33;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_DWORD *)v9 = v21;
    v22 = v9 + 4;
  }
  *((_QWORD *)this + 4) = v22;
}

void XlExtSst::XlExtSst(XlExtSst *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC420;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExtSst *a2)
{
  unsigned int v4;
  unsigned int v5;
  int i;
  uint64_t Bucket;

  v4 = *((_DWORD *)a2 + 2) + 524286;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (unsigned __int16)(v4 >> 3);
  XlExtSst::setBucketCount(a2, v5);
  *((_WORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      Bucket = XlExtSst::getBucket(a2, (unsigned __int16)i);
      *(_DWORD *)Bucket = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
      *(_WORD *)(Bucket + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

char *XlExtSst::setBucketCount(XlExtSst *this, unsigned int a2)
{
  char *result;
  uint64_t v5;

  result = (char *)*((_QWORD *)this + 2);
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C80789AEA99);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = a2;
  if (a2)
  {
    result = (char *)operator new[](8 * a2);
    v5 = (uint64_t)result;
    do
    {
      *(_DWORD *)v5 = 0;
      *(_WORD *)(v5 + 4) = 0;
      v5 += 8;
    }
    while ((char *)v5 != &result[8 * a2]);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

uint64_t XlExtSst::getBucket(XlExtSst *this, unsigned int a2)
{
  _DWORD *exception;

  if (*((unsigned __int16 *)this + 12) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *((_QWORD *)this + 2) + 8 * a2;
}

_DWORD *XlStringExtractor::setStringExtractor(XlStringExtractor *this, SsrwOOStream *a2, XlSst *a3, XlExtSst *a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int *Bucket;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  BOOL v25;
  _DWORD *result;
  _BOOL4 v28;
  size_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _DWORD *exception;
  int v40;

  *((_QWORD *)this + 2) = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v40 = 1004;
LABEL_45:
    *exception = v40;
  }
  *(_QWORD *)((char *)this + 156) = *((_QWORD *)a3 + 2);
  v7 = *((_QWORD *)this + 17);
  if (v7)
    MEMORY[0x22E2DD3F0](v7, 0x1000C8052888210);
  *((_QWORD *)this + 17) = 0;
  v8 = *((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3);
  v9 = v8 >> 2;
  *((_DWORD *)this + 36) = v8 >> 2;
  if (!(v8 >> 2) || (*((_DWORD *)this + 40) & 0x80000000) != 0)
  {
    *((_DWORD *)this + 40) = 0;
    exception = __cxa_allocate_exception(4uLL);
    v40 = 3002;
    goto LABEL_45;
  }
  v10 = ((uint64_t)(v8 << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL;
  if ((v9 & 0x80000000) != 0)
    v11 = -1;
  else
    v11 = v10;
  v12 = operator new[](v11);
  *((_QWORD *)this + 17) = v12;
  if (*((int *)this + 36) >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)a3 + 3);
    v15 = ((unint64_t)(*((_QWORD *)a3 + 4) - v14) >> 2);
    do
    {
      if (v15 == v13)
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      v12[v13] = *(_DWORD *)(v14 + 4 * v13);
      ++v13;
    }
    while (v13 < *((int *)this + 36));
  }
  v16 = *((unsigned __int16 *)a4 + 13);
  *((_DWORD *)this + 37) = *((unsigned __int16 *)a4 + 12);
  *((_DWORD *)this + 38) = v16;
  v17 = 1;
  while (1)
  {
    v18 = *((_DWORD *)this + 37);
    if (v17 - 1 >= v18 - 1)
      break;
    v19 = *(_DWORD *)XlExtSst::getBucket(a4, (unsigned __int16)(v17 - 1));
    Bucket = (unsigned int *)XlExtSst::getBucket(a4, (unsigned __int16)v17++);
    if (v19 >= *Bucket)
    {
      v18 = *((_DWORD *)this + 37);
      v21 = *((_DWORD *)this + 38);
      v22 = *((_DWORD *)this + 40);
      v23 = v21 * v17 < v22;
      goto LABEL_18;
    }
  }
  v23 = 0;
  v21 = *((_DWORD *)this + 38);
  v22 = *((_DWORD *)this + 40);
LABEL_18:
  v24 = v21 * v18;
  if (v18)
    v25 = v24 < v22;
  else
    v25 = 1;
  if (v25 || v23)
    return XlStringExtractor::markHashTableAsCorrupted(this);
  v28 = v18 < 0;
  if ((unint64_t)(16 * v18) >= 0xFFFFFFFFFFFFFFF0)
    v28 = 1;
  if (v28)
    v29 = -1;
  else
    v29 = 16 * v18 + 16;
  result = operator new[](v29);
  *(_QWORD *)result = 16;
  *((_QWORD *)result + 1) = v18;
  v30 = result + 4;
  v31 = result + 4;
  do
  {
    *v31 = 0;
    *((_WORD *)v31 + 2) = 0;
    *((_QWORD *)v31 + 1) = 0;
    v31 += 4;
  }
  while (v31 != &result[4 * v18 + 4]);
  *((_QWORD *)this + 3) = v30;
  LODWORD(v32) = *((_DWORD *)this + 37);
  if ((int)v32 >= 1)
  {
    v33 = 0;
    v34 = 0;
    do
    {
      result = (_DWORD *)XlExtSst::getBucket(a4, (unsigned __int16)v34);
      v35 = *((_QWORD *)this + 3) + v33;
      v36 = *result;
      *(_WORD *)(v35 + 4) = *((_WORD *)result + 2);
      *(_DWORD *)v35 = v36;
      ++v34;
      v32 = *((int *)this + 37);
      v33 += 16;
    }
    while (v34 < v32);
    v30 = (_DWORD *)*((_QWORD *)this + 3);
  }
  v37 = **((_DWORD **)this + 17);
  v38 = v37 - *v30;
  if (v37 != *v30 && (int)v32 >= 1)
  {
    v32 = v32;
    do
    {
      *v30 += v38;
      v30 += 4;
      --v32;
    }
    while (v32);
  }
  return result;
}

void XlExtSst::~XlExtSst(XlExtSst *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC420;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80789AEA99);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC420;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80789AEA99);
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
}

void XlSst::~XlSst(XlSst *this)
{
  XlSst::~XlSst(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3AE0B8;
  v2 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v2;
  if (*((_BYTE *)this + 58) && *((_QWORD *)this + 6))
  {
    MEMORY[0x22E2DD3F0](*((_QWORD *)this + 6), 0x1000C8077774924);
    v2 = (void *)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  *((_BYTE *)this + 58) = 0;
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void XlBof::~XlBof(XlBof *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1B04F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1B0A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a5);

  XlPivotInfoTable::~XlPivotInfoTable((XlPivotInfoTable *)va);
  _Unwind_Resume(a1);
}

void sub_22A1B0BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B0D58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B0F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B0FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1B14AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1B1678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1B1A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B1CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1B1D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1B1E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1B1EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1B20B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);

  XlDocumentProperties::~XlDocumentProperties((XlDocumentProperties *)va);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlDocumentProperties *a2)
{
  return XlDocumentProperties::operator=((uint64_t)a2, (uint64_t)this + 1016);
}

uint64_t XlDocumentProperties::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  size_t v11;
  void *v12;

  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      MEMORY[0x22E2DD3F0](v4, 0x1000C80BDFB0063);
    *(_QWORD *)(a1 + 32) = 0;
    v5 = *(__int16 *)(a2 + 28);
    if (v5 >= 1)
    {
      v6 = operator new[](2 * *(unsigned __int16 *)(a2 + 28));
      *(_QWORD *)(a1 + 32) = v6;
      v5 = *(__int16 *)(a2 + 28);
      if (v5 >= 1)
      {
        v7 = 0;
        v8 = *(_QWORD *)(a2 + 32);
        do
        {
          v6[v7] = *(_WORD *)(v8 + 2 * v7);
          ++v7;
        }
        while (v7 < *(__int16 *)(a2 + 28));
        LOWORD(v5) = *(_WORD *)(a2 + 28);
      }
    }
    *(_WORD *)(a1 + 28) = v5;
    OcText::clearBuffer((OcText *)(a1 + 40));
    OcText::operator=(a1 + 40, a2 + 40);
    v9 = XlRef::operator=(a1 + 92, a2 + 92);
    *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
    v10 = *(_QWORD *)(a1 + 104);
    if (v10)
      MEMORY[0x22E2DD3F0](v10, 0x1000C8077774924, v9);
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    v11 = *(unsigned int *)(a2 + 112);
    if ((_DWORD)v11 && *(_QWORD *)(a2 + 104))
    {
      *(_DWORD *)(a1 + 112) = v11;
      v12 = operator new[](v11);
      *(_QWORD *)(a1 + 104) = v12;
      memcpy(v12, *(const void **)(a2 + 104), *(unsigned int *)(a1 + 112));
    }
  }
  return a1;
}

double XlRef::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    result = *(double *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  }
  return result;
}

void XlDocumentProperties::~XlDocumentProperties(XlDocumentProperties *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AF360;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 13);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  *((_QWORD *)this + 13) = 0;
  OcText::~OcText((OcText *)((char *)this + 40));
}

{
  XlDocumentProperties::~XlDocumentProperties(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1B23D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  XlDocumentPresentationTable::~XlDocumentPresentationTable((XlDocumentPresentationTable *)&a9);

  _Unwind_Resume(a1);
}

void XlBinaryReader::read(XlBinaryReader *this, XlDocumentPresentationTable *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int RecordDataOffset;
  XlHeader v10;

  XlHeader::XlHeader(&v10);
  if ((*((_DWORD *)this + 53) & 0x80000000) != 0)
    goto LABEL_12;
  XlChangeHistory::clear(a2);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *((unsigned int *)this + 53), 0);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((_BYTE *)this + 1320));
  if (v10.var1 != 61)
  {
    *((_DWORD *)this + 53) = -1;
LABEL_12:
    XlDocumentPresentationTable::setDefault(a2);
    return;
  }
  do
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 20);
    if (v4)
    {
      v5 = v4;
      v6 = (char *)operator new(0x28uLL);
      XlWindow1::XlWindow1((XlWindow1 *)v6, &v10);
      *((_QWORD *)this + 163) = v6;
      if (v6)
      (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 416))(*((_QWORD *)this + 167), v6);
      XlDocumentPresentation::setTabSelectInfo(v5, *((_WORD *)v6 + 8), *((_WORD *)v6 + 17));
      *(_WORD *)(v5 + 14) = *((_WORD *)v6 + 16);
      *(_WORD *)(v5 + 16) = *((_WORD *)v6 + 18);
      *(_BYTE *)(v5 + 12) = v6[30];
      *(_QWORD *)(v5 + 18) = *(_QWORD *)(v6 + 18);
      *(_DWORD *)(v5 + 26) = *(_DWORD *)(v6 + 26);
      XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v5);
      v7 = *((_QWORD *)this + 163);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      *((_QWORD *)this + 163) = 0;
    }
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((_BYTE *)this + 1320));
  }
  while (v10.var1 == 61);
  v8 = *((_QWORD *)this + 164);
  RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, -RecordDataOffset, 1);
}

void sub_22A1B25A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *XlChangeHistory::clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[1];
  v3 = this[2];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[1];
        v3 = v1[2];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[2] = v2;
  return this;
}

XlAutoFilterTable *XlChartObjectFactory::createObject(uint64_t a1, int a2)
{
  char *v2;
  XlAutoFilterTable *result;

  switch(a2)
  {
    case ':':
      v2 = (char *)operator new(0xA8uLL);
      XlChartAreaPlot::XlChartAreaPlot((XlChartAreaPlot *)v2);
      goto LABEL_33;
    case ';':
      v2 = (char *)operator new(0xA8uLL);
      XlChartBarPlot::XlChartBarPlot((XlChartBarPlot *)v2);
      goto LABEL_33;
    case '<':
      v2 = (char *)operator new(0xB0uLL);
      XlChartCategoryAxis::XlChartCategoryAxis((XlChartCategoryAxis *)v2);
      goto LABEL_33;
    case '=':
      v2 = (char *)operator new(0xE0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(_QWORD *)v2 = &off_24F3A9340;
      *((_DWORD *)v2 + 54) = 0;
      *((_WORD *)v2 + 110) = 0;
      goto LABEL_33;
    case '>':
      v2 = (char *)operator new(0xC8uLL);
      XlChartDataSeries::XlChartDataSeries((XlChartDataSeries *)v2);
      goto LABEL_33;
    case '?':
      v2 = (char *)operator new(0xB8uLL);
      XlChartDateAxis::XlChartDateAxis((XlChartDateAxis *)v2);
      goto LABEL_33;
    case '@':
      v2 = (char *)operator new(0xE0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(_QWORD *)v2 = &off_24F3A7770;
      *((_DWORD *)v2 + 54) = 0;
      goto LABEL_33;
    case 'A':
      v2 = (char *)operator new(0xF8uLL);
      XlChartErrorBar::XlChartErrorBar((XlChartErrorBar *)v2);
      goto LABEL_33;
    case 'B':
      v2 = (char *)operator new(0x28uLL);
      *(_QWORD *)v2 = &off_24F3A93E8;
      *((_QWORD *)v2 + 1) = 255;
      *((_WORD *)v2 + 8) = 255;
      *(_QWORD *)(v2 + 18) = 0;
      *(_QWORD *)(v2 + 23) = 0;
      *(_WORD *)(v2 + 31) = 1;
      goto LABEL_33;
    case 'C':
      v2 = (char *)operator new(0xF0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(_QWORD *)v2 = &off_24F3A77E0;
      *((_QWORD *)v2 + 27) = 0x100000004;
      *(_QWORD *)(v2 + 228) = 0x101010100000000;
      v2[236] = 1;
      goto LABEL_33;
    case 'D':
      v2 = (char *)operator new(0xA8uLL);
      XlChartLinePlot::XlChartLinePlot((XlChartLinePlot *)v2);
      goto LABEL_33;
    case 'E':
      v2 = (char *)operator new(0x28uLL);
      *(_QWORD *)v2 = &off_24F3A94A8;
      *((_WORD *)v2 + 4) = 255;
      *(_QWORD *)(v2 + 10) = 0;
      *((_WORD *)v2 + 9) = 0;
      *(_QWORD *)(v2 + 20) = 0x100000000FFFFLL;
      v2[28] = 0;
      *((_QWORD *)v2 + 4) = -3229614080;
      goto LABEL_33;
    case 'F':
      v2 = (char *)operator new(0x38uLL);
      XlChartLinkedData::XlChartLinkedData((XlChartLinkedData *)v2);
      goto LABEL_33;
    case 'G':
      v2 = (char *)operator new(0x28uLL);
      *(_QWORD *)v2 = &off_24F3A94E0;
      *((_DWORD *)v2 + 2) = 0;
      *(_QWORD *)(v2 + 12) = 255;
      *((_WORD *)v2 + 10) = 255;
      *(_QWORD *)(v2 + 30) = 0;
      *(_QWORD *)(v2 + 22) = 0;
      v2[38] = 1;
      goto LABEL_33;
    case 'H':
      v2 = (char *)operator new(0x110uLL);
      XlChartParent::XlChartParent((XlChartParent *)v2);
      goto LABEL_33;
    case 'I':
      v2 = (char *)operator new(0xA8uLL);
      XlChartPiePlot::XlChartPiePlot((XlChartPiePlot *)v2);
      goto LABEL_33;
    case 'J':
      v2 = (char *)operator new(0xB8uLL);
      XlChartPieSubPlot::XlChartPieSubPlot((XlChartPieSubPlot *)v2);
      goto LABEL_33;
    case 'K':
      v2 = (char *)operator new(0x58uLL);
      XlChartFrameType::XlChartFrameType((XlChartFrameType *)v2);
      *(_QWORD *)v2 = &off_24F3A77A8;
      *((_DWORD *)v2 + 21) = 0;
      goto LABEL_33;
    case 'L':
      v2 = (char *)operator new(0xA8uLL);
      XlChartRadarAreaPlot::XlChartRadarAreaPlot((XlChartRadarAreaPlot *)v2);
      goto LABEL_33;
    case 'M':
      v2 = (char *)operator new(0xA8uLL);
      XlChartRadarPlot::XlChartRadarPlot((XlChartRadarPlot *)v2);
      goto LABEL_33;
    case 'N':
      v2 = (char *)operator new(0xA8uLL);
      XlChartScatterPlot::XlChartScatterPlot((XlChartScatterPlot *)v2);
      goto LABEL_33;
    case 'O':
      v2 = (char *)operator new(0x60uLL);
      XlChartSeriesFormat::XlChartSeriesFormat((XlChartSeriesFormat *)v2);
      goto LABEL_33;
    case 'P':
      v2 = (char *)operator new(0xA8uLL);
      XlChartSurfacePlot::XlChartSurfacePlot((XlChartSurfacePlot *)v2);
      goto LABEL_33;
    case 'Q':
      v2 = (char *)operator new(0xD8uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      goto LABEL_33;
    case 'R':
      v2 = (char *)operator new(0xD8uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(_QWORD *)v2 = &off_24F3A7698;
      goto LABEL_33;
    case 'S':
      v2 = (char *)operator new(0xF8uLL);
      XlChartTrendLine::XlChartTrendLine((XlChartTrendLine *)v2);
      goto LABEL_33;
    case 'T':
      v2 = (char *)operator new(0xB0uLL);
      XlChartValueAxis::XlChartValueAxis((XlChartValueAxis *)v2);
      goto LABEL_33;
    case 'U':
      v2 = (char *)operator new(0xF0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *((_QWORD *)v2 + 27) = 0x100000004;
      v2[236] = 1;
      *(_QWORD *)v2 = &off_24F3A9858;
      *((_WORD *)v2 + 119) = 0;
      *(_QWORD *)(v2 + 228) = 0x101010100000001;
      goto LABEL_33;
    case 'V':
      v2 = (char *)operator new(0x38uLL);
      XlChartDropBarFormat::XlChartDropBarFormat((XlChartDropBarFormat *)v2);
      goto LABEL_33;
    case 'W':
      v2 = (char *)operator new(0xE0uLL);
      XlChartTextFrame::XlChartTextFrame((XlChartTextFrame *)v2);
      *(_QWORD *)v2 = &off_24F3A9890;
      *((_DWORD *)v2 + 54) = 0xFFFF;
LABEL_33:
      result = (XlAutoFilterTable *)v2;
      break;
    default:
      result = XlObjectFactory::createObject(a1, a2);
      break;
  }
  return result;
}

void sub_22A1B2A8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

XlAutoFilterTable *XlObjectFactory::createObject(uint64_t a1, int a2)
{
  XlAutoFilterTable *v2;
  XlAutoFilterTable *v3;
  void (**v4)(XlCellFormatTable *__hidden);
  XlAutoFilterTable *v5;
  void (**v6)(XlCustomView *__hidden);
  char *v7;
  char *v8;

  switch(a2)
  {
    case 0:
      v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlAutoFilterTable::XlAutoFilterTable(v2);
      goto LABEL_64;
    case 1:
      v2 = (XlAutoFilterTable *)operator new(0x48uLL);
      XlBinaryData::XlBinaryData(v2);
      goto LABEL_64;
    case 2:
      v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlCalculationProperties::XlCalculationProperties(v2);
      goto LABEL_64;
    case 3:
      v2 = (XlAutoFilterTable *)operator new(0x40uLL);
      XlCell::XlCell((XlCell *)v2);
      goto LABEL_64;
    case 4:
      v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v3;
      v4 = &off_24F3A7A80;
      goto LABEL_36;
    case 5:
      v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlCellRow::XlCellRow(v2);
      XlCellRow::init(v2);
      goto LABEL_64;
    case 6:
      v2 = (XlAutoFilterTable *)operator new(0x18uLL);
      XlCellTableInfo::XlCellTableInfo(v2);
      goto LABEL_64;
    case 7:
      v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlChangeHistory::XlChangeHistory(v2);
      goto LABEL_64;
    case 8:
      v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlColorTable::XlColorTable(v2);
      XlColorTable::init(v2);
      goto LABEL_64;
    case 9:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3A7B40;
      goto LABEL_59;
    case 10:
      v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlConditionalFormat::XlConditionalFormat(v2);
      goto LABEL_64;
    case 11:
      v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v3;
      goto LABEL_35;
    case 12:
      v2 = (XlAutoFilterTable *)operator new(0x6E0uLL);
      XlContentFormatTable::XlContentFormatTable(v2);
      goto LABEL_64;
    case 13:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFA18;
      goto LABEL_59;
    case 14:
      v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v3;
      goto LABEL_35;
    case 15:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFA50;
      goto LABEL_59;
    case 16:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      goto LABEL_50;
    case 17:
      v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlDataValidityTable::XlDataValidityTable(v2);
      goto LABEL_64;
    case 18:
      v2 = (XlAutoFilterTable *)operator new(0x18uLL);
      XlDocumentInfo::XlDocumentInfo(v2);
      goto LABEL_64;
    case 19:
      v2 = (XlAutoFilterTable *)operator new(0x78uLL);
      XlDocumentProperties::XlDocumentProperties(v2);
      goto LABEL_64;
    case 20:
      v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlDocumentPresentation::XlDocumentPresentation(v2);
      goto LABEL_64;
    case 21:
      v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v3;
      goto LABEL_35;
    case 22:
      v2 = (XlAutoFilterTable *)operator new(0x10uLL);
      XlDocumentProtection::XlDocumentProtection(v2);
      goto LABEL_64;
    case 23:
      v2 = (XlAutoFilterTable *)operator new(0x90uLL);
      XlFileProtection::XlFileProtection(v2);
      goto LABEL_64;
    case 24:
      v2 = (XlAutoFilterTable *)operator new(0x58uLL);
      XlFontTable::XlFontTable(v2);
      goto LABEL_64;
    case 25:
      v2 = (XlAutoFilterTable *)operator new(0x48uLL);
      XlFormulaInfo::XlFormulaInfo((XlFormulaInfo *)v2);
      goto LABEL_64;
    case 26:
      v2 = (XlAutoFilterTable *)operator new(0x88uLL);
      XlGraphicsInfo::XlGraphicsInfo(v2);
      goto LABEL_64;
    case 27:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3A7D50;
      goto LABEL_59;
    case 28:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFA88;
      goto LABEL_59;
    case 29:
      v2 = (XlAutoFilterTable *)operator new(0x80uLL);
      XlLink::XlLink(v2);
      goto LABEL_64;
    case 30:
      v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      *(_QWORD *)v2 = &off_24F3AF888;
      *((_QWORD *)v2 + 3) = 0;
      *((_QWORD *)v2 + 4) = 0;
      *((_QWORD *)v2 + 2) = 0;
      *((_BYTE *)v2 + 8) = 1;
      return v2;
    case 31:
      v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlLinkOperandTable::XlLinkOperandTable(v2);
      goto LABEL_64;
    case 32:
      v2 = (XlAutoFilterTable *)operator new(0x48uLL);
      *(_QWORD *)v2 = &off_24F3AF8F8;
      *((_QWORD *)v2 + 1) = &off_24F3AF888;
      *((_QWORD *)v2 + 3) = 0;
      *((_QWORD *)v2 + 4) = 0;
      *((_QWORD *)v2 + 5) = 0;
      *((_QWORD *)v2 + 6) = 0;
      *((_BYTE *)v2 + 16) = 1;
      *((_QWORD *)v2 + 7) = 0;
      *((_QWORD *)v2 + 8) = 0;
      return v2;
    case 33:
      v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v3;
      goto LABEL_35;
    case 34:
      v2 = (XlAutoFilterTable *)operator new(0x2C0uLL);
      XlNameTable::XlNameTable(v2);
      goto LABEL_64;
    case 35:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3A7D18;
      goto LABEL_59;
    case 36:
      v2 = (XlAutoFilterTable *)operator new(0x70uLL);
      XlPageProperties::XlPageProperties(v2);
      goto LABEL_64;
    case 37:
      v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlPhoneticTable::XlPhoneticTable(v2);
      goto LABEL_64;
    case 38:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFAF8;
      goto LABEL_59;
    case 39:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFAC0;
      goto LABEL_59;
    case 40:
      v3 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v3;
LABEL_35:
      v4 = (void (**)(XlCellFormatTable *__hidden))(v7 + 16);
LABEL_36:
      *(_QWORD *)v3 = v4;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *((_QWORD *)v3 + 3) = 0;
      return v2;
    case 41:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFB30;
      goto LABEL_59;
    case 42:
      v5 = (XlAutoFilterTable *)operator new(0x20uLL);
      v2 = v5;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = &off_24F3AFB68;
      goto LABEL_59;
    case 43:
      v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlRowBlock::XlRowBlock(v2);
      goto LABEL_64;
    case 44:
      v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlRowProperties::XlRowProperties(v2);
      goto LABEL_64;
    case 45:
      v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlScenarioTable::XlScenarioTable(v2);
      goto LABEL_64;
    case 46:
      v2 = (XlAutoFilterTable *)operator new(0x18uLL);
      XlSheetBackgroundInfo::XlSheetBackgroundInfo(v2);
      goto LABEL_64;
    case 47:
      v2 = (XlAutoFilterTable *)operator new(0x10uLL);
      XlSheetInfo::XlSheetInfo(v2);
      goto LABEL_64;
    case 48:
      v5 = (XlAutoFilterTable *)operator new(0x28uLL);
      v2 = v5;
      *((_QWORD *)v5 + 3) = 0;
      *((_QWORD *)v5 + 4) = 0;
      *((_QWORD *)v5 + 2) = 0;
LABEL_50:
      v6 = (void (**)(XlCustomView *__hidden))(v8 + 16);
LABEL_59:
      *(_QWORD *)v5 = v6;
      *((_QWORD *)v5 + 1) = 0;
      return v2;
    case 49:
      v2 = (XlAutoFilterTable *)operator new(0x40uLL);
      XlSheetPresentation::XlSheetPresentation((XlSheetPresentation *)v2);
      goto LABEL_64;
    case 50:
      v2 = (XlAutoFilterTable *)operator new(0x28uLL);
      XlSheetPresentationTable::XlSheetPresentationTable(v2);
      goto LABEL_64;
    case 52:
      v2 = (XlAutoFilterTable *)operator new(0xA0uLL);
      XlSortInfo::XlSortInfo(v2);
      goto LABEL_64;
    case 53:
      v2 = (XlAutoFilterTable *)operator new(0x30uLL);
      XlStringTable::XlStringTable(v2);
      goto LABEL_64;
    case 54:
      v2 = (XlAutoFilterTable *)operator new(0x200uLL);
      XlStyleTable::XlStyleTable(v2);
      goto LABEL_64;
    case 55:
      v2 = (XlAutoFilterTable *)operator new(0xA8uLL);
      XlSubstreamProperties::XlSubstreamProperties(v2);
      goto LABEL_64;
    case 56:
      v2 = (XlAutoFilterTable *)operator new(0x90uLL);
      XlWorksheetProperties::XlWorksheetProperties(v2);
      goto LABEL_64;
    case 57:
      v2 = (XlAutoFilterTable *)operator new(0x20uLL);
      XlWorksheetProtection::XlWorksheetProtection(v2);
LABEL_64:
      if (!v2)
        goto LABEL_65;
      return v2;
    default:
      ChLogFunction("Unknown object type passed to XlObjectFactory\n", 1, 2, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/ObjectModel/XlObjectFactory.cpp", 149);
LABEL_65:
      ChLogFunction("invalid object type", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/ObjectModel/XlObjectFactory.cpp", 153);
      return 0;
  }
}

void sub_22A1B31D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlDocumentPresentation::XlDocumentPresentation(XlDocumentPresentation *this)
{
  *(_QWORD *)this = &off_24F3AF2E8;
  *((_DWORD *)this + 2) = 0x10000;
  *((_BYTE *)this + 12) = 1;
  *(_QWORD *)((char *)this + 14) = 0x2D000002580000;
  *(_DWORD *)((char *)this + 22) = 937836120;
  *(_DWORD *)((char *)this + 26) = 16842752;
}

void XlWindow1::XlWindow1(XlWindow1 *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEC30;
  *(_QWORD *)(v2 + 16) = 0x3E58002D00000000;
  *(_WORD *)(v2 + 24) = 14310;
  *(_DWORD *)(v2 + 26) = 16842752;
  *(_BYTE *)(v2 + 30) = 1;
  *(_DWORD *)(v2 + 32) = 0x10000;
  *(_WORD *)(v2 + 36) = 600;
}

uint64_t XlDocumentPresentation::setTabSelectInfo(uint64_t this, __int16 a2, __int16 a3)
{
  _DWORD *exception;

  if (*(__int16 *)(this + 8) < 0 || *(__int16 *)(this + 10) <= 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  *(_WORD *)(this + 8) = a2;
  *(_WORD *)(this + 10) = a3;
  return this;
}

void XlChangeHistory::appendChangeLogEntry(XlChangeHistory *this, XlRecord *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 1);
    v19 = (char *)*((_QWORD *)this + 2);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v17;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 2) = v8;
}

void XlWindow1::~XlWindow1(XlWindow1 *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlConditionalFormatTable::at(XlConditionalFormatTable *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2
    || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

void XlDocumentPresentationTable::~XlDocumentPresentationTable(XlDocumentPresentationTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AF328;
  XlChangeHistory::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlDocumentPresentationTable::~XlDocumentPresentationTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlDocumentPresentation::~XlDocumentPresentation(XlDocumentPresentation *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1B377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector((void **)va1);
  OcText::~OcText((OcText *)va);

  _Unwind_Resume(a1);
}

void XlFontTable::XlFontTable(XlFontTable *this)
{
  OcText *v2;

  *(_QWORD *)this = &off_24F3A7BC8;
  OcText::OcText((OcText *)((char *)this + 8));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_WORD *)this + 28) = 320;
  OcText::setBuffer(v2, "V", 8, 1);
  *((_DWORD *)this + 6) = 7;
}

void sub_22A1B3864(_Unwind_Exception *a1)
{
  OcText *v1;
  void **v2;

  CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(v2);
  OcText::~OcText(v1);
  _Unwind_Resume(a1);
}

OcText *OcText::setBuffer(OcText *a1, char *a2, int a3, int a4)
{
  OcText *result;

  result = OcText::setBuffer(a1, a2, 2 * a3);
  a1->var1 = a4;
  return result;
}

XlFont *XlBinaryReader::read(XlBinaryReader *this, XlFontTable *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  XlFont *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlFont *result;
  XlHeader v12;
  XlFont *v13;

  XlHeader::XlHeader(&v12);
  CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 8);
  v5 = *((_QWORD *)this + 43);
  v4 = *((_QWORD *)this + 44);
  if (((v4 - v5) & 0x3FFFFFFFCLL) != 0)
  {
    v6 = 0;
    do
    {
      v7 = *(unsigned int *)(v5 + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v7, 0);
        while (1)
        {
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((_BYTE *)this + 1320));
          if (((unsigned __int16)v12.var1 | 0x200) != 0x231)
            break;
          v8 = (XlFont *)operator new(0x38uLL);
          XlFont::XlFont(v8, &v12);
          *((_QWORD *)this + 163) = v8;
          (*(void (**)(_QWORD, XlFont *))(**((_QWORD **)this + 167) + 280))(*((_QWORD *)this + 167), v8);
          v13 = v8;
          CsSimpleHeapVector<XlRecord>::pushBack((void **)a2 + 8, (uint64_t *)&v13);
          if (v13)
            (*((void (**)(XlFont *))v13->var0 + 1))(v13);
          *((_QWORD *)this + 163) = 0;
        }
        v9 = *((_QWORD *)this + 164);
        RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
        v5 = *((_QWORD *)this + 43);
        v4 = *((_QWORD *)this + 44);
      }
      ++v6;
    }
    while (v6 < ((unint64_t)(v4 - v5) >> 2));
  }
  result = (XlFont *)XlFontTable::size(a2);
  if (!(_DWORD)result)
    return XlFontTable::setDefault(a2);
  return result;
}

void sub_22A1B39F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void XlFont::XlFont(XlFont *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AC620;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 2147418112;
  *(_WORD *)(v2 + 28) = 400;
  *(_DWORD *)(v2 + 44) = 0;
  *(_WORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFont *a2)
{
  int v4;
  unsigned int var0;
  int16x8_t v6;
  unsigned int v7;
  signed __int16 v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  XlString *v15;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  var0 = a2->var1.var0;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v6 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var7 = v7 & 1;
  a2->var12 = (v7 & 0x20) != 0;
  v6.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v7) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)&a2->var8 = vmovn_s16(v6).u32[0];
  if (!a2->var1.var2)
  {
    a2->var4 = -1;
    goto LABEL_8;
  }
  a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (a2->var1.var2 < 5u)
  {
LABEL_8:
    a2->var5 = 400;
    a2->var6 = 0;
    a2->var13 = 0;
    *(_WORD *)&a2->var14 = 0;
    goto LABEL_9;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  if (v10 == 35)
    v11 = 1;
  else
    v11 = v10;
  a2->var5 = v8;
  a2->var6 = v9;
  a2->var13 = v11;
  a2->var14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 1, 1);
LABEL_9:
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  if (v12)
  {
    v13 = v12;
    if (a2->var1.var2 < 9u)
      v14 = 0;
    else
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((_QWORD *)this + 4) = v15;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v13, v14, var0 + v4, v15);
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1B3C8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlFontTable::size(XlFontTable *this)
{
  uint64_t v1;

  v1 = (*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3;
  if (v1 <= 4)
    return v1;
  else
    return (v1 + 1);
}

uint64_t XlFontTable::at(XlFontTable *this, unsigned int a2)
{
  uint64_t v2;

  if (a2 > 3)
  {
    --a2;
    v2 = *((_QWORD *)this + 8);
    if (a2 < ((unint64_t)(*((_QWORD *)this + 9) - v2) >> 3))
      return *(_QWORD *)(v2 + 8 * a2);
LABEL_5:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  v2 = *((_QWORD *)this + 8);
  if (((unint64_t)(*((_QWORD *)this + 9) - v2) >> 3) <= a2)
    goto LABEL_5;
  return *(_QWORD *)(v2 + 8 * a2);
}

void sub_22A1B3E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1B3F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B40E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B41B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B4238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **CsSimpleHeapVector<XlFont>::~CsSimpleHeapVector(void **a1)
{
  void *v2;

  CsSimpleHeapVector<XlRecord>::clear(a1);
  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void XlFont::~XlFont(XlFont *this)
{
  XlString *var2;

  this->var0 = (void **)&off_24F3AC620;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlString *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
  JUMPOUT(0x22E2DD408);
}

{
  XlString *var2;

  this->var0 = (void **)&off_24F3AC620;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlString *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
}

void sub_22A1B4540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlContentFormatTable::XlContentFormatTable(XlContentFormatTable *this)
{
  uint64_t v2;
  OcText *v3;
  OcText *v4;
  unint64_t i;
  unsigned int v6;
  char *BuiltInFmtString;
  unsigned int v8;

  v2 = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24F3A7B78;
  v3 = (OcText *)((char *)this + 32);
  do
  {
    OcText::OcText((OcText *)((char *)this + v2 + 32));
    v2 += 48;
  }
  while (v2 != 1728);
  for (i = 0; i != 36; ++i)
  {
    if (i >= 0x17)
      v6 = i + 14;
    else
      v6 = i;
    BuiltInFmtString = XlContentFormatTable::getBuiltInFmtString((uint64_t)v4, v6);
    v8 = strlen(BuiltInFmtString);
    v4 = OcText::setBuffer(v3, BuiltInFmtString, v8 + 1);
    v3->var3 = v8;
    v3->var1 = 1252;
    ++v3;
  }
}

void sub_22A1B4660(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t i;

  for (i = 214; i != -2; i -= 6)
    OcText::~OcText((OcText *)&v1[i]);
  *v1 = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
  _Unwind_Resume(a1);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlContentFormatTable *a2)
{
  void **v4;
  _QWORD *result;
  XlFormat *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlHeader v11;
  uint64_t v12;

  XlHeader::XlHeader(&v11);
  v4 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 42) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    while (((unsigned __int16)v11.var1 | 0x400) == 0x41E)
    {
      v6 = (XlFormat *)operator new(0x20uLL);
      XlFormat::XlFormat(v6, &v11);
      *((_QWORD *)this + 163) = v6;
      v7 = *((_QWORD *)this + 167);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 288))(v7, v8);
      v12 = *((_QWORD *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    }
    v9 = *((_QWORD *)this + 164);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_22A1B47FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void XlFormat::XlFormat(XlFormat *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AC6A0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFormat *a2)
{
  XlString *v4;
  SsrwOOStream *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  _BYTE *v10;
  XlString *v11;
  unsigned int v13;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (a2->var1.var2 < 3u)
  {
    v7 = -1;
  }
  else
  {
    a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (a2->var1.var2 >= 9u)
    {
      v4 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v4);
      *((_QWORD *)this + 4) = v4;
      v5 = (SsrwOOStream *)*((_QWORD *)this + 2);
      v6 = (*((uint64_t (**)(SsrwOOStream *))v5->var0 + 5))(v5);
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v5, a2->var1.var0 + v6, *((XlString **)this + 4));
      goto LABEL_9;
    }
    v7 = -3;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v9 = a2->var1.var0 + v7;
  v13 = v9;
  if (v9)
  {
    v10 = operator new[](v9 + 1);
    *((_QWORD *)this + 3) = v10;
    v10[v9] = 0;
    (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v13);
  }
  v11 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v11);
  *((_QWORD *)this + 4) = v11;
  XlString::takeString((uint64_t)v11, *((char **)this + 3), v13 + 1, v8, 0);
  *((_QWORD *)this + 3) = 0;
LABEL_9:
  XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
  *((_QWORD *)this + 4) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1B49C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlStringParser::parse(XlStringParser *this, SsrwOOStream *a2, int a3, XlString *a4)
{
  unsigned int v8;
  char v9;

  XlString::reset(a4);
  v8 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 10))(a2);
  v9 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 8))(a2);
  return XlStringParser::parse(this, a2, v8, v9, a3, a4) + 3;
}

void sub_22A1B4B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1B4CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t OcText::OcText(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  char isSingleByteEncoding;

  *(_QWORD *)a1 = &off_24F3A64A0;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  if (!a3 || (v6 = *(_DWORD *)(a2 + 8), v6 == a3))
  {
    v8 = *(const unsigned __int8 **)(a2 + 24);
    isSingleByteEncoding = OcText::isSingleByteEncoding(a3);
    OcText::copyBuffer((OcText *)a1, v8, v5 << (isSingleByteEncoding ^ 1));
  }
  else
  {
    v7 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v7)
      OcText::convert((unsigned __int16 **)(a1 + 24), *(char **)(a2 + 24), a3, v6, v7);
  }
  return a1;
}

size_t OcText::convert(unsigned __int16 **a1, char *__s, int a3, int a4, uint64_t a5)
{
  size_t v5;
  unsigned int v7;
  uint64_t v10;
  unsigned __int16 *v11;

  v5 = 0xFFFFFFFFLL;
  if (a1 && __s)
  {
    v7 = a5;
    if (a4 == a3)
    {
      *a1 = (unsigned __int16 *)__s;
      return a5;
    }
    else if (a3 == 1
           && (v10 = 2 * ChMapTextByCharacterEncoding2(a4, __s, a5, 0, 0, 1), (_DWORD)v10)
           && (v5 = (v10 + 2), (v11 = (unsigned __int16 *)operator new[](v5)) != 0))
    {
      ChMapTextByCharacterEncoding2(a4, __s, v7, v11, v5 >> 1, 1);
      *((_BYTE *)v11 + v10) = 0;
      *((_BYTE *)v11 + (v10 | 1)) = 0;
      *a1 = v11;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t ChMapTextByCharacterEncoding2(int a1, char *__s, unsigned int a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  unsigned __int16 *v6;
  unsigned int v7;
  char *v9;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;

  if (__s)
  {
    v6 = a4;
    v7 = a3;
    if (!a4)
      return v7;
    v9 = __s;
    if (a3 == -1)
      v7 = strlen(__s);
    if (v7)
    {
      v11 = v7;
      v12 = v6;
      do
      {
        v13 = *v9++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if (a1 == 1252 || a1 == 3)
      ChConvertANSICharactersToUnicode(v6, v7);
    if (a6)
      v14 = v7;
    else
      v14 = 0;
    if (v7 && (a6 & 1) == 0)
    {
      v15 = v7;
      do
      {
        v16 = *v6;
        if (v16 < 0x20 || v16 == 127)
        {
          v17 = v16 > 0xD;
          v18 = (1 << v16) & 0x2E00;
          if (v17 || v18 == 0)
            *v6 = -3;
        }
        ++v6;
        --v15;
      }
      while (v15);
      return v7;
    }
  }
  else
  {
    return 0;
  }
  return v14;
}

void sub_22A1B5054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B50C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B5164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B51E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B5290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B5324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlContentFormatTable::~XlContentFormatTable(void **this)
{
  uint64_t i;

  *this = &off_24F3A7B78;
  for (i = 214; i != -2; i -= 6)
    OcText::~OcText((OcText *)&this[i]);
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  XlContentFormatTable::~XlContentFormatTable(this);
  JUMPOUT(0x22E2DD408);
}

void **CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(void **a1)
{
  void *v2;

  CsSimpleHeapVector<XlRecord>::clear(a1);
  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void XlFormat::~XlFormat(XlFormat *this)
{
  XlString *var2;

  this->var0 = (void **)&off_24F3AC6A0;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlString *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
  JUMPOUT(0x22E2DD408);
}

{
  XlString *var2;

  this->var0 = (void **)&off_24F3AC6A0;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlString *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
}

void sub_22A1B5838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 120) = &off_24F3A7A80;
  CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(a9);

  _Unwind_Resume(a1);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlCellFormatTable *a2)
{
  void **v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;
  XlXf *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlHeader v11;
  XlXf *v12;

  XlHeader::XlHeader(&v11);
  v4 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear(v4);
  v6 = *((_QWORD *)this + 40);
  if (((*((_QWORD *)this + 41) - v6) & 0x3FFFFFFFCLL) != 0)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *(unsigned int *)(v6 + 4 * v7), 0);
      while (1)
      {
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
        if (v11.var1 != 1091 && v11.var1 != 224)
          break;
        v8 = (XlXf *)operator new(0x60uLL);
        XlXf::XlXf(v8, &v11);
        *((_QWORD *)this + 163) = v8;
        (*(void (**)(_QWORD, XlXf *))(**((_QWORD **)this + 167) + 432))(*((_QWORD *)this + 167), v8);
        v12 = v8;
        CsSimpleHeapVector<XlRecord>::pushBack(v4, (uint64_t *)&v12);
        if (v12)
          (*((void (**)(XlXf *))v12->var0 + 1))(v12);
        *((_QWORD *)this + 163) = 0;
      }
      v9 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
      ++v7;
      v6 = *((_QWORD *)this + 40);
    }
    while (v7 < ((unint64_t)(*((_QWORD *)this + 41) - v6) >> 2));
  }
  return result;
}

void sub_22A1B5A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

void XlXf::XlXf(XlXf *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AEDF0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 24) = 0x200000000;
  *(_WORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 36) = 0u;
  *(_OWORD *)(v2 + 52) = 0u;
  *(_QWORD *)(v2 + 67) = 0;
  *(_WORD *)(v2 + 75) = 1;
  *(_BYTE *)(v2 + 77) = 1;
  *(_QWORD *)(v2 + 78) = 0;
  *(_DWORD *)(v2 + 86) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlXf *a2)
{
  unsigned __int16 v4;
  unsigned int v5;
  unsigned int var2;
  unsigned __int16 v7;
  int16x8_t v8;
  int16x8_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned int v19;
  _DWORD *exception;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (a2->var1.var2 <= 7u)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8003;
  }
  a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var24 = v4 & 1;
  a2->var25 = (v4 & 2) != 0;
  a2->var26 = (v4 & 4) != 0;
  a2->var27 = (v4 & 8) != 0;
  a2->var4 = v4 >> 4;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var28 = (v5 & 8) != 0;
  a2->var5 = v5 & 7;
  a2->var6 = (v5 >> 4) & 7;
  a2->var29 = (v5 & 0x80) != 0;
  var2 = a2->var1.var2;
  if (var2 < 9)
  {
    if (var2 >= 5)
    {
      v11 = (v5 >> 8) & 3;
      if (v11 == 1)
        v11 = 255;
      if (v11 == 2)
        v11 = 90;
      if (v11 == 3)
        LOBYTE(v11) = -76;
      a2->var7 = v11;
      a2->var8 = 0;
      *(_WORD *)&a2->var30 = 0;
      a2->var9 = 0;
    }
  }
  else
  {
    a2->var7 = BYTE1(v5);
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    a2->var8 = v7 & 0xF;
    a2->var30 = (v7 & 0x10) != 0;
    a2->var31 = (v7 & 0x20) != 0;
    a2->var9 = v7 >> 6;
    if (a2->var26)
    {
      v9 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v7), (int8x16_t)xmmword_22A4C4080));
      *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
      *(_DWORD *)&a2->var32 = vmovn_s16(v9).u32[0];
      a2->var36 = (v7 & 0x4000) == 0;
      v10 = (v7 >> 15) ^ 1;
    }
    else
    {
      v8.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(v7), (uint16x4_t)0xFFF3FFF4FFF5FFF6) & 0xFFC1FFC1FFC1FFC1;
      *(_DWORD *)&a2->var32 = vmovn_s16(v8).u32[0];
      a2->var36 = (v7 & 0x4000) != 0;
      v10 = v7 >> 15;
    }
    a2->var37 = v10;
  }
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v13 = a2->var1.var2;
  if (v13 < 9)
  {
    if (v13 >= 5)
    {
      a2->var22 = v12 & 0x7F;
      a2->var23 = (v12 >> 7) & 0x7F;
      a2->var38 = (v12 & 0x4000) != 0;
      v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      a2->var11 = v17 & 0x3F;
      a2->var14 = (v17 >> 6) & 7;
      a2->var19 = (unsigned __int16)v17 >> 9;
      v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      a2->var15 = v18 & 7;
      *(int8x8_t *)&a2->var12 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v18), (uint32x2_t)0xFFFFFFFAFFFFFFFDLL), (int8x8_t)0x700000007);
      a2->var20 = v18 >> 9;
      v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      a2->var17 = v19 & 0x7F;
      a2->var18 = (v19 >> 7) & 0x7F;
    }
  }
  else
  {
    a2->var12 = v12 & 0xF;
    a2->var13 = v12 >> 4;
    a2->var14 = (unsigned __int16)v12 >> 12;
    a2->var15 = (v12 >> 8) & 0xF;
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    a2->var17 = v14 & 0x7F;
    a2->var18 = (v14 >> 7) & 0x7F;
    a2->var10 = (unsigned __int16)v14 >> 14;
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    a2->var20 = v15 & 0x7F;
    a2->var19 = (v15 >> 7) & 0x7F;
    a2->var21 = (v15 >> 14) & 0x7F;
    a2->var16 = (v15 >> 21) & 0xF;
    a2->var11 = v15 >> 26;
    v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    a2->var22 = v16 & 0x7F;
    a2->var23 = (v16 >> 7) & 0x7F;
    a2->var38 = (v16 & 0x4000) != 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlStyleTable::XlStyleTable(XlStyleTable *this)
{
  uint64_t v2;
  OcText *v3;

  v2 = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24F3A7AB8;
  v3 = (OcText *)((char *)this + 32);
  do
  {
    OcText::OcText((OcText *)((char *)this + v2 + 32));
    v2 += 48;
  }
  while (v2 != 480);
  OcText::setBuffer(v3, "Normal", 7u);
  *((_DWORD *)this + 12) = 6;
  *((_DWORD *)this + 10) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 80), "RowLevel_n", 0xBu);
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 22) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 128), "ColLevel_n", 0xBu);
  *((_DWORD *)this + 36) = 10;
  *((_DWORD *)this + 34) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 176), "Comma", 6u);
  *((_DWORD *)this + 48) = 5;
  *((_DWORD *)this + 46) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 224), "Currency", 9u);
  *((_DWORD *)this + 60) = 8;
  *((_DWORD *)this + 58) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 272), "Percent", 8u);
  *((_DWORD *)this + 72) = 7;
  *((_DWORD *)this + 70) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 320), "Comma[0]", 9u);
  *((_DWORD *)this + 84) = 8;
  *((_DWORD *)this + 82) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 368), "Currency[0]", 0xCu);
  *((_DWORD *)this + 96) = 11;
  *((_DWORD *)this + 94) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 416), "Hyperlink", 0xAu);
  *((_DWORD *)this + 108) = 9;
  *((_DWORD *)this + 106) = 1252;
  OcText::setBuffer((OcText *)((char *)this + 464), "Followed Hyperlink", 0x13u);
  *((_DWORD *)this + 120) = 18;
  *((_DWORD *)this + 118) = 1252;
}

void sub_22A1B5FB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t i;

  for (i = 58; i != -2; i -= 6)
    OcText::~OcText((OcText *)&v1[i]);
  *v1 = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
  _Unwind_Resume(a1);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlStyleTable *a2)
{
  void **v4;
  _QWORD *result;
  XlStyle *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlHeader v11;
  uint64_t v12;

  XlHeader::XlHeader(&v11);
  v4 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 47) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    while (v11.var1 == 659)
    {
      v6 = (XlStyle *)operator new(0x28uLL);
      XlStyle::XlStyle(v6, &v11);
      *((_QWORD *)this + 163) = v6;
      v7 = *((_QWORD *)this + 167);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 168))(v7, v8);
      v12 = *((_QWORD *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    }
    v9 = *((_QWORD *)this + 164);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_22A1B6158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void XlStyle::XlStyle(XlStyle *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE170;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = -1;
  *(_DWORD *)(v2 + 28) = 0;
  *(_WORD *)(v2 + 32) = 256;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlStyle *a2)
{
  int v4;
  int v5;
  int v6;
  XlString *v7;
  unsigned int v8;
  XlStyleTable *v9;
  int v10;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 33) = (v6 & 0x8000) != 0;
  *((_WORD *)a2 + 12) = v6 & 0xFFF;
  if (v6 < 0)
  {
    v9 = (XlStyleTable *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v10 = (int)v9;
    if (!XlStyleTable::isValidBuiltInStyleID(v9))
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 3002;
    }
    *((_DWORD *)a2 + 7) = v10;
    *((_BYTE *)a2 + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  }
  else
  {
    v7 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v7);
    v8 = v5 + v4;
    *((_QWORD *)this + 4) = v7;
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2)) + 3 < v8)
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, *((XlString **)this + 4));
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1B6304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlCellFormatTable::isStyle(XlCellFormatTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 8 * a2) + 77);
}

void sub_22A1B63E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B64B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlStyleTable::getName(XlStyleTable *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  v3 = *(_QWORD *)(v2 + 8 * a2);
  if (*(_BYTE *)(v3 + 33))
    return (uint64_t)this + 48 * *(unsigned int *)(v3 + 28) + 32;
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return v5 + 8;
}

uint64_t XlCellFormatTable::getParentCellFormat(XlCellFormatTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(__int16 *)(*(_QWORD *)(v2 + 8 * a2) + 20);
}

uint64_t XlRecord::XlRecord(uint64_t a1, const XlHeader *a2)
{
  *(_QWORD *)a1 = off_24F3AD590;
  XlHeader::XlHeader((XlHeader *)(a1 + 8), a2 + 1);
  return a1;
}

void sub_22A1B66E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B6878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1B6AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1B6B68()
{
  JUMPOUT(0x22A1B6B44);
}

void sub_22A1B6B70()
{
  JUMPOUT(0x22A1B6B50);
}

void sub_22A1B6BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B6C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B6CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B6DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A1B6E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B6EF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B6F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1B7024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1B70B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B713C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B71BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B72A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1B7348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1B73E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1B7484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1B7580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1B75F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B76A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1B7A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B7B10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B7C50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B7D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B7E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlStyleTable::~XlStyleTable(void **this)
{
  uint64_t i;

  *this = &off_24F3A7AB8;
  for (i = 58; i != -2; i -= 6)
    OcText::~OcText((OcText *)&this[i]);
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

{
  XlStyleTable::~XlStyleTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlStyle::~XlStyle(XlStyle *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE170;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AE170;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void **CsSimpleHeapVector<XlXf>::~CsSimpleHeapVector(void **a1)
{
  void *v2;

  CsSimpleHeapVector<XlRecord>::clear(a1);
  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void XlXf::~XlXf(XlXf *this)
{
  JUMPOUT(0x22E2DD408);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlPivotInfoTable *a2)
{
  _QWORD *result;
  void **v5;
  XlHeader *v6;
  XlEof *v7;
  XlHeader *v8;
  XlEof *v9;
  uint64_t v10;
  int RecordDataOffset;
  XlHeader v12;
  uint64_t v13;

  result = XlChangeHistory::clear(a2);
  if ((*((_DWORD *)this + 49) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v12);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((_BYTE *)this + 1320));
    result = (_QWORD *)*((_QWORD *)this + 163);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    *((_QWORD *)this + 163) = 0;
    if (v12.var1 == 213)
    {
      do
      {
        v5 = (void **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 39);
        v7 = XlRecordFactory::createRecord(&v12, v6);
        *((_QWORD *)this + 163) = v7;
        (*(void (**)(XlEof *, _QWORD))(*(_QWORD *)v7 + 16))(v7, *((_QWORD *)this + 167));
        v13 = *((_QWORD *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v13);
        while (1)
        {
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          *((_QWORD *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((_BYTE *)this + 1320));
          if (v12.var1 == 133 || v12.var1 == 213 || v12.var1 == 352)
            break;
          v9 = XlRecordFactory::createRecord(&v12, v8);
          *((_QWORD *)this + 163) = v9;
          (*(void (**)(XlEof *, _QWORD))(*(_QWORD *)v9 + 16))(v9, *((_QWORD *)this + 167));
          v13 = *((_QWORD *)this + 163);
          CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v13);
        }
        XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v5);
      }
      while (v12.var1 == 213);
      v10 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 16))(v10, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 49) = -1;
    }
  }
  return result;
}

void sub_22A1B80B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_22A1B819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  XlColorTable::~XlColorTable((XlColorTable *)&a9);
  _Unwind_Resume(a1);
}

void XlColorTable::XlColorTable(XlColorTable *this)
{
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F3AEFD0;
  *((_DWORD *)this + 6) = 0;
}

double XlColorTable::init(XlColorTable *this)
{
  _OWORD *v2;
  double result;

  v2 = operator new[](0x20uLL);
  *((_QWORD *)this + 4) = v2;
  result = 7.29111854e-304;
  *v2 = xmmword_22A4C3930;
  v2[1] = xmmword_22A4C3940;
  return result;
}

void XlBinaryReader::read(XlBinaryReader *this, XlColorTable *a2)
{
  void *v4;
  double v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  XlHeader v9;

  if (*((int *)this + 252) < 1)
  {
    XlColorTable::setDefault(a2);
  }
  else
  {
    XlHeader::XlHeader(&v9);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *((unsigned int *)this + 252), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((_BYTE *)this + 1320));
    v4 = operator new(0x20uLL);
    XlPalette::XlPalette((XlPalette *)v4, &v9);
    *((_QWORD *)this + 163) = v4;
    if (v4)
    (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 144))(*((_QWORD *)this + 167), v4);
    v5 = XlColorTable::setColors(a2, *((int **)v4 + 2), *((_WORD *)v4 + 12));
    *((_BYTE *)v4 + 26) = 0;
    v6 = *((_QWORD *)this + 163);
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
    *((_QWORD *)this + 163) = 0;
  }
  if (*((int *)this + 253) >= 1)
  {
    XlHeader::XlHeader(&v9);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *((unsigned int *)this + 253), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((_BYTE *)this + 1320));
    v7 = operator new(0x20uLL);
    XlPaletteX::XlPaletteX((XlPaletteX *)v7, &v9);
    *((_QWORD *)this + 163) = v7;
    if (v7)
    (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 152))(*((_QWORD *)this + 167), v7);
    XlColorTable::setXColors(a2, *((int **)v7 + 2), *((_WORD *)v7 + 12));
    *((_BYTE *)v7 + 26) = 0;
    v8 = *((_QWORD *)this + 163);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_QWORD *)this + 163) = 0;
  }
}

void sub_22A1B83F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlColorTable::setDefault(XlColorTable *this)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 12) = 56;
  v3 = operator new[](0xE0uLL);
  *((_QWORD *)this + 1) = v3;
  *v3 = xmmword_22A4C3950;
  v3[1] = xmmword_22A4C3960;
  v3[2] = xmmword_22A4C3970;
  v3[3] = xmmword_22A4C3980;
  v3[4] = xmmword_22A4C3990;
  v3[5] = xmmword_22A4C39A0;
  v3[6] = xmmword_22A4C39B0;
  v3[7] = xmmword_22A4C39C0;
  v3[8] = xmmword_22A4C39D0;
  v3[9] = xmmword_22A4C39E0;
  v3[10] = xmmword_22A4C39F0;
  v3[11] = xmmword_22A4C3A00;
  result = 1.00566372e-306;
  v3[12] = xmmword_22A4C3A10;
  v3[13] = xmmword_22A4C3A20;
  *((_BYTE *)this + 40) = 1;
  return result;
}

void sub_22A1B8608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1B86E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlColorTable::~XlColorTable(XlColorTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F3AEFD0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 1) = 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8052888210);
  *((_QWORD *)this + 4) = 0;
}

{
  XlColorTable::~XlColorTable(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1B89E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x10B1C409D6E66E7);
  _Unwind_Resume(a1);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlSheetInfoTable *a2)
{
  void **v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  XlBoundSheet *v10;
  XlString *v11;
  uint64_t v12;
  XlBoundSheet *v13;

  v3 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)this + 20);
  if (v5)
  {
    v7 = v5 + 8;
    v6 = *(_QWORD *)(v5 + 8);
    if (((*(_QWORD *)(v7 + 8) - v6) & 0x7FFFFFFF8) != 0)
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + 8 * v8);
        v10 = (XlBoundSheet *)operator new(0x28uLL);
        XlBoundSheet::XlBoundSheet(v10);
        v11 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v11);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v9 + 32);
        *((_QWORD *)v10 + 3) = *(_QWORD *)(v9 + 24);
        v12 = *(_QWORD *)(v9 + 16);
        if (v12)
          XlString::operator=(v11, v12);
        XlChartPlot::takeChartFormat((uint64_t)v10, (uint64_t)v11);
        v13 = v10;
        CsSimpleHeapVector<XlRecord>::pushBack(v3, (uint64_t *)&v13);
        result = v13;
        if (v13)
          result = (_QWORD *)(*(uint64_t (**)(XlBoundSheet *))(*(_QWORD *)v13 + 8))(v13);
        ++v8;
        v6 = *(_QWORD *)(*((_QWORD *)this + 20) + 8);
      }
      while (v8 < ((unint64_t)(*(_QWORD *)(*((_QWORD *)this + 20) + 16) - v6) >> 3));
    }
  }
  return result;
}

void sub_22A1B8B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void XlBoundSheet::XlBoundSheet(XlBoundSheet *this)
{
  uint64_t v1;

  XlRecord::XlRecord(this, 133, 7, 9);
  *(_QWORD *)v1 = &off_24F3AB960;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

void XlRecord::XlRecord(XlRecord *this, __int16 a2, int a3, char a4)
{
  *(_QWORD *)this = off_24F3AD590;
  XlHeader::XlHeader((XlHeader *)this + 1);
  *((_WORD *)this + 6) = a2;
  *((_DWORD *)this + 2) = a3;
  *((_BYTE *)this + 14) = a4;
}

XlString *XlString::operator=(XlString *this, uint64_t a2)
{
  unint64_t v4;
  _WORD *v5;
  _WORD *v6;
  _WORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  XlPhoneticInfo *v23;

  if ((XlString *)a2 != this)
  {
    XlString::reset(this);
    OcText::operator=((uint64_t)this + 8, a2 + 8);
    *((_DWORD *)this + 22) = *(_DWORD *)(a2 + 88);
    XlString::clearRichText(this);
    if (((*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) & 0x7FFFFFFF8) != 0)
    {
      v4 = 0;
      do
      {
        v5 = operator new[](4uLL);
        v6 = v5;
        *((_QWORD *)this + 12) = v5;
        v7 = *(_WORD **)(*(_QWORD *)(a2 + 56) + 8 * v4);
        *v5 = *v7;
        v5[1] = v7[1];
        v9 = (_QWORD *)*((_QWORD *)this + 8);
        v8 = *((_QWORD *)this + 9);
        if ((unint64_t)v9 >= v8)
        {
          v11 = *((_QWORD *)this + 7);
          v12 = (unint64_t)v9 - v11;
          v13 = (v8 - v11) >> 3;
          v14 = 2 * v13;
          if (2 * (int)v13 <= (v12 >> 3) + 1)
            v14 = (v12 >> 3) + 1;
          if (v13 >= 0x7FFFFFFF)
            v15 = 0xFFFFFFFFLL;
          else
            v15 = v14;
          if ((_DWORD)v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 72, v15);
            v18 = v17;
            v6 = (_WORD *)*((_QWORD *)this + 12);
          }
          else
          {
            v16 = 0;
            v18 = 0;
          }
          v19 = &v16[v12 & 0x7FFFFFFF8];
          *(_QWORD *)v19 = v6;
          v10 = v19 + 8;
          v21 = (char *)*((_QWORD *)this + 7);
          v20 = (char *)*((_QWORD *)this + 8);
          if (v20 != v21)
          {
            do
            {
              v22 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v19 - 1) = v22;
              v19 -= 8;
            }
            while (v20 != v21);
            v20 = (char *)*((_QWORD *)this + 7);
          }
          *((_QWORD *)this + 7) = v19;
          *((_QWORD *)this + 8) = v10;
          *((_QWORD *)this + 9) = &v16[8 * v18];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v9 = v5;
          v10 = v9 + 1;
        }
        *((_QWORD *)this + 8) = v10;
        *((_QWORD *)this + 12) = 0;
        ++v4;
      }
      while (v4 < ((*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
    }
    if (*(_QWORD *)(a2 + 80))
    {
      v23 = (XlPhoneticInfo *)operator new(0x60uLL);
      XlPhoneticInfo::XlPhoneticInfo(v23);
      *((_QWORD *)this + 10) = v23;
      XlPhoneticInfo::operator=((uint64_t)v23, *(_QWORD *)(a2 + 80));
    }
  }
  return this;
}

void sub_22A1B8DBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlLinkTable *a2)
{
  _QWORD *result;
  int v5;
  uint64_t v6;
  XlLink *v7;
  XlExternSheet *v8;
  unsigned int v9;
  XlCoordList *v10;
  XlVertex *ExternRef;
  XlHeader v12;

  XlHeader::XlHeader(&v12);
  result = XlLinkTable::clear(a2);
  v5 = *((_DWORD *)this + 43);
  if ((v5 & 0x80000000) == 0)
  {
    *((_DWORD *)this + 45) = v5;
    if (v5)
    {
      do
      {
        v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 29);
        if (v6)
        {
          v7 = (XlLink *)v6;
          *(_BYTE *)(v6 + 28) = 0;
          (*(void (**)(XlBinaryReader *, uint64_t))(*(_QWORD *)this + 208))(this, v6);
          XlLinkTable::appendLink(a2, v7);
        }
      }
      while (*((int *)this + 45) > 0);
    }
    result = (_QWORD *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((_BYTE *)this + 1320));
    if (v12.var1 == 23)
    {
      v8 = (XlExternSheet *)operator new(0x30uLL);
      XlExternSheet::XlExternSheet(v8, &v12);
      *((_QWORD *)this + 163) = v8;
      if (v8)
      (*(void (**)(_QWORD, XlExternSheet *))(**((_QWORD **)this + 167) + 256))(*((_QWORD *)this + 167), v8);
      if (((*((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 6)) & 0x7FFF8) != 0)
      {
        v9 = 0;
        v10 = (XlLinkTable *)((char *)a2 + 8);
        do
        {
          ExternRef = (XlVertex *)XlExternSheet::getExternRef(v8, v9);
          XlCoordList::appendVertex(v10, ExternRef);
          ++v9;
        }
        while (v9 < (unsigned __int16)((*((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 6)) >> 3));
      }
      *((_BYTE *)v8 + 16) = 0;
      result = (_QWORD *)*((_QWORD *)this + 163);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      *((_QWORD *)this + 163) = 0;
    }
  }
  return result;
}

void sub_22A1B8F4C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *XlLinkTable::clear(XlLinkTable *this)
{
  XlLinkLookupTable::clearLookupTable((uint64_t)this + 8);
  return XlLinkTable::clearLinkTable(this);
}

uint64_t XlLinkLookupTable::clearLookupTable(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  if (*(_BYTE *)(this + 8))
  {
    v2 = *(_QWORD *)(this + 16);
    v3 = *(_QWORD *)(this + 24);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      v4 = 0;
      do
      {
        this = *(_QWORD *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x22E2DD408](this, 0x1000C40274DC3F3);
          v2 = *(_QWORD *)(v1 + 16);
          v3 = *(_QWORD *)(v1 + 24);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    v2 = *(_QWORD *)(this + 16);
  }
  *(_QWORD *)(v1 + 24) = v2;
  return this;
}

_QWORD *XlLinkTable::clearLinkTable(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[6];
  v3 = this[7];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[6];
        v3 = v1[7];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[7] = v2;
  return this;
}

void XlNameTable::XlNameTable(XlNameTable *this)
{
  uint64_t v2;

  v2 = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24F3A7D88;
  do
  {
    OcText::OcText((OcText *)((char *)this + v2 + 32));
    v2 += 48;
  }
  while (v2 != 672);
}

void sub_22A1B90F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  for (; v3; v3 -= 48)
    OcText::~OcText((OcText *)((char *)v1 + v3 - 16));
  *v1 = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
  _Unwind_Resume(a1);
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlNameTable *a2)
{
  void **v4;
  _QWORD *result;
  XlName *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlHeader v11;
  uint64_t v12;

  XlHeader::XlHeader(&v11);
  v4 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear(v4);
  if ((*((_DWORD *)this + 46) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    while (((unsigned __int16)v11.var1 | 0x200) == 0x218)
    {
      v6 = (XlName *)operator new(0x58uLL);
      XlName::XlName(v6, &v11);
      *((_QWORD *)this + 163) = v6;
      v7 = *((_QWORD *)this + 167);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 336))(v7, v8);
      v12 = *((_QWORD *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v4, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    }
    v9 = *((_QWORD *)this + 164);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_22A1B9270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t XlBinaryReader::getSheetNames(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 160);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8008;
  }
  return XlSheetInfoTable::getSheetNames(v2, a2);
}

uint64_t XlSheetInfoTable::getSheetNames(uint64_t result, uint64_t *a2)
{
  XlSheetInfoTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);
  uint64_t (***v7)(_QWORD);
  uint64_t (**v8)(_QWORD);
  BOOL v9;
  unsigned int v10;
  const OcText *v11;
  OcText *v12;
  uint64_t SheetName;
  unint64_t v14;

  v3 = (XlSheetInfoTable *)result;
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = (uint64_t (***)(_QWORD))(v4 - 48);
    v7 = (uint64_t (***)(_QWORD))(v4 - 48);
    do
    {
      v8 = *v7;
      v7 -= 6;
      result = (*v8)(v6);
      v9 = v6 == (uint64_t (***)(_QWORD))v5;
      v6 = v7;
    }
    while (!v9);
  }
  a2[1] = v5;
  if (((*((_QWORD *)v3 + 2) - *((_QWORD *)v3 + 1)) & 0x7FFFFFFF8) != 0)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v12);
      if (v11 != v12)
      {
        if (v11)
          (*((void (**)(const OcText *))v11->var0 + 1))(v11);
        v11 = v12;
      }
      SheetName = XlSheetInfoTable::getSheetName(v3, v10);
      OcText::operator=((uint64_t)v11, SheetName);
      v14 = a2[1];
      if (v14 >= a2[2])
      {
        result = std::vector<OcText,ChAllocator<OcText>>::__push_back_slow_path<OcText const&>(a2, v11);
      }
      else
      {
        OcText::OcText((OcText *)a2[1], v11);
        result = v14 + 48;
        a2[1] = v14 + 48;
      }
      a2[1] = result;
      ++v10;
    }
    while (v10 < ((*((_QWORD *)v3 + 2) - *((_QWORD *)v3 + 1)) >> 3));
    if (v11)
      return (*((uint64_t (**)(const OcText *))v11->var0 + 1))(v11);
  }
  return result;
}

void sub_22A1B9414(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v3;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(exception_object);
}

uint64_t XlSheetInfoTable::getSheetName(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * a2) + 16);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return v3 + 8;
}

double XlFormulaProcessor::XlFormulaProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)a1 = &off_24F3B0910;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)&result = 16;
  *(_QWORD *)(a1 + 72) = 16;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  return result;
}

void XlFormulaProcessor::init(XlFormulaProcessor *this, char a2)
{
  XlFormulaParser *v4;
  unsigned int v5;
  CsString *v6;
  unint64_t v7;
  CsString **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  CsString **v18;
  char *v19;
  char *v20;
  CsString *v21;
  _DWORD *exception;

  v4 = (XlFormulaParser *)operator new(0x58uLL);
  XlFormulaParser::XlFormulaParser(v4, a2);
  *((_QWORD *)this + 1) = v4;
  if (*((_DWORD *)this + 18))
  {
    v5 = 0;
    do
    {
      v6 = (CsString *)operator new(0x18uLL);
      CsString::CsString(v6);
      v8 = (CsString **)*((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 5);
      if ((unint64_t)v8 >= v7)
      {
        v10 = *((_QWORD *)this + 3);
        v11 = (unint64_t)v8 - v10;
        v12 = (v7 - v10) >> 3;
        v13 = 2 * v12;
        if (2 * (int)v12 <= (v11 >> 3) + 1)
          v13 = (v11 >> 3) + 1;
        if (v12 >= 0x7FFFFFFF)
          v14 = 0xFFFFFFFFLL;
        else
          v14 = v13;
        if ((_DWORD)v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 40, v14);
          v17 = v16;
        }
        else
        {
          v15 = 0;
          v17 = 0;
        }
        v18 = (CsString **)&v15[v11 & 0x7FFFFFFF8];
        *v18 = v6;
        v9 = v18 + 1;
        v20 = (char *)*((_QWORD *)this + 3);
        v19 = (char *)*((_QWORD *)this + 4);
        if (v19 != v20)
        {
          do
          {
            v21 = (CsString *)*((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v21;
          }
          while (v19 != v20);
          v19 = (char *)*((_QWORD *)this + 3);
        }
        *((_QWORD *)this + 3) = v18;
        *((_QWORD *)this + 4) = v9;
        *((_QWORD *)this + 5) = &v15[8 * v17];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      *((_QWORD *)this + 4) = v9;
      ++v5;
    }
    while (v5 < *((_DWORD *)this + 18));
    v4 = (XlFormulaParser *)*((_QWORD *)this + 1);
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1001;
  }
}

void sub_22A1B9638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFormulaParser::XlFormulaParser(XlFormulaParser *this, char a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 10;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 60) = -1;
  *((_DWORD *)this + 17) = 0;
  *((_BYTE *)this + 72) = a2;
  *((_BYTE *)this + 73) = 0;
  *((_DWORD *)this + 19) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 82) = 0;
}

void sub_22A1B98DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1B9A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1B9BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  XlStringTable::~XlStringTable((XlStringTable *)&a9);

  _Unwind_Resume(a1);
}

void XlStringTable::XlStringTable(XlStringTable *this)
{
  *(_QWORD *)this = &off_24F3AFE48;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
}

void XlBinaryReader::read(XlBinaryReader *this, XlStringTable *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  XlString *v8;

  v4 = *((unsigned __int8 *)a2 + 12);
  XlSxLi::clearTable(a2);
  v5 = *((_QWORD *)this + 19);
  if (v5)
  {
    if (v4)
    {
      if (!*((_DWORD *)a2 + 4))
        return;
      v6 = *((_DWORD *)a2 + 5);
      v7 = *(_DWORD *)(v5 + 160);
      if (v6 > v7)
        return;
    }
    else
    {
      v6 = 0;
      v7 = *(_DWORD *)(v5 + 160);
    }
    if (v6 < v7)
    {
      do
      {
        v8 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v8);
        XlString::setIndex(v8, v6);
        (*(void (**)(XlBinaryReader *, XlString *))(*(_QWORD *)this + 256))(this, v8);
        XlCrn::appendOperand(a2, (XlOper *)v8);
        if (v4 && *((_DWORD *)a2 + 4) == ((*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3))
          break;
        ++v6;
      }
      while (v6 < *(_DWORD *)(*((_QWORD *)this + 19) + 160));
    }
  }
}

void sub_22A1B9DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_22A1B9E2C()
{
  JUMPOUT(0x22A1B9E64);
}

void sub_22A1B9E34()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x22A1B9E64);
}

void sub_22A1B9E48()
{
  JUMPOUT(0x22A1B9E50);
}

_QWORD *XlSxLi::clearTable(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[3];
  v3 = this[4];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[3];
        v3 = v1[4];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[4] = v2;
  return this;
}

XlString *XlString::setIndex(XlString *this, int a2)
{
  *((_DWORD *)this + 22) = a2;
  return this;
}

XlStringExtractor *XlBinaryReader::read(XlBinaryReader *this, XlString *a2)
{
  int v2;
  XlStringExtractor *result;
  _DWORD *exception;

  v2 = *((_DWORD *)a2 + 22);
  if (v2 < 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  XlString::reset(a2);
  result = (XlStringExtractor *)*((_QWORD *)this + 19);
  if (result)
    return (XlStringExtractor *)XlStringExtractor::getString(result, v2, a2);
  return result;
}

uint64_t XlStringExtractor::getString(XlStringExtractor *this, int a2, XlString *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  _DWORD *exception;
  int v23;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    v23 = 1003;
    goto LABEL_23;
  }
  if (a2 < 0 || *((_DWORD *)this + 40) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v23 = 1005;
    goto LABEL_23;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v8 = *((unsigned int *)this + 38);
  v9 = a2 / (int)v8;
  v10 = a2 / (int)v8;
  v11 = *(_DWORD **)(*((_QWORD *)this + 3) + 16 * v10 + 8);
  if (v11)
    goto LABEL_10;
  if (v8 >> 30)
  {
    exception = __cxa_allocate_exception(4uLL);
    v23 = 1001;
LABEL_23:
    *exception = v23;
  }
  v11 = operator new[](4 * v8);
  v12 = *((_QWORD *)this + 3);
  *(_QWORD *)(v12 + 16 * v9 + 8) = v11;
  if (*((int *)this + 38) >= 2)
  {
    v13 = 1;
    do
      v11[v13++] = -1;
    while (v13 < *((int *)this + 38));
  }
  *v11 = *(_DWORD *)(v12 + 16 * v9);
LABEL_10:
  v14 = a2 % (int)v8;
  v15 = v11[v14];
  if ((_DWORD)v15 == -1)
  {
    XlStringExtractor::setStringLocation((uint64_t)this, v9, v14);
    v15 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * v9 + 8) + 4 * v14);
  }
  v16 = XlStringExtractor::tableChunkBoundary(this, v15);
  if (v16 < 0)
  {
    v15 = (v15 + 4);
    v16 = XlStringExtractor::tableChunkBoundary(this, v15);
  }
  v17 = v16;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v15, 0);
  v18 = XlStringParser::parse((XlStringExtractor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v17, a3);
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v7, 0);
  if (v14 < *((_DWORD *)this + 38) - 1)
  {
    v20 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * v10 + 8);
    if (*(_DWORD *)(v20 + 4 * (v14 + 1)) == -1)
    {
      v21 = v18 + v15;
      if (v18 + (_DWORD)v15 == v17)
        v21 = v18 + v15 + 4;
      *(_DWORD *)(v20 + 4 * (v14 + 1)) = v21;
    }
  }
  return result;
}

uint64_t XlStringExtractor::tableChunkBoundary(XlStringExtractor *this, int a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *exception;
  int v7;

  v2 = (int *)*((_QWORD *)this + 17);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    v7 = 1003;
LABEL_16:
    *exception = v7;
  }
  if (*v2 > a2)
    goto LABEL_14;
  v3 = *((_DWORD *)this + 36);
  if (v2[v3 - 1] < a2)
    goto LABEL_14;
  if (v3 >= 1)
  {
    v4 = 0;
    while (v2[v4] <= a2)
    {
      result = v2[v4 + 1];
      if ((int)result > a2)
        return result;
      v4 += 2;
      if (v3 <= (int)v4)
        goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  LODWORD(v4) = 0;
LABEL_11:
  if ((_DWORD)v4 == v3)
  {
LABEL_14:
    exception = __cxa_allocate_exception(4uLL);
    v7 = 1005;
    goto LABEL_16;
  }
  return 0xFFFFFFFFLL;
}

void XlCrn::appendOperand(XlCrn *this, XlOper *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 5);
  v4 = (char *)this + 40;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 3);
    v19 = (char *)*((_QWORD *)this + 4);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 3) = v17;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 4) = v8;
}

uint64_t XlStringTable::getDocumentStringCount(XlStringTable *this)
{
  if (*((_BYTE *)this + 12))
    return *((unsigned int *)this + 2);
  else
    return (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
}

uint64_t XlExternSheet::getExternRef(XlExternSheet *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 3);
  if (((unint64_t)(*((_QWORD *)this + 4) - v2) >> 3) <= a2
    || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

void XlStringTable::~XlStringTable(XlStringTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AFE48;
  XlSxLi::clearTable(this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  XlStringTable::~XlStringTable(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t XlBinaryReader::getSheetCount(XlBinaryReader *this)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 20);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8008;
  }
  return (*(_QWORD *)(v1 + 16) - *(_QWORD *)(v1 + 8)) >> 3;
}

void sub_22A1BA554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t XlSheetInfoTable::getSheetType(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned int *)(*(_QWORD *)(v2 + 8 * a2) + 28);
}

void sub_22A1BA6AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1BA800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1BA8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1BAA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t XlSheetInfoTable::getSheetHiddenState(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned int *)(*(_QWORD *)(v2 + 8 * a2) + 32);
}

void sub_22A1BAC74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1BAD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1BAD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::getRootStorage(XlBinaryReader *this)
{
  return *((_QWORD *)this + 3);
}

unsigned __int8 *`virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, OcSummary *a2)
{
  return OcBinaryReader::readSummary((OcBinaryReader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

void XlPivotInfoTable::~XlPivotInfoTable(XlPivotInfoTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AFC18;
  XlChangeHistory::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlPivotInfoTable::~XlPivotInfoTable(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1BAE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1BAEF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1BB000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1BB1FC(void *a1)
{
  void *v1;
  void *v2;

  objc_begin_catch(a1);
  objc_exception_rethrow();
}

void sub_22A1BB2FC()
{
  objc_end_catch();
  JUMPOUT(0x22A1BB304);
}

void sub_22A1BB378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1BB498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_DWORD *XlBinaryReader::setSheet(_DWORD *this, unsigned int a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t SheetLocation;
  XlBof *v6;
  int v7;
  unsigned int SheetType;
  _DWORD *exception;
  int v10;
  XlHeader v11;

  if (this[110] != a2)
  {
    v3 = this;
    (*(void (**)(_DWORD *))(*(_QWORD *)this + 664))(this);
    v4 = *((_QWORD *)v3 + 164);
    SheetLocation = XlSheetInfoTable::getSheetLocation(*((XlSheetInfoTable **)v3 + 20), a2);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, SheetLocation, 0);
    XlHeader::XlHeader(&v11);
    XlParserVisitor::getHeader(*((XlParserVisitor **)v3 + 167), &v11, *((_BYTE *)v3 + 1320));
    v6 = (XlBof *)operator new(0x28uLL);
    XlBof::XlBof(v6, &v11);
    (*(void (**)(_QWORD, XlBof *))(**((_QWORD **)v3 + 167) + 192))(*((_QWORD *)v3 + 167), v6);
    v3[288] = *((_DWORD *)v6 + 7);
    v7 = XlBof::verifyExcelVersion(v6);
    *((_BYTE *)v3 + 444) = v7;
    if (v7 == 9)
    {
      SheetType = XlSheetInfoTable::getSheetType(*((XlSheetInfoTable **)v3 + 20), a2);
      v3[112] = SheetType;
      if (SheetType < 2)
        goto LABEL_6;
      if (SheetType == 2)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 672))(v3);
        goto LABEL_8;
      }
      if (SheetType == 6)
      {
LABEL_6:
        XlBinaryReader::scanWorksheet((XlBinaryReader *)v3);
LABEL_8:
        v3[110] = a2;
        return (_DWORD *)(*(uint64_t (**)(XlBof *))(*(_QWORD *)v6 + 8))(v6);
      }
      exception = __cxa_allocate_exception(4uLL);
      v10 = 1009;
    }
    else
    {
      exception = __cxa_allocate_exception(4uLL);
      v10 = 8003;
    }
    *exception = v10;
  }
  return this;
}

void sub_22A1BB628(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void XlChartBinaryReader::resetWorksheet(XlChartBinaryReader *this)
{
  *((_QWORD *)this + 170) = *((_QWORD *)this + 169);
  XlSubstreamProperties::setDefault((XlChartBinaryReader *)((char *)this + 1376));
  XlBinaryReader::resetWorksheet(this);
}

void XlBinaryReader::resetWorksheet(XlBinaryReader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 46);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 46) = 0;
  v3 = *((_QWORD *)this + 47);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 47) = 0;
  v4 = *((_QWORD *)this + 48);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 48) = 0;
  XlWorksheetProperties::setDefault((XlBinaryReader *)((char *)this + 456));
  XlWorksheetProtection::setDefault((XlBinaryReader *)((char *)this + 600));
  XlSortInfo::setDefault((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::setDefault((uint64_t)this + 632);
  XlSubstreamProperties::setDefault((XlBinaryReader *)((char *)this + 1136));
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)((char *)this + 220) = v5;
  *((_DWORD *)this + 110) = -1;
  *((_DWORD *)this + 53) = -1;
  *((_QWORD *)this + 49) = -1;
  *((_DWORD *)this + 101) = -1;
  *((_WORD *)this + 200) = -1;
  *(_OWORD *)((char *)this + 236) = v5;
  *(_OWORD *)((char *)this + 252) = v5;
  *(_OWORD *)((char *)this + 268) = v5;
  *((_DWORD *)this + 71) = -1;
  *((_WORD *)this + 144) = 0;
  *((_BYTE *)this + 290) = 0;
  if (((*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) & 0x7FFFFFFF8) != 0)
    XlBinaryReader::clearWaitingCells(this);
  v6 = *((_QWORD *)this + 37);
  if (((*((_QWORD *)this + 38) - v6) & 0x3FFFFFFFCLL) != 0)
    *((_QWORD *)this + 38) = v6;
}

uint64_t XlSheetInfoTable::getSheetLocation(XlSheetInfoTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned int *)(*(_QWORD *)(v2 + 8 * a2) + 24);
}

XlBinaryReader *XlBinaryReader::scanWorksheet(XlBinaryReader *this)
{
  XlBinaryReader *result;
  signed __int16 var1;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  XlIndex *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  signed __int16 v15;
  uint64_t v16;
  unsigned int v17;
  XlPhoneticRun *ExternRef;
  unsigned int v19;
  XlLink *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  int v31;
  _BYTE v32[16];
  uint64_t v33;
  int v34;
  char v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  XlHeader v40;

  XlHeader::XlHeader(&v40);
  v40.var2 = *((_BYTE *)this + 444);
  v40.var1 = 2057;
  result = (XlBinaryReader *)XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
  var1 = v40.var1;
  while (var1 != 10)
  {
    if (var1 > 143)
    {
      if (var1 <= 433)
      {
        if (var1 > 228)
        {
          switch(var1)
          {
            case 229:
              v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              v7 = v6;
              v9 = (char *)*((_QWORD *)this + 38);
              v8 = *((_QWORD *)this + 39);
              if ((unint64_t)v9 >= v8)
              {
                v21 = (char *)*((_QWORD *)this + 37);
                v22 = v9 - v21;
                v23 = (unint64_t)(v9 - v21) >> 2;
                v24 = (v8 - (unint64_t)v21) >> 2;
                if (2 * (int)v24 <= (v23 + 1))
                  v25 = v23 + 1;
                else
                  v25 = 2 * v24;
                if (v24 >= 0x7FFFFFFF)
                  v26 = 0xFFFFFFFFLL;
                else
                  v26 = v25;
                if ((_DWORD)v26)
                {
                  v27 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 312, v26);
                  v29 = v28;
                  v21 = (char *)*((_QWORD *)this + 37);
                  v9 = (char *)*((_QWORD *)this + 38);
                }
                else
                {
                  v27 = 0;
                  v29 = 0;
                }
                v30 = &v27[v22 & 0x3FFFFFFFCLL];
                *(_DWORD *)v30 = v7;
                v10 = v30 + 4;
                while (v9 != v21)
                {
                  v31 = *((_DWORD *)v9 - 1);
                  v9 -= 4;
                  *((_DWORD *)v30 - 1) = v31;
                  v30 -= 4;
                }
                *((_QWORD *)this + 37) = v30;
                *((_QWORD *)this + 38) = v10;
                *((_QWORD *)this + 39) = &v27[4 * v29];
                if (v21)
                  operator delete(v21);
              }
              else
              {
                *(_DWORD *)v9 = v6;
                v10 = v9 + 4;
              }
              *((_QWORD *)this + 38) = v10;
              goto LABEL_147;
            case 230:
            case 231:
            case 232:
            case 234:
            case 235:
            case 238:
              goto LABEL_93;
            case 233:
              *((_DWORD *)this + 59) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_147;
            case 236:
              if ((*((_DWORD *)this + 324) & 0x80000000) != 0)
                *((_DWORD *)this + 324) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_147;
            case 237:
              if ((*((_DWORD *)this + 69) & 0x80000000) != 0)
                *((_DWORD *)this + 69) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_147;
            case 239:
              *((_DWORD *)this + 67) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_147;
            default:
              if (var1 == 426)
              {
                result = (XlBinaryReader *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
                *((_DWORD *)this + 66) = (_DWORD)result;
                v15 = v40.var1;
                do
                {
                  var1 = v15;
                  if (v15 != 426)
                    break;
                  do
                    XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
                  while (v40.var1 != 427);
                  result = (XlBinaryReader *)XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
                  var1 = v40.var1;
                  v15 = 426;
                }
                while (v40.var1 == 426);
                continue;
              }
              if (var1 != 432)
                goto LABEL_93;
              if ((*((_DWORD *)this + 65) & 0x80000000) != 0)
                *((_DWORD *)this + 65) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
          }
          goto LABEL_147;
        }
        if (var1 > 173)
        {
          switch(var1)
          {
            case 174:
              if ((*((_DWORD *)this + 63) & 0x80000000) != 0)
                *((_DWORD *)this + 63) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
            case 176:
              if ((*((_DWORD *)this + 58) & 0x80000000) != 0)
                *((_DWORD *)this + 58) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
            case 221:
              XlScenProtect::XlScenProtect((XlScenProtect *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1000))(*((_QWORD *)this + 167), v32);
              *((_BYTE *)this + 609) = v33;
              break;
            default:
              goto LABEL_93;
          }
        }
        else
        {
          switch(var1)
          {
            case 153:
              XlStandardWidth::XlStandardWidth((XlStandardWidth *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 160))(*((_QWORD *)this + 167), v32);
              *((_DWORD *)this + 117) = (unsigned __int16)v33;
              break;
            case 154:
            case 156:
            case 158:
            case 159:
            case 160:
              goto LABEL_93;
            case 155:
            case 157:
              if ((*((_DWORD *)this + 68) & 0x80000000) != 0)
                *((_DWORD *)this + 68) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              break;
            case 161:
              v12 = (char *)operator new(0x40uLL);
              XlSetup::XlSetup((XlSetup *)v12, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 1016))(*((_QWORD *)this + 167), v12);
              *(_QWORD *)((char *)this + 1218) = *((_QWORD *)v12 + 2);
              *((_WORD *)this + 613) = *((_WORD *)v12 + 12);
              *((_BYTE *)this + 1228) = v12[26];
              *((_DWORD *)this + 308) = *((_DWORD *)v12 + 7);
              *((_DWORD *)this + 309) = *((_DWORD *)v12 + 8);
              *((_WORD *)this + 620) = *((_WORD *)v12 + 18);
              *(_DWORD *)((char *)this + 1242) = *(_DWORD *)(v12 + 38);
              *((_OWORD *)this + 78) = *((_OWORD *)v12 + 3);
              *((_WORD *)this + 623) = *((_WORD *)v12 + 21);
              goto LABEL_146;
            default:
              if (var1 != 144)
                goto LABEL_93;
              XlSort::XlSort((XlSort *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1024))(*((_QWORD *)this + 167), v32);
              *((_DWORD *)this + 168) = v33;
              *((_BYTE *)this + 676) = BYTE4(v33);
              *((_BYTE *)this + 678) = BYTE5(v33);
              *((_BYTE *)this + 677) = BYTE6(v33);
              if (v37)
                OcText::operator=((uint64_t)this + 680, v37 + 8);
              if (v38)
                OcText::operator=((uint64_t)this + 728, v38 + 8);
              if (v39)
                OcText::operator=((uint64_t)this + 776, v39 + 8);
              XlSort::~XlSort((XlSort *)v32);
              break;
          }
        }
      }
      else if (var1 > 2056)
      {
        if (var1 <= 2161)
        {
          switch(var1)
          {
            case 2146:
              XlSheetTab::XlSheetTab((XlSheetTab *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1440))(*((_QWORD *)this + 167), v32);
              *((_WORD *)this + 250) = WORD2(v33);
              goto LABEL_147;
            case 2147:
            case 2148:
            case 2149:
              goto LABEL_93;
            case 2150:
              if ((*((_DWORD *)this + 70) & 0x80000000) != 0)
                *((_DWORD *)this + 70) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_147;
            case 2151:
              XlSheetProtection::XlSheetProtection((XlSheetProtection *)v32, &v40);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1448))(*((_QWORD *)this + 167), v32);
              *(_QWORD *)((char *)this + 611) = v33;
              *(_DWORD *)((char *)this + 619) = v34;
              *((_BYTE *)this + 623) = v35;
              *((_WORD *)this + 312) = v36;
              goto LABEL_147;
            case 2152:
              if ((*((_DWORD *)this + 62) & 0x80000000) != 0)
                *((_DWORD *)this + 62) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_147;
            default:
              if (var1 != 2057)
                goto LABEL_93;
              v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              v12 = (char *)operator new(0x28uLL);
              XlBof::XlBof((XlBof *)v12, &v40);
              (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 192))(*((_QWORD *)this + 167), v12);
              if (*((_DWORD *)v12 + 7) == 32
                && ((*(uint64_t (**)(XlBinaryReader *, uint64_t))(*(_QWORD *)this + 656))(this, v13) & 1) != 0)
              {
                goto LABEL_146;
              }
              while (v40.var1 != 10)
                XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
              if (v12)
                goto LABEL_146;
              goto LABEL_147;
          }
        }
        if (var1 != 2162)
        {
          if (var1 == 2241 || var1 == 2242)
          {
            *((_BYTE *)this + 288) = 1;
            goto LABEL_147;
          }
          goto LABEL_93;
        }
        if ((*((_DWORD *)this + 71) & 0x80000000) != 0)
          *((_DWORD *)this + 71) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
      }
      else if (var1 > 519)
      {
        if (var1 > 548)
        {
          if (var1 == 549)
          {
LABEL_59:
            XlDefaultRowHeight::XlDefaultRowHeight((XlDefaultRowHeight *)v32, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 56))(*((_QWORD *)this + 167), v32);
            *((_WORD *)this + 236) = WORD2(v33);
            *((_DWORD *)this + 121) = v33;
            goto LABEL_147;
          }
          if (var1 != 574)
            goto LABEL_93;
LABEL_57:
          if ((*((_DWORD *)this + 56) & 0x80000000) != 0)
            *((_DWORD *)this + 56) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        }
        else
        {
          if (var1 != 520)
          {
            if (var1 == 523)
            {
              v11 = (XlIndex *)operator new(0x28uLL);
              XlIndex::XlIndex(v11, &v40);
              *((_QWORD *)this + 46) = v11;
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 167) + 304))(*((_QWORD *)this + 167), *((_QWORD *)this + 46));
              *((_DWORD *)this + 289) = *(_DWORD *)(*((_QWORD *)this + 46) + 32);
              goto LABEL_147;
            }
LABEL_93:
            if (XlBinaryReader::isCell(result, &v40))
            {
              if ((*((_DWORD *)this + 98) & 0x80000000) != 0)
                *((_DWORD *)this + 98) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
            }
            goto LABEL_147;
          }
          if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            *((_DWORD *)this + 101) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        }
      }
      else
      {
        if (var1 > 441)
        {
          if (var1 == 442)
          {
            v12 = (char *)operator new(0x18uLL);
            XlCodeName::XlCodeName((XlCodeName *)v12, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 1472))(*((_QWORD *)this + 167), v12);
            v14 = *((_QWORD *)v12 + 2);
            if (v14)
              OcText::operator=((uint64_t)this + 552, v14 + 8);
            goto LABEL_146;
          }
          if (var1 == 512)
          {
            v12 = (char *)operator new(0x20uLL);
            XlDimensions::XlDimensions((XlDimensions *)v12, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 248))(*((_QWORD *)this + 167), v12);
            XlCellTableInfo::setDimensions((uint64_t)this + 1272, *((_DWORD *)v12 + 4), *((_DWORD *)v12 + 5), *((unsigned __int16 *)v12 + 12), *((unsigned __int16 *)v12 + 13));
LABEL_146:
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
            goto LABEL_147;
          }
          goto LABEL_93;
        }
        if (var1 == 434)
        {
          if ((*((_DWORD *)this + 60) & 0x80000000) != 0)
            *((_DWORD *)this + 60) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        }
        else
        {
          if (var1 != 440)
            goto LABEL_93;
          if ((*((_DWORD *)this + 64) & 0x80000000) != 0)
            *((_DWORD *)this + 64) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        }
      }
    }
    else if (var1 > 84)
    {
      if (var1 <= 98)
      {
        switch(var1)
        {
          case 'U':
            XlDefColWidth::XlDefColWidth((XlDefColWidth *)v32, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 240))(*((_QWORD *)this + 167), v32);
            *((_WORD *)this + 232) = v33;
            goto LABEL_147;
          case '_':
            XlSaveRecalc::XlSaveRecalc((XlSaveRecalc *)v32, &v40);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 976))(*((_QWORD *)this + 167), v32);
            *((_BYTE *)this + 660) = v33;
            goto LABEL_147;
          case 'a':
            *((_BYTE *)this + 489) = 1;
            goto LABEL_147;
        }
        goto LABEL_93;
      }
      switch(var1)
      {
        case 125:
          *((_DWORD *)this + 55) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
          break;
        case 126:
        case 127:
          goto LABEL_93;
        case 128:
          v12 = (char *)operator new(0x18uLL);
          XlGuts::XlGuts((XlGuts *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 712))(*((_QWORD *)this + 167), v12);
          *(_QWORD *)((char *)this + 476) = *((_QWORD *)v12 + 2);
          goto LABEL_146;
        case 129:
          v12 = (char *)operator new(0x20uLL);
          XlWsBool::XlWsBool((XlWsBool *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 1392))(*((_QWORD *)this + 167), v12);
          *((_BYTE *)this + 488) = v12[16];
          *(_QWORD *)((char *)this + 490) = *(_QWORD *)(v12 + 17);
          goto LABEL_146;
        case 130:
          XlGridSet::XlGridSet((XlGridSet *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 704))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 474) = v33;
          break;
        case 131:
          XlHCenter::XlHCenter((XlHCenter *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 720))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 1216) = v33;
          break;
        case 132:
          XlVCenter::XlVCenter((XlVCenter *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1352))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 1217) = v33;
          break;
        default:
          if (var1 != 99)
            goto LABEL_93;
          XlObjProtect::XlObjProtect((XlObjProtect *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 832))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 610) = v33;
          break;
      }
    }
    else
    {
      switch(var1)
      {
        case 12:
          XlCalcCount::XlCalcCount((XlCalcCount *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 496))(*((_QWORD *)this + 167), v32);
          *((_WORD *)this + 326) = v33;
          break;
        case 13:
          XlCalcMode::XlCalcMode((XlCalcMode *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 504))(*((_QWORD *)this + 167), v32);
          *((_DWORD *)this + 162) = v33;
          break;
        case 14:
        case 22:
        case 23:
        case 24:
        case 25:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
          goto LABEL_93;
        case 15:
          XlRefMode::XlRefMode((XlRefMode *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 952))(*((_QWORD *)this + 167), v32);
          *((_DWORD *)this + 164) = v33;
          break;
        case 16:
          XlDelta::XlDelta((XlDelta *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 584))(*((_QWORD *)this + 167), v32);
          *((_QWORD *)this + 80) = v33;
          break;
        case 17:
          XlIteration::XlIteration((XlIteration *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 776))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 654) = v33;
          break;
        case 18:
          XlProtect::XlProtect((XlProtect *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 920))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 608) = v33;
          break;
        case 19:
          XlPassword::XlPassword((XlPassword *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 856))(*((_QWORD *)this + 167), v32);
          *((_WORD *)this + 313) = v33;
          break;
        case 20:
          XlHdr::XlHdr((XlHdr *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 728))(*((_QWORD *)this + 167), v32);
          if (v33)
            XlPageProperties::setHeaderString((XlBinaryReader *)((char *)this + 1160), (OcText *)(v33 + 8));
          XlHdr::~XlHdr((XlHdr *)v32);
          break;
        case 21:
          v12 = (char *)operator new(0x18uLL);
          XlFooter::XlFooter((XlFooter *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 688))(*((_QWORD *)this + 167), v12);
          v16 = *((_QWORD *)v12 + 2);
          if (v16)
            XlPageProperties::setFooterString((XlBinaryReader *)((char *)this + 1160), (OcText *)(v16 + 8));
          goto LABEL_146;
        case 26:
          XlVerticalPageBreaks::XlVerticalPageBreaks((XlVerticalPageBreaks *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1360))(*((_QWORD *)this + 167), v32);
          if (((int)v37 - v34) << 13 >= 0x10000)
          {
            v17 = 0;
            do
            {
              ExternRef = (XlPhoneticRun *)XlExternSheet::getExternRef((XlExternSheet *)v32, v17);
              XlPhoneticInfo::appendRun((XlBinaryReader *)((char *)this + 456), ExternRef);
              ++v17;
            }
            while ((__int16)(((int)v37 - v34) >> 3) > (int)(unsigned __int16)v17);
          }
          LOBYTE(v33) = 0;
          XlVerticalPageBreaks::~XlVerticalPageBreaks((XlVerticalPageBreaks *)v32);
          break;
        case 27:
          XlHorizPageBreaks::XlHorizPageBreaks((XlHorizPageBreaks *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 752))(*((_QWORD *)this + 167), v32);
          if ((((_DWORD)v37 - v34) & 0x7FFF8) != 0)
          {
            v19 = 0;
            do
            {
              v20 = (XlLink *)XlExternSheet::getExternRef((XlExternSheet *)v32, v19);
              XlLinkTable::appendLink((XlBinaryReader *)((char *)this + 456), v20);
              ++v19;
            }
            while (v19 < (unsigned __int16)((v37 - v34) >> 3));
          }
          LOBYTE(v33) = 0;
          XlHorizPageBreaks::~XlHorizPageBreaks((XlHorizPageBreaks *)v32);
          break;
        case 28:
          *((_DWORD *)this + 57) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
          break;
        case 37:
          goto LABEL_59;
        case 38:
          XlLeftMargin::XlLeftMargin((XlLeftMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 784))(*((_QWORD *)this + 167), v32);
          *((_QWORD *)this + 148) = v33;
          break;
        case 39:
          XlRightMargin::XlRightMargin((XlRightMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 968))(*((_QWORD *)this + 167), v32);
          *((_QWORD *)this + 149) = v33;
          break;
        case 40:
          XlTopMargin::XlTopMargin((XlTopMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1304))(*((_QWORD *)this + 167), v32);
          *((_QWORD *)this + 147) = v33;
          break;
        case 41:
          XlBottomMargin::XlBottomMargin((XlBottomMargin *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 488))(*((_QWORD *)this + 167), v32);
          *((_QWORD *)this + 146) = v33;
          break;
        case 42:
          XlPrintHeaders::XlPrintHeaders((XlPrintHeaders *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 888))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 498) = v33;
          break;
        case 43:
          XlPrintGridlines::XlPrintGridlines((XlPrintGridlines *)v32, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 880))(*((_QWORD *)this + 167), v32);
          *((_BYTE *)this + 499) = v33;
          break;
        case 51:
          v12 = (char *)operator new(0x18uLL);
          XlPrintSize::XlPrintSize((XlPrintSize *)v12, &v40);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 896))(*((_QWORD *)this + 167), v12);
          *((_WORD *)this + 632) = *((_WORD *)v12 + 8);
          goto LABEL_146;
        case 62:
          goto LABEL_57;
        default:
          if (var1 != 80)
            goto LABEL_93;
          if ((*((_DWORD *)this + 61) & 0x80000000) != 0)
            *((_DWORD *)this + 61) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
          break;
      }
    }
LABEL_147:
    result = (XlBinaryReader *)XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v40);
    var1 = v40.var1;
  }
  v4 = *((_DWORD *)this + 98);
  if (v4 < 1)
    return result;
  v5 = *((_DWORD *)this + 101);
  if ((v5 & 0x80000000) != 0)
  {
    *((_DWORD *)this + 101) = v4 + 1;
    *((_BYTE *)this + 290) = 1;
    goto LABEL_166;
  }
  if (v4 < v5)
LABEL_166:
    *((_BYTE *)this + 289) = 1;
  return result;
}

void sub_22A1BC80C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void XlIndex::XlIndex(XlIndex *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACA20;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlIndex *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  void *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  v4 = **((_QWORD **)this + 2);
  if (*((unsigned __int8 *)a2 + 14) < 9u)
  {
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(v4 + 80))();
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
    v6 = -12;
  }
  else
  {
    *((_DWORD *)a2 + 6) = (*(uint64_t (**)(void))(v4 + 96))();
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    v6 = -16;
  }
  v7 = *((_DWORD *)a2 + 2) + v6;
  *((_DWORD *)a2 + 7) = v5;
  v8 = v7 >> 2;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  if (*((_QWORD *)this + 7))
    ChLogFunction("data isn't NULL", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Parser/XlParserVisitor.cpp", 847);
  if (v7 > 3)
  {
    v10 = operator new[](v7 & 0xFFFFFFFC);
    v11 = 0;
    *((_QWORD *)this + 7) = v10;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    v13 = 4 * v12;
    do
    {
      v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
      v9 = (unsigned int *)*((_QWORD *)this + 7);
      v9[v11 / 4] = v14;
      v11 += 4;
    }
    while (v13 != v11);
  }
  else
  {
    v9 = (unsigned int *)*((_QWORD *)this + 7);
  }
  XlIndex::setDbCellOffsets(a2, v9, v8);
  *((_QWORD *)this + 7) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlIndex::setDbCellOffsets(XlIndex *this, unsigned int *a2, int a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8052888210);
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 8) = a3;
  return result;
}

void XlCalcMode::XlCalcMode(XlCalcMode *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABA20;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlCalcCount::XlCalcCount(XlCalcCount *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB9E0;
  *(_WORD *)(v2 + 16) = 100;
}

void XlRefMode::XlRefMode(XlRefMode *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD5B8;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlIteration::XlIteration(XlIteration *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACAE0;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlDelta::XlDelta(XlDelta *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ABEA0;
  v2[2] = 0x3F50624DD2F1A9FCLL;
}

double SsrwOOStgStream::readFloat64(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  double v5;

  v5 = 0.0;
  v1 = readFloat64(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t readFloat64(uint64_t a1, double *a2)
{
  uint64_t v2;
  unsigned int v5;
  _BYTE v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 8;
  v2 = 6;
  if (a1 && a2)
  {
    v2 = streamRead(a1, (uint64_t)v6, &v5);
    *a2 = CsLeReadFloat64((uint64_t)v6);
  }
  return v2;
}

double CsLeReadFloat64(uint64_t a1)
{
  return *(double *)a1;
}

void XlSaveRecalc::XlSaveRecalc(XlSaveRecalc *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADDB8;
  *(_BYTE *)(v2 + 16) = 1;
}

void XlPrintHeaders::XlPrintHeaders(XlPrintHeaders *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD310;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlPrintGridlines::XlPrintGridlines(XlPrintGridlines *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD2D0;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlGridSet::XlGridSet(XlGridSet *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC7A0;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlGuts::XlGuts(XlGuts *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AC7E0;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(uint64_t a1, _WORD *a2)
{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  a2[8] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  a2[9] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  a2[10] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  a2[11] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  a2[8] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  a2[9] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  a2[10] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

{
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  a2[8] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  a2[9] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  a2[10] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return XlParserVisitor::endRead(a1, (uint64_t)a2);
}

void XlGuts::~XlGuts(XlGuts *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlDefaultRowHeight::XlDefaultRowHeight(XlDefaultRowHeight *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABDE0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 255;
}

void XlWsBool::XlWsBool(XlWsBool *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AED70;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
}

void XlWsBool::~XlWsBool(XlWsBool *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlHorizPageBreaks::XlHorizPageBreaks(XlHorizPageBreaks *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC9A0;
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHorizPageBreaks *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int i;
  XlBrk *v7;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (v4)
  {
    v5 = v4;
    for (i = 0; i < v5; ++i)
    {
      v7 = (XlBrk *)operator new(0x10uLL);
      XlBrk::XlBrk(v7);
      (*(void (**)(XlParserVisitor *, XlBrk *))(*(_QWORD *)this + 1576))(this, v7);
      XlCrn::appendOperand(a2, v7);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1BD41C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlBrk::XlBrk(XlBrk *this)
{
  *(_QWORD *)this = &off_24F3AB9A0;
  *((_DWORD *)this + 2) = -1;
  *((_WORD *)this + 6) = -1;
  *((_BYTE *)this + 14) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlBrk *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 4) = result;
  if (!*((_BYTE *)a2 + 14))
  {
    *((_WORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    *((_WORD *)a2 + 6) = result;
  }
  return result;
}

void XlLinkTable::appendLink(XlLinkTable *this, XlLink *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 8);
  v4 = (char *)this + 64;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 6);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 6);
    v19 = (char *)*((_QWORD *)this + 7);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v17;
    *((_QWORD *)this + 7) = v8;
    *((_QWORD *)this + 8) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 7) = v8;
}

void XlHorizPageBreaks::~XlHorizPageBreaks(XlHorizPageBreaks *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AC9A0;
  XlHorizPageBreaks::clearPageBreaks((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  XlHorizPageBreaks::~XlHorizPageBreaks(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t XlHorizPageBreaks::clearPageBreaks(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  if (*(_BYTE *)(this + 16))
  {
    v2 = *(_QWORD *)(this + 24);
    v3 = *(_QWORD *)(this + 32);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      v4 = 0;
      do
      {
        this = *(_QWORD *)(v2 + 8 * v4);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
          v2 = *(_QWORD *)(v1 + 24);
          v3 = *(_QWORD *)(v1 + 32);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    v2 = *(_QWORD *)(this + 24);
  }
  *(_QWORD *)(v1 + 32) = v2;
  return this;
}

void XlHdr::XlHdr(XlHdr *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AC860;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlHdr *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned __int16 v7;
  char v8;
  XlString *v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (*((_DWORD *)a2 + 2))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (v6)
    {
      v7 = v6;
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
      v9 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v9);
      *((_QWORD *)this + 4) = v9;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
      XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 4) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1BD794(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlHdr::~XlHdr(XlHdr *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC860;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC860;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

void XlFooter::XlFooter(XlFooter *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AC660;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFooter *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned __int16 v7;
  char v8;
  XlString *v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (*((_DWORD *)a2 + 2))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (v6)
    {
      v7 = v6;
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
      v9 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v9);
      *((_QWORD *)this + 4) = v9;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v5 + v4, v9);
      XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 4) = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1BD8FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFooter::~XlFooter(XlFooter *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC660;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC660;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void XlHCenter::XlHCenter(XlHCenter *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC820;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlVCenter::XlVCenter(XlVCenter *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEBB0;
  *(_BYTE *)(v2 + 16) = 0;
}

void XlSetup::XlSetup(XlSetup *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADF38;
  *(_QWORD *)(v2 + 16) = 0x10001013B0000;
  *(_WORD *)(v2 + 24) = 1;
  *(_BYTE *)(v2 + 26) = 0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  *(_QWORD *)(v2 + 33) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(v2 + 48) = _Q0;
}

void XlSetup::~XlSetup(XlSetup *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlDefColWidth::XlDefColWidth(XlDefColWidth *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABE20;
  *(_WORD *)(v2 + 16) = 8;
}

void XlDimensions::XlDimensions(XlDimensions *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABEE0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlCellTableInfo::setDimensions(uint64_t this, int a2, int a3, unsigned int a4, unsigned int a5)
{
  _DWORD *exception;

  if (a3 < a2 || a5 < a4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_WORD *)(this + 16) = a4;
  *(_WORD *)(this + 18) = a5;
  return this;
}

void XlDimensions::~XlDimensions(XlDimensions *this)
{
  JUMPOUT(0x22E2DD408);
}

XlBaseFormulaTable *XlFormulaProcessor::clearBaseFormulas(XlFormulaProcessor *this)
{
  XlBaseFormulaTable *result;

  result = (XlBaseFormulaTable *)*((_QWORD *)this + 2);
  if (result)
    return (XlBaseFormulaTable *)XlBaseFormulaTable::clear(result);
  return result;
}

void sub_22A1BDEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1BE028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  XlWorksheetProperties::~XlWorksheetProperties((XlWorksheetProperties *)&a9);
  _Unwind_Resume(a1);
}

void sub_22A1BE1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlWorksheetProperties *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  return (*(uint64_t (**)(XlWorksheetProperties *, char *))(*(_QWORD *)a2 + 16))(a2, (char *)this + 456);
}

XlWorksheetProperties *XlWorksheetProperties::operator=(XlWorksheetProperties *this, uint64_t a2)
{
  unsigned int v4;
  int v5;
  XlBrk *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  XlBrk *v10;
  uint64_t v11;

  if ((XlWorksheetProperties *)a2 != this)
  {
    *((_WORD *)this + 4) = *(_WORD *)(a2 + 8);
    *((_DWORD *)this + 3) = *(_DWORD *)(a2 + 12);
    *((_BYTE *)this + 18) = *(_BYTE *)(a2 + 18);
    *(_QWORD *)((char *)this + 20) = *(_QWORD *)(a2 + 20);
    *((_WORD *)this + 8) = *(_WORD *)(a2 + 16);
    *((_WORD *)this + 22) = *(_WORD *)(a2 + 44);
    *(_OWORD *)((char *)this + 28) = *(_OWORD *)(a2 + 28);
    XlWorksheetProperties::clearVertPageBreaks(this);
    XlWorksheetProperties::clearHorizPageBreaks(this);
    if (((*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) & 0x7FFFFFFF8) != 0)
    {
      v4 = 0;
      v5 = 0;
      while (1)
      {
        v6 = (XlBrk *)operator new(0x10uLL);
        XlBrk::XlBrk(v6);
        v7 = *(_QWORD *)(a2 + 72);
        if (v4 >= ((unint64_t)(*(_QWORD *)(a2 + 80) - v7) >> 3))
          break;
        (**(void (***)(XlBrk *, _QWORD))v6)(v6, *(_QWORD *)(v7 + 8 * (unsigned __int16)v5));
        XlPhoneticInfo::appendRun(this, v6);
        v4 = (unsigned __int16)++v5;
        if (((*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3) <= (unsigned __int16)v5)
          goto LABEL_6;
      }
LABEL_12:
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_6:
    if (((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) & 0x7FFFFFFF8) != 0)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = (XlBrk *)operator new(0x10uLL);
        XlBrk::XlBrk(v10);
        v11 = *(_QWORD *)(a2 + 48);
        if (v8 >= ((unint64_t)(*(_QWORD *)(a2 + 56) - v11) >> 3))
          goto LABEL_12;
        (**(void (***)(XlBrk *, _QWORD))v10)(v10, *(_QWORD *)(v11 + 8 * (unsigned __int16)v9));
        XlLinkTable::appendLink(this, v10);
        v8 = (unsigned __int16)++v9;
      }
      while (((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3) > (unsigned __int16)v9);
    }
    OcText::clearBuffer((OcText *)this + 2);
    OcText::operator=((uint64_t)this + 96, a2 + 96);
  }
  return this;
}

void sub_22A1BE3F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlBrk::operator=(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(result + 12) = *(_WORD *)(a2 + 12);
    *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  }
  return result;
}

void sub_22A1BE4DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1BE5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1BE66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1BE7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void XlWorksheetProperties::~XlWorksheetProperties(OcText *this)
{
  char *var5;
  void **var0;

  this->var0 = (void **)&off_24F3AFE80;
  XlWorksheetProperties::clearVertPageBreaks(this);
  XlWorksheetProperties::clearHorizPageBreaks(this);
  OcText::~OcText(this + 2);
  var5 = this[1].var5;
  if (var5)
  {
    this[1].var6 = var5;
    operator delete(var5);
  }
  var0 = this[1].var0;
  if (var0)
  {
    *(_QWORD *)&this[1].var1 = var0;
    operator delete(var0);
  }
}

{
  XlWorksheetProperties::~XlWorksheetProperties(this);
  JUMPOUT(0x22E2DD408);
}

void XlBrk::~XlBrk(XlBrk *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1BEB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  XlPageProperties::~XlPageProperties((XlPageProperties *)&a9);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlPageProperties *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  return (*(uint64_t (**)(XlPageProperties *, char *))(*(_QWORD *)a2 + 16))(a2, (char *)this + 1160);
}

uint64_t XlPageProperties::operator=(uint64_t a1, uint64_t a2)
{
  OcText *v4;
  uint64_t v5;
  OcText *v6;
  uint64_t v7;

  if (a2 != a1)
  {
    v4 = *(OcText **)(a1 + 40);
    if (!v4)
    {
      v4 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v4);
      *(_QWORD *)(a1 + 40) = v4;
    }
    v5 = *(_QWORD *)(a2 + 40);
    if (v5)
      OcText::operator=((uint64_t)v4, v5);
    v6 = *(OcText **)(a1 + 48);
    if (!v6)
    {
      v6 = (OcText *)operator new(0x30uLL);
      OcText::OcText(v6);
      *(_QWORD *)(a1 + 48) = v6;
    }
    v7 = *(_QWORD *)(a2 + 48);
    if (v7)
      OcText::operator=((uint64_t)v6, v7);
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_QWORD *)(a1 + 58) = *(_QWORD *)(a2 + 58);
    *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
    *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
    *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  }
  return a1;
}

void sub_22A1BECF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlPageProperties::getHeaderString(XlPageProperties *this)
{
  OcText *v1;

  v1 = (OcText *)*((_QWORD *)this + 5);
  if (!v1)
  {
    v1 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v1);
    *((_QWORD *)this + 5) = v1;
  }
  return v1;
}

void sub_22A1BED50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

OcText *XlPageProperties::getFooterString(XlPageProperties *this)
{
  OcText *v1;

  v1 = (OcText *)*((_QWORD *)this + 6);
  if (!v1)
  {
    v1 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v1);
    *((_QWORD *)this + 6) = v1;
  }
  return v1;
}

void sub_22A1BEDA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlPageProperties::~XlPageProperties(XlPageProperties *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AFBA0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 5) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 6) = 0;
}

{
  XlPageProperties::~XlPageProperties(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1BF060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1BF25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void *v10;
  void *v11;
  void *v12;

  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(a10);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlColumnTable *a2)
{
  void **v3;
  void *result;
  uint64_t v5;
  XlColInfo *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlHeader v11;
  uint64_t v12;

  v3 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 55) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v11);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    v5 = *((_QWORD *)this + 163);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 163) = 0;
    while (v11.var1 == 125)
    {
      v6 = (XlColInfo *)operator new(0x20uLL);
      XlColInfo::XlColInfo(v6, &v11);
      *((_QWORD *)this + 163) = v6;
      v7 = *((_QWORD *)this + 167);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 216))(v7, v8);
      v12 = *((_QWORD *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    }
    v9 = *((_QWORD *)this + 164);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_22A1BF434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void XlColInfo::XlColInfo(XlColInfo *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ABB20;
  v2[2] = 0;
  *(_QWORD *)((char *)v2 + 21) = 0;
}

uint64_t XlColumnTable::getColumnFirst(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  v3 = *(__int16 *)(*(_QWORD *)(v2 + 8 * a2) + 16);
  if (v3 >= 255)
    return 255;
  else
    return v3;
}

uint64_t XlColumnTable::getColumnLast(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  v3 = *(__int16 *)(*(_QWORD *)(v2 + 8 * a2) + 18);
  if (v3 >= 255)
    return 255;
  else
    return v3;
}

void sub_22A1BF684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t XlColumnTable::getWidth(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(*(_QWORD *)(v2 + 8 * a2) + 20);
}

uint64_t XlColumnTable::isHidden(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 8 * a2) + 24);
}

void sub_22A1BF760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t XlColumnTable::getCellFormat(XlColumnTable *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(__int16 *)(*(_QWORD *)(v2 + 8 * a2) + 22);
}

void sub_22A1BF8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1BFA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1BFB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1BFB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void XlColInfo::~XlColInfo(XlColInfo *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1BFE14()
{
  __break(1u);
}

void sub_22A1BFEE0()
{
  void *v0;

  objc_end_catch();
  JUMPOUT(0x22A1BFEB4);
}

double XlBinaryReader::read(XlBinaryReader *this, XlSheetInfo *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  return XlSheetInfo::operator=((uint64_t)a2, (uint64_t)this + 1144);
}

double XlSheetInfo::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 != a1)
  {
    result = *(double *)(a2 + 8);
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_22A1C009C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1C0174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1C01E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C025C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C043C(void *exc_buf)
{
  objc_begin_catch(exc_buf);
  JUMPOUT(0x22A1C03ECLL);
}

BOOL XlBinaryReader::hasMoreRows(XlBinaryReader *this)
{
  return *((_DWORD *)this + 101) > 0;
}

void XlRowBlock::XlRowBlock(XlRowBlock *this)
{
  *(_QWORD *)this = &off_24F3AFC50;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 30) = 0;
}

void XlBinaryReader::read(XlBinaryReader *this, XlRowBlock *a2)
{
  int v4;
  XlBinaryReader *Header;
  int v6;
  XlCell *v7;
  uint64_t v8;
  int RecordDataOffset;
  unint64_t v10;
  XlCell **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  XlCell **v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  XlCell *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  char *v32;
  XlCell *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  XlRowProperties **v40;
  uint64_t v41;
  int v42;
  int v43;
  int var1;
  int isCell;
  unsigned int v47;
  XlBinaryReader *v48;
  int v49;
  XlCell *v50;
  uint64_t v51;
  int v52;
  XlCell *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  int v70;
  XlRowProperties **v71;
  uint64_t v72;
  int v73;
  int i;
  XlCell *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  XlCell **v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  char *v86;
  unsigned int v87;
  uint64_t v88;
  XlCell **v89;
  char *v90;
  char *v91;
  XlCell *v92;
  XlCell *v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  XlCell **v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  char *v104;
  unsigned int v105;
  uint64_t v106;
  XlCell **v107;
  char *v108;
  char *v109;
  XlCell *v110;
  int v111;
  _DWORD *exception;
  XlHeader v113;

  XlHeader::XlHeader(&v113);
  XlRowBlock::reset(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  v4 = *((_DWORD *)this + 101);
  if ((v4 & 0x80000000) == 0)
  {
    ++*((_DWORD *)this + 102);
    if (*((_DWORD *)this + 98) < v4 && *((_BYTE *)this + 289))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *((unsigned int *)this + 98), 0);
    }
    else
    {
      *((_DWORD *)this + 98) = v4;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
      *((_DWORD *)this + 101) = -1;
    }
    Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
    if (*((_BYTE *)this + 289))
    {
      v6 = -1;
      while (v113.var1 != 10)
      {
        Header = (XlBinaryReader *)XlBinaryReader::isCell(Header, &v113);
        if ((_DWORD)Header)
        {
          v7 = (XlCell *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 3);
          v8 = *((_QWORD *)this + 164);
          RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, -RecordDataOffset, 1);
          XlBinaryReader::readCell(this, v7);
          v11 = (XlCell **)*((_QWORD *)this + 53);
          v10 = *((_QWORD *)this + 54);
          if ((unint64_t)v11 >= v10)
          {
            v12 = *((_QWORD *)this + 52);
            v13 = (unint64_t)v11 - v12;
            v14 = (v10 - v12) >> 3;
            v15 = 2 * v14;
            if (2 * (int)v14 <= (v13 >> 3) + 1)
              v15 = (v13 >> 3) + 1;
            if (v14 >= 0x7FFFFFFF)
              v16 = 0xFFFFFFFFLL;
            else
              v16 = v15;
            if ((_DWORD)v16)
            {
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v16);
              v19 = v18;
            }
            else
            {
              v17 = 0;
              v19 = 0;
            }
            v20 = (XlCell **)&v17[v13 & 0x7FFFFFFF8];
            *v20 = v7;
            v21 = v20 + 1;
            v23 = (char *)*((_QWORD *)this + 52);
            v22 = (char *)*((_QWORD *)this + 53);
            if (v22 != v23)
            {
              do
              {
                v24 = (XlCell *)*((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v20 = v24;
              }
              while (v22 != v23);
LABEL_28:
              v22 = (char *)*((_QWORD *)this + 52);
            }
            goto LABEL_29;
          }
          while (1)
          {
            *v11 = v7;
            v21 = v11 + 1;
LABEL_32:
            *((_QWORD *)this + 53) = v21;
            if (!*((_QWORD *)this + 48))
              break;
            v7 = (XlCell *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 3);
            XlBinaryReader::processCompressed(this, v7);
            v11 = (XlCell **)*((_QWORD *)this + 53);
            v25 = *((_QWORD *)this + 54);
            if ((unint64_t)v11 >= v25)
            {
              v26 = *((_QWORD *)this + 52);
              v27 = (unint64_t)v11 - v26;
              v28 = (v25 - v26) >> 3;
              v29 = 2 * v28;
              if (2 * (int)v28 <= (v27 >> 3) + 1)
                v29 = (v27 >> 3) + 1;
              if (v28 >= 0x7FFFFFFF)
                v30 = 0xFFFFFFFFLL;
              else
                v30 = v29;
              if ((_DWORD)v30)
              {
                v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v30);
                v19 = v31;
              }
              else
              {
                v17 = 0;
                v19 = 0;
              }
              v20 = (XlCell **)&v17[v27 & 0x7FFFFFFF8];
              *v20 = v7;
              v21 = v20 + 1;
              v32 = (char *)*((_QWORD *)this + 52);
              v22 = (char *)*((_QWORD *)this + 53);
              if (v22 != v32)
              {
                do
                {
                  v33 = (XlCell *)*((_QWORD *)v22 - 1);
                  v22 -= 8;
                  *--v20 = v33;
                }
                while (v22 != v32);
                goto LABEL_28;
              }
LABEL_29:
              *((_QWORD *)this + 52) = v20;
              *((_QWORD *)this + 53) = v21;
              *((_QWORD *)this + 54) = &v17[8 * v19];
              if (v22)
                operator delete(v22);
              goto LABEL_32;
            }
          }
          Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
        }
        else
        {
          if (!*((_BYTE *)this + 290))
            goto LABEL_48;
          if (v6 == -1)
            v6 = XlParserVisitor::currentRecordLocation(*((XlParserVisitor **)this + 167));
          Header = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
        }
      }
      if (*((_BYTE *)this + 290))
      {
        *((_BYTE *)this + 290) = 0;
        *((_DWORD *)this + 101) = v6;
      }
LABEL_48:
      if (*((_BYTE *)this + 289))
      {
        if (((*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) & 0x7FFFFFFF8) != 0)
          XlBinaryReader::findCellAHome(this, a2, 1);
        *((_BYTE *)this + 289) = 0;
        v34 = *((unsigned int *)this + 101);
        if ((_DWORD)v34 != -1)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v34, 0);
          *((_DWORD *)this + 101) = -1;
        }
        Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
      }
    }
    v35 = 0;
    v36 = 0;
    v37 = 1;
    while (v113.var1 == 520)
    {
      v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 80))(*((_QWORD *)this + 164));
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), 4294967294, 1);
      v39 = v38;
      if ((v37 & 1) == 0)
      {
        if (v38 <= v36 || (int)(v38 - (unsigned __int16)v35) >= 32)
        {
          v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
          Header = (XlBinaryReader *)XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          *((_DWORD *)this + 101) = v43 - (_DWORD)Header;
          break;
        }
        v39 = v35;
      }
      v40 = (XlRowProperties **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 5);
      v41 = *((_QWORD *)this + 164);
      v42 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 16))(v41, -v42, 1);
      XlBinaryReader::readRowInfo(this, v40[1]);
      XlRowBlock::takeRow(a2, (XlCellRow *)v40);
      Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
      v37 = 0;
      v35 = v39;
      v36 = v38;
    }
    if (((*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) & 0x7FFFFFFF8) != 0)
      goto LABEL_65;
    if (((*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) & 0x7FFFFFFF8) != 0)
    {
      XlBinaryReader::findCellAHome(this, a2, *((_DWORD *)this + 101) >> 31);
      while (1)
      {
LABEL_65:
        var1 = (unsigned __int16)v113.var1;
        if (v113.var1 != 215 && v113.var1 != 520)
        {
          isCell = XlBinaryReader::isCell(Header, &v113);
          if (var1 != 229 && isCell == 0)
          {
LABEL_130:
            if (((*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) & 0x7FFFFFFF8) != 0)
              XlBinaryReader::findCellAHome(this, a2, *((_DWORD *)this + 101) >> 31);
            if (!*((_DWORD *)this + 289))
              *((_DWORD *)this + 289) = *((_DWORD *)this + 102);
            return;
          }
        }
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 80))(*((_QWORD *)this + 164));
        v48 = (XlBinaryReader *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), 4294967294, 1);
        v49 = (unsigned __int16)v113.var1;
        if (v113.var1 == 229)
          break;
        if (v113.var1 == 520)
        {
          if ((unsigned __int16)v35 + 32 <= v47 || v47 <= v36)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              v54 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              *((_DWORD *)this + 101) = v54 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
            }
            goto LABEL_103;
          }
          v71 = (XlRowProperties **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 5);
          v72 = *((_QWORD *)this + 164);
          v73 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v72 + 16))(v72, -v73, 1);
          XlBinaryReader::readRowInfo(this, v71[1]);
          XlRowBlock::takeRow(a2, (XlCellRow *)v71);
          Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
          v36 = v47;
        }
        else
        {
          if (v113.var1 == 215)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              for (i = 215; i != 10 && i != 236; i = (unsigned __int16)v113.var1)
              {
                if (XlBinaryReader::isCell(v48, &v113))
                {
                  v75 = (XlCell *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 3);
                  v76 = *((_QWORD *)this + 164);
                  v77 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v76 + 16))(v76, -v77, 1);
                  XlBinaryReader::readCell(this, v75);
                  v79 = (XlCell **)*((_QWORD *)this + 53);
                  v78 = *((_QWORD *)this + 54);
                  if ((unint64_t)v79 >= v78)
                  {
                    v81 = *((_QWORD *)this + 52);
                    v82 = (unint64_t)v79 - v81;
                    v83 = (v78 - v81) >> 3;
                    v84 = 2 * v83;
                    if (2 * (int)v83 <= (v82 >> 3) + 1)
                      v84 = (v82 >> 3) + 1;
                    if (v83 >= 0x7FFFFFFF)
                      v85 = 0xFFFFFFFFLL;
                    else
                      v85 = v84;
                    if ((_DWORD)v85)
                    {
                      v86 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v85);
                      v88 = v87;
                    }
                    else
                    {
                      v86 = 0;
                      v88 = 0;
                    }
                    v89 = (XlCell **)&v86[v82 & 0x7FFFFFFF8];
                    *v89 = v75;
                    v80 = v89 + 1;
                    v91 = (char *)*((_QWORD *)this + 52);
                    v90 = (char *)*((_QWORD *)this + 53);
                    if (v90 != v91)
                    {
                      do
                      {
                        v92 = (XlCell *)*((_QWORD *)v90 - 1);
                        v90 -= 8;
                        *--v89 = v92;
                      }
                      while (v90 != v91);
                      v90 = (char *)*((_QWORD *)this + 52);
                    }
                    *((_QWORD *)this + 52) = v89;
                    *((_QWORD *)this + 53) = v80;
                    *((_QWORD *)this + 54) = &v86[8 * v88];
                    if (v90)
                      operator delete(v90);
                  }
                  else
                  {
                    *v79 = v75;
                    v80 = v79 + 1;
                  }
                  *((_QWORD *)this + 53) = v80;
                  v48 = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
                }
                else
                {
                  if (i == 520)
                  {
LABEL_159:
                    v111 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
                    *((_DWORD *)this + 101) = v111
                                            - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                    goto LABEL_130;
                  }
                  v48 = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
                }
              }
            }
            goto LABEL_130;
          }
          if (v47 > v36)
          {
            if ((*((_DWORD *)this + 101) & 0x80000000) != 0)
            {
              while (v49 != 10 && v49 != 236)
              {
                if (XlBinaryReader::isCell(v48, &v113))
                {
                  v93 = (XlCell *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 3);
                  if (v93)
                  {
                    v94 = *((_QWORD *)this + 164);
                    v95 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
                    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v94 + 16))(v94, -v95, 1);
                    XlBinaryReader::readCell(this, v93);
                    v97 = (XlCell **)*((_QWORD *)this + 53);
                    v96 = *((_QWORD *)this + 54);
                    if ((unint64_t)v97 >= v96)
                    {
                      v99 = *((_QWORD *)this + 52);
                      v100 = (unint64_t)v97 - v99;
                      v101 = (v96 - v99) >> 3;
                      v102 = 2 * v101;
                      if (2 * (int)v101 <= (v100 >> 3) + 1)
                        v102 = (v100 >> 3) + 1;
                      if (v101 >= 0x7FFFFFFF)
                        v103 = 0xFFFFFFFFLL;
                      else
                        v103 = v102;
                      if ((_DWORD)v103)
                      {
                        v104 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 432, v103);
                        v106 = v105;
                      }
                      else
                      {
                        v104 = 0;
                        v106 = 0;
                      }
                      v107 = (XlCell **)&v104[v100 & 0x7FFFFFFF8];
                      *v107 = v93;
                      v98 = v107 + 1;
                      v109 = (char *)*((_QWORD *)this + 52);
                      v108 = (char *)*((_QWORD *)this + 53);
                      if (v108 != v109)
                      {
                        do
                        {
                          v110 = (XlCell *)*((_QWORD *)v108 - 1);
                          v108 -= 8;
                          *--v107 = v110;
                        }
                        while (v108 != v109);
                        v108 = (char *)*((_QWORD *)this + 52);
                      }
                      *((_QWORD *)this + 52) = v107;
                      *((_QWORD *)this + 53) = v98;
                      *((_QWORD *)this + 54) = &v104[8 * v106];
                      if (v108)
                        operator delete(v108);
                    }
                    else
                    {
                      *v97 = v93;
                      v98 = v97 + 1;
                    }
                    *((_QWORD *)this + 53) = v98;
                  }
                  v48 = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
                }
                else
                {
                  if (v49 == 520)
                    goto LABEL_159;
                  v48 = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
                }
                v49 = (unsigned __int16)v113.var1;
              }
            }
            goto LABEL_130;
          }
          if (v47 < (unsigned __int16)v35)
          {
LABEL_103:
            Header = (XlBinaryReader *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
          }
          else
          {
            v50 = (XlCell *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 3);
            if (v50)
            {
              v51 = *((_QWORD *)this + 164);
              v52 = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v51 + 16))(v51, -v52, 1);
              XlBinaryReader::readCell(this, v50);
              XlRowBlock::takeCell(a2, v50);
            }
            while (*((_QWORD *)this + 48))
            {
              v53 = (XlCell *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 3);
              if (!v53)
              {
                exception = __cxa_allocate_exception(4uLL);
                *exception = 1001;
              }
              XlBinaryReader::processCompressed(this, v53);
              XlRowBlock::takeCell(a2, v53);
            }
            Header = (XlBinaryReader *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v113, *((_BYTE *)this + 1320));
          }
        }
      }
      v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
      v56 = v55;
      v58 = (char *)*((_QWORD *)this + 38);
      v57 = *((_QWORD *)this + 39);
      if ((unint64_t)v58 >= v57)
      {
        v60 = (char *)*((_QWORD *)this + 37);
        v61 = v58 - v60;
        v62 = (unint64_t)(v58 - v60) >> 2;
        v63 = (v57 - (unint64_t)v60) >> 2;
        if (2 * (int)v63 <= (v62 + 1))
          v64 = v62 + 1;
        else
          v64 = 2 * v63;
        if (v63 >= 0x7FFFFFFF)
          v65 = 0xFFFFFFFFLL;
        else
          v65 = v64;
        if ((_DWORD)v65)
        {
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 312, v65);
          v68 = v67;
          v60 = (char *)*((_QWORD *)this + 37);
          v58 = (char *)*((_QWORD *)this + 38);
        }
        else
        {
          v66 = 0;
          v68 = 0;
        }
        v69 = &v66[v61 & 0x3FFFFFFFCLL];
        *(_DWORD *)v69 = v56;
        v59 = v69 + 4;
        while (v58 != v60)
        {
          v70 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        *((_QWORD *)this + 37) = v69;
        *((_QWORD *)this + 38) = v59;
        *((_QWORD *)this + 39) = &v66[4 * v68];
        if (v60)
          operator delete(v60);
      }
      else
      {
        *(_DWORD *)v58 = v55;
        v59 = v58 + 4;
      }
      *((_QWORD *)this + 38) = v59;
      goto LABEL_103;
    }
  }
}

void sub_22A1C1028(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *XlRowBlock::reset(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[1];
  v3 = this[2];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[1];
        v3 = v1[2];
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3))
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v2 + 8 * v4++) = 0;
      v2 = v1[1];
      v3 = v1[2];
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[2] = v2;
  *((_DWORD *)v1 + 8) = 0;
  *((_WORD *)v1 + 18) = 0;
  return this;
}

void XlCellRow::XlCellRow(XlCellRow *this)
{
  *(_QWORD *)this = &off_24F3AEF20;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
}

void XlCellRow::init(XlCellRow *this)
{
  XlRowProperties *v2;
  _DWORD *exception;

  if (*((_QWORD *)this + 1))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v2 = (XlRowProperties *)operator new(0x20uLL);
  XlRowProperties::XlRowProperties(v2);
  *((_QWORD *)this + 1) = v2;
}

void sub_22A1C11D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlRowProperties::XlRowProperties(XlRowProperties *this)
{
  *(_QWORD *)this = &off_24F3AFC88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 1;
  *(_QWORD *)((char *)this + 21) = 0;
}

uint64_t XlBinaryReader::readRowInfo(XlBinaryReader *this, XlRowProperties *a2)
{
  uint64_t result;
  XlRow *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  XlHeader v9;

  XlHeader::XlHeader(&v9);
  *((_BYTE *)a2 + 19) = 0;
  result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((_BYTE *)this + 1320));
  if (v9.var1 == 520)
  {
    v5 = (XlRow *)operator new(0x28uLL);
    XlRow::XlRow(v5, &v9);
    *((_QWORD *)this + 47) = v5;
    (*(void (**)(_QWORD, XlRow *))(**((_QWORD **)this + 167) + 368))(*((_QWORD *)this + 167), v5);
    v6 = *((_QWORD *)this + 47);
    *((_WORD *)a2 + 4) = *(_WORD *)(v6 + 16);
    v7 = *(_BYTE *)(v6 + 33);
    *((_WORD *)a2 + 6) = *(_WORD *)(v6 + 26);
    *((_WORD *)a2 + 5) = *(_WORD *)(v6 + 22);
    LODWORD(v8) = *(_DWORD *)(v6 + 29);
    *((_BYTE *)a2 + 28) = *(_BYTE *)(v6 + 37);
    BYTE4(v8) = v7;
    BYTE5(v8) = *(_BYTE *)(v6 + 34);
    HIWORD(v8) = *(_WORD *)(v6 + 35);
    *((_BYTE *)a2 + 18) = *(_BYTE *)(v6 + 28);
    *(_QWORD *)((char *)a2 + 20) = v8;
    *((_BYTE *)a2 + 19) = 1;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 47) = 0;
  }
  return result;
}

void sub_22A1C1308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlRow::XlRow(XlRow *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADCF8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 21) = 0;
  *(_BYTE *)(v2 + 29) = 1;
  *(_QWORD *)(v2 + 30) = 0;
}

void XlRow::~XlRow(XlRow *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlRowBlock::takeRow(XlRowBlock *this, XlCellRow *a2)
{
  char **v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int MaxRow;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *i;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _DWORD *exception;
  XlCellRow *v29;

  v29 = a2;
  if (!a2)
  {
LABEL_30:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  v4 = (char **)((char *)this + 8);
  if ((((unint64_t)v5 - *((_QWORD *)this + 1)) & 0x7FFFFFFF8) != 0
    && (v6 = *(unsigned __int16 *)(*((_QWORD *)a2 + 1) + 8),
        MaxRow = XlRowBlock::getMaxRow(this),
        v5 = (_QWORD *)*((_QWORD *)this + 2),
        v6 <= MaxRow))
  {
    v17 = *v4;
    v18 = (char *)v5 - *v4;
    if ((v18 & 0x7FFFFFFF8) != 0)
    {
      v19 = (v18 >> 3);
      for (i = *v4; ; i += 8)
      {
        if (!*(_QWORD *)v17)
          goto LABEL_30;
        v21 = *(unsigned __int16 *)(*((_QWORD *)a2 + 1) + 8);
        v22 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 8);
        if (v21 < v22)
        {
          std::vector<XlCellRow *,ChAllocator<XlCellRow *>>::insert((uint64_t)v4, i, (uint64_t *)&v29);
          return;
        }
        if (v21 == v22)
          break;
        v17 += 8;
        if (!--v19)
          return;
      }
      (*(void (**)(XlCellRow *))(*(_QWORD *)a2 + 8))(a2);
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v5 >= v8)
    {
      v10 = (char *)v5 - *v4;
      v11 = (v8 - (unint64_t)*v4) >> 3;
      v12 = 2 * v11;
      if (2 * (int)v11 <= (v10 >> 3) + 1)
        v12 = (v10 >> 3) + 1;
      if (v11 >= 0x7FFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      if ((_DWORD)v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v13);
        v16 = v15;
      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v23 = &v14[v10 & 0x7FFFFFFF8];
      v24 = &v14[8 * v16];
      *(_QWORD *)v23 = a2;
      v9 = v23 + 8;
      v26 = (char *)*((_QWORD *)this + 1);
      v25 = (char *)*((_QWORD *)this + 2);
      if (v25 != v26)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *((_QWORD *)v23 - 1) = v27;
          v23 -= 8;
        }
        while (v25 != v26);
        v25 = *v4;
      }
      *((_QWORD *)this + 1) = v23;
      *((_QWORD *)this + 2) = v9;
      *((_QWORD *)this + 3) = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v5 = a2;
      v9 = v5 + 1;
    }
    *((_QWORD *)this + 2) = v9;
  }
}

uint64_t XlRowBlock::getMaxRow(XlRowBlock *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2) - v1;
  if ((v2 & 0x7FFFFFFF8) == 0 || (v3 = *(_QWORD *)(v1 + 8 * ((v2 >> 3) - 1))) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return *(unsigned __int16 *)(*(_QWORD *)(v3 + 8) + 8);
}

void XlCell::XlCell(XlCell *this)
{
  this->var0 = (void **)&off_24F3AEEE8;
  *(_DWORD *)&this->var1 = -65281;
  this->var3 = -1;
  this->var4 = 0;
  this->var5 = 0.0;
  this->var6 = 0;
  this->var7 = 255;
  this->var8 = 0;
  *(_DWORD *)((char *)&this->var8 + 7) = 0;
}

XlCell *XlBinaryReader::readCell(XlBinaryReader *this, XlCell *a2)
{
  XlCell *result;
  uint64_t v5;
  XlMulRk *v6;
  __int16 v7;
  XlString *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  XlMulBlank *v12;
  unsigned int v13;
  double v14;
  _BYTE v15[16];
  int v16;
  int v17;
  signed __int16 v18;
  XlHeader v19;

  XlHeader::XlHeader(&v19);
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v19, *((_BYTE *)this + 1320));
  if (v19.var1 > 512)
  {
    switch(v19.var1)
    {
      case 0x201:
        XlBlank::XlBlank((XlBlank *)v15, &v19);
        XlBlank::accept((uint64_t)v15, *((_QWORD *)this + 167));
        result = XlCell::setBlank(a2);
        goto LABEL_33;
      case 0x202:
        return (XlCell *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v19.var0, 1);
      case 0x203:
        v10 = (unsigned int *)operator new(0x20uLL);
        XlNumberFP::XlNumberFP((XlNumberFP *)v10, &v19);
        (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v10 + 16))(v10, *((_QWORD *)this + 167));
        XlCell::setNumber(a2, *((double *)v10 + 2));
        goto LABEL_29;
      case 0x204:
        goto LABEL_18;
      case 0x205:
        XlBoolErr::XlBoolErr((XlBoolErr *)v15, &v19);
        XlBoolErr::accept((uint64_t)v15, *((_QWORD *)this + 167));
        if (HIBYTE(v17))
          result = (XlCell *)XlCell::setError((uint64_t)a2, BYTE2(v17));
        else
          result = XlCell::setBoolean(a2, BYTE2(v17) != 0);
LABEL_33:
        a2->var3 = v17;
        v9 = v16;
        goto LABEL_34;
      case 0x206:
        return (XlCell *)XlBinaryReader::processFormula(this, a2, &v19);
      default:
        if (v19.var1 == 638)
        {
          v10 = (unsigned int *)operator new(0x20uLL);
          XlRk::XlRk((XlRk *)v10, &v19);
          (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v10 + 16))(v10, *((_QWORD *)this + 167));
          v14 = XlRk::decode((XlRk *)v10[4]);
          XlCell::setNumber(a2, v14);
          a2->var3 = *((_WORD *)v10 + 12);
          v13 = v10[5];
          goto LABEL_30;
        }
        if (v19.var1 != 1030)
          return (XlCell *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v19.var0, 1);
        break;
    }
    return (XlCell *)XlBinaryReader::processFormula(this, a2, &v19);
  }
  if (v19.var1 <= 189)
  {
    if (v19.var1 != 4)
    {
      if (v19.var1 == 6)
        return (XlCell *)XlBinaryReader::processFormula(this, a2, &v19);
      if (v19.var1 == 189)
      {
        v5 = *((_QWORD *)this + 48);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        *((_QWORD *)this + 48) = 0;
        v6 = (XlMulRk *)operator new(0x30uLL);
        XlMulRk::XlMulRk(v6, &v19);
        *((_QWORD *)this + 48) = v6;
        (*(void (**)(XlMulRk *, _QWORD))(*(_QWORD *)v6 + 16))(v6, *((_QWORD *)this + 167));
        v7 = *(_WORD *)(*((_QWORD *)this + 48) + 38);
LABEL_26:
        *((_WORD *)this + 200) = v7;
        return XlBinaryReader::processCompressed(this, a2);
      }
      return (XlCell *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v19.var0, 1);
    }
LABEL_18:
    v10 = (unsigned int *)operator new(0x20uLL);
    XlLabel::XlLabel((XlLabel *)v10, &v19);
    (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v10 + 16))(v10, *((_QWORD *)this + 167));
    XlCell::takeString(a2, *((XlString **)v10 + 2));
    goto LABEL_28;
  }
  if (v19.var1 == 190)
  {
    v11 = *((_QWORD *)this + 48);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *((_QWORD *)this + 48) = 0;
    v12 = (XlMulBlank *)operator new(0x28uLL);
    XlMulBlank::XlMulBlank(v12, &v19);
    *((_QWORD *)this + 48) = v12;
    (*(void (**)(XlMulBlank *, _QWORD))(*(_QWORD *)v12 + 16))(v12, *((_QWORD *)this + 167));
    v7 = *(_WORD *)(*((_QWORD *)this + 48) + 30);
    goto LABEL_26;
  }
  if (v19.var1 == 214)
  {
    v10 = (unsigned int *)operator new(0x38uLL);
    XlRString::XlRString((XlRString *)v10, &v19);
    (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v10 + 16))(v10, *((_QWORD *)this + 167));
    XlCell::takeString(a2, *((XlString **)v10 + 2));
LABEL_28:
    *((_QWORD *)v10 + 2) = 0;
LABEL_29:
    a2->var3 = *((_WORD *)v10 + 14);
    v13 = v10[6];
LABEL_30:
    *(_DWORD *)&a2->var1 = v13;
    return (XlCell *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (v19.var1 != 253)
    return (XlCell *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v19.var0, 1);
  XlLabelSst::XlLabelSst((XlLabelSst *)v15, &v19);
  XlLabelSst::accept((uint64_t)v15, *((_QWORD *)this + 167));
  v8 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v8);
  XlString::setIndex(v8, v16);
  result = XlCell::takeString(a2, v8);
  a2->var3 = v18;
  v9 = v17;
LABEL_34:
  *(_DWORD *)&a2->var1 = v9;
  return result;
}

void sub_22A1C1A80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlLabelSst::XlLabelSst(XlLabelSst *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACBA0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlLabelSst::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 320))(a2, a1);
}

XlCell *XlCell::takeString(XlCell *this, XlString *a2)
{
  XlCell *v3;

  v3 = this;
  this->var9 = 0;
  this->var7 = 255;
  this->var5 = 0.0;
  if (this->var10)
  {
    this = (XlCell *)this->var6;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v3->var6 = a2;
  v3->var10 = 1;
  v3->var4 = 16;
  return this;
}

void XlRowBlock::takeCell(XlRowBlock *this, XlCell *a2)
{
  unsigned int var1;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  XlCellRow *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *exception;

  if (!a2)
    return;
  if (((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) & 0x7FFFFFFF8) == 0)
    return;
  var1 = a2->var1;
  if (var1 < XlRowBlock::getMinRow(this))
    return;
  v5 = a2->var1;
  if (v5 > XlRowBlock::getMaxRow(this))
    return;
  v6 = a2->var1;
  v7 = *((unsigned __int16 *)this + 18);
  if (v6 == v7)
  {
    v8 = *((unsigned __int16 *)this + 17);
    v9 = *((_QWORD *)this + 1);
    if (((unint64_t)(*((_QWORD *)this + 2) - v9) >> 3) > v8)
    {
      v10 = *(XlCellRow **)(v9 + 8 * v8);
LABEL_9:
      XlCellRow::takeCell(v10, a2);
      return;
    }
LABEL_27:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  }
  v11 = *((_QWORD *)this + 1);
  v12 = *((_QWORD *)this + 2);
  if (v6 <= v7)
  {
    v14 = (unint64_t)(v12 - v11) >> 3;
  }
  else
  {
    v13 = *((unsigned __int16 *)this + 17);
    v14 = (unint64_t)(v12 - v11) >> 3;
    if ((int)v14 - 1 > v13)
    {
      if ((int)v13 + 1 >= v14)
        goto LABEL_27;
      v10 = *(XlCellRow **)(v11 + 8 * (v13 + 1));
      *((_WORD *)this + 17) = v13 + 1;
      v15 = *(unsigned __int16 *)(*((_QWORD *)v10 + 1) + 8);
      *((_WORD *)this + 18) = v15;
      if (v6 == v15)
        goto LABEL_9;
      *(_DWORD *)((char *)this + 34) = 0;
      goto LABEL_17;
    }
  }
  *(_DWORD *)((char *)this + 34) = 0;
  if ((_DWORD)v14)
  {
LABEL_17:
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(v11 + 8 * v16);
      if (!v17)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 1003;
      }
      if (v6 == *(unsigned __int16 *)(*(_QWORD *)(v17 + 8) + 8))
        break;
      if (v14 == ++v16)
        goto LABEL_25;
    }
    XlCellRow::takeCell(*(XlCellRow **)(v11 + 8 * v16), a2);
    *((_WORD *)this + 17) = v16;
    *((_WORD *)this + 18) = *(_WORD *)(*(_QWORD *)(v17 + 8) + 8);
    v18 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
    goto LABEL_24;
  }
  LODWORD(v18) = 0;
  LODWORD(v16) = 0;
LABEL_24:
  if ((_DWORD)v16 == (_DWORD)v18)
LABEL_25:
    (*((void (**)(XlCell *))a2->var0 + 1))(a2);
}

uint64_t XlRowBlock::getMinRow(XlRowBlock *this)
{
  uint64_t *v1;
  uint64_t v2;
  _DWORD *exception;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  if (((*((_QWORD *)this + 2) - (_QWORD)v1) & 0x7FFFFFFF8) == 0 || (v2 = *v1) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  return *(unsigned __int16 *)(*(_QWORD *)(v2 + 8) + 8);
}

void XlCellRow::takeCell(XlCellRow *this, XlCell *a2)
{
  uint64_t v2;
  int var2;
  int MaxColumn;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _DWORD *exception;
  int v32;
  XlCell *v33;

  v33 = a2;
  v2 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v2 + 19))
  {
    exception = __cxa_allocate_exception(4uLL);
    v32 = 1003;
    goto LABEL_42;
  }
  if (!a2 || a2->var1 != *(unsigned __int16 *)(v2 + 8) || (var2 = a2->var2, var2 >= 256))
  {
    exception = __cxa_allocate_exception(4uLL);
    v32 = 1004;
    goto LABEL_42;
  }
  MaxColumn = XlCellRow::getMaxColumn(this);
  v7 = *((_QWORD *)this + 2);
  v8 = (_QWORD *)*((_QWORD *)this + 3);
  v9 = (unint64_t)v8 - v7;
  if (var2 <= MaxColumn)
  {
    if ((v9 & 0x7FFFFFFF8) == 0)
      return;
    v16 = (v9 >> 3);
    v17 = (char *)*((_QWORD *)this + 2);
    while (*(_QWORD *)v7)
    {
      v18 = *(__int16 *)(*(_QWORD *)v7 + 10);
      v19 = a2->var2;
      if (v18 > v19)
      {
        std::vector<XlCell *,ChAllocator<XlCell *>>::insert((uint64_t)this + 16, v17, (uint64_t *)&v33);
        return;
      }
      if (v18 == v19)
      {
        (*((void (**)(XlCell *))a2->var0 + 1))(a2);
        return;
      }
      v17 += 8;
      v7 += 8;
      if (!--v16)
        return;
    }
    exception = __cxa_allocate_exception(4uLL);
    v32 = 1005;
LABEL_42:
    *exception = v32;
  }
  v10 = v9 >> 3;
  v11 = a2->var2;
  v12 = *((_QWORD *)this + 1);
  if (!(v9 >> 3))
    *(_WORD *)(v12 + 14) = v11;
  if (v11 >= *(__int16 *)(v12 + 16))
  {
    v13 = (__int16)(v11 + 1);
    if (v13 >= 255)
      LOWORD(v13) = 255;
    *(_WORD *)(v12 + 16) = v13;
  }
  v14 = *((_QWORD *)this + 4);
  if ((unint64_t)v8 >= v14)
  {
    v20 = (v14 - v7) >> 3;
    if (2 * (int)v20 <= (v10 + 1))
      v21 = v10 + 1;
    else
      v21 = 2 * v20;
    if (v20 >= 0x7FFFFFFF)
      v22 = 0xFFFFFFFFLL;
    else
      v22 = v21;
    if ((_DWORD)v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 32, v22);
      v25 = v24;
    }
    else
    {
      v23 = 0;
      v25 = 0;
    }
    v26 = &v23[v9 & 0x7FFFFFFF8];
    v27 = &v23[8 * v25];
    *(_QWORD *)v26 = a2;
    v15 = v26 + 8;
    v29 = (char *)*((_QWORD *)this + 2);
    v28 = (char *)*((_QWORD *)this + 3);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v15;
    *((_QWORD *)this + 4) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v15 = v8 + 1;
  }
  *((_QWORD *)this + 3) = v15;
}

uint64_t XlCellRow::getMaxColumn(XlCellRow *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _DWORD *exception;
  int v7;

  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 19))
  {
    exception = __cxa_allocate_exception(4uLL);
    v7 = 1003;
    goto LABEL_9;
  }
  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3) - v1;
  if ((v2 & 0x7FFFFFFF8) == 0)
    return -1;
  v3 = *(_QWORD *)(v1 + 8 * ((v2 >> 3) - 1));
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    v7 = 1005;
LABEL_9:
    *exception = v7;
  }
  return *(__int16 *)(v3 + 10);
}

void XlBlank::XlBlank(XlBlank *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AB820;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
}

uint64_t XlBlank::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

XlCell *XlCell::setBlank(XlCell *this)
{
  XlCell *v1;

  v1 = this;
  this->var9 = 0;
  this->var7 = 255;
  this->var5 = 0.0;
  if (this->var10)
  {
    this = (XlCell *)this->var6;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v1->var6 = 0;
  v1->var10 = 0;
  v1->var4 = 1;
  return this;
}

void XlMulBlank::XlMulBlank(XlMulBlank *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACE20;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlMulBlank::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMulBlank *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int16 *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = *((_DWORD *)a2 + 2) - 6;
  v5 = v4 >> 1;
  if (v4 > 1)
  {
    v7 = 0;
    *((_QWORD *)this + 5) = operator new[](v4 & 0xFFFFFFFE);
    if (v5 <= 1)
      v8 = 1;
    else
      v8 = v5;
    v9 = 2 * v8;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v6 = (__int16 *)*((_QWORD *)this + 5);
      v6[v7 / 2] = v10;
      v7 += 2;
    }
    while (v9 != v7);
  }
  else
  {
    v6 = (__int16 *)*((_QWORD *)this + 5);
  }
  XlMulBlank::setCellFormats(a2, v6, v5);
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlMulBlank::setCellFormats(XlMulBlank *this, __int16 *a2, int a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C80BDFB0063);
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  return result;
}

XlCell *XlBinaryReader::processCompressed(XlBinaryReader *this, XlCell *a2)
{
  __int16 *v4;
  int v5;
  __int16 *v6;
  int v7;
  XlCell *result;
  int v9;
  int v10;
  int v11;
  __int16 *v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  int v16;
  __int16 v17;
  double v18;
  int v19;
  __int16 v20;
  _DWORD *exception;

  v4 = (__int16 *)*((_QWORD *)this + 48);
  v5 = v4[6];
  if (v5 == 189)
  {
    v13 = *((_QWORD *)v12 + 2);
    if (!v13)
      goto LABEL_20;
    v14 = v12;
    v15 = v12[19];
    v16 = *((__int16 *)this + 200);
    if (v15 < 1)
    {
      if (v15 + 0x7FFF < v16)
        goto LABEL_20;
    }
    else if (v16 < v15)
    {
      goto LABEL_20;
    }
    v17 = v16 - v15;
    if (*((_DWORD *)v12 + 8) > v17)
    {
      v18 = XlRk::decode((XlRk *)*(unsigned int *)(v13 + 4 * v17));
      result = XlCell::setNumber(a2, v18);
      v19 = *((__int16 *)this + 200);
      v10 = *((unsigned __int16 *)this + 200);
      a2->var3 = *(_WORD *)(*((_QWORD *)v14 + 3) + 2 * (v19 - v15));
      a2->var1 = v14[18];
      a2->var2 = v19;
      v11 = (unsigned __int16)v14[20];
      goto LABEL_14;
    }
LABEL_20:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8001;
  }
  if (v5 != 190)
    return (XlCell *)ChLogFunction("wrong compress type", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 4045);
  v7 = v6[15];
  result = XlCell::setBlank(a2);
  v9 = *((__int16 *)this + 200) - v7;
  if (v9 < 0 || v9 >= *((_DWORD *)v6 + 6))
    goto LABEL_20;
  v10 = *((unsigned __int16 *)this + 200);
  a2->var3 = *(_WORD *)(*((_QWORD *)v6 + 2) + 2 * v9);
  a2->var1 = v6[14];
  a2->var2 = v10;
  v11 = (unsigned __int16)v6[16];
LABEL_14:
  if (v10 == v11)
  {
    result = (XlCell *)*((_QWORD *)this + 48);
    if (result)
      result = (XlCell *)(*((uint64_t (**)(XlCell *))result->var0 + 1))(result);
    *((_QWORD *)this + 48) = 0;
    v20 = -1;
  }
  else
  {
    v20 = v10 + 1;
  }
  *((_WORD *)this + 200) = v20;
  return result;
}

void XlMulBlank::~XlMulBlank(XlMulBlank *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACE20;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACE20;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C80BDFB0063);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
}

void XlRk::XlRk(XlRk *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ADCB8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
}

uint64_t XlRk::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 360))(a2, a1);
}

double XlRk::decode(XlRk *this)
{
  double result;

  *(_QWORD *)&result = (unint64_t)(this & 0xFFFFFFFC) << 32;
  if ((this & 2) != 0)
    result = (double)((int)this >> 2);
  if ((this & 1) != 0)
    return result / 100.0;
  return result;
}

XlCell *XlCell::setNumber(XlCell *this, double a2)
{
  XlCell *v3;

  v3 = this;
  this->var9 = 0;
  this->var7 = 255;
  this->var5 = 0.0;
  if (this->var10)
  {
    this = (XlCell *)this->var6;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v3->var6 = 0;
  v3->var10 = 0;
  v3->var4 = 8;
  v3->var5 = a2;
  return this;
}

void XlRk::~XlRk(XlRk *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlParserVisitor::skipAhead(XlParserVisitor *this, XlHeader *a2, unsigned __int8 a3)
{
  if ((*((_DWORD *)this + 20) & 0x80000000) == 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  return XlParserVisitor::getHeader(this, a2, a3);
}

void sub_22A1C2964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1C2AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C2BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C2D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1C3240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t initEDRowInfo(uint64_t result, int a2)
{
  *(_DWORD *)result = -1;
  *(_DWORD *)(result + 4) = a2;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 22) = 0;
  *(_WORD *)(result + 20) = -1;
  *(_BYTE *)(result + 23) &= 0xFCu;
  return result;
}

void sub_22A1C34C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A1C3A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t maximumAllowedColumnNumber(void)
{
  return 0xFFFFLL;
}

uint64_t sizeofEDCellType(int a1, int a2)
{
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  void *v7;

  switch(a1)
  {
    case 0:
    case 4:
      goto LABEL_4;
    case 1:
      v3 = a2 == 0;
      v4 = 10;
      v5 = 14;
      break;
    case 2:
      v3 = a2 == 0;
      v4 = 16;
      v5 = 20;
      break;
    case 3:
    case 5:
      v3 = a2 == 0;
      v4 = 12;
      v5 = 16;
      break;
    default:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "unsigned int sizeofEDCellType(EDCellType, BOOL)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 353, 0, "Invalid cell type!");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
LABEL_4:
      v3 = a2 == 0;
      v4 = 8;
      v5 = 12;
      break;
  }
  if (v3)
    return v4;
  else
    return v5;
}

void sub_22A1C3B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unsigned int *updateRowInfoOffsetsInPackedDataForNewCell(unsigned int *result, unsigned int *a2, int a3, int a4, int a5)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int v13;

  v8 = result;
  v9 = *result;
  v10 = a3 + 1;
  if (*result > a3 + 1 && &result[6 * *result + 6] > a2)
    result = (unsigned int *)+[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
  if (v9 > v10)
  {
    v12 = &v8[6 * v10 + 10];
    v13 = ~a3 + v9;
    do
    {
      *(v12 - 1) += a4;
      *v12 += a5;
      v12 += 6;
      --v13;
    }
    while (v13);
  }
  return result;
}

void initEDCell(int *a1, int a2, int a3, int a4)
{
  unsigned int v8;
  int v9;
  int v10;

  if (a1)
  {
    v8 = sizeofEDCellType(a3, a4);
    bzero(a1, v8);
    if (a4)
      v9 = 0x10000000;
    else
      v9 = 0;
    v10 = v9 | (a3 << 29) | a2;
    *a1 = v10;
    a1[1] = -1;
    if ((v10 & 0x10000000) != 0 && a4)
      a1[2] = -1;
    if (a3 == 3)
      setStringIndexValueForEDCell(a1, -1);
  }
}

_DWORD *setStringIndexValueForEDCell(_DWORD *result, int a2)
{
  void *v2;
  void *v3;

  if (result)
  {
    if (*result >> 29 == 3)
    {
      if ((*result & 0x10000000) != 0)
        result[3] = a2;
      else
        result[2] = a2;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void setStringIndexValueForEDCell(EDCellHeader *, NSUInteger)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 246, 0, "Invalid Cell Type!");

      return (_DWORD *)+[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
  }
  return result;
}

void sub_22A1C3E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t setStyleIndexForEDCell(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 4) = a2;
  return result;
}

void sub_22A1C3F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sizeofEDCell(const EDCellHeader *a1)
{
  return sizeofEDCellType(a1->var0 >> 29, (a1->var0 >> 28) & 1);
}

uint64_t columnNumberForEDCell(const EDCellHeader *a1)
{
  if (a1)
    return LOWORD(a1->var0);
  else
    return 0xFFFFFFFFLL;
}

uint64_t setNumberValueForEDCell(uint64_t result, double a2)
{
  void *v2;
  void *v3;

  if (result)
  {
    if (*(_DWORD *)result >> 29 == 2)
    {
      if ((*(_DWORD *)result & 0x10000000) != 0)
        *(double *)(result + 12) = a2;
      else
        *(double *)(result + 8) = a2;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void setNumberValueForEDCell(EDCellHeader *, double)", a2);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 218, 0, "Invalid Cell Type!");

      return +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
  }
  return result;
}

void sub_22A1C4018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlRowBlock::~XlRowBlock(XlRowBlock *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AFC50;
  XlRowBlock::reset(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlRowBlock::~XlRowBlock(this);
  JUMPOUT(0x22E2DD408);
}

void XlCellRow::~XlCellRow(XlCellRow *this)
{
  XlCellRow::~XlCellRow(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F3AEF20;
  XlCellRow::reset(this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

_QWORD *XlCellRow::reset(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[2];
  *(_BYTE *)(this[1] + 19) = 0;
  v3 = this[3];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[2];
        v3 = v1[3];
      }
      if (v4 >= ((unint64_t)(v3 - v2) >> 3))
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v2 + 8 * v4++) = 0;
      v2 = v1[2];
      v3 = v1[3];
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[3] = v2;
  *((_DWORD *)v1 + 10) = 0;
  return this;
}

void XlCell::~XlCell(XlCell *this)
{
  this->var0 = (void **)&off_24F3AEEE8;
  XlCell::reset(this);
  JUMPOUT(0x22E2DD408);
}

{
  this->var0 = (void **)&off_24F3AEEE8;
  XlCell::reset(this);
}

XlCell *XlCell::reset(XlCell *this)
{
  XlCell *v1;

  v1 = this;
  this->var9 = 0;
  this->var7 = 255;
  this->var5 = 0.0;
  if (this->var10)
  {
    this = (XlCell *)this->var6;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v1->var6 = 0;
  v1->var10 = 0;
  v1->var4 = 0;
  if (v1->var11)
  {
    this = (XlCell *)v1->var8;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v1->var8 = 0;
  return this;
}

void XlRowProperties::~XlRowProperties(XlRowProperties *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlMulRk::XlMulRk(XlMulRk *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACE60;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 40) = 0;
}

uint64_t XlMulRk::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 328))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMulRk *a2)
{
  unsigned int v4;
  unsigned int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = *((_DWORD *)a2 + 2) - 6;
  v5 = v4 / 6;
  if (v4 > 5)
  {
    *((_QWORD *)this + 5) = operator new[](2 * (v4 / 6));
    v7 = 0;
    *((_QWORD *)this + 8) = operator new[](4 * v5);
    if (v5 <= 1)
      v8 = 1;
    else
      v8 = v5;
    do
    {
      *(_WORD *)(*((_QWORD *)this + 5) + 2 * v7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
      v6 = (int *)*((_QWORD *)this + 8);
      v6[v7++] = v9;
    }
    while (v8 != v7);
  }
  else
  {
    v6 = (int *)*((_QWORD *)this + 8);
  }
  XlMulRk::setNumbers(a2, v6, *((__int16 **)this + 5), v5);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlMulRk::setNumbers(XlMulRk *this, int *a2, __int16 *a3, int a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = *((_QWORD *)this + 3);
  if (v8)
    MEMORY[0x22E2DD3F0](v8, 0x1000C80BDFB0063);
  *((_QWORD *)this + 3) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8052888210);
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 8) = a4;
  return result;
}

void XlMulRk::~XlMulRk(XlMulRk *this)
{
  *(_QWORD *)this = &off_24F3ACE60;
  XlMulRk::setNumbers(this, 0, 0, 0);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3ACE60;
  XlMulRk::setNumbers(this, 0, 0, 0);
}

_DWORD *setStyleIndexForEDRowInfo(_DWORD *result, int a2)
{
  if (result)
    *result = a2;
  return result;
}

void sub_22A1C4558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C4640(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11;
  id v12;

  v11 = objc_begin_catch(exc_buf);
  if (a2 != 2)
  {
    +[TCMessageContext reportWarning:](TCMessageContext, "reportWarning:", OABadFormat);
    objc_end_catch();
    JUMPOUT(0x22A1C4620);
  }
  v12 = v11;
  objc_exception_rethrow();
}

void sub_22A1C46C0()
{
  __break(1u);
}

void sub_22A1C46F4()
{
  void *v0;

  objc_end_catch();

  JUMPOUT(0x22A1C4654);
}

BOOL XlBinaryReader::hasMoreGraphics(XlBinaryReader *this)
{
  return *((_DWORD *)this + 324) > 0;
}

void sub_22A1C48C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void *v10;
  void *v11;

  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(a10);

  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlNoteTable *a2)
{
  void **v3;
  void *result;
  uint64_t v5;
  XlNote *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int RecordDataOffset;
  XlHeader v11;
  uint64_t v12;

  v3 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 57) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v11);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    v5 = *((_QWORD *)this + 163);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 163) = 0;
    while (v11.var1 == 28)
    {
      v6 = (XlNote *)operator new(0x28uLL);
      XlNote::XlNote(v6, &v11);
      *((_QWORD *)this + 163) = v6;
      v7 = *((_QWORD *)this + 167);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 128))(v7, v8);
      v12 = *((_QWORD *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v11, *((_BYTE *)this + 1320));
    }
    v9 = *((_QWORD *)this + 164);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, -RecordDataOffset, 1);
  }
  return result;
}

void sub_22A1C4AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_22A1C4C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);
  v6 = v4;

  XlSheetPresentationTable::~XlSheetPresentationTable((XlSheetPresentationTable *)va);
  _Unwind_Resume(a1);
}

void XlSheetPresentationTable::XlSheetPresentationTable(XlSheetPresentationTable *this)
{
  *(_QWORD *)this = &off_24F3AFDD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
}

void XlBinaryReader::read(XlBinaryReader *this, XlSheetPresentationTable *a2)
{
  XlMsoDrawingSelection *v4;
  XlChartLineStyle *v5;
  XlRecord *v6;
  XlWindow2 *v7;
  void *v8;
  XlScl *v9;
  void *v10;
  XlPane *v11;
  XlChartSeriesFormat *v12;
  XlSelection *v13;
  XlSelection *v14;
  XlHeader v15;

  XlHeader::XlHeader(&v15);
  if ((*((_DWORD *)this + 56) & 0x80000000) != 0)
  {
    XlSheetPresentationTable::setDefault(a2);
  }
  else
  {
    XlSheetPresentationTable::reset(a2);
    if (*((int *)this + 69) >= 1)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v15, *((_BYTE *)this + 1320));
      if (v15.var1 == 237)
      {
        v4 = (XlMsoDrawingSelection *)operator new(0x20uLL);
        XlMsoDrawingSelection::XlMsoDrawingSelection(v4, &v15);
        *((_QWORD *)this + 163) = v4;
        (*(void (**)(_QWORD, XlChartLineStyle *))(**((_QWORD **)this + 167) + 816))(*((_QWORD *)this + 167), v5);
        XlChartPlot::takeDropLineFormat(a2, v5);
        *((_QWORD *)this + 163) = 0;
      }
      else
      {
        *((_DWORD *)this + 69) = -1;
      }
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *((unsigned int *)this + 56), 0);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v15, *((_BYTE *)this + 1320));
LABEL_9:
    while (2)
    {
      if (((unsigned __int16)v15.var1 | 0x200) == 0x23E)
      {
        v6 = (XlRecord *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 49);
        if (!v6)
          continue;
        v7 = (XlWindow2 *)operator new(0x28uLL);
        XlWindow2::XlWindow2(v7, &v15);
        *((_QWORD *)this + 163) = v7;
        (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 424))(*((_QWORD *)this + 167), v8);
        EshDataModelVisitor::takeClientVisitor((uint64_t)v6, (uint64_t)v8);
        *((_QWORD *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v15, *((_BYTE *)this + 1320));
        while (1)
        {
          if ((unsigned __int16)v15.var1 > 0x1A9u)
          {
            if (v15.var1 == 426 || v15.var1 == 574)
            {
LABEL_27:
              XlChangeHistory::appendChangeLogEntry(a2, v6);
              goto LABEL_9;
            }
          }
          else if (v15.var1 == 10 || v15.var1 == 62)
          {
            goto LABEL_27;
          }
          if (v15.var1 == 29)
          {
            v13 = (XlSelection *)operator new(0x38uLL);
            XlSelection::XlSelection(v13, &v15);
            *((_QWORD *)this + 163) = v13;
            (*(void (**)(_QWORD, XlSelection *))(**((_QWORD **)this + 167) + 384))(*((_QWORD *)this + 167), v14);
            XlSheetPresentation::takeSelection((XlSheetPresentation *)v6, v14);
            goto LABEL_24;
          }
          if (v15.var1 == 65)
            break;
          if (v15.var1 == 160)
          {
            v9 = (XlScl *)operator new(0x18uLL);
            XlScl::XlScl(v9, &v15);
            *((_QWORD *)this + 163) = v9;
            (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 1008))(*((_QWORD *)this + 167), v10);
            XlChartPlot::takeChartFormat((uint64_t)v6, (uint64_t)v10);
LABEL_24:
            *((_QWORD *)this + 163) = 0;
            goto LABEL_26;
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v15.var0, 1);
LABEL_26:
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v15, *((_BYTE *)this + 1320));
        }
        v11 = (XlPane *)operator new(0x20uLL);
        XlPane::XlPane(v11, &v15);
        *((_QWORD *)this + 163) = v11;
        (*(void (**)(_QWORD, XlChartSeriesFormat *))(**((_QWORD **)this + 167) + 352))(*((_QWORD *)this + 167), v12);
        XlChartPlot::takeChartSeriesFormat(v6, v12);
        goto LABEL_24;
      }
      break;
    }
  }
}

void sub_22A1C5028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlSheetPresentationTable::reset(XlSheetPresentationTable *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  result = *((_QWORD *)this + 4);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v2 = *((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v2;
  return result;
}

void XlSheetPresentation::XlSheetPresentation(XlSheetPresentation *this)
{
  this->var0 = (void **)&off_24F3AFDA0;
  *(_OWORD *)&this->var1 = 0u;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var4[1] = 0u;
  this->var4[3] = 0;
}

void XlWindow2::XlWindow2(XlWindow2 *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *v2 = &off_24F3AEC70;
  v2[2] = 64;
  v2[3] = 0x100010100010100;
  v2[4] = 65792;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlWindow2 *a2)
{
  int16x8_t v4;
  unsigned int v5;
  int16x8_t v6;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  XlWindow2::verifyVersion(a2);
  if (a2->var1.var2)
  {
    v4 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    *(int16x4_t *)v4.i8 = vdup_n_s16(v5);
    a2->var5 = v5 & 1;
    *(uint16x4_t *)v6.i8 = vshl_u16(*(uint16x4_t *)v4.i8, (uint16x4_t)0xFFF5FFF6FFF7FFF8);
    v4.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(v4.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)&a2->var6 = vmovn_s16(v4).u32[0];
    a2->var10 = (v5 & 0x20) != 0;
    a2->var11 = (v5 & 0x40) != 0;
    a2->var12 = (v5 & 0x80) != 0;
    v6.i64[0] &= 0xFF01FF01FF01FF01;
    *(_DWORD *)&a2->var13 = vmovn_s16(v6).u32[0];
    a2->var17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    a2->var18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
    if (a2->var1.var0 == 18)
    {
      a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
    }
    else
    {
      *(_DWORD *)&a2->var3 = 6553700;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

XlWindow2 *XlWindow2::verifyVersion(XlWindow2 *this)
{
  _DWORD *exception;
  unsigned int var0;
  unsigned __int8 v3;

  switch(this->var1.var2)
  {
    case 0u:
      if (this->var1.var0 != 14)
        goto LABEL_3;
      return this;
    case 2u:
    case 4u:
    case 8u:
      if (this->var1.var0 != 10)
        goto LABEL_3;
      return this;
    case 9u:
      var0 = this->var1.var0;
      switch(var0)
      {
        case 0xAu:
          v3 = 8;
          break;
        case 0x12u:
          return this;
        case 0xEu:
          v3 = 0;
          break;
        default:
LABEL_3:
          exception = __cxa_allocate_exception(4uLL);
          *exception = 8003;
      }
      this->var1.var2 = v3;
      return this;
    default:
      return this;
  }
}

void XlSelection::XlSelection(XlSelection *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3ADEF8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 38) = 0;
  *(_DWORD *)(v2 + 48) = 3;
  *(_BYTE *)(v2 + 52) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSelection *a2)
{
  int v4;
  int v5;
  int v6;
  XlRef *v7;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 21) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 22) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v4 >= 1)
  {
    v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      v7 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v7, 1);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v7);
      XlCoordList::appendVertex((XlCoordList *)a2, (XlVertex *)v7);
      v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1C54C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlRef::XlRef(XlRef *this, BOOL a2)
{
  *(_QWORD *)&this->var0 = -1;
  this->var4 = a2;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlRef *a2)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t result;

  a2->var0 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = **((_QWORD **)this + 2);
  if (a2->var4)
  {
    a2->var2 = (*(uint64_t (**)(void))(v4 + 64))();
    v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 2) + 64);
  }
  else
  {
    a2->var2 = (*(uint64_t (**)(void))(v4 + 72))();
    v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 2) + 72);
  }
  result = v5();
  a2->var3 = result;
  return result;
}

void XlCoordList::appendVertex(XlCoordList *this, XlVertex *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 2);
    v19 = (char *)*((_QWORD *)this + 3);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 3) = v8;
}

XlSheetPresentation *XlSheetPresentation::takeSelection(XlSheetPresentation *this, XlSelection *a2)
{
  int v3;
  XlCoordList **v4;
  XlSelection **v5;
  XlSelection **var4;
  XlCoordList *v7;
  signed int v8;
  XlVertex *MergeRegion;

  if (a2)
  {
    v3 = *((_DWORD *)a2 + 12);
    v4 = (XlCoordList **)&this->var4[2];
    v5 = &this->var4[1];
    var4 = &this->var4[3];
    if (!v3)
      var4 = this->var4;
    if (v3 != 1)
      v5 = var4;
    if (v3 != 2)
      v4 = (XlCoordList **)v5;
    v7 = *v4;
    if (*v4)
    {
      if ((__int16)((*((_DWORD *)a2 + 6) - *((_DWORD *)a2 + 4)) >> 3) >= 1)
      {
        v8 = 0;
        do
        {
          MergeRegion = (XlVertex *)XlMerge::getMergeRegion((XlMerge *)a2, v8);
          XlCoordList::appendVertex(v7, MergeRegion);
          ++v8;
        }
        while (v8 < (__int16)((*((_DWORD *)a2 + 6) - *((_DWORD *)a2 + 4)) >> 3));
      }
      *((_BYTE *)a2 + 52) = 0;
      return (XlSheetPresentation *)(*(uint64_t (**)(XlSelection *))(*(_QWORD *)a2 + 8))(a2);
    }
    else if (v3 == 2)
    {
      this->var4[2] = a2;
    }
    else if (v3 == 1)
    {
      this->var4[1] = a2;
    }
    else if (v3)
    {
      this->var4[3] = a2;
    }
    else
    {
      this->var4[0] = a2;
    }
  }
  return this;
}

void sub_22A1C585C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void XlSheetPresentationTable::~XlSheetPresentationTable(XlSheetPresentationTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AFDD8;
  XlSheetPresentationTable::reset(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlSheetPresentationTable::~XlSheetPresentationTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlSheetPresentation::~XlSheetPresentation(XlSheetPresentation *this)
{
  this->var0 = (void **)&off_24F3AFDA0;
  XlSheetPresentation::reset(this);
  JUMPOUT(0x22E2DD408);
}

{
  this->var0 = (void **)&off_24F3AFDA0;
  XlSheetPresentation::reset(this);
}

XlSelection *XlSheetPresentation::reset(XlSheetPresentation *this)
{
  XlWindow2 *var1;
  XlPane *var3;
  XlScl *var2;
  uint64_t v5;
  XlSelection **var4;
  XlSelection *result;

  var1 = this->var1;
  if (var1)
    (*((void (**)(XlWindow2 *))var1->var0 + 1))(var1);
  this->var1 = 0;
  var3 = this->var3;
  if (var3)
    (*(void (**)(XlPane *))(*(_QWORD *)var3 + 8))(var3);
  this->var3 = 0;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlScl *))(*(_QWORD *)var2 + 8))(var2);
  v5 = 0;
  this->var2 = 0;
  var4 = this->var4;
  do
  {
    result = var4[v5];
    if (result)
      result = (XlSelection *)(*(uint64_t (**)(XlSelection *))(*(_QWORD *)result + 8))(result);
    var4[v5++] = 0;
  }
  while (v5 != 4);
  return result;
}

void XlWindow2::~XlWindow2(XlWindow2 *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlSelection::~XlSelection(XlSelection *this)
{
  XlSelection::~XlSelection(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3ADEF8;
  if (*((_BYTE *)this + 52))
  {
    XlSelection::clearSelectionAreas(this);
    v2 = (void *)*((_QWORD *)this + 2);
    if (!v2)
      return;
  }
  else
  {
    v2 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 3) = v2;
    if (!v2)
      return;
  }
  *((_QWORD *)this + 3) = v2;
  operator delete(v2);
}

XlSelection *XlSelection::clearSelectionAreas(XlSelection *this)
{
  XlSelection *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(XlSelection **)(v2 + 8 * v4);
      if (this)
      {
        this = (XlSelection *)MEMORY[0x22E2DD408](this, 0x1000C400EA6A39BLL);
        v2 = *((_QWORD *)v1 + 2);
        v3 = *((_QWORD *)v1 + 3);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *((_QWORD *)v1 + 3) = v2;
  return this;
}

void sub_22A1C5BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  XlMergeTable::~XlMergeTable((XlMergeTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlMergeTable *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  XlMerge *v7;
  XlMerge *v8;
  signed int v9;
  XlRecord *MergeRegion;
  uint64_t v11;
  XlHeader v12;

  result = XlMergeTable::setDefault(a2);
  v5 = *((_QWORD *)this + 37);
  if (((*((_QWORD *)this + 38) - v5) & 0x3FFFFFFFCLL) != 0)
  {
    v6 = 0;
    do
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), *(unsigned int *)(v5 + 4 * v6), 0);
      XlHeader::XlHeader(&v12);
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((_BYTE *)this + 1320));
      result = *((_QWORD *)this + 163);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *((_QWORD *)this + 163) = 0;
      if (v12.var1 != 229)
        break;
      do
      {
        v7 = (XlMerge *)operator new(0x30uLL);
        XlMerge::XlMerge(v7, &v12);
        *((_QWORD *)this + 163) = v7;
        (*(void (**)(_QWORD, XlMerge *))(**((_QWORD **)this + 167) + 96))(*((_QWORD *)this + 167), v8);
        if ((*((_DWORD *)v8 + 6) - *((_DWORD *)v8 + 4)) << 13 >= 0x10000)
        {
          v9 = 0;
          do
          {
            MergeRegion = (XlRecord *)XlMerge::getMergeRegion(v8, v9);
            XlChangeHistory::appendChangeLogEntry(a2, MergeRegion);
            ++v9;
          }
          while (v9 < (__int16)((*((_DWORD *)v8 + 6) - *((_DWORD *)v8 + 4)) >> 3));
        }
        *((_BYTE *)v8 + 40) = 0;
        v11 = *((_QWORD *)this + 163);
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        *((_QWORD *)this + 163) = 0;
        result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v12, *((_BYTE *)this + 1320));
      }
      while (v12.var1 == 229);
      ++v6;
      v5 = *((_QWORD *)this + 37);
    }
    while (v6 < ((unint64_t)(*((_QWORD *)this + 38) - v5) >> 2));
  }
  return result;
}

void sub_22A1C5D9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlMergeTable::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  v3 = *(_QWORD *)(this + 16);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C400EA6A39BLL);
        v2 = *(_QWORD *)(v1 + 8);
        v3 = *(_QWORD *)(v1 + 16);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 16) = v2;
  return this;
}

void XlMergeTable::~XlMergeTable(XlMergeTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AF930;
  XlMergeTable::clear((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlMergeTable::~XlMergeTable(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1C5F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  XlConditionalFormatTable::~XlConditionalFormatTable((XlConditionalFormatTable *)&a9);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlConditionalFormatTable *a2)
{
  void *result;
  XlCondFmt *v5;
  XlChartLineStyle *v6;
  XlChartPlot *v7;
  void **v8;
  XlCf *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int RecordDataOffset;
  XlHeader v14;
  uint64_t v15;

  result = XlChangeHistory::clear(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 65) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v14);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((_BYTE *)this + 1320));
    result = (void *)*((_QWORD *)this + 163);
    if (result)
      result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 163) = 0;
    if (v14.var1 == 432)
    {
      do
      {
        v5 = (XlCondFmt *)operator new(0x38uLL);
        XlCondFmt::XlCondFmt(v5, &v14);
        *((_QWORD *)this + 163) = v5;
        (*(void (**)(_QWORD, XlChartLineStyle *))(**((_QWORD **)this + 167) + 520))(*((_QWORD *)this + 167), v6);
        v7 = (XlChartPlot *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 10);
        v8 = (void **)v7;
        if (v7)
        {
          XlChartPlot::takeDropLineFormat(v7, v6);
          *((_QWORD *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((_BYTE *)this + 1320));
          while (v14.var1 == 433)
          {
            v9 = (XlCf *)operator new(0x38uLL);
            XlCf::XlCf(v9, &v14);
            *((_QWORD *)this + 163) = v9;
            v10 = *((_QWORD *)this + 167);
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 512))(v10, v11);
            v15 = *((_QWORD *)this + 163);
            CsSimpleHeapVector<XlRecord>::pushBack(v8 + 1, &v15);
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            *((_QWORD *)this + 163) = 0;
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((_BYTE *)this + 1320));
          }
          XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v8);
        }
      }
      while (v14.var1 == 432);
      v12 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 65) = -1;
    }
  }
  return result;
}

void sub_22A1C61F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

void XlConditionalFormatTable::~XlConditionalFormatTable(XlConditionalFormatTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AF040;
  XlChangeHistory::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlConditionalFormatTable::~XlConditionalFormatTable(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1C6470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void *v10;
  void *v11;

  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(a10);
  _Unwind_Resume(a1);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlHyperlinkTable *a2)
{
  void **v3;
  void *result;
  XlHLink *v5;
  uint64_t v6;
  void *v7;
  int var1;
  XlHLinkToolTip *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int RecordDataOffset;
  XlHeader v14;
  uint64_t v15;

  v3 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 64) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v14);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((_BYTE *)this + 1320));
    result = (void *)*((_QWORD *)this + 163);
    if (result)
      result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 163) = 0;
    if (v14.var1 == 440)
    {
      do
      {
        v5 = (XlHLink *)operator new(0x50uLL);
        XlHLink::XlHLink(v5, &v14);
        *((_QWORD *)this + 163) = v5;
        v6 = *((_QWORD *)this + 167);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v6 + 744))(v6, v7);
        v15 = *((_QWORD *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v15);
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        *((_QWORD *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((_BYTE *)this + 1320));
        var1 = (unsigned __int16)v14.var1;
        if (v14.var1 == 2048)
        {
          v9 = (XlHLinkToolTip *)operator new(0x20uLL);
          XlHLinkToolTip::XlHLinkToolTip(v9, &v14);
          *((_QWORD *)this + 163) = v9;
          v10 = *((_QWORD *)this + 167);
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 1456))(v10, v11);
          v15 = *((_QWORD *)this + 163);
          CsSimpleHeapVector<XlRecord>::pushBack(v3, &v15);
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          *((_QWORD *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v14, *((_BYTE *)this + 1320));
          var1 = (unsigned __int16)v14.var1;
        }
      }
      while (var1 == 440);
      v12 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 64) = -1;
    }
  }
  return result;
}

void sub_22A1C66FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void *XlBinaryReader::read(XlBinaryReader *this, XlCustomViewTable *a2)
{
  void *result;
  void **v5;
  XlHeader *v6;
  XlEof *v7;
  XlHeader *v8;
  XlEof *v9;
  XlEof *v10;
  uint64_t v11;
  int RecordDataOffset;
  XlHeader v13;
  uint64_t v14;

  result = XlChangeHistory::clear(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 66) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v13);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
    result = (void *)*((_QWORD *)this + 163);
    if (result)
      result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 163) = 0;
    if (v13.var1 == 426)
    {
      do
      {
        v5 = (void **)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 15);
        v7 = XlRecordFactory::createRecord(&v13, v6);
        *((_QWORD *)this + 163) = v7;
        (*(void (**)(XlEof *, _QWORD))(*(_QWORD *)v7 + 16))(v7, *((_QWORD *)this + 167));
        v14 = *((_QWORD *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v14);
        while (1)
        {
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          *((_QWORD *)this + 163) = 0;
          XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
          if (v13.var1 == 427)
            break;
          v9 = XlRecordFactory::createRecord(&v13, v8);
          *((_QWORD *)this + 163) = v9;
          (*(void (**)(XlEof *, _QWORD))(*(_QWORD *)v9 + 16))(v9, *((_QWORD *)this + 167));
          v14 = *((_QWORD *)this + 163);
          CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v14);
        }
        v10 = XlRecordFactory::createRecord(&v13, v8);
        *((_QWORD *)this + 163) = v10;
        (*(void (**)(XlEof *, _QWORD))(*(_QWORD *)v10 + 16))(v10, *((_QWORD *)this + 167));
        v14 = *((_QWORD *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v5 + 1, &v14);
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        *((_QWORD *)this + 163) = 0;
        XlChangeHistory::appendChangeLogEntry(a2, (XlRecord *)v5);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
      }
      while (v13.var1 == 426);
      v11 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 66) = -1;
    }
  }
  return result;
}

void sub_22A1C692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void XlScenarioTable::XlScenarioTable(XlScenarioTable *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24F3AFCC0;
  *((_QWORD *)this + 1) = 0;
}

void *XlBinaryReader::read(XlBinaryReader *this, XlScenarioTable *a2)
{
  void **v3;
  void *result;
  XlScenMan *v5;
  uint64_t v6;
  void *v7;
  XlScenario *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int RecordDataOffset;
  XlHeader v13;
  uint64_t v14;

  v3 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 63) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v13);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
    result = (void *)*((_QWORD *)this + 163);
    if (result)
      result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 163) = 0;
    if (v13.var1 == 174)
    {
      v5 = (XlScenMan *)operator new(0x30uLL);
      XlScenMan::XlScenMan(v5, &v13);
      *((_QWORD *)this + 163) = v5;
      v6 = *((_QWORD *)this + 167);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v6 + 992))(v6, v7);
      v14 = *((_QWORD *)this + 163);
      CsSimpleHeapVector<XlRecord>::pushBack(v3, &v14);
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
      while (v13.var1 == 175)
      {
        v8 = (XlScenario *)operator new(0x78uLL);
        XlScenario::XlScenario(v8, &v13);
        *((_QWORD *)this + 163) = v8;
        v9 = *((_QWORD *)this + 167);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v9 + 984))(v9, v10);
        v14 = *((_QWORD *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v3, &v14);
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        *((_QWORD *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
      }
      v11 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 63) = -1;
    }
  }
  return result;
}

void sub_22A1C6B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void XlDataValidityTable::XlDataValidityTable(XlDataValidityTable *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_24F3AF278;
}

void *XlBinaryReader::read(XlBinaryReader *this, XlDataValidityTable *a2)
{
  void **v4;
  void *result;
  XlDVal *v6;
  XlChartLineStyle *v7;
  XlDV *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int RecordDataOffset;
  XlHeader v13;
  uint64_t v14;

  v4 = (void **)((char *)a2 + 8);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)a2 + 1);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    result = XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 60) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlHeader::XlHeader(&v13);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
    result = (void *)*((_QWORD *)this + 163);
    if (result)
      result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 163) = 0;
    if (v13.var1 == 434)
    {
      v6 = (XlDVal *)operator new(0x28uLL);
      XlDVal::XlDVal(v6, &v13);
      *((_QWORD *)this + 163) = v6;
      (*(void (**)(_QWORD, XlChartLineStyle *))(**((_QWORD **)this + 167) + 616))(*((_QWORD *)this + 167), v7);
      XlChartPlot::takeDropLineFormat(a2, v7);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
      while (v13.var1 == 446)
      {
        v8 = (XlDV *)operator new(0x70uLL);
        XlDV::XlDV(v8, &v13);
        *((_QWORD *)this + 163) = v8;
        v9 = *((_QWORD *)this + 167);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v9 + 608))(v9, v10);
        if (*((_DWORD *)v8 + 4) == 3)
          *((_BYTE *)a2 + 40) = 1;
        v14 = *((_QWORD *)this + 163);
        CsSimpleHeapVector<XlRecord>::pushBack(v4, &v14);
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        *((_QWORD *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v13, *((_BYTE *)this + 1320));
      }
      v11 = *((_QWORD *)this + 164);
      RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, -RecordDataOffset, 1);
    }
    else
    {
      *((_DWORD *)this + 60) = -1;
    }
  }
  return result;
}

void sub_22A1C6DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(XlBinaryReader *this, XlSortInfo *a2)
{
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  return XlSortInfo::operator=((uint64_t)a2, (uint64_t)this + 664);
}

uint64_t XlSortInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
    *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
    OcText::operator=(a1 + 16, a2 + 16);
    OcText::operator=(a1 + 64, a2 + 64);
    OcText::operator=(a1 + 112, a2 + 112);
  }
  return a1;
}

void XlSortInfo::~XlSortInfo(XlSortInfo *this)
{
  OcText *v2;

  *(_QWORD *)this = &off_24F3AFE10;
  v2 = (OcText *)((char *)this + 16);
  OcText::~OcText((OcText *)((char *)this + 112));
  OcText::~OcText((OcText *)((char *)this + 64));
  OcText::~OcText(v2);
}

{
  XlSortInfo::~XlSortInfo(this);
  JUMPOUT(0x22E2DD408);
}

void XlDataValidityTable::~XlDataValidityTable(XlDataValidityTable *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AF278;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  CsSimpleHeapVector<XlRecord>::clear((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector((void **)this + 1);
}

{
  XlDataValidityTable::~XlDataValidityTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlScenarioTable::~XlScenarioTable(XlScenarioTable *this)
{
  void **v2;

  *(_QWORD *)this = &off_24F3AFCC0;
  v2 = (void **)((char *)this + 8);
  CsSimpleHeapVector<XlRecord>::clear((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(v2);
}

{
  XlScenarioTable::~XlScenarioTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlCustomViewTable::~XlCustomViewTable(XlCustomViewTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AF208;
  XlChangeHistory::clear(this);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  XlCustomViewTable::~XlCustomViewTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlSheetBackgroundInfo::XlSheetBackgroundInfo(XlSheetBackgroundInfo *this)
{
  *(_QWORD *)this = &off_24F3AFCF8;
  *(_OWORD *)((char *)this + 8) = xmmword_22A4C3BC0;
}

void XlBinaryReader::read(XlBinaryReader *this, XlSheetBackgroundInfo *a2)
{
  __n128 v4;
  uint64_t v5;
  XlImData *v6;
  _DWORD *v7;
  uint64_t v8;
  XlHeader v9;

  v4.n128_f64[0] = XlSheetBackgroundInfo::clear(a2);
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  if ((*((_DWORD *)this + 59) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD, __n128))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v4);
    XlHeader::XlHeader(&v9);
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v9, *((_BYTE *)this + 1320));
    v5 = *((_QWORD *)this + 163);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 163) = 0;
    if (v9.var1 == 233)
    {
      v6 = (XlImData *)operator new(0x28uLL);
      XlImData::XlImData(v6, &v9);
      *((_QWORD *)this + 163) = v6;
      (*(void (**)(_QWORD, _DWORD *))(**((_QWORD **)this + 167) + 88))(*((_QWORD *)this + 167), v7);
      *((_DWORD *)a2 + 5) = v7[8];
      *(_QWORD *)((char *)a2 + 12) = *((_QWORD *)v7 + 3);
      *((_DWORD *)a2 + 2) = *((_DWORD *)this + 59);
      v8 = *((_QWORD *)this + 163);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      *((_QWORD *)this + 163) = 0;
    }
    else
    {
      *((_DWORD *)this + 59) = -1;
    }
  }
}

void sub_22A1C7174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double XlSheetBackgroundInfo::clear(XlSheetBackgroundInfo *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 8) = xmmword_22A4C3BC0;
  return result;
}

double XlBinaryReader::read(XlBinaryReader *this, XlWorksheetProtection *a2)
{
  double result;

  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
    XlBinaryReader::setSheet(this, 0);
  *(_QWORD *)&result = XlWorksheetProtection::operator=((uint64_t)a2, (uint64_t)this + 600).n128_u64[0];
  return result;
}

__n128 XlWorksheetProtection::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a2 != a1)
  {
    *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
    result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  }
  return result;
}

void XlSheetInfoTable::~XlSheetInfoTable(XlSheetInfoTable *this)
{
  XlSheetInfoTable::~XlSheetInfoTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AFD68;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector((void **)this + 1);
}

void XlBoundSheet::~XlBoundSheet(XlBoundSheet *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AB960;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AB960;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void XlEshObjectFactory::~XlEshObjectFactory(XlEshObjectFactory *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlLinkTable::~XlLinkTable(XlLinkTable *this)
{
  XlLinkTable::~XlLinkTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlLinkLookupTable *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3AF8F8;
  v2 = (XlLinkTable *)((char *)this + 8);
  XlLinkLookupTable::clearLookupTable((uint64_t)this + 8);
  XlLinkTable::clearLinkTable(this);
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  XlLinkLookupTable::~XlLinkLookupTable(v2);
}

void XlLinkLookupTable::~XlLinkLookupTable(XlLinkLookupTable *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3AF888;
  XlLinkLookupTable::clearLookupTable((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  XlLinkLookupTable::~XlLinkLookupTable(this);
  JUMPOUT(0x22E2DD408);
}

void XlNameTable::~XlNameTable(void **this)
{
  XlNameTable::~XlNameTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t i;

  *this = &off_24F3A7D88;
  for (i = 82; i != -2; i -= 6)
    OcText::~OcText((OcText *)&this[i]);
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlFormulaProcessor::~XlFormulaProcessor(XlFormulaProcessor *this)
{
  XlFormulaProcessor::~XlFormulaProcessor(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlFormulaParser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  *(_QWORD *)this = &off_24F3B0910;
  v2 = (XlFormulaParser *)*((_QWORD *)this + 1);
  if (v2)
  {
    XlFormulaParser::~XlFormulaParser(v2);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 1) = 0;
  v3 = *((_QWORD *)this + 18);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C80BDFB0063);
  *((_QWORD *)this + 18) = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 2) = 0;
  v5 = *((_QWORD *)this + 19);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
  *((_QWORD *)this + 19) = 0;
  v6 = *((unsigned int *)this + 18);
  if ((_DWORD)v6)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = *((_QWORD *)this + 3);
      v9 = *(_QWORD *)(v8 + 8 * i);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v8 = *((_QWORD *)this + 3);
        v6 = *((unsigned int *)this + 18);
      }
      *(_QWORD *)(v8 + 8 * i) = 0;
    }
  }
  v10 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v10;
  if (v10)
    operator delete(v10);
}

void XlFormulaParser::~XlFormulaParser(XlPtg **this)
{
  XlPtg *v2;
  XlPtg *v3;

  v2 = *this;
  if (v2)
  {
    (*((void (**)(XlPtg *, _QWORD))v2->var0 + 19))(v2, 0);
    if (*this)
      (*((void (**)(XlPtg *))(*this)->var0 + 1))(*this);
    *this = 0;
  }
  v3 = this[5];
  if (v3)
  {
    XlPtg::~XlPtg(v3);
    MEMORY[0x22E2DD408]();
  }
  this[5] = 0;
  ChStack<XlPtg *>::~ChStack((uint64_t *)this + 1);
}

uint64_t *ChStack<XlPtg *>::~ChStack(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x20C8093837F09);
  *a1 = 0;
  v3 = a1[1];
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x20C8093837F09);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 6) = 0;
  a1[2] = 0;
  return a1;
}

void sub_22A1C789C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1C7958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1C7A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1C7EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1C806C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C8160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1C8290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C8548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1C8650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1C88D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{

  _Unwind_Resume(a1);
}

void sub_22A1C89F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C8B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_DWORD *typeForEDCell(_DWORD *result)
{
  if (result)
    return (_DWORD *)(*result >> 29);
  return result;
}

id stringValueForEDCell(const EDCellHeader *a1, EDResources *a2)
{
  EDResources *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = stringIndexValueForEDCell(a1);
  if (v4 == -1)
  {
    v6 = 0;
  }
  else
  {
    -[EDResources strings](v3, "strings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndex:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

void sub_22A1C8C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t stringIndexValueForEDCell(const EDCellHeader *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  if (!a1)
    return -1;
  if (a1->var0 >> 29 != 3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSUInteger stringIndexValueForEDCell(const EDCellHeader *)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 233, 0, "Invalid Cell Type!");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    return -1;
  }
  v1 = 12;
  if ((a1->var0 & 0x10000000) == 0)
    v1 = 8;
  v2 = *(unsigned int *)((char *)&a1->var0 + v1);
  if ((_DWORD)v2 == -1)
    return -1;
  else
    return v2;
}

void sub_22A1C8CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1C8E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1C8FD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1C90D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A1C9114()
{
  JUMPOUT(0x22A1C9108);
}

void sub_22A1C9284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1C9360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A1C94D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1C95D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1C97BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_22A1C98F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1C9BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1C9D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CA078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1CA268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1CA3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1CA894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A1CAA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A1CAD00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const EDCellHeader *styleForEDCell(EDCellHeader *a1, EDResources *a2)
{
  EDResources *v3;
  EDResources *v4;
  void *v5;
  void *v6;
  uint64_t var1;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    -[EDResources styles](v3, "styles");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (a1->var1 == -1)
      var1 = -1;
    else
      var1 = a1->var1;
    objc_msgSend(v5, "objectAtIndex:", var1);
    a1 = (EDCellHeader *)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

void sub_22A1CADB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CAF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1CB09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1CB138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1CB2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CB374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CB48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1CB540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CB770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1CB8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CBD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_22A1CBE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CBF44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CC1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1CC488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CC5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1CC654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CC7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1CC864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CC8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1CCCA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CCD2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CCEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CCF28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CCF9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double numberValueForEDCell(const EDCellHeader *a1)
{
  double v1;
  void *v2;
  void *v3;

  v1 = 0.0;
  if (a1)
  {
    if (a1->var0 >> 29 == 2)
    {
      if ((a1->var0 & 0x10000000) != 0)
        return *(double *)&a1[1].var1;
      else
        return *(double *)&a1[1];
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "double numberValueForEDCell(const EDCellHeader *)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 205, 0, "Invalid Cell Type!");

      +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
  }
  return v1;
}

void sub_22A1CD0F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CD344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1CD3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CD548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void sub_22A1CD608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CD6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CD744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_22A1CD82C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_22A1CD8C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_22A1CD9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CDB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1CDC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A1CDD4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1CDF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1CE030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EDWorkbook;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A1CE1E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CE23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDRowBlocks;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A1CE2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDRowBlock;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22A1CE474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1CE4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EDSheet;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void XlChartObjectFactory::~XlChartObjectFactory(XlObjectFactory *this)
{
  XlObjectFactory::~XlObjectFactory(this);
  JUMPOUT(0x22E2DD408);
}

void XlObjectFactory::~XlObjectFactory(XlObjectFactory *this)
{
  XlEshObjectFactory *var1;

  this->var0 = (void **)&off_24F3AF9D8;
  var1 = this->var1;
  if (var1)
    (*((void (**)(XlEshObjectFactory *))var1->var0 + 1))(var1);
  this->var1 = 0;
}

{
  XlEshObjectFactory *var1;

  this->var0 = (void **)&off_24F3AF9D8;
  var1 = this->var1;
  if (var1)
    (*((void (**)(XlEshObjectFactory *))var1->var0 + 1))(var1);
  this->var1 = 0;
}

{
  XlEshObjectFactory *var1;

  this->var0 = (void **)&off_24F3AF9D8;
  var1 = this->var1;
  if (var1)
    (*((void (**)(XlEshObjectFactory *))var1->var0 + 1))(var1);
  this->var1 = 0;
  JUMPOUT(0x22E2DD408);
}

void XlChartBinaryReader::~XlChartBinaryReader(XlChartBinaryReader *this)
{
  OcReader *v1;

  OcReader::~OcReader(v1 + 125);
  JUMPOUT(0x22E2DD408);
}

{
  OcReader *v1;

  OcReader::~OcReader(v1 + 125);
}

void XlChartBinaryReader::~XlChartBinaryReader(XlChartBinaryReader *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = &off_24F3AA708;
  *((_QWORD *)this + 2) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[7];
  v5 = (void *)*((_QWORD *)this + 246);
  if (v5)
  {
    *((_QWORD *)this + 247) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 243);
  if (v6)
  {
    *((_QWORD *)this + 244) = v6;
    operator delete(v6);
  }
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1904, *((_QWORD **)this + 239));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1880, *((_QWORD **)this + 236));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1848, *((_QWORD **)this + 232));
  std::__tree<TSUFlushableObjectInfo *,TSUFlushableObjectInfoPointerFlushingOrderLess,std::allocator<TSUFlushableObjectInfo *>>::destroy((uint64_t)this + 1824, *((_QWORD **)this + 229));
  v7 = (void *)*((_QWORD *)this + 225);
  if (v7)
  {
    *((_QWORD *)this + 226) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 222);
  if (v8)
  {
    *((_QWORD *)this + 223) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 217);
  if (v9)
  {
    *((_QWORD *)this + 218) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 210);
  if (v10)
  {
    *((_QWORD *)this + 211) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 202);
  if (v11)
  {
    *((_QWORD *)this + 203) = v11;
    operator delete(v11);
  }
  *((_QWORD *)this + 172) = &off_24F3AB3E0;
  XlCellTableInfo::~XlCellTableInfo((XlChartBinaryReader *)((char *)this + 1512));
  XlPageProperties::~XlPageProperties((XlChartBinaryReader *)((char *)this + 1400));
  v12 = (void *)*((_QWORD *)this + 169);
  if (v12)
  {
    *((_QWORD *)this + 170) = v12;
    operator delete(v12);
  }
  XlBinaryReader::~XlBinaryReader(this, a2 + 1);
}

void XlBinaryReader::~XlBinaryReader(XlBinaryReader *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  SsrwOORootStorage *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = &off_24F3B0C18;
  *((_QWORD *)this + 2) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[4];
  v4 = *((_QWORD *)this + 164);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (SsrwOORootStorage *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 164) = 0;
  if (v5)
  {
    SsrwOORootStorage::~SsrwOORootStorage(v5);
    MEMORY[0x22E2DD408]();
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  v6 = *((_QWORD *)this + 167);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 167) = 0;
  v7 = *((_QWORD *)this + 163);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 163) = 0;
  v8 = *((_QWORD *)this + 19);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 19) = 0;
  v9 = *((_QWORD *)this + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 20) = 0;
  v10 = *((_QWORD *)this + 46);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 46) = 0;
  v11 = *((_QWORD *)this + 47);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 47) = 0;
  v12 = *((_QWORD *)this + 48);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 48) = 0;
  v13 = *((_QWORD *)this + 52);
  v14 = *((_QWORD *)this + 53);
  if (((v14 - v13) & 0x7FFFFFFF8) != 0)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v13 + 8 * v15);
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v13 = *((_QWORD *)this + 52);
        v14 = *((_QWORD *)this + 53);
      }
      ++v15;
    }
    while (v15 < ((unint64_t)(v14 - v13) >> 3));
  }
  *((_QWORD *)this + 53) = v13;
  *((_QWORD *)this + 38) = *((_QWORD *)this + 37);
  *((_QWORD *)this + 41) = *((_QWORD *)this + 40);
  *((_QWORD *)this + 44) = *((_QWORD *)this + 43);
  *((_QWORD *)this + 142) = &off_24F3AB3E0;
  XlCellTableInfo::~XlCellTableInfo((XlBinaryReader *)((char *)this + 1272));
  XlPageProperties::~XlPageProperties((XlBinaryReader *)((char *)this + 1160));
  XlDocumentProperties::~XlDocumentProperties((XlBinaryReader *)((char *)this + 1016));
  XlFileProtection::~XlFileProtection((XlBinaryReader *)((char *)this + 864));
  XlSortInfo::~XlSortInfo((XlBinaryReader *)((char *)this + 664));
  XlCalculationProperties::~XlCalculationProperties((XlBinaryReader *)((char *)this + 632));
  XlWorksheetProperties::~XlWorksheetProperties((XlBinaryReader *)((char *)this + 456));
  v17 = (void *)*((_QWORD *)this + 52);
  if (v17)
  {
    *((_QWORD *)this + 53) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 43);
  if (v18)
  {
    *((_QWORD *)this + 44) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 40);
  if (v19)
  {
    *((_QWORD *)this + 41) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 37);
  if (v20)
  {
    *((_QWORD *)this + 38) = v20;
    operator delete(v20);
  }
  XlEshBinaryReader::~XlEshBinaryReader((XlBinaryReader *)((char *)this + 40));
}

void XlChartParserVisitor::~XlChartParserVisitor(XlChartParserVisitor *this)
{
  XlParserVisitor::~XlParserVisitor(this);
  JUMPOUT(0x22E2DD408);
}

void XlParserVisitor::~XlParserVisitor(XlParserVisitor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24F3AFF48;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C80BDFB0063);
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C80BDFB0063);
  *((_QWORD *)this + 6) = 0;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    MEMORY[0x22E2DD3F0](v5, 0x1000C8052888210);
  *((_QWORD *)this + 7) = 0;
  v6 = *((_QWORD *)this + 8);
  if (v6)
    MEMORY[0x22E2DD3F0](v6, 0x1000C8052888210);
  *((_QWORD *)this + 8) = 0;
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 4) = 0;
  TSURectWithOriginAndSize((char *)this + 8);
}

{
  XlParserVisitor::~XlParserVisitor(this);
  JUMPOUT(0x22E2DD408);
}

void XlStringExtractor::~XlStringExtractor(XlStringExtractor *this)
{
  XlStringExtractor::~XlStringExtractor(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3B1648;
  XlStringExtractor::reset(this);
  XlString::~XlString((XlString *)((char *)this + 32));
  TSURectWithOriginAndSize((char *)this + 8);
}

uint64_t XlStringExtractor::reset(XlStringExtractor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 17);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 17) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v6 = *(_QWORD *)(v3 - 8);
    v5 = v3 - 8;
    v4 = v6;
    if (v6)
    {
      v7 = 16 * v4;
      do
      {
        v8 = *(_QWORD *)(v5 + v7);
        if (v8)
          MEMORY[0x22E2DD3F0](v8, 0x1000C8052888210);
        *(_QWORD *)(v5 + v7) = 0;
        v7 -= 16;
      }
      while (v7);
    }
    MEMORY[0x22E2DD3F0](v5 - 8, 0x1010C8057418832);
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)((char *)this + 156) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  return XlString::reset((XlString *)((char *)this + 32));
}

void XlIndex::~XlIndex(XlIndex *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACA20;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ACA20;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
}

void XlFileProtection::~XlFileProtection(XlFileProtection *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AF768;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
    *((_QWORD *)this + 15) = 0;
  }
  v3 = *((_QWORD *)this + 17);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  *((_QWORD *)this + 17) = 0;
  OcText::~OcText((OcText *)((char *)this + 64));
  OcText::~OcText((OcText *)((char *)this + 16));
}

{
  XlFileProtection::~XlFileProtection(this);
  JUMPOUT(0x22E2DD408);
}

void XlEshBinaryReader::~XlEshBinaryReader(XlEshBinaryReader *this)
{
  void (**v2)(XlEshBinaryReader *__hidden);
  uint64_t v3;
  uint64_t v4;

  v2 = &off_24F3B1430;
  *(_QWORD *)this = &off_24F3B1430;
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    XlReadStgStream::finish(v3);
    v2 = *(void (***)(XlEshBinaryReader *__hidden))this;
  }
  *((_DWORD *)this + 24) = 0;
  v2[3](this);
  v4 = *((_QWORD *)this + 13);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 13) = 0;
  EshBinaryReader::~EshBinaryReader(this);
}

{
  XlEshBinaryReader::~XlEshBinaryReader(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1CED64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EMNumberFormatter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void XlCodeName::XlCodeName(XlCodeName *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ABAA0;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlCodeName *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  XlString *v8;
  char v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v6 >= 1)
  {
    v7 = v6;
    v8 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v8);
    *((_QWORD *)this + 4) = v8;
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v9, v5 + v4, *((XlString **)this + 4));
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1CEE8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlCodeName::~XlCodeName(XlCodeName *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ABAA0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3ABAA0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void XlLink::XlLink(XlLink *this)
{
  *(_QWORD *)this = &off_24F3AF850;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  XlLinkOperandTable::XlLinkOperandTable((XlLink *)((char *)this + 80));
}

void sub_22A1CEF5C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[7];
  if (v4)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void XlLinkOperandTable::XlLinkOperandTable(XlLinkOperandTable *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24F3AF8C0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
}

_QWORD *XlBinaryReader::read(XlBinaryReader *this, XlLink *a2)
{
  int v4;
  _QWORD *result;
  XlSupBook *v6;
  void *v7;
  unsigned int v8;
  int v9;
  XlRef *ExternRef;
  uint64_t v11;
  XlHeader *v12;
  int var1;
  XlExternName *v14;
  XlSxString *v15;
  XlEof *v16;
  XlHeader v17;

  v4 = *((unsigned __int8 *)a2 + 28);
  XlHeader::XlHeader(&v17);
  result = XlLink::clear(a2);
  if ((*((_DWORD *)this + 45) & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v17, *((_BYTE *)this + 1320));
    *((_QWORD *)this + 22) = -1;
    if (v17.var1 == 430)
    {
      v6 = (XlSupBook *)operator new(0x38uLL);
      XlSupBook::XlSupBook(v6, &v17);
      *((_QWORD *)this + 163) = v6;
      (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 408))(*((_QWORD *)this + 167), v7);
      *((_DWORD *)a2 + 4) = *((_DWORD *)v7 + 12);
      *((_WORD *)a2 + 10) = *((_WORD *)v7 + 26);
      EshDataModelVisitor::takeClientVisitor((uint64_t)a2, *((_QWORD *)v7 + 2));
      if (((*((_QWORD *)v7 + 4) - *((_QWORD *)v7 + 3)) & 0x7FFFFFFF8) != 0)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          ExternRef = (XlRef *)XlExternSheet::getExternRef((XlExternSheet *)v7, v8);
          XlCondFmt::appendCellRange(a2, ExternRef);
          v8 = (unsigned __int16)++v9;
        }
        while (((*((_QWORD *)v7 + 4) - *((_QWORD *)v7 + 3)) >> 3) > (unsigned __int16)v9);
      }
      *((_WORD *)v7 + 27) = 0;
      v11 = *((_QWORD *)this + 163);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      while (1)
      {
        *((_QWORD *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v17, *((_BYTE *)this + 1320));
        var1 = (unsigned __int16)v17.var1;
        if (v17.var1 != 35)
          break;
        v14 = (XlExternName *)operator new(0x58uLL);
        XlExternName::XlExternName(v14, &v17);
        *((_QWORD *)this + 163) = v14;
        (*(void (**)(_QWORD, XlSxString *))(**((_QWORD **)this + 167) + 640))(*((_QWORD *)this + 167), v15);
        XlSxExt::appendODBC(a2, v15);
      }
      if ((unsigned __int16)v17.var1 - 89 < 2)
      {
        *((_DWORD *)this + 44) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164))
                               - 4;
        var1 = (unsigned __int16)v17.var1;
      }
      if ((var1 - 89) <= 1)
      {
        do
        {
          if (v4)
          {
            v16 = XlRecordFactory::createRecord(&v17, v12);
            *((_QWORD *)this + 163) = v16;
            (*(void (**)(XlEof *, _QWORD))(*(_QWORD *)v16 + 16))(v16, *((_QWORD *)this + 167));
            XlLink::appendOperand((void **)a2, *((XlRecord **)this + 163));
            *((_QWORD *)this + 163) = 0;
            XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v17, *((_BYTE *)this + 1320));
          }
          else
          {
            *((_DWORD *)a2 + 6) = XlLink::getTotalOperandCount(a2) + 1;
            XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v17, *((_BYTE *)this + 1320));
          }
        }
        while ((unsigned __int16)v17.var1 - 89 < 2);
      }
    }
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), 4294967292, 1);
    if (v17.var1 == 430)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
      *((_DWORD *)this + 45) = (_DWORD)result;
    }
  }
  return result;
}

void sub_22A1CF264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *XlLink::clear(XlLink *this)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  XlLink::clearTabNames(this);
  XlLink::clearExternNames(this);
  result = CsSimpleHeapVector<XlRecord>::clear((_QWORD *)this + 11);
  *((_DWORD *)this + 6) = 0;
  return result;
}

_QWORD *XlLink::clearTabNames(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = this[4];
  if (((this[5] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[4];
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = v1[4];
    }
    while (v3 < ((unint64_t)(v1[5] - v2) >> 3));
  }
  v1[5] = v2;
  return this;
}

_QWORD *XlLink::clearExternNames(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  v2 = this[7];
  if (((this[8] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[7];
      }
      *(_QWORD *)(v2 + 8 * v3++) = 0;
      v2 = v1[7];
    }
    while (v3 < ((unint64_t)(v1[8] - v2) >> 3));
  }
  v1[8] = v2;
  return this;
}

void XlSupBook::XlSupBook(XlSupBook *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE1F0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 46) = 0;
  *(_WORD *)(v2 + 54) = 257;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSupBook *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  XlString *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v15;
  XlString *v16;
  int v17;
  _DWORD *exception;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) <= 8u)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8003;
  }
  *((_WORD *)a2 + 26) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v6 = *((_DWORD *)a2 + 2);
  v7 = v6 - 2;
  if (v6 == 4)
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2)) == 1025)
      v8 = 2;
    else
      v8 = 4;
    goto LABEL_9;
  }
  if (v7 >= 4)
  {
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    v10 = v5 + v4;
    *((_QWORD *)this + 4) = v9;
    LODWORD(v9) = XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v9);
    XlSupBook::setEncodedName((uint64_t)a2, *((XlString **)this + 4));
    *((_QWORD *)this + 4) = 0;
    v11 = v7 - (_DWORD)v9;
    v12 = *((unsigned __int16 *)a2 + 26);
    if (!((v7 - (_DWORD)v9) | v12))
    {
      v8 = 3;
LABEL_9:
      *((_DWORD *)a2 + 12) = v8;
      return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
    }
    *((_DWORD *)a2 + 12) = 1;
    XlSupBook::clearTabNames((uint64_t)a2);
    if (v11 >= 4 && v12 != 0)
    {
      v15 = 0;
      do
      {
        if (v11 >= 4)
        {
          v16 = (XlString *)operator new(0x68uLL);
          XlString::XlString(v16);
          v17 = XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v16);
          XlCrn::appendOperand(a2, (XlOper *)v16);
          v11 -= v17;
        }
        ++v15;
      }
      while (v15 < v12);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1CF5A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlSupBook::~XlSupBook(XlSupBook *this)
{
  XlSupBook::~XlSupBook(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F3AE1F0;
  XlSupBook::clearTabNames((uint64_t)this);
  if (*((_BYTE *)this + 55))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *((_QWORD *)this + 2) = 0;
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t XlSupBook::clearTabNames(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 54))
  {
    v2 = *(_QWORD *)(this + 24);
    if (((*(_QWORD *)(this + 32) - v2) & 0x7FFFFFFF8) != 0)
    {
      v3 = 0;
      do
      {
        this = *(_QWORD *)(v2 + 8 * v3);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          v2 = *(_QWORD *)(v1 + 24);
        }
        *(_QWORD *)(v2 + 8 * v3++) = 0;
        v2 = *(_QWORD *)(v1 + 24);
      }
      while (v3 < ((unint64_t)(*(_QWORD *)(v1 + 32) - v2) >> 3));
    }
  }
  else
  {
    v2 = *(_QWORD *)(this + 24);
  }
  *(_QWORD *)(v1 + 32) = v2;
  return this;
}

void XlExternSheet::XlExternSheet(XlExternSheet *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC3E0;
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlExternSheet *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int i;
  XlOper *v7;
  _DWORD *exception;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) <= 8u)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8003;
  }
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (v4)
  {
    v5 = v4;
    for (i = 0; i < v5; ++i)
    {
      v7 = (XlOper *)operator new(6uLL);
      *(_DWORD *)v7 = 0;
      *((_WORD *)v7 + 2) = 0;
      *(_WORD *)v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
      *((_WORD *)v7 + 1) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
      *((_WORD *)v7 + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
      XlCrn::appendOperand(a2, v7);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1CF808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

void XlExternSheet::~XlExternSheet(XlExternSheet *this)
{
  XlExternSheet::~XlExternSheet(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3AC3E0;
  XlExternSheet::clearExternRefTable((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t XlExternSheet::clearExternRefTable(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  if (*(_BYTE *)(this + 16))
  {
    v2 = *(_QWORD *)(this + 24);
    v3 = *(_QWORD *)(this + 32);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      v4 = 0;
      do
      {
        this = *(_QWORD *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x22E2DD408](this, 0x1000C40274DC3F3);
          v2 = *(_QWORD *)(v1 + 24);
          v3 = *(_QWORD *)(v1 + 32);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    v2 = *(_QWORD *)(this + 24);
  }
  *(_QWORD *)(v1 + 32) = v2;
  return this;
}

void XlName::XlName(XlName *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3ACEA0;
  *(_DWORD *)(v2 + 84) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_BYTE *)(v2 + 80) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlName *a2)
{
  int v4;
  int16x8_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  XlString *v13;
  _BYTE *v14;
  XlString *v15;
  unsigned int var9;
  void *v17;
  char v18;
  XlString *v19;
  XlChartSeriesFormat **v20;
  _BYTE *v21;
  XlString *v22;
  char v23;
  XlString *v24;
  XlChartSeriesFormat **v25;
  _BYTE *v26;
  XlString *v27;
  char v28;
  XlString *v29;
  XlChartSeriesFormat **v30;
  _BYTE *v31;
  XlString *v32;
  char v33;
  XlString *v34;
  XlChartSeriesFormat **v35;
  _BYTE *v36;
  XlString *v37;
  __int16 v39[2];

  *(_DWORD *)v39 = 0;
  v4 = a2->var1.var0 + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var14 = v6 & 1;
  v5.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)&a2->var15 = vmovn_s16(v5).u32[0];
  a2->var20 = (v6 & 0x1000) != 0;
  a2->var19 = (v6 & 0x20) != 0;
  a2->var13 = (v6 >> 6) & 0x3F;
  a2->var12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  a2->var9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (a2->var1.var2 >= 5u)
  {
    a2->var10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    a2->var11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  }
  if (a2->var19)
  {
    if (a2->var1.var2 >= 9u)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 1, 1);
    a2->var21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v7 - 1, 1);
  }
  else if (v7)
  {
    if (a2->var1.var2 < 9u)
    {
      *(_DWORD *)v39 = v7;
      v14 = operator new[](v7 + 1);
      *((_QWORD *)this + 3) = v14;
      v14[v7] = 0;
      (*(void (**)(_QWORD, _QWORD, __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), v39);
      v15 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v15);
      *((_QWORD *)this + 4) = v15;
      XlString::takeString((uint64_t)v15, *((char **)this + 3), *(unsigned int *)v39, v7, 0);
      *((_QWORD *)this + 3) = 0;
    }
    else
    {
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
      v13 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v13);
      *((_QWORD *)this + 4) = v13;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v12, v4, v13);
    }
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  if (a2->var1.var2 >= 5u)
  {
    var9 = a2->var9;
    *(_DWORD *)v39 = var9;
    if (var9)
    {
      if (!v8 && !v9 && !v10 && !v11)
      {
        var9 = v4 - (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
        *(_DWORD *)v39 = var9;
      }
      v17 = operator new[](var9);
      *((_QWORD *)this + 3) = v17;
      (*(void (**)(_QWORD, void *, __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v17, v39);
      XlName::setFormula(a2, *((char **)this + 3), v39[0]);
      *((_QWORD *)this + 3) = 0;
    }
    if (v8)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)v39 = v8;
        v21 = operator new[](v8 + 1);
        *((_QWORD *)this + 3) = v21;
        v21[*(unsigned int *)v39] = 0;
        (*(void (**)(_QWORD, _QWORD, __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), v39);
        v22 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v22);
        *((_QWORD *)this + 4) = v22;
        v20 = (XlChartSeriesFormat **)((char *)this + 32);
        XlString::takeString((uint64_t)v22, *((char **)this + 3), *(_DWORD *)v39 + 1, v8, 0);
        *((_QWORD *)this + 3) = 0;
      }
      else
      {
        v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
        v19 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v19);
        *((_QWORD *)this + 4) = v19;
        v20 = (XlChartSeriesFormat **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v8, v18, v4, v19);
      }
      XlChartPlot::takeChartSeriesFormat((XlChartPlot *)a2, *v20);
      *v20 = 0;
    }
    if (v9)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)v39 = v9;
        v26 = operator new[](v9 + 1);
        *((_QWORD *)this + 3) = v26;
        v26[*(unsigned int *)v39] = 0;
        (*(void (**)(_QWORD, _QWORD, __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), v39);
        v27 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v27);
        *((_QWORD *)this + 4) = v27;
        v25 = (XlChartSeriesFormat **)((char *)this + 32);
        XlString::takeString((uint64_t)v27, *((char **)this + 3), *(_DWORD *)v39 + 1, v9, 0);
      }
      else
      {
        v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
        v24 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v24);
        *((_QWORD *)this + 4) = v24;
        v25 = (XlChartSeriesFormat **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v9, v23, v4, v24);
      }
      XlChartPlot::takeChartSeriesFormat((XlChartPlot *)a2, *v25);
      *v25 = 0;
    }
    if (v10)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)v39 = v10;
        v31 = operator new[](v10 + 1);
        *((_QWORD *)this + 3) = v31;
        v31[*(unsigned int *)v39] = 0;
        (*(void (**)(_QWORD, _QWORD, __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), v39);
        v32 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v32);
        *((_QWORD *)this + 4) = v32;
        v30 = (XlChartSeriesFormat **)((char *)this + 32);
        XlString::takeString((uint64_t)v32, *((char **)this + 3), *(_DWORD *)v39 + 1, v10, 0);
        *((_QWORD *)this + 3) = 0;
      }
      else
      {
        v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
        v29 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v29);
        *((_QWORD *)this + 4) = v29;
        v30 = (XlChartSeriesFormat **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v28, v4, v29);
      }
      XlChartPlot::takeChartSeriesFormat((XlChartPlot *)a2, *v30);
      *v30 = 0;
    }
    if (v11)
    {
      if (a2->var1.var2 < 9u)
      {
        *(_DWORD *)v39 = v11;
        v36 = operator new[](v11 + 1);
        *((_QWORD *)this + 3) = v36;
        v36[*(unsigned int *)v39] = 0;
        (*(void (**)(_QWORD, _QWORD, __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), v39);
        v37 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v37);
        *((_QWORD *)this + 4) = v37;
        v35 = (XlChartSeriesFormat **)((char *)this + 32);
        XlString::takeString((uint64_t)v37, *((char **)this + 3), *(_DWORD *)v39 + 1, v11, 0);
        *((_QWORD *)this + 3) = 0;
      }
      else
      {
        v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
        v34 = (XlString *)operator new(0x68uLL);
        XlString::XlString(v34);
        *((_QWORD *)this + 4) = v34;
        v35 = (XlChartSeriesFormat **)((char *)this + 32);
        XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, v33, v4, v34);
      }
      XlChartPlot::takeChartSeriesFormat((XlChartPlot *)a2, *v35);
      *v35 = 0;
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1CFFF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *XlName::setFormula(XlName *this, char *a2, signed __int16 a3)
{
  char *result;

  result = this->var7;
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  this->var7 = a2;
  this->var8 = a3;
  return result;
}

uint64_t XlMerge::getMergeRegion(XlMerge *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 2);
  if (((unint64_t)(*((_QWORD *)this + 3) - v2) >> 3) <= a2
    || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

void sub_22A1D01E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t XlLinkTable::getLink(XlLinkTable *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 6);
  if (((unint64_t)(*((_QWORD *)this + 7) - v2) >> 3) <= a2
    || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

void sub_22A1D0328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void XlNameTable::getName(XlNameTable *this@<X0>, unsigned int a2@<W1>, OcText *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  char *v8;
  _DWORD *v9;
  int v10;
  char *v11;
  char *BuiltIn;
  int v13;
  const OcText *v14;
  uint64_t v15;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 1);
  if (((unint64_t)(*((_QWORD *)this + 2) - v4) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(v4 + 8 * a2);
  if (*(_BYTE *)(v5 + 79))
  {
    v6 = *(unsigned __int8 *)(v5 + 84);
    if (v6 >= 0xE)
    {
      ChLogFunction("built in name index does not exist", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/ObjectModel/XlNameTable.cpp", 20);
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1003;
    }
    v7 = (char *)this + 32;
    v8 = (char *)this + 48 * *(unsigned __int8 *)(v5 + 84) + 32;
    v10 = *((_DWORD *)v8 + 2);
    v9 = v8 + 8;
    if (!v10)
    {
      v11 = (char *)this + 48 * *(unsigned __int8 *)(v5 + 84);
      BuiltIn = XlNameTable::getBuiltIn(this, v6);
      v13 = strlen(BuiltIn);
      OcText::setBuffer((OcText *)(v11 + 32), BuiltIn, v13 + 1);
      *((_DWORD *)v11 + 12) = v13;
      *v9 = 1252;
    }
    v14 = (const OcText *)&v7[48 * v6];
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(v5 + 16);
  if (v15)
  {
    v14 = (const OcText *)(v15 + 8);
LABEL_9:
    OcText::OcText(a3, v14);
    return;
  }
  OcText::OcText(a3);
}

void OcText::OcText(OcText *this, const OcText *a2)
{
  unsigned int var3;
  char *var5;
  char isSingleByteEncoding;

  this->var0 = (void **)&off_24F3A64A0;
  *(_QWORD *)&this->var1 = *(_QWORD *)&a2->var1;
  this->var3 = a2->var3;
  HIDWORD(this->var6) = 0;
  *(_QWORD *)&this->var4 = 0;
  *(char **)((char *)&this->var5 + 4) = 0;
  this->var7 = 1;
  var3 = a2->var3;
  if (var3)
  {
    var5 = a2->var5;
    isSingleByteEncoding = OcText::isSingleByteEncoding(a2->var1);
    OcText::copyBuffer(this, (const unsigned __int8 *)var5, var3 << (isSingleByteEncoding ^ 1));
  }
}

void sub_22A1D0670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::setFormula(SsrwOOStream **this, void **a2, int a3, void **a4)
{
  return XlFormulaParser::setFormula(this[1], a2, a3, a4);
}

uint64_t XlFormulaParser::setFormula(SsrwOOStream *this, void **a2, int a3, void **a4)
{
  void **var0;
  _DWORD *exception;

  var0 = this->var0;
  if (var0)
  {
    (*((void (**)(void **, _QWORD))*var0 + 19))(var0, 0);
    if (this->var0)
      (*((void (**)(void **))*this->var0 + 1))(this->var0);
    this->var0 = 0;
  }
  this[6].var0 = a2;
  LOBYTE(this[10].var0) = 0;
  if (!a2)
  {
    this[7].var0 = (void **)0xFFFFFFFF00000000;
    XlFormulaParser::reset((XlFormulaParser *)this);
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  LODWORD(this[7].var0) = (_DWORD)a4;
  HIDWORD(this[7].var0) = a3;
  this->var0 = (void **)SsrwOOStream::openMemStreamForReading(this + 6, a4);
  return XlFormulaParser::reset((XlFormulaParser *)this);
}

uint64_t XlFormulaParser::reset(XlFormulaParser *this)
{
  XlPtg *v2;
  int v3;
  XlPtg *v4;
  uint64_t result;

  if (*((_DWORD *)this + 6))
  {
    do
    {
      v2 = *(XlPtg **)ChStack<XlPtg *>::top((uint64_t)this + 8);
      if (v2)
      {
        XlPtg::~XlPtg(v2);
        MEMORY[0x22E2DD408]();
      }
      *(_QWORD *)ChStack<XlPtg *>::top((uint64_t)this + 8) = 0;
      v3 = *((_DWORD *)this + 6) - 1;
      *((_DWORD *)this + 6) = v3;
    }
    while (v3);
  }
  v4 = (XlPtg *)*((_QWORD *)this + 5);
  if (v4)
  {
    XlPtg::~XlPtg(v4);
    MEMORY[0x22E2DD408]();
  }
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 16) = *((_DWORD *)this + 15);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this, 0, 0);
  *((_DWORD *)this + 19) = 0;
  *((_BYTE *)this + 82) = 0;
  return result;
}

void sub_22A1D0908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D0AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::startTokenEnum(XlFormulaParser **this)
{
  uint64_t result;

  result = XlFormulaParser::reset(this[1]);
  *((_BYTE *)this[1] + 81) = 0;
  return result;
}

XlPtg *XlFormulaProcessor::nextToken(XlFormulaParser **this)
{
  return XlFormulaParser::nextToken(this[1]);
}

XlPtg *XlFormulaParser::nextToken(XlFormulaParser *this)
{
  unsigned int v2;
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  XlPtg **v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;
  XlPtg **v10;
  XlPtg *v11;
  uint64_t *v13;
  XlPtg *v14;

  v2 = *((_DWORD *)this + 6);
  if (!v2)
  {
    if (XlFormulaParser::processNextPtg((uint64_t **)this))
      return 0;
    v2 = *((_DWORD *)this + 6);
  }
  v14 = 0;
  if (v2 < 2)
  {
    v10 = (XlPtg **)ChStack<XlPtg *>::top((uint64_t)this + 8);
    ChAutoPtr<XlPtg>::setValue(&v14, *v10);
    --*((_DWORD *)this + 6);
  }
  else
  {
    v3 = (uint64_t *)operator new(0x20uLL);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *((_DWORD *)v3 + 6) = 10;
    v13 = v3;
    if (*((_DWORD *)this + 6))
    {
      do
      {
        v4 = (_QWORD *)ChStack<XlPtg *>::top((uint64_t)this + 8);
        ChStack<XlPtg *>::push((uint64_t)v13, v4);
        v5 = *((_DWORD *)this + 6) - 1;
        *((_DWORD *)this + 6) = v5;
      }
      while (v5);
      v3 = v13;
    }
    v6 = (XlPtg **)ChStack<XlPtg *>::top((uint64_t)v3);
    ChAutoPtr<XlPtg>::setValue(&v14, *v6);
    while (1)
    {
      v7 = v13;
      v8 = *((_DWORD *)v13 + 4) - 1;
      *((_DWORD *)v13 + 4) = v8;
      if (!v8)
        break;
      v9 = (_QWORD *)ChStack<XlPtg *>::top((uint64_t)v7);
      ChStack<XlPtg *>::push((uint64_t)this + 8, v9);
    }
    ChAutoPtr<ChStack<XlPtg *>>::~ChAutoPtr(&v13);
  }
  v11 = v14;
  v14 = 0;
  ChAutoPtr<XlPtg>::~ChAutoPtr(&v14);
  return v11;
}

void sub_22A1D0CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ChAutoPtr<XlPtg>::~ChAutoPtr((XlPtg **)va);
  _Unwind_Resume(a1);
}

uint64_t XlFormulaParser::processNextPtg(uint64_t **this)
{
  unsigned __int16 v1;
  char v3;
  XlPtg **v4;
  unsigned int v5;
  uint64_t *v6;
  int v7;
  void (*v8)(void);
  uint64_t *v9;
  __int16 v10;
  __int16 v11;
  XlPtg *PtgArea;
  unsigned __int16 v13;
  unsigned int v14;
  XlPtg *v15;
  XlPtg *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  XlPtg *v20;
  XlPtg *v21;
  char *v22;
  __int16 v23;
  XlPtg *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  void (*v28)(void);
  XlPtg *v29;
  int v30;
  int v31;
  XlPtg *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  double *v52;
  double v53;
  XlPtg *v54;
  XlPtg *v55;
  XlPtg *v56;
  char *v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  int v60;
  XlPtg *v61;
  unsigned __int16 *LastExtendedData;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  int v66;
  XlPtg *v67;
  unsigned int v68;
  XlPtg *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t (*v72)(void);
  XlPtg *v73;
  int var1;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  _WORD *v82;
  int v83;
  uint64_t v84;
  __int16 v85;
  unsigned int v86;
  char *v87;
  uint64_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t (*v91)(void);
  uint64_t *v92;
  XlPtg *v93;
  XlPtg *v94;
  int v95;
  char v96;
  int v97;
  XlPtg *v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  XlPtg *v102;
  char *v103;
  char *v104;
  XlPtg *v105;
  char *v106;
  XlPtg *v107;
  double *v108;
  double v109;
  char *v110;
  char *v111;
  char *v112;
  int v113;
  char v114;
  char v115;
  uint64_t v116;
  int v118;
  int v119;
  char *v120;
  uint64_t v121;
  _WORD *v122;
  unsigned int v123;

  v3 = 0;
  while (2)
  {
    this[5] = 0;
    v4 = (XlPtg **)(this + 5);
    *((_DWORD *)this + 19) = (*(uint64_t (**)(uint64_t *))(**this + 40))(*this);
    if (*this
      && (*(unsigned int (**)(uint64_t *))(**this + 176))(*this)
      && (v5 = *((_DWORD *)this + 19), v5 < *((_DWORD *)this + 15))
      && v5 <= *((_DWORD *)this + 16))
    {
      v6 = *this;
LABEL_7:
      if ((*(unsigned int (**)(uint64_t *))(*v6 + 176))(v6))
      {
        v7 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
        switch(v7)
        {
          case 0:
            goto LABEL_20;
          case 1:
          case 2:
            v73 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v73, v7, 4);
            this[5] = (uint64_t *)v73;
            LastExtendedData = (unsigned __int16 *)XlPtg::getLastExtendedData(v73);
            *LastExtendedData = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v63 = **this;
            goto LABEL_86;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            PtgArea = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)PtgArea, v7);
            goto LABEL_19;
          case 21:
            PtgArea = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)PtgArea, 21);
            goto LABEL_19;
          case 22:
            PtgArea = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)PtgArea, 22);
LABEL_19:
            *v4 = PtgArea;
            goto LABEL_158;
          case 23:
            v94 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v94, 23);
            this[5] = (uint64_t *)v94;
            XlFormulaParser::addPtgString((char *)this, v94, 0);
            goto LABEL_157;
          case 24:
            v95 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            v123 = 4;
            v13 = 3001;
            v96 = v95;
            v97 = 0;
            switch(v95)
            {
              case 1:
              case 2:
              case 3:
              case 6:
              case 7:
              case 16:
                goto LABEL_128;
              case 10:
                v97 = 0;
                v123 = 13;
                goto LABEL_128;
              case 11:
                v123 = 13;
                goto LABEL_127;
              case 12:
              case 13:
              case 14:
              case 15:
              case 29:
LABEL_127:
                v97 = 1;
LABEL_128:
                v98 = (XlPtg *)operator new(0x18uLL);
                XlPtg::XlPtg((uint64_t)v98, 24, (unsigned __int16)(v123 + 1));
                this[5] = (uint64_t *)v98;
                v99 = XlPtg::getLastExtendedData(v98);
                *v99 = v96;
                (*(void (**)(uint64_t *, char *, unsigned int *))(**this + 56))(*this, v99 + 1, &v123);
                if (!v97)
                  goto LABEL_157;
                (*(void (**)(uint64_t *))(**this + 40))(*this);
                (*(void (**)(uint64_t *, _QWORD, _QWORD))(**this + 16))(*this, *((unsigned int *)this + 16), 0);
                if ((*(unsigned int (**)(uint64_t *))(**this + 176))(*this) >= 5)
                {
                  v123 = 4 * ((*(uint64_t (**)(uint64_t *))(**this + 104))(*this) & 0x3FFF) + 4;
                  (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 4294967292, 1);
                  v100 = *this;
                  v101 = XlPtg::addDataItem((XlPtg *)this[5], v123);
                  (*(void (**)(uint64_t *, char *, unsigned int *))(*v100 + 56))(v100, v101, &v123);
                  goto LABEL_131;
                }
                if (*v4)
                {
                  XlPtg::~XlPtg(*v4);
                  MEMORY[0x22E2DD408]();
                }
                *v4 = 0;
                break;
              default:
                goto LABEL_161;
            }
            goto LABEL_175;
          case 25:
            v9 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v9, 25);
            this[5] = v9;
            v10 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            v11 = v10;
            if (*((_BYTE *)this + 72) == 4 && (v10 & 0x40) != 0)
              goto LABEL_9;
            if ((v10 & 4) == 0)
            {
              v110 = XlPtg::addDataItem((XlPtg *)this[5], 4u);
              *(_WORD *)v110 = v11;
              *((_WORD *)v110 + 1) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              goto LABEL_157;
            }
            v118 = (*(uint64_t (**)(uint64_t *))(**this + 72))(*this);
            if (v118 < -1
              || (v119 = v118, (((_WORD)v118 + 3) & 0x8000) != 0)
              || (v120 = XlPtg::addDataItem(*v4, 2 * (((_WORD)v118 + 3) & 0x7FFFu))) == 0)
            {
LABEL_175:
              v13 = 3002;
              goto LABEL_161;
            }
            *(_WORD *)v120 = v11;
            *((_WORD *)v120 + 1) = v119;
            if ((v119 & 0x80000000) == 0)
            {
              v121 = (v119 + 1);
              v122 = v120 + 4;
              do
              {
                *v122++ = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
                --v121;
              }
              while (v121);
            }
            goto LABEL_157;
          case 26:
            v102 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v102, 26, 2);
            this[5] = (uint64_t *)v102;
            v103 = XlPtg::getLastExtendedData(v102);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 6, 1);
            *(_WORD *)v103 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v28 = *(void (**)(void))(**this + 16);
            goto LABEL_134;
          case 27:
            v92 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v92, 27);
            this[5] = v92;
            v28 = *(void (**)(void))(**this + 16);
            goto LABEL_134;
          case 28:
            v93 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v93, 28, 1);
            goto LABEL_136;
          case 29:
            v93 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v93, 29, 1);
LABEL_136:
            this[5] = (uint64_t *)v93;
            v104 = XlPtg::getLastExtendedData(v93);
            *v104 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            goto LABEL_157;
          case 30:
            v105 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v105, 30, 2);
            this[5] = (uint64_t *)v105;
            v55 = v105;
            goto LABEL_138;
          case 31:
            v107 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v107, 31, 8);
            this[5] = (uint64_t *)v107;
            v108 = (double *)XlPtg::getLastExtendedData(v107);
            v109 = (*(double (**)(uint64_t *))(**this + 120))(*this);
            CsCopyFloat64ToPackedLocation(v108, v109);
            goto LABEL_157;
          case 32:
          case 64:
          case 96:
            v42 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v42, v7);
            this[5] = v42;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 7, 1);
            (*(void (**)(uint64_t *))(**this + 40))(*this);
            (*(void (**)(uint64_t *, _QWORD, _QWORD))(**this + 16))(*this, *((unsigned int *)this + 16), 0);
            if ((*(unsigned int (**)(uint64_t *))(**this + 176))(*this) < 4)
              goto LABEL_132;
            v43 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            v44 = (*(uint64_t (**)(uint64_t *))(**this + 72))(*this);
            v45 = (__PAIR64__(v43, *((unsigned __int8 *)this + 72)) - 9) >> 32;
            v46 = (__PAIR64__(v44, *((unsigned __int8 *)this + 72)) - 9) >> 32;
            v47 = v46 + 1 + (v46 + 1) * v45;
            *(_DWORD *)XlPtg::addDataItem((XlPtg *)this[5], 4u) = v45;
            *(_DWORD *)XlPtg::addDataItem((XlPtg *)this[5], 4u) = v46;
            if (v47 < 1)
              goto LABEL_131;
            v48 = v47 + 1;
            break;
          case 33:
          case 65:
          case 97:
            v54 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v54, v7, 2);
            this[5] = (uint64_t *)v54;
            v55 = v54;
LABEL_138:
            v106 = XlPtg::getLastExtendedData(v55);
            *(_WORD *)v106 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            goto LABEL_157;
          case 34:
          case 66:
          case 98:
            v56 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v56, v7, 8);
            this[5] = (uint64_t *)v56;
            v57 = XlPtg::getLastExtendedData(v56);
            v58 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            v59 = v58;
            *((_WORD *)v57 + 1) = 0;
            if ((v58 & 0x80) != 0)
            {
              *((_WORD *)v57 + 1) = 1;
              v59 = v58 & 0x7F;
            }
            *(_WORD *)v57 = v59;
            v60 = (*(uint64_t (**)(uint64_t *))(**this + 72))(*this);
            *((_WORD *)v57 + 3) = 0;
            if (v60 < 0)
            {
              *((_WORD *)v57 + 3) = 1;
              LOWORD(v60) = v60 & 0x7FFF;
            }
            *((_WORD *)v57 + 2) = v60;
            goto LABEL_157;
          case 35:
          case 67:
          case 99:
            v24 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v24, v7, 4);
            this[5] = (uint64_t *)v24;
            v25 = XlPtg::getLastExtendedData(v24);
            v26 = **this;
            if (*((unsigned __int8 *)this + 72) >= 9u)
            {
              *(_DWORD *)v25 = (*(uint64_t (**)(void))(v26 + 96))() - 1;
              goto LABEL_157;
            }
            *(_DWORD *)v25 = (*(uint64_t (**)(void))(v26 + 72))() - 1;
            v28 = *(void (**)(void))(**this + 16);
            goto LABEL_134;
          case 36:
          case 68:
          case 100:
            v61 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v61, v7, 4);
            this[5] = (uint64_t *)v61;
            LastExtendedData = (unsigned __int16 *)XlPtg::getLastExtendedData(v61);
            *LastExtendedData = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v63 = **this;
            if (*((unsigned __int8 *)this + 72) >= 9u)
            {
LABEL_86:
              LastExtendedData[1] = (*(uint64_t (**)(void))(v63 + 80))();
            }
            else
            {
              LastExtendedData[1] = (*(uint64_t (**)(void))(v63 + 64))();
              XlFormulaParser::normalizeCellRefs((uint64_t)this, LastExtendedData, 0, 1);
            }
            goto LABEL_157;
          case 37:
          case 69:
          case 101:
            PtgArea = XlFormulaParser::readPtgArea(this, v7, 0);
            this[5] = (uint64_t *)PtgArea;
            goto LABEL_158;
          case 38:
          case 70:
          case 102:
            if (*((_BYTE *)this + 82))
              goto LABEL_157;
            v64 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v64, v7);
            this[5] = v64;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 4, 1);
            v65 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            ChStack<XlPtg *>::push((uint64_t)(this + 1), this + 5);
            v66 = *((_DWORD *)this + 6);
            v67 = (XlPtg *)this[5];
            this[5] = 0;
            v68 = (*(uint64_t (**)(uint64_t *))(**this + 176))(*this) - v65;
            *((_BYTE *)this + 82) = 1;
            while ((*(unsigned int (**)(uint64_t *))(**this + 176))(*this) > v68)
              XlFormulaParser::processNextPtg((XlFormulaParser *)this);
            *((_BYTE *)this + 82) = 0;
            v83 = *((_DWORD *)this + 6);
            XlFormulaParser::processNextPtg((XlFormulaParser *)this);
            v84 = (*(uint64_t (**)(uint64_t *))(**this + 40))(*this);
            (*(void (**)(uint64_t *, _QWORD, _QWORD))(**this + 16))(*this, *((unsigned int *)this + 16), 0);
            if ((*(unsigned int (**)(uint64_t *))(**this + 176))(*this) < 3)
              goto LABEL_175;
            v85 = v83 - v66;
            v86 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v87 = XlPtg::addDataItem(v67, (8 * v86) | 4);
            *(_WORD *)v87 = v85;
            *((_WORD *)v87 + 1) = v86;
            if (v86)
            {
              v88 = v86;
              v89 = v87 + 10;
              do
              {
                *(v89 - 3) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
                *(v89 - 2) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
                v90 = **this;
                if (*((unsigned __int8 *)this + 72) < 9u)
                {
                  *(v89 - 1) = (*(uint64_t (**)(void))(v90 + 64))();
                  v91 = *(uint64_t (**)(void))(**this + 64);
                }
                else
                {
                  *(v89 - 1) = (*(uint64_t (**)(void))(v90 + 80))();
                  v91 = *(uint64_t (**)(void))(**this + 80);
                }
                *v89 = v91();
                v89 += 4;
                --v88;
              }
              while (v88);
            }
            *((_DWORD *)this + 16) = (*(uint64_t (**)(uint64_t *))(**this + 40))(*this);
            (*(void (**)(uint64_t *, uint64_t, _QWORD))(**this + 16))(*this, v84, 0);
            goto LABEL_160;
          case 39:
          case 71:
          case 103:
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 6, 1);
            if ((v3 & 1) == 0)
              v1 = 0;
            v3 = 1;
            continue;
          case 40:
          case 72:
          case 104:
            v8 = *(void (**)(void))(**this + 16);
            goto LABEL_11;
          case 41:
          case 46:
          case 47:
          case 73:
          case 78:
          case 79:
          case 105:
          case 110:
          case 111:
LABEL_9:
            v8 = *(void (**)(void))(**this + 16);
LABEL_11:
            v8();
            v6 = *this;
            goto LABEL_7;
          case 42:
          case 43:
          case 74:
          case 75:
          case 106:
          case 107:
            v27 = (uint64_t *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v27, v7);
            this[5] = v27;
            v28 = *(void (**)(void))(**this + 16);
            goto LABEL_134;
          case 44:
          case 76:
          case 108:
            v69 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v69, v7, 4);
            this[5] = (uint64_t *)v69;
            v70 = (unsigned __int16 *)XlPtg::getLastExtendedData(v69);
            *v70 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v71 = **this;
            if (*((unsigned __int8 *)this + 72) < 9u)
              v72 = *(uint64_t (**)(void))(v71 + 64);
            else
              v72 = *(uint64_t (**)(void))(v71 + 80);
            v70[1] = v72();
            if (*((unsigned __int8 *)this + 72) <= 8u)
              XlFormulaParser::normalizeCellRefs((uint64_t)this, v70, 0, 1);
            if (!*((_BYTE *)this + 81) && !*((_BYTE *)this + 80))
              goto LABEL_157;
            var1 = (*v4)->var1;
            if (var1 == 108)
              v75 = 100;
            else
              v75 = 68;
            if (var1 == 44)
              v76 = 36;
            else
              v76 = v75;
            (*v4)->var1 = v76;
            v77 = (__int16)v70[1];
            if (v77 < 0)
              *v70 += *((_WORD *)this + 34);
            if ((v77 & 0x4000) != 0)
              v70[1] = v77 & 0xC000 | (*((_WORD *)this + 35) + v77);
            if (!*((_BYTE *)this + 80))
              goto LABEL_157;
            v78 = *((_DWORD *)this[5] + 2);
            if (v78 == 100)
              v79 = 100;
            else
              v79 = 68;
            if (v78 == 36)
              v80 = 36;
            else
              v80 = v79;
            *((_BYTE *)this[6] + *((unsigned int *)this + 19)) = v80;
            CsLeWriteUInt16(*v70, (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 1));
            v81 = v70[1];
            if (*((unsigned __int8 *)this + 72) >= 9u)
            {
              v82 = (_WORD *)((char *)this[6] + *((unsigned int *)this + 19) + 3);
              goto LABEL_154;
            }
            *((_BYTE *)this[6] + (*((_DWORD *)this + 19) + 3)) = v81;
            goto LABEL_157;
          case 45:
          case 77:
          case 109:
            if (*((_BYTE *)this + 81) || *((_BYTE *)this + 80))
            {
              v29 = XlFormulaParser::readPtgArea(this, v7, 1);
              this[5] = (uint64_t *)v29;
              v30 = v29->var1;
              if (v30 == 109)
              {
                v31 = 101;
              }
              else if (v30 == 45)
              {
                v31 = 37;
              }
              else
              {
                v31 = 69;
              }
              v29->var1 = v31;
            }
            else
            {
              v29 = XlFormulaParser::readPtgArea(this, v7, 0);
              this[5] = (uint64_t *)v29;
            }
            if (!*((_BYTE *)this + 80))
              goto LABEL_157;
            v111 = XlPtg::getLastExtendedData(v29);
            v112 = v111;
            v113 = *((_DWORD *)this[5] + 2);
            if (v113 == 101)
              v114 = 101;
            else
              v114 = 69;
            if (v113 == 37)
              v115 = 37;
            else
              v115 = v114;
            *((_BYTE *)this[6] + *((unsigned int *)this + 19)) = v115;
            CsLeWriteUInt16(*(unsigned __int16 *)v111, (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 1));
            CsLeWriteUInt16(*((unsigned __int16 *)v112 + 1), (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 3));
            v116 = *((unsigned __int16 *)v112 + 2);
            if (*((unsigned __int8 *)this + 72) < 9u)
            {
              *((_BYTE *)this[6] + (*((_DWORD *)this + 19) + 5)) = v116;
              *((_BYTE *)this[6] + (*((_DWORD *)this + 19) + 7)) = v112[6];
            }
            else
            {
              CsLeWriteUInt16(v116, (uint64_t *)((char *)this[6] + *((unsigned int *)this + 19) + 5));
              v81 = *((unsigned __int16 *)v112 + 3);
              v82 = (_WORD *)((char *)this[6] + *((unsigned int *)this + 19) + 7);
LABEL_154:
              CsLeWriteUInt16(v81, v82);
            }
            goto LABEL_157;
          case 57:
          case 89:
          case 121:
            v32 = (XlPtg *)operator new(0x18uLL);
            XlPtg::XlPtg((uint64_t)v32, v7, 4);
            this[5] = (uint64_t *)v32;
            v33 = XlPtg::getLastExtendedData(v32);
            LODWORD(v32) = *((unsigned __int8 *)this + 72);
            *(_WORD *)v33 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v34 = **this;
            if (v32 < 9)
            {
              (*(void (**)(void))(v34 + 16))();
              *((_WORD *)v33 + 1) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this) - 1;
            }
            else
            {
              *((_WORD *)v33 + 1) = (*(uint64_t (**)(void))(v34 + 80))() - 1;
            }
            v28 = *(void (**)(void))(**this + 16);
            goto LABEL_134;
          case 58:
          case 60:
          case 90:
          case 92:
          case 122:
          case 124:
            v14 = *((unsigned __int8 *)this + 72);
            v15 = (XlPtg *)operator new(0x18uLL);
            v16 = v15;
            if (v14 >= 9)
            {
              XlPtg::XlPtg((uint64_t)v15, v7, 6);
              this[5] = (uint64_t *)v16;
              v17 = XlPtg::getLastExtendedData(v16);
              *(_WORD *)v17 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v17 + 1) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              LOWORD(v18) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this) & 0xC0FF;
              goto LABEL_55;
            }
            XlPtg::XlPtg((uint64_t)v15, v7, 10);
            this[5] = (uint64_t *)v16;
            v35 = XlPtg::getLastExtendedData(v16);
            *(_WORD *)v35 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 8, 1);
            *((_WORD *)v35 + 3) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            *((_WORD *)v35 + 4) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            *((_WORD *)v35 + 1) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
            v36 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            *((_WORD *)v35 + 2) = v36;
            if (*((unsigned __int8 *)this + 72) <= 8u)
            {
              v37 = *((unsigned __int16 *)v35 + 1);
              if (v37 >= 0x4000)
              {
                if ((v37 & 0x8000u) == 0)
                  v38 = v36;
                else
                  v38 = v36 | 0x8000;
                *((_WORD *)v35 + 2) = v37 & 0x4000 | v38;
              }
              *((_WORD *)v35 + 1) = v37;
            }
            goto LABEL_157;
          case 59:
          case 61:
          case 91:
          case 93:
          case 123:
          case 125:
            v19 = *((unsigned __int8 *)this + 72);
            v20 = (XlPtg *)operator new(0x18uLL);
            v21 = v20;
            if (v19 < 9)
            {
              XlPtg::XlPtg((uint64_t)v20, v7, 14);
              this[5] = (uint64_t *)v21;
              v17 = XlPtg::getLastExtendedData(v21);
              *(_WORD *)v17 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 8, 1);
              *((_WORD *)v17 + 5) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v17 + 6) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v17 + 1) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v17 + 2) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v17 + 3) = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
              v39 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
              *((_WORD *)v17 + 4) = v39;
              if (*((unsigned __int8 *)this + 72) <= 8u)
              {
                v40 = *((_WORD *)v17 + 1);
                if (v40 < 0)
                  *((_WORD *)v17 + 3) |= 0x8000u;
                if ((v40 & 0x4000) != 0)
                  *((_WORD *)v17 + 3) |= 0x4000u;
                *((_WORD *)v17 + 1) = v40;
                v18 = *((unsigned __int16 *)v17 + 2);
                if (v18 >= 0x4000)
                {
                  if ((v18 & 0x8000u) == 0)
                    v41 = v39;
                  else
                    v41 = v39 | 0x8000;
                  *((_WORD *)v17 + 4) = v18 & 0x4000 | v41;
                }
                LOWORD(v18) = v18;
LABEL_55:
                *((_WORD *)v17 + 2) = v18;
              }
            }
            else
            {
              XlPtg::XlPtg((uint64_t)v20, v7, 10);
              this[5] = (uint64_t *)v21;
              v22 = XlPtg::getLastExtendedData(v21);
              *(_WORD *)v22 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v22 + 1) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v22 + 2) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v22 + 3) = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              v23 = (*(uint64_t (**)(uint64_t *))(**this + 80))(*this);
              *((_WORD *)v22 + 3) &= 0xC0FFu;
              *((_WORD *)v22 + 4) = v23 & 0xC0FF;
            }
            goto LABEL_157;
          case 88:
          case 120:
            goto LABEL_157;
          default:
            goto LABEL_179;
        }
        do
        {
          v49 = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
          if (v49 > 3)
          {
            if (v49 == 4)
            {
              v50 = XlPtg::addDataItem((XlPtg *)this[5], 2u);
              *v50 = 4;
            }
            else
            {
              if (v49 != 16)
              {
LABEL_176:
                if (*v4)
                {
                  XlPtg::~XlPtg(*v4);
                  MEMORY[0x22E2DD408]();
                }
                *v4 = 0;
LABEL_179:
                v13 = 3001;
                goto LABEL_161;
              }
              v50 = XlPtg::addDataItem((XlPtg *)this[5], 2u);
              *v50 = 16;
            }
            v50[1] = (*(uint64_t (**)(uint64_t *))(**this + 64))(*this);
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(**this + 16))(*this, 7, 1);
          }
          else if (v49 == 1)
          {
            v51 = XlPtg::addDataItem((XlPtg *)this[5], 0xAu);
            *v51 = 1;
            v52 = (double *)(v51 + 2);
            v53 = (*(double (**)(uint64_t *))(**this + 120))(*this);
            CsCopyFloat64ToPackedLocation(v52, v53);
          }
          else
          {
            if (v49 != 2)
              goto LABEL_176;
            XlFormulaParser::addPtgString((char *)this, (XlPtg *)this[5], 1);
          }
          --v48;
        }
        while (v48 > 1);
LABEL_131:
        *((_DWORD *)this + 16) = (*(uint64_t (**)(uint64_t *))(**this + 40))(*this);
LABEL_132:
        v28 = *(void (**)(void))(**this + 16);
LABEL_134:
        v28();
      }
LABEL_157:
      PtgArea = *v4;
LABEL_158:
      if (PtgArea)
      {
        ChStack<XlPtg *>::push((uint64_t)(this + 1), this + 5);
        v13 = 0;
        *v4 = 0;
      }
      else
      {
LABEL_160:
        v13 = 0;
      }
    }
    else
    {
LABEL_20:
      v13 = 1;
    }
    break;
  }
LABEL_161:
  if ((v3 & 1) != 0)
    return v1;
  return v13;
}

void sub_22A1D2030(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SsrwOOMemStream::getPos(SsrwOOMemStream *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t SsrwOOMemStream::getBytesAvailableToRead(SsrwOOMemStream *this)
{
  return (*((_DWORD *)this + 4) - *((_DWORD *)this + 5));
}

char *XlPtg::getLastExtendedData(XlPtg *this)
{
  char *var0;
  int var3;

  var0 = this->var0;
  if (!this->var0)
    return 0;
  var3 = this->var3;
  if (!this->var3)
    return 0;
  while (--var3)
    var0 += *(unsigned __int16 *)var0 + 2;
  return var0 + 2;
}

char *XlPtg::getExtendedData(XlPtg *this, unsigned int a2, unsigned int *a3)
{
  char *var0;
  uint64_t i;
  char *v5;
  unsigned int v6;
  char *result;

  *a3 = 0;
  var0 = this->var0;
  if (!this->var0 || this->var3 <= a2)
    return 0;
  for (i = *(unsigned __int16 *)var0; a2; --a2)
  {
    v5 = &var0[i];
    v6 = *((unsigned __int16 *)v5 + 1);
    var0 = v5 + 2;
    i = v6;
  }
  result = var0 + 2;
  *a3 = i;
  return result;
}

uint64_t ChStack<XlPtg *>::push(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  LODWORD(v4) = *(_DWORD *)(result + 16);
  v5 = *(_DWORD *)(result + 20);
  v6 = v4 + 1;
  if ((int)v4 + 1 <= v5)
  {
    v9 = *(_QWORD *)result;
  }
  else
  {
    v7 = *(_DWORD *)(result + 24) + v5;
    *(_DWORD *)(result + 20) = v7;
    *(_QWORD *)(result + 8) = operator new[](8 * v7);
    v4 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v4)
    {
      v8 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 8) + v8) = *(_QWORD *)(*(_QWORD *)v3 + v8);
        v8 += 8;
      }
      while (8 * v4 != v8);
    }
    result = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      result = MEMORY[0x22E2DD3F0](result, 0x20C8093837F09);
      LODWORD(v4) = *(_DWORD *)(v3 + 16);
    }
    v9 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v3 = v9;
    *(_QWORD *)(v3 + 8) = 0;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v9 + 8 * v4) = *a2;
  *(_DWORD *)(v3 + 16) = v6;
  return result;
}

uint64_t ChStack<XlPtg *>::top(uint64_t a1)
{
  int v1;
  _DWORD *exception;

  if (!*(_QWORD *)a1 || (v1 = *(_DWORD *)(a1 + 16)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1000;
  }
  return *(_QWORD *)a1 + 8 * (v1 - 1);
}

XlPtg *ChAutoPtr<XlPtg>::setValue(XlPtg **a1, XlPtg *a2)
{
  XlPtg *result;

  result = *a1;
  if (result != a2)
  {
    if (result)
    {
      XlPtg::~XlPtg(result);
      result = (XlPtg *)MEMORY[0x22E2DD408]();
    }
    *a1 = a2;
  }
  return result;
}

XlPtg **ChAutoPtr<XlPtg>::~ChAutoPtr(XlPtg **a1)
{
  XlPtg *v2;

  v2 = *a1;
  if (v2)
  {
    XlPtg::~XlPtg(v2);
    MEMORY[0x22E2DD408]();
  }
  *a1 = 0;
  return a1;
}

uint64_t XlPtg::getNumberOfExtendedDataEntries(XlPtg *this)
{
  return this->var3;
}

uint64_t XlPtg::getTotalSizeOfExtendedData(XlPtg *this)
{
  char *var0;
  int var3;
  uint64_t result;
  uint64_t v4;

  var0 = this->var0;
  if (!this->var0)
    return 0;
  var3 = this->var3;
  if (!this->var3)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v4 = *(unsigned __int16 *)var0;
    var0 += v4 + 2;
    result = (result + v4);
    --var3;
  }
  while (var3);
  return result;
}

void XlPtg::~XlPtg(XlPtg *this)
{
  char *var0;

  var0 = this->var0;
  if (var0)
  {
    MEMORY[0x22E2DD3F0](var0, 0x1000C8077774924);
    this->var0 = 0;
    this->var2 = 0;
    this->var3 = 0;
  }
}

uint64_t XlFormulaProcessor::releaseFormula(XlFormulaParser **this)
{
  return XlFormulaParser::releaseFormula(this[1]);
}

uint64_t XlFormulaParser::releaseFormula(XlFormulaParser *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, 0);
    result = *(_QWORD *)this;
    if (*(_QWORD *)this)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)this = 0;
  }
  *((_QWORD *)this + 6) = 0;
  return result;
}

void sub_22A1D29E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1D2A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D2AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D2B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D2D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D2D44(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x22A1D2CECLL);
  }
  objc_exception_rethrow();
}

void sub_22A1D2D64()
{
  void *v0;
  void *v1;

  objc_end_catch();

  JUMPOUT(0x22A1D2D38);
}

EshAtom *XlEshObjectFactory::createObject(XlEshObjectFactory *this, EshObject *a2, int a3)
{
  EshAtom *Object;
  char *v6;

  if ((int)a2 > 61452)
  {
    if ((int)a2 > 61456)
    {
      if ((_DWORD)a2 == 61457)
      {
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF011u, 0);
        goto LABEL_19;
      }
      if ((_DWORD)a2 == 62271)
      {
        Object = (EshAtom *)operator new(0x30uLL);
        XlEshGhost::XlEshGhost(Object, a3);
        goto LABEL_21;
      }
    }
    else
    {
      if ((_DWORD)a2 == 61453)
      {
LABEL_12:
        Object = (EshAtom *)operator new(0x20uLL);
        EshAtom::EshAtom(Object, 0xF00Du, 0);
LABEL_19:
        *(_QWORD *)Object = v6 + 16;
        goto LABEL_21;
      }
      if ((_DWORD)a2 == 61456)
      {
        Object = (EshAtom *)operator new(0x40uLL);
        EshAtom::EshAtom(Object, 0xF010u, 0);
        *(_QWORD *)Object = &unk_24F3AC110;
        *((_WORD *)Object + 14) = 0;
        *((_OWORD *)Object + 2) = 0u;
        *((_OWORD *)Object + 3) = 0u;
        goto LABEL_21;
      }
    }
LABEL_20:
    Object = EshObjectFactory::createObject((EshObjectFactory *)this, (int)a2, a3);
    goto LABEL_21;
  }
  if ((int)a2 > 6)
  {
    if ((_DWORD)a2 == 7)
    {
      Object = (EshAtom *)operator new(0x258uLL);
      XlEshShape::XlEshShape(Object);
      goto LABEL_21;
    }
    if ((_DWORD)a2 != 12)
      goto LABEL_20;
    goto LABEL_12;
  }
  if ((_DWORD)a2 == 1)
  {
    Object = (EshAtom *)operator new(0x38uLL);
    EshRoot::EshRoot(Object);
    *(_QWORD *)Object = &off_24F3AF5B8;
    *((_QWORD *)Object + 5) = 0;
    *((_DWORD *)Object + 12) = 0;
    goto LABEL_21;
  }
  if ((_DWORD)a2 != 6)
    goto LABEL_20;
  Object = (EshAtom *)operator new(0x180uLL);
  XlEshGroup::XlEshGroup(Object);
  (*(void (**)(EshAtom *))(*(_QWORD *)Object + 120))(Object);
LABEL_21:
  EshObjectFactory::verifyTypeAndVersionOfObject((EshObjectFactory *)Object, a2, a3);
  return Object;
}

void sub_22A1D2F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlChartBinaryReader::read(XlChartBinaryReader *this, XlEshRoot *a2)
{
  uint64_t v4;
  uint64_t v5;
  EshHeader *v6;
  int v7;
  _BYTE v8[24];
  int v9;
  XlHeader v10;

  *((_DWORD *)a2 + 11) = 0;
  if (*((_DWORD *)a2 + 10) == 6)
  {
    if ((*((_DWORD *)this + 485) & 0x80000000) == 0)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
      XlHeader::XlHeader(&v10);
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((_BYTE *)this + 1320));
      v4 = *((_QWORD *)this + 163);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      *((_QWORD *)this + 163) = 0;
      XlChartGelFrame::XlChartGelFrame((XlChartGelFrame *)v8, &v10);
      (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 2024))(*((_QWORD *)this + 167), v8);
      *((_DWORD *)a2 + 11) = v9;
      *((_DWORD *)a2 + 12) = *((_DWORD *)this + 485);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164));
      v5 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 112))(this);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 164));
      v6 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v6);
      v7 = v9;
      v6->var0 = v9;
      v6->var1 = *((_DWORD *)this + 485) + 4;
      v6->var3 = 4;
      if (v7)
        EshRoot::appendChild(a2, v6);
      MEMORY[0x22E2DD408](v6, 0x1000C408B6DE1C6);
      XlChartGelFrame::~XlChartGelFrame((XlChartGelFrame *)v8);
    }
  }
  else
  {
    XlBinaryReader::read((uint64_t)this, a2);
  }
}

void sub_22A1D3108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x22E2DD408](v2, 0x1000C408B6DE1C6);
  XlChartGelFrame::~XlChartGelFrame((XlChartGelFrame *)va);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::read(uint64_t this, XlEshRoot *a2)
{
  uint64_t v3;

  *((_DWORD *)a2 + 11) = 0;
  v3 = this;
  switch(*((_DWORD *)a2 + 10))
  {
    case 1:
      if ((*(_DWORD *)(this + 200) & 0x80000000) != 0)
        return this;
      goto LABEL_7;
    case 2:
      if ((*(_DWORD *)(this + 204) & 0x80000000) != 0)
        return this;
      goto LABEL_7;
    case 3:
      if ((*(_DWORD *)(this + 1300) & 0x80000000) == 0)
        goto LABEL_7;
      return this;
    case 4:
      if ((*(_DWORD *)(this + 280) & 0x80000000) != 0)
        return this;
LABEL_7:
      (*(void (**)(_QWORD))(**(_QWORD **)(this + 1312) + 16))(*(_QWORD *)(this + 1312));
      XlEshBinaryReader::start((XlEshBinaryReader *)(v3 + 40), *(SsrwOOStream **)(v3 + 1312));
      XlEshBinaryReader::read(v3 + 40, a2);
    default:
      return this;
  }
}

uint64_t XlEshBinaryReader::start(XlEshBinaryReader *this, SsrwOOStream *a2)
{
  XlReadStgStream *v4;
  uint64_t v5;
  EshClientDataModelVisitor *v6;
  uint64_t v7;

  v4 = (XlReadStgStream *)*((_QWORD *)this + 13);
  if (!v4)
  {
    v4 = (XlReadStgStream *)operator new(0x60uLL);
    XlReadStgStream::XlReadStgStream(v4);
    *((_QWORD *)this + 13) = v4;
  }
  XlReadStgStream::start(v4, a2);
  v5 = *((_QWORD *)this + 13);
  *((_DWORD *)this + 24) = *(_DWORD *)(v5 + 20);
  EshBinaryReader::start(this, (SsrwOOStream *)v5);
  v6 = (EshClientDataModelVisitor *)operator new(0x10uLL);
  v7 = *((_QWORD *)this + 13);
  EshClientDataModelVisitor::EshClientDataModelVisitor(v6);
  *(_QWORD *)v6 = &unk_24F3AFEF8;
  *((_QWORD *)v6 + 1) = v7;
  return EshDataModelVisitor::takeClientVisitor(*((_QWORD *)this + 2), (uint64_t)v6);
}

void sub_22A1D32A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlReadStgStream::XlReadStgStream(XlReadStgStream *this)
{
  *(_QWORD *)this = &off_24F3B1518;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
}

uint64_t XlReadStgStream::start(XlReadStgStream *this, SsrwOOStream *a2)
{
  uint64_t v3;
  uint64_t result;
  _DWORD *exception;

  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  if (!a2)
    goto LABEL_5;
  *((_QWORD *)this + 5) = a2;
  if (!*((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 3) = operator new[](0xAuLL);
    a2 = (SsrwOOStream *)*((_QWORD *)this + 5);
  }
  v3 = (*((uint64_t (**)(SsrwOOStream *))a2->var0 + 5))(a2);
  result = XlReadStgStream::mapStreamChunk(this, v3);
  if ((result & 1) == 0)
  {
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  return result;
}

uint64_t XlReadStgStream::mapStreamChunk(XlReadStgStream *this, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void **v17;
  int v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  int v45;
  unsigned __int16 v46;
  int v47;
  int v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  unsigned int v53;
  int v54;
  int v55;

  result = *((_QWORD *)this + 5);
  if (!result)
    return result;
  v4 = a2;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, a2, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  LODWORD(v6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  result = 0;
  if (v6 > 0x2020)
    return result;
  result = 0;
  if (v5 <= 236)
  {
    if (v5 != 60)
    {
      if (v5 == 235)
      {
LABEL_11:
        v7 = 4;
        goto LABEL_12;
      }
      if (v5 != 236)
        return result;
    }
    v5 = 236;
    goto LABEL_11;
  }
  if (v5 == 237)
    goto LABEL_11;
  if (v5 != 2150)
  {
    if (v5 != 4198)
      return result;
    goto LABEL_11;
  }
  v7 = 18;
LABEL_12:
  v8 = v7 + v4;
  v9 = *((_QWORD *)this + 6);
  v10 = (void **)((char *)this + 48);
  v11 = (unint64_t)(*((_QWORD *)this + 7) - v9) >> 2;
  if ((_DWORD)v11)
  {
    if (*(_DWORD *)(v9 + 4 * (v11 - 1)) >= v4)
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(v9 + 4 * v12);
        result = v13 == v4;
        if (v13 == v4)
          break;
        ++v12;
      }
      while (v11 > v12);
      return result;
    }
  }
  else
  {
    *((_DWORD *)this + 2) = v5;
    *((_DWORD *)this + 4) = v8;
    *((_DWORD *)this + 5) = v8;
  }
  if (!(_DWORD)v6)
    return 0;
  v14 = *((_DWORD *)this + 2);
  v53 = v8;
  if (v14 != 235 && v14 != 2150 && v14 != 4198)
    v14 = -1;
  v15 = 0;
  v16 = *((_DWORD *)this + 5);
  v17 = (void **)((char *)this + 72);
  v52 = v6;
  do
  {
    v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5)) - 4;
    v20 = (char *)*((_QWORD *)this + 7);
    v19 = *((_QWORD *)this + 8);
    if ((unint64_t)v20 >= v19)
    {
      v22 = (char *)*v10;
      v23 = v20 - (_BYTE *)*v10;
      v24 = (v19 - (unint64_t)*v10) >> 2;
      if (2 * (int)v24 <= (v23 >> 2) + 1)
        v25 = (v23 >> 2) + 1;
      else
        v25 = 2 * v24;
      if (v24 >= 0x7FFFFFFF)
        v26 = 0xFFFFFFFFLL;
      else
        v26 = v25;
      if ((_DWORD)v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 64, v26);
        v29 = v28;
        v22 = (char *)*((_QWORD *)this + 6);
        v20 = (char *)*((_QWORD *)this + 7);
      }
      else
      {
        v27 = 0;
        v29 = 0;
      }
      v30 = &v27[v23 & 0x3FFFFFFFCLL];
      *(_DWORD *)v30 = v18;
      v21 = v30 + 4;
      while (v20 != v22)
      {
        v31 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v30 - 1) = v31;
        v30 -= 4;
      }
      *((_QWORD *)this + 6) = v30;
      *((_QWORD *)this + 7) = v21;
      *((_QWORD *)this + 8) = &v27[4 * v29];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_DWORD *)v20 = v18;
      v21 = v20 + 4;
    }
    *((_QWORD *)this + 7) = v21;
    v32 = v15 + v16;
    v34 = (char *)*((_QWORD *)this + 10);
    v33 = *((_QWORD *)this + 11);
    if ((unint64_t)v34 >= v33)
    {
      v36 = (char *)*v17;
      v37 = v34 - (_BYTE *)*v17;
      v38 = (v33 - (unint64_t)*v17) >> 2;
      if (2 * (int)v38 <= (v37 >> 2) + 1)
        v39 = (v37 >> 2) + 1;
      else
        v39 = 2 * v38;
      if (v38 >= 0x7FFFFFFF)
        v40 = 0xFFFFFFFFLL;
      else
        v40 = v39;
      if ((_DWORD)v40)
      {
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 88, v40);
        v43 = v42;
        v36 = (char *)*((_QWORD *)this + 9);
        v34 = (char *)*((_QWORD *)this + 10);
      }
      else
      {
        v41 = 0;
        v43 = 0;
      }
      v44 = &v41[v37 & 0x3FFFFFFFCLL];
      *(_DWORD *)v44 = v32;
      v35 = v44 + 4;
      while (v34 != v36)
      {
        v45 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *((_DWORD *)v44 - 1) = v45;
        v44 -= 4;
      }
      *((_QWORD *)this + 9) = v44;
      *((_QWORD *)this + 10) = v35;
      *((_QWORD *)this + 11) = &v41[4 * v43];
      if (v36)
        operator delete(v36);
    }
    else
    {
      *(_DWORD *)v34 = v32;
      v35 = v34 + 4;
    }
    *((_QWORD *)this + 10) = v35;
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), (unsigned __int16)v6, 1);
    if (*((_DWORD *)this + 2) == 2150)
      v46 = v6 - 14;
    else
      v46 = v6;
    v15 += v46;
    v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  }
  while (v47 == 60 || v14 == v47);
  if (v47 == 93
    && (((*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v6, 1), v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5)), v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5)), v49 == 236)|| (unsigned __int16)v49 == 60))
  {
    v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5)) - 4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v50, 1);
    v51 = v52;
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5)) == 438)
    {
      std::vector<unsigned int,ChAllocator<unsigned int>>::push_back[abi:ne180100]((uint64_t)this + 48, &v55);
      v54 = v15 + v16;
      std::vector<unsigned int,ChAllocator<unsigned int>>::push_back[abi:ne180100]((uint64_t)this + 72, &v54);
      v15 += v50;
      *((_BYTE *)this + 32) = 1;
    }
  }
  else
  {
    v51 = v52;
  }
  *((_DWORD *)this + 5) = v15 + v16;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v53, 0);
  *((_WORD *)this + 6) = v51;
  if (*((_DWORD *)this + 2) == 2150)
    *((_WORD *)this + 6) = v51 - 14;
  return 1;
}

uint64_t XlReadStgStream::getBytesAvailableToRead(XlReadStgStream *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 176))(*((_QWORD *)this + 5));
}

uint64_t XlReadStgStream::getPos(XlReadStgStream *this)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  return XlReadStgStream::translateStreamFileLocation(this, v2);
}

uint64_t XlReadStgStream::translateStreamFileLocation(XlReadStgStream *this, unsigned int a2)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *exception;

  if (((*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) & 0x3FFFFFFFCLL) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  result = *((unsigned int *)this + 4);
  if (result < a2)
  {
    if (XlReadStgStream::getStreamMaxFileOffset(this) <= a2)
      return *((unsigned int *)this + 5);
    v5 = *((_DWORD *)this + 2);
    if (v5 == 2150)
      v6 = 18;
    else
      v6 = 4;
    v7 = *((_QWORD *)this + 6);
    v8 = *((_QWORD *)this + 7) - v7;
    if ((v8 & 0x3FFFFFFFCLL) == 0)
      return 0;
    v9 = 0;
    if (v5 == 2150)
      v10 = -18;
    else
      v10 = -4;
    v11 = *((_QWORD *)this + 9);
    v12 = (v8 >> 2) - 1;
    v13 = v10 + a2;
    v14 = (v8 >> 2);
    do
    {
      result = *(unsigned int *)(v11 + 4 * v9);
      v15 = *(_DWORD *)(v7 + 4 * v9);
      if (v9 >= v12)
      {
        result = v13 + (_DWORD)result - v15;
      }
      else if (v15 <= a2 && *(_DWORD *)(v7 + 4 * v9 + 4) >= a2)
      {
        v16 = *(_DWORD *)(v11 + 4 * v9 + 4);
        v17 = v15 + v6;
        v18 = v17 + (unsigned __int16)(v16 - result);
        if (v17 < a2)
          v19 = result + a2 - v17;
        else
          v19 = result;
        if (v18 >= a2)
          return v19;
        else
          return v16;
      }
      ++v9;
    }
    while (v14 != v9);
  }
  return result;
}

uint64_t XlReadStgStream::seek(XlReadStgStream *this, unsigned int a2, int a3)
{
  unsigned int v3;
  uint64_t v5;

  v3 = a2;
  if (a3)
  {
    if (a3 == 1)
      v3 = (*(uint64_t (**)(XlReadStgStream *))(*(_QWORD *)this + 40))(this) + a2;
    else
      v3 = *((_DWORD *)this + 5) - a2;
  }
  v5 = XlReadStgStream::translateStreamLocation(this, v3, (unsigned __int16 *)this + 6);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v5, 0);
}

uint64_t XlReadStgStream::translateStreamLocation(XlReadStgStream *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned __int16 v17;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (((v3 - v4) & 0x3FFFFFFFCLL) == 0 || *((_DWORD *)this + 4) > a2 || *((_DWORD *)this + 5) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  v8 = 0;
  v9 = (unint64_t)(v3 - v4) >> 2;
  while (1)
  {
    v10 = *((_DWORD *)this + 2) == 2150 ? 18 : 4;
    v11 = (v10 + *(_DWORD *)(v4 + 4 * v8));
    v12 = (v9 - 1);
    v13 = *((_QWORD *)this + 9);
    v14 = *(_DWORD *)(v13 + 4 * v8);
    if (v8 < v12)
      break;
    v11 = a2 - v14 + v11;
    *a3 = XlReadStgStream::getStreamMaxFileOffset(this) - v11;
    v4 = *((_QWORD *)this + 6);
    v3 = *((_QWORD *)this + 7);
LABEL_14:
    ++v8;
    v9 = (unint64_t)(v3 - v4) >> 2;
    if (v8 >= v9)
      return v11;
  }
  if (a2 < v14)
    goto LABEL_14;
  v15 = *(_DWORD *)(v13 + 4 * v8 + 4);
  v16 = v15 >= a2;
  v17 = v15 - a2;
  if (!v16)
    goto LABEL_14;
  v11 = (_DWORD)v11 + a2 - v14;
  *a3 = v17;
  return v11;
}

uint64_t XlReadStgStream::readUInt16(XlReadStgStream *this)
{
  unsigned int v2;
  BOOL v3;
  __int16 v4;
  int v6;

  v2 = *((unsigned __int16 *)this + 6);
  v3 = v2 >= 2;
  v4 = v2 - 2;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  }
  else
  {
    v6 = 2;
    (*(void (**)(XlReadStgStream *, _QWORD, int *))(*(_QWORD *)this + 56))(this, *((_QWORD *)this + 3), &v6);
    return CsLeReadUInt16(*((unsigned __int16 **)this + 3));
  }
}

uint64_t XlReadStgStream::readSInt32(XlReadStgStream *this)
{
  unsigned int v2;
  BOOL v3;
  __int16 v4;
  int v6;

  v2 = *((unsigned __int16 *)this + 6);
  v3 = v2 >= 4;
  v4 = v2 - 4;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 96))(*((_QWORD *)this + 5));
  }
  else
  {
    v6 = 4;
    (*(void (**)(XlReadStgStream *, _QWORD, int *))(*(_QWORD *)this + 56))(this, *((_QWORD *)this + 3), &v6);
    return CsLeReadSInt32(*((unsigned int **)this + 3));
  }
}

void XlEshBinaryReader::read(uint64_t a1, EshRoot *a2)
{
  unsigned int *v3;
  EshHeader *v5;
  int var0;
  int v7;
  int StreamLocation;
  _DWORD *exception;
  int v10;

  if (*((_DWORD *)a2 + 10) && (v3 = *(unsigned int **)(a1 + 104)) != 0)
  {
    (*(void (**)(unsigned int *, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, v3[4], 0);
    EshBinaryReader::checkStarted(a1);
    if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a1 + 32))
    {
      (*(void (**)(EshRoot *, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0);
      v5 = (EshHeader *)operator new(0x10uLL);
      EshHeader::makeDefault(v5);
      (*(void (**)(uint64_t, _QWORD, EshHeader *))(*(_QWORD *)a1 + 88))(a1, *(unsigned int *)(a1 + 32), v5);
      if ((__int16)v5->var3 == -3806)
      {
        var0 = v5->var0;
        v7 = v5->var0 + v5->var1 + 8;
        *(_DWORD *)(a1 + 72) = v7;
        *(_DWORD *)(a1 + 32) = v7;
        *(_DWORD *)(a1 + 36) = v7;
        if (XlReadStgStream::getStreamSize(*(XlReadStgStream **)(a1 + 104)) - var0 - 17 > 0xFFFFFFF6
          || ((*(void (**)(uint64_t, _QWORD, EshHeader *))(*(_QWORD *)a1 + 88))(a1, v5->var1 + v5->var0 + 8, v5), v5->var3 != 7))
        {
LABEL_14:
          JUMPOUT(0x22E2DD408);
        }
        *(_DWORD *)(a1 + 36) = v5->var1 + v5->var0 + 8;
        EshRoot::appendChild(a2, v5);
        *((_DWORD *)a2 + 11) = v5->var0 + 8;
        StreamLocation = *(_DWORD *)(a1 + 32);
      }
      else
      {
        EshRoot::appendChild(a2, v5);
        *((_DWORD *)a2 + 11) = XlReadStgStream::getStreamSize(*(XlReadStgStream **)(a1 + 104));
        StreamLocation = XlReadStgStream::getStreamLocation(*(XlReadStgStream **)(a1 + 104));
      }
      *((_DWORD *)a2 + 12) = StreamLocation;
      goto LABEL_14;
    }
    exception = __cxa_allocate_exception(4uLL);
    v10 = 7010;
  }
  else
  {
    exception = __cxa_allocate_exception(4uLL);
    v10 = 7012;
  }
  *exception = v10;
}

void sub_22A1D3DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(a1);
}

uint64_t XlEshBinaryReader::getObjectHeader(EshParserVisitor **this, uint64_t a2, EshHeader *a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  int var3;
  int v12;
  EshHeader *v13;
  unsigned __int16 v14;
  EshContainer *v15;
  uint64_t HeaderOfType;
  EshSp *v17;
  unsigned int var1;
  _DWORD *exception;
  _DWORD *v20;
  _DWORD *v21;

  result = EshParserVisitor::visit(this[2], a3, a2);
  if (!*((_BYTE *)this + 92))
  {
    if (*((_DWORD *)this + 14))
    {
      result = ChStack<EshHeader>::top((uint64_t)(this + 5));
      v6 = *(_DWORD *)(result + 4) + *(_DWORD *)result + 8;
      v7 = a3->var1 + a3->var0 + 8;
      v8 = v6 >= v7;
      v9 = v6 - v7;
      if (!v8 || (v9 ? (v10 = v9 > 7) : (v10 = 1), !v10))
      {
LABEL_40:
        exception = __cxa_allocate_exception(4uLL);
        *exception = 7013;
      }
      var3 = a3->var3;
      if (*((_DWORD *)this + 14))
      {
        result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        v12 = *(unsigned __int16 *)(result + 10);
LABEL_14:
        if (var3 != 61444)
        {
          if (var3 != 61451)
            return result;
          if (a3->var1 + a3->var0 + 8 < *((_DWORD *)this + 24))
          {
            v13 = (EshHeader *)operator new(0x10uLL);
            EshHeader::makeDefault(v13);
            EshParserVisitor::visit(this[2], v13, a3->var1 + a3->var0 + 8);
            if ((__int16)v13->var3 == -3806)
              a3->var0 += v13->var0 + 8;
            result = MEMORY[0x22E2DD408](v13, 0x1000C408B6DE1C6);
          }
          v14 = 4;
          goto LABEL_38;
        }
        if (v12 == 2)
          goto LABEL_32;
        if (v12 != 61443)
        {
          if (v12 != 61442)
            goto LABEL_40;
          v15 = (EshContainer *)operator new(0x38uLL);
          EshContainer::EshContainer(v15, 0xF004u);
          (*((void (**)(EshParserVisitor **, EshContainer *, EshHeader *))*this + 13))(this, v15, a3);
          HeaderOfType = EshContainer::getHeaderOfType(v15, 61450);
          if (!HeaderOfType)
          {
            v20 = __cxa_allocate_exception(4uLL);
            *v20 = 7013;
          }
          v17 = (EshSp *)operator new(0x30uLL);
          EshSp::EshSp(v17);
          (*((void (**)(EshParserVisitor **, EshSp *, uint64_t))*this + 13))(this, v17, HeaderOfType);
          if (*((_BYTE *)v17 + 42))
          {
            v14 = 12;
          }
          else
          {
            if (!*((_BYTE *)v17 + 35))
            {
              v21 = __cxa_allocate_exception(4uLL);
              *v21 = 7013;
            }
            v14 = 7;
          }
          result = (*(uint64_t (**)(EshSp *))(*(_QWORD *)v17 + 8))(v17);
          if (v15)
            result = (*(uint64_t (**)(EshContainer *))(*(_QWORD *)v15 + 8))(v15);
          goto LABEL_38;
        }
        var1 = a3->var1;
        result = ChStack<EshHeader>::top((uint64_t)(this + 5));
        if (var1 != *(_DWORD *)(result + 4) + 8)
        {
LABEL_32:
          v14 = 7;
        }
        else if (*((_DWORD *)this + 14) > 2u || *((_BYTE *)this + 93) && *((_DWORD *)this[13] + 2) == 236)
        {
          v14 = 6;
        }
        else
        {
          v14 = 5;
        }
LABEL_38:
        a3->var3 = v14;
        a3->var4 = 0;
        a3->var2 = 0;
        return result;
      }
    }
    else
    {
      var3 = a3->var3;
    }
    v12 = 2;
    goto LABEL_14;
  }
  return result;
}

void sub_22A1D40C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::getStreamSize(XlReadStgStream *this)
{
  int v1;

  if (*((_BYTE *)this + 32))
    v1 = *((_DWORD *)this + 5) - 8;
  else
    v1 = *((_DWORD *)this + 5);
  return (v1 - *((_DWORD *)this + 4));
}

uint64_t XlReadStgStream::getStreamLocation(XlReadStgStream *this)
{
  unsigned int *v1;
  _DWORD *exception;

  v1 = (unsigned int *)*((_QWORD *)this + 6);
  if (((*((_QWORD *)this + 7) - (_QWORD)v1) & 0x3FFFFFFFCLL) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  return *v1;
}

void sub_22A1D4360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  objc_end_catch();

  _Unwind_Resume(a1);
}

uint64_t EshRoot::getChildInstance(EshRoot *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (((unint64_t)(*((_QWORD *)this + 3) - v2) >> 3) <= a2)
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  return *(__int16 *)(*(_QWORD *)(v2 + 8 * a2) + 8);
}

void `virtual thunk to'XlBinaryReader::read(XlBinaryReader *this, EshObject *a2)
{
  XlEshBinaryReader::read((XlBinaryReader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 144) + 40), a2);
}

void XlEshBinaryReader::read(XlEshBinaryReader *this, EshObject *a2)
{
  int v4;
  EshHeader *v5;
  int v6;
  uint64_t v7;
  int v8;
  _DWORD *exception;
  int v10;

  EshBinaryReader::checkStarted((uint64_t)this);
  v4 = (*((uint64_t (**)(EshObject *))a2->var0 + 2))(a2);
  v5 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v5);
  EshBinaryReader::findObjectHeader(this, v5, v4);
  if (!EshBinaryReader::atEnd(this))
  {
    if ((unsigned __int16)(v4 + 4096) <= 0x122u)
    {
      v6 = (*((uint64_t (**)(EshObject *))a2->var0 + 11))(a2);
      v7 = *(_QWORD *)this;
      if (v6)
        (*(void (**)(XlEshBinaryReader *, EshObject *))(v7 + 112))(this, a2);
      else
        (*(void (**)(XlEshBinaryReader *, EshObject *))(v7 + 120))(this, a2);
LABEL_15:
      EshBinaryReader::movePastObject(this, v5);
      JUMPOUT(0x22E2DD408);
    }
    switch(v4)
    {
      case 4:
        v8 = *((_DWORD *)this + 14);
        if (!v8)
          ChStack<EshHeader>::push((uint64_t *)this + 5, (uint64_t)v5);
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(_QWORD *)this + 128))(this, a2);
        if (!v8)
          --*((_DWORD *)this + 14);
        goto LABEL_15;
      case 5:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(_QWORD *)this + 136))(this, a2);
        *((_BYTE *)this + 93) = 1;
        goto LABEL_15;
      case 6:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(_QWORD *)this + 160))(this, a2);
        goto LABEL_15;
      case 7:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(_QWORD *)this + 152))(this, a2);
        goto LABEL_15;
      case 12:
        (*(void (**)(XlEshBinaryReader *, EshObject *))(*(_QWORD *)this + 144))(this, a2);
        goto LABEL_15;
      default:
        exception = __cxa_allocate_exception(4uLL);
        v10 = 1004;
        goto LABEL_17;
    }
  }
  exception = __cxa_allocate_exception(4uLL);
  v10 = 7000;
LABEL_17:
  *exception = v10;
}

void sub_22A1D45AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

EshHeader *XlEshBinaryReader::readObject(XlReadStgStream **this, EshContainer *a2)
{
  uint64_t *v4;
  const EshHeader *v5;
  int v6;
  int v7;
  EshHeader *v8;
  EshHeader *result;
  uint64_t v10;
  unsigned int v11;
  XlReadStgStream *v12;
  _DWORD *exception;

  v4 = (uint64_t *)(this + 5);
  v5 = (const EshHeader *)(*((uint64_t (**)(XlReadStgStream **))*this + 12))(this);
  EshRecord::setHeader(a2, v5);
  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 3);
  EshContainer::removeChildren((uint64_t)a2);
  ChStack<EshHeader>::push(v4, (uint64_t)a2 + 12);
  v8 = (EshHeader *)operator new(0x10uLL);
  result = EshHeader::makeDefault(v8);
  v10 = (v6 + 8);
  v11 = v10 + v7;
  if (v10 < (int)v10 + v7)
  {
    do
    {
      if (v10 >= *((_DWORD *)this[13] + 5))
      {
        while (1)
        {
          v12 = this[13];
          if (v10 < *((_DWORD *)v12 + 5))
            break;
          if ((XlReadStgStream::processNextStreamChunk(v12) & 1) == 0)
          {
            exception = __cxa_allocate_exception(4uLL);
            *exception = 7000;
          }
        }
      }
      (*((void (**)(XlReadStgStream **, uint64_t, EshHeader *))*this + 11))(this, v10, v8);
      if ((__int16)v8->var3 != -3816)
      {
        if (v8->var1 >= *((_DWORD *)this + 24))
          v8->var2 |= 0x1000u;
        EshContainer::addChild(a2, v8);
      }
      v10 = (v10 + v8->var0 + 8);
    }
    while (v10 < v11);
    --*((_DWORD *)this + 14);
LABEL_13:
    JUMPOUT(0x22E2DD408);
  }
  --*((_DWORD *)this + 14);
  if (v8)
    goto LABEL_13;
  return result;
}

void sub_22A1D4770(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::getStreamMaxFileOffset(XlReadStgStream *this)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7) - v1;
  if ((v2 & 0x3FFFFFFFCLL) == 0
    || (v3 = *((_DWORD *)this + 5),
        v4 = *(_DWORD *)(*((_QWORD *)this + 9)
                       + 4 * (((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 2) - 1)),
        v5 = v3 >= v4,
        v6 = v3 - v4,
        !v5))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  v7 = v2 >> 2;
  if (*((_DWORD *)this + 2) == 2150)
    v8 = 18;
  else
    v8 = 4;
  return v6 + *(_DWORD *)(v1 + 4 * (v7 - 1)) + v8;
}

uint64_t EshContainer::getChildInstance(EshContainer *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 4);
  if (((unint64_t)(*((_QWORD *)this + 5) - v2) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return *(__int16 *)(*(_QWORD *)(v2 + 8 * a2) + 8);
}

uint64_t XlEshBinaryReader::readRecordData(EshParserVisitor **this, EshRecord *a2, const EshHeader *a3)
{
  EshContainer *v6;
  unsigned int var1;
  int var0;
  EshHeader *v9;
  uint64_t v10;
  unsigned int v11;
  XlReadStgStream *v12;
  _DWORD *v13;
  _DWORD *exception;

  if (EshRecord::getRecordType(a2) != a3->var3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  EshRecord::setHeader(a2, a3);
  EshParserVisitor::beginRead(this[2], a2);
  if ((__int16)a3->var3 == -4092)
  {
    EshContainer::removeChildren((uint64_t)v6);
    var0 = a3->var0;
    var1 = a3->var1;
    v9 = (EshHeader *)operator new(0x10uLL);
    EshHeader::makeDefault(v9);
    v10 = var1 + 8;
    v11 = v10 + var0;
    while (v10 < v11)
    {
      if (v10 >= *((_DWORD *)this[13] + 5))
      {
        while (1)
        {
          v12 = this[13];
          if (v10 < *((_DWORD *)v12 + 5))
            break;
          if ((XlReadStgStream::processNextStreamChunk(v12) & 1) == 0)
          {
            v13 = __cxa_allocate_exception(4uLL);
            *v13 = 7000;
          }
        }
      }
      EshParserVisitor::visit(this[2], v9, v10);
      if (v9->var1 >= *((_DWORD *)this + 24))
        v9->var2 |= 0x1000u;
      EshContainer::addChild(v6, v9);
      v10 = (v10 + v9->var0 + 8);
    }
    (*(void (**)(EshParserVisitor *, _QWORD, _QWORD))(*(_QWORD *)this[1] + 16))(this[1], a3->var1 + a3->var0 + 8, 0);
    if (v9)
      MEMORY[0x22E2DD408](v9, 0x1000C408B6DE1C6);
  }
  else
  {
    (*(void (**)(EshRecord *, EshParserVisitor *))(*(_QWORD *)a2 + 112))(a2, this[2]);
  }
  return EshParserVisitor::endRead(this[2], a2);
}

void sub_22A1D4A5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x22E2DD408](v1, 0x1000C408B6DE1C6);
  _Unwind_Resume(exception_object);
}

uint64_t XlReadStgStream::readUInt32(XlReadStgStream *this)
{
  unsigned int v2;
  BOOL v3;
  __int16 v4;
  int v6;

  v2 = *((unsigned __int16 *)this + 6);
  v3 = v2 >= 4;
  v4 = v2 - 4;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5));
  }
  else
  {
    v6 = 4;
    (*(void (**)(XlReadStgStream *, _QWORD, int *))(*(_QWORD *)this + 56))(this, *((_QWORD *)this + 3), &v6);
    return CsLeReadSInt32(*((unsigned int **)this + 3));
  }
}

uint64_t XlReadStgStream::readByte(XlReadStgStream *this)
{
  __int16 v2;

  v2 = *((_WORD *)this + 6);
  if (!v2)
  {
    XlReadStgStream::readNextHostRecordHeader(this);
    v2 = *((_WORD *)this + 6);
  }
  *((_WORD *)this + 6) = v2 - 1;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5));
}

uint64_t XlReadStgStream::readBytes(XlReadStgStream *this, char *a2, unsigned int *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;

  v6 = *a3;
  if (*a3 > *((unsigned __int16 *)this + 6))
  {
    v7 = 0;
    while (1)
    {
      do
      {
        v8 = *((unsigned __int16 *)this + 6);
        v12 = v8;
        if (!v8)
          break;
        if (v7 + v8 > *a3)
          v12 = *a3 - v7;
        result = (*(uint64_t (**)(_QWORD, char *, int *))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), &a2[v7], &v12);
        v10 = v12;
        v11 = *((unsigned __int16 *)this + 6);
        *((_WORD *)this + 6) = v11 - v12;
        v6 -= v10;
        if (!v6)
          return result;
        v7 += v10;
      }
      while (v11 != (unsigned __int16)v10);
      XlReadStgStream::readNextHostRecordHeader(this);
    }
  }
  result = (*(uint64_t (**)(_QWORD, char *, unsigned int *))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), a2, a3);
  *((_WORD *)this + 6) -= *(_WORD *)a3;
  return result;
}

void XlEshRoot::~XlEshRoot(XlEshRoot *this)
{
  EshRoot::~EshRoot(this);
  JUMPOUT(0x22E2DD408);
}

uint64_t XlPageProperties::setFooterString(XlPageProperties *this, OcText *a2)
{
  OcText *v3;

  v3 = (OcText *)*((_QWORD *)this + 6);
  if (!v3)
  {
    v3 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v3);
    *((_QWORD *)this + 6) = v3;
  }
  return OcText::operator=((uint64_t)v3, (uint64_t)a2);
}

void sub_22A1D4CD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22A1D51C4(_Unwind_Exception *a1, void *a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  XlGraphicsInfo::~XlGraphicsInfo((XlGraphicsInfo *)va);
  _Unwind_Resume(a1);
}

void XlGraphicsInfo::XlGraphicsInfo(XlGraphicsInfo *this)
{
  *(_QWORD *)this = &off_24F3AF7D8;
  *((_QWORD *)this + 1) = 48;
  *(_DWORD *)((char *)this + 78) = 0;
  *((_WORD *)this + 41) = 0;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 48) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  *(_OWORD *)((char *)this + 108) = xmmword_22A4C3BC0;
  *((_BYTE *)this + 124) = 0;
  *((_QWORD *)this + 16) = 0;
}

uint64_t *XlBinaryReader::read(XlBinaryReader *this, XlGraphicsInfo *a2)
{
  uint64_t v4;
  uint64_t *result;
  int v6;
  XlObjBiff8 *v7;
  _DWORD *v8;
  __int16 v9;
  XlString *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t MergeRegion;
  _WORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int var1;
  unsigned int var0;
  XlImData *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  char *v30;
  uint64_t v31;
  int v32;
  XlOper *v33;
  XlHeader v34;

  XlHeader::XlHeader(&v34);
  v4 = *((unsigned int *)this + 324);
  XlGraphicsInfo::clear(a2);
  result = (uint64_t *)*((_QWORD *)this + 163);
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  *((_QWORD *)this + 163) = 0;
  if ((*((_DWORD *)this + 110) & 0x80000000) != 0)
  {
    result = (uint64_t *)XlBinaryReader::setSheet(this, 0);
    if ((v4 & 0x80000000) != 0)
      return result;
LABEL_7:
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v4, 0);
    result = (uint64_t *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
    if (v34.var1 != 60 && v34.var1 != 236)
      goto LABEL_29;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
    *((_DWORD *)this + 325) = v6 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v34.var0, 1);
    result = (uint64_t *)XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
    while (v34.var1 == 60 || v34.var1 == 236)
      result = (uint64_t *)XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
    if (v34.var1 != 93)
    {
LABEL_29:
      *((_DWORD *)this + 324) = -1;
      return result;
    }
    v7 = (XlObjBiff8 *)operator new(0x40uLL);
    XlObjBiff8::XlObjBiff8(v7, &v34);
    *((_QWORD *)this + 163) = v7;
    (*(void (**)(_QWORD, _DWORD *))(**((_QWORD **)this + 167) + 136))(*((_QWORD *)this + 167), v8);
    *((_DWORD *)a2 + 2) = v8[10];
    *((_WORD *)a2 + 6) = *((_WORD *)v8 + 22);
    v9 = *((_WORD *)v8 + 23);
    *((_BYTE *)a2 + 16) = (v9 & 0x2000) != 0;
    *((_BYTE *)a2 + 17) = (v9 & 0x4000) != 0;
    *((_BYTE *)a2 + 14) = v9 & 1;
    *((_BYTE *)a2 + 15) = (v9 & 0x10) != 0;
    *((_DWORD *)a2 + 13) = v8[12];
    if (*((_BYTE *)v8 + 56))
    {
      v10 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v10);
      v11 = (char *)operator new[](0xCuLL);
      snprintf(v11, 8uLL, "MBD%08X", v8[13]);
      XlString::setString(v10, v11);
      *((_BYTE *)a2 + 124) = 1;
      XlGraphicsInfo::takeOLEName(a2, v10);
      if (v11)
        MEMORY[0x22E2DD3F0](v11, 0x1000C8077774924);
    }
    v12 = (*((_QWORD *)v8 + 3) - *((_QWORD *)v8 + 2)) >> 3;
    v33 = 0;
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        MergeRegion = XlMerge::getMergeRegion(*((XlMerge **)this + 163), v13);
        if (MergeRegion)
        {
          v16 = operator new(0x10uLL);
          v17 = *(_DWORD *)(MergeRegion + 8);
          v18 = *(_DWORD *)(MergeRegion + 32);
          v19 = *(_QWORD *)(MergeRegion + 24);
          *(_DWORD *)v16 = *(__int16 *)(MergeRegion + 16);
          v16[2] = v17;
          v16[3] = v18;
          *((_QWORD *)v16 + 1) = v19;
          ChAutoPtr<XlGraphicsInfo::XlObjData>::setValue(&v33, (uint64_t)v16);
          XlCrn::appendOperand(a2, v33);
          v33 = 0;
          *(_QWORD *)(MergeRegion + 24) = 0;
          *(_DWORD *)(MergeRegion + 32) = 0;
        }
        v13 = (unsigned __int16)++v14;
      }
      while (v12 > (unsigned __int16)v14);
    }
    v20 = *((_QWORD *)this + 163);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    *((_QWORD *)this + 163) = 0;
    v21 = *((_DWORD *)a2 + 2);
    if (v21 == 8)
    {
      v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
      XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
      var1 = (unsigned __int16)v34.var1;
      if (v34.var1 == 127)
      {
        var0 = v34.var0;
        v26 = (XlImData *)operator new(0x28uLL);
        XlImData::XlImData(v26, &v34);
        *((_QWORD *)this + 163) = v26;
        if (v26)
        *((_BYTE *)v26 + 36) = 1;
        (*(void (**)(_QWORD, XlImData *))(**((_QWORD **)this + 167) + 88))(*((_QWORD *)this + 167), v26);
        *((_BYTE *)a2 + 104) = 1;
        *((_DWORD *)a2 + 30) = *((_DWORD *)v26 + 8);
        *((_QWORD *)a2 + 14) = *((_QWORD *)v26 + 3);
        *((_DWORD *)a2 + 27) = v23;
        v27 = *((_QWORD *)this + 163);
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        *((_QWORD *)this + 163) = 0;
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        v28 = var0 - 8;
        while (1)
        {
          var1 = (unsigned __int16)v34.var1;
          if (v34.var1 != 127 && v34.var1 != 60)
            break;
          v28 += v34.var0;
          if (v28 > *((_DWORD *)a2 + 28))
            break;
          XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        }
      }
      if (var1 == 236 || var1 == 60)
      {
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        v29 = v32 - XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
LABEL_60:
        *((_DWORD *)this + 324) = v29;
        return ChAutoPtr<XlGraphicsInfo::XlObjData>::~ChAutoPtr((uint64_t *)&v33);
      }
    }
    else
    {
      if (v21 == 5)
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        while (v34.var1 != 2057)
          XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v34.var0, 1);
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        while (v34.var1 != 10)
          XlParserVisitor::skipAhead(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 164) + 16))(*((_QWORD *)this + 164), v34.var0, 1);
        *((_DWORD *)a2 + 24) = v22;
        *((_DWORD *)a2 + 25) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164))
                             - v22;
      }
      else
      {
        v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        if (v34.var1 != 60 && v34.var1 != 236)
          goto LABEL_59;
        if (v34.var0 != 8)
          goto LABEL_60;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 104))(*((_QWORD *)this + 164));
        (*(void (**)(_QWORD))(**((_QWORD **)this + 164) + 104))(*((_QWORD *)this + 164));
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
        if (v34.var1 != 438)
          goto LABEL_60;
        v30 = (char *)operator new(0x38uLL);
        XlTxo::XlTxo((XlTxo *)v30, &v34);
        *((_QWORD *)this + 163) = v30;
        if (v30)
        (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 167) + 176))(*((_QWORD *)this + 167), v30);
        *((_BYTE *)a2 + 48) = 1;
        *((_DWORD *)a2 + 18) = *((_DWORD *)v30 + 8);
        *((_BYTE *)a2 + 76) = v30[36];
        *((_QWORD *)a2 + 8) = *((_QWORD *)v30 + 3);
        *(_DWORD *)((char *)a2 + 78) = *(_DWORD *)(v30 + 38);
        XlChartFrameType::takePictureFormat((XlChartFrameType *)a2, *((XlChartPicF **)v30 + 2));
        XlGraphicsInfo::takeTextFormula(a2, *((unsigned __int8 **)v30 + 6), *((_WORD *)v30 + 21));
        *((_QWORD *)v30 + 2) = 0;
        *((_QWORD *)v30 + 6) = 0;
        v31 = *((_QWORD *)this + 163);
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        *((_QWORD *)this + 163) = 0;
      }
      XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v34, *((_BYTE *)this + 1320));
      if (v34.var1 == 236 || v34.var1 == 60)
      {
        v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
        goto LABEL_60;
      }
    }
LABEL_59:
    v29 = -1;
    goto LABEL_60;
  }
  if ((v4 & 0x80000000) == 0)
    goto LABEL_7;
  return result;
}

void sub_22A1D59A4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  __cxa_begin_catch(a1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(_QWORD *)(v1 + 1304);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(v1 + 1304) = 0;
  *(_DWORD *)(v1 + 1296) = -1;
  exception = __cxa_allocate_exception(4uLL);
  *exception = 1004;
}

void sub_22A1D59F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __cxa_end_catch();
  ChAutoPtr<XlGraphicsInfo::XlObjData>::~ChAutoPtr((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t XlGraphicsInfo::clear(XlGraphicsInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  *((_QWORD *)this + 1) = 48;
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_WORD *)this + 40) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)((char *)this + 69) = 0;
  *(_OWORD *)((char *)this + 108) = xmmword_22A4C3BC0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 124) = 0;
  XlGraphicsInfo::clearStateElements((uint64_t)this);
  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 7) = 0;
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 16) = 0;
  result = *((_QWORD *)this + 11);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 41) = 0;
  return result;
}

uint64_t XlGraphicsInfo::clearStateElements(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  v3 = *(_QWORD *)(this + 32);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
          MEMORY[0x22E2DD3F0](v6, 0x1000C8077774924);
        *(_QWORD *)(v5 + 8) = 0;
        this = MEMORY[0x22E2DD408](v5, 0x1010C40466105CCLL);
        v2 = *(_QWORD *)(v1 + 24);
        v3 = *(_QWORD *)(v1 + 32);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 32) = v2;
  return this;
}

void XlEshParserVisitor::~XlEshParserVisitor(XlEshParserVisitor *this)
{
  EshClientDataModelVisitor::EshClientDataModelVisitor(this);
  JUMPOUT(0x22E2DD408);
}

void XlGraphicsInfo::~XlGraphicsInfo(XlGraphicsInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_24F3AF7D8;
  XlGraphicsInfo::clearStateElements((uint64_t)this);
  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 7) = 0;
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 16) = 0;
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x22E2DD3F0](v4, 0x1000C8077774924);
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 41) = 0;
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
}

{
  XlGraphicsInfo::~XlGraphicsInfo(this);
  JUMPOUT(0x22E2DD408);
}

void sub_22A1D5D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void XlMerge::XlMerge(XlMerge *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACCA0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 40) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlMerge *a2)
{
  int v4;
  int v5;
  int v6;
  XlRef *v7;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v4 >= 1)
  {
    v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      v7 = (XlRef *)operator new(0xAuLL);
      XlRef::XlRef(v7, 0);
      (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v7);
      XlCoordList::appendVertex(a2, (XlVertex *)v7);
      v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1D5E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlMerge::~XlMerge(XlMerge *this)
{
  XlMerge::~XlMerge(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3ACCA0;
  XlMerge::clearMergedRegions((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t XlMerge::clearMergedRegions(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  if (*(_BYTE *)(this + 40))
  {
    v2 = *(_QWORD *)(this + 16);
    v3 = *(_QWORD *)(this + 24);
    if (((v3 - v2) & 0x7FFFFFFF8) != 0)
    {
      v4 = 0;
      do
      {
        this = *(_QWORD *)(v2 + 8 * v4);
        if (this)
        {
          this = MEMORY[0x22E2DD408](this, 0x1000C400EA6A39BLL);
          v2 = *(_QWORD *)(v1 + 16);
          v3 = *(_QWORD *)(v1 + 24);
        }
        ++v4;
      }
      while (v4 < ((unint64_t)(v3 - v2) >> 3));
    }
  }
  else
  {
    v2 = *(_QWORD *)(this + 16);
  }
  *(_QWORD *)(v1 + 24) = v2;
  return this;
}

void sub_22A1D5FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D6058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D6144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1D63A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1D6768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1D6884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1D6914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_22A1D6A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSUDeviceRGBColorSpace()
{
  if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1)
    dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
  return TSUDeviceRGBColorSpace_sDeviceRGBColorSpace;
}

uint64_t TSUDeviceCMYKColorSpace()
{
  if (TSUDeviceCMYKColorSpace_sDeviceCMYKDispatchOnce != -1)
    dispatch_once(&TSUDeviceCMYKColorSpace_sDeviceCMYKDispatchOnce, &__block_literal_global_1);
  return TSUDeviceCMYKColorSpace_sDeviceCMYKColorSpace;
}

void sub_22A1D6BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1D6E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1D6F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1D71B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1D72E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1D74B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22A1D7564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1D79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1D7B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t XlPageProperties::setHeaderString(XlPageProperties *this, OcText *a2)
{
  OcText *v3;

  v3 = (OcText *)*((_QWORD *)this + 5);
  if (!v3)
  {
    v3 = (OcText *)operator new(0x30uLL);
    OcText::OcText(v3);
    *((_QWORD *)this + 5) = v3;
  }
  return OcText::operator=((uint64_t)v3, (uint64_t)a2);
}

void sub_22A1D7C2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlTopMargin::XlTopMargin(XlTopMargin *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AE9F0;
  v2[2] = 0;
}

void XlObjBiff8::XlObjBiff8(XlObjBiff8 *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ACF60;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 48;
  *(_DWORD *)(v2 + 52) = -1;
  *(_BYTE *)(v2 + 56) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlObjBiff8 *a2)
{
  XlGenericRecord *v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int SInt32;
  XlGenericRecord *v17;
  XlGenericRecord *v18;
  XlGenericRecord *v19;

  LODWORD(v4) = *((_DWORD *)a2 + 2);
  v5 = *((_BYTE *)this + 76);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = v6;
  v7 = *((_QWORD *)this + 10);
  v8 = *((_DWORD *)this + 22);
  *((_BYTE *)this + 76) = 0;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v9)
  {
    LOWORD(v11) = v10;
    while (1)
    {
      v12 = (__int16)((_WORD)v4 - 4);
      v13 = (__int16)v11 >= v12 ? (__int16)((_WORD)v4 - 4) : (__int16)v11;
      *((_DWORD *)this + 21) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
                             - 4;
      *((_DWORD *)this + 22) = 4;
      *((_DWORD *)this + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
                             + v13;
      if (v12 < (__int16)v11)
        break;
      if ((unsigned __int16)v9 == 21)
      {
        *((_DWORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
        *((_WORD *)a2 + 22) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
        *((_WORD *)a2 + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
        *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4294967286, 1);
      }
      v4 = (XlGenericRecord *)operator new(0x28uLL);
      XlGenericRecord::XlGenericRecord(v4, v9, (__int16)v11, *((_BYTE *)a2 + 14));
      (*(void (**)(XlParserVisitor *, XlGenericRecord *))(*(_QWORD *)this + 80))(this, v4);
      if ((unsigned __int16)v9 == 9 && *((_DWORD *)a2 + 10) == 8)
      {
        v14 = *((_QWORD *)v4 + 3);
        if (v14)
        {
          v15 = *((unsigned int *)v4 + 8);
          if (v15 >= 4)
          {
            SInt32 = CsLeReadSInt32((unsigned int *)(v14 + v15 - 4));
            *((_BYTE *)a2 + 56) = 1;
            *((_DWORD *)a2 + 13) = SInt32;
          }
        }
      }
      XlCoordList::appendVertex(a2, v4);
      LOWORD(v4) = v12 - v11;
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      if (!v9)
      {
        v17 = (XlGenericRecord *)operator new(0x28uLL);
        XlGenericRecord::XlGenericRecord(v17, 0, v11, *((_BYTE *)a2 + 14));
        XlCoordList::appendVertex(a2, v17);
        goto LABEL_19;
      }
    }
    if (v12 >= 1)
    {
      v18 = (XlGenericRecord *)operator new(0x28uLL);
      XlGenericRecord::XlGenericRecord(v18, v9, v12, *((_BYTE *)a2 + 14));
      (*(void (**)(XlParserVisitor *, XlGenericRecord *))(*(_QWORD *)this + 80))(this, v18);
      *((_DWORD *)v18 + 2) = (__int16)v11;
      XlCoordList::appendVertex(a2, v18);
    }
    v19 = (XlGenericRecord *)operator new(0x28uLL);
    XlGenericRecord::XlGenericRecord(v19, 0, 0, *((_BYTE *)a2 + 14));
    XlCoordList::appendVertex(a2, v19);
  }
LABEL_19:
  *((_DWORD *)this + 18) = v6;
  *((_QWORD *)this + 10) = v7;
  *((_DWORD *)this + 22) = v8;
  *((_BYTE *)this + 76) = v5;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1D8030(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void XlGenericRecord::XlGenericRecord(XlGenericRecord *this, __int16 a2, int a3, char a4)
{
  uint64_t v4;

  XlRecord::XlRecord(this, a2, a3, a4);
  *(_QWORD *)v4 = &off_24F3AC760;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 16) = *(_WORD *)(v4 + 12);
  *(_WORD *)(v4 + 12) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlGenericRecord *a2)
{
  void *v4;
  unsigned int v6;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (!*((_BYTE *)this + 76))
  {
    v6 = *((_DWORD *)a2 + 2);
    v4 = operator new[](v6);
    *((_QWORD *)this + 3) = v4;
    (*(void (**)(_QWORD, void *, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v4, &v6);
    XlGenericRecord::takeContents(a2, *((unsigned __int8 **)this + 3), v6);
    *((_QWORD *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlGenericRecord::takeContents(XlGenericRecord *this, unsigned __int8 *a2, int a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 3) = a2;
  *((_DWORD *)this + 8) = a3;
  return result;
}

_QWORD *ChAutoPtr<XlGraphicsInfo::XlObjData>::setValue(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *result;
  if (*result != a2)
  {
    v4 = result;
    if (v2)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (v5)
        MEMORY[0x22E2DD3F0](v5, 0x1000C8077774924);
      *(_QWORD *)(v2 + 8) = 0;
      result = (_QWORD *)MEMORY[0x22E2DD408](v2, 0x1010C40466105CCLL);
    }
    *v4 = a2;
  }
  return result;
}

void XlObjBiff8::~XlObjBiff8(XlObjBiff8 *this)
{
  XlObjBiff8::~XlObjBiff8(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3ACF60;
  XlObjBiff8::clearSubRecords(this);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

_QWORD *XlObjBiff8::clearSubRecords(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[2];
  v3 = this[3];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[2];
        v3 = v1[3];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[3] = v2;
  return this;
}

void XlGenericRecord::~XlGenericRecord(XlGenericRecord *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC760;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC760;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
}

uint64_t *ChAutoPtr<XlGraphicsInfo::XlObjData>::~ChAutoPtr(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x22E2DD408](v2, 0x1010C40466105CCLL);
  }
  *a1 = 0;
  return a1;
}

void XlEshGroup::XlEshGroup(XlEshGroup *this)
{
  _QWORD *v1;

  EshGroup::EshGroup(this);
  *v1 = &off_24F3AF470;
  v1[34] = &unk_24F3AF520;
  v1[46] = 0;
  v1[47] = 0;
}

void XlEshShape::XlEshShape(XlEshShape *this)
{
  _QWORD *v1;

  EshShape::EshShape((EshShape *)this);
  *v1 = &off_24F3AF640;
  v1[52] = &unk_24F3AF710;
  v1[72] = 0;
  v1[74] = 0;
  v1[73] = 0;
}

uint64_t XlReadStgStream::readString16(XlReadStgStream *this, int *a2, unsigned __int16 *a3)
{
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  __int16 v11;
  int v13;
  int v14;

  v5 = *((unsigned __int16 *)this + 6);
  v6 = *a2;
  if (v5 >= 2 * v6)
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5));
    v11 = *(_WORD *)a2;
  }
  else
  {
    do
    {
      v13 = (unsigned __int16)v5 >> 1;
      if ((unsigned __int16)v5 >= 2u)
      {
        (*(void (**)(_QWORD, int *, unsigned __int16 *))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5), &v13, a3);
        LOWORD(v5) = *((_WORD *)this + 6) - 2 * v13;
        *((_WORD *)this + 6) = v5;
      }
      if ((_WORD)v5)
      {
        v7 = (*(uint64_t (**)(XlReadStgStream *))(*(_QWORD *)this + 128))(this);
        v8 = v13;
        a3[v13] = v7;
        v9 = v8 + 1;
        v13 = v9;
      }
      else
      {
        XlReadStgStream::readNextHostRecordHeader(this);
        v9 = v13;
      }
      LODWORD(v6) = v6 - v9;
      v14 = v6;
      a3 += v9;
      v5 = *((unsigned __int16 *)this + 6);
    }
    while (v5 < 2 * (int)v6);
    result = (*(uint64_t (**)(_QWORD, int *, unsigned __int16 *))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5), &v14, a3);
    v11 = v14;
  }
  *((_WORD *)this + 6) -= 2 * v11;
  return result;
}

uint64_t XlEshBinaryReader::readClientAnchor(XlEshBinaryReader *this, EshContentBase *a2, const EshHeader *a3)
{
  EshAtom *v6;
  void *v7;
  void *v9;
  _DWORD *exception;

  v6 = (EshAtom *)operator new(0x40uLL);
  EshAtom::EshAtom(v6, 0xF010u, 0);
  *(_QWORD *)v6 = &unk_24F3AC110;
  *((_WORD *)v6 + 14) = 0;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  (*(void (**)(XlEshBinaryReader *, EshAtom *, const EshHeader *))(*(_QWORD *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    return XlEshShape::takeClientAnchor((uint64_t)v7, (uint64_t)v6);
  }
  else
  {
    if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 6)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 0;
    }
    return XlEshGroup::takeClientAnchor((uint64_t)v9, v6);
  }
}

void sub_22A1D8630(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlEshClientAnchor::accept(uint64_t a1, void *lpsrc)
{
  EshDataModelVisitor *v3;
  const void *ClientVisitor;
  void *v5;

  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v3);
  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1);
}

uint64_t XlEshParserVisitor::visit(uint64_t a1, EshRecord *this)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *exception;

  if (EshRecord::getDataLength(this) == 8)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  }
  else
  {
    if (EshRecord::getDataLength(this) != 18)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 3002;
    }
    *((_WORD *)this + 14) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    *((_DWORD *)this + 12) = v8;
    *((_DWORD *)this + 13) = v9;
    *((_DWORD *)this + 14) = v10;
    *((_DWORD *)this + 15) = v11;
  }
  *((_DWORD *)this + 8) = v4;
  *((_DWORD *)this + 9) = v5;
  *((_DWORD *)this + 10) = v6;
  *((_DWORD *)this + 11) = v7;
  return 1;
}

uint64_t XlReadStgStream::readSInt16(XlReadStgStream *this)
{
  unsigned int v2;
  BOOL v3;
  __int16 v4;
  int v6;

  v2 = *((unsigned __int16 *)this + 6);
  v3 = v2 >= 2;
  v4 = v2 - 2;
  if (v3)
  {
    *((_WORD *)this + 6) = v4;
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  }
  else
  {
    v6 = 2;
    (*(void (**)(XlReadStgStream *, _QWORD, int *))(*(_QWORD *)this + 56))(this, *((_QWORD *)this + 3), &v6);
    return CsLeReadSInt16(*((__int16 **)this + 3));
  }
}

uint64_t XlEshShape::takeClientAnchor(uint64_t result, uint64_t a2)
{
  _DWORD *exception;

  if (*(_QWORD *)(result + 576))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1010;
  }
  *(_QWORD *)(result + 576) = a2;
  return result;
}

uint64_t XlEshBinaryReader::readClientData(XlEshBinaryReader *this, EshContentBase *a2, const EshHeader *a3)
{
  EshAtom *v6;
  void *v7;
  void *v9;
  _DWORD *exception;

  v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF011u, 0);
  *(_QWORD *)v6 = &unk_24F3AC1D0;
  (*(void (**)(XlEshBinaryReader *, EshAtom *, const EshHeader *))(*(_QWORD *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    return XlEshShape::takeClientData((uint64_t)v7, (uint64_t)v6);
  }
  else
  {
    if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 6)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 0;
    }
    return XlEshGroup::takeClientData((uint64_t)v9, v6);
  }
}

void sub_22A1D8A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlEshClientData::accept(uint64_t a1, void *lpsrc)
{
  EshDataModelVisitor *v3;
  const void *ClientVisitor;
  void *v5;

  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v3);
  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 24))(v5, a1);
}

uint64_t XlEshParserVisitor::visit(int a1, EshRecord *this)
{
  _DWORD *exception;

  if ((int)EshRecord::getDataLength(this) >= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  return 1;
}

uint64_t XlEshShape::takeClientData(uint64_t result, uint64_t a2)
{
  _DWORD *exception;

  if (*(_QWORD *)(result + 584))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1010;
  }
  *(_QWORD *)(result + 584) = a2;
  return result;
}

void sub_22A1D8C9C(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v10;

  if (a2 == 2)
  {
    v10 = objc_begin_catch(exc_buf);
    objc_exception_rethrow();
  }
  objc_begin_catch(exc_buf);
  objc_exception_rethrow();
}

void sub_22A1D8D14()
{
  objc_end_catch();
  JUMPOUT(0x22A1D8D1CLL);
}

void sub_22A1D8E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::isHyperlinkSet(EshShapeProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x382u);
}

void XlScl::XlScl(XlScl *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3ADEB8;
  *(_DWORD *)(v2 + 16) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlScl *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void XlScl::~XlScl(XlScl *this)
{
  JUMPOUT(0x22E2DD408);
}

XlEof *XlRecordFactory::createRecord(XlHeader *this, XlHeader *a2)
{
  int var1;
  XlEof *v4;

  var1 = this->var1;
  if (var1 <= 420)
  {
    switch(this->var1)
    {
      case 3:
        goto LABEL_47;
      case 4:
        goto LABEL_48;
      case 6:
        goto LABEL_24;
      case 7:
        goto LABEL_49;
      case 9:
        goto LABEL_41;
      case 0xA:
        v4 = (XlEof *)operator new(0x10uLL);
        XlEof::XlEof(v4, this);
        break;
      case 0xC:
        v4 = (XlEof *)operator new(0x18uLL);
        XlCalcCount::XlCalcCount(v4, this);
        break;
      case 0xD:
        v4 = (XlEof *)operator new(0x18uLL);
        XlCalcMode::XlCalcMode(v4, this);
        break;
      case 0xE:
        v4 = (XlEof *)operator new(0x18uLL);
        XlPrecision::XlPrecision(v4, this);
        break;
      case 0xF:
        v4 = (XlEof *)operator new(0x18uLL);
        XlRefMode::XlRefMode(v4, this);
        break;
      case 0x10:
        v4 = (XlEof *)operator new(0x18uLL);
        XlDelta::XlDelta(v4, this);
        break;
      case 0x11:
        v4 = (XlEof *)operator new(0x18uLL);
        XlIteration::XlIteration(v4, this);
        break;
      case 0x12:
        v4 = (XlEof *)operator new(0x18uLL);
        XlProtect::XlProtect(v4, this);
        break;
      case 0x13:
        v4 = (XlEof *)operator new(0x18uLL);
        XlPassword::XlPassword(v4, this);
        break;
      case 0x14:
        v4 = (XlEof *)operator new(0x18uLL);
        XlHdr::XlHdr(v4, this);
        break;
      case 0x15:
        v4 = (XlEof *)operator new(0x18uLL);
        XlFooter::XlFooter(v4, this);
        break;
      case 0x16:
        v4 = (XlEof *)operator new(0x18uLL);
        XlExternCount::XlExternCount(v4, this);
        break;
      case 0x17:
        v4 = (XlEof *)operator new(0x30uLL);
        XlExternSheet::XlExternSheet(v4, this);
        break;
      case 0x18:
        v4 = (XlEof *)operator new(0x58uLL);
        XlName::XlName((XlName *)v4, this);
        break;
      case 0x19:
        v4 = (XlEof *)operator new(0x18uLL);
        XlWindowProtect::XlWindowProtect(v4, this);
        break;
      case 0x1A:
        v4 = (XlEof *)operator new(0x30uLL);
        XlVerticalPageBreaks::XlVerticalPageBreaks(v4, this);
        break;
      case 0x1B:
        v4 = (XlEof *)operator new(0x30uLL);
        XlHorizPageBreaks::XlHorizPageBreaks(v4, this);
        break;
      case 0x1C:
        v4 = (XlEof *)operator new(0x28uLL);
        XlNote::XlNote(v4, this);
        break;
      case 0x1D:
        v4 = (XlEof *)operator new(0x38uLL);
        XlSelection::XlSelection((XlSelection *)v4, this);
        break;
      case 0x22:
        v4 = (XlEof *)operator new(0x18uLL);
        Xl1904::Xl1904(v4, this);
        break;
      case 0x23:
        goto LABEL_45;
      case 0x25:
        goto LABEL_13;
      case 0x26:
        v4 = (XlEof *)operator new(0x18uLL);
        XlLeftMargin::XlLeftMargin(v4, this);
        break;
      case 0x27:
        v4 = (XlEof *)operator new(0x18uLL);
        XlRightMargin::XlRightMargin(v4, this);
        break;
      case 0x28:
        v4 = (XlEof *)operator new(0x18uLL);
        XlTopMargin::XlTopMargin(v4, this);
        break;
      case 0x29:
        v4 = (XlEof *)operator new(0x18uLL);
        XlBottomMargin::XlBottomMargin(v4, this);
        break;
      case 0x2A:
        v4 = (XlEof *)operator new(0x18uLL);
        XlPrintHeaders::XlPrintHeaders(v4, this);
        break;
      case 0x2B:
        v4 = (XlEof *)operator new(0x18uLL);
        XlPrintGridlines::XlPrintGridlines(v4, this);
        break;
      case 0x2F:
        v4 = (XlEof *)operator new(0x28uLL);
        XlFilePass::XlFilePass(v4, this);
        break;
      case 0x31:
        goto LABEL_46;
      case 0x33:
        v4 = (XlEof *)operator new(0x18uLL);
        XlPrintSize::XlPrintSize(v4, this);
        break;
      case 0x3C:
        v4 = (XlEof *)operator new(0x20uLL);
        XlContinue::XlContinue(v4, this);
        break;
      case 0x3D:
        v4 = (XlEof *)operator new(0x28uLL);
        XlWindow1::XlWindow1(v4, this);
        break;
      case 0x3E:
        goto LABEL_32;
      case 0x40:
        v4 = (XlEof *)operator new(0x18uLL);
        XlBackup::XlBackup(v4, this);
        break;
      case 0x41:
        v4 = (XlEof *)operator new(0x20uLL);
        XlPane::XlPane((XlPane *)v4, this);
        break;
      case 0x42:
        v4 = (XlEof *)operator new(0x18uLL);
        XlCodePage::XlCodePage(v4, this);
        break;
      case 0x4D:
        v4 = (XlEof *)operator new(0x20uLL);
        XlPls::XlPls(v4, this);
        break;
      case 0x50:
        v4 = (XlEof *)operator new(0x18uLL);
        XlDCon::XlDCon(v4, this);
        break;
      case 0x51:
        v4 = (XlEof *)operator new(0x28uLL);
        XlDConRef::XlDConRef(v4, this);
        break;
      case 0x52:
        v4 = (XlEof *)operator new(0x30uLL);
        XlDConName::XlDConName(v4, this);
        break;
      case 0x55:
        v4 = (XlEof *)operator new(0x18uLL);
        XlDefColWidth::XlDefColWidth(v4, this);
        break;
      case 0x59:
        v4 = (XlEof *)operator new(0x18uLL);
        XlXct::XlXct(v4, this);
        break;
      case 0x5A:
        v4 = (XlEof *)operator new(0x30uLL);
        XlCrn::XlCrn(v4, this);
        break;
      case 0x5B:
        v4 = (XlEof *)operator new(0x20uLL);
        XlFileSharing::XlFileSharing(v4, this);
        break;
      case 0x5C:
        v4 = (XlEof *)operator new(0x18uLL);
        XlWriteAccess::XlWriteAccess(v4, this);
        break;
      case 0x5D:
        v4 = (XlEof *)operator new(0x40uLL);
        XlObjBiff8::XlObjBiff8(v4, this);
        break;
      case 0x5E:
        v4 = (XlEof *)operator new(0x10uLL);
        XlUnCalced::XlUnCalced(v4, this);
        break;
      case 0x5F:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSaveRecalc::XlSaveRecalc(v4, this);
        break;
      case 0x60:
        v4 = (XlEof *)operator new(0x10uLL);
        XlTemplate::XlTemplate(v4, this);
        break;
      case 0x63:
        v4 = (XlEof *)operator new(0x18uLL);
        XlObjProtect::XlObjProtect(v4, this);
        break;
      case 0x7D:
        v4 = (XlEof *)operator new(0x20uLL);
        XlColInfo::XlColInfo(v4, this);
        break;
      case 0x7F:
      case 0xE9:
        v4 = (XlEof *)operator new(0x28uLL);
        XlImData::XlImData(v4, this);
        break;
      case 0x80:
        v4 = (XlEof *)operator new(0x18uLL);
        XlGuts::XlGuts(v4, this);
        break;
      case 0x81:
        v4 = (XlEof *)operator new(0x20uLL);
        XlWsBool::XlWsBool(v4, this);
        break;
      case 0x82:
        v4 = (XlEof *)operator new(0x18uLL);
        XlGridSet::XlGridSet(v4, this);
        break;
      case 0x83:
        v4 = (XlEof *)operator new(0x18uLL);
        XlHCenter::XlHCenter(v4, this);
        break;
      case 0x84:
        v4 = (XlEof *)operator new(0x18uLL);
        XlVCenter::XlVCenter(v4, this);
        break;
      case 0x85:
        v4 = (XlEof *)operator new(0x28uLL);
        XlBoundSheet::XlBoundSheet(v4, this);
        break;
      case 0x86:
        v4 = (XlEof *)operator new(0x10uLL);
        XlWriteProt::XlWriteProt(v4, this);
        break;
      case 0x87:
        v4 = (XlEof *)operator new(0x10uLL);
        XlAddIn::XlAddIn(v4, this);
        break;
      case 0x88:
        v4 = (XlEof *)operator new(0x18uLL);
        XlEdg::XlEdg(v4, this);
        break;
      case 0x89:
        v4 = (XlEof *)operator new(0x38uLL);
        XlPub::XlPub(v4, this);
        break;
      case 0x8C:
        v4 = (XlEof *)operator new(0x18uLL);
        XlCountry::XlCountry(v4, this);
        break;
      case 0x8D:
        v4 = (XlEof *)operator new(0x18uLL);
        XlHideObj::XlHideObj(v4, this);
        break;
      case 0x90:
        v4 = (XlEof *)operator new(0x38uLL);
        XlSort::XlSort(v4, this);
        break;
      case 0x91:
        v4 = (XlEof *)operator new(0x38uLL);
        XlSub::XlSub(v4, this);
        break;
      case 0x92:
        v4 = (XlEof *)operator new(0x20uLL);
        XlPalette::XlPalette(v4, this);
        break;
      case 0x96:
        v4 = (XlEof *)operator new(0x28uLL);
        XlSound::XlSound(v4, this);
        break;
      case 0x98:
        v4 = (XlEof *)operator new(0x28uLL);
        XlLpr::XlLpr(v4, this);
        break;
      case 0x99:
        v4 = (XlEof *)operator new(0x18uLL);
        XlStandardWidth::XlStandardWidth(v4, this);
        break;
      case 0x9A:
        v4 = (XlEof *)operator new(0x18uLL);
        XlFnGroupName::XlFnGroupName(v4, this);
        break;
      case 0x9B:
        v4 = (XlEof *)operator new(0x10uLL);
        XlFilterMode::XlFilterMode(v4, this);
        break;
      case 0x9C:
        v4 = (XlEof *)operator new(0x18uLL);
        XlFnGroupCount::XlFnGroupCount(v4, this);
        break;
      case 0x9D:
        v4 = (XlEof *)operator new(0x18uLL);
        XlAutoFilterInfo::XlAutoFilterInfo(v4, this);
        break;
      case 0x9E:
        v4 = (XlEof *)operator new(0x38uLL);
        XlAutoFilter::XlAutoFilter(v4, this);
        break;
      case 0xA0:
        v4 = (XlEof *)operator new(0x18uLL);
        XlScl::XlScl((XlScl *)v4, this);
        break;
      case 0xA1:
        v4 = (XlEof *)operator new(0x40uLL);
        XlSetup::XlSetup(v4, this);
        break;
      case 0xA9:
        v4 = (XlEof *)operator new(0x28uLL);
        XlCoordList::XlCoordList(v4, this);
        break;
      case 0xAB:
        v4 = (XlEof *)operator new(0x20uLL);
        XlGcw::XlGcw(v4, this);
        break;
      case 0xAE:
        v4 = (XlEof *)operator new(0x30uLL);
        XlScenMan::XlScenMan(v4, this);
        break;
      case 0xAF:
        v4 = (XlEof *)operator new(0x78uLL);
        XlScenario::XlScenario(v4, this);
        break;
      case 0xB0:
        v4 = (XlEof *)operator new(0x58uLL);
        XlSxView::XlSxView(v4, this);
        break;
      case 0xB1:
        v4 = (XlEof *)operator new(0x30uLL);
        XlSxVd::XlSxVd(v4, this);
        break;
      case 0xB2:
        v4 = (XlEof *)operator new(0x28uLL);
        XlSxVi::XlSxVi(v4, this);
        break;
      case 0xB4:
        v4 = (XlEof *)operator new(0x20uLL);
        XlSxIVd::XlSxIVd(v4, this);
        break;
      case 0xB5:
        v4 = (XlEof *)operator new(0x30uLL);
        XlSxLi::XlSxLi(v4, this);
        break;
      case 0xB8:
        v4 = (XlEof *)operator new(0x68uLL);
        XlDocRoute::XlDocRoute(v4, this);
        break;
      case 0xB9:
        v4 = (XlEof *)operator new(0x28uLL);
        XlRecipName::XlRecipName(v4, this);
        break;
      case 0xBD:
        v4 = (XlEof *)operator new(0x30uLL);
        XlMulRk::XlMulRk(v4, this);
        break;
      case 0xBE:
        v4 = (XlEof *)operator new(0x28uLL);
        XlMulBlank::XlMulBlank(v4, this);
        break;
      case 0xC1:
        v4 = (XlEof *)operator new(0x18uLL);
        XlMms::XlMms(v4, this);
        break;
      case 0xC2:
        v4 = (XlEof *)operator new(0x40uLL);
        XlAddMenu::XlAddMenu(v4, this);
        break;
      case 0xC3:
        v4 = (XlEof *)operator new(0x20uLL);
        XlDelMenu::XlDelMenu(v4, this);
        break;
      case 0xC5:
        v4 = (XlEof *)operator new(0x30uLL);
        XlSxDI::XlSxDI(v4, this);
        break;
      case 0xC6:
        v4 = (XlEof *)operator new(0x38uLL);
        XlSxDB::XlSxDB(v4, this);
        break;
      case 0xCD:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxString::XlSxString(v4, this);
        break;
      case 0xD0:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxTbl::XlSxTbl(v4, this);
        break;
      case 0xD1:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxTbRgiItm::XlSxTbRgiItm(v4, this);
        break;
      case 0xD2:
        v4 = (XlEof *)operator new(0x20uLL);
        XlSxTbPg::XlSxTbPg(v4, this);
        break;
      case 0xD3:
        v4 = (XlEof *)operator new(0x20uLL);
        XlObjProj::XlObjProj(v4, this);
        break;
      case 0xD5:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxIDStm::XlSxIDStm(v4, this);
        break;
      case 0xD6:
        v4 = (XlEof *)operator new(0x38uLL);
        XlRString::XlRString(v4, this);
        break;
      case 0xD7:
        v4 = (XlEof *)operator new(0x20uLL);
        XlDbCell::XlDbCell(v4, this);
        break;
      case 0xDA:
        v4 = (XlEof *)operator new(0x18uLL);
        XlBookBool::XlBookBool(v4, this);
        break;
      case 0xDB:
        v4 = (XlEof *)operator new(0x28uLL);
        XlParamQry::XlParamQry(v4, this);
        break;
      case 0xDC:
        v4 = (XlEof *)operator new(0x98uLL);
        XlSxExt::XlSxExt(v4, this);
        break;
      case 0xDD:
        v4 = (XlEof *)operator new(0x18uLL);
        XlScenProtect::XlScenProtect(v4, this);
        break;
      case 0xDE:
        v4 = (XlEof *)operator new(0x18uLL);
        XlOleSize::XlOleSize(v4, this);
        break;
      case 0xE0:
        goto LABEL_40;
      case 0xE1:
        v4 = (XlEof *)operator new(0x18uLL);
        XlInterfaceHdr::XlInterfaceHdr(v4, this);
        break;
      case 0xE2:
        v4 = (XlEof *)operator new(0x10uLL);
        XlInterfaceEnd::XlInterfaceEnd(v4, this);
        break;
      case 0xE3:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxVs::XlSxVs(v4, this);
        break;
      case 0xE5:
        v4 = (XlEof *)operator new(0x30uLL);
        XlMerge::XlMerge(v4, this);
        break;
      case 0xEA:
        v4 = (XlEof *)operator new(0x18uLL);
        XlTabIdConf::XlTabIdConf(v4, this);
        break;
      case 0xEB:
        v4 = (XlEof *)operator new(0x20uLL);
        XlMsoDrawingGroup::XlMsoDrawingGroup(v4, this);
        break;
      case 0xEC:
        v4 = (XlEof *)operator new(0x20uLL);
        XlMsoDrawing::XlMsoDrawing(v4, this);
        break;
      case 0xED:
        v4 = (XlEof *)operator new(0x20uLL);
        XlMsoDrawingSelection::XlMsoDrawingSelection(v4, this);
        break;
      case 0xEF:
        v4 = (XlEof *)operator new(0x40uLL);
        XlRubi::XlRubi(v4, this);
        break;
      case 0xF0:
        v4 = (XlEof *)operator new(0x20uLL);
        XlSxRule::XlSxRule(v4, this);
        break;
      case 0xF1:
        v4 = (XlEof *)operator new(0x60uLL);
        XlSxEx::XlSxEx(v4, this);
        break;
      case 0xF2:
        v4 = (XlEof *)operator new(0x28uLL);
        XlSxFilt::XlSxFilt(v4, this);
        break;
      case 0xF6:
        v4 = (XlEof *)operator new(0x20uLL);
        XlSxName::XlSxName(v4, this);
        break;
      case 0xF7:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxSelect::XlSxSelect(v4, this);
        break;
      case 0xF8:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxPair::XlSxPair(v4, this);
        break;
      case 0xF9:
        v4 = (XlEof *)operator new(0x20uLL);
        XlSxFmla::XlSxFmla(v4, this);
        break;
      case 0xFB:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxFormat::XlSxFormat(v4, this);
        break;
      case 0xFC:
        v4 = (XlEof *)operator new(0x40uLL);
        XlSst::XlSst(v4, this);
        break;
      case 0xFD:
        v4 = (XlEof *)operator new(0x20uLL);
        XlLabelSst::XlLabelSst(v4, this);
        break;
      case 0xFF:
        v4 = (XlEof *)operator new(0x20uLL);
        XlExtSst::XlExtSst(v4, this);
        break;
      case 0x100:
        v4 = (XlEof *)operator new(0x28uLL);
        XlSxVdEx::XlSxVdEx(v4, this);
        break;
      case 0x103:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxFormula::XlSxFormula(v4, this);
        break;
      case 0x122:
        v4 = (XlEof *)operator new(0x20uLL);
        XlSxDBEx::XlSxDBEx(v4, this);
        break;
      case 0x13D:
        v4 = (XlEof *)operator new(0x20uLL);
        XlTabId::XlTabId(v4, this);
        break;
      case 0x15F:
        v4 = (XlEof *)operator new(0x48uLL);
        XlLabelRanges::XlLabelRanges(v4, this);
        break;
      case 0x160:
        v4 = (XlEof *)operator new(0x18uLL);
        XlUsesElfs::XlUsesElfs(v4, this);
        break;
      case 0x161:
        v4 = (XlEof *)operator new(0x18uLL);
        XlDsf::XlDsf(v4, this);
        break;
      case 0x162:
        v4 = (XlEof *)operator new(0x10uLL);
        XlModify::XlModify(v4, this);
        break;
      default:
        goto LABEL_217;
    }
    return v4;
  }
  if (var1 <= 544)
  {
    switch(this->var1)
    {
      case 0x1A5:
        v4 = (XlEof *)operator new(0x20uLL);
        XlFileSharing2::XlFileSharing2(v4, this);
        break;
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1AC:
      case 0x1B3:
      case 0x1B4:
      case 0x1B9:
      case 0x1BD:
      case 0x1BF:
        goto LABEL_217;
      case 0x1A9:
        v4 = (XlEof *)operator new(0x50uLL);
        XlUserBView::XlUserBView(v4, this);
        break;
      case 0x1AA:
        v4 = (XlEof *)operator new(0x60uLL);
        XlUsersViewBegin::XlUsersViewBegin(v4, this);
        break;
      case 0x1AB:
        v4 = (XlEof *)operator new(0x18uLL);
        XlUsersViewEnd::XlUsersViewEnd(v4, this);
        break;
      case 0x1AD:
        v4 = (XlEof *)operator new(0x28uLL);
        XlQsi::XlQsi(v4, this);
        break;
      case 0x1AE:
        v4 = (XlEof *)operator new(0x38uLL);
        XlSupBook::XlSupBook(v4, this);
        break;
      case 0x1AF:
        v4 = (XlEof *)operator new(0x18uLL);
        XlProt4Rev::XlProt4Rev(v4, this);
        break;
      case 0x1B0:
        v4 = (XlEof *)operator new(0x38uLL);
        XlCondFmt::XlCondFmt(v4, this);
        break;
      case 0x1B1:
        v4 = (XlEof *)operator new(0x38uLL);
        XlCf::XlCf((XlCf *)v4, this);
        break;
      case 0x1B2:
        v4 = (XlEof *)operator new(0x28uLL);
        XlDVal::XlDVal(v4, this);
        break;
      case 0x1B5:
        v4 = (XlEof *)operator new(0x30uLL);
        XlDConBin::XlDConBin(v4, this);
        break;
      case 0x1B6:
        v4 = (XlEof *)operator new(0x38uLL);
        XlTxo::XlTxo(v4, this);
        break;
      case 0x1B7:
        v4 = (XlEof *)operator new(0x18uLL);
        XlRefreshAll::XlRefreshAll(v4, this);
        break;
      case 0x1B8:
        v4 = (XlEof *)operator new(0x50uLL);
        XlHLink::XlHLink((XlHLink *)v4, this);
        break;
      case 0x1BA:
        v4 = (XlEof *)operator new(0x18uLL);
        XlCodeName::XlCodeName(v4, this);
        break;
      case 0x1BB:
        v4 = (XlEof *)operator new(0x18uLL);
        XlSxFDBType::XlSxFDBType(v4, this);
        break;
      case 0x1BC:
        v4 = (XlEof *)operator new(0x18uLL);
        XlProt4RevPass::XlProt4RevPass(v4, this);
        break;
      case 0x1BE:
        v4 = (XlEof *)operator new(0x70uLL);
        XlDV::XlDV(v4, this);
        break;
      case 0x1C0:
        v4 = (XlEof *)operator new(0x10uLL);
        XlExcel9::XlExcel9(v4, this);
        break;
      case 0x1C1:
        v4 = (XlEof *)operator new(0x18uLL);
        XlRecalcID::XlRecalcID(v4, this);
        break;
      default:
        switch(this->var1)
        {
          case 0x200:
            v4 = (XlEof *)operator new(0x20uLL);
            XlDimensions::XlDimensions(v4, this);
            break;
          case 0x201:
            v4 = (XlEof *)operator new(0x18uLL);
            XlBlank::XlBlank(v4, this);
            break;
          case 0x203:
LABEL_47:
            v4 = (XlEof *)operator new(0x20uLL);
            XlNumberFP::XlNumberFP(v4, this);
            break;
          case 0x204:
LABEL_48:
            v4 = (XlEof *)operator new(0x20uLL);
            XlLabel::XlLabel(v4, this);
            break;
          case 0x205:
            v4 = (XlEof *)operator new(0x18uLL);
            XlBoolErr::XlBoolErr(v4, this);
            break;
          case 0x207:
LABEL_49:
            v4 = (XlEof *)operator new(0x18uLL);
            XlFmlaString::XlFmlaString(v4, this);
            break;
          case 0x208:
            v4 = (XlEof *)operator new(0x28uLL);
            XlRow::XlRow(v4, this);
            break;
          case 0x209:
            goto LABEL_41;
          case 0x20B:
            v4 = (XlEof *)operator new(0x28uLL);
            XlIndex::XlIndex(v4, this);
            break;
          default:
            goto LABEL_217;
        }
        break;
    }
    return v4;
  }
  if (var1 <= 1211)
  {
    if (var1 <= 637)
    {
      if (var1 > 560)
      {
        switch(var1)
        {
          case 561:
LABEL_46:
            v4 = (XlEof *)operator new(0x38uLL);
            XlFont::XlFont((XlFont *)v4, this);
            return v4;
          case 566:
            v4 = (XlEof *)operator new(0x28uLL);
            XlTable::XlTable((XlTable *)v4, this);
            return v4;
          case 574:
LABEL_32:
            v4 = (XlEof *)operator new(0x28uLL);
            XlWindow2::XlWindow2((XlWindow2 *)v4, this);
            return v4;
        }
      }
      else
      {
        switch(var1)
        {
          case 545:
            v4 = (XlEof *)operator new(0x30uLL);
            XlArray::XlArray((XlArray *)v4, this);
            return v4;
          case 547:
LABEL_45:
            v4 = (XlEof *)operator new(0x58uLL);
            XlExternName::XlExternName(v4, this);
            return v4;
          case 549:
LABEL_13:
            v4 = (XlEof *)operator new(0x18uLL);
            XlDefaultRowHeight::XlDefaultRowHeight(v4, this);
            return v4;
        }
      }
LABEL_217:
      v4 = (XlEof *)operator new(0x28uLL);
      XlGenericRecord::XlGenericRecord(v4, this);
      return v4;
    }
    if (var1 <= 1032)
    {
      switch(var1)
      {
        case 638:
          v4 = (XlEof *)operator new(0x20uLL);
          XlRk::XlRk(v4, this);
          return v4;
        case 659:
          v4 = (XlEof *)operator new(0x28uLL);
          XlStyle::XlStyle(v4, this);
          return v4;
        case 1030:
LABEL_24:
          v4 = (XlEof *)operator new(0x38uLL);
          XlFormula::XlFormula(v4, this);
          return v4;
      }
      goto LABEL_217;
    }
    if (var1 != 1033)
    {
      if (var1 == 1054)
      {
        v4 = (XlEof *)operator new(0x20uLL);
        XlFormat::XlFormat((XlFormat *)v4, this);
        return v4;
      }
      if (var1 == 1091)
      {
LABEL_40:
        v4 = (XlEof *)operator new(0x60uLL);
        XlXf::XlXf((XlXf *)v4, this);
        return v4;
      }
      goto LABEL_217;
    }
LABEL_41:
    v4 = (XlEof *)operator new(0x28uLL);
    XlBof::XlBof(v4, this);
    return v4;
  }
  if (var1 > 2161)
  {
    if (var1 > 2197)
    {
      if (var1 == 2198)
      {
        v4 = (XlEof *)operator new(0x20uLL);
        XlTheme::XlTheme(v4, this);
        return v4;
      }
      if (var1 == 4188)
      {
        v4 = (XlEof *)operator new(0x20uLL);
        XlPaletteX::XlPaletteX(v4, this);
        return v4;
      }
    }
    else
    {
      if (var1 == 2162)
      {
        v4 = (XlEof *)operator new(0x108uLL);
        XlList::XlList(v4, this);
        return v4;
      }
      if (var1 == 2175)
      {
        v4 = (XlEof *)operator new(0x20uLL);
        XlContinueFrt12::XlContinueFrt12(v4, this);
        return v4;
      }
    }
    goto LABEL_217;
  }
  if (var1 <= 2145)
  {
    if (var1 == 1212)
    {
      v4 = (XlEof *)operator new(0x28uLL);
      XlShrFmla::XlShrFmla((XlShrFmla *)v4, this);
      return v4;
    }
    if (var1 == 2048)
    {
      v4 = (XlEof *)operator new(0x20uLL);
      XlHLinkToolTip::XlHLinkToolTip((XlHLinkToolTip *)v4, this);
      return v4;
    }
    if (var1 != 2057)
      goto LABEL_217;
    goto LABEL_41;
  }
  switch(this->var1)
  {
    case 0x862:
      v4 = (XlEof *)operator new(0x18uLL);
      XlSheetTab::XlSheetTab(v4, this);
      break;
    case 0x866:
      v4 = (XlEof *)operator new(0x28uLL);
      XlHdrFooterDrawing::XlHdrFooterDrawing(v4, this);
      break;
    case 0x867:
      v4 = (XlEof *)operator new(0x20uLL);
      XlSheetProtection::XlSheetProtection(v4, this);
      break;
    case 0x868:
      v4 = (XlEof *)operator new(0x48uLL);
      XlRangeProtection::XlRangeProtection(v4, this);
      break;
    default:
      goto LABEL_217;
  }
  return v4;
}

{
  int var1;
  XlRevisionUserView *v4;

  if ((_DWORD)a2 != 2)
    return XlRecordFactory::createRecord(this, a2);
  var1 = this->var1;
  if (var1 > 403)
  {
    if (var1 > 405)
    {
      if (var1 == 428)
      {
        v4 = (XlRevisionUserView *)operator new(0x20uLL);
        XlRevisionUserView::XlRevisionUserView(v4, this);
      }
      else if (var1 == 406)
      {
        v4 = (XlRevisionUserView *)operator new(0x38uLL);
        XlRevisionInfo::XlRevisionInfo(v4, this);
      }
      else
      {
LABEL_14:
        v4 = (XlRevisionUserView *)operator new(0x20uLL);
        XlRevisionLogEntry::XlRevisionLogEntry(v4, this);
      }
    }
    else if (var1 == 404)
    {
      v4 = (XlRevisionUserView *)operator new(0x28uLL);
      XlRevisionExclusive::XlRevisionExclusive(v4, this);
    }
    else
    {
      v4 = (XlRevisionUserView *)operator new(0x20uLL);
      XlRevisionFileLock::XlRevisionFileLock(v4, this);
    }
  }
  else
  {
    switch(this->var1)
    {
      case 0x136:
        v4 = (XlRevisionUserView *)operator new(0x18uLL);
        XlRevisionVersionNumber::XlRevisionVersionNumber(v4, this);
        break;
      case 0x137:
        v4 = (XlRevisionUserView *)operator new(0x28uLL);
        XlRevisionInsertDelete::XlRevisionInsertDelete(v4, this);
        break;
      case 0x138:
        v4 = (XlRevisionUserView *)operator new(0x40uLL);
        XlRevisionHeader::XlRevisionHeader(v4, this);
        break;
      case 0x139:
      case 0x13A:
      case 0x13C:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
        goto LABEL_14;
      case 0x13B:
        v4 = (XlRevisionUserView *)operator new(0x78uLL);
        XlRevisionChangeCell::XlRevisionChangeCell(v4, this);
        break;
      case 0x13D:
        v4 = (XlRevisionUserView *)operator new(0x20uLL);
        XlRevisionTabId::XlRevisionTabId(v4, this);
        break;
      case 0x13E:
        v4 = (XlRevisionUserView *)operator new(0x28uLL);
        XlRevisionRenameSheet::XlRevisionRenameSheet(v4, this);
        break;
      case 0x13F:
        v4 = (XlRevisionUserView *)operator new(0x38uLL);
        XlRevisionSort::XlRevisionSort(v4, this);
        break;
      case 0x140:
        v4 = (XlRevisionUserView *)operator new(0x30uLL);
        XlRevisionMove::XlRevisionMove(v4, this);
        break;
      case 0x141:
        v4 = (XlRevisionUserView *)operator new(0x20uLL);
        XlRevisionCopy::XlRevisionCopy(v4, this);
        break;
      case 0x14A:
        v4 = (XlRevisionUserView *)operator new(0x38uLL);
        XlRevisionFormat::XlRevisionFormat(v4, this);
        break;
      case 0x14B:
        v4 = (XlRevisionUserView *)operator new(0x28uLL);
        XlRevisionAutoFmt::XlRevisionAutoFmt(v4, this);
        break;
      case 0x14C:
        v4 = (XlRevisionUserView *)operator new(0x28uLL);
        XlRevisionDeleteShape::XlRevisionDeleteShape(v4, this);
        break;
      case 0x14D:
        v4 = (XlRevisionUserView *)operator new(0x28uLL);
        XlRevisionInsertShape::XlRevisionInsertShape(v4, this);
        break;
      case 0x14E:
        v4 = (XlRevisionUserView *)operator new(0x10uLL);
        XlRevisionMoveBegin::XlRevisionMoveBegin(v4, this);
        break;
      case 0x14F:
        v4 = (XlRevisionUserView *)operator new(0x10uLL);
        XlRevisionMoveEnd::XlRevisionMoveEnd(v4, this);
        break;
      case 0x150:
        v4 = (XlRevisionUserView *)operator new(0x10uLL);
        XlRevisionInsertDeleteBegin::XlRevisionInsertDeleteBegin(v4, this);
        break;
      case 0x151:
        v4 = (XlRevisionUserView *)operator new(0x10uLL);
        XlRevisionInsertDeleteEnd::XlRevisionInsertDeleteEnd(v4, this);
        break;
      case 0x152:
        v4 = (XlRevisionUserView *)operator new(0x18uLL);
        XlRevisionConflict::XlRevisionConflict(v4, this);
        break;
      case 0x153:
        v4 = (XlRevisionUserView *)operator new(0x88uLL);
        XlRevisionDefineName::XlRevisionDefineName(v4, this);
        break;
      default:
        if (var1 != 28)
          goto LABEL_14;
        v4 = (XlRevisionUserView *)operator new(0x40uLL);
        XlRevisionNote::XlRevisionNote(v4, this);
        break;
    }
  }
  return v4;
}

void sub_22A1DA5D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlUsersViewBegin::XlUsersViewBegin(XlUsersViewBegin *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEAF0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 46) = 0u;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 88) = 0;
}

uint64_t XlUsersViewBegin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1328))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlUsersViewBegin *a2)
{
  XlRef *v4;
  int16x8_t v5;
  unsigned int v6;
  uint32x4_t v7;
  int16x8_t v8;
  int v10;

  v10 = 16;
  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_QWORD *)this + 3) = operator new[](0x10uLL);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
  XlUsersViewBegin::setGuid(a2, *((unsigned __int8 **)this + 3));
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v5 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 40) = v6 & 1;
  v5.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 41) = vmovn_s16(v5).u32[0];
  *((_BYTE *)a2 + 45) = (v6 & 0x20) != 0;
  *((_BYTE *)a2 + 46) = (v6 & 0x40) != 0;
  *((_BYTE *)a2 + 47) = (v6 & 0x80) != 0;
  v7 = (uint32x4_t)vdupq_n_s32(v6);
  *((int8x8_t *)a2 + 6) = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(v7, (uint32x4_t)xmmword_22A4C0690), (int16x8_t)vshlq_u32(v7, (uint32x4_t)xmmword_22A4C40A0))), (int8x8_t)0x101010101010101);
  *((_BYTE *)a2 + 56) = (v6 & 0x40000) != 0;
  *((_BYTE *)a2 + 57) = (v6 & 0x180000) != 0;
  v8 = (int16x8_t)vshlq_u32(v7, (uint32x4_t)xmmword_22A4C40B0);
  *(int8x8_t *)v8.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v8), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)a2 + 58) = vmovn_s16(v8).u32[0];
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlUsersViewBegin::setTopLeftPaneArea(a2, v4);
  *((double *)a2 + 9) = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  *((double *)a2 + 10) = (*(double (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 44) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1DAB4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlUsersViewBegin::setGuid(XlUsersViewBegin *this, unsigned __int8 *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 2) = a2;
  return result;
}

uint64_t XlUsersViewBegin::setTopLeftPaneArea(XlUsersViewBegin *this, XlRef *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = MEMORY[0x22E2DD408](result, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 8) = a2;
  return result;
}

uint64_t XlSelection::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 384))(a2, a1);
}

uint64_t XlHdr::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 728))(a2, a1);
}

uint64_t XlFooter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 688))(a2, a1);
}

uint64_t XlHCenter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 720))(a2, a1);
}

uint64_t XlVCenter::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1352))(a2, a1);
}

void XlPls::XlPls(XlPls *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD250;
  *(_DWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 24) = 0;
}

uint64_t XlPls::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 864))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPls *a2)
{
  size_t v4;
  void *v5;
  unsigned __int16 v7[2];

  *(_DWORD *)v7 = *((_DWORD *)a2 + 2) - 2;
  v4 = *(unsigned int *)v7;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2)) & 1;
  if ((_DWORD)v4)
  {
    v5 = operator new[](v4);
    *((_QWORD *)this + 3) = v5;
    (*(void (**)(_QWORD, void *, unsigned __int16 *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v5, v7);
    XlPls::setRgb(a2, *((unsigned __int8 **)this + 3), v7[0]);
    *((_QWORD *)this + 3) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlPls::setRgb(XlPls *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 3) = a2;
  *((_WORD *)this + 10) = a3;
  return result;
}

uint64_t XlSetup::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1016))(a2, a1);
}

void XlUsersViewEnd::XlUsersViewEnd(XlUsersViewEnd *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEB30;
  *(_BYTE *)(v2 + 16) = 0;
}

uint64_t XlUsersViewEnd::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1336))(a2, a1);
}

void XlCustomView::~XlCustomView(void **this)
{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
  JUMPOUT(0x22E2DD408);
}

{
  *this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 1);
}

void XlUsersViewEnd::~XlUsersViewEnd(XlUsersViewEnd *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlPls::~XlPls(XlPls *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AD250;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 10) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AD250;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 10) = 0;
}

void XlVCenter::~XlVCenter(XlVCenter *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlHCenter::~XlHCenter(XlHCenter *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlUsersViewBegin::~XlUsersViewBegin(XlUsersViewBegin *this)
{
  XlUsersViewBegin::~XlUsersViewBegin(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AEAF0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 8);
  if (v3)
    MEMORY[0x22E2DD408](v3, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 8) = 0;
}

void XlEshGroup::~XlEshGroup(XlEshGroup *this)
{
  XlEshGroup::~XlEshGroup(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AF470;
  *((_QWORD *)this + 34) = &unk_24F3AF520;
  v2 = *((_QWORD *)this + 46);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 46) = 0;
  v3 = *((_QWORD *)this + 47);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 47) = 0;
  EshGroup::~EshGroup(this);
}

void XlEshShape::~XlEshShape(XlEshShape *this)
{
  *(_QWORD *)this = &off_24F3AF640;
  *((_QWORD *)this + 52) = &unk_24F3AF710;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3AF640;
  *((_QWORD *)this + 52) = &unk_24F3AF710;
  XlEshShape::cleanup(this);
  EshContentBase::~EshContentBase(this);
}

void XlEshClientAnchor::~XlEshClientAnchor(XlEshClientAnchor *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlEshClientData::~XlEshClientData(XlEshClientData *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1DB338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_22A1DB3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DB6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1DB870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1DBAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1DBD2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DBE00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DBE74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::seek(SsrwOOStream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (XlReadStgStream::getStreamLocation((XlReadStgStream *)a1) != (_DWORD)a2)
  {
    (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))a1[5]->var0 + 2))(a1[5], a2, 0);
    XlReadStgStream::start((XlReadStgStream *)a1, a1[5]);
  }
  return ((uint64_t (*)(SsrwOOStream **, uint64_t, uint64_t))(*a1)[2].var0)(a1, a3, a4);
}

uint64_t XlReadStgStream::readNextHostRecordHeader(XlReadStgStream *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  __int16 v11;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  v3 = v2;
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7) - (_QWORD)v4;
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    v6 = (v5 >> 2);
    while (1)
    {
      v8 = *v4++;
      v7 = v8;
      if (v2 <= v8)
        break;
      if (!--v6)
        goto LABEL_7;
    }
    v3 = v7;
  }
LABEL_7:
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v3, 0);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  v11 = result;
  if (v9 == 2150)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), 14, 1);
    v11 -= 14;
  }
  *((_WORD *)this + 6) = v11;
  return result;
}

void XlBottomMargin::XlBottomMargin(XlBottomMargin *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AB920;
  v2[2] = 0;
}

CGColorRef TSUCGColorCreateDeviceRGB(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x24BDAC8D0];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  if (TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce != -1)
    dispatch_once(&TSUDeviceRGBColorSpace_sDeviceRGBDispatchOnce, &__block_literal_global_9);
  return CGColorCreate((CGColorSpaceRef)TSUDeviceRGBColorSpace_sDeviceRGBColorSpace, components);
}

void sub_22A1DC1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1DC268(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::processNextStreamChunk(XlReadStgStream *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  void (*i)(void);
  int v28;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7) - v3;
  if ((v4 & 0x3FFFFFFFCLL) == 0 || !*((_DWORD *)this + 2))
    return 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 16))(v2, *(unsigned int *)(v3 + 4 * ((v4 >> 2) - 1)), 0);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v6, 1);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
  if (v7 == 60)
    goto LABEL_7;
  v9 = v8;
  if (v7 == 236 && v5 == 236)
    goto LABEL_7;
  if (v7 == 93)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), 4, 1);
    v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), (v9 - 6), 1);
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
    v21 = v20;
    if (v19 == 5)
    {
      if (v13 != 2057)
      {
        do
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v21, 1);
          v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
          v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
        }
        while (v22 != 2057);
      }
      v23 = *((_QWORD *)this + 5);
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, 1);
        v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
        v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
        if (v24 == 10)
          break;
        v23 = *((_QWORD *)this + 5);
        v21 = (unsigned __int16)v15;
      }
      goto LABEL_18;
    }
    if (v19 == 8 && v13 == 127)
    {
      v25 = v20 - 8;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), 4, 1);
      v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 104))(*((_QWORD *)this + 5));
      for (i = *(void (**)(void))(**((_QWORD **)this + 5) + 16); ; i = *(void (**)(void))(**((_QWORD **)this + 5)
                                                                                           + 16))
      {
        i();
        v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
        v28 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
        if (v13 != 127 && (unsigned __int16)v13 != 60)
          break;
        v25 += v28;
        if (v25 > v26)
          break;
      }
    }
  }
  else
  {
    if ((unsigned __int16)v7 != 438)
      return 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), 10, 1);
    v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), (v9 - 12), 1);
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
    if (v12 >= 1)
    {
      LODWORD(v15) = v14;
      do
      {
        v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5));
        v17 = (unsigned __int16)v15;
        if ((_WORD)v15)
          v17 = (unsigned __int16)v15 - 1;
        v18 = v12 - (v17 >> 1);
        if (v16)
          v12 = v18;
        else
          v12 = v12 - v15 + 1;
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), (unsigned __int16)v15 - 1, 1);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
        v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
      }
      while ((__int16)v12 > 0);
LABEL_18:
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v15, 1);
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
      (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 80))(*((_QWORD *)this + 5));
    }
  }
  if (v13 == 236 || (unsigned __int16)v13 == 60)
  {
LABEL_7:
    v10 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5)) - 4;
    return XlReadStgStream::mapStreamChunk(this, v10);
  }
  return 0;
}

uint64_t EshStroke::getEndArrow(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D1u);
}

uint64_t EshTextBox::isAutoInsetSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0xBCu);
}

uint64_t EshTextBox::getAutoInset(EshTextBox *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0xBCu);
}

double EshTextBox::setInsetLeft(EshTextBox *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x81u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setInsetRight(EshTextBox *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x83u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setInsetTop(EshTextBox *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x82u, 2, &v4).n128_u64[0];
  return result;
}

double EshTextBox::setInsetBottom(EshTextBox *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x84u, 2, &v4).n128_u64[0];
  return result;
}

void sub_22A1DCBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_22A1DCD38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1DD1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_22A1DD4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A1DD834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DDA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DDB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1DE090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DE184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1DE3E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlLeftMargin::XlLeftMargin(XlLeftMargin *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ACBE0;
  v2[2] = 0;
}

void XlRightMargin::XlRightMargin(XlRightMargin *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ADC78;
  v2[2] = 0;
}

uint64_t XlBinaryReader::processFormula(XlBinaryReader *this, XlCell *a2, XlHeader *a3)
{
  void *v6;
  void *v7;
  int v8;
  double NumberResult;
  unsigned int ErrorResult;
  BOOL BooleanResult;
  char v12;
  unsigned __int8 *v13;
  int v14;
  XlArray *v15;
  XlTable *v16;
  XlChartPicF *v17;
  XlShrFmla *v18;
  XlTable *v19;
  _DWORD *exception;
  XlHeader v22;

  v6 = operator new(0x38uLL);
  XlFormula::XlFormula((XlFormula *)v6, a3);
  v7 = operator new(0x48uLL);
  XlFormulaInfo::XlFormulaInfo((XlFormulaInfo *)v7);
  if (!v6 || !v7)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1001;
  }
  XlHeader::XlHeader(&v22);
  (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 296))(*((_QWORD *)this + 167), v6);
  v8 = *((_DWORD *)v6 + 12);
  switch(v8)
  {
    case 1:
      NumberResult = XlFormula::getNumberResult((XlFormula *)v6);
      XlCell::setNumber(a2, NumberResult);
      break;
    case 2:
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_7;
    case 4:
      BooleanResult = XlFormula::getBooleanResult((XlFormula *)v6);
      XlCell::setBoolean(a2, BooleanResult);
      break;
    case 8:
      XlCell::setBlank(a2);
      break;
    default:
      if (v8 == 16)
      {
        ErrorResult = XlFormula::getErrorResult((XlFormula *)v6);
        XlCell::setError((uint64_t)a2, ErrorResult);
      }
      else
      {
LABEL_7:
        ChLogFunction("wrong result type", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/Reader/XlBinaryReader.cpp", 4079);
      }
      break;
  }
  a2->var3 = *((_WORD *)v6 + 20);
  *(_DWORD *)&a2->var1 = *((_DWORD *)v6 + 9);
  *((_WORD *)v7 + 33) = *((_WORD *)v6 + 22);
  *((_BYTE *)v7 + 64) = *((_BYTE *)v6 + 42);
  if (*((_BYTE *)this + 1032))
    v12 = *((_BYTE *)v6 + 43);
  else
    v12 = 1;
  *((_BYTE *)v7 + 65) = v12;
  v13 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
  if (!v13)
    goto LABEL_33;
  v14 = *v13;
  if (v14 == 1 || v14 == 2)
    *((_DWORD *)v7 + 2) = v14;
  XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
  switch(v22.var1)
  {
    case 0x4BC:
      v18 = (XlShrFmla *)operator new(0x28uLL);
      XlShrFmla::XlShrFmla(v18, &v22);
      *((_QWORD *)this + 163) = v18;
      if (v18)
      XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
      (*(void (**)(_QWORD, XlShrFmla *))(**((_QWORD **)this + 167) + 392))(*((_QWORD *)this + 167), v18);
      XlChartFrameType::takeBorderStyle((XlChartFrameType *)v7, (XlChartLineStyle *)v18);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
      break;
    case 0x236:
      v16 = (XlTable *)operator new(0x28uLL);
      XlTable::XlTable(v16, &v22);
      *((_QWORD *)this + 163) = v16;
      if (v16)
      else
        v17 = 0;
      v19 = (XlTable *)operator new(0x28uLL);
      XlTable::XlTable(v19, &v22);
      XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
      (*(void (**)(_QWORD, XlChartPicF *))(**((_QWORD **)this + 167) + 1288))(*((_QWORD *)this + 167), v17);
      XlChartFrameType::takePictureFormat((XlChartFrameType *)v7, v17);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
      if (v19)
        (*(void (**)(XlTable *))(*(_QWORD *)v19 + 8))(v19);
      break;
    case 0x221:
      v15 = (XlArray *)operator new(0x30uLL);
      XlArray::XlArray(v15, &v22);
      *((_QWORD *)this + 163) = v15;
      if (v15)
      XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
      (*(void (**)(_QWORD, XlArray *))(**((_QWORD **)this + 167) + 184))(*((_QWORD *)this + 167), v15);
      XlChartFrameType::takeAreaFillStyle((XlChartFrameType *)v7, (XlChartFillStyle *)v15);
      *((_QWORD *)this + 163) = 0;
      XlParserVisitor::peekAhead(*((XlParserVisitor **)this + 167), &v22, *((_BYTE *)this + 1320));
      break;
  }
  XlFormulaInfo::takeFormula((XlFormulaInfo *)v7, *((char **)v6 + 2), *((_DWORD *)v6 + 8), *((_WORD *)v6 + 23));
  XlFormula::giveUpFormula((uint64_t)v6);
  XlCell::takeFormulaInfo(a2, (XlFormulaInfo *)v7);
  if (v22.var1 == 519)
  {
    v7 = operator new(0x18uLL);
    XlFmlaString::XlFmlaString((XlFmlaString *)v7, &v22);
    XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
    (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 167) + 272))(*((_QWORD *)this + 167), v7);
    XlCell::takeString(a2, *((XlString **)v7 + 2));
    *((_QWORD *)v7 + 2) = 0;
LABEL_33:
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 8))(v6);
}

void sub_22A1DE90C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  operator delete(v3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void XlFormula::XlFormula(XlFormula *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AC6E0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0xFFFF000000000000;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

void XlFormulaInfo::XlFormulaInfo(XlFormulaInfo *this)
{
  this->var0 = (void **)&off_24F3AF7A0;
  this->var1 = 0;
  this->var2 = 0;
  this->var3 = 0;
  this->var4 = 0;
  this->var5 = -1;
  this->var7 = 0;
  this->var8 = 0;
  this->var6 = 0;
  *(_DWORD *)((char *)&this->var8 + 7) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFormula *a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int DataAndContinues;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  XlFormula::setEncodedResult((const char *)a2, v4 | (unint64_t)(v5 << 32));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 42) = v6 & 1;
  *((_BYTE *)a2 + 43) = (v6 & 2) != 0;
  *((_BYTE *)a2 + 44) = (v6 & 8) != 0;
  *((_BYTE *)a2 + 45) = (v6 & 0x20) != 0;
  if (*((unsigned __int8 *)a2 + 14) < 5u)
  {
    v7 = 18;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
    v7 = 22;
  }
  *((_WORD *)a2 + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v8 = *((_DWORD *)a2 + 2);
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (v9)
  {
    v15 = v10;
    DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v15, -1);
    v12 = *((_DWORD *)this + 18);
    v9 = DataAndContinues >= v12;
    v13 = DataAndContinues - v12;
    if (v9)
      *((_DWORD *)a2 + 2) = v13;
    XlArray::setFormula((XlArray *)a2, *((unsigned __int8 **)this + 3), v15);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

const char *XlFormula::setEncodedResult(const char *this, unint64_t a2)
{
  const char *v2;
  int v3;

  v2 = this;
  *((_QWORD *)this + 3) = a2;
  if (a2 < 0xFFFF000000000000)
  {
    v3 = 1;
  }
  else if ((a2 & 0xFC) != 0)
  {
    v3 = 4;
    this = ChLogFunction("npt a BOOLean", 2, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/Binary/DataModel/XlFormula.cpp", 108);
  }
  else
  {
    v3 = dword_22A4C2CB0[(char)a2];
  }
  *((_DWORD *)v2 + 12) = v3;
  return this;
}

uint64_t XlParserVisitor::getDataAndContinues(XlParserVisitor *this, unsigned int *a2, int a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  _DWORD *exception;
  unsigned int v16;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  LODWORD(v7) = 0;
  v8 = *a2;
  do
  {
    while (1)
    {
      do
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v8, 1);
        v7 = (v8 + v7);
        v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
        v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
        v8 = v10;
      }
      while (v9 == 60);
      if ((unsigned __int16)v9 != 2175)
        break;
      v8 = (v10 - 12);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 12, 1);
    }
  }
  while (v9 == a3);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v6, 0);
  if ((_DWORD)v7)
  {
    *((_QWORD *)this + 3) = operator new[](v7);
    v16 = *a2;
    if (v16 > v7)
    {
LABEL_15:
      exception = __cxa_allocate_exception(4uLL);
      *exception = 3002;
    }
    v11 = 0;
    while (1)
    {
      (*(void (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3) + v11, &v16);
      v11 += v16;
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
      v16 = v13;
      if (v12 != 60)
      {
        if ((unsigned __int16)v12 == 2175)
        {
          v16 = v13 - 12;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 12, 1);
          v13 = v16;
        }
        else if (v12 != a3)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4294967292, 1);
          *a2 = v11;
          return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
        }
      }
      if (__CFADD__(v13, v11) || v13 + v11 > v7)
        goto LABEL_15;
    }
  }
  return v6;
}

uint64_t XlArray::setFormula(XlArray *this, unsigned __int8 *a2, int a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 8) = a3;
  return result;
}

uint64_t XlParserVisitor::peekAhead(XlParserVisitor *this, XlHeader *a2, unsigned __int8 a3)
{
  XlParserVisitor::getHeader(this, a2, a3);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), -*((_DWORD *)this + 22), 1);
}

char *XlFormulaInfo::takeFormula(XlFormulaInfo *this, char *a2, unsigned int a3, signed __int16 a4)
{
  char *result;

  result = this->var3;
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  this->var3 = a2;
  this->var4 = a3;
  this->var5 = a4;
  return result;
}

uint64_t XlFormula::giveUpFormula(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 46) = -1;
  return this;
}

XlCell *XlCell::takeFormulaInfo(XlCell *this, XlFormulaInfo *a2)
{
  XlCell *v3;

  v3 = this;
  if (this->var11)
  {
    this = (XlCell *)this->var8;
    if (this)
      this = (XlCell *)(*((uint64_t (**)(XlCell *))this->var0 + 1))(this);
  }
  v3->var8 = a2;
  v3->var11 = 1;
  return this;
}

void XlFmlaString::XlFmlaString(XlFmlaString *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AC560;
  v2[2] = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlFmlaString *a2)
{
  int v4;
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  char v12;
  XlString *v13;
  int v14;
  _BYTE *v15;
  XlString *v16;
  int v18;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  if (*((unsigned __int8 *)a2 + 14) > 8u)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    v9 = *((_DWORD *)a2 + 2);
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    if (v10)
    {
      v11 = v10;
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
      v13 = (XlString *)operator new(0x68uLL);
      XlString::XlString(v13);
      *((_QWORD *)this + 4) = v13;
      XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v11, v12, v9 + v8, v13);
      XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)a2 + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2))
                          - *((_DWORD *)this + 18);
    }
  }
  else
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = **((_QWORD **)this + 2);
    if (*((_BYTE *)a2 + 14))
    {
      v6 = (*(uint64_t (**)(void))(v5 + 72))();
      v7 = -2;
    }
    else
    {
      v6 = (*(uint64_t (**)(void))(v5 + 64))();
      v7 = -1;
    }
    v14 = v4 + v7;
    v18 = v14;
    if (v14)
    {
      v15 = operator new[]((v14 + 1));
      *((_QWORD *)this + 3) = v15;
      v15[v14] = 0;
      (*(void (**)(_QWORD, _QWORD, int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v18);
    }
    v16 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v16);
    *((_QWORD *)this + 4) = v16;
    XlString::takeString((uint64_t)v16, *((char **)this + 3), v18 + 1, v6, 0);
    *((_QWORD *)this + 3) = 0;
    XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1DF18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlFmlaString::~XlFmlaString(XlFmlaString *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC560;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC560;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
}

void XlFormula::~XlFormula(XlFormula *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC6E0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AC6E0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
}

void XlShrFmla::XlShrFmla(XlShrFmla *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3ADFF8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_QWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlShrFmla *a2)
{
  XlRef *v4;
  int v5;
  int DataAndContinues;
  unsigned int v7;
  _DWORD *exception;
  unsigned int v10;

  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 1);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlRevisionMove::takeDestRef((XlRevisionMove *)a2, v4);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 2, 1);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 14) = v5;
  if (v5 < 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v10 = (unsigned __int16)v5;
  DataAndContinues = XlParserVisitor::getDataAndContinues(this, &v10, -1);
  v7 = v10;
  XlChartGelFrame::setBinaryData((XlChartGelFrame *)a2, *((unsigned __int8 **)this + 3), v10);
  *((_DWORD *)a2 + 6) = v7;
  *((_DWORD *)a2 + 2) = DataAndContinues - *((_DWORD *)this + 18);
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1DF3AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlRevisionMove::takeDestRef(XlRevisionMove *this, XlRef *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = MEMORY[0x22E2DD408](result, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 4) = a2;
  return result;
}

uint64_t XlChartGelFrame::setBinaryData(XlChartGelFrame *this, unsigned __int8 *a2, int a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  return result;
}

XlChartLineStyle *XlChartFrameType::takeBorderStyle(XlChartFrameType *this, XlChartLineStyle *a2)
{
  XlChartLineStyle *result;

  result = this->var9;
  if (result)
    result = (XlChartLineStyle *)(*((uint64_t (**)(XlChartLineStyle *))result->var0 + 1))(result);
  this->var9 = a2;
  return result;
}

double XlFormula::getNumberResult(XlFormula *this)
{
  return *((double *)this + 3);
}

uint64_t XlFormula::getErrorResult(XlFormula *this)
{
  if (*((_DWORD *)this + 12) == 16)
    return *((unsigned __int8 *)this + 26);
  else
    return 255;
}

uint64_t XlCell::setError(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  _DWORD *exception;

  v3 = result;
  *(_BYTE *)(result + 56) = 0;
  *(_DWORD *)(result + 40) = 255;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(result + 57))
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 57) = 0;
  *(_DWORD *)(v3 + 16) = 4;
  *(_DWORD *)(v3 + 40) = a2;
  if (a2 > 0x2A || ((1 << a2) & 0x41020808081) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  return result;
}

void sub_22A1DF7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

char *XlFormulaParser::addPtgString(char *this, XlPtg *a2, int a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  char v11;
  char *v12;
  uint64_t (*v13)(void);
  unsigned int v14;
  _DWORD *exception;
  int v16;

  if (a2)
  {
    v5 = (unsigned __int8 *)this;
    v6 = **(_QWORD **)this;
    if ((a3 & 1) != 0)
    {
      v7 = (*(uint64_t (**)(void))(v6 + 72))();
      if (v7 < 0)
        goto LABEL_27;
      v8 = v7;
      v9 = (unsigned __int16)v7;
      v10 = 2;
    }
    else
    {
      v9 = (*(uint64_t (**)(void))(v6 + 64))();
      v10 = 0;
      v8 = v9;
    }
    if (v5[72] < 9u)
    {
      this = XlPtg::addDataItem(a2, v10 + v9 + 5);
      if (this)
      {
        v12 = this;
        if (a3)
        {
          *this = 2;
          v12 = &this[v10];
        }
        *(_WORD *)v12 = v8;
        *((_WORD *)v12 + 1) = v5[72];
        if (!(v10 + v9))
          goto LABEL_25;
        v13 = *(uint64_t (**)(void))(**(_QWORD **)v5 + 56);
        goto LABEL_18;
      }
    }
    else
    {
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 64))(*(_QWORD *)v5);
      if ((v11 & 1) != 0)
      {
        v14 = v10 + 2 * v9;
        this = XlPtg::addDataItem(a2, v14 + 6);
        if (this)
        {
          v12 = this;
          if (a3)
          {
            *this = 2;
            v12 = &this[v10];
          }
          *(_WORD *)v12 = v8;
          v12[2] = v5[72];
          v12[3] = v11;
          if (v14)
          {
            v16 = v9;
            this = (char *)(*(uint64_t (**)(_QWORD, int *, char *))(**(_QWORD **)v5 + 136))(*(_QWORD *)v5, &v16, v12 + 4);
          }
          v12[2 * v9 + 5] = 0;
          v9 *= 2;
          goto LABEL_25;
        }
      }
      else
      {
        this = XlPtg::addDataItem(a2, v10 + v9 + 5);
        if (this)
        {
          v12 = this;
          if (a3)
          {
            *this = 2;
            v12 = &this[v10];
          }
          *(_WORD *)v12 = v8;
          v12[2] = v5[72];
          v12[3] = v11;
          if (!(v10 + v9))
            goto LABEL_25;
          v13 = *(uint64_t (**)(void))(**(_QWORD **)v5 + 56);
LABEL_18:
          this = (char *)v13();
LABEL_25:
          v12[v9 + 4] = 0;
          return this;
        }
      }
    }
LABEL_27:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  return this;
}

uint64_t SsrwOOMemStream::readSInt16(SsrwOOMemStream *this)
{
  uint64_t v1;
  uint64_t result;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  result = CsLeReadSInt16((__int16 *)(**((_QWORD **)this + 1) + v1));
  *((_DWORD *)this + 5) += 2;
  return result;
}

void setFormulaForEDCell(EDCellHeader *a1, EDFormula *a2, EDRowBlocks *a3)
{
  EDRowBlocks *v5;
  EDRowBlocks *v6;
  void *v7;
  unsigned int v8;
  EDFormula *v9;

  v9 = a2;
  v5 = a3;
  v6 = v5;
  if (a1)
  {
    -[EDRowBlocks formulas](v5, "formulas");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "addObject:", v9);
    if ((a1->var0 & 0x10000000) != 0)
      a1[1].var0 = v8;

  }
}

void sub_22A1DFAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t XlFormulaProcessor::getShareBase(XlFormulaProcessor *this, XlFormulaInfo *a2, unsigned __int16 *a3, __int16 *a4)
{
  char *var3;

  *a3 = -1;
  *a4 = -1;
  if (a2->var1 != 1 || a2->var4 < 5)
    return 0;
  var3 = a2->var3;
  if (!var3 || *var3 != 1)
    return 0;
  *a3 = CsLeReadUInt16((unsigned __int16 *)(var3 + 1));
  *a4 = CsLeReadSInt16((__int16 *)(var3 + 3));
  return 1;
}

void XlFormulaProcessor::convertToRegularFormula(XlFormulaProcessor *this, XlFormulaInfo *a2, int a3, int a4)
{
  char *var3;
  int v9;
  int UInt16;
  int SInt16;
  XlShrFmla *var6;
  XlShrFmla **p_var6;
  XlBaseFormulaTable *v14;
  XlBaseFormulaTable *v15;
  unsigned __int16 *v16;
  int v17;
  unsigned int *v18;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  void *v22;
  uint64_t v23;
  XlPtg *Token;
  _DWORD *exception;
  int v26;
  XlHeader v27;

  XlHeader::XlHeader(&v27);
  if (a2->var1 == 1 && a2->var4 >= 5)
  {
    var3 = a2->var3;
    if (var3)
    {
      v9 = *var3;
      if (v9 == 2)
      {
        a2->var1 = 2;
        return;
      }
      if (v9 != 1)
      {
        a2->var1 = 0;
        return;
      }
      UInt16 = CsLeReadUInt16((unsigned __int16 *)(var3 + 1));
      SInt16 = CsLeReadSInt16((__int16 *)(var3 + 3));
      p_var6 = &a2->var6;
      var6 = a2->var6;
      if (*(_OWORD *)&a2->var6 != 0)
      {
        v14 = (XlBaseFormulaTable *)*((_QWORD *)this + 2);
        if (!v14)
        {
          v14 = (XlBaseFormulaTable *)operator new(0x48uLL);
          XlBaseFormulaTable::XlBaseFormulaTable(v14);
          *((_QWORD *)this + 2) = v14;
          var6 = *p_var6;
        }
        if (var6)
        {
          XlBaseFormulaTable::add(v14, (XlRecord *)var6, UInt16, SInt16);
        }
        else
        {
          XlBaseFormulaTable::add(v14, (XlRecord *)a2->var7, UInt16, SInt16);
          p_var6 = (XlShrFmla **)&a2->var7;
        }
        *p_var6 = 0;
      }
      v15 = (XlBaseFormulaTable *)*((_QWORD *)this + 2);
      if (v15)
      {
        v16 = (unsigned __int16 *)XlBaseFormulaTable::base(v15, UInt16, SInt16);
        if (!v16)
        {
LABEL_24:
          XlFormulaParser::setFormula(*((SsrwOOStream **)this + 1), (void **)a2->var3, a2->var5, (void **)a2->var4);
          XlFormulaParser::reset(*((XlFormulaParser **)this + 1));
          v23 = *((_QWORD *)this + 1);
          *(_BYTE *)(v23 + 80) = 1;
          *(_WORD *)(v23 + 68) = a3;
          *(_WORD *)(v23 + 70) = a4;
          while (1)
          {
            Token = XlFormulaParser::nextToken((XlFormulaParser *)v23);
            if (!Token)
              break;
            XlPtg::~XlPtg(Token);
            MEMORY[0x22E2DD408]();
            v23 = *((_QWORD *)this + 1);
          }
          *(_BYTE *)(*((_QWORD *)this + 1) + 80) = 0;
          return;
        }
        v17 = v16[6];
        if (v17 == 1212)
        {
          v22 = operator new[](v21[6]);
          *((_QWORD *)this + 19) = v22;
          memcpy(v22, *((const void **)v21 + 2), v21[6]);
          XlFormulaInfo::takeFormula(a2, *((char **)this + 19), v21[6], *((_WORD *)v21 + 14));
          *((_QWORD *)this + 19) = 0;
          v20 = *((_QWORD *)v21 + 4);
          goto LABEL_21;
        }
        if (v17 == 545)
        {
          v19 = operator new[](v18[8]);
          *((_QWORD *)this + 19) = v19;
          memcpy(v19, *((const void **)v18 + 2), v18[8]);
          XlFormulaInfo::takeFormula(a2, *((char **)this + 19), v18[8], *((_WORD *)v18 + 21));
          *((_QWORD *)this + 19) = 0;
          v20 = *((_QWORD *)v18 + 3);
LABEL_21:
          if (*(unsigned __int16 *)(v20 + 2) == a3 && a4 == *(__int16 *)(v20 + 6))
            XlBaseFormulaTable::remove(*((XlBaseFormulaTable **)this + 2), UInt16, SInt16);
          goto LABEL_24;
        }
        exception = __cxa_allocate_exception(4uLL);
        v26 = 1004;
      }
      else
      {
        exception = __cxa_allocate_exception(4uLL);
        v26 = 1003;
      }
      *exception = v26;
    }
  }
}

void sub_22A1DFEBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlBaseFormulaTable::XlBaseFormulaTable(XlBaseFormulaTable *this)
{
  *(_QWORD *)this = &off_24F3B08E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
}

void XlBaseFormulaTable::add(XlBaseFormulaTable *this, XlRecord *a2, __int16 a3, __int16 a4)
{
  int v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *exception;

  if (!a2 || (v8 = *((unsigned __int16 *)a2 + 6), v8 != 545) && v8 != 566 && v8 != 1212)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 8000;
  }
  v9 = operator new(4uLL);
  *v9 = a4;
  v9[1] = a3;
  *((_QWORD *)this + 7) = v9;
  v10 = *((unsigned int *)this + 16);
  v11 = *((_QWORD *)this + 1);
  v12 = (_QWORD *)*((_QWORD *)this + 2);
  v13 = (unint64_t)v12 - v11;
  if ((_DWORD)v10 == (((unint64_t)v12 - v11) >> 3))
  {
    v14 = *((_QWORD *)this + 3);
    if ((unint64_t)v12 >= v14)
    {
      v16 = (v14 - v11) >> 3;
      if (2 * (int)v16 <= (v10 + 1))
        v17 = v10 + 1;
      else
        v17 = 2 * v16;
      if (v16 >= 0x7FFFFFFF)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = v17;
      if ((_DWORD)v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 24, v18);
        v21 = v20;
      }
      else
      {
        v19 = 0;
        v21 = 0;
      }
      v22 = &v19[v13 & 0x7FFFFFFF8];
      v23 = &v19[8 * v21];
      *(_QWORD *)v22 = a2;
      v15 = v22 + 8;
      v25 = (char *)*((_QWORD *)this + 1);
      v24 = (char *)*((_QWORD *)this + 2);
      if (v24 != v25)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)*((_QWORD *)this + 1);
      }
      *((_QWORD *)this + 1) = v22;
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 3) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v12 = a2;
      v15 = v12 + 1;
    }
    v27 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 2) = v15;
    v28 = (_QWORD *)*((_QWORD *)this + 5);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *((_QWORD *)this + 4);
      v31 = (unint64_t)v28 - v30;
      v32 = (v27 - v30) >> 3;
      v33 = 2 * v32;
      if (2 * (int)v32 <= (v31 >> 3) + 1)
        v33 = (v31 >> 3) + 1;
      if (v32 >= 0x7FFFFFFF)
        v34 = 0xFFFFFFFFLL;
      else
        v34 = v33;
      if ((_DWORD)v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 48, v34);
        v37 = v36;
      }
      else
      {
        v35 = 0;
        v37 = 0;
      }
      v38 = &v35[v31 & 0x7FFFFFFF8];
      v39 = &v35[8 * v37];
      *(_QWORD *)v38 = *((_QWORD *)this + 7);
      v29 = v38 + 8;
      v41 = (char *)*((_QWORD *)this + 4);
      v40 = (char *)*((_QWORD *)this + 5);
      if (v40 != v41)
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v40 != v41);
        v40 = (char *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v38;
      *((_QWORD *)this + 5) = v29;
      *((_QWORD *)this + 6) = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v28 = *((_QWORD *)this + 7);
      v29 = v28 + 1;
    }
    *((_QWORD *)this + 5) = v29;
    LODWORD(v10) = *((_DWORD *)this + 16);
  }
  else
  {
    *(_QWORD *)(v11 + 8 * v10) = a2;
    *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v10) = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = 0;
  v43 = *((_QWORD *)this + 1);
  v44 = *((_QWORD *)this + 2) - v43;
  if (v10 < (v44 >> 3))
  {
    v45 = (v44 >> 3);
    v10 = v10;
    do
    {
      if (!*(_QWORD *)(v43 + 8 * v10))
        break;
      *((_DWORD *)this + 16) = ++v10;
    }
    while (v45 != v10);
  }
}

uint64_t XlBaseFormulaTable::base(XlBaseFormulaTable *this, int a2, int a3)
{
  unsigned int v4;

  v4 = XlBaseFormulaTable::locate(this, a2, a3);
  if ((v4 & 0x80000000) != 0)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4);
}

uint64_t XlBaseFormulaTable::locate(XlBaseFormulaTable *this, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int16 *v7;

  v3 = *((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5) - v3;
  if ((v4 & 0x7FFFFFFF8) == 0)
    return 0xFFFFFFFFLL;
  result = 0;
  v6 = (v4 >> 3);
  while (1)
  {
    v7 = *(unsigned __int16 **)(v3 + 8 * result);
    if (v7)
    {
      if (v7[1] == a2 && a3 == *v7)
        break;
    }
    if (v6 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t formulaIndexForEDCell(const EDCellHeader *a1)
{
  if (!a1 || (a1->var0 & 0x10000000) == 0)
    return -1;
  if (a1[1].var0 == -1)
    return -1;
  return a1[1].var0;
}

XlPtg *XlFormulaParser::readPtgArea(uint64_t **a1, int a2, int a3)
{
  XlPtg *v6;
  char *LastExtendedData;
  uint64_t v8;
  uint64_t (*v9)(void);
  __int16 v10;
  __int16 v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  int v15;

  v6 = (XlPtg *)operator new(0x18uLL);
  XlPtg::XlPtg((uint64_t)v6, a2, 8);
  LastExtendedData = XlPtg::getLastExtendedData(v6);
  *(_WORD *)LastExtendedData = (*(uint64_t (**)(uint64_t *))(**a1 + 80))(*a1);
  *((_WORD *)LastExtendedData + 1) = (*(uint64_t (**)(uint64_t *))(**a1 + 80))(*a1);
  v8 = **a1;
  if (*((unsigned __int8 *)a1 + 72) < 9u)
  {
    *((_WORD *)LastExtendedData + 2) = (*(uint64_t (**)(void))(v8 + 64))();
    v9 = *(uint64_t (**)(void))(**a1 + 64);
  }
  else
  {
    *((_WORD *)LastExtendedData + 2) = (*(uint64_t (**)(void))(v8 + 80))();
    v9 = *(uint64_t (**)(void))(**a1 + 80);
  }
  v10 = v9();
  *((_WORD *)LastExtendedData + 3) = v10;
  if (*((unsigned __int8 *)a1 + 72) > 8u)
    goto LABEL_13;
  v11 = *(_WORD *)LastExtendedData;
  if (*(__int16 *)LastExtendedData < 0)
  {
    *((_WORD *)LastExtendedData + 2) |= 0x8000u;
    if ((v11 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((*(_WORD *)LastExtendedData & 0x4000) != 0)
LABEL_7:
    *((_WORD *)LastExtendedData + 2) |= 0x4000u;
LABEL_8:
  *(_WORD *)LastExtendedData = v11;
  v12 = *((__int16 *)LastExtendedData + 1);
  v13 = *((unsigned __int16 *)LastExtendedData + 1);
  v14 = v10 | 0x8000;
  if (v12 >= 0)
    v14 = v10;
  v10 = v12 & 0x4000 | v14;
  if (v13 >= 0x4000)
    *((_WORD *)LastExtendedData + 3) = v10;
  *((_WORD *)LastExtendedData + 1) = v13;
LABEL_13:
  if (!a3)
    return v6;
  v15 = *((__int16 *)LastExtendedData + 2);
  if (v15 < 0)
  {
    *(_WORD *)LastExtendedData += *((_WORD *)a1 + 34);
    if ((v10 & 0x8000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000) == 0)
        goto LABEL_17;
LABEL_24:
      *((_WORD *)LastExtendedData + 2) = v15 & 0xC000 | (*((_WORD *)a1 + 35) + v15);
      if ((v10 & 0x4000) == 0)
        return v6;
      goto LABEL_18;
    }
  }
  else if ((v10 & 0x8000) == 0)
  {
    goto LABEL_16;
  }
  *((_WORD *)LastExtendedData + 1) += *((_WORD *)a1 + 34);
  if ((v15 & 0x4000) != 0)
    goto LABEL_24;
LABEL_17:
  if ((v10 & 0x4000) != 0)
LABEL_18:
    *((_WORD *)LastExtendedData + 3) = v10 & 0xC000 | (*((_WORD *)a1 + 35) + v10);
  return v6;
}

void sub_22A1E03E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *setErrorValueForEDCell(_DWORD *result, int a2)
{
  void *v2;
  void *v3;

  if (result)
  {
    if (*result >> 29 == 5)
    {
      if ((*result & 0x10000000) != 0)
        result[3] = a2;
      else
        result[2] = a2;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void setErrorValueForEDCell(EDCellHeader *, EDErrorValue)");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Excel/DOM/EDCell.mm");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v2, v3, 294, 0, "Invalid Cell Type!");

      return (_DWORD *)+[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    }
  }
  return result;
}

void sub_22A1E0534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void XlFormulaInfo::~XlFormulaInfo(XlFormulaInfo *this)
{
  this->var0 = (void **)&off_24F3AF7A0;
  XlFormulaInfo::reset(this);
  JUMPOUT(0x22E2DD408);
}

{
  this->var0 = (void **)&off_24F3AF7A0;
  XlFormulaInfo::reset(this);
}

XlArray *XlFormulaInfo::reset(XlFormulaInfo *this)
{
  OcText *var2;
  char *var3;
  XlTable *var8;
  XlShrFmla *var6;
  XlArray *result;

  var2 = this->var2;
  if (var2)
    (*((void (**)(OcText *))var2->var0 + 1))(var2);
  this->var2 = 0;
  var3 = this->var3;
  if (var3)
    MEMORY[0x22E2DD3F0](var3, 0x1000C8077774924);
  this->var3 = 0;
  var8 = this->var8;
  if (var8)
    (*(void (**)(XlTable *))(*(_QWORD *)var8 + 8))(var8);
  this->var8 = 0;
  var6 = this->var6;
  if (var6)
    (*(void (**)(XlShrFmla *))(*(_QWORD *)var6 + 8))(var6);
  this->var6 = 0;
  result = this->var7;
  if (result)
    result = (XlArray *)(*(uint64_t (**)(XlArray *))(*(_QWORD *)result + 8))(result);
  this->var7 = 0;
  this->var1 = 0;
  this->var4 = 0;
  this->var5 = -1;
  *(_WORD *)&this->var9 = 0;
  this->var11 = 0;
  return result;
}

uint64_t XlLeftMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 784))(a2, a1);
}

uint64_t XlRightMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 968))(a2, a1);
}

uint64_t XlTopMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1304))(a2, a1);
}

uint64_t XlBottomMargin::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 488))(a2, a1);
}

void XlBottomMargin::~XlBottomMargin(XlBottomMargin *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlTopMargin::~XlTopMargin(XlTopMargin *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlRightMargin::~XlRightMargin(XlRightMargin *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlLeftMargin::~XlLeftMargin(XlLeftMargin *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1E07A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1E0908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1E0A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgRefBuffer(unsigned __int16 *result, int *a2, BOOL *a3, int *a4, BOOL *a5)
{
  unsigned int v5;

  *a2 = -1;
  *a4 = -1;
  *a3 = 0;
  *a5 = 0;
  if (result)
  {
    *a2 = *result;
    v5 = result[1];
    *a3 = v5 >> 15;
    *a5 = (v5 & 0x4000) != 0;
    *a4 = v5;
  }
  return result;
}

void sub_22A1E0E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E11D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1E12C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E13B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgAreaBuffer(unsigned __int16 *result, int *a2, BOOL *a3, int *a4, BOOL *a5, int *a6, BOOL *a7, int *a8, BOOL *a9)
{
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  *a4 = -1;
  *a6 = -1;
  *a8 = -1;
  *a3 = 0;
  *a5 = 0;
  *a7 = 0;
  *a9 = 0;
  if (result)
  {
    *a2 = *result;
    v9 = result[2];
    *a3 = v9 >> 15;
    *a7 = (v9 & 0x4000) != 0;
    *a6 = v9;
    *a4 = result[1];
    v10 = result[3];
    *a5 = v10 >> 15;
    *a9 = (v10 & 0x4000) != 0;
    *a8 = v10;
  }
  return result;
}

BOOL isRowReference(int a1, char a2)
{
  return (a1 | ~a2) == 0;
}

BOOL isColumnReference(int a1, int a2)
{
  return !a1 && a2 == 0xFFFF;
}

void sub_22A1E16A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E1704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EDFormula;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t XlBaseFormulaTable::clear(XlBaseFormulaTable *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (((*((_QWORD *)this + 2) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v2 + 8 * v3);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_QWORD *)this + 1);
      }
      *(_QWORD *)(v2 + 8 * v3) = 0;
      v5 = *((_QWORD *)this + 4);
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if (v6)
      {
        MEMORY[0x22E2DD408](v6, 0x1000C4052888210);
        v5 = *((_QWORD *)this + 4);
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
      v2 = *((_QWORD *)this + 1);
    }
    while (v3 < ((unint64_t)(*((_QWORD *)this + 2) - v2) >> 3));
  }
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  result = *((_QWORD *)this + 7);
  if (result)
    result = MEMORY[0x22E2DD408](result, 0x1000C4052888210);
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  return result;
}

void XlShrFmla::~XlShrFmla(XlShrFmla *this)
{
  XlShrFmla::~XlShrFmla(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3ADFF8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    MEMORY[0x22E2DD3F0](v2, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    MEMORY[0x22E2DD408](v3, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 4) = 0;
}

void XlTxo::XlTxo(XlTxo *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEA30;
  *(_DWORD *)(v2 + 38) = 0;
  *(_WORD *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 29) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlTxo *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  signed int v7;
  int v8;
  uint64_t result;
  int v10;
  __int16 v11;
  unsigned int v12;
  void *v13;
  int v14;
  int v15;
  int v16;
  char v17;
  XlString *v18;
  SsrwOOStream *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *exception;
  unsigned int v44;

  v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v6 = (v5 >> 1) & 7;
  if (v6 == 4)
    v6 = 5;
  *((_DWORD *)a2 + 7) = ((v5 >> 4) & 7) - 1;
  *((_DWORD *)a2 + 8) = v6;
  *((_BYTE *)a2 + 36) = (v5 & 0x200) != 0;
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v10 = (v4 << 16) - 1179648;
  if (v10 >= 1)
  {
    v11 = result;
    v12 = HIWORD(v10);
    if (v12 != (_DWORD)result)
      goto LABEL_33;
    v44 = v12;
    v13 = operator new[](result);
    *((_QWORD *)this + 3) = v13;
    (*(void (**)(_QWORD, void *, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v13, &v44);
    result = XlTxo::setFormula(a2, *((unsigned __int8 **)this + 3), v11);
    *((_QWORD *)this + 3) = 0;
  }
  if (v7 < 1)
    goto LABEL_29;
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v14 != 60)
  {
LABEL_33:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  v16 = v15;
  v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v18 = (XlString *)operator new(0x68uLL);
  XlString::XlString(v18);
  *((_QWORD *)this + 4) = v18;
  v19 = (SsrwOOStream *)*((_QWORD *)this + 2);
  v20 = (*((uint64_t (**)(SsrwOOStream *))v19->var0 + 5))(v19);
  XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v19, v7, v17, v16 + v20 - 1, *((XlString **)this + 4));
  v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  if (v21 != 60 || v8 < 16 || v22 < v8)
  {
    v42 = *((_QWORD *)this + 4);
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    *((_QWORD *)this + 4) = 0;
    goto LABEL_33;
  }
  XlString::clearRichText(*((XlString **)this + 4));
  LOWORD(v23) = 0;
  v24 = (_QWORD *)*((_QWORD *)this + 4);
  do
  {
    *((_QWORD *)this + 5) = operator new[](4uLL);
    **((_WORD **)this + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
    v26 = *((_QWORD *)this + 5);
    *(_WORD *)(v26 + 2) = v25;
    v28 = (_QWORD *)v24[8];
    v27 = v24[9];
    if ((unint64_t)v28 >= v27)
    {
      v30 = v24[7];
      v31 = (unint64_t)v28 - v30;
      v32 = (v27 - v30) >> 3;
      v33 = 2 * v32;
      if (2 * (int)v32 <= (v31 >> 3) + 1)
        v33 = (v31 >> 3) + 1;
      if (v32 >= 0x7FFFFFFF)
        v34 = 0xFFFFFFFFLL;
      else
        v34 = v33;
      if ((_DWORD)v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)(v24 + 9), v34);
        v37 = v36;
        v26 = *((_QWORD *)this + 5);
      }
      else
      {
        v35 = 0;
        v37 = 0;
      }
      v38 = &v35[v31 & 0x7FFFFFFF8];
      *(_QWORD *)v38 = v26;
      v29 = v38 + 8;
      v40 = (char *)v24[7];
      v39 = (char *)v24[8];
      if (v39 != v40)
      {
        do
        {
          v41 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *((_QWORD *)v38 - 1) = v41;
          v38 -= 8;
        }
        while (v39 != v40);
        v39 = (char *)v24[7];
      }
      v24[7] = v38;
      v24[8] = v29;
      v24[9] = &v35[8 * v37];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *v28 = v26;
      v29 = v28 + 1;
    }
    v24[8] = v29;
    *((_QWORD *)this + 5) = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), 4, 1);
    v23 = (__int16)(v23 + 1);
  }
  while (v23 < (__int16)(v8 + ((v8 >> 28) & 7)) >> 3);
  XlChartPlot::takeChartFormat((uint64_t)a2, *((_QWORD *)this + 4));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 2) = result - *((_DWORD *)this + 18);
LABEL_29:
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  return result;
}

void sub_22A1E1D04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

XlChartPicF *XlChartFrameType::takePictureFormat(XlChartFrameType *this, XlChartPicF *a2)
{
  XlChartPicF *result;

  result = this->var11;
  if (result)
    result = (XlChartPicF *)(*((uint64_t (**)(XlChartPicF *))result->var0 + 1))(result);
  this->var11 = a2;
  return result;
}

uint64_t XlGraphicsInfo::takeTextFormula(XlGraphicsInfo *this, unsigned __int8 *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  *((_QWORD *)this + 11) = a2;
  *((_WORD *)this + 41) = a3;
  return result;
}

void XlTxo::~XlTxo(XlTxo *this)
{
  XlTxo::~XlTxo(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F3AEA30;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    MEMORY[0x22E2DD3F0](v3, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 21) = 0;
}

uint64_t XlEshBinaryReader::readClientTextBox(XlEshBinaryReader *this, EshShape *a2, const EshHeader *a3)
{
  EshAtom *v4;
  void *v5;

  v4 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v4, 0xF00Du, 0);
  *(_QWORD *)v4 = &unk_24F3AC278;
  return XlEshShape::takeClientTextBox((uint64_t)v5, (uint64_t)v4);
}

void sub_22A1E1E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlEshShape::takeClientTextBox(uint64_t result, uint64_t a2)
{
  _DWORD *exception;

  if (*(_QWORD *)(result + 592))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1010;
  }
  *(_QWORD *)(result + 592) = a2;
  return result;
}

void XlPane::XlPane(XlPane *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3AD120;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPane *a2)
{
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 10) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 11) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlChartPlot::takeChartSeriesFormat(XlChartPlot *this, XlChartSeriesFormat *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = a2;
  return result;
}

void XlPane::~XlPane(XlPane *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlCondFmt::XlCondFmt(XlCondFmt *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3ABB60;
  *(_WORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 18) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlCondFmt *a2)
{
  XlRef *v4;
  int i;
  XlRef *v6;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_WORD *)a2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2)) & 1;
  v4 = (XlRef *)operator new(0xAuLL);
  XlRef::XlRef(v4, 0);
  (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v4);
  XlArray::setCellRange((XlArray *)a2, v4);
  for (i = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2)); i; --i)
  {
    v6 = (XlRef *)operator new(0xAuLL);
    XlRef::XlRef(v6, 0);
    (*(void (**)(XlParserVisitor *, XlRef *))(*(_QWORD *)this + 1504))(this, v6);
    XlCondFmt::appendCellRange(a2, v6);
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1E229C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t XlArray::setCellRange(XlArray *this, XlRef *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = MEMORY[0x22E2DD408](result, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 3) = a2;
  return result;
}

void XlCondFmt::appendCellRange(XlCondFmt *this, XlRef *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1003;
  }
  v6 = *((_QWORD *)this + 6);
  v4 = (char *)this + 48;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 3;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 3) + 1)
      v12 = (v10 >> 3) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x7FFFFFFF8];
    v18 = &v14[8 * v16];
    *(_QWORD *)v17 = a2;
    v8 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 4);
    v19 = (char *)*((_QWORD *)this + 5);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v17;
    *((_QWORD *)this + 5) = v8;
    *((_QWORD *)this + 6) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 5) = v8;
}

void XlConditionalFormat::XlConditionalFormat(XlConditionalFormat *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_24F3AF008;
}

uint64_t XlChartPlot::takeDropLineFormat(XlChartPlot *this, XlChartLineStyle *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = a2;
  return result;
}

void XlCf::XlCf(XlCf *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord((XlRecord *)this, a2);
  *(_QWORD *)v2 = &off_24F3ABA60;
  *(_QWORD *)(v2 + 16) = 0x100000001;
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
}

XlDXf **XlParserVisitor::visit(XlParserVisitor *this, XlCf *a2)
{
  XlDXf *v4;
  int v5;
  int v6;
  int v8;
  XlDXf *v9;

  v4 = (XlDXf *)operator new(0x38uLL);
  XlDXf::XlDXf(v4);
  v9 = v4;
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  (*(void (**)(XlParserVisitor *, XlDXf *))(*(_QWORD *)this + 1512))(this, v9);
  XlCf::setDifferentialFormat(a2, v9);
  v9 = 0;
  if (v5 >= 1)
  {
    v8 = (unsigned __int16)v5;
    *((_QWORD *)this + 3) = operator new[]((unsigned __int16)v5);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
    XlCf::takeFirstFmla(a2, *((char **)this + 3), v5);
    *((_QWORD *)this + 3) = 0;
  }
  if (v6 >= 1)
  {
    v8 = (unsigned __int16)v6;
    *((_QWORD *)this + 3) = operator new[]((unsigned __int16)v6);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
    XlCf::takeSecondFmla(a2, *((char **)this + 3), v6);
    *((_QWORD *)this + 3) = 0;
  }
  XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
  return ChAutoPtr<XlDXf>::~ChAutoPtr(&v9);
}

void sub_22A1E2624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

void XlDXf::XlDXf(XlDXf *this)
{
  *(_DWORD *)&this->var0 = 63;
  *(_WORD *)&this->var4 = 2;
  *(_OWORD *)&this->var6 = 0u;
  *(_OWORD *)&this->var8 = 0u;
  *(_OWORD *)&this->var10 = 0u;
}

XlDXfProtect *XlParserVisitor::visit(XlParserVisitor *this, XlDXf *a2)
{
  XlDXfProtect *result;
  unsigned __int8 var3;
  XlDXfUserFmt *v6;
  XlDXfFont *v7;
  XlDXfAlign *v8;
  OcContact *v9;
  XlDXfPattern *v10;
  XlDXfProtect *v11;

  a2->var0 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  result = (XlDXfProtect *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var5 = result;
  var3 = a2->var3;
  if ((var3 & 2) != 0)
  {
    v6 = (XlDXfUserFmt *)operator new(0x18uLL);
    XlDXfUserFmt::XlDXfUserFmt(v6, a2->var4 & 1);
    (*(void (**)(XlParserVisitor *, XlDXfUserFmt *))(*(_QWORD *)this + 1520))(this, v6);
    result = (XlDXfProtect *)XlDXf::setFmtChanges(a2, v6);
    var3 = a2->var3;
  }
  if ((var3 & 4) != 0)
  {
    v7 = (XlDXfFont *)operator new(0x50uLL);
    XlDXfFont::XlDXfFont(v7);
    (*(void (**)(XlParserVisitor *, XlDXfFont *))(*(_QWORD *)this + 1544))(this, v7);
    result = (XlDXfProtect *)XlDXf::setFontChanges(a2, v7);
    var3 = a2->var3;
  }
  if ((var3 & 8) != 0)
  {
    v8 = (XlDXfAlign *)operator new(0x14uLL);
    XlDXfAlign::XlDXfAlign(v8);
    (*(void (**)(XlParserVisitor *, XlDXfAlign *))(*(_QWORD *)this + 1528))(this, v8);
    result = (XlDXfProtect *)XlDXf::setAlignChanges(a2, v8);
    var3 = a2->var3;
  }
  if ((var3 & 0x10) != 0)
  {
    v9 = (OcContact *)operator new(0x18uLL);
    OcContact::OcContact(v9);
    (*(void (**)(XlParserVisitor *, OcContact *))(*(_QWORD *)this + 1536))(this, v9);
    result = (XlDXfProtect *)XlDXf::setBordersChanges(a2, (XlDXfBorders *)v9);
    var3 = a2->var3;
  }
  if ((var3 & 0x20) != 0)
  {
    v10 = (XlDXfPattern *)operator new(8uLL);
    XlDXfPattern::XlDXfPattern(v10);
    (*(void (**)(XlParserVisitor *, XlDXfPattern *))(*(_QWORD *)this + 1552))(this, v10);
    result = (XlDXfProtect *)XlDXf::setPatternChanges(a2, v10);
    var3 = a2->var3;
  }
  if ((var3 & 0x40) != 0)
  {
    v11 = (XlDXfProtect *)operator new(2uLL);
    XlDXfProtect::XlDXfProtect(v11);
    (*(void (**)(XlParserVisitor *, XlDXfProtect *))(*(_QWORD *)this + 1560))(this, v11);
    return XlDXf::setProtectChanges(a2, v11);
  }
  return result;
}

void sub_22A1E288C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void OcContact::OcContact(OcContact *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

int8x8_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfBorders *a2)
{
  unsigned __int16 v4;
  unsigned int v5;
  unsigned int v6;
  int8x8_t result;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *(_DWORD *)a2 = v4 & 0xF;
  *((_WORD *)a2 + 8) = v5 & 0x7F;
  *((_WORD *)a2 + 9) = (v5 >> 7) & 0x7F;
  result = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL);
  *(int8x8_t *)((char *)a2 + 4) = result;
  *((_WORD *)a2 + 11) = v6 & 0x7F;
  *((_DWORD *)a2 + 3) = v4 >> 12;
  *((_WORD *)a2 + 10) = (v6 >> 7) & 0x7F;
  return result;
}

XlDXfBorders *XlDXf::setBordersChanges(XlDXf *this, XlDXfBorders *a2)
{
  XlDXfBorders *result;

  result = this->var9;
  if (result)
    result = (XlDXfBorders *)MEMORY[0x22E2DD408](result, 0x1000C40504FFAC1);
  this->var3 |= 0x10u;
  this->var9 = a2;
  return result;
}

XlDXf *XlCf::setDifferentialFormat(XlCf *this, XlDXf *a2)
{
  XlDXf *result;

  result = this->var6;
  if (result)
  {
    XlDXf::~XlDXf(result);
    result = (XlDXf *)MEMORY[0x22E2DD408]();
  }
  this->var6 = a2;
  return result;
}

char *XlCf::takeFirstFmla(XlCf *this, char *a2, signed __int16 a3)
{
  char *result;

  result = this->var7;
  if (result)
    result = (char *)MEMORY[0x22E2DD3F0](result, 0x1000C8077774924);
  this->var7 = a2;
  this->var4 = a3;
  return result;
}

XlDXf **ChAutoPtr<XlDXf>::~ChAutoPtr(XlDXf **a1)
{
  XlDXf *v2;

  v2 = *a1;
  if (v2)
  {
    XlDXf::~XlDXf(v2);
    MEMORY[0x22E2DD408]();
  }
  *a1 = 0;
  return a1;
}

void XlDXfFont::XlDXfFont(XlDXfFont *this)
{
  this->var0 = (void **)&off_24F3AC020;
  this->var1 = 0;
  *(_QWORD *)&this->var2 = 0xFFFFFFFFLL;
  this->var4 = 0;
  *(_QWORD *)&this->var5 = 0;
  *(_WORD *)&this->var7 = 0;
  *(_OWORD *)&this->var9 = 0u;
  *(_OWORD *)&this->var13 = 0u;
  *(_QWORD *)((char *)&this->var16 + 2) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfFont *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;
  XlString *v9;
  SsrwOOStream *v10;
  int v11;
  char v12;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  if (v5 - 1 <= 0x3F && v6 <= 1)
  {
    v8 = v6;
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((_QWORD *)this + 4) = v9;
    v10 = (SsrwOOStream *)*((_QWORD *)this + 2);
    v11 = (*((uint64_t (**)(SsrwOOStream *))v10->var0 + 5))(v10);
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), v10, v5, v8, v11 + 64, *((XlString **)this + 4));
    EshDataModelVisitor::takeClientVisitor((uint64_t)a2, *((_QWORD *)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), (v4 + 64), 0);
  a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  if ((v12 & 2) != 0)
  {
    a2->var3 |= 2u;
    if ((v12 & 0x80) == 0)
    {
LABEL_8:
      if ((v12 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  a2->var3 |= 0x80u;
  if ((v12 & 0x10) == 0)
  {
LABEL_9:
    if ((v12 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  a2->var3 |= 0x10u;
  if ((v12 & 0x20) == 0)
  {
LABEL_10:
    if ((v12 & 1) == 0)
      goto LABEL_11;
LABEL_18:
    a2->var3 |= 1u;
    if ((v12 & 4) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_17:
  a2->var3 |= 0x20u;
  if ((v12 & 1) != 0)
    goto LABEL_18;
LABEL_11:
  if ((v12 & 4) != 0)
LABEL_12:
    a2->var3 |= 4u;
LABEL_13:
  a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  a2->var9 = (*(__int16 (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  a2->var18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
}

void sub_22A1E2E40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

XlDXfFont *XlDXf::setFontChanges(XlDXf *this, XlDXfFont *a2)
{
  XlDXfFont *result;

  result = this->var7;
  if (result)
    result = (XlDXfFont *)(*((uint64_t (**)(XlDXfFont *))result->var0 + 1))(result);
  this->var3 |= 4u;
  this->var7 = a2;
  return result;
}

void XlDXfPattern::XlDXfPattern(XlDXfPattern *this)
{
  *(_QWORD *)this = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlDXfPattern *a2)
{
  unsigned __int16 v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *(_DWORD *)a2 = v4 >> 10;
  *((_WORD *)a2 + 2) = result & 0x7F;
  *((_WORD *)a2 + 3) = (result >> 7) & 0x7F;
  return result;
}

XlDXfPattern *XlDXf::setPatternChanges(XlDXf *this, XlDXfPattern *a2)
{
  XlDXfPattern *result;

  result = this->var10;
  if (result)
    result = (XlDXfPattern *)MEMORY[0x22E2DD408](result, 0x1000C4000313F17);
  this->var3 |= 0x20u;
  this->var10 = a2;
  return result;
}

void sub_22A1E3028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E32F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t XlCondFmt::getCellRange(XlCondFmt *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 4);
  if (((unint64_t)(*((_QWORD *)this + 5) - v2) >> 3) <= a2
    || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return result;
}

void sub_22A1E33F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1E3474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E35A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E36A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E37D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E389C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E3948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1E39F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1E3A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E3C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1E3E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1E3EE4()
{
  JUMPOUT(0x22A1E3ED8);
}

void sub_22A1E3F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1E3FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1E4110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1E4234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void XlConditionalFormat::~XlConditionalFormat(XlConditionalFormat *this)
{
  XlConditionalFormat::~XlConditionalFormat(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AF008;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  CsSimpleHeapVector<XlRecord>::clear((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector((void **)this + 1);
}

void XlCondFmt::~XlCondFmt(XlCondFmt *this)
{
  XlCondFmt::~XlCondFmt(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24F3ABB60;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C400EA6A39BLL);
  *((_QWORD *)this + 3) = 0;
  XlCondFmt::clearCellRanges((uint64_t)this);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
}

uint64_t XlCondFmt::clearCellRanges(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 32);
  v3 = *(_QWORD *)(this + 40);
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C400EA6A39BLL);
        v2 = *(_QWORD *)(v1 + 32);
        v3 = *(_QWORD *)(v1 + 40);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  *(_QWORD *)(v1 + 40) = v2;
  return this;
}

void XlCf::~XlCf(XlCf *this)
{
  XlCf::~XlCf(this);
  JUMPOUT(0x22E2DD408);
}

{
  char *var7;
  char *var8;

  this->var0 = (void **)&off_24F3ABA60;
  XlCf::setDifferentialFormat(this, 0);
  var7 = this->var7;
  if (var7)
    MEMORY[0x22E2DD3F0](var7, 0x1000C8077774924);
  this->var7 = 0;
  this->var4 = 0;
  var8 = this->var8;
  if (var8)
    MEMORY[0x22E2DD3F0](var8, 0x1000C8077774924);
  this->var8 = 0;
  this->var5 = 0;
}

void XlDXf::~XlDXf(XlDXf *this)
{
  XlDXfUserFmt *var6;
  XlDXfFont *var7;
  XlDXfAlign *var8;
  XlDXfBorders *var9;
  XlDXfPattern *var10;
  XlDXfProtect *var11;

  var6 = this->var6;
  if (var6)
  {
    (*((void (**)(XlDXfUserFmt *))var6->var0 + 1))(var6);
    this->var6 = 0;
  }
  var7 = this->var7;
  if (var7)
  {
    (*((void (**)(XlDXfFont *))var7->var0 + 1))(var7);
    this->var7 = 0;
  }
  var8 = this->var8;
  if (var8)
  {
    MEMORY[0x22E2DD408](var8, 0x1000C40C36A4E17);
    this->var8 = 0;
  }
  var9 = this->var9;
  if (var9)
  {
    MEMORY[0x22E2DD408](var9, 0x1000C40504FFAC1);
    this->var9 = 0;
  }
  var10 = this->var10;
  if (var10)
  {
    MEMORY[0x22E2DD408](var10, 0x1000C4000313F17);
    this->var10 = 0;
  }
  var11 = this->var11;
  if (var11)
  {
    MEMORY[0x22E2DD408](var11, 0x1000C40BDFB0063);
    this->var11 = 0;
  }
}

void XlDXfFont::~XlDXfFont(XlDXfFont *this)
{
  XlString *var1;

  this->var0 = (void **)&off_24F3AC020;
  var1 = this->var1;
  if (var1)
    (*(void (**)(XlString *))(*(_QWORD *)var1 + 8))(var1);
  this->var1 = 0;
  JUMPOUT(0x22E2DD408);
}

{
  XlString *var1;

  this->var0 = (void **)&off_24F3AC020;
  var1 = this->var1;
  if (var1)
    (*(void (**)(XlString *))(*(_QWORD *)var1 + 8))(var1);
  this->var1 = 0;
}

void XlVerticalPageBreaks::XlVerticalPageBreaks(XlVerticalPageBreaks *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AEBF0;
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
}

uint64_t XlVerticalPageBreaks::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 1360))(a2, a1);
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlVerticalPageBreaks *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int i;
  XlBrk *v7;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  if (v4)
  {
    v5 = v4;
    for (i = 0; i < v5; ++i)
    {
      v7 = (XlBrk *)operator new(0x10uLL);
      XlBrk::XlBrk(v7);
      (*(void (**)(XlParserVisitor *, XlBrk *))(*(_QWORD *)this + 1576))(this, v7);
      XlCrn::appendOperand(a2, v7);
    }
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1E46A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlVerticalPageBreaks::~XlVerticalPageBreaks(XlVerticalPageBreaks *this)
{
  XlVerticalPageBreaks::~XlVerticalPageBreaks(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3AEBF0;
  XlHorizPageBreaks::clearPageBreaks((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void XlEshClientTextBox::~XlEshClientTextBox(XlEshClientTextBox *this)
{
  JUMPOUT(0x22E2DD408);
}

void sub_22A1E48E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgArea3DBuffer(unsigned __int16 *result, unsigned int *a2, int *a3, BOOL *a4, int *a5, BOOL *a6, int *a7, BOOL *a8, int *a9, BOOL *a10)
{
  unsigned int v10;
  unsigned int v11;

  *a2 = -1;
  *a3 = -1;
  *a5 = -1;
  *a7 = -1;
  *a9 = -1;
  *a4 = 0;
  *a6 = 0;
  *a8 = 0;
  *a10 = 0;
  if (result)
  {
    *a2 = *result;
    *a3 = result[1];
    v10 = result[3];
    *a4 = v10 >> 15;
    *a8 = (v10 & 0x4000) != 0;
    *a7 = v10;
    *a5 = result[2];
    v11 = result[4];
    *a6 = v11 >> 15;
    *a10 = (v11 & 0x4000) != 0;
    *a9 = v11;
  }
  return result;
}

void sub_22A1E4B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1E4CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1E4E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int16 *extractDataFromPtgRef3DBuffer(unsigned __int16 *result, unsigned int *a2, int *a3, BOOL *a4, int *a5, BOOL *a6)
{
  unsigned int v6;

  *a2 = -1;
  *a3 = -1;
  *a5 = -1;
  *a4 = 0;
  *a6 = 0;
  if (result)
  {
    *a2 = *result;
    *a3 = result[1];
    v6 = result[2];
    *a4 = v6 >> 15;
    *a6 = (v6 & 0x4000) != 0;
    *a5 = v6;
  }
  return result;
}

void XlBoolErr::XlBoolErr(XlBoolErr *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3AB8E0;
  v2[2] = 0;
}

uint64_t XlBoolErr::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 200))(a2, a1);
}

void XlLink::~XlLink(void **this)
{
  XlLink::~XlLink(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;
  void *v3;

  *this = &off_24F3AF850;
  XlLink::clear((XlLink *)this);
  this[10] = &off_24F3A7B20;
  CsSimpleHeapVector<XlRecord>::~CsSimpleHeapVector(this + 11);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
}

void XlName::~XlName(XlName *this)
{
  XlName::~XlName(this);
  JUMPOUT(0x22E2DD408);
}

{
  XlString *var2;
  char *var7;
  XlString *var3;
  XlString *var4;
  XlString *var5;
  XlString *var6;

  this->var0 = (void **)&off_24F3ACEA0;
  var2 = this->var2;
  if (var2)
    (*(void (**)(XlString *))(*(_QWORD *)var2 + 8))(var2);
  this->var2 = 0;
  var7 = this->var7;
  if (var7)
    MEMORY[0x22E2DD3F0](var7, 0x1000C8077774924);
  this->var7 = 0;
  this->var8 = 0;
  var3 = this->var3;
  if (var3)
    (*(void (**)(XlString *))(*(_QWORD *)var3 + 8))(var3);
  this->var3 = 0;
  var4 = this->var4;
  if (var4)
    (*(void (**)(XlString *))(*(_QWORD *)var4 + 8))(var4);
  this->var4 = 0;
  var5 = this->var5;
  if (var5)
    (*(void (**)(XlString *))(*(_QWORD *)var5 + 8))(var5);
  this->var5 = 0;
  var6 = this->var6;
  if (var6)
    (*(void (**)(XlString *))(*(_QWORD *)var6 + 8))(var6);
  this->var6 = 0;
}

void XlBaseFormulaTable::~XlBaseFormulaTable(XlBaseFormulaTable *this)
{
  XlBaseFormulaTable::~XlBaseFormulaTable(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3B08E0;
  XlBaseFormulaTable::clear(this);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void sub_22A1E521C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t XlReadStgStream::finish(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_WORD *)(this + 12) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 56) = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 80) = *(_QWORD *)(this + 72);
  return this;
}

void XlReadStgStream::~XlReadStgStream(XlReadStgStream *this)
{
  XlReadStgStream::~XlReadStgStream(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3B1518;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  v2 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 10) = v2;
  if (*((_QWORD *)this + 3))
  {
    MEMORY[0x22E2DD3F0](*((_QWORD *)this + 3), 0x1000C8077774924);
    v2 = (void *)*((_QWORD *)this + 9);
  }
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

uint64_t OcBinaryData::setMinimumCapacity(OcBinaryData *this, unsigned int a2)
{
  uint64_t result;

  result = this->var4;
  if (result < a2)
  {
    OcBinaryData::allocBuffer(this, a2);
    return this->var4;
  }
  return result;
}

void OcBinaryData::allocBuffer(OcBinaryData *this, unsigned int a2)
{
  char *v4;

  if (this->var5)
  {
    if (this->var6)
      MEMORY[0x22E2DD3F0]();
    *(_QWORD *)&this->var3 = 0;
    this->var5 = 0;
  }
  this->var6 = 1;
  v4 = (char *)operator new[](a2);
  this->var5 = v4;
  this->var4 = a2;
  if (v4)
    bzero(v4, a2);
}

uint64_t headerGetXFatStartSector(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 68);
  return result;
}

void EshDibBlip::EshDibBlip(EshDibBlip *this, unsigned __int16 a2)
{
  *(_QWORD *)EshBlipT<EshDibBlipInfo>::EshBlipT((uint64_t)this, a2) = &off_24F39EC78;
}

uint64_t EshBlipT<EshDibBlipInfo>::EshBlipT(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;

  EshBlip::EshBlip((EshBlip *)a1, a2);
  *(_QWORD *)v3 = &off_24F39ED38;
  *(_QWORD *)(v3 + 48) = v3 + 20;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  OcBinaryData::OcBinaryData((OcBinaryData *)(v3 + 72));
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 264;
  OcBinaryData::OcBinaryData((OcBinaryData *)(a1 + 296));
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  return a1;
}

void sub_22A1E55D8(_Unwind_Exception *a1)
{
  EshBlip *v1;
  EshDibBlipInfo *v2;

  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(v1);
  _Unwind_Resume(a1);
}

uint64_t EshDibBlip::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 56))(v3, a1);
}

uint64_t EshParserVisitor::visit(EshParserVisitor *this, EshDibBlip *a2)
{
  uint64_t v4;
  int Offset;
  uint64_t v6;
  int v7;

  v4 = *((_QWORD *)this + 3);
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, (Offset + 8), 0);
  EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 28));
  if ((**((_WORD **)a2 + 6) & 1) != 0)
    EshParserVisitor::parseBlipUid(this, (UID *)((char *)a2 + 56));
  *((_BYTE *)a2 + 120) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
  v6 = (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  EshParserVisitor::delayReadData(this, (OcBinaryData *)((char *)a2 + 72), (v6 - v7));
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v6, 0);
  EshParserVisitor::endRead(this, a2);
  return 1;
}

void *EshContainer::removeChild(EshContainer *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  void *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 4);
  v3 = (unint64_t)(*((_QWORD *)this + 5) - v2) >> 3;
  if (v3 <= a2)
    goto LABEL_8;
  result = *(void **)(v2 + 8 * a2);
  if (result)
  {
    result = (void *)MEMORY[0x22E2DD408](result, 0x1000C408B6DE1C6);
    v2 = *((_QWORD *)this + 4);
    v3 = (unint64_t)(*((_QWORD *)this + 5) - v2) >> 3;
  }
  if (v3 <= a2)
LABEL_8:
    std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v2 + 8 * a2) = 0;
  v7 = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 4) + 8 * a2;
  v9 = v7 - (v8 + 8);
  if (v7 != v8 + 8)
    result = memmove((void *)v8, (const void *)(v8 + 8), v7 - (v8 + 8));
  *((_QWORD *)this + 5) = v8 + v9;
  return result;
}

void PptTextOutlineBlockKeyAtom::PptTextOutlineBlockKeyAtom(PptTextOutlineBlockKeyAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B9DA0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9E48;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextOutlineBlockKeyAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 208))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextOutlineBlockKeyAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptTextBlockStyling9Atom::PptTextBlockStyling9Atom(PptTextBlockStyling9Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBA20;
  *(_QWORD *)(v2 + 32) = &unk_24F3BBAC8;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStyling9Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 360))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStyling9Atom *a2)
{
  unsigned int v4;
  int DataLength;
  unsigned int v6;
  PptParaProperty9 *v7;
  char v8;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  DataLength = EshRecord::getDataLength(a2);
  v6 = DataLength + v4;
  if (v4 < DataLength + v4)
  {
    do
    {
      v7 = PptTextBlockStyling9Atom::addStyle(a2);
      PptParserVisitor::parseParaProperty9(this, v7);
      PptParserVisitor::parseCharProperty9(this, (PptCharProperty9 *)&v7[1]);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 4 > v6)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 4003;
      }
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
      PptParserVisitor::parseSpecialInfo9(this, (PptSpecialInfo9 *)((char *)&v7[1].var0 + 2), v8, v6);
    }
    while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) < v6);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

PptParaProperty9 *PptTextBlockStyling9Atom::addStyle(PptTextBlockStyling9Atom *this)
{
  PptParaProperty9 *v2;
  unint64_t v3;
  PptParaProperty9 **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptParaProperty9 **v14;
  char *v15;
  char *v16;
  char *v17;
  PptParaProperty9 *v18;

  v2 = (PptParaProperty9 *)operator new();
  PptParaProperty9::PptParaProperty9(v2);
  PptCharProperty9::PptCharProperty9((PptCharProperty9 *)&v2[1]);
  PptSpecialInfo9::PptSpecialInfo9((PptSpecialInfo9 *)((char *)&v2[1].var0 + 2));
  v3 = *((_QWORD *)this + 8);
  v4 = (PptParaProperty9 **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptParaProperty9 **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptParaProperty9 *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A1E5BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4064F814F1);
  _Unwind_Resume(a1);
}

void PptParaProperty9::PptParaProperty9(PptParaProperty9 *this)
{
  char v1;

  v1 = *(_BYTE *)&this->var3 & 0xC0;
  *(_BYTE *)&this->var0 &= 0xF8u;
  *((_WORD *)&this->var0 + 1) = -1;
  LOBYTE(this->var1) = 0;
  *(_BYTE *)&this->var3 = v1;
  this->var3.var1 = 0;
}

void PptCharProperty9::PptCharProperty9(PptCharProperty9 *this)
{
  *(_BYTE *)this &= 0xE0u;
}

void PptSpecialInfo9::PptSpecialInfo9(PptSpecialInfo9 *this)
{
  char v1;

  v1 = *((_BYTE *)this + 2) & 0xE0;
  *(_BYTE *)this &= 0xFCu;
  *((_BYTE *)this + 1) &= ~1u;
  *((_BYTE *)this + 2) = v1;
}

void PptSSSlideInfoAtom::PptSSSlideInfoAtom(PptSSSlideInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB068;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB110;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 60) = 0;
  *(_BYTE *)(v2 + 56) = 2;
  *(_WORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 68) = 1;
}

uint64_t PptSSSlideInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 704))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSSSlideInfoAtom *a2)
{
  int v4;
  unsigned int v5;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (a2->var7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    || (a2->var8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 9)
    || (a2->var9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 10)
    || (a2->var10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        PptSSSlideInfoAtom::setSpeed((uint64_t)a2, v5),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 13))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), (const EshRecord *)a2, 3u);
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

uint64_t PptSSSlideInfoAtom::setSpeed(uint64_t result, unsigned int a2)
{
  int v2;

  v2 = 2;
  if (a2 < 3)
    v2 = a2;
  *(_DWORD *)(result + 68) = v2;
  return result;
}

EshColor *EshColor::paletteIndex(EshColor *this, uint64_t a2, EshColor *a3)
{
  *(_DWORD *)a2 = 1;
  *(_WORD *)(a2 + 4) = (_WORD)this;
  return this;
}

void PptRecolorInfoAtom::PptRecolorInfoAtom(PptRecolorInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BA280;
  *(_QWORD *)(v2 + 32) = &unk_24F3BA330;
  *(_WORD *)(v2 + 46) = -1;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
}

uint64_t PptRecolorInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 240))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRecolorInfoAtom *a2)
{
  int DataLength;
  unsigned int v5;
  int v6;
  unsigned int v7;
  PptRecolorSpec *v8;
  uint64_t v9;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_WORD *)a2 + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 6u);
  DataLength = EshRecord::getDataLength(a2);
  v5 = DataLength - 12;
  if ((((DataLength - 12) % 44) & 0xFFFFFFFB) != 0)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4008;
  }
  v6 = DataLength;
  PptRecolorInfoAtom::clearColors(a2);
  PptRecolorInfoAtom::clearFills(a2);
  if (v6 >= 56)
  {
    v7 = v5 / 0x2C;
    do
    {
      v8 = (PptRecolorSpec *)operator new(0x20uLL);
      PptRecolorSpec::PptRecolorSpec(v8, 0);
      v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
      PptParserVisitor::visit(this, v8, v9);
      if (v8->var4)
        PptTextBlockStylingAtom::addCharRun(a2, (PptCharRun *)v8);
      else
        EshDgg::addIdCluster(a2, (uint64_t)v8);
      --v7;
    }
    while (v7);
  }
  PptSkipVisitor::skipKnownToEnd(*((PptSkipVisitor **)this + 3), a2);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A1E610C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *PptRecolorInfoAtom::clearColors(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;

  v1 = this;
  v2 = this[6];
  if (((this[7] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = v3;
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[6];
      }
      *(_QWORD *)(v2 + 8 * v4) = 0;
      v3 = v4 + 1;
      v2 = v1[6];
    }
    while (((unint64_t)(v1[7] - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  v1[7] = v2;
  return this;
}

_QWORD *PptRecolorInfoAtom::clearFills(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;

  v1 = this;
  v2 = this[9];
  if (((this[10] - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = v3;
      this = *(_QWORD **)(v2 + 8 * v3);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[9];
      }
      *(_QWORD *)(v2 + 8 * v4) = 0;
      v3 = v4 + 1;
      v2 = v1[9];
    }
    while (((unint64_t)(v1[10] - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  v1[10] = v2;
  return this;
}

void PptRecolorSpec::PptRecolorSpec(PptRecolorSpec *this, BOOL a2)
{
  this->var0 = (void **)&off_24F3BA380;
  this->var1.var0.var0 = 255;
  this->var2.var0.var0 = 255;
  this->var3 = 0;
  this->var4 = a2;
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptRecolorSpec *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  char v7;
  EshColor *v8;
  EshColor *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  char v14;
  _DWORD *exception;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a3, 0);
  a2->var3 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1)) != 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v8 = (EshColor *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v10 = operator new(8uLL);
  *v10 = 255;
  if (v8 > 7)
    EshColor::rgb(v5, v6, v7, (uint64_t)v10);
  else
    EshColor::schemeIndex(v8, (uint64_t)v10, v9);
  EshColor::operator=((uint64_t)&a2->var1, (uint64_t)v10);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  if (v11 >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4008;
  }
  a2->var4 = v11 == 1;
  if (v11 == 1)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  EshColor::rgb(v12, v13, v14, (uint64_t)v10);
  EshColor::operator=((uint64_t)&a2->var2, (uint64_t)v10);
  if (!a2->var4)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  MEMORY[0x22E2DD408](v10, 0x1000C4087442A64);
  return 1;
}

void sub_22A1E6570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void PptSlideFlags10Atom::PptSlideFlags10Atom(PptSlideFlags10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BF148;
  *(_QWORD *)(v2 + 32) = &unk_24F3BF1F0;
}

uint64_t PptSlideFlags10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 1040))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSlideFlags10Atom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

_QWORD *EshPropValFactory::createPropVal(EshPropValFactory *this)
{
  _QWORD *result;
  uint64_t (**v2)();

  if ((int)this > 406)
  {
    if ((int)this > 898)
    {
      if ((_DWORD)this == 899)
      {
LABEL_16:
        result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        v2 = &off_24F39D640;
        goto LABEL_24;
      }
      if ((_DWORD)this != 928)
        goto LABEL_23;
    }
    else
    {
      if ((_DWORD)this == 407)
      {
        result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        v2 = &off_24F39F450;
        goto LABEL_24;
      }
      if ((_DWORD)this != 463)
        goto LABEL_23;
    }
    result = operator new(0x20uLL);
    result[2] = 0;
    result[3] = 0;
    v2 = &off_24F39F4F0;
    goto LABEL_24;
  }
  if ((int)this <= 336)
  {
    switch((_DWORD)this)
    {
      case 0xC1:
        result = operator new(0x18uLL);
        result[2] = 0;
        v2 = (uint64_t (**)())&off_24F39F220;
        goto LABEL_24;
      case 0x145:
        result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        v2 = (uint64_t (**)())&off_24F39D578;
        goto LABEL_24;
      case 0x146:
        result = operator new(0x20uLL);
        result[2] = 0;
        result[3] = 0;
        v2 = &off_24F39D6E0;
        goto LABEL_24;
    }
LABEL_23:
    result = operator new(0x18uLL);
    result[2] = 0;
    v2 = (uint64_t (**)())&off_24F39F2C0;
    goto LABEL_24;
  }
  switch((int)this)
  {
    case 337:
      goto LABEL_16;
    case 338:
      result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      v2 = &off_24F39F310;
      break;
    case 341:
      result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      v2 = &off_24F39F3B0;
      break;
    case 342:
      result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      v2 = &off_24F39D780;
      break;
    case 343:
      result = operator new(0x20uLL);
      result[2] = 0;
      result[3] = 0;
      v2 = &off_24F39D820;
      break;
    default:
      goto LABEL_23;
  }
LABEL_24:
  *result = v2;
  result[1] = 0;
  return result;
}

uint64_t EshPathParamTable::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1);
  else
    return 1;
}

void EshPropValParserVisitor::visit(EshPropValParserVisitor *this, EshPathParamTable *a2)
{
  EshPropValParserVisitor::parseTable<EshPathParamTable>((uint64_t)this, (uint64_t)a2);
}

uint64_t sub_22A1E6858()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshPathParamTable>(uint64_t a1, uint64_t a2)
{
  EshTablePropValHeader *v4;
  EshPropValParserVisitor *v5;
  EshPathParamTable *v6;
  unsigned int v7;
  EshComputedValue *v8;

  v4 = (EshTablePropValHeader *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  *((_WORD *)v4 + 2) = 0;
  *(_WORD *)v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  *((_WORD *)v4 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (EshPropValParserVisitor *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  *((_WORD *)v4 + 2) = (_WORD)v5;
  EshPropValParserVisitor::decodeHeader(v5, v6, v4);
  *(_WORD *)(a1 + 20) = *((_WORD *)v4 + 2);
  std::vector<EshComputedValue,ChAllocator<EshComputedValue>>::resize(a2 + 8, *(unsigned __int16 *)v4);
  if (*(_WORD *)v4)
  {
    v7 = 0;
    do
    {
      v8 = (EshComputedValue *)EshBasicTablePropVal<EshComputedValue>::operator[](a2, v7);
      EshPropValParserVisitor::parseValue(a1, v8, *(unsigned __int16 *)(a1 + 20));
      ++v7;
    }
    while (v7 < *(unsigned __int16 *)v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1E6948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

_WORD *EshPropValParserVisitor::decodeHeader(EshPropValParserVisitor *this, EshPathParamTable *a2, EshTablePropValHeader *a3)
{
  int v3;
  _DWORD *exception;

  v3 = *((unsigned __int16 *)a3 + 2);
  if (v3 != 4 && v3 != 8)
  {
    if (v3 != 65520)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 7005;
    }
    *((_WORD *)a3 + 2) = 4;
  }
  return EshTablePropValHeader::mulDivElementSizeInStream(a3, 1u, 2u);
}

_WORD *EshTablePropValHeader::mulDivElementSizeInStream(_WORD *this, unsigned int a2, unsigned int a3)
{
  *this = (unsigned __int16)(*this * a3) / a2;
  this[1] = (unsigned __int16)(this[1] * a3) / a2;
  this[2] = (unsigned __int16)(this[2] * a2) / a3;
  return this;
}

uint64_t EshPropValParserVisitor::parseValue(uint64_t this, EshComputedValue *a2, int a3)
{
  if (a3 == 4)
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 104))(*(_QWORD *)(this + 8));
    if ((int)this > -2147483521)
    {
      a2->var0 = 0;
    }
    else
    {
      a2->var0 = 1;
      this = this ^ 0x80000000;
    }
  }
  else
  {
    if (a3 != 2)
      return this;
    a2->var0 = 0;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 80))(*(_QWORD *)(this + 8));
  }
  a2->var1 = this;
  return this;
}

uint64_t EshTablePropVal<EshPathCommand>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
  else
    return 1;
}

void EshPropValParserVisitor::visit(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 22) = 0;
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshPathCommand>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<int>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedPoint>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshGradientStop>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedRect>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<float>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshHandle>>(a1, a2);
}

{
  EshPropValParserVisitor::parseTable<EshTablePropVal<EshFormula>>(a1, a2);
}

uint64_t sub_22A1E6AC4()
{
  uint64_t v0;
  _DWORD *exception;

  if (*(_WORD *)(v0 + 22))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshPathCommand>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<EshPathCommand,ChAllocator<EshPathCommand>>::resize(a2 + 8, *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = EshBasicTablePropVal<EshComputedValue>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement(a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1E6BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshPropValParserVisitor::parseElement(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned __int16 v6;
  int v7;
  uint64_t result;
  _DWORD *exception;

  if (*(_WORD *)(a1 + 20) != 2)
    goto LABEL_13;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = v4 >> 13;
  if (v4 >> 13 <= 4)
  {
    *(_DWORD *)(a2 + 4) = v5;
    if (!*(_WORD *)(a1 + 22))
    {
      v6 = v4 & 0x1FFF;
      goto LABEL_8;
    }
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  if (v5 != 5)
    goto LABEL_13;
  v7 = (v4 >> 8) & 0x1F;
  v5 = v7 + 5;
  *(_DWORD *)(a2 + 4) = v7 + 5;
  v6 = *(_WORD *)(a1 + 22) + v4;
  if (!v7)
  {
    result = 0;
    *(_WORD *)(a1 + 22) = v6;
    goto LABEL_12;
  }
  *(_WORD *)(a1 + 22) = 0;
LABEL_8:
  if (v5 == 5)
    result = 0;
  else
    result = EshPathCommand::decodeCount(v5, v6);
LABEL_12:
  *(_WORD *)a2 = result;
  return result;
}

{
  unsigned int v4;
  unint64_t v5;
  uint64_t result;
  _QWORD *v7;
  int32x4_t v8;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  v5 = v4;
  *(_BYTE *)a2 = v4 & 1;
  *(_BYTE *)(a2 + 1) = (v4 & 2) != 0;
  *(_BYTE *)(a2 + 2) = (v4 & 4) != 0;
  *(_BYTE *)(a2 + 3) = (v4 & 8) != 0;
  EshPropValParserVisitor::parseValuePair(a1, a2, 0, 1, 1, 1);
  if (*(_BYTE *)(a2 + 3))
  {
    EshPropValParserVisitor::parseValuePair(a1, a2, 1u, 1, (v5 >> 11) & 1, (v5 >> 12) & 1);
    EshPropValParserVisitor::parseValuePair(a1, a2, 2u, (v5 >> 13) & 1, (v5 >> 7) & 1, (v5 >> 8) & 1);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  }
  else
  {
    EshPropValParserVisitor::parseValuePair(a1, a2, 1u, (v5 >> 4) & 1, (v5 >> 11) & 1, (v5 >> 12) & 1);
    EshPropValParserVisitor::parseValuePair(a1, a2, 2u, (v5 >> 5) & 1, (v5 >> 7) & 1, (v5 >> 8) & 1);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a2 + 36), (int32x4_t)xmmword_22A4C06A0)))) & 1) == 0)
    {
      *(_QWORD *)(a2 + 36) = 0;
      *(_QWORD *)(a2 + 44) = 0;
    }
    result = EshPropValParserVisitor::parseValuePair(a1, a2, 3u, (v5 >> 5) & 1, (v5 >> 9) & 1, (v5 >> 10) & 1);
    v8 = *(int32x4_t *)(a2 + 52);
    v7 = (_QWORD *)(a2 + 52);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v8, (int32x4_t)xmmword_22A4C06A0)))) & 1) == 0)
    {
      *v7 = 0;
      v7[1] = 0;
    }
  }
  return result;
}

uint64_t EshPathCommand::decodeCount(int a1, unsigned int a2)
{
  int v2;
  int v4;
  unsigned int v5;
  unsigned __int16 v6;
  const char *v8;
  int v9;
  _DWORD *exception;

  if (a1 >= 28)
    goto LABEL_15;
  v2 = EshPathCommand::m_commandPropsArray[6 * a1 + 2];
  if (v2 <= 0)
    goto LABEL_15;
  v4 = EshPathCommand::m_commandPropsArray[6 * a1 + 3];
  v5 = a2 / (unsigned __int16)EshPathCommand::m_commandPropsArray[6 * a1 + 2];
  if ((v4 & 0x80000000) == 0)
  {
    if (0xFFFF - v4 >= v5)
      goto LABEL_5;
LABEL_15:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7007;
  }
  if ((int)v5 < -v4)
    goto LABEL_15;
LABEL_5:
  v6 = v4 + v5;
  if ((_WORD)a2 != (_WORD)v5 * (_WORD)v2)
    ChLogFunction("A path command with a fractional count.", 8, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/DataModel/EshPathCommand.cpp", 251);
  if (!v6)
  {
    v8 = "A path command with a count of 0.";
    v9 = 255;
    goto LABEL_17;
  }
  if (v6 != 1 && LOBYTE(EshPathCommand::m_commandPropsArray[6 * a1 + 5]) == 0)
  {
    v8 = "An unrepeatable path command with a count > 1.";
    v9 = 259;
LABEL_17:
    ChLogFunction(v8, 8, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/DataModel/EshPathCommand.cpp", v9);
  }
  return v6;
}

void PptTxInteracInfoAtom::PptTxInteracInfoAtom(PptTxInteracInfoAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BBC18;
  *(_QWORD *)(v2 + 32) = &unk_24F3BBCC0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTxInteracInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 368))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTxInteracInfoAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2->var2.var1 + 8, 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  a2->var7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

void sub_22A1E70B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E718C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E72AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E7404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1E74A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EshPath::isShadowOKSet(EshPath *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x17Au);
}

uint64_t EshShapeLib::isShadowOK(EshShapeLib *this, uint64_t a2)
{
  unsigned __int16 *ShapeType;

  ShapeType = (unsigned __int16 *)getShapeType((int)this);
  if (ShapeType)
    return (*ShapeType >> 6) & 1;
  return a2;
}

uint64_t EshShadow::isColorSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x201u);
}

uint64_t EshShadow::getColor(EshShadow *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this + 2), 0x201u);
}

uint64_t EshShadow::isOpacitySet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x204u);
}

uint64_t EshShadow::isSoftnessSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2) + 128, 0x21Cu);
}

uint64_t EshShadow::getDefaultSoftness(EshShadow *this)
{
  return 63500;
}

uint64_t EshShadow::isOffsetXSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x205u);
}

uint64_t EshShadow::getDefaultOffsetX(EshShadow *this)
{
  return 25400;
}

uint64_t EshShadow::isOffsetYSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x206u);
}

uint64_t EshShadow::isShadowTypeSet(EshShadow *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0x200u);
}

void sub_22A1E7918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E7A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E7B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E7C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E7C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E7D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1E814C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E8230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshFill::getOpacity2(EshFill *this)
{
  int v1;

  v1 = *(_DWORD *)EshOpt::getProperty((uint64_t)this->var2, 0x184u);
  if (v1 >= 0x10000)
    return 0x10000;
  else
    return v1;
}

void sub_22A1E83BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E8490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E851C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E8624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E86E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E881C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E8A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_22A1E8B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EshTextPath::getOn(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xF1u);
}

void sub_22A1E8EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, id a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t EshTextPath::isAlignSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xC2u);
}

uint64_t EshTextPath::isStringSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xC0u);
}

uint64_t *EshTextPath::getString(EshTextPath *this)
{
  return *EshOpt::getProperty(*((_QWORD *)this + 2), 0xC0u);
}

void sub_22A1E92AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t EshTextPath::isFontSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xC5u);
}

uint64_t *EshTextPath::getFont(EshTextPath *this)
{
  return *EshOpt::getProperty(*((_QWORD *)this + 2), 0xC5u);
}

uint64_t EshTextPath::isSizeSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xC3u);
}

uint64_t EshTextPath::getSize(EshTextPath *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xC3u);
}

uint64_t EshTextPath::isBoldSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xFAu);
}

uint64_t EshTextPath::getBold(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xFAu);
}

uint64_t EshTextPath::isItalicSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xFBu);
}

uint64_t EshTextPath::getItalic(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xFBu);
}

uint64_t EshTextPath::isSmallcapsSet(EshTextPath *this)
{
  return EshOpt::isPropertySet(*((_QWORD *)this + 2), 0xFEu);
}

uint64_t EshTextPath::getSmallcaps(EshTextPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty(*((_QWORD *)this + 2), 0xFEu);
}

void sub_22A1E96D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E9734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E9940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E9AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1E9BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E9CB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E9D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E9D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E9E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1E9EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1E9FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EA09C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1EA1AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1EA2C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1EA438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EA54C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EA678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EADEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t parsePoint32(uint64_t result, int a2, int *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 8 * a2;
  v5 = result + (int)v4;
  *a3 = *(unsigned __int8 *)(result + v4) | (*(unsigned __int8 *)(v5 + 1) << 8) | (*(unsigned __int8 *)(v5 + 2) << 16) | (*(unsigned __int8 *)(v5 + 3) << 24);
  *a4 = *(_DWORD *)(v5 + 4);
  return result;
}

void sub_22A1EB06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MFWriteUInt32ToByteArray(uint64_t result, int a2, unsigned int a3)
{
  *(_DWORD *)(result + a3) = a2;
  return result;
}

void sub_22A1EB264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::getDirection(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x8Bu);
}

uint64_t EshBasicTablePropVal<EshComputedRect>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 5) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 32 * a2;
}

void sub_22A1EB444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGFloat calculatePreviousPointOnLine(CGPoint a1, CGPoint a2, CGPoint *a3)
{
  int v3;
  int v4;
  BOOL v5;
  double v6;
  double v7;

  v3 = (int)vabdd_f64(a2.x, a1.x);
  v4 = (int)vabdd_f64(a2.y, a1.y);
  v5 = a1.x <= a2.x;
  v6 = 1.0;
  if (v5)
    v7 = 1.0;
  else
    v7 = -1.0;
  if (a1.y > a2.y)
    v6 = -1.0;
  *a3 = a1;
  if (v3 >= v4)
  {
    if ((v3 & 0x80000000) == 0)
    {
      a1.x = a1.x + v7;
      a3->x = a1.x;
      if (v3 < 2 * v4)
      {
LABEL_12:
        a1.x = a1.y + v6;
        a3->y = a1.y + v6;
      }
    }
  }
  else if ((v4 & 0x80000000) == 0)
  {
    if (v4 < 2 * v3)
      a3->x = a1.x + v7;
    goto LABEL_12;
  }
  return a1.x;
}

uint64_t XlChartDataSeries::getCachedCustomFormat(XlChartDataSeries *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2);
}

uint64_t XlChartDataSeries::getCachedCustomLabel(XlChartDataSeries *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 9) + 8 * a2);
}

void sub_22A1EB624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EshPath::getFillOK(EshPath *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x17Fu);
}

void sub_22A1EB7EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShapeProperties::getCoordRight(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x142u);
}

uint64_t EshShapeProperties::getCoordBottom(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x143u);
}

void sub_22A1EB8D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshPath::getDefaultLimoX(EshPath *this)
{
  return 0x7FFFFFFFLL;
}

void sub_22A1EBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *EshPath::getParams(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x145u);
}

uint64_t *EshPath::getCommands(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x146u);
}

uint64_t EshStroke::getStartArrow(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D0u);
}

void sub_22A1EBBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22A1EBD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A1EBFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A1EC358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EC460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EC80C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EC938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id parseRegion(unsigned int a1, const unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  void *v7;
  int *v8;
  void *v9;

  if (a1 < 0x10)
  {
    if (!a1)
    {
      objc_msgSend(MEMORY[0x24BDBCEB8], "array");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      return v7;
    }
    goto LABEL_12;
  }
  v3 = *(unsigned int *)a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = v3 + 16 * v4;
  if (HIDWORD(v5) || (!(v4 >> 28) ? (v6 = v5 > a1) : (v6 = 1), v6))
  {
LABEL_12:
    v7 = 0;
    return v7;
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", *((unsigned int *)a2 + 2));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v8 = (int *)&a2[v3];
    do
    {
      objc_msgSend(MEMORY[0x24BDD1968], "valueWithCGRect:", (double)*v8, (double)v8[1], (double)(v8[2] - *v8), (double)(v8[3] - v8[1]));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v9);

      v8 += 4;
      --v4;
    }
    while (v4);
  }
  return v7;
}

void sub_22A1ECA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PptSSSlideInfoAtom::~PptSSSlideInfoAtom(PptSSSlideInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptTxInteracInfoAtom::~PptTxInteracInfoAtom(PptTxInteracInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptRecolorInfoAtom::~PptRecolorInfoAtom(PptRecolorInfoAtom *this)
{
  PptRecolorInfoAtom::~PptRecolorInfoAtom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3BA280;
  *((_QWORD *)this + 4) = &unk_24F3BA330;
  PptRecolorInfoAtom::clearColors(this);
  PptRecolorInfoAtom::clearFills(this);
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

void PptRecolorSpec::~PptRecolorSpec(PptRecolorSpec *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSlideFlags10Atom::~PptSlideFlags10Atom(PptSlideFlags10Atom *this)
{
  *(_QWORD *)this = &off_24F3BF148;
  *((_QWORD *)this + 4) = &unk_24F3BF1F0;
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BF148;
  *((_QWORD *)this + 4) = &unk_24F3BF1F0;
}

void PptTextBlockStyling9Atom::~PptTextBlockStyling9Atom(PptTextBlockStyling9Atom *this)
{
  PptTextBlockStyling9Atom::~PptTextBlockStyling9Atom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BBA20;
  *((_QWORD *)this + 4) = &unk_24F3BBAC8;
  PptTextBlockStyling9Atom::reset((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextBlockStyling9Atom::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  v3 = (uint64_t *)(this + 48);
  v4 = *(_QWORD *)(this + 56) - v2;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    do
    {
      v7 = *(_QWORD *)(v1 + 48);
      v8 = *(_QWORD *)(v1 + 56) - v7;
      if (v5 >= (v8 >> 3))
        goto LABEL_10;
      this = *(_QWORD *)(v7 + 8 * v5);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C4064F814F1);
        v7 = *(_QWORD *)(v1 + 48);
        v8 = *(_QWORD *)(v1 + 56) - v7;
      }
      if (v5 >= (v8 >> 3))
LABEL_10:
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v7 + 8 * v5++) = 0;
    }
    while (v6 != v5);
    v2 = *v3;
  }
  *(_QWORD *)(v1 + 56) = v2;
  return this;
}

void EshDibBlip::~EshDibBlip(EshBlip *this)
{
  EshDibBlipInfo *v2;

  this->var0 = (void **)&off_24F39ED38;
  v2 = (EshDibBlipInfo *)&this[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&this[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(this);
  JUMPOUT(0x22E2DD408);
}

{
  EshDibBlipInfo *v2;

  this->var0 = (void **)&off_24F39ED38;
  v2 = (EshDibBlipInfo *)&this[1];
  EshDibBlipInfo::~EshDibBlipInfo((EshDibBlipInfo *)&this[5].var3.var0[4]);
  EshDibBlipInfo::~EshDibBlipInfo(v2);
  EshBlip::~EshBlip(this);
}

void EshDibBlipInfo::~EshDibBlipInfo(EshDibBlipInfo *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 26);
  if (v2)
    MEMORY[0x22E2DD408](v2, 0x1000C4052888210);
  *((_QWORD *)this + 26) = 0;
  OcBinaryData::~OcBinaryData((OcBinaryData *)((char *)this + 24));
}

void PptTextOutlineBlockKeyAtom::~PptTextOutlineBlockKeyAtom(PptTextOutlineBlockKeyAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdTextBoxStory::WrdTextBoxStory(WrdTextBoxStory *this)
{
  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = -1;
  *((_BYTE *)this + 16) = 1;
}

uint64_t WrdParser::parse(WrdParser *this, WrdTextBoxStory *a2)
{
  int v4;
  int v5;
  int v6;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  WrdTextBoxStory::setNumberOfReusableTextBoxStories((uint64_t)a2, v5);
  *((_BYTE *)a2 + 16) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 72))(*((_QWORD *)this + 16)) == 1;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 4, 1);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 4, 1);
  if (*((_BYTE *)a2 + 16))
    return WrdTextBoxStory::setNextTextBoxIndex((uint64_t)a2, v4);
  WrdTextBoxStory::setNumberOfTextBoxesInStoryChain((uint64_t)a2, v4);
  return WrdTextBoxStory::setOfficeArtShapeIDForFirstShapeInStoryChain((uint64_t)a2, v6);
}

uint64_t WrdTextBoxStory::setNumberOfReusableTextBoxStories(uint64_t this, int a2)
{
  *(_BYTE *)(this + 16) = 1;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t WrdTextBoxStory::setNumberOfTextBoxesInStoryChain(uint64_t this, int a2)
{
  *(_BYTE *)(this + 16) = 0;
  *(_DWORD *)this = a2;
  return this;
}

uint64_t WrdTextBoxStory::setOfficeArtShapeIDForFirstShapeInStoryChain(uint64_t this, int a2)
{
  *(_BYTE *)(this + 16) = 0;
  *(_DWORD *)(this + 4) = a2;
  return this;
}

void WrdStory::WrdStory(WrdStory *this)
{
  *(_QWORD *)this = &off_24F3B3D70;
  *(_OWORD *)((char *)this + 8) = xmmword_22A4D2D80;
  *((_QWORD *)this + 3) = -1;
  *((_BYTE *)this + 32) = 0;
}

uint64_t WrdTextBoxStory::getOfficeArtShapeIDForFirstShapeInStoryChain(WrdTextBoxStory *this)
{
  return *((unsigned int *)this + 1);
}

void WrdFileShapeAddress::WrdFileShapeAddress(WrdFileShapeAddress *this)
{
  this->var0 = (void **)&off_24F3B3300;
  this->var1 = 0;
  *(_QWORD *)&this->var2 = -1;
  *(_QWORD *)&this->var4 = -1;
  this->var6 = -1;
  this->var14 = 0;
  *(_QWORD *)&this->var7 = 0;
  *(_QWORD *)&this->var9 = 0;
  *(int *)((char *)&this->var10 + 3) = 0;
}

uint64_t WrdParser::parse(WrdParser *this, WrdFileShapeAddress *a2)
{
  unsigned int v4;
  uint64_t result;

  a2->var2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 80))(*((_QWORD *)this + 16));
  *(int8x16_t *)&a2->var7 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v4), (uint32x4_t)xmmword_22A4D32B0), (int8x16_t)xmmword_22A4D32C0);
  a2->var11 = (v4 & 0x2000) != 0;
  a2->var12 = (v4 & 0x4000) != 0;
  a2->var13 = v4 >> 15;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 96))(*((_QWORD *)this + 16));
  a2->var14 = result;
  return result;
}

CsString *CsString::append(CsString *this, const unsigned __int16 *a2)
{
  CsString *v3;
  unsigned int v4;

  if (a2)
  {
    v3 = this;
    v4 = _ChWcslen(a2);
    return CsString::append(v3, a2, v4);
  }
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setNoAutoHyphenate(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x4000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFF7F | ((a2 & 1) << 7);
  return this;
}

void sub_22A1ED160(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x22A1ED144);
  }

  _Unwind_Resume(exc_buf);
}

char *WrdEshReader::readClientData(WrdEshReader *this, EshContentBase *a2, const EshHeader *a3)
{
  EshAtom *v6;
  char *result;
  EshAtom **v8;
  void *v9;
  _DWORD *exception;

  v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF011u, 0);
  *(_QWORD *)v6 = &unk_24F3B2E48;
  *((_DWORD *)v6 + 7) = 0;
  (*(void (**)(WrdEshReader *, EshAtom *, const EshHeader *))(*(_QWORD *)this + 104))(this, v6, a3);
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    v8 = (EshAtom **)(result + 584);
LABEL_5:
    *v8 = v6;
    return result;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) == 6)
  {
    v8 = (EshAtom **)(result + 376);
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(EshContentBase *))(*(_QWORD *)a2 + 16))(a2) != 12)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 0;
  }
  return (char *)WrdEshBackground::takeClientData((uint64_t)v9, (uint64_t)v6);
}

void sub_22A1ED2FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdEshClientData::accept(uint64_t a1, void *lpsrc)
{
  EshDataModelVisitor *v3;
  const void *ClientVisitor;
  void *v5;

  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v3);
  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 24))(v5, a1);
}

_QWORD *WrdEshReader::readClientTextBox(WrdEshReader *this, EshShape *a2, const EshHeader *a3)
{
  EshAtom *v6;
  _QWORD *result;

  v6 = (EshAtom *)operator new(0x20uLL);
  EshAtom::EshAtom(v6, 0xF00Du, 0);
  *(_QWORD *)v6 = &unk_24F3B2EF0;
  *((_DWORD *)v6 + 7) = 0;
  (*(void (**)(WrdEshReader *, EshAtom *, const EshHeader *))(*(_QWORD *)this + 104))(this, v6, a3);
  result[74] = v6;
  return result;
}

void sub_22A1ED45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdEshClientTextBox::accept(uint64_t a1, void *lpsrc)
{
  EshDataModelVisitor *v3;
  const void *ClientVisitor;
  void *v5;

  ClientVisitor = (const void *)EshDataModelVisitor::getClientVisitor(v3);
  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 32))(v5, a1);
}

void WrdEshBackground::WrdEshBackground(WrdEshBackground *this)
{
  _QWORD *v1;

  EshBackground::EshBackground(this);
  *v1 = &off_24F3B2CE8;
  v1[41] = 0;
}

uint64_t WrdEshBackground::takeClientData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 328) = a2;
  return result;
}

uint64_t EshShape::getContentPropertiesReference(EshShape *this)
{
  return (uint64_t)this + 424;
}

void sub_22A1ED774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshContentProperties::isPositionHorizontalSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x38Fu);
}

uint64_t EshContentProperties::isPositionHorizontalRelativeSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x390u);
}

uint64_t EshContentProperties::isPositionVerticalSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x391u);
}

uint64_t EshContentProperties::isPositionVerticalRelativeSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x392u);
}

uint64_t EshContentProperties::isWrapDistanceLeftSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x384u);
}

uint64_t EshContentProperties::getDefaultWrapDistanceLeft(EshContentProperties *this)
{
  return 114300;
}

uint64_t EshContentProperties::isWrapDistanceTopSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x385u);
}

uint64_t EshContentProperties::isWrapDistanceRightSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x386u);
}

uint64_t EshContentProperties::isWrapDistanceBottomSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x387u);
}

uint64_t EshContentProperties::isAllowOverlapSet(EshContentProperties *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2 + 128, 0x3B6u);
}

uint64_t EshTextBox::getTextID(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x80u);
}

void sub_22A1EDBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1EDC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t EshTextBox::isNextTextboxSet(EshTextBox *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x8Au);
}

uint64_t EshTextBox::getNextTextbox(EshTextBox *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x8Au);
}

void sub_22A1EDDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EDED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getBorderTopReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 4u;
  return *((_QWORD *)this + 7);
}

uint64_t WrdParagraphProperties::getBorderLeftReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 8u;
  return *((_QWORD *)this + 8);
}

uint64_t WrdParagraphProperties::getBorderBottomReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x10u;
  return *((_QWORD *)this + 9);
}

uint64_t WrdParagraphProperties::getBorderRightReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x20u;
  return *((_QWORD *)this + 10);
}

uint64_t WrdParagraphProperties::getShadingReference(WrdParagraphProperties *this)
{
  *((_QWORD *)this + 2) |= 0x80uLL;
  return *((_QWORD *)this + 4);
}

void sub_22A1EE2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

WrdParagraphProperties *WrdParagraphProperties::setRightIndent(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x2000000000000000uLL;
  *((_DWORD *)this + 66) = a2;
  return this;
}

void sub_22A1EE6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1EE9C0(void *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int *v10;
  void *v11;

  if (a2 == 3)
  {
    v10 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v10);
    __cxa_end_catch();
  }
  else
  {
    v11 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v11, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A1EE988);
}

void sub_22A1EEAAC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  void *v9;
  void *v10;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A1EE988);
  }

  _Unwind_Resume(exc_buf);
}

void sub_22A1EEC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t WrdFileShapeAddressTable::getFileShapeAddressByCp(WrdFileShapeAddressTable *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *exception;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3) - v2;
  if ((v3 & 0x7FFFFFFF8) == 0)
  {
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v4 = 0;
  v5 = (v3 >> 3);
  while (*(_DWORD *)(*(_QWORD *)(v2 + 8 * v4) + 8) != a2)
  {
    if (v5 == ++v4)
      goto LABEL_5;
  }
  return *(_QWORD *)(v2 + 8 * v4);
}

void WrdFileShapeAddress::WrdFileShapeAddress(WrdFileShapeAddress *this, uint64_t a2)
{
  this->var0 = (void **)&off_24F3B3300;
  WrdFileShapeAddress::operator=((uint64_t)this, a2);
}

double WrdFileShapeAddress::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return result;
}

void sub_22A1EEF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1EEF64()
{
  JUMPOUT(0x22A1EEF54);
}

WrdTableProperties *WrdTableProperties::setRowHeight(WrdTableProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x100000000000uLL;
  *((_DWORD *)this + 75) = a2;
  return this;
}

uint64_t WrdParagraphProperties::getBorderBetweenReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x40u;
  return *((_QWORD *)this + 11);
}

WrdCharacterProperties *WrdCharacterProperties::setSpaceAfterEachChar(WrdCharacterProperties *this, int a2)
{
  *(_QWORD *)&this->var2 |= 0x80000000000uLL;
  this->var49 = a2;
  return this;
}

void sub_22A1EF20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1EF5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_22A1EF6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1EF748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1EF828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1EF944(void *a1, int a2)
{
  void *v2;
  void *v3;
  unsigned int *v6;
  void *v7;

  if (a2 == 3)
  {
    v6 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v6);
    __cxa_end_catch();
  }
  else
  {
    v7 = __cxa_begin_catch(a1);
    if (a2 == 2)
      objc_msgSend(v7, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A1EF91CLL);
}

void sub_22A1EF9C8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A1EF91CLL);
  }

  _Unwind_Resume(exc_buf);
}

void WrdEshClientData::~WrdEshClientData(WrdEshClientData *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdEshClientTextBox::~WrdEshClientTextBox(WrdEshClientTextBox *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdEshBackground::~WrdEshBackground(WrdEshBackground *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B2CE8;
  v2 = *((_QWORD *)this + 41);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 41) = 0;
  EshContentBase::~EshContentBase(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B2CE8;
  v2 = *((_QWORD *)this + 41);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 41) = 0;
  EshContentBase::~EshContentBase(this);
}

void sub_22A1EFC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1EFE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1EFECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1F0138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_22A1F06D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_22A1F07B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F0C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_22A1F0E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1F0F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WrdStory::~WrdStory(WrdStory *this)
{
  JUMPOUT(0x22E2DD408);
}

void WrdFileShapeAddress::~WrdFileShapeAddress(WrdFileShapeAddress *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptBinaryTagBlipAtom::PptBinaryTagBlipAtom(PptBinaryTagBlipAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6350;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6400;
  *(_WORD *)(v2 + 45) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptBinaryTagBlipAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptBinaryTagBlipAtom *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  EshHeader *v7;
  uint64_t v8;
  double v9;
  EshRecord *v10;
  EshRecord *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *exception;
  _DWORD *v17;
  _DWORD *v18;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 1)
    goto LABEL_11;
  *((_BYTE *)a2 + 46) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v5 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3) + 8;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v5 <= v6)
    goto LABEL_10;
  if (v5 - v6 <= 7)
  {
LABEL_11:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v7 = (EshHeader *)operator new(0x10uLL);
  EshHeader::makeDefault(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v9 = PptParserVisitor::parse(this, v7, v8, *((SsrwOOStream **)this + 1));
  v10 = (EshRecord *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, double))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), v7->var3, v7->var4, v9);
  v11 = v10;
  if (!v10
  {
    v17 = __cxa_allocate_exception(4uLL);
    *v17 = 4003;
  }
  v12 = EshRecord::setHeader(v11, v7);
  v13 = (*(uint64_t (**)(PptParserVisitor *, double))(*(_QWORD *)this + 1208))(this, v12);
  (*(void (**)(EshRecord *, uint64_t))(*(_QWORD *)v11 + 112))(v11, v13);
  if (*((_DWORD *)v11 + 4) + *((_DWORD *)v11 + 3) != *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3))
  {
    v18 = __cxa_allocate_exception(4uLL);
    *v18 = 4003;
  }
  v14 = *((_QWORD *)a2 + 6);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)a2 + 6) = v11;
  MEMORY[0x22E2DD408](v7, 0x1000C408B6DE1C6);
LABEL_10:
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A1F129C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptParserVisitor::getEscherVisitor(PptParserVisitor *this)
{
  return *((_QWORD *)this + 2);
}

void PptTextMasterStyle9Atom::PptTextMasterStyle9Atom(PptTextMasterStyle9Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom((EshAtom *)this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B98C8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9970;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextMasterStyle9Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 176))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextMasterStyle9Atom *a2)
{
  int v4;
  int v5;
  int v6;
  PptParaProperty9 *v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  EshRecord::getEndOffset((EshRecord *)a2);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if (v4 >= 1)
  {
    v5 = v4;
    LOWORD(v6) = 0;
    do
    {
      v7 = PptTextMasterStyle9Atom::addLevel(a2);
      PptParserVisitor::parseParaProperty9(this, v7);
      PptParserVisitor::parseCharProperty9(this, (PptCharProperty9 *)&v7[1]);
      v6 = (__int16)(v6 + 1);
    }
    while (v6 < v5);
  }
  PptParserVisitor::endRead(this, (EshRecord *)a2);
  return 1;
}

PptParaProperty9 *PptTextMasterStyle9Atom::addLevel(PptTextMasterStyle9Atom *this)
{
  PptParaProperty9 *v2;
  unint64_t v3;
  PptParaProperty9 **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptParaProperty9 **v14;
  char *v15;
  char *v16;
  char *v17;
  PptParaProperty9 *v18;

  v2 = (PptParaProperty9 *)operator new();
  PptParaProperty9::PptParaProperty9(v2);
  PptCharProperty9::PptCharProperty9((PptCharProperty9 *)&v2[1]);
  v3 = *((_QWORD *)this + 8);
  v4 = (PptParaProperty9 **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptParaProperty9 **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptParaProperty9 *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A1F1544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4074B9B04ELL);
  _Unwind_Resume(a1);
}

uint64_t EshTablePropVal<int>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A1F1598()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<int>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  int *v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<int,ChAllocator<int>>::resize(a2 + 8, *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = (int *)EshBasicTablePropVal<int>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement((EshPropValParserVisitor *)a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1F1678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<int>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 4 * a2;
}

uint64_t EshPropValParserVisitor::parseElement(EshPropValParserVisitor *this, int *a2)
{
  uint64_t result;
  _DWORD *exception;

  if (*((_WORD *)this + 10) != 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *a2 = result;
  return result;
}

void PptTextBlockStyling10Atom::PptTextBlockStyling10Atom(PptTextBlockStyling10Atom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BB160;
  *(_QWORD *)(v2 + 32) = &unk_24F3BB208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptTextBlockStyling10Atom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 776))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptTextBlockStyling10Atom *a2)
{
  unsigned int v4;
  int DataLength;
  unsigned int v6;
  PptCharProperty10 *v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  DataLength = EshRecord::getDataLength(a2);
  v6 = DataLength + v4;
  if (v4 < DataLength + v4)
  {
    do
    {
      v7 = PptTextBlockStyling10Atom::addStyle(a2);
      PptParserVisitor::parseCharProperty10(this, v7);
    }
    while ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) < v6);
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

PptCharProperty10 *PptTextBlockStyling10Atom::addStyle(PptTextBlockStyling10Atom *this)
{
  PptCharProperty10 *v2;
  unint64_t v3;
  PptCharProperty10 **v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  PptCharProperty10 **v14;
  char *v15;
  char *v16;
  char *v17;
  PptCharProperty10 *v18;

  v2 = (PptCharProperty10 *)operator new();
  PptCharProperty10::PptCharProperty10(v2);
  v3 = *((_QWORD *)this + 8);
  v4 = (PptCharProperty10 **)*((_QWORD *)this + 7);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (unint64_t)v4 - v6;
    v8 = (v3 - v6) >> 3;
    v9 = 2 * v8;
    if (2 * (int)v8 <= (v7 >> 3) + 1)
      v9 = (v7 >> 3) + 1;
    if (v8 >= 0x7FFFFFFF)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v9;
    if ((_DWORD)v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)this + 64, v10);
      v13 = v12;
    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    v14 = (PptCharProperty10 **)&v11[v7 & 0x7FFFFFFF8];
    v15 = &v11[8 * v13];
    *v14 = v2;
    v5 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 6);
    v16 = (char *)*((_QWORD *)this + 7);
    if (v16 != v17)
    {
      do
      {
        v18 = (PptCharProperty10 *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v14;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  *((_QWORD *)this + 7) = v5;
  return v2;
}

void sub_22A1F1970(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C404F21501ELL);
  _Unwind_Resume(a1);
}

void PptCharProperty10::PptCharProperty10(PptCharProperty10 *this)
{
  *(_BYTE *)this &= 0xF8u;
  *(_DWORD *)((char *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

void PptEntranceAnimationInfoAtom::PptEntranceAnimationInfoAtom(PptEntranceAnimationInfoAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  PptAnimationInfoAtom::PptAnimationInfoAtom(this, a2);
  *v2 = &off_24F3B5260;
  v2[4] = &unk_24F3B5308;
}

uint64_t PptAnimationInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimationInfoAtom *a2)
{
  int RecordType;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int16x8_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  int v19;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  RecordType = EshRecord::getRecordType(a2);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptColor::setColor((PptColor *)a2 + 4, v6);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 4)
    goto LABEL_44;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v8 = bswap32(v7);
  if (RecordType != 6023)
    v8 = v7;
  *((_BYTE *)a2 + 60) = v8 & 1;
  *((_BYTE *)a2 + 61) = (v8 & 4) != 0;
  v9 = (int16x8_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v8), (uint32x4_t)xmmword_22A4D4BE0);
  *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)a2 + 62) = vmovn_s16(v9).u32[0];
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 8)
    goto LABEL_44;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v11 = bswap32(v10);
  if (RecordType != 6023)
    v11 = v10;
  *((_DWORD *)a2 + 17) = v11;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 12)
    goto LABEL_44;
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  v13 = bswap32(v12);
  if (RecordType != 6023)
    v13 = v12;
  *((_DWORD *)a2 + 18) = v13;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 16)
    goto LABEL_44;
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  v15 = __rev16(v14);
  if (RecordType != 6023)
    v15 = v14;
  *((_WORD *)a2 + 38) = v15;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 18)
    goto LABEL_44;
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  v17 = __rev16(v16);
  if (RecordType != 6023)
    v17 = v16;
  *((_WORD *)a2 + 39) = v17;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 20)
    goto LABEL_44;
  *((_DWORD *)a2 + 20) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 21)
    goto LABEL_44;
  v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 22)
    goto LABEL_44;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  switch(v18)
  {
    case 2:
      LOBYTE(v19) = v19 + 30;
      v18 = 2;
      break;
    case 3:
      LOBYTE(v19) = v19 + 40;
      v18 = 3;
      break;
    case 8:
      LOBYTE(v19) = v19 + 50;
      v18 = 8;
      break;
    case 9:
      LOBYTE(v19) = v19 + 60;
      v18 = 9;
      break;
    case 10:
      LOBYTE(v19) = v19 + 60;
      v18 = 10;
      break;
    case 11:
      LOBYTE(v19) = v19 + 70;
      v18 = 11;
      break;
    case 12:
      if ((v19 & 0xFC) == 8)
      {
        v18 = 42;
      }
      else if ((v19 & 0xFC) == 0xC)
      {
        v18 = 32;
      }
      else if ((v19 - 16) >= 6)
      {
        if ((v19 - 22) >= 5)
        {
          if (v19 == 27)
          {
            v18 = 82;
          }
          else if (v19 == 28)
          {
            v18 = 52;
          }
          else
          {
            v18 = 12;
          }
        }
        else
        {
          v18 = 62;
        }
      }
      else
      {
        v18 = 72;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)a2 + 21) = v18;
  *((_DWORD *)a2 + 22) = v19;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 23
    || (*((_DWORD *)a2 + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 24)
    || (*((_DWORD *)a2 + 24) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 25)
    || (*((_BYTE *)a2 + 100) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v5 + 26))
  {
LABEL_44:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 2u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimSequenceDataAtom::PptAnimSequenceDataAtom(PptAnimSequenceDataAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE6A0;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE748;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 53) = 0;
}

uint64_t PptAnimSequenceDataAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 800))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimSequenceDataAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 60) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimConditionAtom::PptAnimConditionAtom(PptAnimConditionAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE2C0;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE368;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
}

uint64_t PptAnimConditionAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 808))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimConditionAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimVisualPageAtom::PptAnimVisualPageAtom(PptAnimVisualPageAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6058;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6100;
  *(_DWORD *)(v2 + 48) = 1;
}

uint64_t PptAnimVisualPageAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 816))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimVisualPageAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimSetBehaviorAtom::PptAnimSetBehaviorAtom(PptAnimSetBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5E68;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5F10;
  *(_DWORD *)(v2 + 48) = 1;
}

uint64_t PptAnimSetBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 832))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimSetBehaviorAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

CsString *PptAnimVariantAtom::setWString(PptAnimVariantAtom *this, const CsString *a2)
{
  CsString *v3;

  *((_DWORD *)this + 12) = 3;
  v3 = (CsString *)((char *)this + 64);
  *((_DWORD *)this + 20) = 0;
  bzero(*((void **)this + 9), 2 * *((unsigned int *)this + 21));
  return CsString::append(v3, a2);
}

void PptAnimBehaviorAtom::PptAnimBehaviorAtom(PptAnimBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE988;
  *(_QWORD *)(v2 + 32) = &unk_24F3BEA30;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
}

uint64_t PptAnimBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 824))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimBehaviorAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimVisualElementAtom::PptAnimVisualElementAtom(PptAnimVisualElementAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5F60;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6008;
}

uint64_t PptAnimVisualElementAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 920))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimVisualElementAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8
    || (*((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (*((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *((_DWORD *)a2 + 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimBuildAtom::PptAnimBuildAtom(PptAnimBuildAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B54B8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5560;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 54) = 0;
}

uint64_t PptAnimBuildAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 928))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimBuildAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 14) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8
    || (*((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    || (*((_BYTE *)a2 + 60) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        *((_BYTE *)a2 + 61) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimParagraphBuildAtom::PptAnimParagraphBuildAtom(PptAnimParagraphBuildAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5C78;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5D20;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
}

uint64_t PptAnimParagraphBuildAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 944))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimParagraphBuildAtom *a2)
{
  int v4;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_DWORD *)a2 + 13) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        *((_BYTE *)a2 + 56) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        *((_BYTE *)a2 + 57) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        *((_BYTE *)a2 + 58) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        *((_BYTE *)a2 + 59) = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) != 0,
        *((_DWORD *)a2 + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 16))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimAnimateBehaviorAtom::PptAnimAnimateBehaviorAtom(PptAnimAnimateBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BDFD8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE080;
  *(_QWORD *)(v2 + 48) = -1;
  *(_BYTE *)(v2 + 56) = 0;
}

uint64_t PptAnimAnimateBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 872))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimAnimateBehaviorAtom *a2)
{
  int v4;
  int v5;
  int v6;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptAnimAnimateBehaviorAtom::setCalcMode((uint64_t)a2, v5);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4
    || (*((_BYTE *)a2 + 56) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)),
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptAnimAnimateBehaviorAtom::setValueType((uint64_t)a2, v6);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptAnimAnimateBehaviorAtom::setCalcMode(uint64_t result, int a2)
{
  _DWORD *exception;

  if (a2 == -1 || a2 >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t PptAnimAnimateBehaviorAtom::setValueType(uint64_t result, int a2)
{
  _DWORD *exception;

  if (a2 == -1 || a2 >= 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  *(_DWORD *)(result + 52) = a2;
  return result;
}

void PptAnimAnimationValueAtom::PptAnimAnimationValueAtom(PptAnimAnimationValueAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE1C8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE270;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimAnimationValueAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 880))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimAnimationValueAtom *a2)
{
  int v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptAnimAnimationValueAtom::setTime((uint64_t)a2, v4);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

uint64_t PptAnimAnimationValueAtom::setTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void sub_22A1F2E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShapeImageData::getChromakey(EshShapeImageData *this)
{
  return EshOpt::getColorProperty(*((_QWORD *)this + 2), 0x107u);
}

void sub_22A1F3044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1F30E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **EshGroupProperties::getTableProperties(EshGroupProperties *this)
{
  return EshOpt::getProperty(*((_QWORD *)this + 2) + 128, 0x39Fu);
}

void sub_22A1F31C0(void *a1, int a2)
{
  void *v2;
  void *v3;

  objc_begin_catch(a1);
  if (a2 == 2)
  {

    objc_end_catch();
    JUMPOUT(0x22A1F319CLL);
  }

  objc_exception_rethrow();
}

void sub_22A1F31EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_22A1F32B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F3380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F3408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F34D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1F35A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F3778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F3A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x22E2DD408](v3, 0x1020C405730B0C9);

  _Unwind_Resume(a1);
}

uint64_t EshContentProperties::getLeft(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 60);
}

uint64_t EshContentProperties::getRight(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 62);
}

uint64_t EshContentProperties::getTop(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 61);
}

uint64_t EshContentProperties::getBottom(EshContentProperties *this)
{
  return *((unsigned int *)this->var2 + 63);
}

void sub_22A1F3B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t OABTable2DArray<EshShape *>::OABTable2DArray(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v6;
  int v7;
  int v8;
  int i;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if ((a3 * a2) >> 29)
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Dimensions out of bounds"), &stru_24F3BFFF8);
  *(_QWORD *)(a1 + 8) = operator new[]();
  v6 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 4);
    do
    {
      if (v8 >= 1)
      {
        for (i = 0; i < v8; ++i)
        {
          *(_QWORD *)OABTable2DArray<EshShape *>::element(a1, v7, i) = a4;
          v8 = *(_DWORD *)(a1 + 4);
        }
        v6 = *(_DWORD *)a1;
      }
      ++v7;
    }
    while (v7 < v6);
  }
  return a1;
}

uint64_t OABTable2DArray<EshShape *>::element(uint64_t a1, int a2, int a3)
{
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;

  if (a2 < 0 || *(_DWORD *)a1 <= a2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OABTable2DArray<EshShape *>::element(int, int) [E = EshShape *]");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 160, 0, "Index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (a3 < 0 || (v8 = *(_DWORD *)(a1 + 4), v8 <= a3))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OABTable2DArray<EshShape *>::element(int, int) [E = EshShape *]");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 161, 0, "Index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v8 = *(_DWORD *)(a1 + 4);
  }
  return *(_QWORD *)(a1 + 8) + 8 * (a3 + v8 * a2);
}

void sub_22A1F3DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t OABTable2DArray<OABTableCell>::OABTable2DArray(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int i;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  v6 = a3 * a2;
  if ((a3 * a2) >= 0xAAAAAAB)
  {
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Dimensions out of bounds"), &stru_24F3BFFF8);
    v6 = *(_DWORD *)(a1 + 4) * *(_DWORD *)a1;
  }
  v7 = v6;
  is_mul_ok(v6, 0x18uLL);
  v8 = (_QWORD *)operator new[]();
  *v8 = 24;
  v8[1] = v7;
  if ((_DWORD)v7)
  {
    v9 = 24 * v7;
    v10 = v8 + 2;
    do
    {
      *v10 = 0;
      v10[1] = 0;
      *((_WORD *)v10 + 8) = 0;
      v10 += 3;
      v9 -= 24;
    }
    while (v9);
  }
  *(_QWORD *)(a1 + 8) = v8 + 2;
  v11 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a1 + 4);
    do
    {
      if (v13 >= 1)
      {
        for (i = 0; i < v13; ++i)
        {
          v15 = OABTable2DArray<OABTableCell>::element(a1, v12, i);
          objc_storeStrong((id *)v15, *(id *)a4);
          v16 = *(_QWORD *)(a4 + 8);
          *(_WORD *)(v15 + 16) = *(_WORD *)(a4 + 16);
          *(_QWORD *)(v15 + 8) = v16;
          v13 = *(_DWORD *)(a1 + 4);
        }
        v11 = *(_DWORD *)a1;
      }
      ++v12;
    }
    while (v12 < v11);
  }

  return a1;
}

void sub_22A1F3F54(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t OABTable2DArray<OABTableCell>::element(uint64_t a1, int a2, int a3)
{
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;

  if (a2 < 0 || *(_DWORD *)a1 <= a2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OABTable2DArray<OABTableCell>::element(int, int) [E = OABTableCell]");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 160, 0, "Index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
  }
  if (a3 < 0 || (v8 = *(_DWORD *)(a1 + 4), v8 <= a3))
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "E &OABTable2DArray<OABTableCell>::element(int, int) [E = OABTableCell]");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/OfficeArt/Binary/Mapper/OABTable.mm");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[OITSUAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](OITSUAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 161, 0, "Index out of range");

    +[OITSUAssertionHandler logBacktraceThrottled](OITSUAssertionHandler, "logBacktraceThrottled");
    v8 = *(_DWORD *)(a1 + 4);
  }
  return *(_QWORD *)(a1 + 8) + 24 * (a3 + v8 * a2);
}

void sub_22A1F40AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F43D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_22A1F446C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

PptParaProperty9 *PptParaProperty9::copyOverridesFromParent(PptParaProperty9 *this, const PptParaProperty9 *a2)
{
  char var0;

  var0 = (char)this->var0;
  if ((*(_BYTE *)&this->var0 & 1) != 0)
  {
    if ((*(_BYTE *)&this->var0 & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    var0 = var0 & 0xFE | *(_BYTE *)&a2->var0 & 1;
    *(_BYTE *)&this->var0 = var0;
    *((_WORD *)&this->var0 + 1) = *((_WORD *)&a2->var0 + 1);
    if ((var0 & 2) != 0)
    {
LABEL_3:
      if ((var0 & 4) != 0)
        return this;
LABEL_7:
      *(_BYTE *)&this->var0 = *(_BYTE *)&a2->var0 & 4 | var0 & 0xFB;
      this->var3 = a2->var3;
      return this;
    }
  }
  var0 = *(_BYTE *)&a2->var0 & 2 | var0 & 0xFD;
  *(_BYTE *)&this->var0 = var0;
  LOBYTE(this->var1) = a2->var1;
  if ((var0 & 4) == 0)
    goto LABEL_7;
  return this;
}

void sub_22A1F4654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshShadow::getOpacity(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x204u);
}

uint64_t EshShadow::getOffsetX(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x205u);
}

uint64_t EshShadow::getOffsetY(EshShadow *this)
{
  return *(unsigned int *)EshOpt::getProperty(*((_QWORD *)this + 2), 0x206u);
}

void PptEntranceAnimationInfoAtom::~PptEntranceAnimationInfoAtom(PptEntranceAnimationInfoAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimSequenceDataAtom::~PptAnimSequenceDataAtom(PptAnimSequenceDataAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimConditionAtom::~PptAnimConditionAtom(PptAnimConditionAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimVisualPageAtom::~PptAnimVisualPageAtom(PptAnimVisualPageAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimSetBehaviorAtom::~PptAnimSetBehaviorAtom(PptAnimSetBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimBehaviorAtom::~PptAnimBehaviorAtom(PptAnimBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimVisualElementAtom::~PptAnimVisualElementAtom(PptAnimVisualElementAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimAnimateBehaviorAtom::~PptAnimAnimateBehaviorAtom(PptAnimAnimateBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimAnimationValueAtom::~PptAnimAnimationValueAtom(PptAnimAnimationValueAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimBuildAtom::~PptAnimBuildAtom(PptAnimBuildAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimParagraphBuildAtom::~PptAnimParagraphBuildAtom(PptAnimParagraphBuildAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void EshTablePropVal<int>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F558;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void PptTextBlockStyling10Atom::~PptTextBlockStyling10Atom(PptTextBlockStyling10Atom *this)
{
  PptTextBlockStyling10Atom::~PptTextBlockStyling10Atom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3BB160;
  *((_QWORD *)this + 4) = &unk_24F3BB208;
  PptTextBlockStyling10Atom::reset((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t PptTextBlockStyling10Atom::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = this;
  v2 = *(_QWORD *)(this + 48);
  v3 = (uint64_t *)(this + 48);
  v4 = *(_QWORD *)(this + 56) - v2;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    do
    {
      v7 = *(_QWORD *)(v1 + 48);
      v8 = *(_QWORD *)(v1 + 56) - v7;
      if (v5 >= (v8 >> 3))
        goto LABEL_10;
      this = *(_QWORD *)(v7 + 8 * v5);
      if (this)
      {
        this = MEMORY[0x22E2DD408](this, 0x1000C404F21501ELL);
        v7 = *(_QWORD *)(v1 + 48);
        v8 = *(_QWORD *)(v1 + 56) - v7;
      }
      if (v5 >= (v8 >> 3))
LABEL_10:
        std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
      *(_QWORD *)(v7 + 8 * v5++) = 0;
    }
    while (v6 != v5);
    v2 = *v3;
  }
  *(_QWORD *)(v1 + 56) = v2;
  return this;
}

void PptTextMasterStyle9Atom::~PptTextMasterStyle9Atom(PptTextMasterStyle9Atom *this)
{
  PptTextMasterStyle9Atom::~PptTextMasterStyle9Atom(this);
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B98C8;
  *((_QWORD *)this + 4) = &unk_24F3B9970;
  PptTextMasterStyle9Atom::cleanup(this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

PptTextMasterStyle9Atom *PptTextMasterStyle9Atom::cleanup(PptTextMasterStyle9Atom *this)
{
  PptTextMasterStyle9Atom *v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if (((*((_QWORD *)this + 7) - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    do
    {
      v4 = v3;
      this = *(PptTextMasterStyle9Atom **)(v2 + 8 * v3);
      if (this)
      {
        this = (PptTextMasterStyle9Atom *)MEMORY[0x22E2DD408](this, 0x1000C4074B9B04ELL);
        v2 = *((_QWORD *)v1 + 6);
      }
      *(_QWORD *)(v2 + 8 * v4) = 0;
      *(_QWORD *)(*((_QWORD *)v1 + 6) + 8 * v4) = 0;
      v3 = v4 + 1;
      v2 = *((_QWORD *)v1 + 6);
    }
    while (((unint64_t)(*((_QWORD *)v1 + 7) - v2) >> 3) > (unsigned __int16)(v4 + 1));
  }
  *((_QWORD *)v1 + 7) = v2;
  return this;
}

void PptBinaryTagBlipAtom::~PptBinaryTagBlipAtom(PptBinaryTagBlipAtom *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B6350;
  *((_QWORD *)this + 4) = &unk_24F3B6400;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B6350;
  *((_QWORD *)this + 4) = &unk_24F3B6400;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
}

uint64_t EshTablePropVal<EshComputedPoint>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A1F4A90()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshComputedPoint>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  EshComputedValue *v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<EshComputedPoint,ChAllocator<EshComputedPoint>>::resize((uint64_t *)(a2 + 8), *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = (EshComputedValue *)EshBasicTablePropVal<EshComputedPoint>::operator[](a2, v6);
      EshPropValParserVisitor::parseValue(a1, v7, *(unsigned __int16 *)(a1 + 20) >> 1);
      EshPropValParserVisitor::parseValue(a1, v7 + 1, *(unsigned __int16 *)(a1 + 20) >> 1);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1F4B98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshComputedPoint>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 4) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 16 * a2;
}

void EshArcRule::EshArcRule(EshArcRule *this)
{
  uint64_t v1;

  EshAtom::EshAtom(this, 0xF014u, 0);
  *(_QWORD *)v1 = &off_24F39E230;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t EshArcRule::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1);
}

uint64_t EshTablePropVal<EshGradientStop>::accept(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1);
  else
    return 1;
}

uint64_t sub_22A1F4D30()
{
  return 1;
}

void EshPropValParserVisitor::parseTable<EshTablePropVal<EshGradientStop>>(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v4 = (unsigned __int16 *)operator new(6uLL);
  *(_DWORD *)v4 = 0;
  v4[2] = 0;
  *v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v4[2] = v5;
  *(_WORD *)(a1 + 20) = v5;
  std::vector<EshGradientStop,ChAllocator<EshGradientStop>>::resize((uint64_t *)(a2 + 8), *v4);
  if (*v4)
  {
    v6 = 0;
    do
    {
      v7 = EshBasicTablePropVal<EshGradientStop>::operator[](a2, v6);
      EshPropValParserVisitor::parseElement(a1, v7);
      ++v6;
    }
    while (v6 < *v4);
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1F4E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C40274DC3F3);
  _Unwind_Resume(a1);
}

uint64_t EshBasicTablePropVal<EshGradientStop>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 12 * a2;
}

void EshPropValParserVisitor::parseElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  EshFixedPointUtil *v5;
  _DWORD *exception;

  if (*(_WORD *)(a1 + 20) != 8)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 7005;
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  *(_WORD *)(a2 + 2) = v4;
  *(_WORD *)(a2 + 4) = BYTE1(v4);
  *(_WORD *)(a2 + 6) = BYTE2(v4);
  *(_WORD *)a2 = 255;
  v5 = (EshFixedPointUtil *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  *(float *)(a2 + 8) = EshFixedPointUtil::toFloat(v5);
}

uint64_t `non-virtual thunk to'PptAtom::hasId(PptAtom *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t `non-virtual thunk to'PptAtom::getId(PptAtom *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EshContentProperties::getBehindText(EshContentProperties *this)
{
  return *(unsigned __int8 *)EshOpt::getProperty((uint64_t)this->var2, 0x3BAu);
}

void sub_22A1F5064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F5170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t EshFill::isFocusLeftSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Du);
}

uint64_t EshFill::isFocusTopSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Eu);
}

uint64_t EshFill::isFocusRightSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x18Fu);
}

uint64_t EshFill::isFocusBottomSet(EshFill *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x190u);
}

uint64_t *EshFill::getColors(EshFill *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x197u);
}

uint64_t EshStroke::getStartArrowWidth(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D2u);
}

uint64_t EshStroke::getStartArrowLength(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D3u);
}

uint64_t EshStroke::getEndArrowWidth(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D4u);
}

uint64_t EshStroke::getEndArrowLength(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D5u);
}

_DWORD *EshFormula::operator=(_DWORD *result, _DWORD *a2)
{
  uint64_t i;
  _DWORD *v3;
  int v4;

  *result = *a2;
  for (i = 1; i != 7; i += 2)
  {
    v3 = &result[i];
    v4 = a2[i];
    *((_WORD *)v3 + 2) = a2[i + 1];
    *v3 = v4;
  }
  return result;
}

uint64_t EshBasicTablePropVal<EshFormula>::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _DWORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (-1227133513 * ((unint64_t)(*(_QWORD *)(a1 + 16) - v2) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1005;
  }
  return v2 + 28 * a2;
}

void sub_22A1F55D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F57BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1F593C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F5D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *EshTablePropVal<EshPathCommand>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39D6E0;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedValue>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A1F5DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeCommands(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(_QWORD *)(a1 + 16), 0x146u, a2);
}

_QWORD *EshTablePropVal<EshFormula>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39D780;
  v2[1] = 0;
  EshBasicTablePropVal<EshFormula>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A1F5E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeFormulas(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(_QWORD *)(a1 + 16), 0x156u, a2);
}

_QWORD *EshTablePropVal<EshComputedRect>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  v2[3] = 0;
  *v2 = &off_24F39D820;
  v2[1] = 0;
  EshBasicTablePropVal<EshComputedRect>::operator=((uint64_t)v2, a1);
  return v2;
}

void sub_22A1F5EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **EshPath::takeTextBoxRects(uint64_t a1, uint64_t *a2)
{
  return EshOpt::takeComplexProperty(*(_QWORD *)(a1 + 16), 0x157u, a2);
}

double EshShapeProperties::setCoordLeft(EshShapeProperties *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x140u, 2, &v4).n128_u64[0];
  return result;
}

double EshShapeProperties::setCoordTop(EshShapeProperties *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x141u, 2, &v4).n128_u64[0];
  return result;
}

double EshShapeProperties::setCoordRight(EshShapeProperties *this, unsigned int a2)
{
  EshContentData *var2;
  double result;
  __n128 v4;

  var2 = this->var2;
  v4 = (__n128)a2;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, 0x142u, 2, &v4).n128_u64[0];
  return result;
}

double EshShapeProperties::setAdj(EshShapeProperties *this, int a2, unsigned int a3)
{
  EshContentData *var2;
  double result;
  __n128 v5;

  var2 = this->var2;
  v5 = (__n128)a3;
  *(_QWORD *)&result = EshOpt::setProperty((uint64_t)var2, a2 + 327, 2, &v5).n128_u64[0];
  return result;
}

uint64_t EshShapeProperties::getCoordLeft(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x140u);
}

uint64_t EshShapeProperties::getCoordTop(EshShapeProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x141u);
}

uint64_t *EshPath::getFormulas(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x156u);
}

uint64_t *EshPath::getTextBoxRects(EshPath *this)
{
  return *EshOpt::getProperty((uint64_t)this->var2, 0x157u);
}

uint64_t EshFill::getFocusLeft(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Du);
}

uint64_t EshFill::getFocusTop(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Eu);
}

uint64_t EshFill::getFocusRight(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x18Fu);
}

uint64_t EshFill::getFocusBottom(EshFill *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x190u);
}

void sub_22A1F6714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EshTablePropVal<EshGradientStop>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39F4B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshTablePropVal<EshComputedPoint>::~EshTablePropVal(_QWORD *a1)
{
  void *v2;

  *a1 = off_24F39D6A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

void EshArcRule::~EshArcRule(EshArcRule *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t PptAnimVariantAtom::setBoolean(uint64_t this, char a2)
{
  *(_DWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 52) = a2;
  return this;
}

uint64_t EshStroke::getJoinStyle(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1D6u);
}

uint64_t EshStroke::isMiterLimitSet(EshStroke *this)
{
  return EshOpt::isPropertySet((uint64_t)this->var2, 0x1CCu);
}

uint64_t EshStroke::getMiterLimit(EshStroke *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x1CCu);
}

void sub_22A1F6930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WrdDocumentFileRecord::appendListToStyleIndex(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  v6 = a1[3];
  v4 = (uint64_t)(a1 + 3);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = (unint64_t)v7 - v9;
    v11 = (v5 - v9) >> 2;
    v12 = 2 * v11;
    if (2 * (int)v11 <= (v10 >> 2) + 1)
      v12 = (v10 >> 2) + 1;
    if (v11 >= 0x7FFFFFFF)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>(v4, v13);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = &v14[v10 & 0x3FFFFFFFCLL];
    v18 = &v14[4 * v16];
    *(_DWORD *)v17 = *a2;
    v8 = v17 + 4;
    v20 = (char *)a1[1];
    v19 = (char *)a1[2];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v17 - 1) = v21;
        v17 -= 4;
      }
      while (v19 != v20);
      v19 = (char *)a1[1];
    }
    a1[1] = v17;
    a1[2] = v8;
    a1[3] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[2] = v8;
}

WrdParagraphProperties *WrdParagraphProperties::setWidowed(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x100000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFDFF | ((a2 & 1) << 9);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAutoSpaceEastAsianAndAlphabeticCharacters(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x2000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFBFFF | ((a2 & 1) << 14);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAutoSpaceEastAsianAndNumericCharacters(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x4000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFF7FFF | ((a2 & 1) << 15);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAdjustRightMargin(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x800000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFF7FFFF | ((a2 & 1) << 19);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setOverflowPunctuation(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x800000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFEFFF | ((a2 & 1) << 12);
  return this;
}

uint64_t WrdParagraphProperties::setFontAlignment(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x8000000000uLL;
  *(_DWORD *)(result + 164) = a2;
  return result;
}

void WrdTapParser::applySprm(WrdBaseParser *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  unsigned int i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 v15;
  unsigned __int16 *v16;
  unsigned __int16 v17;
  unsigned __int8 *v18;
  int SizeOfSPRMParameter;
  _DWORD *exception;
  unsigned __int16 *v21;
  unsigned int UInt16;
  unsigned __int16 v25;

  if (*(unsigned __int16 *)(a3 + 8) == 54890)
  {
    if (*(_DWORD *)(a2 + 152) == 3)
    {
      *a6 = WrdProperty::getSizeOfSPRMParameter(a3);
      v21 = a4 + 1;
      if (a4 + 1 >= a5)
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 1004;
      }
      UInt16 = CsLeReadUInt16(a4);
      for (i = 0; i != 12; ++i)
      {
        if (((UInt16 >> i) & 1) != 0)
        {
          v25 = 0;
          v12 = operator new(0x10uLL);
          *v12 = 0;
          v12[1] = 0;
          v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a7 + 280) + 16))(*(_QWORD *)(a7 + 280), 61);
          if (v13)
            v14 = (uint64_t *)(v13 - 8);
          else
            v14 = 0;
          if (*a6 >= 3u)
          {
            v15 = 2;
            v16 = v21;
            do
            {
              WrdPropertyParser::parseSPRM(v16, (unint64_t)a5, &v25, (uint64_t)v12);
              v17 = v25;
              v18 = (unsigned __int8 *)v16 + v25;
              if (*(_DWORD *)v12 == 5)
              {
                WrdTapParser::applySprm(a1, (uint64_t)v14, (uint64_t)v12, v18, a5, &v25);
                SizeOfSPRMParameter = v25;
              }
              else
              {
                SizeOfSPRMParameter = WrdProperty::getSizeOfSPRMParameter((uint64_t)v12);
                v25 = SizeOfSPRMParameter;
              }
              v16 = (unsigned __int16 *)&v18[SizeOfSPRMParameter];
              v15 += SizeOfSPRMParameter + v17;
            }
            while (*a6 > v15);
          }
          WrdStyle::takeTableProps(a2, i, v14);
          MEMORY[0x22E2DD408](v12, 0x1000C4099076E91);
        }
      }
    }
  }
  else
  {
    WrdTapParser::applySprm(a1, *(_QWORD *)(a2 + 64), a3, (unsigned __int8 *)a4, a5, a6);
  }
}

void sub_22A1F6D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (v11)
    MEMORY[0x22E2DD408](v11, 0x1000C4099076E91);
  _Unwind_Resume(exception_object);
}

WrdTableProperties *WrdTableProperties::setTableStyleIndex(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 0x10000000u;
  *((_WORD *)this + 164) = a2;
  return this;
}

uint64_t WrdTableProperties::setWidthOfInvisibleCellBeforeUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x20000uLL;
  *(_DWORD *)(result + 140) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setWidthOfInvisibleCellBefore(WrdTableProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x800000000000000uLL;
  *((_WORD *)this + 170) = a2;
  return this;
}

WrdTableProperties *WrdTableProperties::setDefaultTableTopCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x8000000000000000;
  *((_WORD *)this + 173) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableTopCellPaddingUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x80000uLL;
  *(_DWORD *)(result + 148) = a2;
  return result;
}

WrdTableProperties *WrdTableProperties::setDefaultTableBottomCellPadding(WrdTableProperties *this, __int16 a2)
{
  *((_DWORD *)this + 6) |= 2u;
  *((_WORD *)this + 175) = a2;
  return this;
}

uint64_t WrdTableProperties::setDefaultTableBottomCellPaddingUnit(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x200000uLL;
  *(_DWORD *)(result + 156) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setKeepOnOnePage(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x800uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFFFFF7 | (8 * (a2 & 1));
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setTrailingIndent(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x800000000000000uLL;
  *((_DWORD *)this + 62) = a2;
  return this;
}

void sub_22A1F6ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F6F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1F7268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1F74A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t WrdStyle::isTablePartDefinedForParagraphProperties(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v2;
  unsigned int v3;
  _DWORD *exception;

  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v2 = *(uint64_t **)(a1 + 88);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3)
      break;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

uint64_t WrdStyle::isTablePartDefinedForCharacterProperties(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v2;
  unsigned int v3;
  _DWORD *exception;

  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v2 = *(uint64_t **)(a1 + 112);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3)
      break;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

uint64_t WrdStyle::isTablePartDefinedForTableProperties(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v2;
  unsigned int v3;
  _DWORD *exception;

  if (*(_DWORD *)(a1 + 152) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  v2 = *(uint64_t **)(a1 + 136);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = *((_DWORD *)v2 + 8);
    if (a2 >= v3)
      break;
LABEL_6:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

void sub_22A1F7790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WrdDocumentFileRecord::getListToStyleIndex(WrdDocumentFileRecord *this, unsigned int a2)
{
  return *((_QWORD *)this + 1) + 4 * a2;
}

WrdSectionProperties *WrdSectionProperties::applyVersion10Defaults(WrdSectionProperties *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if ((v1 & 0x40000000000000) != 0)
  {
    if ((v1 & 0x400000000000000) != 0)
      goto LABEL_3;
  }
  else
  {
    *((_DWORD *)this + 63) = 1;
    v1 |= 0x40000000000000uLL;
    *((_QWORD *)this + 2) = v1;
    if ((v1 & 0x400000000000000) != 0)
    {
LABEL_3:
      if ((v1 & 0x800000000000000) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  *((_DWORD *)this + 67) = 0;
  v1 |= 0x400000000000000uLL;
  *((_QWORD *)this + 2) = v1;
  if ((v1 & 0x800000000000000) != 0)
  {
LABEL_4:
    if ((v1 & 0x1000000000000000) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  *((_DWORD *)this + 68) = 0;
  v1 |= 0x800000000000000uLL;
  *((_QWORD *)this + 2) = v1;
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_5:
    if ((v1 & 0x2000000000000000) != 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *((_WORD *)this + 138) = 1;
  v1 |= 0x1000000000000000uLL;
  *((_QWORD *)this + 2) = v1;
  if ((v1 & 0x2000000000000000) != 0)
  {
LABEL_6:
    if ((v1 & 0x100000000000000) != 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  *((_WORD *)this + 139) = 1;
  v1 |= 0x2000000000000000uLL;
  *((_QWORD *)this + 2) = v1;
  if ((v1 & 0x100000000000000) != 0)
  {
LABEL_7:
    if ((v1 & 0x200000000000000) != 0)
      return this;
LABEL_15:
    *((_DWORD *)this + 66) = 2;
    *((_QWORD *)this + 2) = v1 | 0x200000000000000;
    return this;
  }
LABEL_14:
  *((_DWORD *)this + 65) = 0;
  v1 |= 0x100000000000000uLL;
  *((_QWORD *)this + 2) = v1;
  if ((v1 & 0x200000000000000) == 0)
    goto LABEL_15;
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setHiddenInWebView(WrdCharacterProperties *this, char a2)
{
  *(_QWORD *)&this->var2 |= 0x10000000000uLL;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 85) & 0xFFFFFEFF | ((a2 & 1) << 8);
  return this;
}

void PptExMediaAtom::PptExMediaAtom(PptExMediaAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B8080;
  *(_QWORD *)(v2 + 32) = &unk_24F3B8128;
  *(_WORD *)(v2 + 52) = 0;
  *(_BYTE *)(v2 + 54) = 0;
}

uint64_t PptExMediaAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 568))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptExMediaAtom *a2)
{
  int v4;
  char v5;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  *((_BYTE *)a2 + 52) = v5 & 1;
  *((_BYTE *)a2 + 53) = (v5 & 2) != 0;
  *((_BYTE *)a2 + 54) = (v5 & 4) != 0;
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSoundCollAtom::PptSoundCollAtom(PptSoundCollAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BAB80;
  *(_QWORD *)(v2 + 32) = &unk_24F3BAC28;
}

uint64_t PptSoundCollAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 672))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSoundCollAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptSoundDataAtom::PptSoundDataAtom(PptSoundDataAtom *this, const EshHeader *a2)
{
  _QWORD *v2;

  PptBinaryDataAtom::PptBinaryDataAtom(this, a2);
  *v2 = &off_24F3BAC78;
  v2[4] = &unk_24F3BAD30;
}

void PptBinaryDataAtom::PptBinaryDataAtom(PptBinaryDataAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B6248;
  *(_QWORD *)(v2 + 32) = &unk_24F3B6300;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptSoundDataAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 272))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSoundDataAtom *a2)
{
  int v4;
  int Offset;
  int v6;
  uint64_t v7;
  OcBinaryData *BinaryDataReference;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  Offset = EshRecord::getOffset(a2);
  (*(void (**)(PptSoundDataAtom *, _QWORD))(*(_QWORD *)a2 + 160))(a2, (v4 - Offset - 8));
  v6 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 3);
  v7 = v6 - (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8;
  BinaryDataReference = PptBinaryDataAtom::getBinaryDataReference(a2);
  PptParserVisitor::delayReadData(this, BinaryDataReference, v7);
  return 1;
}

OcBinaryData *PptBinaryDataAtom::startAt(PptBinaryDataAtom *this, unsigned int a2)
{
  OcBinaryData *result;

  result = PptBinaryDataAtom::getBinaryDataReference(this);
  result->var1 = a2;
  return result;
}

OcBinaryData *PptBinaryDataAtom::getBinaryDataReference(PptBinaryDataAtom *this)
{
  OcBinaryData *v1;

  v1 = (OcBinaryData *)*((_QWORD *)this + 6);
  if (!v1)
  {
    v1 = (OcBinaryData *)operator new(0x30uLL);
    OcBinaryData::OcBinaryData(v1);
    *((_QWORD *)this + 6) = v1;
  }
  return v1;
}

void sub_22A1F7D2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PptParserVisitor::delayReadData(PptParserVisitor *this, OcBinaryData *a2, uint64_t a3)
{
  SsrwOOStream *v6;
  unsigned int v7;
  unsigned int v8;

  v6 = (SsrwOOStream *)*((_QWORD *)this + 1);
  v7 = (*((uint64_t (**)(SsrwOOStream *))v6->var0 + 4))(v6);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  OcBinaryData::setDataInfo(a2, v6, v7, v8, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a3, 1);
}

uint64_t EshTextPath::getDefaultSize(EshTextPath *this)
{
  return 2359296;
}

void PptExMediaAtom::~PptExMediaAtom(PptExMediaAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSoundCollAtom::~PptSoundCollAtom(PptSoundCollAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSoundDataAtom::~PptSoundDataAtom(PptSoundDataAtom *this)
{
  *(_QWORD *)this = &off_24F3BAC78;
  *((_QWORD *)this + 4) = &unk_24F3BAD30;
  PptBinaryDataAtom::~PptBinaryDataAtom(this);
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BAC78;
  *((_QWORD *)this + 4) = &unk_24F3BAD30;
  PptBinaryDataAtom::~PptBinaryDataAtom(this);
}

void PptBinaryDataAtom::~PptBinaryDataAtom(PptBinaryDataAtom *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B6248;
  *((_QWORD *)this + 4) = &unk_24F3B6300;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B6248;
  *((_QWORD *)this + 4) = &unk_24F3B6300;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3B6248;
  *((_QWORD *)this + 4) = &unk_24F3B6300;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
  JUMPOUT(0x22E2DD408);
}

void sub_22A1F7FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F8060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F8148(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WrdNoteReferencePositionTable::setCP(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;

  if (*(unsigned __int16 *)(this + 32) > a2)
  {
    v3 = *(_QWORD *)(this + 16);
    if (v3)
      *(_DWORD *)(v3 + 4 * a2) = a3;
  }
  return this;
}

uint64_t WrdNoteReferencePositionTable::setAuto(uint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v3;

  if (*(unsigned __int16 *)(this + 32) > a2)
  {
    v3 = *(_QWORD *)(this + 24);
    if (v3)
      *(_WORD *)(v3 + 2 * a2) = a3;
  }
  return this;
}

void WrdNote::WrdNote(WrdNote *this)
{
  *(_QWORD *)this = &off_24F3B3770;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 14) = 0;
}

uint64_t WrdNoteReferencePositionTable::getAuto(WrdNoteReferencePositionTable *this, unsigned int a2)
{
  uint64_t v2;

  if (*((unsigned __int16 *)this + 16) <= a2)
  {
    LOWORD(v2) = 0;
  }
  else
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      LOWORD(v2) = *(_WORD *)(v2 + 2 * a2);
  }
  return (__int16)v2;
}

uint64_t EshContentProperties::getPositionHorizontal(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x38Fu);
}

void sub_22A1F82B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1F832C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F8424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F85D0(void *a1, WrdCharacterTextRun *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  int v12;
  unsigned int *v14;
  void *v15;

  v11 = v10;
  v12 = (int)a2;

  WrdCharacterTextRun::~WrdCharacterTextRun((WrdCharacterTextRun *)&a10);
  if (v12 == 3)
  {
    v14 = (unsigned int *)__cxa_begin_catch(a1);
    WBConvertCsException(v14);
    __cxa_end_catch();
  }
  else
  {
    v15 = __cxa_begin_catch(a1);
    if (v12 == 2)
      objc_msgSend(v15, "raise");
    else
      +[TCMessageException raise:](TCMessageException, "raise:", TCUnknownProblemMessage);
    __cxa_end_catch();
  }
  JUMPOUT(0x22A1F85A8);
}

void sub_22A1F868C(_Unwind_Exception *exc_buf, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  if (a2 == 2)
  {
    objc_msgSend(objc_begin_catch(exc_buf), "raise");
    objc_end_catch();
    JUMPOUT(0x22A1F85A8);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t WrdNoteTable::getNoteAtMainTextCP(WrdNoteTable *this, int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned __int16 v7;

  v3 = *((_QWORD *)this + 2);
  v4 = (unint64_t)(*((_QWORD *)this + 3) - v3) >> 3;
  if (!(_DWORD)v4)
    return 0;
  result = *(_QWORD *)v3;
  if (*(_DWORD *)(*(_QWORD *)v3 + 8) != a2)
  {
    v7 = 0;
    while (v4 > ++v7)
    {
      v6 = v7;
      result = *(_QWORD *)(v3 + 8 * v7);
      if (*(_DWORD *)(result + 8) == a2)
        goto LABEL_7;
    }
    return 0;
  }
  v6 = 0;
LABEL_7:
  *a3 = v6;
  return result;
}

void WrdNote::~WrdNote(WrdNote *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlNumberFP::XlNumberFP(XlNumberFP *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3ACF20;
  v2[2] = 0;
  *(_QWORD *)((char *)v2 + 22) = 0;
}

uint64_t XlNumberFP::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 344))(a2, a1);
}

void XlNumberFP::~XlNumberFP(XlNumberFP *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptSSDocInfoAtom::PptSSDocInfoAtom(PptSSDocInfoAtom *this, const EshHeader *a2)
{
  uint64_t v3;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v3 + 40) = -1;
  *(_BYTE *)(v3 + 44) = 0;
  *(_QWORD *)v3 = &off_24F3BAE78;
  *(_QWORD *)(v3 + 32) = &unk_24F3BAF20;
  *(_QWORD *)(v3 + 48) = 255;
  *(_QWORD *)(v3 + 56) = 255;
  CsString::CsString((CsString *)(v3 + 64));
  *((_WORD *)this + 44) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_DWORD *)((char *)this + 99) = 0;
}

uint64_t PptSSDocInfoAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 688))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptSSDocInfoAtom *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *exception;
  int v9;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptColor::setColor((PptColor *)a2 + 4, v5);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 4)
    goto LABEL_8;
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 4u);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 8)
    goto LABEL_8;
  *((_WORD *)a2 + 30) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 10)
    goto LABEL_8;
  *((_WORD *)a2 + 31) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 12)
    goto LABEL_8;
  v9 = 32;
  CsString::reserve((CsString *)((char *)a2 + 64), 32);
  *((_DWORD *)a2 + 20) = 0;
  bzero(*((void **)a2 + 9), 2 * *((unsigned int *)a2 + 21));
  (*(void (**)(_QWORD, int *, _QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), &v9, *((_QWORD *)a2 + 9));
  CsString::setCount((CsString *)((char *)a2 + 64), v9 - 1);
  PptSkipVisitor::skipKnownBytes(*((_BYTE **)this + 3), a2, 64 - 2 * v9);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 76
    || (v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1)),
        *((_BYTE *)a2 + 88) = v6 & 1,
        *((_BYTE *)a2 + 89) = (v6 & 2) != 0,
        *(int8x8_t *)((char *)a2 + 92) = vand_s8((int8x8_t)vdup_n_s32(v6), (int8x8_t)0x300000000CLL),
        *((_BYTE *)a2 + 100) = (v6 & 0x40) != 0,
        *((_BYTE *)a2 + 101) = (v6 & 0x80) != 0,
        *((_BYTE *)a2 + 102) = BYTE1(v6) & 1,
        (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) != v4 + 78))
  {
LABEL_8:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
  PptSkipVisitor::skipUnknownBytes(*((PptSkipVisitor **)this + 3), a2, 2u);
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptNamedShowSlidesAtom::PptNamedShowSlidesAtom(PptNamedShowSlidesAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B99C0;
  *(_QWORD *)(v2 + 32) = &unk_24F3B9A68;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptNamedShowSlidesAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 616))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptNamedShowSlidesAtom *a2)
{
  int v4;
  int DataLength;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *exception;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if ((EshRecord::getDataLength(a2) & 3) != 0)
    goto LABEL_12;
  DataLength = EshRecord::getDataLength(a2);
  v6 = DataLength + 3;
  if (DataLength >= 0)
    v7 = DataLength;
  else
    v7 = DataLength + 3;
  v8 = v7 >> 2;
  PptNamedShowSlidesAtom::setSlideIDCount(a2, v7 >> 2);
  if (v6 >= 7)
  {
    v9 = 0;
    if (v8 <= 1)
      v8 = 1;
    v10 = v4 - 4;
    while (1)
    {
      v10 += 4;
      if (v10 != (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)))
        break;
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
      PptNamedShowSlidesAtom::setSlideIDAt((uint64_t)a2, v9++, v11);
      if (v8 == v9)
        goto LABEL_11;
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4003;
  }
LABEL_11:
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptNamedShowSlidesAtom::setSlideIDCount(PptNamedShowSlidesAtom *this, unsigned int a2)
{
  std::vector<int,ChAllocator<int>>::resize((uint64_t)this + 48, a2);
}

uint64_t PptNamedShowSlidesAtom::setSlideIDAt(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(this + 48) + 4 * a2) = a3;
  return this;
}

void PptSSDocInfoAtom::~PptSSDocInfoAtom(PptSSDocInfoAtom *this)
{
  *(_QWORD *)this = &off_24F3BAE78;
  *((_QWORD *)this + 4) = &unk_24F3BAF20;
  CsString::~CsString((CsString *)((char *)this + 64));
  JUMPOUT(0x22E2DD408);
}

{
  *(_QWORD *)this = &off_24F3BAE78;
  *((_QWORD *)this + 4) = &unk_24F3BAF20;
  CsString::~CsString((CsString *)((char *)this + 64));
}

void PptNamedShowSlidesAtom::~PptNamedShowSlidesAtom(PptNamedShowSlidesAtom *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F3B99C0;
  *((_QWORD *)this + 4) = &unk_24F3B9A68;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2DD408);
}

{
  void *v2;

  *(_QWORD *)this = &off_24F3B99C0;
  *((_QWORD *)this + 4) = &unk_24F3B9A68;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

OcBinaryReader *OcBinaryReader::loadBlip(OcBinaryReader *this, EshBSE *a2, SsrwOOStream *a3)
{
  uint64_t var7;
  OcBinaryReader *v6;
  EshBinaryReader *v7;
  uint64_t v8;
  EshRoot *v9;
  EshBlip *v10;
  unsigned __int8 v11;
  uint64_t v12;
  EshBlip *v13;
  EshBlip *v14;
  void *v15;
  _DWORD *exception;

  if (a2->var6)
  {
    var7 = a2->var7;
    if ((_DWORD)var7 != -1)
    {
      v6 = this;
      (*((void (**)(SsrwOOStream *, uint64_t, _QWORD))a3->var0 + 2))(a3, var7, 0);
      v7 = (EshBinaryReader *)operator new(0x60uLL);
      EshBinaryReader::EshBinaryReader(v7);
      v8 = (*((uint64_t (**)(OcBinaryReader *))v6->var0 + 13))(v6);
      EshGroupProperties::init((uint64_t)v7, v8);
      (*(void (**)(EshBinaryReader *, SsrwOOStream *))(*(_QWORD *)v7 + 16))(v7, a3);
      v9 = (EshRoot *)operator new(0x28uLL);
      EshRoot::EshRoot(v9);
      (*(void (**)(EshBinaryReader *, EshRoot *))(*(_QWORD *)v7 + 32))(v7, v9);
      v10 = (EshBlip *)(*(uint64_t (**)(EshRoot *, _QWORD))(*(_QWORD *)v9 + 48))(v9, 0);
      if (!EshBlip::isBlipRecordType(v10))
      {
        exception = __cxa_allocate_exception(4uLL);
        *exception = 7005;
      }
      v11 = (*(uint64_t (**)(EshRoot *, _QWORD))(*(_QWORD *)v9 + 56))(v9, 0);
      v12 = (*((uint64_t (**)(OcBinaryReader *))v6->var0 + 13))(v6);
      v13 = (EshBlip *)(*(uint64_t (**)(uint64_t, EshBlip *, _QWORD))(*(_QWORD *)v12 + 16))(v12, v10, v11);
      v14 = v13;
      if (v13
      {
        (*(void (**)(EshBinaryReader *, void *))(*(_QWORD *)v7 + 40))(v7, v15);
        a2->var3 = v14;
        v14 = 0;
      }
      else
      {
        a2->var6 = 0;
      }
      a2->var7 = -1;
      (*(void (**)(EshBinaryReader *))(*(_QWORD *)v7 + 24))(v7);
      if (v14)
        (*((void (**)(EshBlip *))v14->var0 + 1))(v14);
      (*(void (**)(EshRoot *))(*(_QWORD *)v9 + 8))(v9);
      return (OcBinaryReader *)(*(uint64_t (**)(EshBinaryReader *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return this;
}

void sub_22A1F90D8()
{
  __break(1u);
}

void sub_22A1F9178()
{
  __cxa_end_catch();
  JUMPOUT(0x22A1F91C4);
}

void sub_22A1F918C()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x22A1F91D4);
}

void sub_22A1F91A4()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x22A1F91D4);
  JUMPOUT(0x22A1F91C4);
}

void sub_22A1F91B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdBinaryReader::getEshObjectFactory(WrdBinaryReader *this)
{
  return *((_QWORD *)this + 2);
}

void sub_22A1F924C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1F92B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1F94DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_22A1F96B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WrdTextBoxStory::setNextTextBoxIndex(uint64_t this, int a2)
{
  *(_BYTE *)(this + 16) = 1;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

int *WrdCharacterProperties::setRevisionProperties(WrdCharacterProperties *this, char a2)
{
  int *result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (int *)&this->var2 + 2;
  *result = v3 | 0x800000;
  result[79] = result[79] & 0xFF7FFFFF | ((a2 & 1) << 23);
  return result;
}

uint64_t WrdCharacterProperties::setIndexToAuthorIDOfRevisionProperties(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x1000000;
  *(_WORD *)(result + 302) = a2;
  return result;
}

uint64_t WrdCharacterProperties::getRevisionPropertiesDateTimeReference(WrdCharacterProperties *this)
{
  char *v1;
  int v2;

  v2 = *((_DWORD *)&this->var2 + 2);
  v1 = (char *)&this->var2 + 8;
  *(_DWORD *)v1 = v2 | 0x2000000;
  return *((_QWORD *)v1 + 8);
}

uint64_t WrdCharacterProperties::setEngraved(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x400uLL;
  *(_DWORD *)(result + 204) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalSpacingBeforeAutomatic(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x200000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFF7FFFFF | ((a2 & 1) << 23);
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalSpacingAfterAutomatic(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x400000000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFEFFFFFF | ((a2 & 1) << 24);
  return this;
}

WrdCharacterProperties *WrdCharacterProperties::setCharacterPosition(WrdCharacterProperties *this, signed __int16 a2)
{
  *(_QWORD *)&this->var2 |= 0x200000uLL;
  this->var105 = a2;
  return this;
}

uint64_t EshContentProperties::getWrapDistanceLeft(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x384u);
}

uint64_t EshContentProperties::getWrapDistanceRight(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2, 0x386u);
}

char *WrdListLevelFormatOverride::clone(WrdListLevelFormatOverride *this)
{
  uint64_t v2;
  char *v3;

  v2 = (*((uint64_t (**)(WrdListLevelFormat *))this->var1->var0 + 2))(this->var1);
  v3 = (char *)operator new(0x18uLL);
  *((_DWORD *)v3 + 4) = 0;
  v3[20] = 0;
  *(_WORD *)(v3 + 21) &= 0xFC00u;
  *(_QWORD *)v3 = &off_24F3B36B0;
  *((_QWORD *)v3 + 1) = v2;
  WrdListLevelFormatOverride::operator=((uint64_t)v3, (uint64_t)this);
  return v3;
}

void sub_22A1F9860(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *WrdListLevelFormat::clone(WrdListLevelFormat *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = (*(uint64_t (**)(WrdParagraphProperties *))(*(_QWORD *)this->var1 + 24))(this->var1);
  v3 = (*((uint64_t (**)(WrdCharacterProperties *))this->var2->var0 + 3))(this->var2);
  v4 = (char *)operator new(0x58uLL);
  v4[80] &= 0xE0u;
  *((_QWORD *)v4 + 9) = 0;
  *((_DWORD *)v4 + 6) = 0;
  *((_WORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_WORD *)v4 + 32) = 0;
  *(_WORD *)(v4 + 81) = 0;
  *(_QWORD *)(v4 + 44) = 0;
  v4[52] = 0;
  *(_QWORD *)v4 = &off_24F3B3670;
  *((_QWORD *)v4 + 1) = v2;
  *((_QWORD *)v4 + 2) = v3;
  WrdListLevelFormat::operator=((uint64_t)v4, (uint64_t)this);
  return v4;
}

void sub_22A1F993C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WrdListLevelFormat::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = *(_BYTE *)(a1 + 80) & 0xFE | *(_BYTE *)(a2 + 80) & 1;
  *(_BYTE *)(a1 + 80) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 80) >> 1) & 1));
  *(_BYTE *)(a1 + 80) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 80) >> 2) & 1));
  *(_BYTE *)(a1 + 80) = v6;
  LOBYTE(v6) = v6 & 0xF7 | (8 * ((*(_BYTE *)(a2 + 80) & 8) != 0));
  *(_BYTE *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 80) = v6 & 0xEF | *(_BYTE *)(a2 + 80) & 0x10;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  v7 = *(_BYTE *)(a1 + 82) & 0xFE | *(_BYTE *)(a2 + 82) & 1;
  *(_BYTE *)(a1 + 82) = v7;
  v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 82) >> 1) & 1));
  *(_BYTE *)(a1 + 82) = v8;
  v9 = v8 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a2 + 82) >> 2) & 1));
  *(_BYTE *)(a1 + 82) = v9;
  v10 = v9 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a2 + 82) >> 3) & 1));
  *(_BYTE *)(a1 + 82) = v10;
  v11 = v10 & 0xFFFFFFEF | (16 * ((*(unsigned __int8 *)(a2 + 82) >> 4) & 1));
  *(_BYTE *)(a1 + 82) = v11;
  v12 = v11 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a2 + 82) >> 5) & 1));
  *(_BYTE *)(a1 + 82) = v12;
  v13 = v12 & 0xFFFFFFBF | (((*(unsigned __int8 *)(a2 + 82) >> 6) & 1) << 6);
  *(_BYTE *)(a1 + 82) = v13;
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82) & 0x80 | v13 & 0x7F;
  WrdParagraphProperties::operator=(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  WrdCharacterProperties::operator=(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  v14 = *(_QWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 44) = v14;
  WrdListLevelFormat::setNumberTextLength((WrdListLevelFormat *)a1, *(unsigned __int16 *)(a2 + 64));
  if (*(_WORD *)(a1 + 64))
    memcpy(*(void **)(a1 + 72), *(const void **)(a2 + 72), 2 * *(unsigned __int16 *)(a1 + 64));
  return a1;
}

uint64_t WrdListLevelFormatOverride::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_WORD *)(a1 + 21) & 0xFFFE | *(_WORD *)(a2 + 21) & 1;
  *(_WORD *)(a1 + 21) = *(_WORD *)(a1 + 21) & 0xFFFE | *(_WORD *)(a2 + 21) & 1;
  v6 = v5 & 0xFFFFFFFD | (2 * ((*(unsigned __int16 *)(a2 + 21) >> 1) & 1));
  *(_WORD *)(a1 + 21) = v6;
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v7 = v6 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a2 + 21) >> 2) & 1));
  *(_WORD *)(a1 + 21) = v7;
  v8 = v7 & 0xFFFFFFF7 | (8 * ((*(unsigned __int16 *)(a2 + 21) >> 3) & 1));
  *(_WORD *)(a1 + 21) = v8;
  v9 = v8 & 0xFFFFFFEF | (16 * ((*(unsigned __int16 *)(a2 + 21) >> 4) & 1));
  *(_WORD *)(a1 + 21) = v9;
  v10 = v9 & 0xFFFFFFDF | (32 * ((*(unsigned __int16 *)(a2 + 21) >> 5) & 1));
  *(_WORD *)(a1 + 21) = v10;
  v11 = v10 & 0xFFFFFFBF | (((*(unsigned __int16 *)(a2 + 21) >> 6) & 1) << 6);
  *(_WORD *)(a1 + 21) = v11;
  v12 = v11 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a2 + 21) >> 7) & 1) << 7);
  *(_WORD *)(a1 + 21) = v12;
  v13 = v12 & 0xFFFFFEFF | ((HIBYTE(*(unsigned __int16 *)(a2 + 21)) & 1) << 8);
  *(_WORD *)(a1 + 21) = v13;
  *(_WORD *)(a1 + 21) = v13 & 0xFDFF | *(_WORD *)(a2 + 21) & 0x200;
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
    *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  return a1;
}

uint64_t XlChartDataSeries::getDefaultFormat(XlChartDataSeries *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 8 * a2);
}

void *WrdParser::parse(WrdParser *this, WrdListLevelFormatOverride *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  int v9;
  void *result;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
  if (v4 == -1)
  {
    do
    {
      ChLogFunction("Skipping unexpected 0xFFFFFFFF at start of LFOLVL", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1224);
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
    }
    while (v5 == -1);
    v4 = v5;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16));
  v7 = v6;
  v8 = v6 >> 4;
  v9 = (v6 >> 5) & 1;
  a2->var3 = v6 & 0xF;
  *(_WORD *)((char *)a2 + 21) = *(_WORD *)((char *)a2 + 21) & 0xFFFE | (v6 >> 4) & 1;
  result = WrdListLevelFormatOverride::setFormatting(a2, v9);
  if ((v8 & 1) != 0 && !v9)
  {
    if (v4 >> 15)
      result = (void *)ChLogFunction("LFOLVL start at value out of range", 1, 4, "/Library/Caches/com.apple.xbs/Sources/OfficeImport/OfficeParser/compatibility/Word/Binary/Reader/WrdParser.cpp", 1242);
    else
      a2->var2 = v4;
  }
  if (*((int *)this + 38) >= 9)
    *(_WORD *)((char *)a2 + 21) = (v7 >> 4) & 0x1FC | *(_WORD *)((char *)a2 + 21) & 0xFC03;
  return result;
}

WrdListLevelFormatOverride *WrdListLevelFormatOverride::setFormatting(WrdListLevelFormatOverride *this, int a2)
{
  char v2;
  WrdListLevelFormatOverride *v3;

  v2 = a2;
  v3 = this;
  if (a2)
    this = (WrdListLevelFormatOverride *)WrdListLevelFormat::reset(this->var1);
  *(_WORD *)((char *)v3 + 21) = *(_WORD *)((char *)v3 + 21) & 0xFFFD | (2 * (v2 & 1));
  return this;
}

uint64_t WrdListLevelFormatOverride::needsListLevel(WrdListLevelFormatOverride *this)
{
  return (*(unsigned __int16 *)((char *)this + 21) >> 1) & 1;
}

void sub_22A1F9E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_22A1F9FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1FA0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WrdParagraphProperties::getNumberRevisionMarkDataReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x1000u;
  return *((_QWORD *)this + 15);
}

uint64_t WrdNumberRevisionMarkData::setIndexIntoNumberPlaceHolders(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3;

  if (a2 <= 8)
  {
    v3 = *(_QWORD *)(this + 56);
    if (v3)
      *(_BYTE *)(v3 + a2) = a3;
  }
  return this;
}

uint64_t WrdNumberRevisionMarkData::setNumberFormats(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;

  if (a2 <= 8)
  {
    v3 = *(_QWORD *)(result + 40);
    if (v3)
      *(_DWORD *)(v3 + 4 * a2) = a3;
  }
  return result;
}

uint64_t WrdNumberRevisionMarkData::setNumberValue(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;

  if (a2 <= 8)
  {
    v3 = *(_QWORD *)(this + 48);
    if (v3)
      *(_DWORD *)(v3 + 4 * a2) = a3;
  }
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setParagraphNumberInserted(WrdParagraphProperties *this, char a2)
{
  *((_QWORD *)this + 2) |= 0x200000000000uLL;
  *(_DWORD *)((char *)this + 294) = *(_DWORD *)((char *)this + 294) & 0xFFFDFFFF | ((a2 & 1) << 17);
  return this;
}

uint64_t WrdTableProperties::setJustification(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x4000uLL;
  *(_DWORD *)(result + 128) = a2;
  return result;
}

WrdParagraphProperties *WrdParagraphProperties::setWidth(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x400000uLL;
  *((_DWORD *)this + 58) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setAbsoluteHeight(WrdParagraphProperties *this, __int16 a2)
{
  *((_QWORD *)this + 2) |= 0x8000000uLL;
  *((_WORD *)this + 145) = a2;
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setHorizontalDistanceFromText(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x40000000uLL;
  *((_DWORD *)this + 60) = a2;
  return this;
}

uint64_t WrdCharacterProperties::setSmallCaps(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x10000000uLL;
  *(_DWORD *)(result + 184) = a2;
  return result;
}

void SsrwOOMemStream::readFloat64(SsrwOOMemStream *this)
{
  uint64_t v1;
  _DWORD *exception;

  v1 = *((unsigned int *)this + 5);
  if ((v1 & 0x80000000) != 0 || *((_DWORD *)this + 4) - (int)v1 <= 7)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 15;
  }
  CsLeReadFloat64(**((_QWORD **)this + 1) + v1);
  *((_DWORD *)this + 5) += 8;
}

double *CsCopyFloat64ToPackedLocation(double *result, double a2)
{
  if (result)
    *result = a2;
  return result;
}

uint64_t WrdBaseParser::parseBuffer(uint64_t this, WrdShading *a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  WrdBaseParser *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1004;
  }
  if (a4 > a3 && a4 - a3 >= 10)
  {
    a2->var2 = 1;
    WrdBaseParser::parseBuffer((WrdBaseParser *)this, &a2->var3, a3, a4);
    WrdBaseParser::parseBuffer(v7, &a2->var4, a3 + 4, a4);
    this = CsLeReadUInt16((unsigned __int16 *)a3 + 4);
    if ((this - 64) <= 0xFFBE)
    {
      ChLogF("Unexpected shading pattern %d", v8, v9, v10, v11, v12, v13, v14, this);
      this = 0xFFFFLL;
    }
    a2->var1 = this;
  }
  return this;
}

WrdParagraphProperties *WrdParagraphProperties::setVerticalDistanceFromText(WrdParagraphProperties *this, int a2)
{
  *((_QWORD *)this + 2) |= 0x20000000uLL;
  *((_DWORD *)this + 59) = a2;
  return this;
}

int *WrdCharacterProperties::setCodePageForPreUnicodeFiles(uint64_t a1, int a2)
{
  int *result;
  int v3;

  v3 = *(_DWORD *)(a1 + 24);
  result = (int *)(a1 + 24);
  *result = v3 | 0x20000;
  result[55] = a2;
  return result;
}

uint64_t WrdParagraphProperties::getAutoNumberListDescriptorReference(WrdParagraphProperties *this)
{
  *((_WORD *)this + 12) |= 0x100u;
  return *((_QWORD *)this + 13);
}

int *WrdCharacterProperties::setCharPositionOfPictureBulletInBookmark(WrdCharacterProperties *this, int a2)
{
  int *result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (int *)&this->var2 + 2;
  *result = v3 | 0x800;
  result[69] = a2;
  return result;
}

uint64_t WrdCharacterProperties::setListCharacterPictureBullet(WrdCharacterProperties *this, __int16 a2)
{
  uint64_t result;
  int v3;

  v3 = *((_DWORD *)&this->var2 + 2);
  result = (uint64_t)&this->var2 + 8;
  *(_DWORD *)result = v3 | 0x40000;
  *(_WORD *)(result + 314) = a2;
  return result;
}

void sub_22A1FA7CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1FA868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1FAB04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1FAC88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t EshContentProperties::getPositionHorizontalRelative(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x390u);
}

uint64_t EshContentProperties::getPositionVertical(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x391u);
}

uint64_t EshContentProperties::getPositionVerticalRelative(EshContentProperties *this)
{
  return *(unsigned int *)EshOpt::getProperty((uint64_t)this->var2 + 128, 0x392u);
}

uint64_t WrdCharacterProperties::setHidden(uint64_t result, int a2)
{
  *(_QWORD *)(result + 16) |= 0x20uLL;
  *(_DWORD *)(result + 192) = a2;
  return result;
}

void XlPalette::XlPalette(XlPalette *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD0A0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 26) = 1;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlPalette *a2)
{
  unsigned int v4;
  __int16 v5;
  size_t v6;
  unint64_t v7;
  int v8;
  int *v9;

  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2));
  v5 = v4;
  if (v4)
  {
    v6 = 4 * v4;
    v7 = 0;
    *((_QWORD *)this + 8) = operator new[](v6);
    do
    {
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
      v9 = (int *)*((_QWORD *)this + 8);
      v9[v7 / 4] = v8;
      v7 += 4;
    }
    while (v6 != v7);
  }
  else
  {
    v9 = (int *)*((_QWORD *)this + 8);
  }
  XlPalette::takeColors((uint64_t)a2, v9, v5);
  *((_QWORD *)this + 8) = 0;
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlPalette::takeColors(uint64_t this, int *a2, __int16 a3)
{
  uint64_t v5;

  v5 = this;
  if (*(_BYTE *)(this + 26))
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = MEMORY[0x22E2DD3F0](this, 0x1000C8052888210);
  }
  *(_QWORD *)(v5 + 16) = a2;
  *(_WORD *)(v5 + 24) = a3;
  *(_BYTE *)(v5 + 26) = 1;
  return this;
}

double XlColorTable::setColors(XlColorTable *this, int *a2, __int16 a3)
{
  uint64_t v6;
  double result;

  v6 = *((_QWORD *)this + 1);
  if (v6)
    MEMORY[0x22E2DD3F0](v6, 0x1000C8052888210);
  *((_QWORD *)this + 1) = a2;
  *((_WORD *)this + 12) = a3;
  *((_BYTE *)this + 40) = 0;
  if (!a2)
    return XlColorTable::setDefault(this);
  return result;
}

void XlPalette::~XlPalette(XlPalette *this)
{
  XlPalette::~XlPalette(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AD0A0;
  if (*((_BYTE *)this + 26))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  }
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((_BYTE *)this + 26) = 1;
}

void XlPaletteX::XlPaletteX(XlPaletteX *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD0E0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 26) = 1;
}

uint64_t XlColorTable::setXColors(XlColorTable *this, int *a2, __int16 a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = MEMORY[0x22E2DD3F0](result, 0x1000C8052888210);
  *((_QWORD *)this + 2) = a2;
  *((_WORD *)this + 13) = a3;
  return result;
}

void XlPaletteX::~XlPaletteX(XlPaletteX *this)
{
  XlPaletteX::~XlPaletteX(this);
  JUMPOUT(0x22E2DD408);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24F3AD0E0;
  if (*((_BYTE *)this + 26))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      MEMORY[0x22E2DD3F0](v2, 0x1000C8052888210);
  }
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((_BYTE *)this + 26) = 1;
}

void XlPhoneticInfo::XlPhoneticInfo(XlPhoneticInfo *this)
{
  *(_QWORD *)this = &off_24F3AD1E0;
  OcText::OcText((OcText *)((char *)this + 24));
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 4) = -1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t XlDocRoute::setBookTitle(XlDocRoute *this, XlString *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = a2;
  return result;
}

void XlPhoneticInfo::~XlPhoneticInfo(XlPhoneticInfo *this)
{
  XlPhoneticInfo::~XlPhoneticInfo(this);
  JUMPOUT(0x22E2DD408);
}

{
  OcText *v2;
  void *v3;

  *(_QWORD *)this = &off_24F3AD1E0;
  v2 = (OcText *)((char *)this + 24);
  OcText::clearBuffer((OcText *)((char *)this + 24));
  XlPhoneticInfo::clearRuns(this);
  *((_WORD *)this + 4) = -1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  OcText::~OcText(v2);
}

_QWORD *XlPhoneticInfo::clearRuns(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = this[9];
  v3 = this[10];
  if (((v3 - v2) & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[9];
        v3 = v1[10];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v3 - v2) >> 3));
  }
  v1[10] = v2;
  return this;
}

void sub_22A1FB450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1FB524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FB754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  _Unwind_Resume(a1);
}

void PptAnimEffectBehaviorAtom::PptAnimEffectBehaviorAtom(PptAnimEffectBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B5990;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5A38;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimEffectBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 848))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimEffectBehaviorAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void PptAnimCmdBehaviorAtom::PptAnimCmdBehaviorAtom(PptAnimCmdBehaviorAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_WORD *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3B56A8;
  *(_QWORD *)(v2 + 32) = &unk_24F3B5750;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimCmdBehaviorAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 840))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimCmdBehaviorAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_BYTE *)a2 + 45) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

float SsrwOOStgStream::readFloat32(SsrwOOStgStream *this)
{
  int v1;
  int v3;
  _DWORD *exception;
  float v5;

  v5 = 0.0;
  v1 = readFloat32(*((_QWORD *)this + 24), &v5);
  if (v1)
  {
    v3 = v1;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
  }
  return v5;
}

uint64_t readFloat32(uint64_t a1, float *a2)
{
  uint64_t v2;
  _BYTE v5[4];
  unsigned int v6;

  v6 = 4;
  v2 = 6;
  if (a1 && a2)
  {
    v2 = streamRead(a1, (uint64_t)v5, &v6);
    *a2 = CsLeReadFloat32((uint64_t)v5);
  }
  return v2;
}

float CsLeReadFloat32(uint64_t a1)
{
  return *(float *)a1;
}

uint64_t PptAnimVariantAtom::setReal(uint64_t this, float a2)
{
  *(_DWORD *)(this + 48) = 2;
  *(float *)(this + 60) = a2;
  return this;
}

void PptAnimModifierAtom::PptAnimModifierAtom(PptAnimModifierAtom *this, const EshHeader *a2)
{
  uint64_t v2;

  EshAtom::EshAtom(this, a2);
  *(_DWORD *)(v2 + 40) = -1;
  *(_BYTE *)(v2 + 44) = 0;
  *(_QWORD *)v2 = &off_24F3BE3B8;
  *(_QWORD *)(v2 + 32) = &unk_24F3BE460;
  *(_QWORD *)(v2 + 48) = 0;
}

uint64_t PptAnimModifierAtom::accept(uint64_t a1, void *lpsrc)
{
  void *v3;

  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 784))(v3, a1);
}

uint64_t PptParserVisitor::visit(PptParserVisitor *this, PptAnimModifierAtom *a2)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (*((_DWORD *)a2 + 4) + 8), 0);
  PptSkipVisitor::beginRead(*((_QWORD *)this + 3));
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  *((_DWORD *)a2 + 13) = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
  PptParserVisitor::endRead(this, a2);
  return 1;
}

void sub_22A1FBE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FBF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FBFF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FC128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22A1FC1B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FC278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FC3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void PptAnimEffectBehaviorAtom::~PptAnimEffectBehaviorAtom(PptAnimEffectBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimCmdBehaviorAtom::~PptAnimCmdBehaviorAtom(PptAnimCmdBehaviorAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void PptAnimModifierAtom::~PptAnimModifierAtom(PptAnimModifierAtom *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlStandardWidth::XlStandardWidth(XlStandardWidth *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE0F8;
  *(_WORD *)(v2 + 16) = 0;
}

void XlSort::XlSort(XlSort *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AE038;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
}

uint64_t XlParserVisitor::visit(XlParserVisitor *this, XlSort *a2)
{
  int v4;
  int16x8_t v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  XlString *v9;
  unsigned int v10;
  char v11;
  XlString *v12;
  unsigned int v13;
  char v14;
  XlString *v15;

  v4 = *((_DWORD *)a2 + 2) + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v5 = (int16x8_t)((__n128 (*)(_QWORD))*(_QWORD *)(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 16) = v6 & 1;
  v5.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v6) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)((char *)a2 + 17) = vmovn_s16(v5).u32[0];
  *((_BYTE *)a2 + 21) = (v6 >> 5) & 0x1F;
  *((_BYTE *)a2 + 22) = (v6 & 0x400) != 0;
  *((_BYTE *)a2 + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 24) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  *((_BYTE *)a2 + 25) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
  v7 = *((unsigned __int8 *)a2 + 23);
  if (*((_BYTE *)a2 + 23))
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v9 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v9);
    *((_QWORD *)this + 4) = v9;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v7, v8, v4, v9);
    XlChartPlot::takeDropLineFormat(a2, *((XlChartLineStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  v10 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v12 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v12);
    *((_QWORD *)this + 4) = v12;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v10, v11, v4, v12);
    XlChartFrameType::takeBorderStyle((XlChartFrameType *)a2, *((XlChartLineStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  v13 = *((unsigned __int8 *)a2 + 25);
  if (*((_BYTE *)a2 + 25))
  {
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2));
    v15 = (XlString *)operator new(0x68uLL);
    XlString::XlString(v15);
    *((_QWORD *)this + 4) = v15;
    XlStringParser::parse((XlParserVisitor *)((char *)this + 8), *((SsrwOOStream **)this + 2), v13, v14, v4, v15);
    XlChartFrameType::takeAreaFillStyle((XlChartFrameType *)a2, *((XlChartFillStyle **)this + 4));
    *((_QWORD *)this + 4) = 0;
  }
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

void sub_22A1FC6EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void XlSort::~XlSort(XlSort *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F3AE038;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 6) = 0;
}

{
  XlSort::~XlSort(this);
  JUMPOUT(0x22E2DD408);
}

void XlChartBinaryReader::scanChartsheet(XlParserVisitor **this)
{
  uint64_t v2;
  uint64_t LocationToBeginSearchForMainChart;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  _BYTE v11[16];
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  XlHeader v16;

  XlChartBinaryReader::reset((XlChartBinaryReader *)this);
  v2 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  *((_DWORD *)this + 393) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  XlBinaryReader::scanWorksheet((XlBinaryReader *)this);
  LocationToBeginSearchForMainChart = XlChartBinaryReader::getLocationToBeginSearchForMainChart((XlChartBinaryReader *)this);
  v4 = (*((uint64_t (**)(XlParserVisitor **))*this + 78))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, LocationToBeginSearchForMainChart, 0);
  XlHeader::XlHeader(&v16);
  while (v16.var1 != 10)
  {
    if (v16.var1 == 4098)
    {
      XlChartChart::XlChartChart((XlChartChart *)v11, &v16);
      XlParserVisitor::skipHeader(this[167]);
      (*(void (**)(XlParserVisitor *, _BYTE *))(*(_QWORD *)this[167] + 1936))(this[167], v11);
      v5 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v14);
      v6 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v15);
      v7 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v14);
      v8 = CsMath::convertFixedToFloat((CsMath *)v12);
      v9 = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v15);
      v10 = CsMath::convertFixedToFloat((CsMath *)v13);
      *((float *)this + 389) = v5;
      *((float *)this + 390) = v6;
      *((float *)this + 391) = v7 + v8;
      *((float *)this + 392) = v9 + v10;
      XlChartChart::~XlChartChart((XlChartChart *)v11);
      return;
    }
    XlParserVisitor::getNextUniqueHeader(this[167], &v16);
  }
}

void sub_22A1FC8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XlChartChart::~XlChartChart((XlChartChart *)va);
  _Unwind_Resume(a1);
}

uint64_t XlBinaryReader::getStream(XlBinaryReader *this)
{
  return *((_QWORD *)this + 164);
}

void XlPrintSize::XlPrintSize(XlPrintSize *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3AD350;
  *(_WORD *)(v2 + 16) = 0;
}

void XlPrintSize::~XlPrintSize(XlPrintSize *this)
{
  JUMPOUT(0x22E2DD408);
}

uint64_t XlChartBinaryReader::getLocationToBeginSearchForMainChart(XlChartBinaryReader *this)
{
  uint64_t v2;
  uint64_t v3;
  XlHeader v5;

  if (((*((_QWORD *)this + 170) - *((_QWORD *)this + 169)) & 0x3FFFFFFFCLL) == 0)
    return *((unsigned int *)this + 393);
  v2 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 16))(v2, *(unsigned int *)(*((_QWORD *)this + 170) - 4), 0);
  XlHeader::XlHeader(&v5);
  while (v5.var1 != 10)
    XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v5);
  v3 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 4;
}

void XlChartChart::XlChartChart(XlChartChart *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A8560;
  v2[2] = 0;
  v2[3] = 0;
}

uint64_t XlChartParserVisitor::visit(XlChartParserVisitor *this, XlChartChart *a2)
{
  XlParserVisitor::beginRead(this);
  *((_DWORD *)a2 + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 7) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  *((_DWORD *)a2 + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
  return XlParserVisitor::endRead((uint64_t)this, (uint64_t)a2);
}

uint64_t XlParserVisitor::beginRead(XlParserVisitor *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 18) = result;
  return result;
}

float CsMath::convertFixedToFloat(CsMath *this)
{
  return (float)this * 0.000015259;
}

void sub_22A1FCBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_22A1FCD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22A1FCDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_22A1FCE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1FD028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FD0E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22A1FD168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22A1FD264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::getChartCount(XlChartBinaryReader *this)
{
  return (unsigned __int16)((*((_DWORD *)this + 340) - *((_DWORD *)this + 338)) >> 2);
}

uint64_t XlChartBinaryReader::setChart(XlChartBinaryReader *this, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t LocationToBeginSearchForMainChart;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *exception;

  if (a2 == -1)
  {
    LocationToBeginSearchForMainChart = XlChartBinaryReader::getLocationToBeginSearchForMainChart(this);
  }
  else
  {
    v3 = *((_QWORD *)this + 169);
    v4 = (unint64_t)(*((_QWORD *)this + 170) - v3) >> 2;
    if ((int)v4 <= (int)a2)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1004;
    }
    if (v4 <= a2)
      std::vector<TSU::UUIDData<TSP::UUIDData>>::__throw_out_of_range[abi:ne180100]();
    LocationToBeginSearchForMainChart = *(unsigned int *)(v3 + 4 * a2);
  }
  XlChartBinaryReader::reset(this);
  v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, LocationToBeginSearchForMainChart, 0);
  XlChartBinaryReader::scanChartProperties(this);
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 166) + 16))(*((_QWORD *)this + 166), 55);
  if (v7)
  {
    v8 = v7;
    XlSubstreamProperties::operator=(v7, (uint64_t)this + 1136);
    XlSubstreamProperties::operator=((uint64_t)this + 1136, (uint64_t)this + 1376);
    XlSubstreamProperties::operator=((uint64_t)this + 1376, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, LocationToBeginSearchForMainChart, 0);
  return XlChartBinaryReader::scanChartObjects(this);
}

void sub_22A1FD3EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::scanChartProperties(XlChartBinaryReader *this)
{
  uint64_t result;
  XlBof *v3;
  int v4;
  signed __int16 i;
  int *v6;
  uint64_t v7;
  _BYTE v8[16];
  uint64_t v9;
  XlHeader v10;

  XlHeader::XlHeader(&v10);
  XlSubstreamProperties::setDefault((XlChartBinaryReader *)((char *)this + 1376));
  result = XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), &v10, *((_BYTE *)this + 1320));
  if (v10.var1 == 2057)
  {
    v3 = (XlBof *)operator new(0x28uLL);
    XlBof::XlBof(v3, &v10);
    (*(void (**)(_QWORD, XlBof *))(**((_QWORD **)this + 167) + 192))(*((_QWORD *)this + 167), v3);
    v4 = *((_DWORD *)v3 + 7);
    *((_DWORD *)this + 348) = v4;
    if (v4 == 32 || v4 == 0x8000)
    {
      (*(void (**)(XlBof *))(*(_QWORD *)v3 + 8))(v3);
      result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v10);
      for (i = v10.var1; v10.var1 != 10; i = v10.var1)
      {
        if (i > 131)
        {
          if (i > 235)
          {
            if (i == 236)
            {
              if ((*((_DWORD *)this + 384) & 0x80000000) != 0)
                *((_DWORD *)this + 384) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 164) + 40))(*((_QWORD *)this + 164));
              goto LABEL_27;
            }
            if (i == 512)
            {
              v6 = (int *)operator new(0x20uLL);
              XlDimensions::XlDimensions((XlDimensions *)v6, &v10);
              XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
              (*(void (**)(_QWORD, int *))(**((_QWORD **)this + 167) + 248))(*((_QWORD *)this + 167), v6);
              XlCellTableInfo::setDimensions((uint64_t)this + 1512, v6[4], v6[5], *((unsigned __int16 *)v6 + 12), *((unsigned __int16 *)v6 + 13));
              goto LABEL_26;
            }
          }
          else if (i == 132)
          {
            XlVCenter::XlVCenter((XlVCenter *)v8, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 1352))(*((_QWORD *)this + 167), v8);
            *((_BYTE *)this + 1457) = v9;
          }
          else if (i == 161)
          {
            v6 = (int *)operator new(0x40uLL);
            XlSetup::XlSetup((XlSetup *)v6, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, int *))(**((_QWORD **)this + 167) + 1016))(*((_QWORD *)this + 167), v6);
            *(_QWORD *)((char *)this + 1458) = *((_QWORD *)v6 + 2);
            *((_WORD *)this + 733) = *((_WORD *)v6 + 12);
            *((_BYTE *)this + 1468) = *((_BYTE *)v6 + 26);
            *((_DWORD *)this + 368) = v6[7];
            *((_DWORD *)this + 369) = v6[8];
            *((_WORD *)this + 740) = *((_WORD *)v6 + 18);
            *(_DWORD *)((char *)this + 1482) = *(int *)((char *)v6 + 38);
            *((_OWORD *)this + 93) = *((_OWORD *)v6 + 3);
            *((_WORD *)this + 743) = *((_WORD *)v6 + 21);
LABEL_26:
            (*(void (**)(int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
        else
        {
          if (i > 50)
          {
            if (i != 51)
            {
              if (i == 131)
              {
                XlHCenter::XlHCenter((XlHCenter *)v8, &v10);
                XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
                (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 720))(*((_QWORD *)this + 167), v8);
                *((_BYTE *)this + 1456) = v9;
              }
              goto LABEL_27;
            }
            v6 = (int *)operator new(0x18uLL);
            XlPrintSize::XlPrintSize((XlPrintSize *)v6, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, int *))(**((_QWORD **)this + 167) + 896))(*((_QWORD *)this + 167), v6);
            *((_WORD *)this + 752) = *((_WORD *)v6 + 8);
            goto LABEL_26;
          }
          if (i == 20)
          {
            XlHdr::XlHdr((XlHdr *)v8, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 167) + 728))(*((_QWORD *)this + 167), v8);
            if (v9)
              XlPageProperties::setHeaderString((XlChartBinaryReader *)((char *)this + 1400), (OcText *)(v9 + 8));
            XlHdr::~XlHdr((XlHdr *)v8);
            goto LABEL_27;
          }
          if (i == 21)
          {
            v6 = (int *)operator new(0x18uLL);
            XlFooter::XlFooter((XlFooter *)v6, &v10);
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            (*(void (**)(_QWORD, int *))(**((_QWORD **)this + 167) + 688))(*((_QWORD *)this + 167), v6);
            v7 = *((_QWORD *)v6 + 2);
            if (v7)
              XlPageProperties::setFooterString((XlChartBinaryReader *)((char *)this + 1400), (OcText *)(v7 + 8));
            goto LABEL_26;
          }
        }
LABEL_27:
        result = XlParserVisitor::getNextUniqueHeader(*((XlParserVisitor **)this + 167), &v10);
      }
    }
    else
    {
      return (*(uint64_t (**)(XlBof *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return result;
}

void sub_22A1FD7A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t XlSubstreamProperties::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    XlSheetInfo::operator=(a1 + 8, a2 + 8);
    XlPageProperties::operator=(a1 + 24, a2 + 24);
    XlCellTableInfo::operator=(a1 + 136, a2 + 136);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  return a1;
}

double XlCellTableInfo::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 != a1)
  {
    result = *(double *)(a2 + 8);
    *(double *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  return result;
}

void XlSubstreamProperties::~XlSubstreamProperties(XlSubstreamProperties *this)
{
  XlPageProperties *v1;

  *(_QWORD *)this = &off_24F3AB3E0;
  v1 = (XlSubstreamProperties *)((char *)this + 24);
  XlCellTableInfo::~XlCellTableInfo((XlSubstreamProperties *)((char *)this + 136));
  XlPageProperties::~XlPageProperties(v1);
  JUMPOUT(0x22E2DD408);
}

{
  XlPageProperties *v1;

  *(_QWORD *)this = &off_24F3AB3E0;
  v1 = (XlSubstreamProperties *)((char *)this + 24);
  XlCellTableInfo::~XlCellTableInfo((XlSubstreamProperties *)((char *)this + 136));
  XlPageProperties::~XlPageProperties(v1);
}

uint64_t XlChartBinaryReader::scanChartObjects(XlChartBinaryReader *this)
{
  XlHeader *v2;
  int var1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  XlHeader *v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  XlChartDefaultText *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  unint64_t v46;
  _DWORD *v47;
  char *v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  char *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  int v67;
  char *v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned __int16 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v77;
  __int16 v78;
  __int16 v79;
  unsigned int *v80;

  *((_QWORD *)this + 223) = *((_QWORD *)this + 222);
  *((_QWORD *)this + 226) = *((_QWORD *)this + 225);
  v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  while (XlChartBinaryReader::nextSibling(this, v2))
  {
    var1 = (unsigned __int16)v2->var1;
    if (var1 == 4098)
      break;
    if ((*((_DWORD *)this + 386) & 0x80000000) != 0 && (var1 | 8) == 0x1068)
    {
      v4 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
      *((_DWORD *)this + 386) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    }
    if ((*((_DWORD *)this + 387) & 0x80000000) != 0 && v2->var1 == 2136)
    {
      v5 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
      *((_DWORD *)this + 387) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    if ((*((_DWORD *)this + 498) & 0x80000000) != 0 && v2->var1 == 4178)
    {
      v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
      *((_DWORD *)this + 498) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v7 = (XlHeader *)operator new(8uLL);
      XlHeader::XlHeader(v7);
      do
      {
        XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v7, *((_BYTE *)this + 444));
        if (v7->var1 == 4181)
        {
          v8 = (unsigned __int16 *)operator new(0x18uLL);
          XlChartDataProp::XlChartDataProp((XlChartDataProp *)v8, v7);
          (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 2368))(*((_QWORD *)this + 167), v8);
          *((_BYTE *)this + 1997) = v8[8] == 1;
          (*(void (**)(unsigned __int16 *))(*(_QWORD *)v8 + 8))(v8);
        }
        else
        {
          XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
        }
        v9 = (unsigned __int16)v7->var1;
      }
      while (v9 != 4148 && v9 != 10);
      v11 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((unsigned int *)this + 498), 0);
      MEMORY[0x22E2DD408](v7, 0x1000C4087442A64);
    }
    XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
  }
  v12 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
  *((_DWORD *)this + 388) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
  XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((_BYTE *)this + 444));
  v13 = 0;
  v14 = -1;
  while (XlChartBinaryReader::nextSibling(this, v2))
  {
    v15 = v2->var1;
    if (v15 == 10)
      break;
    if (v15 > 4145)
    {
      if (v15 <= 4163)
      {
        if (v15 != 4146)
        {
          if (v15 != 4161)
            goto LABEL_60;
          v23 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          v21 = (unsigned int *)operator new(0x28uLL);
          XlChartAxisParent::XlChartAxisParent((XlChartAxisParent *)v21, v2);
          (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 167) + 1888))(*((_QWORD *)this + 167), v21);
          v25 = v21[4];
          if ((_DWORD)v25 == 1)
          {
            *((_DWORD *)this + 400) = v24;
          }
          else
          {
            if ((_DWORD)v25)
              goto LABEL_63;
            *((_DWORD *)this + 399) = v24;
          }
          XlChartBinaryReader::mineChartPlots(this, v25);
        }
        v31 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
        *((_DWORD *)this + 394) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      }
      else
      {
        switch(v15)
        {
          case 4164:
            v29 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
            *((_DWORD *)this + 414) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
            break;
          case 4195:
            v30 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
            *((_DWORD *)this + 401) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
            break;
          case 4196:
            XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
            v21 = (unsigned int *)operator new(0x18uLL);
            XlChartPlotGrowth::XlChartPlotGrowth((XlChartPlotGrowth *)v21, v2);
            (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 167) + 2144))(*((_QWORD *)this + 167), v21);
            *((float *)this + 482) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v21[4]);
            *((float *)this + 483) = EshFixedPointUtil::toFloat((EshFixedPointUtil *)v21[5]);
            goto LABEL_63;
          default:
            break;
        }
      }
LABEL_60:
      XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
      goto LABEL_64;
    }
    if (v15 > 4098)
    {
      switch(v15)
      {
        case 4099:
          XlChartBinaryReader::classifySeries((char **)this);
        case 4132:
          XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
          v26 = (XlChartDefaultText *)operator new(0x18uLL);
          XlChartDefaultText::XlChartDefaultText(v26, v2);
          (*(void (**)(_QWORD, XlChartDefaultText *))(**((_QWORD **)this + 167) + 1976))(*((_QWORD *)this + 167), v26);
          v27 = *((_DWORD *)v26 + 4);
          XlChartBinaryReader::nextSibling(this, v2);
          if (((v27 << 16) | 0xFFFFu) <= 0x4FFFE)
          {
            v28 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
            *((_DWORD *)this + (__int16)v27 + 395) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          }
          (*(void (**)(XlChartDefaultText *))(*(_QWORD *)v26 + 8))(v26);
          break;
        case 4133:
          v16 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
          v18 = v17;
          if (v13 == 2132)
            v19 = v14;
          else
            v19 = v17;
          v79 = 0;
          v78 = 0;
          v20 = XlChartBinaryReader::scanTextForObjectType(this, &v79, &v78);
          if (v20 == 1)
          {
            *((_DWORD *)this + 402) = v19;
          }
          else if (v20 == 4)
          {
            v77 = (unsigned __int16)v78 | ((unsigned __int16)v79 << 16);
            v80 = &v77;
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,int>,CsLess<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 228, &v77, (uint64_t)&std::piecewise_construct, &v80)+ 8) = v19;
          }
          v32 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 16))(v32, v18, 0);
          break;
      }
      goto LABEL_60;
    }
    if (v15 != 160)
    {
      if (v15 == 2132)
      {
        v22 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      }
      goto LABEL_60;
    }
    XlParserVisitor::skipHeader(*((XlParserVisitor **)this + 167));
    v21 = (unsigned int *)operator new(0x18uLL);
    XlScl::XlScl((XlScl *)v21, v2);
    (*(void (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 167) + 1008))(*((_QWORD *)this + 167), v21);
    *((_DWORD *)this + 484) = v21[4];
LABEL_63:
    (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
LABEL_64:
    v13 = (unsigned __int16)v2->var1;
  }
  while (1)
  {
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), v2, *((_BYTE *)this + 444));
    v33 = v2->var1;
    if (v33 == 10)
      break;
    if (v33 > 4196)
    {
      if (v33 == 4200)
        goto LABEL_75;
      if (v33 != 4197)
        goto LABEL_109;
      v34 = (unsigned __int16 *)operator new(0x18uLL);
      XlChartSiIndex::XlChartSiIndex((XlChartSiIndex *)v34, v2);
      (*(void (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 167) + 2272))(*((_QWORD *)this + 167), v34);
      if (v34[8] <= 3u)
      {
        v35 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
        *((_DWORD *)this + v34[8] + 410) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
      }
      (*(void (**)(unsigned __int16 *))(*(_QWORD *)v34 + 8))(v34);
    }
    else
    {
      if (v33 != 2135)
      {
        if (v33 != 4192)
          goto LABEL_109;
LABEL_75:
        XlParserVisitor::seekCurrentRecord(*((_QWORD *)this + 167));
        v36 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        v38 = v37;
        v39 = (char *)*((_QWORD *)this + 247);
        v40 = *((_QWORD *)this + 248);
        if ((unint64_t)v39 >= v40)
        {
          v48 = (char *)*((_QWORD *)this + 246);
          v49 = v39 - v48;
          v50 = (unint64_t)(v39 - v48) >> 2;
          v51 = (v40 - (unint64_t)v48) >> 2;
          if (2 * (int)v51 <= (v50 + 1))
            v52 = v50 + 1;
          else
            v52 = 2 * v51;
          if (v51 >= 0x7FFFFFFF)
            v53 = 0xFFFFFFFFLL;
          else
            v53 = v52;
          if ((_DWORD)v53)
          {
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 1984, v53);
            v56 = v55;
            v39 = (char *)*((_QWORD *)this + 247);
            v48 = (char *)*((_QWORD *)this + 246);
          }
          else
          {
            v54 = 0;
            v56 = 0;
          }
          v66 = &v54[v49 & 0x3FFFFFFFCLL];
          *(_DWORD *)v66 = v38;
          v41 = v66 + 4;
          while (v39 != v48)
          {
            v67 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          *((_QWORD *)this + 246) = v66;
          *((_QWORD *)this + 247) = v41;
          *((_QWORD *)this + 248) = &v54[4 * v56];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_DWORD *)v39 = v37;
          v41 = v39 + 4;
        }
        *((_QWORD *)this + 247) = v41;
        goto LABEL_109;
      }
      XlParserVisitor::seekCurrentRecord(*((_QWORD *)this + 167));
      v42 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      v44 = v43;
      v45 = (char *)*((_QWORD *)this + 244);
      v46 = *((_QWORD *)this + 245);
      if ((unint64_t)v45 >= v46)
      {
        v57 = (char *)*((_QWORD *)this + 243);
        v58 = v45 - v57;
        v59 = (unint64_t)(v45 - v57) >> 2;
        v60 = (v46 - (unint64_t)v57) >> 2;
        if (2 * (int)v60 <= (v59 + 1))
          v61 = v59 + 1;
        else
          v61 = 2 * v60;
        if (v60 >= 0x7FFFFFFF)
          v62 = 0xFFFFFFFFLL;
        else
          v62 = v61;
        if ((_DWORD)v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<float>>((uint64_t)this + 1960, v62);
          v65 = v64;
          v45 = (char *)*((_QWORD *)this + 244);
          v57 = (char *)*((_QWORD *)this + 243);
        }
        else
        {
          v63 = 0;
          v65 = 0;
        }
        v68 = &v63[v58 & 0x3FFFFFFFCLL];
        *(_DWORD *)v68 = v44;
        v47 = v68 + 4;
        while (v45 != v57)
        {
          v69 = *((_DWORD *)v45 - 1);
          v45 -= 4;
          *((_DWORD *)v68 - 1) = v69;
          v68 -= 4;
        }
        *((_QWORD *)this + 243) = v68;
        *((_QWORD *)this + 244) = v47;
        *((_QWORD *)this + 245) = &v63[4 * v65];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *(_DWORD *)v45 = v43;
        v47 = v45 + 4;
      }
      *((_QWORD *)this + 244) = v47;
LABEL_109:
      XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
    }
  }
  v70 = *((_QWORD *)this + 222);
  v71 = -858993459 * ((unint64_t)(*((_QWORD *)this + 223) - v70) >> 2);
  if (v71)
  {
    v72 = 0;
    v73 = *((_QWORD *)this + 225);
    v74 = (unint64_t)(*((_QWORD *)this + 226) - v73) >> 3;
    do
    {
      v75 = *(unsigned __int16 *)(v70 + 20 * v72 + 16);
      if (v74 > v75)
        *(_DWORD *)(v70 + 20 * v72 + 4) = *(_DWORD *)(v73 + 8 * v75 + 4);
      ++v72;
    }
    while (v71 > v72);
  }
  return MEMORY[0x22E2DD408](v2, 0x1000C4087442A64);
}

void sub_22A1FE254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

uint64_t XlChartBinaryReader::nextSibling(XlChartBinaryReader *this, XlHeader *a2)
{
  int var1;
  uint64_t v5;
  uint64_t v6;
  int RecordDataOffset;

  while (1)
  {
    XlParserVisitor::getHeader(*((XlParserVisitor **)this + 167), a2, *((_BYTE *)this + 444));
    var1 = (unsigned __int16)a2->var1;
    if (var1 != 4147)
      break;
    if (XlChartBinaryReader::nextSibling(this, a2))
    {
      do
        XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
      while ((XlChartBinaryReader::nextSibling(this, a2) & 1) != 0);
    }
  }
  if (var1 == 4148)
  {
    XlParserVisitor::seekNextRecord(*((_QWORD *)this + 167));
    return 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)this + 624))(this);
    RecordDataOffset = XlParserVisitor::getRecordDataOffset(*((XlParserVisitor **)this + 167));
    v5 = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, -RecordDataOffset, 1);
  }
  return v5;
}

uint64_t XlParserVisitor::seekNextRecord(uint64_t this)
{
  if ((*(_DWORD *)(this + 80) & 0x80000000) == 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 16) + 16))(*(_QWORD *)(this + 16));
  return this;
}

void XlChartPlotGrowth::XlChartPlotGrowth(XlChartPlotGrowth *this, XlHeader *a2)
{
  _QWORD *v2;

  XlRecord::XlRecord(this, a2);
  *v2 = &off_24F3A8B68;
  v2[2] = 0;
}

uint64_t XlChartParserVisitor::visit(XlParserVisitor *a1, uint64_t a2)
{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 22) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0xCu)
  {
    *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
    *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 64))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 64))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 40) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0x20u)
  {
    *(_WORD *)(a2 + 36) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
    *(_WORD *)(a2 + 42) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
    *(_WORD *)(a2 + 38) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 34) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD **)a1 + 2), 16, 1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0xCu)
    *(_WORD *)(a2 + 30) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 30) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) >= 0x10u)
  {
    *(_WORD *)(a2 + 26) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
    *(_WORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  }
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(double *)(a2 + 16) = (*(double (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 120))(*((_QWORD **)a1 + 2));
  *(double *)(a2 + 24) = (*(double (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 120))(*((_QWORD **)a1 + 2));
  *(double *)(a2 + 32) = (*(double (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 120))(*((_QWORD **)a1 + 2));
  *(double *)(a2 + 40) = (*(double (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 120))(*((_QWORD **)a1 + 2));
  *(double *)(a2 + 48) = (*(double (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 120))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 56) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD **)a1 + 2), 16, 1);
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  unsigned int v4;
  _DWORD *exception;

  XlParserVisitor::beginRead(a1);
  v4 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  if (v4 >= 0xFF)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3002;
  }
  *(_WORD *)(a2 + 16) = v4;
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 64))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 64))(*((_QWORD **)a1 + 2));
  *(_BYTE *)(a2 + 36) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 64))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD **)a1 + 2), 1, 1);
  *(double *)(a2 + 16) = (*(double (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 120))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  int v4;

  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 28) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  if (*(_DWORD *)(a2 + 8) < 0x14u)
  {
    v4 = 180;
  }
  else
  {
    *(_WORD *)(a2 + 30) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
    *(_WORD *)(a2 + 32) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
    v4 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  }
  *(_DWORD *)(a2 + 36) = v4;
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 18) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(float *)(a2 + 24) = (float)(*(unsigned int (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2))
                      * 0.000015259;
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_WORD *)(a2 + 20) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD **)a1 + 2), 2, 1);
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2)) & 1;
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 104))(*((_QWORD **)a1 + 2));
  *(_BYTE *)(a2 + 20) = ((*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2)) & 2) != 0;
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  *(_WORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 72))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

{
  XlParserVisitor::beginRead(a1);
  return XlParserVisitor::endRead((uint64_t)a1, a2);
}

void XlChartPlotGrowth::~XlChartPlotGrowth(XlChartPlotGrowth *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartBinaryReader::classifySeries(char **this)
{
  XlHeader *v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  int v6;
  int v7;
  int v8;
  int var1;
  int *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  __int128 v24;

  v2 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v2);
  v3 = (*((uint64_t (**)(char **))*this + 78))(this);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v2)
    || (XlParserVisitor::seekNextRecord((uint64_t)this[167]),
        XlParserVisitor::getHeader((XlParserVisitor *)this[167], v2, *((_BYTE *)this + 444)),
        v2->var1 != 4147))
  {
    LOWORD(v7) = 0;
    v6 = 0;
    v5 = 0;
    v8 = 1;
LABEL_17:
    v11 = this[223];
    v12 = (unint64_t)this[224];
    if ((unint64_t)v11 >= v12)
    {
      v14 = this[222];
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v14) >> 2);
      v16 = v15 + 1;
      if ((v15 + 1) > 0xCCCCCCCC)
        std::vector<std::shared_ptr<TSUStringChunk>>::__throw_length_error[abi:ne180100]();
      v17 = -858993459 * ((v12 - (unint64_t)v14) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x66666666)
        v18 = 3435973836;
      else
        v18 = v16;
      if ((_DWORD)v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<XlChartBinaryReader::SeriesDescriptor>>((uint64_t)(this + 224), v18);
        v21 = v20;
        v11 = this[223];
        v14 = this[222];
      }
      else
      {
        v19 = 0;
        v21 = 0;
      }
      v22 = &v19[20 * v15];
      *(_DWORD *)v22 = v4;
      *((_DWORD *)v22 + 1) = 0;
      *((_DWORD *)v22 + 2) = v6;
      *((_DWORD *)v22 + 3) = v8;
      v23 = &v19[20 * v21];
      *((_WORD *)v22 + 8) = v5;
      *((_WORD *)v22 + 9) = v7;
      v13 = v22 + 20;
      if (v11 != v14)
      {
        do
        {
          v24 = *(_OWORD *)(v11 - 20);
          *((_DWORD *)v22 - 1) = *((_DWORD *)v11 - 1);
          *(_OWORD *)(v22 - 20) = v24;
          v22 -= 20;
          v11 -= 20;
        }
        while (v11 != v14);
        v14 = this[222];
      }
      this[222] = v22;
      this[223] = v13;
      this[224] = v23;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v11 = v4;
      *((_DWORD *)v11 + 1) = 0;
      *((_DWORD *)v11 + 2) = v6;
      *((_DWORD *)v11 + 3) = v8;
      *((_WORD *)v11 + 8) = v5;
      v13 = v11 + 20;
      *((_WORD *)v11 + 9) = v7;
    }
    this[223] = v13;
LABEL_37:
    JUMPOUT(0x22E2DD408);
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  while (1)
  {
    while (1)
    {
      if (!XlChartBinaryReader::nextSibling((XlChartBinaryReader *)this, v2))
      {
        if ((v6 != 0) == (v7 == 0))
          goto LABEL_37;
        goto LABEL_17;
      }
      var1 = v2->var1;
      if (var1 > 4170)
        break;
      if (var1 == 4165)
      {
        v10 = (int *)operator new(0x18uLL);
        XlChartSerToCrt::XlChartSerToCrt((XlChartSerToCrt *)v10, v2);
        XlParserVisitor::skipHeader((XlParserVisitor *)this[167]);
        (*(void (**)(char *, int *))(*(_QWORD *)this[167] + 2248))(this[167], v10);
        v5 = *((_WORD *)v10 + 8);
      }
      else
      {
        if (var1 != 4170)
          goto LABEL_12;
        v10 = (int *)operator new(0x18uLL);
        XlChartSerParent::XlChartSerParent((XlChartSerParent *)v10, v2);
        XlParserVisitor::skipHeader((XlParserVisitor *)this[167]);
        (*(void (**)(char *, int *))(*(_QWORD *)this[167] + 2240))(this[167], v10);
        v7 = *((unsigned __int16 *)v10 + 8);
      }
LABEL_15:
      (*(void (**)(int *))(*(_QWORD *)v10 + 8))(v10);
    }
    if (var1 == 4171)
    {
      v6 = 2;
      goto LABEL_12;
    }
    if (var1 == 4187)
    {
      v10 = (int *)operator new(0x28uLL);
      XlChartSerAuxErrBar::XlChartSerAuxErrBar((XlChartSerAuxErrBar *)v10, v2);
      XlParserVisitor::skipHeader((XlParserVisitor *)this[167]);
      (*(void (**)(char *, int *))(*(_QWORD *)this[167] + 2192))(this[167], v10);
      v8 = v10[7];
      v6 = 1;
      goto LABEL_15;
    }
LABEL_12:
    XlParserVisitor::seekNextRecord((uint64_t)this[167]);
  }
}

void sub_22A1FE894(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

void XlChartSerToCrt::XlChartSerToCrt(XlChartSerToCrt *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8E68;
  *(_WORD *)(v2 + 16) = 0;
}

void XlChartSerToCrt::~XlChartSerToCrt(XlChartSerToCrt *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartDefaultText::XlChartDefaultText(XlChartDefaultText *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8760;
  *(_DWORD *)(v2 + 16) = 0;
}

void XlChartDefaultText::~XlChartDefaultText(XlChartDefaultText *this)
{
  JUMPOUT(0x22E2DD408);
}

void XlChartAxisParent::XlChartAxisParent(XlChartAxisParent *this, XlHeader *a2)
{
  uint64_t v2;

  XlRecord::XlRecord(this, a2);
  *(_QWORD *)v2 = &off_24F3A8460;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
}

uint64_t XlChartParserVisitor::visit(XlParserVisitor *a1, _DWORD *a2)
{
  XlParserVisitor::beginRead(a1);
  a2[4] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 80))(*((_QWORD **)a1 + 2));
  a2[5] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  a2[6] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  a2[7] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  a2[8] = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  return XlParserVisitor::endRead((uint64_t)a1, (uint64_t)a2);
}

void XlChartBinaryReader::mineChartPlots(XlChartBinaryReader *a1, uint64_t a2)
{
  XlHeader *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  XlChartScatter *v24;
  uint64_t v25;

  v4 = (XlHeader *)operator new(8uLL);
  XlHeader::XlHeader(v4);
  XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((_BYTE *)a1 + 444));
  if (v4->var1 == 4147)
  {
    v5 = a2 << 32;
    while (XlChartBinaryReader::nextSibling(a1, v4))
    {
      if (v4->var1 == 4116)
      {
        v6 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)a1 + 624))(a1);
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v8 = v7;
        v9 = (uint64_t *)*((_QWORD *)a1 + 226);
        v10 = *((_QWORD *)a1 + 227);
        if ((unint64_t)v9 >= v10)
        {
          v12 = *((_QWORD *)a1 + 225);
          v13 = (unint64_t)v9 - v12;
          v14 = (v10 - v12) >> 3;
          v15 = 2 * v14;
          if (2 * (int)v14 <= (v13 >> 3) + 1)
            v15 = (v13 >> 3) + 1;
          if (v14 >= 0x7FFFFFFF)
            v16 = 0xFFFFFFFFLL;
          else
            v16 = v15;
          if ((_DWORD)v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<ChAllocator<EshComputedValue>>((uint64_t)a1 + 1816, v16);
            v19 = v18;
          }
          else
          {
            v17 = 0;
            v19 = 0;
          }
          v20 = &v17[v13 & 0x7FFFFFFF8];
          *(_QWORD *)v20 = v5 | v8;
          v11 = v20 + 8;
          v21 = (char *)*((_QWORD *)a1 + 226);
          v22 = (char *)*((_QWORD *)a1 + 225);
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v20 - 1) = v23;
              v20 -= 8;
            }
            while (v21 != v22);
            v21 = (char *)*((_QWORD *)a1 + 225);
          }
          *((_QWORD *)a1 + 225) = v20;
          *((_QWORD *)a1 + 226) = v11;
          *((_QWORD *)a1 + 227) = &v17[8 * v19];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v9 = v5 | v7;
          v11 = v9 + 1;
        }
        *((_QWORD *)a1 + 226) = v11;
        if (!(_DWORD)a2
          && *((int *)a1 + 498) >= 1
          && (((unint64_t)v11 - *((_QWORD *)a1 + 225)) & 0x7FFFFFFF8) == 8)
        {
          XlParserVisitor::seekNextRecord(*((_QWORD *)a1 + 167));
          XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((_BYTE *)a1 + 444));
          if (v4->var1 == 4147)
          {
            XlParserVisitor::seekNextRecord(*((_QWORD *)a1 + 167));
            XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((_BYTE *)a1 + 444));
            if (v4->var1 == 4123)
            {
              v24 = (XlChartScatter *)operator new(0x18uLL);
              XlChartScatter::XlChartScatter(v24, v4);
              (*(void (**)(_QWORD, XlChartScatter *))(**((_QWORD **)a1 + 167) + 2184))(*((_QWORD *)a1 + 167), v24);
              if (XlChartChartFormat::isVaried(v24))
                *((_BYTE *)a1 + 1996) = 1;
              if (v24)
                (*(void (**)(XlChartScatter *))(*(_QWORD *)v24 + 8))(v24);
            }
          }
          v25 = (*(uint64_t (**)(XlChartBinaryReader *))(*(_QWORD *)a1 + 624))(a1);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, v8, 0);
          XlParserVisitor::getHeader(*((XlParserVisitor **)a1 + 167), v4, *((_BYTE *)a1 + 444));
        }
      }
      XlParserVisitor::seekNextRecord(*((_QWORD *)a1 + 167));
    }
  }
  JUMPOUT(0x22E2DD408);
}

void sub_22A1FED6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  MEMORY[0x22E2DD408](v1, 0x1000C4087442A64);
  _Unwind_Resume(a1);
}

