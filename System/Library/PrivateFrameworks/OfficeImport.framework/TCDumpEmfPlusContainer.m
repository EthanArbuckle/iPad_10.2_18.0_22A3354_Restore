@implementation TCDumpEmfPlusContainer

- (void)fromBinary:(__sFILE *)a3 toXml:(_xmlNode *)a4 state:(id)a5
{
  TCDumpNumeric *v7;
  TCDumpNumeric *v8;
  int LEUI32;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  xmlNode *v14;
  xmlNode *v15;
  xmlNode *v16;
  xmlNode *v17;
  xmlNode *v18;
  unsigned int v19;
  unsigned int v20;
  xmlNode *v21;
  xmlNode *v22;
  TCDumpBlob *v23;
  uint64_t i;
  TCDumpEnum *v25;
  TCDumpNumeric *v26;
  _DWORD v27[2];
  const __CFString *v28;
  int v29;
  const __CFString *v30;
  int v31;
  const __CFString *v32;
  int v33;
  const __CFString *v34;
  int v35;
  const __CFString *v36;
  int v37;
  const __CFString *v38;
  int v39;
  const __CFString *v40;
  int v41;
  const __CFString *v42;
  int v43;
  const __CFString *v44;
  int v45;
  const __CFString *v46;
  int v47;
  const __CFString *v48;
  int v49;
  const __CFString *v50;
  int v51;
  const __CFString *v52;
  int v53;
  const __CFString *v54;
  int v55;
  const __CFString *v56;
  int v57;
  const __CFString *v58;
  int v59;
  const __CFString *v60;
  int v61;
  const __CFString *v62;
  int v63;
  const __CFString *v64;
  int v65;
  const __CFString *v66;
  int v67;
  const __CFString *v68;
  int v69;
  const __CFString *v70;
  int v71;
  const __CFString *v72;
  int v73;
  const __CFString *v74;
  int v75;
  const __CFString *v76;
  int v77;
  const __CFString *v78;
  int v79;
  const __CFString *v80;
  int v81;
  const __CFString *v82;
  int v83;
  const __CFString *v84;
  int v85;
  const __CFString *v86;
  int v87;
  const __CFString *v88;
  int v89;
  const __CFString *v90;
  int v91;
  const __CFString *v92;
  int v93;
  const __CFString *v94;
  int v95;
  const __CFString *v96;
  int v97;
  const __CFString *v98;
  int v99;
  const __CFString *v100;
  int v101;
  const __CFString *v102;
  int v103;
  const __CFString *v104;
  int v105;
  const __CFString *v106;
  int v107;
  const __CFString *v108;
  int v109;
  const __CFString *v110;
  int v111;
  const __CFString *v112;
  int v113;
  const __CFString *v114;
  int v115;
  const __CFString *v116;
  int v117;
  const __CFString *v118;
  int v119;
  const __CFString *v120;
  int v121;
  const __CFString *v122;
  int v123;
  const __CFString *v124;
  int v125;
  const __CFString *v126;
  int v127;
  const __CFString *v128;
  int v129;
  const __CFString *v130;
  int v131;
  const __CFString *v132;
  int v133;
  const __CFString *v134;
  int v135;
  const __CFString *v136;
  int v137;
  const __CFString *v138;
  int v139;
  const __CFString *v140;
  int v141;
  const __CFString *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v7 = -[TCDumpNumeric initWithType:]([TCDumpNumeric alloc], "initWithType:", 5);
  v26 = -[TCDumpNumeric initWithType:]([TCDumpNumeric alloc], "initWithType:", 3);
  v27[0] = 16385;
  v28 = CFSTR("Header");
  v29 = 16386;
  v30 = CFSTR("EndOfFile");
  v31 = 16387;
  v32 = CFSTR("Comment");
  v33 = 16388;
  v34 = CFSTR("GetDC");
  v35 = 16389;
  v36 = CFSTR("MultiFormatStart");
  v37 = 16390;
  v38 = CFSTR("MultiFormatSection");
  v39 = 16391;
  v40 = CFSTR("MultiFormatEnd");
  v41 = 16392;
  v42 = CFSTR("Object");
  v43 = 16393;
  v44 = CFSTR("Clear");
  v45 = 16394;
  v46 = CFSTR("FillRects");
  v47 = 16395;
  v48 = CFSTR("DrawRects");
  v49 = 16396;
  v50 = CFSTR("FillPolygon");
  v51 = 16397;
  v52 = CFSTR("DrawLines");
  v53 = 16398;
  v54 = CFSTR("FillEllipse");
  v55 = 16399;
  v56 = CFSTR("DrawEllipse");
  v57 = 16400;
  v58 = CFSTR("FillPie");
  v59 = 16401;
  v60 = CFSTR("DrawPie");
  v61 = 16402;
  v62 = CFSTR("DrawArc");
  v63 = 16403;
  v64 = CFSTR("FillRegion");
  v65 = 16404;
  v66 = CFSTR("FillPath");
  v67 = 16405;
  v68 = CFSTR("DrawPath");
  v69 = 16406;
  v70 = CFSTR("FillClosedCurve");
  v71 = 16407;
  v72 = CFSTR("DrawClosedCurve");
  v73 = 16408;
  v74 = CFSTR("DrawCurve");
  v75 = 16409;
  v76 = CFSTR("DrawBeziers");
  v77 = 16410;
  v78 = CFSTR("DrawImage");
  v79 = 16411;
  v80 = CFSTR("DrawImagePoints");
  v81 = 16412;
  v82 = CFSTR("DrawString");
  v83 = 16413;
  v84 = CFSTR("SetRenderingOrigin");
  v85 = 16414;
  v86 = CFSTR("SetAntiAliasMode");
  v87 = 16415;
  v88 = CFSTR("SetTextRenderingHint");
  v89 = 16416;
  v90 = CFSTR("SetTextContrast");
  v91 = 16417;
  v92 = CFSTR("SetInterpolationMode");
  v93 = 16418;
  v94 = CFSTR("SetPixelOffsetMode");
  v95 = 16419;
  v96 = CFSTR("SetCompositingMode");
  v97 = 16420;
  v98 = CFSTR("SetCompositingQuality");
  v99 = 16421;
  v100 = CFSTR("Save");
  v101 = 16422;
  v102 = CFSTR("Restore");
  v103 = 16423;
  v104 = CFSTR("BeginContainer");
  v105 = 16424;
  v106 = CFSTR("BeginContainerNoParams");
  v107 = 16425;
  v108 = CFSTR("EndContainer");
  v109 = 16426;
  v110 = CFSTR("SetWorldTransform");
  v111 = 16427;
  v112 = CFSTR("ResetWorldTransform");
  v113 = 16428;
  v114 = CFSTR("MultiplyWorldTransform");
  v115 = 16429;
  v116 = CFSTR("TranslateWorldTransform");
  v117 = 16430;
  v118 = CFSTR("ScaleWorldTransform");
  v119 = 16431;
  v120 = CFSTR("RotateWorldTransform");
  v121 = 16432;
  v122 = CFSTR("SetPageTransform");
  v123 = 16433;
  v124 = CFSTR("ResetClip");
  v125 = 16434;
  v126 = CFSTR("SetClipRect");
  v127 = 16435;
  v128 = CFSTR("SetClipPath");
  v129 = 16436;
  v130 = CFSTR("SetClipRegion");
  v131 = 16437;
  v132 = CFSTR("OffsetClip");
  v133 = 16438;
  v134 = CFSTR("DrawDriverString");
  v135 = 16439;
  v136 = CFSTR("StrokeFillPath");
  v137 = 16440;
  v138 = CFSTR("SerializableObject");
  v139 = 16441;
  v140 = CFSTR("SetTSGraphics");
  v141 = 16442;
  v142 = CFSTR("SetTSClip");
  v143 = 0;
  v144 = 0;
  v25 = -[TCDumpEnum initWithTypeName:pairs:]([TCDumpEnum alloc], "initWithTypeName:pairs:", CFSTR("EmfPlusRecordType"), v27);
  v8 = -[TCDumpNumeric initWithType:enumType:]([TCDumpNumeric alloc], "initWithType:enumType:", 3, v25);
  fseek(a3, -8, 1);
  LEUI32 = TCDumpReadLEUI32(a3);
  fseek(a3, 4, 1);
  v10 = LEUI32 + ftello(a3) - 4;
  v11 = ftello(a3);
  if (v10 > v11)
  {
    v12 = v11;
    v13 = 0;
    do
    {
      v14 = xmlNewNode(0, (const xmlChar *)"EmfPlusRecord");
      xmlAddChild(a4, v14);
      sfaxmlSetLongNoNsProp(v14, (const xmlChar *)"index", v13);
      v15 = xmlNewNode(0, (const xmlChar *)"type");
      xmlAddChild(v14, v15);
      -[TCDumpNumeric fromBinary:toXml:state:](v8, "fromBinary:toXml:state:", a3, v15, 0);
      v16 = xmlNewNode(0, (const xmlChar *)"flags");
      xmlAddChild(v14, v16);
      -[TCDumpNumeric fromBinary:toXml:state:](v26, "fromBinary:toXml:state:", a3, v16, 0);
      v17 = xmlNewNode(0, (const xmlChar *)"record-size");
      xmlAddChild(v14, v17);
      -[TCDumpNumeric fromBinary:toXml:state:](v7, "fromBinary:toXml:state:", a3, v17, 0);
      fseek(a3, -4, 1);
      if (TCDumpReadLEUI32(a3) != 8)
      {
        v18 = xmlNewNode(0, (const xmlChar *)"data-size");
        xmlAddChild(v14, v18);
        -[TCDumpNumeric fromBinary:toXml:state:](v7, "fromBinary:toXml:state:", a3, v18, 0);
        fseek(a3, -4, 1);
        v19 = TCDumpReadLEUI32(a3);
        v20 = v12 + 12;
        if (v19 + v12 + 12 > v10)
        {
          v21 = xmlNewNode(0, (const xmlChar *)"actual-data-size");
          xmlAddChild(v14, v21);
          v19 = v10 - v20;
          writeIntToXml(v21, v10 - v20, 4, 0, 0, 0);
        }
        if (v19)
        {
          v22 = xmlNewNode(0, (const xmlChar *)"data");
          xmlAddChild(v14, v22);
          v23 = -[TCDumpBlob initWithSize_:]([TCDumpBlob alloc], "initWithSize_:", v19);
          -[TCDumpBlob fromBinary:toXml:state:](v23, "fromBinary:toXml:state:", a3, v22, 0);

        }
      }
      ++v13;
      v12 = ftello(a3);
    }
    while (v10 > v12);
  }

  for (i = 234; i != -2; i -= 4)
}

@end
