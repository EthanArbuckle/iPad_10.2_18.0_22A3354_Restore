@implementation CHXTitle

+ (id)chdTitleFromXmlTitleElement:(_xmlNode *)a3 isChartTitle:(BOOL)a4 state:(id)a5
{
  _BOOL8 v5;
  id v7;
  CHDTitle *v8;
  void *v9;
  CHDTitle *v10;
  void *v11;
  CXNamespace *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  CXNamespace *v17;
  _xmlNode *v18;
  void *v19;
  void *v20;
  void *v21;
  CXNamespace *v22;
  uint64_t v23;
  OADGraphicProperties *v24;
  void *v25;
  CXNamespace *v26;
  _xmlNode *v27;
  void *v28;
  CXNamespace *v29;
  _xmlNode *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  CXNamespace *v37;
  void *v38;
  CXNamespace *v39;
  _xmlNode *v40;
  void *v42;
  CXNamespace *v43;
  uint64_t v44;
  id v45;
  id v46;

  v5 = a4;
  v7 = a5;
  v8 = [CHDTitle alloc];
  objc_msgSend(v7, "chart");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CHDTitle initWithChart:](v8, "initWithChart:", v9);

  objc_msgSend(v7, "drawingState");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "OAXChartNamespace");
  v12 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v13 = OCXFindChild(a3, v12, "tx");

  if (v13)
  {
    objc_msgSend(v7, "pushTitleTextProperties:", v5);
    v45 = 0;
    v46 = 0;
    +[CHXString readFromXmlTxElement:formula:lastCached:state:](CHXString, "readFromXmlTxElement:formula:lastCached:state:", v13, &v46, &v45, v7);
    v14 = v46;
    v15 = v45;
    objc_msgSend(v7, "popTitleTextProperties");
    -[CHDTitle setName:](v10, "setName:", v14);
    -[CHDTitle setLastCachedName:](v10, "setLastCachedName:", v15);

  }
  else
  {
    -[CHDTitle setIsAutoGenerated:](v10, "setIsAutoGenerated:", 1);
  }
  objc_msgSend(v7, "drawingState");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "OAXChartNamespace");
  v17 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v18 = (_xmlNode *)OCXFindChild(a3, v17, "txPr");

  if (v18)
  {
    if (!v13)
    {
      +[CHXFont edRunCollectionFromXmlTextPropertiesElement:state:](CHXFont, "edRunCollectionFromXmlTextPropertiesElement:state:", v18, v7);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        +[EDString string](EDString, "string");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setRuns:", v19);
        -[CHDTitle setLastCachedName:](v10, "setLastCachedName:", v20);

      }
    }
    objc_msgSend(v7, "drawingState");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "OAXMainNamespace");
    v22 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
    v23 = OCXFindChild(v18, v22, "bodyPr");

    if (v23)
    {
      +[OAXBaseTypes readOptionalAngleFromXmlNode:name:](OAXBaseTypes, "readOptionalAngleFromXmlNode:name:", v23, "rot");
      -[CHDTitle setTitleRotationAngle:](v10, "setTitleRotationAngle:");
    }
  }
  v24 = objc_alloc_init(OADGraphicProperties);
  +[CHXGraphicProperties setGraphicPropertiesFromXmlElementWithGraphicProperties:element:state:](CHXGraphicProperties, "setGraphicPropertiesFromXmlElementWithGraphicProperties:element:state:", v24, a3, v7);
  objc_msgSend(v7, "drawingState");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "OAXChartNamespace");
  v26 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v27 = (_xmlNode *)OCXFindChild(a3, v26, "layout");

  if (!v27)
  {
    if (a3->children)
      goto LABEL_20;
    goto LABEL_18;
  }
  objc_msgSend(v7, "drawingState");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "OAXChartNamespace");
  v29 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v30 = (_xmlNode *)OCXFindChild(v27, v29, "manualLayout");

  if (!v30)
  {
LABEL_18:
    -[CHDTitle setIsPositionAutoGenerated:](v10, "setIsPositionAutoGenerated:", 1);
LABEL_19:
    -[CHDTitle setIsSizeAutoGenerated:](v10, "setIsSizeAutoGenerated:", 1);
    goto LABEL_20;
  }
  -[OADDrawableProperties orientedBounds](v24, "orientedBounds");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "bounds");
  v33 = v32;
  v35 = v34;

  if (v33 == 0.0 && v35 == 0.0)
  {
    objc_msgSend(v7, "drawingState");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "OAXChartNamespace");
    v37 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
    if (OCXFindChild(v30, v37, "w"))
    {

      goto LABEL_20;
    }
    objc_msgSend(v7, "drawingState");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "OAXChartNamespace");
    v43 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
    v44 = OCXFindChild(v30, v43, "h");

    if (!v44)
      goto LABEL_19;
  }
LABEL_20:
  -[CHDTitle setGraphicProperties:](v10, "setGraphicProperties:", v24);
  objc_msgSend(v7, "drawingState");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "OAXChartNamespace");
  v39 = (CXNamespace *)objc_claimAutoreleasedReturnValue();
  v40 = (_xmlNode *)OCXFindChild(a3, v39, "overlay");

  if (v40)
    -[CHDTitle setIsOverlay:](v10, "setIsOverlay:", CXRequiredBoolAttribute(v40, (CXNamespace *)CXNoNamespace, (xmlChar *)"val"));

  return v10;
}

@end
