uint64_t Apple80211CopyCurrentNetwork()
{
  return Apple80211CopyValue();
}

void Apple80211EventMonitoringHelper(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unsigned int *v5;
  unsigned int v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  NSObject *v21;
  const char *v22;
  uint32_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v34;
  int *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  int v40;
  int v41;
  NSObject *v42;
  const char *v43;
  uint32_t v44;
  unint64_t v45;
  uint64_t v46;
  const char *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v51;
  __uint64_t v52;
  unsigned int v53;
  _QWORD block[7];
  int v55;
  int v56;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  _BYTE v60[28];
  _BYTE v61[10];
  __int16 v62;
  const char *v63;
  __int16 v64;
  __int128 *v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 1804)
    || !*(_QWORD *)(a1 + 1824)
    || !*(_QWORD *)(a1 + 1832)
    || (v5 = *(unsigned int **)(a1 + 1848)) == 0)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v42 = MEMORY[0x24BDACB70];
    v43 = "IOUCPipe is invalid\n";
    v44 = 2;
    goto LABEL_69;
  }
  v52 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (*(_BYTE *)(a1 + 1928))
    return;
  v9 = v5[1];
  if (v9 == *v5)
    return;
  v10 = MEMORY[0x24BDACB70];
  while (1)
  {
    v53 = *v5;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v52;
    v12 = *(NSObject **)(a1 + 1816);
    if (v12)
      v13 = v11 >= 0xBEBC201;
    else
      v13 = 0;
    if (v13)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v58 = "Apple80211EventMonitoringHelper";
        v59 = 2048;
        *(_QWORD *)v60 = v11 / 0xF4240;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: processing events for %llu ms, temporarily suspending to prevent starvation", buf, 0x16u);
        v12 = *(NSObject **)(a1 + 1816);
      }
      *(_BYTE *)(a1 + 1928) = 1;
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = __Apple80211EventMonitoringHelper_block_invoke;
      block[3] = &__block_descriptor_tmp_1307;
      block[4] = a1;
      block[5] = a1;
      block[6] = a3;
      v55 = a2;
      v56 = a4;
      dispatch_async(v12, block);
      return;
    }
    __dmb(0xBu);
    v14 = *(_QWORD *)(a1 + 1840);
    if (v14 < v53)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 136315650;
      v58 = "Apple80211EventMonitoringHelper";
      v59 = 1024;
      *(_DWORD *)v60 = v53;
      *(_WORD *)&v60[4] = 2048;
      *(_QWORD *)&v60[6] = v14;
      v42 = MEMORY[0x24BDACB70];
      v43 = "%s:Ring offset out of range: %u > %llu\n";
LABEL_78:
      v44 = 28;
      goto LABEL_69;
    }
    v15 = *(_QWORD *)(a1 + 1832);
    v16 = v15 + v53;
    if ((v16 & 3) != 0)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 136315650;
      v58 = "Apple80211EventMonitoringHelper";
      v59 = 2048;
      *(_QWORD *)v60 = 4;
      *(_WORD *)&v60[8] = 1024;
      *(_DWORD *)&v60[10] = v53;
      v42 = MEMORY[0x24BDACB70];
      v43 = "%s:Read Ptr is not multiple of %lu (%d) \n";
      goto LABEL_78;
    }
    v17 = *(_DWORD *)v16;
    if (*(_DWORD *)v16 == 80 || v14 - v53 <= 0x2F)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v58 = "Apple80211EventMonitoringHelper";
        v59 = 1024;
        *(_DWORD *)v60 = v53;
        _os_log_impl(&dword_20647D000, v10, OS_LOG_TYPE_DEFAULT, "%s: Skipping Padding Read offset is %d\n", buf, 0x12u);
        v14 = *(_QWORD *)(a1 + 1840);
      }
      v18 = (v53 + 4) % v14;
LABEL_19:
      while (1)
      {
        v19 = __ldxr(v5);
        if (v19 != v53)
          break;
        if (!__stxr(v18, v5))
        {
          v9 = v5[1];
          goto LABEL_61;
        }
      }
      __clrex();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_61;
      v20 = *v5;
      *(_DWORD *)buf = 136315906;
      v58 = "Apple80211EventMonitoringHelper";
      v59 = 1024;
      *(_DWORD *)v60 = v20;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v19;
      *(_WORD *)&v60[10] = 1024;
      *(_DWORD *)&v60[12] = v18;
      v21 = v10;
      v22 = "%s: Couldn't update read ptr, ringRead Offset %u, oldReadOffset %u, newOffset %u\n";
      v23 = 30;
      goto LABEL_60;
    }
    v24 = *(_OWORD *)v16;
    v25 = *(_OWORD *)(v16 + 32);
    v71 = *(_OWORD *)(v16 + 16);
    v72 = v25;
    v70 = v24;
    if (v53 == *v5 && v17 == (_DWORD)v70)
      break;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v58 = "Apple80211EventMonitoringHelper";
      v21 = v10;
      v22 = "%s: Read pointer moved while copying metadata. Retrying.\n";
      v23 = 12;
LABEL_60:
      _os_log_impl(&dword_20647D000, v21, OS_LOG_TYPE_DEFAULT, v22, buf, v23);
    }
LABEL_61:
    if (v9 == *v5)
      return;
  }
  if ((_DWORD)v70 != 87)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    if ((HIDWORD(v71) - 241) >= 0xFFFFFF10)
      v47 = (const char *)gAppleMIndexToString[HIDWORD(v71)];
    else
      v47 = "unknown APPLE80211_M_";
    *(_DWORD *)buf = 136448770;
    v58 = "Apple80211EventMonitoringHelper";
    v59 = 2048;
    *(_QWORD *)v60 = v15 + v53;
    *(_WORD *)&v60[8] = 1024;
    *(_DWORD *)&v60[10] = v70;
    *(_WORD *)&v60[14] = 1024;
    *(_DWORD *)&v60[16] = WORD3(v70);
    *(_WORD *)&v60[20] = 1024;
    *(_DWORD *)&v60[22] = WORD4(v71);
    *(_WORD *)&v60[26] = 1024;
    *(_DWORD *)v61 = WORD5(v71);
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = HIDWORD(v71);
    v62 = 2082;
    v63 = v47;
    v64 = 2082;
    v65 = &v72;
    v66 = 1024;
    v67 = v53;
    v68 = 1024;
    v69 = v9;
    v42 = MEMORY[0x24BDACB70];
    v43 = "%{public}s: Invalid Metadata state, dump METADATA[%p]: state %d, sequenceNumber %u, payload %u, padding %u, ev"
          "ent_code %u/'%{public}s', ifname %{public}s, readOffset 0x%x, writeOffset 0x%x\n";
    v44 = 84;
    goto LABEL_69;
  }
  v26 = (v53 + 48) % v14;
  v27 = v26 + v15;
  v28 = v26 + WORD4(v71);
  v29 = (v14 - v26);
  if (v28 <= v14)
    v30 = 0;
  else
    v30 = v15;
  if (v28 <= v14)
    v31 = WORD4(v71);
  else
    v31 = v29;
  if (v28 <= v14)
    v32 = 0;
  else
    v32 = WORD4(v71) - v29;
  if (v27 < v15 + v14 && v27 >= v15)
  {
    if (!v30 || (v30 < v15 + v14 ? (v34 = v30 >= v15) : (v34 = 0), v34))
    {
      if (v31 < v14 && v32 < v14)
      {
        _writeEventBuffer();
        if (v53 == *v5)
        {
          v36 = (int *)(*(_QWORD *)(a1 + 1832) + *v5);
          if ((_DWORD)v70 != *v36)
          {
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              goto LABEL_61;
            v40 = *v36;
            *(_DWORD *)buf = 136315650;
            v58 = "Apple80211EventMonitoringHelper";
            v59 = 1024;
            *(_DWORD *)v60 = v70;
            *(_WORD *)&v60[4] = 1024;
            *(_DWORD *)&v60[6] = v40;
            v21 = v10;
            v22 = "%s:metadata state changed [%d->%d] while processing event, retrying\n";
            v23 = 24;
            goto LABEL_60;
          }
          v37 = WORD4(v71);
          v38 = *((unsigned __int16 *)v36 + 12);
          if (WORD4(v71) != v38 || WORD5(v71) != *((unsigned __int16 *)v36 + 13))
          {
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              goto LABEL_61;
            v41 = *((unsigned __int16 *)v36 + 13);
            *(_DWORD *)buf = 136316162;
            v58 = "Apple80211EventMonitoringHelper";
            v59 = 1024;
            *(_DWORD *)v60 = v37;
            *(_WORD *)&v60[4] = 1024;
            *(_DWORD *)&v60[6] = v38;
            *(_WORD *)&v60[10] = 1024;
            *(_DWORD *)&v60[12] = WORD5(v71);
            *(_WORD *)&v60[16] = 1024;
            *(_DWORD *)&v60[18] = v41;
            v21 = v10;
            v22 = "%s:metadata payload/padding changed [%u/%u->%u/%u] while processing event, retrying\n";
            v23 = 36;
            goto LABEL_60;
          }
          v39 = *(const char **)(a1 + 1840);
          v18 = (WORD4(v71) + WORD5(v71) + v53 + 48) % (unint64_t)v39;
          if ((v18 & 3) == 0)
            goto LABEL_19;
          v49 = WORD5(v71);
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            return;
          v51 = *v5;
          *(_DWORD *)buf = 136316930;
          v58 = "Apple80211EventMonitoringHelper";
          v59 = 1024;
          *(_DWORD *)v60 = v53;
          *(_WORD *)&v60[4] = 1024;
          *(_DWORD *)&v60[6] = v37;
          *(_WORD *)&v60[10] = 1024;
          *(_DWORD *)&v60[12] = v49;
          *(_WORD *)&v60[16] = 2048;
          *(_QWORD *)&v60[18] = v37 + v49 + 48;
          *(_WORD *)&v60[26] = 1024;
          *(_DWORD *)v61 = v51;
          *(_WORD *)&v61[4] = 1024;
          *(_DWORD *)&v61[6] = v18;
          v62 = 2048;
          v63 = v39;
          v42 = MEMORY[0x24BDACB70];
          v43 = "%s: Created a bad offset, don't save it, localReadOffset %u, payload %u, padding %u, total length %lu, o"
                "ldOffset %u, newOffset %u, ringSize 0x%llx";
LABEL_81:
          v44 = 62;
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            return;
          v48 = *v5;
          *(_DWORD *)buf = 136315650;
          v58 = "Apple80211EventMonitoringHelper";
          v59 = 1024;
          *(_DWORD *)v60 = v53;
          *(_WORD *)&v60[4] = 1024;
          *(_DWORD *)&v60[6] = v48;
          v42 = MEMORY[0x24BDACB70];
          v43 = "%s:read pointer moved [%u->%u] unexpected while processing event\n";
          v44 = 24;
        }
LABEL_69:
        _os_log_impl(&dword_20647D000, v42, OS_LOG_TYPE_DEFAULT, v43, buf, v44);
        return;
      }
    }
  }
  v45 = v31;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v46 = *(_QWORD *)(a1 + 1848);
    *(_DWORD *)buf = 136316418;
    v58 = "Apple80211EventMonitoringHelper";
    v59 = 2048;
    *(_QWORD *)v60 = v46;
    *(_WORD *)&v60[8] = 2048;
    *(_QWORD *)&v60[10] = v15;
    *(_WORD *)&v60[18] = 2048;
    *(_QWORD *)&v60[20] = v14;
    *(_WORD *)v61 = 2048;
    *(_QWORD *)&v61[2] = v45;
    v62 = 2048;
    v63 = (const char *)v32;
    v42 = MEMORY[0x24BDACB70];
    v43 = "%s: Unexpected log parameters ring state3(0x%llx), ring buffer(0x%llx), ring size(%llu), logSize(%lu), logContinueSize(%lu)\n";
    goto LABEL_81;
  }
}

void _writeEventBuffer()
{
  uint64_t v0;
  size_t v1;
  size_t v2;
  const void *v3;
  const void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  int v20;
  _DWORD v21[5];
  __int128 v22;
  _BYTE v23[4080];
  uint64_t v24;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v24 = *MEMORY[0x24BDAC8D0];
  bzero(v21, 0x1014uLL);
  v22 = *(_OWORD *)(v8 + 32);
  if (v6 >= 0xFF0)
    v6 = 4080;
  __memcpy_chk();
  LODWORD(v10) = v6 + 16;
  if (v4)
  {
    v11 = &v23[v6];
    v10 = v2 + v10;
    if (v10 > 0x1000)
    {
      memcpy(v11, v4, 4080 - v6);
      LODWORD(v10) = 4096;
    }
    else
    {
      memcpy(v11, v4, v2);
    }
  }
  v12 = *(unsigned int *)(v8 + 28);
  v20 = v10 + 24;
  v21[4] = v12;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    if ((v12 - 241) >= 0xFFFFFF10)
      v13 = (const char *)gAppleMIndexToString[v12];
    else
      v13 = "unknown APPLE80211_M_";
    v14 = 136446722;
    v15 = "_writeEventBuffer";
    v16 = 1024;
    v17 = v12;
    v18 = 2082;
    v19 = v13;
    _os_log_debug_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%{public}s: processing event %d/'%{public}s'\n", (uint8_t *)&v14, 0x1Cu);
  }
  _eventRead(v9, &v20);
}

void _eventRead(uint64_t a1, int *a2)
{
  __int128 v2;
  int v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  pthread_t v18;
  _BOOL4 v19;
  int *v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t, uint64_t, int *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  pthread_t v30;
  pthread_t v31;
  uint64_t v32;
  pthread_t v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  int *v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  _BYTE buf[37];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v40 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38 = v2;
  v39 = v2;
  v3 = *a2;
  if ((*a2 - 24) < 0x10)
    return;
  v6 = (_BYTE *)(a1 + 4);
  if (strncmp((const char *)a2 + 24, (const char *)(a1 + 4), 0x10uLL))
    return;
  v7 = (v3 - 40);
  if (*(_BYTE *)(a1 + 51))
  {
    if (*(_BYTE *)(a1 + 52))
    {
      v8 = a2[5];
      goto LABEL_10;
    }
    v8 = a2[5];
    v11 = (v8 - 1);
    v10 = 1 << ((v8 - 1) & 7);
    if ((v10 & *(_BYTE *)(a1 + (v11 >> 3) + 20)) != 0)
    {
LABEL_10:
      if ((_DWORD)v7)
        v12 = a2 + 10;
      else
        v12 = 0;
      (*(void (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t, _QWORD))(a1 + 72))(0, a1, v8, v12, v7, *(_QWORD *)(a1 + 80));
      if (a2[5] == 10)
      {
LABEL_14:
        v13 = *(NSObject **)(a1 + 152);
        if (v13)
          dispatch_semaphore_signal(v13);
      }
      return;
    }
    v9 = v11 >> 3;
  }
  else
  {
    v8 = a2[5];
    if (*(_BYTE *)(a1 + 52))
      goto LABEL_18;
    v9 = (v8 - 1) >> 3;
    v10 = 1 << ((v8 - 1) & 7);
  }
  if ((v10 & *(_BYTE *)(a1 + v9 + 20)) == 0)
    return;
LABEL_18:
  if ((int)v8 > 136)
  {
    if ((int)v8 <= 175)
    {
      switch((int)v8)
      {
        case 137:
          _dispatchRoamScanStart(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 138:
          _dispatchRoamScanEnd(a1, (unsigned __int8 *)a2 + 40, v7);
          break;
        case 139:
          _dispatchRoamPrep(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 140:
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "_eventRead";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4375;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d Processing _dispatchBssSteeringRequest\n", buf, 0x12u);
          }
          _dispatchBssSteeringRequest(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 141:
          _dispatchSoftAPLPMEvent(a1, a2 + 10, v7);
          break;
        case 142:
        case 144:
        case 146:
        case 147:
        case 148:
        case 149:
        case 152:
        case 153:
        case 154:
        case 155:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
          goto LABEL_69;
        case 143:
          _dispatchActionFrameEvent(a1, (_BYTE *)a2 + 40, v7);
          break;
        case 145:
          _dispatchWeightedAvgLQMUpdateEvent(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 150:
          _dispatchDPS(a1, a2 + 10, v7);
          break;
        case 151:
          _dispatchSlowWiFi(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 156:
          _dispatchRealtimeSessionEvent(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 164:
          _dispatchSlowWiFiLinkProbeTrigger(a1, (uint64_t)(a2 + 10), v7);
          break;
        case 165:
          _dispatchSlowWiFiUserInputTrigger(a1, (uint64_t)(a2 + 10), v7);
          break;
        default:
          if ((_DWORD)v8 != 169)
            goto LABEL_69;
          _dispatchLqmTxStatsUpdate(a1, (uint64_t)(a2 + 10), v7);
          break;
      }
      return;
    }
    if ((int)v8 <= 209)
    {
      switch((int)v8)
      {
        case 189:
          _dispatchTrafficInfoEvent(a1, (_BYTE *)a2 + 40, v7);
          return;
        case 190:
          _dispatchBTCoexStatsUpdateEvent(a1, (uint64_t)(a2 + 10), v7);
          return;
        case 191:
        case 194:
        case 195:
        case 197:
        case 198:
          goto LABEL_69;
        case 192:
          _dispatchSIBEvent(a1, a2 + 10, v7);
          return;
        case 193:
          _dispatchSensingResults(a1, (_BYTE *)a2 + 40, v7);
          return;
        case 196:
          _dispatchTTRFromDriver(a1, (const char *)a2 + 40, v7);
          return;
        case 199:
          _dispatchColocatedCacheEvent(a1, a2 + 10, v7);
          return;
        default:
          if ((_DWORD)v8 == 176)
          {
            _dispatchLqmCrashTracer(a1, a2 + 10, v7);
          }
          else
          {
            if ((_DWORD)v8 != 180)
              goto LABEL_69;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "_eventRead";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4370;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d Processing _dispatchBeaconCacheUpdate\n", buf, 0x12u);
            }
            _dispatchBeaconCacheUpdate(a1, (uint64_t)(a2 + 10), v7);
          }
          break;
      }
      return;
    }
    if ((int)v8 <= 237)
    {
      switch((_DWORD)v8)
      {
        case 0xD2:
          _dispatchP2PCountryCodeChange(a1, (const char *)a2 + 40);
          return;
        case 0xD9:
          if ((_DWORD)v7)
          {
            v25 = *(_OWORD *)(a2 + 14);
            *(_OWORD *)buf = *(_OWORD *)(a2 + 10);
            *(_OWORD *)&buf[16] = v25;
            *(_QWORD *)&buf[29] = *(_QWORD *)((char *)a2 + 69);
            (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *, uint64_t, _QWORD))(a1 + 72))(0, a1, 217, buf, 37, *(_QWORD *)(a1 + 80));
          }
          return;
        case 0xDA:
          _dispatchObssMitInfoEvent(a1, (uint64_t)(a2 + 10), v7);
          return;
      }
      goto LABEL_69;
    }
    switch((_DWORD)v8)
    {
      case 0xEE:
        if ((_DWORD)v7 != 4)
          return;
        v22 = *(void (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t, uint64_t))(a1 + 72);
        v21 = *(_QWORD *)(a1 + 80);
        v20 = a2 + 10;
        v23 = a1;
        v8 = 238;
        v24 = 4;
        break;
      case 0xEF:
        if ((_DWORD)v7 != 48)
          return;
        v22 = *(void (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t, uint64_t))(a1 + 72);
        v21 = *(_QWORD *)(a1 + 80);
        v20 = a2 + 10;
        v23 = a1;
        v8 = 239;
        v24 = 48;
        break;
      case 0xF0:
        _dispatchScanForwardStatsUpdateEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      default:
LABEL_69:
        if ((_DWORD)v7)
          v20 = a2 + 10;
        else
          v20 = 0;
        v22 = *(void (**)(_QWORD, uint64_t, uint64_t, int *, uint64_t, uint64_t))(a1 + 72);
        v21 = *(_QWORD *)(a1 + 80);
        v23 = a1;
        v24 = v7;
        break;
    }
    v22(0, v23, v8, v20, v24, v21);
    return;
  }
  if ((int)v8 <= 33)
  {
    switch((int)v8)
    {
      case 2:
        _dispatchSSIDChanged(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
        goto LABEL_69;
      case 4:
        _dispatchLinkChangedEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 9:
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 272));
        v14 = *(_QWORD *)(a1 + 344);
        v15 = *(_QWORD *)(a1 + 56);
        if (v15)
          v16 = 1;
        else
          v16 = v14 == 0;
        v17 = !v16;
        if (v15 && v14)
        {
          v18 = *(pthread_t *)(a1 + 336);
          v17 = v18 == pthread_self();
        }
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 272));
        if ((_DWORD)v7 == 4)
          v28 = a2[10];
        else
          v28 = 0;
        if (!v17 && *(_QWORD *)(a1 + 56) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "_eventRead";
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Error: Thread mismatch detected in assoc done event", buf, 0xCu);
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v30 = *(pthread_t *)(a1 + 336);
          v29 = *(_QWORD *)(a1 + 344);
          v31 = pthread_self();
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "_eventRead";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v17;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v29;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v30 == v31;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: asyncAssoc %d, assoc record %p, assocThread & current thread %d\n", buf, 0x22u);
        }
        if (v17)
        {
          _dispatchAsyncAssocEvent(a1, v7 == 4, v28, (uint64_t)(a2 + 10));
        }
        else if (*v6 && (*(_DWORD *)a1 & 0x80000000) == 0)
        {
          if ((_DWORD)v7 == 4)
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _QWORD))(a1 + 72))(v28, a1, a2[5], a2 + 10, 4, *(_QWORD *)(a1 + 80));
          }
          else
          {
            v40 = 0;
            v38 = 0u;
            v39 = 0u;
            __strlcpy_chk();
            LODWORD(v39) = 21;
            if (!Apple80211IOCTLGetWrapper(a1, &v38))
            {
              v36 = _errorForAssociateResult(SDWORD1(v39));
              if ((_DWORD)v7)
                v37 = a2 + 10;
              else
                v37 = 0;
              (*(void (**)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _QWORD))(a1 + 72))(v36, a1, a2[5], v37, v7, *(_QWORD *)(a1 + 80));
            }
          }
        }
        return;
      case 10:
        v19 = v7 == 4;
        if ((_DWORD)v7 == 4)
          v32 = a2[10];
        else
          v32 = 0;
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
        if (*(_QWORD *)(a1 + 56))
        {
          v33 = *(pthread_t *)(a1 + 224);
          v34 = v33 != pthread_self();
        }
        else
        {
          v34 = 0;
        }
        v35 = *(unsigned __int8 *)(a1 + 232);
        if (!v34 && !*(_BYTE *)(a1 + 232))
          *(_QWORD *)(a1 + 224) = 0;
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 160));
        if (v34)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "_eventRead";
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Error: Thread mismatch detected in scan done event, bailing, not dispatching async scan callback", buf, 0xCu);
          }
          return;
        }
        if (v35)
        {
          _dispatchAsyncScanEvent(a1, v19, v32);
          return;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 72))(v32, a1, 10, 0, 0, *(_QWORD *)(a1 + 80));
        goto LABEL_14;
      default:
        if ((_DWORD)v8 == 14)
        {
          _dispatchDecryptionFailure(a1, (uint64_t)(a2 + 10), v7);
        }
        else
        {
          if ((_DWORD)v8 != 31)
            goto LABEL_69;
          _dispatchBGScanNetworkDiscoveredEvent(a1, (uint64_t)(a2 + 10), v7);
        }
        break;
    }
  }
  else
  {
    switch((int)v8)
    {
      case '7':
        _dispatchDriverAvailable(a1, (uint64_t)(a2 + 10));
        return;
      case '8':
      case ':':
      case ';':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'M':
      case 'O':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case '[':
        goto LABEL_69;
      case '9':
        _dispatchGasResults();
        return;
      case '<':
        _dispatchCCAChangedEvent(a1, (unsigned __int8 *)a2 + 40, v7);
        return;
      case '=':
        _dispatchPowerStatsUpdateEvent(a1, (uint64_t)(a2 + 10));
        return;
      case '?':
        _dispatchBGScanCachedNetworks(a1, a2[10]);
        return;
      case 'H':
        _dispatchDissasocReceived(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'I':
        _dispatchReassoc(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'J':
        _dispatchAuth(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'K':
        _dispatchPrune(a1, (const UInt8 *)a2 + 40, v7);
        return;
      case 'L':
        _dispatchSupplicant(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'N':
        _dispatchAssoc(a1, (uint64_t)(a2 + 10), v7);
        return;
      case 'P':
        _dispatchRoamStatus(a1, (const UInt8 *)a2 + 40, v7);
        return;
      case 'Q':
        v26 = _dispatchLeakyStatsEvent(a1, (uint64_t)(a2 + 10), v7);
        if (v26)
        {
          v27 = Apple80211ErrToStr(v26);
          syslog(3, "%s Unable to parse event: leaky ap stats error (%s)", "_eventRead", v27);
        }
        return;
      case 'S':
        _dispatchRangingResults(a1, (uint64_t)(a2 + 10));
        return;
      case 'Y':
        _dispatchTxFailureHistoryEvent(a1, a2 + 10, v7);
        return;
      case 'Z':
        _dispatchScanBackoffReport(a1, (uint64_t)(a2 + 10), v7);
        return;
      case '\\':
        _dispatchTxInhibitEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      case ']':
        _dispatchLocalMitigationEvent(a1, (uint64_t)(a2 + 10), v7);
        return;
      default:
        if ((_DWORD)v8 == 34)
        {
          _dispatchDeauthReceived(a1, (uint64_t)(a2 + 10), v7);
        }
        else
        {
          if ((_DWORD)v8 != 39)
            goto LABEL_69;
          _dispatchlqmChangedEvent(a1, (_BYTE *)a2 + 40, v7);
        }
        break;
    }
  }
}

uint64_t _eventBlockCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, a3, a4, a5);
}

uint64_t _addScanResultToList(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, CFTypeRef cf, int a6, int a7, int a8, unsigned __int8 a9, char a10, char a11, char a12)
{
  CFAllocatorRef *v18;
  __CFDictionary *Mutable;
  __CFDictionary *v20;
  unsigned int v21;
  uint64_t v22;
  const __CFAllocator *v23;
  char v24;
  CFStringRef v25;
  CFStringRef v26;
  CFDataRef v27;
  CFDataRef v28;
  CFNumberRef v29;
  CFMutableArrayRef v30;
  char *v31;
  CFStringRef v32;
  CFIndex Count;
  CFIndex v34;
  CFIndex v35;
  const void *v36;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v38;
  const void *Value;
  const void *v40;
  unint64_t v41;
  int v42;
  int v43;
  CFMutableArrayRef v44;
  CFIndex v45;
  CFIndex v46;
  CFMutableArrayRef MutableCopy;
  CFIndex v48;
  const __CFDictionary *v49;
  const __CFDictionary *v50;
  const void *v51;
  const __CFNumber *v52;
  int v53;
  const __CFArray *v54;
  const __CFArray *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  int v58;
  char v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  const __CFAllocator *v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  __int16 v79;
  CFNumberRef v80;
  CFNumberRef v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  __int16 *p_valuePtr;
  int v87;
  int v88;
  int v89;
  BOOL v92;
  int v93;
  char v94;
  char v95;
  char v96;
  char v97;
  unsigned __int8 *v98;
  int v99;
  unsigned int v100;
  BOOL v101;
  BOOL v103;
  BOOL v105;
  int v106;
  uint64_t v107;
  CFNumberRef v108;
  CFNumberRef v109;
  CFNumberRef v110;
  CFNumberRef v111;
  CFIndex v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  CFNumberRef v116;
  CFNumberRef v117;
  CFNumberRef v118;
  int v119;
  uint64_t v120;
  const __CFString *v121;
  int v122;
  _BOOL4 v123;
  int v124;
  _BOOL4 v125;
  int v126;
  const __CFDictionary *v127;
  const __CFNumber *v128;
  const __CFDictionary *v129;
  const __CFNumber *v130;
  BOOL v133;
  char *v134;
  const __CFString *v135;
  const __CFDictionary *v136;
  const __CFArray *v137;
  const __CFArray *v138;
  CFIndex v139;
  CFIndex v140;
  CFIndex v141;
  const __CFNumber *v142;
  __CFArray *v143;
  CFIndex v144;
  CFNumberRef v145;
  CFNumberRef v146;
  const void *v148;
  const void *v149;
  const void *v150;
  const void *v151;
  char v152;
  const __CFDictionary *v153;
  __CFArray *v154;
  const __CFDictionary *v155;
  const __CFNumber *v156;
  __int16 v157;
  const __CFNumber *v158;
  const __CFDictionary *v159;
  const __CFNumber *v160;
  const __CFDictionary *v161;
  const __CFBoolean *v162;
  const __CFDictionary *v163;
  const __CFNumber *v164;
  CFNumberRef v165;
  CFNumberRef v166;
  const void *v168;
  int v169;
  int v171;
  __CFDictionary *v172;
  int v173;
  int v174;
  __CFArray *v175;
  uint64_t v176;
  const __CFString *v177;
  CFNumberRef cfa;
  int v179;
  const __CFArray *theArray;
  CFDataRef cf2;
  char v182;
  __CFArray *v183;
  const __CFAllocator *allocator;
  int v185;
  __int16 v186;
  __int16 v187;
  CFIndex idx;
  __int16 valuePtr;
  uint8_t buf[4];
  int v191;
  __int16 v192;
  const void *v193;
  uint64_t v194;

  v194 = *MEMORY[0x24BDAC8D0];
  idx = 0xAAAAAAAAAAAAAAAALL;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      cfa = 0;
      v28 = 0;
      v26 = 0;
      v32 = 0;
      v143 = 0;
      v154 = 0;
      v30 = 0;
      v20 = 0;
      v168 = 0;
      v120 = 4294963396;
      goto LABEL_336;
    }
    return 4294963396;
  }
  v182 = *(_BYTE *)(a1 + 99);
  v18 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (cf)
    Mutable = (__CFDictionary *)CFRetain(cf);
  else
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v20 = Mutable;
  if (!Mutable)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      cfa = 0;
      v28 = 0;
      v26 = 0;
      v32 = 0;
      v143 = 0;
      v154 = 0;
      v30 = 0;
      v20 = 0;
      v168 = 0;
      v120 = 4294963395;
      goto LABEL_336;
    }
    return 4294963395;
  }
  v183 = a3;
  v173 = a7;
  v174 = a6;
  v176 = a1;
  if ((v182 & 0x40) == 0)
  {
    v179 = 0;
LABEL_9:
    if (*(_BYTE *)(a2 + 96) && *(_BYTE *)(a2 + 97))
    {
      v22 = 0;
      v23 = *v18;
      v24 = 1;
      do
      {
        v25 = CFStringCreateWithBytes(v23, (const UInt8 *)(a2 + 97), *(unsigned __int8 *)(a2 + 96), dword_2064BBAC0[v22], 0);
        v26 = v25;
        if ((v24 & 1) == 0)
          break;
        v24 = 0;
        v22 = 1;
      }
      while (!v25);
      v27 = CFDataCreate(v23, (const UInt8 *)(a2 + 97), *(unsigned __int8 *)(a2 + 96));
      a3 = v183;
      cfa = 0;
      if (!v27)
      {
        v30 = 0;
        v120 = 4294963395;
        v28 = 0;
        v32 = 0;
        v143 = 0;
        v175 = 0;
        goto LABEL_328;
      }
      v28 = v27;
    }
    else
    {
      v26 = 0;
      v28 = 0;
      cfa = 0;
    }
    goto LABEL_19;
  }
  v21 = *(unsigned __int8 *)(a2 + 136);
  v179 = (v21 >> 2) & 1;
  if ((v21 & 8) == 0)
    goto LABEL_9;
  v29 = CFNumberCreate(*v18, kCFNumberSInt32Type, (const void *)(a2 + 97));
  v30 = 0;
  if (!v29)
  {
    v120 = 4294963395;
    v28 = 0;
    v26 = 0;
    v32 = 0;
    v143 = 0;
    v175 = 0;
    cfa = 0;
    goto LABEL_328;
  }
  v26 = 0;
  v28 = 0;
  cfa = v29;
LABEL_19:
  v31 = ether_ntoa((const ether_addr *)(a2 + 28));
  if (!v31)
  {
    v32 = 0;
    goto LABEL_353;
  }
  allocator = *v18;
  v32 = CFStringCreateWithCString(*v18, v31, 0x8000100u);
  if (!v32)
  {
LABEL_353:
    v143 = 0;
    v175 = 0;
    v30 = 0;
    v120 = 4294963395;
    goto LABEL_328;
  }
  theArray = a4;
  cf2 = v28;
  v177 = v26;
  if (!a3 || (Count = CFArrayGetCount(a3), Count < 1))
  {
    v34 = 0;
    goto LABEL_45;
  }
  v34 = Count;
  v172 = v20;
  v35 = 0;
  v36 = (const void *)*MEMORY[0x24BDBD270];
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v35);
    if (!ValueAtIndex)
      goto LABEL_42;
    v38 = ValueAtIndex;
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("BSSID"));
    v40 = CFDictionaryGetValue(v38, CFSTR("SSID"));
    if ((v182 & 0x40) != 0)
    {
      v41 = (unint64_t)CFDictionaryGetValue(v38, CFSTR("SHORT_SSID"));
      v42 = CFDictionaryGetValue(v38, CFSTR("SCAN_RESULT_FROM_FILS_DISC_FRAME")) == v36;
      if (!Value)
        goto LABEL_42;
    }
    else
    {
      v41 = 0;
      v42 = 0;
      if (!Value)
        goto LABEL_42;
    }
    if (!CFEqual(Value, v32))
      goto LABEL_42;
    if (cf2 && v40)
    {
      if (!CFEqual(v40, cf2))
        goto LABEL_42;
    }
    else if (cf2 || v40)
    {
      goto LABEL_42;
    }
    if (v42 == v179)
    {
      if (cfa && v41)
      {
        if (CFEqual((CFTypeRef)v41, cfa))
          goto LABEL_325;
      }
      else if (!((unint64_t)cfa | v41))
      {
LABEL_325:
        v143 = 0;
        v175 = 0;
        v30 = 0;
        idx = v35;
        v120 = 4294963394;
        v20 = v172;
        goto LABEL_326;
      }
    }
LABEL_42:
    ++v35;
    a3 = v183;
  }
  while (v34 != v35);
  v20 = v172;
  v26 = v177;
  a4 = theArray;
  v28 = cf2;
LABEL_45:
  idx = v34;
  if (!a12 && v179)
  {
    v120 = 0;
    v143 = 0;
    v154 = 0;
    v30 = 0;
    goto LABEL_307;
  }
  v43 = 0;
  v44 = 0;
  if (!v174 || !v28)
    goto LABEL_99;
  if (!a4)
  {
    v44 = 0;
    v43 = 0;
    idx = 0;
    goto LABEL_99;
  }
  v45 = CFArrayGetCount(a4);
  idx = 0;
  if (v45 < 1)
  {
    v44 = 0;
    v43 = 0;
    goto LABEL_99;
  }
  v46 = v45;
  MutableCopy = 0;
  v48 = 0;
  while (2)
  {
    v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v48);
    if (!v49)
      goto LABEL_74;
    v50 = v49;
    v51 = CFDictionaryGetValue(v49, CFSTR("SSID"));
    if (!v51)
      goto LABEL_74;
    if (!CFEqual(v28, v51))
      goto LABEL_74;
    valuePtr = -21846;
    v52 = (const __CFNumber *)CFDictionaryGetValue(v50, CFSTR("AP_MODE"));
    if (!v52 || !CFNumberGetValue(v52, kCFNumberSInt16Type, &valuePtr))
      goto LABEL_74;
    if (valuePtr == 2)
    {
      if ((*(_WORD *)(a2 + 26) & 1) == 0)
        goto LABEL_74;
    }
    else if (valuePtr == 1 && (*(_WORD *)(a2 + 26) & 2) == 0)
    {
      goto LABEL_74;
    }
    if (a8)
    {
      v53 = *(unsigned __int16 *)(a2 + 138);
      if ((v53 - 3) <= 0x7FD)
      {
        v58 = 0;
        v59 = 0;
        v60 = (unsigned __int8 *)(a2 + 140);
        do
        {
          v61 = v53 - 2;
          v62 = v60[1];
          v64 = v61 >= v62;
          v53 = v61 - v62;
          if (!v64)
            break;
          v63 = *v60;
          if (v63 == 11)
          {
            if (v62 >= 5)
            {
              if (*((__int16 *)v60 + 1) != -1)
                break;
              v58 = 1;
            }
          }
          else
          {
            v64 = v63 == 127 && v62 >= 4;
            if (v64 && (v60[4] & 8) != 0)
              v59 = 1;
          }
          if (v59 && v58)
            goto LABEL_74;
          v65 = (uint64_t)&v60[v62 + 2];
          if (v53 > 0)
            v60 = (unsigned __int8 *)v65;
        }
        while (v53 > 2);
      }
    }
    if (a10)
    {
      v54 = (const __CFArray *)CFDictionaryGetValue(v50, CFSTR("SCAN_BSSID_LIST"));
      if (v54)
      {
        v55 = v54;
        if (MutableCopy)
          CFRelease(MutableCopy);
        MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v55);
      }
      v28 = cf2;
    }
    v56 = (const __CFNumber *)CFDictionaryGetValue(v50, CFSTR("RSSI"));
    if (!v56
      || (v187 = -21846, !CFNumberGetValue(v56, kCFNumberSInt16Type, &v187))
      || (v57 = (const __CFNumber *)CFDictionaryGetValue(v50, CFSTR("CHANNEL_FLAGS"))) == 0
      || (*(_DWORD *)buf = -1431655766, !CFNumberGetValue(v57, kCFNumberSInt32Type, buf)))
    {
LABEL_74:
      v48 = idx + 1;
      idx = v48;
      if (v48 < v46)
        continue;
      v43 = 0;
LABEL_96:
      v44 = MutableCopy;
      goto LABEL_99;
    }
    break;
  }
  v169 = *(_DWORD *)(a2 + 12);
  if ((buf[1] & 0x20) != 0)
  {
    if ((v169 & 0x2000) == 0)
    {
LABEL_344:
      CFArrayRemoveValueAtIndex(theArray, idx);
      v43 = 0;
      goto LABEL_96;
    }
LABEL_343:
    if (v187 >= *(__int16 *)(a2 + 22))
      goto LABEL_345;
    goto LABEL_344;
  }
  if ((v169 & 0x2000) == 0)
    goto LABEL_343;
LABEL_345:
  if (MutableCopy)
  {
    CFArrayAppendValue(MutableCopy, v32);
    CFDictionarySetValue(v50, CFSTR("SCAN_BSSID_LIST"), MutableCopy);
    CFRelease(MutableCopy);
  }
  v44 = 0;
  v43 = 1;
LABEL_99:
  v66 = allocator;
  v67 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 8));
  v175 = v44;
  if (!v67)
    goto LABEL_337;
  v68 = v67;
  CFDictionarySetValue(v20, CFSTR("CHANNEL"), v67);
  CFRelease(v68);
  v69 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 12));
  if (!v69)
    goto LABEL_337;
  v70 = v69;
  CFDictionarySetValue(v20, CFSTR("CHANNEL_FLAGS"), v69);
  CFRelease(v70);
  if (!*(_WORD *)(a2 + 16))
    goto LABEL_105;
  v71 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 18));
  if (!v71)
    goto LABEL_337;
  v72 = v71;
  CFDictionarySetValue(v20, CFSTR("NOISE"), v71);
  CFRelease(v72);
  v73 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 20));
  if (!v73)
    goto LABEL_337;
  v74 = v73;
  CFDictionarySetValue(v20, CFSTR("SNR"), v73);
  CFRelease(v74);
LABEL_105:
  v75 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 22));
  if (!v75)
    goto LABEL_337;
  v76 = v75;
  CFDictionarySetValue(v20, CFSTR("RSSI"), v75);
  CFRelease(v76);
  v77 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 24));
  if (!v77)
    goto LABEL_337;
  v78 = v77;
  v171 = v43;
  CFDictionarySetValue(v20, CFSTR("BEACON_INT"), v77);
  CFRelease(v78);
  v79 = (*(_WORD *)(a2 + 26) & 1) != 0 ? 2 : (*(_WORD *)(a2 + 26) >> 1) & 1;
  v186 = v79;
  v80 = CFNumberCreate(allocator, kCFNumberSInt16Type, &v186);
  if (!v80)
  {
LABEL_337:
    v143 = 0;
    v30 = 0;
    goto LABEL_338;
  }
  v81 = v80;
  CFDictionarySetValue(v20, CFSTR("AP_MODE"), v80);
  CFRelease(v81);
  v82 = *(unsigned __int8 *)(a2 + 34);
  LOBYTE(v187) = 0;
  LOBYTE(valuePtr) = 0;
  buf[0] = 0;
  v83 = 0;
  if (v82)
  {
    v84 = 0;
    while (1)
    {
      v85 = *(_DWORD *)(a2 + 36 + 4 * v84);
      if (v85 > 0x36)
        goto LABEL_126;
      if (((1 << v85) & 0x41001001041240) != 0)
        break;
      if (((1 << v85) & 0x826) == 0)
      {
        if (((1 << v85) & 0x200400000) != 0)
          p_valuePtr = &valuePtr;
        else
LABEL_126:
          p_valuePtr = &v187;
LABEL_116:
        *(_BYTE *)p_valuePtr = 1;
        if (!v83)
          goto LABEL_122;
      }
      v83 = 1;
      if (buf[0] && (_BYTE)valuePtr && (_BYTE)v187)
        goto LABEL_127;
LABEL_122:
      if (++v84 >= v82)
        goto LABEL_127;
    }
    p_valuePtr = (__int16 *)buf;
    goto LABEL_116;
  }
LABEL_127:
  v87 = *(_DWORD *)(a2 + 12);
  if ((v87 & 0x2018) == 0)
  {
    v93 = 0;
    goto LABEL_184;
  }
  v88 = *(unsigned __int16 *)(a2 + 138);
  if (v88 >= 3)
  {
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = (unsigned __int8 *)(a2 + 140);
    do
    {
      v99 = *v98;
      switch(v99)
      {
        case 61:
          v100 = v98[1];
          v103 = v100 > 0x15 && v88 - 2 >= v100;
          v97 |= v103;
          break;
        case 191:
          v100 = v98[1];
          v105 = v100 > 0xB && v88 - 2 >= v100;
          v96 |= v105;
          break;
        case 255:
          v100 = v98[1];
          if (v88 - 2 >= v100)
          {
            v106 = v98[2];
            v95 |= v106 == 35;
            v101 = v106 == 108;
          }
          else
          {
            v101 = 0;
          }
          v94 |= v101;
          break;
        default:
          v100 = v98[1];
          break;
      }
      v107 = v100 + 2;
      v88 -= v107;
      v98 += v107;
    }
    while (v88 > 2);
    if ((v97 & 1) != 0)
    {
      if ((v96 & 1) != 0)
        v89 = 144;
      else
        v89 = 16;
      if ((v95 & 1) != 0)
      {
        v89 |= 0x100u;
        if ((v94 & 1) != 0)
          goto LABEL_175;
      }
      else if ((v94 & 1) != 0)
      {
        goto LABEL_175;
      }
    }
    else if ((v95 & 1) != 0)
    {
      v89 = 256;
      if ((v94 & 1) != 0)
      {
LABEL_175:
        v89 |= 0x200u;
        if ((v87 & 0x10) == 0)
          goto LABEL_182;
LABEL_130:
        v92 = (~v89 & 0x90) != 0 && v187 == 0 && buf[0] != 0 && v83 == 0;
        v93 = v89 | 2;
        goto LABEL_140;
      }
    }
    else
    {
      v89 = 0;
      if ((v94 & 1) != 0)
        goto LABEL_175;
    }
    if ((v87 & 0x10) == 0)
      goto LABEL_182;
    goto LABEL_130;
  }
  v89 = 0;
  if ((v87 & 0x10) != 0)
    goto LABEL_130;
LABEL_182:
  if ((v87 & 8) == 0)
  {
    v93 = v89;
    goto LABEL_184;
  }
  v133 = (v89 & 0x10) != 0 || v187 != 0 || buf[0] != 0 || v83 == 0;
  v93 = v89 | 4;
  if (v133)
    v93 = v89;
  if (buf[0] | valuePtr && !(_BYTE)v187)
  {
    v93 |= 8u;
    v92 = (v89 & 0x10) == 0;
LABEL_140:
    if (!v92)
      v93 = v89;
  }
LABEL_184:
  v185 = v93;
  v108 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v185);
  if (!v108)
    goto LABEL_337;
  v109 = v108;
  CFDictionarySetValue(v20, CFSTR("PHY_MODE"), v108);
  CFRelease(v109);
  v110 = CFNumberCreate(allocator, kCFNumberSInt16Type, (const void *)(a2 + 26));
  if (!v110)
    goto LABEL_337;
  v111 = v110;
  CFDictionarySetValue(v20, CFSTR("CAPABILITIES"), v110);
  CFRelease(v111);
  CFDictionarySetValue(v20, CFSTR("BSSID"), v32);
  if (cf2)
    CFDictionarySetValue(v20, CFSTR("SSID"), cf2);
  if (v26)
    CFDictionarySetValue(v20, CFSTR("SSID_STR"), v26);
  if (cfa)
    CFDictionarySetValue(v20, CFSTR("SHORT_SSID"), cfa);
  v30 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
  if (!v30)
    goto LABEL_332;
  idx = 0;
  if (!*(_BYTE *)(a2 + 34))
  {
LABEL_197:
    CFDictionarySetValue(v20, CFSTR("RATES"), v30);
    v115 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 132));
    if (!v115)
      goto LABEL_332;
    v116 = v115;
    CFDictionarySetValue(v20, CFSTR("AGE"), v115);
    CFRelease(v116);
    v117 = CFNumberCreate(allocator, kCFNumberSInt64Type, (const void *)(a2 + 2256));
    if (!v117)
      goto LABEL_332;
    v118 = v117;
    CFDictionarySetValue(v20, CFSTR("TIMESTAMP"), v117);
    CFRelease(v118);
    v119 = v179 | a9;
    if (v119)
    {
      v120 = 4294963395;
      goto LABEL_236;
    }
    if ((*(_WORD *)(a2 + 26) & 0x10) != 0)
    {
      v121 = v32;
      v122 = Apple80211ParseWPAIE((unsigned __int8 *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20);
      v123 = v122 == 0;
      v124 = Apple80211ParseRSNIE(a2 + 140, *(unsigned __int16 *)(a2 + 138), v20);
      v125 = v124 == 0;
      Apple80211ParseRSNXE((unsigned __int8 *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20);
      v126 = Apple80211ParseWAPIIE((_BYTE *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20);
      if (v122 && v124 || (*(_BYTE *)(v176 + 90) & 0x20) != 0)
      {
        v32 = v121;
      }
      else
      {
        v127 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("WPA_IE"));
        *(_DWORD *)buf = -1431655766;
        v32 = v121;
        if (v127)
        {
          v128 = (const __CFNumber *)CFDictionaryGetValue(v127, CFSTR("IE_KEY_WPA_MCIPHER"));
          if (v128)
          {
            if (CFNumberGetValue(v128, kCFNumberSInt32Type, buf) && *(_DWORD *)buf == 5)
            {
              CFDictionaryRemoveValue(v20, CFSTR("WPA_IE"));
              v123 = 0;
            }
          }
        }
        v129 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("RSN_IE"));
        if (v129)
        {
          v130 = (const __CFNumber *)CFDictionaryGetValue(v129, CFSTR("IE_KEY_RSN_MCIPHER"));
          if (v130)
          {
            if (CFNumberGetValue(v130, kCFNumberSInt32Type, buf) && *(_DWORD *)buf == 5)
            {
              CFDictionaryRemoveValue(v20, CFSTR("RSN_IE"));
              v125 = 0;
            }
          }
        }
      }
      v120 = 0;
      if (v123 || v125)
      {
        v66 = allocator;
        goto LABEL_236;
      }
      v66 = allocator;
      if (!v126)
      {
LABEL_236:
        v134 = (char *)(a2 + 136);
        if ((*(_BYTE *)(a2 + 136) & 0x10) != 0)
        {
          v135 = v32;
          *(_DWORD *)buf = -1431655766;
          v136 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("RSN_IE"));
          if (v136
            && (v137 = (const __CFArray *)CFDictionaryGetValue(v136, CFSTR("IE_KEY_RSN_AUTHSELS"))) != 0
            && (v138 = v137, (v139 = CFArrayGetCount(v137)) != 0)
            && (v140 = v139, idx = 0, v139 >= 1))
          {
            v141 = 0;
            while (1)
            {
              v142 = (const __CFNumber *)CFArrayGetValueAtIndex(v138, v141);
              if (v142)
              {
                if (CFNumberGetValue(v142, kCFNumberSInt32Type, buf) && *(_DWORD *)buf == 18)
                  break;
              }
              v141 = idx + 1;
              idx = v141;
              if (v141 >= v140)
                goto LABEL_246;
            }
            v32 = v135;
            v66 = allocator;
            if (!a11)
            {
              v143 = 0;
              v120 = 4294963394;
              goto LABEL_326;
            }
          }
          else
          {
LABEL_246:
            v32 = v135;
            v66 = allocator;
          }
        }
        v143 = CFArrayCreateMutable(v66, 0, MEMORY[0x24BDBD690]);
        if (v143)
        {
          v144 = 0;
          idx = 0;
          do
          {
            if (((v134[v144 / 8] >> (v144 % 8)) & 1) != 0)
            {
              v145 = CFNumberCreate(allocator, kCFNumberSInt32Type, &idx);
              if (!v145)
                goto LABEL_333;
              v146 = v145;
              CFArrayAppendValue(v143, v145);
              CFRelease(v146);
              v144 = idx;
            }
            idx = v144 + 1;
          }
          while (v144++ < 5);
          CFDictionarySetValue(v20, CFSTR("SCAN_RESULT_NET_FLAGS"), v143);
          v148 = (const void *)*MEMORY[0x24BDBD270];
          v149 = (const void *)*MEMORY[0x24BDBD268];
          if ((*v134 & 1) != 0)
            v150 = (const void *)*MEMORY[0x24BDBD270];
          else
            v150 = (const void *)*MEMORY[0x24BDBD268];
          CFDictionarySetValue(v20, CFSTR("SCAN_RESULT_FROM_PROBE_RSP"), v150);
          if ((*v134 & 0x10) != 0)
            v151 = v148;
          else
            v151 = v149;
          CFDictionarySetValue(v20, CFSTR("SCAN_RESULT_OWE_MULTI_SSID"), v151);
          v26 = v177;
          if ((v182 & 0x40) != 0)
          {
            v152 = *v134;
            if ((*v134 & 8) != 0)
            {
              CFDictionarySetValue(v20, CFSTR("SCAN_RESULT_INCL_SHORT_SSID"), v148);
              v152 = *v134;
            }
            if ((v152 & 4) != 0)
              CFDictionarySetValue(v20, CFSTR("SCAN_RESULT_FROM_FILS_DISC_FRAME"), v148);
          }
          _parseIEs((unsigned __int8 *)(a2 + 140), *(unsigned __int16 *)(a2 + 138), v20, v176 + 88);
          *(_WORD *)buf = 20;
          v153 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("HE_OP_IE"));
          v154 = v175;
          if (v153)
          {
            v155 = v153;
            v156 = (const __CFNumber *)CFDictionaryGetValue(v153, CFSTR("6GHZ_OP_INFO_CHANNEL_WIDTH"));
            if (v156 && CFNumberGetValue(v156, kCFNumberSInt8Type, buf))
            {
              switch(*(_WORD *)buf)
              {
                case 0:
                  v157 = 20;
                  goto LABEL_291;
                case 1:
                  goto LABEL_288;
                case 2:
                  goto LABEL_290;
                case 3:
                  goto LABEL_289;
                default:
                  goto LABEL_275;
              }
            }
            v158 = (const __CFNumber *)CFDictionaryGetValue(v155, CFSTR("VHT_OP_INFO_CHANNEL_WIDTH"));
            if (v158)
            {
              if (CFNumberGetValue(v158, kCFNumberSInt8Type, buf))
              {
                if (*(unsigned __int16 *)buf - 2 < 2)
                  goto LABEL_289;
                if (*(unsigned __int16 *)buf == 1)
                  goto LABEL_290;
                if (!*(_WORD *)buf)
                  *(_WORD *)buf = 20;
              }
            }
          }
LABEL_275:
          v159 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("VHT_IE"));
          if (!v159
            || (v160 = (const __CFNumber *)CFDictionaryGetValue(v159, CFSTR("VHT_CHAN_WIDTH"))) == 0
            || !CFNumberGetValue(v160, kCFNumberSInt8Type, buf))
          {
LABEL_282:
            v161 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("HT_IE"));
            if (!v161)
              goto LABEL_292;
            v162 = (const __CFBoolean *)CFDictionaryGetValue(v161, CFSTR("HT_STA_CHAN_WIDTH"));
            if (!v162)
              goto LABEL_292;
            if (CFBooleanGetValue(v162) != 1)
              goto LABEL_292;
            v163 = (const __CFDictionary *)CFDictionaryGetValue(v20, CFSTR("HT_CAPS_IE"));
            if (!v163)
              goto LABEL_292;
            valuePtr = 0;
            v164 = (const __CFNumber *)CFDictionaryGetValue(v163, CFSTR("CAPS"));
            if (!v164)
              goto LABEL_292;
            CFNumberGetValue(v164, kCFNumberSInt16Type, &valuePtr);
            if ((valuePtr & 2) == 0)
              goto LABEL_292;
LABEL_288:
            v157 = 40;
LABEL_291:
            *(_WORD *)buf = v157;
LABEL_292:
            v165 = CFNumberCreate(allocator, kCFNumberSInt16Type, buf);
            if (v165)
            {
              v166 = v165;
              CFDictionarySetValue(v20, CFSTR("CHANNEL_WIDTH"), v165);
              CFRelease(v166);
            }
            if (v183)
            {
              CFDictionaryRemoveValue(v20, CFSTR("HT_CAPS_IE"));
              CFDictionaryRemoveValue(v20, CFSTR("VHT_CAPS_IE"));
            }
            CFDictionaryRemoveValue(v20, CFSTR("VHT_IE"));
            CFDictionaryRemoveValue(v20, CFSTR("HT_IE"));
            v28 = cf2;
            if (v173)
              CFDictionarySetValue(v20, CFSTR("SCAN_DIRECTED"), v148);
            if (v183)
              CFArrayAppendValue(v183, v20);
            v120 = 0;
            if (theArray && !v171)
            {
              if (a10)
              {
                if (v175 || (v154 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690])) != 0)
                {
                  CFArrayAppendValue(v154, v32);
                  CFDictionarySetValue(v20, CFSTR("SCAN_BSSID_LIST"), v154);
                }
              }
              CFArrayAppendValue(theArray, v20);
              v120 = 0;
            }
            goto LABEL_307;
          }
          if (*(unsigned __int16 *)buf - 2 >= 2)
          {
            if (*(unsigned __int16 *)buf != 1)
            {
              if (!*(_WORD *)buf)
                *(_WORD *)buf = 20;
              goto LABEL_282;
            }
LABEL_290:
            v157 = 80;
            goto LABEL_291;
          }
LABEL_289:
          v157 = 160;
          goto LABEL_291;
        }
LABEL_333:
        if (!v119)
        {
          v120 = 0;
          v26 = v177;
          v28 = cf2;
          goto LABEL_329;
        }
LABEL_326:
        v26 = v177;
        goto LABEL_327;
      }
      CFDictionarySetValue(v20, CFSTR("WEP"), (const void *)*MEMORY[0x24BDBD270]);
    }
    v120 = 0;
    goto LABEL_236;
  }
  v112 = 0;
  while (1)
  {
    v113 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(a2 + 4 * v112 + 36));
    if (!v113)
      break;
    v114 = v113;
    CFArrayAppendValue(v30, v113);
    CFRelease(v114);
    v112 = idx + 1;
    idx = v112;
    if (v112 >= *(unsigned __int8 *)(a2 + 34))
      goto LABEL_197;
  }
LABEL_332:
  v143 = 0;
LABEL_338:
  v120 = 4294963395;
LABEL_327:
  v28 = cf2;
LABEL_328:
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_329:
    v154 = v175;
    goto LABEL_307;
  }
  v168 = CFDictionaryGetValue(v20, CFSTR("BSSID"));
  v154 = v175;
LABEL_336:
  *(_DWORD *)buf = 67109378;
  v191 = v120;
  v192 = 2112;
  v193 = v168;
  _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to add scan result to list (err=%d, bssid=%@)", buf, 0x12u);
LABEL_307:
  if (v20)
    CFRelease(v20);
  if (v30)
    CFRelease(v30);
  if (v28)
    CFRelease(v28);
  if (v32)
    CFRelease(v32);
  if (v26)
    CFRelease(v26);
  if (v143)
    CFRelease(v143);
  if (cfa)
    CFRelease(cfa);
  if (v154)
    CFRelease(v154);
  return v120;
}

uint64_t Apple80211ParseWPAIE(unsigned __int8 *a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  unsigned __int8 *v9;
  __int128 v11;
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  unint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFMutableArrayRef v32;
  __CFArray *v33;
  unint64_t v34;
  __int128 *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFMutableArrayRef v38;
  __CFArray *v39;
  unint64_t v40;
  char *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  int v44;
  unsigned __int16 valuePtr;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963393;
  if (!a1 || a2 < 2)
    return v3;
  v5 = a1;
  while (1)
  {
    v6 = v5[1];
    v7 = *v5 == 221 && v6 >= 5;
    v8 = v7 && (int)(v6 + 2) <= a2;
    if (v8 && *(_DWORD *)(v5 + 2) == 32657408)
      break;
    a2 = a2 - v6 - 2;
    if (a2 >= 1)
    {
      v9 = &v5[v5[1]];
      v5 = v9 + 2;
      if (v9[3] + 2 <= a2)
        continue;
    }
    return 4294963393;
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v52 + 12) = v11;
  v51 = v11;
  v52[0] = v11;
  v49 = v11;
  v50 = v11;
  v47 = v11;
  v48 = v11;
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14 = Mutable;
  valuePtr = -21846;
  if (!a3)
    goto LABEL_60;
  if (!Mutable)
    return 4294963395;
  v15 = v5[1];
  if (v15 < 6)
    goto LABEL_62;
  valuePtr = *((_WORD *)v5 + 3);
  v16 = CFNumberCreate(v12, kCFNumberSInt16Type, &valuePtr);
  if (!v16)
  {
    v3 = 4294963395;
    goto LABEL_57;
  }
  v17 = v16;
  CFDictionarySetValue(v14, CFSTR("IE_KEY_WPA_VERSION"), v16);
  CFRelease(v17);
  if (valuePtr != 1)
  {
    CFDictionarySetValue(a3, CFSTR("WPA_IE"), v14);
    v3 = 0;
LABEL_57:
    CFRelease(v14);
    return v3;
  }
  v47 = 0u;
  v48 = 0u;
  v51 = 0u;
  memset(v52, 0, 28);
  v49 = 0u;
  v50 = 0u;
  v18 = 2;
  DWORD2(v47) = 2;
  WORD6(v47) = 1;
  LOWORD(v50) = 1;
  DWORD1(v50) = 1;
  LODWORD(v48) = 2;
  if ((((_DWORD)v15 - 6) & 0xFFFFFFFC) == 0
    || (v18 = v5[11], DWORD2(v47) = v18, (((_DWORD)v15 - 10) & 0xFFFFFFFE) == 0))
  {
    LODWORD(v19) = 1;
    goto LABEL_42;
  }
  valuePtr = *((_WORD *)v5 + 6);
  v19 = valuePtr;
  if (valuePtr > 8u)
  {
LABEL_62:
    v3 = 4294963396;
    goto LABEL_57;
  }
  v20 = v15 - 12;
  if (valuePtr)
  {
    v21 = 0;
    v22 = v5 + 17;
    do
    {
      v7 = v20 >= 4;
      v20 -= 4;
      if (!v7)
      {
        WORD6(v47) = v21;
        goto LABEL_60;
      }
      v23 = *v22;
      v22 += 4;
      *((_DWORD *)&v48 + v21++) = v23;
    }
    while (v19 != v21);
    v24 = v19;
  }
  else
  {
    v24 = 0;
  }
  WORD6(v47) = v19;
  v7 = v20 >= 2;
  v25 = v20 - 2;
  if (!v7)
    goto LABEL_42;
  valuePtr = *(_WORD *)&v5[4 * v24 + 14];
  v26 = valuePtr;
  if (valuePtr > 8u)
  {
LABEL_60:
    v3 = 4294963396;
    goto LABEL_56;
  }
  if (valuePtr)
  {
    v27 = 0;
    v28 = &v5[4 * v24 + 19];
    while (1)
    {
      v7 = v25 >= 4;
      v25 -= 4;
      if (!v7)
        break;
      v29 = *v28;
      v28 += 4;
      *((_DWORD *)&v50 + ++v27) = v29;
      if (v26 == v27)
        goto LABEL_41;
    }
    LOWORD(v50) = v27;
    goto LABEL_60;
  }
LABEL_41:
  LOWORD(v50) = v26;
LABEL_42:
  v46 = v18;
  v30 = CFNumberCreate(v12, kCFNumberSInt32Type, &v46);
  if (!v30)
    goto LABEL_59;
  v31 = v30;
  CFDictionarySetValue(v14, CFSTR("IE_KEY_WPA_MCIPHER"), v30);
  CFRelease(v31);
  v32 = CFArrayCreateMutable(v12, 0, MEMORY[0x24BDBD690]);
  if (!v32)
    goto LABEL_59;
  v33 = v32;
  if ((_DWORD)v19)
  {
    v34 = 0;
    v35 = &v48;
    do
    {
      v36 = CFNumberCreate(v12, kCFNumberSInt32Type, v35);
      if (!v36)
        goto LABEL_58;
      v37 = v36;
      CFArrayAppendValue(v33, v36);
      CFRelease(v37);
      ++v34;
      v35 = (__int128 *)((char *)v35 + 4);
    }
    while (v34 < WORD6(v47));
  }
  CFDictionarySetValue(v14, CFSTR("IE_KEY_WPA_UCIPHERS"), v33);
  v38 = CFArrayCreateMutable(v12, 0, MEMORY[0x24BDBD690]);
  if (!v38)
  {
LABEL_58:
    CFRelease(v33);
LABEL_59:
    v3 = 4294963395;
    goto LABEL_56;
  }
  v39 = v38;
  if ((_WORD)v50)
  {
    v40 = 0;
    v41 = (char *)&v50 + 4;
    while (1)
    {
      v42 = CFNumberCreate(v12, kCFNumberSInt32Type, v41);
      if (!v42)
        break;
      v43 = v42;
      CFArrayAppendValue(v39, v42);
      CFRelease(v43);
      ++v40;
      v41 += 4;
      if (v40 >= (unsigned __int16)v50)
        goto LABEL_53;
    }
    v44 = 0;
    v3 = 4294963395;
  }
  else
  {
LABEL_53:
    CFDictionarySetValue(v14, CFSTR("IE_KEY_WPA_AUTHSELS"), v39);
    v3 = 0;
    v44 = 1;
  }
  CFRelease(v33);
  CFRelease(v39);
  if (v44)
  {
    CFDictionarySetValue(a3, CFSTR("WPA_IE"), v14);
    v3 = 0;
  }
LABEL_56:
  if (v14)
    goto LABEL_57;
  return v3;
}

uint64_t Apple80211ParseWAPIIE(_BYTE *a1, signed int a2, CFDictionaryRef theDict)
{
  uint64_t v3;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v10;
  const __CFAllocator *v11;
  _BYTE *i;
  const __CFNumber *Value;
  int v15;
  int v16;
  CFNumberRef v17;
  int valuePtr;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963393;
  if (a1 && a2 >= 2)
  {
    while (1)
    {
      v5 = a1[1];
      v6 = *a1 == 68 && v5 >= 5;
      v7 = v6 && (int)(v5 + 2) <= a2;
      if (v7 && a1[2] == 1)
        break;
      a2 = a2 - v5 - 2;
      if (a2 >= 1)
      {
        v8 = &a1[a1[1]];
        a1 = v8 + 2;
        if (v8[3] + 2 <= a2)
          continue;
      }
      return 4294963393;
    }
    v10 = a1[4];
    v3 = 4294963393;
    if (a1[4])
    {
      if (4 * (int)v10 + 6 <= v5)
      {
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        for (i = a1 + 6; ; i += 4)
        {
          if (*(_WORD *)i != 5120 || i[2] != 114)
            goto LABEL_34;
          valuePtr = 3;
          Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("WAPI"));
          if (Value)
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          v15 = i[3];
          if (v15 == 2)
            break;
          if (v15 == 1)
          {
            v3 = 0;
            v16 = valuePtr + 8;
LABEL_30:
            valuePtr = v16;
            goto LABEL_32;
          }
          v16 = valuePtr;
LABEL_32:
          if (v16 >= 4)
          {
            v17 = CFNumberCreate(v11, kCFNumberIntType, &valuePtr);
            CFDictionarySetValue(theDict, CFSTR("WAPI"), v17);
            CFRelease(v17);
          }
LABEL_34:
          if (!--v10)
            return v3;
        }
        v3 = 0;
        v16 = valuePtr + 4;
        goto LABEL_30;
      }
    }
  }
  return v3;
}

uint64_t Apple80211ParseRSNXE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  unsigned __int8 valuePtr;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963393;
  if (!a1 || !a2)
    return v3;
  v5 = a1;
  while (a2 < 3 || *v5 != 244)
  {
    v7 = v5[1];
    a2 = a2 - v7 - 2;
    if (a2 < 1)
      return 4294963393;
    v8 = &v5[v7];
    v5 = v8 + 2;
    v6 = v8[3];
LABEL_10:
    if (v6 + 2 > a2)
      return 4294963393;
  }
  v6 = v5[1];
  if (a2 - 2 < v6)
    goto LABEL_10;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v12 = Mutable;
  if (!a3)
  {
    v3 = 4294963396;
    if (Mutable)
      goto LABEL_32;
    return v3;
  }
  if (!Mutable)
    return 4294963395;
  if (*v5 != 244)
  {
    v3 = 4294963379;
    goto LABEL_32;
  }
  if (!v5[2])
    goto LABEL_30;
  v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v13)
  {
LABEL_37:
    v3 = 4294963395;
    goto LABEL_32;
  }
  v14 = v13;
  v15 = (const void *)*MEMORY[0x24BDBD268];
  v16 = (const void *)*MEMORY[0x24BDBD270];
  if ((v5[2] & 0x10) != 0)
    v17 = (const void *)*MEMORY[0x24BDBD270];
  else
    v17 = (const void *)*MEMORY[0x24BDBD268];
  CFDictionaryAddValue(v13, CFSTR("RSNXE_PROTECTED_TWT"), v17);
  if ((v5[2] & 0x20) != 0)
    v18 = v16;
  else
    v18 = v15;
  CFDictionaryAddValue(v14, CFSTR("RSNXE_SAE_H2E"), v18);
  if ((v5[2] & 0x40) != 0)
    v19 = v16;
  else
    v19 = v15;
  CFDictionaryAddValue(v14, CFSTR("RSNXE_SAE_PK"), v19);
  valuePtr = v5[1];
  v20 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v20
    || (v21 = v20,
        CFDictionaryAddValue(v14, CFSTR("RSNXE_CAP_LEN"), v20),
        CFRelease(v21),
        valuePtr = v5[2] & 0xF,
        (v22 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr)) == 0))
  {
    CFRelease(v14);
    goto LABEL_37;
  }
  v23 = v22;
  CFDictionaryAddValue(v14, CFSTR("RSNXE_CAP_RSNXE_LEN"), v22);
  CFRelease(v23);
  CFDictionaryAddValue(v12, CFSTR("IE_KEY_RSNXE_CAPS"), v14);
  CFRelease(v14);
LABEL_30:
  CFDictionarySetValue(a3, CFSTR("RSN_XE"), v12);
  v3 = 0;
LABEL_32:
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseRSNIE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  __int128 v13;
  unsigned int v14;
  CFNumberRef v15;
  CFNumberRef v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFMutableArrayRef v42;
  __CFArray *v43;
  unint64_t v44;
  __int128 *v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFMutableArrayRef v48;
  __CFArray *v49;
  unint64_t v50;
  char *v51;
  CFNumberRef v52;
  CFNumberRef v53;
  __CFDictionary *v54;
  __CFDictionary *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  CFNumberRef v62;
  CFNumberRef v63;
  unsigned __int16 valuePtr;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963393;
  if (!a1 || !a2)
    return v3;
  v5 = a1;
  while (a2 < 3 || *(_BYTE *)v5 != 48)
  {
    v7 = *(unsigned __int8 *)(v5 + 1);
    a2 = a2 - v7 - 2;
    if (a2 < 1)
      return 4294963393;
    v8 = v5 + v7;
    v5 = v8 + 2;
    v6 = *(unsigned __int8 *)(v8 + 3);
LABEL_10:
    if (v6 + 2 > a2)
      return 4294963393;
  }
  v6 = *(unsigned __int8 *)(v5 + 1);
  if (a2 - 2 < v6)
    goto LABEL_10;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v12 = Mutable;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v71 + 12) = v13;
  v70 = v13;
  v71[0] = v13;
  v68 = v13;
  v69 = v13;
  v66 = v13;
  v67 = v13;
  valuePtr = -21846;
  if (!a3)
    goto LABEL_83;
  if (!Mutable)
    return 4294963395;
  v14 = *(unsigned __int8 *)(v5 + 1);
  valuePtr = *(_WORD *)(v5 + 2);
  v15 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v15)
  {
    v3 = 4294963395;
    goto LABEL_78;
  }
  v16 = v15;
  CFDictionarySetValue(v12, CFSTR("IE_KEY_RSN_VERSION"), v15);
  CFRelease(v16);
  if (valuePtr != 1)
  {
    CFDictionarySetValue(a3, CFSTR("RSN_IE"), v12);
    v3 = 0;
    goto LABEL_78;
  }
  v66 = 0u;
  v67 = 0u;
  v70 = 0u;
  memset(v71, 0, 28);
  v68 = 0u;
  v69 = 0u;
  v17 = 4;
  DWORD2(v66) = 4;
  WORD6(v66) = 1;
  LODWORD(v67) = 4;
  LOWORD(v69) = 1;
  DWORD1(v69) = 1;
  if (v14 == 2)
    goto LABEL_43;
  v3 = 4294963396;
  if (v14 < 3 || v14 - 2 < 4)
    goto LABEL_78;
  v17 = *(unsigned __int8 *)(v5 + 7);
  DWORD2(v66) = v17;
  if (v14 == 6)
  {
LABEL_43:
    v65 = v17;
    v40 = CFNumberCreate(v10, kCFNumberSInt32Type, &v65);
    if (!v40
      || (v41 = v40,
          CFDictionarySetValue(v12, CFSTR("IE_KEY_RSN_MCIPHER"), v40),
          CFRelease(v41),
          (v42 = CFArrayCreateMutable(v10, 0, MEMORY[0x24BDBD690])) == 0))
    {
      v3 = 4294963395;
      goto LABEL_77;
    }
    v43 = v42;
    if (WORD6(v66))
    {
      v44 = 0;
      v45 = &v67;
      do
      {
        v46 = CFNumberCreate(v10, kCFNumberSInt32Type, v45);
        if (!v46)
          goto LABEL_80;
        v47 = v46;
        CFArrayAppendValue(v43, v46);
        CFRelease(v47);
        ++v44;
        v45 = (__int128 *)((char *)v45 + 4);
      }
      while (v44 < WORD6(v66));
    }
    CFDictionarySetValue(v12, CFSTR("IE_KEY_RSN_UCIPHERS"), v43);
    v48 = CFArrayCreateMutable(v10, 0, MEMORY[0x24BDBD690]);
    if (!v48)
    {
LABEL_80:
      v3 = 4294963395;
LABEL_74:
      CFRelease(v43);
LABEL_75:
      if (!(_DWORD)v3)
        CFDictionarySetValue(a3, CFSTR("RSN_IE"), v12);
      goto LABEL_77;
    }
    v49 = v48;
    if ((_WORD)v69)
    {
      v50 = 0;
      v51 = (char *)&v69 + 4;
      while (1)
      {
        v52 = CFNumberCreate(v10, kCFNumberSInt32Type, v51);
        if (!v52)
          break;
        v53 = v52;
        CFArrayAppendValue(v49, v52);
        CFRelease(v53);
        ++v50;
        v51 += 4;
        if (v50 >= (unsigned __int16)v69)
          goto LABEL_54;
      }
      v55 = 0;
      goto LABEL_82;
    }
LABEL_54:
    CFDictionarySetValue(v12, CFSTR("IE_KEY_RSN_AUTHSELS"), v49);
    if (WORD2(v71[0]))
    {
      v54 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v55 = v54;
      if (v54)
      {
        v56 = (const void *)*MEMORY[0x24BDBD268];
        v57 = (const void *)*MEMORY[0x24BDBD270];
        if ((BYTE4(v71[0]) & 1) != 0)
          v58 = (const void *)*MEMORY[0x24BDBD270];
        else
          v58 = (const void *)*MEMORY[0x24BDBD268];
        CFDictionaryAddValue(v54, CFSTR("PRE_AUTH"), v58);
        if ((BYTE4(v71[0]) & 2) != 0)
          v59 = v57;
        else
          v59 = v56;
        CFDictionaryAddValue(v55, CFSTR("NO_PAIRWISE"), v59);
        if ((BYTE4(v71[0]) & 0x40) != 0)
          v60 = v57;
        else
          v60 = v56;
        CFDictionaryAddValue(v55, CFSTR("MFP_REQUIRED"), v60);
        if ((BYTE4(v71[0]) & 0x80) != 0)
          v61 = v57;
        else
          v61 = v56;
        CFDictionaryAddValue(v55, CFSTR("MFP_CAPABLE"), v61);
        __asm { BR              X10 }
      }
      goto LABEL_82;
    }
    v55 = 0;
    if (DWORD2(v71[1]))
    {
      v65 = DWORD2(v71[1]);
      v62 = CFNumberCreate(v10, kCFNumberSInt32Type, &v65);
      if (!v62)
      {
LABEL_82:
        v3 = 4294963395;
LABEL_73:
        CFRelease(v43);
        CFRelease(v49);
        v43 = v55;
        if (!v55)
          goto LABEL_75;
        goto LABEL_74;
      }
      v63 = v62;
      CFDictionarySetValue(v12, CFSTR("IE_KEY_RSN_BCIPHER"), v62);
      CFRelease(v63);
    }
    v3 = 0;
    goto LABEL_73;
  }
  v3 = 4294963392;
  if (v14 < 8)
    goto LABEL_78;
  valuePtr = *(_WORD *)(v5 + 8);
  v18 = valuePtr;
  if (valuePtr > 8u)
  {
    v3 = 4294963396;
    goto LABEL_78;
  }
  v19 = v14 - 8;
  WORD6(v66) = 0;
  if (!valuePtr)
  {
    LOBYTE(v18) = 0;
LABEL_30:
    if (!v19)
      goto LABEL_43;
    v24 = v19 - 2;
    if (v19 < 2)
      goto LABEL_79;
    v25 = v5 + 4 * v18;
    v28 = *(unsigned __int16 *)(v25 + 10);
    v26 = v25 + 10;
    v27 = v28;
    valuePtr = v28;
    if (v28 <= 8)
    {
      LOWORD(v69) = 0;
      if ((_DWORD)v27)
      {
        v29 = 0;
        v30 = (unsigned __int8 *)(v5 + 4 * v18 + 15);
        while (1)
        {
          v31 = __OFSUB__(v24, 4);
          v24 -= 4;
          if (v24 < 0 != v31)
            goto LABEL_79;
          v32 = *v30;
          v30 += 4;
          *((_DWORD *)&v69 + ++v29) = v32;
          LOWORD(v69) = v29;
          if (v27 == v29)
            goto LABEL_39;
        }
      }
      LOBYTE(v27) = 0;
LABEL_39:
      v33 = v24 - 2;
      if (v24 >= 2)
      {
        v34 = v26 + 4 * v27;
        v36 = *(_WORD *)(v34 + 2);
        v35 = v34 + 2;
        WORD2(v71[0]) = v36;
        if (v33 >= 6)
        {
          v38 = *(unsigned __int16 *)(v35 + 2);
          v37 = v35 + 2;
          valuePtr = v38;
          v39 = (16 * v38) | 2;
          if ((int)(v33 - v39) >= 4)
            DWORD2(v71[1]) = *(unsigned __int8 *)(v37 + v39 + 3);
        }
      }
      goto LABEL_43;
    }
LABEL_83:
    v3 = 4294963396;
    goto LABEL_77;
  }
  v20 = 0;
  v21 = v19 >> 2;
  v22 = (unsigned __int8 *)(v5 + 13);
  while (v21 != v20)
  {
    v23 = *v22;
    v22 += 4;
    *((_DWORD *)&v67 + v20++) = v23;
    WORD6(v66) = v20;
    v19 -= 4;
    if (v18 == v20)
      goto LABEL_30;
  }
LABEL_79:
  v3 = 4294963392;
LABEL_77:
  if (v12)
LABEL_78:
    CFRelease(v12);
  return v3;
}

void _dispatchlqmChangedEvent(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  _BYTE *v9;
  int v10;
  int v11;
  _BYTE *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  __CFArray *v18;
  __CFArray *DictFromCCAStats;
  CFNumberRef v20;
  CFNumberRef v21;
  __CFDictionary *DictFromRoamState;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFArray *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  uint64_t v41;
  __CFDictionary *DictFromMLOStats;
  const void **v43;
  __CFArray *theArray;
  __CFDictionary *v45;
  _BYTE *v46;
  unint64_t v47;
  CFNumberRef value;
  CFNumberRef cf;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  __CFArray *v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  __CFArray *v69;

  if (a3 < 0x14C)
    return;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return;
  v6 = Mutable;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*a2)
  {
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2 + 4);
    if (!v8)
    {
      CFRelease(v6);
      return;
    }
    cf = v8;
    CFDictionaryAddValue(v6, CFSTR("RSSI"), v8);
  }
  else
  {
    cf = 0;
  }
  if (a2[8])
  {
    v9 = a2 + 9;
    v10 = a2[9];
    if (v10 == 128)
      LOBYTE(v10) = 0;
    *v9 = v10;
    v12 = a2 + 10;
    v11 = a2[10];
    if (v11 == 128)
      LOBYTE(v11) = 0;
    *v12 = v11;
    v13 = CFNumberCreate(v7, kCFNumberSInt8Type, v9);
    v68 = CFNumberCreate(v7, kCFNumberSInt8Type, v12);
    v69 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
    if (!v69)
    {
      v66 = 0;
      v67 = 0;
      v63 = 0;
      v64 = 0;
      v61 = 0;
      v62 = 0;
      v59 = 0;
      v60 = 0;
      v56 = 0;
      v57 = 0;
      v54 = 0;
      v55 = 0;
      v51 = 0;
      v52 = 0;
      v58 = 0;
      v53 = 0;
      v50 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      DictFromCCAStats = 0;
      v65 = 0;
      v20 = 0;
      v21 = 0;
      DictFromRoamState = 0;
      v23 = cf;
      v24 = v68;
      if (!cf)
        goto LABEL_70;
      goto LABEL_69;
    }
    if (v13)
      CFArrayAppendValue(v69, v13);
    if (v68)
      CFArrayAppendValue(v69, v68);
    CFDictionaryAddValue(v6, CFSTR("PER_CORE_RSSI"), v69);
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v13 = 0;
  }
  if (a2[11])
  {
    v14 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 12);
    if (!v14)
    {
      v66 = 0;
      goto LABEL_38;
    }
    v66 = v14;
    CFDictionaryAddValue(v6, CFSTR("SNR"), v14);
  }
  else
  {
    v66 = 0;
  }
  if (a2[14])
  {
    v15 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 16);
    if (v15)
    {
      v67 = v15;
      CFDictionaryAddValue(v6, CFSTR("NOISE"), v15);
      goto LABEL_30;
    }
LABEL_38:
    v67 = 0;
    v63 = 0;
    v64 = 0;
    v61 = 0;
    v62 = 0;
    v59 = 0;
    v60 = 0;
    v56 = 0;
    v57 = 0;
    v54 = 0;
    v55 = 0;
    v51 = 0;
    v52 = 0;
    v58 = 0;
    v53 = 0;
    v50 = 0;
    v16 = 0;
    v17 = 0;
    DictFromCCAStats = 0;
    v65 = 0;
    v20 = 0;
    v21 = 0;
    DictFromRoamState = 0;
    v23 = cf;
    v24 = v68;
    goto LABEL_68;
  }
  v67 = 0;
LABEL_30:
  if (a2[188])
  {
    v20 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 190);
    value = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 191);
    v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
    DictFromCCAStats = v25;
    if (!v25)
    {
      v63 = 0;
      v64 = 0;
      v61 = 0;
      v62 = 0;
      v59 = 0;
      v60 = 0;
      v56 = 0;
      v57 = 0;
      v54 = 0;
      v55 = 0;
      v51 = 0;
      v52 = 0;
      v58 = 0;
      v53 = 0;
      v50 = 0;
      v16 = 0;
      v17 = 0;
      v65 = 0;
LABEL_65:
      DictFromRoamState = 0;
      goto LABEL_66;
    }
    if (v20)
      CFArrayAppendValue(v25, v20);
    if (value)
      CFArrayAppendValue(DictFromCCAStats, value);
    CFDictionaryAddValue(v6, CFSTR("PER_CORE_NOISE"), DictFromCCAStats);
  }
  else
  {
    DictFromCCAStats = 0;
    v20 = 0;
    value = 0;
  }
  v65 = DictFromCCAStats;
  if (a2[18])
  {
    v26 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 19);
    if (!v26)
    {
      v64 = 0;
      goto LABEL_56;
    }
    v64 = v26;
    CFDictionaryAddValue(v6, CFSTR("CCA"), v26);
  }
  else
  {
    v64 = 0;
  }
  v27 = CFNumberCreate(v7, kCFNumberIntType, a2 + 20);
  if (!v27)
  {
LABEL_56:
    v63 = 0;
    goto LABEL_57;
  }
  v63 = v27;
  CFDictionaryAddValue(v6, CFSTR("TXFAIL"), v27);
  v28 = CFNumberCreate(v7, kCFNumberIntType, a2 + 24);
  if (!v28)
  {
LABEL_57:
    v62 = 0;
    goto LABEL_58;
  }
  v62 = v28;
  CFDictionaryAddValue(v6, CFSTR("TXRETRANS"), v28);
  v29 = CFNumberCreate(v7, kCFNumberIntType, a2 + 28);
  if (!v29)
  {
LABEL_58:
    v61 = 0;
    goto LABEL_59;
  }
  v61 = v29;
  CFDictionaryAddValue(v6, CFSTR("TXFRAMES"), v29);
  v30 = CFNumberCreate(v7, kCFNumberIntType, a2 + 64);
  if (!v30)
  {
LABEL_59:
    v59 = 0;
    v60 = 0;
LABEL_60:
    v56 = 0;
    v57 = 0;
    v54 = 0;
    v55 = 0;
    v51 = 0;
    v52 = 0;
    v58 = 0;
LABEL_61:
    v53 = 0;
    goto LABEL_62;
  }
  v60 = v30;
  CFDictionaryAddValue(v6, CFSTR("TXRATE"), v30);
  v31 = CFNumberCreate(v7, kCFNumberIntType, a2 + 68);
  if (!v31)
  {
    v59 = 0;
    goto LABEL_60;
  }
  v58 = v31;
  CFDictionaryAddValue(v6, CFSTR("TXFBRATE"), v31);
  if (a2[49])
  {
    v32 = CFNumberCreate(v7, kCFNumberIntType, a2 + 52);
    if (v32)
    {
      v59 = v32;
      CFDictionaryAddValue(v6, CFSTR("TXFWFAIL"), v32);
      v33 = CFNumberCreate(v7, kCFNumberIntType, a2 + 56);
      if (v33)
      {
        v57 = v33;
        CFDictionaryAddValue(v6, CFSTR("TXFWRETRANS"), v33);
        v34 = CFNumberCreate(v7, kCFNumberIntType, a2 + 60);
        if (v34)
        {
          v55 = v34;
          CFDictionaryAddValue(v6, CFSTR("TXFWFRAMES"), v34);
          goto LABEL_127;
        }
LABEL_136:
        v55 = 0;
        goto LABEL_137;
      }
    }
    else
    {
      v59 = 0;
    }
    v57 = 0;
    goto LABEL_136;
  }
  v59 = 0;
  v57 = 0;
  v55 = 0;
LABEL_127:
  v35 = CFNumberCreate(v7, kCFNumberIntType, a2 + 36);
  if (!v35)
  {
LABEL_137:
    v56 = 0;
    goto LABEL_138;
  }
  v56 = v35;
  CFDictionaryAddValue(v6, CFSTR("RXFRAMES"), v35);
  v36 = CFNumberCreate(v7, kCFNumberIntType, a2 + 32);
  if (!v36)
  {
LABEL_138:
    v54 = 0;
    goto LABEL_139;
  }
  v54 = v36;
  CFDictionaryAddValue(v6, CFSTR("RXRETRYFRMS"), v36);
  v37 = CFNumberCreate(v7, kCFNumberIntType, a2 + 72);
  if (!v37)
  {
LABEL_139:
    v51 = 0;
    v52 = 0;
    goto LABEL_61;
  }
  v53 = v37;
  CFDictionaryAddValue(v6, CFSTR("RXRATE"), v37);
  if (a2[48])
  {
    v38 = CFNumberCreate(v7, kCFNumberIntType, a2 + 40);
    if (v38)
    {
      v52 = v38;
      CFDictionaryAddValue(v6, CFSTR("RXBEACONFRMS"), v38);
      v39 = CFNumberCreate(v7, kCFNumberIntType, a2 + 44);
      if (v39)
      {
        v51 = v39;
        CFDictionaryAddValue(v6, CFSTR("RXBEACONSCHED"), v39);
        goto LABEL_141;
      }
    }
    else
    {
      v52 = 0;
    }
    v51 = 0;
LABEL_62:
    v50 = 0;
    v16 = 0;
LABEL_63:
    v17 = 0;
LABEL_64:
    DictFromCCAStats = 0;
    goto LABEL_65;
  }
  v51 = 0;
  v52 = 0;
LABEL_141:
  if (!a2[80])
  {
    v50 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_149;
  }
  v40 = CFNumberCreate(v7, kCFNumberIntType, a2 + 82);
  if (!v40)
    goto LABEL_62;
  v50 = v40;
  CFDictionaryAddValue(v6, CFSTR("QBSS_STA_COUNT"), v40);
  v16 = CFNumberCreate(v7, kCFNumberIntType, a2 + 84);
  if (!v16)
    goto LABEL_63;
  CFDictionaryAddValue(v6, CFSTR("QBSS_CHAN_UTIL"), v16);
  v17 = CFNumberCreate(v7, kCFNumberIntType, a2 + 88);
  if (!v17)
    goto LABEL_64;
  CFDictionaryAddValue(v6, CFSTR("QBSS_AAC"), v17);
LABEL_149:
  if (a2[94])
  {
    DictFromRoamState = _createDictFromRoamState(a2 + 92);
    if (!DictFromRoamState)
    {
      DictFromCCAStats = 0;
      goto LABEL_66;
    }
    CFDictionaryAddValue(v6, CFSTR("ROAM_STATE"), DictFromRoamState);
    CFRelease(DictFromRoamState);
  }
  if (a2[168])
  {
    DictFromCCAStats = _createDictFromCCAStats((uint64_t)(a2 + 168));
    if (DictFromCCAStats)
      CFDictionaryAddValue(v6, CFSTR("CCA_STATS"), DictFromCCAStats);
  }
  else
  {
    DictFromCCAStats = 0;
  }
  if (!a2[192])
  {
    DictFromRoamState = 0;
LABEL_168:
    v24 = v68;
    if (a2[328])
    {
      v43 = (const void **)MEMORY[0x24BDBD270];
      if (!a2[329])
        v43 = (const void **)MEMORY[0x24BDBD268];
      CFDictionaryAddValue(v6, CFSTR("TXRX_STATS_VALID"), *v43);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 39, v6, 8, *(_QWORD *)(a1 + 80));
    v23 = cf;
    goto LABEL_67;
  }
  v46 = a2 + 192;
  DictFromRoamState = _createDictFromMloOpStats((uint64_t)(a2 + 192));
  if (DictFromRoamState)
    CFDictionaryAddValue(v6, CFSTR("MLO_OP_STATS"), DictFromRoamState);
  if (!*v46)
    goto LABEL_168;
  theArray = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
  if (theArray)
  {
    if (*v46)
    {
      v47 = 0;
      v41 = (uint64_t)(a2 + 208);
      do
      {
        DictFromMLOStats = _createDictFromMLOStats(v41);
        if (DictFromMLOStats)
        {
          v45 = DictFromMLOStats;
          CFArrayAppendValue(theArray, DictFromMLOStats);
          CFRelease(v45);
        }
        v41 += 40;
        ++v47;
      }
      while (v47 < *v46);
    }
    CFDictionaryAddValue(v6, CFSTR("MLO_LQM_STATS"), theArray);
    CFRelease(theArray);
    goto LABEL_168;
  }
LABEL_66:
  v23 = cf;
  v24 = v68;
LABEL_67:
  v21 = value;
LABEL_68:
  v18 = v69;
  if (v23)
LABEL_69:
    CFRelease(v23);
LABEL_70:
  if (v18)
    CFRelease(v18);
  if (v13)
    CFRelease(v13);
  if (v24)
    CFRelease(v24);
  if (v66)
    CFRelease(v66);
  if (v67)
    CFRelease(v67);
  if (v64)
    CFRelease(v64);
  if (v63)
    CFRelease(v63);
  if (v62)
    CFRelease(v62);
  if (v61)
    CFRelease(v61);
  if (v59)
    CFRelease(v59);
  if (v57)
    CFRelease(v57);
  if (v55)
    CFRelease(v55);
  if (v60)
    CFRelease(v60);
  if (v58)
    CFRelease(v58);
  if (v56)
    CFRelease(v56);
  if (v54)
    CFRelease(v54);
  if (v53)
    CFRelease(v53);
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
  CFRelease(v6);
  if (DictFromCCAStats)
    CFRelease(DictFromCCAStats);
  if (v65)
    CFRelease(v65);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  if (DictFromRoamState)
    CFRelease(DictFromRoamState);
}

__CFDictionary *_createDictFromCCAStats(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  const __CFNumber *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  const __CFNumber *cf;

  if (!a1)
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return Mutable;
  v4 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 2));
  if (!v4)
    return Mutable;
  v5 = v4;
  CFDictionaryAddValue(Mutable, CFSTR("CCA_TIMESTAMP_TOTAL"), v4);
  v6 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 4));
  if (!v6)
  {
    v16 = v5;
LABEL_35:
    CFRelease(v16);
    return Mutable;
  }
  v20 = v6;
  CFDictionaryAddValue(Mutable, CFSTR("CCA_SELF_TOTAL"), v6);
  v7 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 5));
  cf = v5;
  v19 = v7;
  if (!v7
    || (CFDictionaryAddValue(Mutable, CFSTR("CCA_OTHER_TOTAL"), v7),
        (v8 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 6))) == 0))
  {
    v18 = 0;
    v9 = 0;
    goto LABEL_38;
  }
  v18 = v8;
  CFDictionaryAddValue(Mutable, CFSTR("CCA_INTERFERENCE_TOTAL"), v8);
  v9 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 8));
  if (!v9)
  {
LABEL_38:
    v10 = 0;
    goto LABEL_39;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_TIMESTAMP_SLEEP"), v9);
  v10 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 10));
  if (!v10)
  {
LABEL_39:
    v11 = 0;
    goto LABEL_40;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_SELF_SLEEP"), v10);
  v11 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 11));
  if (!v11)
  {
LABEL_40:
    v12 = 0;
    goto LABEL_41;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_OTHER_SLEEP"), v11);
  v12 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 12));
  if (!v12)
  {
LABEL_41:
    v13 = 0;
    goto LABEL_42;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_INTERFERENCE_SLEEP"), v12);
  v13 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 14));
  if (!v13)
  {
LABEL_42:
    v14 = 0;
    goto LABEL_43;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_TIMESTAMP_WAKE"), v13);
  v14 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 16));
  if (!v14)
  {
LABEL_43:
    v15 = 0;
    goto LABEL_44;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_SELF_WAKE"), v14);
  v15 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 17));
  if (!v15)
  {
LABEL_44:
    v16 = 0;
    goto LABEL_16;
  }
  CFDictionaryAddValue(Mutable, CFSTR("CCA_OTHER_WAKE"), v15);
  v16 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 18));
  if (v16)
    CFDictionaryAddValue(Mutable, CFSTR("CCA_INTERFERENCE_WAKE"), v16);
LABEL_16:
  CFRelease(cf);
  CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v16)
    goto LABEL_35;
  return Mutable;
}

void _dispatchLqmTxStatsUpdate(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  NSObject *v31;
  const char *v32;
  uint32_t v33;
  NSObject *v34;
  const char *v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (a3 == 136)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v7 = Mutable;
        v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, (const void *)a2);
        if (v9)
        {
          v10 = v9;
          CFDictionaryAddValue(v7, CFSTR("LQM_TX_STATS_TX_SUCCESS"), v9);
          CFRelease(v10);
          v11 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 128));
          if (v11)
          {
            v12 = v11;
            CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_DROP_MISC"), v11);
            CFRelease(v12);
            v13 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 24));
            if (v13)
            {
              v14 = v13;
              CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_NO_BUFF"), v13);
              CFRelease(v14);
              v15 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 48));
              if (v15)
              {
                v16 = v15;
                CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_NO_RESOURCE"), v15);
                CFRelease(v16);
                v17 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 32));
                if (v17)
                {
                  v18 = v17;
                  CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_NO_ACK"), v17);
                  CFRelease(v18);
                  v19 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 72));
                  if (v19)
                  {
                    v20 = v19;
                    CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_CHIP_MODE_ERROR"), v19);
                    CFRelease(v20);
                    v21 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 16));
                    if (v21)
                    {
                      v22 = v21;
                      CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_EXPIRED"), v21);
                      CFRelease(v22);
                      v23 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 40));
                      if (v23)
                      {
                        v24 = v23;
                        CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_FAIL"), v23);
                        CFRelease(v24);
                        v25 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 104));
                        if (v25)
                        {
                          v26 = v25;
                          CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_FW_FREE_PACKET"), v25);
                          CFRelease(v26);
                          v27 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 112));
                          if (v27)
                          {
                            v28 = v27;
                            CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_MAX_RETRIES"), v27);
                            CFRelease(v28);
                            v29 = CFNumberCreate(v8, kCFNumberSInt64Type, (const void *)(a2 + 120));
                            if (v29)
                            {
                              v30 = v29;
                              CFDictionaryAddValue(v7, CFSTR("APPLE80211KEY_LQM_TX_STATS_TX_FORCE_LIFETIME_EXPIRED"), v29);
                              CFRelease(v30);
                              (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 169, v7, 8, *(_QWORD *)(a1 + 80));
LABEL_17:
                              CFRelease(v7);
                              return;
                            }
                            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                              goto LABEL_17;
                            v36 = 136315138;
                            v37 = "_dispatchLqmTxStatsUpdate";
                            v34 = MEMORY[0x24BDACB70];
                            v35 = "%s: Failed to allocate txForceLifetimeExpiredRef";
                          }
                          else
                          {
                            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                              goto LABEL_17;
                            v36 = 136315138;
                            v37 = "_dispatchLqmTxStatsUpdate";
                            v34 = MEMORY[0x24BDACB70];
                            v35 = "%s: Failed to allocate txMaxRetriesRef";
                          }
                        }
                        else
                        {
                          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                            goto LABEL_17;
                          v36 = 136315138;
                          v37 = "_dispatchLqmTxStatsUpdate";
                          v34 = MEMORY[0x24BDACB70];
                          v35 = "%s: Failed to allocate txFWFreePacketRef";
                        }
                      }
                      else
                      {
                        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                          goto LABEL_17;
                        v36 = 136315138;
                        v37 = "_dispatchLqmTxStatsUpdate";
                        v34 = MEMORY[0x24BDACB70];
                        v35 = "%s: Failed to allocate txFailRef";
                      }
                    }
                    else
                    {
                      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                        goto LABEL_17;
                      v36 = 136315138;
                      v37 = "_dispatchLqmTxStatsUpdate";
                      v34 = MEMORY[0x24BDACB70];
                      v35 = "%s: Failed to allocate txExpiredRef";
                    }
                  }
                  else
                  {
                    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                      goto LABEL_17;
                    v36 = 136315138;
                    v37 = "_dispatchLqmTxStatsUpdate";
                    v34 = MEMORY[0x24BDACB70];
                    v35 = "%s: Failed to allocate txChipModeErrorRef";
                  }
                }
                else
                {
                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    goto LABEL_17;
                  v36 = 136315138;
                  v37 = "_dispatchLqmTxStatsUpdate";
                  v34 = MEMORY[0x24BDACB70];
                  v35 = "%s: Failed to allocate txNoACKRef";
                }
              }
              else
              {
                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                  goto LABEL_17;
                v36 = 136315138;
                v37 = "_dispatchLqmTxStatsUpdate";
                v34 = MEMORY[0x24BDACB70];
                v35 = "%s: Failed to allocate txNoResourcesRef";
              }
            }
            else
            {
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                goto LABEL_17;
              v36 = 136315138;
              v37 = "_dispatchLqmTxStatsUpdate";
              v34 = MEMORY[0x24BDACB70];
              v35 = "%s: Failed to allocate txNoBuffRef";
            }
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_17;
            v36 = 136315138;
            v37 = "_dispatchLqmTxStatsUpdate";
            v34 = MEMORY[0x24BDACB70];
            v35 = "%s: Failed to allocate txDroppedMiscRef";
          }
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_17;
          v36 = 136315138;
          v37 = "_dispatchLqmTxStatsUpdate";
          v34 = MEMORY[0x24BDACB70];
          v35 = "%s: Failed to allocate txSuccessRef";
        }
        _os_log_impl(&dword_20647D000, v34, OS_LOG_TYPE_DEFAULT, v35, (uint8_t *)&v36, 0xCu);
        goto LABEL_17;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v36 = 136315138;
        v37 = "_dispatchLqmTxStatsUpdate";
        v31 = MEMORY[0x24BDACB70];
        v32 = "%s: NULL lqmTxStatsEventDict, Bail out\n";
        v33 = 12;
        goto LABEL_23;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v36 = 136315394;
      v37 = "_dispatchLqmTxStatsUpdate";
      v38 = 1024;
      v39 = a3;
      v31 = MEMORY[0x24BDACB70];
      v32 = "%s:wrong DataLen:%u\n";
      v33 = 18;
LABEL_23:
      _os_log_impl(&dword_20647D000, v31, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&v36, v33);
    }
  }
}

void _dispatchCCAChangedEvent(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  uint64_t v13;
  int v14;
  __CFDictionary *DictFromCCAStats;

  if (a3 >= 0x1C)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2);
      if (!v8)
      {
LABEL_18:
        CFRelease(v6);
        return;
      }
      v9 = v8;
      CFDictionaryAddValue(v6, CFSTR("TIMESTAMP"), v8);
      v10 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 4);
      if (!v10)
      {
        DictFromCCAStats = v9;
LABEL_17:
        CFRelease(DictFromCCAStats);
        goto LABEL_18;
      }
      v11 = v10;
      CFDictionaryAddValue(v6, CFSTR("CHANNEL"), v10);
      v12 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 6);
      if (v12)
      {
        CFDictionaryAddValue(v6, CFSTR("CCA"), v12);
        v14 = a2[8];
        v13 = (uint64_t)(a2 + 8);
        if (v14)
        {
          DictFromCCAStats = _createDictFromCCAStats(v13);
          if (!DictFromCCAStats)
            goto LABEL_14;
          CFDictionaryAddValue(v6, CFSTR("CCA_STATS"), DictFromCCAStats);
        }
        else
        {
          DictFromCCAStats = 0;
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 60, v6, 8, *(_QWORD *)(a1 + 80));
      }
      else
      {
        DictFromCCAStats = 0;
      }
LABEL_14:
      CFRelease(v9);
      CFRelease(v11);
      if (v12)
        CFRelease(v12);
      if (!DictFromCCAStats)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
}

void _dispatchBeaconCacheUpdate(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;

  if (a2)
  {
    if (a3 == 12)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("BEACON_CACHE_UPDATED_EVENT_STATUS"), v8);
          CFRelease(v9);
          v10 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("BEACON_CACHE_UPDATED_EVENT_REASON"), v10);
            CFRelease(v11);
            v12 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 8));
            if (v12)
            {
              v13 = v12;
              CFDictionaryAddValue(v6, CFSTR("BEACON_CACHE_UPDATED_EVENT_NUM_CHAN"), v12);
              CFRelease(v13);
              (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 180, v6, 8, *(_QWORD *)(a1 + 80));
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRealtimeSessionEvent(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  CFNumberRef v14;
  const __CFNumber *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  const __CFNumber *cf;
  const __CFNumber *v24;

  if (a2)
  {
    if (a3 == 20)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, (const void *)(a2 + 1));
        if (!v8)
        {
LABEL_28:
          CFRelease(v6);
          return;
        }
        v9 = v8;
        CFDictionaryAddValue(v6, CFSTR("ASR_SESSION_STATE"), v8);
        v10 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)a2);
        if (!v10)
        {
LABEL_27:
          CFRelease(v9);
          goto LABEL_28;
        }
        v11 = v10;
        CFDictionaryAddValue(v6, CFSTR("RT_TRAFFIC_STATE"), v10);
        v12 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (!v12)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 156, v6, 8, *(_QWORD *)(a1 + 80));
          goto LABEL_26;
        }
        v13 = v12;
        v14 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 8));
        if (!v14)
        {
LABEL_25:
          CFDictionaryAddValue(v6, CFSTR("QUAL_SCORE"), v13);
          (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 156, v6, 8, *(_QWORD *)(a1 + 80));
          CFRelease(v11);
          v11 = v9;
          v9 = v13;
LABEL_26:
          CFRelease(v11);
          goto LABEL_27;
        }
        v15 = v14;
        CFDictionaryAddValue(v13, CFSTR("CHANQUAL_SCORE"), v14);
        v16 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 4));
        if (!v16)
        {
          v21 = v15;
LABEL_24:
          CFRelease(v21);
          goto LABEL_25;
        }
        v24 = v11;
        v22 = v16;
        CFDictionaryAddValue(v13, CFSTR("TX_LATENCY_SCORE"), v16);
        v17 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 5));
        cf = v15;
        if (v17)
        {
          CFDictionaryAddValue(v13, CFSTR("RX_LATENCY_SCORE"), v17);
          v18 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 6));
          if (v18)
          {
            CFDictionaryAddValue(v13, CFSTR("TX_LOSS_SCORE"), v18);
            v19 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 7));
            if (v19)
            {
              CFDictionaryAddValue(v13, CFSTR("RX_LOSS_SCORE"), v19);
              v20 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
              if (v20)
              {
                CFDictionaryAddValue(v13, CFSTR("P95_TX_LATENCY_SCORE"), v20);
                v21 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
                if (v21)
                  CFDictionaryAddValue(v13, CFSTR("LINK_RECOMMENDATION_FLAGS"), v21);
LABEL_15:
                CFRelease(cf);
                CFRelease(v22);
                if (v17)
                  CFRelease(v17);
                if (v18)
                  CFRelease(v18);
                if (v19)
                  CFRelease(v19);
                v11 = v24;
                if (v20)
                  CFRelease(v20);
                if (!v21)
                  goto LABEL_25;
                goto LABEL_24;
              }
LABEL_35:
              v21 = 0;
              goto LABEL_15;
            }
LABEL_34:
            v20 = 0;
            goto LABEL_35;
          }
        }
        else
        {
          v18 = 0;
        }
        v19 = 0;
        goto LABEL_34;
      }
    }
  }
}

uint64_t Apple80211Get(uint64_t a1)
{
  if (a1)
    return Apple80211GetWithIOCTL();
  else
    return 4294963396;
}

void _dispatchAsyncScanEvent(uint64_t a1, int a2, unsigned int a3)
{
  pthread_mutex_t *v4;
  int v5;
  unsigned __int8 v6;
  char v7;
  const __CFAllocator *v8;
  __int128 v9;
  const __CFArray *Mutable;
  const __CFDictionary *v11;
  unint64_t Value;
  unint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v17;
  const __CFArray *v18;
  const __CFArray *v19;
  int v20;
  const void *v21;
  CFTypeRef v22;
  const void *v23;
  unsigned int v24;
  __CFRunLoopTimer *v25;
  CFAbsoluteTime v26;
  NSObject *v27;
  dispatch_time_t v28;
  __CFRunLoopTimer *v29;
  CFAbsoluteTime Current;
  NSObject *v31;
  dispatch_time_t v32;
  const void *v33;
  const void *v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  const __CFDictionary *theDict;
  pthread_mutex_t *v41;
  int v42;
  const __CFArray *cf;
  _DWORD __b[568];
  __int128 v45;
  __int128 v46;
  _DWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 160);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
  v42 = *(unsigned __int8 *)(a1 + 120);
  v5 = *(unsigned __int8 *)(a1 + 121);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 129);
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  cf = *(const __CFArray **)(a1 + 240);
  if (!cf)
  {
    cf = CFArrayCreateMutable(v8, 0, MEMORY[0x24BDBD690]);
    if (!cf)
    {
      *(_BYTE *)(a1 + 1992) = 0;
      LODWORD(v17) = -3901;
      goto LABEL_38;
    }
  }
  v47 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v9;
  v46 = v9;
  memset(__b, 170, 0x8D8uLL);
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x24BDBD690]);
  if (Mutable)
  {
    v41 = v4;
    v11 = *(const __CFDictionary **)(a1 + 144);
    Value = (unint64_t)CFDictionaryGetValue(v11, CFSTR("SCAN_SHORT_SSID"));
    v13 = (unint64_t)CFDictionaryGetValue(v11, CFSTR("SSID_STR"));
    theDict = v11;
    v36 = (unint64_t)CFDictionaryGetValue(v11, CFSTR("BSSID"));
    v37 = Value;
    v14 = (v13 | v36 | Value) != 0;
    v45 = 0u;
    v46 = 0u;
    v47 = 0;
    __strlcpy_chk();
    LODWORD(v46) = 11;
    DWORD2(v46) = 2264;
    v47 = __b;
    v15 = -10000;
    while (1)
    {
      bzero(__b, 0x8D8uLL);
      HIWORD(__b[34]) = 2048;
      if (*(_BYTE *)(a1 + 1992))
        __strlcpy_chk();
      if (Apple80211RawGet(a1, (uint64_t)&v45))
        break;
      _addScanResultToList(a1, (uint64_t)__b, Mutable, cf, 0, v42, v14, v5, v6, v7, 0, (*(_DWORD *)(a1 + 136) & 0x200) != 0);
      if (__CFADD__(v15++, 1))
        goto LABEL_10;
    }
    if (v15 == -1)
    {
LABEL_10:
      LODWORD(v17) = -3902;
      v4 = v41;
      goto LABEL_11;
    }
    v4 = v41;
    if (*__error() == -528350138 || *__error() == 5)
    {
      if ((*(_BYTE *)(a1 + 99) & 0x40) != 0 && (*(_BYTE *)(a1 + 137) & 8) != 0)
      {
        v18 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SCAN_SSID_LIST"));
        v19 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SCAN_BSSID_LIST"));
        _Apple80211AddOriginatingRNRChannelListToScanResults(Mutable, cf, v37, v13, v36, v18, v19);
      }
      goto LABEL_19;
    }
    LODWORD(v17) = *__error();
    if (!(_DWORD)v17)
    {
LABEL_19:
      LODWORD(v17) = 0;
      *(_QWORD *)(a1 + 240) = cf;
      goto LABEL_20;
    }
  }
  else
  {
    LODWORD(v17) = -3901;
  }
LABEL_11:
  if (!*(_QWORD *)(a1 + 240))
    CFRelease(cf);
LABEL_20:
  if (Mutable)
    CFRelease(Mutable);
  *(_BYTE *)(a1 + 1992) = 0;
  if ((_DWORD)v17 != 16)
  {
    if (!(_DWORD)v17)
    {
      v20 = *(_DWORD *)(a1 + 236) - 1;
      *(_DWORD *)(a1 + 236) = v20;
      if (v20 && (v21 = *(const void **)(a1 + 144)) != 0 && (v22 = CFRetain(v21)) != 0)
      {
        v23 = v22;
        pthread_mutex_unlock(v4);
        LODWORD(v17) = Apple80211ScanAsync();
        CFRelease(v23);
        if (!(_DWORD)v17)
          return;
      }
      else
      {
        LODWORD(v17) = 0;
      }
    }
    goto LABEL_38;
  }
  v24 = *(_DWORD *)(a1 + 264);
  if (v24 > 4)
  {
    LODWORD(v17) = 16;
LABEL_38:
    v29 = *(__CFRunLoopTimer **)(a1 + 248);
    if (v29)
    {
      Current = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v29, Current + 315360000.0);
    }
    v31 = *(NSObject **)(a1 + 256);
    if (v31)
    {
      v32 = dispatch_time(0, 315360000000000000);
      dispatch_source_set_timer(v31, v32, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    v33 = *(const void **)(a1 + 144);
    v34 = *(const void **)(a1 + 240);
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 232) = 0;
    *(_DWORD *)(a1 + 236) = 0;
    *(_DWORD *)(a1 + 124) = 0x80000000;
    *(_BYTE *)(a1 + 128) = 0;
    pthread_mutex_unlock(v4);
    if ((_DWORD)v17)
      v35 = 1;
    else
      v35 = a2 == 0;
    if (v35)
      v17 = v17;
    else
      v17 = a3;
    if ((_DWORD)v17 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      __b[0] = 136315394;
      *(_QWORD *)&__b[1] = "_dispatchAsyncScanEvent";
      LOWORD(__b[3]) = 1024;
      *(_DWORD *)((char *)&__b[3] + 2) = v17;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Error: posting APPLE80211_M_SCAN_DONE with err %d", (uint8_t *)__b, 0x12u);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, _QWORD))(a1 + 72))(v17, a1, 10, v34, 8, *(_QWORD *)(a1 + 80));
    if (v33)
      CFRelease(v33);
    if (v34)
      CFRelease(v34);
    return;
  }
  if (!v24)
  {
    v25 = *(__CFRunLoopTimer **)(a1 + 248);
    if (v25)
    {
      v26 = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v25, v26 + 0.2);
    }
    v27 = *(NSObject **)(a1 + 256);
    if (v27)
    {
      v28 = dispatch_time(0, 200000000);
      dispatch_source_set_timer(v27, v28, 0xBEBC200uLL, 0);
    }
  }
  ++*(_DWORD *)(a1 + 264);
  pthread_mutex_unlock(v4);
}

uint64_t Apple80211RawGet(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  __uint64_t v11;
  const char *v12;
  uint64_t v13;
  __uint64_t v14;
  unint64_t v15;
  __uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  size_t v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  __uint64_t v26;
  const char *v27;
  int v28;
  int v29;
  size_t outputStructCnt[2];
  __int128 v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  _BYTE v35[24];
  __int16 v36;
  _BYTE v37[14];
  __int16 v38;
  _BYTE v39[20];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 24) < 0x3C01u)
    return Apple80211IOCTLGetWrapper(a1, a2);
  if (*(_BYTE *)(a1 + 107))
    return _Apple80211AWDLCompatibilityCall(a1, a2, 0);
  v5 = *(unsigned int *)(a2 + 16);
  if (*(_BYTE *)(a1 + 1801))
  {
    v6 = malloc_type_malloc(0x3C030uLL, 0x1000040135F6BA2uLL);
    if (v6)
    {
      v7 = v6;
      v8 = v6 + 61446;
      bzero(v6 + 1, 0x3C02CuLL);
      *v7 = -1071093303;
      v9 = a1 + 4;
      __strlcpy_chk();
      *v8 = v5;
      v10 = (void *)(a2 + 20);
      v8[1] = *(_DWORD *)(a2 + 20);
      if ((*(_BYTE *)(a1 + 1984) & 1) != 0)
      {
        v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          if ((int)v5 > 556)
          {
            v12 = "Error Invalid ioctl";
          }
          else if ((_DWORD)v5 == -1)
          {
            v12 = "APPLE80211_IOC_CARD_SPECIFIC";
          }
          else if ((v5 & 0x80000000) != 0 || (v12 = (const char *)gAppleIoucIndexToString[v5]) == 0)
          {
            v12 = "unknown Apple80211_IOC_";
          }
          v20 = *(_DWORD *)(a2 + 24);
          *(_DWORD *)buf = 136448002;
          v33 = "_Apple80211LargeIOCTLGetWrapper";
          v34 = 1024;
          *(_DWORD *)v35 = 214;
          *(_WORD *)&v35[4] = 2048;
          *(_QWORD *)&v35[6] = v11 / 0x3B9ACA00;
          *(_WORD *)&v35[14] = 2048;
          *(_QWORD *)&v35[16] = v11 % 0x3B9ACA00 / 0x3E8;
          v36 = 2082;
          *(_QWORD *)v37 = a1 + 4;
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&v37[10] = v5;
          v38 = 2082;
          *(_QWORD *)v39 = v12;
          *(_WORD *)&v39[8] = 1024;
          *(_DWORD *)&v39[10] = v20;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", buf, 0x46u);
        }
      }
      v21 = *(_DWORD *)(a2 + 24);
      if (v21 <= 0x3C000)
      {
        if (v21)
        {
          v7[1] = v21;
          __memcpy_chk();
        }
        if (*(_QWORD *)(a2 + 32))
        {
          v22 = *(unsigned int *)(a2 + 24);
          if ((_DWORD)v22)
            v10 = *(void **)(a2 + 32);
          else
            v22 = 4;
        }
        else
        {
          v22 = 4;
        }
        outputStructCnt[0] = v22;
        v19 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 1804), 6u, v7, 0x3C030uLL, v10, outputStructCnt);
        if ((_DWORD)v19)
        {
          *__error() = v19;
          v23 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            if ((int)v5 > 556)
            {
              v24 = "Error Invalid ioctl";
            }
            else if ((_DWORD)v5 == -1)
            {
              v24 = "APPLE80211_IOC_CARD_SPECIFIC";
            }
            else if ((v5 & 0x80000000) != 0 || (v24 = (const char *)gAppleIoucIndexToString[v5]) == 0)
            {
              v24 = "unknown Apple80211_IOC_";
            }
            v29 = *(_DWORD *)(a2 + 24);
            *(_DWORD *)buf = 136448258;
            v33 = "_Apple80211LargeIOCTLGetWrapper";
            v34 = 1024;
            *(_DWORD *)v35 = 244;
            *(_WORD *)&v35[4] = 2048;
            *(_QWORD *)&v35[6] = v23 / 0x3B9ACA00;
            *(_WORD *)&v35[14] = 2048;
            *(_QWORD *)&v35[16] = v23 % 0x3B9ACA00 / 0x3E8;
            v36 = 2082;
            *(_QWORD *)v37 = v9;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&v37[10] = v5;
            v38 = 2082;
            *(_QWORD *)v39 = v24;
            *(_WORD *)&v39[8] = 1024;
            *(_DWORD *)&v39[10] = v29;
            *(_WORD *)&v39[14] = 1024;
            *(_DWORD *)&v39[16] = v19;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d\n", buf, 0x4Cu);
          }
        }
        else
        {
          *(_DWORD *)(a2 + 24) = outputStructCnt[0];
        }
        free(v7);
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v33 = "_Apple80211LargeIOCTLGetWrapper";
          v34 = 1024;
          *(_DWORD *)v35 = v21;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Invalid length %d\n", buf, 0x12u);
        }
        free(v7);
        return 22;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 556)
        {
          v18 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v5 == -1)
        {
          v18 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (v18 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          v18 = "unknown Apple80211_IOC_";
        }
        *(_DWORD *)buf = 136446722;
        v33 = "_Apple80211LargeIOCTLGetWrapper";
        v34 = 1024;
        *(_DWORD *)v35 = v5;
        *(_WORD *)&v35[4] = 2082;
        *(_QWORD *)&v35[6] = v18;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: Memory allocation failed for apple80211IOUCReqV2, type %d/'%{public}s'\n", buf, 0x1Cu);
      }
      return 12;
    }
  }
  else
  {
    *(_OWORD *)outputStructCnt = 0u;
    v31 = 0u;
    v13 = a1 + 4;
    __strlcpy_chk();
    v14 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    ioctl(*(_DWORD *)a1, 0xC0206911uLL, outputStructCnt);
    v15 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v14;
    if (v15 > 0x3B9AC9FF && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448258;
      v33 = "_logTimeIfThresholdExceeded";
      v34 = 2082;
      *(_QWORD *)v35 = outputStructCnt;
      *(_WORD *)&v35[8] = 2080;
      *(_QWORD *)&v35[10] = " 'SIOCGIFFLAGS' ";
      *(_WORD *)&v35[18] = 1024;
      v36 = 1024;
      *(_DWORD *)&v35[20] = -1071617775;
      *(_DWORD *)v37 = -1071617775;
      *(_WORD *)&v37[4] = 2048;
      *(_QWORD *)&v37[6] = v15 / 0x3B9ACA00;
      v38 = 2048;
      *(_QWORD *)v39 = v15 % 0x3B9ACA00 / 0x3E8;
      *(_WORD *)&v39[8] = 2048;
      *(_QWORD *)&v39[10] = 1;
      *(_WORD *)&v39[18] = 2048;
      v40 = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
    }
    __strlcpy_chk();
    if ((*(_BYTE *)(a1 + 1984) & 1) != 0)
    {
      v16 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 556)
        {
          v17 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v5 == -1)
        {
          v17 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (v17 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          v17 = "unknown Apple80211_IOC_";
        }
        v25 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)buf = 136448258;
        v33 = "_Apple80211LargeIOCTLGetWrapper";
        v34 = 1024;
        *(_DWORD *)v35 = 266;
        *(_WORD *)&v35[4] = 2048;
        *(_QWORD *)&v35[6] = v16 / 0x3B9ACA00;
        *(_WORD *)&v35[14] = 2048;
        *(_QWORD *)&v35[16] = v16 % 0x3B9ACA00 / 0x3E8;
        v36 = 2082;
        *(_QWORD *)v37 = a1 + 4;
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)&v37[10] = (__int16)v31;
        v38 = 1024;
        *(_DWORD *)v39 = v5;
        *(_WORD *)&v39[4] = 2082;
        *(_QWORD *)&v39[6] = v17;
        *(_WORD *)&v39[14] = 1024;
        *(_DWORD *)&v39[16] = v25;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
      }
    }
    v19 = ioctl(*(_DWORD *)a1, 0xC02869C9uLL, a2);
    if ((_DWORD)v19)
    {
      v26 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 556)
        {
          v27 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v5 == -1)
        {
          v27 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (v27 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          v27 = "unknown Apple80211_IOC_";
        }
        v28 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)buf = 136448514;
        v33 = "_Apple80211LargeIOCTLGetWrapper";
        v34 = 1024;
        *(_DWORD *)v35 = 272;
        *(_WORD *)&v35[4] = 2048;
        *(_QWORD *)&v35[6] = v26 / 0x3B9ACA00;
        *(_WORD *)&v35[14] = 2048;
        *(_QWORD *)&v35[16] = v26 % 0x3B9ACA00 / 0x3E8;
        v36 = 2082;
        *(_QWORD *)v37 = v13;
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)&v37[10] = (__int16)v31;
        v38 = 1024;
        *(_DWORD *)v39 = v5;
        *(_WORD *)&v39[4] = 2082;
        *(_QWORD *)&v39[6] = v27;
        *(_WORD *)&v39[14] = 1024;
        *(_DWORD *)&v39[16] = v28;
        LOWORD(v40) = 1024;
        *(_DWORD *)((char *)&v40 + 2) = v19;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d\n", buf, 0x52u);
      }
    }
  }
  return v19;
}

uint64_t Apple80211SetProperty()
{
  uint64_t v0;
  void *v1;
  void *v2;
  __CFString *v3;
  const __CFString *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint32_t v10;
  size_t v11;
  CFDictionaryRef v12;
  uint64_t v13;
  const __CFAllocator *v14;
  CFDictionaryRef v15;
  const __CFData *v16;
  const __CFData *v17;
  uint64_t v18;
  void *v19;
  int v20;
  CFErrorRef error;
  void *values;
  void *keys;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  _BYTE v28[10];
  _QWORD v29[2];
  int v30;
  int v31;
  UInt8 v32[4096];
  __int128 v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  CFRange v37;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v36 = *MEMORY[0x24BDAC8D0];
  values = v1;
  keys = v3;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  bzero(&v31, 0x1004uLL);
  v30 = 1;
  error = 0;
  if (!v4)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return 4294963396;
    *(_DWORD *)buf = 136315138;
    v26 = "Apple80211SetProperty";
    v8 = MEMORY[0x24BDACB70];
    v9 = "%s: key NULL\n";
LABEL_37:
    v10 = 12;
    goto LABEL_17;
  }
  if (!v2)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    *(_DWORD *)buf = 136315138;
    v26 = "Apple80211SetProperty";
    v8 = MEMORY[0x24BDACB70];
    v9 = "%s: property NULL\n";
    goto LABEL_37;
  }
  if (!v5)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    v11 = 0;
    v6 = -1;
LABEL_16:
    *(_DWORD *)buf = 136315906;
    v26 = "Apple80211SetProperty";
    v27 = 2048;
    *(_QWORD *)v28 = v5;
    *(_WORD *)&v28[8] = 1024;
    LODWORD(v29[0]) = v6;
    WORD2(v29[0]) = 2048;
    *(_QWORD *)((char *)v29 + 6) = v11;
    v8 = MEMORY[0x24BDACB70];
    v9 = "%s: bad opaque: opaque=%p, opaque->sockfd=%d, name-len=%lu\n";
    v10 = 38;
LABEL_17:
    _os_log_impl(&dword_20647D000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
    goto LABEL_18;
  }
  v6 = *(_DWORD *)v5;
  if ((*(_DWORD *)v5 & 0x80000000) != 0 || !*(_BYTE *)(v5 + 4))
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    v11 = strlen((const char *)(v5 + 4));
    goto LABEL_16;
  }
  if (CFStringGetLength(v4) <= 79)
  {
    v7 = 0;
    while (!CFEqual(v4, _isValidProperty_DEPRECATED_validProperties_DEPRECATED[v7]))
    {
      if (++v7 == 62)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        *(_DWORD *)buf = 136315394;
        v26 = "Apple80211SetProperty";
        v27 = 2112;
        *(_QWORD *)v28 = v4;
        v8 = MEMORY[0x24BDACB70];
        v9 = "%s: Key: %@ is not a valid property\n";
        v10 = 22;
        goto LABEL_17;
      }
    }
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)&keys, (const void **)&values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!v15)
    {
      v13 = 3758097085;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v26 = "Apple80211SetProperty";
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: could not build wrapper dictionary\n", buf, 0xCu);
      }
      v12 = 0;
      goto LABEL_28;
    }
    v12 = v15;
    v16 = CFPropertyListCreateData(v14, v15, kCFPropertyListXMLFormat_v1_0, 0, &error);
    if (v16)
    {
      v17 = v16;
      v18 = CFDataGetLength(v16) + 1;
      v31 = v18;
      if (v18 > 0x1000)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v26 = "Apple80211SetProperty";
          v27 = 2048;
          *(_QWORD *)v28 = v18;
          *(_WORD *)&v28[8] = 1024;
          LODWORD(v29[0]) = 4096;
          WORD2(v29[0]) = 2112;
          *(_QWORD *)((char *)v29 + 6) = values;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: serialized property dictionary too long (%lu => %i). Consider changing APPLE80211_MAX_PROPERTY_SERIAL_LEN: %@\n", buf, 0x26u);
        }
        v13 = 4294963396;
      }
      else
      {
        v37.length = CFDataGetLength(v17);
        v37.location = 0;
        CFDataGetBytes(v17, v37, v32);
        v32[v31 - 1] = 0;
        v33 = 0u;
        v34 = 0u;
        v35 = 0;
        LODWORD(v34) = 383;
        __strlcpy_chk();
        DWORD2(v34) = 4104;
        v35 = &v30;
        v13 = Apple80211RawSet();
        if ((_DWORD)v13)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            v19 = keys;
            v20 = *__error();
            *(_DWORD *)buf = 136315906;
            v26 = "Apple80211SetProperty";
            v27 = 2112;
            *(_QWORD *)v28 = v19;
            *(_WORD *)&v28[8] = 1024;
            LODWORD(v29[0]) = v13;
            WORD2(v29[0]) = 1024;
            *(_DWORD *)((char *)v29 + 6) = v20;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: failed to set %@: bsdErr=%d, errno=%d\n", buf, 0x22u);
          }
          v13 = *__error();
        }
      }
      CFRelease(v17);
      goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v26 = "Apple80211SetProperty";
      v27 = 2112;
      *(_QWORD *)v28 = error;
      *(_WORD *)&v28[8] = 2112;
      v29[0] = v12;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: cannot serialize: error: %@ property- %@\n", buf, 0x20u);
    }
    goto LABEL_19;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v26 = "Apple80211SetProperty";
    v27 = 1024;
    *(_DWORD *)v28 = CFStringGetLength(v4);
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = 80;
    v8 = MEMORY[0x24BDACB70];
    v9 = "%s: C-string in key is too long (%u >= %u)\n";
    v10 = 24;
    goto LABEL_17;
  }
LABEL_18:
  v12 = 0;
LABEL_19:
  v13 = 4294963396;
LABEL_28:
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
  if (v12)
    CFRelease(v12);
  return v13;
}

uint64_t Apple80211RawSet()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __uint64_t v7;
  const char *v8;
  uint64_t v9;
  __uint64_t v10;
  unint64_t v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  size_t v15;
  NSObject *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  __uint64_t v20;
  const char *v21;
  int v22;
  __uint64_t v23;
  const char *v24;
  int v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  uint32_t v29;
  int v30;
  size_t outputStructCnt;
  _BYTE v32[38];
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[24];
  __int16 v47;
  _BYTE v48[14];
  __int16 v49;
  _BYTE v50[20];
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v54 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(v1 + 24) < 0x3C01u)
    return Apple80211IOCTLSetWrapper();
  if (*(_BYTE *)(v0 + 107))
    return _Apple80211AWDLCompatibilityCall(v0, v1, 1);
  v5 = *(unsigned int *)(v1 + 16);
  if (!*(_BYTE *)(v0 + 1801))
  {
    memset(v32, 0, 32);
    v9 = v0 + 4;
    __strlcpy_chk();
    v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    ioctl(*(_DWORD *)v3, 0xC0206911uLL, v32);
    v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v10;
    if (v11 > 0x3B9AC9FF && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448258;
      v44 = "_logTimeIfThresholdExceeded";
      v45 = 2082;
      *(_QWORD *)v46 = v32;
      *(_WORD *)&v46[8] = 2080;
      *(_QWORD *)&v46[10] = " 'SIOCGIFFLAGS' ";
      *(_WORD *)&v46[18] = 1024;
      v47 = 1024;
      *(_DWORD *)&v46[20] = -1071617775;
      *(_DWORD *)v48 = -1071617775;
      *(_WORD *)&v48[4] = 2048;
      *(_QWORD *)&v48[6] = v11 / 0x3B9ACA00;
      v49 = 2048;
      *(_QWORD *)v50 = v11 % 0x3B9ACA00 / 0x3E8;
      *(_WORD *)&v50[8] = 2048;
      *(_QWORD *)&v50[10] = 1;
      *(_WORD *)&v50[18] = 2048;
      v51 = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
    }
    __strlcpy_chk();
    if ((*(_BYTE *)(v3 + 1984) & 1) != 0)
    {
      v12 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 556)
        {
          v13 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v5 == -1)
        {
          v13 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (v13 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          v13 = "unknown Apple80211_IOC_";
        }
        v22 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)buf = 136448258;
        v44 = "_Apple80211LargeIOCTLSetWrapper";
        v45 = 1024;
        *(_DWORD *)v46 = 349;
        *(_WORD *)&v46[4] = 2048;
        *(_QWORD *)&v46[6] = v12 / 0x3B9ACA00;
        *(_WORD *)&v46[14] = 2048;
        *(_QWORD *)&v46[16] = v12 % 0x3B9ACA00 / 0x3E8;
        v47 = 2082;
        *(_QWORD *)v48 = v3 + 4;
        *(_WORD *)&v48[8] = 1024;
        *(_DWORD *)&v48[10] = v5;
        v49 = 1024;
        *(_DWORD *)v50 = *(__int16 *)&v32[16];
        *(_WORD *)&v50[4] = 2082;
        *(_QWORD *)&v50[6] = v13;
        *(_WORD *)&v50[14] = 1024;
        *(_DWORD *)&v50[16] = v22;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u  @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
      }
    }
    v19 = ioctl(*(_DWORD *)v3, 0x802869C8uLL, v2);
    if (!(_DWORD)v19)
      return v19;
    v23 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return v19;
    if ((int)v5 > 556)
    {
      v24 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v5 == -1)
    {
      v24 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v5 & 0x80000000) != 0 || (v24 = (const char *)gAppleIoucIndexToString[v5]) == 0)
    {
      v24 = "unknown Apple80211_IOC_";
    }
    v25 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)buf = 136448514;
    v44 = "_Apple80211LargeIOCTLSetWrapper";
    v45 = 1024;
    *(_DWORD *)v46 = 355;
    *(_WORD *)&v46[4] = 2048;
    *(_QWORD *)&v46[6] = v23 / 0x3B9ACA00;
    *(_WORD *)&v46[14] = 2048;
    *(_QWORD *)&v46[16] = v23 % 0x3B9ACA00 / 0x3E8;
    v47 = 2082;
    *(_QWORD *)v48 = v9;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)&v48[10] = *(__int16 *)&v32[16];
    v49 = 1024;
    *(_DWORD *)v50 = v5;
    *(_WORD *)&v50[4] = 2082;
    *(_QWORD *)&v50[6] = v24;
    *(_WORD *)&v50[14] = 1024;
    *(_DWORD *)&v50[16] = v25;
    LOWORD(v51) = 1024;
    *(_DWORD *)((char *)&v51 + 2) = v19;
    v26 = MEMORY[0x24BDACB70];
    v27 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d\n";
    v28 = buf;
    v29 = 82;
LABEL_63:
    _os_log_impl(&dword_20647D000, v26, OS_LOG_TYPE_DEFAULT, v27, v28, v29);
    return v19;
  }
  bzero(buf, 0x3C030uLL);
  *(_DWORD *)buf = -2144835128;
  v6 = v3 + 4;
  __strlcpy_chk();
  v52 = v5;
  if ((*(_BYTE *)(v3 + 1984) & 1) != 0)
  {
    v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      if ((int)v5 > 556)
      {
        v8 = "Error Invalid ioctl";
      }
      else if ((_DWORD)v5 == -1)
      {
        v8 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v5 & 0x80000000) != 0 || (v8 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        v8 = "unknown Apple80211_IOC_";
      }
      v14 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)v32 = 136448002;
      *(_QWORD *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 299;
      *(_WORD *)&v32[18] = 2048;
      *(_QWORD *)&v32[20] = v7 / 0x3B9ACA00;
      *(_WORD *)&v32[28] = 2048;
      *(_QWORD *)&v32[30] = v7 % 0x3B9ACA00 / 0x3E8;
      v33 = 2082;
      v34 = v3 + 4;
      v35 = 1024;
      v36 = v5;
      v37 = 2082;
      v38 = v8;
      v39 = 1024;
      v40 = v14;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u  @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", v32, 0x46u);
    }
  }
  if (*(_DWORD *)(v2 + 20))
    v53 = *(_DWORD *)(v2 + 20);
  v15 = *(unsigned int *)(v2 + 24);
  if (v15 > 0x3C000)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v32 = 136315394;
      *(_QWORD *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = v15;
      v16 = MEMORY[0x24BDACB70];
      v17 = "%s: req_len %d exceeds max input buffer length\n";
LABEL_38:
      _os_log_impl(&dword_20647D000, v16, OS_LOG_TYPE_DEFAULT, v17, v32, 0x12u);
      return 22;
    }
    return 22;
  }
  v18 = *(void **)(v2 + 32);
  if ((_DWORD)v15)
  {
    if (v18)
    {
      LODWORD(v44) = *(_DWORD *)(v2 + 24);
      __memcpy_chk();
      goto LABEL_41;
    }
  }
  else if (!v18)
  {
    v15 = 0;
LABEL_41:
    outputStructCnt = v15;
    v19 = IOConnectCallStructMethod(*(_DWORD *)(v3 + 1804), 6u, buf, 0x3C030uLL, v18, &outputStructCnt);
    if (!(_DWORD)v19)
      return v19;
    *__error() = v19;
    v20 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return v19;
    if ((int)v5 > 556)
    {
      v21 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v5 == -1)
    {
      v21 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v5 & 0x80000000) != 0 || (v21 = (const char *)gAppleIoucIndexToString[v5]) == 0)
    {
      v21 = "unknown Apple80211_IOC_";
    }
    v30 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)v32 = 136448258;
    *(_QWORD *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
    *(_WORD *)&v32[12] = 1024;
    *(_DWORD *)&v32[14] = 328;
    *(_WORD *)&v32[18] = 2048;
    *(_QWORD *)&v32[20] = v20 / 0x3B9ACA00;
    *(_WORD *)&v32[28] = 2048;
    *(_QWORD *)&v32[30] = v20 % 0x3B9ACA00 / 0x3E8;
    v33 = 2082;
    v34 = v6;
    v35 = 1024;
    v36 = v5;
    v37 = 2082;
    v38 = v21;
    v39 = 1024;
    v40 = v30;
    v41 = 1024;
    v42 = v19;
    v26 = MEMORY[0x24BDACB70];
    v27 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d\n";
    v28 = v32;
    v29 = 76;
    goto LABEL_63;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v32 = 136315394;
    *(_QWORD *)&v32[4] = "_Apple80211LargeIOCTLSetWrapper";
    *(_WORD *)&v32[12] = 1024;
    *(_DWORD *)&v32[14] = v15;
    v16 = MEMORY[0x24BDACB70];
    v17 = "%s: Invalid data or length in req: len %d\n";
    goto LABEL_38;
  }
  return 22;
}

uint64_t Apple80211IOCTLSetWrapper()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __uint64_t v7;
  const char *v8;
  uint64_t v9;
  __uint64_t v10;
  unint64_t v11;
  __uint64_t v12;
  const char *v13;
  int v14;
  int v15;
  size_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __uint64_t v23;
  const char *v24;
  __uint64_t v25;
  const char *v26;
  int v27;
  __uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  uint32_t v35;
  int v36;
  size_t outputStructCnt;
  _BYTE v38[38];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  _BYTE v54[24];
  __int16 v55;
  _BYTE v56[14];
  __int16 v57;
  _BYTE v58[20];
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v63 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 107))
    return _Apple80211AWDLCompatibilityCall(v0, v1, 1);
  v5 = *(unsigned int *)(v1 + 16);
  if (!*(_BYTE *)(v0 + 1801))
  {
    memset(v38, 0, 32);
    v9 = v0 + 4;
    __strlcpy_chk();
    v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    ioctl(*(_DWORD *)v3, 0xC0206911uLL, v38);
    v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v10;
    if (v11 > 0x3B9AC9FF && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448258;
      v52 = "_logTimeIfThresholdExceeded";
      v53 = 2082;
      *(_QWORD *)v54 = v38;
      *(_WORD *)&v54[8] = 2080;
      *(_QWORD *)&v54[10] = " 'SIOCGIFFLAGS' ";
      *(_WORD *)&v54[18] = 1024;
      v55 = 1024;
      *(_DWORD *)&v54[20] = -1071617775;
      *(_DWORD *)v56 = -1071617775;
      *(_WORD *)&v56[4] = 2048;
      *(_QWORD *)&v56[6] = v11 / 0x3B9ACA00;
      v57 = 2048;
      *(_QWORD *)v58 = v11 % 0x3B9ACA00 / 0x3E8;
      *(_WORD *)&v58[8] = 2048;
      *(_QWORD *)&v58[10] = 1;
      *(_WORD *)&v58[18] = 2048;
      v59 = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
    }
    __strlcpy_chk();
    if ((*(_BYTE *)(v3 + 1984) & 1) != 0)
    {
      v12 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if ((int)v5 > 556)
        {
          v13 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v5 == -1)
        {
          v13 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (v13 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          v13 = "unknown Apple80211_IOC_";
        }
        v27 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)buf = 136448258;
        v52 = "Apple80211IOCTLSetWrapper";
        v53 = 1024;
        *(_DWORD *)v54 = 5295;
        *(_WORD *)&v54[4] = 2048;
        *(_QWORD *)&v54[6] = v12 / 0x3B9ACA00;
        *(_WORD *)&v54[14] = 2048;
        *(_QWORD *)&v54[16] = v12 % 0x3B9ACA00 / 0x3E8;
        v55 = 2082;
        *(_QWORD *)v56 = v3 + 4;
        *(_WORD *)&v56[8] = 1024;
        *(_DWORD *)&v56[10] = *(__int16 *)&v38[16];
        v57 = 1024;
        *(_DWORD *)v58 = v5;
        *(_WORD *)&v58[4] = 2082;
        *(_QWORD *)&v58[6] = v13;
        *(_WORD *)&v58[14] = 1024;
        *(_DWORD *)&v58[16] = v27;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
      }
    }
    v20 = ioctl(*(_DWORD *)v3, 0x802869C8uLL, v2);
    if (!(_DWORD)v20)
      return v20;
    v28 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return v20;
    v29 = *(unsigned int *)(v2 + 16);
    if ((int)v29 > 556)
    {
      v30 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v29 == -1)
    {
      v30 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v29 & 0x80000000) != 0 || (v30 = (const char *)gAppleIoucIndexToString[v29]) == 0)
    {
      v30 = "unknown Apple80211_IOC_";
    }
    v31 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)buf = 136448770;
    v52 = "Apple80211IOCTLSetWrapper";
    v53 = 1024;
    *(_DWORD *)v54 = 5301;
    *(_WORD *)&v54[4] = 2048;
    *(_QWORD *)&v54[6] = v28 / 0x3B9ACA00;
    *(_WORD *)&v54[14] = 2048;
    *(_QWORD *)&v54[16] = v28 % 0x3B9ACA00 / 0x3E8;
    v55 = 2082;
    *(_QWORD *)v56 = v9;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = *(__int16 *)&v38[16];
    v57 = 1024;
    *(_DWORD *)v58 = v29;
    *(_WORD *)&v58[4] = 2082;
    *(_QWORD *)&v58[6] = v30;
    *(_WORD *)&v58[14] = 1024;
    *(_DWORD *)&v58[16] = v31;
    LOWORD(v59) = 1024;
    *(_DWORD *)((char *)&v59 + 2) = v20;
    HIWORD(v59) = 1024;
    v60 = v20;
    v32 = MEMORY[0x24BDACB70];
    v33 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d/0x%08x\n";
    v34 = buf;
    v35 = 88;
    goto LABEL_81;
  }
  outputStructCnt = 0;
  bzero(buf, 0x3C30uLL);
  *(_DWORD *)buf = -2144835128;
  v6 = v3 + 4;
  __strlcpy_chk();
  v61 = v5;
  if ((*(_BYTE *)(v3 + 1984) & 1) != 0)
  {
    v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      if ((int)v5 > 556)
      {
        v8 = "Error Invalid ioctl";
      }
      else if ((_DWORD)v5 == -1)
      {
        v8 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v5 & 0x80000000) != 0 || (v8 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        v8 = "unknown Apple80211_IOC_";
      }
      v14 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)v38 = 136448002;
      *(_QWORD *)&v38[4] = "Apple80211IOCTLSetWrapper";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 5225;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v7 / 0x3B9ACA00;
      *(_WORD *)&v38[28] = 2048;
      *(_QWORD *)&v38[30] = v7 % 0x3B9ACA00 / 0x3E8;
      v39 = 2082;
      v40 = v3 + 4;
      v41 = 1024;
      v42 = v5;
      v43 = 2082;
      v44 = v8;
      v45 = 1024;
      v46 = v14;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", v38, 0x46u);
    }
  }
  v15 = *(_DWORD *)(v2 + 20);
  if (v15)
    v62 = *(_DWORD *)(v2 + 20);
  v16 = *(unsigned int *)(v2 + 24);
  if (v16 >= 0x3C01)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v38 = 136446466;
      *(_QWORD *)&v38[4] = "Apple80211IOCTLSetWrapper";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = v16;
      v17 = MEMORY[0x24BDACB70];
      v18 = "%{public}s: req_len %d exceeds max input buffer length\n";
LABEL_36:
      _os_log_impl(&dword_20647D000, v17, OS_LOG_TYPE_DEFAULT, v18, v38, 0x12u);
      return 22;
    }
    return 22;
  }
  v19 = *(void **)(v2 + 32);
  if (!(_DWORD)v16)
  {
    if (!v19)
      goto LABEL_38;
LABEL_34:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v38 = 136446466;
      *(_QWORD *)&v38[4] = "Apple80211IOCTLSetWrapper";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = v16;
      v17 = MEMORY[0x24BDACB70];
      v18 = "%{public}s: Invalid data or length in req: len %d\n";
      goto LABEL_36;
    }
    return 22;
  }
  if (!v19)
    goto LABEL_34;
  LODWORD(v52) = *(_DWORD *)(v2 + 24);
  __memcpy_chk();
LABEL_38:
  v21 = *(_DWORD *)(v2 + 16);
  if (v21 == 94 || v21 == 293 || v21 == 153)
  {
    outputStructCnt = v16;
  }
  else
  {
    v19 = 0;
    if ((v21 & 0xFFFFFFFE) == 0x18)
      v62 = v15;
  }
  if (!*(_DWORD *)(v3 + 1804))
  {
    v20 = 3758097088;
    v25 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return v20;
    if ((int)v5 > 556)
    {
      v26 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v5 == -1)
    {
      v26 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v5 & 0x80000000) != 0 || (v26 = (const char *)gAppleIoucIndexToString[v5]) == 0)
    {
      v26 = "unknown Apple80211_IOC_";
    }
    *(_DWORD *)v38 = 136447746;
    *(_QWORD *)&v38[4] = "Apple80211IOCTLSetWrapper";
    *(_WORD *)&v38[12] = 1024;
    *(_DWORD *)&v38[14] = 5256;
    *(_WORD *)&v38[18] = 2048;
    *(_QWORD *)&v38[20] = v25 / 0x3B9ACA00;
    *(_WORD *)&v38[28] = 2048;
    *(_QWORD *)&v38[30] = v25 % 0x3B9ACA00 / 0x3E8;
    v39 = 2082;
    v40 = v6;
    v41 = 1024;
    v42 = v5;
    v43 = 2082;
    v44 = v26;
    v32 = MEMORY[0x24BDACB70];
    v33 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] WiFi is in the middle of recovery, ignore command, type %d/'%{public}s'\n";
    v34 = v38;
    v35 = 64;
LABEL_81:
    _os_log_impl(&dword_20647D000, v32, OS_LOG_TYPE_DEFAULT, v33, v34, v35);
    return v20;
  }
  pthread_self();
  v22 = IOConnectCallStructMethod(*(_DWORD *)(v3 + 1804), 0, buf, 0x3C30uLL, v19, &outputStructCnt);
  if (!(_DWORD)v22)
  {
    if (!outputStructCnt || outputStructCnt == *(_DWORD *)(v2 + 24))
      return 0;
    v20 = 0;
    *(_DWORD *)(v2 + 24) = outputStructCnt;
    return v20;
  }
  v20 = v22;
  *__error() = v22;
  v23 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    if ((int)v5 > 556)
    {
      v24 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v5 == -1)
    {
      v24 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v5 & 0x80000000) != 0 || (v24 = (const char *)gAppleIoucIndexToString[v5]) == 0)
    {
      v24 = "unknown Apple80211_IOC_";
    }
    v36 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)v38 = 136448514;
    *(_QWORD *)&v38[4] = "Apple80211IOCTLSetWrapper";
    *(_WORD *)&v38[12] = 1024;
    *(_DWORD *)&v38[14] = 5274;
    *(_WORD *)&v38[18] = 2048;
    *(_QWORD *)&v38[20] = v23 / 0x3B9ACA00;
    *(_WORD *)&v38[28] = 2048;
    *(_QWORD *)&v38[30] = v23 % 0x3B9ACA00 / 0x3E8;
    v39 = 2082;
    v40 = v6;
    v41 = 1024;
    v42 = v5;
    v43 = 2082;
    v44 = v24;
    v45 = 1024;
    v46 = v36;
    v47 = 1024;
    v48 = v20;
    v49 = 1024;
    v50 = v20;
    v32 = MEMORY[0x24BDACB70];
    v33 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d/0x%08x\n";
    v34 = v38;
    v35 = 82;
    goto LABEL_81;
  }
  return v20;
}

CFMutableArrayRef _getLQMSummary()
{
  __CFDictionary *v0;
  __CFDictionary *v1;
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFMutableArrayRef result;
  __CFArray *v30;
  uint64_t i;
  CFStringRef v32;
  CFStringRef v33;
  uint64_t j;
  CFStringRef v35;
  CFStringRef v36;
  char valuePtr;
  _BYTE v38[7];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[674];

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v3 = v2;
  v57[673] = *MEMORY[0x24BDAC8D0];
  bzero(&valuePtr, 0x15A0uLL);
  *(_DWORD *)(v3 + 24) = 5536;
  *(_QWORD *)(v3 + 32) = &valuePtr;
  if (Apple80211IOCTLGetWrapper())
    return (CFMutableArrayRef)*__error();
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, &valuePtr);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_CCA"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v4, kCFNumberSInt8Type, v38);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RSSI"), v6);
  CFRelease(v6);
  v7 = CFNumberCreate(v4, kCFNumberSInt16Type, &v38[1]);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_SNR"), v7);
  CFRelease(v7);
  v8 = CFNumberCreate(v4, kCFNumberSInt64Type, &v40);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_TX_RETRIES"), v8);
  CFRelease(v8);
  v9 = CFNumberCreate(v4, kCFNumberSInt64Type, &v42);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_TX_FRAMES"), v9);
  CFRelease(v9);
  v10 = CFNumberCreate(v4, kCFNumberSInt64Type, &v41);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_TX_FAILS"), v10);
  CFRelease(v10);
  v11 = CFNumberCreate(v4, kCFNumberSInt64Type, &v43);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_FCS"), v11);
  CFRelease(v11);
  v12 = CFNumberCreate(v4, kCFNumberSInt64Type, &v44);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_PLCP"), v12);
  CFRelease(v12);
  v13 = CFNumberCreate(v4, kCFNumberSInt64Type, &v45);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_CRS"), v13);
  CFRelease(v13);
  v14 = CFNumberCreate(v4, kCFNumberSInt64Type, &v46);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_DUP"), v14);
  CFRelease(v14);
  v15 = CFNumberCreate(v4, kCFNumberSInt64Type, &v47);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_AMPDU_DUP"), v15);
  CFRelease(v15);
  v16 = CFNumberCreate(v4, kCFNumberSInt64Type, &v48);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_UCAST_REPLAY"), v16);
  CFRelease(v16);
  v17 = CFNumberCreate(v4, kCFNumberSInt64Type, &v49);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_UCAST_DECRYPT"), v17);
  CFRelease(v17);
  v18 = CFNumberCreate(v4, kCFNumberSInt64Type, &v50);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_MCAST_REPLAY"), v18);
  CFRelease(v18);
  v19 = CFNumberCreate(v4, kCFNumberSInt64Type, &v51);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_MCAST_DECRYPT"), v19);
  CFRelease(v19);
  v20 = CFNumberCreate(v4, kCFNumberSInt64Type, &v52);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_RETRIES"), v20);
  CFRelease(v20);
  v21 = CFNumberCreate(v4, kCFNumberSInt64Type, &v53);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_GOOD_PLCPS"), v21);
  CFRelease(v21);
  v22 = CFNumberCreate(v4, kCFNumberSInt64Type, &v54);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_UCAST_FRAMES"), v22);
  CFRelease(v22);
  v23 = CFNumberCreate(v4, kCFNumberSInt64Type, &v55);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_MCAST_FRAMES"), v23);
  CFRelease(v23);
  v24 = CFNumberCreate(v4, kCFNumberSInt64Type, &v56);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_TOTAL_FRAMES"), v24);
  CFRelease(v24);
  v25 = CFNumberCreate(v4, kCFNumberSInt64Type, v57);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_RTS_UCAST"), v25);
  CFRelease(v25);
  v26 = CFNumberCreate(v4, kCFNumberSInt64Type, v57);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_RX_RTS_UCAST"), v26);
  CFRelease(v26);
  v27 = CFNumberCreate(v4, kCFNumberIntType, &v38[3]);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_DATA_STALL_SCORE"), v27);
  CFRelease(v27);
  v28 = CFNumberCreate(v4, kCFNumberIntType, &v39);
  CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_NET_SCORE"), v28);
  CFRelease(v28);
  result = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
  if (result)
  {
    v30 = result;
    for (i = 0; i != 512; i += 32)
    {
      if (LOBYTE(v57[i + 1]))
      {
        v32 = CFStringCreateWithCString(v4, (const char *)&v57[i + 1], 0x8000100u);
        if (v32)
        {
          v33 = v32;
          CFArrayAppendValue(v30, v32);
          CFRelease(v33);
        }
      }
    }
    for (j = 0; j != 160; j += 32)
    {
      if (LOBYTE(v57[j + 513]))
      {
        v35 = CFStringCreateWithCString(v4, (const char *)&v57[j + 513], 0x8000100u);
        if (v35)
        {
          v36 = v35;
          CFArrayAppendValue(v30, v35);
          CFRelease(v36);
        }
      }
    }
    CFDictionarySetValue(v1, CFSTR("LQM_SUMMARY_DBG_LOG_LIST"), v30);
    CFRelease(v30);
    return 0;
  }
  return result;
}

uint64_t Apple80211IOCTLGetWrapper()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __uint64_t v7;
  const char *v8;
  uint64_t v9;
  __uint64_t v10;
  unint64_t v11;
  __uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  size_t v16;
  void *v17;
  BOOL v18;
  int v19;
  size_t v20;
  mach_port_t v21;
  void *v22;
  uint64_t v23;
  __uint64_t v24;
  const char *v25;
  __uint64_t v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  uint8_t *v30;
  uint32_t v31;
  int v32;
  __uint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  int v37;
  size_t outputStructCnt;
  _BYTE v39[38];
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  _BYTE v55[24];
  __int16 v56;
  _BYTE v57[14];
  __int16 v58;
  _BYTE v59[20];
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v64 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 107))
    return _Apple80211AWDLCompatibilityCall(v0, v1, 0);
  if (!*(_BYTE *)(v0 + 1801))
  {
    memset(v39, 0, 32);
    v9 = v0 + 4;
    __strlcpy_chk();
    v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    ioctl(*(_DWORD *)v3, 0xC0206911uLL, v39);
    v11 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v10;
    if (v11 > 0x3B9AC9FF && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448258;
      v53 = "_logTimeIfThresholdExceeded";
      v54 = 2082;
      *(_QWORD *)v55 = v39;
      *(_WORD *)&v55[8] = 2080;
      *(_QWORD *)&v55[10] = " 'SIOCGIFFLAGS' ";
      *(_WORD *)&v55[18] = 1024;
      v56 = 1024;
      *(_DWORD *)&v55[20] = -1071617775;
      *(_DWORD *)v57 = -1071617775;
      *(_WORD *)&v57[4] = 2048;
      *(_QWORD *)&v57[6] = v11 / 0x3B9ACA00;
      v58 = 2048;
      *(_QWORD *)v59 = v11 % 0x3B9ACA00 / 0x3E8;
      *(_WORD *)&v59[8] = 2048;
      *(_QWORD *)&v59[10] = 1;
      *(_WORD *)&v59[18] = 2048;
      v60 = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
    }
    __strlcpy_chk();
    if ((*(_BYTE *)(v3 + 1984) & 1) != 0)
    {
      v12 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned int *)(v2 + 16);
        if ((int)v13 > 556)
        {
          v14 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v13 == -1)
        {
          v14 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v13 & 0x80000000) != 0 || (v14 = (const char *)gAppleIoucIndexToString[v13]) == 0)
        {
          v14 = "unknown Apple80211_IOC_";
        }
        v32 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)buf = 136448258;
        v53 = "Apple80211IOCTLGetWrapper";
        v54 = 1024;
        *(_DWORD *)v55 = 6557;
        *(_WORD *)&v55[4] = 2048;
        *(_QWORD *)&v55[6] = v12 / 0x3B9ACA00;
        *(_WORD *)&v55[14] = 2048;
        *(_QWORD *)&v55[16] = v12 % 0x3B9ACA00 / 0x3E8;
        v56 = 2082;
        *(_QWORD *)v57 = v3 + 4;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)&v57[10] = *(__int16 *)&v39[16];
        v58 = 1024;
        *(_DWORD *)v59 = v13;
        *(_WORD *)&v59[4] = 2082;
        *(_QWORD *)&v59[6] = v14;
        *(_WORD *)&v59[14] = 1024;
        *(_DWORD *)&v59[16] = v32;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d]\n", buf, 0x4Cu);
      }
    }
    v23 = ioctl(*(_DWORD *)v3, 0xC02869C9uLL, v2);
    if (!(_DWORD)v23)
      return v23;
    v33 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return v23;
    v34 = *(unsigned int *)(v2 + 16);
    if ((int)v34 > 556)
    {
      v35 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v34 == -1)
    {
      v35 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v34 & 0x80000000) != 0 || (v35 = (const char *)gAppleIoucIndexToString[v34]) == 0)
    {
      v35 = "unknown Apple80211_IOC_";
    }
    v36 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)buf = 136448770;
    v53 = "Apple80211IOCTLGetWrapper";
    v54 = 1024;
    *(_DWORD *)v55 = 6563;
    *(_WORD *)&v55[4] = 2048;
    *(_QWORD *)&v55[6] = v33 / 0x3B9ACA00;
    *(_WORD *)&v55[14] = 2048;
    *(_QWORD *)&v55[16] = v33 % 0x3B9ACA00 / 0x3E8;
    v56 = 2082;
    *(_QWORD *)v57 = v9;
    *(_WORD *)&v57[8] = 1024;
    *(_DWORD *)&v57[10] = *(__int16 *)&v39[16];
    v58 = 1024;
    *(_DWORD *)v59 = v34;
    *(_WORD *)&v59[4] = 2082;
    *(_QWORD *)&v59[6] = v35;
    *(_WORD *)&v59[14] = 1024;
    *(_DWORD *)&v59[16] = v36;
    LOWORD(v60) = 1024;
    *(_DWORD *)((char *)&v60 + 2) = v23;
    HIWORD(v60) = 1024;
    v61 = v23;
    v28 = MEMORY[0x24BDACB70];
    v29 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s']/0x%08x IOCTL type %d/'%{public}s', len[%d] return %d/0x%08x\n";
    v30 = buf;
    v31 = 88;
    goto LABEL_67;
  }
  v5 = *(unsigned int *)(v1 + 16);
  bzero(buf, 0x3C30uLL);
  *(_DWORD *)buf = -1071093303;
  v6 = v3 + 4;
  __strlcpy_chk();
  v62 = v5;
  v63 = *(_DWORD *)(v2 + 20);
  if ((*(_BYTE *)(v3 + 1984) & 1) != 0)
  {
    v7 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      if ((int)v5 > 556)
      {
        v8 = "Error Invalid ioctl";
      }
      else if ((_DWORD)v5 == -1)
      {
        v8 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v5 & 0x80000000) != 0 || (v8 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        v8 = "unknown Apple80211_IOC_";
      }
      v15 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)v39 = 136448002;
      *(_QWORD *)&v39[4] = "Apple80211IOCTLGetWrapper";
      *(_WORD *)&v39[12] = 1024;
      *(_DWORD *)&v39[14] = 6502;
      *(_WORD *)&v39[18] = 2048;
      *(_QWORD *)&v39[20] = v7 / 0x3B9ACA00;
      *(_WORD *)&v39[28] = 2048;
      *(_QWORD *)&v39[30] = v7 % 0x3B9ACA00 / 0x3E8;
      v40 = 2082;
      v41 = v3 + 4;
      v42 = 1024;
      v43 = v5;
      v44 = 2082;
      v45 = v8;
      v46 = 1024;
      v47 = v15;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d]\n", v39, 0x46u);
    }
  }
  v16 = *(unsigned int *)(v2 + 24);
  if ((v16 - 1) >> 10 >= 0xF)
  {
    v17 = *(void **)(v2 + 32);
  }
  else
  {
    LODWORD(v53) = *(_DWORD *)(v2 + 24);
    v17 = *(void **)(v2 + 32);
    __memcpy_chk();
  }
  if ((_DWORD)v16)
    v18 = v17 == 0;
  else
    v18 = 1;
  v19 = v18;
  v20 = 4;
  if (!v18)
    v20 = v16;
  outputStructCnt = v20;
  v21 = *(_DWORD *)(v3 + 1804);
  if (v21)
  {
    if (v19)
      v22 = (void *)(v2 + 20);
    else
      v22 = v17;
    v23 = IOConnectCallStructMethod(v21, 0, buf, 0x3C30uLL, v22, &outputStructCnt);
    if ((_DWORD)v23)
    {
      *__error() = v23;
      v24 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        if ((int)v5 > 556)
        {
          v25 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v5 == -1)
        {
          v25 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v5 & 0x80000000) != 0 || (v25 = (const char *)gAppleIoucIndexToString[v5]) == 0)
        {
          v25 = "unknown Apple80211_IOC_";
        }
        v37 = *(_DWORD *)(v2 + 24);
        *(_DWORD *)v39 = 136448514;
        *(_QWORD *)&v39[4] = "Apple80211IOCTLGetWrapper";
        *(_WORD *)&v39[12] = 1024;
        *(_DWORD *)&v39[14] = 6535;
        *(_WORD *)&v39[18] = 2048;
        *(_QWORD *)&v39[20] = v24 / 0x3B9ACA00;
        *(_WORD *)&v39[28] = 2048;
        *(_QWORD *)&v39[30] = v24 % 0x3B9ACA00 / 0x3E8;
        v40 = 2082;
        v41 = v6;
        v42 = 1024;
        v43 = v5;
        v44 = 2082;
        v45 = v25;
        v46 = 1024;
        v47 = v37;
        v48 = 1024;
        v49 = v23;
        v50 = 1024;
        v51 = v23;
        _os_log_debug_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOUC type %d/'%{public}s', len[%d] return %d/0x%08x\n", v39, 0x52u);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) = outputStructCnt;
    }
    return v23;
  }
  v23 = 3758097088;
  v26 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    if ((int)v5 > 556)
    {
      v27 = "Error Invalid ioctl";
    }
    else if ((_DWORD)v5 == -1)
    {
      v27 = "APPLE80211_IOC_CARD_SPECIFIC";
    }
    else if ((v5 & 0x80000000) != 0 || (v27 = (const char *)gAppleIoucIndexToString[v5]) == 0)
    {
      v27 = "unknown Apple80211_IOC_";
    }
    *(_DWORD *)v39 = 136447746;
    *(_QWORD *)&v39[4] = "Apple80211IOCTLGetWrapper";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 6520;
    *(_WORD *)&v39[18] = 2048;
    *(_QWORD *)&v39[20] = v26 / 0x3B9ACA00;
    *(_WORD *)&v39[28] = 2048;
    *(_QWORD *)&v39[30] = v26 % 0x3B9ACA00 / 0x3E8;
    v40 = 2082;
    v41 = v6;
    v42 = 1024;
    v43 = v5;
    v44 = 2082;
    v45 = v27;
    v28 = MEMORY[0x24BDACB70];
    v29 = "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] WiFi is in the middle of recovery, ignore command, type %d/'%{public}s'\n";
    v30 = v39;
    v31 = 64;
LABEL_67:
    _os_log_impl(&dword_20647D000, v28, OS_LOG_TYPE_DEFAULT, v29, v30, v31);
  }
  return v23;
}

void _Apple80211AddOriginatingRNRChannelListToScanResults(const __CFArray *a1, const __CFArray *a2, unint64_t a3, unint64_t a4, unint64_t a5, const __CFArray *a6, const __CFArray *a7)
{
  const __CFAllocator *v8;
  const void *v9;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v11;
  const __CFNumber *Value;
  const __CFNumber *v13;
  int v14;
  const void *v15;
  int v16;
  const void *v17;
  const __CFData *v18;
  const void *v19;
  _BOOL4 v20;
  const __CFDictionary *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFIndex v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const __CFData *v30;
  const __CFDictionary *v31;
  const __CFArray *v32;
  const __CFArray *v33;
  CFIndex v34;
  const __CFDictionary *v35;
  const __CFArray *v36;
  uint64_t v37;
  const __CFDictionary *v38;
  const __CFDictionary *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const __CFData *v43;
  int v44;
  CFIndex v45;
  CFIndex Count;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  __CFDictionary *v52;
  __CFDictionary *v53;
  const __CFData *v54;
  __CFArray *v55;
  const __CFArray *v56;
  const __CFDictionary *v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFIndex v60;
  CFIndex v61;
  unint64_t v62;
  const __CFNumber *v63;
  unint64_t v64;
  int v65;
  const void *v66;
  const void *v67;
  CFNumberRef v68;
  CFNumberRef v69;
  const void *v70;
  const void *v71;
  CFNumberRef v72;
  CFIndex v73;
  int v74;
  const __CFArray *v75;
  unint64_t v76;
  NSObject *v77;
  const __CFNumber *v78;
  const __CFNumber *v79;
  const __CFDictionary *v80;
  const void *v81;
  const void *v82;
  __CFArray *v87;
  int v90;
  __CFArray *Mutable;
  const __CFArray *v92;
  __CFArray *theArray;
  const __CFAllocator *allocator;
  const __CFArray *v95;
  int v96;
  CFIndex v97;
  const __CFDictionary *theDict;
  CFMutableArrayRef v99;
  int v100;
  int valuePtr;
  CFIndex v102;
  CFIndex v103;
  _BYTE buf[12];
  __int16 v105;
  const void *v106;
  __int16 v107;
  const void *v108;
  uint64_t v109;
  CFRange v110;
  CFRange v111;
  CFRange v112;
  CFRange v113;

  v109 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (theArray)
    {
      Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v87 = CFArrayCreateMutable(v8, 0, MEMORY[0x24BDBD690]);
        if (v87)
        {
          v102 = 0;
          v92 = a2;
          if (CFArrayGetCount(a2) >= 1)
          {
            v96 = 1;
            v9 = (const void *)*MEMORY[0x24BDBD270];
            allocator = v8;
            do
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v102);
              if (!ValueAtIndex)
                goto LABEL_139;
              v11 = ValueAtIndex;
              valuePtr = 0;
              Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("CHANNEL_FLAGS"));
              if (Value)
                CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
              v100 = 0;
              theDict = v11;
              v13 = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("CHANNEL"));
              if (v13)
                CFNumberGetValue(v13, kCFNumberSInt32Type, &v100);
              v14 = v100;
              if (!(a3 | a4 | a5))
                goto LABEL_33;
              if (a3)
              {
                *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
                v15 = CFDictionaryGetValue(v11, CFSTR("SHORT_SSID"));
                *(_QWORD *)buf = v15;
                if (v15)
                {
                  v16 = CFEqual((CFTypeRef)a3, v15);
                }
                else
                {
                  v18 = (const __CFData *)CFDictionaryGetValue(v11, CFSTR("SSID"));
                  if (!v18)
                    goto LABEL_22;
                  Apple80211CalculateShortSSIDCopy(v18, (CFTypeRef *)buf);
                  if (!*(_QWORD *)buf)
                    goto LABEL_22;
                  v16 = CFEqual((CFTypeRef)a3, *(CFTypeRef *)buf);
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else
              {
                if (!a4 || (v17 = CFDictionaryGetValue(v11, CFSTR("SSID_STR"))) == 0)
                {
LABEL_22:
                  v16 = 0;
                  goto LABEL_23;
                }
                v16 = CFEqual((CFTypeRef)a4, v17) != 0;
              }
LABEL_23:
              if (a5)
              {
                v19 = CFDictionaryGetValue(theDict, CFSTR("BSSID"));
                if (!(a3 | a4))
                {
                  if (!v19 || !CFEqual((CFTypeRef)a5, v19))
                  {
LABEL_128:
                    v68 = CFNumberCreate(v8, kCFNumberCFIndexType, &v102);
                    if (!v68)
                      goto LABEL_149;
                    v69 = v68;
                    CFArrayAppendValue(Mutable, v68);
LABEL_138:
                    CFRelease(v69);
                    goto LABEL_139;
                  }
                  goto LABEL_33;
                }
                if (v19)
                  v20 = CFEqual((CFTypeRef)a5, v19) != 0;
                else
                  v20 = 0;
                v16 &= v20;
              }
              if (!v16)
                goto LABEL_128;
LABEL_33:
              if ((valuePtr & 0x2000) != 0)
              {
                v90 = v14;
                v21 = theDict;
                v22 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ORIG_RNR_CHANNEL_LIST"));
                if (v96)
                  v23 = a1;
                else
                  v23 = theArray;
                if (CFArrayGetCount(v23) >= 1)
                {
                  v24 = 0;
                  v95 = v23;
                  while (1)
                  {
                    v99 = v22;
                    v97 = v24;
                    v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v24);
                    if (!v25)
                      goto LABEL_112;
                    v26 = v25;
                    if (v96 && CFDictionaryGetValueIfPresent(v25, CFSTR("RNR_IE"), 0))
                      CFArrayAppendValue(theArray, v26);
                    *(_QWORD *)buf = 0;
                    v27 = CFDictionaryGetValue(v21, CFSTR("BSSID"));
                    if (v27)
                    {
                      v28 = v27;
                      v29 = CFDictionaryGetValue(v21, CFSTR("SHORT_SSID"));
                      *(_QWORD *)buf = v29;
                      if (v29)
                      {
                        CFRetain(v29);
                      }
                      else
                      {
                        v30 = (const __CFData *)CFDictionaryGetValue(v21, CFSTR("SSID"));
                        if (!v30)
                          goto LABEL_112;
                        Apple80211CalculateShortSSIDCopy(v30, (CFTypeRef *)buf);
                        if (!*(_QWORD *)buf)
                          goto LABEL_112;
                      }
                      v31 = (const __CFDictionary *)CFDictionaryGetValue(v26, CFSTR("RNR_IE"));
                      if (v31)
                      {
                        v32 = (const __CFArray *)CFDictionaryGetValue(v31, CFSTR("NEIGHBOR_AP_INFO_LIST"));
                        if (v32)
                        {
                          v33 = v32;
                          if (CFArrayGetCount(v32) >= 1)
                          {
                            v34 = 0;
                            while (1)
                            {
                              v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, v34);
                              if (v35)
                              {
                                v36 = (const __CFArray *)CFDictionaryGetValue(v35, CFSTR("TBTT_INFO_SET"));
                                if (CFArrayGetCount(v36) >= 1)
                                  break;
                              }
                              LODWORD(v39) = 0;
LABEL_72:
                              Count = CFArrayGetCount(v33);
                              if (!(_DWORD)v39 && Count > ++v34)
                                continue;
                              goto LABEL_76;
                            }
                            v37 = 1;
                            while (2)
                            {
                              v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v36, v37 - 1);
                              v39 = v38;
                              if (v38)
                              {
                                v40 = CFDictionaryGetValue(v38, CFSTR("BSSID"));
                                if (!v40
                                  || !CFEqual(v40, v28)
                                  || CFDictionaryGetValue(v39, CFSTR("COLOCATED_AP")) != v9)
                                {
                                  goto LABEL_66;
                                }
                                v103 = 0xAAAAAAAAAAAAAAAALL;
                                v41 = CFDictionaryGetValue(v39, CFSTR("SHORT_SSID"));
                                v103 = (CFIndex)v41;
                                if (v41)
                                {
                                  if (CFEqual(v41, *(CFTypeRef *)buf))
                                    goto LABEL_61;
LABEL_66:
                                  LODWORD(v39) = 0;
                                }
                                else
                                {
                                  v42 = CFDictionaryGetValue(v39, CFSTR("SAME_SSID"));
                                  v43 = (const __CFData *)CFDictionaryGetValue(v26, CFSTR("SSID"));
                                  if (v42 != v9)
                                    goto LABEL_66;
                                  if (!v43)
                                    goto LABEL_66;
                                  Apple80211CalculateShortSSIDCopy(v43, (CFTypeRef *)&v103);
                                  if (!v103)
                                    goto LABEL_66;
                                  v44 = CFEqual((CFTypeRef)v103, *(CFTypeRef *)buf);
                                  CFRelease((CFTypeRef)v103);
                                  if (!v44)
                                    goto LABEL_66;
LABEL_61:
                                  LODWORD(v39) = 1;
                                }
                              }
                              v45 = CFArrayGetCount(v36);
                              if ((_DWORD)v39)
                                goto LABEL_72;
                              if (v45 <= v37++)
                                goto LABEL_72;
                              continue;
                            }
                          }
                        }
                      }
                    }
                    LODWORD(v39) = 0;
LABEL_76:
                    if (*(_QWORD *)buf)
                      CFRelease(*(CFTypeRef *)buf);
                    v21 = theDict;
                    if (!(_DWORD)v39)
                    {
                      v8 = allocator;
LABEL_112:
                      v22 = v99;
                      goto LABEL_113;
                    }
                    v8 = allocator;
                    if (!v99)
                    {
                      v99 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                      if (!v99)
                        goto LABEL_149;
                      CFDictionarySetValue(theDict, CFSTR("ORIG_RNR_CHANNEL_LIST"), v99);
                      CFRelease(v99);
                    }
                    v48 = CFDictionaryGetValue(v26, CFSTR("CHANNEL"));
                    if (!v48 || (v49 = v48, (v50 = CFDictionaryGetValue(v26, CFSTR("CHANNEL_FLAGS"))) == 0))
                    {
                      v21 = theDict;
                      goto LABEL_112;
                    }
                    v51 = v50;
                    v52 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                    if (!v52)
                      goto LABEL_149;
                    v53 = v52;
                    CFDictionarySetValue(v52, CFSTR("CHANNEL"), v49);
                    CFDictionarySetValue(v53, CFSTR("CHANNEL_FLAGS"), v51);
                    v54 = (const __CFData *)CFDictionaryGetValue(v26, CFSTR("SSID"));
                    if (v54)
                    {
                      if (CFDataGetLength(v54))
                        break;
                    }
                    v22 = v99;
                    if (!_containsNonHiddenRNRChannels(v99))
                    {
                      CFDictionarySetValue(v53, CFSTR("ORIG_RNR_CHANNEL_FROM_HIDDEN_BSS"), v9);
LABEL_108:
                      v22 = v99;
                      v110.length = CFArrayGetCount(v99);
                      v110.location = 0;
                      if (!CFArrayContainsValue(v99, v110, v53))
                        CFArrayAppendValue(v99, v53);
                    }
                    CFRelease(v53);
                    v21 = theDict;
LABEL_113:
                    v23 = v95;
                    v24 = v97 + 1;
                    if (v97 + 1 >= CFArrayGetCount(v95))
                      goto LABEL_116;
                  }
                  if (CFArrayGetCount(v99))
                  {
                    *(_QWORD *)buf = 0;
                    if (CFArrayGetCount(v99) >= 1)
                    {
                      v55 = 0;
                      v56 = v99;
                      do
                      {
                        v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(v56, *(CFIndex *)buf);
                        if (v57 && CFDictionaryGetValue(v57, CFSTR("ORIG_RNR_CHANNEL_FROM_HIDDEN_BSS")) == v9)
                        {
                          if (!v55)
                          {
                            v55 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                            if (!v55)
                              goto LABEL_104;
                          }
                          v58 = CFNumberCreate(allocator, kCFNumberCFIndexType, buf);
                          if (!v58)
                            goto LABEL_104;
                          v59 = v58;
                          CFArrayAppendValue(v55, v58);
                          CFRelease(v59);
                        }
                        v60 = ++*(_QWORD *)buf;
                        v56 = v99;
                      }
                      while (v60 < CFArrayGetCount(v99));
                      if (!v55)
                        goto LABEL_108;
                      v61 = CFArrayGetCount(v55);
                      if (v61 < 1)
                        goto LABEL_105;
                      v62 = v61 + 1;
                      do
                      {
                        v63 = (const __CFNumber *)CFArrayGetValueAtIndex(v55, v62 - 2);
                        if (v63)
                        {
                          *(_QWORD *)buf = -1;
                          CFNumberGetValue(v63, kCFNumberCFIndexType, buf);
                          if (*(_QWORD *)buf != -1)
                            CFArrayRemoveValueAtIndex(v99, *(CFIndex *)buf);
                        }
                        --v62;
                      }
                      while (v62 > 1);
LABEL_104:
                      if (!v55)
                        goto LABEL_108;
LABEL_105:
                      CFRelease(v55);
                    }
                  }
                  goto LABEL_108;
                }
LABEL_116:
                if (!(a3 | a4 | a5) && !_containsNonHiddenRNRChannels(v22))
                {
                  if (!_os_feature_enabled_impl())
                    goto LABEL_124;
                  v64 = 0;
                  do
                  {
                    v65 = k6GHzPSC[v64];
                    if (v64 > 0xD)
                      break;
                    ++v64;
                  }
                  while (v65 != v90);
                  if (v65 != v90)
                  {
LABEL_124:
                    if (a6)
                    {
                      v66 = CFDictionaryGetValue(v21, CFSTR("SSID_STR"));
                      if (v66)
                      {
                        v67 = v66;
                        v111.length = CFArrayGetCount(a6);
                        v111.location = 0;
                        LODWORD(v66) = CFArrayContainsValue(a6, v111, v67);
                      }
                      v21 = theDict;
                    }
                    else
                    {
                      LODWORD(v66) = 0;
                    }
                    if (a7 && !(_DWORD)v66)
                    {
                      v70 = CFDictionaryGetValue(v21, CFSTR("BSSID"));
                      if (!v70)
                        goto LABEL_136;
                      v71 = v70;
                      v112.length = CFArrayGetCount(a7);
                      v112.location = 0;
                      LODWORD(v66) = CFArrayContainsValue(a7, v112, v71);
                    }
                    if (!(_DWORD)v66)
                    {
LABEL_136:
                      v72 = CFNumberCreate(v8, kCFNumberCFIndexType, &v102);
                      if (!v72)
                        goto LABEL_149;
                      v69 = v72;
                      CFArrayAppendValue(Mutable, v72);
                      CFArrayAppendValue(v87, v69);
                      v96 = 0;
                      goto LABEL_138;
                    }
                  }
                }
                v96 = 0;
              }
LABEL_139:
              v73 = ++v102;
              a2 = v92;
            }
            while (v73 < CFArrayGetCount(v92));
          }
          v74 = CFArrayGetCount(Mutable);
          if (v74 >= 1)
          {
            v75 = a2;
            v76 = v74 + 1;
            v77 = MEMORY[0x24BDACB70];
            do
            {
              v78 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, (v76 - 2));
              if (v78)
              {
                v79 = v78;
                v103 = -1;
                CFNumberGetValue(v78, kCFNumberCFIndexType, &v103);
                if (v103 != -1)
                {
                  v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(v75, v103);
                  v113.length = CFArrayGetCount(v87);
                  v113.location = 0;
                  if (CFArrayContainsValue(v87, v113, v79))
                  {
                    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                    {
                      v81 = CFDictionaryGetValue(v80, CFSTR("SSID_STR"));
                      v82 = CFDictionaryGetValue(v80, CFSTR("BSSID"));
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "_Apple80211AddOriginatingRNRChannelListToScanResults";
                      v105 = 2112;
                      v106 = v81;
                      v107 = 2112;
                      v108 = v82;
                      _os_log_error_impl(&dword_20647D000, v77, OS_LOG_TYPE_ERROR, "%s: Excluding non-PSC 6GHz scan result (%@/%@)", buf, 0x20u);
                    }
                  }
                  v75 = v92;
                  CFArrayRemoveValueAtIndex(v92, v103);
                }
              }
              --v76;
            }
            while (v76 > 1);
          }
LABEL_149:
          CFRelease(theArray);
          CFRelease(Mutable);
          CFRelease(v87);
        }
        else
        {
          CFRelease(theArray);
          CFRelease(Mutable);
        }
      }
      else
      {
        CFRelease(theArray);
      }
    }
  }
}

uint64_t Apple80211CalculateShortSSIDCopy(const __CFData *a1, CFTypeRef *a2)
{
  CFNumberRef v4;
  CFNumberRef v5;
  int valuePtr;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294963396;
  v8 = 0;
  CFDataGetBytePtr(a1);
  CFDataGetLength(a1);
  if (CNCRC())
    return 4294963394;
  valuePtr = v8;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  if (!v4)
    return 4294963395;
  v5 = v4;
  if (a2)
    *a2 = CFRetain(v4);
  CFRelease(v5);
  return 0;
}

void _parseIEs(unsigned __int8 *a1, unsigned int a2, __CFDictionary *a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  CFDataRef v48;
  CFDataRef v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  int v69;
  int v70;
  __int16 v71;
  const void *Value;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v8 = Apple80211ParseAppleIE(a1, a2, a3);
    if (v8)
    {
      v9 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v69 = 67109378;
        v70 = v9;
        v71 = 2112;
        Value = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Apple IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v10 = Apple80211ParseAppleiOSIE(a1, a2, a3);
    if (v10)
    {
      v11 = v10;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v50 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v11;
        v71 = 2112;
        Value = v50;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Apple iOS IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v12 = Apple80211ParseAppleDeviceIE(a1, a2, a3);
    if (v12)
    {
      v13 = v12;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v51 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v13;
        v71 = 2112;
        Value = v51;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Apple device IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v14 = Apple80211Parse80211dIE((uint64_t)a1, a2, a3);
    if (v14)
    {
      v15 = v14;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v52 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v15;
        v71 = 2112;
        Value = v52;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Country IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v16 = Apple80211ParseSES_IE(a1, a2, a3);
    if (v16)
    {
      v17 = v16;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v53 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v17;
        v71 = 2112;
        Value = v53;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse SES IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v18 = Apple80211ParseHT_Caps((uint64_t)a1, a2, a3);
    if (v18)
    {
      v19 = v18;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v54 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v19;
        v71 = 2112;
        Value = v54;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse HT Caps IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v20 = Apple80211ParseHT_IE((uint64_t)a1, a2, a3);
    if (v20)
    {
      v21 = v20;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v55 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v21;
        v71 = 2112;
        Value = v55;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse HT IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v22 = Apple80211ParseVHT_Caps(a1, a2, a3);
    if (v22)
    {
      v23 = v22;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v56 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v23;
        v71 = 2112;
        Value = v56;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse VHT Caps IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v24 = Apple80211ParseVHT_IE(a1, a2, a3);
    if (v24)
    {
      v25 = v24;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v57 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v25;
        v71 = 2112;
        Value = v57;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse VHT IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v26 = Apple80211ParseInterworkingIE(a1, a2, a3);
    if (v26)
    {
      v27 = v26;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v58 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v27;
        v71 = 2112;
        Value = v58;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Interworking IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v28 = Apple80211ParseHS20IE(a1, a2, a3);
    if (v28)
    {
      v29 = v28;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v59 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v29;
        v71 = 2112;
        Value = v59;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse HS20 IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v30 = Apple80211ParseQBSSLoadIE(a1, a2, a3);
    if (v30)
    {
      v31 = v30;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v60 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v31;
        v71 = 2112;
        Value = v60;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse QBSS Load IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v32 = Apple80211ParseMobilityDomainIE((uint64_t)a1, a2, a3);
    if (v32)
    {
      v33 = v32;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v61 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v33;
        v71 = 2112;
        Value = v61;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Mobility Domain IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v34 = Apple80211ParseExtCapsIE((uint64_t)a1, a2, a3);
    if (v34)
    {
      v35 = v34;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v62 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v35;
        v71 = 2112;
        Value = v62;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Extended Caps IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v36 = Apple80211ParseCyclopsIE(a1, a2, a3);
    if (v36)
    {
      v37 = v36;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v63 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v37;
        v71 = 2112;
        Value = v63;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse Cyclops IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v38 = Apple80211ParseHE_IEs(a1, a2, a3);
    if (v38)
    {
      v39 = v38;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v64 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v39;
        v71 = 2112;
        Value = v64;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse HE IEs (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    if ((*(_BYTE *)(a4 + 11) & 0x40) != 0)
    {
      v40 = Apple80211ParseRNRIE(a1, a2, a3);
      if (v40)
      {
        v41 = v40;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v66 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
          v69 = 67109378;
          v70 = v41;
          v71 = 2112;
          Value = v66;
          _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse RNR IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
        }
      }
      v42 = Apple80211ParseMBOOCEIE(a1, a2, a3);
      if (v42)
      {
        v43 = v42;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v67 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
          v69 = 67109378;
          v70 = v43;
          v71 = 2112;
          Value = v67;
          _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse MBO-OCE IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
        }
      }
      v44 = Apple80211ParseHEOperationIE(a1, a2, a3);
      if (v44)
      {
        v45 = v44;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v68 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
          v69 = 67109378;
          v70 = v45;
          v71 = 2112;
          Value = v68;
          _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse HE Op IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
        }
      }
    }
    v46 = Apple80211ParseWPS_IE(a1, a2, a3);
    if (v46)
    {
      v47 = v46;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v65 = CFDictionaryGetValue(a3, CFSTR("BSSID"));
        v69 = 67109378;
        v70 = v47;
        v71 = 2112;
        Value = v65;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to parse WPS IE (err=%d, bssid=%@)", (uint8_t *)&v69, 0x12u);
      }
    }
    v48 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a1, a2);
    if (v48)
    {
      v49 = v48;
      CFDictionarySetValue(a3, CFSTR("IE"), v48);
      CFRelease(v49);
    }
  }
}

uint64_t Apple80211ParseInterworkingIE(unsigned __int8 *a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  int v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  int v23;
  unsigned __int8 *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  CFStringRef v28;
  CFStringRef v29;
  char valuePtr;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (a1 && a3)
  {
    if (!a2)
      return 0;
    v5 = a1;
    while (*v5 != 107 || !v5[1])
    {
      a2 = a2 - v5[1] - 2;
      if (a2 >= 1)
      {
        v6 = &v5[v5[1]];
        v5 = v6 + 2;
        if (v6[3] + 2 <= a2)
          continue;
      }
      return 0;
    }
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
      return 4294963395;
    v9 = Mutable;
    valuePtr = v5[2] & 0xF;
    v10 = CFNumberCreate(v7, kCFNumberSInt8Type, &valuePtr);
    if (!v10)
    {
      v3 = 4294963395;
      goto LABEL_44;
    }
    v11 = v10;
    CFDictionarySetValue(v9, CFSTR("INTERWORKING_ACCESS_NETWORK_TYPE"), v10);
    CFRelease(v11);
    v12 = (const void *)*MEMORY[0x24BDBD270];
    v13 = (const void *)*MEMORY[0x24BDBD268];
    if ((v5[2] & 0x10) != 0)
      v14 = (const void *)*MEMORY[0x24BDBD270];
    else
      v14 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionarySetValue(v9, CFSTR("INTERWORKING_ACCESS_INTERNET"), v14);
    if ((v5[2] & 0x20) != 0)
      v15 = v12;
    else
      v15 = v13;
    CFDictionarySetValue(v9, CFSTR("INTERWORKING_ACCESS_ASRA"), v15);
    if ((v5[2] & 0x40) != 0)
      v16 = v12;
    else
      v16 = v13;
    CFDictionarySetValue(v9, CFSTR("INTERWORKING_ACCESS_ESR"), v16);
    if ((v5[2] & 0x80u) == 0)
      v17 = v13;
    else
      v17 = v12;
    CFDictionarySetValue(v9, CFSTR("INTERWORKING_ACCESS_UESA"), v17);
    v18 = v5[1];
    if (v18 == 9 || v18 == 3)
    {
      v19 = CFNumberCreate(v7, kCFNumberSInt8Type, v5 + 3);
      if (!v19
        || (v20 = v19,
            CFDictionaryAddValue(v9, CFSTR("INTERWORKING_ACCESS_VENTURE_GRP"), v19),
            CFRelease(v20),
            (v21 = CFNumberCreate(v7, kCFNumberSInt8Type, v5 + 4)) == 0))
      {
LABEL_41:
        v3 = 0;
LABEL_44:
        CFRelease(v9);
        return v3;
      }
      v22 = v21;
      CFDictionaryAddValue(v9, CFSTR("INTERWORKING_ACCESS_VENTURE_TYPE"), v21);
      CFRelease(v22);
      v23 = 0;
      v18 = v5[1];
    }
    else
    {
      v23 = 1;
    }
    if (v18 != 9 && v18 != 7)
      goto LABEL_38;
    v24 = v5 + 5;
    v25 = v23 == 0;
    v26 = 5;
    if (!v25)
      v26 = 3;
    v27 = v5[v26];
    if (!v25)
      v24 = v5 + 3;
    v28 = CFStringCreateWithFormat(v7, 0, CFSTR("%02x:%02x:%02x:%02x:%02x:%02x"), v27, v24[1], v24[2], v24[3], v24[4], v24[5]);
    if (v28)
    {
      v29 = v28;
      CFDictionarySetValue(v9, CFSTR("INTERWORKING_ACCESS_HESSID"), v28);
      CFRelease(v29);
LABEL_38:
      CFDictionarySetValue(a3, CFSTR("11U_INTERWORKING_IE"), v9);
      CFRelease(v9);
      return 0;
    }
    goto LABEL_41;
  }
  return v3;
}

uint64_t Apple80211ParseHS20IE(unsigned __int8 *a1, unsigned int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;

  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 2)
    return 0;
  v5 = a1;
  v6 = a1[1];
  v7 = v6 + 2;
  if (v6 + 2 > (unint64_t)a2)
    return 0;
  v8 = a2;
  while (v8 < 7)
  {
    v3 = 0;
    v8 -= v7;
    if (v8 <= 1)
      return v3;
LABEL_17:
    v9 = &v5[v6];
    v5 = v9 + 2;
    v6 = v9[3];
    v7 = v6 + 2;
    if (v8 < v6 + 2)
      return 0;
  }
  if (*v5 != 221 || v5[1] < 5u || v5[2] != 80 || v5[3] != 111 || v5[4] != 154 || v5[5] != 16)
  {
    v8 -= v7;
    if (v8 < 2)
      return 0;
    goto LABEL_17;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v13 = Mutable;
  v14 = CFNumberCreate(v11, kCFNumberSInt8Type, v5 + 6);
  if (v14)
  {
    v15 = v14;
    CFDictionarySetValue(v13, CFSTR("HOTSPOT20_CONFIGURATION"), v14);
    CFRelease(v15);
    CFDictionarySetValue(a3, CFSTR("HOTSPOT20_IE"), v13);
    v3 = 0;
  }
  else
  {
    v3 = 4294963395;
  }
  CFRelease(v13);
  return v3;
}

uint64_t Apple80211ParseWPS_IE(unsigned __int8 *a1, unsigned int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;
  _WORD *v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  char *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  const __CFAllocator *v23;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v25;
  unsigned int v26;
  BOOL v27;
  CFNumberRef v28;
  CFNumberRef v29;
  unsigned int v30;
  unint64_t v31;
  const UInt8 *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  unsigned __int16 *v37;
  int v38;
  const void **v39;
  unsigned int v40;
  unsigned __int16 *v41;
  int v42;
  const void **v43;
  unsigned int v44;
  BOOL v45;
  CFNumberRef v46;
  CFNumberRef v47;
  unsigned int v48;
  int v49;
  CFNumberRef v50;
  CFNumberRef v51;
  unsigned int v52;
  int v53;
  CFNumberRef v54;
  CFNumberRef v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFDataRef v60;
  CFDataRef v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  CFIndex v65;
  CFStringRef v66;
  CFStringRef v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  CFIndex v71;
  CFStringRef v72;
  CFStringRef v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  CFIndex v77;
  CFStringRef v78;
  CFStringRef v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  CFIndex v83;
  CFStringRef v84;
  CFStringRef v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  CFMutableDictionaryRef v90;
  __CFDictionary *v91;
  uint64_t v92;
  CFNumberRef v93;
  CFNumberRef v94;
  CFDataRef v95;
  CFDataRef v96;
  CFNumberRef v97;
  CFNumberRef v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  CFIndex v102;
  CFStringRef v103;
  CFStringRef v104;
  unsigned int v105;
  unint64_t v106;
  _WORD *v107;
  uint64_t v108;
  CFNumberRef v109;
  CFNumberRef v110;
  unsigned int v111;
  unsigned int v112;
  _WORD *v113;
  CFNumberRef v114;
  CFNumberRef v115;
  const __CFAllocator *v116;
  CFMutableDictionaryRef v117;
  unsigned int v118;
  unsigned __int16 *v120;
  CFNumberRef v121;
  unsigned int v122;
  unint64_t v123;
  const UInt8 *v124;
  uint64_t v125;
  int v127;
  const __CFString *v128;
  CFDataRef v129;
  CFDataRef v130;
  unsigned int v131;
  unsigned int v132;
  const UInt8 *v133;
  unsigned int v134;
  BOOL v135;
  CFNumberRef v136;
  CFNumberRef v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  CFIndex v141;
  CFStringRef v142;
  CFStringRef v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  CFIndex v147;
  CFStringRef v148;
  CFStringRef v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t v152;
  CFIndex v153;
  CFStringRef v154;
  CFStringRef v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t v158;
  CFIndex v159;
  CFStringRef v160;
  CFStringRef v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  CFMutableDictionaryRef v166;
  __CFDictionary *v167;
  CFNumberRef v168;
  CFNumberRef v169;
  CFDataRef v170;
  CFDataRef v171;
  CFNumberRef v172;
  CFNumberRef v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  CFIndex v177;
  CFStringRef v178;
  CFStringRef v179;
  unsigned int v180;
  unsigned int v181;
  _WORD *v182;
  CFNumberRef v183;
  CFNumberRef v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  const void *v190;
  const void *v191;
  const void *v192;
  unsigned int v193;
  unsigned int v194;
  const UInt8 *v195;
  unsigned __int16 *v196;
  int v197;
  const void *v198;
  unsigned int v199;
  int v200;
  CFNumberRef v201;
  CFNumberRef v202;
  unsigned int v203;
  CFNumberRef v204;
  CFNumberRef v205;
  unsigned int v206;
  CFDataRef v207;
  CFDataRef v208;
  const __CFString *v209;
  CFDataRef v210;
  CFNumberRef v211;
  const __CFString *v212;
  CFDataRef v213;
  CFDataRef v214;
  unsigned int v215;
  CFNumberRef v216;
  __int16 valuePtr;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (a1 && a3)
  {
    v5 = a2;
    if (a2 >= 3)
    {
      v6 = a1;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        if (*v6 == 221 && v5 >= 6)
        {
          v9 = v6[1];
          v10 = v9 - 4;
          if (v9 >= 4)
          {
            v11 = v9 + 2;
            if (*(_DWORD *)(v6 + 2) == 82989056 && v11 <= v5)
            {
              if (v8)
              {
                v13 = (char *)malloc_type_realloc(v8, (v10 + v7), 0xCBE0C651uLL);
                if (!v13)
                  goto LABEL_231;
                v14 = v13;
                memcpy(&v13[v7], v6 + 6, v10);
                v8 = v14;
                v7 += v10;
              }
              else
              {
                v15 = malloc_type_malloc(v10, 0xA9BF3EC4uLL);
                if (!v15)
                  return 4294963395;
                v8 = v15;
                memcpy(v15, v6 + 6, v10);
                v7 = v10;
              }
            }
          }
        }
        v16 = v6[1];
        v17 = v16 + 2;
        v6 += v16 + 2;
        v18 = v5 - (v16 + 2);
        if (v5 >= v17)
          v5 = v18;
        else
          v5 = 0;
        if (v5 <= 2)
        {
          if (!v8)
            return 0;
          if (v7 < 5)
            goto LABEL_126;
          if (*v8 != 18960)
            goto LABEL_126;
          if (*((_BYTE *)v8 + 4) != 16)
            goto LABEL_126;
          v19 = bswap32((unsigned __int16)v8[1]);
          v20 = v7 - HIWORD(v19) - 4;
          if (v20 < 5)
            goto LABEL_126;
          v21 = (_WORD *)((char *)v8 + HIWORD(v19) + 4);
          v22 = bswap32(*v21) >> 16;
          if (v22 != 4155)
          {
            if (v22 == 4164)
            {
              v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (Mutable)
              {
                v25 = Mutable;
                v26 = v21[1];
                v27 = (unint64_t)__rev16(v26) + 4 > v20 || v26 == 0;
                if (!v27 && *v21 == 17424)
                {
                  v28 = CFNumberCreate(v23, kCFNumberSInt8Type, v21 + 2);
                  if (!v28)
                    goto LABEL_232;
                  v29 = v28;
                  CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_SC_STATE"), v28);
                  CFRelease(v29);
                  v30 = bswap32(v21[1]);
                  v31 = v20 - HIWORD(v30) - 4;
                  if (v31 < 4)
                    goto LABEL_226;
                  v32 = (const UInt8 *)v21 + HIWORD(v30) + 4;
                  v33 = *((unsigned __int16 *)v32 + 1);
                  v34 = __rev16(v33);
                  v35 = v34 + 4;
                  v36 = v34 + 4 > (unint64_t)v31 || v33 == 0;
                  if (!v36 && *(_WORD *)v32 == 22288)
                  {
                    v38 = v32[4];
                    v37 = (unsigned __int16 *)(v32 + 4);
                    if (v38)
                      v39 = (const void **)MEMORY[0x24BDBD270];
                    else
                      v39 = (const void **)MEMORY[0x24BDBD268];
                    CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_AP_SETUP_LOCKED"), *v39);
                    v40 = bswap32(*(v37 - 1));
                    v31 = v31 - HIWORD(v40) - 4;
                    if (v31 >= 4)
                    {
                      v32 = (const UInt8 *)v37 + HIWORD(v40);
                      v33 = *((unsigned __int16 *)v32 + 1);
                      v34 = __rev16(v33);
                      v35 = v34 + 4;
                      goto LABEL_46;
                    }
LABEL_226:
                    v209 = CFSTR("WPS_BEACON_IE");
LABEL_227:
                    CFDictionarySetValue(a3, v209, v25);
                    v3 = 0;
LABEL_228:
                    CFRelease(v25);
LABEL_229:
                    free(v8);
                    return v3;
                  }
LABEL_46:
                  if (v35 <= v31)
                  {
                    if ((_DWORD)v34)
                    {
                      if (*(_WORD *)v32 == 16656)
                      {
                        v42 = v32[4];
                        v41 = (unsigned __int16 *)(v32 + 4);
                        if (v42)
                          v43 = (const void **)MEMORY[0x24BDBD270];
                        else
                          v43 = (const void **)MEMORY[0x24BDBD268];
                        CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_SEL_REG"), *v43);
                        v44 = bswap32(*(v41 - 1));
                        v31 = v31 - HIWORD(v44) - 4;
                        if (v31 < 4)
                          goto LABEL_226;
                        v32 = (const UInt8 *)v41 + HIWORD(v44);
                        v33 = *((unsigned __int16 *)v32 + 1);
                        v34 = __rev16(v33);
                        v35 = v34 + 4;
                      }
                      goto LABEL_54;
                    }
LABEL_220:
                    if ((unint64_t)__rev16(v33) + 4 > v31 || !v33 || *(_WORD *)v32 != 15376)
                      goto LABEL_226;
                    v216 = CFNumberCreate(v23, kCFNumberSInt8Type, v32 + 4);
                    if (v216)
                    {
                      v211 = v216;
                      v212 = CFSTR("IE_KEY_WPS_RF_BANDS");
                      goto LABEL_225;
                    }
                    goto LABEL_232;
                  }
LABEL_54:
                  v45 = v35 <= v31 && v34 >= 2;
                  if (v45 && *(_WORD *)v32 == 4624)
                  {
                    valuePtr = bswap32(*((unsigned __int16 *)v32 + 2)) >> 16;
                    v46 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                    if (!v46)
                      goto LABEL_232;
                    v47 = v46;
                    CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_DEV_PW_ID"), v46);
                    CFRelease(v47);
                    v48 = bswap32(*((unsigned __int16 *)v32 + 1));
                    v31 = v31 - HIWORD(v48) - 4;
                    if (v31 < 4)
                      goto LABEL_226;
                    v32 += HIWORD(v48) + 4;
                    v33 = *((unsigned __int16 *)v32 + 1);
                    v34 = __rev16(v33);
                    v35 = v34 + 4;
                  }
                  if (v35 <= v31 && v34 >= 2)
                  {
                    v49 = *(unsigned __int16 *)v32;
                    if (v49 == 21264 || v49 == 21249)
                    {
                      valuePtr = bswap32(*((unsigned __int16 *)v32 + 2)) >> 16;
                      v50 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                      if (!v50)
                        goto LABEL_232;
                      v51 = v50;
                      CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_REG_CFG_METHODS"), v50);
                      CFRelease(v51);
                      v52 = bswap32(*((unsigned __int16 *)v32 + 1));
                      v31 = v31 - HIWORD(v52) - 4;
                      if (v31 < 4)
                        goto LABEL_226;
                      v32 += HIWORD(v52) + 4;
                      v33 = *((unsigned __int16 *)v32 + 1);
                      v34 = __rev16(v33);
                      v35 = v34 + 4;
                    }
                  }
                  if (v35 > v31 || !(_DWORD)v34)
                    goto LABEL_220;
                  v53 = *(unsigned __int16 *)v32;
                  if (v53 != 15120)
                  {
                    if (v34 < 0x10)
                      goto LABEL_220;
                    if (v53 == 18192)
                    {
                      v213 = CFDataCreate(v23, v32 + 4, 16);
                      if (v213)
                      {
                        v214 = v213;
                        CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_UUID_E"), v213);
                        CFRelease(v214);
                        v215 = bswap32(*((unsigned __int16 *)v32 + 1));
                        LODWORD(v31) = v31 - HIWORD(v215) - 4;
                        if (v31 < 4)
                          goto LABEL_226;
                        v32 += HIWORD(v215) + 4;
                        v33 = *((unsigned __int16 *)v32 + 1);
                        goto LABEL_220;
                      }
                    }
                    else
                    {
                      if (v53 != 6672)
                        goto LABEL_220;
                      v210 = CFDataCreate(v23, v32 + 4, 16);
                      if (v210)
                      {
                        v211 = v210;
                        v212 = CFSTR("IE_KEY_WPS_ENRL_NONCE");
LABEL_225:
                        CFDictionarySetValue(v25, v212, v211);
                        CFRelease(v211);
                        goto LABEL_226;
                      }
                    }
LABEL_232:
                    v3 = 4294963395;
                    goto LABEL_228;
                  }
                  v54 = CFNumberCreate(v23, kCFNumberSInt8Type, v32 + 4);
                  if (!v54)
                    goto LABEL_232;
                  v55 = v54;
                  CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_RESP_TYPE"), v54);
                  CFRelease(v55);
                  v56 = bswap32(*((unsigned __int16 *)v32 + 1));
                  v57 = v31 - HIWORD(v56) - 4;
                  if (v57 >= 4)
                  {
                    v58 = (uint64_t)&v32[HIWORD(v56) + 4];
                    v59 = bswap32(*(unsigned __int16 *)(v58 + 2)) >> 16;
                    v3 = 4294963396;
                    if (v59 < 0x10 || v59 + 4 > v57 || *(_WORD *)v58 != 18192)
                      goto LABEL_228;
                    v60 = CFDataCreate(v23, (const UInt8 *)(v58 + 4), 16);
                    if (!v60)
                      goto LABEL_232;
                    v61 = v60;
                    CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_UUID_E"), v60);
                    CFRelease(v61);
                    v62 = bswap32(*(unsigned __int16 *)(v58 + 2));
                    v63 = v57 - HIWORD(v62) - 4;
                    if (v63 >= 4)
                    {
                      v64 = v58 + 4 + HIWORD(v62);
                      v65 = bswap32(*(unsigned __int16 *)(v64 + 2)) >> 16;
                      v3 = 4294963396;
                      if (v65 > 0x40 || v65 + 4 > v63 || *(_WORD *)v64 != 8464)
                        goto LABEL_228;
                      v66 = CFStringCreateWithBytes(v23, (const UInt8 *)(v64 + 4), v65, 0x8000100u, 0);
                      if (!v66)
                        goto LABEL_232;
                      v67 = v66;
                      CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_MANUFACTURER"), v66);
                      CFRelease(v67);
                      v68 = bswap32(*(unsigned __int16 *)(v64 + 2));
                      v69 = v63 - HIWORD(v68) - 4;
                      if (v69 >= 4)
                      {
                        v70 = v64 + 4 + HIWORD(v68);
                        v71 = bswap32(*(unsigned __int16 *)(v70 + 2)) >> 16;
                        v3 = 4294963396;
                        if (v71 > 0x20 || v71 + 4 > v69 || *(_WORD *)v70 != 8976)
                          goto LABEL_228;
                        v72 = CFStringCreateWithBytes(v23, (const UInt8 *)(v70 + 4), v71, 0x8000100u, 0);
                        if (!v72)
                          goto LABEL_232;
                        v73 = v72;
                        CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_MODEL_NAME"), v72);
                        CFRelease(v73);
                        v74 = bswap32(*(unsigned __int16 *)(v70 + 2));
                        v75 = v69 - HIWORD(v74) - 4;
                        if (v75 >= 4)
                        {
                          v76 = v70 + 4 + HIWORD(v74);
                          v77 = bswap32(*(unsigned __int16 *)(v76 + 2)) >> 16;
                          v3 = 4294963396;
                          if (v77 > 0x20 || v77 + 4 > v75 || *(_WORD *)v76 != 9232)
                            goto LABEL_228;
                          v78 = CFStringCreateWithBytes(v23, (const UInt8 *)(v76 + 4), v77, 0x8000100u, 0);
                          if (!v78)
                            goto LABEL_232;
                          v79 = v78;
                          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_MODEL_NUM"), v78);
                          CFRelease(v79);
                          v80 = bswap32(*(unsigned __int16 *)(v76 + 2));
                          v81 = v75 - HIWORD(v80) - 4;
                          if (v81 >= 4)
                          {
                            v82 = v76 + 4 + HIWORD(v80);
                            v83 = bswap32(*(unsigned __int16 *)(v82 + 2)) >> 16;
                            v3 = 4294963396;
                            if (v83 > 0x20 || v83 + 4 > v81 || *(_WORD *)v82 != 16912)
                              goto LABEL_228;
                            v84 = CFStringCreateWithBytes(v23, (const UInt8 *)(v82 + 4), v83, 0x8000100u, 0);
                            if (!v84)
                              goto LABEL_232;
                            v85 = v84;
                            CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_SERIAL_NUM"), v84);
                            CFRelease(v85);
                            v86 = bswap32(*(unsigned __int16 *)(v82 + 2));
                            v87 = v81 - HIWORD(v86) - 4;
                            if (v87 >= 4)
                            {
                              v88 = v82 + 4 + HIWORD(v86);
                              valuePtr = -21846;
                              v89 = bswap32(*(unsigned __int16 *)(v88 + 2)) >> 16;
                              v3 = 4294963396;
                              if (v89 < 8 || v89 + 4 > v87 || *(_WORD *)v88 != 21520)
                                goto LABEL_228;
                              v90 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                              if (!v90)
                                goto LABEL_232;
                              v91 = v90;
                              v92 = v88 + 4;
                              valuePtr = bswap32(*(unsigned __int16 *)(v88 + 4)) >> 16;
                              v93 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                              if (!v93)
                                goto LABEL_235;
                              v94 = v93;
                              CFDictionarySetValue(v91, CFSTR("WPS_DEV_TYPE_CAT"), v93);
                              CFRelease(v94);
                              v95 = CFDataCreate(v23, (const UInt8 *)(v88 + 6), 4);
                              if (!v95)
                                goto LABEL_235;
                              v96 = v95;
                              CFDictionarySetValue(v91, CFSTR("WPS_DEV_TYPE_OUI"), v95);
                              CFRelease(v96);
                              valuePtr = bswap32(*(unsigned __int16 *)(v88 + 10)) >> 16;
                              v97 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                              if (!v97)
                                goto LABEL_235;
                              v98 = v97;
                              CFDictionarySetValue(v91, CFSTR("WPS_DEV_TYPE_SUB_CAT"), v97);
                              CFRelease(v98);
                              CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_PRIMARY_DEV_TYPE"), v91);
                              v99 = bswap32(*(unsigned __int16 *)(v88 + 2));
                              v100 = v87 - HIWORD(v99) - 4;
                              if (v100 < 4)
                                goto LABEL_236;
                              v101 = v92 + HIWORD(v99);
                              v102 = bswap32(*(unsigned __int16 *)(v101 + 2)) >> 16;
                              v3 = 4294963396;
                              if (v102 > 0x20 || v102 + 4 > v100 || *(_WORD *)v101 != 4368)
                                goto LABEL_124;
                              v103 = CFStringCreateWithBytes(v23, (const UInt8 *)(v101 + 4), v102, 0x8000100u, 0);
                              if (!v103)
                                goto LABEL_235;
                              v104 = v103;
                              CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_DEV_NAME"), v103);
                              CFRelease(v104);
                              v105 = bswap32(*(unsigned __int16 *)(v101 + 2));
                              v106 = v100 - HIWORD(v105) - 4;
                              if (v106 < 4)
                              {
LABEL_236:
                                v3 = 4294963396;
                              }
                              else
                              {
                                v107 = (_WORD *)(v101 + 4 + HIWORD(v105));
                                v108 = bswap32((unsigned __int16)v107[1]) >> 16;
                                v3 = 4294963396;
                                if (v108 >= 2 && v108 + 4 <= v106 && *v107 == 2064)
                                {
                                  valuePtr = bswap32((unsigned __int16)v107[2]) >> 16;
                                  v109 = CFNumberCreate(v23, kCFNumberSInt16Type, &valuePtr);
                                  if (!v109)
                                    goto LABEL_235;
                                  v110 = v109;
                                  CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_CFG_METHODS"), v109);
                                  CFRelease(v110);
                                  v111 = bswap32((unsigned __int16)v107[1]);
                                  v112 = v106 - HIWORD(v111) - 4;
                                  if (v112 >= 4
                                    && (v113 = (_WORD *)((char *)v107 + HIWORD(v111) + 4),
                                        (unint64_t)__rev16((unsigned __int16)v113[1]) + 4 <= v112)
                                    && v113[1]
                                    && *v113 == 15376)
                                  {
                                    v114 = CFNumberCreate(v23, kCFNumberSInt8Type, v113 + 2);
                                    if (v114)
                                    {
                                      v115 = v114;
                                      CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_RF_BANDS"), v114);
                                      CFRelease(v115);
                                      goto LABEL_123;
                                    }
LABEL_235:
                                    v3 = 4294963395;
                                  }
                                  else
                                  {
LABEL_123:
                                    CFDictionarySetValue(a3, CFSTR("WPS_PROB_RESP_IE"), v25);
                                    v3 = 0;
                                  }
                                }
                              }
LABEL_124:
                              CFRelease(v91);
                              goto LABEL_228;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_216;
              }
LABEL_231:
              v3 = 4294963395;
              goto LABEL_229;
            }
LABEL_126:
            v3 = 0;
            goto LABEL_229;
          }
          v116 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v117 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v117)
            goto LABEL_231;
          v25 = v117;
          valuePtr = -21846;
          v118 = v21[1];
          if ((unint64_t)__rev16(v118) + 4 > v20 || v118 == 0)
            goto LABEL_216;
          if (*v21 != 15120)
            goto LABEL_216;
          v120 = v21 + 2;
          v121 = CFNumberCreate(v116, kCFNumberSInt8Type, v21 + 2);
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_RESP_TYPE"), v121);
          CFRelease(v121);
          v122 = bswap32(v21[1]);
          v123 = v20 - HIWORD(v122) - 4;
          if (v123 < 4)
            goto LABEL_216;
          v124 = (const UInt8 *)v120 + HIWORD(v122);
          v125 = bswap32(*((unsigned __int16 *)v124 + 1)) >> 16;
          if (v125 < 0x10 || v125 + 4 > v123)
            goto LABEL_216;
          v127 = *(unsigned __int16 *)v124;
          if (v127 == 18192)
          {
            v128 = CFSTR("IE_KEY_WPS_UUID_E");
          }
          else
          {
            if (v127 != 18448)
              goto LABEL_216;
            v128 = CFSTR("IE_KEY_WPS_UUID_R");
          }
          v129 = CFDataCreate(v116, v124 + 4, 16);
          if (!v129)
            goto LABEL_232;
          v130 = v129;
          CFDictionarySetValue(v25, v128, v129);
          CFRelease(v130);
          v131 = bswap32(*((unsigned __int16 *)v124 + 1));
          v132 = v123 - HIWORD(v131) - 4;
          if (v132 < 4)
            goto LABEL_216;
          v133 = &v124[HIWORD(v131) + 4];
          v134 = *((unsigned __int16 *)v133 + 1);
          v135 = (unint64_t)__rev16(v134) + 4 > v132 || v134 == 0;
          if (v135 || *(_WORD *)v133 != 17424)
            goto LABEL_216;
          v136 = CFNumberCreate(v116, kCFNumberSInt8Type, v133 + 4);
          if (!v136)
            goto LABEL_232;
          v137 = v136;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_SC_STATE"), v136);
          CFRelease(v137);
          v138 = bswap32(*((unsigned __int16 *)v133 + 1));
          v139 = v132 - HIWORD(v138) - 4;
          if (v139 < 4)
            goto LABEL_216;
          v140 = (uint64_t)&v133[HIWORD(v138) + 4];
          v141 = bswap32(*(unsigned __int16 *)(v140 + 2)) >> 16;
          v3 = 4294963396;
          if (v141 > 0x40 || v141 + 4 > v139 || *(_WORD *)v140 != 8464)
            goto LABEL_228;
          v142 = CFStringCreateWithBytes(v116, (const UInt8 *)(v140 + 4), v141, 0x8000100u, 0);
          if (!v142)
            goto LABEL_232;
          v143 = v142;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_MANUFACTURER"), v142);
          CFRelease(v143);
          v144 = bswap32(*(unsigned __int16 *)(v140 + 2));
          v145 = v139 - HIWORD(v144) - 4;
          if (v145 < 4)
            goto LABEL_216;
          v146 = v140 + 4 + HIWORD(v144);
          v147 = bswap32(*(unsigned __int16 *)(v146 + 2)) >> 16;
          v3 = 4294963396;
          if (v147 > 0x20 || v147 + 4 > v145 || *(_WORD *)v146 != 8976)
            goto LABEL_228;
          v148 = CFStringCreateWithBytes(v116, (const UInt8 *)(v146 + 4), v147, 0x8000100u, 0);
          if (!v148)
            goto LABEL_232;
          v149 = v148;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_MODEL_NAME"), v148);
          CFRelease(v149);
          v150 = bswap32(*(unsigned __int16 *)(v146 + 2));
          v151 = v145 - HIWORD(v150) - 4;
          if (v151 < 4)
            goto LABEL_216;
          v152 = v146 + 4 + HIWORD(v150);
          v153 = bswap32(*(unsigned __int16 *)(v152 + 2)) >> 16;
          v3 = 4294963396;
          if (v153 > 0x20 || v153 + 4 > v151 || *(_WORD *)v152 != 9232)
            goto LABEL_228;
          v154 = CFStringCreateWithBytes(v116, (const UInt8 *)(v152 + 4), v153, 0x8000100u, 0);
          if (!v154)
            goto LABEL_232;
          v155 = v154;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_MODEL_NUM"), v154);
          CFRelease(v155);
          v156 = bswap32(*(unsigned __int16 *)(v152 + 2));
          v157 = v151 - HIWORD(v156) - 4;
          if (v157 < 4)
            goto LABEL_216;
          v158 = v152 + 4 + HIWORD(v156);
          v159 = bswap32(*(unsigned __int16 *)(v158 + 2)) >> 16;
          v3 = 4294963396;
          if (v159 > 0x20 || v159 + 4 > v157 || *(_WORD *)v158 != 16912)
            goto LABEL_228;
          v160 = CFStringCreateWithBytes(v116, (const UInt8 *)(v158 + 4), v159, 0x8000100u, 0);
          if (!v160)
            goto LABEL_232;
          v161 = v160;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_SERIAL_NUM"), v160);
          CFRelease(v161);
          v162 = bswap32(*(unsigned __int16 *)(v158 + 2));
          v163 = v157 - HIWORD(v162) - 4;
          if (v163 < 4)
            goto LABEL_216;
          v164 = v158 + 4 + HIWORD(v162);
          v165 = bswap32(*(unsigned __int16 *)(v164 + 2)) >> 16;
          v3 = 4294963396;
          if (v165 < 8 || v165 + 4 > v163 || *(_WORD *)v164 != 21520)
            goto LABEL_228;
          v166 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v166)
            goto LABEL_232;
          v167 = v166;
          valuePtr = bswap32(*(unsigned __int16 *)(v164 + 4)) >> 16;
          v168 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
          if (!v168)
            goto LABEL_234;
          v169 = v168;
          CFDictionarySetValue(v167, CFSTR("WPS_DEV_TYPE_CAT"), v168);
          CFRelease(v169);
          v170 = CFDataCreate(v116, (const UInt8 *)(v164 + 6), 4);
          if (!v170
            || (v171 = v170,
                CFDictionarySetValue(v167, CFSTR("WPS_DEV_TYPE_OUI"), v170),
                CFRelease(v171),
                valuePtr = bswap32(*(unsigned __int16 *)(v164 + 10)) >> 16,
                (v172 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr)) == 0))
          {
LABEL_234:
            CFRelease(v25);
            v3 = 4294963395;
            v25 = v167;
            goto LABEL_228;
          }
          v173 = v172;
          CFDictionarySetValue(v167, CFSTR("WPS_DEV_TYPE_SUB_CAT"), v172);
          CFRelease(v173);
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_PRIMARY_DEV_TYPE"), v167);
          CFRelease(v167);
          v174 = bswap32(*(unsigned __int16 *)(v164 + 2));
          v175 = v163 - HIWORD(v174) - 4;
          if (v175 < 4)
            goto LABEL_216;
          v176 = v164 + 4 + HIWORD(v174);
          v177 = bswap32(*(unsigned __int16 *)(v176 + 2)) >> 16;
          v3 = 4294963396;
          if (v177 > 0x20 || v177 + 4 > v175 || *(_WORD *)v176 != 4368)
            goto LABEL_228;
          v178 = CFStringCreateWithBytes(v116, (const UInt8 *)(v176 + 4), v177, 0x8000100u, 0);
          if (!v178)
            goto LABEL_232;
          v179 = v178;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_DEV_NAME"), v178);
          CFRelease(v179);
          v180 = bswap32(*(unsigned __int16 *)(v176 + 2));
          v181 = v175 - HIWORD(v180) - 4;
          if (v181 < 6)
            goto LABEL_216;
          v182 = (_WORD *)(v176 + 4 + HIWORD(v180));
          if (*v182 != 2064)
            goto LABEL_216;
          valuePtr = bswap32((unsigned __int16)v182[2]) >> 16;
          v183 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
          if (!v183)
            goto LABEL_232;
          v184 = v183;
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_CFG_METHODS"), v183);
          CFRelease(v184);
          v185 = bswap32((unsigned __int16)v182[1]);
          v186 = v181 - HIWORD(v185) - 4;
          if (v186 < 5 || (v187 = (uint64_t)v182 + HIWORD(v185) + 4, *(_WORD *)v187 != 16656))
          {
LABEL_216:
            v3 = 4294963396;
            goto LABEL_228;
          }
          v189 = *(unsigned __int8 *)(v187 + 4);
          v188 = v187 + 4;
          v190 = (const void *)*MEMORY[0x24BDBD270];
          v191 = (const void *)*MEMORY[0x24BDBD268];
          if (v189)
            v192 = (const void *)*MEMORY[0x24BDBD270];
          else
            v192 = (const void *)*MEMORY[0x24BDBD268];
          CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_SEL_REG"), v192);
          v193 = bswap32(*(unsigned __int16 *)(v188 - 2));
          v194 = v186 - HIWORD(v193) - 4;
          if (v194 >= 5)
          {
            v195 = (const UInt8 *)(v188 + HIWORD(v193));
            if (*(_WORD *)v195 == 22288)
            {
              v197 = v195[4];
              v196 = (unsigned __int16 *)(v195 + 4);
              if (v197)
                v198 = v190;
              else
                v198 = v191;
              CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_AP_SETUP_LOCKED"), v198);
              v199 = bswap32(*(v196 - 1));
              v195 = (const UInt8 *)v196 + HIWORD(v199);
              v194 = v194 - HIWORD(v199) - 4;
            }
            if (v194 >= 6)
            {
              v200 = *(unsigned __int16 *)v195;
              if (v200 == 21264 || v200 == 21249)
              {
                valuePtr = bswap32(*((unsigned __int16 *)v195 + 2)) >> 16;
                v201 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
                if (!v201)
                  goto LABEL_232;
                v202 = v201;
                CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_REG_CFG_METHODS"), v201);
                CFRelease(v202);
                v203 = bswap32(*((unsigned __int16 *)v195 + 1));
                v194 = v194 - HIWORD(v203) - 4;
                if (v194 >= 6)
                {
                  v195 += HIWORD(v203) + 4;
                  v200 = *(unsigned __int16 *)v195;
                  goto LABEL_203;
                }
              }
              else
              {
LABEL_203:
                if (v200 == 4624)
                {
                  valuePtr = bswap32(*((unsigned __int16 *)v195 + 2)) >> 16;
                  v204 = CFNumberCreate(v116, kCFNumberSInt16Type, &valuePtr);
                  if (!v204)
                    goto LABEL_232;
                  v205 = v204;
                  CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_DEV_PW_ID"), v204);
                  CFRelease(v205);
                  v206 = bswap32(*((unsigned __int16 *)v195 + 1));
                  v195 += HIWORD(v206) + 4;
                  v194 = v194 - HIWORD(v206) - 4;
                }
                if (v194 >= 0x14 && *(_WORD *)v195 == 6672)
                {
                  v207 = CFDataCreate(v116, v195 + 4, 16);
                  if (!v207)
                    goto LABEL_232;
                  v208 = v207;
                  CFDictionarySetValue(v25, CFSTR("IE_KEY_WPS_ENRL_NONCE"), v207);
                  CFRelease(v208);
                }
              }
            }
          }
          v209 = CFSTR("WPS_PROB_RESP_IE");
          goto LABEL_227;
        }
      }
    }
    return 0;
  }
  return v3;
}

uint64_t Apple80211ParseVHT_IE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __int16 v21;
  unsigned __int8 valuePtr;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 3)
    return 0;
  v5 = a1;
  while (*v5 != 192)
  {
    v7 = v5[1];
    v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2)
      return 0;
  }
  v6 = a2 - 2;
  v7 = v5[1];
  if (v7 < 5 || v6 < v7)
    goto LABEL_13;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v12 = Mutable;
  v21 = -21846;
  valuePtr = v5[2];
  v13 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
  if (!v13)
    goto LABEL_23;
  v14 = v13;
  CFDictionarySetValue(v12, CFSTR("VHT_CHAN_WIDTH"), v13);
  CFRelease(v14);
  valuePtr = v5[3];
  v15 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
  if (!v15)
    goto LABEL_23;
  v16 = v15;
  CFDictionarySetValue(v12, CFSTR("VHT_CENTER_CHAN_SEGMENT0"), v15);
  CFRelease(v16);
  valuePtr = v5[4];
  v17 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
  if (!v17)
    goto LABEL_23;
  v18 = v17;
  CFDictionarySetValue(v12, CFSTR("VHT_CENTER_CHAN_SEGMENT1"), v17);
  CFRelease(v18);
  v21 = *(_WORD *)(v5 + 5);
  v19 = CFNumberCreate(v10, kCFNumberSInt16Type, &v21);
  if (v19)
  {
    v20 = v19;
    CFDictionarySetValue(v12, CFSTR("VHT_BASIC_MCS_SET"), v19);
    CFRelease(v20);
    CFDictionarySetValue(a3, CFSTR("VHT_IE"), v12);
    v3 = 0;
  }
  else
  {
LABEL_23:
    v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseVHT_Caps(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFDataRef v15;
  CFDataRef v16;
  int valuePtr;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 3)
    return 0;
  v5 = a1;
  while (*v5 != 191)
  {
    v7 = v5[1];
    v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2)
      return 0;
  }
  v6 = a2 - 2;
  v7 = v5[1];
  if (v7 < 0xC || v6 < v7)
    goto LABEL_13;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v12 = Mutable;
  valuePtr = *(_DWORD *)(v5 + 2);
  v13 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
  if (v13
    && (v14 = v13,
        CFDictionarySetValue(v12, CFSTR("VHT_CAPS"), v13),
        CFRelease(v14),
        (v15 = CFDataCreate(v10, v5 + 6, 8)) != 0))
  {
    v16 = v15;
    CFDictionarySetValue(v12, CFSTR("VHT_SUPPORTED_MCS_SET"), v15);
    CFRelease(v16);
    CFDictionarySetValue(a3, CFSTR("VHT_CAPS_IE"), v12);
    v3 = 0;
  }
  else
  {
    v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseSES_IE(unsigned __int8 *a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  unsigned __int8 *v10;
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  int valuePtr;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (a1 && a3)
  {
    if (a2 < 2)
    {
      return 0;
    }
    else
    {
      v5 = a1;
      while (1)
      {
        v6 = v5[1];
        v7 = *v5 == 221 && v6 >= 7;
        if (v7 && (int)(v6 + 2) <= a2 && *(_DWORD *)(v5 + 2) == 21794816 && v5[6] == 1)
          break;
        a2 = a2 - v6 - 2;
        if (a2 >= 1)
        {
          v10 = &v5[v5[1]];
          v5 = v10 + 2;
          if (v10[3] + 2 <= a2)
            continue;
        }
        return 0;
      }
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v14 = Mutable;
        valuePtr = v5[9];
        v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
        if (v15)
        {
          v16 = v15;
          CFDictionarySetValue(v14, CFSTR("IE_KEY_SES_VERSION"), v15);
          CFRelease(v16);
          if (v5[9] == 16)
          {
            v17 = (const void *)*MEMORY[0x24BDBD270];
            v18 = (const void *)*MEMORY[0x24BDBD268];
            if ((v5[10] & 1) != 0)
              v19 = (const void *)*MEMORY[0x24BDBD270];
            else
              v19 = (const void *)*MEMORY[0x24BDBD268];
            CFDictionarySetValue(v14, CFSTR("IE_KEY_SES_RWO"), v19);
            if ((v5[10] & 2) != 0)
              v20 = v17;
            else
              v20 = v18;
            CFDictionarySetValue(v14, CFSTR("IE_KEY_SES_WDS_RWO"), v20);
          }
          CFDictionarySetValue(a3, CFSTR("SES_IE"), v14);
          v3 = 0;
        }
        else
        {
          v3 = 4294963395;
        }
        CFRelease(v14);
      }
      else
      {
        return 4294963395;
      }
    }
  }
  return v3;
}

uint64_t Apple80211ParseRNRIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  const void *v14;
  CFMutableDictionaryRef v15;
  __CFDictionary *v16;
  unsigned __int16 v17;
  CFNumberRef v18;
  CFNumberRef v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  unsigned int v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  unsigned int v30;
  _BOOL4 v33;
  CFMutableDictionaryRef v34;
  __CFDictionary *v35;
  const ether_addr *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  char v39;
  char *v40;
  CFStringRef v41;
  CFStringRef v42;
  int v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  char v55;
  CFNumberRef v56;
  CFNumberRef v57;
  __CFDictionary *v58;
  __CFDictionary *v59;
  CFMutableArrayRef v60;
  __CFDictionary *theDict;
  const void *v62;
  unsigned int v63;
  unsigned __int16 v64;
  _BOOL4 v65;
  __CFArray *theArray;
  int v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  char valuePtr;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 2)
    return 0;
  v5 = a1;
  while (1)
  {
    v6 = v5[1];
    v7 = a2 >= (v6 + 2);
    a2 -= v6 + 2;
    if (!v7)
      return 0;
    if (v6 >= 4 && *v5 == 201)
      break;
    v5 += v6 + 2;
    if (a2 <= 1)
      return 0;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v11 = Mutable;
  v58 = a3;
  v60 = CFArrayCreateMutable(v9, 0, MEMORY[0x24BDBD690]);
  if (!v60)
  {
    v3 = 4294963395;
    goto LABEL_95;
  }
  v59 = v11;
  v12 = v5[1];
  if (v12 < 4)
    goto LABEL_88;
  v13 = v5 + 2;
  v62 = (const void *)*MEMORY[0x24BDBD270];
  v14 = (const void *)*MEMORY[0x24BDBD268];
  while (2)
  {
    v15 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!v15)
    {
      v3 = 4294963395;
      v11 = v59;
      goto LABEL_94;
    }
    v16 = v15;
    v17 = *(_WORD *)v13;
    valuePtr = *(_WORD *)v13 & 2;
    v18 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
    if (!v18)
      goto LABEL_96;
    v19 = v18;
    CFDictionarySetValue(v16, CFSTR("TYPE"), v18);
    CFRelease(v19);
    if ((v17 & 4) != 0)
      v20 = v62;
    else
      v20 = v14;
    CFDictionarySetValue(v16, CFSTR("FILTERED_AP"), v20);
    if ((v17 & 8) != 0)
      v21 = v62;
    else
      v21 = v14;
    CFDictionarySetValue(v16, CFSTR("COLOCATED_AP"), v21);
    v22 = HIBYTE(v17);
    v63 = v17 >> 4;
    v23 = HIBYTE(v17) * v63 + HIBYTE(v17);
    if (v23 > v12)
    {
      v3 = 4294963392;
      goto LABEL_100;
    }
    v70 = v13[2];
    v24 = CFNumberCreate(v9, kCFNumberSInt8Type, &v70);
    if (!v24
      || (v25 = v24,
          CFDictionarySetValue(v16, CFSTR("OPERATING_CLASS"), v24),
          CFRelease(v25),
          v69 = v13[3],
          (v26 = CFNumberCreate(v9, kCFNumberSInt8Type, &v69)) == 0))
    {
LABEL_96:
      v3 = 4294963395;
LABEL_100:
      v11 = v59;
LABEL_93:
      CFRelease(v16);
LABEL_94:
      CFRelease(v60);
      goto LABEL_95;
    }
    v27 = v26;
    CFDictionarySetValue(v16, CFSTR("CHANNEL"), v26);
    CFRelease(v27);
    v68 = 2;
    v68 = _channelFlagsFromIEEEOperatingClass(v13[2]) & 0x2018 | 2;
    v28 = CFNumberCreate(v9, kCFNumberSInt32Type, &v68);
    if (!v28)
      goto LABEL_97;
    v29 = v28;
    CFDictionarySetValue(v16, CFSTR("CHANNEL_FLAGS"), v28);
    CFRelease(v29);
    v12 -= 4;
    if (v12 < v23)
    {
      v28 = 0;
      v3 = 4294963392;
LABEL_91:
      v11 = v59;
      if (v28)
LABEL_92:
        CFRelease(v28);
      goto LABEL_93;
    }
    v28 = CFArrayCreateMutable(v9, 0, MEMORY[0x24BDBD690]);
    if (!v28)
    {
LABEL_97:
      v3 = 4294963395;
      goto LABEL_91;
    }
    theArray = v28;
    theDict = v16;
    v30 = 0;
    v13 += 4;
    v33 = (v17 & 0xFB00) == 0x200 || (v17 & 0xFE00) == 2048 || HIBYTE(v17) == 12;
    v64 = v17;
    v65 = v33;
    do
    {
      v34 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (!v34)
      {
        v3 = 4294963395;
        v16 = theDict;
        v28 = theArray;
        goto LABEL_91;
      }
      v35 = v34;
      v36 = (const ether_addr *)v13;
      if (v17 < 0x100u)
        goto LABEL_46;
      LOBYTE(v67) = -86;
      LOBYTE(v67) = *v13;
      v37 = CFNumberCreate(v9, kCFNumberSInt8Type, &v67);
      if (!v37)
        goto LABEL_89;
      v38 = v37;
      CFDictionarySetValue(v35, CFSTR("TBTT_OFFSET"), v37);
      CFRelease(v38);
      v36 = (const ether_addr *)(v13 + 1);
      if (v17 <= 0xCFFu)
      {
LABEL_46:
        if (v22 > 0xC || ((1 << v22) & 0x1B80) == 0)
          goto LABEL_52;
        v39 = 0;
      }
      else
      {
        v39 = 1;
      }
      v40 = ether_ntoa(v36);
      if (!v40 || (v41 = CFStringCreateWithCString(v9, v40, 0x8000100u)) == 0)
      {
LABEL_89:
        CFRelease(v35);
        v3 = 4294963395;
        v11 = v59;
        v16 = theDict;
        v28 = theArray;
        goto LABEL_92;
      }
      v42 = v41;
      CFDictionarySetValue(v35, CFSTR("BSSID"), v41);
      CFRelease(v42);
      ++v36;
      if ((v39 & 1) == 0)
      {
LABEL_52:
        v43 = 0;
        if (v22 > 0xC || ((1 << v22) & 0x1860) == 0)
          goto LABEL_56;
        goto LABEL_54;
      }
      v43 = 1;
LABEL_54:
      v67 = -1431655766;
      v67 = *(_DWORD *)v36->octet;
      v44 = CFNumberCreate(v9, kCFNumberSInt32Type, &v67);
      if (!v44)
        goto LABEL_89;
      v45 = v44;
      CFDictionarySetValue(v35, CFSTR("SHORT_SSID"), v44);
      CFRelease(v45);
      v36 = (const ether_addr *)((char *)v36 + 4);
LABEL_56:
      if ((v65 | v43) == 1)
      {
        LOBYTE(v67) = -86;
        LOBYTE(v67) = v36->octet[0];
        v46 = CFNumberCreate(v9, kCFNumberSInt8Type, &v67);
        if (!v46)
          goto LABEL_89;
        v47 = v46;
        CFDictionarySetValue(v35, CFSTR("BSS_PARAMS"), v46);
        CFRelease(v47);
        if ((v67 & 1) != 0)
          v48 = v62;
        else
          v48 = v14;
        CFDictionarySetValue(v35, CFSTR("OCT_RECOMMENDED"), v48);
        if ((v67 & 2) != 0)
          v49 = v62;
        else
          v49 = v14;
        CFDictionarySetValue(v35, CFSTR("SAME_SSID"), v49);
        if ((v67 & 4) != 0)
          v50 = v62;
        else
          v50 = v14;
        CFDictionarySetValue(v35, CFSTR("MULTIPLE_BSSID"), v50);
        if ((v67 & 8) != 0)
          v51 = v62;
        else
          v51 = v14;
        CFDictionarySetValue(v35, CFSTR("TRANSMITTED_BSSID"), v51);
        if ((v67 & 0x10) != 0)
          v52 = v62;
        else
          v52 = v14;
        CFDictionarySetValue(v35, CFSTR("MEMBER_OF_ESS_WITH_2GHZ_OR_5GHZ_COLOCATED_AP"), v52);
        if ((v67 & 0x20) != 0)
          v53 = v62;
        else
          v53 = v14;
        CFDictionarySetValue(v35, CFSTR("UPR_ACTIVE"), v53);
        if ((v67 & 0x40) != 0)
          v54 = v62;
        else
          v54 = v14;
        CFDictionarySetValue(v35, CFSTR("COLOCATED_AP"), v54);
        v36 = (const ether_addr *)((char *)v36 + 1);
      }
      v55 = v43 ^ 1;
      if ((_DWORD)v22 == 9)
        v55 = 0;
      v17 = v64;
      if ((v55 & 1) == 0)
      {
        LOBYTE(v67) = -86;
        LOBYTE(v67) = v36->octet[0];
        v56 = CFNumberCreate(v9, kCFNumberSInt8Type, &v67);
        if (!v56)
          goto LABEL_89;
        v57 = v56;
        CFDictionarySetValue(v35, CFSTR("20MHZ_PSD"), v56);
        CFRelease(v57);
      }
      CFArrayAppendValue(theArray, v35);
      CFRelease(v35);
      v13 += v22;
      v12 -= v22;
      v7 = v30++ >= v63;
    }
    while (!v7);
    CFDictionarySetValue(theDict, CFSTR("TBTT_INFO_SET"), theArray);
    CFRelease(theArray);
    CFArrayAppendValue(v60, theDict);
    CFRelease(theDict);
    if ((int)v12 > 3)
      continue;
    break;
  }
LABEL_88:
  v11 = v59;
  CFDictionarySetValue(v59, CFSTR("NEIGHBOR_AP_INFO_LIST"), v60);
  CFRelease(v60);
  CFDictionarySetValue(v58, CFSTR("RNR_IE"), v59);
  v3 = 0;
LABEL_95:
  CFRelease(v11);
  return v3;
}

uint64_t Apple80211ParseQBSSLoadIE(_BYTE *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  _BYTE *v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;

  v3 = 4294963396;
  if (a1 && a3)
  {
    if (!a2)
      return 0;
    if (a2 > 2048)
      return v3;
    if (a2 < 3)
      return 0;
    v5 = a1;
    while (1)
    {
      v6 = v5[1];
      v7 = a2 - 2 - v6;
      if (a2 - 2 < v6)
        return 4294963396;
      v8 = *v5 == 11 && v6 >= 5;
      if (v8 && v6 + 2 <= a2)
        break;
      if (v7 > 0)
        v5 += v5[1] + 2;
      a2 = a2 - 2 - v6;
      if (v7 <= 2)
        return 0;
    }
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v12 = Mutable;
      v13 = CFNumberCreate(v10, kCFNumberSInt16Type, v5 + 2);
      if (!v13)
        goto LABEL_28;
      v14 = v13;
      CFDictionarySetValue(v12, CFSTR("QBSS_STA_COUNT"), v13);
      CFRelease(v14);
      v15 = CFNumberCreate(v10, kCFNumberSInt8Type, v5 + 4);
      if (!v15)
        goto LABEL_28;
      v16 = v15;
      CFDictionarySetValue(v12, CFSTR("QBSS_CHAN_UTIL"), v15);
      CFRelease(v16);
      v17 = CFNumberCreate(v10, kCFNumberSInt16Type, v5 + 5);
      if (v17)
      {
        v18 = v17;
        CFDictionarySetValue(v12, CFSTR("QBSS_AAC"), v17);
        CFRelease(v18);
        CFDictionarySetValue(a3, CFSTR("QBSS_LOAD_IE"), v12);
        v3 = 0;
      }
      else
      {
LABEL_28:
        v3 = 4294963395;
      }
      CFRelease(v12);
    }
    else
    {
      return 4294963395;
    }
  }
  return v3;
}

uint64_t Apple80211ParseMobilityDomainIE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  __int16 valuePtr;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = 4294963396;
  if (!a1 || !a3)
    return result;
  if (!a2)
    return 0;
  if (a2 > 2048)
    return result;
  if (a2 < 3)
    return 0;
  while (*(_BYTE *)a1 != 54)
  {
    v7 = *(unsigned __int8 *)(a1 + 1);
    v6 = a2 - 2;
LABEL_14:
    a2 = v6 - v7;
    a1 += v7 + 2;
    if ((int)(v6 - v7) <= 2)
      return 0;
  }
  v6 = a2 - 2;
  v7 = *(unsigned __int8 *)(a1 + 1);
  if (v7 < 3 || v6 < v7)
    goto LABEL_14;
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  valuePtr = *(_WORD *)(a1 + 2);
  v11 = CFNumberCreate(v9, kCFNumberSInt16Type, &valuePtr);
  CFDictionarySetValue(Mutable, CFSTR("MOBILITY_DOMAIN_IDENTIFIER"), v11);
  CFRelease(v11);
  v12 = (const void *)*MEMORY[0x24BDBD270];
  v13 = (const void *)*MEMORY[0x24BDBD268];
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
    v14 = (const void *)*MEMORY[0x24BDBD270];
  else
    v14 = (const void *)*MEMORY[0x24BDBD268];
  CFDictionarySetValue(Mutable, CFSTR("MOBILITY_DOMAIN_FT_OVER_DS"), v14);
  if ((*(_BYTE *)(a1 + 4) & 2) != 0)
    v15 = v12;
  else
    v15 = v13;
  CFDictionarySetValue(Mutable, CFSTR("MOBILITY_DOMAIN_RESOURCE_REQ_PROTO"), v15);
  CFDictionarySetValue(a3, CFSTR("MOBILITY_DOMAIN_IE"), Mutable);
  CFRelease(Mutable);
  return 0;
}

uint64_t Apple80211ParseMBOOCEIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  unsigned int v12;
  __CFDictionary *v13;
  __CFArray *v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  CFNumberRef v19;
  const void *v20;
  char *v21;
  int v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  const __CFString *v29;
  CFNumberRef v30;
  CFMutableDictionaryRef v31;
  __CFArray *v32;
  const void *v33;
  const void *v34;
  __CFDictionary *theDict;
  int v36;
  char v37;
  int valuePtr;
  unsigned __int8 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 2)
    return 0;
  v6 = a1;
  while (1)
  {
    v3 = 0;
    if (a2 < 6)
      return v3;
    v7 = v6[1];
    v8 = a2 >= (v7 + 2);
    a2 -= v7 + 2;
    if (!v8)
      return v3;
    if (v7 >= 4 && *v6 == 221 && v6[2] == 80 && v6[3] == 111 && v6[4] == 154 && v6[5] == 22)
      break;
    v3 = 0;
    v6 += v7 + 2;
    if (a2 <= 1)
      return v3;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v11 = Mutable;
  v12 = v6[1];
  if (v12 < 6)
  {
    v13 = 0;
    v14 = 0;
LABEL_74:
    CFDictionarySetValue(a3, CFSTR("MBO_OCE_IE"), v11);
    v3 = 0;
    v27 = 0;
    v19 = 0;
    goto LABEL_75;
  }
  v13 = 0;
  v14 = 0;
  v15 = v12 - 4;
  v16 = v6 + 6;
  v33 = (const void *)*MEMORY[0x24BDBD268];
  v34 = (const void *)*MEMORY[0x24BDBD270];
  v31 = Mutable;
  while (2)
  {
    v17 = v16[1];
    v18 = v17 + 2;
    v8 = v15 >= (v17 + 2);
    v15 -= v17 + 2;
    if (!v8)
    {
LABEL_86:
      v27 = 0;
      v19 = 0;
      v3 = 4294963392;
      goto LABEL_75;
    }
    switch(*v16)
    {
      case 1:
        if ((_DWORD)v17 != 1)
          goto LABEL_86;
        LOBYTE(valuePtr) = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19)
          goto LABEL_87;
        CFDictionarySetValue(v11, CFSTR("AP_CAP"), v19);
        CFRelease(v19);
        if ((valuePtr & 0x40) != 0)
          v20 = v34;
        else
          v20 = v33;
        CFDictionarySetValue(v11, CFSTR("AP_CAP_CELL_DATA_AWARE"), v20);
        goto LABEL_67;
      case 2:
        if ((v17 - 1) < 2)
          goto LABEL_86;
        if (!v14 && (v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x24BDBD690])) == 0
          || (theDict = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0])) == 0)
        {
          v27 = 0;
          v19 = 0;
LABEL_88:
          v3 = 4294963395;
          goto LABEL_75;
        }
        if (!(_DWORD)v17)
        {
          v27 = theDict;
LABEL_70:
          CFArrayAppendValue(v14, v27);
          v30 = v27;
LABEL_66:
          CFRelease(v30);
LABEL_67:
          v16 += v18;
          if (v15 <= 1)
          {
            if (v14)
              CFDictionarySetValue(v11, CFSTR("NON_PREF_CHANNEL_REPORT_LIST"), v14);
            goto LABEL_74;
          }
          continue;
        }
        v39 = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &v39);
        if (!v19)
        {
          v3 = 4294963395;
          goto LABEL_85;
        }
        CFDictionarySetValue(theDict, CFSTR("OPERATING_CLASS"), v19);
        CFRelease(v19);
        valuePtr = _channelFlagsFromIEEEOperatingClass(v39);
        v19 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
        v32 = v14;
        if (!v19)
          goto LABEL_84;
        CFDictionarySetValue(theDict, CFSTR("CHANNEL_FLAGS"), v19);
        CFRelease(v19);
        v19 = CFArrayCreateMutable(v9, 0, MEMORY[0x24BDBD690]);
        if (!v19)
          goto LABEL_84;
        v21 = v16 + 3;
        if (v17 < 4)
        {
LABEL_44:
          v27 = theDict;
          CFDictionarySetValue(theDict, CFSTR("CHANNEL_LIST"), v19);
          CFRelease(v19);
          LOBYTE(v36) = *v21;
          v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &v36);
          if (!v19)
          {
            v3 = 4294963395;
            v11 = v31;
            v14 = v32;
            goto LABEL_75;
          }
          CFDictionarySetValue(theDict, CFSTR("PREF"), v19);
          CFRelease(v19);
          v37 = v21[1];
          v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &v37);
          v14 = v32;
          if (!v19)
          {
            v3 = 4294963395;
            v11 = v31;
            goto LABEL_75;
          }
          CFDictionarySetValue(theDict, CFSTR("REASON_CODE"), v19);
          CFRelease(v19);
          v11 = v31;
          goto LABEL_70;
        }
        v22 = v17 - 3;
        while (1)
        {
          v13 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v13)
            break;
          v37 = -86;
          v37 = *v21;
          v23 = CFNumberCreate(v9, kCFNumberSInt8Type, &v37);
          if (!v23)
            break;
          v24 = v23;
          CFDictionarySetValue(v13, CFSTR("CHANNEL"), v23);
          CFRelease(v24);
          v36 = valuePtr;
          v25 = CFNumberCreate(v9, kCFNumberSInt32Type, &v36);
          if (!v25)
            break;
          v26 = v25;
          CFDictionarySetValue(v13, CFSTR("CHANNEL_FLAGS"), v25);
          CFRelease(v26);
          CFArrayAppendValue(v19, v13);
          CFRelease(v13);
          ++v21;
          if (!--v22)
            goto LABEL_44;
        }
LABEL_84:
        v3 = 4294963395;
        v11 = v31;
        v14 = v32;
LABEL_85:
        v27 = theDict;
LABEL_75:
        if (v13)
          CFRelease(v13);
        if (v19)
          CFRelease(v19);
        if (v27)
          CFRelease(v27);
        if (v14)
          CFRelease(v14);
        CFRelease(v11);
        return v3;
      case 3:
        if ((_DWORD)v17 != 1)
          goto LABEL_86;
        LOBYTE(valuePtr) = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19)
          goto LABEL_87;
        v28 = v11;
        v29 = CFSTR("CELL_DATA_CONNECTIVITY");
        goto LABEL_65;
      case 4:
        if ((_DWORD)v17 != 1)
          goto LABEL_86;
        LOBYTE(valuePtr) = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19)
          goto LABEL_87;
        v28 = v11;
        v29 = CFSTR("ASSOC_DISALLOWED_REASON_CODE");
        goto LABEL_65;
      case 5:
        if ((_DWORD)v17 != 1)
          goto LABEL_86;
        LOBYTE(valuePtr) = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19)
          goto LABEL_87;
        v28 = v11;
        v29 = CFSTR("CELL_CONN_PREF");
        goto LABEL_65;
      case 6:
        if ((_DWORD)v17 != 1)
          goto LABEL_86;
        LOBYTE(valuePtr) = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19)
          goto LABEL_87;
        v28 = v11;
        v29 = CFSTR("TRANS_REASON_CODE");
        goto LABEL_65;
      case 7:
        if ((_DWORD)v17 != 1)
          goto LABEL_86;
        LOBYTE(valuePtr) = v16[2];
        v19 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
        if (!v19)
          goto LABEL_87;
        v28 = v11;
        v29 = CFSTR("TRANS_REJECT_REASON_CODE");
        goto LABEL_65;
      case 8:
        if ((_DWORD)v17 != 2)
          goto LABEL_86;
        LOWORD(valuePtr) = *((_WORD *)v16 + 1);
        v19 = CFNumberCreate(v9, kCFNumberSInt16Type, &valuePtr);
        if (v19)
        {
          v28 = v11;
          v29 = CFSTR("ASSOC_RETRY_DELAY");
LABEL_65:
          CFDictionarySetValue(v28, v29, v19);
          v30 = v19;
          goto LABEL_66;
        }
LABEL_87:
        v27 = 0;
        goto LABEL_88;
      default:
        goto LABEL_67;
    }
  }
}

uint64_t Apple80211ParseHT_IE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  CFDataRef v35;
  CFDataRef v36;
  __int16 valuePtr;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 3)
    return 0;
  v5 = a1;
  while (*(_BYTE *)v5 != 61)
  {
    v7 = *(unsigned __int8 *)(v5 + 1);
    v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2)
      return 0;
  }
  v6 = a2 - 2;
  v7 = *(unsigned __int8 *)(v5 + 1);
  if (v7 < 0x16 || v6 < v7)
    goto LABEL_13;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v12 = Mutable;
  v38 = -86;
  valuePtr = *(unsigned __int8 *)(v5 + 2);
  v13 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v13)
    goto LABEL_60;
  v14 = v13;
  CFDictionarySetValue(v12, CFSTR("HT_PRIMARY_CHAN"), v13);
  CFRelease(v14);
  v38 = *(_BYTE *)(v5 + 3) & 3;
  v15 = CFNumberCreate(v10, kCFNumberSInt8Type, &v38);
  if (!v15)
    goto LABEL_60;
  v16 = v15;
  CFDictionarySetValue(v12, CFSTR("HT_SECONDARY_CHAN_OFFSET"), v15);
  CFRelease(v16);
  v17 = *MEMORY[0x24BDBD270];
  v18 = *MEMORY[0x24BDBD268];
  v19 = (const void *)((*(_BYTE *)(v5 + 3) & 4) != 0 ? *MEMORY[0x24BDBD270] : *MEMORY[0x24BDBD268]);
  CFDictionarySetValue(v12, CFSTR("HT_STA_CHAN_WIDTH"), v19);
  v20 = (const void *)((*(_BYTE *)(v5 + 3) & 8) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_RIFS_MODE"), v20);
  v21 = (const void *)((*(_BYTE *)(v5 + 3) & 0x10) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_PSMP_STAS_ONLY"), v21);
  v38 = *(_BYTE *)(v5 + 3) >> 5;
  v22 = CFNumberCreate(v10, kCFNumberSInt8Type, &v38);
  if (!v22)
    goto LABEL_60;
  v23 = v22;
  CFDictionarySetValue(v12, CFSTR("HT_SERVICE_INT"), v22);
  CFRelease(v23);
  v38 = *(_BYTE *)(v5 + 4) & 3;
  v24 = CFNumberCreate(v10, kCFNumberSInt8Type, &v38);
  if (!v24)
    goto LABEL_60;
  v25 = v24;
  CFDictionarySetValue(v12, CFSTR("HT_OP_MODE"), v24);
  CFRelease(v25);
  v26 = (const void *)((*(_BYTE *)(v5 + 4) & 4) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_NON_GF_STAS_PRESENT"), v26);
  v27 = (const void *)((*(_BYTE *)(v5 + 4) & 8) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_TX_BURST_LIMIT"), v27);
  v28 = (const void *)((*(_BYTE *)(v5 + 4) & 0x10) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_OBSS_NON_HT_STAS_PRESENT"), v28);
  v29 = (const void *)((*(_BYTE *)(v5 + 6) & 0x40) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_DUAL_BEACON"), v29);
  v30 = (const void *)(*(char *)(v5 + 6) >= 0 ? v18 : v17);
  CFDictionarySetValue(v12, CFSTR("HT_DUAL_CTS_PROT"), v30);
  v31 = (const void *)((*(_BYTE *)(v5 + 7) & 1) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_SECONDARY_BEACON"), v31);
  v32 = (const void *)((*(_BYTE *)(v5 + 7) & 2) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_LSIG_TXOP_PROT_FULL"), v32);
  v33 = (const void *)((*(_BYTE *)(v5 + 7) & 4) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_PCO_ACTIVE"), v33);
  v34 = (const void *)((*(_BYTE *)(v5 + 7) & 8) != 0 ? v17 : v18);
  CFDictionarySetValue(v12, CFSTR("HT_PCO_PHASE"), v34);
  v35 = CFDataCreate(v10, (const UInt8 *)(v5 + 8), 16);
  if (v35)
  {
    v36 = v35;
    CFDictionarySetValue(v12, CFSTR("HT_BASIC_MCS_SET"), v35);
    CFRelease(v36);
    CFDictionarySetValue(a3, CFSTR("HT_IE"), v12);
    v3 = 0;
  }
  else
  {
LABEL_60:
    v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseHT_Caps(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFDataRef v17;
  CFDataRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  int v25;
  __int16 valuePtr;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  if (a2 < 3)
    return 0;
  v5 = a1;
  while (*(_BYTE *)v5 != 45)
  {
    v7 = *(unsigned __int8 *)(v5 + 1);
    v6 = a2 - 2;
LABEL_13:
    a2 = v6 - v7;
    v5 += v7 + 2;
    if ((int)(v6 - v7) <= 2)
      return 0;
  }
  v6 = a2 - 2;
  v7 = *(unsigned __int8 *)(v5 + 1);
  if (v7 < 0x1A || v6 < v7)
    goto LABEL_13;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v12 = Mutable;
  v25 = -1431655766;
  valuePtr = *(_WORD *)(v5 + 2);
  v13 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v13)
    goto LABEL_25;
  v14 = v13;
  CFDictionarySetValue(v12, CFSTR("CAPS"), v13);
  CFRelease(v14);
  v15 = CFNumberCreate(v10, kCFNumberSInt8Type, (const void *)(v5 + 4));
  if (!v15)
    goto LABEL_25;
  v16 = v15;
  CFDictionarySetValue(v12, CFSTR("AMPDU_PARAMS"), v15);
  CFRelease(v16);
  v17 = CFDataCreate(v10, (const UInt8 *)(v5 + 5), 16);
  if (!v17)
    goto LABEL_25;
  v18 = v17;
  CFDictionarySetValue(v12, CFSTR("MCS_SET"), v17);
  CFRelease(v18);
  valuePtr = *(_WORD *)(v5 + 21);
  v19 = CFNumberCreate(v10, kCFNumberSInt16Type, &valuePtr);
  if (!v19)
    goto LABEL_25;
  v20 = v19;
  CFDictionarySetValue(v12, CFSTR("EXT_CAPS"), v19);
  CFRelease(v20);
  v25 = *(_DWORD *)(v5 + 23);
  v21 = CFNumberCreate(v10, kCFNumberSInt32Type, &v25);
  if (!v21)
    goto LABEL_25;
  v22 = v21;
  CFDictionarySetValue(v12, CFSTR("TXBF_CAPS"), v21);
  CFRelease(v22);
  v23 = CFNumberCreate(v10, kCFNumberSInt8Type, (const void *)(v5 + 27));
  if (v23)
  {
    v24 = v23;
    CFDictionarySetValue(v12, CFSTR("ASEL_CAPS"), v23);
    CFRelease(v24);
    CFDictionarySetValue(a3, CFSTR("HT_CAPS_IE"), v12);
    v3 = 0;
  }
  else
  {
LABEL_25:
    v3 = 4294963395;
  }
  CFRelease(v12);
  return v3;
}

uint64_t Apple80211ParseHE_IEs(const UInt8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t result;
  const __CFAllocator *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  __CFData *Mutable;
  __CFData *v11;
  __CFData *v12;
  __CFData *v13;
  __CFData *v14;
  __CFData *v15;
  __CFData *v16;
  __CFData *v17;

  result = 4294963396;
  if (a1 && a3)
  {
    if (a2 < 3)
      return 0;
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (1)
    {
      v7 = a2 - 2;
      if (*a1 != 255)
        goto LABEL_8;
      v9 = a1[1];
      if (v7 >= v9 && a1[2] == 35)
      {
        Mutable = CFDataCreateMutable(v6, 0);
        if (!Mutable)
          return 4294963395;
        v11 = Mutable;
        CFDataAppendBytes(Mutable, a1, a1[1] + 2);
        CFDictionarySetValue(a3, CFSTR("HE_CAP"), v11);
        CFRelease(v11);
        if (*a1 != 255)
          goto LABEL_8;
        v9 = a1[1];
      }
      if (v7 >= v9 && a1[2] == 36)
      {
        v12 = CFDataCreateMutable(v6, 0);
        if (!v12)
          return 4294963395;
        v13 = v12;
        CFDataAppendBytes(v12, a1, a1[1] + 2);
        CFDictionarySetValue(a3, CFSTR("HE_OP"), v13);
        CFRelease(v13);
        if (*a1 != 255)
          goto LABEL_8;
        v9 = a1[1];
      }
      if (v7 >= v9 && a1[2] == 38)
      {
        v14 = CFDataCreateMutable(v6, 0);
        if (!v14)
          return 4294963395;
        v15 = v14;
        CFDataAppendBytes(v14, a1, a1[1] + 2);
        CFDictionarySetValue(a3, CFSTR("HE_MU_EDCA"), v15);
        CFRelease(v15);
        if (*a1 != 255)
          goto LABEL_8;
        v9 = a1[1];
      }
      if (v7 >= v9 && a1[2] == 47)
      {
        v16 = CFDataCreateMutable(v6, 0);
        if (!v16)
          return 4294963395;
        v17 = v16;
        CFDataAppendBytes(v16, a1, a1[1] + 2);
        CFDictionarySetValue(a3, CFSTR("HE_QBSS_LOAD"), v17);
        CFRelease(v17);
      }
LABEL_8:
      v8 = a1[1];
      a2 = v7 - v8;
      a1 += v8 + 2;
      if ((int)(v7 - v8) <= 2)
        return 0;
    }
  }
  return result;
}

uint64_t Apple80211ParseHEOperationIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  CFMutableDictionaryRef Mutable;
  int v12;
  int v13;
  CFNumberRef v14;
  CFNumberRef v15;
  unsigned int v16;
  CFNumberRef v17;
  CFNumberRef v18;
  int v19;
  CFNumberRef v20;
  CFNumberRef v21;
  unsigned __int8 v22;
  unsigned int v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  char *v40;
  int v41;
  int v42;
  BOOL v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  unsigned int v56;
  CFNumberRef v57;
  CFNumberRef v58;
  const __CFString *v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  int v66;
  int v68;
  unsigned int v70;
  char v71;
  char v72;
  char v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  char v76;
  char v77;
  char v78;
  __int16 v79;
  char valuePtr;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a3)
    return v3;
  v4 = a2;
  if (!a2)
    return 0;
  v5 = a1;
  v70 = 0;
  v6 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = (const void *)*MEMORY[0x24BDBD270];
  v9 = (const void *)*MEMORY[0x24BDBD268];
  do
  {
    if (v4 < 2 || (v10 = v5[1], v4 < (v10 + 2)))
    {
      v3 = v70;
      goto LABEL_83;
    }
    if (v10 < 3 || *v5 != 255 || v10 < 7 || v5[2] != 36)
    {
      v42 = 0;
      v5 += v10 + 2;
      v4 -= v10 + 2;
      continue;
    }
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
      return 4294963395;
    v6 = Mutable;
    v12 = v5[5];
    v13 = *(unsigned __int16 *)(v5 + 3);
    valuePtr = v13 & 7;
    v14 = CFNumberCreate(v7, kCFNumberSInt8Type, &valuePtr);
    if (!v14)
      goto LABEL_75;
    v15 = v14;
    v16 = v13 | (v12 << 16);
    CFDictionarySetValue(v6, CFSTR("DEFAULT_PE_DURATION"), v14);
    CFRelease(v15);
    if ((v13 & 8) != 0 || v9 == v8)
      CFDictionarySetValue(v6, CFSTR("TWT_REQUIRED"), v8);
    v79 = (v16 >> 4) & 0x3FF;
    v17 = CFNumberCreate(v7, kCFNumberSInt16Type, &v79);
    if (!v17)
      goto LABEL_75;
    v18 = v17;
    CFDictionarySetValue(v6, CFSTR("TXOP_DURATION_RTS_THRESHOLD"), v17);
    CFRelease(v18);
    if (v9 == v8)
      v19 = 1;
    else
      v19 = (v16 >> 15) & 1;
    if (v19 == 1)
      CFDictionarySetValue(v6, CFSTR("CO_HOSTED_BSS"), v8);
    if ((v16 & 0x10000) != 0 || v9 == v8)
      CFDictionarySetValue(v6, CFSTR("ER_SU_DISABLE"), v8);
    v78 = v5[6] & 0x3F;
    v20 = CFNumberCreate(v7, kCFNumberSInt8Type, &v78);
    if (!v20)
      goto LABEL_75;
    v21 = v20;
    CFDictionarySetValue(v6, CFSTR("BSS_COLOR"), v20);
    CFRelease(v21);
    v22 = v5[6];
    if ((v22 & 0x40) != 0 || v9 == v8)
    {
      CFDictionarySetValue(v6, CFSTR("PARTIAL_BSS_COLOR"), v8);
      v22 = v5[6];
    }
    if ((v22 & 0x80) != 0 || v9 == v8)
      CFDictionarySetValue(v6, CFSTR("BSS_COLOR_DISABLED"), v8);
    v23 = *(unsigned __int16 *)(v5 + 7);
    v77 = v23 & 3;
    v24 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v24)
      goto LABEL_75;
    v25 = v24;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_1SS"), v24);
    CFRelease(v25);
    v77 = (v23 >> 2) & 3;
    v26 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v26)
      goto LABEL_75;
    v27 = v26;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_2SS"), v26);
    CFRelease(v27);
    v77 = (v23 >> 4) & 3;
    v28 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v28)
      goto LABEL_75;
    v29 = v28;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_3SS"), v28);
    CFRelease(v29);
    v77 = v23 >> 6;
    v30 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v30)
      goto LABEL_75;
    v31 = v30;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_4SS"), v30);
    CFRelease(v31);
    v77 = BYTE1(v23) & 3;
    v32 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v32)
      goto LABEL_75;
    v33 = v32;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_5SS"), v32);
    CFRelease(v33);
    v77 = (v23 >> 10) & 3;
    v34 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v34)
      goto LABEL_75;
    v35 = v34;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_6SS"), v34);
    CFRelease(v35);
    v77 = (v23 >> 12) & 3;
    v36 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v36)
      goto LABEL_75;
    v37 = v36;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_7SS"), v36);
    CFRelease(v37);
    v77 = v23 >> 14;
    v38 = CFNumberCreate(v7, kCFNumberSInt8Type, &v77);
    if (!v38)
      goto LABEL_75;
    v39 = v38;
    CFDictionarySetValue(v6, CFSTR("MAX_HE_MCS_8SS"), v38);
    CFRelease(v39);
    v40 = (char *)(v5 + 9);
    v41 = v4 - 9;
    if ((v16 & 0x4000) == 0 && v9 != v8)
    {
      v4 -= 9;
      if (!v19)
        goto LABEL_56;
LABEL_53:
      if (v4 < 1)
        goto LABEL_78;
      v76 = *v40;
      v50 = CFNumberCreate(v7, kCFNumberSInt8Type, &v76);
      if (!v50)
        goto LABEL_75;
      v51 = v50;
      CFDictionarySetValue(v6, CFSTR("MAX_CO_HOSTED_BSSID_IND"), v50);
      CFRelease(v51);
      ++v40;
      --v4;
LABEL_56:
      if ((v16 & 0x20000) == 0 && v9 != v8)
      {
        v42 = 8;
        continue;
      }
      if (v4 >= 5)
      {
        v76 = -86;
        v76 = *v40;
        v52 = CFNumberCreate(v7, kCFNumberSInt8Type, &v76);
        if (v52)
        {
          v53 = v52;
          CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_PRIMARY_CHANNEL"), v52);
          CFRelease(v53);
          v75 = v40[1] & 3;
          v54 = CFNumberCreate(v7, kCFNumberSInt8Type, &v75);
          if (v54)
          {
            v55 = v54;
            CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_CHANNEL_WIDTH"), v54);
            CFRelease(v55);
            v56 = v40[1];
            if ((v56 & 4) != 0 || v9 == v8)
            {
              CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_DUPLICATE_BEACON"), v8);
              v56 = v40[1];
            }
            v74 = (v56 >> 3) & 7;
            v57 = CFNumberCreate(v7, kCFNumberSInt8Type, &v74);
            if (v57)
            {
              v58 = v57;
              CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_REG_INFO"), v57);
              CFRelease(v58);
              if (v74)
              {
                if (v74 != 1)
                {
LABEL_71:
                  v73 = v40[2];
                  v60 = CFNumberCreate(v7, kCFNumberSInt8Type, &v73);
                  if (v60)
                  {
                    v61 = v60;
                    CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_CENTER_CHANNEL_FREQ_SEG0"), v60);
                    CFRelease(v61);
                    v72 = v40[3];
                    v62 = CFNumberCreate(v7, kCFNumberSInt8Type, &v72);
                    if (v62)
                    {
                      v63 = v62;
                      CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_CENTER_CHANNEL_FREQ_SEG1"), v62);
                      CFRelease(v63);
                      v71 = v40[4];
                      v64 = CFNumberCreate(v7, kCFNumberSInt8Type, &v71);
                      if (v64)
                      {
                        v65 = v64;
                        CFDictionarySetValue(v6, CFSTR("6GHZ_OP_INFO_MIN_RATE"), v64);
                        CFRelease(v65);
                        v42 = 8;
                        v4 -= 5;
                        continue;
                      }
                    }
                  }
                  goto LABEL_75;
                }
                v59 = CFSTR("6GHZ_OP_INFO_STANDARD_POWER_AP");
              }
              else
              {
                v59 = CFSTR("6GHZ_OP_INFO_INDOOR_AP");
              }
              CFDictionarySetValue(v6, v59, v8);
              goto LABEL_71;
            }
          }
        }
LABEL_75:
        v42 = 4;
        v66 = -3901;
LABEL_76:
        v70 = v66;
        continue;
      }
LABEL_78:
      v42 = 4;
      v66 = -3904;
      goto LABEL_76;
    }
    v43 = v4 >= 0xC;
    v4 -= 12;
    if (!v43)
    {
      v42 = 4;
      v70 = -3904;
      v4 = v41;
      continue;
    }
    v68 = v41;
    v76 = *v40;
    v44 = CFNumberCreate(v7, kCFNumberSInt8Type, &v76);
    if (v44)
    {
      v45 = v44;
      CFDictionarySetValue(v6, CFSTR("VHT_OP_INFO_CHANNEL_WIDTH"), v44);
      CFRelease(v45);
      v75 = v5[10];
      v46 = CFNumberCreate(v7, kCFNumberSInt8Type, &v75);
      if (v46)
      {
        v47 = v46;
        CFDictionarySetValue(v6, CFSTR("VHT_OP_INFO_CENTER_CHANNEL_FREQ_SEG0"), v46);
        CFRelease(v47);
        v74 = v5[11];
        v48 = CFNumberCreate(v7, kCFNumberSInt8Type, &v74);
        if (v48)
        {
          v49 = v48;
          CFDictionarySetValue(v6, CFSTR("VHT_OP_INFO_CENTER_CHANNEL_FREQ_SEG1"), v48);
          CFRelease(v49);
          v40 = (char *)(v5 + 12);
          if (!v19)
            goto LABEL_56;
          goto LABEL_53;
        }
      }
    }
    v42 = 4;
    v70 = -3901;
    v4 = v68;
  }
  while (!v42);
  if (v42 != 4)
  {
    v3 = v70;
LABEL_83:
    if (!v6)
      return v3;
    CFDictionarySetValue(a3, CFSTR("HE_OP_IE"), v6);
    goto LABEL_86;
  }
  v3 = v70;
  if (!v6)
    return v3;
LABEL_86:
  CFRelease(v6);
  return v3;
}

uint64_t Apple80211ParseExtCapsIE(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  const __CFAllocator *v9;
  unsigned int v10;
  CFMutableDictionaryRef Mutable;
  unsigned int v12;
  char valuePtr;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (a1 && a3)
  {
    v5 = a2;
    if (a2)
    {
      if (a2 <= 2048)
      {
        v6 = a1;
        v3 = 0;
        v7 = 0;
        v8 = 0;
        v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        while (v5 >= 3)
        {
          v10 = *(unsigned __int8 *)(v6 + 1);
          if (v5 - 2 < v10)
            return 4294963396;
          if (v10 >= 4 && *(_BYTE *)v6 == 127)
          {
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (!Mutable)
              return 4294963395;
            v7 = Mutable;
            valuePtr = 1;
            v8 = CFNumberCreate(v9, kCFNumberSInt8Type, &valuePtr);
            if (v8)
            {
              if ((*(_BYTE *)(v6 + 4) & 8) != 0)
                CFDictionarySetValue(v7, CFSTR("BSS_TRANS_MGMT"), v8);
              v12 = *(unsigned __int8 *)(v6 + 1);
              if (v12 >= 0xB)
              {
                if ((*(_WORD *)(v6 + 13) & 0x10) != 0)
                {
                  CFDictionarySetValue(v7, CFSTR("BEACON_PROTECTION"), v8);
                  v12 = *(unsigned __int8 *)(v6 + 1);
                }
                if (v12 >= 0xC && (*(_WORD *)(v6 + 13) & 0x100) != 0)
                  CFDictionarySetValue(v7, CFSTR("SAE_PK_PASSWD_USED"), v8);
              }
              if (CFDictionaryGetCount(v7))
                CFDictionarySetValue(a3, CFSTR("EXT_CAPS"), v7);
            }
            else
            {
              v3 = 4294963395;
            }
            break;
          }
          if ((int)(v5 - 2 - v10) > 0)
            v6 += *(unsigned __int8 *)(v6 + 1) + 2;
          v5 = v5 - 2 - v10;
        }
        if (v7)
          CFRelease(v7);
        if (v8)
          CFRelease(v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t Apple80211ParseCyclopsIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  result = 4294963396;
  if (a1 && a3)
  {
    if (!a2)
      return 0;
    if (a2 > 2048)
      return result;
    if (a2 < 3)
      return 0;
    while (1)
    {
      v6 = a2 - 2;
      v7 = a1[1];
      a2 = a2 - 2 - v7;
      if (v6 < v7)
        return 4294963396;
      if (v7 >= 4 && *a1 == 221)
      {
        v8 = *((_WORD *)a1 + 1) == 0x4000 && a1[4] == 150;
        if (v8 && a1[5] == 11)
          break;
      }
      if (a2 > 0)
        a1 += a1[1] + 2;
      if (a2 <= 2)
        return 0;
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v10 = Mutable;
      v11 = (const void *)*MEMORY[0x24BDBD270];
      v12 = (const void *)*MEMORY[0x24BDBD268];
      if ((a1[6] & 0x40) != 0)
        v13 = (const void *)*MEMORY[0x24BDBD270];
      else
        v13 = (const void *)*MEMORY[0x24BDBD268];
      CFDictionarySetValue(Mutable, CFSTR("FT_STATE"), v13);
      if ((a1[6] & 0x20) != 0)
        v14 = v11;
      else
        v14 = v12;
      CFDictionarySetValue(v10, CFSTR("FASTLANE_STATE"), v14);
      CFDictionarySetValue(a3, CFSTR("FAST_ENTERPRISE_NETWORK"), v10);
      CFRelease(v10);
      return 0;
    }
    return 4294963395;
  }
  return result;
}

uint64_t Apple80211ParseAppleiOSIE(unsigned __int8 *a1, int a2, CFMutableDictionaryRef theDict)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v6;
  CFMutableDictionaryRef v7;
  const __CFAllocator *v8;
  unsigned int v9;
  CFMutableDictionaryRef Mutable;
  unsigned int v11;
  const UInt8 *v12;
  int v13;
  int v14;
  CFIndex v15;
  unsigned int v16;
  const UInt8 *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFDataRef v20;
  CFDataRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  const __CFString *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFDataRef v28;
  uint64_t v29;
  void *value;
  char valuePtr;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1)
    return v3;
  v4 = a2;
  if (!a2 || !theDict)
    return v3;
  if (a2 < 3)
    return 0;
  v6 = a1;
  v7 = 0;
  valuePtr = -86;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  value = (void *)*MEMORY[0x24BDBD270];
  while (1)
  {
    v9 = v6[1];
    if (v9 + 2 > v4)
    {
LABEL_37:
      if (v7)
      {
        CFDictionarySetValue(theDict, CFSTR("IOS_IE"), v7);
        v3 = 0;
        goto LABEL_39;
      }
      return 0;
    }
    if (v9 >= 4 && *v6 == 221 && Apple80211ParseAppleiOSIE_iosSignature == *(_DWORD *)(v6 + 2))
    {
      if (!v7)
      {
        Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (!Mutable)
          return 4294963395;
        v7 = Mutable;
        v9 = v6[1];
      }
      v11 = v9 - 4;
      if (v9 - 4 >= 3)
        break;
    }
LABEL_34:
    v4 = v4 - v9 - 2;
    v29 = (uint64_t)&v6[v9 + 2];
    if (v4 > 0)
      v6 = (unsigned __int8 *)v29;
    if (v4 <= 2)
      goto LABEL_37;
  }
  v12 = v6 + 6;
  while (1)
  {
    v13 = *v12;
    v14 = v12[1];
    valuePtr = v12[1];
    v15 = v12[2];
    v16 = v11 - 3;
    if (v15 > (v11 - 3))
    {
LABEL_42:
      v3 = 4294963394;
      goto LABEL_39;
    }
    v17 = v12 + 3;
    if (v14 != 1)
      goto LABEL_32;
    if (v13 == 4)
    {
      v22 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
      if (!v22)
        goto LABEL_43;
      v23 = v22;
      v24 = v7;
      v25 = CFSTR("IOS_NAN_PH_INFO_VERSION");
      goto LABEL_31;
    }
    if (v13 == 2)
      break;
    if (v13 == 1)
    {
      if (!v12[2])
        goto LABEL_42;
      v18 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
      if (!v18)
        goto LABEL_43;
      v19 = v18;
      CFDictionarySetValue(v7, CFSTR("IOS_IE_FEATURE_VERSION"), v18);
      CFRelease(v19);
      v20 = CFDataCreate(v8, v17, v15);
      if (!v20)
        goto LABEL_43;
      v21 = v20;
      CFDictionarySetValue(v7, CFSTR("IOS_IE_FEATURES"), v20);
      CFRelease(v21);
      if ((*v17 & 1) != 0)
        CFDictionarySetValue(v7, CFSTR("IOS_IE_FEATURE_WOW_DISALLOWED"), value);
    }
LABEL_32:
    v11 = v16 - v15;
    v12 = &v17[v15];
    if ((v16 - v15) <= 2u)
    {
      v9 = v6[1];
      goto LABEL_34;
    }
  }
  if (v15 < 6)
    goto LABEL_42;
  v26 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
  if (v26)
  {
    v27 = v26;
    CFDictionarySetValue(v7, CFSTR("IOS_IE_BTMAC_VERSION"), v26);
    CFRelease(v27);
    v28 = CFDataCreate(v8, v17, 6);
    if (v28)
    {
      v23 = v28;
      v24 = v7;
      v25 = CFSTR("IOS_IE_BTMAC");
LABEL_31:
      CFDictionarySetValue(v24, v25, v23);
      CFRelease(v23);
      goto LABEL_32;
    }
  }
LABEL_43:
  v3 = 4294963395;
LABEL_39:
  CFRelease(v7);
  return v3;
}

uint64_t Apple80211ParseAppleIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t v10;
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  unsigned int v19;
  const void **v20;

  v3 = 4294963396;
  if (a1 && a2 && a3)
  {
    if (a2 < 2)
    {
      return 0;
    }
    else
    {
      v5 = a1;
      while (1)
      {
        v6 = v5[1];
        v7 = a2 >= (v6 + 2);
        a2 -= v6 + 2;
        if (!v7)
          return 0;
        if (v6 >= 3 && *v5 == 221)
        {
          v8 = Apple80211ParseAppleIE_appleOUI == *((_WORD *)v5 + 1) && byte_2544F57A2 == v5[4];
          v9 = !v8;
          if (v6 >= 7 && !v9)
            break;
        }
        v10 = (uint64_t)&v5[v6 + 2];
        if (a2 > 0)
          v5 = (unsigned __int8 *)v10;
        if (a2 <= 1)
          return 0;
      }
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v14 = Mutable;
        v15 = CFNumberCreate(v12, kCFNumberSInt8Type, v5 + 5);
        if (!v15)
          goto LABEL_48;
        v16 = v15;
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_VERSION"), v15);
        CFRelease(v16);
        if (v5[5] != 1)
          goto LABEL_37;
        v17 = CFNumberCreate(v12, kCFNumberSInt8Type, v5 + 6);
        if (!v17)
        {
LABEL_48:
          v3 = 4294963395;
          goto LABEL_38;
        }
        v18 = v17;
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_PRODUCT_ID"), v17);
        CFRelease(v18);
        v19 = bswap32(*(unsigned __int16 *)(v5 + 7)) >> 16;
        v20 = (const void **)MEMORY[0x24BDBD270];
        if ((v19 & 1) != 0)
        {
          CFDictionarySetValue(v14, CFSTR("APPLE_IE_INT_MIT"), (const void *)*MEMORY[0x24BDBD270]);
          if ((v19 & 2) == 0)
          {
LABEL_29:
            if ((v19 & 4) == 0)
              goto LABEL_30;
            goto LABEL_41;
          }
        }
        else if ((v19 & 2) == 0)
        {
          goto LABEL_29;
        }
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_UNCONFIGURED"), *v20);
        if ((v19 & 4) == 0)
        {
LABEL_30:
          if ((v19 & 8) == 0)
            goto LABEL_31;
          goto LABEL_42;
        }
LABEL_41:
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_FOUND_PPPOE"), *v20);
        if ((v19 & 8) == 0)
        {
LABEL_31:
          if ((v19 & 0x10) == 0)
            goto LABEL_32;
          goto LABEL_43;
        }
LABEL_42:
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_GUEST_NETWORK"), *v20);
        if ((v19 & 0x10) == 0)
        {
LABEL_32:
          if ((v19 & 0x20) == 0)
            goto LABEL_33;
          goto LABEL_44;
        }
LABEL_43:
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_LEGACY_WDS"), *v20);
        if ((v19 & 0x20) == 0)
        {
LABEL_33:
          if ((v19 & 0x40) == 0)
            goto LABEL_34;
          goto LABEL_45;
        }
LABEL_44:
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_WSC_CAP"), *v20);
        if ((v19 & 0x40) == 0)
        {
LABEL_34:
          if ((v19 & 0x80) == 0)
            goto LABEL_35;
          goto LABEL_46;
        }
LABEL_45:
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_WSC_ACTIVE"), *v20);
        if ((v19 & 0x80) == 0)
        {
LABEL_35:
          if ((v19 & 0x100) != 0)
LABEL_36:
            CFDictionarySetValue(v14, CFSTR("APPLE_IE_WOW_SUPPORTED"), *v20);
LABEL_37:
          CFDictionarySetValue(a3, CFSTR("APPLE_IE"), v14);
          v3 = 0;
LABEL_38:
          CFRelease(v14);
          return v3;
        }
LABEL_46:
        CFDictionarySetValue(v14, CFSTR("APPLE_IE_WSC_SOLICITABLE"), *v20);
        if ((v19 & 0x100) == 0)
          goto LABEL_37;
        goto LABEL_36;
      }
      return 4294963395;
    }
  }
  return v3;
}

uint64_t Apple80211ParseAppleDeviceIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  int v13;
  unsigned __int8 *v14;
  const void *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  CFDataRef v19;
  CFDataRef v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  CFStringRef v24;
  const void *v25;
  __CFDictionary *v26;
  const __CFString *v27;
  CFStringRef v28;
  CFStringRef v29;
  CFDataRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFDataRef v34;
  CFDataRef v35;
  unsigned __int8 v36;
  char valuePtr;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1 || !a2 || !a3)
    return v3;
  if (a2 < 2)
    return 0;
  v5 = a1;
  while (1)
  {
    v6 = v5[1];
    v7 = a2 >= (v6 + 2);
    a2 -= v6 + 2;
    if (!v7)
      return 0;
    if (v6 >= 4 && *v5 == 221 && Apple80211ParseAppleDeviceIE_signature == *(_DWORD *)(v5 + 2))
      break;
    v8 = (uint64_t)&v5[v6 + 2];
    if (a2 > 0)
      v5 = (unsigned __int8 *)v8;
    if (a2 <= 1)
      return 0;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v12 = Mutable;
  v13 = v5[1] - 4;
  if ((v5[1] - 4) < 2u)
  {
LABEL_101:
    CFDictionarySetValue(a3, CFSTR("APPLE_DEVICE_IE"), v12);
    v3 = 0;
    goto LABEL_102;
  }
  v14 = v5 + 6;
  v15 = (const void *)*MEMORY[0x24BDBD270];
  while (2)
  {
    v16 = v14[1];
    v17 = v13 - 2;
    if (v16 > (v13 - 2))
    {
LABEL_103:
      v3 = 4294963394;
      goto LABEL_102;
    }
    v18 = v14 + 2;
    switch(*v14)
    {
      case 0u:
        if (!v14[1])
          goto LABEL_103;
        v19 = CFDataCreate(v10, v14 + 2, v14[1]);
        if (!v19)
          goto LABEL_104;
        v20 = v19;
        CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_FLAGS"), v19);
        CFRelease(v20);
        v21 = (char)*v18;
        if (v21 < 0)
        {
          CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_AIRPLAY"), v15);
          LOBYTE(v21) = *v18;
          if ((*v18 & 0x40) == 0)
          {
LABEL_26:
            if ((v21 & 0x20) != 0)
            {
              CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_CONFIG_V1"), v15);
              LOBYTE(v21) = *v18;
              if ((*v18 & 0x10) == 0)
              {
LABEL_28:
                if ((v21 & 8) == 0)
                  goto LABEL_29;
                goto LABEL_80;
              }
            }
            else if ((v21 & 0x10) == 0)
            {
              goto LABEL_28;
            }
            CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_WOW"), v15);
            LOBYTE(v21) = *v18;
            if ((*v18 & 8) == 0)
            {
LABEL_29:
              if ((v21 & 4) == 0)
                goto LABEL_30;
              goto LABEL_81;
            }
LABEL_80:
            CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_INTERFERENCE_ROBUSTNESS"), v15);
            LOBYTE(v21) = *v18;
            if ((*v18 & 4) == 0)
            {
LABEL_30:
              if ((v21 & 2) == 0)
                goto LABEL_31;
              goto LABEL_82;
            }
LABEL_81:
            CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_REMOTE_PPPOE_SERVER"), v15);
            LOBYTE(v21) = *v18;
            if ((*v18 & 2) == 0)
            {
LABEL_31:
              if ((v21 & 1) == 0)
                goto LABEL_33;
              goto LABEL_32;
            }
LABEL_82:
            CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_WPS"), v15);
            if ((*v18 & 1) == 0)
            {
LABEL_33:
              if (v16 < 2)
                goto LABEL_76;
              v22 = (char)v14[3];
              if (v22 < 0)
              {
                CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_AIRPRINT"), v15);
                LOBYTE(v22) = v14[3];
                if ((v22 & 0x40) == 0)
                {
LABEL_37:
                  if ((v22 & 0x20) != 0)
                  {
                    CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_CARPLAY"), v15);
                    LOBYTE(v22) = v14[3];
                    if ((v22 & 0x10) == 0)
                    {
LABEL_39:
                      if ((v22 & 8) == 0)
                        goto LABEL_40;
                      goto LABEL_88;
                    }
                  }
                  else if ((v22 & 0x10) == 0)
                  {
                    goto LABEL_39;
                  }
                  CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_PROVIDES_INTERNET_ACCESS"), v15);
                  LOBYTE(v22) = v14[3];
                  if ((v22 & 8) == 0)
                  {
LABEL_40:
                    if ((v22 & 4) == 0)
                      goto LABEL_41;
                    goto LABEL_89;
                  }
LABEL_88:
                  CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_ACP_CONFIG_V1"), v15);
                  LOBYTE(v22) = v14[3];
                  if ((v22 & 4) == 0)
                  {
LABEL_41:
                    if ((v22 & 2) == 0)
                      goto LABEL_42;
                    goto LABEL_90;
                  }
LABEL_89:
                  CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_RECENT_PHYSICAL_CONTACT"), v15);
                  LOBYTE(v22) = v14[3];
                  if ((v22 & 2) == 0)
                  {
LABEL_42:
                    if ((v22 & 1) == 0)
                      goto LABEL_44;
                    goto LABEL_43;
                  }
LABEL_90:
                  CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_24GHZ_WIFI_NETWORKS"), v15);
                  if ((v14[3] & 1) == 0)
                  {
LABEL_44:
                    if (v16 < 3)
                      goto LABEL_76;
                    v23 = v14[4];
                    if ((v23 & 0x40) != 0)
                    {
                      CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_HOMEKIT"), v15);
                      v23 = v14[4];
                      if ((v23 & 0x20) == 0)
                      {
LABEL_47:
                        if ((v23 & 0x10) == 0)
                          goto LABEL_48;
                        goto LABEL_96;
                      }
                    }
                    else if ((v14[4] & 0x20) == 0)
                    {
                      goto LABEL_47;
                    }
                    CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_HOMEKIT_V2"), v15);
                    v23 = v14[4];
                    if ((v23 & 0x10) == 0)
                    {
LABEL_48:
                      if ((v23 & 8) == 0)
                        goto LABEL_49;
                      goto LABEL_97;
                    }
LABEL_96:
                    CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_BUFFERED_AIRPLAY"), v15);
                    v23 = v14[4];
                    if ((v23 & 8) == 0)
                    {
LABEL_49:
                      if ((v23 & 4) == 0)
                        goto LABEL_50;
                      goto LABEL_98;
                    }
LABEL_97:
                    CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_SECURE_WAC"), v15);
                    v23 = v14[4];
                    if ((v23 & 4) == 0)
                    {
LABEL_50:
                      if ((v23 & 2) == 0)
                        goto LABEL_51;
                      goto LABEL_99;
                    }
LABEL_98:
                    CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_HARDWARE_AUTH"), v15);
                    v23 = v14[4];
                    if ((v23 & 2) == 0)
                    {
LABEL_51:
                      if ((v23 & 1) == 0)
                        goto LABEL_76;
LABEL_100:
                      CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_CERT_AUTH"), v15);
                      goto LABEL_76;
                    }
LABEL_99:
                    CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_TOKEN_AUTH"), v15);
                    if ((v14[4] & 1) == 0)
                      goto LABEL_76;
                    goto LABEL_100;
                  }
LABEL_43:
                  CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_5GHZ_WIFI_NETWORKS"), v15);
                  goto LABEL_44;
                }
              }
              else if ((v22 & 0x40) == 0)
              {
                goto LABEL_37;
              }
              CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_SUPPORTS_IAP_OVER_WIFI"), v15);
              LOBYTE(v22) = v14[3];
              goto LABEL_37;
            }
LABEL_32:
            CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_WPS_ACTIVE"), v15);
            goto LABEL_33;
          }
        }
        else if ((v21 & 0x40) == 0)
        {
          goto LABEL_26;
        }
        CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_FEATURE_UNCONFIGURED"), v15);
        LOBYTE(v21) = *v18;
        goto LABEL_26;
      case 1u:
        if (!v14[1])
          goto LABEL_103;
        v24 = CFStringCreateWithBytes(v10, v14 + 2, v14[1], 0x8000100u, 0);
        if (!v24)
          goto LABEL_104;
        v25 = v24;
        v26 = v12;
        v27 = CFSTR("APPLE_DEVICE_IE_FRIENDLY_NAME");
        goto LABEL_75;
      case 2u:
        if (!v14[1])
          goto LABEL_103;
        v28 = CFStringCreateWithBytes(v10, v14 + 2, v14[1], 0x8000100u, 0);
        if (!v28)
          goto LABEL_104;
        v25 = v28;
        v26 = v12;
        v27 = CFSTR("APPLE_DEVICE_IE_MANUFACTURER_NAME");
        goto LABEL_75;
      case 3u:
        if (!v14[1])
          goto LABEL_103;
        v29 = CFStringCreateWithBytes(v10, v14 + 2, v14[1], 0x8000100u, 0);
        if (!v29)
          goto LABEL_104;
        v25 = v29;
        v26 = v12;
        v27 = CFSTR("APPLE_DEVICE_IE_MODEL_NAME");
        goto LABEL_75;
      case 4u:
        if (v16 < 3)
          goto LABEL_103;
        v30 = CFDataCreate(v10, v14 + 2, 3);
        if (!v30)
          goto LABEL_104;
        v25 = v30;
        v26 = v12;
        v27 = CFSTR("APPLE_DEVICE_IE_OUI");
        goto LABEL_75;
      case 5u:
        if (v16 < 2)
          goto LABEL_103;
        valuePtr = *v18;
        v31 = CFNumberCreate(v10, kCFNumberSInt8Type, &valuePtr);
        if (!v31)
          goto LABEL_104;
        v32 = v31;
        CFDictionarySetValue(v12, CFSTR("APPLE_DEVICE_IE_DWDS_ROLE"), v31);
        CFRelease(v32);
        v36 = v14[3];
        v33 = CFNumberCreate(v10, kCFNumberSInt8Type, &v36);
        if (!v33)
          goto LABEL_104;
        v25 = v33;
        v26 = v12;
        v27 = CFSTR("APPLE_DEVICE_IE_DWDS_FLAGS");
        goto LABEL_75;
      case 6u:
        if (v16 < 6)
          goto LABEL_103;
        v34 = CFDataCreate(v10, v14 + 2, 6);
        if (!v34)
          goto LABEL_104;
        v25 = v34;
        v26 = v12;
        v27 = CFSTR("APPLE_DEVICE_IE_BLUETOOTH_MAC");
        goto LABEL_75;
      case 7u:
        if (v16 < 6)
          goto LABEL_103;
        v35 = CFDataCreate(v10, v14 + 2, 6);
        if (v35)
        {
          v25 = v35;
          v26 = v12;
          v27 = CFSTR("APPLE_DEVICE_IE_DEVICE_ID");
LABEL_75:
          CFDictionarySetValue(v26, v27, v25);
          CFRelease(v25);
LABEL_76:
          v14 = &v18[v16];
          v13 = v17 - v16;
          if ((v17 - v16) <= 1u)
            goto LABEL_101;
          continue;
        }
LABEL_104:
        v3 = 4294963395;
LABEL_102:
        CFRelease(v12);
        return v3;
      default:
        goto LABEL_76;
    }
  }
}

uint64_t Apple80211Parse80211dIE(uint64_t a1, signed int a2, __CFDictionary *a3)
{
  uint64_t v3;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;
  unsigned int v9;
  char v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  CFStringRef v13;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  char cStr[2];
  _BYTE v18[254];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (a1 && a3)
  {
    if (a2 < 2)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        v5 = *(unsigned __int8 *)(a1 + 1);
        v6 = *(_BYTE *)a1 == 7 && v5 >= 6;
        if (v6 && (int)(v5 + 2) <= a2)
          break;
        a2 = a2 - v5 - 2;
        if (a2 >= 1)
        {
          v8 = a1 + *(unsigned __int8 *)(a1 + 1);
          a1 = v8 + 2;
          if (*(unsigned __int8 *)(v8 + 3) + 2 <= a2)
            continue;
        }
        return 0;
      }
      memset(v18, 0, sizeof(v18));
      *(_WORD *)cStr = *(_WORD *)(a1 + 2);
      if (v5 - 6 > 0xFFFFFFFC)
      {
        v10 = 0;
      }
      else
      {
        if ((v5 - 6) / 3 >= 0x53)
          v9 = 83;
        else
          v9 = (v5 - 6) / 3;
        memcpy(&v18[2], (const void *)(a1 + 5), 3 * v9 + 3);
        v10 = v9 + 1;
      }
      v18[1] = v10;
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
      if (v12)
      {
        v13 = v12;
        Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (Mutable)
        {
          v15 = Mutable;
          CFDictionarySetValue(Mutable, CFSTR("IE_KEY_80211D_COUNTRY_CODE"), v13);
          CFDictionarySetValue(a3, CFSTR("80211D_IE"), v15);
          CFRelease(v13);
          v3 = 0;
          v13 = (CFStringRef)v15;
        }
        else
        {
          v3 = 4294963395;
        }
        CFRelease(v13);
      }
      else
      {
        return 4294963395;
      }
    }
  }
  return v3;
}

uint64_t Apple80211GetPower(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = -1431655766;
  result = Apple80211GetPowerState(a1, &v4);
  *a2 = v4 == 1;
  return result;
}

uint64_t Apple80211ScanAsync()
{
  uint64_t v0;
  const __CFDictionary *v1;
  uint64_t v2;
  const __CFDictionary *v3;
  uint64_t result;
  pthread_mutex_t *v5;
  CFDictionaryRef Copy;
  __CFRunLoopTimer *v7;
  CFAbsoluteTime Current;
  NSObject *v9;
  dispatch_time_t v10;
  __int16 v11;
  Boolean v12;
  char v13;
  int v14;
  int v15;
  _QWORD __b[691];
  __int128 uu;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;

  v0 = MEMORY[0x24BDAC7A8]();
  v20 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v11 = 0;
  if (!v0)
    return 4294963396;
  v2 = v0;
  if ((*(_DWORD *)v0 & 0x80000000) != 0 || !*(_BYTE *)(v0 + 4))
    return 4294963396;
  v3 = v1;
  memset(__b, 170, sizeof(__b));
  v14 = -1431655766;
  v15 = -1431655766;
  v13 = -86;
  result = _getScanData(v3, (char *)__b, 0, &v13, &v14, &v15, &v12, (Boolean *)&v11 + 1, v2 + 88, (Boolean *)&v11);
  if (!(_DWORD)result)
  {
    *((_QWORD *)&uu + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&uu = 0xAAAAAAAAAAAAAAAALL;
    MEMORY[0x20BCF6BEC](&uu);
    uuid_unparse((const unsigned __int8 *)&uu, (char *)&__b[681] + 4);
    uu = 0u;
    v18 = 0u;
    v19 = 0;
    LODWORD(v18) = 10;
    __strlcpy_chk();
    DWORD2(v18) = 5528;
    v19 = __b;
    if (Apple80211RawSet())
    {
      return *__error();
    }
    else
    {
      __strlcpy_chk();
      v5 = (pthread_mutex_t *)(v2 + 160);
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 160));
      if (!*(_BYTE *)(v2 + 232))
      {
        if (v3)
          Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
        else
          Copy = 0;
        *(_QWORD *)(v2 + 144) = Copy;
        *(_QWORD *)(v2 + 240) = 0;
        *(_DWORD *)(v2 + 236) = v15;
        *(_BYTE *)(v2 + 232) = 1;
        *(_BYTE *)(v2 + 120) = v13;
        *(_BYTE *)(v2 + 121) = v12;
        *(_DWORD *)(v2 + 124) = v14;
        *(_QWORD *)(v2 + 224) = pthread_self();
        *(_DWORD *)(v2 + 264) = 0;
        *(_BYTE *)(v2 + 128) = HIBYTE(v11);
        *(_BYTE *)(v2 + 129) = v11;
        *(_QWORD *)(v2 + 136) = __b[609];
        v7 = *(__CFRunLoopTimer **)(v2 + 248);
        if (v7)
        {
          Current = CFAbsoluteTimeGetCurrent();
          CFRunLoopTimerSetNextFireDate(v7, Current + 315360000.0);
        }
        v9 = *(NSObject **)(v2 + 256);
        if (v9)
        {
          v10 = dispatch_time(0, 315360000000000000);
          dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
        }
      }
      pthread_mutex_unlock(v5);
      return 0;
    }
  }
  return result;
}

uint64_t _getScanData(const __CFDictionary *a1, char *a2, uint64_t a3, _BYTE *a4, _DWORD *a5, _DWORD *a6, Boolean *a7, Boolean *a8, uint64_t a9, Boolean *a10)
{
  const __CFArray *Value;
  const void *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFNumber *v22;
  uint64_t result;
  unint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  char v27;
  char *v28;
  CFIndex v29;
  _DWORD *v30;
  unint64_t v31;
  CFIndex v32;
  unint64_t v33;
  uint64_t v34;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v36;
  const __CFString *v37;
  const __CFString *v38;
  CFIndex Length;
  CFIndex v40;
  int v41;
  int v42;
  ether_addr *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  const __CFNumber *v48;
  const __CFBoolean *BoolRef;
  const __CFNumber *v50;
  const __CFBoolean *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  uint64_t v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  int v68;
  _DWORD *v69;
  const __CFNumber *v70;
  int v71;
  const __CFNumber *v72;
  int v73;
  const __CFNumber *v74;
  const __CFNumber *v75;
  const __CFNumber *v76;
  const __CFArray *v77;
  const __CFArray *v78;
  CFIndex v79;
  uint64_t v80;
  CFIndex v81;
  _DWORD *v82;
  uint64_t v83;
  const __CFDictionary *v84;
  const __CFDictionary *v85;
  const __CFNumber *v86;
  const __CFNumber *v87;
  const __CFNumber *v88;
  _BOOL4 v90;
  int v91;
  char v92;
  int v93;
  unint64_t v94;
  int v95;
  char *v96;
  int v97;
  const __CFNumber *v98;
  const __CFBoolean *v99;
  const __CFNumber *v100;
  Boolean v101;
  CFIndex Count;
  const __CFNumber *v103;
  const __CFString *v104;
  Boolean *v105;
  Boolean *v106;
  const __CFDictionary *v107;
  const __CFDictionary *v108;
  Boolean *v109;
  Boolean *v110;
  _DWORD *v111;
  char v112;
  _DWORD *v113;
  uint64_t v114;
  const __CFString *v115;
  _BYTE *v116;
  int v117;
  char *v118;
  int v119;
  int v120;
  __int16 v121;
  int valuePtr;
  unint64_t v123;
  CFIndex usedBufLen[6];
  CFRange v125;
  CFRange v126;

  usedBufLen[4] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294963396;
  bzero(a2, 0x1598uLL);
  *(_DWORD *)a2 = 1;
  if (!a1)
  {
    *((_DWORD *)a2 + 1) = 3;
    *(_QWORD *)(a2 + 52) = 0x100000001;
    if (a4)
      *a4 = 1;
    if (a6)
      *a6 = 1;
    result = 0;
    if (a5)
      *a5 = 0x80000000;
    return result;
  }
  v113 = a6;
  v114 = a3;
  v116 = a4;
  v118 = a2;
  v111 = a5;
  v123 = 0xAAAAAAAAAAAAAAAALL;
  valuePtr = -1431655766;
  v121 = -21846;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SCAN_SSID_LIST"));
  v19 = CFDictionaryGetValue(a1, CFSTR("SCAN_BSSID_LIST"));
  v20 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("SSID_STR"));
  v21 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("BSSID"));
  v112 = *(_BYTE *)(a9 + 11);
  if ((v112 & 0x40) != 0)
    v22 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_SHORT_SSID"));
  else
    v22 = 0;
  v24 = (unint64_t)v20 | (unint64_t)v21 | (unint64_t)v22;
  v25 = v24 != 0;
  v115 = v20;
  if (!v24)
  {
    if (!Value)
    {
      v42 = 0;
      v28 = v118;
      v30 = v113;
      goto LABEL_47;
    }
    v103 = v22;
    v104 = v21;
    v105 = a7;
    v107 = a1;
    v109 = a8;
    Count = CFArrayGetCount(Value);
    v31 = Count - 1;
    if (Count >= 1)
    {
      v32 = 0;
      if (v31 >= 9)
        v31 = 9;
      v33 = v31 + 1;
      v34 = (uint64_t)(v118 + 4888);
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v32);
        if (!ValueAtIndex)
          return 4294963396;
        v36 = ValueAtIndex;
        v37 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SSID_STR"));
        if (!v37)
          return 4294963396;
        v38 = v37;
        Length = CFStringGetLength(v37);
        if (Length > 32)
          return 4294963396;
        v40 = Length;
        *(_DWORD *)v34 = 1;
        usedBufLen[0] = 0;
        if (CFStringGetLength(v38))
        {
          v126.location = 0;
          v126.length = v40;
          if (!CFStringGetBytes(v38, v126, 0x8000100u, 0, 0, (UInt8 *)(v34 + 8), 32, usedBufLen))
            return 4294963396;
        }
        *(_DWORD *)(v34 + 4) = usedBufLen[0];
        __getNetworkSecurityParams(v36, v34, a9);
        ++v32;
        v34 += 56;
      }
      while (v33 != v32);
    }
    v22 = v103;
    v41 = 10;
    if (Count < 10)
      v41 = Count;
    v28 = v118;
    *((_DWORD *)v118 + 1221) = v41;
    a1 = v107;
    a8 = v109;
    v21 = v104;
    a7 = v105;
    v20 = v115;
    if (v115)
      goto LABEL_23;
LABEL_40:
    v30 = v113;
    if (v22)
    {
      CFNumberGetValue(v22, kCFNumberSInt32Type, v28 + 5448);
      v114 = 0;
      *((_DWORD *)v28 + 4) = 4;
    }
    goto LABEL_42;
  }
  if (v20)
    v26 = v22 == 0;
  else
    v26 = 1;
  v27 = !v26;
  v28 = v118;
  if (Value || v19 || (v27 & 1) != 0)
    return 4294963396;
  if (!v20)
    goto LABEL_40;
LABEL_23:
  v29 = CFStringGetLength(v20);
  v30 = v113;
  if ((unint64_t)(v29 - 33) < 0xFFFFFFFFFFFFFFE0)
    return 4294963396;
  v125.length = v29;
  usedBufLen[0] = 0xAAAAAAAAAAAAAAAALL;
  v125.location = 0;
  if (!CFStringGetBytes(v20, v125, 0x8000100u, 0, 0, (UInt8 *)v28 + 20, 32, usedBufLen))
    return 4294963396;
  v114 = 0;
  *((_DWORD *)v28 + 4) = usedBufLen[0];
LABEL_42:
  v42 = !v25;
  if (!v21)
  {
LABEL_47:
    v44 = v114;
    goto LABEL_48;
  }
  memset(usedBufLen, 170, 18);
  if (!CFStringGetCString(v21, (char *)usedBufLen, 18, 0x8000100u))
    return 4294963396;
  v43 = ether_aton((const char *)usedBufLen);
  if (!v43)
    return 4294963396;
  v44 = 0;
  v45 = *(_DWORD *)v43->octet;
  *((_WORD *)v28 + 6) = *(_WORD *)&v43->octet[4];
  *((_DWORD *)v28 + 2) = v45;
LABEL_48:
  if (v19)
    v46 = 1;
  else
    v46 = v42;
  if (v115)
    v46 = 1;
  if (v21)
    v46 = 1;
  if (v46)
    v47 = v44;
  else
    v47 = 0;
  if (v116)
  {
    v48 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_MERGE"));
    BoolRef = makeBoolRef(v48);
    if (BoolRef)
      LOBYTE(BoolRef) = CFBooleanGetValue(BoolRef);
    *v116 = (_BYTE)BoolRef;
  }
  if (a10)
  {
    v50 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_INC_BSS_LIST"));
    v51 = makeBoolRef(v50);
    if (v51)
      *a10 = CFBooleanGetValue(v51);
  }
  v52 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_FLAGS"));
  if (v52 && !CFNumberGetValue(v52, kCFNumberSInt32Type, v28 + 4872))
    return 4294963396;
  v53 = (const __CFNumber *)*MEMORY[0x24BDBD270];
  v54 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_LOW_PRIORITY"));
  if (v53 == makeBoolRef(v54))
    *((_QWORD *)v28 + 609) |= 2uLL;
  v55 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_LOW_LATENCY"));
  if (v53 == makeBoolRef(v55))
    *((_QWORD *)v28 + 609) |= 0x20uLL;
  v56 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_PRIO_OVERRIDE"));
  if (v53 == makeBoolRef(v56))
    *((_QWORD *)v28 + 609) |= 0x40uLL;
  v57 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_IS_THROTTLED"));
  if (v53 == makeBoolRef(v57))
    *((_QWORD *)v28 + 609) |= 0x80uLL;
  v58 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_ONLY_USE_LOW_POWER_CORE"));
  if (v53 == makeBoolRef(v58))
    *((_QWORD *)v28 + 609) |= 0x1000uLL;
  v59 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_INC_OFFCHANNEL_BSS"));
  if (v53 == makeBoolRef(v59))
    *((_QWORD *)v28 + 609) |= 8uLL;
  if ((v112 & 0x40) == 0)
  {
    v60 = *((_QWORD *)v28 + 609) & 0xFFFFF0FFLL;
LABEL_89:
    *((_QWORD *)v28 + 609) = v60;
    goto LABEL_90;
  }
  v61 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_6GHZ_FOLLOWUP"));
  if (v53 == makeBoolRef(v61))
    *((_QWORD *)v28 + 609) |= 0x100uLL;
  v62 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_INCL_FILS_DISC_FRAMES"));
  if (v53 == makeBoolRef(v62))
    *((_QWORD *)v28 + 609) |= 0x200uLL;
  v63 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_SKIP_FILS_DISC_PERIOD"));
  if (v53 == makeBoolRef(v63))
    *((_QWORD *)v28 + 609) |= 0x400uLL;
  v64 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_INCL_ORIG_RNR"));
  if (v53 == makeBoolRef(v64))
  {
    v60 = *((_QWORD *)v28 + 609) | 0x800;
    goto LABEL_89;
  }
LABEL_90:
  *((_DWORD *)v28 + 1220) = 0x80000000;
  v65 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_RSSI_THRESHOLD"));
  if (v65 && !CFNumberGetValue(v65, kCFNumberSInt32Type, v28 + 4880))
    return 4294963396;
  if (v111)
    *v111 = *((_DWORD *)v28 + 1220);
  if (v30)
  {
    v66 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_NUM_SCANS"));
    if (v66)
    {
      if (!CFNumberGetValue(v66, kCFNumberSInt32Type, v30))
        return 4294963396;
    }
    else
    {
      *v30 = 1;
    }
  }
  v67 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_TYPE"));
  if (v67)
  {
    if (!CFNumberGetValue(v67, kCFNumberSInt32Type, &valuePtr))
      return 4294963396;
    v68 = valuePtr;
  }
  else
  {
    v68 = 1;
  }
  *((_DWORD *)v28 + 13) = v68;
  v69 = v28 + 52;
  v70 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_BSS_TYPE"));
  if (v70)
  {
    if (!CFNumberGetValue(v70, kCFNumberSInt32Type, &valuePtr))
      return 4294963396;
    v71 = valuePtr;
  }
  else
  {
    v71 = 3;
  }
  *((_DWORD *)v28 + 1) = v71;
  v72 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_PHY_MODE"));
  if (v72)
  {
    if (!CFNumberGetValue(v72, kCFNumberSInt32Type, &valuePtr))
      return 4294963396;
    v73 = valuePtr;
  }
  else
  {
    v73 = 1;
  }
  *((_DWORD *)v28 + 14) = v73;
  v74 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_DWELL_TIME"));
  if (v74)
  {
    if (!CFNumberGetValue(v74, kCFNumberSInt16Type, &v121))
      return 4294963396;
    *((_WORD *)v28 + 30) = v121;
  }
  v75 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_REST_TIME"));
  if (v75)
  {
    if (!CFNumberGetValue(v75, kCFNumberSInt32Type, &valuePtr))
      return 4294963396;
    *((_DWORD *)v28 + 16) = valuePtr;
  }
  v76 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_MIN_TIMESTAMP"));
  if (v76)
  {
    if (CFNumberGetValue(v76, kCFNumberSInt64Type, &v123))
    {
      *((_QWORD *)v28 + 690) = v123;
      goto LABEL_120;
    }
    return 4294963396;
  }
LABEL_120:
  v77 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SCAN_CHANNELS"));
  if (v77)
  {
    v78 = v77;
    v79 = CFArrayGetCount(v77);
    v120 = -1431655766;
    v119 = -1431655766;
    if (v79 >= 1)
    {
      v106 = a7;
      v108 = a1;
      v110 = a8;
      v117 = 0;
      v80 = 0;
      v81 = 0;
      if (v47)
        v82 = (_DWORD *)(v47 + 512);
      else
        v82 = v69;
      if ((unint64_t)(v79 - 1) >= 0x18F)
        v83 = 399;
      else
        v83 = v79 - 1;
      while (1)
      {
        v84 = (const __CFDictionary *)CFArrayGetValueAtIndex(v78, v81);
        if (!v84)
          return 4294963396;
        v85 = v84;
        v86 = (const __CFNumber *)CFDictionaryGetValue(v84, CFSTR("CHANNEL"));
        if (!v86 || !CFNumberGetValue(v86, kCFNumberSInt32Type, &v120))
          return 4294963396;
        v87 = (const __CFNumber *)CFDictionaryGetValue(v85, CFSTR("CHANNEL_FLAGS"));
        v88 = v87;
        if (v87)
        {
          if (!CFNumberGetValue(v87, kCFNumberSInt32Type, &v119))
            return 4294963396;
        }
        else
        {
          v119 = 0;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            LODWORD(usedBufLen[0]) = 67109120;
            HIDWORD(usedBufLen[0]) = v120;
            _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Missing channel flags for scan channel (%u)", (uint8_t *)usedBufLen, 8u);
          }
        }
        if (!CFNumberGetValue(v88, kCFNumberSInt32Type, &v119))
          return 4294963396;
        v90 = *v69 == 1 && v21 != 0;
        v91 = v119;
        if ((v119 & 0x2000) == 0 || *v82 == 3 || v90)
        {
          v93 = v120;
        }
        else
        {
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            v97 = v120;
            v117 = v120;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              LODWORD(usedBufLen[0]) = 67109120;
              HIDWORD(usedBufLen[0]) = v97;
              _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Excluding 6GHz scan channel (%u)", (uint8_t *)usedBufLen, 8u);
            }
            goto LABEL_158;
          }
          v92 = _os_feature_enabled_impl();
          v93 = v120;
          v91 = v119;
          if ((v92 & 1) == 0)
          {
            if ((~v119 & 0x2002) != 0)
              goto LABEL_179;
            v94 = 0;
            do
            {
              v95 = k6GHzPSC[v94];
              if (v94 > 0xD)
                break;
              ++v94;
            }
            while (v95 != v120);
            if (v95 != v120)
            {
LABEL_179:
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                LODWORD(usedBufLen[0]) = 67109120;
                HIDWORD(usedBufLen[0]) = v93;
                _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Excluding 6GHz non-PSC scan channel (%u)", (uint8_t *)usedBufLen, 8u);
              }
              v117 = v93;
              goto LABEL_158;
            }
          }
        }
        v96 = &v118[12 * v80];
        *((_DWORD *)v96 + 18) = 1;
        *((_DWORD *)v96 + 19) = v93;
        *((_DWORD *)v96 + 20) = v91;
        ++v80;
LABEL_158:
        v26 = v81++ == v83;
        if (v26)
        {
          if (v80)
          {
            a1 = v108;
            a8 = v110;
            a7 = v106;
          }
          else
          {
            a1 = v108;
            a8 = v110;
            a7 = v106;
            if (v117)
            {
              *((_DWORD *)v118 + 13) = 3;
              *((_QWORD *)v118 + 9) = 1;
              *((_DWORD *)v118 + 20) = 0;
              LODWORD(v80) = 1;
            }
          }
          goto LABEL_169;
        }
      }
    }
    LODWORD(v80) = 0;
LABEL_169:
    *((_DWORD *)v118 + 17) = v80;
  }
  if (a7)
  {
    v98 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("MONITOR_QBSS_LOAD"));
    v99 = makeBoolRef(v98);
    if (v99)
      *a7 = CFBooleanGetValue(v99);
  }
  if (!a8)
    return 0;
  v100 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SCAN_TRIM_RESULTS"));
  result = (uint64_t)makeBoolRef(v100);
  if (result)
  {
    v101 = CFBooleanGetValue((CFBooleanRef)result);
    result = 0;
    *a8 = v101;
  }
  return result;
}

const __CFNumber *makeBoolRef(const __CFNumber *cf)
{
  const __CFNumber *v1;
  CFTypeID v2;
  uint64_t v3;
  int valuePtr;
  uint64_t v6;

  v1 = cf;
  v6 = *MEMORY[0x24BDAC8D0];
  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (v2 == CFNumberGetTypeID())
    {
      valuePtr = -1431655766;
      if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr))
      {
        v3 = MEMORY[0x24BDBD268];
        if (valuePtr)
          v3 = MEMORY[0x24BDBD270];
        return *(const __CFNumber **)v3;
      }
    }
  }
  return v1;
}

uint64_t Apple80211GetPowerState(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int Count;
  CFIndex v5;
  const __CFNumber *ValueAtIndex;

  *a2 = 0;
  v3 = Apple80211CopyValue();
  if (!(_DWORD)v3)
  {
    Count = CFArrayGetCount((CFArrayRef)0xAAAAAAAAAAAAAAAALL);
    if (Count >= 1)
    {
      v5 = 0;
      do
      {
        while (1)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)0xAAAAAAAAAAAAAAAALL, v5);
          if (ValueAtIndex)
            break;
          if ((int)++v5 >= Count)
            goto LABEL_11;
        }
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a2);
        ++v5;
      }
      while (*a2 != 1 && (int)v5 < Count);
    }
LABEL_11:
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  }
  return v3;
}

uint64_t Apple80211CopyValue()
{
  uint64_t v0;
  int v1;
  const __CFDictionary *v2;
  CFMutableStringRef *v3;
  CFMutableStringRef *v4;
  uint64_t v5;
  const __CFDictionary *v6;
  int v7;
  CFMutableStringRef v8;
  char v9;
  unsigned int v10;
  size_t v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const __CFAllocator *v16;
  char *v17;
  CFNumberRef v18;
  char v19;
  __CFString *Mutable;
  uint64_t v22;
  const void *Value;
  const void *v24;
  __CFDictionary *v25;
  int v26;
  _DWORD __b[3852];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v0 = MEMORY[0x24BDAC7A8]();
  v31 = *MEMORY[0x24BDAC8D0];
  if (!v0 || (*(_DWORD *)v0 & 0x80000000) != 0)
    return 4294963396;
  v4 = v3;
  v5 = 4294963396;
  if (!v3 || !*(_BYTE *)(v0 + 4))
    return v5;
  v6 = v2;
  v7 = v1;
  memset(__b, 170, sizeof(__b));
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  __strlcpy_chk();
  LODWORD(v29) = v7;
  bzero(__b, 0x3C30uLL);
  __b[0] = -1071093303;
  __strlcpy_chk();
  __b[3846] = v7;
  if ((int)v29 <= 247)
  {
    v5 = 4294963394;
    switch((int)v29)
    {
      case -1:
        return v5;
      case 0:
      case 3:
      case 10:
      case 11:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
      case 30:
      case 46:
      case 47:
      case 48:
      case 56:
      case 67:
      case 68:
      case 69:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 80:
      case 81:
      case 82:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 98:
      case 99:
      case 100:
      case 101:
      case 105:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
        return 4294963393;
      case 1:
      case 40:
        Mutable = (__CFString *)CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
        goto LABEL_44;
      case 2:
      case 4:
      case 6:
      case 7:
      case 14:
      case 16:
      case 17:
      case 29:
      case 49:
      case 53:
      case 54:
      case 61:
      case 62:
      case 103:
      case 106:
      case 115:
        goto LABEL_30;
      case 5:
      case 8:
      case 15:
      case 18:
      case 21:
      case 26:
      case 28:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 41:
      case 45:
      case 50:
      case 52:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 64:
      case 70:
      case 102:
      case 104:
        goto LABEL_7;
      case 9:
      case 43:
      case 44:
      case 51:
      case 97:
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
        goto LABEL_44;
      case 12:
      case 19:
      case 27:
      case 32:
      case 37:
      case 38:
      case 39:
      case 42:
      case 66:
      case 83:
        goto LABEL_43;
      case 13:
        v26 = 0;
        v22 = Apple80211GetWithIOCTL();
        if ((_DWORD)v22)
          return v22;
        v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v17 = (char *)&v26;
        goto LABEL_24;
      case 65:
        Value = CFDictionaryGetValue(v6, CFSTR("MODE"));
        if (!Value)
          return 4294963396;
        v24 = Value;
        v25 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        *v4 = (CFMutableStringRef)v25;
        if (!v25)
          return 4294963395;
        CFDictionarySetValue(v25, CFSTR("MODE"), v24);
        goto LABEL_45;
      case 79:
        return Apple80211GetWithIOCTL();
      default:
        if ((_DWORD)v29 == 166)
          goto LABEL_7;
        if ((_DWORD)v29 != 207)
          return 4294963393;
        goto LABEL_43;
    }
  }
  if ((int)v29 <= 367)
  {
    switch((int)v29)
    {
      case 248:
        v8 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
        *v4 = v8;
        if (!v8)
          return 4294963395;
        v9 = 1;
        v10 = 0x2000;
        break;
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
      case 255:
      case 257:
      case 260:
      case 262:
      case 263:
        return 4294963393;
      case 254:
        goto LABEL_43;
      case 256:
      case 258:
      case 259:
      case 261:
        goto LABEL_7;
      case 264:
        goto LABEL_30;
      default:
        if ((_DWORD)v29 != 353)
          return 4294963393;
        goto LABEL_7;
    }
LABEL_15:
    v11 = v10;
    do
    {
      v12 = v9;
      v13 = malloc_type_malloc(v11, 0xDBB56C4CuLL);
      if (!v13)
        goto LABEL_22;
      v14 = v13;
      v15 = Apple80211GetWithIOCTL();
      if ((_DWORD)v15 == -3901)
      {
        v10 = 2 * v11;
        free(v14);
        v9 = 0;
        if ((v12 & 1) != 0)
          goto LABEL_15;
LABEL_22:
        v5 = 4294963395;
        goto LABEL_46;
      }
      v5 = v15;
      if (!(_DWORD)v15)
      {
        *((_BYTE *)v14 + (v11 - 1)) = 0;
        CFStringAppendCString(*v4, (const char *)v14, 0x8000100u);
        free(v14);
        return v5;
      }
      free(v14);
      v9 = 0;
    }
    while ((v12 & 1) != 0);
    if (!(_DWORD)v5)
      return v5;
LABEL_46:
    CFRelease(*v4);
    *v4 = 0;
    return v5;
  }
  v19 = v29 - 112;
  if ((v29 - 368) > 0x37)
    goto LABEL_42;
  if (((1 << v19) & 0x80008022000000) != 0)
  {
LABEL_7:
    if (!Apple80211IOCTLGetWrapper())
    {
      v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = (char *)&v29 + 4;
LABEL_24:
      v18 = CFNumberCreate(v16, kCFNumberIntType, v17);
      *v4 = (CFMutableStringRef)v18;
      if (v18)
        return 0;
      else
        return 4294963395;
    }
    if (*__error() == 102 || *__error() == 6)
      return 4294963393;
    if (*__error() != 22)
      return *__error();
    return 4294963396;
  }
  if (((1 << v19) & 0x40080) != 0)
  {
LABEL_30:
    Mutable = (__CFString *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    goto LABEL_44;
  }
  if ((_DWORD)v29 != 368)
  {
LABEL_42:
    if ((_DWORD)v29 == 516)
      goto LABEL_43;
    return 4294963393;
  }
LABEL_43:
  Mutable = (__CFString *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
LABEL_44:
  *v4 = Mutable;
  if (!Mutable)
    return 4294963395;
LABEL_45:
  v5 = Apple80211GetWithIOCTL();
  if ((_DWORD)v5)
    goto LABEL_46;
  return v5;
}

uint64_t Apple80211GetWithIOCTL()
{
  uint64_t v0;
  __CFDictionary *v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  __CFDictionary *v6;
  uint64_t v7;
  int v8;
  UInt8 *v9;
  UInt8 *v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFDataRef v14;
  CFDataRef v15;
  uint64_t RoamProfile;
  const __CFAllocator *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  __CFDictionary *v37;
  const __CFString *v38;
  unint64_t v39;
  const __CFAllocator *v40;
  char *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  unint64_t v44;
  const __CFAllocator *v45;
  _OWORD *v46;
  const CFDictionaryKeyCallBacks *v47;
  const CFDictionaryValueCallBacks *v48;
  CFMutableDictionaryRef v49;
  __CFDictionary *v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  int v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFAllocator *v60;
  CFNumberRef v61;
  CFNumberRef v62;
  const __CFString *v63;
  CFNumberRef v64;
  CFNumberRef v65;
  __CFDictionary *v66;
  int v67;
  const __CFNumber *v68;
  const __CFArray *v69;
  unint64_t v70;
  const __CFAllocator *v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFAllocatorRef *v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  __int128 v82;
  int v83;
  UInt8 *v84;
  const __CFAllocator *v85;
  CFNumberRef v86;
  CFNumberRef v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  CFNumberRef v91;
  CFNumberRef v92;
  CFNumberRef v93;
  CFNumberRef v94;
  CFNumberRef v95;
  CFNumberRef v96;
  CFNumberRef v97;
  CFNumberRef v98;
  CFNumberRef v99;
  CFNumberRef v100;
  const __CFString *v101;
  const __CFAllocator *v102;
  CFNumberRef v103;
  CFNumberRef v104;
  CFNumberRef v105;
  CFNumberRef v106;
  CFNumberRef v107;
  const __CFAllocator *v108;
  CFNumberRef v109;
  CFNumberRef v110;
  CFNumberRef v111;
  const __CFAllocator *v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  const __CFAllocator *v116;
  CFNumberRef v117;
  CFNumberRef v118;
  CFNumberRef v119;
  int v120;
  const __CFAllocator *v121;
  CFNumberRef v122;
  CFNumberRef v123;
  BOOL v124;
  const __CFAllocator *v125;
  CFNumberRef v126;
  CFNumberRef v127;
  CFNumberRef v128;
  unint64_t v129;
  const __CFAllocator *v130;
  char *v131;
  CFNumberRef v132;
  CFNumberRef v133;
  const __CFAllocator *v134;
  CFNumberRef v135;
  CFNumberRef v136;
  char *v137;
  CFStringRef v138;
  unint64_t v139;
  const __CFAllocator *v140;
  _OWORD *v141;
  const CFDictionaryValueCallBacks *v142;
  CFMutableDictionaryRef v143;
  __CFDictionary *v144;
  CFNumberRef v145;
  CFNumberRef v146;
  CFNumberRef v147;
  CFNumberRef v148;
  unint64_t v149;
  const __CFAllocator *v150;
  char *v151;
  const CFDictionaryKeyCallBacks *v152;
  const CFDictionaryValueCallBacks *v153;
  char *v154;
  const char *v155;
  CFMutableDictionaryRef v156;
  CFStringRef v157;
  CFStringRef v158;
  CFNumberRef v159;
  CFNumberRef v160;
  const __CFAllocator *v161;
  CFNumberRef v162;
  CFNumberRef v163;
  CFNumberRef v164;
  CFNumberRef v165;
  CFNumberRef v166;
  CFNumberRef v167;
  CFNumberRef v168;
  const __CFAllocator *v169;
  CFNumberRef v170;
  CFNumberRef v171;
  CFNumberRef v172;
  CFNumberRef v173;
  CFNumberRef v174;
  CFNumberRef v175;
  char *v176;
  CFStringRef v177;
  CFNumberRef v178;
  const __CFAllocator *v179;
  CFNumberRef v180;
  CFNumberRef v181;
  CFNumberRef v182;
  const void *v183;
  const void *v184;
  const void *v185;
  const void *v186;
  const void *v187;
  const void *v188;
  const __CFString *v189;
  const __CFNumber *Value;
  const __CFAllocator *v191;
  CFNumberRef v192;
  CFNumberRef v193;
  CFNumberRef v194;
  int v195;
  const __CFAllocator *v196;
  CFNumberRef v197;
  CFNumberRef v198;
  _DWORD *v199;
  _DWORD *v200;
  uint64_t v201;
  const __CFString *v202;
  ether_addr *v203;
  ether_addr *v204;
  int v205;
  CFDataRef v206;
  const __CFString *v207;
  ether_addr *v208;
  __int16 v209;
  const __CFAllocator *v210;
  CFNumberRef v211;
  CFNumberRef v212;
  CFNumberRef v213;
  const __CFAllocator *v214;
  CFNumberRef v215;
  CFNumberRef v216;
  CFNumberRef v217;
  char v218;
  unint64_t v219;
  const __CFAllocator *v220;
  const ether_addr *v221;
  const CFDictionaryKeyCallBacks *v222;
  const CFDictionaryValueCallBacks *v223;
  CFMutableDictionaryRef v224;
  CFNumberRef v225;
  CFNumberRef v226;
  CFNumberRef v227;
  CFNumberRef v228;
  char *v229;
  CFStringRef v230;
  CFStringRef v231;
  const __CFAllocator *v232;
  CFNumberRef v233;
  CFNumberRef v234;
  CFNumberRef v235;
  CFNumberRef v236;
  CFNumberRef v237;
  const __CFData *v238;
  const __CFData *v239;
  const __CFAllocator *v240;
  CFNumberRef v241;
  CFNumberRef v242;
  CFNumberRef v243;
  CFNumberRef v244;
  CFDataRef v245;
  const char *v246;
  const __CFAllocator *v247;
  CFNumberRef v248;
  CFNumberRef v249;
  CFNumberRef v250;
  CFNumberRef v251;
  CFNumberRef v252;
  const __CFAllocator *v253;
  CFNumberRef v254;
  CFNumberRef v255;
  CFNumberRef v256;
  CFNumberRef v257;
  CFNumberRef v258;
  CFNumberRef v259;
  CFNumberRef v260;
  CFNumberRef v261;
  CFNumberRef v262;
  CFNumberRef v263;
  CFNumberRef v264;
  CFNumberRef v265;
  CFNumberRef v266;
  CFNumberRef v267;
  CFNumberRef v268;
  CFNumberRef v269;
  CFNumberRef v270;
  CFNumberRef v271;
  CFNumberRef v272;
  CFNumberRef v273;
  CFNumberRef v274;
  CFNumberRef v275;
  CFNumberRef v276;
  CFNumberRef v277;
  CFNumberRef v278;
  CFNumberRef v279;
  CFNumberRef v280;
  CFNumberRef v281;
  CFNumberRef v282;
  CFNumberRef v283;
  CFNumberRef v284;
  CFNumberRef v285;
  CFNumberRef v286;
  CFNumberRef v287;
  CFNumberRef v288;
  CFNumberRef v289;
  CFNumberRef v290;
  CFNumberRef v291;
  CFNumberRef v292;
  CFNumberRef v293;
  CFNumberRef v294;
  CFNumberRef v295;
  CFNumberRef v296;
  CFNumberRef v297;
  CFNumberRef v298;
  CFNumberRef v299;
  CFNumberRef v300;
  CFNumberRef v301;
  CFNumberRef v302;
  CFNumberRef v303;
  CFNumberRef v304;
  CFNumberRef v305;
  CFNumberRef v306;
  CFNumberRef v307;
  CFNumberRef v308;
  CFNumberRef v309;
  CFNumberRef v310;
  CFNumberRef v311;
  CFNumberRef v312;
  CFNumberRef v313;
  CFNumberRef v314;
  CFNumberRef v315;
  CFNumberRef v316;
  CFNumberRef v317;
  CFNumberRef v318;
  CFNumberRef v319;
  CFNumberRef v320;
  CFNumberRef v321;
  CFNumberRef v322;
  CFNumberRef v323;
  CFNumberRef v324;
  CFNumberRef v325;
  CFNumberRef v326;
  CFNumberRef v327;
  CFNumberRef v328;
  CFNumberRef v329;
  CFNumberRef v330;
  CFNumberRef v331;
  CFNumberRef v332;
  CFNumberRef v333;
  CFNumberRef v334;
  CFNumberRef v335;
  CFNumberRef v336;
  CFNumberRef v337;
  CFNumberRef v338;
  CFNumberRef v339;
  CFNumberRef v340;
  CFNumberRef v341;
  CFNumberRef v342;
  CFNumberRef v343;
  CFNumberRef v344;
  CFNumberRef v345;
  CFNumberRef v346;
  CFNumberRef v347;
  CFNumberRef v348;
  CFNumberRef v349;
  CFNumberRef v350;
  CFNumberRef v351;
  CFNumberRef v352;
  CFNumberRef v353;
  CFNumberRef v354;
  CFNumberRef v355;
  CFNumberRef v356;
  CFNumberRef v357;
  CFNumberRef v358;
  CFNumberRef v359;
  CFNumberRef v360;
  CFNumberRef v361;
  CFNumberRef v362;
  CFNumberRef v363;
  CFNumberRef v364;
  CFNumberRef v365;
  CFNumberRef v366;
  CFNumberRef v367;
  CFNumberRef v368;
  CFNumberRef v369;
  CFNumberRef v370;
  CFNumberRef v371;
  CFNumberRef v372;
  CFNumberRef v373;
  CFNumberRef v374;
  CFNumberRef v375;
  CFNumberRef v376;
  CFNumberRef v377;
  CFNumberRef v378;
  CFNumberRef v379;
  CFNumberRef v380;
  CFNumberRef v381;
  CFNumberRef v382;
  CFNumberRef v383;
  CFNumberRef v384;
  CFNumberRef v385;
  CFNumberRef v386;
  CFNumberRef v387;
  CFNumberRef v388;
  CFNumberRef v389;
  CFNumberRef v390;
  CFNumberRef v391;
  CFNumberRef v392;
  CFNumberRef v393;
  CFNumberRef v394;
  CFNumberRef v395;
  CFNumberRef v396;
  CFNumberRef v397;
  CFNumberRef v398;
  CFNumberRef v399;
  CFNumberRef v400;
  CFNumberRef v401;
  CFNumberRef v402;
  CFNumberRef v403;
  CFNumberRef v404;
  CFNumberRef v405;
  CFNumberRef v406;
  CFNumberRef v407;
  CFNumberRef v408;
  CFNumberRef v409;
  CFNumberRef v410;
  CFNumberRef v411;
  CFNumberRef v412;
  CFNumberRef v413;
  CFNumberRef v414;
  CFNumberRef v415;
  CFNumberRef v416;
  CFNumberRef v417;
  CFNumberRef v418;
  CFNumberRef v419;
  CFNumberRef v420;
  CFNumberRef v421;
  CFNumberRef v422;
  CFNumberRef v423;
  CFNumberRef v424;
  CFNumberRef v425;
  CFNumberRef v426;
  CFNumberRef v427;
  CFNumberRef v428;
  CFNumberRef v429;
  CFNumberRef v430;
  CFNumberRef v431;
  CFNumberRef v432;
  CFNumberRef v433;
  CFNumberRef v434;
  CFNumberRef v435;
  CFNumberRef v436;
  CFNumberRef v437;
  CFNumberRef v438;
  CFNumberRef v439;
  CFNumberRef v440;
  CFNumberRef v441;
  CFNumberRef v442;
  CFNumberRef v443;
  CFNumberRef v444;
  CFNumberRef v445;
  CFNumberRef v446;
  CFNumberRef v447;
  CFNumberRef v448;
  CFNumberRef v449;
  CFNumberRef v450;
  CFNumberRef v451;
  CFNumberRef v452;
  CFNumberRef v453;
  CFNumberRef v454;
  CFNumberRef v455;
  CFNumberRef v456;
  CFNumberRef v457;
  CFNumberRef v458;
  CFNumberRef v459;
  CFNumberRef v460;
  CFNumberRef v461;
  CFNumberRef v462;
  CFNumberRef v463;
  CFNumberRef v464;
  CFNumberRef v465;
  CFNumberRef v466;
  CFNumberRef v467;
  CFNumberRef v468;
  CFNumberRef v469;
  CFNumberRef v470;
  CFNumberRef v471;
  CFNumberRef v472;
  CFNumberRef v473;
  CFNumberRef v474;
  CFNumberRef v475;
  CFNumberRef v476;
  CFNumberRef v477;
  CFNumberRef v478;
  CFNumberRef v479;
  CFNumberRef v480;
  CFNumberRef v481;
  CFNumberRef v482;
  CFNumberRef v483;
  CFNumberRef v484;
  CFNumberRef v485;
  CFNumberRef v486;
  CFNumberRef v487;
  CFNumberRef v488;
  CFNumberRef v489;
  CFNumberRef v490;
  CFNumberRef v491;
  CFNumberRef v492;
  CFNumberRef v493;
  CFNumberRef v494;
  CFNumberRef v495;
  CFNumberRef v496;
  CFNumberRef v497;
  CFNumberRef v498;
  CFNumberRef v499;
  CFNumberRef v500;
  CFNumberRef v501;
  CFNumberRef v502;
  CFNumberRef v503;
  CFNumberRef v504;
  CFNumberRef v505;
  CFNumberRef v506;
  CFNumberRef v507;
  CFNumberRef v508;
  CFNumberRef v509;
  CFNumberRef v510;
  CFNumberRef v511;
  CFNumberRef v512;
  CFNumberRef v513;
  CFNumberRef v514;
  CFNumberRef v515;
  CFNumberRef v516;
  CFNumberRef v517;
  CFNumberRef v518;
  CFNumberRef v519;
  CFNumberRef v520;
  CFNumberRef v521;
  CFNumberRef v522;
  CFNumberRef v523;
  CFNumberRef v524;
  CFNumberRef v525;
  CFNumberRef v526;
  CFNumberRef v527;
  CFNumberRef v528;
  CFNumberRef v529;
  CFNumberRef v530;
  CFNumberRef v531;
  CFNumberRef v532;
  CFNumberRef v533;
  CFNumberRef v534;
  CFNumberRef v535;
  CFNumberRef v536;
  CFNumberRef v537;
  CFNumberRef v538;
  CFNumberRef v539;
  CFNumberRef v540;
  CFNumberRef v541;
  CFNumberRef v542;
  CFNumberRef v543;
  CFNumberRef v544;
  CFNumberRef v545;
  CFNumberRef v546;
  CFNumberRef v547;
  CFNumberRef v548;
  CFNumberRef v549;
  CFNumberRef v550;
  CFNumberRef v551;
  CFNumberRef v552;
  CFNumberRef v553;
  CFNumberRef v554;
  CFNumberRef v555;
  CFNumberRef v556;
  CFNumberRef v557;
  CFNumberRef v558;
  CFNumberRef v559;
  CFNumberRef v560;
  CFNumberRef v561;
  CFNumberRef v562;
  CFNumberRef v563;
  CFNumberRef v564;
  CFNumberRef v565;
  CFNumberRef v566;
  CFNumberRef v567;
  CFNumberRef v568;
  CFNumberRef v569;
  CFNumberRef v570;
  CFNumberRef v571;
  CFNumberRef v572;
  CFNumberRef v573;
  CFNumberRef v574;
  CFNumberRef v575;
  CFNumberRef v576;
  CFNumberRef v577;
  CFNumberRef v578;
  CFNumberRef v579;
  CFNumberRef v580;
  CFNumberRef v581;
  CFNumberRef v582;
  CFNumberRef v583;
  CFNumberRef v584;
  CFNumberRef v585;
  CFNumberRef v586;
  CFNumberRef v587;
  CFNumberRef v588;
  CFNumberRef v589;
  CFNumberRef v590;
  CFNumberRef v591;
  CFNumberRef v592;
  CFNumberRef v593;
  CFNumberRef v594;
  CFNumberRef v595;
  CFNumberRef v596;
  CFNumberRef v597;
  CFNumberRef v598;
  CFNumberRef v599;
  CFNumberRef v600;
  CFNumberRef v601;
  CFNumberRef v602;
  CFNumberRef v603;
  CFNumberRef v604;
  CFNumberRef v605;
  CFNumberRef v606;
  CFNumberRef v607;
  CFNumberRef v608;
  CFNumberRef v609;
  CFNumberRef v610;
  CFNumberRef v611;
  CFNumberRef v612;
  CFNumberRef v613;
  CFNumberRef v614;
  CFNumberRef v615;
  CFNumberRef v616;
  CFNumberRef v617;
  CFNumberRef v618;
  CFNumberRef v619;
  CFNumberRef v620;
  CFNumberRef v621;
  CFNumberRef v622;
  CFNumberRef v623;
  CFNumberRef v624;
  CFNumberRef v625;
  CFNumberRef v626;
  CFNumberRef v627;
  CFNumberRef v628;
  CFNumberRef v629;
  CFNumberRef v630;
  CFNumberRef v631;
  CFNumberRef v632;
  CFNumberRef v633;
  CFNumberRef v634;
  CFNumberRef v635;
  CFNumberRef v636;
  CFNumberRef v637;
  CFNumberRef v638;
  CFNumberRef v639;
  CFNumberRef v640;
  CFNumberRef v641;
  CFNumberRef v642;
  CFNumberRef v643;
  CFNumberRef v644;
  CFNumberRef v645;
  CFNumberRef v646;
  CFNumberRef v647;
  CFNumberRef v648;
  CFNumberRef v649;
  CFNumberRef v650;
  CFNumberRef v651;
  CFNumberRef v652;
  CFNumberRef v653;
  CFNumberRef v654;
  CFNumberRef v655;
  CFNumberRef v656;
  CFNumberRef v657;
  CFNumberRef v658;
  CFNumberRef v659;
  CFNumberRef v660;
  CFNumberRef v661;
  CFNumberRef v662;
  CFNumberRef v663;
  CFNumberRef v664;
  CFNumberRef v665;
  CFNumberRef v666;
  CFNumberRef v667;
  CFNumberRef v668;
  CFNumberRef v669;
  CFNumberRef v670;
  CFNumberRef v671;
  CFNumberRef v672;
  CFNumberRef v673;
  CFNumberRef v674;
  CFNumberRef v675;
  CFNumberRef v676;
  CFNumberRef v677;
  CFNumberRef v678;
  CFNumberRef v679;
  CFNumberRef v680;
  CFNumberRef v681;
  CFNumberRef v682;
  CFNumberRef v683;
  CFNumberRef v684;
  CFNumberRef v685;
  CFNumberRef v686;
  CFNumberRef v687;
  CFNumberRef v688;
  CFNumberRef v689;
  CFNumberRef v690;
  CFNumberRef v691;
  CFNumberRef v692;
  CFNumberRef v693;
  CFNumberRef v694;
  CFNumberRef v695;
  CFNumberRef v696;
  CFNumberRef v697;
  CFNumberRef v698;
  CFNumberRef v699;
  CFNumberRef v700;
  CFNumberRef v701;
  CFNumberRef v702;
  CFNumberRef v703;
  CFNumberRef v704;
  CFNumberRef v705;
  CFNumberRef v706;
  CFNumberRef v707;
  CFNumberRef v708;
  CFNumberRef v709;
  CFNumberRef v710;
  CFNumberRef v711;
  CFNumberRef v712;
  CFNumberRef v713;
  CFNumberRef v714;
  CFNumberRef v715;
  CFNumberRef v716;
  CFNumberRef v717;
  CFNumberRef v718;
  CFNumberRef v719;
  CFNumberRef v720;
  CFNumberRef v721;
  CFNumberRef v722;
  CFNumberRef v723;
  CFNumberRef v724;
  CFNumberRef v725;
  CFNumberRef v726;
  CFNumberRef v727;
  CFNumberRef v728;
  CFNumberRef v729;
  CFNumberRef v730;
  CFNumberRef v731;
  CFNumberRef v732;
  CFNumberRef v733;
  CFNumberRef v734;
  CFNumberRef v735;
  CFNumberRef v736;
  CFNumberRef v737;
  CFNumberRef v738;
  CFNumberRef v739;
  CFNumberRef v740;
  CFNumberRef v741;
  CFNumberRef v742;
  CFNumberRef v743;
  CFNumberRef v744;
  CFNumberRef v745;
  CFNumberRef v746;
  CFNumberRef v747;
  CFNumberRef v748;
  CFNumberRef v749;
  CFNumberRef v750;
  CFNumberRef v751;
  CFNumberRef v752;
  CFNumberRef v753;
  CFNumberRef v754;
  CFNumberRef v755;
  CFNumberRef v756;
  CFNumberRef v757;
  CFNumberRef v758;
  CFNumberRef v759;
  CFNumberRef v760;
  CFNumberRef v761;
  CFNumberRef v762;
  CFNumberRef v763;
  CFNumberRef v764;
  CFNumberRef v765;
  CFNumberRef v766;
  CFNumberRef v767;
  CFNumberRef v768;
  CFNumberRef v769;
  CFNumberRef v770;
  CFNumberRef v771;
  CFNumberRef v772;
  CFNumberRef v773;
  CFNumberRef v774;
  CFNumberRef v775;
  CFNumberRef v776;
  CFNumberRef v777;
  CFNumberRef v778;
  CFNumberRef v779;
  CFNumberRef v780;
  CFNumberRef v781;
  CFNumberRef v782;
  CFNumberRef v783;
  CFNumberRef v784;
  CFNumberRef v785;
  CFNumberRef v786;
  CFNumberRef v787;
  CFNumberRef v788;
  CFNumberRef v789;
  CFNumberRef v790;
  CFNumberRef v791;
  CFNumberRef v792;
  CFNumberRef v793;
  CFNumberRef v794;
  CFNumberRef v795;
  CFNumberRef v796;
  CFNumberRef v797;
  CFNumberRef v798;
  CFNumberRef v799;
  CFNumberRef v800;
  CFNumberRef v801;
  CFNumberRef v802;
  CFNumberRef v803;
  CFNumberRef v804;
  CFNumberRef v805;
  CFNumberRef v806;
  CFNumberRef v807;
  CFNumberRef v808;
  CFNumberRef v809;
  CFNumberRef v810;
  CFNumberRef v811;
  CFNumberRef v812;
  CFNumberRef v813;
  CFNumberRef v814;
  CFNumberRef v815;
  CFNumberRef v816;
  CFNumberRef v817;
  CFNumberRef v818;
  CFNumberRef v819;
  CFNumberRef v820;
  CFNumberRef v821;
  CFNumberRef v822;
  CFNumberRef v823;
  CFNumberRef v824;
  CFNumberRef v825;
  CFNumberRef v826;
  CFNumberRef v827;
  CFNumberRef v828;
  CFNumberRef v829;
  CFNumberRef v830;
  CFNumberRef v831;
  CFNumberRef v832;
  CFNumberRef v833;
  CFNumberRef v834;
  CFNumberRef v835;
  CFNumberRef v836;
  CFNumberRef v837;
  CFNumberRef v838;
  CFNumberRef v839;
  CFNumberRef v840;
  CFNumberRef v841;
  CFNumberRef v842;
  CFNumberRef v843;
  CFNumberRef v844;
  CFNumberRef v845;
  CFNumberRef v846;
  CFNumberRef v847;
  CFNumberRef v848;
  CFNumberRef v849;
  CFNumberRef v850;
  CFNumberRef v851;
  CFNumberRef v852;
  CFNumberRef v853;
  CFNumberRef v854;
  CFNumberRef v855;
  CFNumberRef v856;
  CFNumberRef v857;
  CFNumberRef v858;
  CFNumberRef v859;
  CFNumberRef v860;
  CFNumberRef v861;
  CFNumberRef v862;
  CFNumberRef v863;
  CFNumberRef v864;
  CFNumberRef v865;
  CFNumberRef v866;
  CFNumberRef v867;
  CFNumberRef v868;
  CFNumberRef v869;
  CFNumberRef v870;
  CFNumberRef v871;
  CFNumberRef v872;
  CFNumberRef v873;
  CFNumberRef v874;
  CFNumberRef v875;
  CFNumberRef v876;
  CFNumberRef v877;
  CFNumberRef v878;
  CFNumberRef v879;
  CFNumberRef v880;
  CFNumberRef v881;
  CFNumberRef v882;
  CFNumberRef v883;
  CFNumberRef v884;
  CFNumberRef v885;
  CFNumberRef v886;
  CFNumberRef v887;
  CFNumberRef v888;
  CFNumberRef v889;
  CFNumberRef v890;
  CFNumberRef v891;
  CFNumberRef v892;
  CFNumberRef v893;
  CFNumberRef v894;
  CFNumberRef v895;
  CFNumberRef v896;
  CFNumberRef v897;
  CFNumberRef v898;
  CFNumberRef v899;
  CFNumberRef v900;
  CFNumberRef v901;
  CFNumberRef v902;
  CFNumberRef v903;
  CFNumberRef v904;
  CFNumberRef v905;
  CFNumberRef v906;
  CFNumberRef v907;
  CFNumberRef v908;
  CFNumberRef v909;
  CFNumberRef v910;
  CFNumberRef v911;
  CFNumberRef v912;
  CFNumberRef v913;
  CFNumberRef v914;
  CFNumberRef v915;
  CFNumberRef v916;
  CFNumberRef v917;
  CFNumberRef v918;
  CFNumberRef v919;
  CFNumberRef v920;
  CFNumberRef v921;
  CFNumberRef v922;
  CFNumberRef v923;
  CFNumberRef v924;
  CFNumberRef v925;
  CFNumberRef v926;
  CFNumberRef v927;
  CFNumberRef v928;
  CFNumberRef v929;
  CFNumberRef v930;
  CFNumberRef v931;
  CFNumberRef v932;
  CFNumberRef v933;
  CFNumberRef v934;
  CFNumberRef v935;
  CFNumberRef v936;
  CFNumberRef v937;
  CFNumberRef v938;
  CFNumberRef v939;
  CFNumberRef v940;
  CFNumberRef v941;
  CFNumberRef v942;
  CFNumberRef v943;
  CFNumberRef v944;
  int v945;
  int v946;
  uint64_t v947;
  const __CFAllocator *v948;
  CFNumberRef v949;
  CFNumberRef v950;
  CFNumberRef v951;
  CFNumberRef v952;
  CFNumberRef v953;
  CFNumberRef v954;
  CFNumberRef v955;
  CFNumberRef v956;
  CFNumberRef v957;
  CFNumberRef v958;
  CFNumberRef v959;
  CFNumberRef v960;
  CFNumberRef v961;
  CFNumberRef v962;
  CFNumberRef v963;
  CFNumberRef v964;
  CFNumberRef v965;
  CFNumberRef v966;
  CFNumberRef v967;
  __uint64_t v968;
  const char *v969;
  uint64_t v971;
  const __CFAllocator *v972;
  const void *v973;
  const void *v974;
  CFMutableDictionaryRef v975;
  CFNumberRef v976;
  CFNumberRef v977;
  CFNumberRef v978;
  CFNumberRef v979;
  CFNumberRef v980;
  CFNumberRef v981;
  char *v982;
  const void *v983;
  const void *v984;
  const void *v985;
  const void *v986;
  const void *v987;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v989;
  CFMutableArrayRef v990;
  __CFArray *v991;
  unint64_t v992;
  _OWORD *v993;
  CFNumberRef v994;
  CFNumberRef v995;
  CFNumberRef v996;
  CFNumberRef v997;
  CFNumberRef v998;
  CFNumberRef v999;
  CFNumberRef v1000;
  const __CFAllocator *v1001;
  CFMutableArrayRef v1002;
  CFMutableArrayRef v1003;
  unsigned int v1004;
  CFNumberRef v1005;
  CFNumberRef v1006;
  CFNumberRef v1007;
  CFNumberRef v1008;
  unsigned int v1009;
  unsigned int v1010;
  CFIndex v1011;
  CFDataRef v1012;
  CFDataRef v1013;
  const void *v1014;
  const void *v1015;
  const void *v1016;
  const void *v1017;
  __CFArray *v1018;
  char *v1019;
  const __CFString *v1020;
  const __CFString *v1021;
  const __CFString *key;
  int v1023;
  char buffer[24];
  _OWORD valuePtr[2048];
  __int128 v1026;
  __int128 v1027;
  UInt8 *v1028;
  uint64_t v1029;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v5 = v0;
  v1029 = *MEMORY[0x24BDAC8D0];
  v1028 = 0;
  v1026 = 0u;
  v1027 = 0u;
  if ((*(_DWORD *)v0 & 0x80000000) != 0)
  {
LABEL_36:
    v7 = 4294963396;
    goto LABEL_741;
  }
  v6 = v1;
  v7 = 4294963396;
  if (!v1 || !*(_BYTE *)(v0 + 4))
  {
LABEL_741:
    v968 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      if (v4 > 556)
      {
        v969 = "Error Invalid ioctl";
      }
      else if (v4 == -1)
      {
        v969 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if (v4 < 0 || (v969 = (const char *)gAppleIoucIndexToString[v4]) == 0)
      {
        v969 = "unknown Apple80211_IOC_";
      }
      LODWORD(valuePtr[0]) = 136448258;
      *(_QWORD *)((char *)valuePtr + 4) = "Apple80211GetWithIOCTL";
      WORD6(valuePtr[0]) = 1024;
      *(_DWORD *)((char *)valuePtr + 14) = 11608;
      WORD1(valuePtr[1]) = 2048;
      *(_QWORD *)((char *)&valuePtr[1] + 4) = v968 / 0x3B9ACA00;
      WORD6(valuePtr[1]) = 2048;
      *(_QWORD *)((char *)&valuePtr[1] + 14) = v968 % 0x3B9ACA00 / 0x3E8;
      WORD3(valuePtr[2]) = 2082;
      *((_QWORD *)&valuePtr[2] + 1) = v5 + 4;
      LOWORD(valuePtr[3]) = 1024;
      *(_DWORD *)((char *)&valuePtr[3] + 2) = v4;
      WORD3(valuePtr[3]) = 2082;
      *((_QWORD *)&valuePtr[3] + 1) = v969;
      LOWORD(valuePtr[4]) = 1024;
      *(_DWORD *)((char *)&valuePtr[4] + 2) = v7;
      WORD3(valuePtr[4]) = 1024;
      DWORD2(valuePtr[4]) = v7;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOCTL type %d/'%{public}s' return %d/0x%08x\n", (uint8_t *)valuePtr, 0x4Cu);
    }
    return v7;
  }
  v8 = v2;
  __strlcpy_chk();
  LODWORD(v1027) = v4;
  if (v4 <= 247)
  {
    v7 = 4294963394;
    switch(v4)
    {
      case -1:
        goto LABEL_741;
      case 0:
      case 3:
      case 10:
      case 11:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
      case 30:
      case 46:
      case 47:
      case 56:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 92:
      case 93:
      case 94:
      case 95:
      case 98:
      case 99:
      case 100:
      case 101:
      case 105:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
        goto LABEL_10;
      case 1:
        memset(valuePtr, 0, 33);
        DWORD2(v1027) = 32;
        v1028 = (UInt8 *)valuePtr;
        goto LABEL_237;
      case 2:
        if (!v8)
          goto LABEL_36;
        valuePtr[0] = 0uLL;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v102 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v103 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v103)
          goto LABEL_829;
        v104 = v103;
        CFDictionarySetValue(v6, CFSTR("AUTH_LOWER"), v103);
        CFRelease(v104);
        if (!DWORD2(valuePtr[0]))
          goto LABEL_180;
        v105 = CFNumberCreate(v102, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v105)
          goto LABEL_829;
        v106 = v105;
        CFDictionarySetValue(v6, CFSTR("AUTH_UPPER"), v105);
        CFRelease(v106);
LABEL_180:
        if (!HIDWORD(valuePtr[0]))
          goto LABEL_739;
        v107 = CFNumberCreate(v102, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v107)
          goto LABEL_829;
        v37 = v107;
        v101 = CFSTR("AUTH_UPPER_EXT");
        goto LABEL_736;
      case 4:
        if (!v8)
          goto LABEL_36;
        valuePtr[0] = 1uLL;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v108 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v109 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v109)
          goto LABEL_829;
        v110 = v109;
        CFDictionarySetValue(v6, CFSTR("CHANNEL"), v109);
        CFRelease(v110);
        v111 = CFNumberCreate(v108, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v111)
          goto LABEL_829;
        v37 = v111;
        v101 = CFSTR("CHANNEL_FLAGS");
        goto LABEL_736;
      case 5:
      case 8:
      case 15:
      case 18:
      case 21:
      case 26:
      case 28:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 41:
      case 45:
      case 50:
      case 52:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 64:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 82:
      case 91:
      case 96:
      case 102:
      case 104:
      case 166:
        goto LABEL_6;
      case 6:
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 0;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v112 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v113 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (v113)
        {
          v114 = v113;
          CFDictionarySetValue(v6, CFSTR("PROTMODE"), v113);
          CFRelease(v114);
          v115 = CFNumberCreate(v112, kCFNumberSInt32Type, (char *)valuePtr + 8);
          if (v115)
          {
            v37 = v115;
            v101 = CFSTR("PROTMODE_THRESHOLD");
            goto LABEL_736;
          }
        }
        v1018 = v6;
        goto LABEL_828;
      case 7:
        if (!v8)
          goto LABEL_36;
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 0;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v116 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v117 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v117)
          return 4294963395;
        v118 = v117;
        CFDictionarySetValue(v6, CFSTR("TX_POWER"), v117);
        CFRelease(v118);
        v119 = CFNumberCreate(v116, kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v119)
          return 4294963395;
        v37 = v119;
        v101 = CFSTR("TX_POWER_UNIT");
        goto LABEL_736;
      case 9:
        WORD2(valuePtr[0]) = 0;
        LODWORD(valuePtr[0]) = 0;
        DWORD2(v1027) = 6;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (v8 == 6)
        {
          v7 = 0;
          *(_DWORD *)v6 = valuePtr[0];
          *((_WORD *)v6 + 2) = WORD2(valuePtr[0]);
          goto LABEL_740;
        }
        v1019 = ether_ntoa((const ether_addr *)valuePtr);
        if (!v1019)
          goto LABEL_829;
        v246 = v1019;
        goto LABEL_351;
      case 12:
        memset(valuePtr, 0, 24);
        v1028 = (UInt8 *)valuePtr + 4;
        DWORD2(v1027) = 19;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v120 = 0;
        *(_DWORD *)buffer = 0;
        v121 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        do
        {
          if (((*((unsigned __int8 *)valuePtr + v120 / 8 + 4) >> (v120 & 7)) & 1) != 0)
          {
            v122 = CFNumberCreate(v121, kCFNumberSInt32Type, buffer);
            if (!v122)
              goto LABEL_829;
            v123 = v122;
            CFArrayAppendValue(v6, v122);
            CFRelease(v123);
            v120 = *(_DWORD *)buffer;
          }
          *(_DWORD *)buffer = v120 + 1;
          v124 = v120++ < 146;
        }
        while (v124);
        goto LABEL_739;
      case 13:
        if (!v8)
          goto LABEL_36;
        *(_QWORD *)&valuePtr[0] = 0;
        v1028 = (UInt8 *)valuePtr;
        DWORD2(v1027) = 8;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v7 = 0;
        *(_DWORD *)v6 = DWORD1(valuePtr[0]);
        goto LABEL_740;
      case 14:
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v125 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v126 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v126)
          goto LABEL_829;
        v127 = v126;
        CFDictionaryAddValue(v6, CFSTR("PHYMODE_SUPPORTED"), v126);
        CFRelease(v127);
        v128 = CFNumberCreate(v125, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v128)
          goto LABEL_829;
        v37 = v128;
        v38 = CFSTR("PHYMODE_ACTIVE");
        goto LABEL_793;
      case 16:
      case 17:
        *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
        *(_OWORD *)((char *)valuePtr + 4) = 0u;
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 52;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v55 = v1027;
        if ((_DWORD)v1027 == 16)
          v56 = CFSTR("RSSI_CTL_AGR");
        else
          v56 = CFSTR("NOISE_CTL_AGR");
        if ((_DWORD)v1027 == 16)
          v57 = CFSTR("RSSI_CTL_LIST");
        else
          v57 = CFSTR("NOISE_CTL_LIST");
        if ((_DWORD)v1027 == 16)
          v58 = CFSTR("RSSI_EXT_AGR");
        else
          v58 = CFSTR("NOISE_EXT_AGR");
        if ((_DWORD)v1027 == 16)
          v59 = CFSTR("RSSI_EXT_LIST");
        else
          v59 = CFSTR("NOISE_EXT_LIST");
        v60 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v61 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v61)
          goto LABEL_829;
        v62 = v61;
        if (v55 == 16)
          v63 = CFSTR("RSSI_UNIT");
        else
          v63 = CFSTR("NOISE_UNIT");
        CFDictionaryAddValue(v6, v63, v61);
        CFRelease(v62);
        if (!DWORD1(valuePtr[0]))
        {
          v7 = 4294963394;
          goto LABEL_740;
        }
        if (DWORD1(valuePtr[0]) == 1)
        {
          v64 = CFNumberCreate(v60, kCFNumberSInt32Type, (char *)valuePtr + 12);
          if (!v64)
            goto LABEL_829;
          v65 = v64;
          CFDictionaryAddValue(v6, v56, v64);
          v66 = v65;
          goto LABEL_738;
        }
        v1021 = v58;
        key = v57;
        Mutable = CFArrayCreateMutable(v60, 0, MEMORY[0x24BDBD690]);
        if (!Mutable)
          goto LABEL_829;
        v989 = Mutable;
        v990 = CFArrayCreateMutable(v60, 0, MEMORY[0x24BDBD690]);
        if (!v990)
        {
          v1018 = v989;
          goto LABEL_828;
        }
        v991 = v990;
        v1020 = v56;
        if (DWORD1(valuePtr[0]))
        {
          v992 = 0;
          v993 = &valuePtr[2];
          do
          {
            v994 = CFNumberCreate(v60, kCFNumberSInt32Type, (char *)v993 - 20);
            if (!v994
              || (v995 = v994,
                  CFArrayAppendValue(v989, v994),
                  CFRelease(v995),
                  (v996 = CFNumberCreate(v60, kCFNumberSInt32Type, v993)) == 0))
            {
              CFRelease(v989);
              v1018 = v991;
              goto LABEL_828;
            }
            v997 = v996;
            CFArrayAppendValue(v991, v996);
            CFRelease(v997);
            if (v992 > 2)
              break;
            ++v992;
            v993 = (_OWORD *)((char *)v993 + 4);
          }
          while (v992 < DWORD1(valuePtr[0]));
        }
        CFDictionaryAddValue(v6, key, v989);
        CFDictionaryAddValue(v6, v59, v991);
        CFRelease(v989);
        CFRelease(v991);
        v998 = CFNumberCreate(v60, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12);
        if (v998)
        {
          v999 = v998;
          CFDictionaryAddValue(v6, v1020, v998);
          CFRelease(v999);
          v1000 = CFNumberCreate(v60, kCFNumberSInt32Type, &valuePtr[3]);
          v38 = v1021;
          if (v1000)
          {
            v37 = v1000;
            goto LABEL_793;
          }
        }
        goto LABEL_829;
      case 19:
        *(_QWORD *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_2064BB780;
        DWORD2(v1027) = 24;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (!DWORD1(valuePtr[0]))
          goto LABEL_739;
        v129 = 0;
        v130 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v131 = (char *)valuePtr + 8;
        while (1)
        {
          v132 = CFNumberCreate(v130, kCFNumberSInt32Type, v131);
          if (!v132)
            goto LABEL_829;
          v133 = v132;
          CFArrayAppendValue(v6, v132);
          CFRelease(v133);
          v7 = 0;
          if (v129 <= 2)
          {
            ++v129;
            v131 += 4;
            if (v129 < DWORD1(valuePtr[0]))
              continue;
          }
          goto LABEL_740;
        }
      case 27:
        goto LABEL_71;
      case 29:
        valuePtr[0] = 0uLL;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v134 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v135 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v135)
          goto LABEL_829;
        v136 = v135;
        CFDictionarySetValue(v6, CFSTR("DEAUTH_REASON"), v135);
        CFRelease(v136);
        v137 = ether_ntoa((const ether_addr *)((char *)valuePtr + 8));
        if (!v137)
          goto LABEL_829;
        v138 = CFStringCreateWithCString(v134, v137, 0x8000100u);
        if (!v138)
          goto LABEL_829;
        v37 = (__CFDictionary *)v138;
        v101 = CFSTR("DEAUTH_EA");
        goto LABEL_736;
      case 32:
        if (!v8)
          goto LABEL_36;
        memset(valuePtr, 0, 188);
        DWORD2(v1027) = 188;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (!WORD2(valuePtr[0]))
          goto LABEL_739;
        v139 = 0;
        v140 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v141 = &valuePtr[1];
        v142 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
        while (2)
        {
          v143 = CFDictionaryCreateMutable(v140, 0, MEMORY[0x24BDBD6A0], v142);
          if (v143)
          {
            v144 = v143;
            v145 = CFNumberCreate(v140, kCFNumberSInt32Type, (char *)v141 - 4);
            if (v145)
            {
              v146 = v145;
              CFDictionarySetValue(v144, CFSTR("RATESET_RATE"), v145);
              CFRelease(v146);
              v147 = CFNumberCreate(v140, kCFNumberSInt32Type, v141);
              if (v147)
              {
                v148 = v147;
                CFDictionarySetValue(v144, CFSTR("RATESET_FLAGS"), v147);
                CFRelease(v148);
                CFArrayAppendValue(v6, v144);
                CFRelease(v144);
                v7 = 0;
                if (v139 > 0xD)
                  goto LABEL_740;
                ++v139;
                v141 = (_OWORD *)((char *)v141 + 12);
                if (v139 >= WORD2(valuePtr[0]))
                  goto LABEL_740;
                continue;
              }
            }
            v1018 = v144;
LABEL_828:
            CFRelease(v1018);
          }
          goto LABEL_829;
        }
      case 37:
      case 38:
      case 39:
        *(_QWORD *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_2064BB79C;
        DWORD2(v1027) = 24;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (!DWORD1(valuePtr[0]))
          goto LABEL_739;
        v39 = 0;
        v40 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v41 = (char *)valuePtr + 8;
        while (1)
        {
          v42 = CFNumberCreate(v40, kCFNumberSInt32Type, v41);
          if (!v42)
            goto LABEL_829;
          v43 = v42;
          CFArrayAppendValue(v6, v42);
          CFRelease(v43);
          ++v39;
          v41 += 4;
          if (v39 >= DWORD1(valuePtr[0]))
            goto LABEL_739;
        }
      case 40:
        memset(valuePtr, 170, sizeof(valuePtr));
        DWORD2(v1027) = 0x8000;
        v1028 = (UInt8 *)valuePtr;
LABEL_237:
        if (!Apple80211IOCTLGetWrapper())
          goto LABEL_238;
        goto LABEL_711;
      case 42:
        if (!v8)
          goto LABEL_36;
        bzero((char *)valuePtr + 4, 0x804uLL);
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 2056;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (!DWORD1(valuePtr[0]))
          goto LABEL_739;
        v149 = 0;
        v150 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v151 = (char *)&valuePtr[1] + 4;
        v152 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
        v153 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
        while (2)
        {
          v154 = ether_ntoa((const ether_addr *)(v151 - 8));
          if (!v154)
            goto LABEL_248;
          v155 = v154;
          v156 = CFDictionaryCreateMutable(v150, 0, v152, v153);
          if (!v156)
            goto LABEL_829;
          v37 = v156;
          v157 = CFStringCreateWithCString(v150, v155, 0x8000100u);
          if (v157)
          {
            v158 = v157;
            CFDictionarySetValue(v37, CFSTR("STATION_MAC"), v157);
            CFRelease(v158);
            v159 = CFNumberCreate(v150, kCFNumberIntType, v151);
            if (v159)
            {
              v160 = v159;
              CFDictionarySetValue(v37, CFSTR("STATION_RSSI"), v159);
              CFRelease(v160);
              CFArrayAppendValue(v6, v37);
              CFRelease(v37);
LABEL_248:
              v7 = 0;
              if (v149 > 0x7E)
                goto LABEL_740;
              ++v149;
              v151 += 16;
              if (v149 >= DWORD1(valuePtr[0]))
                goto LABEL_740;
              continue;
            }
          }
          goto LABEL_737;
        }
      case 43:
      case 44:
        if (!v8)
          goto LABEL_36;
        memset(valuePtr, 0, 257);
        v67 = 256;
        goto LABEL_349;
      case 48:
        bzero((char *)valuePtr + 4, 0x804uLL);
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 2056;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        _parseIEs((unsigned __int8 *)valuePtr + 8, WORD2(valuePtr[0]), v6, v5 + 88);
        goto LABEL_739;
      case 49:
        memset(valuePtr, 0, 20);
        DWORD2(v1027) = 20;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v161 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v162 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v162)
          goto LABEL_829;
        v163 = v162;
        CFDictionarySetValue(v6, CFSTR("STATS_TX_FRAME_COUNT"), v162);
        CFRelease(v163);
        v164 = CFNumberCreate(v161, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v164)
          goto LABEL_829;
        v165 = v164;
        CFDictionarySetValue(v6, CFSTR("STATS_TX_ERRORS"), v164);
        CFRelease(v165);
        v166 = CFNumberCreate(v161, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v166)
          goto LABEL_829;
        v167 = v166;
        CFDictionarySetValue(v6, CFSTR("STATS_RX_FRAME_COUNT"), v166);
        CFRelease(v167);
        v168 = CFNumberCreate(v161, kCFNumberSInt32Type, &valuePtr[1]);
        if (!v168)
          goto LABEL_829;
        v37 = v168;
        v101 = CFSTR("STATS_RX_ERRORS");
        goto LABEL_736;
      case 51:
        LODWORD(valuePtr[0]) = 0;
        v67 = 3;
        goto LABEL_349;
      case 53:
        *(_QWORD *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_2064BB040;
        DWORD2(v1027) = 24;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v169 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v170 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v170)
          goto LABEL_829;
        v171 = v170;
        CFDictionarySetValue(v6, CFSTR("LAST_RX_RATE"), v170);
        CFRelease(v171);
        v172 = CFNumberCreate(v169, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v172)
          goto LABEL_829;
        v173 = v172;
        CFDictionarySetValue(v6, CFSTR("LAST_RX_RSSI"), v172);
        CFRelease(v173);
        v174 = CFNumberCreate(v169, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v174)
          goto LABEL_829;
        v175 = v174;
        CFDictionarySetValue(v6, CFSTR("LAST_RX_NUM_STREAMS"), v174);
        CFRelease(v175);
        v176 = ether_ntoa((const ether_addr *)&valuePtr[1]);
        v177 = CFStringCreateWithCString(v169, v176, 0x8000100u);
        if (!v177)
          goto LABEL_829;
        v37 = (__CFDictionary *)v177;
        v101 = CFSTR("LAST_RX_SA");
        goto LABEL_736;
      case 54:
        *(_QWORD *)&valuePtr[0] = 1;
        DWORD2(v1027) = 8;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v178 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v178)
          goto LABEL_829;
        v37 = v178;
        v101 = CFSTR("COUNT");
        goto LABEL_736;
      case 61:
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v179 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v180 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v180)
          goto LABEL_829;
        v181 = v180;
        CFDictionarySetValue(v6, CFSTR("MAX_FACTOR"), v180);
        CFRelease(v181);
        v182 = CFNumberCreate(v179, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v182)
          goto LABEL_829;
        v37 = v182;
        v101 = CFSTR("MAX_DENSITY");
        goto LABEL_736;
      case 62:
        *(_QWORD *)&valuePtr[0] = 1;
        DWORD2(v1027) = 8;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v183 = (const void *)*MEMORY[0x24BDBD270];
        v184 = (const void *)*MEMORY[0x24BDBD268];
        if (BYTE4(valuePtr[0]))
          v185 = (const void *)*MEMORY[0x24BDBD270];
        else
          v185 = (const void *)*MEMORY[0x24BDBD268];
        CFDictionarySetValue(v6, CFSTR("BA"), v185);
        if (BYTE5(valuePtr[0]))
          v186 = v183;
        else
          v186 = v184;
        CFDictionarySetValue(v6, CFSTR("IMMEDIATE_BA"), v186);
        if (BYTE6(valuePtr[0]))
          v187 = v183;
        else
          v187 = v184;
        CFDictionarySetValue(v6, CFSTR("CCBA"), v187);
        if (BYTE7(valuePtr[0]))
          v188 = v183;
        else
          v188 = v184;
        v189 = CFSTR("IMPLICIT_BA");
        goto LABEL_325;
      case 65:
        valuePtr[0] = xmmword_2064BBAD0;
        Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("MODE"));
        if (!Value || !CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_715;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v191 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v192 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v192)
          goto LABEL_829;
        v193 = v192;
        CFDictionarySetValue(v6, CFSTR("SUBMODE"), v192);
        CFRelease(v193);
        v194 = CFNumberCreate(v191, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v194)
          goto LABEL_829;
        v37 = v194;
        v101 = CFSTR("FLAGS");
        goto LABEL_736;
      case 66:
        valuePtr[0] = xmmword_2064BBAD0;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v195 = 0;
        *(_DWORD *)buffer = 0;
        v196 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        do
        {
          if (((*((unsigned __int8 *)valuePtr + v195 / 8 + 4) >> (v195 & 7)) & 1) != 0)
          {
            v197 = CFNumberCreate(v196, kCFNumberSInt32Type, buffer);
            if (!v197)
              goto LABEL_829;
            v198 = v197;
            CFArrayAppendValue(v6, v197);
            CFRelease(v198);
            v195 = *(_DWORD *)buffer;
          }
          *(_DWORD *)buffer = v195 + 1;
          v124 = v195++ < 76;
        }
        while (v124);
        goto LABEL_739;
      case 69:
        v199 = malloc_type_malloc(0x3AD8uLL, 0x1000040BBD6A9C0uLL);
        if (!v199)
          return 4294963395;
        v200 = v199;
        *v199 = 1;
        v201 = 0x3FFFFFFFFFFFF150;
        do
        {
          v199[v201 + 3764] = 1500;
          v201 += 376;
        }
        while (v201 * 4);
        v199[3] = 10;
        DWORD2(v1027) = 15064;
        v1028 = (UInt8 *)v199;
        if (Apple80211RawGet(v5, (uint64_t)&v1026))
        {
          free(v200);
          goto LABEL_711;
        }
        v1001 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v1002 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
        if (!v1002)
          goto LABEL_825;
        v1003 = v1002;
        v1004 = 0;
        LODWORD(valuePtr[0]) = 0;
        break;
      case 73:
        v202 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("STA_MAC"));
        memset(buffer, 170, 18);
        if (!v202)
          goto LABEL_819;
        if (!CFStringGetCString(v202, buffer, 18, 0x8000100u))
          goto LABEL_819;
        v203 = ether_aton(buffer);
        if (!v203)
          goto LABEL_819;
        v204 = v203;
        bzero((char *)valuePtr + 8, 0x408uLL);
        LODWORD(valuePtr[0]) = 1;
        v205 = *(_DWORD *)v204->octet;
        WORD4(valuePtr[0]) = *(_WORD *)&v204->octet[4];
        DWORD1(valuePtr[0]) = v205;
        HIDWORD(valuePtr[0]) = 1024;
        DWORD2(v1027) = 1040;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v206 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)&valuePtr[1], HIDWORD(valuePtr[0]));
        if (!v206)
          return 4294963395;
        v37 = v206;
        v38 = CFSTR("STA_IE_LIST");
        goto LABEL_793;
      case 79:
        v207 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("STATION_MAC"));
        memset(buffer, 170, 18);
        if (!v207)
          goto LABEL_819;
        if (!CFStringGetCString(v207, buffer, 18, 0x8000100u))
          goto LABEL_819;
        v208 = ether_aton(buffer);
        if (!v208)
          goto LABEL_819;
        valuePtr[0] = xmmword_2064BB05C;
        *(_OWORD *)((char *)valuePtr + 12) = *(__int128 *)((char *)&xmmword_2064BB05C + 12);
        v209 = *(_WORD *)&v208->octet[4];
        DWORD1(valuePtr[0]) = *(_DWORD *)v208->octet;
        WORD4(valuePtr[0]) = v209;
        DWORD2(v1027) = 28;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v210 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v211 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr[1]);
        CFDictionarySetValue(v6, CFSTR("STA_RXBYTES"), v211);
        CFRelease(v211);
        v212 = CFNumberCreate(v210, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8);
        CFDictionarySetValue(v6, CFSTR("STA_TXBYTES"), v212);
        CFRelease(v212);
        v213 = CFNumberCreate(v210, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        CFDictionarySetValue(v6, CFSTR("STA_RXPACKETS"), v213);
        CFRelease(v213);
        v37 = CFNumberCreate(v210, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4);
        v101 = CFSTR("STA_TXPACKETS");
        goto LABEL_736;
      case 80:
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v214 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v215 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v215)
          return 4294963395;
        v216 = v215;
        CFDictionaryAddValue(v6, CFSTR("ROAM_THRESH_RSSI"), v215);
        CFRelease(v216);
        v217 = CFNumberCreate(v214, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v217)
          return 4294963395;
        v37 = v217;
        v38 = CFSTR("ROAM_THRESH_RATE");
        goto LABEL_793;
      case 81:
        LOBYTE(valuePtr[0]) = -86;
        DWORD2(v1027) = 1;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v218 = valuePtr[0];
        if ((valuePtr[0] & 1) != 0)
        {
          CFDictionarySetValue(v6, CFSTR("V_DBG_FLAG_ASSOC"), (const void *)*MEMORY[0x24BDBD270]);
          v218 = valuePtr[0];
        }
        if ((v218 & 2) == 0)
          goto LABEL_739;
        v188 = (const void *)*MEMORY[0x24BDBD270];
        v189 = CFSTR("V_DBG_FLAG_CONNECTION");
LABEL_325:
        CFDictionarySetValue(v6, v189, v188);
        goto LABEL_739;
      case 83:
        bzero((char *)valuePtr + 4, 0x804uLL);
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v1027) = 2056;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (!DWORD1(valuePtr[0]))
          goto LABEL_739;
        v219 = 0;
        v220 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v221 = (const ether_addr *)&valuePtr[1];
        v222 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
        v223 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
        while (2)
        {
          v224 = CFDictionaryCreateMutable(v220, 0, v222, v223);
          if (!v224)
            return 4294963395;
          v50 = v224;
          v225 = CFNumberCreate(v220, kCFNumberSInt32Type, &v221[-2].octet[4]);
          if (v225)
          {
            v226 = v225;
            CFDictionaryAddValue(v50, CFSTR("PMKSA_AGE"), v225);
            CFRelease(v226);
            v227 = CFNumberCreate(v220, kCFNumberSInt32Type, &v221[-1].octet[2]);
            if (v227)
            {
              v228 = v227;
              CFDictionaryAddValue(v50, CFSTR("PMKSA_AKMP"), v227);
              CFRelease(v228);
              v229 = ether_ntoa(v221);
              if (v229)
              {
                v230 = CFStringCreateWithCString(v220, v229, 0x8000100u);
                if (v230)
                {
                  v231 = v230;
                  CFDictionaryAddValue(v50, CFSTR("PMKSA_AUTHENTICATOR"), v230);
                  CFRelease(v231);
                  CFArrayAppendValue(v6, v50);
                  CFRelease(v50);
                  ++v219;
                  v221 = (const ether_addr *)((char *)v221 + 16);
                  if (v219 >= DWORD1(valuePtr[0]))
                    goto LABEL_739;
                  continue;
                }
              }
            }
          }
          goto LABEL_779;
        }
      case 84:
        LODWORD(valuePtr[1]) = 0;
        valuePtr[0] = xmmword_2064BB7B8;
        DWORD2(v1027) = 20;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v232 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v233 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v233)
          return 4294963395;
        v234 = v233;
        CFDictionaryAddValue(v6, CFSTR("LQ_RSSI_DIVISOR"), v233);
        CFRelease(v234);
        v235 = CFNumberCreate(v232, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v235)
          return 4294963395;
        v236 = v235;
        CFDictionaryAddValue(v6, CFSTR("LQ_TX_RATE_DIVISOR"), v235);
        CFRelease(v236);
        v237 = CFNumberCreate(v232, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v237)
          return 4294963395;
        v37 = v237;
        v38 = CFSTR("LQ_EVENT_MIN_INTERVAL");
        goto LABEL_793;
      case 85:
        bzero((char *)valuePtr + 4, 0x810uLL);
        LODWORD(valuePtr[0]) = 1;
        v238 = (const __CFData *)CFDictionaryGetValue(v6, CFSTR("CUSTOM_IE_DATA"));
        if (!v238)
          goto LABEL_819;
        v239 = v238;
        HIDWORD(valuePtr[0]) = CFDataGetLength(v238);
        if (HIDWORD(valuePtr[0]) > 0x800)
          goto LABEL_819;
        CFDataGetBytePtr(v239);
        __memcpy_chk();
        LODWORD(valuePtr[1]) = 2048;
        DWORD2(v1027) = 2068;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v240 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v241 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v241)
          return 4294963395;
        v242 = v241;
        CFDictionarySetValue(v6, CFSTR("CUSTOM_IE_FRAME_TYPE"), v241);
        CFRelease(v242);
        v243 = CFNumberCreate(v240, kCFNumberSInt32Type, (char *)valuePtr + 12);
        if (!v243)
          return 4294963395;
        v244 = v243;
        CFDictionarySetValue(v6, CFSTR("CUSTOM_IE_SIG_LEN"), v243);
        CFRelease(v244);
        v245 = CFDataCreate(v240, (const UInt8 *)&valuePtr[1] + 4, LODWORD(valuePtr[1]));
        if (!v245)
          return 4294963395;
        v37 = v245;
        v101 = CFSTR("CUSTOM_IE_DATA");
        goto LABEL_736;
      case 97:
        memset(valuePtr, 0, 17);
        v67 = 16;
LABEL_349:
        DWORD2(v1027) = v67;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper())
          goto LABEL_350;
        goto LABEL_711;
      case 103:
        if (!v8)
          goto LABEL_36;
        bzero(valuePtr, 0x8D8uLL);
        WORD5(valuePtr[8]) = 2048;
        DWORD2(v1027) = 2264;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        RoamProfile = _addScanResultToList(v5, (uint64_t)valuePtr, 0, 0, v6, 0, 0, 0, 0, 0, 1, 0);
        goto LABEL_355;
      case 106:
        valuePtr[0] = xmmword_2064BBAD0;
        DWORD2(v1027) = 16;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v247 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v248 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v248)
          goto LABEL_829;
        v249 = v248;
        CFDictionarySetValue(v6, CFSTR("RSSI_MIN"), v248);
        CFRelease(v249);
        v250 = CFNumberCreate(v247, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v250)
          goto LABEL_829;
        v251 = v250;
        CFDictionarySetValue(v6, CFSTR("RSSI_MAX"), v250);
        CFRelease(v251);
        v252 = CFNumberCreate(v247, kCFNumberSInt32Type, (const void *)((unint64_t)valuePtr | 0xC));
        if (!v252)
          goto LABEL_829;
        v37 = v252;
        v101 = CFSTR("RSSI_THRESHOLD");
        goto LABEL_736;
      case 115:
        bzero(valuePtr, 0x658uLL);
        DWORD2(v1027) = 1624;
        v1028 = (UInt8 *)valuePtr;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        v253 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v254 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
        if (!v254)
          goto LABEL_829;
        v255 = v254;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOCIATED_SLEEP_DURATION"), v254);
        CFRelease(v255);
        v256 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[39] + 4);
        if (!v256)
          goto LABEL_829;
        v257 = v256;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOCIATED_SLEEP_DURATION"), v256);
        CFRelease(v257);
        v258 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!v258)
          goto LABEL_829;
        v259 = v258;
        CFDictionarySetValue(v6, CFSTR("INSTANT_UNASSOCIATED_SLEEP_DURATION"), v258);
        CFRelease(v259);
        v260 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[39] + 8);
        if (!v260)
          goto LABEL_829;
        v261 = v260;
        CFDictionarySetValue(v6, CFSTR("CACHED_UNASSOCIATED_SLEEP_DURATION"), v260);
        CFRelease(v261);
        v262 = CFNumberCreate(v253, kCFNumberSInt32Type, valuePtr);
        if (!v262)
          goto LABEL_829;
        v263 = v262;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TIME_STAMP"), v262);
        CFRelease(v263);
        v264 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[39]);
        if (!v264)
          goto LABEL_829;
        v265 = v264;
        CFDictionarySetValue(v6, CFSTR("CACHED_TIME_STAMP"), v264);
        CFRelease(v265);
        v266 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[31] + 8);
        if (!v266)
          goto LABEL_829;
        v267 = v266;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TIME_STAMP_USEC"), v266);
        CFRelease(v267);
        v268 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[70] + 8);
        if (!v268)
          goto LABEL_829;
        v269 = v268;
        CFDictionarySetValue(v6, CFSTR("CACHED_TIME_STAMP_USEC"), v268);
        CFRelease(v269);
        v270 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[4] + 12);
        if (!v270)
          goto LABEL_829;
        v271 = v270;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_COUNT"), v270);
        CFRelease(v271);
        v272 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[43] + 12);
        if (!v272)
          goto LABEL_829;
        v273 = v272;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_COUNT"), v272);
        CFRelease(v273);
        v274 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[5]);
        if (!v274)
          goto LABEL_829;
        v275 = v274;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_DURATION"), v274);
        CFRelease(v275);
        v276 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[44]);
        if (!v276)
          goto LABEL_829;
        v277 = v276;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_DURATION"), v276);
        CFRelease(v277);
        v278 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[5] + 4);
        if (!v278)
          goto LABEL_829;
        v279 = v278;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_COUNT"), v278);
        CFRelease(v279);
        v280 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[44] + 4);
        if (!v280)
          goto LABEL_829;
        v281 = v280;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_COUNT"), v280);
        CFRelease(v281);
        v282 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[5] + 8);
        if (!v282)
          goto LABEL_829;
        v283 = v282;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_DURATION"), v282);
        CFRelease(v283);
        v284 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[44] + 8);
        if (!v284)
          goto LABEL_829;
        v285 = v284;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_DURATION"), v284);
        CFRelease(v285);
        v286 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[5] + 12);
        if (!v286)
          goto LABEL_829;
        v287 = v286;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_COUNT"), v286);
        CFRelease(v287);
        v288 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[44] + 12);
        if (!v288)
          goto LABEL_829;
        v289 = v288;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_COUNT"), v288);
        CFRelease(v289);
        v290 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[6]);
        if (!v290)
          goto LABEL_829;
        v291 = v290;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_DURATION"), v290);
        CFRelease(v291);
        v292 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[45]);
        if (!v292)
          goto LABEL_829;
        v293 = v292;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_DURATION"), v292);
        CFRelease(v293);
        v294 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[6] + 4);
        if (!v294)
          goto LABEL_829;
        v295 = v294;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_COUNT"), v294);
        CFRelease(v295);
        v296 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[45] + 4);
        if (!v296)
          goto LABEL_829;
        v297 = v296;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_COUNT"), v296);
        CFRelease(v297);
        v298 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[6] + 8);
        if (!v298)
          goto LABEL_829;
        v299 = v298;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_DURATION"), v298);
        CFRelease(v299);
        v300 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[45] + 8);
        if (!v300)
          goto LABEL_829;
        v301 = v300;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_DURATION"), v300);
        CFRelease(v301);
        v302 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[6] + 12);
        if (!v302)
          goto LABEL_829;
        v303 = v302;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_COUNT"), v302);
        CFRelease(v303);
        v304 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[45] + 12);
        if (!v304)
          goto LABEL_829;
        v305 = v304;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_COUNT"), v304);
        CFRelease(v305);
        v306 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[7]);
        if (!v306)
          goto LABEL_829;
        v307 = v306;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_DURATION"), v306);
        CFRelease(v307);
        v308 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[46]);
        if (!v308)
          goto LABEL_829;
        v309 = v308;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_DURATION"), v308);
        CFRelease(v309);
        v310 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[7] + 4);
        if (!v310)
          goto LABEL_829;
        v311 = v310;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_COUNT"), v310);
        CFRelease(v311);
        v312 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[46] + 4);
        if (!v312)
          goto LABEL_829;
        v313 = v312;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_COUNT"), v312);
        CFRelease(v313);
        v314 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[7] + 8);
        if (!v314)
          goto LABEL_829;
        v315 = v314;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_DURATION"), v314);
        CFRelease(v315);
        v316 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[46] + 8);
        if (!v316)
          goto LABEL_829;
        v317 = v316;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_DURATION"), v316);
        CFRelease(v317);
        v318 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[34] + 8);
        if (!v318)
          goto LABEL_829;
        v319 = v318;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_OFF_CHANNEL_DURATION"), v318);
        CFRelease(v319);
        v320 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[73] + 8);
        if (!v320)
          goto LABEL_829;
        v321 = v320;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_OFF_CHANNEL_DURATION"), v320);
        CFRelease(v321);
        v322 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[34] + 12);
        if (!v322)
          goto LABEL_829;
        v323 = v322;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_OFF_CHANNEL_DURATION"), v322);
        CFRelease(v323);
        v324 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[73] + 12);
        if (!v324)
          goto LABEL_829;
        v325 = v324;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_OFF_CHANNEL_DURATION"), v324);
        CFRelease(v325);
        v326 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[35]);
        if (!v326)
          goto LABEL_829;
        v327 = v326;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_OFF_CHANNEL_DURATION"), v326);
        CFRelease(v327);
        v328 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[74]);
        if (!v328)
          goto LABEL_829;
        v329 = v328;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_OFF_CHANNEL_DURATION"), v328);
        CFRelease(v329);
        v330 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[35] + 4);
        if (!v330)
          goto LABEL_829;
        v331 = v330;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_OFF_CHANNEL_DURATION"), v330);
        CFRelease(v331);
        v332 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[74] + 4);
        if (!v332)
          goto LABEL_829;
        v333 = v332;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_OFF_CHANNEL_DURATION"), v332);
        CFRelease(v333);
        v334 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[35] + 8);
        if (!v334)
          goto LABEL_829;
        v335 = v334;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_OFF_CHANNEL_DURATION"), v334);
        CFRelease(v335);
        v336 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[74] + 8);
        if (!v336)
          goto LABEL_829;
        v337 = v336;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_OFF_CHANNEL_DURATION"), v336);
        CFRelease(v337);
        v338 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[35] + 12);
        if (!v338)
          goto LABEL_829;
        v339 = v338;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_OFF_CHANNEL_DURATION"), v338);
        CFRelease(v339);
        v340 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[74] + 12);
        if (!v340)
          goto LABEL_829;
        v341 = v340;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_OFF_CHANNEL_DURATION"), v340);
        CFRelease(v341);
        v342 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[2] + 8);
        if (!v342)
          goto LABEL_829;
        v343 = v342;
        CFDictionarySetValue(v6, CFSTR("INSTANT_NUM_CONNECTIONS"), v342);
        CFRelease(v343);
        v344 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[41] + 8);
        if (!v344)
          goto LABEL_829;
        v345 = v344;
        CFDictionarySetValue(v6, CFSTR("CACHED_NUM_CONNECTIONS"), v344);
        CFRelease(v345);
        v346 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[2] + 12);
        if (!v346)
          goto LABEL_829;
        v347 = v346;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CONNECT_TIME"), v346);
        CFRelease(v347);
        v348 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[41] + 12);
        if (!v348)
          goto LABEL_829;
        v349 = v348;
        CFDictionarySetValue(v6, CFSTR("CACHED_CONNECT_TIME"), v348);
        CFRelease(v349);
        v350 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[3]);
        if (!v350)
          goto LABEL_829;
        v351 = v350;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TX_DURATION"), v350);
        CFRelease(v351);
        v352 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[42]);
        if (!v352)
          goto LABEL_829;
        v353 = v352;
        CFDictionarySetValue(v6, CFSTR("CACHED_TX_DURATION"), v352);
        CFRelease(v353);
        v354 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[31] + 12);
        if (!v354)
          goto LABEL_829;
        v355 = v354;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TX_DURATION_USEC"), v354);
        CFRelease(v355);
        v356 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[70] + 12);
        if (!v356)
          goto LABEL_829;
        v357 = v356;
        CFDictionarySetValue(v6, CFSTR("CACHED_TX_DURATION_USEC"), v356);
        CFRelease(v357);
        v358 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[3] + 4);
        if (!v358)
          goto LABEL_829;
        v359 = v358;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TX_COUNT"), v358);
        CFRelease(v359);
        v360 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[42] + 4);
        if (!v360)
          goto LABEL_829;
        v361 = v360;
        CFDictionarySetValue(v6, CFSTR("CACHED_TX_COUNT"), v360);
        CFRelease(v361);
        v362 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[3] + 8);
        if (!v362)
          goto LABEL_829;
        v363 = v362;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_DURATION"), v362);
        CFRelease(v363);
        v364 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[42] + 8);
        if (!v364)
          goto LABEL_829;
        v365 = v364;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_DURATION"), v364);
        CFRelease(v365);
        v366 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[32]);
        if (!v366)
          goto LABEL_829;
        v367 = v366;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_DURATION_USEC"), v366);
        CFRelease(v367);
        v368 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[71]);
        if (!v368)
          goto LABEL_829;
        v369 = v368;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_DURATION_USEC"), v368);
        CFRelease(v369);
        v370 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[32] + 8);
        if (!v370)
          goto LABEL_829;
        v371 = v370;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_DURATION_BROADCAST"), v370);
        CFRelease(v371);
        v372 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[71] + 8);
        if (!v372)
          goto LABEL_829;
        v373 = v372;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_DURATION_BROADCAST"), v372);
        CFRelease(v373);
        v374 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[32] + 12);
        if (!v374)
          goto LABEL_829;
        v375 = v374;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_DURATION_MULTICAST"), v374);
        CFRelease(v375);
        v376 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[71] + 12);
        if (!v376)
          goto LABEL_829;
        v377 = v376;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_DURATION_MULTICAST"), v376);
        CFRelease(v377);
        v378 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[33]);
        if (!v378)
          goto LABEL_829;
        v379 = v378;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_COUNT_MULTICAST_PKTS"), v378);
        CFRelease(v379);
        v380 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[72]);
        if (!v380)
          goto LABEL_829;
        v381 = v380;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_COUNT_MULTICAST_PKTS"), v380);
        CFRelease(v381);
        v382 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[33] + 8);
        if (!v382)
          goto LABEL_829;
        v383 = v382;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_COUNT_MULTICAST_BYTES"), v382);
        CFRelease(v383);
        v384 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[72] + 8);
        if (!v384)
          goto LABEL_829;
        v385 = v384;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_COUNT_MULTICAST_BYTES"), v384);
        CFRelease(v385);
        v386 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[34]);
        if (!v386)
          goto LABEL_829;
        v387 = v386;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_COUNT_MULTICAST_TOTAL"), v386);
        CFRelease(v387);
        v388 = CFNumberCreate(v253, kCFNumberSInt64Type, &valuePtr[73]);
        if (!v388)
          goto LABEL_829;
        v389 = v388;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_COUNT_MULTICAST_TOTAL"), v388);
        CFRelease(v389);
        v390 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[3] + 12);
        if (!v390)
          goto LABEL_829;
        v391 = v390;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_COUNT"), v390);
        CFRelease(v391);
        v392 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[42] + 12);
        if (!v392)
          goto LABEL_829;
        v393 = v392;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_COUNT"), v392);
        CFRelease(v393);
        v394 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[4]);
        if (!v394)
          goto LABEL_829;
        v395 = v394;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_SEARCH_DURATION"), v394);
        CFRelease(v395);
        v396 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[43]);
        if (!v396)
          goto LABEL_829;
        v397 = v396;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_SEARCH_DURATION"), v396);
        CFRelease(v397);
        v398 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[4] + 4);
        if (!v398)
          goto LABEL_829;
        v399 = v398;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_SEARCH_COUNT"), v398);
        CFRelease(v399);
        v400 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[43] + 4);
        if (!v400)
          goto LABEL_829;
        v401 = v400;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_SEARCH_COUNT"), v400);
        CFRelease(v401);
        v402 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[4] + 8);
        if (!v402)
          goto LABEL_829;
        v403 = v402;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MAC_ACTIVE_TIME"), v402);
        CFRelease(v403);
        v404 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[43] + 8);
        if (!v404)
          goto LABEL_829;
        v405 = v404;
        CFDictionarySetValue(v6, CFSTR("CACHED_MAC_ACTIVE_TIME"), v404);
        CFRelease(v405);
        v406 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[26] + 8);
        if (!v406)
          goto LABEL_829;
        v407 = v406;
        CFDictionarySetValue(v6, CFSTR("INSTANT_LPRX_SEARCH_DURATION"), v406);
        CFRelease(v407);
        v408 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[65] + 8);
        if (!v408)
          goto LABEL_829;
        v409 = v408;
        CFDictionarySetValue(v6, CFSTR("CACHED_LPRX_SEARCH_DURATION"), v408);
        CFRelease(v409);
        v410 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[27]);
        if (!v410)
          goto LABEL_829;
        v411 = v410;
        CFDictionarySetValue(v6, CFSTR("INSTANT_LPRX_SEARCH_COUNT"), v410);
        CFRelease(v411);
        v412 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[66]);
        if (!v412)
          goto LABEL_829;
        v413 = v412;
        CFDictionarySetValue(v6, CFSTR("CACHED_LPRX_SEARCH_COUNT"), v412);
        CFRelease(v413);
        v414 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[27] + 8);
        if (!v414)
          goto LABEL_829;
        v415 = v414;
        CFDictionarySetValue(v6, CFSTR("INSTANT_LPRX_ACTIVE_DURATION"), v414);
        CFRelease(v415);
        v416 = CFNumberCreate(v253, kCFNumberSInt64Type, (char *)&valuePtr[66] + 8);
        if (!v416)
          goto LABEL_829;
        v417 = v416;
        CFDictionarySetValue(v6, CFSTR("CACHED_LPRX_ACTIVE_DURATION"), v416);
        CFRelease(v417);
        v418 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[28]);
        if (!v418)
          goto LABEL_829;
        v419 = v418;
        CFDictionarySetValue(v6, CFSTR("INSTANT_LPRX_ACTIVE_COUNT"), v418);
        CFRelease(v419);
        v420 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[67]);
        if (!v420)
          goto LABEL_829;
        v421 = v420;
        CFDictionarySetValue(v6, CFSTR("CACHED_LPRX_ACTIVE_COUNT"), v420);
        CFRelease(v421);
        v422 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[7] + 12);
        if (!v422)
          goto LABEL_829;
        v423 = v422;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_COUNT_5G"), v422);
        CFRelease(v423);
        v424 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[46] + 12);
        if (!v424)
          goto LABEL_829;
        v425 = v424;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_COUNT_5G"), v424);
        CFRelease(v425);
        v426 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[8]);
        if (!v426)
          goto LABEL_829;
        v427 = v426;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_DURATION_5G"), v426);
        CFRelease(v427);
        v428 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[47]);
        if (!v428)
          goto LABEL_829;
        v429 = v428;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_DURATION_5G"), v428);
        CFRelease(v429);
        v430 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[8] + 4);
        if (!v430)
          goto LABEL_829;
        v431 = v430;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_COUNT_5G"), v430);
        CFRelease(v431);
        v432 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[47] + 4);
        if (!v432)
          goto LABEL_829;
        v433 = v432;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_COUNT_5G"), v432);
        CFRelease(v433);
        v434 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[8] + 8);
        if (!v434)
          goto LABEL_829;
        v435 = v434;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_DURATION_5G"), v434);
        CFRelease(v435);
        v436 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[47] + 8);
        if (!v436)
          goto LABEL_829;
        v437 = v436;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_DURATION_5G"), v436);
        CFRelease(v437);
        v438 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[8] + 12);
        if (!v438)
          goto LABEL_829;
        v439 = v438;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_COUNT_5G"), v438);
        CFRelease(v439);
        v440 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[47] + 12);
        if (!v440)
          goto LABEL_829;
        v441 = v440;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_COUNT_5G"), v440);
        CFRelease(v441);
        v442 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[9]);
        if (!v442)
          goto LABEL_829;
        v443 = v442;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_DURATION_5G"), v442);
        CFRelease(v443);
        v444 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[48]);
        if (!v444)
          goto LABEL_829;
        v445 = v444;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_DURATION_5G"), v444);
        CFRelease(v445);
        v446 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[9] + 4);
        if (!v446)
          goto LABEL_829;
        v447 = v446;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_COUNT_5G"), v446);
        CFRelease(v447);
        v448 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[48] + 4);
        if (!v448)
          goto LABEL_829;
        v449 = v448;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_COUNT_5G"), v448);
        CFRelease(v449);
        v450 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[9] + 8);
        if (!v450)
          goto LABEL_829;
        v451 = v450;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_DURATION_5G"), v450);
        CFRelease(v451);
        v452 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[48] + 8);
        if (!v452)
          goto LABEL_829;
        v453 = v452;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_DURATION_5G"), v452);
        CFRelease(v453);
        v454 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[9] + 12);
        if (!v454)
          goto LABEL_829;
        v455 = v454;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_COUNT_5G"), v454);
        CFRelease(v455);
        v456 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[48] + 12);
        if (!v456)
          goto LABEL_829;
        v457 = v456;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_COUNT_5G"), v456);
        CFRelease(v457);
        v458 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[10]);
        if (!v458)
          goto LABEL_829;
        v459 = v458;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_DURATION_5G"), v458);
        CFRelease(v459);
        v460 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[49]);
        if (!v460)
          goto LABEL_829;
        v461 = v460;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_DURATION_5G"), v460);
        CFRelease(v461);
        v462 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[10] + 4);
        if (!v462)
          goto LABEL_829;
        v463 = v462;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_COUNT_5G"), v462);
        CFRelease(v463);
        v464 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[49] + 4);
        if (!v464)
          goto LABEL_829;
        v465 = v464;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_COUNT_5G"), v464);
        CFRelease(v465);
        v466 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[10] + 8);
        if (!v466)
          goto LABEL_829;
        v467 = v466;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_DURATION_5G"), v466);
        CFRelease(v467);
        v468 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[49] + 8);
        if (!v468)
          goto LABEL_829;
        v469 = v468;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_DURATION_5G"), v468);
        CFRelease(v469);
        v470 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[36]);
        if (!v470)
          goto LABEL_829;
        v471 = v470;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v470);
        CFRelease(v471);
        v472 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[75]);
        if (!v472)
          goto LABEL_829;
        v473 = v472;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v472);
        CFRelease(v473);
        v474 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[36] + 4);
        if (!v474)
          goto LABEL_829;
        v475 = v474;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v474);
        CFRelease(v475);
        v476 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[75] + 4);
        if (!v476)
          goto LABEL_829;
        v477 = v476;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v476);
        CFRelease(v477);
        v478 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[36] + 8);
        if (!v478)
          goto LABEL_829;
        v479 = v478;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v478);
        CFRelease(v479);
        v480 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[75] + 8);
        if (!v480)
          goto LABEL_829;
        v481 = v480;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v480);
        CFRelease(v481);
        v482 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[36] + 12);
        if (!v482)
          goto LABEL_829;
        v483 = v482;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_OFF_5G_INFRA_CH_DUR_5G"), v482);
        CFRelease(v483);
        v484 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[75] + 12);
        if (!v484)
          goto LABEL_829;
        v485 = v484;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_OFF_5G_INFRA_CH_DUR_5G"), v484);
        CFRelease(v485);
        v486 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[37]);
        if (!v486)
          goto LABEL_829;
        v487 = v486;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_OFF_5G_INFRA_CH_DUR_5G"), v486);
        CFRelease(v487);
        v488 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[76]);
        if (!v488)
          goto LABEL_829;
        v489 = v488;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_OFF_5G_INFRA_CH_DUR_5G"), v488);
        CFRelease(v489);
        v490 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[37] + 4);
        if (!v490)
          goto LABEL_829;
        v491 = v490;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v490);
        CFRelease(v491);
        v492 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[76] + 4);
        if (!v492)
          goto LABEL_829;
        v493 = v492;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_OFF_5G_INFRA_CH_DUR_5G"), v492);
        CFRelease(v493);
        v494 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[10] + 12);
        if (!v494)
          goto LABEL_829;
        v495 = v494;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_COUNT_2G"), v494);
        CFRelease(v495);
        v496 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[49] + 12);
        if (!v496)
          goto LABEL_829;
        v497 = v496;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_COUNT_2G"), v496);
        CFRelease(v497);
        v498 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[11]);
        if (!v498)
          goto LABEL_829;
        v499 = v498;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_DURATION_2G"), v498);
        CFRelease(v499);
        v500 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[50]);
        if (!v500)
          goto LABEL_829;
        v501 = v500;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_DURATION_2G"), v500);
        CFRelease(v501);
        v502 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[11] + 4);
        if (!v502)
          goto LABEL_829;
        v503 = v502;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_COUNT_2G"), v502);
        CFRelease(v503);
        v504 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[50] + 4);
        if (!v504)
          goto LABEL_829;
        v505 = v504;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_COUNT_2G"), v504);
        CFRelease(v505);
        v506 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[11] + 8);
        if (!v506)
          goto LABEL_829;
        v507 = v506;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_DURATION_2G"), v506);
        CFRelease(v507);
        v508 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[50] + 8);
        if (!v508)
          goto LABEL_829;
        v509 = v508;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_DURATION_2G"), v508);
        CFRelease(v509);
        v510 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[11] + 12);
        if (!v510)
          goto LABEL_829;
        v511 = v510;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_COUNT_2G"), v510);
        CFRelease(v511);
        v512 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[50] + 12);
        if (!v512)
          goto LABEL_829;
        v513 = v512;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_COUNT_2G"), v512);
        CFRelease(v513);
        v514 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[12]);
        if (!v514)
          goto LABEL_829;
        v515 = v514;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_DURATION_2G"), v514);
        CFRelease(v515);
        v516 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[51]);
        if (!v516)
          goto LABEL_829;
        v517 = v516;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_DURATION_2G"), v516);
        CFRelease(v517);
        v518 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[12] + 4);
        if (!v518)
          goto LABEL_829;
        v519 = v518;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_COUNT_2G"), v518);
        CFRelease(v519);
        v520 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[51] + 4);
        if (!v520)
          goto LABEL_829;
        v521 = v520;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_COUNT_2G"), v520);
        CFRelease(v521);
        v522 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[12] + 8);
        if (!v522)
          goto LABEL_829;
        v523 = v522;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_DURATION_2G"), v522);
        CFRelease(v523);
        v524 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[51] + 8);
        if (!v524)
          goto LABEL_829;
        v525 = v524;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_DURATION_2G"), v524);
        CFRelease(v525);
        v526 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[12] + 12);
        if (!v526)
          goto LABEL_829;
        v527 = v526;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_COUNT_2G"), v526);
        CFRelease(v527);
        v528 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[51] + 12);
        if (!v528)
          goto LABEL_829;
        v529 = v528;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_COUNT_2G"), v528);
        CFRelease(v529);
        v530 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[13]);
        if (!v530)
          goto LABEL_829;
        v531 = v530;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_DURATION_2G"), v530);
        CFRelease(v531);
        v532 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[52]);
        if (!v532)
          goto LABEL_829;
        v533 = v532;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_DURATION_2G"), v532);
        CFRelease(v533);
        v534 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[13] + 4);
        if (!v534)
          goto LABEL_829;
        v535 = v534;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_COUNT_2G"), v534);
        CFRelease(v535);
        v536 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[52] + 4);
        if (!v536)
          goto LABEL_829;
        v537 = v536;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_COUNT_2G"), v536);
        CFRelease(v537);
        v538 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[13] + 8);
        if (!v538)
          goto LABEL_829;
        v539 = v538;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_DURATION_2G"), v538);
        CFRelease(v539);
        v540 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[52] + 8);
        if (!v540)
          goto LABEL_829;
        v541 = v540;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_DURATION_2G"), v540);
        CFRelease(v541);
        v542 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[37] + 8);
        if (!v542)
          goto LABEL_829;
        v543 = v542;
        CFDictionarySetValue(v6, CFSTR("INSTANT_USER_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v542);
        CFRelease(v543);
        v544 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[76] + 8);
        if (!v544)
          goto LABEL_829;
        v545 = v544;
        CFDictionarySetValue(v6, CFSTR("CACHED_USER_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v544);
        CFRelease(v545);
        v546 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[37] + 12);
        if (!v546)
          goto LABEL_829;
        v547 = v546;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ASSOC_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v546);
        CFRelease(v547);
        v548 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[76] + 12);
        if (!v548)
          goto LABEL_829;
        v549 = v548;
        CFDictionarySetValue(v6, CFSTR("CACHED_ASSOC_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v548);
        CFRelease(v549);
        v550 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[38]);
        if (!v550)
          goto LABEL_829;
        v551 = v550;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ROAM_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v550);
        CFRelease(v551);
        v552 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[77]);
        if (!v552)
          goto LABEL_829;
        v553 = v552;
        CFDictionarySetValue(v6, CFSTR("CACHED_ROAM_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v552);
        CFRelease(v553);
        v554 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[38] + 4);
        if (!v554)
          goto LABEL_829;
        v555 = v554;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_BSSID_OFF_2G_INFRA_CH_DUR_2G"), v554);
        CFRelease(v555);
        v556 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[77] + 4);
        if (!v556)
          goto LABEL_829;
        v557 = v556;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_BSSID_OFF_2G_INFRA_CH_DUR_2G"), v556);
        CFRelease(v557);
        v558 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[38] + 8);
        if (!v558)
          goto LABEL_829;
        v559 = v558;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PNO_SCAN_SSID_OFF_2G_INFRA_CH_DUR_2G"), v558);
        CFRelease(v559);
        v560 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[77] + 8);
        if (!v560)
          goto LABEL_829;
        v561 = v560;
        CFDictionarySetValue(v6, CFSTR("CACHED_PNO_SCAN_SSID_OFF_2G_INFRA_CH_DUR_2G"), v560);
        CFRelease(v561);
        v562 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[38] + 12);
        if (!v562)
          goto LABEL_829;
        v563 = v562;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OTHER_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v562);
        CFRelease(v563);
        v564 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[77] + 12);
        if (!v564)
          goto LABEL_829;
        v565 = v564;
        CFDictionarySetValue(v6, CFSTR("CACHED_OTHER_SCAN_OFF_2G_INFRA_CH_DUR_2G"), v564);
        CFRelease(v565);
        v566 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[13] + 12);
        if (!v566)
          goto LABEL_829;
        v567 = v566;
        CFDictionarySetValue(v6, CFSTR("INSTANT_DFS_PASSIVE_TO_ACTIVE_COUNT"), v566);
        CFRelease(v567);
        v568 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[52] + 12);
        if (!v568)
          goto LABEL_829;
        v569 = v568;
        CFDictionarySetValue(v6, CFSTR("CACHED_DFS_PASSIVE_TO_ACTIVE_COUNT"), v568);
        CFRelease(v569);
        v570 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[14]);
        if (!v570)
          goto LABEL_829;
        v571 = v570;
        CFDictionarySetValue(v6, CFSTR("INSTANT_AWDL_TX_DUR"), v570);
        CFRelease(v571);
        v572 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[53]);
        if (!v572)
          goto LABEL_829;
        v573 = v572;
        CFDictionarySetValue(v6, CFSTR("CACHED_AWDL_TX_DUR"), v572);
        CFRelease(v573);
        v574 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[14] + 4);
        if (!v574)
          goto LABEL_829;
        v575 = v574;
        CFDictionarySetValue(v6, CFSTR("INSTANT_AWDL_RX_DUR"), v574);
        CFRelease(v575);
        v576 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[53] + 4);
        if (!v576)
          goto LABEL_829;
        v577 = v576;
        CFDictionarySetValue(v6, CFSTR("CACHED_AWDL_RX_DUR"), v576);
        CFRelease(v577);
        v578 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[14] + 8);
        if (!v578)
          goto LABEL_829;
        v579 = v578;
        CFDictionarySetValue(v6, CFSTR("INSTANT_AWDL_AW_DUR"), v578);
        CFRelease(v579);
        v580 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[53] + 8);
        if (!v580)
          goto LABEL_829;
        v581 = v580;
        CFDictionarySetValue(v6, CFSTR("CACHED_AWDL_AW_DUR"), v580);
        CFRelease(v581);
        v582 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[14] + 12);
        if (!v582)
          goto LABEL_829;
        v583 = v582;
        CFDictionarySetValue(v6, CFSTR("INSTANT_AWDL_PSCANS_DUR"), v582);
        CFRelease(v583);
        v584 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[53] + 12);
        if (!v584)
          goto LABEL_829;
        v585 = v584;
        CFDictionarySetValue(v6, CFSTR("CACHED_AWDL_PSCANS_DUR"), v584);
        CFRelease(v585);
        v586 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[15]);
        if (!v586)
          goto LABEL_829;
        v587 = v586;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_D3_SUSPEND_CT "), v586);
        CFRelease(v587);
        v588 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[54]);
        if (!v588)
          goto LABEL_829;
        v589 = v588;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_D3_SUSPEND_CT "), v588);
        CFRelease(v589);
        v590 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[15] + 4);
        if (!v590)
          goto LABEL_829;
        v591 = v590;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_D0_RESUME_CT"), v590);
        CFRelease(v591);
        v592 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[54] + 4);
        if (!v592)
          goto LABEL_829;
        v593 = v592;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_D0_RESUME_CT"), v592);
        CFRelease(v593);
        v594 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[15] + 8);
        if (!v594)
          goto LABEL_829;
        v595 = v594;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_PERST_ASSRT_CT"), v594);
        CFRelease(v595);
        v596 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[54] + 8);
        if (!v596)
          goto LABEL_829;
        v597 = v596;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_PERST_ASSRT_CT"), v596);
        CFRelease(v597);
        v598 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[15] + 12);
        if (!v598)
          goto LABEL_829;
        v599 = v598;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_PERST_DEASSRT_CT "), v598);
        CFRelease(v599);
        v600 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[54] + 12);
        if (!v600)
          goto LABEL_829;
        v601 = v600;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_PERST_DEASSRT_CT "), v600);
        CFRelease(v601);
        v602 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[16]);
        if (!v602)
          goto LABEL_829;
        v603 = v602;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_ACTIVE_DUR"), v602);
        CFRelease(v603);
        v604 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[55]);
        if (!v604)
          goto LABEL_829;
        v605 = v604;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_ACTIVE_DUR"), v604);
        CFRelease(v605);
        v606 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[16] + 4);
        if (!v606)
          goto LABEL_829;
        v607 = v606;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_D3_SUSPEND_DUR "), v606);
        CFRelease(v607);
        v608 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[55] + 4);
        if (!v608)
          goto LABEL_829;
        v609 = v608;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_D3_SUSPEND_DUR "), v608);
        CFRelease(v609);
        v610 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[16] + 8);
        if (!v610)
          goto LABEL_829;
        v611 = v610;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_PERST_DUR"), v610);
        CFRelease(v611);
        v612 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[55] + 8);
        if (!v612)
          goto LABEL_829;
        v613 = v612;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_PERST_DUR"), v612);
        CFRelease(v613);
        v614 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[16] + 12);
        if (!v614)
          goto LABEL_829;
        v615 = v614;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L0_CT"), v614);
        CFRelease(v615);
        v616 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[55] + 12);
        if (!v616)
          goto LABEL_829;
        v617 = v616;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L0_CT"), v616);
        CFRelease(v617);
        v618 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[17]);
        if (!v618)
          goto LABEL_829;
        v619 = v618;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L0_DUR"), v618);
        CFRelease(v619);
        v620 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[56]);
        if (!v620)
          goto LABEL_829;
        v621 = v620;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L0_DUR"), v620);
        CFRelease(v621);
        v622 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[17] + 4);
        if (!v622)
          goto LABEL_829;
        v623 = v622;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L1_CT"), v622);
        CFRelease(v623);
        v624 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[56] + 4);
        if (!v624)
          goto LABEL_829;
        v625 = v624;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L1_CT"), v624);
        CFRelease(v625);
        v626 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[17] + 8);
        if (!v626)
          goto LABEL_829;
        v627 = v626;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L1_DUR"), v626);
        CFRelease(v627);
        v628 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[56] + 8);
        if (!v628)
          goto LABEL_829;
        v629 = v628;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L1_DUR"), v628);
        CFRelease(v629);
        v630 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[17] + 12);
        if (!v630)
          goto LABEL_829;
        v631 = v630;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L1_1_CT"), v630);
        CFRelease(v631);
        v632 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[56] + 12);
        if (!v632)
          goto LABEL_829;
        v633 = v632;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L1_1_CT"), v632);
        CFRelease(v633);
        v634 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[18]);
        if (!v634)
          goto LABEL_829;
        v635 = v634;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L1_1_DUR"), v634);
        CFRelease(v635);
        v636 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[57]);
        if (!v636)
          goto LABEL_829;
        v637 = v636;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L1_1_DUR"), v636);
        CFRelease(v637);
        v638 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[18] + 4);
        if (!v638)
          goto LABEL_829;
        v639 = v638;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L1_2_CT"), v638);
        CFRelease(v639);
        v640 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[57] + 4);
        if (!v640)
          goto LABEL_829;
        v641 = v640;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L1_2_CT"), v640);
        CFRelease(v641);
        v642 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[18] + 8);
        if (!v642)
          goto LABEL_829;
        v643 = v642;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L1_2_DUR"), v642);
        CFRelease(v643);
        v644 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[57] + 8);
        if (!v644)
          goto LABEL_829;
        v645 = v644;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L1_2_DUR"), v644);
        CFRelease(v645);
        v646 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[18] + 12);
        if (!v646)
          goto LABEL_829;
        v647 = v646;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L2_CT"), v646);
        CFRelease(v647);
        v648 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[57] + 12);
        if (!v648)
          goto LABEL_829;
        v649 = v648;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L2_CT"), v648);
        CFRelease(v649);
        v650 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[19]);
        if (!v650)
          goto LABEL_829;
        v651 = v650;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_L2_DUR"), v650);
        CFRelease(v651);
        v652 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[58]);
        if (!v652)
          goto LABEL_829;
        v653 = v652;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_L2_DUR"), v652);
        CFRelease(v653);
        v654 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[19] + 4);
        if (!v654)
          goto LABEL_829;
        v655 = v654;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_DEEPSLEEP_CT"), v654);
        CFRelease(v655);
        v656 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[58] + 4);
        if (!v656)
          goto LABEL_829;
        v657 = v656;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_DEEPSLEEP_CT"), v656);
        CFRelease(v657);
        v658 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[19] + 8);
        if (!v658)
          goto LABEL_829;
        v659 = v658;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_DEEPSLEEP_DUR"), v658);
        CFRelease(v659);
        v660 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[58] + 8);
        if (!v660)
          goto LABEL_829;
        v661 = v660;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_DEEPSLEEP_DUR"), v660);
        CFRelease(v661);
        v662 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[19] + 12);
        if (!v662)
          goto LABEL_829;
        v663 = v662;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_LTR_ACTIVE_CT"), v662);
        CFRelease(v663);
        v664 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[58] + 12);
        if (!v664)
          goto LABEL_829;
        v665 = v664;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_LTR_ACTIVE_CT"), v664);
        CFRelease(v665);
        v666 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[20]);
        if (!v666)
          goto LABEL_829;
        v667 = v666;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_LTR_ACTIVE_DUR"), v666);
        CFRelease(v667);
        v668 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[59]);
        if (!v668)
          goto LABEL_829;
        v669 = v668;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_LTR_ACTIVE_DUR"), v668);
        CFRelease(v669);
        v670 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[20] + 4);
        if (!v670)
          goto LABEL_829;
        v671 = v670;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_LTR_SLEEP_CT"), v670);
        CFRelease(v671);
        v672 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[59] + 4);
        if (!v672)
          goto LABEL_829;
        v673 = v672;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_LTR_SLEEP_CT"), v672);
        CFRelease(v673);
        v674 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[20] + 8);
        if (!v674)
          goto LABEL_829;
        v675 = v674;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PCIE_LTR_SLEEP_DUR"), v674);
        CFRelease(v675);
        v676 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[59] + 8);
        if (!v676)
          goto LABEL_829;
        v677 = v676;
        CFDictionarySetValue(v6, CFSTR("CACHED_PCIE_LTR_SLEEP_DUR"), v676);
        CFRelease(v677);
        v678 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[2]);
        if (!v678)
          goto LABEL_829;
        v679 = v678;
        CFDictionarySetValue(v6, CFSTR("INSTANT_FRTS_TIME"), v678);
        CFRelease(v679);
        v680 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[41]);
        if (!v680)
          goto LABEL_829;
        v681 = v680;
        CFDictionarySetValue(v6, CFSTR("CACHED_FRTS_TIME"), v680);
        CFRelease(v681);
        v682 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4);
        if (!v682)
          goto LABEL_829;
        v683 = v682;
        CFDictionarySetValue(v6, CFSTR("INSTANT_FRTS_CNT"), v682);
        CFRelease(v683);
        v684 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[41] + 4);
        if (!v684)
          goto LABEL_829;
        v685 = v684;
        CFDictionarySetValue(v6, CFSTR("CACHED_FRTS_CNT"), v684);
        CFRelease(v685);
        v686 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[25] + 4);
        if (!v686)
          goto LABEL_829;
        v687 = v686;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SLICE_INDEX"), v686);
        CFRelease(v687);
        v688 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[64] + 4);
        if (!v688)
          goto LABEL_829;
        v689 = v688;
        CFDictionarySetValue(v6, CFSTR("CACHED_SLICE_INDEX"), v688);
        CFRelease(v689);
        v690 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[25] + 6);
        if (!v690)
          goto LABEL_829;
        v691 = v690;
        CFDictionarySetValue(v6, CFSTR("INSTANT_BAND_TYPE"), v690);
        CFRelease(v691);
        v692 = CFNumberCreate(v253, kCFNumberSInt16Type, (char *)&valuePtr[64] + 6);
        if (!v692)
          goto LABEL_829;
        v693 = v692;
        CFDictionarySetValue(v6, CFSTR("CACHED_BAND_TYPE"), v692);
        CFRelease(v693);
        v694 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[25] + 8);
        if (!v694)
          goto LABEL_829;
        v695 = v694;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PSBW_ENABLED_DURATION"), v694);
        CFRelease(v695);
        v696 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[64] + 8);
        if (!v696)
          goto LABEL_829;
        v697 = v696;
        CFDictionarySetValue(v6, CFSTR("CACHED_PSBW_ENABLED_DURATION"), v696);
        CFRelease(v697);
        v698 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[25] + 12);
        if (!v698)
          goto LABEL_829;
        v699 = v698;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PHY_OFFLINE_DURATION"), v698);
        CFRelease(v699);
        v700 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[64] + 12);
        if (!v700)
          goto LABEL_829;
        v701 = v700;
        CFDictionarySetValue(v6, CFSTR("CACHED_CACHED_PHY_OFFLINE_DURATION"), v700);
        CFRelease(v701);
        v702 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[29]);
        if (!v702)
          goto LABEL_829;
        v703 = v702;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PHY_CALIBRATION_DURATION"), v702);
        CFRelease(v703);
        v704 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[68]);
        if (!v704)
          goto LABEL_829;
        v705 = v704;
        CFDictionarySetValue(v6, CFSTR("CACHED_PHY_CALIBRATION_DURATION"), v704);
        CFRelease(v705);
        v706 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[29] + 4);
        if (!v706)
          goto LABEL_829;
        v707 = v706;
        CFDictionarySetValue(v6, CFSTR("INSTANT_PHY_CALIBRATION_COUNT"), v706);
        CFRelease(v707);
        v708 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[68] + 4);
        if (!v708)
          goto LABEL_829;
        v709 = v708;
        CFDictionarySetValue(v6, CFSTR("CACHED_PHY_CALIBRATION_COUNT"), v708);
        CFRelease(v709);
        v710 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[20] + 12);
        if (!v710)
          goto LABEL_829;
        v711 = v710;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_IDLE_TIME_MIMO"), v710);
        CFRelease(v711);
        v712 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[59] + 12);
        if (!v712)
          goto LABEL_829;
        v713 = v712;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_IDLE_TIME_MIMO"), v712);
        CFRelease(v713);
        v714 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[21]);
        if (!v714)
          goto LABEL_829;
        v715 = v714;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_IDLE_TIME_SISO"), v714);
        CFRelease(v715);
        v716 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[60]);
        if (!v716)
          goto LABEL_829;
        v717 = v716;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_IDLE_TIME_SISO"), v716);
        CFRelease(v717);
        v718 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[21] + 4);
        if (!v718)
          goto LABEL_829;
        v719 = v718;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_RX_TIME_SISO"), v718);
        CFRelease(v719);
        v720 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[60] + 4);
        if (!v720)
          goto LABEL_829;
        v721 = v720;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_RX_TIME_SISO"), v720);
        CFRelease(v721);
        v722 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[21] + 8);
        if (!v722)
          goto LABEL_829;
        v723 = v722;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_RX_TIME_MIMO"), v722);
        CFRelease(v723);
        v724 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[60] + 8);
        if (!v724)
          goto LABEL_829;
        v725 = v724;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_RX_TIME_MIMO"), v724);
        CFRelease(v725);
        v726 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[21] + 12);
        if (!v726)
          goto LABEL_829;
        v727 = v726;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_TX_TIME_1CHAIN"), v726);
        CFRelease(v727);
        v728 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[60] + 12);
        if (!v728)
          goto LABEL_829;
        v729 = v728;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_TX_TIME_1CHAIN"), v728);
        CFRelease(v729);
        v730 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[22]);
        if (!v730)
          goto LABEL_829;
        v731 = v730;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_TX_TIME_2CHAIN"), v730);
        CFRelease(v731);
        v732 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[61]);
        if (!v732)
          goto LABEL_829;
        v733 = v732;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_TX_TIME_2CHAIN"), v732);
        CFRelease(v733);
        v734 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[22] + 4);
        if (!v734)
          goto LABEL_829;
        v735 = v734;
        CFDictionarySetValue(v6, CFSTR("INSTANT_MIMO_PS_TOTAL_TX_TIME_3CHAIN"), v734);
        CFRelease(v735);
        v736 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[61] + 4);
        if (!v736)
          goto LABEL_829;
        v737 = v736;
        CFDictionarySetValue(v6, CFSTR("CACHED_MIMO_PS_TOTAL_TX_TIME_3CHAIN"), v736);
        CFRelease(v737);
        v738 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[22] + 12);
        if (!v738)
          goto LABEL_829;
        v739 = v738;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OCL_TOTAL_RX_TIME"), v738);
        CFRelease(v739);
        v740 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[61] + 12);
        if (!v740)
          goto LABEL_829;
        v741 = v740;
        CFDictionarySetValue(v6, CFSTR("CACHED_OCL_TOTAL_RX_TIME"), v740);
        CFRelease(v741);
        v742 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[22] + 8);
        if (!v742)
          goto LABEL_829;
        v743 = v742;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OCL_TOTAL_IDLE_TIME"), v742);
        CFRelease(v743);
        v744 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[61] + 8);
        if (!v744)
          goto LABEL_829;
        v745 = v744;
        CFDictionarySetValue(v6, CFSTR("CACHED_OCL_TOTAL_IDLE_TIME"), v744);
        CFRelease(v745);
        v746 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[23]);
        if (!v746)
          goto LABEL_829;
        v747 = v746;
        CFDictionarySetValue(v6, CFSTR("INSTANT_EBT_BCN_SCHEDULED"), v746);
        CFRelease(v747);
        v748 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[62]);
        if (!v748)
          goto LABEL_829;
        v749 = v748;
        CFDictionarySetValue(v6, CFSTR("CACHED_EBT_BCN_SCHEDULED"), v748);
        CFRelease(v749);
        v750 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[23] + 4);
        if (!v750)
          goto LABEL_829;
        v751 = v750;
        CFDictionarySetValue(v6, CFSTR("INSTANT_EBT_BCN_RXED"), v750);
        CFRelease(v751);
        v752 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[62] + 4);
        if (!v752)
          goto LABEL_829;
        v753 = v752;
        CFDictionarySetValue(v6, CFSTR("CACHED_EBT_BCN_RXED"), v752);
        CFRelease(v753);
        v754 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[23] + 8);
        if (!v754)
          goto LABEL_829;
        v755 = v754;
        CFDictionarySetValue(v6, CFSTR("INSTANT_EBT_BCN_EARLY_TERMINATED"), v754);
        CFRelease(v755);
        v756 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[62] + 8);
        if (!v756)
          goto LABEL_829;
        v757 = v756;
        CFDictionarySetValue(v6, CFSTR("CACHED_EBT_BCN_EARLY_TERMINATED"), v756);
        CFRelease(v757);
        v758 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[23] + 12);
        if (!v758)
          goto LABEL_829;
        v759 = v758;
        CFDictionarySetValue(v6, CFSTR("INSTANT_EBT_BCN_MISSED"), v758);
        CFRelease(v759);
        v760 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[62] + 12);
        if (!v760)
          goto LABEL_829;
        v761 = v760;
        CFDictionarySetValue(v6, CFSTR("CACHED_EBT_BCN_MISSED"), v760);
        CFRelease(v761);
        v762 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[24]);
        if (!v762)
          goto LABEL_829;
        v763 = v762;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OPS_PARTIAL_DURATION"), v762);
        CFRelease(v763);
        v764 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[63]);
        if (!v764)
          goto LABEL_829;
        v765 = v764;
        CFDictionarySetValue(v6, CFSTR("CACHED_OPS_PARTIAL_DURATION"), v764);
        CFRelease(v765);
        v766 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[24] + 4);
        if (!v766)
          goto LABEL_829;
        v767 = v766;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OPS_FULL_DURATION"), v766);
        CFRelease(v767);
        v768 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[63] + 4);
        if (!v768)
          goto LABEL_829;
        v769 = v768;
        CFDictionarySetValue(v6, CFSTR("CACHED_OPS_FULL_DURATION"), v768);
        CFRelease(v769);
        v770 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[24] + 8);
        if (!v770)
          goto LABEL_829;
        v771 = v770;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OPS_RX_DURATION_MBSS"), v770);
        CFRelease(v771);
        v772 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[63] + 8);
        if (!v772)
          goto LABEL_829;
        v773 = v772;
        CFDictionarySetValue(v6, CFSTR("CACHED_OPS_RX_DURATION_MBSS"), v772);
        CFRelease(v773);
        v774 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[24] + 12);
        if (!v774)
          goto LABEL_829;
        v775 = v774;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OPS_RX_DURATION_IBSS"), v774);
        CFRelease(v775);
        v776 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[63] + 12);
        if (!v776)
          goto LABEL_829;
        v777 = v776;
        CFDictionarySetValue(v6, CFSTR("CACHED_OPS_RX_DURATION_IBSS"), v776);
        CFRelease(v777);
        v778 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[25]);
        if (!v778)
          goto LABEL_829;
        v779 = v778;
        CFDictionarySetValue(v6, CFSTR("INSTANT_OPS_RX_DURATION_OBSS"), v778);
        CFRelease(v779);
        v780 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[64]);
        if (!v780)
          goto LABEL_829;
        v781 = v780;
        CFDictionarySetValue(v6, CFSTR("CACHED_OPS_RX_DURATION_OBSS"), v780);
        CFRelease(v781);
        v782 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[78]);
        if (!v782)
          goto LABEL_829;
        v783 = v782;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_TIME_STAMP"), v782);
        CFRelease(v783);
        v784 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[83]);
        if (!v784)
          goto LABEL_829;
        v785 = v784;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_TIME_STAMP"), v784);
        CFRelease(v785);
        v786 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[78] + 8);
        if (!v786)
          goto LABEL_829;
        v787 = v786;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_USR_SCAN_CNT"), v786);
        CFRelease(v787);
        v788 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[83] + 8);
        if (!v788)
          goto LABEL_829;
        v789 = v788;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_USR_SCAN_CNT"), v788);
        CFRelease(v789);
        v790 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[78] + 12);
        if (!v790)
          goto LABEL_829;
        v791 = v790;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_USR_SCAN_DUR"), v790);
        CFRelease(v791);
        v792 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[83] + 12);
        if (!v792)
          goto LABEL_829;
        v793 = v792;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_USR_SCAN_DUR"), v792);
        CFRelease(v793);
        v794 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[79]);
        if (!v794)
          goto LABEL_829;
        v795 = v794;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_ASSOC_SCAN_CNT"), v794);
        CFRelease(v795);
        v796 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[84]);
        if (!v796)
          goto LABEL_829;
        v797 = v796;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_ASSOC_SCAN_CNT"), v796);
        CFRelease(v797);
        v798 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[79] + 4);
        if (!v798)
          goto LABEL_829;
        v799 = v798;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_ASSOC_SCAN_DUR"), v798);
        CFRelease(v799);
        v800 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[84] + 4);
        if (!v800)
          goto LABEL_829;
        v801 = v800;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_ASSOC_SCAN_DUR"), v800);
        CFRelease(v801);
        v802 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[79] + 8);
        if (!v802)
          goto LABEL_829;
        v803 = v802;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_ROAM_SCAN_CNT"), v802);
        CFRelease(v803);
        v804 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[84] + 8);
        if (!v804)
          goto LABEL_829;
        v805 = v804;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_ROAM_SCAN_CNT"), v804);
        CFRelease(v805);
        v806 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[79] + 12);
        if (!v806)
          goto LABEL_829;
        v807 = v806;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_ROAM_SCAN_DUR"), v806);
        CFRelease(v807);
        v808 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[84] + 12);
        if (!v808)
          goto LABEL_829;
        v809 = v808;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_ROAM_SCAN_DUR"), v808);
        CFRelease(v809);
        v810 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[80]);
        if (!v810)
          goto LABEL_829;
        v811 = v810;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_PNO_SCAN_CNT"), v810);
        CFRelease(v811);
        v812 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[85]);
        if (!v812)
          goto LABEL_829;
        v813 = v812;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_PNO_SCAN_CNT"), v812);
        CFRelease(v813);
        v814 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[80] + 4);
        if (!v814)
          goto LABEL_829;
        v815 = v814;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_PNO_SCAN_DUR"), v814);
        CFRelease(v815);
        v816 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[85] + 4);
        if (!v816)
          goto LABEL_829;
        v817 = v816;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_PNO_SCAN_DUR"), v816);
        CFRelease(v817);
        v818 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[81] + 12);
        if (!v818)
          goto LABEL_829;
        v819 = v818;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_RX_DURATION_SISO"), v818);
        CFRelease(v819);
        v820 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[86] + 12);
        if (!v820)
          goto LABEL_829;
        v821 = v820;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_RX_DURATION_SISO"), v820);
        CFRelease(v821);
        v822 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[81] + 8);
        if (!v822)
          goto LABEL_829;
        v823 = v822;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_IDLE_DURATION_SISO"), v822);
        CFRelease(v823);
        v824 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[86] + 8);
        if (!v824)
          goto LABEL_829;
        v825 = v824;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_IDLE_DURATION_SISO"), v824);
        CFRelease(v825);
        v826 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[82] + 4);
        if (!v826)
          goto LABEL_829;
        v827 = v826;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_PM_DURATION"), v826);
        CFRelease(v827);
        v828 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[87] + 4);
        if (!v828)
          goto LABEL_829;
        v829 = v828;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_PM_DURATION"), v828);
        CFRelease(v829);
        v830 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[82] + 8);
        if (!v830)
          goto LABEL_829;
        v831 = v830;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_RX_MPC_DURATION"), v830);
        CFRelease(v831);
        v832 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[87] + 8);
        if (!v832)
          goto LABEL_829;
        v833 = v832;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_RX_MPC_DURATION"), v832);
        CFRelease(v833);
        v834 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[82] + 12);
        if (!v834)
          goto LABEL_829;
        v835 = v834;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SC_BLANKED_SCAN_CNT"), v834);
        CFRelease(v835);
        v836 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[87] + 12);
        if (!v836)
          goto LABEL_829;
        v837 = v836;
        CFDictionarySetValue(v6, CFSTR("CACHED_SC_BLANKED_SCAN_CNT"), v836);
        CFRelease(v837);
        v838 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[88]);
        if (!v838)
          goto LABEL_829;
        v839 = v838;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_DURATION"), v838);
        CFRelease(v839);
        v840 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[88] + 4);
        if (!v840)
          goto LABEL_829;
        v841 = v840;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_MPC_WAKE_DURATION"), v840);
        CFRelease(v841);
        v842 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[88] + 8);
        if (!v842)
          goto LABEL_829;
        v843 = v842;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_MPC_BEACONS_SCHEDULED"), v842);
        CFRelease(v843);
        v844 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[88] + 12);
        if (!v844)
          goto LABEL_829;
        v845 = v844;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_MPC_EARLY_BEACONS_TERMINATED"), v844);
        CFRelease(v845);
        v846 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[89]);
        if (!v846)
          goto LABEL_829;
        v847 = v846;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_MPC_BEACONS_RECEIVED"), v846);
        CFRelease(v847);
        v848 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[89] + 4);
        if (!v848)
          goto LABEL_829;
        v849 = v848;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_MPC_BEACONS_MISSED"), v848);
        CFRelease(v849);
        v850 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[89] + 8);
        if (!v850)
          goto LABEL_829;
        v851 = v850;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_LPSC_WAKE_DURATION"), v850);
        CFRelease(v851);
        v852 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[89] + 12);
        if (!v852)
          goto LABEL_829;
        v853 = v852;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_LPSC_BEACONS_SCHEDULED"), v852);
        CFRelease(v853);
        v854 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[90]);
        if (!v854)
          goto LABEL_829;
        v855 = v854;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_LPSC_EARLY_BEACONS_TERMINATED"), v854);
        CFRelease(v855);
        v856 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[90] + 4);
        if (!v856)
          goto LABEL_829;
        v857 = v856;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_LPSC_BEACONS_RECEIVED"), v856);
        CFRelease(v857);
        v858 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[90] + 8);
        if (!v858)
          goto LABEL_829;
        v859 = v858;
        CFDictionarySetValue(v6, CFSTR("INACTVITY_LPSC_BEACONS_MISSED"), v858);
        CFRelease(v859);
        v860 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[30] + 4);
        if (!v860)
          goto LABEL_829;
        v861 = v860;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_UPR_PROCESSED"), v860);
        CFRelease(v861);
        v862 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[69] + 4);
        if (!v862)
          goto LABEL_829;
        v863 = v862;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_UPR_PROCESSED"), v862);
        CFRelease(v863);
        v864 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[30] + 8);
        if (!v864)
          goto LABEL_829;
        v865 = v864;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_UPR_IGNORED"), v864);
        CFRelease(v865);
        v866 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[69] + 8);
        if (!v866)
          goto LABEL_829;
        v867 = v866;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_UPR_IGNORED"), v866);
        CFRelease(v867);
        v868 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[30] + 12);
        if (!v868)
          goto LABEL_829;
        v869 = v868;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_FILS_PROCESSED"), v868);
        CFRelease(v869);
        v870 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[69] + 12);
        if (!v870)
          goto LABEL_829;
        v871 = v870;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_FILS_PROCESSED"), v870);
        CFRelease(v871);
        v872 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[31]);
        if (!v872)
          goto LABEL_829;
        v873 = v872;
        CFDictionarySetValue(v6, CFSTR("INSTANT_RX_FILS_IGNORED"), v872);
        CFRelease(v873);
        v874 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[70]);
        if (!v874)
          goto LABEL_829;
        v875 = v874;
        CFDictionarySetValue(v6, CFSTR("CACHED_RX_FILS_IGNORED"), v874);
        CFRelease(v875);
        v876 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[31] + 4);
        if (!v876)
          goto LABEL_829;
        v877 = v876;
        CFDictionarySetValue(v6, CFSTR("INSTANT_REFERRED_6G_SCANS"), v876);
        CFRelease(v877);
        v878 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[70] + 4);
        if (!v878)
          goto LABEL_829;
        v879 = v878;
        CFDictionarySetValue(v6, CFSTR("CACHED_REFERRED_6G_SCANS"), v878);
        CFRelease(v879);
        v880 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[90] + 12);
        if (!v880)
          goto LABEL_829;
        v881 = v880;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_SCAN_DUR_2G"), v880);
        CFRelease(v881);
        v882 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[91]);
        if (!v882)
          goto LABEL_829;
        v883 = v882;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_SCAN_DUR_5G"), v882);
        CFRelease(v883);
        v884 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[91] + 4);
        if (!v884)
          goto LABEL_829;
        v885 = v884;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_SCAN_DUR_6G"), v884);
        CFRelease(v885);
        v886 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[91] + 8);
        if (!v886)
          goto LABEL_829;
        v887 = v886;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHANNEL_CNT_2G"), v886);
        CFRelease(v887);
        v888 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[91] + 12);
        if (!v888)
          goto LABEL_829;
        v889 = v888;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHANNEL_CNT_5G"), v888);
        CFRelease(v889);
        v890 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[92]);
        if (!v890)
          goto LABEL_829;
        v891 = v890;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHANNEL_CNT_6G"), v890);
        CFRelease(v891);
        v892 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[92] + 4);
        if (!v892)
          goto LABEL_829;
        v893 = v892;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHANNEL_CNT_SC_2G"), v892);
        CFRelease(v893);
        v894 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[92] + 8);
        if (!v894)
          goto LABEL_829;
        v895 = v894;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHANNEL_CNT_SC_5G"), v894);
        CFRelease(v895);
        v896 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[92] + 12);
        if (!v896)
          goto LABEL_829;
        v897 = v896;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHANNEL_CNT_SC_6G"), v896);
        CFRelease(v897);
        v898 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[93]);
        if (!v898)
          goto LABEL_829;
        v899 = v898;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_ACTIVE_CHANNEL_CNT"), v898);
        CFRelease(v899);
        v900 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[93] + 4);
        if (!v900)
          goto LABEL_829;
        v901 = v900;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_PASSIVE_CHANNEL_CNT"), v900);
        CFRelease(v901);
        v902 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[93] + 8);
        if (!v902)
          goto LABEL_829;
        v903 = v902;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_START_TIME"), v902);
        CFRelease(v903);
        v904 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[93] + 12);
        if (!v904)
          goto LABEL_829;
        v905 = v904;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_END_TIME"), v904);
        CFRelease(v905);
        v906 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[94]);
        if (!v906)
          goto LABEL_829;
        v907 = v906;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_DUR_2G"), v906);
        CFRelease(v907);
        v908 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[94] + 4);
        if (!v908)
          goto LABEL_829;
        v909 = v908;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_DUR_5G"), v908);
        CFRelease(v909);
        v910 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[94] + 8);
        if (!v910)
          goto LABEL_829;
        v911 = v910;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_DUR_6G"), v910);
        CFRelease(v911);
        v912 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[94] + 12);
        if (!v912)
          goto LABEL_829;
        v913 = v912;
        CFDictionarySetValue(v6, CFSTR("INSTANT_TOTAL_CHAN_NUM"), v912);
        CFRelease(v913);
        v914 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[95]);
        if (!v914)
          goto LABEL_829;
        v915 = v914;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CHANNEL_CNT_2G"), v914);
        CFRelease(v915);
        v916 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[95] + 4);
        if (!v916)
          goto LABEL_829;
        v917 = v916;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CHANNEL_CNT_5G"), v916);
        CFRelease(v917);
        v918 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[95] + 8);
        if (!v918)
          goto LABEL_829;
        v919 = v918;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CHANNEL_CNT_6G"), v918);
        CFRelease(v919);
        v920 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[95] + 12);
        if (!v920)
          goto LABEL_829;
        v921 = v920;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CHANNEL_CNT_SC_2G"), v920);
        CFRelease(v921);
        v922 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[96]);
        if (!v922)
          goto LABEL_829;
        v923 = v922;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CHANNEL_CNT_SC_5G"), v922);
        CFRelease(v923);
        v924 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[96] + 4);
        if (!v924)
          goto LABEL_829;
        v925 = v924;
        CFDictionarySetValue(v6, CFSTR("INSTANT_CHANNEL_CNT_SC_6G"), v924);
        CFRelease(v925);
        v926 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[96] + 8);
        if (!v926)
          goto LABEL_829;
        v927 = v926;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ACTIVE_CHANNEL_CNT"), v926);
        CFRelease(v927);
        v928 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[96] + 12);
        if (!v928)
          goto LABEL_829;
        v929 = v928;
        CFDictionarySetValue(v6, CFSTR("INSTANT_ACTIVE_PASSIVE_CNT"), v928);
        CFRelease(v929);
        v930 = CFNumberCreate(v253, kCFNumberSInt8Type, &valuePtr[97]);
        if (!v930)
          goto LABEL_829;
        v931 = v930;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_CLIENT"), v930);
        CFRelease(v931);
        v932 = CFNumberCreate(v253, kCFNumberSInt8Type, (char *)&valuePtr[97] + 1);
        if (!v932)
          goto LABEL_829;
        v933 = v932;
        CFDictionarySetValue(v6, CFSTR("INSTANT_SCAN_MODE"), v932);
        CFRelease(v933);
        v934 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[97] + 4);
        if (!v934)
          goto LABEL_829;
        v935 = v934;
        CFDictionarySetValue(v6, CFSTR("SCANFORWARD_FORWARDED_BSSS_IN_WAKE"), v934);
        CFRelease(v935);
        v936 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[97] + 8);
        if (!v936)
          goto LABEL_829;
        v937 = v936;
        CFDictionarySetValue(v6, CFSTR("SCANFORWARD_FORWARDED_BSSS_IN_SLEEP"), v936);
        CFRelease(v937);
        v938 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[98] + 12);
        if (!v938)
          goto LABEL_829;
        v939 = v938;
        CFDictionarySetValue(v6, CFSTR("SCANFORWARD_CURRENT_BSSS_IN_WAKE"), v938);
        CFRelease(v939);
        v940 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[99]);
        if (!v940)
          goto LABEL_829;
        v941 = v940;
        CFDictionarySetValue(v6, CFSTR("SCANFORWARD_CURRENT_BSSS_IN_SLEEP"), v940);
        CFRelease(v941);
        v942 = CFNumberCreate(v253, kCFNumberSInt32Type, (char *)&valuePtr[99] + 12);
        if (!v942)
          goto LABEL_829;
        v943 = v942;
        CFDictionarySetValue(v6, CFSTR("SCANFORWARD_TOTAL_SPMI_MSGS_IN_WAKE"), v942);
        CFRelease(v943);
        v944 = CFNumberCreate(v253, kCFNumberSInt32Type, &valuePtr[100]);
        if (!v944)
          goto LABEL_829;
        v37 = v944;
        v101 = CFSTR("SCANFORWARD_TOTAL_SPMI_MSGS_IN_SLEEP");
        goto LABEL_736;
      default:
        if (v4 != 207)
        {
          if (v4 != 216)
            goto LABEL_10;
          RoamProfile = _getRoamProfile(v5, (uint64_t)&v1026, v6);
          goto LABEL_355;
        }
        if (!v8)
          goto LABEL_741;
        bzero(valuePtr, 0x2720uLL);
        v1028 = (UInt8 *)valuePtr;
        DWORD2(v1027) = 10016;
        if (Apple80211IOCTLGetWrapper())
          goto LABEL_711;
        if (!WORD6(valuePtr[0]))
          goto LABEL_739;
        v971 = 0;
        v972 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v973 = (const void *)*MEMORY[0x24BDBD270];
        v974 = (const void *)*MEMORY[0x24BDBD268];
        while (1)
        {
          *(_DWORD *)buffer = -1431655766;
          v975 = CFDictionaryCreateMutable(v972, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v975)
            return 4294963395;
          v50 = v975;
          *(_DWORD *)buffer = *((unsigned __int8 *)&valuePtr[50] + v971 + 14);
          v976 = CFNumberCreate(v972, kCFNumberSInt32Type, buffer);
          if (!v976)
            goto LABEL_779;
          v977 = v976;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_CH_NUM"), v976);
          CFRelease(v977);
          if (*((_BYTE *)&valuePtr[426] + v971))
            v1023 = 1;
          else
            v1023 = *(_DWORD *)buffer > 0xEu ? 3 : 0;
          v978 = CFNumberCreate(v972, kCFNumberSInt32Type, &v1023);
          if (!v978)
            goto LABEL_779;
          v979 = v978;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_BAND_NUM"), v978);
          CFRelease(v979);
          v980 = CFNumberCreate(v972, kCFNumberSInt32Type, (char *)&valuePtr[301] + 4 * v971);
          if (!v980)
            goto LABEL_779;
          v981 = v980;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_CH_BITMAP"), v980);
          CFRelease(v981);
          v982 = (char *)valuePtr + v971;
          if (*((_BYTE *)&valuePtr[75] + v971 + 14))
            v983 = v973;
          else
            v983 = v974;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_INDOOR_RESTRICTED"), v983);
          if (v982[1614])
            v984 = v973;
          else
            v984 = v974;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_DFS"), v984);
          if (v982[2014])
            v985 = v973;
          else
            v985 = v974;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_PASSIVE"), v985);
          if (v982[2414])
            v986 = v973;
          else
            v986 = v974;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_40MHZ"), v986);
          if (v982[2814])
            v987 = v973;
          else
            v987 = v974;
          CFDictionarySetValue(v50, CFSTR("CHANNELINFO_80MHZ"), v987);
          CFArrayAppendValue(v6, v50);
          CFRelease(v50);
          if (++v971 >= (unint64_t)WORD6(valuePtr[0]))
            goto LABEL_739;
        }
    }
    while (1)
    {
      if (((*((unsigned __int8 *)v200 + 4) >> v1004) & 1) != 0)
      {
        v1005 = CFNumberCreate(v1001, kCFNumberSInt32Type, valuePtr);
        if (!v1005)
        {
LABEL_824:
          CFRelease(v1003);
          goto LABEL_825;
        }
        v1006 = v1005;
        CFArrayAppendValue(v1003, v1005);
        CFRelease(v1006);
        v1004 = valuePtr[0];
      }
      LODWORD(valuePtr[0]) = ++v1004;
      if (v1004 >= 6)
      {
        CFDictionaryAddValue(v6, CFSTR("WOW_WAKE_CONDITIONS"), v1003);
        CFRelease(v1003);
        if (!v200[2])
          goto LABEL_803;
        v1007 = CFNumberCreate(v1001, kCFNumberSInt32Type, v200 + 2);
        if (v1007)
        {
          v1008 = v1007;
          CFDictionaryAddValue(v6, CFSTR("WOW_BEACON_LOSS_TIME"), v1007);
          CFRelease(v1008);
LABEL_803:
          v1003 = CFArrayCreateMutable(v1001, 0, MEMORY[0x24BDBD690]);
          v1009 = v200[3];
          if (v1009)
          {
            v1010 = 0;
            LODWORD(valuePtr[0]) = 0;
            do
            {
              v1011 = v200[376 * v1010 + 4];
              if (v1011 <= 0x5DC)
              {
                v1012 = CFDataCreate(v1001, (const UInt8 *)&v200[376 * v1010 + 5], v1011);
                if (!v1012)
                  goto LABEL_824;
                v1013 = v1012;
                CFArrayAppendValue(v1003, v1012);
                CFRelease(v1013);
                v1010 = valuePtr[0];
                v1009 = v200[3];
              }
              LODWORD(valuePtr[0]) = ++v1010;
            }
            while (v1010 <= 9 && v1010 < v1009);
          }
          v1014 = (const void *)*MEMORY[0x24BDBD270];
          v1015 = (const void *)*MEMORY[0x24BDBD268];
          if (v200[3764])
            v1016 = (const void *)*MEMORY[0x24BDBD270];
          else
            v1016 = (const void *)*MEMORY[0x24BDBD268];
          CFDictionaryAddValue(v6, CFSTR("WOW_ENABLE_LPAS"), v1016);
          if (v200[3765])
            v1017 = v1014;
          else
            v1017 = v1015;
          CFDictionaryAddValue(v6, CFSTR("WOW_ENABLE_CAPTIVE"), v1017);
          CFDictionaryAddValue(v6, CFSTR("WOW_PATTERNS"), v1003);
          CFRelease(v1003);
          free(v200);
LABEL_739:
          v7 = 0;
          goto LABEL_740;
        }
LABEL_825:
        free(v200);
        return 4294963395;
      }
    }
  }
  if (v4 > 358)
  {
    if (v4 <= 405)
    {
      if (v4 > 383)
      {
        switch(v4)
        {
          case 384:
          case 396:
            v9 = (UInt8 *)malloc_type_malloc(0x18004uLL, 0x100004013E943BCuLL);
            if (!v9)
              goto LABEL_830;
            v10 = v9;
            bzero(v9, 0x18004uLL);
            DWORD2(v1027) = 98308;
            v1028 = v10;
            if (Apple80211RawGet(v5, (uint64_t)&v1026))
              goto LABEL_145;
            LODWORD(valuePtr[0]) = 2;
            v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
            if (v12)
            {
              v13 = v12;
              v14 = CFDataCreate(v11, v10 + 4, 98304);
              if (v14)
              {
                v15 = v14;
                CFDictionarySetValue(v6, v13, v14);
                CFRelease(v13);
                CFRelease(v15);
                free(v10);
                return 0;
              }
              free(v10);
              CFRelease(v13);
            }
            else
            {
              free(v10);
            }
LABEL_819:
            v7 = 4294963396;
            break;
          case 386:
            RoamProfile = (uint64_t)_getLQMSummary();
            goto LABEL_355;
          case 387:
            memset(valuePtr, 0, 37);
            DWORD2(v1027) = 37;
            v1028 = (UInt8 *)valuePtr;
            if (Apple80211IOCTLGetWrapper())
              goto LABEL_169;
LABEL_350:
            v246 = (const char *)valuePtr;
LABEL_351:
            CFStringAppendCString((CFMutableStringRef)v6, v246, 0x8000100u);
            goto LABEL_739;
          case 390:
            memset(valuePtr, 170, 0x8D8uLL);
            v1028 = (UInt8 *)valuePtr;
            DWORD2(v1027) = 2264;
            v69 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
            bzero(valuePtr, 0x8D8uLL);
            WORD5(valuePtr[8]) = 2048;
            if (Apple80211IOCTLGetWrapper())
            {
              v7 = 4294963394;
            }
            else
            {
              v945 = -9998;
              do
              {
                v7 = _addScanResultToList(v5, (uint64_t)valuePtr, v69, v6, 0, 0, 0, 0, 0, 1, 0, 0);
                bzero(valuePtr, 0x8D8uLL);
                WORD5(valuePtr[8]) = 2048;
                v946 = Apple80211IOCTLGetWrapper();
                if (!v945)
                  break;
                ++v945;
              }
              while (!v946);
            }
            if ((*(_BYTE *)(v5 + 99) & 0x40) != 0)
              _Apple80211AddOriginatingRNRChannelListToScanResults(v69, v6, 0, 0, 0, 0, 0);
            if (v69)
              CFRelease(v69);
            goto LABEL_740;
          case 393:
          case 397:
            goto LABEL_6;
          default:
            goto LABEL_10;
        }
        return v7;
      }
      if (v4 != 359)
      {
        if (v4 != 369)
        {
          if (v4 == 375)
          {
            *(_QWORD *)&valuePtr[0] = 0xAAAAAAAAAAAAAAAALL;
            WORD4(valuePtr[0]) = -21846;
            DWORD2(v1027) = 10;
            v1028 = (UInt8 *)valuePtr;
            if (!Apple80211IOCTLGetWrapper())
            {
              v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, valuePtr);
              if (v18)
              {
                v19 = v18;
                CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_VERSION"), v18);
                CFRelease(v19);
                v20 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 1);
                if (v20)
                {
                  v21 = v20;
                  CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_BSSMIMOCAP"), v20);
                  CFRelease(v21);
                  v22 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 6);
                  if (v22)
                  {
                    v23 = v22;
                    CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_ASSOCMIMOSTATUS"), v22);
                    CFRelease(v23);
                    v24 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 5);
                    if (v24)
                    {
                      v25 = v24;
                      CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_MRCSTATE"), v24);
                      CFRelease(v25);
                      v26 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 2);
                      if (v26)
                      {
                        v27 = v26;
                        CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_BSSRXCHAIN"), v26);
                        CFRelease(v27);
                        v28 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 3);
                        if (v28)
                        {
                          v29 = v28;
                          CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_BSSTXCHAIN"), v28);
                          CFRelease(v29);
                          v30 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 4);
                          if (v30)
                          {
                            v31 = v30;
                            CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_BSSBW"), v30);
                            CFRelease(v31);
                            v32 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 7);
                            if (v32)
                            {
                              v33 = v32;
                              CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_ASSOCRXCHAIN"), v32);
                              CFRelease(v33);
                              v34 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 8);
                              if (v34)
                              {
                                v35 = v34;
                                CFDictionaryAddValue(v6, CFSTR("MIMOSTATUS_ASSOCTXCHAIN"), v34);
                                CFRelease(v35);
                                v36 = CFNumberCreate(v17, kCFNumberSInt8Type, (char *)valuePtr + 9);
                                if (v36)
                                {
                                  v37 = v36;
                                  v38 = CFSTR("MIMOSTATUS_ASSOCBW");
LABEL_793:
                                  CFDictionaryAddValue(v6, v38, v37);
                                  goto LABEL_737;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_829:
              v7 = 4294963395;
              goto LABEL_740;
            }
            goto LABEL_169;
          }
          goto LABEL_10;
        }
        goto LABEL_6;
      }
      *((_DWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      v83 = 12;
LABEL_161:
      DWORD2(v1027) = v83;
      v1028 = (UInt8 *)v6;
      if (Apple80211IOCTLGetWrapper())
        goto LABEL_162;
      return 0;
    }
    if (v4 <= 446)
    {
      if (v4 > 420)
      {
        if (v4 != 421)
        {
          if (v4 == 423)
            goto LABEL_6;
          goto LABEL_10;
        }
        if (v8 != 14728)
        {
          syslog(3, "APPLE80211_IOR_LEGEND::%s(%d) bad valLen %d compared to sizeof apple80211_ior_legend_query_t %lu\n", "Apple80211GetWithIOCTL", 11517, v8, 14728);
          goto LABEL_741;
        }
        DWORD2(v1027) = 14728;
        v1028 = (UInt8 *)v6;
        if (Apple80211IOCTLGetWrapper())
        {
LABEL_162:
          if (*__error() != 102 && *__error() != 6)
          {
            if (*__error() != 22)
              goto LABEL_716;
            goto LABEL_741;
          }
LABEL_10:
          v7 = 4294963393;
          goto LABEL_741;
        }
        if (DWORD1(v1027))
        {
          syslog(3, "APPLE80211_IOR_LEGEND::%s(%d) Command returned error, exiting\n", "Apple80211GetWithIOCTL", 11525);
LABEL_830:
          v7 = 4294963395;
          goto LABEL_741;
        }
        return 0;
      }
      if (v4 == 406)
      {
        *(_QWORD *)&v82 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v82 + 1) = 0xAAAAAAAAAAAAAAAALL;
        valuePtr[14] = v82;
        valuePtr[15] = v82;
        valuePtr[12] = v82;
        valuePtr[13] = v82;
        valuePtr[10] = v82;
        valuePtr[11] = v82;
        valuePtr[8] = v82;
        valuePtr[9] = v82;
        valuePtr[7] = v82;
        valuePtr[5] = v82;
        valuePtr[6] = v82;
        valuePtr[3] = v82;
        valuePtr[4] = v82;
        valuePtr[1] = v82;
        valuePtr[2] = v82;
        valuePtr[0] = v82;
        syslog(3, "[WiFiTimeSync] %s %s:%d APPLE80211_IOC_TIMESYNC_INFO\n", "/Library/Caches/com.apple.xbs/Sources/IO80211/IO80211API/Apple80211API.c", "Apple80211GetWithIOCTL", 11495);
        DWORD2(v1027) = 256;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211RawGet(v5, (uint64_t)&v1026))
        {
LABEL_238:
          CFDataAppendBytes(v6, (const UInt8 *)valuePtr, DWORD2(v1027));
          goto LABEL_739;
        }
        goto LABEL_169;
      }
      if (v4 != 407)
        goto LABEL_10;
    }
    else if (v4 <= 514)
    {
      if (v4 == 447)
      {
        bzero((char *)valuePtr + 8, 0x29CuLL);
        *(_QWORD *)&valuePtr[0] = 0x200000001;
        DWORD2(v1027) = 676;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper())
          goto LABEL_739;
        goto LABEL_169;
      }
      if (v4 != 459)
        goto LABEL_10;
    }
    else
    {
      if (v4 == 515)
      {
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 1;
        DWORD2(v1027) = 12;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper())
        {
          if (!DWORD1(valuePtr[0]))
            goto LABEL_739;
          v70 = 0;
          v71 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          while (1)
          {
            v72 = CFNumberCreate(v71, kCFNumberSInt8Type, (char *)valuePtr + v70 + 8);
            if (!v72)
              goto LABEL_829;
            v73 = v72;
            CFArrayAppendValue(v6, v72);
            CFRelease(v73);
            v7 = 0;
            if (v70 <= 2 && ++v70 < DWORD1(valuePtr[0]))
              continue;
            goto LABEL_740;
          }
        }
LABEL_169:
        if (*__error() == 102 || *__error() == 6)
        {
LABEL_713:
          v7 = 4294963393;
          goto LABEL_740;
        }
        if (*__error() == 22)
        {
LABEL_740:
          if (!(_DWORD)v7)
            return v7;
          goto LABEL_741;
        }
LABEL_716:
        v7 = *__error();
        goto LABEL_740;
      }
      if (v4 == 516)
      {
        *(_QWORD *)&valuePtr[0] = 0;
        DWORD2(v1027) = 8;
        v1028 = (UInt8 *)valuePtr;
        if (!Apple80211IOCTLGetWrapper())
        {
          *(_DWORD *)buffer = 0;
          v74 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
          if ((BYTE4(valuePtr[0]) & 1) != 0)
          {
            *(_DWORD *)buffer = 1;
            v75 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, buffer);
            if (v75)
            {
              v76 = v75;
              CFArrayAppendValue(v6, v75);
              CFRelease(v76);
            }
          }
          if ((BYTE4(valuePtr[0]) & 2) != 0)
          {
            *(_DWORD *)buffer = 2;
            v77 = CFNumberCreate(*v74, kCFNumberSInt32Type, buffer);
            if (v77)
            {
              v78 = v77;
              CFArrayAppendValue(v6, v77);
              CFRelease(v78);
            }
          }
          if ((BYTE4(valuePtr[0]) & 4) != 0)
          {
            *(_DWORD *)buffer = 3;
            v79 = CFNumberCreate(*v74, kCFNumberSInt32Type, buffer);
            if (v79)
            {
              v80 = v79;
              CFArrayAppendValue(v6, v79);
              CFRelease(v80);
            }
          }
          if (*(_DWORD *)buffer)
            goto LABEL_739;
          v81 = CFNumberCreate(*v74, kCFNumberSInt32Type, buffer);
          if (!v81)
            goto LABEL_739;
          v37 = v81;
          CFArrayAppendValue(v6, v81);
LABEL_737:
          v66 = v37;
LABEL_738:
          CFRelease(v66);
          goto LABEL_739;
        }
        goto LABEL_169;
      }
      if (v4 != 552)
        goto LABEL_10;
    }
LABEL_6:
    if (v8 == 4)
    {
      if (!Apple80211IOCTLGetWrapper())
      {
        v7 = 0;
        *(_DWORD *)v6 = DWORD1(v1027);
        return v7;
      }
LABEL_8:
      if (*__error() == 102 || *__error() == 6)
        goto LABEL_10;
      if (*__error() != 22)
        goto LABEL_716;
    }
    goto LABEL_36;
  }
  switch(v4)
  {
    case 248:
      if (v8 != 0x2000)
        goto LABEL_741;
      bzero(v6, 0x2000uLL);
      DWORD2(v1027) = 0x2000;
      v1028 = (UInt8 *)v6;
      if (!Apple80211IOCTLGetWrapper())
        return 0;
      goto LABEL_8;
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 262:
    case 263:
    case 264:
      goto LABEL_10;
    case 254:
LABEL_71:
      if (!v8)
        goto LABEL_36;
      bzero(valuePtr, 0x12D8uLL);
      v1028 = (UInt8 *)valuePtr;
      DWORD2(v1027) = 4824;
      if (Apple80211IOCTLGetWrapper())
        goto LABEL_711;
      if (!DWORD1(valuePtr[0]))
        goto LABEL_739;
      v44 = 0;
      v45 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v46 = &valuePtr[1];
      v47 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
      v48 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
      break;
    case 255:
      RoamProfile = _getUCMProfile(v5, (uint64_t)&v1026, v6);
      goto LABEL_355;
    case 256:
    case 258:
    case 259:
    case 261:
    case 265:
      goto LABEL_6;
    case 257:
      bzero(valuePtr, 0x210uLL);
      DWORD2(v1027) = 528;
      v1028 = (UInt8 *)valuePtr;
      v68 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("APPLE80211KEY_AWD_TRAP_TYPE"));
      if (!v68 || !CFNumberGetValue(v68, kCFNumberIntType, (char *)&v1027 + 4))
        goto LABEL_715;
      if (Apple80211IOCTLGetWrapper())
      {
LABEL_711:
        if (*__error() == 102 || *__error() == 6)
          goto LABEL_713;
        if (*__error() != 22)
          goto LABEL_716;
LABEL_715:
        v7 = 4294963396;
      }
      else
      {
        RoamProfile = _storeTrapInfoDataInDict(v6, (uint64_t)valuePtr);
LABEL_355:
        v7 = RoamProfile;
      }
      goto LABEL_740;
    case 260:
      RoamProfile = _get2GChainDisable(v5, (uint64_t)&v1026, v6);
      goto LABEL_355;
    default:
      switch(v4)
      {
        case 336:
        case 353:
          goto LABEL_6;
        case 337:
          if (!v8)
            goto LABEL_741;
          memset(valuePtr, 0, 36);
          v1028 = (UInt8 *)valuePtr;
          DWORD2(v1027) = 36;
          if (Apple80211IOCTLGetWrapper())
            goto LABEL_169;
          RoamProfile = _setLQMConfigIntoDict((uint64_t)valuePtr, v6);
          goto LABEL_355;
        case 339:
          v84 = (UInt8 *)malloc_type_malloc(0x19004uLL, 0x1000040E60EA1F3uLL);
          if (!v84)
            goto LABEL_830;
          v10 = v84;
          bzero(v84, 0x19004uLL);
          DWORD2(v1027) = 102404;
          v1028 = v10;
          if (Apple80211RawGet(v5, (uint64_t)&v1026))
          {
LABEL_145:
            free(v10);
            goto LABEL_8;
          }
          v947 = _storeTrapCrashTracerMiniDumpinDict(v6, (uint64_t)v10);
          free(v10);
          v7 = v947;
          break;
        case 346:
          if (!v8)
            goto LABEL_741;
          bzero(valuePtr, 0x808uLL);
          DWORD2(v1027) = 2056;
          v1028 = (UInt8 *)valuePtr;
          if (Apple80211IOCTLGetWrapper())
            goto LABEL_711;
          memcpy(v6, valuePtr, 0x800uLL);
          goto LABEL_739;
        case 347:
          if (!v8)
            goto LABEL_741;
          memset(valuePtr, 0, 28);
          DWORD2(v1027) = 28;
          v1028 = (UInt8 *)valuePtr;
          if (Apple80211IOCTLGetWrapper())
            goto LABEL_169;
          v85 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v86 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)valuePtr + 4);
          if (!v86)
            goto LABEL_715;
          v87 = v86;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_ACTIVE_TO_DYNAMIC_TIMEOUT"), v86);
          CFRelease(v87);
          v88 = CFNumberCreate(v85, kCFNumberSInt32Type, (char *)valuePtr + 8);
          if (!v88)
            goto LABEL_715;
          v89 = v88;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_DYNAMIC_TO_LOW_TIMEOUT"), v88);
          CFRelease(v89);
          v90 = CFNumberCreate(v85, kCFNumberSInt32Type, (char *)valuePtr + 12);
          if (!v90)
            goto LABEL_715;
          v91 = v90;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_LOW_TO_DISABLE_INTERVAL"), v90);
          CFRelease(v91);
          v92 = CFNumberCreate(v85, kCFNumberSInt32Type, &valuePtr[1]);
          if (!v92)
            goto LABEL_715;
          v93 = v92;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_RX_PACKET_THRESHOLD"), v92);
          CFRelease(v93);
          v94 = CFNumberCreate(v85, kCFNumberSInt16Type, (char *)&valuePtr[1] + 4);
          if (!v94)
            goto LABEL_715;
          v95 = v94;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_BEACON_INTERVAL"), v94);
          CFRelease(v95);
          v96 = CFNumberCreate(v85, kCFNumberSInt8Type, (char *)&valuePtr[1] + 6);
          if (!v96)
            goto LABEL_715;
          v97 = v96;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_PS_STATE"), v96);
          CFRelease(v97);
          v98 = CFNumberCreate(v85, kCFNumberSInt8Type, (char *)&valuePtr[1] + 7);
          if (!v98)
            goto LABEL_715;
          v99 = v98;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_PS_ENABLE"), v98);
          CFRelease(v99);
          v100 = CFNumberCreate(v85, kCFNumberSInt8Type, (char *)&valuePtr[1] + 8);
          if (!v100)
            goto LABEL_715;
          v37 = v100;
          v101 = CFSTR("SOFTAP_LOWPOWER_AWAKE_LEVEL");
          goto LABEL_736;
        case 348:
          *((_DWORD *)v6 + 12) = 0;
          *((_OWORD *)v6 + 1) = 0u;
          *((_OWORD *)v6 + 2) = 0u;
          *(_OWORD *)v6 = 0u;
          v83 = 52;
          goto LABEL_161;
        case 350:
          if (!v8)
            goto LABEL_741;
          memset(valuePtr, 0, 88);
          DWORD2(v1027) = 88;
          v1028 = (UInt8 *)valuePtr;
          if (Apple80211IOCTLGetWrapper())
            goto LABEL_169;
          v948 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v949 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr[1]);
          if (!v949)
            goto LABEL_715;
          v950 = v949;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_TXPACKETS"), v949);
          CFRelease(v950);
          v951 = CFNumberCreate(v948, kCFNumberSInt64Type, (char *)valuePtr + 8);
          if (!v951)
            goto LABEL_715;
          v952 = v951;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_RXPACKETS"), v951);
          CFRelease(v952);
          v953 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8);
          if (!v953)
            goto LABEL_715;
          v954 = v953;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_OFF_STATE_COUNT"), v953);
          CFRelease(v954);
          v955 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[2]);
          if (!v955)
            goto LABEL_715;
          v956 = v955;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_OFF_STATE_DURATION"), v955);
          CFRelease(v956);
          v957 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[2] + 8);
          if (!v957)
            goto LABEL_715;
          v958 = v957;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_ACTIVE_STATE_COUNT"), v957);
          CFRelease(v958);
          v959 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[3]);
          if (!v959)
            goto LABEL_715;
          v960 = v959;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_ACTIVE_STATE_DURATION"), v959);
          CFRelease(v960);
          v961 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[3] + 8);
          if (!v961)
            goto LABEL_715;
          v962 = v961;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_DYNAMIC_STATE_COUNT"), v961);
          CFRelease(v962);
          v963 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[4]);
          if (!v963)
            goto LABEL_715;
          v964 = v963;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_DYNAMIC_STATE_DURATION"), v963);
          CFRelease(v964);
          v965 = CFNumberCreate(v948, kCFNumberSInt32Type, (char *)&valuePtr[4] + 8);
          if (!v965)
            goto LABEL_715;
          v966 = v965;
          CFDictionarySetValue(v6, CFSTR("SOFTAP_LOWPOWER_STATS_LOWPOWER_STATE_COUNT"), v965);
          CFRelease(v966);
          v967 = CFNumberCreate(v948, kCFNumberSInt64Type, &valuePtr[5]);
          if (!v967)
            goto LABEL_715;
          v37 = v967;
          v101 = CFSTR("SOFTAP_LOWPOWER_STATS_LOWPOWER_STATE_DURATION");
LABEL_736:
          CFDictionarySetValue(v6, v101, v37);
          goto LABEL_737;
        default:
          goto LABEL_10;
      }
      goto LABEL_740;
  }
  while (1)
  {
    v49 = CFDictionaryCreateMutable(v45, 0, v47, v48);
    if (!v49)
      return 4294963395;
    v50 = v49;
    v51 = CFNumberCreate(v45, kCFNumberSInt32Type, (char *)v46 - 4);
    if (!v51
      || (v52 = v51,
          CFDictionarySetValue(v50, CFSTR("SUP_CHANNEL"), v51),
          CFRelease(v52),
          (v53 = CFNumberCreate(v45, kCFNumberSInt32Type, v46)) == 0))
    {
LABEL_779:
      CFRelease(v50);
      return 4294963395;
    }
    v54 = v53;
    CFDictionarySetValue(v50, CFSTR("SUP_CHANNEL_FLAGS"), v53);
    CFRelease(v54);
    CFArrayAppendValue(v6, v50);
    CFRelease(v50);
    ++v44;
    v46 = (_OWORD *)((char *)v46 + 12);
    if (v44 >= DWORD1(valuePtr[0]))
      goto LABEL_739;
  }
}

uint64_t Apple80211GetVirtualIfListCopy(int *a1, const __CFArray **a2)
{
  const __CFArray *Mutable;
  uint64_t v5;
  __uint64_t v6;
  uint64_t IfListCopy;
  CFIndex v8;
  CFIndex v9;
  CFIndex i;
  void *ValueAtIndex;
  CFIndex Count;
  __uint64_t v13;
  CFArrayRef theArray;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  CFIndex v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  theArray = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = 4294963396;
  if (!a1 || !a2 || *a1 < 0)
    goto LABEL_24;
  v6 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v17 = "Apple80211GetVirtualIfListCopy";
    *(_DWORD *)buf = 136446722;
    v18 = 2048;
    v19 = v6 / 0x3B9ACA00;
    v20 = 2048;
    v21 = v6 % 0x3B9ACA00 / 0x3E8;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] enter\n", buf, 0x20u);
  }
  IfListCopy = _getIfListCopy(a1, &theArray);
  if ((_DWORD)IfListCopy)
  {
    v5 = IfListCopy;
LABEL_24:
    Count = CFArrayGetCount(Mutable);
    goto LABEL_17;
  }
  v8 = CFArrayGetCount(theArray);
  if (v8 >= 1)
  {
    v9 = v8;
    for (i = 0; i != v9; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
      if (_isVirtualInterface(ValueAtIndex, 0))
        CFArrayAppendValue(Mutable, ValueAtIndex);
    }
  }
  Count = CFArrayGetCount(Mutable);
  if (CFArrayGetCount(Mutable) >= 1)
  {
    v5 = 0;
    *a2 = Mutable;
    goto LABEL_18;
  }
  if (CFArrayGetCount(Mutable))
    v5 = 0;
  else
    v5 = 4294963393;
LABEL_17:
  CFRelease(Mutable);
LABEL_18:
  if (theArray)
    CFRelease(theArray);
  v13 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v17 = "Apple80211GetVirtualIfListCopy";
    *(_DWORD *)buf = 136447490;
    v19 = v13 / 0x3B9ACA00;
    v18 = 2048;
    v20 = 2048;
    v21 = v13 % 0x3B9ACA00 / 0x3E8;
    v22 = 1024;
    v23 = v5;
    v24 = 1024;
    v25 = v5;
    v26 = 2048;
    v27 = Count;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] exit %d/0x%08x, ifCount[%ld]\n", buf, 0x36u);
  }
  return v5;
}

uint64_t Apple80211GetIfListCopy(int *a1, const __CFArray **a2)
{
  const __CFArray *Mutable;
  __uint64_t v5;
  uint64_t IfListCopy;
  CFIndex v7;
  CFIndex v8;
  CFIndex i;
  void *ValueAtIndex;
  CFIndex Count;
  uint64_t v12;
  __uint64_t v13;
  CFArrayRef theArray;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  CFIndex v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  theArray = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "Apple80211GetIfListCopy";
    v18 = 2048;
    v19 = v5 / 0x3B9ACA00;
    v20 = 2048;
    v21 = v5 % 0x3B9ACA00 / 0x3E8;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] enter\n", buf, 0x20u);
  }
  IfListCopy = _getIfListCopy(a1, &theArray);
  if ((_DWORD)IfListCopy)
  {
    v12 = IfListCopy;
    Count = CFArrayGetCount(Mutable);
  }
  else
  {
    v7 = CFArrayGetCount(theArray);
    if (v7 >= 1)
    {
      v8 = v7;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
        if (_isInfraInterface(ValueAtIndex, 0))
          CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
    Count = CFArrayGetCount(Mutable);
    if (CFArrayGetCount(Mutable) >= 1)
    {
      v12 = 0;
      *a2 = Mutable;
      goto LABEL_15;
    }
    if (CFArrayGetCount(Mutable))
      v12 = 0;
    else
      v12 = 4294963393;
  }
  CFRelease(Mutable);
LABEL_15:
  if (theArray)
    CFRelease(theArray);
  v13 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447490;
    v17 = "Apple80211GetIfListCopy";
    v18 = 2048;
    v19 = v13 / 0x3B9ACA00;
    v20 = 2048;
    v21 = v13 % 0x3B9ACA00 / 0x3E8;
    v22 = 1024;
    v23 = v12;
    v24 = 1024;
    v25 = v12;
    v26 = 2048;
    v27 = Count;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] exit %d/0x%08x, ifCount[%ld]\n", buf, 0x36u);
  }
  return v12;
}

BOOL _isInfraInterface(void *a1, io_registry_entry_t a2)
{
  io_registry_entry_t Service;
  const __CFString *v4;
  const __CFString *v5;
  _BOOL8 v6;

  Service = a2;
  if (!a2)
  {
    Service = _Apple80211FindService(a1);
    if (!Service)
      return 0;
  }
  v4 = (const __CFString *)_copyStringRegistryPropertyFor(Service, CFSTR("IO80211InterfaceRole"));
  v5 = v4;
  if (v4)
  {
    v6 = CFStringCompare(v4, CFSTR("Infrastructure"), 0) == kCFCompareEqualTo;
    if (a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if (!a2)
LABEL_5:
    IOObjectRelease(Service);
LABEL_6:
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL _isVirtualInterface(void *a1, io_registry_entry_t a2)
{
  io_registry_entry_t Service;
  const __CFString *v4;
  const __CFString *v5;
  _BOOL8 v6;

  Service = a2;
  if (!a2)
  {
    Service = _Apple80211FindService(a1);
    if (!Service)
      return 0;
  }
  v4 = (const __CFString *)_copyStringRegistryPropertyFor(Service, CFSTR("IO80211VirtualInterfaceRole"));
  v5 = v4;
  if (v4)
  {
    if (CFStringCompare(v4, CFSTR("AirLink"), 0)
      && CFStringCompare(v5, CFSTR("WiFi-Aware Discovery"), 0)
      && CFStringCompare(v5, CFSTR("WiFi-Aware Discovery+Data"), 0)
      && CFStringCompare(v5, CFSTR("WiFi-Aware Data"), 0))
    {
      v6 = CFStringCompare(v5, CFSTR("SoftAP"), 0) == kCFCompareEqualTo;
      if (a2)
        goto LABEL_12;
    }
    else
    {
      v6 = 1;
      if (a2)
        goto LABEL_12;
    }
    goto LABEL_11;
  }
  v6 = 0;
  if (!a2)
LABEL_11:
    IOObjectRelease(Service);
LABEL_12:
  if (v5)
    CFRelease(v5);
  return v6;
}

const void *_copyStringRegistryPropertyFor(io_registry_entry_t a1, const __CFString *a2)
{
  CFTypeRef CFProperty;
  const void *v3;
  CFTypeID v4;

  CFProperty = IORegistryEntryCreateCFProperty(a1, a2, (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = CFProperty;
  if (CFProperty)
  {
    v4 = CFGetTypeID(CFProperty);
    if (v4 != CFStringGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t _Apple80211FindService(void *a1)
{
  const __CFAllocator *v1;
  const CFDictionaryKeyCallBacks *v2;
  const CFDictionaryValueCallBacks *v3;
  const __CFDictionary *v4;
  CFTypeRef cf;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x24BDAC8D0];
  values = a1;
  keys[0] = CFSTR("IOInterfaceName");
  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  cf = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)keys, (const void **)&values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  keys[0] = CFSTR("IOPropertyMatch");
  v4 = CFDictionaryCreate(v1, (const void **)keys, &cf, 1, v2, v3);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  return IOServiceGetMatchingService(*MEMORY[0x24BDD8B18], v4);
}

uint64_t _getIfListCopy(int *a1, const __CFArray **a2)
{
  const __CFArray *Mutable;
  __uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  ifaddrs **v9;
  int v10;
  ifaddrs *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *ifa_name;
  __CFArray *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  __uint64_t v20;
  int v21;
  unint64_t v22;
  char *v23;
  const char *v24;
  char *v25;
  int v26;
  CFStringRef v27;
  CFStringRef v28;
  CFIndex Count;
  __uint64_t v30;
  CFIndex v31;
  __uint64_t v32;
  __uint64_t v33;
  int v35;
  const __CFAllocator *alloc;
  const __CFArray **v37;
  __uint64_t v38;
  int *v39;
  ifaddrs *v40;
  _OWORD v41[3];
  char __s1[16];
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[26];
  int v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  memset(__s1, 170, sizeof(__s1));
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v44 = "_getIfListCopy";
    *(_DWORD *)buf = 136315650;
    v45 = 2048;
    *(_QWORD *)v46 = v5 / 0x3B9ACA00;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)&v46[10] = v5 % 0x3B9ACA00 / 0x3E8;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: enter @[%llu.%06llu]\n", buf, 0x20u);
  }
  v6 = 0;
  v7 = 4294963396;
  if (a1 && a2 && (*a1 & 0x80000000) == 0)
  {
    if (!Mutable)
    {
      v7 = 4294963395;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v44 = "_getIfListCopy";
        v45 = 1024;
        *(_DWORD *)v46 = 7335;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = -3901;
        *(_WORD *)&v46[10] = 1024;
        *(_DWORD *)&v46[12] = -3901;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s/%6u: Failed array allocation, err[%d/0x%08x]\n", buf, 0x1Eu);
      }
      goto LABEL_49;
    }
    v8 = getifaddrs(&v40);
    if (v8)
    {
      v35 = v8;
      v7 = *__error();
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v44 = "_getIfListCopy";
        v45 = 1024;
        *(_DWORD *)v46 = 7338;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v35;
        *(_WORD *)&v46[10] = 1024;
        *(_DWORD *)&v46[12] = v35;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s/%6u: Failed getifaddrs(), bsdErr[%d/0x%08x]\n", buf, 0x1Eu);
      }
      goto LABEL_36;
    }
    v38 = v5;
    v39 = a1;
    v9 = &v40;
    v10 = -1;
    do
    {
      v9 = (ifaddrs **)*v9;
      ++v10;
    }
    while (v9);
    memset(__s1, 0, sizeof(__s1));
    v37 = a2;
    *a2 = 0;
    v11 = v40;
    if (v40)
    {
      v12 = "gif0";
      v13 = "faith0";
      v14 = "stf0";
      do
      {
        ifa_name = v11->ifa_name;
        if (ifa_name
          && strcmp(__s1, v11->ifa_name)
          && strcmp("lo0", ifa_name)
          && strcmp(v12, ifa_name)
          && strcmp(v13, ifa_name)
          && strcmp(v14, ifa_name))
        {
          v16 = Mutable;
          v17 = v12;
          v18 = v14;
          v19 = v13;
          memset(v41, 0, 44);
          __strlcpy_chk();
          v20 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          v21 = ioctl(*v39, 0xC02C6938uLL, v41);
          v22 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v20;
          if (v22 > 0x3B9AC9FF)
          {
            v23 = v11->ifa_name;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              v24 = "*";
              if (v23)
                v24 = v23;
              *(_DWORD *)buf = 136448258;
              v44 = "_logTimeIfThresholdExceeded";
              v45 = 2082;
              *(_QWORD *)v46 = v24;
              *(_WORD *)&v46[8] = 2080;
              *(_QWORD *)&v46[10] = " 'SIOCGIFMEDIA' ";
              *(_WORD *)&v46[18] = 1024;
              *(_DWORD *)&v46[20] = -1070831304;
              *(_WORD *)&v46[24] = 1024;
              v47 = -1070831304;
              v48 = 2048;
              v49 = v22 / 0x3B9ACA00;
              v50 = 2048;
              v51 = v22 % 0x3B9ACA00 / 0x3E8;
              v52 = 2048;
              v53 = 1;
              v54 = 2048;
              v55 = 0;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
            }
          }
          if (v21)
          {
            v13 = v19;
            v14 = v18;
            v12 = v17;
            Mutable = v16;
            if (v21 == 82 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              v25 = v11->ifa_name;
              v26 = *__error();
              *(_DWORD *)buf = 136316162;
              v44 = "_getIfListCopy";
              v45 = 1024;
              *(_DWORD *)v46 = 7379;
              *(_WORD *)&v46[4] = 2080;
              *(_QWORD *)&v46[6] = v25;
              *(_WORD *)&v46[14] = 1024;
              *(_DWORD *)&v46[16] = 82;
              *(_WORD *)&v46[20] = 1024;
              *(_DWORD *)&v46[22] = v26;
              _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s/%6u: Skipped interface '%s' EPWROFF, SIOCGIFMEDIA/bsdErr[%d], errno[%d]\n", buf, 0x28u);
            }
          }
          else
          {
            v13 = v19;
            v14 = v18;
            v12 = v17;
            Mutable = v16;
            if ((v41[1] & 0xE0) == 0x80)
            {
              v27 = CFStringCreateWithCString(alloc, v11->ifa_name, 0x8000100u);
              if (!v27)
              {
                v6 = 0;
                v7 = 4294963395;
                goto LABEL_34;
              }
              v28 = v27;
              CFArrayAppendValue(v16, v27);
              CFRelease(v28);
              __strlcpy_chk();
            }
          }
        }
        v11 = v11->ifa_next;
      }
      while (v11);
    }
    Count = CFArrayGetCount(Mutable);
    v30 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447490;
      v44 = "_getIfListCopy";
      *(_DWORD *)v46 = 7406;
      v45 = 1024;
      *(_QWORD *)&v46[6] = v30 / 0x3B9ACA00;
      *(_WORD *)&v46[4] = 2048;
      *(_WORD *)&v46[14] = 2048;
      *(_QWORD *)&v46[16] = v30 % 0x3B9ACA00 / 0x3E8;
      *(_WORD *)&v46[24] = 1024;
      v47 = v10;
      v48 = 2048;
      v49 = Count;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s/%6u: @[%llu.%06llu] getifaddrs nInterfaces[%3u], count[%3ld]\n", buf, 0x36u);
    }
    v7 = 0;
    v6 = 1;
LABEL_34:
    a2 = v37;
    v5 = v38;
  }
  if (!Mutable)
  {
    if (v6)
    {
      v31 = 0;
      if (CFArrayGetCount(0))
        v7 = 0;
      else
        v7 = 4294963393;
      goto LABEL_50;
    }
LABEL_49:
    v31 = 0;
    goto LABEL_50;
  }
LABEL_36:
  v31 = CFArrayGetCount(Mutable);
  if ((_DWORD)v7)
  {
LABEL_37:
    CFRelease(Mutable);
    goto LABEL_50;
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    if (CFArrayGetCount(Mutable))
      v7 = 0;
    else
      v7 = 4294963393;
    goto LABEL_37;
  }
  v7 = 0;
  *a2 = Mutable;
LABEL_50:
  if (v40)
    MEMORY[0x20BCF6928]();
  v32 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  v33 = v32 - v5;
  if (v32 - v5 >= 0xB2D05E00 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448258;
    v44 = "_logTimeIfThresholdExceeded";
    v45 = 2082;
    *(_QWORD *)v46 = "*";
    *(_WORD *)&v46[8] = 2080;
    *(_QWORD *)&v46[10] = " total time ";
    *(_WORD *)&v46[18] = 1024;
    *(_DWORD *)&v46[20] = 0;
    *(_WORD *)&v46[24] = 1024;
    v47 = 0;
    v48 = 2048;
    v49 = v33 / 0x3B9ACA00;
    v50 = 2048;
    v51 = (274877907 * (v33 % 0x3B9ACA00)) >> 38;
    v52 = 2048;
    v53 = 3;
    v54 = 2048;
    v55 = 0;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448002;
    v44 = "_getIfListCopy";
    v45 = 2048;
    *(_QWORD *)v46 = v32 / 0x3B9ACA00;
    *(_WORD *)&v46[8] = 2048;
    *(_QWORD *)&v46[10] = v32 % 0x3B9ACA00 / 0x3E8;
    *(_WORD *)&v46[18] = 1024;
    *(_DWORD *)&v46[20] = v7;
    *(_WORD *)&v46[24] = 1024;
    v47 = v7;
    v48 = 2048;
    v49 = v33 / 0x3B9ACA00;
    v50 = 2048;
    v51 = v33 % 0x3B9ACA00 / 0x3E8;
    v52 = 2048;
    v53 = v31;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] exit %d/0x%08x, total time [%llu.%06llu], ifCount[%ld]\n", buf, 0x4Au);
  }
  return v7;
}

uint64_t Apple80211ParseAppleSWAPIE(unsigned __int8 *a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  CFMutableDictionaryRef v6;
  const CFDictionaryKeyCallBacks *v7;
  const __CFAllocator *v8;
  const void *v9;
  unsigned int v10;
  CFMutableDictionaryRef Mutable;
  unsigned int v12;
  const UInt8 *v13;
  int v14;
  int v15;
  CFIndex v16;
  unsigned int v17;
  const UInt8 *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFDataRef v21;
  CFDataRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFStringRef v25;
  CFStringRef v26;
  uint64_t v27;
  char valuePtr;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (!a1)
    return v3;
  v4 = a2;
  if (!a2 || !a3)
    return v3;
  if (a2 < 2)
    return 0;
  v5 = a1;
  v6 = 0;
  valuePtr = -86;
  v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v9 = (const void *)*MEMORY[0x24BDBD270];
  while (1)
  {
    v10 = v5[1];
    if (v10 + 2 > v4)
    {
LABEL_31:
      if (v6)
      {
        CFDictionarySetValue(a3, CFSTR("APPLE_SWAP_IE"), v6);
        v3 = 0;
        goto LABEL_33;
      }
      return 0;
    }
    if (v10 >= 4 && *v5 == 221 && Apple80211ParseAppleSWAPIE_signature == *(_DWORD *)(v5 + 2))
    {
      Mutable = CFDictionaryCreateMutable(v8, 0, v7, MEMORY[0x24BDBD6B0]);
      if (!Mutable)
        return 4294963395;
      v6 = Mutable;
      v10 = v5[1];
      v12 = v10 - 4;
      if (v10 - 4 >= 3)
        break;
    }
LABEL_28:
    v4 = v4 - v10 - 2;
    v27 = (uint64_t)&v5[v10 + 2];
    if (v4 > 0)
      v5 = (unsigned __int8 *)v27;
    if (v4 <= 1)
      goto LABEL_31;
  }
  v13 = v5 + 6;
  while (1)
  {
    v14 = *v13;
    v15 = v13[1];
    valuePtr = v13[1];
    v16 = v13[2];
    v17 = v12 - 3;
    if (v16 > (v12 - 3))
    {
LABEL_36:
      v3 = 4294963394;
      goto LABEL_33;
    }
    v18 = v13 + 3;
    if (v15 != 1)
      goto LABEL_26;
    if (!v14)
      break;
    if (v14 == 1)
    {
      if (!v13[2])
        goto LABEL_36;
      v19 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
      if (!v19)
        goto LABEL_37;
      v20 = v19;
      CFDictionarySetValue(v6, CFSTR("SWAP_IE_FEATURE_VERSION"), v19);
      CFRelease(v20);
      v21 = CFDataCreate(v8, v18, v16);
      if (!v21)
        goto LABEL_37;
      v22 = v21;
      CFDictionarySetValue(v6, CFSTR("SWAP_IE_FEATURES"), v21);
      CFRelease(v22);
      if ((*v18 & 1) != 0)
        CFDictionarySetValue(v6, CFSTR("SWAP_IE_FEATURE_INTERNET_CONNECTION_SHARING_ENABLED"), v9);
    }
LABEL_26:
    v12 = v17 - v16;
    v13 = &v18[v16];
    if ((v17 - v16) <= 2u)
    {
      v10 = v5[1];
      v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
      goto LABEL_28;
    }
  }
  if (!v13[2])
    goto LABEL_36;
  v23 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
  if (v23)
  {
    v24 = v23;
    CFDictionarySetValue(v6, CFSTR("SWAP_IE_MODEL_IDENTIFIER_VERSION"), v23);
    CFRelease(v24);
    v25 = CFStringCreateWithBytes(v8, v18, v16, 0x8000100u, 0);
    if (v25)
    {
      v26 = v25;
      CFDictionarySetValue(v6, CFSTR("SWAP_IE_MODEL_IDENTIFIER"), v25);
      CFRelease(v26);
      goto LABEL_26;
    }
  }
LABEL_37:
  v3 = 4294963395;
LABEL_33:
  CFRelease(v6);
  return v3;
}

void _dispatchWeightedAvgLQMUpdateEvent(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;

  if (a2)
  {
    if (a3 == 16)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("WEIGHT_AVG_RSSI"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("WEIGHT_AVG_SNR"), v10);
            v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 8));
            if (v12)
            {
              CFDictionaryAddValue(v6, CFSTR("WEIGHT_AVG_TX_RATE"), v12);
              v13 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
              if (v13)
              {
                CFDictionaryAddValue(v6, CFSTR("WEIGHT_AVG_RX_RATE"), v13);
                (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 145, v6, 8, *(_QWORD *)(a1 + 80));
              }
            }
            else
            {
              v13 = 0;
            }
            CFRelease(v9);
            CFRelease(v11);
            if (v12)
              CFRelease(v12);
            if (!v13)
              goto LABEL_16;
          }
          else
          {
            v13 = v9;
          }
          CFRelease(v13);
        }
LABEL_16:
        CFRelease(v6);
      }
    }
  }
}

uint64_t _parseHs20OperatorName(uint64_t a1, __CFDictionary *a2)
{
  int v4;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  CFMutableDictionaryRef v12;
  __CFDictionary *v13;
  unint64_t v14;
  CFStringRef v15;
  CFStringRef v16;
  CFStringRef v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  __CFDictionary *theDict;

  v4 = *(unsigned __int16 *)(a1 + 2);
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 0;
  v7 = Mutable;
  theDict = a2;
  v8 = v4 - 6;
  v10 = *(unsigned __int8 *)(a1 + 10);
  v9 = (unsigned __int8 *)(a1 + 10);
  if (v4 - 6 <= v10)
  {
LABEL_17:
    CFDictionaryAddValue(theDict, CFSTR("ANQP_OPERATOR_NAMES_LIST"), v7);
    v23 = 1;
    goto LABEL_18;
  }
  LOWORD(v11) = 0;
  while (1)
  {
    v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!v12)
      goto LABEL_25;
    v13 = v12;
    v14 = *v9;
    if (v14 < 3 || (v15 = CFStringCreateWithBytes(v5, v9 + 4, v14 - 3, 0x8000100u, 1u)) == 0)
    {
      v16 = (CFStringRef)v7;
LABEL_23:
      CFRelease(v16);
      v23 = 0;
      goto LABEL_19;
    }
    v16 = v15;
    v17 = CFStringCreateWithBytes(v5, v9 + 1, 3, 0x8000100u, 1u);
    if (!v17)
    {
      CFRelease(v7);
      goto LABEL_23;
    }
    v18 = v17;
    CFDictionaryAddValue(v13, CFSTR("ANQP_LANG_CODE"), v17);
    CFDictionaryAddValue(v13, CFSTR("ANQP_OPERATOR_NAME"), v16);
    CFArrayAppendValue(v7, v13);
    CFRelease(v16);
    CFRelease(v18);
    CFRelease(v13);
    v19 = (uint64_t)(__int16)v11 >> 63;
    v20 = (__int16)v11 + 1;
    if ((__int16)v11 == -1)
      ++v19;
    if (v19 != (uint64_t)(__int16)v20 >> 63 || v20 != (__int16)v20)
    {
      syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
      goto LABEL_25;
    }
    v22 = *v9;
    v11 = v22 + (__int16)v20;
    if (v11 != (__int16)(v22 + v20))
      break;
    v9 += *v9 + 1;
    if (v8 - (__int16)v11 <= *v9)
      goto LABEL_17;
  }
  syslog(3, "parsedLen %hu increment by value %hhu os_add_overflow FAILED\n");
LABEL_25:
  v23 = 0;
LABEL_18:
  v13 = v7;
LABEL_19:
  CFRelease(v13);
  return v23;
}

uint64_t Apple80211GetInterfaceNameCopy(uint64_t a1, CFStringRef *a2)
{
  uint64_t result;
  const char *v5;
  int v6;
  CFStringRef v7;
  CFStringRef v8;

  result = 4294963396;
  if (a1 && a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 4);
    v5 = (const char *)(a1 + 4);
    if (v6)
    {
      v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, 0x8000100u);
      if (v7)
      {
        v8 = v7;
        result = 0;
        *a2 = v8;
      }
      else
      {
        return 4294963395;
      }
    }
    else
    {
      return 4294963368;
    }
  }
  return result;
}

uint64_t Apple80211GetInfoCopy(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  CFTypeRef cf;
  CFDataRef data;
  void *value;
  CFArrayRef theArray;
  CFTypeRef v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  theArray = 0;
  v11 = 0;
  data = 0;
  value = 0;
  cf = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    *a2 = 0;
    return 4294963395;
  }
  v4 = Mutable;
  v5 = Apple80211CopyValue();
  if ((_DWORD)v5)
    goto LABEL_6;
  if (CFDictionaryGetCount(v4) < 1)
  {
    v5 = 0;
LABEL_6:
    *a2 = 0;
    CFRelease(v4);
    return v5;
  }
  v5 = 0;
  *a2 = v4;
  return v5;
}

uint64_t Apple80211SetPowerState(uint64_t a1, int a2)
{
  uint64_t v2;
  int valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  valuePtr = a2;
  v2 = Apple80211CopyValue();
  if ((_DWORD)v2)
    return v2;
  syslog(3, "%s:%d: [kA11UnknownErr] Apple80211CopyValue returned %d\n", "Apple80211SetPowerState", 534, 0);
  return 4294963394;
}

uint64_t Apple80211SetPower(uint64_t a1, int a2)
{
  return Apple80211SetPowerState(a1, a2 != 0);
}

uint64_t Apple80211Scan()
{
  uint64_t v0;
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  const __CFAllocator *v7;
  const CFArrayCallBacks *v8;
  CFMutableArrayRef Mutable;
  const __CFArray *v10;
  int v11;
  int v12;
  BOOL v13;
  NSObject *v14;
  uint64_t ScanData;
  unint64_t Value;
  unint64_t v17;
  _BOOL4 v18;
  __int128 v20;
  __CFRunLoopTimer *v21;
  CFAbsoluteTime Current;
  NSObject *v23;
  dispatch_time_t v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  NSObject *v28;
  dispatch_time_t v29;
  int v30;
  int v32;
  const __CFArray *v33;
  const __CFArray *v34;
  CFTypeRef v35;
  NSObject *v36;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  _QWORD *v46;
  char v47;
  int v48;
  int v49;
  const __CFArray *v50;
  pthread_mutex_t *v51;
  _QWORD block[6];
  char v53;
  int v54;
  char v55;
  _WORD v56[3];
  _DWORD v57[1363];
  char v58[76];
  _DWORD v59[566];
  __int128 v60;
  __int128 v61;
  _DWORD *v62;
  unsigned __int8 uu[16];
  uint64_t v64;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v64 = *MEMORY[0x24BDAC8D0];
  v62 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v6;
  v61 = v6;
  memset(v59, 170, sizeof(v59));
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v10 = CFArrayCreateMutable(v7, 0, v8);
  *(_DWORD *)&v56[1] = -1431655766;
  v56[0] = 257;
  v55 = 0;
  bzero(v57, 0x1598uLL);
  v57[0] = 1;
  v11 = _openEventSocket();
  v12 = v11;
  v54 = -1431655766;
  v53 = 0;
  if (!v5 || (*(_DWORD *)v5 & 0x80000000) != 0 || !*(_BYTE *)(v5 + 4))
  {
    v44 = 0;
    v14 = 0;
    goto LABEL_81;
  }
  if (Mutable)
    v13 = v10 == 0;
  else
    v13 = 1;
  if (v13)
  {
    v44 = 0;
    v14 = 0;
    v40 = 4294963395;
    goto LABEL_56;
  }
  if ((v11 & 0x80000000) == 0)
  {
    if (*(_QWORD *)(v5 + 1824) || *(_QWORD *)(v5 + 64) || *(_QWORD *)(v5 + 56))
    {
      v14 = 0;
    }
    else
    {
      v14 = dispatch_queue_create("com.apple.wifi.scan-done", 0);
      v38 = Apple80211EventMonitoringInit2((_DWORD *)v5, (uint64_t)emptyEventCallback, 0, v14);
      if ((_DWORD)v38)
      {
        v40 = v38;
        dispatch_release(v14);
        v44 = 0;
        v14 = 0;
        goto LABEL_56;
      }
    }
    if (*(_BYTE *)(v5 + 52) || (*(_BYTE *)(v5 + 21) & 2) != 0)
    {
      v44 = 0;
      goto LABEL_20;
    }
    if (*(_QWORD *)(v5 + 56) || *(_QWORD *)(v5 + 64) || *(_QWORD *)(v5 + 1824))
    {
      *(_BYTE *)(v5 + 21) |= 2u;
      v44 = 1;
LABEL_20:
      v47 = *(_BYTE *)(v5 + 99);
      ScanData = _getScanData(v2, (char *)v57, 0, (_BYTE *)v56 + 1, &v54, &v56[1], (Boolean *)v56, (Boolean *)&v55, v5 + 88, (Boolean *)&v53);
      if ((_DWORD)ScanData)
      {
        v40 = ScanData;
        goto LABEL_56;
      }
      v50 = Mutable;
      v46 = v4;
      v49 = v12;
      v45 = v57[1218];
      v48 = v57[13];
      Value = (unint64_t)CFDictionaryGetValue(v2, CFSTR("SCAN_SHORT_SSID"));
      v17 = (unint64_t)CFDictionaryGetValue(v2, CFSTR("SSID_STR"));
      v41 = (unint64_t)CFDictionaryGetValue(v2, CFSTR("BSSID"));
      v42 = v17;
      v43 = Value;
      v18 = (v17 | v41 | Value) != 0;
      if ((*(_DWORD *)&v56[1])--)
      {
        v51 = (pthread_mutex_t *)(v5 + 160);
        v20 = 0uLL;
        do
        {
          v62 = 0;
          v60 = v20;
          v61 = v20;
          LODWORD(v61) = 10;
          memset(uu, 170, sizeof(uu));
          MEMORY[0x20BCF6BEC](uu);
          uuid_unparse(uu, v58);
          __strlcpy_chk();
          DWORD2(v61) = 5528;
          v62 = v57;
          if (Apple80211RawSet())
          {
            v39 = __error();
            v4 = v46;
            v12 = v49;
            Mutable = v50;
            goto LABEL_87;
          }
          pthread_mutex_lock(v51);
          *(_BYTE *)(v5 + 232) = 0;
          *(_QWORD *)(v5 + 224) = pthread_self();
          *(_DWORD *)(v5 + 264) = 0;
          v21 = *(__CFRunLoopTimer **)(v5 + 248);
          Mutable = v50;
          if (v21)
          {
            Current = CFAbsoluteTimeGetCurrent();
            CFRunLoopTimerSetNextFireDate(v21, Current + 315360000.0);
          }
          v23 = *(NSObject **)(v5 + 256);
          if (v23)
          {
            v24 = dispatch_time(0, 315360000000000000);
            dispatch_source_set_timer(v23, v24, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
          v25 = *(const void **)(v5 + 144);
          if (v25)
          {
            CFRelease(v25);
            *(_QWORD *)(v5 + 144) = 0;
          }
          v26 = *(const void **)(v5 + 240);
          if (v26)
          {
            CFRelease(v26);
            *(_QWORD *)(v5 + 240) = 0;
          }
          pthread_mutex_unlock(v51);
          if (v48 != 3)
          {
            if ((*(_QWORD *)(v5 + 1824) || *(_QWORD *)(v5 + 64) || *(_QWORD *)(v5 + 56))
              && (*(_BYTE *)(v5 + 52) || (*(_BYTE *)(v5 + 21) & 2) != 0)
              && (*(_BYTE *)(v5 + 93) & 0x40) != 0)
            {
              v28 = dispatch_semaphore_create(0);
              *(_QWORD *)(v5 + 152) = v28;
              v29 = dispatch_time(0, 20000000000);
              dispatch_semaphore_wait(v28, v29);
              dispatch_release(*(dispatch_object_t *)(v5 + 152));
              *(_QWORD *)(v5 + 152) = 0;
            }
            else
            {
              v27 = _waitForScanComplete();
              if ((_DWORD)v27)
              {
                v40 = v27;
LABEL_55:
                v4 = v46;
                v12 = v49;
                goto LABEL_56;
              }
            }
          }
          v62 = v59;
          v30 = -9999;
          LODWORD(v61) = 11;
          DWORD2(v61) = 2264;
          while (1)
          {
            bzero(v59, 0x8D8uLL);
            v59[0] = 1;
            HIWORD(v59[34]) = 2048;
            if (v58[0])
              __strlcpy_chk();
            if (Apple80211RawGet(v5, (uint64_t)&v60))
              break;
            _addScanResultToList(v5, (uint64_t)v59, v50, v10, 0, HIBYTE(v56[0]), v18, LOBYTE(v56[0]), v55, v53, 0, (v45 >> 9) & ((v47 & 0x40) != 0));
            if (__CFADD__(v30++, 1))
            {
              v40 = 4294963394;
              goto LABEL_55;
            }
          }
          if (*__error() != -528350138 && *__error() != 5)
          {
            v39 = __error();
            v4 = v46;
            v12 = v49;
            goto LABEL_87;
          }
          v32 = (*(_DWORD *)&v56[1])--;
          v20 = 0uLL;
        }
        while (v32);
      }
      v12 = v49;
      Mutable = v50;
      if ((v47 & 0x40) != 0)
      {
        v4 = v46;
        if ((v45 & 0x800) != 0)
        {
          v33 = (const __CFArray *)CFDictionaryGetValue(v2, CFSTR("SCAN_SSID_LIST"));
          v34 = (const __CFArray *)CFDictionaryGetValue(v2, CFSTR("SCAN_BSSID_LIST"));
          _Apple80211AddOriginatingRNRChannelListToScanResults(v50, v10, v43, v42, v41, v33, v34);
        }
      }
      else
      {
        v4 = v46;
      }
      goto LABEL_59;
    }
    v44 = 0;
LABEL_81:
    v40 = 4294963396;
    goto LABEL_56;
  }
  v39 = __error();
  v14 = 0;
  v44 = 0;
LABEL_87:
  v40 = *v39;
  if (!(_DWORD)v40)
  {
LABEL_59:
    v35 = CFRetain(v10);
    v40 = 0;
    goto LABEL_60;
  }
LABEL_56:
  if (!v4)
    goto LABEL_61;
  v35 = 0;
LABEL_60:
  *v4 = v35;
LABEL_61:
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  if ((v12 & 0x80000000) == 0)
    close(v12);
  if (v5 && v44 && (*(_QWORD *)(v5 + 56) || *(_QWORD *)(v5 + 64) || *(_QWORD *)(v5 + 1824)))
    *(_BYTE *)(v5 + 21) &= ~2u;
  if (v14)
  {
    if (v5)
    {
      v36 = dispatch_semaphore_create(0);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = __Apple80211Scan_block_invoke;
      block[3] = &__block_descriptor_tmp_40;
      block[4] = v5;
      block[5] = v36;
      dispatch_async(v14, block);
      dispatch_semaphore_wait(v36, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v36);
    }
    dispatch_release(v14);
  }
  return v40;
}

uint64_t Apple80211EventMonitoringInit2(_DWORD *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  const dispatch_source_type_s *v15;
  NSObject *v16;
  NSObject *v17;
  dispatch_time_t v18;
  NSObject *v19;
  NSObject *v20;
  dispatch_time_t v21;
  NSObject *v23;
  _QWORD v24[4];
  unsigned int v25;
  _QWORD handler[5];
  unsigned int v27;
  uint8_t v28[4];
  const char *v29;
  _BYTE buf[12];
  __int16 v31;
  _DWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Apple80211EventMonitoringInit2";
    v31 = 2048;
    v32 = a1;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: opaque=%p\n", buf, 0x16u);
  }
  if (!a1)
    return 4294963396;
  if (*((_BYTE *)a1 + 107))
    return 0;
  *(_DWORD *)&buf[8] = 1;
  *(_QWORD *)buf = 0x600000001;
  if (a2 && (*a1 & 0x80000000) == 0 && *((_BYTE *)a1 + 4))
  {
    if (*((_QWORD *)a1 + 228) || *((_QWORD *)a1 + 8) || *((_QWORD *)a1 + 7))
      Apple80211EventMonitoringHalt((uint64_t)a1);
    if (!Apple80211EventMonitoringInitIOUC((uint64_t)a1, a4, 0))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v28 = 136315138;
        v29 = "Apple80211EventMonitoringInit2";
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Using IOUC event pipe\n", v28, 0xCu);
      }
      goto LABEL_22;
    }
    v9 = socket(32, 3, 1);
    v10 = v9;
    if (v9 < 0 || ioctl(v9, 0x800C6502uLL, buf))
    {
      v8 = *__error();
      if (!(_DWORD)v8)
        return v8;
    }
    else
    {
      v11 = dispatch_source_create(MEMORY[0x24BDACA00], v10, 0, a4);
      *((_QWORD *)a1 + 8) = v11;
      if (v11)
      {
        v12 = MEMORY[0x24BDAC760];
        handler[0] = MEMORY[0x24BDAC760];
        handler[1] = 0x40000000;
        handler[2] = __Apple80211EventMonitoringInit2_block_invoke;
        handler[3] = &__block_descriptor_tmp_60;
        handler[4] = a1;
        v27 = v10;
        dispatch_source_set_event_handler(v11, handler);
        v13 = *((_QWORD *)a1 + 8);
        v24[0] = v12;
        v24[1] = 0x40000000;
        v24[2] = __Apple80211EventMonitoringInit2_block_invoke_2;
        v24[3] = &__block_descriptor_tmp_61;
        v25 = v10;
        dispatch_source_set_cancel_handler(v13, v24);
        v14 = *((_QWORD *)a1 + 8);
        if (v14)
          dispatch_activate(v14);
LABEL_22:
        v15 = (const dispatch_source_type_s *)MEMORY[0x24BDACA18];
        v16 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, a4);
        *((_QWORD *)a1 + 197) = v16;
        dispatch_set_context(v16, a1);
        dispatch_source_set_event_handler_f(*((dispatch_source_t *)a1 + 197), (dispatch_function_t)_asyncAssocRetryCallback2);
        v17 = *((_QWORD *)a1 + 197);
        v18 = dispatch_time(0, 315360000000000000);
        dispatch_source_set_timer(v17, v18, 0xBEBC200uLL, 0);
        dispatch_activate(*((dispatch_object_t *)a1 + 197));
        v19 = dispatch_source_create(v15, 0, 0, a4);
        *((_QWORD *)a1 + 32) = v19;
        dispatch_set_context(v19, a1);
        dispatch_source_set_event_handler_f(*((dispatch_source_t *)a1 + 32), (dispatch_function_t)_asyncScanRetryCallback2);
        v20 = *((_QWORD *)a1 + 32);
        v21 = dispatch_time(0, 315360000000000000);
        dispatch_source_set_timer(v20, v21, 0xBEBC200uLL, 0);
        dispatch_activate(*((dispatch_object_t *)a1 + 32));
        v8 = 0;
        *((_QWORD *)a1 + 9) = a2;
        *((_QWORD *)a1 + 10) = a3;
        return v8;
      }
      v8 = 4294963395;
    }
  }
  else
  {
    v10 = -1;
    v8 = 4294963396;
  }
  v23 = *((_QWORD *)a1 + 8);
  if (v23)
  {
    dispatch_source_cancel(v23);
    dispatch_release(*((dispatch_object_t *)a1 + 8));
    *((_QWORD *)a1 + 8) = 0;
  }
  if ((v10 & 0x80000000) == 0)
    close(v10);
  return v8;
}

uint64_t Apple80211StartMonitoringEvent(_QWORD *a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 4294963396;
  if (a1[7] || a1[8])
  {
    if (a2 <= 0xF1)
    {
LABEL_5:
      result = 0;
      *((_BYTE *)a1 + ((unint64_t)(a2 - 1) >> 3) + 20) |= 1 << ((a2 - 1) & 7);
      return result;
    }
    return 4294963396;
  }
  result = 4294963396;
  if (a2 <= 0xF1 && a1[228])
    goto LABEL_5;
  return result;
}

void Apple80211GenerateUUIDForScan(char *a1)
{
  unsigned __int8 uu[16];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  memset(uu, 170, sizeof(uu));
  MEMORY[0x20BCF6BEC](uu);
  uuid_unparse(uu, a1);
}

uint64_t _waitForScanComplete()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  unsigned int v8;
  timeval v10[2];
  fd_set v11;
  fd_set v12;
  _DWORD __b[1030];
  uint64_t v14;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v14 = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, sizeof(__b));
  memset(v10, 170, sizeof(v10));
  memset(&v12, 0, sizeof(v12));
  v4 = 1 << v2;
  v5 = v2 >> 5;
  if (__darwin_check_fd_set_overflow(v2, &v12, 0))
    v12.fds_bits[v5] |= v4;
  v11 = v12;
  gettimeofday(&v10[1], 0);
  v6 = select(v2 + 1, &v11, 0, 0, 0);
  if (!v6)
    return 4294963391;
  v7 = (const char *)(v3 + 4);
  while (v6 > 0 || *__error() == 4)
  {
    gettimeofday(v10, 0);
    if (__darwin_check_fd_set_overflow(v2, &v11, 0) && (v11.fds_bits[v5] & v4) != 0)
    {
      v8 = read(v2, __b, 0x1018uLL);
      if ((v8 & 0x80000000) != 0)
        return *__error();
      if (v8 >= 0x18
        && (__b[0] - 40) <= 0xFFFFFFEF
        && !strncmp((const char *)&__b[6], v7, 0x10uLL)
        && __b[5] == 10)
      {
        return 0;
      }
    }
    v11 = v12;
    gettimeofday(&v10[1], 0);
    v6 = select(v2 + 1, &v11, 0, 0, 0);
    if (!v6)
      return 4294963391;
  }
  return *__error();
}

uint64_t Apple80211StopMonitoringEvent(_QWORD *a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 4294963396;
  if (a1[7] || a1[8])
  {
    if (a2 <= 0xF1)
    {
LABEL_5:
      result = 0;
      *((_BYTE *)a1 + ((unint64_t)(a2 - 1) >> 3) + 20) &= ~(1 << ((a2 - 1) & 7));
      return result;
    }
    return 4294963396;
  }
  result = 4294963396;
  if (a2 <= 0xF1 && a1[228])
    goto LABEL_5;
  return result;
}

uint64_t _Apple80211EventMonitoringHalt2(uint64_t a1, uint64_t a2)
{
  __CFSocket *v4;
  __CFRunLoopTimer *v5;
  NSObject *v6;
  __CFRunLoopTimer *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  NSObject *v11;
  __CFRunLoop *v12;
  const void *v13;
  _BYTE v15[24];
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = *(__CFSocket **)(a1 + 56);
    if (v4)
    {
      CFSocketInvalidate(v4);
      CFRelease(*(CFTypeRef *)(a1 + 56));
      *(_QWORD *)(a1 + 56) = 0;
    }
    v5 = *(__CFRunLoopTimer **)(a1 + 1568);
    if (v5)
    {
      CFRunLoopTimerInvalidate(v5);
      CFRelease(*(CFTypeRef *)(a1 + 1568));
      *(_QWORD *)(a1 + 1568) = 0;
    }
    v6 = *(NSObject **)(a1 + 1576);
    if (v6)
    {
      dispatch_source_cancel(v6);
      dispatch_release(*(dispatch_object_t *)(a1 + 1576));
      *(_QWORD *)(a1 + 1576) = 0;
    }
    v7 = *(__CFRunLoopTimer **)(a1 + 248);
    if (v7)
    {
      CFRunLoopTimerInvalidate(v7);
      CFRelease(*(CFTypeRef *)(a1 + 248));
      *(_QWORD *)(a1 + 248) = 0;
    }
    v8 = *(NSObject **)(a1 + 256);
    if (v8)
    {
      dispatch_source_cancel(v8);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(_QWORD *)(a1 + 256) = 0;
    }
    v9 = *(NSObject **)(a1 + 64);
    if (v9)
    {
      dispatch_source_cancel(v9);
      dispatch_release(*(dispatch_object_t *)(a1 + 64));
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (*(_BYTE *)(a1 + 51))
    {
      v10 = *(const void **)(a1 + 80);
      if (v10)
        _Block_release(v10);
    }
    *(_WORD *)(a1 + 51) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 43) = 0;
    if (*(_DWORD *)(a1 + 1804))
    {
      v11 = *(NSObject **)(a1 + 1816);
      if (v11)
      {
        *(_QWORD *)v15 = MEMORY[0x24BDAC760];
        *(_QWORD *)&v15[8] = 0x40000000;
        *(_QWORD *)&v15[16] = __Apple80211EventMonitoringHaltIOUC_block_invoke;
        v16 = &unk_24BF117F8;
        v17 = a2;
        v18 = a1;
        dispatch_async(v11, v15);
        *(_QWORD *)(a1 + 1816) = 0;
        return 0;
      }
      v12 = *(__CFRunLoop **)(a1 + 1920);
      if (v12)
      {
        v13 = (const void *)*MEMORY[0x24BDBD5A0];
        *(_QWORD *)v15 = MEMORY[0x24BDAC760];
        *(_QWORD *)&v15[8] = 0x40000000;
        *(_QWORD *)&v15[16] = __Apple80211EventMonitoringHaltIOUC_block_invoke_2;
        v16 = &unk_24BF11820;
        v17 = a2;
        v18 = a1;
        CFRunLoopPerformBlock(v12, v13, v15);
        CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 1920));
        *(_QWORD *)(a1 + 1920) = 0;
        return 0;
      }
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)&v15[4] = "Apple80211EventMonitoringHaltIOUC";
      *(_WORD *)&v15[12] = 2080;
      *(_QWORD *)&v15[14] = a1 + 4;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: no user client connected for %s", v15, 0x16u);
    }
    if (a2)
      (*(void (**)(uint64_t))(a2 + 16))(a2);
    return 0;
  }
  if (a2)
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  return 4294963396;
}

uint64_t Apple80211ScanDynamic()
{
  uint64_t v0;
  void (*v1)(_QWORD, uint64_t, const __CFArray *, uint64_t);
  uint64_t v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  uint64_t v5;
  __int128 v6;
  const __CFAllocator *v7;
  const CFArrayCallBacks *v8;
  const __CFArray *Mutable;
  const __CFArray *v10;
  int v11;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  uint64_t ScanData;
  char *v16;
  _DWORD *v17;
  int *v18;
  int v19;
  unint64_t Value;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  CFIndex v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void (*v37)(_QWORD, uint64_t, const __CFArray *, uint64_t);
  int v38;
  char *v39;
  int out;
  int v41;
  char v42;
  int v43;
  char v44;
  _WORD v45[3];
  _DWORD __dst[1200];
  _DWORD v47[566];
  _DWORD v48[1338];
  _DWORD v49[1382];
  __int128 v50;
  __int128 v51;
  _DWORD *v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  _QWORD uu[5];

  v0 = MEMORY[0x24BDAC7A8]();
  v36 = v2;
  v37 = v1;
  v4 = v3;
  v5 = v0;
  uu[2] = *MEMORY[0x24BDAC8D0];
  v55 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v6;
  v54 = v6;
  v52 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
  v50 = v6;
  v51 = v6;
  bzero(v49, 0x1598uLL);
  v49[0] = 1;
  bzero(v48, 0x14E8uLL);
  v48[0] = 1;
  memset(v47, 170, sizeof(v47));
  *(_DWORD *)&v45[1] = -1431655766;
  v45[0] = 257;
  v44 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v10 = CFArrayCreateMutable(v7, 0, v8);
  v11 = _openEventSocket();
  v43 = -1431655766;
  v42 = 0;
  if (!v5 || (*(_DWORD *)v5 & 0x80000000) != 0)
  {
    v12 = 4294963396;
    goto LABEL_49;
  }
  v12 = 4294963396;
  if (!v37 || !*(_BYTE *)(v5 + 4) || (v12 = 4294963395, !Mutable) || !v10)
  {
LABEL_49:
    v30 = v12;
    if (!Mutable)
      goto LABEL_51;
    goto LABEL_50;
  }
  if (v11 < 0)
  {
    v30 = *__error();
  }
  else
  {
    if (v4 && (CFDictionaryGetValue(v4, CFSTR("SCAN_SSID_LIST")) || CFDictionaryGetValue(v4, CFSTR("SCAN_BSSID_LIST"))))
    {
      v13 = 0;
      v14 = v48;
    }
    else
    {
      v14 = 0;
      v13 = (char *)v49;
    }
    v39 = v13;
    ScanData = _getScanData(v4, v13, (uint64_t)v14, (_BYTE *)v45 + 1, &v43, &v45[1], (Boolean *)v45, (Boolean *)&v44, v5 + 88, (Boolean *)&v42);
    if ((_DWORD)ScanData)
    {
      v30 = ScanData;
    }
    else if (!v14 || v14[128] == 3 || (*(_BYTE *)(v5 + 90) & 0x40) != 0)
    {
      v16 = v39;
      v17 = v39 + 68;
      if (!v39)
        v17 = v14 + 132;
      if (*v17)
      {
        v35 = v11;
        if (v39)
        {
          memcpy(__dst, v39 + 72, sizeof(__dst));
          v33 = *((_DWORD *)v39 + 17);
          *((_DWORD *)v39 + 17) = 1;
          v18 = (int *)(v39 + 52);
          v19 = 10;
          out = 5528;
        }
        else
        {
          memcpy(__dst, v14 + 133, sizeof(__dst));
          v33 = v14[132];
          v14[132] = 1;
          v18 = v14 + 128;
          v19 = 86;
          out = 5352;
          v16 = (char *)v14;
        }
        v38 = *v18;
        Value = (unint64_t)CFDictionaryGetValue(v4, CFSTR("SCAN_SHORT_SSID"));
        v21 = (unint64_t)CFDictionaryGetValue(v4, CFSTR("SSID_STR"));
        v22 = (unint64_t)CFDictionaryGetValue(v4, CFSTR("BSSID"));
        v53 = 0u;
        v54 = 0u;
        v23 = (v21 | v22 | Value) != 0;
        v55 = 0;
        LODWORD(v54) = v19;
        __strlcpy_chk();
        DWORD2(v54) = out;
        v55 = (unint64_t)v16;
        v50 = 0u;
        v51 = 0u;
        v52 = 0;
        LODWORD(v51) = 11;
        __strlcpy_chk();
        DWORD2(v51) = 2264;
        v52 = v47;
        if (v33)
        {
          v24 = 0;
          v25 = 0;
          v26 = v39;
          v32 = v33;
          while (1)
          {
            v27 = &__dst[3 * v24];
            v28 = v26 ? (uint64_t)(v39 + 72) : (uint64_t)(v14 + 133);
            *(_QWORD *)v28 = *(_QWORD *)v27;
            *(_DWORD *)(v28 + 8) = v27[2];
            v34 = v24;
            if (*(_DWORD *)&v45[1])
              break;
LABEL_44:
            v24 = v34 + 1;
            if (v34 + 1 == v32)
            {
              v12 = 0;
              goto LABEL_48;
            }
          }
          v29 = 0;
          while (1)
          {
            v41 = v29;
            if (v26)
            {
              uu[0] = 0xAAAAAAAAAAAAAAAALL;
              uu[1] = 0xAAAAAAAAAAAAAAAALL;
              MEMORY[0x20BCF6BEC](uu);
              uuid_unparse((const unsigned __int8 *)uu, v39 + 5452);
              if (Apple80211RawSet())
                break;
              __strlcpy_chk();
            }
            else if (Apple80211RawSet())
            {
              break;
            }
            if (v38 != 3)
            {
              v12 = _waitForScanComplete();
              if ((_DWORD)v12)
                goto LABEL_48;
            }
            while (1)
            {
              bzero(v47, 0x8D8uLL);
              v47[0] = 1;
              HIWORD(v47[34]) = 2048;
              if (*(_BYTE *)(v5 + 1992))
                __strlcpy_chk();
              if (Apple80211RawGet(v5, (uint64_t)&v50))
                break;
              _addScanResultToList(v5, (uint64_t)v47, Mutable, v10, 0, HIBYTE(v45[0]), v23, LOBYTE(v45[0]), v44, v42, 0, 0);
              if (v25 < CFArrayGetCount(v10))
              {
                v37(0, v5, v10, v36);
                ++v25;
              }
            }
            if (*__error() != 5)
              break;
            v29 = v41 + 1;
            v26 = v39;
            if ((v41 + 1) >= *(_DWORD *)&v45[1])
              goto LABEL_44;
          }
          v12 = *__error();
LABEL_48:
          v11 = v35;
          goto LABEL_49;
        }
        v30 = 0;
        v11 = v35;
      }
      else
      {
        v30 = 4294963396;
      }
    }
    else
    {
      v30 = 4294963393;
    }
  }
LABEL_50:
  CFRelease(Mutable);
LABEL_51:
  if (v10)
    CFRelease(v10);
  if ((v11 & 0x80000000) == 0)
    close(v11);
  *(_BYTE *)(v5 + 1992) = 0;
  return v30;
}

uint64_t Apple80211ParseWPAPassword(char *a1, _BYTE *a2, uint64_t a3, char *a4, void *a5, unint64_t a6)
{
  _BOOL4 v7;
  char v10;
  size_t v13;
  size_t v14;
  _QWORD v16[2];

  v7 = 0;
  v16[1] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
  {
    v10 = 0;
    if (!a4)
      goto LABEL_18;
LABEL_17:
    *a4 = v10;
    goto LABEL_18;
  }
  v10 = 0;
  if (!a5)
  {
LABEL_16:
    if (!a4)
      goto LABEL_18;
    goto LABEL_17;
  }
  v13 = strlen(a1);
  if (v13 - 8 > 0x37)
  {
    if (v13 == 64 && strspn(a1, "0123456789abcdefABCDEF") == 64)
    {
      v16[0] = 0xAAAAAAAAAAAAAAAALL;
      if (_ParseHexEncodedData(a1, 64, 32, a2, v16))
      {
        v10 = 0;
        v7 = v16[0] == 32;
        if (!a4)
          goto LABEL_18;
        goto LABEL_17;
      }
    }
    v7 = 0;
    v10 = 0;
    goto LABEL_16;
  }
  if (a6 >= 0x20)
    v14 = 32;
  else
    v14 = a6;
  IEEE80211iPasswordHash((uint64_t)a1, v13, a5, v14, a2);
  v7 = 1;
  v10 = 1;
  if (a4)
    goto LABEL_17;
LABEL_18:
  if (v7)
    return 0;
  else
    return 4294967196;
}

uint64_t _ParseHexEncodedData(char *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  char v17;
  unsigned int v18;
  char v19;
  _QWORD *v20;

  v10 = MEMORY[0x24BDAC740];
  while (1)
  {
    v11 = *a1;
    if ((v11 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x4000) == 0)
        break;
      goto LABEL_6;
    }
    if (!__maskrune(v11, 0x4000uLL))
      break;
LABEL_6:
    ++a1;
    if (!--a2)
    {
      result = 1;
      v13 = a4;
      if (!a5)
        return result;
      goto LABEL_29;
    }
  }
  v20 = a5;
  v14 = 0;
  v13 = a4;
  while (1)
  {
    v15 = __tolower(a1[v14]);
    if (v15 > 0xFF)
      break;
    v16 = v15;
    if ((*(_DWORD *)(v10 + 4 * v15 + 60) & 0x10000) == 0)
      break;
    v17 = v15 <= 0x60 ? -48 : -87;
    if (a2 - 1 == v14)
      break;
    v18 = __tolower(a1[v14 + 1]);
    if (v18 > 0xFF || (*(_DWORD *)(v10 + 4 * v18 + 60) & 0x10000) == 0)
      break;
    if (v18 <= 0x60)
      v19 = -48;
    else
      v19 = -87;
    if (a3)
    {
      if (v13)
        *v13++ = (v19 + v18) | (16 * (v17 + v16));
      --a3;
    }
    v14 += 2;
    if (a2 == v14)
    {
      result = 1;
      goto LABEL_28;
    }
  }
  result = 0;
LABEL_28:
  a5 = v20;
  if (v20)
LABEL_29:
    *a5 = v13 - a4;
  return result;
}

uint64_t Apple80211AssociateAsync(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  return _performAssociation(a1, a2, a3, 1);
}

uint64_t _performAssociation(uint64_t a1, const __CFDictionary *a2, const __CFString *a3, int a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const __CFData *Value;
  const __CFData *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFNumber *v16;
  const __CFBoolean *BoolRef;
  const __CFData *v18;
  const __CFDictionary *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFIndex Count;
  CFIndex v23;
  CFIndex v24;
  UInt8 *v25;
  const __CFData *ValueAtIndex;
  const __CFString *v27;
  const __CFString *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFBoolean *v31;
  const __CFString *v32;
  ether_addr *v33;
  int v34;
  const __CFNumber *v35;
  const __CFBoolean *v36;
  int v37;
  const __CFNumber *v38;
  const __CFBoolean *v39;
  const __CFNumber *v40;
  const __CFBoolean *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  char v44;
  _BOOL4 v45;
  _BOOL4 v46;
  size_t v47;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  const __CFNumber *v50;
  const __CFNumber *v51;
  unsigned int v52;
  int v53;
  const __CFNumber *v54;
  const __CFString *v55;
  const __CFDictionary *v56;
  const void *v57;
  CFTypeRef *v58;
  int v59;
  const void *v60;
  uint64_t started;
  int v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  const __CFDictionary *v65;
  const __CFDictionary *v66;
  const __CFDictionary *v67;
  uint64_t v68;
  const __CFDictionary *v69;
  const __CFNumber *v70;
  const __CFNumber *v71;
  const __CFArray *v72;
  const __CFArray *v73;
  CFIndex v74;
  CFIndex v75;
  CFIndex i;
  const __CFNumber *v77;
  const __CFAllocator *v78;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v80;
  BOOL v82;
  const __CFNumber *v83;
  const __CFBoolean *v84;
  const __CFBoolean *v85;
  CFNumberRef v86;
  CFNumberRef v87;
  void *v88;
  int v89;
  CFNumberRef v90;
  CFNumberRef v91;
  uint64_t (*v92)(uint64_t, __CFDictionary *);
  const __CFNumber *v93;
  int v94;
  int v95;
  char v96;
  const __CFNumber *v97;
  const __CFNumber *v98;
  BOOL v99;
  const __CFNumber *v100;
  const __CFNumber *v101;
  uint64_t v102;
  const __CFNumber *v103;
  const __CFNumber *v104;
  uint64_t v105;
  const __CFString *v106;
  const __CFNumber *v107;
  unsigned int v108;
  const __CFArray *v109;
  const __CFArray *v110;
  CFIndex v111;
  CFIndex v112;
  CFIndex v113;
  const __CFNumber *v114;
  const __CFNumber *v115;
  uint64_t v116;
  const void *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  const __CFArray *v122;
  const __CFArray *v123;
  CFIndex v124;
  CFIndex v125;
  CFIndex v126;
  const __CFNumber *v127;
  const __CFDictionary *v128;
  const __CFDictionary *v129;
  const __CFBoolean *v130;
  const __CFBoolean *v131;
  const __CFNumber *v132;
  const __CFNumber *v133;
  const __CFAllocator *v134;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  CFNumberRef v140;
  CFNumberRef v141;
  CFNumberRef v142;
  const void *v143;
  const void *v144;
  const void *v145;
  const void *v146;
  const __CFArray *v147;
  const __CFArray *v148;
  CFIndex v149;
  CFIndex v150;
  CFIndex v151;
  int v152;
  const __CFNumber *v153;
  unsigned int v154;
  _BOOL4 v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  const __CFNumber *v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  __int128 v167;
  int v168;
  int v169;
  int v170;
  _BOOL4 v171;
  const __CFNumber *v172;
  int v173;
  int v174;
  const void *v175;
  __CFRunLoopTimer *v176;
  CFAbsoluteTime Current;
  NSObject *v178;
  dispatch_time_t v179;
  CFMutableDictionaryRef v180;
  __int128 v181;
  NSObject *v183;
  const char *v184;
  const __CFNumber *v185;
  _BOOL4 v186;
  _BOOL4 v187;
  int v188;
  const __CFNumber *v189;
  const __CFString *v190;
  int v191;
  _BOOL4 v192;
  uint64_t v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  char v199;
  unsigned int v200;
  uint64_t valuePtr;
  uint64_t v202;
  uint8_t buf[4];
  const char *v204;
  __int16 v205;
  int v206;
  __int16 v207;
  int v208;
  char buffer[32];
  char __s[16];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  int *p_src;
  int __src;
  _WORD v230[2];
  int v231;
  int v232;
  unsigned int range;
  UInt8 v234[32];
  int v235;
  __int16 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  int v246;
  __int16 v247;
  __int16 v248;
  char v249;
  char v250;
  char v251;
  char v252;
  int v253;
  __int128 v254;
  __int128 v255;
  int v256;
  int v257;
  unsigned __int16 v258;
  char v259;
  _BYTE v260[65];
  _BYTE v261[37];
  int v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  CFRange v267;
  CFRange v268;
  CFRange v269;

  v266 = *MEMORY[0x24BDAC8D0];
  valuePtr = 0;
  v202 = 0;
  bzero(v230, 0x380uLL);
  __src = 1;
  p_src = (int *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v226 = v7;
  v227 = v7;
  v224 = v7;
  v225 = v7;
  v222 = v7;
  v223 = v7;
  v220 = v7;
  v221 = v7;
  v218 = v7;
  v219 = v7;
  v216 = v7;
  v217 = v7;
  v214 = v7;
  v215 = v7;
  v212 = v7;
  v213 = v7;
  *(_OWORD *)__s = v7;
  v211 = v7;
  v200 = -1431655766;
  v199 = 0;
  v198 = 0;
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0)
    goto LABEL_330;
  v8 = 4294963396;
  if (!a2)
    goto LABEL_474;
  v9 = a1 + 4;
  if (!*(_BYTE *)(a1 + 4))
    goto LABEL_474;
  if ((byte_253E9DBF1 & 1) == 0)
  {
    *(_QWORD *)buffer = 0;
    os_parse_boot_arg_int();
    _MergedGlobals_0 = 0;
    byte_253E9DBF1 = 1;
  }
  p_src = 0;
  v226 = 0u;
  v227 = 0u;
  Value = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("SSID"));
  if (!Value)
    goto LABEL_474;
  v11 = Value;
  range = CFDataGetLength(Value);
  if (range - 1 > 0x1F || CFDataGetLength(v11) < 1)
    goto LABEL_474;
  v267.length = range;
  v267.location = 0;
  CFDataGetBytes(v11, v267, v234);
  v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("TRANS_DISABLED_FLAGS_ASSOC"));
  if (v12)
    CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
  v263 = valuePtr;
  v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("SCAN_RESULT_OWE_MULTI_SSID"));
  makeBoolRef(v13);
  v14 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("PRIVATE_MAC_ADDRESS"));
  if (v14)
  {
    v15 = v14;
    v16 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("PRIVATE_MAC_ADDRESS_VALID"));
    BoolRef = makeBoolRef(v16);
    v18 = (const __CFData *)CFDictionaryGetValue(v15, CFSTR("PRIVATE_MAC_ADDRESS_VALUE"));
    if (BoolRef && !CFBooleanGetValue(BoolRef))
    {
      v251 |= 0x40u;
      if (v18)
        goto LABEL_16;
    }
    else if (v18)
    {
LABEL_16:
      v268.location = 0;
      v268.length = 6;
      CFDataGetBytes(v18, v268, (UInt8 *)&v257);
      *(_WORD *)&buffer[4] = 0;
      *(_DWORD *)buffer = 0;
      if (v257 | v258 && (v257 & 3) == 2)
      {
        syslog(3, " WFMacRandomisation : Private mac address being used :  %02x:%02x:%02x:%02x:%02x:%02x\n", v257, BYTE1(v257), BYTE2(v257), HIBYTE(v257), v258, HIBYTE(v258));
        v250 |= 8u;
      }
      else
      {
        syslog(3, " WFMacRandomisation : Private mac address invalid, will not be used :  %02x:%02x:%02x:%02x:%02x:%02x\n");
      }
      goto LABEL_22;
    }
    syslog(3, " WFMacRandomisation : Private mac config specified, but no private mac address value\n");
  }
LABEL_22:
  v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("BSS_BLACKLIST"));
  v194 = a1;
  if (v19)
  {
    v20 = (const __CFArray *)CFDictionaryGetValue(v19, CFSTR("BSS_BLACKLIST_BSSIDS"));
    if (v20)
    {
      v21 = v20;
      Count = CFArrayGetCount(v20);
      v23 = Count;
      if ((unint64_t)(Count - 1) > 9)
      {
        syslog(3, "%s: Invalid bss blacklist count %ld\n");
      }
      else
      {
        v24 = 0;
        v259 = Count;
        v25 = v260;
        do
        {
          ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v21, v24);
          v269.location = 0;
          v269.length = 6;
          CFDataGetBytes(ValueAtIndex, v269, v25);
          ++v24;
          v25 += 6;
        }
        while (v23 != v24);
        v250 |= 0x10u;
      }
    }
    else
    {
      syslog(3, "%s: Missing bss blacklist\n");
    }
  }
  v27 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("COLOCATED_NETWORK_SCOPE_ID"));
  if (v27)
  {
    v28 = v27;
    if ((unint64_t)(CFStringGetLength(v27) - 1) > 0x23)
    {
      syslog(3, "%s: Invalid length for colocatedNetworkScopeId = %ld. Max allowed = %lu\n");
    }
    else if (CFStringGetCString(v28, v261, 37, 0x8000100u) == 1)
    {
      *(_DWORD *)&v260[61] = strlen(v261);
      v250 |= 0x40u;
    }
    else
    {
      memset(v261, 0, sizeof(v261));
      syslog(3, "%s: Invalid colocatedNetworkScopeId\n");
    }
  }
  v29 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("BAND_PREFERENCE"));
  if (v29)
  {
    *(_DWORD *)buffer = -1431655766;
    if (CFNumberGetValue(v29, kCFNumberSInt32Type, buffer))
      v264 = *(_DWORD *)buffer;
  }
  v30 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("FORCE_BSSID"));
  v31 = makeBoolRef(v30);
  if (v31 && CFBooleanGetValue(v31) == 1)
  {
    v32 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("BSSID"));
    if (!v32)
      goto LABEL_330;
    memset(buffer, 170, 18);
    if (!CFStringGetCString(v32, buffer, 18, 0x8000100u))
      goto LABEL_330;
    syslog(3, "%s: ForceBSSID forcing bssid %s\n", "_performAssociation", buffer);
    v33 = ether_aton(buffer);
    if (!v33)
      goto LABEL_330;
    v34 = *(_DWORD *)v33->octet;
    v236 = *(_WORD *)&v33->octet[4];
    v235 = v34;
    v249 |= 0x20u;
  }
  v35 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CARPLAY_NETWORK"));
  v36 = makeBoolRef(v35);
  if (v36 && CFBooleanGetValue(v36) == 1)
  {
    v37 = 0;
    v250 |= 1u;
  }
  else
  {
    v37 = 1;
  }
  v38 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("INSTANT_HOTSPOT_ASSOC"));
  v39 = makeBoolRef(v38);
  if (v39 && CFBooleanGetValue(v39) == 1)
  {
    v37 = 0;
    v250 |= 2u;
  }
  v40 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AUTO_INSTANT_HOTSPOT_ASSOC"));
  v41 = makeBoolRef(v40);
  if (v41 && CFBooleanGetValue(v41) == 1)
  {
    v250 |= 4u;
  }
  else if (v37)
  {
    v251 |= 0x20u;
  }
  v42 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ASSOC_REASON"));
  if (v42)
  {
    v252 = 0;
    if (CFNumberGetValue(v42, kCFNumberSInt8Type, &v200))
    {
      if ((v200 & 0x80000000) != 0)
      {
        syslog(3, "%s: Invalid assoc reason: %d \n", "_performAssociation", v200);
      }
      else
      {
        if (v200 > 2)
        {
          v8 = 4294963365;
          goto LABEL_474;
        }
        v252 = v200;
      }
    }
  }
  v224 = 0u;
  v225 = 0u;
  v222 = 0u;
  v223 = 0u;
  v220 = 0u;
  v221 = 0u;
  v218 = 0u;
  v219 = 0u;
  v216 = 0u;
  v217 = 0u;
  v214 = 0u;
  v215 = 0u;
  v212 = 0u;
  v213 = 0u;
  *(_OWORD *)__s = 0u;
  v211 = 0u;
  v43 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WAPI"));
  if (v43 && CFNumberGetValue(v43, kCFNumberSInt32Type, (char *)&valuePtr + 4))
  {
    v44 = 0;
    v45 = (~HIDWORD(valuePtr) & 0xB) == 0;
    v46 = (~HIDWORD(valuePtr) & 7) == 0;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    v44 = 1;
  }
  v47 = 0;
  if (a3 && !v45)
  {
    Length = CFStringGetLength(a3);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    if (MaximumSizeForEncoding > 255)
      goto LABEL_330;
    v47 = MaximumSizeForEncoding;
    if (MaximumSizeForEncoding >= 1)
    {
      if (CFStringGetCString(a3, __s, 256, 0x8000100u))
      {
        v47 = strlen(__s);
        goto LABEL_73;
      }
LABEL_330:
      v8 = 4294963396;
      goto LABEL_474;
    }
  }
LABEL_73:
  LODWORD(v227) = 20;
  DWORD2(v227) = 900;
  p_src = &__src;
  __strlcpy_chk();
  v50 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AP_MODE"));
  if (!v50 || !CFNumberGetValue(v50, kCFNumberSInt16Type, v230))
    v230[0] = 2;
  v51 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ASSOC_FLAGS"));
  if (v51)
  {
    *(_DWORD *)buffer = 0;
    if (!CFNumberGetValue(v51, kCFNumberSInt32Type, buffer))
    {
      v59 = 4558;
LABEL_93:
      syslog(3, "%s::%s[%u] Error: Assert failure\n", "/Library/Caches/com.apple.xbs/Sources/IO80211/IO80211API/Apple80211API_iOS.c", "_performAssociation", v59);
      return 0;
    }
    v52 = 0;
    v53 = *(_DWORD *)buffer;
    do
    {
      if ((v53 & 1) != 0)
        *(&v249 + ((unint64_t)v52 >> 3)) |= 1 << (v52 & 7);
      v53 >>= 1;
      ++v52;
    }
    while (v52 != 24);
  }
  v54 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WSEC_FLAGS"));
  if (!v54)
    goto LABEL_85;
  *(_DWORD *)buffer = 0;
  if (!CFNumberGetValue(v54, kCFNumberSInt32Type, buffer))
  {
    v59 = 4578;
    goto LABEL_93;
  }
  v265 = *(_DWORD *)buffer;
LABEL_85:
  v55 = a3;
  v56 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("FAST_ENTERPRISE_NETWORK"));
  v57 = CFDictionaryGetValue(a2, CFSTR("FAST_ENTERPRISE_NETWORK_SUPPORTED_DEVICE"));
  v58 = (CFTypeRef *)MEMORY[0x24BDBD270];
  if (v57)
  {
    v192 = CFEqual(v57, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
    if (!v56)
      goto LABEL_95;
  }
  else
  {
    v192 = 0;
    if (!v56)
      goto LABEL_95;
  }
  v60 = CFDictionaryGetValue(v56, CFSTR("FT_STATE"));
  if (v60)
    LODWORD(v56) = CFEqual(v60, *v58) != 0;
  else
    LODWORD(v56) = 0;
LABEL_95:
  if ((v249 & 8) != 0)
  {
    if ((v192 & v56) != 0)
      v62 = 128;
    else
      v62 = 64;
    v232 = v62;
  }
  v63 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("SCAN_DIRECTED"));
  v64 = makeBoolRef(v63);
  if (v64 && CFEqual(v64, *v58))
    v249 |= 4u;
  if ((v44 & 1) == 0)
  {
    *(_DWORD *)buffer = 0;
    v78 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, a2);
    if (!MutableCopy)
    {
      v8 = 4294963395;
      goto LABEL_464;
    }
    v80 = MutableCopy;
    if (v55)
    {
      v82 = (int)CFStringGetLength(v55) >= 256 || !v45 || !v46;
      if (v82 && v45)
      {
        CFDictionaryAddValue(v80, CFSTR("CERT"), v55);
        v45 = 1;
      }
      else
      {
        v86 = CFNumberCreate(v78, kCFNumberIntType, buffer);
        if (!v86)
        {
          v8 = 4294963395;
          goto LABEL_470;
        }
        v87 = v86;
        CFDictionaryAddValue(v80, CFSTR("PSK"), v55);
        CFDictionaryAddValue(v80, CFSTR("PSK_KEY_TYPE"), v87);
        CFRelease(v87);
        v45 = 0;
      }
    }
    v88 = _WAPIStart_wapistart;
    if (!_WAPIStart_wapistart)
    {
      v88 = funcAddr("WAPIStart");
      _WAPIStart_wapistart = v88;
      if (!v88)
      {
        v8 = 0xFFFFFFFFLL;
        if (!v55)
          goto LABEL_183;
LABEL_146:
        if (v46 && !v45)
        {
          v89 = strlen(__s);
          v68 = v194;
          if (v89 && v89 == strspn(__s, "0123456789abcdefABCDEF"))
          {
            *(_DWORD *)buffer = 1;
            v90 = CFNumberCreate(v78, kCFNumberIntType, buffer);
            if (!v90)
            {
              v8 = 4294963395;
              goto LABEL_471;
            }
            v91 = v90;
            CFDictionarySetValue(v80, CFSTR("PSK_KEY_TYPE"), v90);
            CFRelease(v91);
            v92 = (uint64_t (*)(uint64_t, __CFDictionary *))_WAPIStart_wapistart;
            if (_WAPIStart_wapistart
              || (v92 = (uint64_t (*)(uint64_t, __CFDictionary *))funcAddr("WAPIStart"),
                  (_WAPIStart_wapistart = v92) != 0))
            {
              v8 = v92(v9, v80);
              if (!(_DWORD)v8)
                goto LABEL_471;
            }
            else
            {
              v8 = 0xFFFFFFFFLL;
            }
          }
          goto LABEL_184;
        }
LABEL_183:
        v68 = v194;
LABEL_184:
        Apple80211SetWithIOCTL();
LABEL_471:
        CFRelease(v80);
        goto LABEL_472;
      }
    }
    v8 = ((uint64_t (*)(uint64_t, __CFDictionary *))v88)(v9, v80);
    if ((_DWORD)v8)
    {
      if (!v55)
        goto LABEL_183;
      goto LABEL_146;
    }
LABEL_470:
    v68 = v194;
    goto LABEL_471;
  }
  v65 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("WPA_IE"));
  v66 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("RSN_IE"));
  v67 = v66;
  v256 = 0;
  v68 = v194;
  if (v230[0] == 1 && (unint64_t)v65 | (unint64_t)v66)
  {
    if (v66)
    {
      v69 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("RSN_IE"));
      v70 = (const __CFNumber *)CFDictionaryGetValue(v69, CFSTR("IE_KEY_RSN_VERSION"));
      if (v70)
      {
        *(_WORD *)buf = -21846;
        *(_DWORD *)buffer = -1431655766;
        started = 4294963396;
        if (!CFNumberGetValue(v70, kCFNumberSInt16Type, buf))
          return started;
        if (*(unsigned __int16 *)buf != 1)
          return started;
        v71 = (const __CFNumber *)CFDictionaryGetValue(v69, CFSTR("IE_KEY_RSN_MCIPHER"));
        if (!v71)
          return started;
        if (!CFNumberGetValue(v71, kCFNumberSInt32Type, buffer))
          return started;
        if (*(_DWORD *)buffer != 4)
          return started;
        v72 = (const __CFArray *)CFDictionaryGetValue(v69, CFSTR("IE_KEY_RSN_UCIPHERS"));
        if (!v72)
          return started;
        v73 = v72;
        v74 = CFArrayGetCount(v72);
        if (v74 >= 1)
        {
          v75 = v74;
          for (i = 0; v75 != i; ++i)
          {
            v77 = (const __CFNumber *)CFArrayGetValueAtIndex(v73, i);
            if (!CFNumberGetValue(v77, kCFNumberSInt32Type, buffer))
              break;
            if (*(_DWORD *)buffer == 4)
            {
              v109 = (const __CFArray *)CFDictionaryGetValue(v69, CFSTR("IE_KEY_RSN_AUTHSELS"));
              if (v109)
              {
                v110 = v109;
                v111 = CFArrayGetCount(v109);
                if (v111 >= 1)
                {
                  v112 = v111;
                  v113 = 0;
                  while (1)
                  {
                    v114 = (const __CFNumber *)CFArrayGetValueAtIndex(v110, v113);
                    if (!CFNumberGetValue(v114, kCFNumberSInt32Type, buffer))
                      break;
                    if (*(_DWORD *)buffer == 2)
                    {
                      v128 = (const __CFDictionary *)CFDictionaryGetValue(v69, CFSTR("IE_KEY_RSN_CAPS"));
                      if (!v128)
                        return 4294963396;
                      v129 = v128;
                      v130 = (const __CFBoolean *)CFDictionaryGetValue(v128, CFSTR("PRE_AUTH"));
                      if (!v130)
                        return 4294963396;
                      if (CFBooleanGetValue(v130))
                        return 4294963396;
                      v131 = (const __CFBoolean *)CFDictionaryGetValue(v129, CFSTR("NO_PAIRWISE"));
                      if (!v131)
                        return 4294963396;
                      if (CFBooleanGetValue(v131))
                        return 4294963396;
                      v132 = (const __CFNumber *)CFDictionaryGetValue(v129, CFSTR("PTKSA_REPLAY_COUNTERS"));
                      if (!v132)
                        return 4294963396;
                      started = 4294963396;
                      if (CFNumberGetValue(v132, kCFNumberSInt16Type, buf))
                      {
                        if (*(unsigned __int16 *)buf == 4)
                        {
                          v133 = (const __CFNumber *)CFDictionaryGetValue(v129, CFSTR("GTKSA_REPLAY_COUNTERS"));
                          if (v133)
                          {
                            if (CFNumberGetValue(v133, kCFNumberSInt16Type, buf) && *(unsigned __int16 *)buf == 1)
                            {
                              v134 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                              if (Mutable)
                              {
                                v136 = Mutable;
                                *(_WORD *)buf = 1;
                                v137 = CFNumberCreate(v134, kCFNumberSInt16Type, buf);
                                if (!v137)
                                  goto LABEL_492;
                                v138 = v137;
                                CFDictionaryAddValue(v136, CFSTR("AP_MODE_AUTH_LOWER"), v137);
                                CFRelease(v138);
                                strcpy((char *)buf, "\b");
                                v139 = CFNumberCreate(v134, kCFNumberSInt16Type, buf);
                                if (!v139)
                                  goto LABEL_492;
                                v140 = v139;
                                CFDictionaryAddValue(v136, CFSTR("AP_MODE_AUTH_UPPER"), v139);
                                CFRelease(v140);
                                *(_DWORD *)buffer = 6;
                                v141 = CFNumberCreate(v134, kCFNumberSInt32Type, buffer);
                                if (v141)
                                {
                                  v142 = v141;
                                  CFDictionaryAddValue(v136, CFSTR("AP_MODE_CYPHER_TYPE"), v141);
                                  CFRelease(v142);
                                  v143 = CFDictionaryGetValue(a2, CFSTR("CHANNEL"));
                                  if (v143
                                    && (CFDictionaryAddValue(v136, CFSTR("CHANNEL"), v143),
                                        (v144 = CFDictionaryGetValue(a2, CFSTR("CHANNEL_FLAGS"))) != 0)
                                    && (CFDictionaryAddValue(v136, CFSTR("CHANNEL_FLAGS"), v144),
                                        v145 = CFDictionaryGetValue(a2, CFSTR("SSID")),
                                        CFDictionaryAddValue(v136, CFSTR("AP_MODE_SSID_BYTES"), v145),
                                        v55))
                                  {
                                    CFDictionaryAddValue(v136, CFSTR("AP_MODE_KEY"), v55);
                                    started = _startAPMode(v194, v136, 24);
                                  }
                                  else
                                  {
                                    started = 4294963396;
                                  }
                                }
                                else
                                {
LABEL_492:
                                  started = 4294963395;
                                }
                                CFRelease(v136);
                              }
                              else
                              {
                                return 4294963395;
                              }
                            }
                          }
                        }
                      }
                      return started;
                    }
                    if (v112 == ++v113)
                      return 4294963396;
                  }
                }
              }
              return 4294963396;
            }
          }
        }
      }
    }
    return 4294963396;
  }
  v191 = (int)v56;
  v83 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WPS_ASSOCIATE"));
  v84 = makeBoolRef(v83);
  v85 = v84;
  if (!((unint64_t)v65 | (unint64_t)v67) || v84 && CFBooleanGetValue(v84))
  {
    if (v232 > 2047)
    {
      if (v232 != 2048 && v232 != 0x4000 && v232 != 0x8000)
      {
LABEL_158:
        v93 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WEP"));
        if (makeBoolRef(v93) != *v58)
          goto LABEL_159;
        if (!v55)
        {
          v8 = 4294967196;
          goto LABEL_474;
        }
        v115 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("WEP_AUTH_Flags"));
        if (v115)
        {
          CFNumberGetValue(v115, kCFNumberSInt32Type, &v202);
          v116 = _joinWEPNetwork(v194, (uint64_t)&v226, __s, v202, a4);
          if ((_DWORD)v116 != -100)
          {
            v8 = v116;
            if (a4)
            {
LABEL_212:
              v96 = 0;
              goto LABEL_473;
            }
            v96 = 0;
            if ((v116 + 3912) > 7 || ((1 << (v116 + 72)) & 0x85) == 0)
              goto LABEL_473;
          }
        }
        v202 = 0x100000000;
        v8 = _initiateAutoWEPSequence(v194, (uint64_t)&v226, __s, (_DWORD *)&v202 + 1, (int *)&v202, a4);
        goto LABEL_212;
      }
    }
    else if (v232 != 4 && v232 != 64 && v232 != 128)
    {
      goto LABEL_158;
    }
LABEL_159:
    if (v55)
    {
      v8 = 4294967195;
      goto LABEL_474;
    }
    v231 = 1;
    if (v85 && CFBooleanGetValue(v85))
    {
      v232 = 256;
    }
    else if ((*(_BYTE *)(v194 + 100) & 1) != 0 && v230[0] != 1 && v232 != 64)
    {
      v256 |= 0x20000001u;
      v262 = 1;
    }
    v246 = 0;
    v245 = 0u;
    v244 = 0u;
    v243 = 0u;
    v242 = 0u;
    v241 = 0u;
    v240 = 0u;
    v239 = 0u;
    v238 = 0u;
    v237 = 0u;
    v94 = Apple80211RawSet();
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v95 = *__error();
      *(_DWORD *)buffer = 136315906;
      *(_QWORD *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = 5357;
      *(_WORD *)&buffer[18] = 1024;
      *(_DWORD *)&buffer[20] = v94;
      *(_WORD *)&buffer[24] = 1024;
      *(_DWORD *)&buffer[26] = v95;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%u bsdErr:0x%0x  error:0x%0x \n", (uint8_t *)buffer, 0x1Eu);
    }
    if (!v94)
    {
      if (a4)
      {
LABEL_171:
        v96 = 1;
        goto LABEL_475;
      }
      if (*(_QWORD *)(v194 + 56) && (*(_BYTE *)(v194 + 21) & 1) != 0 && (*(_BYTE *)(v194 + 93) & 0x40) != 0)
      {
        CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x24BDBD5A0], 10.0, 0);
        goto LABEL_171;
      }
      v102 = _waitForJoinResult(v194);
LABEL_181:
      v8 = v102;
      goto LABEL_472;
    }
LABEL_467:
    v8 = *__error();
    goto LABEL_472;
  }
  v97 = (const __CFNumber *)*v58;
  v98 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ALLOW_WPA2_PSK"));
  v99 = v97 == makeBoolRef(v98);
  v100 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ALLOW_OWE_TSN"));
  v101 = makeBoolRef(v100);
  LODWORD(v237) = 1;
  v231 = 1;
  v197 = -1431655766;
  if (v67 && (*(_BYTE *)(v194 + 89) & 0x40) != 0)
  {
    v189 = v101;
    v196 = 0;
    v103 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AUTH_SEL_OVERRIDE"));
    v104 = v103;
    v190 = v55;
    if (v103)
    {
      if (!CFNumberGetValue(v103, kCFNumberSInt32Type, &v196))
        goto LABEL_401;
      v8 = 4294967196;
      if ((int)v196 <= 7)
      {
        if (v196 != 1)
        {
          if (v196 != 2)
            goto LABEL_472;
          v118 = 8;
          v99 = 1;
LABEL_218:
          v119 = 8;
LABEL_219:
          v106 = v190;
          v120 = v256;
          v232 = v119;
          v256 |= 4u;
          v121 = 1;
          if ((*(_BYTE *)(v68 + 97) & 8) == 0 || _MergedGlobals_0)
            goto LABEL_372;
LABEL_350:
          v121 = 0;
          v162 = v120 | 0x40000004;
LABEL_371:
          v256 = v162;
          goto LABEL_372;
        }
        v118 = 0;
LABEL_329:
        v158 = 4;
      }
      else
      {
        if (v196 == 24)
        {
          if ((~*(unsigned __int8 *)(v194 + 105) & 0x30) != 0)
          {
            syslog(3, "%s: AUTH override set to WPA3 SAE but AKN24_25 is not supported\n");
            goto LABEL_176;
          }
          v118 = 0;
LABEL_325:
          v157 = 0x10000;
LABEL_362:
          v232 = v157;
          if ((valuePtr & 1) == 0)
          {
            v106 = v190;
            v121 = 0;
            if (v99)
            {
              v256 |= 0x40000004u;
              v99 = 1;
              goto LABEL_372;
            }
            v99 = 0;
            v162 = v256 | 0x1000000;
            goto LABEL_371;
          }
          v121 = 0;
          v256 |= 0x41000000u;
LABEL_358:
          v106 = v190;
          goto LABEL_372;
        }
        if (v196 != 12)
        {
          if (v196 != 8)
            goto LABEL_472;
          if ((*(_BYTE *)(v194 + 97) & 8) == 0)
          {
            syslog(3, "%s: AUTH override set to WPA3 SAE but SAE is not supported\n");
LABEL_176:
            v8 = 4294963393;
            goto LABEL_472;
          }
          v118 = 0;
LABEL_332:
          v232 = 4096;
          if ((valuePtr & 1) != 0)
          {
            v160 = v104;
            v159 = v256;
            v161 = 1073742080;
          }
          else
          {
            v159 = v256;
            v160 = v104;
            if (!v99)
            {
              v162 = v256 | 0x100;
LABEL_342:
              v106 = v190;
              v121 = 0;
              if (v160)
                v162 = 256;
              goto LABEL_371;
            }
            v161 = 1073741828;
          }
          v162 = v159 | v161;
          goto LABEL_342;
        }
        if ((*(_BYTE *)(v194 + 97) & 0x10) == 0)
        {
          syslog(3, "%s: AUTH override set to WPA3 Enterprise but it is not supported\n");
          goto LABEL_176;
        }
        v118 = 0;
LABEL_337:
        v158 = 0x4000;
      }
LABEL_356:
      v232 = v158;
LABEL_357:
      v121 = 1;
      goto LABEL_358;
    }
    v117 = CFDictionaryGetValue(a2, CFSTR("FT_ENABLED"));
    if (v117)
      v187 = CFEqual(v117, v97) != 0;
    else
      v187 = 0;
    v146 = CFDictionaryGetValue(a2, CFSTR("80211W_ENABLED"));
    v185 = v97;
    if (v146)
      v186 = CFEqual(v146, v97) != 0;
    else
      v186 = 0;
    _getMFPCaps(a2, &v199, 0);
    _getPhyMode(a2, &v198);
    v147 = (const __CFArray *)CFDictionaryGetValue(v67, CFSTR("IE_KEY_RSN_AUTHSELS"));
    if (!v147)
      goto LABEL_401;
    v148 = v147;
    v149 = CFArrayGetCount(v147);
    if (v149 < 1)
    {
      v118 = 0;
LABEL_320:
      syslog(3, "authSel %d\n", v196);
      v68 = v194;
      v104 = 0;
      v8 = 4294963396;
      switch(v196)
      {
        case 0u:
          goto LABEL_472;
        case 1u:
          goto LABEL_329;
        case 2u:
          if ((v192 & v191 & 1) == 0)
            goto LABEL_218;
          v119 = 16;
          goto LABEL_219;
        case 3u:
          v158 = 128;
          goto LABEL_356;
        case 4u:
          v163 = 16;
          goto LABEL_348;
        case 5u:
          v158 = 2048;
          goto LABEL_356;
        case 6u:
          v163 = 1024;
LABEL_348:
          v120 = v256;
          v232 = v163;
          v256 |= 4u;
          v121 = 1;
          if ((*(_BYTE *)(v194 + 97) & 8) == 0)
            goto LABEL_358;
          v106 = v190;
          if (!_MergedGlobals_0)
            goto LABEL_350;
          goto LABEL_372;
        case 8u:
          goto LABEL_332;
        case 9u:
          v232 = 0x2000;
          if ((valuePtr & 1) != 0)
          {
            v164 = v256;
            v165 = 1073742080;
          }
          else
          {
            v164 = v256;
            if (!v99)
            {
              v162 = v256 | 0x100;
LABEL_370:
              v106 = v190;
              v121 = 0;
              goto LABEL_371;
            }
            v165 = 1073741828;
          }
          v162 = v164 | v165;
          goto LABEL_370;
        case 0xCu:
          goto LABEL_337;
        case 0xDu:
          v158 = 0x8000;
          goto LABEL_356;
        case 0x12u:
          v262 = 1;
          if (v185 == v189)
            v166 = v256 | 0x20000001;
          else
            v166 = v256 | 0x40000;
          v256 = v166;
          goto LABEL_357;
        case 0x18u:
          goto LABEL_325;
        case 0x19u:
          v157 = 0x20000;
          goto LABEL_362;
        default:
          syslog(3, "******%s: unknown type (%d)\n", "_performAssociation", v196);
          goto LABEL_459;
      }
    }
    v150 = v149;
    v118 = 0;
    v151 = 0;
    if ((v192 & v191) != 0)
      v152 = 16;
    else
      v152 = 8;
    v188 = v152;
    while (1)
    {
      v153 = (const __CFNumber *)CFArrayGetValueAtIndex(v148, v151);
      if (v153)
      {
        if (CFNumberGetValue(v153, kCFNumberSInt32Type, &v197))
          break;
      }
LABEL_317:
      if (v150 == ++v151)
        goto LABEL_320;
    }
    v154 = v197;
    switch(v197)
    {
      case 6u:
        v118 = 1024;
        break;
      case 4u:
        v118 = 16;
        break;
      case 2u:
        v99 = 1;
        v118 = v188;
        goto LABEL_276;
      default:
        switch(v197)
        {
          case 1u:
          case 3u:
          case 5u:
            goto LABEL_276;
          case 8u:
          case 9u:
            if (!_MergedGlobals_0 && v199 && (*(_BYTE *)(v194 + 97) & 8) != 0)
              goto LABEL_276;
            break;
          case 0xCu:
          case 0xDu:
            if (!_MergedGlobals_0 && v199 && (*(_BYTE *)(v194 + 97) & 0x10) != 0)
              goto LABEL_276;
            break;
          case 0x12u:
            if (!_MergedGlobals_0 && (*(_BYTE *)(v194 + 100) & 1) != 0)
              goto LABEL_276;
            break;
          case 0x18u:
          case 0x19u:
            if ((~*(unsigned __int8 *)(v194 + 105) & 0x30) == 0 && !_MergedGlobals_0 && v199 && (v198 & 0x200) != 0)
              goto LABEL_276;
            break;
          default:
            goto LABEL_317;
        }
        goto LABEL_317;
    }
    v99 = 1;
LABEL_276:
    if (rsnAuthSelectorPriorityMap[v197] > rsnAuthSelectorPriorityMap[v196])
    {
      switch(v197)
      {
        case 1u:
        case 2u:
          v155 = v192;
          if (v232 != 128)
            v155 = 0;
          if ((v155 & v191) == 1)
            v154 = 3;
          goto LABEL_290;
        case 3u:
        case 4u:
          if (!v187)
            goto LABEL_317;
          goto LABEL_290;
        case 5u:
        case 6u:
          if (v186)
            goto LABEL_290;
          goto LABEL_317;
        case 8u:
        case 0xCu:
        case 0x18u:
LABEL_290:
          v196 = v154;
          goto LABEL_317;
        case 9u:
          if (v187)
          {
            v156 = 9;
            goto LABEL_316;
          }
          if (((0x7CFFCCD5uLL >> v196) & 1) == 0)
            goto LABEL_317;
          v156 = 8;
          goto LABEL_316;
        case 0xDu:
          if ((v192 & v191 & 1) != 0)
          {
            v156 = 13;
            goto LABEL_316;
          }
          if (((0x7FFFCFF7uLL >> v196) & 1) == 0)
            goto LABEL_317;
          v156 = 12;
          goto LABEL_316;
        case 0x12u:
          v156 = 18;
          goto LABEL_316;
        case 0x19u:
          if (v187)
          {
            v156 = 25;
          }
          else
          {
            if (((0x7CFFCFD5uLL >> v196) & 1) == 0)
              goto LABEL_317;
            v156 = 24;
          }
LABEL_316:
          v196 = v156;
          break;
        default:
          goto LABEL_317;
      }
    }
    goto LABEL_317;
  }
  if (!v65 || (*(_BYTE *)(v194 + 89) & 0x20) == 0)
    goto LABEL_176;
  v106 = v55;
  v196 = 0;
  v107 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AUTH_SEL_OVERRIDE"));
  if (v107)
  {
    if (CFNumberGetValue(v107, kCFNumberSInt32Type, &v196))
    {
      v108 = v196;
      if (v196 - 1 >= 2)
        goto LABEL_459;
      goto LABEL_232;
    }
    goto LABEL_401;
  }
  v122 = (const __CFArray *)CFDictionaryGetValue(v65, CFSTR("IE_KEY_WPA_AUTHSELS"));
  if (!v122)
    goto LABEL_501;
  v123 = v122;
  v124 = CFArrayGetCount(v122);
  if (v124 < 1)
  {
LABEL_231:
    v108 = v196;
    v68 = v194;
    v106 = v55;
    if (v196)
    {
LABEL_232:
      if (v108 == 2)
      {
        v118 = 0;
        v232 = 2;
        v121 = 1;
        goto LABEL_372;
      }
      if (v108 == 1)
        goto LABEL_339;
      goto LABEL_459;
    }
LABEL_401:
    v8 = 4294963396;
    goto LABEL_472;
  }
  v125 = v124;
  v126 = 0;
  while (1)
  {
    v127 = (const __CFNumber *)CFArrayGetValueAtIndex(v123, v126);
    if (v127)
    {
      if (CFNumberGetValue(v127, kCFNumberSInt32Type, &v197))
        break;
    }
LABEL_230:
    if (v125 == ++v126)
      goto LABEL_231;
  }
  if (v197 != 1)
  {
    if (v196 < v197)
      v196 = v197;
    goto LABEL_230;
  }
  v196 = 1;
  v68 = v194;
  v106 = v55;
LABEL_339:
  v118 = 0;
  v121 = 1;
  v232 = 1;
LABEL_372:
  if (!v106)
  {
    v170 = v232;
    if (v232 > 4095)
    {
      if (v232 >= 0x10000)
      {
        if (v232 != 0x20000 && v232 != 0x10000)
          goto LABEL_436;
      }
      else if (v232 != 4096 && v232 != 0x2000)
      {
        goto LABEL_436;
      }
    }
    else if ((v232 > 0x10 || ((1 << v232) & 0x10104) == 0) && v232 != 1024)
    {
      goto LABEL_436;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315394;
      *(_QWORD *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = v170;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Missing password for upper auth %d\n", (uint8_t *)buffer, 0x12u);
    }
    goto LABEL_401;
  }
  *(_QWORD *)&v167 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v167 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buffer = v167;
  *(_OWORD *)&buffer[16] = v167;
  v102 = Apple80211ParseWPAPassword(__s, buffer, v105, 0, v234, range);
  if ((_DWORD)v102)
    goto LABEL_181;
  if (v47 == 64)
    v168 = 1;
  else
    v168 = v121;
  if (v168 != 1)
  {
    if (v47 - 1 > 0x3F)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v204 = "_performAssociation";
        v205 = 1024;
        v206 = v47;
        v207 = 1024;
        v208 = 0;
        _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s: invalid length %d for passphrase, usePMK=%d", buf, 0x18u);
      }
    }
    else
    {
      DWORD2(v237) = 10;
      __memcpy_chk();
      v254 = *(_OWORD *)buffer;
      v255 = *(_OWORD *)&buffer[16];
      DWORD1(v237) = v47;
      v253 = 32;
    }
    goto LABEL_413;
  }
  v238 = *(_OWORD *)buffer;
  v239 = *(_OWORD *)&buffer[16];
  *(_QWORD *)((char *)&v237 + 4) = 0x600000020;
  if (v47 != 64)
    goto LABEL_413;
  v169 = v232;
  if (v232 <= 4095)
  {
    if (v232 == 8 || v232 == 16 || v232 == 1024)
      goto LABEL_408;
LABEL_413:
    memset(buffer, 0, sizeof(buffer));
    v170 = v232;
    if (v232 <= 4095)
    {
      if (v232 == 8 || v232 == 16 || v232 == 1024)
        goto LABEL_424;
    }
    else
    {
      if (v232 < 0x10000)
      {
        if (v232 != 4096 && v232 != 0x2000)
          goto LABEL_436;
LABEL_424:
        if (v65)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v204 = "_performAssociation";
            v205 = 1024;
            v206 = v118;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: WPA IE present, use WPA2-Personal (%u) only", buf, 0x12u);
          }
          if (!v118)
            goto LABEL_176;
          goto LABEL_435;
        }
        v195 = -1431655766;
        v172 = (const __CFNumber *)CFDictionaryGetValue(v67, CFSTR("IE_KEY_RSN_MCIPHER"));
        if (v172)
        {
          if (CFNumberGetValue(v172, kCFNumberSInt32Type, &v195))
          {
            if (v195 != 2)
            {
              v170 = v232;
              goto LABEL_436;
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              v204 = "_performAssociation";
              v205 = 1024;
              v206 = 2;
              v207 = 1024;
              v208 = v118;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: RSN has TKIP groupcipher (%u), use WPA2-Personal (%u) only", buf, 0x18u);
            }
            if (v118)
            {
LABEL_435:
              v170 = (unsigned __int16)v118;
              v256 = 0;
              v232 = (unsigned __int16)v118;
              goto LABEL_436;
            }
            v8 = 4294963393;
LABEL_464:
            v68 = v194;
            goto LABEL_472;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            v204 = "_performAssociation";
            v183 = MEMORY[0x24BDACB70];
            v184 = "%s: failed to get groupcipher";
            goto LABEL_500;
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v204 = "_performAssociation";
          v183 = MEMORY[0x24BDACB70];
          v184 = "%s: no groupcipher";
LABEL_500:
          _os_log_impl(&dword_20647D000, v183, OS_LOG_TYPE_DEFAULT, v184, buf, 0xCu);
        }
LABEL_501:
        v8 = 4294963396;
        goto LABEL_464;
      }
      if (v232 == 0x20000 || v232 == 0x10000)
        goto LABEL_424;
    }
LABEL_436:
    if (v170 > 2047)
    {
      if (v170 != 2048 && v170 != 0x8000 && v170 != 0x4000)
        goto LABEL_445;
    }
    else if (v170 != 1 && v170 != 4 && v170 != 128)
    {
      goto LABEL_445;
    }
    *(_QWORD *)((char *)&v237 + 4) = 0;
LABEL_445:
    v102 = _buildWPAIEForAssocation(a2, (uint64_t)&v248, &v247, (_BYTE *)(v68 + 88), v196, _MergedGlobals_0);
    if ((_DWORD)v102)
      goto LABEL_181;
    v173 = Apple80211RawSet();
    v237 = 0u;
    v238 = 0u;
    v239 = 0u;
    v240 = 0u;
    v241 = 0u;
    v242 = 0u;
    v243 = 0u;
    v244 = 0u;
    v245 = 0u;
    v246 = 0;
    *(_OWORD *)__s = 0u;
    v211 = 0u;
    v212 = 0u;
    v213 = 0u;
    v214 = 0u;
    v215 = 0u;
    v216 = 0u;
    v217 = 0u;
    v218 = 0u;
    v219 = 0u;
    v220 = 0u;
    v221 = 0u;
    v222 = 0u;
    v223 = 0u;
    v224 = 0u;
    v225 = 0u;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v174 = *__error();
      *(_DWORD *)buffer = 136315650;
      *(_QWORD *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = v173;
      *(_WORD *)&buffer[18] = 1024;
      *(_DWORD *)&buffer[20] = v174;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: bsdErr:0x%0x  error:0x%0x \n", (uint8_t *)buffer, 0x18u);
    }
    if (!v173)
    {
      if (!a4)
      {
        if (!*(_QWORD *)(v68 + 56) || (*(_BYTE *)(v68 + 21) & 1) == 0 || (*(_BYTE *)(v68 + 93) & 0x40) == 0)
        {
          v8 = _waitForJoinResult(v68);
          if ((_DWORD)v8)
            Apple80211SetWithIOCTL();
          goto LABEL_472;
        }
        CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x24BDBD5A0], 10.0, 0);
      }
      v8 = 0;
      goto LABEL_472;
    }
    goto LABEL_467;
  }
  if (v232 >= 0x10000)
  {
    if (v232 == 0x20000 || v232 == 0x10000)
      goto LABEL_408;
    goto LABEL_413;
  }
  if (v232 != 4096 && v232 != 0x2000)
    goto LABEL_413;
LABEL_408:
  v171 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
  if (v118 && v99)
  {
    if (v171)
    {
      *(_DWORD *)buf = 136315394;
      v204 = "_performAssociation";
      v205 = 1024;
      v206 = v118;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: 64-byte password, use WPA2-PSK (%u) only\n", buf, 0x12u);
    }
    v256 = 0;
    v232 = v118;
    goto LABEL_413;
  }
  if (v171)
  {
    *(_DWORD *)buf = 136315650;
    v204 = "_performAssociation";
    v205 = 1024;
    v206 = v169;
    v207 = 1024;
    v208 = v118;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Cannot connect to authtype (%u) with 64-byte password (WPA2 type %u)\n", buf, 0x18u);
  }
LABEL_459:
  v8 = 4294967196;
LABEL_472:
  v96 = 1;
LABEL_473:
  if ((_DWORD)v8)
  {
LABEL_474:
    started = convertToApple80211Error(v8);
    goto LABEL_488;
  }
LABEL_475:
  pthread_mutex_lock((pthread_mutex_t *)(v68 + 272));
  *(_QWORD *)(v68 + 336) = pthread_self();
  v175 = *(const void **)(v68 + 344);
  if (v175)
  {
    CFRelease(v175);
    *(_QWORD *)(v68 + 344) = 0;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315394;
      *(_QWORD *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 2048;
      *(_QWORD *)&buffer[14] = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Async assoc record reset to NULL[%p]\n", (uint8_t *)buffer, 0x16u);
    }
  }
  v176 = *(__CFRunLoopTimer **)(v68 + 1568);
  if (v176)
  {
    Current = CFAbsoluteTimeGetCurrent();
    CFRunLoopTimerSetNextFireDate(v176, Current + 315360000.0);
  }
  v178 = *(NSObject **)(v68 + 1576);
  if (v178)
  {
    v179 = dispatch_time(0, 315360000000000000);
    dispatch_source_set_timer(v178, v179, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  *(_DWORD *)(v68 + 1584) = 0;
  *(_OWORD *)(v68 + 356) = 0u;
  *(_OWORD *)(v68 + 372) = 0u;
  *(_OWORD *)(v68 + 388) = 0u;
  *(_OWORD *)(v68 + 404) = 0u;
  *(_OWORD *)(v68 + 420) = 0u;
  *(_OWORD *)(v68 + 436) = 0u;
  *(_OWORD *)(v68 + 452) = 0u;
  *(_OWORD *)(v68 + 468) = 0u;
  *(_OWORD *)(v68 + 484) = 0u;
  *(_OWORD *)(v68 + 500) = 0u;
  *(_OWORD *)(v68 + 516) = 0u;
  *(_OWORD *)(v68 + 532) = 0u;
  *(_OWORD *)(v68 + 548) = 0u;
  *(_OWORD *)(v68 + 564) = 0u;
  *(_OWORD *)(v68 + 580) = 0u;
  *(_OWORD *)(v68 + 596) = 0u;
  *(_BYTE *)(v68 + 620) = 0;
  *(_DWORD *)(v68 + 616) = 0;
  *(_DWORD *)(v68 + 352) = 0;
  if (a4)
  {
    v180 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, a2);
    *(_QWORD *)(v68 + 344) = v180;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315650;
      *(_QWORD *)&buffer[4] = "_performAssociation";
      *(_WORD *)&buffer[12] = 2112;
      *(_QWORD *)&buffer[14] = v180;
      *(_WORD *)&buffer[22] = 2048;
      *(_QWORD *)&buffer[24] = v180;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Async assoc record updated %@[%p]\n", (uint8_t *)buffer, 0x20u);
    }
    if ((v96 & 1) == 0)
    {
      *(_BYTE *)(v68 + 620) = 1;
      *(_DWORD *)(v68 + 352) = HIDWORD(v202);
      *(_DWORD *)(v68 + 616) = v202;
      memmove((void *)(v68 + 356), __s, 0x100uLL);
      v181 = v227;
      *(_OWORD *)(v68 + 624) = v226;
      *(_OWORD *)(v68 + 640) = v181;
      *(_QWORD *)(v68 + 656) = p_src;
      memmove((void *)(v68 + 664), &__src, 0x384uLL);
      *(_DWORD *)(v68 + 648) = 900;
      *(_QWORD *)(v68 + 656) = v68 + 664;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v68 + 272));
  started = 0;
LABEL_488:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buffer = 136315394;
    *(_QWORD *)&buffer[4] = "_performAssociation";
    *(_WORD *)&buffer[12] = 1024;
    *(_DWORD *)&buffer[14] = started;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: error: (%d)\n", (uint8_t *)buffer, 0x12u);
  }
  return started;
}

uint64_t Apple80211Associate(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  return _performAssociation(a1, a2, a3, 0);
}

uint64_t Apple80211Associate2(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  return _performAssociation(a1, a2, a3, 0);
}

uint64_t Apple80211GetAssociationExtendedStatus(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4294963396;
  result = Apple80211GetWithIOCTL();
  if (!(_DWORD)result)
    return _errorForAssociateResult(-1431655766);
  return result;
}

uint64_t _errorForAssociateResult(int a1)
{
  if ((a1 - 1) > 0x49)
    return 4294963394;
  else
    return dword_2064BB800[a1 - 1];
}

uint64_t Apple80211Disassociate()
{
  return Apple80211SetWithIOCTL();
}

uint64_t Apple80211ReturnToString(uint64_t a1, unsigned int a2, char *__dst, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  _DWORD v13[54];
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  uint64_t v17;

  v8 = 0;
  v17 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v9 = -3900;
  do
  {
    if (v9 == a2)
    {
      v11 = *(const char **)((char *)&_kApple80211ErrList + v8 + 8);
LABEL_9:
      strlcpy(__dst, v11, a4);
      return 0;
    }
    v9 = *(_DWORD *)((char *)&_kApple80211ErrList + v8 + 16);
    v8 += 16;
  }
  while (v8 != 1200);
  if (a1)
  {
    v10 = 1;
    if (a2 >> 26 != 56)
      return v10;
    __strlcpy_chk();
    LODWORD(v15) = 209;
    DWORD2(v15) = 216;
    v16 = v13;
    memset(&v13[2], 0, 208);
    v13[0] = 1;
    v13[1] = a2;
    if (Apple80211RawGet(a1, (uint64_t)&v14))
      return 3;
    v11 = (const char *)&v13[3];
    goto LABEL_9;
  }
  return 2;
}

uint64_t convertToApple80211Error(uint64_t a1)
{
  uint64_t result;

  result = 4294963349;
  if ((int)a1 <= -528342015)
  {
    if ((int)a1 > -528350143)
    {
      if ((_DWORD)a1 == -528350142)
        return 4294963346;
      if ((_DWORD)a1 == -528342015)
        return 4294963348;
      return a1;
    }
    if ((_DWORD)a1 == -536870211)
      return 4294963395;
    if ((_DWORD)a1 != -536870160)
      return a1;
  }
  else
  {
    if ((int)a1 > 15)
    {
      switch((_DWORD)a1)
      {
        case 0x10:
          return 4294963345;
        case 0x16:
          return 4294963347;
        case 0x25:
          return 4294963344;
      }
      return a1;
    }
    if ((_DWORD)a1 != -528342014)
    {
      if ((_DWORD)a1 == -528342009)
        return 4294963351;
      return a1;
    }
  }
  return result;
}

char *Apple80211ErrToStr(int __errnum)
{
  char *result;

  result = "Unknown error";
  if (__errnum <= 0xFFFFF0C4 && __errnum >= -3931 && *MEMORY[0x24BDB00D8] > __errnum)
  {
    if (__errnum)
    {
      if (__errnum < 1)
        return _apple80211ErrList[-3900 - __errnum];
      else
        return strerror(__errnum);
    }
    else
    {
      return "No Error";
    }
  }
  return result;
}

uint64_t Apple80211MaxLinkSpeed(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  const __int16 *v12;
  const __int16 *v13;
  int v14;
  _BYTE v15[180];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v17 = xmmword_2064BBAD0;
  result = 4294963396;
  if (a1 && a2)
  {
    __strlcpy_chk();
    LODWORD(v19) = 66;
    DWORD2(v19) = 16;
    v20 = &v17;
    if (Apple80211RawGet(a1, (uint64_t)&v18))
    {
      v16 = 0;
      memset(&v15[4], 0, 176);
      *(_DWORD *)v15 = 1;
      LODWORD(v19) = 32;
      DWORD2(v19) = 188;
      v20 = (__int128 *)v15;
      if (!Apple80211RawGet(a1, (uint64_t)&v18))
      {
        if (*(unsigned __int16 *)&v15[4] >= 0xFu)
          v5 = 15;
        else
          v5 = *(unsigned __int16 *)&v15[4];
        if ((_DWORD)v5)
        {
          v6 = 0;
          v7 = (unsigned int *)&v15[12];
          do
          {
            v9 = *v7;
            v7 += 3;
            v8 = v9;
            if (v9 > v6)
              v6 = v8;
            --v5;
          }
          while (v5);
        }
        else
        {
          v6 = 0;
        }
LABEL_28:
        result = 0;
        *a2 = v6;
        return result;
      }
    }
    else
    {
      *(_OWORD *)v15 = xmmword_2064BBAD0;
      LODWORD(v19) = 4;
      DWORD2(v19) = 16;
      v20 = (__int128 *)v15;
      if (!Apple80211RawGet(a1, (uint64_t)&v18))
      {
        v10 = 0;
        v6 = 0;
        if ((v15[12] & 4) != 0)
          v11 = 4;
        else
          v11 = 8;
        v12 = (const __int16 *)&MCS_RATE_TABLE_40MHZ;
        if ((v15[12] & 4) == 0)
          v12 = MCS_RATE_TABLE_20MHZ;
        do
        {
          if (((*((unsigned __int8 *)&v17 + (v10 >> 3) + 4) >> (v10 & 7)) & 1) != 0)
          {
            v13 = v12 + 1;
            if ((v11 & *(_BYTE *)(a1 + 90)) == 0)
              v13 = v12;
            v14 = *v13;
            if ((int)v6 <= v14)
              v6 = v14;
          }
          ++v10;
          v12 += 2;
        }
        while (v10 != 77);
        goto LABEL_28;
      }
    }
    return *__error();
  }
  return result;
}

uint64_t Apple80211CopyLeakyAPStatus(const __CFData *a1, CFNumberRef *a2)
{
  __int128 v4;
  uint64_t v5;
  UInt8 valuePtr;
  UInt8 buffer[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  CFRange v14;

  v13 = *MEMORY[0x24BDAC8D0];
  valuePtr = 0;
  if (!a1 || CFDataGetLength(a1) != 72)
  {
    v5 = 4294963396;
    if (!a2)
      return v5;
    goto LABEL_4;
  }
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v4;
  v11 = v4;
  *(_OWORD *)buffer = v4;
  v9 = v4;
  v14.length = CFDataGetLength(a1);
  v14.location = 0;
  CFDataGetBytes(a1, v14, buffer);
  v5 = 0;
  valuePtr = buffer[4];
  if (a2)
LABEL_4:
    *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, &valuePtr);
  return v5;
}

uint64_t get_apple80211_log()
{
  if (qword_253E9DC00 != -1)
    dispatch_once(&qword_253E9DC00, &__block_literal_global);
  return qword_253E9DBF8;
}

os_log_t __get_apple80211_log_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.lib80211", "signpost");
  qword_253E9DBF8 = (uint64_t)result;
  return result;
}

uint64_t Apple80211RangeAsync(uint64_t a1, CFArrayRef theArray, double a3)
{
  uint64_t result;
  unsigned int v7;
  char v8[1800];
  __int128 v9;
  __int128 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0)
    return 4294963396;
  result = 4294963396;
  if (!theArray || !*(_BYTE *)(a1 + 4))
    return result;
  if (!CFArrayGetCount(theArray))
    return 4294963396;
  bzero(v8, 0x708uLL);
  result = _getRangingPeerRequest(theArray, v8);
  if (!(_DWORD)result)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
    LODWORD(v10) = 242;
    __strlcpy_chk();
    v7 = (int)a3;
    v11 = v8;
    if (!(int)a3)
      v7 = 5;
    *(_QWORD *)((char *)&v10 + 4) = v7 | 0x70800000000;
    if (Apple80211RawSet())
    {
      return *__error();
    }
    else
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1664));
      if (!*(_BYTE *)(a1 + 1728))
        *(_BYTE *)(a1 + 1728) = 1;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1664));
      return 0;
    }
  }
  return result;
}

uint64_t _getRangingPeerRequest(const __CFArray *a1, char *a2)
{
  CFIndex v4;
  const void *v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  CFTypeID v8;
  const __CFDictionary *Value;
  const __CFString *v10;
  const __CFData *v11;
  const __CFData *v12;
  unsigned __int16 Length;
  __int16 v14;
  CFTypeID v15;
  CFTypeID v16;
  char *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  char *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const void *v27;
  CFTypeID v28;
  ether_addr *v29;
  char *v30;
  __int16 v31;
  CFTypeID v32;
  unsigned __int16 v33;
  size_t v34;
  unsigned __int16 v35;
  char buffer[24];
  uint64_t v38;
  CFRange v39;
  CFRange v40;
  CFRange v41;

  v38 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294963396;
  bzero(a2, 0x708uLL);
  *(_QWORD *)a2 = 1;
  if (a1 && CFArrayGetCount(a1) >= 1)
  {
    v4 = 0;
    v5 = (const void *)*MEMORY[0x24BDBD270];
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      if (ValueAtIndex)
      {
        v7 = ValueAtIndex;
        v8 = CFGetTypeID(ValueAtIndex);
        if (v8 == CFDictionaryGetTypeID())
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("STATION_MAC"));
          v10 = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("RANGING_TOKEN_ID"));
          v11 = (const __CFData *)CFDictionaryGetValue(v7, CFSTR("RANGING_PMK"));
          if (v11)
          {
            v12 = v11;
            if (CFDataGetLength(v11) > 64)
            {
              v14 = 64;
              Length = 64;
            }
            else
            {
              Length = CFDataGetLength(v12);
              v14 = Length;
            }
            v17 = &a2[448 * *((unsigned int *)a2 + 1)];
            *((_WORD *)v17 + 56) = v14;
            v39.length = Length;
            v39.location = 0;
            CFDataGetBytes(v12, v39, (UInt8 *)v17 + 48);
          }
          v18 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_NUM_MEASUREMENTS"));
          if (v18)
            CFNumberGetValue(v18, kCFNumberSInt8Type, &a2[448 * *((unsigned int *)a2 + 1) + 114]);
          v19 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_CORE_MASK"));
          if (v19)
            CFNumberGetValue(v19, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 128]);
          v20 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_MODE"));
          if (v20)
            CFNumberGetValue(v20, kCFNumberSInt8Type, &a2[448 * *((unsigned int *)a2 + 1) + 132]);
          v21 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_PEER_FLAGS"));
          v22 = &a2[448 * *((unsigned int *)a2 + 1) + 44];
          if (v21)
            CFNumberGetValue(v21, kCFNumberSInt16Type, v22);
          else
            *(_WORD *)v22 = 0;
          v23 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_TIMEOUT"));
          if (v23)
            CFNumberGetValue(v23, kCFNumberSInt32Type, &a2[448 * *((unsigned int *)a2 + 1) + 136]);
          v24 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_INTERVAL"));
          if (v24)
            CFNumberGetValue(v24, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 140]);
          v25 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_EGRESS"));
          if (v25)
            CFNumberGetValue(v25, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 144]);
          v26 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("RANGING_INGRESS"));
          if (v26)
            CFNumberGetValue(v26, kCFNumberSInt16Type, &a2[448 * *((unsigned int *)a2 + 1) + 142]);
          v27 = CFDictionaryGetValue(v7, CFSTR("RANGING_RETURN_PARTIAL"));
          if (v27 && CFEqual(v27, v5))
            a2[448 * *((unsigned int *)a2 + 1) + 448] = 1;
          v7 = Value;
          if (!Value)
            goto LABEL_40;
        }
        else
        {
          v15 = CFGetTypeID(v7);
          if (v15 != CFStringGetTypeID())
          {
            v16 = CFGetTypeID(v7);
            if (v16 != CFDataGetTypeID())
              goto LABEL_50;
          }
          v10 = 0;
        }
        v28 = CFGetTypeID(v7);
        if (v28 != CFStringGetTypeID())
        {
          v40.location = 0;
          v40.length = 6;
          CFDataGetBytes(v7, v40, (UInt8 *)&a2[448 * *((unsigned int *)a2 + 1) + 34]);
LABEL_40:
          if (v10)
          {
            v32 = CFGetTypeID(v10);
            if (v32 == CFStringGetTypeID())
            {
              memset(buffer, 170, 20);
              CFStringGetCString(v10, buffer, 20, 0x8000100u);
              v33 = strlen(buffer);
              if (v33 >= 6uLL)
                v34 = 6;
              else
                v34 = v33;
              memcpy(&a2[448 * *((unsigned int *)a2 + 1) + 28], buffer, v34);
            }
            else
            {
              if (CFDataGetLength((CFDataRef)v10) > 6)
                v35 = 6;
              else
                v35 = CFDataGetLength((CFDataRef)v10);
              v41.length = v35;
              v41.location = 0;
              CFDataGetBytes((CFDataRef)v10, v41, (UInt8 *)&a2[448 * *((unsigned int *)a2 + 1) + 28]);
            }
          }
LABEL_50:
          ++*((_DWORD *)a2 + 1);
          goto LABEL_51;
        }
        memset(buffer, 170, 20);
        CFStringGetCString((CFStringRef)v7, buffer, 20, 0x8000100u);
        v29 = ether_aton(buffer);
        if (v29)
        {
          v30 = &a2[448 * *((unsigned int *)a2 + 1)];
          v31 = *(_WORD *)&v29->octet[4];
          *(_DWORD *)(v30 + 34) = *(_DWORD *)v29->octet;
          *((_WORD *)v30 + 19) = v31;
          goto LABEL_40;
        }
      }
LABEL_51:
      ++v4;
    }
    while (v4 < CFArrayGetCount(a1));
  }
  return 0;
}

uint64_t Apple80211RangingStopAsync(uint64_t a1, const __CFArray *a2)
{
  uint64_t result;
  char v4[1800];
  __int128 v5;
  __int128 v6;
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0 || !*(_BYTE *)(a1 + 4))
    return 4294963396;
  bzero(v4, 0x708uLL);
  result = _getRangingPeerRequest(a2, v4);
  if (!(_DWORD)result)
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    LODWORD(v6) = 242;
    __strlcpy_chk();
    v7 = v4;
    *(_QWORD *)((char *)&v6 + 4) = 0x70800000000;
    result = Apple80211RawSet();
    if ((_DWORD)result)
      return *__error();
  }
  return result;
}

uint64_t Apple80211GetRangingPhyErrorString(int a1, char *__str, size_t __size)
{
  uint64_t result;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;

  result = 4294963396;
  if (__str && __size)
  {
    if (!a1)
    {
      snprintf(__str, __size, "no error");
      return 0;
    }
    snprintf(__str, __size, "(");
    if ((a1 & 1) != 0)
    {
      v10 = strlen(__str);
      snprintf(&__str[v10], __size - v10, "correlation/lo,");
      a1 &= ~1u;
      if ((a1 & 2) == 0)
      {
LABEL_6:
        if ((a1 & 4) == 0)
          goto LABEL_7;
        goto LABEL_27;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_6;
    }
    v11 = strlen(__str);
    snprintf(&__str[v11], __size - v11, "correlation/rx,");
    a1 &= ~2u;
    if ((a1 & 4) == 0)
    {
LABEL_7:
      if ((a1 & 8) == 0)
        goto LABEL_8;
      goto LABEL_28;
    }
LABEL_27:
    v12 = strlen(__str);
    snprintf(&__str[v12], __size - v12, "peak_power/lo,");
    a1 &= ~4u;
    if ((a1 & 8) == 0)
    {
LABEL_8:
      if ((a1 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
LABEL_28:
    v13 = strlen(__str);
    snprintf(&__str[v13], __size - v13, "peak_power/rx,");
    a1 &= ~8u;
    if ((a1 & 0x10) == 0)
    {
LABEL_9:
      if ((a1 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_30;
    }
LABEL_29:
    v14 = strlen(__str);
    snprintf(&__str[v14], __size - v14, "bit_error,");
    a1 &= ~0x10u;
    if ((a1 & 0x20) == 0)
    {
LABEL_10:
      if ((a1 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_31;
    }
LABEL_30:
    v15 = strlen(__str);
    snprintf(&__str[v15], __size - v15, "snr,");
    a1 &= ~0x20u;
    if ((a1 & 0x40) == 0)
    {
LABEL_11:
      if ((a1 & 0x80) == 0)
        goto LABEL_12;
      goto LABEL_32;
    }
LABEL_31:
    v16 = strlen(__str);
    snprintf(&__str[v16], __size - v16, "start_win,");
    a1 &= ~0x40u;
    if ((a1 & 0x80) == 0)
    {
LABEL_12:
      if ((a1 & 0x8000) == 0)
        goto LABEL_13;
      goto LABEL_33;
    }
LABEL_32:
    v17 = strlen(__str);
    snprintf(&__str[v17], __size - v17, "end_win,");
    a1 &= ~0x80u;
    if ((a1 & 0x8000) == 0)
    {
LABEL_13:
      if ((a1 & 0x100) == 0)
        goto LABEL_14;
      goto LABEL_34;
    }
LABEL_33:
    v18 = strlen(__str);
    snprintf(&__str[v18], __size - v18, "group_delay,");
    a1 &= ~0x8000u;
    if ((a1 & 0x100) == 0)
    {
LABEL_14:
      if ((a1 & 0x200) == 0)
        goto LABEL_15;
      goto LABEL_35;
    }
LABEL_34:
    v19 = strlen(__str);
    snprintf(&__str[v19], __size - v19, "timing,");
    a1 &= ~0x100u;
    if ((a1 & 0x200) == 0)
    {
LABEL_15:
      if ((a1 & 0x400) == 0)
        goto LABEL_16;
      goto LABEL_36;
    }
LABEL_35:
    v20 = strlen(__str);
    snprintf(&__str[v20], __size - v20, "EVM,");
    a1 &= ~0x200u;
    if ((a1 & 0x400) == 0)
    {
LABEL_16:
      if ((a1 & 0x800) == 0)
        goto LABEL_17;
      goto LABEL_37;
    }
LABEL_36:
    v21 = strlen(__str);
    snprintf(&__str[v21], __size - v21, "LTE,");
    a1 &= ~0x400u;
    if ((a1 & 0x800) == 0)
    {
LABEL_17:
      if (!a1)
      {
LABEL_19:
        v8 = strlen(__str) - 1;
        if (__str[v8] == 44)
          __str[v8] = 0;
        v9 = strlen(__str);
        snprintf(&__str[v9], __size - v9, ")");
        return 0;
      }
LABEL_18:
      v7 = strlen(__str);
      snprintf(&__str[v7], __size - v7, "0x%x", a1);
      goto LABEL_19;
    }
LABEL_37:
    v22 = strlen(__str);
    snprintf(&__str[v22], __size - v22, "throttling,");
    a1 &= ~0x800u;
    if (!a1)
      goto LABEL_19;
    goto LABEL_18;
  }
  return result;
}

uint64_t Apple80211CopyRangingCapabilities(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef *v2;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  unint64_t v11;
  char *v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  CFMutableDictionaryRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFMutableDictionaryRef theDict;
  CFMutableDictionaryRef *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = a2;
  v30 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0)
  {
    v4 = 0;
    v5 = 4294963396;
    if (!a2)
      return v5;
    goto LABEL_18;
  }
  v4 = 0;
  v5 = 4294963396;
  if (a2 && *(_BYTE *)(a1 + 4))
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0u;
    v28 = 0u;
    LODWORD(v28) = 266;
    __strlcpy_chk();
    DWORD2(v28) = 24;
    v29 = &v24;
    if (Apple80211RawGet(a1, (uint64_t)&v27))
    {
      v4 = 0;
      v5 = *__error();
      goto LABEL_18;
    }
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
    {
      v4 = 0;
      v5 = 4294963395;
      goto LABEL_18;
    }
    v8 = Mutable;
    v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
    if (v9)
    {
      v10 = v9;
      theDict = v8;
      v23 = v2;
      if ((_WORD)v25)
      {
        v11 = 0;
        v12 = (char *)&v26 + 4;
        v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
        v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
        while (1)
        {
          v15 = CFDictionaryCreateMutable(v6, 0, v13, v14);
          if (!v15)
            break;
          v8 = v15;
          v16 = CFNumberCreate(v6, kCFNumberSInt32Type, v12 - 4);
          if (!v16
            || (v17 = v16,
                CFDictionarySetValue(v8, CFSTR("RANGING_CHANNEL"), v16),
                CFRelease(v17),
                (v18 = CFNumberCreate(v6, kCFNumberSInt32Type, v12)) == 0))
          {
            CFRelease(theDict);
            CFRelease(v10);
            v4 = 0;
            v5 = 4294963395;
            goto LABEL_22;
          }
          v19 = v18;
          CFDictionarySetValue(v8, CFSTR("RANGING_CHANNEL_FLAGS"), v18);
          CFRelease(v19);
          CFArrayAppendValue(v10, v8);
          CFRelease(v8);
          ++v11;
          v12 += 12;
          if (v11 >= (unsigned __int16)v25)
            goto LABEL_14;
        }
        CFRelease(theDict);
        v4 = 0;
        v5 = 4294963395;
        v8 = v10;
LABEL_22:
        v2 = v23;
        goto LABEL_16;
      }
LABEL_14:
      v4 = theDict;
      CFDictionarySetValue(theDict, CFSTR("RANGING_SUPP_CHANNELS"), v10);
      CFRelease(v10);
      v20 = CFNumberCreate(v6, kCFNumberSInt32Type, (char *)&v24 + 4);
      v2 = v23;
      if (v20)
      {
        v8 = v20;
        CFDictionarySetValue(theDict, CFSTR("RANGING_FEATURES"), v20);
        v5 = 0;
LABEL_16:
        CFRelease(v8);
        goto LABEL_17;
      }
      v5 = 4294963395;
      v8 = theDict;
    }
    else
    {
      v5 = 4294963395;
    }
    v4 = 0;
    goto LABEL_16;
  }
LABEL_17:
  if (v2)
LABEL_18:
    *v2 = v4;
  return v5;
}

uint64_t Apple80211CopyAwdlPreferredChannels()
{
  return 4294963393;
}

uint64_t Apple80211GasRequest(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  uint64_t Count;
  uint64_t v10;
  CFIndex v11;
  unsigned __int16 v12;
  unsigned __int16 *v13;
  __int128 v14;
  const __CFNumber *ValueAtIndex;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char v19;
  uint64_t v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex v23;
  __int16 *v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const __CFString *v27;
  ether_addr *v28;
  int v29;
  const __CFNumber *v30;
  int valuePtr;
  unsigned __int16 v32;
  int v33;
  _BYTE v34[10];
  _WORD v35[262];
  __int16 v36;
  char buffer[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  CFRange v53;

  v52 = *MEMORY[0x24BDAC8D0];
  valuePtr = -1;
  if (!a1 || (*(_DWORD *)a1 & 0x80000000) != 0 || !*(_BYTE *)(a1 + 4))
    return 4294963396;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("GAS_PROTOCOL"));
  if (!Value)
    return 4294963393;
  v33 = -1431655766;
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
    return 4294963396;
  if (valuePtr)
    return 4294963393;
  if (!theDict)
    return 4294963396;
  bzero(v34, 0x510uLL);
  v6 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("GAS_QUERY"));
  v7 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("GAS_NETWORKS"));
  if (!v6)
    return 4294963396;
  v8 = v7;
  Count = CFArrayGetCount(v6);
  if (!Count)
    return 4294963396;
  v10 = Count;
  if (Count > 255)
    return 4294963396;
  v53.location = 0;
  v53.length = Count;
  CFArraySortValues(v6, v53, (CFComparatorFunction)_compareQueries, 0);
  *(_DWORD *)&v34[6] = 256;
  if (v10 <= 0)
  {
    LOWORD(v20) = 8;
LABEL_25:
    *(_WORD *)&v34[4] = v20;
    goto LABEL_26;
  }
  v11 = 0;
  v12 = 0;
  v32 = -21846;
  v13 = v35;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buffer = v14;
  *(_OWORD *)&buffer[16] = v14;
  v38 = v14;
  v39 = v14;
  v40 = v14;
  v41 = v14;
  v42 = v14;
  v43 = v14;
  v44 = v14;
  v45 = v14;
  v46 = v14;
  v47 = v14;
  v48 = v14;
  v49 = v14;
  v50 = v14;
  v51 = v14;
  do
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v11);
    if (ValueAtIndex && CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &v32))
    {
      if (v32 > 0xFFu)
      {
        *v13++ = v32;
        *(_WORD *)&v34[8] += 2;
      }
      else
      {
        buffer[v12++] = v32;
      }
    }
    ++v11;
  }
  while (v10 != v11);
  *(_WORD *)&v34[4] = *(_WORD *)&v34[8] + 8;
  if (v12)
  {
    *v13 = -8739;
    v13[1] = v12 + 6;
    v13[2] = 28496;
    *((_BYTE *)v13 + 6) = -102;
    *(unsigned __int16 *)((char *)v13 + 7) = 273;
    v16 = v12;
    v17 = v13 + 5;
    *((_BYTE *)v13 + 9) = 0;
    v18 = buffer;
    do
    {
      v19 = *v18++;
      *v17++ = v19;
      --v16;
    }
    while (v16);
    v20 = (unsigned __int16)(v12 + *(_WORD *)&v34[4] + 10);
    goto LABEL_25;
  }
LABEL_26:
  memset(buffer, 170, 18);
  v21 = CFArrayGetCount(v8);
  if (!v21)
    return 4294963396;
  v22 = v21;
  if (v21 > 63)
    return 4294963396;
  if (v21 >= 1)
  {
    v23 = 0;
    v32 = -21846;
    v24 = &v36;
    do
    {
      v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v23);
      if (v25)
      {
        v26 = v25;
        v27 = (const __CFString *)CFDictionaryGetValue(v25, CFSTR("BSSID"));
        if (!v27)
          return 4294963396;
        if (!CFStringGetCString(v27, buffer, 18, 0x8000100u))
          return 4294963396;
        v28 = ether_aton(buffer);
        if (!v28)
          return 4294963396;
        v29 = *(_DWORD *)v28->octet;
        v24[2] = *(_WORD *)&v28->octet[4];
        *(_DWORD *)v24 = v29;
        v30 = (const __CFNumber *)CFDictionaryGetValue(v26, CFSTR("CHANNEL"));
        if (!v30 || !CFNumberGetValue(v30, kCFNumberSInt16Type, &v32))
          return 4294963396;
        *(v24 - 1) = v32;
      }
      ++v23;
      v24 += 6;
    }
    while (v22 != v23);
  }
  v35[257] = v22;
  memset(buffer, 0, sizeof(buffer));
  *(_QWORD *)&v38 = 0;
  *(_DWORD *)&buffer[16] = 197;
  __strlcpy_chk();
  *(_DWORD *)&buffer[24] = 1300;
  *(_QWORD *)&v38 = &v33;
  if (Apple80211RawSet())
    return *__error();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1592));
  if (!*(_BYTE *)(a1 + 1656))
    *(_BYTE *)(a1 + 1656) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1592));
  return 0;
}

uint64_t Apple80211MonitorEventsWithBlock(_QWORD *a1, NSObject *a2, const void *a3)
{
  int v6;
  unsigned int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[5];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = socket(32, 3, 1);
  if (v6 < 0)
    return *__error();
  v7 = v6;
  v20 = 1;
  v19 = 0x600000001;
  if (ioctl(v6, 0x800C6502uLL, &v19))
  {
    v13 = *__error();
    v12 = -1;
  }
  else
  {
    v8 = dispatch_source_create(MEMORY[0x24BDACA00], v7, 0, a2);
    if (v8)
    {
      v9 = v8;
      v10 = MEMORY[0x24BDAC760];
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 0x40000000;
      handler[2] = __Apple80211MonitorEventsWithBlock_block_invoke;
      handler[3] = &__block_descriptor_tmp_56;
      handler[4] = a1;
      v18 = v7;
      dispatch_source_set_event_handler(v8, handler);
      v11 = _Block_copy(a3);
      v15[0] = v10;
      v15[1] = 0x40000000;
      v15[2] = __Apple80211MonitorEventsWithBlock_block_invoke_2;
      v15[3] = &unk_24BF114E0;
      v16 = v7;
      v15[4] = v11;
      dispatch_source_set_cancel_handler(v9, v15);
      a1[9] = _eventBlockCallback;
      a1[10] = v11;
      a1[8] = v9;
      dispatch_activate(v9);
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 4294963395;
    }
  }
  if (v13 | v12)
    close(v7);
  return v13;
}

uint64_t Apple80211SetWithIOCTL()
{
  uint64_t v0;
  unsigned int v1;
  const __CFBoolean *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  const __CFBoolean *v8;
  unsigned int v9;
  uint64_t LQMConfigFromDict;
  uint64_t SensingRequest;
  char *v12;
  int v13;
  int v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex v19;
  unint64_t v20;
  CFIndex v21;
  unint64_t v22;
  UInt8 *v23;
  const __CFDictionary *v24;
  const __CFString *v25;
  ether_addr *v26;
  int v27;
  const __CFData *v28;
  const __CFData *v29;
  int v30;
  int v31;
  CFIndex v32;
  CFIndex v33;
  char *v34;
  void *v35;
  const __CFString *v36;
  const __CFString *v37;
  ether_addr *v38;
  int v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  int v50;
  const __CFString *v51;
  const __CFString *v52;
  int v53;
  int v54;
  void *v55;
  void *v56;
  void *v57;
  int v58;
  void *v59;
  void *v60;
  CFNumberType v61;
  void *v62;
  void *v63;
  CFNumberType v64;
  ether_addr *v65;
  CFIndex v66;
  CFIndex v67;
  char *v68;
  int v69;
  const __CFNumber *v70;
  uint64_t v71;
  const __CFDictionary *v72;
  int v73;
  void *v74;
  const __CFString *v75;
  ether_addr *v76;
  int v77;
  char *v78;
  CFIndex v79;
  CFIndex v80;
  _OWORD *v81;
  const __CFDictionary *v82;
  const __CFDictionary *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  int v88;
  const __CFNumber *v89;
  const __CFBoolean *BoolRef;
  const __CFBoolean *v91;
  const __CFBoolean *v92;
  const __CFBoolean *v93;
  void *v94;
  void *v95;
  void *v96;
  CFIndex v97;
  CFIndex v98;
  CFIndex v99;
  void *v100;
  _DWORD *v101;
  _DWORD *v102;
  const __CFArray *v103;
  const __CFArray *v104;
  CFIndex v105;
  CFIndex v106;
  CFIndex v107;
  void *v108;
  const __CFArray *v109;
  const __CFArray *v110;
  CFIndex v111;
  void *v112;
  void *v113;
  const __CFBoolean *v114;
  char v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  const __CFBoolean *v120;
  void *v121;
  const __CFData *v122;
  const __CFData *v123;
  void *v124;
  int v125;
  CFStringRef v126;
  CFStringRef v127;
  const __CFString *v128;
  const __CFString *v129;
  CFTypeID v130;
  ether_addr *v131;
  int v132;
  void *v133;
  CFTypeID v134;
  void *v135;
  CFTypeID v136;
  void *v137;
  CFTypeID v138;
  void *v139;
  CFTypeID v140;
  void *v141;
  CFTypeID v142;
  void *v143;
  CFTypeID v144;
  void *v145;
  CFTypeID v146;
  void *v147;
  CFTypeID v148;
  void *v149;
  int v150;
  void *v151;
  int v152;
  void *v153;
  int v154;
  const __CFBoolean *v155;
  int v156;
  int v157;
  void *v158;
  CFTypeID v159;
  void *v160;
  CFTypeID v161;
  const __CFString *v162;
  const __CFString *v163;
  CFIndex v164;
  CFIndex v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  const __CFArray *v170;
  const __CFArray *v171;
  const __CFString *v172;
  const __CFString *v173;
  CFTypeID v174;
  void *v175;
  void *v176;
  _BOOL4 v177;
  CFIndex v178;
  char *v179;
  void *v180;
  const __CFString *v181;
  const __CFString *v182;
  void *v183;
  CFTypeID v184;
  const __CFString *v185;
  pthread_mutex_t *v186;
  void *v187;
  CFTypeID v188;
  const __CFBoolean *v189;
  void *v190;
  int v191;
  const __CFString *v192;
  const __CFBoolean *v193;
  const __CFBoolean *v194;
  const __CFBoolean *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  int v203;
  void *v204;
  void *v205;
  const __CFData *v206;
  const __CFData *v207;
  const __CFString *v208;
  const __CFString *v209;
  const __CFString *v210;
  const __CFString *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  char *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  const __CFArray *v223;
  const __CFArray *v224;
  unsigned int Count;
  int v226;
  unint64_t v227;
  char *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  int v235;
  const __CFArray *v236;
  const __CFArray *v237;
  CFIndex v238;
  char v239;
  void *v240;
  char v241;
  int v242;
  const __CFAllocator *v243;
  CFStringRef v244;
  void *v245;
  CFStringRef v246;
  void *v247;
  CFStringRef v248;
  void *v249;
  CFStringRef v250;
  void *v251;
  CFStringRef v252;
  void *v253;
  void *v254;
  const __CFBoolean *v255;
  const __CFBoolean *v256;
  const __CFBoolean *v257;
  void *v258;
  const __CFArray *v259;
  const __CFArray *v260;
  int v261;
  int v262;
  CFIndex v263;
  char *v264;
  const __CFDictionary *v265;
  const __CFDictionary *v266;
  void *v267;
  void *v268;
  void *v269;
  unsigned int v270;
  int v271;
  CFIndex v272;
  uint64_t v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  _OWORD *v327;
  CFIndex v328;
  void *v329;
  int v330;
  const __CFBoolean *v331;
  const char *CStringPtr;
  unint64_t v333;
  UInt8 *v334;
  const __CFData *v335;
  NSObject *v336;
  const char *v337;
  int v338;
  CFTypeID v339;
  CFTypeID TypeID;
  _BOOL4 v341;
  const UInt8 *v342;
  __int16 v343;
  const __CFNumber *v344;
  const __CFNumber *v345;
  const __CFNumber *v346;
  const __CFNumber *v347;
  int v348;
  unint64_t v349;
  UInt8 *v350;
  const __CFData *ValueAtIndex;
  CFRange v352;
  char *v353;
  uint32_t v354;
  int v355;
  CFIndex v356;
  CFIndex v357;
  _DWORD *v358;
  const __CFData *v359;
  unsigned int v360;
  const UInt8 *BytePtr;
  const __CFBoolean *v362;
  const __CFBoolean *v363;
  int v364;
  __uint64_t v365;
  const char *v366;
  const char *v367;
  int Length;
  int v370;
  int v371;
  int v372;
  int v373;
  void *value;
  char buffer[48];
  _OWORD valuePtr[515];
  __int128 v377;
  __int128 v378;
  char *v379;
  uint64_t v380;
  CFRange v381;
  CFRange v382;
  CFRange v383;
  CFRange v384;
  CFRange v385;
  CFRange v386;
  CFRange v387;

  v0 = MEMORY[0x24BDAC7A8]();
  v5 = v4;
  v6 = v0;
  v380 = *MEMORY[0x24BDAC8D0];
  v379 = 0;
  v378 = 0u;
  v377 = 0u;
  value = (void *)0xAAAAAAAAAAAAAAAALL;
  if (!v0 || (*(_DWORD *)v0 & 0x80000000) != 0 || !*(_BYTE *)(v0 + 4))
  {
LABEL_772:
    LQMConfigFromDict = 4294963396;
    goto LABEL_848;
  }
  v7 = v3;
  v8 = v2;
  v9 = v1;
  v379 = 0;
  v378 = 0uLL;
  v377 = 0uLL;
  __strlcpy_chk();
  LODWORD(v378) = v5;
  LQMConfigFromDict = 4294963393;
  if (v5 > 336)
  {
    switch(v5)
    {
      case 358:
      case 486:
      case 511:
      case 512:
      case 513:
      case 519:
      case 520:
        if (!v8)
          goto LABEL_772;
        LOBYTE(valuePtr[0]) = CFBooleanGetValue(v8);
        goto LABEL_89;
      case 359:
      case 360:
      case 361:
      case 362:
      case 364:
      case 366:
      case 367:
      case 369:
      case 370:
      case 371:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 389:
      case 390:
      case 391:
      case 393:
      case 395:
      case 396:
      case 397:
      case 398:
      case 400:
      case 401:
      case 402:
      case 406:
      case 410:
      case 411:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 421:
      case 423:
      case 424:
      case 425:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 449:
      case 450:
      case 451:
      case 452:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 502:
      case 504:
      case 505:
      case 506:
      case 515:
      case 517:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 533:
      case 534:
      case 535:
      case 549:
      case 550:
        goto LABEL_848;
      case 363:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        *(_DWORD *)&buffer[12] = 0;
        *(_QWORD *)&buffer[4] = 0;
        *(_DWORD *)buffer = 1;
        v166 = (void *)CFDictionaryGetValue(v8, CFSTR("USB_HOST_NOTIFICATION_SEQUENCE_NUM"));
        value = v166;
        if (!v166)
          goto LABEL_847;
        if (!CFNumberGetValue((CFNumberRef)v166, kCFNumberSInt32Type, &buffer[4]))
          goto LABEL_814;
        v167 = (void *)CFDictionaryGetValue(v8, CFSTR("USB_HOST_NOTIFICATION_USB_CHANGE"));
        value = v167;
        if (!v167)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v167, kCFNumberSInt32Type, &buffer[8]))
          goto LABEL_814;
        v168 = (void *)CFDictionaryGetValue(v8, CFSTR("USB_HOST_NOTIFICATION_USB_PRESENCE"));
        value = v168;
        if (!v168 || !CFNumberGetValue((CFNumberRef)v168, kCFNumberSInt32Type, &buffer[12]))
          goto LABEL_814;
        DWORD2(v378) = 16;
        v379 = buffer;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 14164;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d APPLE80211_IOC_USB_HOST_NOTIFICATION \n", (uint8_t *)valuePtr, 0x12u);
        }
        goto LABEL_809;
      case 365:
      case 394:
      case 407:
      case 422:
      case 459:
        goto LABEL_10;
      case 368:
        LODWORD(valuePtr[0]) = *(_DWORD *)v8;
        WORD2(valuePtr[0]) = *((_WORD *)v8 + 2);
        v14 = 6;
        goto LABEL_467;
      case 372:
        if (!v8)
          goto LABEL_772;
        *(_DWORD *)buffer = 0;
        memset(valuePtr, 0, 43);
        v169 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBssidBlacklistMode"));
        value = v169;
        if (!v169)
          goto LABEL_814;
        CFNumberGetValue((CFNumberRef)v169, kCFNumberSInt32Type, buffer);
        v170 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBssidBlacklistBssids"));
        if (!v170)
          goto LABEL_800;
        v171 = v170;
        if (CFArrayGetCount(v170) >= 7uLL)
        {
          LOBYTE(valuePtr[0]) = 7;
        }
        else
        {
          LOBYTE(valuePtr[0]) = CFArrayGetCount(v171);
          if (!LOBYTE(valuePtr[0]))
            goto LABEL_800;
        }
        v349 = 0;
        v350 = (UInt8 *)valuePtr + 1;
        do
        {
          ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v171, v349);
          v387.length = CFDataGetLength(ValueAtIndex);
          v387.location = 0;
          CFDataGetBytes(ValueAtIndex, v387, v350);
          ++v349;
          v350 += 6;
        }
        while (v349 < LOBYTE(valuePtr[0]));
LABEL_800:
        v69 = 43;
        goto LABEL_801;
      case 380:
        *(_DWORD *)buffer = 1;
        *(_DWORD *)&buffer[4] = v9;
        *(_QWORD *)&buffer[8] = 0xAAAA000000000000;
        if (v9)
        {
          v172 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("RANGING_TOKEN_ID"));
          if (v172)
          {
            v173 = v172;
            v174 = CFGetTypeID(v172);
            if (v174 == CFStringGetTypeID())
            {
              memset(valuePtr, 170, 20);
              CFStringGetCString(v173, (char *)valuePtr, 20, 0x8000100u);
              strlen((const char *)valuePtr);
              __memcpy_chk();
            }
            else
            {
              if (CFDataGetLength((CFDataRef)v173) > 6)
                v352.length = 6;
              else
                v352.length = (unsigned __int16)CFDataGetLength((CFDataRef)v173);
              v352.location = 0;
              CFDataGetBytes((CFDataRef)v173, v352, (UInt8 *)&buffer[8]);
            }
          }
        }
        *(_DWORD *)buffer = 1;
        *(_DWORD *)&buffer[4] = v9;
        DWORD2(v378) = 16;
        v379 = buffer;
        goto LABEL_845;
      case 381:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        *(_QWORD *)((char *)valuePtr + 4) = 0;
        LODWORD(valuePtr[0]) = 1;
        v175 = (void *)CFDictionaryGetValue(v8, CFSTR("APPLE80211KEY_RANGING_FOLLOW_MODE"));
        value = v175;
        if (v175 && !CFNumberGetValue((CFNumberRef)v175, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v176 = (void *)CFDictionaryGetValue(v8, CFSTR("APPLE80211KEY_RANGING_FOLLOW_MODE_BAND"));
        value = v176;
        if (v176)
        {
          if (!CFNumberGetValue((CFNumberRef)v176, kCFNumberSInt32Type, (char *)valuePtr + 8))
            goto LABEL_814;
        }
        DWORD2(v378) = 12;
        v379 = (char *)valuePtr;
        goto LABEL_845;
      case 382:
        v177 = 1;
        goto LABEL_415;
      case 388:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        *(_OWORD *)((char *)&valuePtr[2] + 8) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 8) = 0u;
        *(_OWORD *)((char *)valuePtr + 8) = 0u;
        LODWORD(valuePtr[0]) = 1;
        DWORD1(valuePtr[0]) = CFArrayGetCount(v8);
        if ((DWORD1(valuePtr[0]) - 1) > 3)
          return LQMConfigFromDict;
        v178 = 0;
        v179 = (char *)valuePtr + 12;
        do
        {
          v180 = (void *)CFArrayGetValueAtIndex(v8, v178);
          value = v180;
          if (v180)
            CFNumberGetValue((CFNumberRef)v180, kCFNumberSInt32Type, v179);
          ++v178;
          v179 += 12;
        }
        while (v178 < SDWORD1(valuePtr[0]));
        v40 = 56;
        goto LABEL_477;
      case 392:
        *(_QWORD *)&valuePtr[0] = 1;
        LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 4)
          goto LABEL_847;
        DWORD1(valuePtr[0]) = *(_DWORD *)v8;
        goto LABEL_393;
      case 399:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11853;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d Processing APPLE80211_IOC_REASSOCIATE_WITH_CORECAPTURE\n", (uint8_t *)valuePtr, 0x12u);
        }
        LODWORD(valuePtr[0]) = 1;
        *(_OWORD *)((char *)valuePtr + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[3] + 4) = 0u;
        if (!v8)
          goto LABEL_820;
        v181 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("REASSOC_CC_TRIGGER"));
        v182 = v181;
        if (!v181 || CFStringGetLength(v181) >= 65)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buffer = 138412290;
            *(_QWORD *)&buffer[4] = v182;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "APPLE80211_IOC_REASSOCIATE_WITH_CORECAPTURE: Validation failed... triggerString:%@", (uint8_t *)buffer, 0xCu);
          }
          return 4294963396;
        }
        CFStringGetCStringPtr(v182, 0);
        CFStringGetLength(v182);
        __memcpy_chk();
LABEL_820:
        DWORD2(v378) = 68;
        v379 = (char *)valuePtr;
        if (Apple80211IOCTLSetWrapper())
          goto LABEL_810;
        LQMConfigFromDict = 0;
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_847;
        *(_DWORD *)buffer = 136315394;
        *(_QWORD *)&buffer[4] = "Apple80211SetWithIOCTL";
        *(_WORD *)&buffer[12] = 1024;
        *(_DWORD *)&buffer[14] = 0;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Processed APPLE80211_IOC_REASSOCIATE_WITH_CORECAPTURE Ioctl error:%u", (uint8_t *)buffer, 0x12u);
        goto LABEL_846;
      case 403:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        buffer[0] = 0;
        memset(valuePtr, 0, 18);
        v183 = (void *)CFDictionaryGetValue(v8, CFSTR("HostSoftapNanCapabilityFlag"));
        value = v183;
        if (v183)
        {
          v184 = CFGetTypeID(v183);
          if (v184 == CFNumberGetTypeID())
          {
            if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, buffer))
              LOBYTE(valuePtr[0]) = buffer[0];
            if (buffer[0] == 1)
            {
              v185 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("HostSoftapNanServiceName"));
              CFStringGetCStringPtr(v185, 0x8000100u);
              CFStringGetLength(v185);
              __memcpy_chk();
            }
          }
        }
        v53 = 18;
        goto LABEL_373;
      case 404:
        syslog(3, "[WiFiTimeSync] %s %s:%d APPLE80211_IOC_ENABLE_PACKET_TS\n");
        goto LABEL_376;
      case 405:
        syslog(3, "[WiFiTimeSync] %s %s:%d APPLE80211_IOC_DISABLE_PACKET_TS\n");
LABEL_376:
        if (!Apple80211RawSet())
          return 0;
        goto LABEL_769;
      case 408:
        *(_QWORD *)((char *)valuePtr + 12) = 0;
        *(_QWORD *)((char *)valuePtr + 4) = 0;
        *(_QWORD *)((char *)&valuePtr[1] + 4) = 0;
        LODWORD(valuePtr[0]) = 1;
        SensingRequest = _getSensingRequest(v8, (uint64_t)valuePtr);
        if ((_DWORD)SensingRequest)
          goto LABEL_162;
        DWORD2(v378) = 28;
        v379 = (char *)valuePtr;
        if (Apple80211IOCTLSetWrapper())
          goto LABEL_810;
        v186 = (pthread_mutex_t *)(v6 + 1736);
        pthread_mutex_lock((pthread_mutex_t *)(v6 + 1736));
        if (!*(_BYTE *)(v6 + 1800))
          *(_BYTE *)(v6 + 1800) = 1;
LABEL_385:
        pthread_mutex_unlock(v186);
        goto LABEL_846;
      case 409:
        *(_QWORD *)((char *)valuePtr + 12) = 0;
        *(_QWORD *)((char *)valuePtr + 4) = 0;
        *(_QWORD *)((char *)&valuePtr[1] + 4) = 0;
        LODWORD(valuePtr[0]) = 1;
        DWORD2(v378) = 28;
        v379 = (char *)valuePtr;
        if (Apple80211IOCTLSetWrapper())
          goto LABEL_735;
        v186 = (pthread_mutex_t *)(v6 + 1736);
        pthread_mutex_lock((pthread_mutex_t *)(v6 + 1736));
        if (!*(_BYTE *)(v6 + 1800))
          *(_BYTE *)(v6 + 1800) = 0;
        goto LABEL_385;
      case 412:
      case 413:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        memset(buffer, 170, 18);
        memset(valuePtr, 0, 39);
        v36 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("SSID"));
        CFStringGetCStringPtr(v36, 0x8000100u);
        CFStringGetLength(v36);
        __memcpy_chk();
        LODWORD(valuePtr[2]) = CFStringGetLength(v36);
        v37 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("BSSID"));
        if (!v37)
          goto LABEL_814;
        if (!CFStringGetCString(v37, buffer, 18, 0x8000100u))
          goto LABEL_814;
        v38 = ether_aton(buffer);
        if (!v38)
          goto LABEL_814;
        v39 = *(_DWORD *)v38->octet;
        *(_WORD *)((char *)&valuePtr[2] + 5) = *(_WORD *)&v38->octet[4];
        *(_DWORD *)((char *)&valuePtr[2] + 1) = v39;
        v40 = 39;
        goto LABEL_477;
      case 420:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        LOBYTE(valuePtr[0]) = 0;
        buffer[0] = 0;
        v187 = (void *)CFDictionaryGetValue(v8, CFSTR("HostApEnabled"));
        value = v187;
        if (v187)
        {
          v188 = CFGetTypeID(v187);
          if (v188 == CFNumberGetTypeID())
          {
            if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, buffer))
              LOBYTE(valuePtr[0]) = buffer[0];
          }
        }
        DWORD2(v378) = 1;
        v379 = (char *)valuePtr;
        goto LABEL_393;
      case 448:
        if (!v8)
          goto LABEL_772;
        v189 = v8;
        goto LABEL_438;
      case 453:
        if (!v8)
          goto LABEL_772;
        LOBYTE(valuePtr[0]) = 0;
        v190 = (void *)CFDictionaryGetValue(v8, CFSTR("APPLE80211KEY_REGKEY_WIFI_VOICE_IND_STATE"));
        value = v190;
        if (!v190 || !CFNumberGetValue((CFNumberRef)v190, kCFNumberShortType, valuePtr))
          goto LABEL_814;
        v191 = 1;
        goto LABEL_705;
      case 469:
        if (!v8)
          goto LABEL_772;
        value = v8;
        *(_QWORD *)&valuePtr[0] = 0;
        if (CFNumberGetValue(v8, kCFNumberSInt64Type, valuePtr))
          goto LABEL_406;
        goto LABEL_814;
      case 470:
      case 471:
      case 480:
      case 482:
      case 483:
        if (!v8)
          goto LABEL_772;
        LOBYTE(valuePtr[0]) = CFBooleanGetValue(v8);
        v14 = 1;
        goto LABEL_467;
      case 472:
        if (!v8)
          goto LABEL_772;
        v192 = CFSTR("IO80211InterfaceBatterySaveModeState");
        goto LABEL_413;
      case 473:
        if (!v8)
          goto LABEL_772;
        v192 = CFSTR("IO80211InterfaceRadioMODE");
LABEL_413:
        v193 = (const __CFBoolean *)CFDictionaryGetValue(v8, v192);
        if (!v193)
          goto LABEL_814;
        v177 = CFBooleanGetValue(v193) != 0;
LABEL_415:
        LODWORD(valuePtr[0]) = v177;
LABEL_466:
        v14 = 4;
        goto LABEL_467;
      case 479:
      case 484:
      case 497:
        if (!v8)
          goto LABEL_772;
        value = v8;
        LODWORD(valuePtr[0]) = 0;
        if (!CFNumberGetValue(v8, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v31 = 4;
        goto LABEL_407;
      case 481:
        goto LABEL_768;
      case 485:
        if (!v8)
          goto LABEL_772;
        v194 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211IsInHomeScreen"));
        if (!v194)
          goto LABEL_814;
        LOBYTE(valuePtr[0]) = CFBooleanGetValue(v194);
        v195 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211IsLatencySensitiveAppActive"));
        if (!v195)
          goto LABEL_814;
        BYTE1(valuePtr[0]) = CFBooleanGetValue(v195);
        v50 = 2;
        goto LABEL_90;
      case 487:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 32);
        v196 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputARPFail"));
        value = v196;
        if (!v196)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v196, kCFNumberIntType, (char *)valuePtr + 4))
          goto LABEL_814;
        v197 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputDNSServersTotal"));
        value = v197;
        if (!v197)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v197, kCFNumberIntType, (char *)valuePtr + 8))
          goto LABEL_814;
        v198 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputDNSServersImpacted"));
        value = v198;
        if (!v198)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v198, kCFNumberIntType, (void *)((unint64_t)valuePtr | 0xC)))
          goto LABEL_814;
        v199 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputUserImpactFlags"));
        value = v199;
        if (!v199)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v199, kCFNumberIntType, &valuePtr[1]))
          goto LABEL_814;
        v200 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputDataStallScore"));
        value = v200;
        if (!v200)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v200, kCFNumberIntType, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        v201 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputAppPolicyScore"));
        value = v201;
        if (!v201)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v201, kCFNumberIntType, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        v202 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211DPSSymptomsInputNetScore"));
        value = v202;
        if (!v202 || !CFNumberGetValue((CFNumberRef)v202, kCFNumberIntType, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        v203 = 32;
        goto LABEL_505;
      case 488:
        if (!v8)
          goto LABEL_772;
        v189 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceCallStatus"));
        if (!v189)
          goto LABEL_814;
LABEL_438:
        LODWORD(valuePtr[0]) = CFBooleanGetValue(v189) != 0;
        v50 = 4;
        goto LABEL_90;
      case 489:
        if (!v8)
          goto LABEL_772;
        *(_QWORD *)buffer = 0;
        *(_QWORD *)&buffer[8] = 0;
        v204 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceIPV4Address"));
        value = v204;
        if (!v204)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v204, kCFNumberIntType, buffer))
          goto LABEL_814;
        v205 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceIPV4RouterAddress"));
        value = v205;
        if (!v205)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v205, kCFNumberIntType, &buffer[4]))
          goto LABEL_814;
        v206 = (const __CFData *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceRouterMACAddress"));
        if (!v206)
          goto LABEL_814;
        v207 = v206;
        if (CFDataGetLength(v206) < 7)
        {
          v383.length = CFDataGetLength(v207);
          v12 = buffer;
          v383.location = 0;
          CFDataGetBytes(v207, v383, (UInt8 *)&buffer[8]);
          v13 = 16;
          goto LABEL_26;
        }
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_814;
        Length = CFDataGetLength(v207);
        LODWORD(valuePtr[0]) = 136315906;
        *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
        WORD6(valuePtr[0]) = 2080;
        *(_QWORD *)((char *)valuePtr + 14) = "IO80211InterfaceRouterMACAddress";
        WORD3(valuePtr[1]) = 1024;
        DWORD2(valuePtr[1]) = Length;
        WORD6(valuePtr[1]) = 1024;
        *(_DWORD *)((char *)&valuePtr[1] + 14) = 6;
        v336 = MEMORY[0x24BDACB70];
        v337 = "%s: Value size exceeds the limit for key: %s (%u >= %u)\n";
        v353 = (char *)valuePtr;
        goto LABEL_874;
      case 490:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 300);
        v208 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceProductType"));
        if (!v208)
          goto LABEL_814;
        v209 = v208;
        if (CFStringGetLength(v208) >= 201)
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_814;
          *(_DWORD *)buffer = 136315906;
          *(_QWORD *)&buffer[4] = "Apple80211SetWithIOCTL";
          *(_WORD *)&buffer[12] = 2080;
          *(_QWORD *)&buffer[14] = "IO80211InterfaceProductType";
          *(_WORD *)&buffer[22] = 1024;
          *(_DWORD *)&buffer[24] = CFStringGetLength(v209);
          *(_WORD *)&buffer[28] = 1024;
          *(_DWORD *)&buffer[30] = 200;
          v336 = MEMORY[0x24BDACB70];
          v337 = "%s: Value length exceeds the limit for key: %s (%u >= %u)\n";
        }
        else
        {
          v384.length = CFStringGetLength(v209);
          v384.location = 0;
          CFStringGetBytes(v209, v384, 0x600u, 0, 0, (UInt8 *)valuePtr, 200, 0);
          v210 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceOSVersion"));
          if (!v210)
            goto LABEL_814;
          v211 = v210;
          if (CFStringGetLength(v210) < 101)
          {
            v385.length = CFStringGetLength(v211);
            v12 = (char *)valuePtr;
            v385.location = 0;
            CFStringGetBytes(v211, v385, 0x600u, 0, 0, (UInt8 *)&valuePtr[12] + 8, 100, 0);
            v13 = 300;
LABEL_26:
            DWORD2(v378) = v13;
            v379 = v12;
            goto LABEL_27;
          }
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_814;
          *(_DWORD *)buffer = 136315906;
          *(_QWORD *)&buffer[4] = "Apple80211SetWithIOCTL";
          *(_WORD *)&buffer[12] = 2080;
          *(_QWORD *)&buffer[14] = "IO80211InterfaceOSVersion";
          *(_WORD *)&buffer[22] = 1024;
          *(_DWORD *)&buffer[24] = CFStringGetLength(v211);
          *(_WORD *)&buffer[28] = 1024;
          *(_DWORD *)&buffer[30] = 100;
          v336 = MEMORY[0x24BDACB70];
          v337 = "%s: Value length exceeds the limit for key: %s (%u >= %u)\n";
        }
        v353 = buffer;
LABEL_874:
        v354 = 34;
        goto LABEL_826;
      case 496:
        if (!v8)
          goto LABEL_772;
        valuePtr[0] = 0uLL;
        v212 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceEnableWoW"));
        value = v212;
        if (!v212)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v212, kCFNumberIntType, valuePtr))
          goto LABEL_814;
        v213 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceEnableLowPwrAssocMode"));
        value = v213;
        if (!v213)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v213, kCFNumberIntType, (char *)valuePtr + 4))
          goto LABEL_814;
        v214 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceEnableWoWOnCaptive"));
        value = v214;
        if (!v214)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v214, kCFNumberIntType, (char *)valuePtr + 8))
          goto LABEL_814;
        v60 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceNetworkWoWDenyListed"));
        value = v60;
        if (!v60)
          goto LABEL_814;
        v61 = kCFNumberIntType;
        goto LABEL_462;
      case 498:
        if (!v8)
          goto LABEL_772;
        LODWORD(valuePtr[0]) = CFBooleanGetValue(v8);
        goto LABEL_466;
      case 499:
        if (!v8)
          goto LABEL_772;
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 0;
        v215 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceDualPowerCallInProgress"));
        value = v215;
        if (!v215)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v215, kCFNumberIntType, valuePtr))
          goto LABEL_814;
        v216 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceDualPowerCellularTxStarted"));
        value = v216;
        if (!v216)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v216, kCFNumberIntType, (char *)valuePtr + 4))
          goto LABEL_814;
        v63 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceDualPowerCellularTxShort"));
        value = v63;
        if (!v63)
          goto LABEL_814;
        v64 = kCFNumberIntType;
        goto LABEL_475;
      case 500:
        if (!v8)
          goto LABEL_772;
        bzero(valuePtr, 0x12F0uLL);
        v218 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanFreq"));
        value = v218;
        if (!v218)
          goto LABEL_482;
        if (!CFNumberGetValue((CFNumberRef)v218, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        LOBYTE(valuePtr[0]) = 1;
LABEL_482:
        v219 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanLostNetTO"));
        value = v219;
        if (!v219)
          goto LABEL_485;
        if (!CFNumberGetValue((CFNumberRef)v219, kCFNumberSInt32Type, (char *)valuePtr + 12))
          goto LABEL_814;
        BYTE8(valuePtr[0]) = 1;
LABEL_485:
        v220 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanAdaptScan"));
        value = v220;
        if (!v220)
          goto LABEL_488;
        if (!CFNumberGetValue((CFNumberRef)v220, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        LOBYTE(valuePtr[1]) = 1;
LABEL_488:
        v221 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanBestNetScan"));
        value = v221;
        if (!v221)
          goto LABEL_491;
        if (!CFNumberGetValue((CFNumberRef)v221, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        BYTE8(valuePtr[1]) = 1;
LABEL_491:
        v222 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanScanRecord"));
        value = v222;
        if (!v222)
          goto LABEL_494;
        if (!CFNumberGetValue((CFNumberRef)v222, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4))
          goto LABEL_814;
        LOBYTE(valuePtr[2]) = 1;
LABEL_494:
        v223 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanChannels"));
        if (!v223)
          goto LABEL_504;
        v224 = v223;
        Count = CFArrayGetCount(v223);
        if (Count >= 0x190)
          v226 = 400;
        else
          v226 = Count;
        HIDWORD(valuePtr[2]) = v226;
        if (!v226)
          goto LABEL_503;
        v227 = 0;
        v228 = (char *)&valuePtr[3] + 4;
        while (1)
        {
          v229 = (void *)CFArrayGetValueAtIndex(v224, v227);
          value = v229;
          if (!v229 || !CFNumberGetValue((CFNumberRef)v229, kCFNumberSInt32Type, v228))
            return 4294963396;
          ++v227;
          v228 += 12;
          if (v227 >= HIDWORD(valuePtr[2]))
          {
LABEL_503:
            BYTE8(valuePtr[2]) = 1;
LABEL_504:
            v203 = 4848;
LABEL_505:
            DWORD2(v378) = v203;
            v379 = (char *)valuePtr;
LABEL_27:
            if (!Apple80211IOCTLSetWrapper())
              goto LABEL_846;
            if (*__error() == 102 || *__error() == 6)
              goto LABEL_812;
LABEL_709:
            if (*__error() != 22)
              goto LABEL_815;
            goto LABEL_814;
          }
        }
      case 501:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 24);
        v230 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanDynamicProfileStartTime"));
        value = v230;
        if (!v230)
          goto LABEL_510;
        if (!CFNumberGetValue((CFNumberRef)v230, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        LOBYTE(valuePtr[0]) = 1;
LABEL_510:
        v231 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanDynamicProfileDuration"));
        value = v231;
        if (!v231)
          goto LABEL_513;
        if (!CFNumberGetValue((CFNumberRef)v231, kCFNumberSInt32Type, (char *)valuePtr + 12))
          goto LABEL_814;
        BYTE8(valuePtr[0]) = 1;
LABEL_513:
        v232 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceBGScanDynamicProfileScanFreq"));
        value = v232;
        if (!v232)
          goto LABEL_516;
        if (!CFNumberGetValue((CFNumberRef)v232, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        LOBYTE(valuePtr[1]) = 1;
LABEL_516:
        v50 = 24;
        goto LABEL_90;
      case 503:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 20);
        v233 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceVirtualIfStateIsActive"));
        value = v233;
        if (!v233)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v233, kCFNumberIntType, valuePtr))
          goto LABEL_814;
        v234 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceVirtualIfStateIsType"));
        value = v234;
        if (!v234 || !CFNumberGetValue((CFNumberRef)v234, kCFNumberIntType, (char *)valuePtr + 4))
          goto LABEL_814;
        v235 = 20;
        goto LABEL_564;
      case 507:
      case 509:
        if (!v8)
          goto LABEL_772;
        LOBYTE(valuePtr[0]) = *MEMORY[0x24BDBD270] == (_QWORD)v8;
LABEL_89:
        v50 = 1;
        goto LABEL_90;
      case 508:
      case 514:
      case 536:
      case 537:
LABEL_23:
        if (!v8)
          goto LABEL_772;
        value = v8;
        LODWORD(valuePtr[0]) = 0;
        v12 = (char *)valuePtr;
        if (!CFNumberGetValue(v8, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v13 = 4;
        goto LABEL_26;
      case 510:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 164);
        v236 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceIPV6Address"));
        if (!v236)
          goto LABEL_814;
        v237 = v236;
        if (CFArrayGetCount(v236) < 11)
        {
          LODWORD(valuePtr[0]) = CFArrayGetCount(v237);
          if (!LODWORD(valuePtr[0]))
            goto LABEL_762;
        }
        else
        {
          LODWORD(valuePtr[0]) = 10;
        }
        v333 = 0;
        v334 = (UInt8 *)valuePtr + 4;
        do
        {
          v335 = (const __CFData *)CFArrayGetValueAtIndex(v237, v333);
          if (!v335)
            goto LABEL_814;
          v386.location = 0;
          v386.length = 16;
          CFDataGetBytes(v335, v386, v334);
          ++v333;
          v334 += 16;
        }
        while (v333 < LODWORD(valuePtr[0]));
LABEL_762:
        v242 = 164;
LABEL_763:
        DWORD2(v378) = v242;
        v379 = (char *)valuePtr;
        goto LABEL_27;
      case 516:
        if (!v8)
          goto LABEL_772;
        *(_QWORD *)&valuePtr[0] = 1;
        if (CFArrayGetCount(v8) >= 1)
        {
          v238 = 0;
          v239 = 0;
          do
          {
            v240 = (void *)CFArrayGetValueAtIndex(v8, v238);
            value = v240;
            if (v240)
            {
              *(_DWORD *)buffer = -1431655766;
              CFNumberGetValue((CFNumberRef)v240, kCFNumberSInt32Type, buffer);
              v241 = 1;
              switch(*(_DWORD *)buffer)
              {
                case 0:
                  BYTE4(valuePtr[0]) = v239 & 0xF8;
                  goto LABEL_536;
                case 1:
                  goto LABEL_534;
                case 2:
                  v241 = 2;
                  goto LABEL_534;
                case 3:
                  v241 = 4;
LABEL_534:
                  v239 |= v241;
                  BYTE4(valuePtr[0]) = v239;
                  break;
                default:
                  break;
              }
            }
            ++v238;
          }
          while (v238 < CFArrayGetCount(v8));
        }
LABEL_536:
        v242 = 8;
        goto LABEL_763;
      case 518:
        LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 8)
          goto LABEL_848;
        v58 = 8;
        goto LABEL_750;
      case 521:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 20);
        v243 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v244 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], "MWS_LE_SCAN_EN", 0x8000100u);
        v245 = (void *)CFDictionaryGetValue(v8, v244);
        value = v245;
        if (!v245)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v245, kCFNumberSInt8Type, valuePtr))
          goto LABEL_814;
        CFRelease(v244);
        v246 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_PEAK", 0x8000100u);
        v247 = (void *)CFDictionaryGetValue(v8, v246);
        value = v247;
        if (!v247)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v247, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        CFRelease(v246);
        v248 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_DUR", 0x8000100u);
        v249 = (void *)CFDictionaryGetValue(v8, v248);
        value = v249;
        if (!v249)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v249, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        CFRelease(v248);
        v250 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_DC", 0x8000100u);
        v251 = (void *)CFDictionaryGetValue(v8, v250);
        value = v251;
        if (!v251)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v251, kCFNumberSInt32Type, (char *)valuePtr + 12))
          goto LABEL_814;
        CFRelease(v250);
        v252 = CFStringCreateWithCString(v243, "MWS_LE_SCAN_REASON", 0x8000100u);
        v253 = (void *)CFDictionaryGetValue(v8, v252);
        value = v253;
        if (!v253 || !CFNumberGetValue((CFNumberRef)v253, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        CFRelease(v252);
        DWORD2(v378) = 20;
        v379 = (char *)valuePtr;
        goto LABEL_27;
      case 531:
        if (!v8)
          goto LABEL_772;
        WORD2(valuePtr[0]) = 0;
        LODWORD(valuePtr[0]) = 0;
        v254 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceRoamProfile"));
        value = v254;
        if (!v254 || !CFNumberGetValue((CFNumberRef)v254, kCFNumberIntType, valuePtr))
          goto LABEL_814;
        v255 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceRoamProfileMotion"));
        if (v255)
          BYTE3(valuePtr[0]) = CFBooleanGetValue(v255);
        v256 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceRoamProfilePoorLinkQuality"));
        if (v256)
          BYTE2(valuePtr[0]) = CFBooleanGetValue(v256);
        v257 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceRoamMultiAP"));
        if (v257)
          BYTE1(valuePtr[0]) = CFBooleanGetValue(v257);
        v258 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceRoamProfileMotionRssiDelta"));
        value = v258;
        if (v258)
          CFNumberGetValue((CFNumberRef)v258, kCFNumberSInt16Type, (char *)valuePtr + 4);
        v235 = 6;
LABEL_564:
        DWORD2(v378) = v235;
        v78 = (char *)valuePtr;
        goto LABEL_565;
      case 532:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 128);
        v259 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceAdaptiveRoamChanList"));
        if (!v259)
          goto LABEL_577;
        v260 = v259;
        v261 = CFArrayGetCount(v259);
        v262 = v261 >= 10 ? 10 : v261;
        DWORD2(valuePtr[7]) = v262;
        if (v261 < 1)
          goto LABEL_577;
        v263 = 0;
        v264 = (char *)valuePtr + 8;
        while (1)
        {
          v265 = (const __CFDictionary *)CFArrayGetValueAtIndex(v260, v263);
          if (!v265)
            goto LABEL_814;
          v266 = v265;
          v267 = (void *)CFDictionaryGetValue(v265, CFSTR("IO80211Channel"));
          value = v267;
          if (!v267)
            goto LABEL_814;
          CFNumberGetValue((CFNumberRef)v267, kCFNumberSInt32Type, v264 - 4);
          v268 = (void *)CFDictionaryGetValue(v266, CFSTR("IO80211ChannelFlags"));
          value = v268;
          if (!v268)
            goto LABEL_814;
          CFNumberGetValue((CFNumberRef)v268, kCFNumberSInt32Type, v264);
          ++v263;
          v264 += 12;
          if (v263 >= SDWORD2(valuePtr[7]))
          {
LABEL_577:
            v269 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceAdaptiveRoamRSSITrigger"));
            value = v269;
            if (v269)
              CFNumberGetValue((CFNumberRef)v269, kCFNumberSInt16Type, (char *)&valuePtr[7] + 12);
            v69 = 128;
            goto LABEL_801;
          }
        }
      case 538:
        if (!v8)
          goto LABEL_772;
        value = v8;
        *(_QWORD *)&valuePtr[0] = 0;
        v12 = (char *)valuePtr;
        if (!CFNumberGetValue(v8, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v13 = 8;
        goto LABEL_26;
      case 539:
        if (!v8)
          goto LABEL_772;
        v270 = CFArrayGetCount(v8);
        if (v270 >= 0xF)
          return 4294963396;
        *(_DWORD *)buffer = 0;
        v271 = 0;
        if (!v270)
          goto LABEL_591;
        v272 = 0;
        v273 = v270;
        while (1)
        {
          LODWORD(valuePtr[0]) = -1431655766;
          v274 = (void *)CFArrayGetValueAtIndex(v8, v272);
          value = v274;
          if (!v274 || !CFNumberGetValue((CFNumberRef)v274, kCFNumberSInt32Type, valuePtr))
            goto LABEL_772;
          if (LODWORD(valuePtr[0]) > 0xE)
            return 4294963396;
          v271 |= 1 << (LOBYTE(valuePtr[0]) - 1);
          *(_DWORD *)buffer = v271;
          if (v273 == ++v272)
          {
LABEL_591:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 67109120;
              DWORD1(valuePtr[0]) = v271;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "APPLE80211_IOC_MWS_TIME_SHARING_WIFI_ENH channel_bitmap = 0x%X\n", (uint8_t *)valuePtr, 8u);
            }
            v157 = 4;
LABEL_807:
            DWORD2(v378) = v157;
            v217 = buffer;
            goto LABEL_808;
          }
        }
      case 540:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 36);
        v275 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType72GBITMAPWiFiEnh"));
        value = v275;
        if (!v275)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v275, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v276 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType75GBITMAPLOWWiFiEnh"));
        value = v276;
        if (!v276)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v276, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v277 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType75GBITMAPMIDWiFiEnh"));
        value = v277;
        if (!v277)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v277, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v278 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType75GBITMAPHIWiFiEnh"));
        value = v278;
        if (!v278)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v278, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
          goto LABEL_814;
        v279 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType7U5LowBITMAPWiFiEnh"));
        value = v279;
        if (!v279)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v279, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        v280 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType7U5HighBITMAPWiFiEnh"));
        value = v280;
        if (!v280)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v280, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        v281 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType7U6BITMAPWiFiEnh"));
        value = v281;
        if (!v281)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v281, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        v282 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType7U7BITMAPWiFiEnh"));
        value = v282;
        if (!v282)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v282, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        v283 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType7U8BITMAPWiFiEnh"));
        value = v283;
        if (!v283 || !CFNumberGetValue((CFNumberRef)v283, kCFNumberSInt32Type, &valuePtr[2]))
          goto LABEL_814;
        goto LABEL_633;
      case 541:
      case 544:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 36);
        v41 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS2GBITMAPWiFiEnh"));
        value = v41;
        if (!v41)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v41, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v42 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPLOWWiFiEnh"));
        value = v42;
        if (!v42)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v42, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v43 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPMIDWiFiEnh"));
        value = v43;
        if (!v43)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v43, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v44 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPHIWiFiEnh"));
        value = v44;
        if (!v44)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v44, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
          goto LABEL_814;
        v45 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU5LowBITMAPWiFiEnh"));
        value = v45;
        if (!v45)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        v46 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU5HighBITMAPWiFiEnh"));
        value = v46;
        if (!v46)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v46, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        v47 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU6BITMAPWiFiEnh"));
        value = v47;
        if (!v47)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v47, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        v48 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU7BITMAPWiFiEnh"));
        value = v48;
        if (!v48)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v48, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        v49 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU8BITMAPWiFiEnh"));
        value = v49;
        if (!v49 || !CFNumberGetValue((CFNumberRef)v49, kCFNumberSInt32Type, &valuePtr[2]))
          goto LABEL_814;
        goto LABEL_633;
      case 542:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 36);
        v284 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCL2GBITMAPWiFiEnh"));
        value = v284;
        if (!v284)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v284, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v285 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCL5GBITMAPLOWWiFiEnh"));
        value = v285;
        if (!v285)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v285, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v286 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCL5GBITMAPMIDWiFiEnh"));
        value = v286;
        if (!v286)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v286, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v287 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCL5GBITMAPHIWiFiEnh"));
        value = v287;
        if (!v287)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v287, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
          goto LABEL_814;
        v288 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCLU5LowBITMAPWiFiEnh"));
        value = v288;
        if (!v288)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v288, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        v289 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCLU5HighBITMAPWiFiEnh"));
        value = v289;
        if (!v289)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v289, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        v290 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCLU6BITMAPWiFiEnh"));
        value = v290;
        if (!v290)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v290, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        v291 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCLU7BITMAPWiFiEnh"));
        value = v291;
        if (!v291)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v291, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        v292 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSOCLU8BITMAPWiFiEnh"));
        value = v292;
        if (!v292 || !CFNumberGetValue((CFNumberRef)v292, kCFNumberSInt32Type, &valuePtr[2]))
          goto LABEL_814;
LABEL_633:
        v191 = 36;
        goto LABEL_705;
      case 543:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 40);
        if (!CFDictionaryContainsKey(v8, CFSTR("MWS2GBITMAPWiFiEnh")))
          goto LABEL_639;
        v293 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS2GBITMAPWiFiEnh"));
        value = v293;
        if (!v293 || !CFNumberGetValue((CFNumberRef)v293, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 1u;
LABEL_639:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWS5GBITMAPLOWWiFiEnh")))
          goto LABEL_643;
        v294 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPLOWWiFiEnh"));
        value = v294;
        if (!v294 || !CFNumberGetValue((CFNumberRef)v294, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 2u;
LABEL_643:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWS5GBITMAPMIDWiFiEnh")))
          goto LABEL_647;
        v295 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPMIDWiFiEnh"));
        value = v295;
        if (!v295 || !CFNumberGetValue((CFNumberRef)v295, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 2u;
LABEL_647:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWS5GBITMAPHIWiFiEnh")))
          goto LABEL_651;
        v296 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPHIWiFiEnh"));
        value = v296;
        if (!v296
          || !CFNumberGetValue((CFNumberRef)v296, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          goto LABEL_814;
        }
        DWORD1(valuePtr[2]) |= 2u;
LABEL_651:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWSU5LowBITMAPWiFiEnh")))
          goto LABEL_655;
        v297 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU5LowBITMAPWiFiEnh"));
        value = v297;
        if (!v297 || !CFNumberGetValue((CFNumberRef)v297, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 4u;
LABEL_655:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWSU5HighBITMAPWiFiEnh")))
          goto LABEL_659;
        v298 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU5HighBITMAPWiFiEnh"));
        value = v298;
        if (!v298 || !CFNumberGetValue((CFNumberRef)v298, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 4u;
LABEL_659:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWSU6BITMAPWiFiEnh")))
          goto LABEL_663;
        v299 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU6BITMAPWiFiEnh"));
        value = v299;
        if (!v299 || !CFNumberGetValue((CFNumberRef)v299, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 4u;
LABEL_663:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWSU7BITMAPWiFiEnh")))
          goto LABEL_667;
        v300 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU7BITMAPWiFiEnh"));
        value = v300;
        if (!v300 || !CFNumberGetValue((CFNumberRef)v300, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 4u;
LABEL_667:
        if (!CFDictionaryContainsKey(v8, CFSTR("MWSU8BITMAPWiFiEnh")))
          goto LABEL_671;
        v301 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU8BITMAPWiFiEnh"));
        value = v301;
        if (!v301 || !CFNumberGetValue((CFNumberRef)v301, kCFNumberSInt32Type, &valuePtr[2]))
          goto LABEL_814;
        DWORD1(valuePtr[2]) |= 4u;
LABEL_671:
        v50 = 40;
LABEL_90:
        DWORD2(v378) = v50;
        v379 = (char *)valuePtr;
LABEL_706:
        if (!Apple80211IOCTLSetWrapper())
          goto LABEL_846;
        if (*__error() != 102 && *__error() != 6)
          goto LABEL_709;
        goto LABEL_847;
      case 545:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 40);
        v302 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS_SCAN_FREQ_INDEX_Enh"));
        value = v302;
        if (!v302)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v302, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4))
          goto LABEL_814;
        v303 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking2GBITMAPWiFiEnh"));
        value = v303;
        if (!v303)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v303, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v304 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh"));
        value = v304;
        if (!v304)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v304, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v305 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh"));
        value = v305;
        if (!v305)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v305, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v306 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh"));
        value = v306;
        if (!v306)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v306, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
          goto LABEL_814;
        v307 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4BlankingU5LowBITMAPWiFiEnh"));
        value = v307;
        if (!v307)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v307, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        v308 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4BlankingU5HighBITMAPWiFiEnh"));
        value = v308;
        if (!v308)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v308, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        v309 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4BlankingU6BITMAPWiFiEnh"));
        value = v309;
        if (!v309)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v309, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        v310 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4BlankingU7BITMAPWiFiEnh"));
        value = v310;
        if (!v310)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v310, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        v311 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4BlankingU8BITMAPWiFiEnh"));
        value = v311;
        if (!v311 || !CFNumberGetValue((CFNumberRef)v311, kCFNumberSInt32Type, &valuePtr[2]))
          goto LABEL_814;
        goto LABEL_704;
      case 546:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 40);
        v312 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS_SCAN_FREQ_INDEX_Enh"));
        value = v312;
        if (!v312)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v312, kCFNumberSInt32Type, (char *)&valuePtr[2] + 4))
          goto LABEL_814;
        LODWORD(valuePtr[0]) = 0;
        v313 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking5GBITMAPLOWWiFiEnh"));
        value = v313;
        if (!v313)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v313, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v314 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking5GBITMAPMIDWiFiEnh"));
        value = v314;
        if (!v314)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v314, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v315 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSType4Blanking5GBITMAPHIWiFiEnh"));
        value = v315;
        if (!v315
          || !CFNumberGetValue((CFNumberRef)v315, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          goto LABEL_814;
        }
        memset(&valuePtr[1], 0, 20);
LABEL_704:
        v191 = 40;
LABEL_705:
        DWORD2(v378) = v191;
        v379 = (char *)valuePtr;
        goto LABEL_706;
      case 547:
        *(_DWORD *)buffer = 0;
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 40);
        v316 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS_CONDITION_ID_Value"));
        value = v316;
        if (!v316)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v316, kCFNumberSInt8Type, buffer))
          goto LABEL_814;
        BYTE4(valuePtr[2]) = buffer[0];
        v317 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS2GBITMAPWiFiEnh"));
        value = v317;
        if (!v317)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v317, kCFNumberSInt32Type, valuePtr))
          goto LABEL_814;
        v318 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPLOWWiFiEnh"));
        value = v318;
        if (!v318)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v318, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v319 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPMIDWiFiEnh"));
        value = v319;
        if (!v319)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v319, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v320 = (void *)CFDictionaryGetValue(v8, CFSTR("MWS5GBITMAPHIWiFiEnh"));
        value = v320;
        if (!v320)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v320, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
          goto LABEL_814;
        v321 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU5LowBITMAPWiFiEnh"));
        value = v321;
        if (!v321)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v321, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        v322 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU5HighBITMAPWiFiEnh"));
        value = v322;
        if (!v322)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v322, kCFNumberSInt32Type, (char *)&valuePtr[1] + 4))
          goto LABEL_814;
        v323 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU6BITMAPWiFiEnh"));
        value = v323;
        if (!v323)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v323, kCFNumberSInt32Type, (char *)&valuePtr[1] + 8))
          goto LABEL_814;
        v324 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU7BITMAPWiFiEnh"));
        value = v324;
        if (!v324)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v324, kCFNumberSInt32Type, (char *)&valuePtr[1] + 12))
          goto LABEL_814;
        v325 = (void *)CFDictionaryGetValue(v8, CFSTR("MWSU8BITMAPWiFiEnh"));
        value = v325;
        if (!v325 || !CFNumberGetValue((CFNumberRef)v325, kCFNumberSInt32Type, &valuePtr[2]))
          goto LABEL_814;
        v88 = 40;
        goto LABEL_733;
      case 548:
        if (!v8)
          goto LABEL_772;
        memset(valuePtr, 0, 20);
        if (CFArrayGetCount(v8) != 9)
          return 4294963396;
        v326 = (void *)CFArrayGetValueAtIndex(v8, 0);
        value = v326;
        if (!v326 || !CFNumberGetValue((CFNumberRef)v326, kCFNumberSInt32Type, &valuePtr[1]))
          goto LABEL_814;
        v327 = valuePtr;
        v328 = 1;
        break;
      case 551:
        LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 244)
          goto LABEL_848;
        v58 = 244;
        goto LABEL_750;
      default:
        switch(v5)
        {
          case 345:
            goto LABEL_23;
          case 346:
          case 348:
          case 350:
          case 351:
            goto LABEL_848;
          case 347:
            LQMConfigFromDict = 4294963396;
            if (!v8 || !v7)
              goto LABEL_848;
            *(_DWORD *)buffer = 0;
            LOBYTE(v373) = 0;
            memset(valuePtr, 0, 28);
            v133 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_ACTIVE_TO_DYNAMIC_TIMEOUT"));
            value = v133;
            if (!v133)
              goto LABEL_847;
            v134 = CFGetTypeID(v133);
            if (v134 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer))
              goto LABEL_814;
            DWORD1(valuePtr[0]) = *(_DWORD *)buffer;
            v135 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_DYNAMIC_TO_LOW_TIMEOUT"));
            value = v135;
            if (!v135)
              goto LABEL_814;
            v136 = CFGetTypeID(v135);
            if (v136 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer))
              goto LABEL_814;
            DWORD2(valuePtr[0]) = *(_DWORD *)buffer;
            v137 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_LOW_TO_DISABLE_INTERVAL"));
            value = v137;
            if (!v137)
              goto LABEL_814;
            v138 = CFGetTypeID(v137);
            if (v138 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer))
              goto LABEL_814;
            HIDWORD(valuePtr[0]) = *(_DWORD *)buffer;
            v139 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_RX_PACKET_THRESHOLD"));
            value = v139;
            if (!v139)
              goto LABEL_814;
            v140 = CFGetTypeID(v139);
            if (v140 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer))
              goto LABEL_814;
            LODWORD(valuePtr[1]) = *(_DWORD *)buffer;
            v141 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_BEACON_INTERVAL"));
            value = v141;
            if (!v141)
              goto LABEL_814;
            v142 = CFGetTypeID(v141);
            if (v142 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, buffer))
              goto LABEL_814;
            WORD2(valuePtr[1]) = *(_WORD *)buffer;
            v143 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_PS_STATE"));
            value = v143;
            if (!v143)
              goto LABEL_814;
            v144 = CFGetTypeID(v143);
            if (v144 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373))
              goto LABEL_814;
            BYTE6(valuePtr[1]) = v373;
            v145 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_PS_ENABLE"));
            value = v145;
            if (!v145)
              goto LABEL_814;
            v146 = CFGetTypeID(v145);
            if (v146 != CFNumberGetTypeID())
              goto LABEL_814;
            if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373))
              goto LABEL_814;
            BYTE7(valuePtr[1]) = v373;
            v147 = (void *)CFDictionaryGetValue(v8, CFSTR("SOFTAP_LOWPOWER_AWAKE_LEVEL"));
            value = v147;
            if (!v147)
              goto LABEL_814;
            v148 = CFGetTypeID(v147);
            if (v148 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373))
              goto LABEL_814;
            BYTE8(valuePtr[1]) = v373;
            v69 = 28;
            goto LABEL_801;
          case 349:
            LQMConfigFromDict = 4294963396;
            if (!v8)
              goto LABEL_848;
            if (!v7)
              goto LABEL_848;
            memset(buffer, 0, 24);
            v373 = -1431655766;
            v149 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceSoftAPCSAChannel"));
            value = v149;
            if (!v149)
              goto LABEL_848;
            CFNumberGetValue((CFNumberRef)v149, kCFNumberIntType, &v373);
            v150 = v373;
            *(_DWORD *)&buffer[8] = v373;
            v372 = -1431655766;
            v151 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceSoftAPCSAChannelFlag"));
            value = v151;
            if (!v151)
              goto LABEL_772;
            CFNumberGetValue((CFNumberRef)v151, kCFNumberIntType, &v372);
            v152 = v372;
            *(_DWORD *)&buffer[12] = v372;
            v371 = -1431655766;
            v153 = (void *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceSoftAPCSASwitchCount"));
            value = v153;
            if (!v153)
              goto LABEL_814;
            CFNumberGetValue((CFNumberRef)v153, kCFNumberIntType, &v371);
            v154 = v371;
            *(_DWORD *)&buffer[16] = v371;
            v155 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IO80211InterfaceSoftAPCSAForceDisconnect"));
            if (!v155)
              goto LABEL_814;
            v156 = CFBooleanGetValue(v155);
            buffer[20] = v156 != 0;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136316162;
              *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = v150;
              WORD1(valuePtr[1]) = 1024;
              DWORD1(valuePtr[1]) = v152;
              WORD4(valuePtr[1]) = 1024;
              *(_DWORD *)((char *)&valuePtr[1] + 10) = v154;
              HIWORD(valuePtr[1]) = 1024;
              LODWORD(valuePtr[2]) = v156 != 0;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: APPLE80211_IOC_SOFTAP_TRIGGER_CSA channel %d, flags 0x%x, count %d, disconnect %d\n", (uint8_t *)valuePtr, 0x24u);
            }
            v157 = 24;
            goto LABEL_807;
          case 352:
            LQMConfigFromDict = 4294963396;
            if (!v8 || !v7)
              goto LABEL_848;
            LOBYTE(v373) = 0;
            memset(buffer, 0, 36);
            v158 = (void *)CFDictionaryGetValue(v8, CFSTR("HostApBatteryLevel"));
            value = v158;
            if (v158)
            {
              v159 = CFGetTypeID(v158);
              if (v159 == CFNumberGetTypeID())
              {
                if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373))
                  buffer[2] = v373;
              }
            }
            v160 = (void *)CFDictionaryGetValue(v8, CFSTR("HostApWiFiNetworkFlag"));
            value = v160;
            if (v160)
            {
              v161 = CFGetTypeID(v160);
              if (v161 == CFNumberGetTypeID())
              {
                if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, &v373))
                  *(_WORD *)buffer = 0;
              }
            }
            v162 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("SSID_STR"));
            v163 = v162;
            if (!v162)
              goto LABEL_804;
            v164 = CFStringGetLength(v162);
            if ((unint64_t)(v164 - 33) < 0xFFFFFFFFFFFFFFE0)
              goto LABEL_814;
            v165 = v164;
            *(_QWORD *)&valuePtr[0] = 0;
            if (CFStringGetLength(v163))
            {
              v382.location = 0;
              v382.length = v165;
              if (!CFStringGetBytes(v163, v382, 0x8000100u, 0, 0, (UInt8 *)&buffer[4], 32, (CFIndex *)valuePtr))
                goto LABEL_772;
              LOBYTE(v163) = valuePtr[0];
            }
            else
            {
              LOBYTE(v163) = 0;
            }
            buffer[3] = (char)v163;
LABEL_804:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136316418;
              *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 13164;
              WORD1(valuePtr[1]) = 1024;
              DWORD1(valuePtr[1]) = buffer[2];
              WORD4(valuePtr[1]) = 1024;
              *(_DWORD *)((char *)&valuePtr[1] + 10) = *(unsigned __int16 *)buffer;
              HIWORD(valuePtr[1]) = 1024;
              LODWORD(valuePtr[2]) = v163;
              WORD2(valuePtr[2]) = 2080;
              *(_QWORD *)((char *)&valuePtr[2] + 6) = &buffer[4];
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %u : battery: %d flags: %d ssid_len: %d ssid: %s \n ", (uint8_t *)valuePtr, 0x2Eu);
            }
            v157 = 36;
            break;
          default:
            if (v5 != 337)
              goto LABEL_848;
            *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
            *(_OWORD *)((char *)valuePtr + 4) = 0u;
            LODWORD(valuePtr[0]) = 1;
            LQMConfigFromDict = _getLQMConfigFromDict(v8, (uint64_t)valuePtr);
            if ((_DWORD)LQMConfigFromDict)
              goto LABEL_847;
            v54 = 36;
            goto LABEL_109;
        }
        goto LABEL_807;
    }
    while (v328 != 9)
    {
      v329 = (void *)CFArrayGetValueAtIndex(v8, v328);
      value = v329;
      if (v329)
      {
        v330 = CFNumberGetValue((CFNumberRef)v329, kCFNumberSInt32Type, v327);
        ++v328;
        v327 = (_OWORD *)((char *)v327 + 2);
        if (v330)
          continue;
      }
      goto LABEL_814;
    }
    v40 = 20;
LABEL_477:
    DWORD2(v378) = v40;
    v217 = (char *)valuePtr;
LABEL_808:
    v379 = v217;
    goto LABEL_809;
  }
  if (v5 <= 238)
  {
    switch(v5)
    {
      case 1:
        if (!v8)
          goto LABEL_814;
        if (CFStringGetLength((CFStringRef)v8) > 32)
          goto LABEL_814;
        if (CFStringGetLength((CFStringRef)v8) < 1)
          goto LABEL_814;
        memset(valuePtr, 0, 33);
        if (!CFStringGetCString((CFStringRef)v8, (char *)valuePtr, 33, 0x8000100u))
          goto LABEL_814;
        DWORD2(v378) = strlen((const char *)valuePtr);
        goto LABEL_408;
      case 2:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        valuePtr[0] = xmmword_2064BBAD0;
        v55 = (void *)CFDictionaryGetValue(v8, CFSTR("AUTH_LOWER"));
        value = v55;
        if (!v55)
          goto LABEL_847;
        if (!CFNumberGetValue((CFNumberRef)v55, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_847;
        v56 = (void *)CFDictionaryGetValue(v8, CFSTR("AUTH_UPPER"));
        value = v56;
        if (v56)
        {
          if (!CFNumberGetValue((CFNumberRef)v56, kCFNumberSInt32Type, (char *)valuePtr + 8))
            goto LABEL_847;
        }
        v57 = (void *)CFDictionaryGetValue(v8, CFSTR("AUTH_UPPER_EXT"));
        value = v57;
        if (v57)
        {
          if (!CFNumberGetValue((CFNumberRef)v57, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
            goto LABEL_847;
        }
        DWORD2(v378) = 16;
        v379 = (char *)valuePtr;
        goto LABEL_393;
      case 3:
        LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 148)
          goto LABEL_848;
        v58 = 148;
LABEL_750:
        DWORD2(v378) = v58;
        v379 = (char *)v8;
        goto LABEL_13;
      case 4:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        v59 = (void *)CFDictionaryGetValue(v8, CFSTR("CHANNEL"));
        value = v59;
        if (!v59)
          goto LABEL_847;
        valuePtr[0] = 1uLL;
        if (!CFNumberGetValue((CFNumberRef)v59, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v60 = (void *)CFDictionaryGetValue(v8, CFSTR("CHANNEL_FLAGS"));
        value = v60;
        if (v60)
        {
          v61 = kCFNumberSInt32Type;
LABEL_462:
          if (!CFNumberGetValue((CFNumberRef)v60, v61, (char *)valuePtr + 12))
            goto LABEL_814;
        }
        else
        {
          if (DWORD2(valuePtr[0]) >= 0xF)
            v338 = 18;
          else
            v338 = 10;
          HIDWORD(valuePtr[0]) = v338;
        }
        v40 = 16;
        goto LABEL_477;
      case 5:
      case 8:
      case 14:
      case 18:
      case 26:
      case 28:
      case 31:
      case 33:
      case 34:
      case 35:
      case 36:
      case 41:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 63:
      case 64:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 82:
      case 91:
      case 102:
      case 104:
        goto LABEL_10;
      case 6:
        if (!v8)
          goto LABEL_772;
        DWORD2(valuePtr[0]) = -1431655766;
        *(_QWORD *)&valuePtr[0] = 0xAAAAAAAA00000001;
        v62 = (void *)CFDictionaryGetValue(v8, CFSTR("PROTMODE"));
        value = v62;
        if (v62)
        {
          if (CFNumberGetValue((CFNumberRef)v62, kCFNumberSInt32Type, (char *)valuePtr + 4))
          {
            v63 = (void *)CFDictionaryGetValue(v8, CFSTR("PROTMODE_THRESHOLD"));
            value = v63;
            if (v63)
            {
              v64 = kCFNumberSInt32Type;
LABEL_475:
              if (CFNumberGetValue((CFNumberRef)v63, v64, (char *)valuePtr + 8))
                goto LABEL_476;
            }
          }
        }
        goto LABEL_814;
      case 7:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 0;
        if (!CFDictionaryGetValueIfPresent(v8, CFSTR("TX_POWER"), (const void **)&value))
          goto LABEL_847;
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)valuePtr + 8);
        if (!CFDictionaryGetValueIfPresent(v8, CFSTR("TX_POWER_UNIT"), (const void **)&value))
          goto LABEL_814;
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)valuePtr + 4);
LABEL_476:
        v40 = 12;
        goto LABEL_477;
      case 9:
        memset(valuePtr, 170, 18);
        if (!v8 || !CFStringGetCString((CFStringRef)v8, (char *)valuePtr, 18, 0x8000100u))
          goto LABEL_814;
        v65 = ether_aton((const char *)valuePtr);
        if (!v65)
          goto LABEL_866;
        DWORD2(v378) = 6;
        v379 = (char *)v65;
        goto LABEL_734;
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 20:
      case 21:
      case 23:
      case 27:
      case 30:
      case 38:
      case 40:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 48:
      case 49:
      case 50:
      case 53:
      case 54:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 83:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 92:
      case 93:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 103:
      case 105:
      case 106:
        goto LABEL_848;
      case 19:
        *(_QWORD *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_2064BB780;
        v66 = CFArrayGetCount(v8);
        if (v66 > 4)
          goto LABEL_814;
        v32 = v66;
        if (v66 < 1)
          goto LABEL_152;
        v67 = 0;
        v68 = (char *)valuePtr + 8;
        while (1)
        {
          value = (void *)CFArrayGetValueAtIndex(v8, v67);
          if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, v68))
            goto LABEL_814;
          ++v67;
          v68 += 4;
          if (v32 == v67)
            goto LABEL_152;
        }
      case 22:
        _WAPIStop(v6 + 4);
        if (!v8)
          goto LABEL_768;
        if (!v7)
          goto LABEL_772;
        *(_QWORD *)&valuePtr[0] = 0xAAAAAAAAAAAAAAAALL;
        v70 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("DISASSOC_REASON"));
        if (!v70)
          goto LABEL_772;
        CFNumberGetValue(v70, kCFNumberSInt32Type, (char *)valuePtr + 4);
        DWORD2(v378) = 8;
        v379 = (char *)valuePtr;
        goto LABEL_768;
      case 24:
        if (!v8)
          goto LABEL_767;
        v71 = v6;
        v72 = v8;
        v73 = 24;
        goto LABEL_161;
      case 25:
        v71 = v6;
        if (v8)
        {
          v72 = v8;
          v73 = 25;
LABEL_161:
          SensingRequest = _startAPMode(v71, v72, v73);
          goto LABEL_162;
        }
        _stopHostAPD(v6);
LABEL_767:
        DWORD1(v378) = 2;
LABEL_768:
        if (!Apple80211IOCTLSetWrapper())
          return 0;
LABEL_769:
        if (*__error() == 102 || *__error() == 6)
          goto LABEL_848;
        if (*__error() != 22)
          goto LABEL_815;
        goto LABEL_772;
      case 29:
        memset(buffer, 170, 16);
        memset(valuePtr, 170, 18);
        v74 = (void *)CFDictionaryGetValue(v8, CFSTR("DEAUTH_REASON"));
        value = v74;
        if (!v74)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v74, kCFNumberSInt32Type, &buffer[4]))
          goto LABEL_814;
        v75 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("DEAUTH_EA"));
        if (!v75 || !CFStringGetCString(v75, (char *)valuePtr, 18, 0x8000100u))
          goto LABEL_814;
        v76 = ether_aton((const char *)valuePtr);
        if (!v76)
          goto LABEL_866;
        v77 = *(_DWORD *)v76->octet;
        *(_WORD *)&buffer[12] = *(_WORD *)&v76->octet[4];
        *(_DWORD *)&buffer[8] = v77;
        *(_DWORD *)buffer = 1;
        DWORD2(v378) = 16;
        v78 = buffer;
LABEL_565:
        v379 = v78;
        goto LABEL_734;
      case 32:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        v79 = CFArrayGetCount(v8);
        *(_QWORD *)((char *)&valuePtr[11] + 4) = 0;
        *(_OWORD *)((char *)&valuePtr[10] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[9] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[8] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[7] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[6] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[5] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[4] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[3] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
        *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
        *(_OWORD *)((char *)valuePtr + 4) = 0u;
        LODWORD(valuePtr[0]) = 1;
        if (v79 < 1)
          goto LABEL_180;
        v80 = 0;
        v81 = &valuePtr[1];
        while (1)
        {
          v82 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v80);
          if (!v82)
            goto LABEL_814;
          v83 = v82;
          v84 = (void *)CFDictionaryGetValue(v82, CFSTR("RATESET_RATE"));
          value = v84;
          if (!v84)
            goto LABEL_814;
          if (!CFNumberGetValue((CFNumberRef)v84, kCFNumberSInt32Type, (char *)v81 - 4))
            goto LABEL_814;
          v85 = (void *)CFDictionaryGetValue(v83, CFSTR("RATESET_FLAGS"));
          value = v85;
          if (!v85 || !CFNumberGetValue((CFNumberRef)v85, kCFNumberSInt32Type, v81))
            goto LABEL_814;
          ++v80;
          v81 = (_OWORD *)((char *)v81 + 12);
          if (v79 == v80)
          {
LABEL_180:
            WORD2(valuePtr[0]) = v79;
            v69 = 188;
            goto LABEL_801;
          }
        }
      case 37:
      case 39:
        *(_QWORD *)&valuePtr[1] = 0;
        valuePtr[0] = xmmword_2064BB79C;
        v32 = CFArrayGetCount(v8);
        if (v32 < 1)
          goto LABEL_152;
        v33 = 0;
        v34 = (char *)valuePtr + 8;
        while (1)
        {
          v35 = (void *)CFArrayGetValueAtIndex(v8, v33);
          value = v35;
          if (!v35 || !CFNumberGetValue((CFNumberRef)v35, kCFNumberSInt32Type, v34))
            goto LABEL_814;
          ++v33;
          v34 += 4;
          if (v32 == v33)
          {
LABEL_152:
            DWORD1(valuePtr[0]) = v32;
            v69 = 24;
            goto LABEL_801;
          }
        }
      case 47:
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_848;
        memset(valuePtr, 170, sizeof(valuePtr));
        SensingRequest = _getBGScanData(v8, (char *)valuePtr, v6 + 88);
        if ((_DWORD)SensingRequest)
          goto LABEL_162;
        DWORD2(v378) = 8240;
        v379 = (char *)valuePtr;
LABEL_393:
        if (!Apple80211IOCTLSetWrapper())
          goto LABEL_846;
        if (*__error() == 102 || *__error() == 6)
          goto LABEL_812;
        if (*__error() == 22)
          goto LABEL_847;
        goto LABEL_815;
      case 51:
        *(_QWORD *)&valuePtr[0] = 0;
        LQMConfigFromDict = 4294963396;
        if (!v8 || !v7)
          goto LABEL_847;
        CFStringGetCString((CFStringRef)v8, (char *)valuePtr + 4, 3, 0x8000100u);
        LODWORD(valuePtr[0]) = 1;
LABEL_406:
        v31 = 8;
LABEL_407:
        DWORD2(v378) = v31;
LABEL_408:
        v379 = (char *)valuePtr;
        goto LABEL_809;
      case 61:
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 1;
        v86 = (void *)CFDictionaryGetValue(v8, CFSTR("MAX_FACTOR"));
        value = v86;
        if (!v86)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v86, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v87 = (void *)CFDictionaryGetValue(v8, CFSTR("MAX_DENSITY"));
        value = v87;
        if (!v87 || !CFNumberGetValue((CFNumberRef)v87, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        goto LABEL_192;
      case 62:
        *(_QWORD *)&valuePtr[0] = 1;
        v89 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("BA"));
        BoolRef = makeBoolRef(v89);
        if (!BoolRef)
          goto LABEL_814;
        BYTE4(valuePtr[0]) = CFBooleanGetValue(BoolRef) != 0;
        v91 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IMMEDIATE_BA"));
        if (!v91)
          goto LABEL_814;
        BYTE5(valuePtr[0]) = CFBooleanGetValue(v91) != 0;
        v92 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("CCBA"));
        if (!v92)
          goto LABEL_814;
        BYTE6(valuePtr[0]) = CFBooleanGetValue(v92) != 0;
        v93 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("IMPLICIT_BA"));
        if (!v93)
          goto LABEL_814;
        BYTE7(valuePtr[0]) = CFBooleanGetValue(v93) != 0;
        v14 = 8;
LABEL_467:
        DWORD2(v378) = v14;
        v379 = (char *)valuePtr;
        goto LABEL_734;
      case 65:
        valuePtr[0] = xmmword_2064BBAD0;
        v94 = (void *)CFDictionaryGetValue(v8, CFSTR("MODE"));
        value = v94;
        if (!v94)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v94, kCFNumberSInt32Type, (char *)valuePtr + 4))
          goto LABEL_814;
        v95 = (void *)CFDictionaryGetValue(v8, CFSTR("SUBMODE"));
        value = v95;
        if (!v95)
          goto LABEL_814;
        if (!CFNumberGetValue((CFNumberRef)v95, kCFNumberSInt32Type, (char *)valuePtr + 8))
          goto LABEL_814;
        v96 = (void *)CFDictionaryGetValue(v8, CFSTR("FLAGS"));
        value = v96;
        if (!v96
          || !CFNumberGetValue((CFNumberRef)v96, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          goto LABEL_814;
        }
        v88 = 16;
        goto LABEL_733;
      case 66:
        valuePtr[0] = xmmword_2064BBAD0;
        v97 = CFArrayGetCount(v8);
        *(_DWORD *)buffer = -1431655766;
        if (v97 < 1)
          goto LABEL_210;
        v98 = v97;
        v99 = 0;
        while (1)
        {
          v100 = (void *)CFArrayGetValueAtIndex(v8, v99);
          value = v100;
          if (!v100 || !CFNumberGetValue((CFNumberRef)v100, kCFNumberSInt32Type, buffer))
            goto LABEL_814;
          *((_BYTE *)valuePtr + *(_DWORD *)buffer / 8 + 4) |= 1 << (buffer[0] & 7);
          if (v98 == ++v99)
          {
LABEL_210:
            v69 = 16;
LABEL_801:
            DWORD2(v378) = v69;
            v379 = (char *)valuePtr;
            goto LABEL_809;
          }
        }
      case 69:
        v101 = malloc_type_malloc(0x3AD8uLL, 0x1000040BBD6A9C0uLL);
        LODWORD(valuePtr[0]) = -1431655766;
        if (!v101)
          return 4294963395;
        v102 = v101;
        *v101 = 1;
        v103 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("WOW_WAKE_CONDITIONS"));
        if (!v103)
          goto LABEL_219;
        v104 = v103;
        v105 = CFArrayGetCount(v103);
        if (v105 > 6)
          goto LABEL_223;
        v106 = v105;
        if (v105 < 1)
          goto LABEL_219;
        v107 = 0;
        do
        {
          value = (void *)CFArrayGetValueAtIndex(v104, v107);
          if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, valuePtr) || LODWORD(valuePtr[0]) > 5)
            goto LABEL_223;
          *((_BYTE *)v102 + 4) |= 1 << SLOBYTE(valuePtr[0]);
          ++v107;
        }
        while (v106 != v107);
LABEL_219:
        v108 = (void *)CFDictionaryGetValue(v8, CFSTR("WOW_BEACON_LOSS_TIME"));
        value = v108;
        if (v108 && !CFNumberGetValue((CFNumberRef)v108, kCFNumberSInt32Type, v102 + 2))
          goto LABEL_223;
        v109 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("WOW_PATTERNS"));
        if (!v109)
          goto LABEL_836;
        v110 = v109;
        v111 = CFArrayGetCount(v109);
        if (v111 > 10)
          goto LABEL_223;
        v356 = v111;
        if (v111 >= 1)
        {
          v357 = 0;
          v358 = v102 + 5;
          while (1)
          {
            v359 = (const __CFData *)CFArrayGetValueAtIndex(v110, v357);
            v360 = CFDataGetLength(v359);
            *(v358 - 1) = v360;
            if (v360 > 0x5DC)
              break;
            BytePtr = CFDataGetBytePtr(v359);
            memcpy(v358, BytePtr, 0x5DCuLL);
            ++v357;
            v358 += 376;
            if (v356 == v357)
              goto LABEL_835;
          }
LABEL_223:
          free(v102);
          return 4294963396;
        }
LABEL_835:
        v102[3] = v356;
LABEL_836:
        v362 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("WOW_ENABLE_LPAS"));
        if (v362)
          LODWORD(v362) = CFBooleanGetValue(v362);
        v102[3764] = (_DWORD)v362;
        v363 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("WOW_ENABLE_CAPTIVE"));
        if (v363)
          LODWORD(v363) = CFBooleanGetValue(v363);
        v102[3765] = (_DWORD)v363;
        DWORD2(v378) = 15064;
        v379 = (char *)v102;
        v364 = Apple80211RawSet();
        free(v102);
        if (!v364)
          goto LABEL_846;
        goto LABEL_810;
      case 80:
        DWORD2(valuePtr[0]) = 0;
        *(_QWORD *)&valuePtr[0] = 1;
        v112 = (void *)CFDictionaryGetValue(v8, CFSTR("ROAM_THRESH_RSSI"));
        value = v112;
        if (!v112)
          return 4294963396;
        if (!CFNumberGetValue((CFNumberRef)v112, kCFNumberSInt32Type, (char *)valuePtr + 4))
          return 4294963396;
        v113 = (void *)CFDictionaryGetValue(v8, CFSTR("ROAM_THRESH_RATE"));
        value = v113;
        if (!v113 || !CFNumberGetValue((CFNumberRef)v113, kCFNumberSInt32Type, (char *)valuePtr + 8))
          return 4294963396;
LABEL_192:
        v88 = 12;
        goto LABEL_733;
      case 81:
        LOBYTE(valuePtr[0]) = 0;
        v114 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("V_DBG_FLAG_ASSOC"));
        if (v114 && CFBooleanGetValue(v114))
        {
          LOBYTE(valuePtr[0]) = 1;
          v115 = 3;
        }
        else
        {
          v115 = 2;
        }
        v331 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("V_DBG_FLAG_CONNECTION"));
        if (v331 && CFBooleanGetValue(v331))
          LOBYTE(valuePtr[0]) = v115;
        v69 = 1;
        goto LABEL_801;
      case 84:
        LODWORD(valuePtr[1]) = 0;
        valuePtr[0] = xmmword_2064BB7B8;
        v116 = (void *)CFDictionaryGetValue(v8, CFSTR("LQ_RSSI_DIVISOR"));
        value = v116;
        if (!v116)
          return 4294963396;
        if (!CFNumberGetValue((CFNumberRef)v116, kCFNumberSInt32Type, (char *)valuePtr + 4))
          return 4294963396;
        v117 = (void *)CFDictionaryGetValue(v8, CFSTR("LQ_TX_RATE_DIVISOR"));
        value = v117;
        if (!v117)
          return 4294963396;
        if (!CFNumberGetValue((CFNumberRef)v117, kCFNumberSInt32Type, (char *)valuePtr + 8))
          return 4294963396;
        v118 = (void *)CFDictionaryGetValue(v8, CFSTR("LQ_EVENT_MIN_INTERVAL"));
        value = v118;
        if (!v118
          || !CFNumberGetValue((CFNumberRef)v118, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          return 4294963396;
        }
        goto LABEL_253;
      case 85:
        bzero((char *)valuePtr + 4, 0x810uLL);
        LODWORD(valuePtr[0]) = 1;
        v119 = (void *)CFDictionaryGetValue(v8, CFSTR("CUSTOM_IE_FRAME_TYPE"));
        value = v119;
        if (!v119)
          return 4294963396;
        if (!CFNumberGetValue((CFNumberRef)v119, kCFNumberSInt32Type, (char *)valuePtr + 4))
          return 4294963396;
        v120 = (const __CFBoolean *)CFDictionaryGetValue(v8, CFSTR("CUSTOM_IE_ADD"));
        if (!v120)
          return 4294963396;
        DWORD2(valuePtr[0]) = CFBooleanGetValue(v120) != 0;
        v121 = (void *)CFDictionaryGetValue(v8, CFSTR("CUSTOM_IE_SIG_LEN"));
        value = v121;
        if (!v121)
          return 4294963396;
        if (!CFNumberGetValue((CFNumberRef)v121, kCFNumberSInt32Type, (char *)valuePtr + 12))
          return 4294963396;
        v122 = (const __CFData *)CFDictionaryGetValue(v8, CFSTR("CUSTOM_IE_DATA"));
        if (!v122)
          return 4294963396;
        v123 = v122;
        LODWORD(valuePtr[1]) = CFDataGetLength(v122);
        CFDataGetBytePtr(v123);
        __memcpy_chk();
        v54 = 2068;
LABEL_109:
        DWORD2(v378) = v54;
        v379 = (char *)valuePtr;
        goto LABEL_809;
      case 94:
        valuePtr[0] = xmmword_2064BB7CC;
        valuePtr[1] = *(_OWORD *)algn_2064BB7DC;
        v124 = (void *)CFDictionaryGetValue(v8, CFSTR("VIRT_IF_ROLE"));
        value = v124;
        if (!v124
          || !CFNumberGetValue((CFNumberRef)v124, kCFNumberSInt32Type, (void *)((unint64_t)valuePtr | 0xC)))
        {
          CStringPtr = CFStringGetCStringPtr(CFSTR("VIRT_IF_ROLE"), 0x600u);
          syslog(3, "APPLE80211_IOC_VIRTUAL_IF_CREATE %s is invalid\n", CStringPtr);
          return 4294963396;
        }
        DWORD2(v378) = 32;
        v379 = (char *)valuePtr;
        v125 = Apple80211IOCTLSetWrapper();
        syslog(3, "APPLE80211_IOC_VIRTUAL_IF_CREATE bsdErr %d\n", v125);
        if (v125)
          goto LABEL_810;
        v126 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)&valuePtr[1], 0x8000100u);
        if (v126)
        {
          v127 = v126;
          CFDictionarySetValue(v8, CFSTR("VIRT_IF_NAME"), v126);
          CFRelease(v127);
          goto LABEL_846;
        }
        return 4294963395;
      case 95:
        LODWORD(valuePtr[1]) = 0;
        valuePtr[0] = xmmword_2064BB7EC;
        v128 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("VIRT_IF_NAME"));
        if (!v128 || !CFStringGetCString(v128, (char *)valuePtr + 4, 16, 0x8000100u))
          return 4294963396;
LABEL_253:
        v88 = 20;
LABEL_733:
        DWORD2(v378) = v88;
        v379 = (char *)valuePtr;
        goto LABEL_734;
      case 107:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0]) = 136315394;
          *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11883;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Processing APPLE80211_IOC_ROAM\n", (uint8_t *)valuePtr, 0x12u);
        }
        *(_DWORD *)&buffer[4] = 0;
        *(_DWORD *)buffer = 1;
        *(_DWORD *)&buffer[8] = -1;
        *(_QWORD *)&buffer[12] = 0xFFFFLL;
        if (v8)
        {
          v129 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("BSSID"));
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(valuePtr[0]) = 136315650;
            *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
            WORD6(valuePtr[0]) = 1024;
            *(_DWORD *)((char *)valuePtr + 14) = 11897;
            WORD1(valuePtr[1]) = 2048;
            *(_QWORD *)((char *)&valuePtr[1] + 4) = v129;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Processing APPLE80211_IOC_ROAM dataRef:%p\n", (uint8_t *)valuePtr, 0x1Cu);
          }
          if (!v129)
            goto LABEL_814;
          v130 = CFGetTypeID(v129);
          if (v130 == CFStringGetTypeID())
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136315394;
              *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11903;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : CFType is CFString\n", (uint8_t *)valuePtr, 0x12u);
            }
            memset(valuePtr, 170, 18);
            if (!CFStringGetCString(v129, (char *)valuePtr, 18, 0x8000100u))
              goto LABEL_814;
            v131 = ether_aton((const char *)valuePtr);
            if (!v131)
              goto LABEL_814;
            v132 = *(_DWORD *)v131->octet;
            *(_WORD *)&buffer[12] = *(_WORD *)&v131->octet[4];
            *(_DWORD *)&buffer[8] = v132;
          }
          else
          {
            v339 = CFGetTypeID(v129);
            TypeID = CFDataGetTypeID();
            v341 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
            if (v339 != TypeID)
            {
              if (!v341)
                goto LABEL_814;
              LODWORD(valuePtr[0]) = 136315394;
              *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11925;
              v336 = MEMORY[0x24BDACB70];
              v337 = "%s:%d WiFiRoam : Unexpected CFType\n";
              goto LABEL_825;
            }
            if (v341)
            {
              LODWORD(valuePtr[0]) = 136315394;
              *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11918;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : CFType is CFData\n", (uint8_t *)valuePtr, 0x12u);
            }
            if (CFDataGetLength((CFDataRef)v129) != 6)
              goto LABEL_814;
            v342 = CFDataGetBytePtr((CFDataRef)v129);
            v343 = *((_WORD *)v342 + 2);
            *(_DWORD *)&buffer[8] = *(_DWORD *)v342;
            *(_WORD *)&buffer[12] = v343;
          }
          v344 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("CHANNEL"));
          v345 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("BAND_FOR_CHANNEL"));
          v346 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("BAND_PREFERENCE"));
          v347 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("ROAM_FLAGS"));
          LOBYTE(v373) = 0;
          if (!v344)
          {
LABEL_792:
            if (v347)
            {
              CFNumberGetValue(v347, kCFNumberSInt32Type, &buffer[16]);
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(valuePtr[0]) = 136315650;
                *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
                WORD6(valuePtr[0]) = 1024;
                *(_DWORD *)((char *)valuePtr + 14) = 11958;
                WORD1(valuePtr[1]) = 1024;
                DWORD1(valuePtr[1]) = *(_DWORD *)&buffer[16];
                _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : roaming flags present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
              }
            }
            if ((_BYTE)v373)
              goto LABEL_796;
            if (!v346)
            {
              buffer[6] = 0;
LABEL_796:
              v157 = 20;
              goto LABEL_807;
            }
            LOBYTE(v372) = 0;
            CFNumberGetValue(v346, kCFNumberCharType, &v372);
            v355 = v372;
            if (v372 <= 4u)
            {
              buffer[7] = v372;
              buffer[6] = 1;
              buffer[4] = 0;
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(valuePtr[0]) = 136315650;
                *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
                WORD6(valuePtr[0]) = 1024;
                *(_DWORD *)((char *)valuePtr + 14) = 11975;
                WORD1(valuePtr[1]) = 1024;
                DWORD1(valuePtr[1]) = v355;
                _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Band present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
              }
              goto LABEL_796;
            }
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_814;
            LODWORD(valuePtr[0]) = 136315650;
            *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
            WORD6(valuePtr[0]) = 1024;
            *(_DWORD *)((char *)valuePtr + 14) = 11978;
            WORD1(valuePtr[1]) = 1024;
            DWORD1(valuePtr[1]) = buffer[7];
            v336 = MEMORY[0x24BDACB70];
            v337 = "%s:%d WiFiRoam : Invalid band in setRoam :%u \n";
            v353 = (char *)valuePtr;
            v354 = 24;
LABEL_826:
            _os_log_impl(&dword_20647D000, v336, OS_LOG_TYPE_DEFAULT, v337, (uint8_t *)v353, v354);
            goto LABEL_814;
          }
          CFNumberGetValue(v344, kCFNumberCharType, &v373);
          v348 = v373;
          if (!(_BYTE)v373 || !v346)
          {
            buffer[7] = v373;
            buffer[4] = 1;
            buffer[6] = 0;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0]) = 136315650;
              *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
              WORD6(valuePtr[0]) = 1024;
              *(_DWORD *)((char *)valuePtr + 14) = 11948;
              WORD1(valuePtr[1]) = 1024;
              DWORD1(valuePtr[1]) = v348;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Channel present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
            }
            if (v345)
            {
              CFNumberGetValue(v345, kCFNumberCharType, &buffer[5]);
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(valuePtr[0]) = 136315650;
                *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
                WORD6(valuePtr[0]) = 1024;
                *(_DWORD *)((char *)valuePtr + 14) = 11951;
                WORD1(valuePtr[1]) = 1024;
                DWORD1(valuePtr[1]) = buffer[5];
                _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d WiFiRoam : Band for the channel present in setRoam :%u \n", (uint8_t *)valuePtr, 0x18u);
              }
            }
            goto LABEL_792;
          }
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_814;
          LODWORD(valuePtr[0]) = 136315394;
          *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11944;
          v336 = MEMORY[0x24BDACB70];
          v337 = "%s:%d WiFiRoam : Invalid config. Contains both channel and band. Exiting!\n";
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_814;
          LODWORD(valuePtr[0]) = 136315394;
          *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
          WORD6(valuePtr[0]) = 1024;
          *(_DWORD *)((char *)valuePtr + 14) = 11988;
          v336 = MEMORY[0x24BDACB70];
          v337 = "%s:%d WiFiRoam : Null request dictionary! \n";
        }
LABEL_825:
        v353 = (char *)valuePtr;
        v354 = 18;
        goto LABEL_826;
      default:
        if (v5 != 216)
          goto LABEL_848;
        SensingRequest = (uint64_t)_setRoamProfile(v6, (uint64_t)&v377, v8);
        goto LABEL_162;
    }
  }
  if (v5 > 254)
  {
    switch(v5)
    {
      case 255:
        SensingRequest = _setUCMProfile(v6, (uint64_t)&v377, v8);
        goto LABEL_162;
      case 256:
        LODWORD(valuePtr[0]) = -1431655766;
        if (!v8)
          goto LABEL_814;
        value = v8;
        if (!CFNumberGetValue(v8, kCFNumberIntType, valuePtr))
          goto LABEL_814;
        DWORD1(v378) = valuePtr[0];
LABEL_734:
        if (!Apple80211IOCTLSetWrapper())
          goto LABEL_846;
LABEL_735:
        if (*__error() != 102 && *__error() != 6)
          goto LABEL_813;
        goto LABEL_847;
      case 257:
      case 259:
      case 262:
      case 263:
        goto LABEL_848;
      case 258:
      case 261:
      case 264:
      case 265:
        goto LABEL_10;
      case 260:
        SensingRequest = _set2GChainDisable(v6, (uint64_t)&v377, v8);
        goto LABEL_162;
      default:
        if (v5 != 336)
          goto LABEL_848;
LABEL_10:
        LQMConfigFromDict = 4294963396;
        if (!v8 || v7 != 4)
          goto LABEL_848;
        DWORD1(v378) = *(_DWORD *)v8;
LABEL_13:
        if (!Apple80211IOCTLSetWrapper())
          return 0;
        if (*__error() == 102 || *__error() == 6)
        {
          LQMConfigFromDict = 4294963393;
          goto LABEL_848;
        }
        if (*__error() != 22)
          goto LABEL_815;
        goto LABEL_848;
    }
  }
  if (v5 != 239)
  {
    if (v5 == 241)
    {
      memcpy(valuePtr, &unk_2064BB078, 0x708uLL);
      SensingRequest = _getRangingPeerRequest(v8, (char *)valuePtr);
      if ((_DWORD)SensingRequest)
      {
LABEL_162:
        LQMConfigFromDict = SensingRequest;
        if (!(_DWORD)SensingRequest)
          return LQMConfigFromDict;
        goto LABEL_848;
      }
      *(_QWORD *)((char *)&v378 + 4) = v9 | 0x70800000000;
      v379 = (char *)valuePtr;
LABEL_845:
      if (Apple80211RawSet())
        goto LABEL_810;
      goto LABEL_846;
    }
    if (v5 != 245)
      goto LABEL_848;
    bzero((char *)valuePtr + 4, 0x4D8uLL);
    LODWORD(valuePtr[0]) = 2;
    v15 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("LEAKY_AP_SSID"));
    if (!v15)
      goto LABEL_814;
    v16 = v15;
    if (CFEqual(v15, &stru_24BF1D4F8)
      || CFStringGetLength(v16) > 31
      || !CFStringGetCString(v16, (char *)valuePtr + 8, 32, 0x8000100u))
    {
      goto LABEL_814;
    }
    DWORD1(valuePtr[0]) = CFStringGetLength(v16);
    v17 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("LEAKY_AP_LEARNED_DATA_ARRAY"));
    if (v17)
    {
      v18 = v17;
      v19 = CFArrayGetCount(v17);
      memset(buffer, 170, 18);
      v20 = v19 - 1;
      if (v19 >= 1)
      {
        v21 = 0;
        if (v20 >= 9)
          v20 = 9;
        v370 = v20;
        v22 = v20 + 1;
        v23 = (UInt8 *)&valuePtr[5] + 12;
        while (1)
        {
          v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v21);
          v25 = (const __CFString *)CFDictionaryGetValue(v24, CFSTR("LEAKY_AP_BSSID"));
          if (!v25 || !CFStringGetCString(v25, buffer, 18, 0x8000100u))
            goto LABEL_814;
          v26 = ether_aton(buffer);
          if (!v26)
          {
LABEL_866:
            LQMConfigFromDict = 4294963395;
            goto LABEL_848;
          }
          v27 = *(_DWORD *)v26->octet;
          *((_WORD *)v23 - 2) = *(_WORD *)&v26->octet[4];
          *((_DWORD *)v23 - 2) = v27;
          v28 = (const __CFData *)CFDictionaryGetValue(v24, CFSTR("LEAKY_AP_LEARNED_DATA"));
          if (!v28)
            goto LABEL_814;
          v29 = v28;
          if (CFDataGetLength(v28) != 72)
            goto LABEL_814;
          v381.location = 0;
          v381.length = 72;
          CFDataGetBytes(v29, v381, v23);
          ++v21;
          v23 += 120;
          if (v22 == v21)
          {
            v30 = v370 + 1;
            goto LABEL_862;
          }
        }
      }
    }
    v30 = 0;
LABEL_862:
    DWORD2(valuePtr[2]) = v30;
    v40 = 1244;
    goto LABEL_477;
  }
  LODWORD(valuePtr[0]) = 1;
  *(_OWORD *)((char *)valuePtr + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[1] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[2] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[3] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[4] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[5] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[6] + 4) = 0u;
  *(_OWORD *)((char *)&valuePtr[7] + 4) = 0u;
  if (v8)
  {
    v51 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("CHIP_RESET_TRIGGER"));
    if (!v51)
      return 4294963396;
    v52 = v51;
    if (CFStringGetLength(v51) > 128)
      return 4294963396;
    CFStringGetCStringPtr(v52, 0);
    CFStringGetLength(v52);
    __memcpy_chk();
  }
  v53 = 132;
LABEL_373:
  DWORD2(v378) = v53;
  v379 = (char *)valuePtr;
LABEL_809:
  if (Apple80211IOCTLSetWrapper())
  {
LABEL_810:
    if (*__error() == 102 || *__error() == 6)
    {
LABEL_812:
      LQMConfigFromDict = 4294963393;
      goto LABEL_848;
    }
LABEL_813:
    if (*__error() != 22)
    {
LABEL_815:
      LQMConfigFromDict = *__error();
      if (!(_DWORD)LQMConfigFromDict)
        return LQMConfigFromDict;
      goto LABEL_848;
    }
LABEL_814:
    LQMConfigFromDict = 4294963396;
LABEL_848:
    v365 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v366 = (const char *)(v6 + 4);
      if (!v6)
        v366 = "INVALID";
      if (v5 > 556)
      {
        v367 = "Error Invalid ioctl";
      }
      else if (v5 == -1)
      {
        v367 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if (v5 < 0 || (v367 = (const char *)gAppleIoucIndexToString[v5]) == 0)
      {
        v367 = "unknown Apple80211_IOC_";
      }
      LODWORD(valuePtr[0]) = 136448258;
      *(_QWORD *)((char *)valuePtr + 4) = "Apple80211SetWithIOCTL";
      WORD6(valuePtr[0]) = 1024;
      *(_DWORD *)((char *)valuePtr + 14) = 15226;
      WORD1(valuePtr[1]) = 2048;
      *(_QWORD *)((char *)&valuePtr[1] + 4) = v365 / 0x3B9ACA00;
      WORD6(valuePtr[1]) = 2048;
      *(_QWORD *)((char *)&valuePtr[1] + 14) = v365 % 0x3B9ACA00 / 0x3E8;
      WORD3(valuePtr[2]) = 2082;
      *((_QWORD *)&valuePtr[2] + 1) = v366;
      LOWORD(valuePtr[3]) = 1024;
      *(_DWORD *)((char *)&valuePtr[3] + 2) = v5;
      WORD3(valuePtr[3]) = 2082;
      *((_QWORD *)&valuePtr[3] + 1) = v367;
      LOWORD(valuePtr[4]) = 1024;
      *(_DWORD *)((char *)&valuePtr[4] + 2) = LQMConfigFromDict;
      WORD3(valuePtr[4]) = 1024;
      DWORD2(valuePtr[4]) = LQMConfigFromDict;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s:%u @[%llu.%06llu] ifname['%{public}s'] IOCTL type %d/'%{public}s' return %d/0x%08x\n", (uint8_t *)valuePtr, 0x4Cu);
    }
    return LQMConfigFromDict;
  }
LABEL_846:
  LQMConfigFromDict = 0;
LABEL_847:
  if ((_DWORD)LQMConfigFromDict)
    goto LABEL_848;
  return LQMConfigFromDict;
}

uint64_t Apple80211EventMonitoringInit(_DWORD *a1, uint64_t a2, uint64_t a3, __CFRunLoop *a4)
{
  CFSocketNativeHandle v8;
  uint64_t v9;
  int inited;
  CFAllocatorRef *v11;
  CFRunLoopMode *v12;
  int v13;
  const __CFAllocator *v14;
  __CFSocket *v15;
  __CFRunLoopSource *RunLoopSource;
  const __CFAllocator *v17;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v19;
  const __CFString *v20;
  CFAbsoluteTime v21;
  __CFRunLoopTimer *v22;
  __CFSocket *v24;
  CFSocketContext context;
  uint64_t v26;
  int v27;
  uint8_t v28[4];
  const char *v29;
  CFRunLoopTimerContext buf;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.version) = 136315394;
    *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"Apple80211EventMonitoringInit";
    WORD2(buf.info) = 2048;
    *(void **)((char *)&buf.info + 6) = a1;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: opaque=%p\n", (uint8_t *)&buf, 0x16u);
  }
  v27 = 1;
  v26 = 0x600000001;
  buf.version = 0;
  memset(&buf.retain, 0, 24);
  buf.info = a1;
  v8 = -1;
  v9 = 4294963396;
  if (a1 && a2 && (*a1 & 0x80000000) == 0 && *((_BYTE *)a1 + 4))
  {
    if (*((_QWORD *)a1 + 228) || *((_QWORD *)a1 + 8) || *((_QWORD *)a1 + 7))
      Apple80211EventMonitoringHalt((uint64_t)a1);
    inited = Apple80211EventMonitoringInitIOUC((uint64_t)a1, 0, a4);
    v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    v12 = (CFRunLoopMode *)MEMORY[0x24BDBD5A0];
    if (!inited)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v28 = 136315138;
        v29 = "Apple80211EventMonitoringInit";
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Using IOUC event pipe\n", v28, 0xCu);
      }
      v9 = 0;
      goto LABEL_20;
    }
    v13 = socket(32, 3, 1);
    v8 = v13;
    if (v13 < 0 || ioctl(v13, 0x800C6502uLL, &v26))
    {
      v9 = *__error();
    }
    else
    {
      context.version = 0;
      memset(&context.retain, 0, 24);
      context.info = a1;
      v14 = *v11;
      v15 = CFSocketCreateWithNative(*v11, v8, 1uLL, (CFSocketCallBack)_eventReadCallbackCF, &context);
      *((_QWORD *)a1 + 7) = v15;
      if (v15)
      {
        RunLoopSource = CFSocketCreateRunLoopSource(v14, v15, 0);
        if (RunLoopSource)
        {
          v9 = (uint64_t)RunLoopSource;
          CFRunLoopAddSource(a4, RunLoopSource, *v12);
LABEL_20:
          v17 = *v11;
          Current = CFAbsoluteTimeGetCurrent();
          v19 = CFRunLoopTimerCreate(v17, Current + 315360000.0, 0.2, 0, 0, (CFRunLoopTimerCallBack)_asyncAssocRetryCallback, &buf);
          *((_QWORD *)a1 + 196) = v19;
          v20 = *v12;
          CFRunLoopAddTimer(a4, v19, v20);
          v21 = CFAbsoluteTimeGetCurrent();
          v22 = CFRunLoopTimerCreate(v17, v21 + 315360000.0, 0.2, 0, 0, (CFRunLoopTimerCallBack)_asyncScanRetryCallback, &buf);
          *((_QWORD *)a1 + 31) = v22;
          CFRunLoopAddTimer(a4, v22, v20);
          *((_QWORD *)a1 + 9) = a2;
          *((_QWORD *)a1 + 10) = a3;
          if (v9)
          {
            CFRelease((CFTypeRef)v9);
            return 0;
          }
          return v9;
        }
      }
      v9 = 4294963395;
    }
  }
  if (a1)
  {
    if ((_DWORD)v9)
    {
      v24 = (__CFSocket *)*((_QWORD *)a1 + 7);
      if (v24)
      {
        CFSocketInvalidate(v24);
        CFRelease(*((CFTypeRef *)a1 + 7));
        *((_QWORD *)a1 + 7) = 0;
      }
    }
  }
  if ((_DWORD)v9 && (v8 & 0x80000000) == 0)
    close(v8);
  return v9;
}

uint64_t Apple80211EventMonitoringHalt(uint64_t a1)
{
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294963396;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 2080));
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = __Apple80211EventMonitoringHalt_block_invoke;
  v3[3] = &__block_descriptor_tmp_62;
  v3[4] = a1;
  return _Apple80211EventMonitoringHalt2(a1, (uint64_t)v3);
}

uint64_t Apple80211EventMonitoringInitIOUC(uint64_t a1, NSObject *a2, __CFRunLoop *a3)
{
  mach_port_t v6;
  kern_return_t v7;
  _BOOL4 v8;
  const char *v9;
  int v10;
  IONotificationPort *v11;
  mach_port_t MachPort;
  mach_port_t v13;
  IONotificationPort *v14;
  _QWORD *v15;
  NSObject *v16;
  const char *v17;
  __CFRunLoopSource *RunLoopSource;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  mach_port_t v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint32_t v31;
  int v33;
  NSObject *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  mach_port_t v40;
  int v41;
  size_t outputStructCnt;
  uint64_t v43;
  uint64_t v44;
  uint64_t reference[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  mach_port_t v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  outputStructCnt = 0xAAAAAAAAAAAAAAAALL;
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)reference = 0u;
  v46 = 0u;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v50 = "Apple80211EventMonitoringInitIOUC";
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Enter\n", buf, 0xCu);
  }
  if (!a1 || (v6 = *(_DWORD *)(a1 + 1804)) == 0 || !((unint64_t)a2 | (unint64_t)a3))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v50 = "Apple80211EventMonitoringInitIOUC";
      v51 = 2080;
      v52 = a1 + 4;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: no user client connected for %s", buf, 0x16u);
    }
    return 4294963396;
  }
  outputStructCnt = 1;
  v7 = IOConnectCallStructMethod(v6, 5u, 0, 0, (void *)(a1 + 1808), &outputStructCnt);
  v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v8)
      return 4294963393;
    *(_DWORD *)buf = 136315650;
    v50 = "Apple80211EventMonitoringInitIOUC";
    v51 = 2080;
    v52 = a1 + 4;
    v53 = 1024;
    LODWORD(v54) = v7;
    v16 = MEMORY[0x24BDACB70];
    v17 = "%s: useIOUCEventPipe query failed for %s with %d";
    v31 = 28;
    goto LABEL_34;
  }
  if (v8)
  {
    v9 = "TRUE";
    v10 = *(unsigned __int8 *)(a1 + 1808);
    v50 = "Apple80211EventMonitoringInitIOUC";
    *(_DWORD *)buf = 136315650;
    v51 = 2080;
    if (!v10)
      v9 = "FALSE";
    v52 = a1 + 4;
    v53 = 2080;
    v54 = v9;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %s useIOUCEventPipe %s", buf, 0x20u);
  }
  if (!*(_BYTE *)(a1 + 1808))
    return 4294963393;
  v11 = IONotificationPortCreate(*MEMORY[0x24BDD8B18]);
  *(_QWORD *)(a1 + 1824) = v11;
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v50 = "Apple80211EventMonitoringInitIOUC";
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: failed to create port\n", buf, 0xCu);
    }
    return 4294963395;
  }
  MachPort = IONotificationPortGetMachPort(v11);
  if (!MachPort)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v50 = "Apple80211EventMonitoringInitIOUC";
      v51 = 2080;
      v52 = a1 + 4;
      v16 = MEMORY[0x24BDACB70];
      v17 = "%s: IONotificationPortGetMachPort failed for %s\n";
LABEL_33:
      v31 = 22;
LABEL_34:
      _os_log_impl(&dword_20647D000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, v31);
    }
    return 4294963393;
  }
  v13 = MachPort;
  v14 = *(IONotificationPort **)(a1 + 1824);
  if (a2)
  {
    IONotificationPortSetDispatchQueue(v14, a2);
    *(_QWORD *)(a1 + 1816) = a2;
    v15 = (_QWORD *)(a1 + 1920);
  }
  else
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v14);
    if (!RunLoopSource)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v50 = "Apple80211EventMonitoringInitIOUC";
        v51 = 2080;
        v52 = a1 + 4;
        v16 = MEMORY[0x24BDACB70];
        v17 = "%s: Failed to create RunLoopSource for %s\n";
        goto LABEL_33;
      }
      return 4294963393;
    }
    CFRunLoopAddSource(a3, RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    *(_QWORD *)(a1 + 1920) = a3;
    v15 = (_QWORD *)(a1 + 1816);
  }
  *v15 = 0;
  if (IOConnectCallStructMethod(*(_DWORD *)(a1 + 1804), 3u, 0, 0, 0, 0))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v50 = "Apple80211EventMonitoringInitIOUC";
      v51 = 2080;
      v52 = a1 + 4;
      v16 = MEMORY[0x24BDACB70];
      v17 = "%s: Failed to init event monitoring in IOUC for %s\n";
      goto LABEL_33;
    }
    return 4294963393;
  }
  v43 = 0;
  v44 = 0;
  v19 = (_DWORD *)MEMORY[0x24BDAEC58];
  v20 = MEMORY[0x20BCF65A4](*(unsigned int *)(a1 + 1804), 1, *MEMORY[0x24BDAEC58], &v44, &v43, 4097);
  if (v20)
  {
    v33 = v20;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v50 = (const char *)(a1 + 4);
      v34 = MEMORY[0x24BDACB70];
      v35 = "Failed to get Ring buffer address for %s\n";
LABEL_49:
      _os_log_impl(&dword_20647D000, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 0xCu);
    }
LABEL_50:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v36 = *(const char **)(a1 + 1872);
      v37 = *(_QWORD *)(a1 + 1880);
      v38 = *(_QWORD *)(a1 + 1904);
      v39 = *(_QWORD *)(a1 + 1912);
      v40 = *(_DWORD *)(a1 + 1888);
      v41 = *(_DWORD *)(a1 + 1892);
      *(_DWORD *)buf = 136317186;
      v50 = "_createMemoryMappings";
      v51 = 2080;
      v52 = a1 + 4;
      v53 = 2048;
      v54 = v36;
      v55 = 2048;
      v56 = v37;
      v57 = 2048;
      v58 = v38;
      v59 = 2048;
      v60 = v39;
      v61 = 1024;
      v62 = v40;
      v63 = 1024;
      v64 = v41;
      v65 = 1024;
      v66 = v33;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %s FAILED: mapped buffer info: ringBuffer: ringBuffer[0x%llx] ringSize[0x%llx], ringState: ringState[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x] retVal[0x%08x]\n", buf, 0x50u);
    }
    v30 = 4294963395;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v50 = "Apple80211EventMonitoringInitIOUC";
      v51 = 2080;
      v52 = a1 + 4;
      v53 = 1024;
      LODWORD(v54) = -3901;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Failed to create memory mappings for %s, err[0x%08x]\n", buf, 0x1Cu);
    }
    return v30;
  }
  v22 = v43;
  v21 = v44;
  *(_QWORD *)(a1 + 1832) = v44;
  *(_QWORD *)(a1 + 1840) = v22;
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a1 + 1804);
  *(_DWORD *)(a1 + 1860) = *v19;
  *(_DWORD *)(a1 + 1864) = 1;
  *(_QWORD *)(a1 + 1880) = v22;
  *(_QWORD *)(a1 + 1872) = v21;
  v23 = MEMORY[0x20BCF65A4]();
  if (v23)
  {
    v33 = v23;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v50 = (const char *)(a1 + 4);
      v34 = MEMORY[0x24BDACB70];
      v35 = "Failed to get Ring state address for %s\n";
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  v24 = v44;
  *(_QWORD *)(a1 + 1848) = v44;
  v25 = *(_DWORD *)(a1 + 1804);
  *(_DWORD *)(a1 + 1888) = v25;
  v26 = *v19;
  *(_DWORD *)(a1 + 1892) = v26;
  *(_DWORD *)(a1 + 1896) = 2;
  v27 = v43;
  *(_QWORD *)(a1 + 1912) = v43;
  *(_QWORD *)(a1 + 1904) = v24;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(const char **)(a1 + 1872);
    v29 = *(_QWORD *)(a1 + 1880);
    *(_DWORD *)buf = 136316930;
    v50 = "_createMemoryMappings";
    v51 = 2080;
    v52 = a1 + 4;
    v53 = 2048;
    v54 = v28;
    v55 = 2048;
    v56 = v29;
    v57 = 2048;
    v58 = v24;
    v59 = 2048;
    v60 = v27;
    v61 = 1024;
    v62 = v25;
    v63 = 1024;
    v64 = v26;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %s mapped buffer info: ringBuffer: ringBuffer[0x%llx] ringSize[0x%llx], ringState: ringState[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x]\n", buf, 0x4Au);
    v25 = *(_DWORD *)(a1 + 1804);
  }
  reference[0] = v13;
  reference[1] = (uint64_t)Apple80211EventMonitoringHelper;
  *(_QWORD *)&v46 = a1;
  if (!IOConnectCallAsyncMethod(v25, 2u, v13, reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0))
    return 0;
  v30 = 0;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v50 = "Apple80211EventMonitoringInitIOUC";
    v51 = 2080;
    v52 = a1 + 4;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: IOConnectCallAsyncMethod failed for %s\n", buf, 0x16u);
    return 0;
  }
  return v30;
}

void _eventReadCallbackCF()
{
  __CFSocket *v0;
  uint64_t v1;
  uint64_t v2;
  CFSocketNativeHandle Native;
  int v4;
  int v5[1030];
  uint64_t v6;

  v0 = (__CFSocket *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v6 = *MEMORY[0x24BDAC8D0];
  Native = CFSocketGetNative(v0);
  if (v2 && *(_QWORD *)(v2 + 72))
  {
    v4 = Native;
    memset(v5, 170, sizeof(v5));
    if ((int)read(v4, v5, 0x1018uLL) >= 24)
      _eventRead(v2, v5);
  }
}

void _asyncAssocRetryCallback(uint64_t a1, uint64_t a2)
{
  _dispatchAsyncAssocEvent(a2, 0, 0, 0);
}

void _asyncScanRetryCallback(uint64_t a1, uint64_t a2)
{
  _dispatchAsyncScanEvent(a2, 0, 0);
}

void _asyncAssocRetryCallback2(uint64_t a1)
{
  _dispatchAsyncAssocEvent(a1, 0, 0, 0);
}

void _asyncScanRetryCallback2(uint64_t a1)
{
  _dispatchAsyncScanEvent(a1, 0, 0);
}

uint64_t Apple80211RawEventMonitoringInit(uint64_t a1, NSObject *a2, const void *a3)
{
  void *v6;
  uint64_t v7;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136315394;
    v10 = "Apple80211RawEventMonitoringInit";
    v11 = 2048;
    v12 = a1;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: opaque=%p\n", (uint8_t *)&v9, 0x16u);
  }
  v6 = _Block_copy(a3);
  v7 = Apple80211EventMonitoringInit2((_DWORD *)a1, (uint64_t)_eventBlockCallback, (uint64_t)v6, a2);
  if ((_DWORD)v7)
  {
    if (!v6)
      return v7;
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 51) = 1;
  if (v6 && *(_BYTE *)(a1 + 107))
LABEL_6:
    _Block_release(v6);
  return v7;
}

uint64_t Apple80211RawEventMonitoringInitWithCFRunLoop(uint64_t a1, __CFRunLoop *a2, void *aBlock)
{
  void *v5;
  uint64_t v6;

  v5 = _Block_copy(aBlock);
  v6 = Apple80211EventMonitoringInit((_DWORD *)a1, (uint64_t)_eventBlockCallback, (uint64_t)v5, a2);
  if ((_DWORD)v6)
  {
    if (!v5)
      return v6;
    goto LABEL_4;
  }
  *(_BYTE *)(a1 + 51) = 1;
  if (v5 && *(_BYTE *)(a1 + 107))
LABEL_4:
    _Block_release(v5);
  return v6;
}

uint64_t Apple80211RawP2PEventMonitoringInit(uint64_t a1, NSObject *a2, const void *a3)
{
  uint64_t result;
  void *v7;

  if (!*(_QWORD *)(a1 + 1824) && !*(_QWORD *)(a1 + 64) && !*(_QWORD *)(a1 + 56)
    || (result = Apple80211EventMonitoringHalt(a1), !(_DWORD)result))
  {
    result = Apple80211EventMonitoringInitIOUC(a1, a2, 0);
    if (!(_DWORD)result)
    {
      v7 = _Block_copy(a3);
      result = 0;
      *(_QWORD *)(a1 + 72) = _eventBlockCallback;
      *(_QWORD *)(a1 + 80) = v7;
      *(_WORD *)(a1 + 51) = 257;
    }
  }
  return result;
}

uint64_t Apple80211RawStartMonitoringEventAll(uint64_t a1)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)(a1 + 56) && !*(_QWORD *)(a1 + 64) && !*(_QWORD *)(a1 + 1824))
    return 4294963396;
  result = 0;
  *(_BYTE *)(a1 + 52) = 1;
  return result;
}

uint64_t Apple80211EventSocketRef(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

uint64_t Apple80211Open(_QWORD *a1)
{
  char *v2;
  char *v3;
  int v4;
  dispatch_group_t v5;
  dispatch_queue_t v6;
  uint64_t v7;

  if (!a1)
    return 4294963396;
  v2 = (char *)malloc_type_malloc(0x828uLL, 0x10E004039282538uLL);
  v3 = v2;
  if (!v2)
  {
    v7 = 4294963395;
    goto LABEL_7;
  }
  bzero(v2, 0x828uLL);
  os_parse_boot_arg_int();
  v4 = socket(2, 2, 0);
  *(_DWORD *)v3 = v4;
  if (v4 < 0)
  {
    v7 = *__error();
    if (!(_DWORD)v7)
      return v7;
    goto LABEL_13;
  }
  pthread_mutex_init((pthread_mutex_t *)(v3 + 160), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 272), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 1592), 0);
  pthread_mutex_init((pthread_mutex_t *)v3 + 26, 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 1736), 0);
  v5 = dispatch_group_create();
  *((_QWORD *)v3 + 260) = v5;
  if (!v5
    || (v6 = dispatch_queue_create("com.apple.wifi.apple80211.finalizer", 0), (*((_QWORD *)v3 + 259) = v6) == 0))
  {
    v7 = 4294963395;
LABEL_13:
    free(v3);
    v3 = 0;
    goto LABEL_7;
  }
  dispatch_group_enter(*((dispatch_group_t *)v3 + 260));
  v7 = 0;
LABEL_7:
  *a1 = v3;
  return v7;
}

uint64_t Apple80211Close(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294963396;
  if (*(_QWORD *)(a1 + 1952))
    v2 = *(NSObject **)(a1 + 1952);
  else
    v2 = *(NSObject **)(a1 + 2072);
  v3 = *(NSObject **)(a1 + 2080);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = __Apple80211Close_block_invoke;
  v5[3] = &__block_descriptor_tmp_65;
  v5[4] = a1;
  dispatch_group_notify(v3, v2, v5);
  if (*(_QWORD *)(a1 + 1824) || *(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 56))
    Apple80211EventMonitoringHalt(a1);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 2080));
  return 0;
}

uint64_t Apple80211BindToInterfaceWithParams(_QWORD *a1, __CFString *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v10;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v12 = 136315138;
    v13 = "Apple80211BindToInterfaceWithParams";
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Enter:%s: ", (uint8_t *)&v12, 0xCu);
  }
  v10 = 4294963396;
  if (a1 && a2)
  {
    a1[242] = a3;
    a1[243] = a4;
    a1[244] = a5;
    if (a5)
      dispatch_retain(a5);
    v10 = Apple80211BindToInterface((uint64_t)a1, a2);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v12 = 136315394;
      v13 = "Apple80211BindToInterfaceWithParams";
      v14 = 1024;
      v15 = v10;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Exit: %s err:%d", (uint8_t *)&v12, 0x12u);
    }
  }
  return v10;
}

uint64_t Apple80211BindToInterface(uint64_t a1, __CFString *a2)
{
  uint64_t result;
  io_registry_entry_t Service;
  io_object_t v6;
  const __CFString *v7;
  const __CFString *v8;
  CFComparisonResult v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = 4294963396;
  if (a1 && a2)
  {
    Service = _Apple80211FindService(a2);
    if (Service)
    {
      v6 = Service;
      v7 = (const __CFString *)_copyStringRegistryPropertyFor(Service, CFSTR("IO80211VirtualInterfaceRole"));
      if (v7 && (v8 = v7, v9 = CFStringCompare(v7, CFSTR("AirLink"), 0), CFRelease(v8), v9 == kCFCompareEqualTo))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v11 = 136446466;
          v12 = "Apple80211BindToInterface";
          v13 = 2112;
          v14 = a2;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: %@ using compatibility mode\n", (uint8_t *)&v11, 0x16u);
        }
        if (CFStringGetCString(a2, (char *)(a1 + 4), 16, 0x8000100u))
        {
          result = 0;
          *(_BYTE *)(a1 + 107) = 1;
        }
        else
        {
          return 4294963396;
        }
      }
      else
      {
        v10 = Apple80211BindToInterfaceWithService();
        IOObjectRelease(v6);
        return v10;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v11 = 136446466;
        v12 = "Apple80211BindToInterface";
        v13 = 2112;
        v14 = a2;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: %@ Failed to find matching service in IORegistry\n", (uint8_t *)&v11, 0x16u);
      }
      return 4294963393;
    }
  }
  return result;
}

uint64_t Apple80211GetIOReportingService(io_registry_entry_t *a1)
{
  const __CFDictionary *v1;
  io_object_t v2;
  io_registry_entry_t v3;
  const __CFAllocator *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFTypeID v7;
  const __CFString *v8;
  CFTypeID v9;
  NSObject *v10;
  const char *v11;
  __CFDictionary *v12;
  io_object_t v13;
  const __CFAllocator *v14;
  NSObject *v15;
  const __CFString *v16;
  CFTypeID v17;
  CFTypeRef v18;
  _BOOL4 v19;
  __CFDictionary *v20;
  const __CFAllocator *v21;
  NSObject *v22;
  const __CFString *v23;
  CFTypeID v24;
  CFTypeRef v25;
  _BOOL4 v26;
  NSObject *v27;
  const char *v28;
  const __CFString *v29;
  uint64_t result;
  NSObject *v31;
  const char *v32;
  io_iterator_t existing;
  mach_port_t mainPort;
  uint8_t buf[8];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  existing = 0;
  mainPort = -1431655766;
  if (MEMORY[0x20BCF65C8](0, &mainPort))
  {
    v3 = 0;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    *(_WORD *)buf = 0;
    v31 = MEMORY[0x24BDACB70];
    v32 = "IOMainPort failed";
LABEL_72:
    _os_log_impl(&dword_20647D000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 2u);
    v3 = 0;
    goto LABEL_57;
  }
  v1 = IOServiceMatching("IO80211Controller");
  if (IOServiceGetMatchingServices(mainPort, v1, &existing))
  {
    v3 = 0;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    *(_WORD *)buf = 0;
    v31 = MEMORY[0x24BDACB70];
    v32 = "IOServiceGetMatchingServices failed";
    goto LABEL_72;
  }
  if (existing)
  {
    v2 = IOIteratorNext(existing);
    if (v2)
    {
      v3 = v2;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      do
      {
        v5 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", CFSTR("IOClass"), v4, 3u);
        if (v5)
        {
          v6 = v5;
          v7 = CFGetTypeID(v5);
          if (v7 == CFStringGetTypeID())
          {
            if (CFStringCompare(v6, CFSTR("ACIWiFiDriver"), 0) == kCFCompareEqualTo)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                v27 = MEMORY[0x24BDACB70];
                v28 = "Found wlan driver ACIWiFiDriver";
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            if (CFStringCompare(v6, CFSTR("AirPort_BrcmNIC"), 0) == kCFCompareEqualTo)
            {
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                goto LABEL_48;
              *(_WORD *)buf = 0;
              v27 = MEMORY[0x24BDACB70];
              v28 = "Found wlan driver AirPort_BrcmNIC";
LABEL_47:
              _os_log_impl(&dword_20647D000, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
              goto LABEL_48;
            }
            if (CFStringCompare(v6, CFSTR("AppleBCMWLANCore"), 0) == kCFCompareEqualTo)
            {
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                goto LABEL_48;
              *(_WORD *)buf = 0;
              v27 = MEMORY[0x24BDACB70];
              v28 = "Found wlan driver AppleBCMWLANCore (iokit)";
              goto LABEL_47;
            }
          }
          CFRelease(v6);
        }
        v8 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", CFSTR("IOUserClass"), v4, 3u);
        if (v8)
        {
          v6 = v8;
          v9 = CFGetTypeID(v8);
          if (v9 == CFStringGetTypeID() && CFStringCompare(v6, CFSTR("AppleBCMWLANCore"), 0) == kCFCompareEqualTo)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              v27 = MEMORY[0x24BDACB70];
              v28 = "Found wlan driver AppleBCMWLANCore";
              goto LABEL_47;
            }
LABEL_48:
            CFRelease(v6);
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Found WLAN", buf, 2u);
            }
            goto LABEL_57;
          }
          CFRelease(v6);
        }
        v3 = IOIteratorNext(existing);
      }
      while (v3);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v10 = MEMORY[0x24BDACB70];
      v11 = "Zero driver match with nonzero IO80211Controller match";
LABEL_19:
      _os_log_impl(&dword_20647D000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v10 = MEMORY[0x24BDACB70];
    v11 = "No Matches for IO80211Controller, trying dk matching";
    goto LABEL_19;
  }
  v12 = IOServiceMatching("IOUserService");
  CFDictionaryAddValue(v12, CFSTR("IOUserClass"), CFSTR("AppleBCMWLANCore"));
  if (IOServiceGetMatchingServices(mainPort, v12, &existing))
  {
    v3 = 0;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    *(_WORD *)buf = 0;
    v31 = MEMORY[0x24BDACB70];
    v32 = "IOServiceGetMatchingServices failed";
    goto LABEL_72;
  }
  v13 = IOIteratorNext(existing);
  if (v13)
  {
    v3 = v13;
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = MEMORY[0x24BDACB70];
    do
    {
      v16 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", CFSTR("IOUserClass"), v14, 3u);
      v17 = CFGetTypeID(v16);
      if (v17 == CFStringGetTypeID() && CFStringCompare(v16, CFSTR("AppleBCMWLANCore"), 0) == kCFCompareEqualTo)
      {
        v18 = IORegistryEntrySearchCFProperty(v3, "IOService", CFSTR("IOReportLegend"), v14, 0);
        v19 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        if (v18)
        {
          if (v19)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Found wlan driver dk AppleBCMWLANCore", buf, 2u);
          }
          CFRelease(v18);
          v29 = v16;
LABEL_56:
          CFRelease(v29);
          goto LABEL_57;
        }
        if (v19)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_20647D000, v15, OS_LOG_TYPE_DEFAULT, "Property IOReportLegend not found in AppleBCMWLANCore", buf, 2u);
        }
      }
      CFRelease(v16);
      v3 = IOIteratorNext(existing);
    }
    while (v3);
  }
  v20 = IOServiceMatching("IOUserService");
  CFDictionaryAddValue(v20, CFSTR("IOUserClass"), CFSTR("IO80211ReporterProxy"));
  if (IOServiceGetMatchingServices(mainPort, v20, &existing))
  {
    v3 = 0;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    *(_WORD *)buf = 0;
    v31 = MEMORY[0x24BDACB70];
    v32 = "IOServiceGetMatchingServices failed";
    goto LABEL_72;
  }
  v3 = IOIteratorNext(existing);
  if (v3)
  {
    v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v22 = MEMORY[0x24BDACB70];
    do
    {
      v23 = (const __CFString *)IORegistryEntrySearchCFProperty(v3, "IOService", CFSTR("IOUserClass"), v21, 3u);
      v24 = CFGetTypeID(v23);
      if (v24 == CFStringGetTypeID() && CFStringCompare(v23, CFSTR("IO80211ReporterProxy"), 0) == kCFCompareEqualTo)
      {
        v25 = IORegistryEntrySearchCFProperty(v3, "IOService", CFSTR("IOReportLegend"), v21, 0);
        v26 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v26)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Found wlan driver IO80211ReporterProxy", buf, 2u);
          }
          CFRelease(v25);
          v29 = v23;
          goto LABEL_56;
        }
        if (v26)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_20647D000, v22, OS_LOG_TYPE_DEFAULT, "Property IOReportLegend not found in IO80211ReporterProxy", buf, 2u);
        }
      }
      CFRelease(v23);
      v3 = IOIteratorNext(existing);
    }
    while (v3);
  }
LABEL_57:
  if (existing)
    IOObjectRelease(existing);
  if (!v3)
    return 4294963396;
  result = 0;
  *a1 = v3;
  return result;
}

uint64_t Apple80211BindToInterfaceWithRecoveryOption(uint64_t a1, __CFString *a2)
{
  uint64_t result;
  io_registry_entry_t Service;
  io_object_t v6;
  const __CFString *v7;
  const __CFString *v8;
  CFComparisonResult v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = 4294963396;
  if (a1 && a2)
  {
    Service = _Apple80211FindService(a2);
    if (Service)
    {
      v6 = Service;
      v7 = (const __CFString *)_copyStringRegistryPropertyFor(Service, CFSTR("IO80211VirtualInterfaceRole"));
      if (v7 && (v8 = v7, v9 = CFStringCompare(v7, CFSTR("AirLink"), 0), CFRelease(v8), v9 == kCFCompareEqualTo))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v11 = 136315394;
          v12 = "Apple80211BindToInterfaceWithRecoveryOption";
          v13 = 2112;
          v14 = a2;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %@ using compatibility mode\n", (uint8_t *)&v11, 0x16u);
        }
        if (CFStringGetCString(a2, (char *)(a1 + 4), 16, 0x8000100u))
        {
          result = 0;
          *(_BYTE *)(a1 + 107) = 1;
        }
        else
        {
          return 4294963396;
        }
      }
      else
      {
        v10 = Apple80211BindToInterfaceWithService();
        IOObjectRelease(v6);
        return v10;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v11 = 136315394;
        v12 = "Apple80211BindToInterfaceWithRecoveryOption";
        v13 = 2112;
        v14 = a2;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %@ Failed to find matching service in IORegistry\n", (uint8_t *)&v11, 0x16u);
      }
      return 4294963393;
    }
  }
  return result;
}

uint64_t Apple80211BindToInterfaceWithService()
{
  uint64_t v0;
  __CFString *v1;
  int v2;
  __CFString *v3;
  io_service_t v4;
  io_service_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  __CFDictionary *v8;
  int v9;
  IONotificationPort *v10;
  mach_port_t *v11;
  io_connect_t v12;
  kern_return_t v13;
  kern_return_t v14;
  _BOOL4 v15;
  kern_return_t v16;
  kern_return_t v17;
  NSObject *v18;
  dispatch_queue_t v19;
  IONotificationPort *v20;
  __CFDictionary *Mutable;
  __CFDictionary *v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint32_t KernelRetainCount;
  uint32_t UserRetainCount;
  kern_return_t v34;
  NSObject *v35;
  const char *v36;
  kern_return_t v37;
  kern_return_t v38;
  uint32_t v39;
  IONotificationPort *v40;
  io_connect_t v41;
  NSObject *v42;
  const char *v43;
  size_t outputStructCnt;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  __CFString *v48;
  __int16 v49;
  _BYTE v50[10];
  io_service_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint32_t v65;
  __int16 v66;
  uint32_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE outputStruct[264];
  _DWORD inputStruct[3852];
  uint64_t v73;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v1;
  v5 = v4;
  v6 = v0;
  v7 = 0;
  v73 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(v0 + 1992) = 0;
  v8 = 0;
  if (!v0 || !v1)
    goto LABEL_52;
  v9 = v2;
  if (_checkEntitlements_onceToken != -1)
    dispatch_once(&_checkEntitlements_onceToken, &__block_literal_global_1327);
  if ((*(_QWORD *)(v6 + 1824) || *(_QWORD *)(v6 + 64) || *(_QWORD *)(v6 + 56))
    && Apple80211EventMonitoringHalt(v6))
  {
    goto LABEL_51;
  }
  v10 = *(IONotificationPort **)(v6 + 1960);
  if (v10)
  {
    IONotificationPortDestroy(v10);
    *(_QWORD *)(v6 + 1960) = 0;
  }
  v11 = (mach_port_t *)(v6 + 1804);
  v12 = *(_DWORD *)(v6 + 1804);
  if (v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v46 = "Apple80211BindToInterfaceWithService";
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Free previous IOUC session\n", buf, 0xCu);
      v12 = *v11;
    }
    *(_BYTE *)(v6 + 1801) = 0;
    IOServiceClose(v12);
    *(_DWORD *)(v6 + 1804) = 0;
  }
  if (!CFStringGetCString(v3, (char *)(v6 + 4), 16, 0x8000100u))
    goto LABEL_51;
  v13 = IOServiceOpen(v5, *MEMORY[0x24BDAEC58], 0, (io_connect_t *)(v6 + 1804));
  if (v13)
  {
    v34 = v13;
    if (v13 == -536870174 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446978;
      v46 = "Apple80211BindToInterfaceWithService";
      v47 = 2112;
      v48 = v3;
      v49 = 1024;
      *(_DWORD *)v50 = -536870174;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = -536870174;
      _os_log_fault_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "%{public}s: %@ IOServiceOpen failed with %d/0x%08x", buf, 0x22u);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    *(_DWORD *)buf = 136446978;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v49 = 1024;
    *(_DWORD *)v50 = v34;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v34;
    v35 = MEMORY[0x24BDACB70];
    v36 = "%{public}s: %@ IOServiceOpen failed with %d/0x%08x";
    goto LABEL_49;
  }
  bzero(inputStruct, 0x3C30uLL);
  inputStruct[0] = -1071093303;
  __strlcpy_chk();
  inputStruct[3846] = 43;
  memset(outputStruct, 0, 257);
  outputStructCnt = 256;
  v14 = IOConnectCallStructMethod(*v11, 0, inputStruct, 0x3C30uLL, outputStruct, &outputStructCnt);
  v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (!v15)
      goto LABEL_51;
    *(_DWORD *)buf = 136446978;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v49 = 1024;
    *(_DWORD *)v50 = v14;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v14;
    v35 = MEMORY[0x24BDACB70];
    v36 = "%{public}s: %@ Driver version query failed with %d/0x%08x";
LABEL_49:
    v39 = 34;
LABEL_50:
    _os_log_impl(&dword_20647D000, v35, OS_LOG_TYPE_DEFAULT, v36, buf, v39);
    goto LABEL_51;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446722;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v49 = 2080;
    *(_QWORD *)v50 = outputStruct;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: %@ Sanity test passed. Version - %s", buf, 0x20u);
  }
  outputStructCnt = 1;
  v16 = IOConnectCallStructMethod(*(_DWORD *)(v6 + 1804), 1u, 0, 0, (void *)(v6 + 1801), &outputStructCnt);
  if (v16)
  {
    v37 = v16;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    *(_DWORD *)buf = 136446978;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v49 = 1024;
    *(_DWORD *)v50 = v37;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v37;
    v35 = MEMORY[0x24BDACB70];
    v36 = "%{public}s: %@ useIOUCWhenPossible query failed with %d/0x%08x";
    goto LABEL_49;
  }
  outputStructCnt = 1;
  v17 = IOConnectCallStructMethod(*(_DWORD *)(v6 + 1804), 7u, 0, 0, (void *)(v6 + 1802), &outputStructCnt);
  if (v17)
  {
    v38 = v17;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    *(_DWORD *)buf = 136446978;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v49 = 1024;
    *(_DWORD *)v50 = v38;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v38;
    v35 = MEMORY[0x24BDACB70];
    v36 = "%{public}s: %@ isDKSupported query failed with %d/0x%08x";
    goto LABEL_49;
  }
  v70 = 0;
  v69 = 0u;
  v68 = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 103) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  __strlcpy_chk();
  v70 = v6 + 88;
  LODWORD(v69) = 12;
  DWORD2(v69) = 19;
  if (Apple80211RawGet(v6, (uint64_t)&v68))
  {
LABEL_51:
    v7 = 0;
    v8 = 0;
    goto LABEL_52;
  }
  if (!v9)
    goto LABEL_32;
  if (!*(_QWORD *)(v6 + 1952))
  {
    v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v19 = dispatch_queue_create(0, v18);
    *(_QWORD *)(v6 + 1952) = v19;
    if (!v19)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      *(_DWORD *)buf = 136315138;
      v46 = "Apple80211BindToInterfaceWithService";
      v35 = MEMORY[0x24BDACB70];
      v36 = "%s: failed to create queue\n";
      v39 = 12;
      goto LABEL_50;
    }
  }
  v20 = IONotificationPortCreate(*MEMORY[0x24BDD8B18]);
  *(_QWORD *)(v6 + 1960) = v20;
  if (!v20)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    *(_DWORD *)buf = 136446466;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v35 = MEMORY[0x24BDACB70];
    v36 = "%{public}s: %@ IONotificationPortCreate failed!! \n";
    goto LABEL_67;
  }
  IONotificationPortSetDispatchQueue(v20, *(dispatch_queue_t *)(v6 + 1952));
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    *(_DWORD *)buf = 136446466;
    v46 = "Apple80211BindToInterfaceWithService";
    v47 = 2112;
    v48 = v3;
    v35 = MEMORY[0x24BDACB70];
    v36 = "%{public}s: %@ propertyDictionaryRef alloc failed!! \n";
LABEL_67:
    v39 = 22;
    goto LABEL_50;
  }
  v8 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("IOInterfaceName"), v3);
  v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v22)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v46 = "Apple80211BindToInterfaceWithService";
      v47 = 2112;
      v48 = v3;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: %@ matchingServiceDict alloc failed!! \n", buf, 0x16u);
    }
    v7 = 0;
    goto LABEL_52;
  }
  v7 = v22;
  CFDictionarySetValue(v22, CFSTR("IOPropertyMatch"), v8);
  CFRetain(v7);
  if (IOServiceAddMatchingNotification(*(IONotificationPortRef *)(v6 + 1960), "IOServiceMatched", v7, (IOServiceMatchingCallback)_Apple80211ServiceMatchedCallback, (void *)v6, (io_iterator_t *)(v6 + 1976)))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v46 = "Apple80211BindToInterfaceWithService";
      v47 = 2112;
      v48 = v3;
      v42 = MEMORY[0x24BDACB70];
      v43 = "%{public}s: %@ Failed to add Publish notification!! \n";
LABEL_75:
      _os_log_impl(&dword_20647D000, v42, OS_LOG_TYPE_DEFAULT, v43, buf, 0x16u);
    }
  }
  else
  {
    _Apple80211ServiceMatchedCallback(v6, *(_DWORD *)(v6 + 1976));
    if (!IOServiceAddMatchingNotification(*(IONotificationPortRef *)(v6 + 1960), "IOServiceTerminate", v7, (IOServiceMatchingCallback)_Apple80211ServiceTerminatedCallback, (void *)v6, (io_iterator_t *)(v6 + 1980)))
    {
      _Apple80211ServiceTerminatedCallback(v6, *(_DWORD *)(v6 + 1980));
      v23 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, *(dispatch_queue_t *)(v6 + 1952));
      *(_QWORD *)(v6 + 1968) = v23;
      dispatch_set_context(v23, (void *)v6);
      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v6 + 1968), (dispatch_function_t)_serviceMatchingDelayedCallback);
      dispatch_activate(*(dispatch_object_t *)(v6 + 1968));
      CFRelease(v8);
LABEL_32:
      v24 = 0;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(v6 + 1801))
          v25 = "TRUE";
        else
          v25 = "FALSE";
        v26 = *(_QWORD *)(v6 + 1816);
        v27 = *(_QWORD *)(v6 + 1952);
        v28 = *(_DWORD *)(v6 + 1804);
        v29 = *(_QWORD *)(v6 + 1824);
        v30 = *(_QWORD *)(v6 + 1920);
        KernelRetainCount = IOObjectGetKernelRetainCount(v5);
        UserRetainCount = IOObjectGetUserRetainCount(v5);
        *(_DWORD *)buf = 136449026;
        v46 = "Apple80211BindToInterfaceWithService";
        v47 = 2112;
        v48 = v3;
        v49 = 2082;
        *(_QWORD *)v50 = v25;
        *(_WORD *)&v50[8] = 1024;
        v51 = v5;
        v52 = 2048;
        v53 = v6;
        v54 = 2048;
        v55 = v26;
        v56 = 2048;
        v57 = v27;
        v58 = 1024;
        v59 = v28;
        v60 = 2048;
        v61 = v29;
        v62 = 2048;
        v63 = v30;
        v64 = 1024;
        v65 = KernelRetainCount;
        v66 = 1024;
        v67 = UserRetainCount;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: %@ useIOUCWhenPossible %{public}s, service:%u opaque:%p, ioucQueue[%p] serviceNotificationQueue[%p] connect[%u] port[%p] runLoop[%p] kretain[%u] uretain[%u]\n", buf, 0x6Au);
        return 0;
      }
      return v24;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v46 = "Apple80211BindToInterfaceWithService";
      v47 = 2112;
      v48 = v3;
      v42 = MEMORY[0x24BDACB70];
      v43 = "%{public}s: %@ Failed to add Terminated notification!! \n";
      goto LABEL_75;
    }
  }
LABEL_52:
  v40 = *(IONotificationPort **)(v6 + 1960);
  if (v40)
  {
    IONotificationPortDestroy(v40);
    *(_QWORD *)(v6 + 1960) = 0;
  }
  v41 = *(_DWORD *)(v6 + 1804);
  if (v41)
  {
    IOServiceClose(v41);
    *(_DWORD *)(v6 + 1804) = 0;
  }
  v24 = Apple80211BindToInterfaceWithIOCTL(v6, v3, v5);
  if ((_DWORD)v24)
  {
    *(_QWORD *)(v6 + 12) = 0;
    *(_QWORD *)(v6 + 4) = 0;
    if (v8)
      CFRelease(v8);
    if (v7)
      CFRelease(v7);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v46 = "Apple80211BindToInterfaceWithService";
      v47 = 2112;
      v48 = v3;
      v49 = 1024;
      *(_DWORD *)v50 = v24;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v24;
      _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%{public}s: FAILED to bind to interface %@ - %d/0x%08x", buf, 0x22u);
    }
  }
  return v24;
}

void _Apple80211ServiceMatchedCallback(uint64_t a1, io_iterator_t a2)
{
  io_object_t v4;
  io_object_t v5;
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  io_object_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v8 = "_Apple80211ServiceMatchedCallback";
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Enter: %s\n", buf, 0xCu);
  }
  if (a1)
  {
    v4 = IOIteratorNext(a2);
    if (v4)
    {
      v5 = v4;
      v6 = MEMORY[0x24BDACB70];
      do
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v8 = "_Apple80211ServiceMatchedCallback";
          v9 = 1024;
          v10 = v5;
          v11 = 2048;
          v12 = a1;
          _os_log_impl(&dword_20647D000, v6, OS_LOG_TYPE_DEFAULT, "%s: service:%u opaque:%p\n", buf, 0x1Cu);
        }
        _Apple80211IOUCResume();
        IOObjectRelease(v5);
        v5 = IOIteratorNext(a2);
      }
      while (v5);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "_Apple80211ServiceMatchedCallback";
    v9 = 1024;
    v10 = 0;
    v11 = 2048;
    v12 = 0;
    _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s: service:%u opaque:%p, No opaque, bailing\n", buf, 0x1Cu);
  }
}

void _Apple80211ServiceTerminatedCallback(uint64_t a1, io_iterator_t iterator)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  io_object_t v8;
  io_object_t v9;
  io_object_t v10;
  NSObject *v11;
  int *v12;
  _BOOL4 v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint32_t UserRetainCount;
  uint64_t v22;
  int v23;
  uint32_t KernelRetainCount;
  uint64_t v25;
  uint64_t v26;
  _QWORD block[5];
  io_object_t v28;
  io_object_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  io_object_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint32_t v49;
  __int16 v50;
  uint32_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 1952);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 1816);
      if (v5)
        v6 = v4 == v5;
      else
        v6 = 1;
      v7 = !v6;
    }
    else
    {
      v7 = 0;
    }
    v8 = IOIteratorNext(iterator);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = MEMORY[0x24BDACB70];
      v12 = &dword_20647D000;
      do
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v19 = v12;
          v20 = *(_QWORD *)(a1 + 1816);
          v22 = *(_QWORD *)(a1 + 1952);
          v23 = *(_DWORD *)(a1 + 1804);
          v25 = *(_QWORD *)(a1 + 1824);
          v26 = *(_QWORD *)(a1 + 1920);
          KernelRetainCount = IOObjectGetKernelRetainCount(v9);
          UserRetainCount = IOObjectGetUserRetainCount(v9);
          *(_DWORD *)buf = 136317698;
          v31 = "_Apple80211ServiceTerminatedCallback";
          v32 = 1024;
          v33 = v9;
          v34 = 2048;
          v35 = a1;
          v36 = 2048;
          v37 = v20;
          v12 = v19;
          v38 = 2048;
          v39 = v22;
          v40 = 1024;
          v41 = v23;
          v42 = 2048;
          v43 = v25;
          v44 = 2048;
          v45 = v26;
          v46 = 1024;
          v47 = v7;
          v48 = 1024;
          v49 = KernelRetainCount;
          v50 = 1024;
          v51 = UserRetainCount;
          _os_log_error_impl(v19, v11, OS_LOG_TYPE_ERROR, "%s: service:%u opaque:%p, ioucQueue[%p] serviceNotificationQueue[%p] connect[%u] port[%p] runLoop[%p] _needSerialization[%u], kretain[%u] uretain[%u]\n", buf, 0x5Cu);
        }
        v13 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          if (v13)
          {
            v14 = *(_QWORD *)(a1 + 1816);
            *(_DWORD *)buf = 136315906;
            v31 = "_Apple80211ServiceTerminatedCallback";
            v32 = 1024;
            v33 = v10;
            v34 = 2048;
            v35 = v14;
            v36 = 1024;
            LODWORD(v37) = v9;
            _os_log_impl(v12, v11, OS_LOG_TYPE_DEFAULT, "%s: [%u] ioucQueue[%p], service:%u, serializing\n", buf, 0x22u);
          }
          v15 = *(NSObject **)(a1 + 1816);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 0x40000000;
          block[2] = ___Apple80211ServiceTerminatedCallback_block_invoke;
          block[3] = &__block_descriptor_tmp_1337;
          block[4] = a1;
          v28 = v10;
          v29 = v9;
          dispatch_sync(v15, block);
        }
        else
        {
          if (v13)
          {
            v16 = *(_QWORD *)(a1 + 1816);
            *(_DWORD *)buf = 136315906;
            v31 = "_Apple80211ServiceTerminatedCallback";
            v32 = 1024;
            v33 = v10;
            v34 = 2048;
            v35 = v16;
            v36 = 1024;
            LODWORD(v37) = v9;
            _os_log_impl(v12, v11, OS_LOG_TYPE_DEFAULT, "%s: [%u] ioucQueue[%p], service:%u, halting ...\n", buf, 0x22u);
          }
          _Apple80211IOUCHalt(a1);
          v17 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 1936);
          if (v17)
            v17(0, a1, 0, 0, *(_QWORD *)(a1 + 1944));
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v18 = *(_QWORD *)(a1 + 1816);
            *(_DWORD *)buf = 136315906;
            v31 = "_Apple80211ServiceTerminatedCallback";
            v32 = 1024;
            v33 = v10;
            v34 = 2048;
            v35 = v18;
            v36 = 1024;
            LODWORD(v37) = v9;
            _os_log_impl(v12, v11, OS_LOG_TYPE_DEFAULT, "%s: [%u] ioucQueue[%p], service:%u, ... halted\n", buf, 0x22u);
          }
        }
        IOObjectRelease(v9);
        ++v10;
        v9 = IOIteratorNext(iterator);
      }
      while (v9);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v31 = "_Apple80211ServiceTerminatedCallback";
    v32 = 1024;
    v33 = 0;
    v34 = 2048;
    v35 = 0;
    v36 = 1024;
    LODWORD(v37) = 0;
    _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s: service:%u opaque:%p, _needSerialization[%u], No opaque, bailing\n", buf, 0x22u);
  }
}

void _serviceMatchingDelayedCallback(uint64_t a1)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315394;
    v3 = "_serviceMatchingDelayedCallback";
    v4 = 2048;
    v5 = a1;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Enter opaque:%p \n", (uint8_t *)&v2, 0x16u);
  }
  _Apple80211IOUCResume();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315394;
    v3 = "_serviceMatchingDelayedCallback";
    v4 = 2048;
    v5 = a1;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Exit opaque:%p \n", (uint8_t *)&v2, 0x16u);
  }
}

uint64_t Apple80211BindToInterfaceWithIOCTL(uint64_t a1, __CFString *theString, io_registry_entry_t a3)
{
  uint64_t v4;
  const __CFArray *v7;
  __uint64_t v8;
  unint64_t v9;
  __uint64_t v10;
  CFArrayRef theArray;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char buffer[16];
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  _BYTE v26[10];
  _BYTE v27[10];
  _BYTE v28[10];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  CFRange v34;

  v33 = *MEMORY[0x24BDAC8D0];
  memset(buffer, 170, sizeof(buffer));
  if (!a1)
    return 4294963396;
  v4 = 4294963396;
  if (!theString || (*(_DWORD *)a1 & 0x80000000) != 0 || !CFStringGetCString(theString, buffer, 16, 0x8000100u))
    return v4;
  theArray = 0;
  if (!_getIfListCopy((int *)a1, &theArray))
  {
    v7 = theArray;
    v34.length = CFArrayGetCount(theArray);
    v34.location = 0;
    if (CFArrayContainsValue(v7, v34, theString)
      && (_isVirtualInterface(theString, a3) || _isInfraInterface(theString, a3)))
    {
      CFRelease(theArray);
      goto LABEL_10;
    }
    CFRelease(theArray);
    return 4294963396;
  }
LABEL_10:
  v16 = 0u;
  v17 = 0u;
  __strlcpy_chk();
  v8 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  ioctl(*(_DWORD *)a1, 0xC0206911uLL, &v16);
  v9 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) - v8;
  if (v9 > 0x3B9AC9FF && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448258;
    v20 = "_logTimeIfThresholdExceeded";
    v21 = 2082;
    v22 = (unint64_t)&v16;
    v23 = 2080;
    v24 = (unint64_t)" 'SIOCGIFFLAGS' ";
    v25 = 1024;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)v26 = -1071617775;
    *(_DWORD *)&v26[6] = -1071617775;
    *(_WORD *)v27 = 2048;
    *(_QWORD *)&v27[2] = v9 / 0x3B9ACA00;
    *(_WORD *)v28 = 2048;
    *(_QWORD *)&v28[2] = v9 % 0x3B9ACA00 / 0x3E8;
    v29 = 2048;
    v30 = 1;
    v31 = 2048;
    v32 = 0;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: ['%{public}s']%s: ioctl[0x%08x/%u] [%llu.%06llu] Exceeded threshold >= [%llu.%06llu]\n", buf, 0x54u);
  }
  __strlcpy_chk();
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 103) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  __strlcpy_chk();
  v15 = a1 + 88;
  LODWORD(v14) = 12;
  DWORD2(v14) = 19;
  v4 = ioctl(*(_DWORD *)a1, 0xC02869C9uLL, &v13);
  v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v20 = "Apple80211BindToInterfaceWithIOCTL";
    *(_DWORD *)buf = 136448002;
    v21 = 2048;
    v22 = v10 / 0x3B9ACA00;
    v23 = 2048;
    v24 = v10 % 0x3B9ACA00 / 0x3E8;
    v25 = 2112;
    *(_QWORD *)v26 = theString;
    *(_WORD *)&v26[8] = 2082;
    *(_QWORD *)v27 = a1 + 4;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)v28 = (__int16)v17;
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = v4;
    v29 = 1024;
    LODWORD(v30) = v4;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%{public}s: @[%llu.%06llu] WARNING: %@ Falling back to IOCTL path, ifname['%{public}s']/0x%08x err %d/0x%08x\n", buf, 0x46u);
  }
  *(_BYTE *)(a1 + 1801) = 0;
  return v4;
}

uint64_t Apple80211DisassociateExt(uint64_t a1, const __CFDictionary *a2)
{
  const __CFNumber *Value;
  int valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  syslog(3, "%s: disassocReason:%p", "Apple80211DisassociateExt", a2);
  if (a2)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("DISASSOC_REASON"));
    valuePtr = 0;
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      syslog(3, "%s: disassocReason:%u", "Apple80211DisassociateExt", valuePtr);
    }
  }
  return Apple80211SetWithIOCTL();
}

uint64_t _openEventSocket()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v0 = socket(32, 3, 1);
  v1 = v0;
  if ((v0 & 0x80000000) != 0)
  {
    __error();
  }
  else
  {
    v4 = 1;
    v3 = 0x600000001;
    if (ioctl(v0, 0x800C6502uLL, &v3) && *__error())
    {
      close(v1);
      return 0xFFFFFFFFLL;
    }
  }
  return v1;
}

uint64_t __getNetworkSecurityParams(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  const __CFDictionary *Value;
  uint64_t result;
  const __CFDictionary *v8;
  const __CFNumber *v9;
  signed int v10;
  unsigned int v11;
  const __CFNumber *v12;
  uint64_t v13;
  const __CFNumber *v14;
  int v15;
  int v16;
  const __CFArray *v17;
  uint64_t v18;
  CFIndex i;
  unsigned int v20;
  int v21;
  const __CFArray *v22;
  uint64_t v23;
  CFIndex j;
  unint64_t v25;
  unsigned int v26;
  unsigned int valuePtr;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("WPA_IE"));
  result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("RSN_IE"));
  if (!((unint64_t)Value | result))
  {
    v12 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("WEP"));
    result = (uint64_t)makeBoolRef(v12);
    v13 = *MEMORY[0x24BDBD270];
    *(_DWORD *)(a2 + 40) = 0;
    if (result == v13)
    {
      result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("WEP_AUTH_Flags"));
      if (result)
      {
        valuePtr = 0;
        result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
        if ((valuePtr & 1) != 0)
          v16 = 1;
        else
          v16 = 2;
      }
      else
      {
        v16 = 1;
      }
LABEL_31:
      *(_DWORD *)(a2 + 44) = v16;
      return result;
    }
    goto LABEL_9;
  }
  v8 = (const __CFDictionary *)result;
  *(_DWORD *)(a2 + 44) = 6;
  valuePtr = -1431655766;
  if (result)
  {
    v26 = 0;
    v9 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("AUTH_SEL_OVERRIDE"));
    if (v9)
    {
      result = CFNumberGetValue(v9, kCFNumberSInt32Type, &v26);
      if ((_DWORD)result)
      {
        v10 = v26 - 1;
        if (v26 - 1 < 0x19 && ((0x18019BFu >> v10) & 1) != 0)
        {
          v11 = dword_2064BB928[v10];
LABEL_28:
          v20 = v11 - 1;
          v15 = 4;
          switch(v20)
          {
            case 0u:
              goto LABEL_58;
            case 1u:
              v21 = 8;
              break;
            case 2u:
              v15 = 128;
              goto LABEL_58;
            case 3u:
              v21 = 16;
              break;
            case 4u:
              v15 = 2048;
              goto LABEL_58;
            case 5u:
              v21 = 1024;
              break;
            case 7u:
              v25 = 0xA00001000;
              goto LABEL_45;
            case 8u:
              v25 = 0xA00002000;
              goto LABEL_45;
            case 0xBu:
              v15 = 0x4000;
              goto LABEL_58;
            case 0xCu:
              v15 = 0x8000;
              goto LABEL_58;
            case 0x17u:
              v25 = 0xA00010000;
              goto LABEL_45;
            case 0x18u:
              v25 = 0xA00020000;
              goto LABEL_45;
            default:
              goto LABEL_44;
          }
          *(_DWORD *)(a2 + 40) = v21;
          if ((*(_BYTE *)(a3 + 9) & 8) != 0)
            v16 = 10;
          else
            v16 = 6;
          goto LABEL_31;
        }
      }
    }
    else
    {
      result = (uint64_t)CFDictionaryGetValue(v8, CFSTR("IE_KEY_RSN_AUTHSELS"));
      if (result)
      {
        v17 = (const __CFArray *)result;
        result = CFArrayGetCount((CFArrayRef)result);
        if (result >= 1)
        {
          v18 = result;
          for (i = 0; i != v18; ++i)
          {
            result = (uint64_t)CFArrayGetValueAtIndex(v17, i);
            if (result)
            {
              result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
              if ((_DWORD)result)
              {
                if (v26 < valuePtr)
                  v26 = valuePtr;
              }
            }
          }
          v11 = v26;
          if (v26)
            goto LABEL_28;
        }
      }
    }
    goto LABEL_44;
  }
  if (Value)
  {
    v26 = 0;
    v14 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("AUTH_SEL_OVERRIDE"));
    if (v14)
    {
      result = CFNumberGetValue(v14, kCFNumberSInt32Type, &v26);
      if (!(_DWORD)result)
        goto LABEL_44;
      v15 = v26;
      if (v26 - 1 >= 2)
        goto LABEL_44;
    }
    else
    {
      result = (uint64_t)CFDictionaryGetValue(Value, CFSTR("IE_KEY_WPA_AUTHSELS"));
      if (!result)
        goto LABEL_44;
      v22 = (const __CFArray *)result;
      result = CFArrayGetCount((CFArrayRef)result);
      if (result < 1)
        goto LABEL_44;
      v23 = result;
      for (j = 0; j != v23; ++j)
      {
        result = (uint64_t)CFArrayGetValueAtIndex(v22, j);
        if (result)
        {
          result = CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
          if ((_DWORD)result)
          {
            if (v26 < valuePtr)
              v26 = valuePtr;
          }
        }
      }
      v15 = v26;
      if (!v26)
        goto LABEL_44;
    }
    if (v15 != 1)
    {
      if (v15 == 2)
      {
        *(_DWORD *)(a2 + 40) = 2;
        return result;
      }
      goto LABEL_44;
    }
LABEL_58:
    *(_DWORD *)(a2 + 40) = v15;
LABEL_9:
    *(_DWORD *)(a2 + 44) = 0;
    return result;
  }
LABEL_44:
  v25 = 0xFFFFFFFF0000FFFFLL;
LABEL_45:
  *(_QWORD *)(a2 + 40) = v25;
  return result;
}

const __CFDictionary *_getMFPCaps(const __CFDictionary *a1, _BYTE *a2, _BYTE *a3)
{
  const __CFDictionary *result;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFBoolean *Value;

  result = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("RSN_IE"));
  v7 = result;
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("80211W_ENABLED"));
    if (result
      && (result = (const __CFDictionary *)CFEqual(result, (CFTypeRef)*MEMORY[0x24BDBD270]), (_DWORD)result)
      && (result = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("IE_KEY_RSN_CAPS"))) != 0)
    {
      v8 = result;
      Value = (const __CFBoolean *)CFDictionaryGetValue(result, CFSTR("MFP_REQUIRED"));
      if (Value)
        LOBYTE(v7) = CFBooleanGetValue(Value);
      else
        LOBYTE(v7) = 0;
      result = (const __CFDictionary *)CFDictionaryGetValue(v8, CFSTR("MFP_CAPABLE"));
      if (result)
        result = (const __CFDictionary *)CFBooleanGetValue(result);
    }
    else
    {
      LOBYTE(v7) = 0;
    }
  }
  if (a2)
    *a2 = (_BYTE)result;
  if (a3)
    *a3 = (_BYTE)v7;
  return result;
}

const __CFDictionary *_getPhyMode(const __CFDictionary *result, void *a2)
{
  if (a2)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("PHY_MODE"));
    if (result)
      return (const __CFDictionary *)CFNumberGetValue(result, kCFNumberSInt32Type, a2);
  }
  return result;
}

uint64_t _buildWPAIEForAssocation(CFDictionaryRef theDict, uint64_t a2, __int16 *a3, _BYTE *a4, int a5, int a6)
{
  uint64_t result;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  const __CFNumber *v15;
  int *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  int *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFIndex Count;
  CFIndex v24;
  CFIndex v25;
  unsigned int v26;
  const __CFNumber *ValueAtIndex;
  unsigned int v28;
  int v29;
  __int16 v30;
  const __CFArray *v31;
  const __CFArray *v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  unsigned int v36;
  const __CFNumber *v37;
  int *v38;
  int *v39;
  __int16 v40;
  uint64_t v41;
  const __CFNumber *v42;
  unsigned int v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  int valuePtr;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  result = 4294963396;
  if (!a2 || !a3)
    return result;
  if (CFDictionaryGetValue(theDict, CFSTR("RSN_IE")) && (a4[1] & 0x40) != 0)
  {
    valuePtr = 0;
    v45 = 0;
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("RSN_IE"));
    if (!Value)
      return 4294963396;
    v14 = Value;
    _getMFPCaps(theDict, (_BYTE *)&v45 + 1, &v45);
    *(_BYTE *)a2 = 48;
    *(_WORD *)(a2 + 2) = 1;
    v15 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("IE_KEY_RSN_MCIPHER"));
    if (!v15 || !CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr))
      return 4294963396;
    result = 4294963396;
    switch(valuePtr)
    {
      case 1:
        if ((*a4 & 1) == 0)
          return 4294963393;
        v16 = &_rsnSuitWEP40;
        goto LABEL_32;
      case 2:
        if ((*a4 & 2) == 0)
          return 4294963393;
        v16 = &_rsnSuitTKIP;
        goto LABEL_32;
      case 4:
        if ((*a4 & 8) == 0)
          return 4294963393;
        v16 = &_rsnSuitCCMP;
        goto LABEL_32;
      case 5:
        if ((*a4 & 1) == 0)
          return 4294963393;
        v16 = &_rsnSuitWEP104;
LABEL_32:
        *(_DWORD *)(a2 + 4) = *v16;
        *(_WORD *)(a2 + 8) = 1;
        v21 = (const __CFArray *)CFDictionaryGetValue(v14, CFSTR("IE_KEY_RSN_UCIPHERS"));
        if (!v21)
          return 4294963396;
        v22 = v21;
        Count = CFArrayGetCount(v21);
        v46 = -1431655766;
        if (Count < 1)
          return 4294963396;
        v24 = Count;
        v25 = 0;
        v26 = 0;
        break;
      case 8:
        result = 4294963393;
        if (a6 || (a4[9] & 0x10) == 0)
          return result;
        v16 = &_rsnSuitGCMP;
        goto LABEL_32;
      case 9:
        result = 4294963393;
        if (a6 || (a4[9] & 0x10) == 0)
          return result;
        v16 = &_rsnSuitGCMP256;
        goto LABEL_32;
      default:
        return result;
    }
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v22, v25);
      if (!ValueAtIndex || !CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &v46) || v46 <= v26)
        goto LABEL_46;
      if (v46 - 8 < 2)
      {
        if (a6 || (a4[9] & 0x10) == 0)
          goto LABEL_46;
      }
      else if (v46 == 4)
      {
        if ((*a4 & 8) == 0)
          goto LABEL_46;
      }
      else if (v46 != 2 || (*a4 & 2) == 0)
      {
        goto LABEL_46;
      }
      v26 = v46;
LABEL_46:
      if (v24 == ++v25)
      {
        v28 = v26 - 2;
        if (v26 - 2 > 7)
          return 4294963396;
        if (((0xC5u >> v28) & 1) == 0)
          return 4294963396;
        *(_DWORD *)(a2 + 10) = *off_24BF118E0[v28];
        *(_WORD *)(a2 + 14) = 1;
        v29 = a5 - 1;
        if ((a5 - 1) > 0x18 || ((0x18219BFu >> v29) & 1) == 0)
          return 4294963396;
        *(_DWORD *)(a2 + 16) = *(_DWORD *)*(&off_24BF11920 + v29);
        if ((a4[6] & 0x10) != 0)
        {
          if (HIBYTE(v45))
          {
            if ((_BYTE)v45)
              v30 = 192;
            else
              v30 = 128;
          }
          else
          {
            v30 = (16 * a4[9]) & 0x80;
          }
        }
        else
        {
          v30 = 0;
        }
        *(_WORD *)(a2 + 20) = v30;
        v41 = a2 + 22;
        v42 = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("IE_KEY_RSN_BCIPHER"));
        if (v42)
        {
          if (!CFNumberGetValue(v42, kCFNumberSInt32Type, &v46))
            return 4294963396;
          v43 = v46;
          if (v46)
          {
            *(_WORD *)(a2 + 22) = 0;
            switch(v43)
            {
              case 6u:
                v44 = 111939328;
                goto LABEL_101;
              case 0xBu:
                v44 = 195825408;
                goto LABEL_101;
              case 0xCu:
                v44 = 212602624;
                goto LABEL_101;
              case 0xDu:
                v44 = 229379840;
LABEL_101:
                *(_DWORD *)(a2 + 24) = v44;
                v41 = a2 + 28;
                break;
              default:
                v41 = a2 + 24;
                syslog(3, "%s: unknown BIP type %d\n", "_buildRSNIE", v43);
                break;
            }
          }
        }
        if (v41 - a2 > 258)
          return 4294963395;
        result = 0;
        *(_BYTE *)(a2 + 1) = v41 - a2 - 2;
        v40 = (v41 - a2 - 2) + 2;
LABEL_86:
        *a3 = v40;
        return result;
      }
    }
  }
  if (!CFDictionaryGetValue(theDict, CFSTR("WPA_IE")))
    return 4294963396;
  if ((a4[1] & 0x20) == 0)
    return 4294963396;
  valuePtr = 0;
  v17 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("WPA_IE"));
  if (!v17)
    return 4294963396;
  v18 = v17;
  *(_BYTE *)a2 = -35;
  *(_WORD *)(a2 + 2) = 20480;
  *(_DWORD *)(a2 + 4) = 66034;
  v19 = (const __CFNumber *)CFDictionaryGetValue(v17, CFSTR("IE_KEY_WPA_MCIPHER"));
  if (!v19 || !CFNumberGetValue(v19, kCFNumberSInt32Type, &valuePtr))
    return 4294963396;
  result = 4294963396;
  switch(valuePtr)
  {
    case 1:
      if ((*a4 & 1) == 0)
        return 4294963393;
      v20 = &_wpaSuitWEP40;
      goto LABEL_64;
    case 2:
      if ((*a4 & 2) == 0)
        return 4294963393;
      v20 = &_wpaSuitTKIP;
      goto LABEL_64;
    case 4:
      if ((*a4 & 8) == 0)
        return 4294963393;
      v20 = &_wpaSuitCCMP;
      goto LABEL_64;
    case 5:
      if ((*a4 & 1) == 0)
        return 4294963393;
      v20 = &_wpaSuitWEP104;
LABEL_64:
      *(_DWORD *)(a2 + 8) = *v20;
      *(_WORD *)(a2 + 12) = 1;
      v31 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("IE_KEY_WPA_UCIPHERS"));
      if (!v31)
        return 4294963396;
      v32 = v31;
      v33 = CFArrayGetCount(v31);
      v46 = -1431655766;
      if (v33 < 1)
        return 4294963396;
      v34 = v33;
      v35 = 0;
      v36 = 0;
      break;
    default:
      return result;
  }
  do
  {
    v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, v35);
    if (v37 && CFNumberGetValue(v37, kCFNumberSInt32Type, &v46) && v46 > v36)
    {
      if (v46 == 4)
      {
        if ((*a4 & 8) == 0)
          goto LABEL_76;
LABEL_75:
        v36 = v46;
        goto LABEL_76;
      }
      if (v46 == 2 && (*a4 & 2) != 0)
        goto LABEL_75;
    }
LABEL_76:
    ++v35;
  }
  while (v34 != v35);
  if (v36 == 2)
  {
    v38 = &_wpaSuitTKIP;
LABEL_81:
    *(_DWORD *)(a2 + 14) = *v38;
    *(_WORD *)(a2 + 18) = 1;
    if (a5 == 1)
    {
      v39 = &_wpaAuth8021xUnspec;
    }
    else
    {
      if (a5 != 2)
        return 4294963396;
      v39 = &_wpaAuthPSK;
    }
    result = 0;
    *(_DWORD *)(a2 + 20) = *v39;
    *(_BYTE *)(a2 + 1) = 22;
    v40 = 24;
    goto LABEL_86;
  }
  if (v36 == 4)
  {
    v38 = &_wpaSuitCCMP;
    goto LABEL_81;
  }
  return 4294963396;
}

uint64_t _waitForJoinResult(uint64_t a1)
{
  int v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294963396;
  v6 = 0;
  v4 = 0u;
  v5 = 0u;
  __strlcpy_chk();
  LODWORD(v5) = 21;
  v2 = 400;
  while (1)
  {
    usleep(0x4E20u);
    if (Apple80211RawGet(a1, (uint64_t)&v4))
      break;
    if (DWORD1(v5))
      return _errorForAssociateResult(SDWORD1(v5));
    *(_QWORD *)((char *)&v5 + 4) = 0;
    if (!--v2)
      return 4294963391;
  }
  return *__error();
}

uint64_t _joinWEPNetwork(uint64_t a1, uint64_t a2, char *__s, char a4, int a5)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;

  v8 = *(_QWORD *)(a2 + 32);
  if ((a4 & 1) != 0)
    v9 = 1;
  else
    v9 = 2;
  result = _parsePassword(__s, v9, v8 + 76, 0, (a4 & 2) == 0);
  if (!(_DWORD)result)
  {
    if ((a4 & 4) != 0)
      v11 = 1;
    else
      v11 = 2;
    *(_DWORD *)(v8 + 8) = v11;
    if ((a4 & 1) != 0)
      v12 = 5;
    else
      v12 = 13;
    *(_DWORD *)(v8 + 64) = v12;
    *(_DWORD *)(v8 + 68) = v9;
    *(_WORD *)(v8 + 72) = 15;
    if (Apple80211RawSet())
      return 4294963394;
    if (!a5)
    {
      if (!*(_QWORD *)(a1 + 56) || (*(_BYTE *)(a1 + 21) & 1) == 0 || (*(_BYTE *)(a1 + 93) & 0x40) == 0)
        return _waitForJoinResult(a1);
      CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x24BDBD5A0], 10.0, 0);
    }
    return 0;
  }
  return result;
}

uint64_t _initiateAutoWEPSequence(uint64_t a1, uint64_t a2, char *__s, _DWORD *a4, int *a5, int a6)
{
  uint64_t v6;
  int v13;
  int v14;
  uint64_t v15;
  int v17;

  v6 = 4294967196;
  switch(*a4)
  {
    case 0:
    case 1:
      if (_wepPasswordIs104BitHex((uint64_t)__s))
      {
        *a5 = 0;
        v6 = _joinWEPNetwork(a1, a2, __s, 0, a6);
        if ((v6 + 3912) > 7)
          return v6;
        v13 = 1 << (v6 + 72);
      }
      else
      {
        if (!_wepPasswordIs40BitHex((uint64_t)__s))
        {
          *a4 = 2;
          goto LABEL_11;
        }
        *a5 = 1;
        v6 = _joinWEPNetwork(a1, a2, __s, 1, a6);
        if ((v6 + 3912) > 7)
          return v6;
        v13 = 1 << (v6 + 72);
      }
      if ((v13 & 0x85) == 0)
        return v6;
      goto LABEL_11;
    case 2:
LABEL_11:
      *a5 = 2;
      v15 = _joinWEPNetwork(a1, a2, __s, 2, a6);
      v14 = v15;
      if (a6 || (v15 + 3912) > 7 || ((1 << (v15 + 72)) & 0x85) == 0)
        return v15;
      *a5 = 3;
      v6 = _joinWEPNetwork(a1, a2, __s, 3, 0);
LABEL_17:
      if ((v6 + 3912) > 7 || ((1 << (v6 + 72)) & 0x85) == 0)
        return v6;
      if ((_DWORD)v6 == -3910 && v14 == -3910)
      {
        v6 = 4294963386;
      }
      else
      {
        if ((_DWORD)v6 != -3905 || v14 != -3905)
          return v6;
        v6 = 4294963391;
      }
LABEL_25:
      if (!_wepPasswordIs104BitHex((uint64_t)__s))
      {
        if (_wepPasswordIs40BitHex((uint64_t)__s))
        {
          v17 = 5;
          goto LABEL_29;
        }
        return v6;
      }
      v17 = 4;
LABEL_29:
      *a5 = v17;
      return _joinWEPNetwork(a1, a2, __s, v17, a6);
    case 3:
      *a5 = 3;
      v6 = _joinWEPNetwork(a1, a2, __s, 3, a6);
      if (a6)
        return v6;
      v14 = -100;
      goto LABEL_17;
    case 4:
      goto LABEL_25;
    default:
      return v6;
  }
}

uint64_t _startAPMode(uint64_t a1, const __CFDictionary *a2, int a3)
{
  const __CFNumber *Value;
  __int128 v7;
  const __CFNumber *v8;
  const void *v9;
  const void *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  int v13;
  const __CFNumber *v14;
  const __CFData *v15;
  const __CFData *v16;
  CFIndex Length;
  const __CFString *v18;
  __int128 v19;
  uint64_t v20;
  const __CFString *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  int v27;
  const void *v28;
  const void *v29;
  const __CFData *v30;
  const __CFData *v31;
  unsigned int v32;
  const void *v33;
  const __CFNumber *v34;
  __int128 v35;
  uint64_t v36;
  const char *v37;
  int v38;
  const char *v39;
  int v40;
  unsigned int v41;
  const __CFString *v42;
  const __CFString *v43;
  CFIndex v44;
  const char *v45;
  const char *v46;
  const __CFNumber *v47;
  int v48;
  FILE *v49;
  _xpc_connection_s *mach_service;
  xpc_object_t v51;
  int v53;
  int v54;
  int valuePtr;
  char __s[16];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int16 v65;
  char v66;
  _BYTE v67[12];
  unsigned int v68;
  int v69;
  unsigned int v70;
  char v71[36];
  uint64_t v72;
  __int16 v73;
  _BYTE v74[132];
  int v75;
  uint64_t v76;
  char v77;
  int v78;
  char v79;
  int v80;
  __int16 v81;
  int v82;
  uint64_t v83;
  __int16 v84;
  __int128 v85;
  __int128 v86;
  int *v87;
  uint8_t buf[4];
  const char *v89;
  _BYTE v90[24];
  __int128 v91;
  __int128 v92;
  _BYTE *v93;
  _OWORD v94[16];
  _OWORD v95[2];
  char v96;
  char buffer[1032];
  uint64_t v98;
  CFRange v99;

  v98 = *MEMORY[0x24BDAC8D0];
  bzero(&v65, 0x6DCuLL);
  v64 = 1;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_AUTH_LOWER"));
  if (!Value)
    return 4294963396;
  v87 = (int *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v86 = v7;
  v85 = v7;
  *(_OWORD *)__s = v7;
  v57 = v7;
  v58 = v7;
  v59 = v7;
  v60 = v7;
  v61 = v7;
  v62 = v7;
  v63 = v7;
  if (!CFNumberGetValue(Value, kCFNumberSInt16Type, v67))
    return 4294963396;
  v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_AUTH_UPPER"));
  if (v8)
  {
    if (!CFNumberGetValue(v8, kCFNumberSInt16Type, &v67[4]))
      return 4294963396;
  }
  v9 = CFDictionaryGetValue(a2, CFSTR("AP_MODE_MOVETOIOS_MIGRATION"));
  v10 = (const void *)*MEMORY[0x24BDBD270];
  if (v9 && v9 == v10)
    v66 = 1;
  *(_DWORD *)&v67[8] = 1;
  v11 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CHANNEL"));
  if (!v11 || !CFNumberGetValue(v11, kCFNumberSInt32Type, &v68))
    return 4294963396;
  v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CHANNEL_FLAGS"));
  if (!v12 || !CFNumberGetValue(v12, kCFNumberSInt32Type, &v69))
  {
    if (v68 >= 0xF)
      v13 = 1040;
    else
      v13 = 10;
    v69 |= v13;
  }
  v14 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_CYPHER_TYPE"));
  if (!v14 || !CFNumberGetValue(v14, kCFNumberSInt32Type, (char *)&v72 + 4))
    return 4294963396;
  v15 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_SSID_BYTES"));
  if (v15)
  {
    v16 = v15;
    Length = CFDataGetLength(v15);
    if ((unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0)
      return 4294963396;
    v70 = Length;
    CFDataGetBytePtr(v16);
  }
  else
  {
    v18 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("SSID"));
    if (!v18)
      return 4294963396;
    buffer[32] = -86;
    *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)buffer = v19;
    *(_OWORD *)&buffer[16] = v19;
    if (!CFStringGetCString(v18, buffer, 33, 0x8000100u))
      return 4294963396;
    v70 = strlen(buffer);
  }
  __memcpy_chk();
  if (HIDWORD(v72))
  {
    v21 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_KEY"));
    if (!v21)
      return 4294963396;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    *(_OWORD *)__s = 0u;
    v57 = 0u;
    if (!CFStringGetCString(v21, __s, 128, 0x8000100u))
      return 4294963396;
    v22 = *(_DWORD *)&v67[4];
    if ((*(_WORD *)&v67[4] & 0x1000) != 0)
    {
      if ((*(_BYTE *)(a1 + 97) & 8) != 0)
      {
        HIDWORD(v72) = 10;
      }
      else
      {
        *(_DWORD *)&v67[4] &= ~0x1000u;
        if ((v22 & 0xFFFFEFFF) == 0)
        {
          syslog(3, "%s: SAE-only mode but device not supporting SAE", "_startAPMode");
          return 4294963393;
        }
      }
    }
  }
  if (!v70)
  {
    v87 = 0;
    v86 = 0u;
    v85 = 0u;
    __strlcpy_chk();
    *(_QWORD *)&v86 = 0x200000019;
    if (Apple80211RawSet())
    {
      if (*__error() == 6)
        return 4294963393;
      if (*__error() != 22)
        return *__error();
    }
    return 4294963396;
  }
  v23 = 4294963393;
  switch(HIDWORD(v72))
  {
    case 0:
      goto LABEL_51;
    case 1:
    case 2:
      v24 = _parsePassword(__s, SHIDWORD(v72), (uint64_t)v74, 0, 0);
      if ((_DWORD)v24)
        return v24;
      if (HIDWORD(v72) == 2)
        v25 = 13;
      else
        v25 = 5;
      LODWORD(v72) = v25;
      v73 = 15;
      goto LABEL_51;
    case 3:
    case 5:
      v24 = _parsePassword(__s, SHIDWORD(v72), (uint64_t)v74, v71, 0);
      if ((_DWORD)v24)
        return v24;
      LODWORD(v72) = 32;
      goto LABEL_51;
    case 6:
      v24 = Apple80211ParseWPAPassword(__s, v74, v20, 0, v71, v70);
      if ((_DWORD)v24)
        return v24;
      v72 = 0x600000020;
      goto LABEL_51;
    case 0xA:
      HIDWORD(v72) = 10;
      v26 = strlen(__s);
      v27 = v26;
      if (v26 - 64 <= 0xFFFFFFFFFFFFFFC7)
      {
        syslog(3, "%s: invalid key length %zd\n", "_startAPMode", v26);
        return 4294963396;
      }
      __strlcpy_chk();
      LODWORD(v72) = v27;
LABEL_51:
      if (a3 == 24)
      {
        v65 = 1;
        if ((v67[4] & 8) != 0)
        {
          v24 = Apple80211ParseWPAPassword(__s, v74, v20, 0, v71, v70);
          if ((_DWORD)v24)
            return v24;
          v72 = 0x600000020;
          v76 = 0x4AC0F0000011430;
          v77 = 1;
          v78 = 78384896;
          v79 = 1;
          v80 = 44830464;
          v81 = 8;
        }
      }
      else
      {
        v65 = 2;
        v28 = CFDictionaryGetValue(a2, CFSTR("AP_MODE_FORCE_BI_100"));
        if (v28 && v28 == v10)
          v65 |= 0x100u;
        v29 = CFDictionaryGetValue(a2, CFSTR("SOFTAP_SOFTAP_HIDDEN_NETWORK"));
        if (v29 && v29 == v10)
          v65 |= 0x200u;
      }
      v30 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_IE_LIST"));
      if (v30)
      {
        v31 = v30;
        v32 = CFDataGetLength(v30);
        v82 = v32;
        if (v32 > 0x400)
          return 4294963396;
        v99.length = v32;
        v99.location = 0;
        CFDataGetBytes(v31, v99, (UInt8 *)&v83);
      }
      v33 = CFDictionaryGetValue(a2, CFSTR("AP_MODE_CARPLAY"));
      if (v33 && v33 == v10)
      {
        if (v82)
          return 4294963396;
        v84 = 0x2000;
        v83 = 0x2000040A00008DDLL;
        v82 = 10;
      }
      v34 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_PHY_MODE"));
      if (!v34 || !CFNumberGetValue(v34, kCFNumberSInt32Type, &v75))
        v75 = 1;
      v87 = 0;
      v86 = 0u;
      v85 = 0u;
      __strlcpy_chk();
      LODWORD(v86) = a3;
      *(_QWORD *)((char *)&v86 + 4) = 0x6E000000001;
      v87 = &v64;
      if (!Apple80211RawSet())
        goto LABEL_76;
      if (*__error() == 6)
        return v23;
      if (*__error() == 22)
        return 4294963396;
      v23 = *__error();
      if ((_DWORD)v23)
        return v23;
LABEL_76:
      if ((*(_WORD *)&v67[4] & 0x140A) == 0 || (*(_BYTE *)(a1 + 95) & 0x20) != 0)
        return 0;
      v96 = -86;
      *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v95[0] = v35;
      v95[1] = v35;
      valuePtr = 0;
      v94[14] = v35;
      v94[15] = v35;
      v94[12] = v35;
      v94[13] = v35;
      v94[10] = v35;
      v94[11] = v35;
      v94[8] = v35;
      v94[9] = v35;
      v94[6] = v35;
      v94[7] = v35;
      v94[4] = v35;
      v94[5] = v35;
      v94[2] = v35;
      v94[3] = v35;
      v94[0] = v35;
      v94[1] = v35;
      v93 = 0;
      v91 = 0u;
      v92 = 0u;
      memset(v90, 0, 19);
      v36 = v70;
      __memcpy_chk();
      *((_BYTE *)v95 + v36) = 0;
      if (v68 >= 0xF)
        v37 = "a";
      else
        v37 = "g";
      __strlcpy_chk();
      v93 = v90;
      LODWORD(v92) = 12;
      DWORD2(v92) = 19;
      if (Apple80211RawGet(a1, (uint64_t)&v91))
      {
        v23 = *__error();
        if (!(_DWORD)v23)
          return v23;
      }
      else
      {
        if ((*(_WORD *)&v67[4] & 0x408) != 0)
          v38 = (*(_DWORD *)&v67[4] >> 1) & 1 | 2;
        else
          v38 = (*(_DWORD *)&v67[4] >> 1) & 1;
        if ((*(_WORD *)&v67[4] & 0x40A) != 0)
          v39 = "WPA-PSK";
        else
          v39 = " ";
        if ((*(_WORD *)&v67[4] & 0x1000) != 0)
        {
          if ((v67[4] & 8) != 0)
            v40 = 1;
          else
            v40 = 2;
          if ((v67[4] & 8) != 0)
            v39 = "WPA-PSK WPA3-SAE";
          else
            v39 = "WPA3-SAE";
          v54 = (v90[12] >> 3) & 1;
          v38 = (*(_DWORD *)&v67[4] >> 1) & 1 | 2;
        }
        else
        {
          v54 = 0;
          v40 = (*(_DWORD *)&v67[4] >> 10) & 1;
        }
        v41 = v90[2];
        v42 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_KEY"));
        if (v42)
        {
          v43 = v42;
          v53 = v40;
          v44 = CFStringGetLength(v42);
          v23 = 4294963396;
          if (v44 && v44 <= 255 && CFStringGetCString(v43, (char *)v94, 256, 0x8000100u))
          {
            v45 = "CCMP";
            if ((*(_WORD *)&v67[4] & 0x1008) == 0)
              v45 = "TKIP";
            if ((~*(_DWORD *)&v67[4] & 0xA) != 0)
              v46 = v45;
            else
              v46 = "TKIP CCMP";
            v47 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AP_MODE_TRANS_DISABLED_FLAGS"));
            if (v47)
            {
              CFNumberGetValue(v47, kCFNumberSInt32Type, &valuePtr);
              v48 = valuePtr;
            }
            else
            {
              v48 = 0;
            }
            memset(buffer, 170, 0x400uLL);
            if (snprintf(buffer, 0x400uLL, "interface=%s\nssid=%s\nhw_mode=%s\nchannel=%u\nmacaddr_acl=0\nauth_algs=1\nwme_enabled=%u\neapol_key_index_workaround=0\nown_ip_addr=127.0.0.1\nwpa=%u\nwpa_passphrase=%s\nwpa_key_mgmt=%s\nwpa_pairwise=%s\nwpa_group_rekey=3600\nieee80211w=%u\nh2e=%u\ntsn_disabled_flags=%u\n",
                                 "ap1",
                                 (const char *)v95,
                                 v37,
                                 v68,
                                 (v41 >> 1) & 1,
                                 v38,
                                 (const char *)v94,
                                 v39,
                                 v46,
                                 v53,
                                 v54,
                                 v48) <= 0x3FF)
            {
              v49 = fopen("/var/run/hostapd.conf", "w");
              fputs(buffer, v49);
              fclose(v49);
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                v89 = "_startHostAPD";
                _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s Trying to launch hostapd process\n", buf, 0xCu);
              }
              mach_service = xpc_connection_create_mach_service("com.apple.wifi.hostapd", 0, 2uLL);
              *(_QWORD *)(a1 + 2056) = mach_service;
              if (mach_service)
              {
                xpc_connection_set_event_handler(mach_service, &__block_literal_global_303);
                xpc_connection_activate(*(xpc_connection_t *)(a1 + 2056));
                v51 = xpc_dictionary_create(0, 0, 0);
                xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 2056), v51, 0, &__block_literal_global_305);
                xpc_release(v51);
                return 0;
              }
              syslog(3, "%s: failed to start hostapd\n", "_startHostAPD");
              v23 = 4294963367;
            }
            else
            {
              v23 = 4294963394;
            }
          }
        }
        else
        {
          v23 = 4294963396;
        }
      }
      v87 = 0;
      v85 = 0u;
      v86 = 0u;
      __strlcpy_chk();
      *(_QWORD *)&v86 = 0x200000019;
      Apple80211RawSet();
      break;
    default:
      return v23;
  }
  return v23;
}

uint64_t _parsePassword(char *__s, int a2, uint64_t a3, char *a4, int a5)
{
  uint64_t result;
  size_t v10;
  unint64_t v11;
  size_t v12;
  void *v13;
  char *v14;
  size_t v15;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  int v28;
  size_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  CC_LONG v33;
  unint64_t v34;
  CC_MD5_CTX c;
  unsigned __int8 md[16];
  char __source[24];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  result = 4294963396;
  if (!__s || !a3)
    return result;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a2 - 1) > 1)
  {
    if (a2 != 3)
      return 4294963393;
    if (a4)
    {
      v17 = strlen(a4);
      return Apple80211ParseWPAPassword(__s, (_BYTE *)a3, v18, 0, a4, v17);
    }
    return result;
  }
  v10 = strlen(__s);
  if (!v10)
    return 4294967196;
  v11 = v10;
  if (a2 == 2)
    v12 = 13;
  else
    v12 = 5;
  if (a5 && v10 == v12)
  {
    v13 = (void *)a3;
    v14 = __s;
    v15 = v11;
LABEL_11:
    memcpy(v13, v14, v15);
    return 0;
  }
  v34 = 0xAAAAAAAAAAAAAAAALL;
  v19 = 10;
  if (a2 == 2)
    v19 = 26;
  if (v10 == v19 && strspn(__s, "0123456789abcdefABCDEF") == v10)
  {
    if (v11 == 10)
      v20 = 5;
    else
      v20 = 13;
    v21 = __s;
    v22 = v11;
    goto LABEL_50;
  }
  v23 = 7;
  if (a2 == 2)
    v23 = 15;
  if (v11 == v23 && *__s == 34 && __s[v11 - 1] == 34)
  {
    v14 = __s + 1;
    v15 = v11 - 2;
    v13 = (void *)a3;
    goto LABEL_11;
  }
  v24 = 11;
  if (a2 == 2)
    v24 = 27;
  if (v11 == v24 && *__s == 36)
  {
    v25 = strspn(__s + 1, "0123456789abcdefABCDEF");
    v22 = v11 - 1;
    if (v25 == v11 - 1)
    {
      if (v11 == 11)
        v20 = 5;
      else
        v20 = 13;
      v21 = __s + 1;
      goto LABEL_50;
    }
  }
  v26 = 12;
  if (a2 == 2)
    v26 = 28;
  if (v11 != v26
    || *__s != 48
    || (__s[1] | 0x20) != 0x78
    || (v27 = strspn(__s + 2, "0123456789abcdefABCDEF"), v27 != v11 - 2))
  {
    if (!a5)
    {
      strcpy(__source, "\x16\xEB\xAD\x57\x0F\xF4\xE3\xDE\x7Dtr\xE8\xD2\xAB\xA6\xA7");
      memset(md, 170, sizeof(md));
      if (v11 <= 0x3A)
      {
        v29 = v11 + 17;
        v30 = (char *)malloc_type_malloc(v29, 0x94D1A2E2uLL);
        if (v30)
        {
          v31 = v30;
          *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&c.data[13] = v32;
          *(_OWORD *)&c.data[6] = v32;
          *(_OWORD *)&c.data[10] = v32;
          *(_OWORD *)&c.Nl = v32;
          *(_OWORD *)&c.data[2] = v32;
          *(_OWORD *)&c.A = v32;
          strlcpy(v30, __s, v29);
          strlcat(v31, __source, v29);
          CC_MD5_Init(&c);
          v33 = strlen(v31);
          CC_MD5_Update(&c, v31, v33);
          CC_MD5_Final(md, &c);
          memset(&c, 0, sizeof(c));
          CC_MD5_Update(&c, md, 0x10u);
          CC_MD5_Final(md, &c);
          memset(&c, 0, sizeof(c));
          CC_MD5_Update(&c, md, 0x10u);
          CC_MD5_Final(md, &c);
          memcpy((void *)a3, md, v12);
          bzero(v31, v29);
          free(v31);
          return 0;
        }
      }
    }
    return 4294967196;
  }
  v22 = v27;
  if (v11 == 12)
    v20 = 5;
  else
    v20 = 13;
  v21 = __s + 2;
LABEL_50:
  v28 = _ParseHexEncodedData(v21, v22, v20, (_BYTE *)a3, &v34);
  result = 4294967196;
  if (v28 && v34 == v20)
    return 0;
  return result;
}

uint64_t _wepPasswordIs104BitHex(uint64_t a1)
{
  int64_t v2;
  const char *v3;

  v2 = strlen((const char *)a1);
  if (v2 <= 25)
  {
    if (v2 == 13 || v2 == 15 && *(_BYTE *)a1 == 34 && *(_BYTE *)(a1 + 14) == 34)
      return 1;
  }
  else
  {
    switch(v2)
    {
      case 28:
        if (*(_BYTE *)a1 != 48 || (*(unsigned __int8 *)(a1 + 1) | 0x20) != 0x78)
          return 0;
        v3 = (const char *)(a1 + 2);
        break;
      case 27:
        if (*(_BYTE *)a1 != 36)
          return 0;
        v3 = (const char *)(a1 + 1);
        break;
      case 26:
        v3 = (const char *)a1;
        break;
      default:
        return 0;
    }
    if (strspn(v3, "0123456789abcdefABCDEF") == 26)
      return 1;
  }
  return 0;
}

BOOL _wepPasswordIs40BitHex(uint64_t a1)
{
  size_t v2;
  _BOOL8 result;
  const char *v4;

  v2 = strlen((const char *)a1) - 5;
  result = 1;
  switch(v2)
  {
    case 0uLL:
      return result;
    case 2uLL:
      if (*(_BYTE *)a1 != 34 || *(_BYTE *)(a1 + 6) != 34)
        return 0;
      return result;
    case 5uLL:
      v4 = (const char *)a1;
      return strspn(v4, "0123456789abcdefABCDEF") == 10;
    case 6uLL:
      if (*(_BYTE *)a1 != 36)
        return 0;
      v4 = (const char *)(a1 + 1);
      break;
    case 7uLL:
      if (*(_BYTE *)a1 != 48 || (*(unsigned __int8 *)(a1 + 1) | 0x20) != 0x78)
        return 0;
      v4 = (const char *)(a1 + 2);
      break;
    default:
      return 0;
  }
  return strspn(v4, "0123456789abcdefABCDEF") == 10;
}

uint64_t _compareQueries(const __CFNumber *a1, const __CFNumber *a2)
{
  unsigned __int16 v4;
  unsigned __int16 valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  valuePtr = -21846;
  v4 = -21846;
  if (!CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr))
    return 1;
  if (!CFNumberGetValue(a2, kCFNumberSInt16Type, &v4))
    return -1;
  if (valuePtr <= v4)
    return 0;
  return -1;
}

uint64_t _dispatchLeakyStatsEvent(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  const __CFData *v10;
  CFStringRef v11;
  CFStringRef v12;
  char *v13;
  CFStringRef v14;
  CFDataRef v15;

  if (!a1)
    return 4294963396;
  v4 = 4294963396;
  if (a2 && a3 == 120)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v7 = Mutable;
      v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
      if (!v9)
      {
        v4 = 4294963395;
LABEL_20:
        CFRelease(v7);
        return v4;
      }
      v10 = v9;
      CFDictionaryAddValue(v7, CFSTR("LEAKY_AP_STATS_VER"), v9);
      v11 = CFStringCreateWithBytes(v8, (const UInt8 *)(a2 + 8), *(unsigned int *)(a2 + 4), 0x8000100u, 0);
      if (!v11)
      {
        v4 = 4294963395;
        v15 = v10;
LABEL_19:
        CFRelease(v15);
        goto LABEL_20;
      }
      v12 = v11;
      CFDictionaryAddValue(v7, CFSTR("LEAKY_AP_SSID"), v11);
      v13 = ether_ntoa((const ether_addr *)(a2 + 40));
      if (v13)
      {
        v14 = CFStringCreateWithCString(v8, v13, 0x8000100u);
        if (v14)
        {
          CFDictionaryAddValue(v7, CFSTR("LEAKY_AP_BSSID"), v14);
          v15 = CFDataCreate(v8, (const UInt8 *)(a2 + 48), 72);
          if (v15)
          {
            CFDictionaryAddValue(v7, CFSTR("LEAKY_AP_LEARNED_DATA"), v15);
            (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 81, v7, 8, *(_QWORD *)(a1 + 80));
            v4 = 0;
            goto LABEL_16;
          }
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      v4 = 4294963395;
LABEL_16:
      CFRelease(v10);
      CFRelease(v12);
      if (v14)
        CFRelease(v14);
      if (!v15)
        goto LABEL_20;
      goto LABEL_19;
    }
    return 4294963395;
  }
  return v4;
}

void _dispatchBGScanNetworkDiscoveredEvent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  uint64_t v8;
  const ether_addr *v9;
  CFMutableDictionaryRef v10;
  __CFDictionary *v11;
  CFIndex v12;
  CFStringRef v13;
  CFDataRef v14;
  char *v15;
  CFStringRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  char v21;
  uint64_t v22;

  if (!a3)
  {
    v7 = 0;
    goto LABEL_34;
  }
  if (a3 >= 8 && 56 * *(unsigned int *)(a2 + 4) + 8 == a3)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v7 = Mutable;
      if (*(int *)(a2 + 4) >= 1)
      {
        v22 = a1;
        v8 = 0;
        v9 = (const ether_addr *)(a2 + 48);
        while (1)
        {
          v10 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v10)
            goto LABEL_35;
          v11 = v10;
          v12 = *(unsigned int *)v9[-6].octet;
          if ((_DWORD)v12 && v9[-6].octet[4])
          {
            v13 = CFStringCreateWithBytes(v5, &v9[-6].octet[4], v12, 0x8000100u, 0);
            v14 = CFDataCreate(v5, &v9[-6].octet[4], *(unsigned int *)v9[-6].octet);
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
          v15 = ether_ntoa(v9);
          if (v15)
          {
            v16 = CFStringCreateWithCString(v5, v15, 0x8000100u);
            if (v16)
            {
              v17 = CFNumberCreate(v5, kCFNumberSInt16Type, &v9[1].octet[2]);
              if (v17)
              {
                v18 = v17;
                CFDictionarySetValue(v11, CFSTR("RSSI"), v17);
                CFRelease(v18);
                v19 = CFNumberCreate(v5, kCFNumberSInt32Type, &v9[2]);
                if (v19)
                {
                  v20 = v19;
                  CFDictionarySetValue(v11, CFSTR("AGE"), v19);
                  CFRelease(v20);
                  CFDictionarySetValue(v11, CFSTR("BSSID"), v16);
                  if (v14)
                    CFDictionarySetValue(v11, CFSTR("SSID"), v14);
                  if (v13)
                    CFDictionarySetValue(v11, CFSTR("SSID_STR"), v13);
                  CFArrayAppendValue(v7, v11);
                }
              }
              v21 = 1;
            }
            else
            {
              v21 = 0;
            }
          }
          else
          {
            v21 = 0;
            v16 = 0;
          }
          CFRelease(v11);
          if (v14)
            CFRelease(v14);
          if (v16)
            CFRelease(v16);
          if (v13)
            CFRelease(v13);
          if ((v21 & 1) == 0)
            goto LABEL_35;
          ++v8;
          v9 = (const ether_addr *)((char *)v9 + 56);
          if (v8 >= *(int *)(a2 + 4))
          {
            a1 = v22;
            break;
          }
        }
      }
LABEL_34:
      (*(void (**)(_QWORD, uint64_t, uint64_t, __CFArray *, uint64_t, _QWORD))(a1 + 72))(0, a1, 31, v7, 8, *(_QWORD *)(a1 + 80));
LABEL_35:
      if (v7)
        CFRelease(v7);
    }
  }
}

void _dispatchSIBEvent(uint64_t a1, _DWORD *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFMutableDictionaryRef v7;
  __CFDictionary *v8;
  int v9;
  const __CFAllocator *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  const __CFAllocator *v23;
  const __CFAllocator *v24;
  CFNumberRef v25;
  const __CFAllocator *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  const __CFString *v29;
  const __CFAllocator *v30;
  CFNumberRef v31;
  unint64_t v32;
  unsigned int *v33;
  CFMutableDictionaryRef v34;
  __CFDictionary *v35;
  CFStringRef v36;
  CFStringRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  const __CFAllocator *v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  const __CFAllocator *v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  const __CFAllocator *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  const __CFAllocator *v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFNumberRef v83;
  int v84;
  uint64_t v85;
  CFNumberRef v86;
  __CFDictionary *v87;
  uint64_t v88;
  int valuePtr;
  uint8_t buf[4];
  const char *v91;
  __int16 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  valuePtr = 0;
  v88 = 0;
  if (a2)
  {
    if (a3 == 176)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (v7)
        {
          v8 = v7;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            v84 = *a2;
            *(_DWORD *)buf = 136315394;
            v91 = "_dispatchSIBEvent";
            v92 = 1024;
            v93 = v84;
            _os_log_debug_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%s: processing SIB event of type: %d\n", buf, 0x12u);
          }
          v9 = *a2;
          switch(*a2)
          {
            case 1:
              valuePtr = 11;
              goto LABEL_19;
            case 2:
              valuePtr = 12;
              v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v11)
                goto LABEL_63;
              v12 = v11;
              v88 = a2[1];
              v13 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v13)
                goto LABEL_62;
              v14 = v13;
              CFDictionarySetValue(v8, CFSTR("BSP_CoexMode"), v13);
              CFRelease(v14);
              v88 = a2[3];
              v15 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v15)
                goto LABEL_62;
              v16 = v15;
              CFDictionarySetValue(v8, CFSTR("BSP_BTSubband"), v15);
              CFRelease(v16);
              v88 = a2[4];
              v17 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v17)
                goto LABEL_62;
              v18 = v17;
              CFDictionarySetValue(v8, CFSTR("BSP_SuccessCount"), v17);
              CFRelease(v18);
              v88 = a2[6];
              v19 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v19)
                goto LABEL_62;
              v20 = v19;
              CFDictionarySetValue(v8, CFSTR("BSP_RejectCount"), v19);
              CFRelease(v20);
              v88 = a2[5];
              v21 = CFNumberCreate(v10, kCFNumberLongLongType, &v88);
              if (!v21)
                goto LABEL_62;
              v22 = v21;
              CFDictionarySetValue(v8, CFSTR("BSP_FailCount"), v21);
              CFRelease(v22);
              v88 = a2[2];
              v23 = v10;
              goto LABEL_43;
            case 3:
              valuePtr = 13;
LABEL_19:
              v24 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v25)
                goto LABEL_63;
              v12 = v25;
              v88 = 0;
              v26 = v24;
              goto LABEL_21;
            case 4:
              valuePtr = 14;
              v30 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v31)
                goto LABEL_63;
              v12 = v31;
              if (a2[1])
              {
                v85 = a1;
                v86 = v31;
                v87 = v6;
                v32 = 0;
                v33 = a2 + 4;
                while (1)
                {
                  v34 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                  if (!v34)
                    goto LABEL_69;
                  v35 = v34;
                  v36 = CFStringCreateWithFormat(v30, 0, CFSTR("%u"), *(v33 - 2));
                  if (!v36)
                    goto LABEL_68;
                  v37 = v36;
                  v88 = *(v33 - 1);
                  v38 = CFNumberCreate(v30, kCFNumberLongLongType, &v88);
                  if (!v38)
                    break;
                  v39 = v38;
                  CFDictionarySetValue(v35, CFSTR("BSP_ChqHealth"), v38);
                  CFRelease(v39);
                  v88 = *v33;
                  v40 = CFNumberCreate(v30, kCFNumberLongLongType, &v88);
                  if (!v40)
                    break;
                  v41 = v40;
                  CFDictionarySetValue(v35, CFSTR("BSP_ChqAgeMs"), v40);
                  CFRelease(v41);
                  CFDictionarySetValue(v8, v37, v35);
                  CFRelease(v37);
                  CFRelease(v35);
                  ++v32;
                  v33 += 3;
                  if (v32 >= a2[1])
                  {
                    v12 = v86;
                    v6 = v87;
                    a1 = v85;
LABEL_61:
                    CFDictionarySetValue(v6, CFSTR("BSP_EventType"), v12);
                    CFDictionarySetValue(v6, CFSTR("BSP_EventParams"), v8);
                    (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 192, v6, 8, *(_QWORD *)(a1 + 80));
                    goto LABEL_62;
                  }
                }
                CFRelease(v37);
LABEL_68:
                CFRelease(v35);
LABEL_69:
                v12 = v86;
                v6 = v87;
              }
              else
              {
                v88 = 0;
                v26 = v30;
LABEL_21:
                v27 = CFNumberCreate(v26, kCFNumberLongLongType, &v88);
                if (v27)
                {
                  v28 = v27;
                  v29 = CFSTR("dummy");
LABEL_60:
                  CFDictionarySetValue(v8, v29, v28);
                  CFRelease(v28);
                  goto LABEL_61;
                }
              }
LABEL_62:
              CFRelease(v12);
LABEL_63:
              CFRelease(v8);
              break;
            case 5:
              valuePtr = 15;
              v42 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v43 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v43)
                goto LABEL_63;
              v12 = v43;
              v88 = a2[2];
              v44 = CFNumberCreate(v42, kCFNumberLongLongType, &v88);
              if (!v44)
                goto LABEL_62;
              v45 = v44;
              CFDictionarySetValue(v8, CFSTR("BSP_ReasonCode"), v44);
              CFRelease(v45);
              v88 = a2[1];
              v46 = CFNumberCreate(v42, kCFNumberLongLongType, &v88);
              if (!v46)
                goto LABEL_62;
              v28 = v46;
              v29 = CFSTR("BSP_BTSubband");
              goto LABEL_60;
            case 6:
              valuePtr = 16;
              v47 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v48 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v48)
                goto LABEL_63;
              v12 = v48;
              v88 = a2[2];
              v49 = CFNumberCreate(v47, kCFNumberLongLongType, &v88);
              if (!v49)
                goto LABEL_62;
              v50 = v49;
              CFDictionarySetValue(v8, CFSTR("BSP_ReasonCode"), v49);
              CFRelease(v50);
              v88 = a2[1];
              v51 = CFNumberCreate(v47, kCFNumberLongLongType, &v88);
              if (!v51)
                goto LABEL_62;
              v28 = v51;
              v29 = CFSTR("BSP_TargetBand");
              goto LABEL_60;
            case 7:
              valuePtr = 18;
              v52 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v53 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v53)
                goto LABEL_63;
              v12 = v53;
              v88 = a2[1];
              v54 = CFNumberCreate(v52, kCFNumberLongLongType, &v88);
              if (!v54)
                goto LABEL_62;
              v55 = v54;
              CFDictionarySetValue(v8, CFSTR("BSP_CoexMode"), v54);
              CFRelease(v55);
              v88 = a2[2];
              v23 = v52;
LABEL_43:
              v56 = CFNumberCreate(v23, kCFNumberLongLongType, &v88);
              if (!v56)
                goto LABEL_62;
              v28 = v56;
              v29 = CFSTR("BSP_SIB_TimeToTST");
              goto LABEL_60;
            case 8:
              valuePtr = 19;
              v57 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v58 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongLongType, &valuePtr);
              if (!v58)
                goto LABEL_63;
              v12 = v58;
              v88 = *((unsigned __int8 *)a2 + 4);
              v59 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v59)
                goto LABEL_62;
              v60 = v59;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_Overflowed"), v59);
              CFRelease(v60);
              v88 = a2[2];
              v61 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v61)
                goto LABEL_62;
              v62 = v61;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_TimeToTST"), v61);
              CFRelease(v62);
              v88 = a2[3];
              v63 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v63)
                goto LABEL_62;
              v64 = v63;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_SampleDurationMS"), v63);
              CFRelease(v64);
              v88 = a2[4];
              v65 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v65)
                goto LABEL_62;
              v66 = v65;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_IsScanActive"), v65);
              CFRelease(v66);
              v88 = a2[5];
              v67 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v67)
                goto LABEL_62;
              v68 = v67;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_IsP2PActive"), v67);
              CFRelease(v68);
              v88 = a2[6];
              v69 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v69)
                goto LABEL_62;
              v70 = v69;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_TriggerCount"), v69);
              CFRelease(v70);
              v88 = a2[7];
              v71 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v71)
                goto LABEL_62;
              v72 = v71;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_MutePercentage"), v71);
              CFRelease(v72);
              v88 = a2[8];
              v73 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v73)
                goto LABEL_62;
              v74 = v73;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_MaxMuteMS"), v73);
              CFRelease(v74);
              v88 = a2[9];
              v75 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v75)
                goto LABEL_62;
              v76 = v75;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_AvgMuteMS"), v75);
              CFRelease(v76);
              v88 = a2[10];
              v77 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v77)
                goto LABEL_62;
              v78 = v77;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_ErrorPercentage"), v77);
              CFRelease(v78);
              v88 = a2[11];
              v79 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v79)
                goto LABEL_62;
              v80 = v79;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_TimeoutPercentageOfTriggers"), v79);
              CFRelease(v80);
              v88 = a2[12];
              v81 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v81)
                goto LABEL_62;
              v82 = v81;
              CFDictionarySetValue(v8, CFSTR("BSP_LQM_RejectOrFailPercentageOfTriggers"), v81);
              CFRelease(v82);
              v88 = a2[13];
              v83 = CFNumberCreate(v57, kCFNumberLongLongType, &v88);
              if (!v83)
                goto LABEL_62;
              v28 = v83;
              v29 = CFSTR("BSP_LQM_MaxConsecutiveFails");
              goto LABEL_60;
            default:
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v91 = "_dispatchSIBEvent";
                v92 = 1024;
                v93 = v9;
                _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s - : Unhandled apple80211_bsp_event_type event from WiFi Driver. Event type: %d", buf, 0x12u);
              }
              goto LABEL_63;
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchLinkChangedEvent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  const __CFNumber *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;

  if (a3 >= 0x20)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, (const void *)a2);
      if (!v8)
      {
LABEL_29:
        CFRelease(v6);
        return;
      }
      v9 = v8;
      CFDictionaryAddValue(v6, CFSTR("LINK_CHANGED_IS_LINKDOWN"), v8);
      v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
      if (!v10)
      {
        v15 = v9;
LABEL_28:
        CFRelease(v15);
        goto LABEL_29;
      }
      v11 = v10;
      CFDictionaryAddValue(v6, CFSTR("RSSI"), v10);
      if (*(_BYTE *)a2)
      {
        v12 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 16));
        if (v12)
        {
          CFDictionaryAddValue(v6, CFSTR("LINKDOWN_IS_INVOL"), v12);
          v13 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 20));
          if (v13)
          {
            CFDictionaryAddValue(v6, CFSTR("LINKDOWN_REASON_CODE"), v13);
            v14 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 24));
            if (v14)
            {
              CFDictionaryAddValue(v6, CFSTR("LINKDOWN_SUBREASON_CODE"), v14);
              goto LABEL_36;
            }
LABEL_17:
            v16 = 0;
            goto LABEL_18;
          }
LABEL_16:
          v14 = 0;
          goto LABEL_17;
        }
LABEL_15:
        v13 = 0;
        goto LABEL_16;
      }
      if (*(_WORD *)(a2 + 8))
      {
        v12 = CFNumberCreate(v7, kCFNumberSInt16Type, (const void *)(a2 + 8));
        if (!v12)
          goto LABEL_15;
        CFDictionaryAddValue(v6, CFSTR("SNR"), v12);
      }
      else
      {
        v12 = 0;
      }
      if (*(_WORD *)(a2 + 10))
      {
        v13 = CFNumberCreate(v7, kCFNumberSInt16Type, (const void *)(a2 + 10));
        if (!v13)
          goto LABEL_16;
        CFDictionaryAddValue(v6, CFSTR("NOISE"), v13);
      }
      else
      {
        v13 = 0;
      }
      v14 = 0;
LABEL_36:
      v16 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 28));
      if (v16)
      {
        CFDictionaryAddValue(v6, CFSTR("LINK_DEBOUNCE_STATE"), v16);
        v15 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 29));
        if (v15)
        {
          CFDictionaryAddValue(v6, CFSTR("LINK_DEBOUNCE_RESULT"), v15);
          (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 4, v6, 8, *(_QWORD *)(a1 + 80));
        }
LABEL_19:
        CFRelease(v9);
        CFRelease(v11);
        if (v12)
          CFRelease(v12);
        if (v13)
          CFRelease(v13);
        if (v14)
          CFRelease(v14);
        if (v16)
          CFRelease(v16);
        if (!v15)
          goto LABEL_29;
        goto LABEL_28;
      }
LABEL_18:
      v15 = 0;
      goto LABEL_19;
    }
  }
}

void _dispatchTxFailureHistoryEvent(uint64_t a1, int *a2, unsigned int a3)
{
  int *v3;
  unsigned int v5;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  int v14;
  int *v15;
  int v16;
  CFMutableArrayRef v17;
  __CFArray *v18;
  uint64_t i;
  CFNumberRef v20;
  CFNumberRef v21;
  __CFDictionary *v22;
  const __CFString *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  uint32_t v30;
  unsigned int v31;
  int valuePtr;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return;
  v3 = a2;
  if (!a2)
    return;
  if (a3 <= 0x3B)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 136315394;
    v34 = "_dispatchTxFailureHistoryEvent";
    v35 = 1024;
    v36 = a3;
    v28 = MEMORY[0x24BDACB70];
    v29 = "%s:TxFailEvent with Insufficient DataLen:%u\n";
    v30 = 18;
LABEL_55:
    _os_log_impl(&dword_20647D000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, v30);
    return;
  }
  v5 = a3 - 8;
  v31 = (a3 - 8) / 0x34;
  if ((a3 - 8) % 0x34)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 67109120;
    LODWORD(v34) = v5;
    v28 = MEMORY[0x24BDACB70];
    v29 = "Invalid phyRateSeriesLen:%u \n";
LABEL_49:
    v30 = 8;
    goto LABEL_55;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 136315138;
    v34 = "_dispatchTxFailureHistoryEvent";
    v28 = MEMORY[0x24BDACB70];
    v29 = "%s:Failed to Allocate Memory for TxFail Dictionary\n";
    goto LABEL_54;
  }
  if (v31 != *v3)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 67109120;
    LODWORD(v34) = v5;
    v28 = MEMORY[0x24BDACB70];
    v29 = "Invalid phyRateSeriesLen:%u \n";
    goto LABEL_49;
  }
  v9 = Mutable;
  v10 = CFNumberCreate(v7, kCFNumberSInt32Type, v3);
  if (!v10)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 136315138;
    v34 = "_dispatchTxFailureHistoryEvent";
    v28 = MEMORY[0x24BDACB70];
    v29 = "%s:numRef allocation Failed!\n";
LABEL_54:
    v30 = 12;
    goto LABEL_55;
  }
  v11 = v10;
  CFDictionarySetValue(v9, CFSTR("TX_FAILURE_PHYRATE_SERIES_COUNT"), v10);
  CFRelease(v11);
  v12 = CFNumberCreate(v7, kCFNumberSInt32Type, v3 + 1);
  if (v12)
  {
    v13 = v12;
    CFDictionarySetValue(v9, CFSTR("TX_FAILURE_EVENT_SEQUENCE_NUMBER"), v12);
    CFRelease(v13);
    v14 = 0;
    v15 = v3 + 2;
    while (2)
    {
      v16 = *v15;
      valuePtr = BYTE1(*v15);
      v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
      if (v17)
      {
        v18 = v17;
        for (i = 3; i != 15; ++i)
        {
          v20 = CFNumberCreate(v7, kCFNumberSInt32Type, &v3[i]);
          if (!v20)
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_35;
            *(_DWORD *)buf = 136315138;
            v34 = "_dispatchTxFailureHistoryEvent";
            v26 = MEMORY[0x24BDACB70];
            v27 = "%s:failCount allocation Failed!\n";
            goto LABEL_34;
          }
          v21 = v20;
          CFArrayAppendValue(v18, v20);
          CFRelease(v21);
        }
        switch(v16)
        {
          case 4u:
            v22 = v9;
            if (BYTE2(v16) == 1)
              v23 = CFSTR("TX_FAILURE_PHYRATE_SERIES_11AC_1SS");
            else
              v23 = CFSTR("TX_FAILURE_PHYRATE_SERIES_11AC_2SS");
            break;
          case 2u:
            v22 = v9;
            if (BYTE2(v16) == 1)
              v23 = CFSTR("TX_FAILURE_PHYRATE_SERIES_11N_1SS");
            else
              v23 = CFSTR("TX_FAILURE_PHYRATE_SERIES_11N_2SS");
            break;
          case 1u:
            v22 = v9;
            v23 = CFSTR("TX_FAILURE_PHYRATE_SERIES_LEGACY_RATES");
            break;
          default:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v34) = v16;
              _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Invalid RateIndexType:%u", buf, 8u);
            }
LABEL_27:
            CFRelease(v18);
            if (!valuePtr)
            {
LABEL_30:
              v15 += 13;
              ++v14;
              v3 += 13;
              if (v14 != v31)
                continue;
              goto LABEL_35;
            }
            v24 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
            if (v24)
            {
              v25 = v24;
              CFDictionarySetValue(v9, CFSTR("TX_FAILURE_PHYRATE_AMPDU_FRAMES"), v24);
              CFRelease(v25);
              goto LABEL_30;
            }
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_35;
            *(_DWORD *)buf = 136315138;
            v34 = "_dispatchTxFailureHistoryEvent";
            v26 = MEMORY[0x24BDACB70];
            v27 = "%s:ampduNumRef allocation Failed!\n";
LABEL_34:
            _os_log_impl(&dword_20647D000, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0xCu);
            goto LABEL_35;
        }
        CFDictionarySetValue(v22, v23, v18);
        goto LABEL_27;
      }
      break;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v34 = "_dispatchTxFailureHistoryEvent";
      v26 = MEMORY[0x24BDACB70];
      v27 = "%s:array allocation Failed!\n";
      goto LABEL_34;
    }
LABEL_35:
    (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 89, v9, 8, *(_QWORD *)(a1 + 80));
    CFRelease(v9);
    return;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v34 = "_dispatchTxFailureHistoryEvent";
    v28 = MEMORY[0x24BDACB70];
    v29 = "%s:numRef allocation Failed!\n";
    goto LABEL_54;
  }
}

void _dispatchObssMitInfoEvent(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  const __CFNumber *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  __CFArray *v19;
  uint64_t v20;
  char v21;
  char v22;
  CFNumberRef v23;
  uint64_t v24;
  CFNumberRef v25;
  uint64_t v26;
  uint64_t v27;
  CFNumberRef v28;
  CFNumberRef v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef cf;

  if (a2)
  {
    if (a3 == 44)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)(a2 + 20));
        if (!v8)
        {
LABEL_47:
          CFRelease(v6);
          return;
        }
        v9 = v8;
        CFDictionaryAddValue(v6, CFSTR("LAST_OBSS_STATS_TIME"), v8);
        v10 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)a2);
        if (!v10)
        {
          v25 = v9;
LABEL_46:
          CFRelease(v25);
          goto LABEL_47;
        }
        v11 = v10;
        CFDictionaryAddValue(v6, CFSTR("SHOULD_APPLY_OBSS_MIT"), v10);
        v12 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 1));
        cf = v12;
        if (v12
          && (CFDictionaryAddValue(v6, CFSTR("IS_OBSS_MIT_APPLIED"), v12),
              (v13 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 2))) != 0))
        {
          v36 = v13;
          CFDictionaryAddValue(v6, CFSTR("CURRENT_OP_BW"), v13);
          v14 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 3));
          if (v14)
          {
            v34 = v14;
            CFDictionaryAddValue(v6, CFSTR("RECOMM_OBSS_MIT_BW"), v14);
            v15 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
            if (v15)
            {
              v33 = v15;
              CFDictionaryAddValue(v6, CFSTR("OBSS_RX_PLCP_ERR"), v15);
              v16 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 8));
              if (v16)
              {
                v35 = v16;
                CFDictionaryAddValue(v6, CFSTR("OBSS_RX_BAD_FCS_ERR"), v16);
                v17 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
                if (v17)
                {
                  v32 = v17;
                  CFDictionaryAddValue(v6, CFSTR("OBSS_RX_FRAMES"), v17);
                  v18 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
                  if (v18)
                  {
                    CFDictionaryAddValue(v6, CFSTR("OBSS_RX_PER_PCT"), v18);
                    v19 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
                    if (v19)
                    {
                      v20 = 0;
                      v21 = 1;
                      while (1)
                      {
                        v22 = v21;
                        v23 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + v20 + 40));
                        if (!v23)
                          break;
                        CFArrayAppendValue(v19, v23);
                        CFRelease(v23);
                        v21 = 0;
                        v20 = 1;
                        if ((v22 & 1) == 0)
                        {
                          CFDictionaryAddValue(v6, CFSTR("OBSS_MIT_SOI"), v19);
                          v23 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
                          if (!v23)
                            break;
                          v30 = v11;
                          v31 = v9;
                          v24 = 0;
                          while (1)
                          {
                            v25 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 24 + v24));
                            if (!v25)
                              break;
                            CFArrayAppendValue(v23, v25);
                            CFRelease(v25);
                            if (++v24 == 8)
                            {
                              CFDictionaryAddValue(v6, CFSTR("OBSS_PWREST_CORE0"), v23);
                              v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
                              if (v25)
                              {
                                v26 = 0;
                                v27 = a2 + 32;
                                while (1)
                                {
                                  v28 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(v27 + v26));
                                  if (!v28)
                                    break;
                                  v29 = v28;
                                  CFArrayAppendValue(v25, v28);
                                  CFRelease(v29);
                                  if (++v26 == 8)
                                  {
                                    CFDictionaryAddValue(v6, CFSTR("OBSS_PWREST_CORE1"), v25);
                                    (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 218, v6, 8, *(_QWORD *)(a1 + 80));
                                    goto LABEL_26;
                                  }
                                }
                              }
                              break;
                            }
                          }
LABEL_26:
                          v11 = v30;
                          v9 = v31;
                          goto LABEL_27;
                        }
                      }
LABEL_56:
                      v25 = 0;
LABEL_27:
                      CFRelease(v9);
                      CFRelease(v11);
                      if (cf)
                        CFRelease(cf);
                      if (v36)
                        CFRelease(v36);
                      if (v34)
                        CFRelease(v34);
                      if (v33)
                        CFRelease(v33);
                      if (v35)
                        CFRelease(v35);
                      if (v32)
                        CFRelease(v32);
                      if (v18)
                        CFRelease(v18);
                      if (v19)
                        CFRelease(v19);
                      if (v23)
                        CFRelease(v23);
                      if (!v25)
                        goto LABEL_47;
                      goto LABEL_46;
                    }
LABEL_55:
                    v23 = 0;
                    goto LABEL_56;
                  }
LABEL_54:
                  v19 = 0;
                  goto LABEL_55;
                }
LABEL_53:
                v32 = 0;
                v18 = 0;
                goto LABEL_54;
              }
LABEL_52:
              v35 = 0;
              goto LABEL_53;
            }
LABEL_51:
            v33 = 0;
            goto LABEL_52;
          }
        }
        else
        {
          v36 = 0;
        }
        v34 = 0;
        goto LABEL_51;
      }
    }
  }
}

void _dispatchBTCoexStatsUpdateEvent(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  const __CFNumber *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;

  if (a2)
  {
    if (a3 == 28)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)(a2 + 8));
        if (!v8)
        {
LABEL_32:
          CFRelease(v6);
          return;
        }
        v9 = v8;
        CFDictionaryAddValue(v6, CFSTR("BTC_STATS_TOT_DUR_MS"), v8);
        v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
        if (!v10)
        {
          v17 = v9;
LABEL_31:
          CFRelease(v17);
          goto LABEL_32;
        }
        v11 = v10;
        CFDictionaryAddValue(v6, CFSTR("BTC_STATS_BT_DUR_MS"), v10);
        v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)a2);
        if (v12)
        {
          CFDictionaryAddValue(v6, CFSTR("BTC_STATS_HYBRID_CNT"), v12);
          v13 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v13)
          {
            CFDictionaryAddValue(v6, CFSTR("BTC_STATS_TDD_CNT"), v13);
            v14 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
            if (v14)
            {
              v19 = v14;
              CFDictionaryAddValue(v6, CFSTR("BTC_STATS_PARALLEL_CNT"), v14);
              v15 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 20));
              if (v15)
              {
                CFDictionaryAddValue(v6, CFSTR("BTC_STATS_BT_DUR_AIR_MS"), v15);
                v16 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 24));
                if (v16)
                {
                  CFDictionaryAddValue(v6, CFSTR("BTC_STATS_WLRSSI_COEX"), v16);
                  v17 = CFNumberCreate(v7, kCFNumberSInt8Type, (const void *)(a2 + 25));
                  if (v17)
                  {
                    CFDictionaryAddValue(v6, CFSTR("BTC_STATS_BTRSSI_COEX"), v17);
                    (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 190, v6, 8, *(_QWORD *)(a1 + 80));
                  }
                  goto LABEL_19;
                }
              }
              else
              {
                v16 = 0;
              }
              v17 = 0;
LABEL_19:
              v18 = v19;
LABEL_20:
              CFRelease(v9);
              CFRelease(v11);
              if (v12)
                CFRelease(v12);
              if (v13)
                CFRelease(v13);
              if (v18)
                CFRelease(v18);
              if (v15)
                CFRelease(v15);
              if (v16)
                CFRelease(v16);
              if (!v17)
                goto LABEL_32;
              goto LABEL_31;
            }
          }
        }
        else
        {
          v13 = 0;
        }
        v18 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        goto LABEL_20;
      }
    }
  }
}

void _dispatchAsyncAssocEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  uint64_t v12;
  int v13;
  CFMutableDictionaryRef v14;
  __CFDictionary *v15;
  CFDataRef v16;
  CFDataRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  CFNumberRef v40;
  CFNumberRef v41;
  int v42;
  int v43;
  NSObject *v44;
  const char *v45;
  uint32_t v46;
  uint64_t v47;
  unsigned int v48;
  __CFRunLoopTimer *v49;
  CFAbsoluteTime Current;
  NSObject *v51;
  dispatch_time_t v52;
  __CFRunLoopTimer *v53;
  CFAbsoluteTime v54;
  NSObject *v55;
  dispatch_time_t v56;
  int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  CFNumberRef v62;
  CFNumberRef v63;
  int v65;
  const void *v66;
  NSObject *v67;
  const char *v68;
  uint32_t v69;
  int v70;
  uint64_t v71;
  int valuePtr;
  uint8_t buf[4];
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v85 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v83 = v7;
  v84 = v7;
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v74 = "_dispatchAsyncAssocEvent";
      v44 = MEMORY[0x24BDACB70];
      v45 = "%s:join status is nil!\n";
      v46 = 12;
      goto LABEL_22;
    }
LABEL_23:
    if (!*(_BYTE *)(a1 + 4) || (*(_DWORD *)a1 & 0x80000000) != 0 || !*(_QWORD *)(a1 + 344))
      return;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 272));
    if (!a2)
    {
      v85 = 0;
      v83 = 0u;
      v84 = 0u;
      __strlcpy_chk();
      LODWORD(v84) = 21;
      v47 = Apple80211RawGet(a1, (uint64_t)&v83);
      if ((_DWORD)v47)
      {
        a3 = v47;
        goto LABEL_71;
      }
      if (DWORD1(v84) == 0xFFFF)
      {
        v48 = *(_DWORD *)(a1 + 1584);
        if (v48 <= 0x27)
        {
          if (!v48)
          {
            v49 = *(__CFRunLoopTimer **)(a1 + 1568);
            if (v49)
            {
              Current = CFAbsoluteTimeGetCurrent();
              CFRunLoopTimerSetNextFireDate(v49, Current + 0.2);
            }
            v51 = *(NSObject **)(a1 + 1576);
            if (v51)
            {
              v52 = dispatch_time(0, 200000000);
              dispatch_source_set_timer(v51, v52, 0xBEBC200uLL, 0);
            }
          }
          ++*(_DWORD *)(a1 + 1584);
          goto LABEL_73;
        }
        a3 = 4294963391;
      }
      else
      {
        a3 = _errorForAssociateResult(SDWORD1(v84));
      }
    }
    v53 = *(__CFRunLoopTimer **)(a1 + 1568);
    if (v53)
    {
      v54 = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v53, v54 + 315360000.0);
    }
    v55 = *(NSObject **)(a1 + 1576);
    if (v55)
    {
      v56 = dispatch_time(0, 315360000000000000);
      dispatch_source_set_timer(v55, v56, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    if (!*(_BYTE *)(a1 + 620))
      goto LABEL_71;
    if (!(_DWORD)a3)
    {
      v62 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)(a1 + 616));
      if (v62)
      {
        v63 = v62;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 344), CFSTR("WEP_AUTH_Flags"), v62);
        CFRelease(v63);
      }
      a3 = 0;
      goto LABEL_71;
    }
    if ((a3 + 3912) <= 7 && ((1 << (a3 + 72)) & 0x85) != 0)
    {
      v57 = *(_DWORD *)(a1 + 352);
      if (v57 == 2)
      {
        *(_DWORD *)(a1 + 612) = a3;
      }
      else if (v57 == 3)
      {
        v58 = *(_DWORD *)(a1 + 612);
        v59 = (_DWORD)a3 == -3905 && v58 == -3905;
        v60 = v59;
        v61 = v58 == -3910 && (_DWORD)a3 == -3910;
        if (!v61 && !v60)
          goto LABEL_71;
      }
      if ((_DWORD)a3 != -3910 || (v57 + 1) >= 4)
        v65 = v57 + 1;
      else
        v65 = 4;
      *(_DWORD *)(a1 + 352) = v65;
      a3 = _initiateAutoWEPSequence(a1, a1 + 624, (char *)(a1 + 356), (_DWORD *)(a1 + 352), (int *)(a1 + 616), 1);
      if (!(_DWORD)a3)
      {
LABEL_73:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 272));
        return;
      }
    }
LABEL_71:
    v66 = *(const void **)(a1 + 344);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_OWORD *)(a1 + 356) = 0u;
    *(_OWORD *)(a1 + 372) = 0u;
    *(_OWORD *)(a1 + 388) = 0u;
    *(_OWORD *)(a1 + 404) = 0u;
    *(_OWORD *)(a1 + 420) = 0u;
    *(_OWORD *)(a1 + 436) = 0u;
    *(_OWORD *)(a1 + 452) = 0u;
    *(_OWORD *)(a1 + 468) = 0u;
    *(_OWORD *)(a1 + 484) = 0u;
    *(_OWORD *)(a1 + 500) = 0u;
    *(_OWORD *)(a1 + 516) = 0u;
    *(_OWORD *)(a1 + 532) = 0u;
    *(_OWORD *)(a1 + 548) = 0u;
    *(_OWORD *)(a1 + 564) = 0u;
    *(_OWORD *)(a1 + 580) = 0u;
    *(_OWORD *)(a1 + 596) = 0u;
    *(_BYTE *)(a1 + 620) = 0;
    *(_DWORD *)(a1 + 616) = 0;
    *(_DWORD *)(a1 + 352) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 272));
    (*(void (**)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, _QWORD))(a1 + 72))(a3, a1, 9, v66, 8, *(_QWORD *)(a1 + 80));
    if (v66)
      CFRelease(v66);
    return;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (Mutable)
  {
    v11 = Mutable;
    v70 = a2;
    v71 = a1;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (!v14)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315138;
        v74 = "_dispatchAsyncAssocEvent";
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:innerDict allocation Failed!\n";
        goto LABEL_76;
      }
      v15 = v14;
      v16 = CFDataCreate(v9, (const UInt8 *)(a4 + v12 + 16), 6);
      if (!v16)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:bssid at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v17 = v16;
      CFDictionaryAddValue(v15, CFSTR("BSSID"), v16);
      CFRelease(v17);
      v18 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 28));
      if (!v18)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:authStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v19 = v18;
      CFDictionaryAddValue(v15, CFSTR("AUTHEVENT_STATUS"), v18);
      CFRelease(v19);
      v20 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 32));
      if (!v20)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:authReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v21 = v20;
      CFDictionaryAddValue(v15, CFSTR("AUTHEVENT_REASON"), v20);
      CFRelease(v21);
      v22 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 36));
      if (!v22)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:assocStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v23 = v22;
      CFDictionaryAddValue(v15, CFSTR("ASSOCEVENT_STATUS"), v22);
      CFRelease(v23);
      v24 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 40));
      if (!v24)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:assocReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v25 = v24;
      CFDictionaryAddValue(v15, CFSTR("ASSOCEVENT_REASON"), v24);
      CFRelease(v25);
      v26 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 44));
      if (!v26)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:setSsidStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v27 = v26;
      CFDictionaryAddValue(v15, CFSTR("SETSSID_STATUS"), v26);
      CFRelease(v27);
      v28 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 48));
      if (!v28)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:setSsidReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v29 = v28;
      CFDictionaryAddValue(v15, CFSTR("SETSSID_REASON"), v28);
      CFRelease(v29);
      v30 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 52));
      if (!v30)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:supplEvStatus at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v31 = v30;
      CFDictionaryAddValue(v15, CFSTR("SUPPLICANTEVENT_STATUS"), v30);
      CFRelease(v31);
      v32 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 56));
      if (!v32)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:supplEvReason at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v33 = v32;
      CFDictionaryAddValue(v15, CFSTR("SUPPLICANTEVENT_REASON"), v32);
      CFRelease(v33);
      v34 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a4 + v12 + 24));
      if (!v34)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136315394;
        v74 = "_dispatchAsyncAssocEvent";
        v75 = 1024;
        v76 = v13;
        v67 = MEMORY[0x24BDACB70];
        v68 = "%s:flags at idx %d allocation Failed!\n";
        goto LABEL_97;
      }
      v35 = v34;
      CFDictionaryAddValue(v15, CFSTR("JOIN_STATUS_SUBSTATE_FLAGS"), v34);
      CFRelease(v35);
      CFArrayAppendValue(v11, v15);
      CFRelease(v15);
      ++v13;
      v12 += 44;
    }
    while (v12 != 440);
    a1 = v71;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v71 + 344), CFSTR("JOIN_STATUS_SUBSTATE_INFO"), v11);
    CFRelease(v11);
    v36 = *(_DWORD *)(a4 + 456);
    v37 = v36 - 1000;
    v38 = v36 - 975;
    if (v37 >= 0xB)
      v39 = 0xFFFF;
    else
      v39 = v38;
    valuePtr = _errorForAssociateResult(v39);
    v40 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
    if (v40)
    {
      v41 = v40;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v71 + 344), CFSTR("JOIN_EXTENDED_STATUS"), v40);
      CFRelease(v41);
      a2 = v70;
      a3 = a3;
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      v42 = *(_DWORD *)(a4 + 8);
      v43 = *(_DWORD *)(a4 + 456);
      *(_DWORD *)buf = 136316162;
      v74 = "_dispatchAsyncAssocEvent";
      v75 = 1024;
      v76 = 6616;
      v77 = 1024;
      v78 = valuePtr;
      v79 = 1024;
      v80 = v42;
      v81 = 1024;
      v82 = v43;
      v44 = MEMORY[0x24BDACB70];
      v45 = "TRACER:%s@%d:%d join_status:%d/%d\n";
      v46 = 36;
LABEL_22:
      _os_log_impl(&dword_20647D000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, v46);
      goto LABEL_23;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v74 = "_dispatchAsyncAssocEvent";
      v75 = 1024;
      v76 = 6611;
      v67 = MEMORY[0x24BDACB70];
      v68 = "%s@%d:nRef allocation Failed!\n";
LABEL_97:
      v69 = 18;
      goto LABEL_98;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v74 = "_dispatchAsyncAssocEvent";
    v67 = MEMORY[0x24BDACB70];
    v68 = "%s:array allocation Failed!\n";
LABEL_76:
    v69 = 12;
LABEL_98:
    _os_log_impl(&dword_20647D000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, v69);
  }
}

void _dispatchGasResults()
{
  uint64_t v0;
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  uint64_t v7;
  int v8;
  CFMutableDictionaryRef v9;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  char *v17;
  CFStringRef v18;
  CFStringRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  unsigned __int16 v22;
  char *v23;
  CFMutableArrayRef v24;
  __CFArray *v25;
  unint64_t v26;
  char *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  const __CFString *v31;
  CFMutableDictionaryRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  unsigned int v38;
  unsigned __int16 v39;
  CFMutableArrayRef v40;
  __CFArray *v41;
  unsigned __int16 v42;
  unsigned __int8 *v43;
  unint64_t v44;
  CFStringRef v45;
  CFStringRef v46;
  CFStringRef v47;
  int v48;
  int v49;
  CFMutableArrayRef v50;
  __CFArray *v51;
  int v52;
  char *v53;
  CFMutableDictionaryRef v54;
  __CFDictionary *v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFStringRef v58;
  CFStringRef v59;
  CFMutableArrayRef v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  size_t v66;
  CFStringRef v67;
  CFStringRef v68;
  int v69;
  CFMutableArrayRef v70;
  unsigned __int16 v71;
  int v72;
  CFMutableDictionaryRef v73;
  __CFDictionary *v74;
  const UInt8 *v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFStringRef v78;
  CFStringRef v79;
  int v80;
  unsigned int v81;
  CFMutableArrayRef v82;
  unint64_t v83;
  _BYTE *v84;
  unsigned int v85;
  CFStringRef v86;
  CFMutableArrayRef v87;
  int v88;
  unsigned __int8 *v89;
  CFStringRef v90;
  CFStringRef v91;
  __CFDictionary *v92;
  int v93;
  __CFDictionary *v94;
  pthread_mutex_t *v95;
  __CFArray *theArray;
  uint64_t v97;
  int v98;
  int v99;
  __CFDictionary *theDict;
  CFMutableDictionaryRef v101;
  unsigned __int16 v102;
  uint64_t v103;
  _QWORD __b[771];
  __int128 v105;
  __int128 v106;
  _QWORD *v107;
  char cStr[16];
  uint64_t v109;

  v0 = MEMORY[0x24BDAC7A8]();
  v109 = *MEMORY[0x24BDAC8D0];
  if (v0)
  {
    v2 = v1;
    v3 = v0;
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v6 = Mutable;
      v95 = (pthread_mutex_t *)(v3 + 1592);
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 1592));
      v7 = 4294963390;
      switch(v2[2])
      {
        case 0:
          if ((*v2 - 6145) >= 0xFFFFE800)
          {
            v98 = v2[1];
            if (!v98)
              goto LABEL_146;
            memset(__b, 170, sizeof(__b));
            v8 = 0;
            theArray = v6;
            v97 = v3;
            while (1)
            {
              v107 = 0;
              v105 = 0u;
              v106 = 0u;
              __strlcpy_chk();
              LODWORD(v106) = 200;
              DWORD2(v106) = 6168;
              v107 = __b;
              if (Apple80211RawGet(v3, (uint64_t)&v105))
              {
LABEL_143:
                v7 = 4294963394;
                goto LABEL_147;
              }
              v103 = 0;
              if (HIWORD(__b[0]) < 4u)
                goto LABEL_138;
              v9 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v9)
                goto LABEL_138;
              v10 = v9;
              v11 = CFNumberCreate(v4, kCFNumberSInt16Type, (char *)__b + 4);
              if (!v11)
                goto LABEL_137;
              v12 = v11;
              CFDictionaryAddValue(v10, CFSTR("ANQP_STATUS"), v11);
              CFRelease(v12);
              LODWORD(v103) = LOWORD(__b[0]);
              v13 = CFNumberCreate(v4, kCFNumberSInt32Type, &v103);
              if (!v13)
                goto LABEL_137;
              v14 = v13;
              CFDictionarySetValue(v10, CFSTR("CHANNEL"), v13);
              CFRelease(v14);
              v15 = CFNumberCreate(v4, kCFNumberSInt32Type, (char *)&v103 + 4);
              if (!v15)
                goto LABEL_137;
              v16 = v15;
              CFDictionarySetValue(v10, CFSTR("CHANNEL_FLAGS"), v15);
              CFRelease(v16);
              v17 = ether_ntoa((const ether_addr *)&__b[1]);
              if (!v17)
                goto LABEL_137;
              v18 = CFStringCreateWithCString(v4, v17, 0x8000100u);
              if (!v18)
                goto LABEL_137;
              v19 = v18;
              CFDictionarySetValue(v10, CFSTR("BSSID"), v18);
              CFRelease(v19);
              v20 = CFNumberCreate(v4, kCFNumberSInt64Type, &__b[770]);
              if (!v20)
                goto LABEL_137;
              v21 = v20;
              v99 = v8;
              v101 = v10;
              CFDictionarySetValue(v10, CFSTR("TIMESTAMP"), v20);
              CFRelease(v21);
              if (WORD2(__b[0]) || !HIWORD(__b[0]))
              {
LABEL_136:
                v6 = theArray;
                v10 = v101;
                CFArrayAppendValue(theArray, v101);
                v3 = v97;
                v8 = v99;
                goto LABEL_137;
              }
              v22 = 0;
              v23 = (char *)&__b[1] + 6;
              while (2)
              {
                v102 = v22;
                switch(*(_WORD *)v23)
                {
                  case 0x101:
                    v24 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                    if (v24)
                    {
                      v25 = v24;
                      if (*((_WORD *)v23 + 1))
                      {
                        v26 = 0;
                        v27 = v23 + 4;
                        do
                        {
                          v28 = CFNumberCreate(v4, kCFNumberSInt16Type, v27);
                          if (!v28)
                            goto LABEL_107;
                          v29 = v28;
                          CFArrayAppendValue(v25, v28);
                          CFRelease(v29);
                          ++v26;
                          v27 += 2;
                        }
                        while (v26 < *((unsigned __int16 *)v23 + 1));
                      }
                      v30 = v101;
                      v31 = CFSTR("ANQP_CAPABILITY_LIST");
                      goto LABEL_99;
                    }
                    goto LABEL_109;
                  case 0x102:
                    v32 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                    if (!v32)
                      goto LABEL_109;
                    v33 = v32;
                    v34 = CFNumberCreate(v4, kCFNumberSInt8Type, v23 + 4);
                    if (!v34)
                      goto LABEL_120;
                    v35 = v34;
                    CFDictionaryAddValue(v33, CFSTR("ANQP_VENUE_GROUP"), v34);
                    CFRelease(v35);
                    v36 = CFNumberCreate(v4, kCFNumberSInt8Type, v23 + 5);
                    if (!v36)
                      goto LABEL_120;
                    v37 = v36;
                    CFDictionaryAddValue(v33, CFSTR("ANQP_VENUE_TYPE"), v36);
                    CFRelease(v37);
                    v38 = *((unsigned __int16 *)v23 + 1);
                    v39 = v38 - 2;
                    if (v38 < 2)
                      goto LABEL_120;
                    if ((_WORD)v38 == 2)
                    {
                      v41 = 0;
LABEL_114:
                      CFDictionaryAddValue(v101, CFSTR("ANQP_VENUE_NAME_INFO"), v33);
                      v94 = v33;
                      v33 = 0;
                      v45 = 0;
                    }
                    else
                    {
                      v40 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                      if (!v40)
                        goto LABEL_120;
                      v41 = v40;
                      theDict = v33;
                      v42 = 0;
                      v43 = (unsigned __int8 *)(v23 + 6);
                      while (1)
                      {
                        v33 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                        if (!v33)
                          break;
                        v44 = *v43;
                        if (v44 < 3)
                          break;
                        v45 = CFStringCreateWithBytes(v4, v43 + 4, v44 - 3, 0x8000100u, 1u);
                        if (!v45)
                          goto LABEL_134;
                        v46 = CFStringCreateWithBytes(v4, v43 + 1, 3, 0x8000100u, 1u);
                        if (!v46)
                          goto LABEL_134;
                        v47 = v46;
                        CFDictionaryAddValue(v33, CFSTR("ANQP_LANG_CODE"), v46);
                        CFDictionaryAddValue(v33, CFSTR("ANQP_VENUE_OPERATOR_NAME"), v45);
                        CFArrayAppendValue(v41, v33);
                        CFRelease(v45);
                        CFRelease(v47);
                        CFRelease(v33);
                        v48 = *v43;
                        v49 = (unsigned __int16)(v48 + v42);
                        if (v49 != v48 + v42)
                        {
                          syslog(3, "parsedLen %hu increment by value %d os_add_overflow FAILED\n", (unsigned __int16)(v48 + v42), v48);
LABEL_132:
                          v33 = 0;
                          break;
                        }
                        v42 = v49 + 1;
                        if (v49 == 0xFFFF)
                        {
                          syslog(3, "parsedLen %hu increment by value %d os_add_overflow FAILED\n", 0, 1);
                          goto LABEL_132;
                        }
                        v43 += *v43 + 1;
                        if (v39 <= v42)
                        {
                          v33 = theDict;
                          CFDictionaryAddValue(theDict, CFSTR("ANQP_VENUE_NAMES"), v41);
                          goto LABEL_114;
                        }
                      }
                      v45 = 0;
LABEL_134:
                      v94 = theDict;
                    }
                    CFRelease(v94);
                    if (v41)
                      CFRelease(v41);
                    if (v45)
                      CFRelease(v45);
                    if (v33)
                    {
LABEL_120:
                      v92 = v33;
                      goto LABEL_108;
                    }
LABEL_109:
                    v93 = *((unsigned __int16 *)v23 + 1) + v102;
                    if ((v93 & 0x10000) != 0)
                    {
                      syslog(3, "parsedLen %hu increment by value %hu os_add_overflow FAILED\n");
                      goto LABEL_142;
                    }
                    v22 = v93 + 4;
                    if ((unsigned __int16)v93 < 0xFFFCu)
                    {
                      v23 = (char *)&__b[1] + v22 + 6;
                      if (HIWORD(__b[0]) <= v22)
                        goto LABEL_136;
                      continue;
                    }
                    syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
LABEL_142:
                    v6 = theArray;
                    v3 = v97;
                    v8 = v99;
                    v10 = v101;
LABEL_137:
                    CFRelease(v10);
LABEL_138:
                    if (++v8 == v98)
                    {
LABEL_146:
                      v7 = 0;
                      goto LABEL_147;
                    }
                    break;
                  case 0x103:
                  case 0x106:
                  case 0x109:
                  case 0x10A:
                  case 0x10B:
                    goto LABEL_109;
                  case 0x104:
                    v50 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                    if (!v50)
                      goto LABEL_109;
                    v51 = v50;
                    if (!*((_WORD *)v23 + 1))
                      goto LABEL_60;
                    LOWORD(v52) = 0;
                    v53 = v23 + 4;
                    while (2)
                    {
                      v54 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                      if (v54)
                      {
                        v55 = v54;
                        v56 = CFNumberCreate(v4, kCFNumberSInt8Type, v53);
                        if (v56)
                        {
                          v57 = v56;
                          CFDictionaryAddValue(v55, CFSTR("ANQP_NET_AUTH_TYPE_INDICATOR"), v56);
                          CFRelease(v57);
                          if (*(_WORD *)(v53 + 1))
                          {
                            v58 = CFStringCreateWithBytes(v4, (const UInt8 *)v53 + 3, *(unsigned __int16 *)(v53 + 1), 0x8000100u, 1u);
                            if (!v58)
                              goto LABEL_90;
                            v59 = v58;
                            CFDictionaryAddValue(v55, CFSTR("ANQP_NET_AUTH_TYPE_REDIRECT_URL"), v58);
                            CFRelease(v59);
                          }
                          CFArrayAppendValue(v51, v55);
                          CFRelease(v55);
                          if ((unsigned __int16)v52 >= 0xFFFDu)
                          {
                            syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
                          }
                          else
                          {
                            v52 = *(unsigned __int16 *)(v53 + 1) + (unsigned __int16)(v52 + 3);
                            if ((v52 & 0x10000) == 0)
                            {
                              v53 += *(unsigned __int16 *)(v53 + 1) + 3;
                              if (*((unsigned __int16 *)v23 + 1) <= (unsigned __int16)v52)
                              {
LABEL_60:
                                CFDictionaryAddValue(v101, CFSTR("ANQP_NET_AUTH_TYPE"), v51);
                                goto LABEL_90;
                              }
                              continue;
                            }
                            syslog(3, "parsedLen %hu increment by value %hu os_add_overflow FAILED\n");
                          }
                        }
                      }
                      goto LABEL_90;
                    }
                  case 0x105:
                    v60 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                    if (!v60)
                      goto LABEL_109;
                    v25 = v60;
                    if (!*((_WORD *)v23 + 1))
                      goto LABEL_79;
                    LOWORD(v61) = 0;
                    v62 = (unsigned __int8 *)(v23 + 4);
                    do
                    {
                      memset(cStr, 0, 11);
                      v63 = *v62;
                      if (v63 - 1 > 4)
                      {
                        LOWORD(v69) = v61 + 1;
                      }
                      else
                      {
                        v64 = 0;
                        v65 = 0;
                        do
                        {
                          if (v65 >= 0xBu)
                            v66 = 0;
                          else
                            v66 = 11 - v65;
                          v65 += snprintf(&cStr[v65], v66, "%02X", v62[++v64]);
                        }
                        while (v64 < *v62);
                        if ((_BYTE)v65)
                        {
                          v67 = CFStringCreateWithCString(v4, cStr, 0x8000100u);
                          if (v67)
                          {
                            v68 = v67;
                            CFArrayAppendValue(v25, v67);
                            CFRelease(v68);
                          }
                        }
                        v69 = (unsigned __int16)v61 + 1;
                        if ((v69 & 0x10000) != 0)
                        {
                          syslog(3, "parsedLen %hu increment by value %lu os_add_overflow FAILED\n");
                          goto LABEL_107;
                        }
                        v63 = *v62;
                      }
                      v61 = v63 + (unsigned __int16)v69;
                      if ((v61 & 0x10000) != 0)
                        goto LABEL_124;
                      v62 += v63 + 1;
                    }
                    while (*((unsigned __int16 *)v23 + 1) > (unsigned __int16)v61);
LABEL_79:
                    v30 = v101;
                    v31 = CFSTR("ANQP_ROAMING_CONSORTIUM_OI_LIST");
LABEL_99:
                    CFDictionaryAddValue(v30, v31, v25);
                    goto LABEL_107;
                  case 0x107:
                    v70 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                    if (!v70)
                      goto LABEL_109;
                    v51 = v70;
                    if (!*((_WORD *)v23 + 2))
                      goto LABEL_89;
                    v71 = 0;
                    v72 = 0;
                    while (2)
                    {
                      v73 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                      if (v73)
                      {
                        v74 = v73;
                        v75 = (const UInt8 *)&v23[v71 + 6];
                        v76 = CFNumberCreate(v4, kCFNumberSInt8Type, v75 + 2);
                        if (v76)
                        {
                          v77 = v76;
                          CFDictionaryAddValue(v74, CFSTR("ANQP_NAI_REALM_ENCODING_TYPE"), v76);
                          CFRelease(v77);
                          v78 = CFStringCreateWithBytes(v4, v75 + 4, v75[3], 0x8000100u, 1u);
                          if (v78)
                          {
                            v79 = v78;
                            CFDictionaryAddValue(v74, CFSTR("ANQP_NAI_REALM_NAME"), v78);
                            CFRelease(v79);
                            CFArrayAppendValue(v51, v74);
                            CFRelease(v74);
                            v80 = *(unsigned __int16 *)v75;
                            v81 = (unsigned __int16)(v80 + v71);
                            if (v81 == v80 + v71)
                            {
                              v71 = v81 + 2;
                              if (v81 < 0xFFFE)
                              {
                                if (++v72 >= *((unsigned __int16 *)v23 + 2))
                                {
LABEL_89:
                                  CFDictionaryAddValue(v101, CFSTR("ANQP_NAI_REALM_LIST"), v51);
                                  break;
                                }
                                continue;
                              }
                            }
                            syslog(3, "parsedLen %hu increment by value %d os_add_overflow FAILED\n");
                          }
                          else
                          {
                            syslog(3, "%s: error creating domainNameStr");
                          }
                        }
                      }
                      break;
                    }
LABEL_90:
                    CFRelease(v51);
                    goto LABEL_109;
                  case 0x108:
                    v82 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                    if (!v82)
                      goto LABEL_109;
                    v25 = v82;
                    if (!v23[8])
                      goto LABEL_107;
                    v83 = 0;
                    v84 = v23 + 11;
                    do
                    {
                      memset(cStr, 170, 7);
                      v85 = *(v84 - 1);
                      if (v85 >> 4 == 15)
                        snprintf(cStr, 7uLL, "%01X%01X%01X%01X%01X%01X", *(v84 - 2) & 0xF, *(v84 - 2) >> 4, v85 & 0xF, 15, *v84 & 0xF, *v84 >> 4);
                      else
                        snprintf(cStr, 7uLL, "%01X%01X%01X%01X%01X%01X", *(v84 - 2) & 0xF, *(v84 - 2) >> 4, v85 & 0xF, *v84 & 0xF, *v84 >> 4, v85 >> 4);
                      v86 = CFStringCreateWithCString(v4, cStr, 0x8000100u);
                      CFArrayAppendValue(v25, v86);
                      CFRelease(v86);
                      ++v83;
                      v84 += 3;
                    }
                    while (v83 < v23[8]);
                    v30 = v101;
                    v31 = CFSTR("ANQP_CELL_NETWORK_INFO");
                    goto LABEL_99;
                  case 0x10C:
                    v87 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                    if (!v87)
                      goto LABEL_109;
                    v25 = v87;
                    if (!*((_WORD *)v23 + 1))
                      goto LABEL_106;
                    LOWORD(v88) = 0;
                    v89 = (unsigned __int8 *)(v23 + 4);
                    while (2)
                    {
                      v90 = CFStringCreateWithBytes(v4, v89 + 1, *v89, 0x8000100u, 1u);
                      if (v90)
                      {
                        v91 = v90;
                        CFArrayAppendValue(v25, v90);
                        CFRelease(v91);
                        v88 = *v89 + (unsigned __int16)(v88 + 1);
                        if ((v88 & 0x10000) == 0)
                        {
                          v89 += *v89 + 1;
                          if (*((unsigned __int16 *)v23 + 1) <= (unsigned __int16)v88)
                          {
LABEL_106:
                            CFDictionaryAddValue(v101, CFSTR("ANQP_DOMAIN_NAME_LIST"), v25);
                            break;
                          }
                          continue;
                        }
LABEL_124:
                        syslog(3, "parsedLen %hu increment by value %hhu os_add_overflow FAILED\n");
                      }
                      else
                      {
                        syslog(3, "%s: error creating domainNameStr");
                      }
                      break;
                    }
LABEL_107:
                    v92 = v25;
LABEL_108:
                    CFRelease(v92);
                    goto LABEL_109;
                  default:
                    if (*(unsigned __int16 *)v23 == 56797
                      && *((unsigned __int16 *)v23 + 1) >= 0xAu
                      && v23[4] == 80
                      && v23[5] == 111
                      && v23[6] == 154
                      && v23[7] == 17)
                    {
                      if (v23[8] == 3)
                        _parseHs20OperatorName((uint64_t)v23, v101);
                      else
                        syslog(3, "%s: HS20 subtype %d is not implemented yet", "_parseVendorSpecific", v23[8]);
                    }
                    goto LABEL_109;
                }
                break;
              }
            }
          }
          v7 = 4294963396;
LABEL_147:
          *(_BYTE *)(v3 + 1656) = 0;
          pthread_mutex_unlock(v95);
          (*(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, uint64_t, _QWORD))(v3 + 72))(v7, v3, 57, v6, 8, *(_QWORD *)(v3 + 80));
          CFRelease(v6);
          break;
        case 1:
          goto LABEL_147;
        case 2:
          v7 = 4294963391;
          goto LABEL_147;
        case 4:
          v7 = 82;
          goto LABEL_147;
        default:
          goto LABEL_143;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v3 + 72))(4294963395, v3, 57, 0, 8, *(_QWORD *)(v3 + 80));
    }
  }
}

void _dispatchRangingResults(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  pthread_mutex_t *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  const CFDictionaryKeyCallBacks *v15;
  const CFDictionaryValueCallBacks *v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  char *v19;
  const CFDictionaryValueCallBacks *v20;
  CFStringRef v21;
  CFStringRef v22;
  _BYTE *v23;
  const UInt8 *v24;
  int v25;
  BOOL v26;
  CFDataRef v27;
  CFDataRef v28;
  _BYTE *v29;
  __int16 *v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __int16 v33;
  int v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  _BYTE *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFMutableArrayRef v44;
  unint64_t v45;
  char *v46;
  CFMutableDictionaryRef v47;
  __CFDictionary *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  unint64_t v65;
  CFNumberRef v66;
  CFNumberRef v67;
  unint64_t v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFNumberRef v83;
  CFNumberRef v84;
  unsigned int v85;
  int v86;
  int v87;
  int *v88;
  __CFArray *v89;
  __CFArray *theArray;
  void *value;
  pthread_mutex_t *v92;
  int v93;
  uint64_t v94;
  _BYTE *v95;
  unsigned int v96;
  float valuePtr;
  int v98;
  int v99;
  unsigned __int16 v100;
  _BYTE __dst[1800];
  __int128 v102;
  __int128 v103;
  _BYTE *v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v3 = a1;
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = (pthread_mutex_t *)(v3 + 1664);
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 1664));
      v8 = *(_DWORD *)(a2 + 8);
      v9 = 4294963371;
      switch(v8)
      {
        case 0:
        case 4:
          v94 = v3;
          v10 = *(_DWORD *)(a2 + 4);
          v98 = 0;
          v99 = 0;
          v100 = 0;
          v92 = (pthread_mutex_t *)(v3 + 1664);
          if (v10)
          {
            memcpy(__dst, &unk_2064BB078, sizeof(__dst));
            v102 = 0u;
            v103 = 0u;
            v104 = 0;
            __strlcpy_chk();
            DWORD1(v103) = v8 == 4;
            DWORD2(v103) = 1800;
            v104 = __dst;
            LODWORD(v103) = 242;
            if (v10 >= 4)
              v11 = 4;
            else
              v11 = v10;
            *(_DWORD *)__dst = 1;
            *(_DWORD *)&__dst[4] = v11;
            v12 = Apple80211RawGet(v3, (uint64_t)&v102);
            if (v12)
            {
              v87 = v12;
              v88 = __error();
              syslog(3, "%s:%d: [kA11UnknownErr] APPLE80211_IOC_RANGING_START returned %d (errno:%d)\n", "_getAsyncRangingResults", 570, v87, *v88);
              v86 = -3902;
            }
            else
            {
              if (*(_DWORD *)&__dst[4])
              {
                v93 = v8;
                v13 = 0;
                v14 = &__dst[88];
                v96 = -3906;
                v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
                v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
                value = (void *)*MEMORY[0x24BDBD270];
                while (1)
                {
                  v17 = CFDictionaryCreateMutable(v4, 0, v15, v16);
                  if (v17)
                    break;
LABEL_62:
                  ++v13;
                  v14 += 448;
                  if (v13 >= *(unsigned int *)&__dst[4])
                    goto LABEL_70;
                }
                v18 = v17;
                v19 = ether_ntoa((const ether_addr *)&__dst[448 * v13 + 34]);
                if (!v19)
                {
LABEL_61:
                  CFRelease(v18);
                  goto LABEL_62;
                }
                v20 = v16;
                v21 = CFStringCreateWithCString(v4, v19, 0x8000100u);
                if (v21)
                {
                  v22 = v21;
                  CFDictionarySetValue(v18, CFSTR("STATION_MAC"), v21);
                  CFRelease(v22);
                  v23 = &__dst[448 * v13];
                  v25 = *((_DWORD *)v23 + 7);
                  v24 = v23 + 28;
                  v26 = v25 == v99 && *((unsigned __int16 *)v24 + 2) == v100;
                  if (v26)
                  {
LABEL_20:
                    v29 = &__dst[448 * v13];
                    v30 = (__int16 *)(v29 + 432);
                    v31 = CFNumberCreate(v4, kCFNumberSInt16Type, v29 + 432);
                    if (v31)
                    {
                      v32 = v31;
                      CFDictionarySetValue(v18, CFSTR("RANGING_FLAGS"), v31);
                      CFRelease(v32);
                      v33 = *v30;
                      if ((*v30 & 0x10) != 0)
                      {
                        CFDictionarySetValue(v18, CFSTR("RANGING_INITIATOR"), value);
                        v33 = *v30;
                      }
                      v26 = (v33 & 0x40) == 0;
                      v34 = v96;
                      if (v26)
                        v34 = -3933;
                      v96 = v34;
                      if (v93 == 4 && !*((_WORD *)v29 + 217))
                        *((_WORD *)v29 + 217) = 4;
                      v35 = CFNumberCreate(v4, kCFNumberSInt16Type, v29 + 434);
                      v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
                      if (v35)
                      {
                        v36 = v35;
                        CFDictionarySetValue(v18, CFSTR("RANGING_STATUS"), v35);
                        CFRelease(v36);
                        valuePtr = *((float *)v29 + 109) / 1000.0;
                        v37 = CFNumberCreate(v4, kCFNumberFloatType, &valuePtr);
                        if (v37)
                        {
                          v38 = v37;
                          CFDictionarySetValue(v18, CFSTR("RANGING_DISTANCE"), v37);
                          CFRelease(v38);
                          v39 = CFNumberCreate(v4, kCFNumberSInt16Type, v29 + 440);
                          if (v39)
                          {
                            v40 = v39;
                            CFDictionarySetValue(v18, CFSTR("RANGING_SD"), v39);
                            CFRelease(v40);
                            v95 = v29 + 48;
                            v41 = v29 + 442;
                            v42 = CFNumberCreate(v4, kCFNumberSInt8Type, v29 + 442);
                            if (v42)
                            {
                              v43 = v42;
                              CFDictionarySetValue(v18, CFSTR("RANGING_VALID_COUNT"), v42);
                              CFRelease(v43);
                              v44 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
                              v16 = v20;
                              if (v44)
                              {
                                v89 = v6;
                                theArray = v44;
                                if (v29[443])
                                {
                                  v45 = 0;
                                  v46 = v14;
                                  do
                                  {
                                    v47 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], v16);
                                    if (v47)
                                    {
                                      v48 = v47;
                                      v49 = CFNumberCreate(v4, kCFNumberSInt32Type, v46 - 16);
                                      if (v49)
                                      {
                                        v50 = v49;
                                        CFDictionarySetValue(v48, CFSTR("RANGING_RTT"), v49);
                                        CFRelease(v50);
                                        v51 = CFNumberCreate(v4, kCFNumberSInt16Type, v46 - 34);
                                        if (v51)
                                        {
                                          v52 = v51;
                                          CFDictionarySetValue(v48, CFSTR("RANGING_RSSI"), v51);
                                          CFRelease(v52);
                                          v53 = CFNumberCreate(v4, kCFNumberSInt16Type, v46 - 20);
                                          if (v53)
                                          {
                                            v54 = v53;
                                            CFDictionarySetValue(v48, CFSTR("RANGING_RTT_FLAGS"), v53);
                                            CFRelease(v54);
                                            v55 = CFNumberCreate(v4, kCFNumberSInt16Type, v46 - 18);
                                            if (v55)
                                            {
                                              v56 = v55;
                                              CFDictionarySetValue(v48, CFSTR("RANGING_RTT_STATUS"), v55);
                                              CFRelease(v56);
                                              v57 = CFNumberCreate(v4, kCFNumberSInt16Type, v46 - 32);
                                              if (v57)
                                              {
                                                v58 = v57;
                                                CFDictionarySetValue(v48, CFSTR("RANGING_SNR"), v57);
                                                CFRelease(v58);
                                                v59 = CFNumberCreate(v4, kCFNumberSInt16Type, v46 - 30);
                                                if (v59)
                                                {
                                                  v60 = v59;
                                                  CFDictionarySetValue(v48, CFSTR("RANGING_PEER_SNR"), v59);
                                                  CFRelease(v60);
                                                  v61 = CFNumberCreate(v4, kCFNumberSInt8Type, v46 - 40);
                                                  if (v61)
                                                  {
                                                    v62 = v61;
                                                    CFDictionarySetValue(v48, CFSTR("RANGING_BER"), v61);
                                                    CFRelease(v62);
                                                    v63 = CFNumberCreate(v4, kCFNumberSInt8Type, v46 - 39);
                                                    if (v63)
                                                    {
                                                      v64 = v63;
                                                      CFDictionarySetValue(v48, CFSTR("RANGING_PEER_BER"), v63);
                                                      CFRelease(v64);
                                                      LOBYTE(v65) = *(v46 - 36);
                                                      *(float *)&v65 = (double)v65 / 100.0;
                                                      v98 = v65;
                                                      v66 = CFNumberCreate(v4, kCFNumberFloatType, &v98);
                                                      if (v66)
                                                      {
                                                        v67 = v66;
                                                        CFDictionarySetValue(v48, CFSTR("RANGING_PEAK_RATIO"), v66);
                                                        CFRelease(v67);
                                                        LOBYTE(v68) = *(v46 - 35);
                                                        *(float *)&v68 = (double)v68 / 100.0;
                                                        v98 = v68;
                                                        v69 = CFNumberCreate(v4, kCFNumberFloatType, &v98);
                                                        if (v69)
                                                        {
                                                          v70 = v69;
                                                          CFDictionarySetValue(v48, CFSTR("RANGING_PEER_PEAK_RATIO"), v69);
                                                          CFRelease(v70);
                                                          v71 = CFNumberCreate(v4, kCFNumberSInt8Type, v46 - 38);
                                                          if (v71)
                                                          {
                                                            v72 = v71;
                                                            CFDictionarySetValue(v48, CFSTR("RANGING_CORE_ID"), v71);
                                                            CFRelease(v72);
                                                            v73 = CFNumberCreate(v4, kCFNumberSInt8Type, v46 - 37);
                                                            if (v73)
                                                            {
                                                              v74 = v73;
                                                              CFDictionarySetValue(v48, CFSTR("RANGING_PEER_CORE_ID"), v73);
                                                              CFRelease(v74);
                                                              v75 = CFNumberCreate(v4, kCFNumberSInt32Type, v46 - 28);
                                                              if (v75)
                                                              {
                                                                v76 = v75;
                                                                CFDictionarySetValue(v48, CFSTR("RANGING_PHY_ERROR"), v75);
                                                                CFRelease(v76);
                                                                v77 = CFNumberCreate(v4, kCFNumberSInt32Type, v46 - 24);
                                                                if (v77)
                                                                {
                                                                  v78 = v77;
                                                                  CFDictionarySetValue(v48, CFSTR("RANGING_PEER_PHY_ERROR"), v77);
                                                                  CFRelease(v78);
                                                                  v79 = CFNumberCreate(v4, kCFNumberSInt16Type, v46 - 12);
                                                                  if (v79)
                                                                  {
                                                                    v80 = v79;
                                                                    CFDictionarySetValue(v48, CFSTR("RANGING_CHANNEL"), v79);
                                                                    CFRelease(v80);
                                                                    v81 = CFNumberCreate(v4, kCFNumberSInt64Type, v46 - 8);
                                                                    if (v81)
                                                                    {
                                                                      v82 = v81;
                                                                      CFDictionaryAddValue(v48, CFSTR("RANGING_RESULT_TIMESTAMP"), v81);
                                                                      CFRelease(v82);
                                                                      v83 = CFNumberCreate(v4, kCFNumberSInt32Type, v46);
                                                                      if (v83)
                                                                      {
                                                                        v84 = v83;
                                                                        CFDictionarySetValue(v48, CFSTR("RANGING_GROUPDELAY_VARIANCE"), v83);
                                                                        CFRelease(v84);
                                                                        CFArrayAppendValue(theArray, v48);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      CFRelease(v48);
                                      v16 = v20;
                                    }
                                    ++v45;
                                    v46 += 48;
                                  }
                                  while (v45 < v95[395]);
                                }
                                v85 = v96;
                                if (*v41)
                                  v85 = 0;
                                v96 = v85;
                                CFDictionarySetValue(v18, CFSTR("RANGING_RESULTS"), theArray);
                                CFRelease(theArray);
                                v6 = v89;
                                CFArrayAppendValue(v89, v18);
                                v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
                              }
                              goto LABEL_61;
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
                    }
                    goto LABEL_60;
                  }
                  v27 = CFDataCreate(v4, v24, 6);
                  if (v27)
                  {
                    v28 = v27;
                    CFDictionarySetValue(v18, CFSTR("RANGING_TOKEN_ID"), v27);
                    CFRelease(v28);
                    goto LABEL_20;
                  }
                }
LABEL_60:
                v16 = v20;
                goto LABEL_61;
              }
              v86 = -3906;
            }
          }
          else
          {
            v86 = -3900;
          }
          v96 = v86;
LABEL_70:
          v7 = v92;
          v9 = v96;
          v3 = v94;
LABEL_71:
          *(_BYTE *)(v3 + 1728) = 0;
          pthread_mutex_unlock(v7);
          (*(void (**)(uint64_t, uint64_t, uint64_t, __CFArray *, uint64_t, _QWORD))(v3 + 72))(v9, v3, 83, v6, 8, *(_QWORD *)(v3 + 80));
          CFRelease(v6);
          break;
        case 1:
          syslog(3, "%s:%d: [kA11UnspecifiedFailureErr] rangingEventData->status: APPLE80211_RANGING_STATUS_FAILED\n", "_dispatchRangingResults", 866);
          v9 = 4294963390;
          goto LABEL_71;
        case 2:
          syslog(3, "%s:%d: [kA11TimeoutErr] rangingEventData->status: APPLE80211_RANGING_STATUS_ABORTED\n", "_dispatchRangingResults", 870);
          v9 = 4294963391;
          goto LABEL_71;
        case 3:
          goto LABEL_71;
        case 5:
          v9 = 4294963364;
          goto LABEL_71;
        default:
          syslog(3, "%s:%d: [kA11UnknownErr] unexpected rangingEventData->status: %d\n", "_dispatchRangingResults", 880, v8);
          v9 = 4294963394;
          goto LABEL_71;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v3 + 72))(4294963395, v3, 83, 0, 8, *(_QWORD *)(v3 + 80));
    }
  }
}

void _dispatchDriverAvailable(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const void **v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  CFStringRef v15;
  CFStringRef v16;
  const void *v17;
  const void *v18;
  CFStringRef v19;
  CFStringRef v20;
  const void *v21;
  CFStringRef v22;
  CFStringRef v23;
  const void *v24;

  if (a1 && a2)
  {
    syslog(3, "%s: available %d, reason %d, subreason %d\n", "_dispatchDriverAvailable", *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = (const void **)MEMORY[0x24BDBD270];
      if (!*(_DWORD *)(a2 + 8))
        v7 = (const void **)MEMORY[0x24BDBD268];
      CFDictionarySetValue(Mutable, CFSTR("DRIVER_AVAILABLE"), *v7);
      v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 16));
      if (!v8)
        goto LABEL_20;
      v9 = (const void *)v8;
      CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_REASON"), (const void *)v8);
      CFRelease(v9);
      v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 20));
      if (!v8)
        goto LABEL_20;
      v10 = (const void *)v8;
      CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_SUBREASON"), (const void *)v8);
      CFRelease(v10);
      v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 24));
      if (!v8)
        goto LABEL_20;
      v11 = (const void *)v8;
      CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_MINORREASON"), (const void *)v8);
      CFRelease(v11);
      v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)a2);
      if (!v8)
        goto LABEL_20;
      v12 = (const void *)v8;
      CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_VERSION"), (const void *)v8);
      CFRelease(v12);
      v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4));
      if (!v8)
        goto LABEL_20;
      v13 = (const void *)v8;
      CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_FLAGS"), (const void *)v8);
      CFRelease(v13);
      v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 12));
      if (!v8)
        goto LABEL_20;
      v14 = (const void *)v8;
      CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_EVENTID"), (const void *)v8);
      CFRelease(v14);
      v15 = CFStringCreateWithCString(v4, (const char *)(a2 + 28), 0x8000100u);
      if (v15)
      {
        v16 = v15;
        CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_REASON_STRING"), v15);
        CFRelease(v16);
        v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt64Type, (const void *)(a2 + 96));
        if (!v8)
          goto LABEL_20;
        v17 = (const void *)v8;
        CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_PROGRAM_COUNTER"), (const void *)v8);
        CFRelease(v17);
        v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt64Type, (const void *)(a2 + 104));
        if (!v8)
          goto LABEL_20;
        v18 = (const void *)v8;
        CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_LINK_REGISTER"), (const void *)v8);
        CFRelease(v18);
        v19 = CFStringCreateWithCString(v4, (const char *)(a2 + 112), 0x8000100u);
        if (v19)
        {
          v20 = v19;
          CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_FILENAME"), v19);
          CFRelease(v20);
          v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 144));
          if (!v8)
          {
LABEL_20:
            (*(void (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(v8, a1, 55, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v6);
            return;
          }
          v21 = (const void *)v8;
          CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_LINENUMBER"), (const void *)v8);
          CFRelease(v21);
          v22 = CFStringCreateWithCString(v4, (const char *)(a2 + 148), 0x8000100u);
          if (v22)
          {
            v23 = v22;
            CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_FUNCTION "), v22);
            CFRelease(v23);
            v8 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 180));
            if (v8)
            {
              v24 = (const void *)v8;
              CFDictionarySetValue(v6, CFSTR("DRIVER_AVAILABLE_TRAP_SEQUENCE"), (const void *)v8);
              CFRelease(v24);
              v8 = 0;
            }
            goto LABEL_20;
          }
        }
      }
      v8 = 4294963395;
      goto LABEL_20;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 72))(4294963395, a1, 55, 0, 8, *(_QWORD *)(a1 + 80));
  }
}

void _dispatchPowerStatsUpdateEvent(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;

  if (a1 && a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)a2);
      if (v7)
      {
        v8 = v7;
        CFDictionarySetValue(v6, CFSTR("POWER_STATS_TYPE"), v7);
        CFRelease(v8);
        v9 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 4));
        if (v9)
        {
          v10 = v9;
          CFDictionarySetValue(v6, CFSTR("POWER_STATS_UNASSOCIATED_SLEEP_DURATION"), v9);
          CFRelease(v10);
          v11 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 8));
          if (v11)
          {
            v12 = v11;
            CFDictionarySetValue(v6, CFSTR("POWER_STATS_ASSOCIATED_SLEEP_DURATION"), v11);
            CFRelease(v12);
            v13 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 16));
            if (v13)
            {
              v14 = v13;
              CFDictionarySetValue(v6, CFSTR("POWER_STATS_TOTAL_DURATION"), v13);
              CFRelease(v14);
              v15 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 12));
              if (v15)
              {
                v16 = v15;
                CFDictionarySetValue(v6, CFSTR("POWER_STATS_ROAM_DURATION"), v15);
                CFRelease(v16);
                v17 = CFNumberCreate(v4, kCFNumberFloat32Type, (const void *)(a2 + 20));
                if (v17)
                {
                  v18 = v17;
                  CFDictionarySetValue(v6, CFSTR("POWER_STATS_DUTY_CYCLE"), v17);
                  CFRelease(v18);
                }
              }
            }
          }
        }
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 61, v6, 8, *(_QWORD *)(a1 + 80));
      CFRelease(v6);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 72))(4294963395, a1, 61, 0, 8, *(_QWORD *)(a1 + 80));
    }
  }
}

void _dispatchBGScanCachedNetworks(uint64_t a1, int a2)
{
  int v2;
  _DWORD *v4;
  _QWORD *v5;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  const ether_addr *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  CFMutableDictionaryRef v13;
  __CFDictionary *v14;
  char *v15;
  CFStringRef v16;
  CFStringRef v17;
  const ether_addr *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  u_char *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  const void *v24;
  const ether_addr *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFMutableArrayRef v30;
  __CFArray *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t valuePtr;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 1)
  {
    v2 = a2;
    v4 = malloc_type_malloc(0x1910uLL, 0x1000040378CD1B4uLL);
    if (v4)
    {
      v5 = v4;
      *v4 = v2;
      v39 = 0u;
      v40 = 0u;
      __strlcpy_chk();
      LODWORD(v40) = 215;
      DWORD2(v40) = 6416;
      v41 = v5;
      Apple80211IOCTLGetWrapper(a1, &v39);
      v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v8 = Mutable;
        v35 = a1;
        v9 = (const ether_addr *)((char *)v5 + 4);
        v36 = v5;
        v10 = v5[801];
        v11 = (const void *)*MEMORY[0x24BDBD270];
        v12 = (const void *)*MEMORY[0x24BDBD268];
        v34 = v2;
        while (1)
        {
          v13 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v13)
            break;
          v14 = v13;
          v15 = ether_ntoa(v9);
          if (!v15)
            break;
          v16 = CFStringCreateWithCString(v6, v15, 0x8000100u);
          if (!v16)
            break;
          v17 = v16;
          CFDictionarySetValue(v14, CFSTR("BSSID"), v16);
          CFRelease(v17);
          v18 = v9 + 2;
          v19 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9[2]);
          if (v19)
          {
            v20 = v19;
            CFDictionaryAddValue(v14, CFSTR("CHANNEL"), v19);
            CFRelease(v20);
            v21 = &v18->octet[4];
            v22 = CFNumberCreate(v6, kCFNumberSInt32Type, v21);
            if (v22)
            {
              v23 = v22;
              CFDictionarySetValue(v14, CFSTR("RSSI"), v22);
              CFRelease(v23);
              v24 = (*(v21 - 10) & 1) != 0 ? v11 : v12;
              CFDictionaryAddValue(v14, CFSTR("CONNECTED_BSSID"), v24);
              v25 = (const ether_addr *)(v21 - 8);
              v26 = CFNumberCreate(v6, kCFNumberSInt32Type, v21 - 8);
              if (v26)
              {
                v27 = v26;
                CFDictionarySetValue(v14, CFSTR("AGE"), v26);
                CFRelease(v27);
                valuePtr = v10 + 1000000000 * *(unsigned int *)v25->octet;
                v28 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
                if (v28)
                {
                  v29 = v28;
                  CFDictionarySetValue(v14, CFSTR("TIMESTAMP"), v28);
                  CFRelease(v29);
                  v30 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
                  if (v30)
                  {
                    v31 = v30;
                    v37 = 5;
                    v32 = CFNumberCreate(v6, kCFNumberSInt32Type, &v37);
                    if (v32)
                    {
                      v33 = v32;
                      CFArrayAppendValue(v31, v32);
                      CFRelease(v33);
                      CFDictionarySetValue(v14, CFSTR("SCAN_RESULT_NET_FLAGS"), v31);
                      CFRelease(v31);
                      CFDictionarySetValue(v14, CFSTR("SCAN_RESULT_FROM_BG_SCAN"), v11);
                      CFArrayAppendValue(v8, v14);
                      CFRelease(v14);
                      v9 = v25 + 2;
                      if (--v2)
                        continue;
                    }
                  }
                }
              }
            }
          }
          (*(void (**)(_QWORD, uint64_t, uint64_t, __CFArray *, _QWORD, _QWORD))(v35 + 72))(0, v35, 63, v8, (20 * v34), *(_QWORD *)(v35 + 80));
          break;
        }
        CFRelease(v8);
        v5 = v36;
      }
      free(v5);
    }
  }
}

void _dispatchScanBackoffReport(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  __CFString *v7;
  __CFString *v8;
  int v9;
  int v10;
  const __CFString *v11;
  const __CFString *v12;

  if (a1)
  {
    if (a2)
    {
      if (a3 == 16)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (Mutable)
        {
          v6 = Mutable;
          v7 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
          if (v7)
          {
            v8 = v7;
            v9 = *(_DWORD *)(a2 + 8);
            if ((v9 & 1) != 0)
            {
              CFStringAppend(v7, CFSTR("SSID_GROUP"));
              v9 = *(_DWORD *)(a2 + 8);
            }
            if ((v9 & 2) != 0)
              CFStringAppend(v8, CFSTR("BSSID_GROUP"));
            CFDictionaryAddValue(v6, CFSTR("SCAN_BACKOFF_REPORT_SCANGROUP"), v8);
            v10 = *(_DWORD *)(a2 + 12);
            v11 = CFSTR("BACKOFF_RESET");
            if (v10 != 1)
              v11 = 0;
            if (v10)
              v12 = v11;
            else
              v12 = CFSTR("BACKOFF_APPLIED");
            CFDictionaryAddValue(v6, CFSTR("SCAN_BACKOFF_REPORT_REASON"), v12);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 90, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

void _dispatchSSIDChanged(uint64_t a1, uint64_t a2, int a3)
{
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  CFNumberRef v10;
  CFNumberRef v11;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (!a2 || a3 != 8)
    goto LABEL_7;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return;
  v4 = Mutable;
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
  if (v10)
  {
    v5 = v10;
    CFDictionaryAddValue(v4, CFSTR("SETSSID_STATUS"), v10);
    v11 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(a2 + 4));
    if (!v11)
      goto LABEL_10;
    v6 = v11;
    CFDictionaryAddValue(v4, CFSTR("SETSSID_REASON"), v11);
LABEL_7:
    (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, _QWORD, _QWORD))(a1 + 72))(0, a1, 2, v4, 8 * (v4 != 0), *(_QWORD *)(a1 + 80));
    if (v6)
      CFRelease(v6);
    if (!v5)
    {
LABEL_11:
      if (!v4)
        return;
      goto LABEL_12;
    }
LABEL_10:
    CFRelease(v5);
    goto LABEL_11;
  }
LABEL_12:
  CFRelease(v4);
}

void _dispatchDeauthReceived(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 8)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("DEAUTHRX_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("DEAUTHRX_REASON"), v10);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 34, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchDissasocReceived(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 8)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("DISASSOCRX_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("DISASSOCRX_REASON"), v10);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 72, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchDecryptionFailure(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 8)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("DECRYPTIONFAILURE_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("DECRPYTIONFAILURE_REASON"), v10);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 14, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchTxInhibitEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)a3)
    {
      if (v6)
      {
        v7 = 136315394;
        v8 = "_dispatchTxInhibitEvent";
        v9 = 1024;
        v10 = a3;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Processing TX Inhibit event with DataLen: %u\n", (uint8_t *)&v7, 0x12u);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 72))(0, a1, 92, a2, a3, *(_QWORD *)(a1 + 80));
    }
    else if (v6)
    {
      v7 = 136315394;
      v8 = "_dispatchTxInhibitEvent";
      v9 = 1024;
      v10 = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: TX Inhibit event with Insufficient DataLen: %u\n", (uint8_t *)&v7, 0x12u);
    }
  }
}

void _dispatchLocalMitigationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
    if (a3 <= 0xF)
    {
      if (v6)
      {
        v7 = 136315394;
        v8 = "_dispatchLocalMitigationEvent";
        v9 = 1024;
        v10 = a3;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Local thermal mitigation event with insufficient DataLen: %u\n", (uint8_t *)&v7, 0x12u);
      }
    }
    else
    {
      if (v6)
      {
        v7 = 136315394;
        v8 = "_dispatchLocalMitigationEvent";
        v9 = 1024;
        v10 = a3;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Processing local thermal mitigation event with DataLen: %u\n", (uint8_t *)&v7, 0x12u);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 72))(0, a1, 93, a2, a3, *(_QWORD *)(a1 + 80));
    }
  }
}

void _dispatchPrune(uint64_t a1, const UInt8 *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFDataRef v12;
  CFDataRef v13;

  if (a2)
  {
    if (a3 == 16)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("PRUNEEVENT_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 4);
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("PRUNEEVENT_REASON"), v10);
            v12 = CFDataCreate(v7, a2 + 8, 6);
            if (v12)
            {
              v13 = v12;
              CFDictionaryAddValue(v6, CFSTR("BSSID"), v12);
              (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 75, v6, 8, *(_QWORD *)(a1 + 80));
              CFRelease(v11);
              v11 = v9;
              v9 = v13;
            }
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchSupplicant(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const void **v17;
  const void *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef cf;
  _BYTE valuePtr[20];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(valuePtr, 170, sizeof(valuePtr));
  if (a2)
  {
    if (a3 == 40)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("SUPPLICANTEVENT_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("SUPPLICANTEVENT_REASON"), v10);
            v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
            if (v12)
            {
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_TSN_DISABLED_FLAGS"), v12);
              *(_OWORD *)valuePtr = *(_OWORD *)(a2 + 16);
              *(_DWORD *)&valuePtr[16] = *(_DWORD *)(a2 + 32);
              v13 = CFNumberCreate(v7, kCFNumberSInt32Type, valuePtr);
              v22 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[4]);
              v14 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[8]);
              v15 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[12]);
              v16 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr[16]);
              v17 = (const void **)MEMORY[0x24BDBD270];
              if (!*(_BYTE *)(a2 + 36))
                v17 = (const void **)MEMORY[0x24BDBD268];
              v18 = *v17;
              cf = v13;
              v19 = v13;
              v20 = v22;
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_EAPOL_START_M1_DURATION"), v19);
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_M1_M2_DURATION"), v22);
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_M2_M3_DURATION"), v14);
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_M3_M4_DURATION"), v15);
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_TOTAL_4WAY_DURATION"), v16);
              CFDictionaryAddValue(v6, CFSTR("APPLE80211KEY_SUPPLICANTEVENT_JOINING_NEW_NETWORK"), v18);
              (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 76, v6, 8, *(_QWORD *)(a1 + 80));
            }
            else
            {
              cf = 0;
              v20 = 0;
              v14 = 0;
              v15 = 0;
              v16 = 0;
            }
            CFRelease(v11);
            CFRelease(v9);
            if (v12)
              CFRelease(v12);
            if (cf)
              CFRelease(cf);
            if (v20)
              CFRelease(v20);
            if (v14)
              CFRelease(v14);
            if (v15)
              CFRelease(v15);
            if (!v16)
              goto LABEL_25;
            v21 = v16;
          }
          else
          {
            v21 = v9;
          }
          CFRelease(v21);
        }
LABEL_25:
        CFRelease(v6);
      }
    }
  }
}

void _dispatchReassoc(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 8)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("REASSOCEVENT_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("REASSOCEVENT_REASON"), v10);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 73, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchAuth(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 104)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("AUTHEVENT_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("AUTHEVENT_REASON"), v10);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 74, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRoamStatus(uint64_t a1, const UInt8 *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFDataRef v22;
  CFDataRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFDataRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFNumberRef v48;
  NSObject *v49;
  const char *v50;
  CFDataRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef cfc;
  __CFDictionary *cf;
  __CFDictionary *cfa;
  __CFDictionary *cfb;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFDataRef v75;
  CFDataRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFDataRef value;
  uint8_t buf[4];
  const char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3 == 168)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2);
        if (!v8)
        {
LABEL_82:
          CFRelease(v6);
          return;
        }
        v9 = v8;
        CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_STATUS"), v8);
        v10 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 4);
        if (!v10)
        {
          v45 = v9;
LABEL_81:
          CFRelease(v45);
          goto LABEL_82;
        }
        v11 = v10;
        CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_REASON"), v10);
        v12 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 24);
        if (v12)
        {
          CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_FLAGS"), v12);
          v13 = CFNumberCreate(v7, kCFNumberSInt64Type, a2 + 8);
          if (v13)
          {
            CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TIME_STARTED"), v13);
            v14 = CFNumberCreate(v7, kCFNumberSInt64Type, a2 + 16);
            if (v14)
            {
              CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TIME_ENDED"), v14);
              v15 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 28);
              if (v15)
              {
                v74 = v15;
                CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_PROFILE_TYPE"), v15);
                v16 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 32);
                if (v16)
                {
                  v73 = v16;
                  CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_RSSI"), v16);
                  v17 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 36);
                  if (v17)
                  {
                    v72 = v17;
                    CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_RSSI"), v17);
                    v18 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 40);
                    if (v18)
                    {
                      v80 = v18;
                      CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_CHANNEL"), v18);
                      v19 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 44);
                      if (v19)
                      {
                        v79 = v19;
                        CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_CHANNEL"), v19);
                        v20 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 48);
                        if (v20)
                        {
                          v78 = v20;
                          CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_CHANNEL_FLAGS"), v20);
                          v21 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 52);
                          if (v21)
                          {
                            v77 = v21;
                            CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_CHANNEL_FLAGS"), v21);
                            v22 = CFDataCreate(v7, a2 + 56, 3);
                            if (v22)
                            {
                              v76 = v22;
                              CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_OUI"), v22);
                              v23 = CFDataCreate(v7, a2 + 59, 3);
                              if (v23)
                              {
                                v75 = v23;
                                CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_OUI"), v23);
                                v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 64);
                                if (!v24)
                                  goto LABEL_94;
                                CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_AUTHTYPE"), v24);
                                CFRelease(v24);
                                v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 68);
                                if (!v24)
                                  goto LABEL_94;
                                CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_AUTHTYPE"), v24);
                                CFRelease(v24);
                                v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 72);
                                if (!v24)
                                  goto LABEL_94;
                                CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_AKMS"), v24);
                                CFRelease(v24);
                                v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 76);
                                if (!v24
                                  || (CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_AKMS"), v24),
                                      CFRelease(v24),
                                      (v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 80)) == 0)
                                  || (CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_PHYMODE"), v24),
                                      CFRelease(v24),
                                      (v24 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 84)) == 0))
                                {
LABEL_94:
                                  value = 0;
                                  goto LABEL_93;
                                }
                                CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_PHYMODE"), v24);
                                CFRelease(v24);
                                value = CFDataCreate(v7, a2 + 88, 6);
                                if (value)
                                {
                                  CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_ORIGIN_ADDR"), value);
                                  v24 = CFDataCreate(v7, a2 + 94, 6);
                                  if (!v24)
                                    goto LABEL_93;
                                  CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_TARGET_ADDR"), v24);
                                  v25 = CFNumberCreate(v7, kCFNumberSInt16Type, a2 + 106);
                                  if (!v25)
                                    goto LABEL_93;
                                  cfc = v25;
                                  CFDictionaryAddValue(v6, CFSTR("ROAMEDEVENT_CHANNELS_SCANNED_COUNT"), v25);
                                  CFRelease(cfc);
                                  cf = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                                  if (cf)
                                  {
                                    v26 = CFDataCreate(v7, a2 + 108, 6);
                                    if (v26)
                                    {
                                      v51 = v26;
                                      CFDictionaryAddValue(cf, CFSTR("BSSID"), v26);
                                      CFRelease(v51);
                                      v27 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 120);
                                      if (v27)
                                      {
                                        v52 = v27;
                                        CFDictionaryAddValue(cf, CFSTR("AUTHEVENT_STATUS"), v27);
                                        CFRelease(v52);
                                        v28 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 124);
                                        if (v28)
                                        {
                                          v53 = v28;
                                          CFDictionaryAddValue(cf, CFSTR("AUTHEVENT_REASON"), v28);
                                          CFRelease(v53);
                                          v29 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 128);
                                          if (v29)
                                          {
                                            v54 = v29;
                                            CFDictionaryAddValue(cf, CFSTR("REASSOCEVENT_STATUS"), v29);
                                            CFRelease(v54);
                                            v30 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 132);
                                            if (v30)
                                            {
                                              v55 = v30;
                                              CFDictionaryAddValue(cf, CFSTR("REASSOCEVENT_REASON"), v30);
                                              CFRelease(v55);
                                              v31 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 136);
                                              if (v31)
                                              {
                                                v56 = v31;
                                                CFDictionaryAddValue(cf, CFSTR("SUPPLICANTEVENT_STATUS"), v31);
                                                CFRelease(v56);
                                                v32 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 140);
                                                if (v32)
                                                {
                                                  v57 = v32;
                                                  CFDictionaryAddValue(cf, CFSTR("SUPPLICANTEVENT_REASON"), v32);
                                                  CFRelease(v57);
                                                  v33 = CFNumberCreate(v7, kCFNumberSInt32Type, a2 + 116);
                                                  if (v33)
                                                  {
                                                    v58 = v33;
                                                    CFDictionaryAddValue(cf, CFSTR("ROAM_STATUS_SUBSTATE_FLAGS"), v33);
                                                    CFRelease(v58);
                                                    CFDictionarySetValue(v6, CFSTR("ROAM_STATUS_SUBSTATE_INFO"), cf);
                                                    CFRelease(cf);
                                                    cfa = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                                                    if (cfa)
                                                    {
                                                      v34 = CFNumberCreate(v7, kCFNumberSInt64Type, a2 + 144);
                                                      if (v34)
                                                      {
                                                        v59 = v34;
                                                        CFDictionaryAddValue(cfa, CFSTR("ROAM_SCAN_DURATION"), v34);
                                                        CFRelease(v59);
                                                        v35 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 152);
                                                        if (v35)
                                                        {
                                                          v60 = v35;
                                                          CFDictionaryAddValue(cfa, CFSTR("ROAM_FAILED_SCAN_COUNT"), v35);
                                                          CFRelease(v60);
                                                          v36 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 153);
                                                          if (v36)
                                                          {
                                                            v61 = v36;
                                                            CFDictionaryAddValue(cfa, CFSTR("ROAM_NUM_FULL_BAND_SCANS"), v36);
                                                            CFRelease(v61);
                                                            v37 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 155);
                                                            if (v37)
                                                            {
                                                              v62 = v37;
                                                              CFDictionaryAddValue(cfa, CFSTR("ROAM_NUM_PARTIAL_SCANS"), v37);
                                                              CFRelease(v62);
                                                              v38 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 154);
                                                              if (v38)
                                                              {
                                                                v63 = v38;
                                                                CFDictionaryAddValue(cfa, CFSTR("ROAM_NUM_ROAM_ATTEMPTS"), v38);
                                                                CFRelease(v63);
                                                                v39 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 156);
                                                                if (v39)
                                                                {
                                                                  v64 = v39;
                                                                  CFDictionaryAddValue(cfa, CFSTR("ROAM_NUM_ROAM_ABORTS"), v39);
                                                                  CFRelease(v64);
                                                                  v40 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 157);
                                                                  if (v40)
                                                                  {
                                                                    v65 = v40;
                                                                    CFDictionaryAddValue(cfa, CFSTR("ROAM_NUM_ROAM_OP_TIMEOUTS"), v40);
                                                                    CFRelease(v65);
                                                                    v41 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 158);
                                                                    if (v41)
                                                                    {
                                                                      v66 = v41;
                                                                      CFDictionaryAddValue(cfa, CFSTR("ROAM_NUM_ROAM_OP_FAILURES"), v41);
                                                                      CFRelease(v66);
                                                                      CFDictionarySetValue(v6, CFSTR("ROAM_SCAN_SUMMARY"), cfa);
                                                                      CFRelease(cfa);
                                                                      cfb = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                                                                      if (cfb)
                                                                      {
                                                                        v42 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 160);
                                                                        if (v42)
                                                                        {
                                                                          v67 = v42;
                                                                          CFDictionaryAddValue(cfb, CFSTR("ROAM_PKTS_PENDING_AQM"), v42);
                                                                          CFRelease(v67);
                                                                          v43 = CFNumberCreate(v7, kCFNumberSInt8Type, a2 + 161);
                                                                          if (v43)
                                                                          {
                                                                            v44 = v43;
                                                                            CFDictionaryAddValue(cfb, CFSTR("ROAM_PKTS_PENDING_TXSUBQ"), v43);
                                                                            CFRelease(v44);
                                                                            CFDictionarySetValue(v6, CFSTR("ROAM_PKT_LOSS_INFO"), cfb);
                                                                            CFRelease(cfb);
                                                                            (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 80, v6, 8, *(_QWORD *)(a1 + 80));
LABEL_93:
                                                                            v47 = v73;
                                                                            v46 = v74;
                                                                            v48 = v72;
                                                                            goto LABEL_53;
                                                                          }
                                                                          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                          *(_DWORD *)buf = 136315138;
                                                                          v83 = "_dispatchRoamStatus";
                                                                          v49 = MEMORY[0x24BDACB70];
                                                                          v50 = "%s:Pkt Loss PendingInTxSubQ allocation Failed!\n";
                                                                        }
                                                                        else
                                                                        {
                                                                          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                          *(_DWORD *)buf = 136315138;
                                                                          v83 = "_dispatchRoamStatus";
                                                                          v49 = MEMORY[0x24BDACB70];
                                                                          v50 = "%s:Pkt Loss PendingInAQM allocation Failed!\n";
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                        *(_DWORD *)buf = 136315138;
                                                                        v83 = "_dispatchRoamStatus";
                                                                        v49 = MEMORY[0x24BDACB70];
                                                                        v50 = "%s:array allocation Failed!\n";
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                      *(_DWORD *)buf = 136315138;
                                                                      v83 = "_dispatchRoamStatus";
                                                                      v49 = MEMORY[0x24BDACB70];
                                                                      v50 = "%s:Roam OP Failure Duration allocation Failed!\n";
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                    *(_DWORD *)buf = 136315138;
                                                                    v83 = "_dispatchRoamStatus";
                                                                    v49 = MEMORY[0x24BDACB70];
                                                                    v50 = "%s:Roam Scan Op Timeout allocation Failed!\n";
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                  *(_DWORD *)buf = 136315138;
                                                                  v83 = "_dispatchRoamStatus";
                                                                  v49 = MEMORY[0x24BDACB70];
                                                                  v50 = "%s:Num Roam aborts allocation Failed!\n";
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                                *(_DWORD *)buf = 136315138;
                                                                v83 = "_dispatchRoamStatus";
                                                                v49 = MEMORY[0x24BDACB70];
                                                                v50 = "%s:Roam Attempts allocation Failed!\n";
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                              *(_DWORD *)buf = 136315138;
                                                              v83 = "_dispatchRoamStatus";
                                                              v49 = MEMORY[0x24BDACB70];
                                                              v50 = "%s:Partial Scan Num allocation Failed!\n";
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                            *(_DWORD *)buf = 136315138;
                                                            v83 = "_dispatchRoamStatus";
                                                            v49 = MEMORY[0x24BDACB70];
                                                            v50 = "%s:Full band scan count allocation Failed!\n";
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                          *(_DWORD *)buf = 136315138;
                                                          v83 = "_dispatchRoamStatus";
                                                          v49 = MEMORY[0x24BDACB70];
                                                          v50 = "%s:Failed Scan Count allocation Failed!\n";
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                        *(_DWORD *)buf = 136315138;
                                                        v83 = "_dispatchRoamStatus";
                                                        v49 = MEMORY[0x24BDACB70];
                                                        v50 = "%s:Roam Scan Duration allocation Failed!\n";
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))goto LABEL_93;
                                                      *(_DWORD *)buf = 136315138;
                                                      v83 = "_dispatchRoamStatus";
                                                      v49 = MEMORY[0x24BDACB70];
                                                      v50 = "%s:array allocation Failed!\n";
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                                      goto LABEL_93;
                                                    *(_DWORD *)buf = 136315138;
                                                    v83 = "_dispatchRoamStatus";
                                                    v49 = MEMORY[0x24BDACB70];
                                                    v50 = "%s:flags allocation Failed!\n";
                                                  }
                                                }
                                                else
                                                {
                                                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                                    goto LABEL_93;
                                                  *(_DWORD *)buf = 136315138;
                                                  v83 = "_dispatchRoamStatus";
                                                  v49 = MEMORY[0x24BDACB70];
                                                  v50 = "%s:supplEvReason allocation Failed!\n";
                                                }
                                              }
                                              else
                                              {
                                                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                                  goto LABEL_93;
                                                *(_DWORD *)buf = 136315138;
                                                v83 = "_dispatchRoamStatus";
                                                v49 = MEMORY[0x24BDACB70];
                                                v50 = "%s:supplEvStatus allocation Failed!\n";
                                              }
                                            }
                                            else
                                            {
                                              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                                goto LABEL_93;
                                              *(_DWORD *)buf = 136315138;
                                              v83 = "_dispatchRoamStatus";
                                              v49 = MEMORY[0x24BDACB70];
                                              v50 = "%s:assocReason allocation Failed!\n";
                                            }
                                          }
                                          else
                                          {
                                            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                              goto LABEL_93;
                                            *(_DWORD *)buf = 136315138;
                                            v83 = "_dispatchRoamStatus";
                                            v49 = MEMORY[0x24BDACB70];
                                            v50 = "%s:assocStatus allocation Failed!\n";
                                          }
                                        }
                                        else
                                        {
                                          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                            goto LABEL_93;
                                          *(_DWORD *)buf = 136315138;
                                          v83 = "_dispatchRoamStatus";
                                          v49 = MEMORY[0x24BDACB70];
                                          v50 = "%s:authReason allocation Failed!\n";
                                        }
                                      }
                                      else
                                      {
                                        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                          goto LABEL_93;
                                        *(_DWORD *)buf = 136315138;
                                        v83 = "_dispatchRoamStatus";
                                        v49 = MEMORY[0x24BDACB70];
                                        v50 = "%s:authStatus allocation Failed!\n";
                                      }
                                    }
                                    else
                                    {
                                      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                        goto LABEL_93;
                                      *(_DWORD *)buf = 136315138;
                                      v83 = "_dispatchRoamStatus";
                                      v49 = MEMORY[0x24BDACB70];
                                      v50 = "%s:bssid allocation Failed!\n";
                                    }
                                  }
                                  else
                                  {
                                    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                      goto LABEL_93;
                                    *(_DWORD *)buf = 136315138;
                                    v83 = "_dispatchRoamStatus";
                                    v49 = MEMORY[0x24BDACB70];
                                    v50 = "%s:array allocation Failed!\n";
                                  }
                                  _os_log_impl(&dword_20647D000, v49, OS_LOG_TYPE_DEFAULT, v50, buf, 0xCu);
                                  goto LABEL_93;
                                }
LABEL_92:
                                value = 0;
                                v24 = 0;
                                goto LABEL_93;
                              }
LABEL_91:
                              v75 = 0;
                              goto LABEL_92;
                            }
LABEL_90:
                            v76 = 0;
                            goto LABEL_91;
                          }
LABEL_89:
                          v77 = 0;
                          goto LABEL_90;
                        }
LABEL_88:
                        v78 = 0;
                        goto LABEL_89;
                      }
                    }
                    else
                    {
                      v80 = 0;
                    }
                    v79 = 0;
                    goto LABEL_88;
                  }
                  v48 = 0;
                  v79 = 0;
                  v80 = 0;
                  v77 = 0;
                  v78 = 0;
                  v75 = 0;
                  v76 = 0;
                  value = 0;
                  v24 = 0;
                  v47 = v73;
                  v46 = v74;
                }
                else
                {
                  v47 = 0;
                  v48 = 0;
                  v79 = 0;
                  v80 = 0;
                  v77 = 0;
                  v78 = 0;
                  v75 = 0;
                  v76 = 0;
                  value = 0;
                  v24 = 0;
                  v46 = v74;
                }
LABEL_53:
                CFRelease(v11);
                CFRelease(v9);
                if (v12)
                  CFRelease(v12);
                if (v13)
                  CFRelease(v13);
                if (v14)
                  CFRelease(v14);
                if (v46)
                  CFRelease(v46);
                if (v47)
                  CFRelease(v47);
                if (v48)
                  CFRelease(v48);
                if (v76)
                  CFRelease(v76);
                if (v75)
                  CFRelease(v75);
                if (v80)
                  CFRelease(v80);
                if (v79)
                  CFRelease(v79);
                if (v77)
                  CFRelease(v77);
                if (v78)
                  CFRelease(v78);
                if (value)
                  CFRelease(value);
                if (!v24)
                  goto LABEL_82;
                v45 = v24;
                goto LABEL_81;
              }
            }
LABEL_52:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v79 = 0;
            v80 = 0;
            v77 = 0;
            v78 = 0;
            v75 = 0;
            v76 = 0;
            value = 0;
            v24 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          v13 = 0;
        }
        v14 = 0;
        goto LABEL_52;
      }
    }
  }
}

void _dispatchAssoc(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 8)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("ASSOCEVENT_STATUS"), v8);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("ASSOCEVENT_REASON"), v10);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 78, v6, 8, *(_QWORD *)(a1 + 80));
            CFRelease(v11);
          }
          CFRelease(v9);
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRoamScanStart(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;

  if (a2)
  {
    if (a3 == 12)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("ROAM_LAST_STATUS"), v8);
          CFRelease(v9);
          v10 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("ROAM_SCAN_REASON"), v10);
            CFRelease(v11);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 137, v6, 8, *(_QWORD *)(a1 + 80));
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchRoamScanEnd(uint64_t a1, unsigned __int8 *a2, int a3)
{
  __CFDictionary *DictFromRoamState;
  __CFDictionary *v5;

  if (a2 && a3 == 76)
  {
    DictFromRoamState = _createDictFromRoamState(a2);
    if (DictFromRoamState)
    {
      v5 = DictFromRoamState;
      (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 138, DictFromRoamState, 8, *(_QWORD *)(a1 + 80));
      CFRelease(v5);
    }
  }
}

void _dispatchRoamPrep(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  char *v10;
  CFStringRef v11;
  CFStringRef v12;

  if (a2)
  {
    if (a3 == 12)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("ROAM_SCAN_REASON"), v8);
          CFRelease(v9);
          v10 = ether_ntoa((const ether_addr *)(a2 + 4));
          if (v10)
          {
            v11 = CFStringCreateWithCString(v7, v10, 0x8000100u);
            if (v11)
            {
              v12 = v11;
              CFDictionaryAddValue(v6, CFSTR("BSSID"), v11);
              CFRelease(v12);
              (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 139, v6, 8, *(_QWORD *)(a1 + 80));
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchBssSteeringRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  NSObject *v24;
  int v25;
  CFStringRef v26;
  _BOOL4 v27;
  int v28;
  char *v29;
  CFStringRef v30;
  CFStringRef v31;
  NSObject *v32;
  const char *v33;
  uint32_t v34;
  NSObject *v35;
  const char *v36;
  uint32_t v37;
  char v38;
  char valuePtr;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v41 = "_dispatchBssSteeringRequest";
    v42 = 1024;
    LODWORD(v43) = 6203;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s:%d Processing _dispatchBssSteeringRequest\n", buf, 0x12u);
  }
  if (!a2 || a3 <= 0x4B)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 136315394;
    v41 = "_dispatchBssSteeringRequest";
    v42 = 1024;
    LODWORD(v43) = 6206;
    v32 = MEMORY[0x24BDACB70];
    v33 = "%s:%d Invalid event data args !\n";
    v34 = 18;
    goto LABEL_37;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v8 = Mutable;
    v9 = CFNumberCreate(v6, kCFNumberIntType, (const void *)a2);
    if (!v9)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_DWORD *)buf = 136315138;
      v41 = "_dispatchBssSteeringRequest";
      v35 = MEMORY[0x24BDACB70];
      v36 = "%s: Failed to allocate memory for Steering Request Type \n";
      goto LABEL_61;
    }
    v10 = v9;
    CFDictionaryAddValue(v8, CFSTR("P2P_BSS_STEERING_REQUEST_TYPE"), v9);
    CFRelease(v10);
    valuePtr = *(_DWORD *)(a2 + 16);
    v11 = CFNumberCreate(v6, kCFNumberSInt8Type, &valuePtr);
    if (!v11)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_DWORD *)buf = 136315138;
      v41 = "_dispatchBssSteeringRequest";
      v35 = MEMORY[0x24BDACB70];
      v36 = "%s: Failed to allocate memory for requestedChannel\n";
      goto LABEL_61;
    }
    v12 = v11;
    CFDictionaryAddValue(v8, CFSTR("CHANNEL"), v11);
    CFRelease(v12);
    v13 = CFNumberCreate(v6, kCFNumberIntType, (const void *)(a2 + 20));
    if (!v13)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_DWORD *)buf = 136315138;
      v41 = "_dispatchBssSteeringRequest";
      v35 = MEMORY[0x24BDACB70];
      v36 = "%s: Failed to allocate memory for requestedChannel flags\n";
      goto LABEL_61;
    }
    v14 = v13;
    CFDictionaryAddValue(v8, CFSTR("CHANNEL_FLAGS"), v13);
    CFRelease(v14);
    if (*(_DWORD *)(a2 + 64) == 1)
    {
      v38 = 4;
      v15 = CFNumberCreate(v6, kCFNumberCharType, &v38);
      if (!v15)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_34;
        *(_DWORD *)buf = 136315138;
        v41 = "_dispatchBssSteeringRequest";
        v35 = MEMORY[0x24BDACB70];
        v36 = "%s: Failed to allocate memory for steering band\n";
        goto LABEL_61;
      }
      v16 = v15;
      CFDictionaryAddValue(v8, CFSTR("BAND_PREFERENCE"), v15);
      CFRelease(v16);
    }
    v17 = CFNumberCreate(v6, kCFNumberIntType, (const void *)(a2 + 60));
    if (v17)
    {
      v18 = v17;
      CFDictionaryAddValue(v8, CFSTR("P2P_BSS_STEERING_JOIN_TIMEOUT_IN_MS"), v17);
      CFRelease(v18);
      v19 = CFNumberCreate(v6, kCFNumberSInt32Type, (const void *)(a2 + 68));
      if (v19)
      {
        v20 = v19;
        CFDictionaryAddValue(v8, CFSTR("ROAM_FLAGS"), v19);
        CFRelease(v20);
        v21 = *(_DWORD *)(a2 + 24);
        if (v21 >= 0x20)
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_34;
          *(_DWORD *)buf = 136315394;
          v41 = "_dispatchBssSteeringRequest";
          v42 = 1024;
          LODWORD(v43) = v21;
          v35 = MEMORY[0x24BDACB70];
          v36 = "%s: ssid length is invalid:%u\n";
          v37 = 18;
LABEL_62:
          _os_log_impl(&dword_20647D000, v35, OS_LOG_TYPE_DEFAULT, v36, buf, v37);
          goto LABEL_34;
        }
        if (!v21)
          goto LABEL_31;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v41 = "_dispatchBssSteeringRequest";
          v42 = 1024;
          LODWORD(v43) = v21;
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: ssid length is :%u\n", buf, 0x12u);
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v41 = "_dispatchBssSteeringRequest";
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: ssid buffer = ", buf, 0xCu);
        }
        v22 = *(_DWORD *)(a2 + 24);
        if (v22)
        {
          v23 = 0;
          v24 = MEMORY[0x24BDACB70];
          do
          {
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              v25 = *(unsigned __int8 *)(a2 + v23 + 28);
              *(_DWORD *)buf = 67109120;
              LODWORD(v41) = v25;
              _os_log_impl(&dword_20647D000, v24, OS_LOG_TYPE_DEFAULT, "0x%0x ", buf, 8u);
              v22 = *(_DWORD *)(a2 + 24);
            }
            ++v23;
          }
          while (v22 > v23);
        }
        v26 = CFStringCreateWithBytes(v6, (const UInt8 *)(a2 + 28), v22, 0x8000100u, 0);
        v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
        if (v26)
        {
          if (v27)
          {
            v28 = *(_DWORD *)(a2 + 24);
            *(_DWORD *)buf = 136315394;
            v41 = "_dispatchBssSteeringRequest";
            v42 = 1024;
            LODWORD(v43) = v28;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: SSID is of length :%u\n", buf, 0x12u);
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v41 = "_dispatchBssSteeringRequest";
            v42 = 2080;
            v43 = a2 + 28;
            _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: SSID is :%s \n", buf, 0x16u);
          }
          CFDictionaryAddValue(v8, CFSTR("SSID_STR"), v26);
          CFRelease(v26);
LABEL_31:
          v29 = ether_ntoa((const ether_addr *)(a2 + 4));
          if (v29)
          {
            v30 = CFStringCreateWithCString(v6, v29, 0x8000100u);
            if (v30)
            {
              v31 = v30;
              CFDictionaryAddValue(v8, CFSTR("BSSID"), v30);
              CFRelease(v31);
              (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 140, v8, 8, *(_QWORD *)(a1 + 80));
LABEL_34:
              CFRelease(v8);
              return;
            }
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_34;
            *(_DWORD *)buf = 136315138;
            v41 = "_dispatchBssSteeringRequest";
            v35 = MEMORY[0x24BDACB70];
            v36 = "%s: Failed to create bssid string \n";
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_34;
            *(_DWORD *)buf = 136315138;
            v41 = "_dispatchBssSteeringRequest";
            v35 = MEMORY[0x24BDACB70];
            v36 = "%s: Failed to convert BSSID to Ascii format\n";
          }
          goto LABEL_61;
        }
        if (!v27)
          goto LABEL_34;
        *(_DWORD *)buf = 136315138;
        v41 = "_dispatchBssSteeringRequest";
        v35 = MEMORY[0x24BDACB70];
        v36 = "%s: Failed to create SSID string[kCFStringEncodingUTF8]\n";
      }
      else
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_34;
        *(_DWORD *)buf = 136315138;
        v41 = "_dispatchBssSteeringRequest";
        v35 = MEMORY[0x24BDACB70];
        v36 = "%s: Failed to allocate memory for steering flag\n";
      }
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_DWORD *)buf = 136315138;
      v41 = "_dispatchBssSteeringRequest";
      v35 = MEMORY[0x24BDACB70];
      v36 = "%s: Failed to allocate memory for join timeout\n";
    }
LABEL_61:
    v37 = 12;
    goto LABEL_62;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v41 = "_dispatchBssSteeringRequest";
    v32 = MEMORY[0x24BDACB70];
    v33 = "%s: Failed to allocate memory for BSS-Steering Dictionary\n";
    v34 = 12;
LABEL_37:
    _os_log_impl(&dword_20647D000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
  }
}

void _dispatchSoftAPLPMEvent(uint64_t a1, _DWORD *a2, int a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void **v8;
  const void *v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
    return;
  if (a3 != 4)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v13 = 136315394;
    v14 = "_dispatchSoftAPLPMEvent";
    v15 = 1024;
    v16 = a3;
    v10 = MEMORY[0x24BDACB70];
    v11 = "%s:SoftAP LPM event with insufficient DataLen:%u\n";
    v12 = 18;
LABEL_12:
    _os_log_impl(&dword_20647D000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, v12);
    return;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v13 = 136315138;
    v14 = "_dispatchSoftAPLPMEvent";
    v10 = MEMORY[0x24BDACB70];
    v11 = "%s: SoftAP LPM Dictionary has NULL Data, Bail out\n";
    v12 = 12;
    goto LABEL_12;
  }
  v7 = Mutable;
  v8 = (const void **)MEMORY[0x24BDBD270];
  if (!*a2)
    v8 = (const void **)MEMORY[0x24BDBD268];
  v9 = *v8;
  CFDictionaryAddValue(Mutable, CFSTR("SOFTAP_LPM"), *v8);
  CFRelease(v9);
  (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 141, v7, 8, *(_QWORD *)(a1 + 80));
  CFRelease(v7);
}

void _dispatchActionFrameEvent(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  int v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  const __CFString *v20;
  CFNumberRef v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  uint32_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int valuePtr;
  const char *v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (a3 <= 2)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        valuePtr = 136315394;
        v32 = "_dispatchActionFrameEvent";
        v33 = 1024;
        v34 = a3;
        v24 = MEMORY[0x24BDACB70];
        v25 = "%s:Action Frame Event data is insuffcient :%u\n";
        v26 = 18;
LABEL_23:
        _os_log_impl(&dword_20647D000, v24, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&valuePtr, v26);
      }
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v7 = Mutable;
        if (*a2 != 10)
        {
LABEL_13:
          (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 143, v7, 8, *(_QWORD *)(a1 + 80));
LABEL_14:
          CFRelease(v7);
          return;
        }
        v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, a2);
        CFDictionaryAddValue(v7, CFSTR("CATEGORY_CODE"), v9);
        CFRelease(v9);
        v10 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 1);
        CFDictionaryAddValue(v7, CFSTR("ACTION_CODE"), v10);
        CFRelease(v10);
        v11 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 2);
        CFDictionaryAddValue(v7, CFSTR("DIALOG_TOKEN"), v11);
        CFRelease(v11);
        v12 = a2[1];
        if (v12 == 8)
        {
          if (a3 > 3)
          {
            v21 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 3);
            CFDictionaryAddValue(v7, CFSTR("BTM_RSP_STATUS"), v21);
            CFRelease(v21);
            v19 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 4);
            v20 = CFSTR("BSS_TERM_DELAY");
            goto LABEL_12;
          }
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
          valuePtr = 136315394;
          v32 = "_dispatchActionFrameEvent";
          v33 = 1024;
          v34 = 3;
          v22 = MEMORY[0x24BDACB70];
          v23 = "%s:BTM Response Frame Event data is insuffcient :%u\n";
        }
        else if (v12 == 7)
        {
          if (a3 > 5)
          {
            LOBYTE(valuePtr) = a2[3] & 1;
            v13 = CFNumberCreate(v8, kCFNumberSInt8Type, &valuePtr);
            CFDictionaryAddValue(v7, CFSTR("PREF_CANDIDATE_INCLUDED"), v13);
            CFRelease(v13);
            v30 = (a2[3] & 2) != 0;
            v14 = CFNumberCreate(v8, kCFNumberSInt8Type, &v30);
            CFDictionaryAddValue(v7, CFSTR("ABRIDGED"), v14);
            CFRelease(v14);
            v29 = (a2[3] & 4) != 0;
            v15 = CFNumberCreate(v8, kCFNumberSInt8Type, &v29);
            CFDictionaryAddValue(v7, CFSTR("DISASSOC_IMMINENT"), v15);
            CFRelease(v15);
            v28 = (a2[3] & 8) != 0;
            v16 = CFNumberCreate(v8, kCFNumberSInt8Type, &v28);
            CFDictionaryAddValue(v7, CFSTR("BSS_TERM_INCLUDED"), v16);
            CFRelease(v16);
            v27 = (a2[3] & 0x10) != 0;
            v17 = CFNumberCreate(v8, kCFNumberSInt8Type, &v27);
            CFDictionaryAddValue(v7, CFSTR("ESS_TERM_INCLUDED"), v17);
            CFRelease(v17);
            v18 = CFNumberCreate(v8, kCFNumberSInt16Type, a2 + 4);
            CFDictionaryAddValue(v7, CFSTR("DISASSOC_TIMEOUT"), v18);
            CFRelease(v18);
            v19 = CFNumberCreate(v8, kCFNumberSInt8Type, a2 + 6);
            v20 = CFSTR("VALIDITY_INTERVAL");
LABEL_12:
            CFDictionaryAddValue(v7, v20, v19);
            CFRelease(v19);
            goto LABEL_13;
          }
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
          valuePtr = 136315394;
          v32 = "_dispatchActionFrameEvent";
          v33 = 1024;
          v34 = a3;
          v22 = MEMORY[0x24BDACB70];
          v23 = "%s:BTM Req Frame Event data is insuffcient :%u\n";
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
          valuePtr = 136315394;
          v32 = "_dispatchActionFrameEvent";
          v33 = 1024;
          v34 = v12;
          v22 = MEMORY[0x24BDACB70];
          v23 = "%s:Invalid Action Frame Event:%u\n";
        }
        _os_log_impl(&dword_20647D000, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&valuePtr, 0x12u);
        goto LABEL_14;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        valuePtr = 136315138;
        v32 = "_dispatchActionFrameEvent";
        v24 = MEMORY[0x24BDACB70];
        v25 = "%s: Could not create Action Frame Event Dictionary, Bail out\n";
        v26 = 12;
        goto LABEL_23;
      }
    }
  }
}

void _dispatchDPS(uint64_t a1, _DWORD *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const void **v12;
  NSObject *v13;
  const char *v14;
  uint32_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
    return;
  if (a3 != 24)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v16 = 136315394;
    v17 = "_dispatchDPS";
    v18 = 1024;
    v19 = a3;
    v13 = MEMORY[0x24BDACB70];
    v14 = "%s:DPS notification with insufficient DataLen:%u\n";
    v15 = 18;
LABEL_12:
    _os_log_impl(&dword_20647D000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, v15);
    return;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v16 = 136315138;
    v17 = "_dispatchDPS";
    v13 = MEMORY[0x24BDACB70];
    v14 = "%s: DPS Notification Dictionary has NULL Data, Bail out\n";
    v15 = 12;
    goto LABEL_12;
  }
  v7 = Mutable;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2);
  CFDictionaryAddValue(v7, CFSTR("DPS_AC"), v9);
  CFRelease(v9);
  v10 = CFNumberCreate(v8, kCFNumberSInt32Type, a2 + 2);
  CFDictionaryAddValue(v7, CFSTR("DPS_CCA"), v10);
  CFRelease(v10);
  v11 = CFNumberCreate(v8, kCFNumberLongLongType, a2 + 4);
  CFDictionaryAddValue(v7, CFSTR("DPS_TIMESTAMP"), v11);
  CFRelease(v11);
  v12 = (const void **)MEMORY[0x24BDBD270];
  if (!a2[1])
    v12 = (const void **)MEMORY[0x24BDBD268];
  CFDictionaryAddValue(v7, CFSTR("DPS_SYMPTOMS_TRIGGER"), *v12);
  (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 150, v7, 8, *(_QWORD *)(a1 + 80));
  CFRelease(v7);
}

void _dispatchP2PCountryCodeChange(uint64_t a1, const char *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  const void *v8;
  CFStringRef v9;
  CFStringRef v10;
  const void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v12 = 136315394;
      v13 = "_dispatchP2PCountryCodeChange";
      v14 = 2080;
      v15 = a2 + 4;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: CountryCode : %s \n", (uint8_t *)&v12, 0x16u);
    }
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, a2);
      if (v7)
      {
        v8 = (const void *)v7;
        CFDictionarySetValue(v6, CFSTR("P2P_CC_VERSION"), (const void *)v7);
        CFRelease(v8);
        v9 = CFStringCreateWithCString(v4, a2 + 4, 0x8000100u);
        if (v9)
        {
          v10 = v9;
          CFDictionarySetValue(v6, CFSTR("P2P_CC_COUNTRY"), v9);
          CFRelease(v10);
          v7 = (uint64_t)CFNumberCreate(v4, kCFNumberSInt32Type, a2 + 8);
          if (v7)
          {
            v11 = (const void *)v7;
            CFDictionarySetValue(v6, CFSTR("P2P_CC_FLAGS"), (const void *)v7);
            CFRelease(v11);
            v7 = 0;
          }
        }
        else
        {
          v7 = 4294963395;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(v7, a1, 210, v6, 8, *(_QWORD *)(a1 + 80));
      CFRelease(v6);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 72))(4294963395, a1, 210, 0, 8, *(_QWORD *)(a1 + 80));
    }
  }
}

void _dispatchSlowWiFi(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  char *v21;
  CFStringRef v22;
  CFStringRef v23;
  NSObject *v24;
  const char *v25;
  uint32_t v26;
  NSObject *v27;
  const char *v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (a3 == 24)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v7 = Mutable;
        v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)(a2 + 8));
        if (v9)
        {
          v10 = v9;
          CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_ACTION_STAGE"), v9);
          CFRelease(v10);
          v11 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 12));
          if (v11)
          {
            v12 = v11;
            CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_ACTION_TYPE"), v11);
            CFRelease(v12);
            v13 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 16));
            if (v13)
            {
              v14 = v13;
              CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_ACTION_REASON"), v13);
              CFRelease(v14);
              v15 = (const void *)*MEMORY[0x24BDBD270];
              v16 = (const void *)*MEMORY[0x24BDBD268];
              if ((*(_BYTE *)a2 & 2) != 0)
                v17 = (const void *)*MEMORY[0x24BDBD270];
              else
                v17 = (const void *)*MEMORY[0x24BDBD268];
              CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_IS_BAP_AP"), v17);
              if ((*(_BYTE *)a2 & 1) != 0)
                v18 = v15;
              else
                v18 = v16;
              CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_RECOVERY_ENABLED"), v18);
              v19 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 20));
              if (v19)
              {
                v20 = v19;
                CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_USER_INPUT"), v19);
                CFRelease(v20);
                v21 = ether_ntoa((const ether_addr *)(a2 + 1));
                if (v21)
                {
                  v22 = CFStringCreateWithCString(v8, v21, 0x8000100u);
                  if (v22)
                  {
                    v23 = v22;
                    CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_BSSID"), v22);
                    CFRelease(v23);
                    (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 151, v7, 8, *(_QWORD *)(a1 + 80));
LABEL_18:
                    CFRelease(v7);
                    return;
                  }
                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    goto LABEL_18;
                  LOWORD(v29) = 0;
                  v27 = MEMORY[0x24BDACB70];
                  v28 = "Failed to get bssid ref";
                }
                else
                {
                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    goto LABEL_18;
                  LOWORD(v29) = 0;
                  v27 = MEMORY[0x24BDACB70];
                  v28 = "Failed to get bssid string";
                }
              }
              else
              {
                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                  goto LABEL_18;
                LOWORD(v29) = 0;
                v27 = MEMORY[0x24BDACB70];
                v28 = "Failed to allocation userInput ref";
              }
            }
            else
            {
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                goto LABEL_18;
              LOWORD(v29) = 0;
              v27 = MEMORY[0x24BDACB70];
              v28 = "Failed to allocate actionReason ref";
            }
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              goto LABEL_18;
            LOWORD(v29) = 0;
            v27 = MEMORY[0x24BDACB70];
            v28 = "Failed to allocate actionType ref";
          }
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
          LOWORD(v29) = 0;
          v27 = MEMORY[0x24BDACB70];
          v28 = "Failed to allocate actionStage ref";
        }
        _os_log_impl(&dword_20647D000, v27, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v29, 2u);
        goto LABEL_18;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v29 = 136315138;
        v30 = "_dispatchSlowWiFi";
        v24 = MEMORY[0x24BDACB70];
        v25 = "%s: SlowWiFi Notification Dictionary has NULL Data, Bail out\n";
        v26 = 12;
        goto LABEL_24;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v29 = 136315394;
      v30 = "_dispatchSlowWiFi";
      v31 = 1024;
      v32 = a3;
      v24 = MEMORY[0x24BDACB70];
      v25 = "%s:SlowWiFi notification with insufficient DataLen:%u\n";
      v26 = 18;
LABEL_24:
      _os_log_impl(&dword_20647D000, v24, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v29, v26);
    }
  }
}

void _dispatchSlowWiFiLinkProbeTrigger(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  int valuePtr;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return;
  v3 = a2;
  if (!a2)
    return;
  if (a3 != 4)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 136315394;
    v15 = "_dispatchSlowWiFiLinkProbeTrigger";
    v16 = 1024;
    v17 = a3;
    v10 = MEMORY[0x24BDACB70];
    v11 = "%s:SlowWiFi probe trigger with insufficient DataLen:%u\n";
    v12 = 18;
    goto LABEL_13;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 136315138;
    v15 = "_dispatchSlowWiFiLinkProbeTrigger";
    v10 = MEMORY[0x24BDACB70];
    v11 = "%s: SlowWiFi probe trigger Dictionary has NULL Data, Bail out\n";
    v12 = 12;
LABEL_13:
    _os_log_impl(&dword_20647D000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, v12);
    return;
  }
  v7 = Mutable;
  valuePtr = v3;
  v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  if (v8)
  {
    v9 = v8;
    CFDictionaryAddValue(v7, CFSTR("SLOWWIFI_DOWNLOAD_SIZE"), v8);
    CFRelease(v9);
    (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 164, v7, 8, *(_QWORD *)(a1 + 80));
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Failed to allocate downloadSizeRef", buf, 2u);
  }
  CFRelease(v7);
}

void _dispatchSlowWiFiUserInputTrigger(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  NSObject *v7;
  const char *v8;
  uint32_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (a3 != 4)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        return;
      v10 = 136315394;
      v11 = "_dispatchSlowWiFiUserInputTrigger";
      v12 = 1024;
      v13 = a3;
      v7 = MEMORY[0x24BDACB70];
      v8 = "%s:SlowWiFi user input trigger with insufficient DataLen:%u\n";
      v9 = 18;
      goto LABEL_10;
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = Mutable;
      (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableDictionaryRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 165, Mutable, 8, *(_QWORD *)(a1 + 80));
      CFRelease(v6);
      return;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315138;
      v11 = "_dispatchSlowWiFiUserInputTrigger";
      v7 = MEMORY[0x24BDACB70];
      v8 = "%s: SlowWiFi user input trigger Dictionary has NULL Data, Bail out\n";
      v9 = 12;
LABEL_10:
      _os_log_impl(&dword_20647D000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v10, v9);
    }
  }
}

void _dispatchLqmCrashTracer(uint64_t a1, const void *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
    return;
  if (a3 != 4)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v13 = 136315394;
    v14 = "_dispatchLqmCrashTracer";
    v15 = 1024;
    v16 = a3;
    v10 = MEMORY[0x24BDACB70];
    v11 = "%s:LQM CrashTracer Event with insufficient DataLen:%u\n";
    v12 = 18;
    goto LABEL_13;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v13 = 136315138;
    v14 = "_dispatchLqmCrashTracer";
    v10 = MEMORY[0x24BDACB70];
    v11 = "%s: LQM CrashTracer Dictionary has NULL Data, Bail out\n";
    v12 = 12;
LABEL_13:
    _os_log_impl(&dword_20647D000, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, v12);
    return;
  }
  v7 = Mutable;
  v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2);
  if (v8)
  {
    v9 = v8;
    CFDictionaryAddValue(v7, CFSTR("LQM_CRASHTRACER_CAPTURE_REASON"), v8);
    CFRelease(v9);
    (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 176, v7, 8, *(_QWORD *)(a1 + 80));
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Failed to allocate captureReasonRef\n", (uint8_t *)&v13, 2u);
  }
  CFRelease(v7);
}

void _dispatchTrafficInfoEvent(uint64_t a1, _BYTE *a2, int a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  const char *v13;
  uint32_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
    return;
  if (a3 != 2)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v15 = 136315394;
    v16 = "_dispatchTrafficInfoEvent";
    v17 = 1024;
    v18 = a3;
    v12 = MEMORY[0x24BDACB70];
    v13 = "%s:Traffic Info event with insufficient DataLen:%u\n";
    v14 = 18;
LABEL_16:
    _os_log_impl(&dword_20647D000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v15, v14);
    return;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      return;
    v15 = 136315138;
    v16 = "_dispatchTrafficInfoEvent";
    v12 = MEMORY[0x24BDACB70];
    v13 = "%s: Traffic InfoDictionary has NULL Data, Bail out\n";
    v14 = 12;
    goto LABEL_16;
  }
  v7 = Mutable;
  v8 = (const void *)*MEMORY[0x24BDBD270];
  v9 = (const void *)*MEMORY[0x24BDBD268];
  if (*a2)
    v10 = (const void *)*MEMORY[0x24BDBD270];
  else
    v10 = (const void *)*MEMORY[0x24BDBD268];
  CFDictionaryAddValue(Mutable, CFSTR("CRITICAL_TRAFFIC_STATE"), v10);
  CFRelease(v10);
  if (a2[1])
    v11 = v8;
  else
    v11 = v9;
  CFDictionaryAddValue(v7, CFSTR("NON_CRITICAL_TRAFFIC_STATE"), v11);
  CFRelease(v11);
  (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 189, v7, 8, *(_QWORD *)(a1 + 80));
  CFRelease(v7);
}

void _dispatchSensingResults(uint64_t a1, _BYTE *a2, int a3)
{
  char *v4;
  uint64_t v5;
  __CFDictionary *Mutable;
  uint64_t v7;
  char *v8;
  const __CFAllocator *v9;
  CFStringRef v10;
  CFStringRef v11;
  char *v12;
  CFStringRef v13;
  CFStringRef v14;
  char *v15;
  CFStringRef v16;
  CFStringRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  _DWORD *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFMutableArrayRef v39;
  __CFArray *v40;
  unint64_t v41;
  char *v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFMutableArrayRef v45;
  CFMutableArrayRef v46;
  unint64_t v47;
  char *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  __CFArray *v55;
  CFAbsoluteTime valuePtr;
  __int128 v57;
  __int128 v58;
  char *v59;
  uint64_t v60;

  v4 = 0;
  v60 = *MEMORY[0x24BDAC8D0];
  v5 = 4294963396;
  Mutable = 0;
  if (a2 && a3 == 4)
  {
    v5 = *a2;
    if (*a2)
    {
      v4 = 0;
LABEL_7:
      Mutable = 0;
      goto LABEL_8;
    }
    v4 = (char *)malloc_type_malloc(0x1054uLL, 0x1000040727A5468uLL);
    bzero(v4, 0x1054uLL);
    v57 = 0u;
    v58 = 0u;
    __strlcpy_chk();
    LODWORD(v58) = 410;
    DWORD2(v58) = 4180;
    v59 = v4;
    v7 = Apple80211RawGet(a1, (uint64_t)&v57);
    if ((_DWORD)v7)
    {
      v5 = v7;
      goto LABEL_7;
    }
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v8 = ether_ntoa((const ether_addr *)(v4 + 4));
      if (v8)
      {
        v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, 0x8000100u);
        if (v10)
        {
          v11 = v10;
          CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_TA"), v10);
          CFRelease(v11);
          v12 = ether_ntoa((const ether_addr *)(v4 + 10));
          if (v12)
          {
            v13 = CFStringCreateWithCString(v9, v12, 0x8000100u);
            if (v13)
            {
              v14 = v13;
              CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_RA"), v13);
              CFRelease(v14);
              v15 = ether_ntoa((const ether_addr *)(v4 + 16));
              if (v15)
              {
                v16 = CFStringCreateWithCString(v9, v15, 0x8000100u);
                if (v16)
                {
                  v17 = v16;
                  CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_BSSID"), v16);
                  CFRelease(v17);
                  v18 = CFNumberCreate(v9, kCFNumberIntType, v4 + 24);
                  if (v18)
                  {
                    v19 = v18;
                    CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_NUM_TONES"), v18);
                    CFRelease(v19);
                    v20 = CFNumberCreate(v9, kCFNumberIntType, v4 + 28);
                    if (v20)
                    {
                      v21 = v20;
                      CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_CHANNEL"), v20);
                      CFRelease(v21);
                      v22 = CFNumberCreate(v9, kCFNumberIntType, v4 + 32);
                      if (v22)
                      {
                        v23 = v22;
                        CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_BW"), v22);
                        CFRelease(v23);
                        v24 = CFNumberCreate(v9, kCFNumberIntType, v4 + 36);
                        if (v24)
                        {
                          v25 = v24;
                          CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_FRAME_TYPE"), v24);
                          CFRelease(v25);
                          v26 = CFNumberCreate(v9, kCFNumberIntType, v4 + 40);
                          if (v26)
                          {
                            v27 = v26;
                            CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_NSTS"), v26);
                            CFRelease(v27);
                            v28 = CFNumberCreate(v9, kCFNumberIntType, v4 + 44);
                            if (v28)
                            {
                              v29 = v28;
                              CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_SLICE"), v28);
                              CFRelease(v29);
                              v30 = CFNumberCreate(v9, kCFNumberIntType, v4 + 48);
                              if (v30)
                              {
                                v31 = v30;
                                CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_NUM_RX_CORES"), v30);
                                CFRelease(v31);
                                v32 = CFNumberCreate(v9, kCFNumberIntType, v4 + 52);
                                if (v32)
                                {
                                  v33 = v32;
                                  CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_NUM_STREAMS"), v32);
                                  CFRelease(v33);
                                  v34 = CFNumberCreate(v9, kCFNumberIntType, v4 + 56);
                                  if (v34)
                                  {
                                    v35 = v34;
                                    CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_AGC_GAIN"), v34);
                                    CFRelease(v35);
                                    v36 = v4 + 60;
                                    v37 = CFNumberCreate(v9, kCFNumberIntType, v4 + 60);
                                    if (v37)
                                    {
                                      v38 = v37;
                                      CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_NUM_RSSI"), v37);
                                      CFRelease(v38);
                                      v39 = CFArrayCreateMutable(v9, 0, MEMORY[0x24BDBD690]);
                                      if (v39)
                                      {
                                        v40 = v39;
                                        if (*v36)
                                        {
                                          v41 = 0;
                                          v42 = v4 + 64;
                                          while (1)
                                          {
                                            v43 = CFNumberCreate(v9, kCFNumberIntType, v42);
                                            if (!v43)
                                              break;
                                            v44 = v43;
                                            CFArrayAppendValue(v40, v43);
                                            CFRelease(v44);
                                            ++v41;
                                            v42 += 4;
                                            if (v41 >= *v36)
                                              goto LABEL_35;
                                          }
                                          v55 = v40;
                                          goto LABEL_44;
                                        }
LABEL_35:
                                        CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_INFO_RSSI"), v40);
                                        CFRelease(v40);
                                        v45 = CFArrayCreateMutable(v9, 0, MEMORY[0x24BDBD690]);
                                        if (v45)
                                        {
                                          v46 = v45;
                                          if (*((_DWORD *)v4 + 1044) < 4u)
                                          {
LABEL_40:
                                            CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_BUFFER"), v46);
                                            CFRelease(v46);
                                            v51 = CFNumberCreate(v9, kCFNumberIntType, v4 + 4176);
                                            if (v51)
                                            {
                                              v52 = v51;
                                              CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_BUFFER_LEN"), v51);
                                              CFRelease(v52);
                                              valuePtr = CFAbsoluteTimeGetCurrent();
                                              v53 = CFNumberCreate(v9, kCFNumberDoubleType, &valuePtr);
                                              if (v53)
                                              {
                                                v54 = v53;
                                                CFDictionarySetValue(Mutable, CFSTR("SENSING_RESULTS_DATA_TIMESTAMP"), v53);
                                                v55 = v54;
LABEL_44:
                                                CFRelease(v55);
                                                v5 = 0;
                                                goto LABEL_8;
                                              }
                                            }
                                          }
                                          else
                                          {
                                            v47 = 0;
                                            v48 = v4 + 80;
                                            while (1)
                                            {
                                              v49 = CFNumberCreate(v9, kCFNumberIntType, v48);
                                              if (!v49)
                                                break;
                                              v50 = v49;
                                              CFArrayAppendValue(v46, v49);
                                              CFRelease(v50);
                                              ++v47;
                                              v48 += 4;
                                              if (v47 >= (unint64_t)*((unsigned int *)v4 + 1044) >> 2)
                                                goto LABEL_40;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v5 = 4294963396;
  }
LABEL_8:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1736));
  *(_BYTE *)(a1 + 1800) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1736));
  (*(void (**)(uint64_t, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(v5, a1, 193, Mutable, 8, *(_QWORD *)(a1 + 80));
  if (v4)
    free(v4);
  if (Mutable)
    CFRelease(Mutable);
}

void _dispatchTTRFromDriver(uint64_t a1, const char *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFStringRef v10;
  CFStringRef v11;

  if (a2)
  {
    if (a3 == 260)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("DRIVER_TTR_Reason"), v8);
          CFRelease(v9);
          v10 = CFStringCreateWithCString(v7, a2 + 4, 0x600u);
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("DRIVER_TTR_Reason_String"), v10);
            CFRelease(v11);
            (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 196, v6, 8, *(_QWORD *)(a1 + 80));
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void _dispatchColocatedCacheEvent(uint64_t a1, int *a2, int a3)
{
  CFMutableArrayRef v5;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  uint64_t v8;
  const UInt8 *v9;
  CFMutableDictionaryRef v10;
  __CFDictionary *v11;
  CFStringRef v12;
  CFDataRef v13;
  char *v14;
  CFStringRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  char v18;
  __CFArray *theArray;

  if (a1 && (*(_BYTE *)(a1 + 99) & 0x40) != 0)
  {
    if (!a3)
    {
      v5 = 0;
      goto LABEL_34;
    }
    if (!a2)
    {
      syslog(3, " netList is NULL \n");
      return;
    }
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v5 = Mutable;
      if (*a2 >= 1)
      {
        theArray = Mutable;
        v8 = 0;
        v9 = (const UInt8 *)(a2 + 14);
        while (1)
        {
          v10 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v10)
            break;
          v11 = v10;
          if (*(v9 - 20))
          {
            v12 = CFStringCreateWithBytes(v6, v9 - 52, *(v9 - 20), 0x8000100u, 0);
            v13 = CFDataCreate(v6, v9 - 52, *(v9 - 20));
          }
          else
          {
            v12 = 0;
            v13 = 0;
          }
          v14 = ether_ntoa((const ether_addr *)(v9 - 19));
          if (v14)
          {
            v15 = CFStringCreateWithCString(v6, v14, 0x8000100u);
            if (v15)
            {
              CFDictionarySetValue(v11, CFSTR("BSSID"), v15);
              v16 = CFNumberCreate(v6, kCFNumberSInt16Type, v9);
              if (v16)
              {
                v17 = v16;
                CFDictionarySetValue(v11, CFSTR("RSSI"), v16);
                CFRelease(v17);
                if (v13)
                  CFDictionarySetValue(v11, CFSTR("SSID"), v13);
                if (v12)
                  CFDictionarySetValue(v11, CFSTR("SSID_STR"), v12);
                CFArrayAppendValue(theArray, v11);
              }
              v18 = 1;
            }
            else
            {
              v18 = 0;
            }
          }
          else
          {
            v18 = 0;
            v15 = 0;
          }
          if (v13)
            CFRelease(v13);
          if (v12)
            CFRelease(v12);
          if (v15)
            CFRelease(v15);
          CFRelease(v11);
          if ((v18 & 1) == 0)
            break;
          ++v8;
          v9 += 56;
          if (v8 >= *a2)
          {
            v5 = theArray;
            goto LABEL_34;
          }
        }
        v5 = theArray;
LABEL_35:
        CFRelease(v5);
        return;
      }
LABEL_34:
      (*(void (**)(_QWORD, uint64_t, uint64_t, CFMutableArrayRef, uint64_t, _QWORD))(a1 + 72))(0, a1, 199, v5, 8, *(_QWORD *)(a1 + 80));
      if (!v5)
        return;
      goto LABEL_35;
    }
  }
}

void _dispatchScanForwardStatsUpdateEvent(uint64_t a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  uint8_t v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3 == 64)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)a2);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_BSS_AWAKE_CNT"), v8);
          CFRelease(v9);
          v10 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 4));
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_BSS_SLEEP_CNT"), v10);
            CFRelease(v11);
            v12 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 8));
            if (v12)
            {
              v13 = v12;
              CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_HOST_SCAN_CNT"), v12);
              CFRelease(v13);
              v14 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 12));
              if (v14)
              {
                v15 = v14;
                CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_ROAM_SCAN_CNT"), v14);
                CFRelease(v15);
                v16 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 16));
                if (v16)
                {
                  v17 = v16;
                  CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_PNO_SCAN_CNT"), v16);
                  CFRelease(v17);
                  v18 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 20));
                  if (v18)
                  {
                    v19 = v18;
                    CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_EPNO_SCAN_CNT"), v18);
                    CFRelease(v19);
                    v20 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 24));
                    if (v20)
                    {
                      v21 = v20;
                      CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_CUR_BSS_AWAKE_CNT"), v20);
                      CFRelease(v21);
                      v22 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 28));
                      if (v22)
                      {
                        v23 = v22;
                        CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_CUR_BSS_SLEEP_CNT"), v22);
                        CFRelease(v23);
                        v24 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 32));
                        if (v24)
                        {
                          v25 = v24;
                          CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SCAN_DATA_AWAKE_CNT"), v24);
                          CFRelease(v25);
                          v26 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 36));
                          if (v26)
                          {
                            v27 = v26;
                            CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SCAN_DATA_SLEEP_CNT"), v26);
                            CFRelease(v27);
                            v28 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 40));
                            if (v28)
                            {
                              v29 = v28;
                              CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SPMI_MSG_AWAKE_CNT"), v28);
                              CFRelease(v29);
                              v30 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 44));
                              if (v30)
                              {
                                v31 = v30;
                                CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SPMI_MSG_SLEEP_CNT"), v30);
                                CFRelease(v31);
                                v32 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 48));
                                if (v32)
                                {
                                  v33 = v32;
                                  CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SPMI_MSG_DROP_RSSI_CNT"), v32);
                                  CFRelease(v33);
                                  v34 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 52));
                                  if (v34)
                                  {
                                    v35 = v34;
                                    CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SPMI_MSG_DROP_MAX_CNT"), v34);
                                    CFRelease(v35);
                                    v36 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 56));
                                    if (v36)
                                    {
                                      v37 = v36;
                                      CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_SPMI_MSG_DROP_FAIL_CNT"), v36);
                                      CFRelease(v37);
                                      v38 = CFNumberCreate(v7, kCFNumberSInt32Type, (const void *)(a2 + 60));
                                      if (v38)
                                      {
                                        v39 = v38;
                                        CFDictionaryAddValue(v6, CFSTR("SCAN_FWD_STATS_BSS_DROP_LOW_MEM_CNT"), v38);
                                        CFRelease(v39);
                                        (*(void (**)(_QWORD, uint64_t, uint64_t, __CFDictionary *, uint64_t, _QWORD))(a1 + 72))(0, a1, 240, v6, 8, *(_QWORD *)(a1 + 80));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        CFRelease(v6);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Invalid length in stat event", v40, 2u);
    }
  }
}

__CFDictionary *_createDictFromRoamState(unsigned __int8 *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFMutableArrayRef v14;
  CFMutableArrayRef v15;
  unint64_t v16;
  unsigned __int8 *v17;
  const CFDictionaryKeyCallBacks *v18;
  const CFDictionaryValueCallBacks *v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  char *v32;
  CFStringRef v33;
  CFStringRef v34;
  int valuePtr;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    valuePtr = (char)*a1;
    v4 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
    if (v4)
    {
      v5 = v4;
      CFDictionaryAddValue(Mutable, CFSTR("RSSI"), v4);
      CFRelease(v5);
      v6 = CFNumberCreate(v2, kCFNumberIntType, a1 + 4);
      if (v6)
      {
        v7 = v6;
        CFDictionaryAddValue(Mutable, CFSTR("ROAM_SCAN_REASON"), v6);
        CFRelease(v7);
        v8 = CFNumberCreate(v2, kCFNumberIntType, a1 + 12);
        if (v8)
        {
          v9 = v8;
          CFDictionaryAddValue(Mutable, CFSTR("ROAM_SCAN_AGE"), v8);
          CFRelease(v9);
          v10 = CFNumberCreate(v2, kCFNumberIntType, a1 + 8);
          if (v10)
          {
            v11 = v10;
            CFDictionaryAddValue(Mutable, CFSTR("ROAM_LAST_STATUS"), v10);
            CFRelease(v11);
            valuePtr = a1[3];
            v12 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
            if (v12)
            {
              v13 = v12;
              CFDictionaryAddValue(Mutable, CFSTR("ROAM_SCAN_COUNT"), v12);
              CFRelease(v13);
              if (a1[1])
              {
                v14 = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
                if (v14)
                {
                  v15 = v14;
                  if (a1[1])
                  {
                    v16 = 0;
                    v17 = a1 + 16;
                    v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
                    v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
                    while (1)
                    {
                      v20 = CFDictionaryCreateMutable(v2, 0, v18, v19);
                      if (!v20)
                        break;
                      v21 = v20;
                      v22 = CFNumberCreate(v2, kCFNumberIntType, v17 + 8);
                      if (!v22)
                        goto LABEL_22;
                      v23 = v22;
                      CFDictionaryAddValue(v21, CFSTR("AGE"), v22);
                      CFRelease(v23);
                      v24 = CFNumberCreate(v2, kCFNumberSInt16Type, v17 + 12);
                      if (!v24)
                        goto LABEL_22;
                      v25 = v24;
                      CFDictionaryAddValue(v21, CFSTR("QBSS_CHAN_UTIL"), v24);
                      CFRelease(v25);
                      valuePtr = v17[6];
                      v26 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
                      if (!v26)
                        goto LABEL_22;
                      v27 = v26;
                      CFDictionaryAddValue(v21, CFSTR("CHANNEL"), v26);
                      CFRelease(v27);
                      valuePtr = *((unsigned __int16 *)v17 + 8);
                      v28 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
                      if (!v28)
                        goto LABEL_22;
                      v29 = v28;
                      CFDictionaryAddValue(v21, CFSTR("CHANNEL_FLAGS"), v28);
                      CFRelease(v29);
                      valuePtr = (char)v17[7];
                      v30 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
                      if (!v30
                        || (v31 = v30,
                            CFDictionaryAddValue(v21, CFSTR("RSSI"), v30),
                            CFRelease(v31),
                            (v32 = ether_ntoa((const ether_addr *)v17)) == 0)
                        || (v33 = CFStringCreateWithCString(v2, v32, 0x8000100u)) == 0)
                      {
LABEL_22:
                        CFRelease(v15);
                        goto LABEL_23;
                      }
                      v34 = v33;
                      CFDictionaryAddValue(v21, CFSTR("BSSID"), v33);
                      CFRelease(v34);
                      CFArrayAppendValue(v15, v21);
                      CFRelease(v21);
                      ++v16;
                      v17 += 20;
                      if (v16 >= a1[1])
                        goto LABEL_20;
                    }
                  }
                  else
                  {
LABEL_20:
                    CFDictionaryAddValue(Mutable, CFSTR("ROAM_CACHE"), v15);
                  }
                  v21 = v15;
LABEL_23:
                  CFRelease(v21);
                }
              }
            }
          }
        }
      }
    }
  }
  return Mutable;
}

__CFDictionary *_createDictFromMloOpStats(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  CFNumberRef v4;
  const __CFNumber *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;

  if (!a1)
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return Mutable;
  v4 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)a1);
  if (!v4)
    return Mutable;
  v5 = v4;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_NUM_LINKS"), v4);
  v6 = CFNumberCreate(v2, kCFNumberSInt8Type, (const void *)(a1 + 1));
  if (!v6)
  {
    v10 = v5;
LABEL_14:
    CFRelease(v10);
    return Mutable;
  }
  v7 = v6;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_TRAF_SWITCH_ENABLED"), v6);
  v8 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 8));
  if (!v8)
  {
    v9 = 0;
    goto LABEL_19;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_ADD_CNT"), v8);
  v9 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 4));
  if (!v9)
  {
LABEL_19:
    v10 = 0;
    goto LABEL_9;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_DELETE_CNT"), v9);
  v10 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 12));
  if (v10)
    CFDictionaryAddValue(Mutable, CFSTR("MLO_PREF_BAND_CHANGE_CNT"), v10);
LABEL_9:
  CFRelease(v5);
  CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v10)
    goto LABEL_14;
  return Mutable;
}

__CFDictionary *_createDictFromMLOStats(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  CFNumberRef v7;
  const __CFString *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  __CFArray *v15;
  __CFArray *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  char *v22;
  CFStringRef v23;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  const __CFString *cf;
  char v32;
  char v33;
  __int16 v34;
  __int16 v35;
  __int16 valuePtr;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 1);
  valuePtr = *(_WORD *)(a1 + 1);
  v35 = v2 >> 14;
  v34 = (v2 >> 11) & 7;
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 == 128)
    LOBYTE(v3) = 0;
  v33 = v3;
  v4 = *(unsigned __int8 *)(a1 + 10);
  if (v4 == 128)
    LOBYTE(v4) = 0;
  v32 = v4;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return Mutable;
  v7 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)a1);
  if (!v7)
    return Mutable;
  v8 = (const __CFString *)v7;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_IS_PREF_LINK"), v7);
  v9 = CFNumberCreate(v5, kCFNumberSInt16Type, &valuePtr);
  if (!v9)
  {
    v23 = v8;
LABEL_49:
    CFRelease(v23);
    return Mutable;
  }
  v10 = v9;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_PRI_CHANNEL"), v9);
  v11 = CFNumberCreate(v5, kCFNumberSInt16Type, &v35);
  v30 = v10;
  cf = v8;
  v29 = v11;
  if (!v11
    || (CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_FREQ_BAND"), v11),
        (v12 = CFNumberCreate(v5, kCFNumberSInt16Type, &v34)) == 0))
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v16 = 0;
LABEL_52:
    v25 = 0;
    v18 = 0;
    goto LABEL_53;
  }
  v28 = v12;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_BW"), v12);
  v13 = CFNumberCreate(v5, kCFNumberSInt8Type, &v33);
  if (!v13)
  {
    v26 = 0;
    v27 = 0;
    v16 = 0;
    v25 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_56;
  }
  v14 = CFNumberCreate(v5, kCFNumberSInt8Type, &v32);
  v27 = v13;
  if (!v14)
  {
    v25 = 0;
    v26 = 0;
    v16 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v13 = 0;
    goto LABEL_57;
  }
  v15 = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
  v16 = v15;
  v26 = v14;
  if (!v15)
    goto LABEL_52;
  CFArrayAppendValue(v15, v13);
  CFArrayAppendValue(v16, v14);
  CFDictionaryAddValue(Mutable, CFSTR("PER_CORE_RSSI"), v16);
  v17 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 16));
  if (!v17)
    goto LABEL_52;
  v25 = v17;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_TX_CNT"), v17);
  v18 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 24));
  if (!v18)
  {
LABEL_53:
    v19 = 0;
    goto LABEL_54;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_RX_CNT"), v18);
  v19 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 32));
  if (!v19)
  {
LABEL_54:
    v20 = 0;
    goto LABEL_55;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_TX_RATE"), v19);
  v20 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 36));
  if (!v20)
  {
LABEL_55:
    v13 = 0;
    goto LABEL_56;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_RX_RATE"), v20);
  v13 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 20));
  if (!v13)
  {
LABEL_56:
    v14 = 0;
    goto LABEL_57;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_TX_FAIL"), v13);
  v14 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 28));
  if (!v14)
  {
LABEL_57:
    v21 = 0;
LABEL_58:
    v23 = 0;
    goto LABEL_24;
  }
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_TX_EX_RETRY"), v14);
  v21 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 12));
  if (!v21)
    goto LABEL_58;
  CFDictionaryAddValue(Mutable, CFSTR("MLO_LINK_IDLE_TIME"), v21);
  v22 = ether_ntoa((const ether_addr *)(a1 + 3));
  if (!v22)
    goto LABEL_58;
  v23 = CFStringCreateWithCString(v5, v22, 0x8000100u);
  if (v23)
    CFDictionaryAddValue(Mutable, CFSTR("BSSID"), v23);
LABEL_24:
  CFRelease(cf);
  CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  if (v16)
    CFRelease(v16);
  if (v25)
    CFRelease(v25);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v21)
    CFRelease(v21);
  if (v23)
    goto LABEL_49;
  return Mutable;
}

IONotificationPort *_performEventMonitoringHaltIOUC(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  IONotificationPort *result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  _BYTE v21[10];
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v2 = *(_QWORD *)(a1 + 1824);
    v3 = *(_QWORD *)(a1 + 1816) != 0;
    v4 = *(_QWORD *)(a1 + 1920) != 0;
    v16 = 136315906;
    v17 = "_performEventMonitoringHaltIOUC";
    v18 = 2048;
    v19 = v2;
    v20 = 1024;
    *(_DWORD *)v21 = v3;
    *(_WORD *)&v21[4] = 1024;
    *(_DWORD *)&v21[6] = v4;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Enter, ioucPort[%p], dispatch[%u] runloop[%u]\n", (uint8_t *)&v16, 0x22u);
  }
  result = *(IONotificationPort **)(a1 + 1824);
  if (result)
  {
    IONotificationPortDestroy(result);
    *(_QWORD *)(a1 + 1824) = 0;
    *(_BYTE *)(a1 + 1928) = 0;
    if (*(_QWORD *)(a1 + 1872))
    {
      v6 = MEMORY[0x20BCF65B0](*(unsigned int *)(a1 + 1856), 1, *(unsigned int *)(a1 + 1860));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 1872);
        v8 = *(_QWORD *)(a1 + 1880);
        v9 = *(_DWORD *)(a1 + 1856);
        v10 = *(_DWORD *)(a1 + 1860);
        v16 = 136316674;
        v17 = "_destroyMemoryMappings";
        v18 = 2080;
        v19 = a1 + 4;
        v20 = 2048;
        *(_QWORD *)v21 = v7;
        *(_WORD *)&v21[8] = 2048;
        v22 = v8;
        v23 = 1024;
        v24 = v9;
        v25 = 1024;
        v26 = v10;
        v27 = 1024;
        v28 = v6;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %s unmapped buffer info: ringBuffer: ringBuffer[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x] retVal[0x%08x]\n", (uint8_t *)&v16, 0x3Cu);
      }
      *(_OWORD *)(a1 + 1856) = 0u;
      *(_OWORD *)(a1 + 1872) = 0u;
    }
    if (*(_QWORD *)(a1 + 1904))
    {
      v11 = MEMORY[0x20BCF65B0](*(unsigned int *)(a1 + 1888), 2, *(unsigned int *)(a1 + 1892));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 1904);
        v13 = *(_QWORD *)(a1 + 1912);
        v14 = *(_DWORD *)(a1 + 1888);
        v15 = *(_DWORD *)(a1 + 1892);
        v16 = 136316674;
        v17 = "_destroyMemoryMappings";
        v18 = 2080;
        v19 = a1 + 4;
        v20 = 2048;
        *(_QWORD *)v21 = v12;
        *(_WORD *)&v21[8] = 2048;
        v22 = v13;
        v23 = 1024;
        v24 = v14;
        v25 = 1024;
        v26 = v15;
        v27 = 1024;
        v28 = v11;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %s unmapped buffer info: ringState: ringState[0x%llx] ringSize[0x%llx], connect[0x%x] task[0x%x] retVal[0x%08x]\n", (uint8_t *)&v16, 0x3Cu);
      }
      *(_OWORD *)(a1 + 1888) = 0u;
      *(_OWORD *)(a1 + 1904) = 0u;
    }
    result = (IONotificationPort *)IOConnectCallStructMethod(*(_DWORD *)(a1 + 1804), 4u, 0, 0, 0, 0);
    *(_QWORD *)(a1 + 1832) = 0;
    *(_QWORD *)(a1 + 1848) = 0;
    *(_QWORD *)(a1 + 1840) = 0;
  }
  return result;
}

void ___checkEntitlements_block_invoke()
{
  __SecTask *v0;
  __int128 v1;
  pid_t v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFTypeID v5;
  int v6;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  int v11;
  CFTypeID v12;
  NSObject *v13;
  const char *v14;
  int v15;
  _OWORD *v16;
  _OWORD buffer[2];
  uint64_t v18;
  CFRange v19;
  CFRange v20;

  v18 = *MEMORY[0x24BDAC8D0];
  v0 = SecTaskCreateFromSelf(0);
  *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  buffer[0] = v1;
  buffer[1] = v1;
  v2 = getpid();
  proc_name(v2, buffer, 0x20u);
  if (v0)
  {
    v3 = (const __CFArray *)SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.private.driverkit.driver-access"), 0);
    if (v3)
    {
      v4 = v3;
      v5 = CFGetTypeID(v3);
      if (v5 == CFArrayGetTypeID())
      {
        v19.length = CFArrayGetCount(v4);
        v19.location = 0;
        v6 = CFArrayContainsValue(v4, v19, CFSTR("com.apple.private.wifi.driverkit"));
      }
      else
      {
        v7 = CFGetTypeID(v4);
        v6 = v7 == CFStringGetTypeID()
          && CFStringCompare((CFStringRef)v4, CFSTR("com.apple.private.wifi.driverkit"), 0) == kCFCompareEqualTo;
      }
      CFRelease(v4);
    }
    else
    {
      v6 = 0;
    }
    v8 = (const __CFArray *)SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.developer.driverkit.userclient-access"), 0);
    if (v8)
    {
      v9 = v8;
      v10 = CFGetTypeID(v8);
      if (v10 == CFArrayGetTypeID())
      {
        v20.length = CFArrayGetCount(v9);
        v20.location = 0;
        v11 = CFArrayContainsValue(v9, v20, CFSTR("com.apple.DriverKit-AppleBCMWLAN"));
      }
      else
      {
        v12 = CFGetTypeID(v9);
        v11 = v12 == CFStringGetTypeID()
           && CFStringCompare((CFStringRef)v9, CFSTR("com.apple.DriverKit-AppleBCMWLAN"), 0) == kCFCompareEqualTo;
      }
      CFRelease(v9);
    }
    else
    {
      v11 = 0;
    }
    if (v6 | v11)
    {
      if (!v6 || !v11)
      {
        if (v6 || !v11 || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
          goto LABEL_29;
        v15 = 136446210;
        v16 = buffer;
        v13 = MEMORY[0x24BDACB70];
        v14 = "Process %{public}s has a deprecated entitlement for Wi-Fi user client access, please replace: \"<key>com.a"
              "pple.developer.driverkit.userclient-access</key> <string>com.apple.DriverKit-AppleBCMWLAN</string>\" with:"
              " \"<key>com.apple.private.driverkit.driver-access</key> <string>com.apple.private.wifi.driverkit</string>\"";
        goto LABEL_25;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      {
        v15 = 136446210;
        v16 = buffer;
        v13 = MEMORY[0x24BDACB70];
        v14 = "Process %{public}s has a deprecated entitlement for Wi-Fi user client access: <key>com.apple.developer.dri"
              "verkit.userclient-access</key> <string>com.apple.DriverKit-AppleBCMWLAN</string>";
LABEL_25:
        _os_log_fault_impl(&dword_20647D000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)&v15, 0xCu);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
    {
      v15 = 136446210;
      v16 = buffer;
      v13 = MEMORY[0x24BDACB70];
      v14 = "Process %{public}s is missing entitlement required for Wi-Fi user-client access: <key>com.apple.private.driv"
            "erkit.driver-access</key> <string>com.apple.private.wifi.driverkit</string>";
      goto LABEL_25;
    }
LABEL_29:
    CFRelease(v0);
  }
}

void _Apple80211IOUCResume()
{
  uint64_t v0;
  int v1;
  _BOOL4 v2;
  NSObject *v3;
  const char *v4;
  uint32_t v5;
  uint64_t v6;
  __CFString *v7;
  __CFString *v8;
  io_service_t Service;
  io_object_t v10;
  kern_return_t v11;
  kern_return_t v12;
  _BOOL4 v13;
  kern_return_t v14;
  int inited;
  kern_return_t v16;
  NSObject *v17;
  const char *v18;
  kern_return_t v19;
  int v20;
  size_t outputStructCnt;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD outputStruct[16];
  char v26;
  _DWORD inputStruct[3852];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  __CFString *v31;
  __int16 v32;
  _BYTE v33[10];
  int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v0 = MEMORY[0x24BDAC7A8]();
  v37 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(v0 + 1992) = 0;
  v1 = *(_DWORD *)(v0 + 1804);
  v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (v2)
    {
      *(_DWORD *)buf = 136315394;
      v29 = "_Apple80211IOUCResume";
      v30 = 2048;
      v31 = (__CFString *)v0;
      v3 = MEMORY[0x24BDACB70];
      v4 = "%s: IOUC already opened for opaque:%p \n";
      v5 = 22;
LABEL_4:
      _os_log_impl(&dword_20647D000, v3, OS_LOG_TYPE_DEFAULT, v4, buf, v5);
      return;
    }
    return;
  }
  if (v2)
  {
    v6 = *(_QWORD *)(v0 + 1824);
    *(_DWORD *)buf = 136316162;
    v29 = "_Apple80211IOUCResume";
    v30 = 2080;
    v31 = (__CFString *)(v0 + 4);
    v32 = 2048;
    *(_WORD *)&v33[8] = 1024;
    v34 = 0;
    v35 = 2048;
    *(_QWORD *)v33 = v0;
    v36 = v6;
    _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: ifname:%s opaque:%p, connect[%u] port[%p]\n", buf, 0x30u);
  }
  v7 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)(v0 + 4), 0x8000100u);
  if (v7)
  {
    v8 = v7;
    Service = _Apple80211FindService(v7);
    if (!Service)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v29 = "_Apple80211IOUCResume";
        v30 = 2112;
        v31 = v8;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %@ Not able to find DK Service! \n", buf, 0x16u);
      }
      goto LABEL_18;
    }
    v10 = Service;
    v11 = IOServiceOpen(Service, *MEMORY[0x24BDAEC58], 0, (io_connect_t *)(v0 + 1804));
    if (v11)
    {
      v16 = v11;
      if (v11 == -536870174 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315906;
        v29 = "_Apple80211IOUCResume";
        v30 = 2112;
        v31 = v8;
        v32 = 1024;
        *(_DWORD *)v33 = -536870174;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = -536870174;
        _os_log_fault_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "%s: %@ IOServiceOpen failed with %d/0x%08x", buf, 0x22u);
      }
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      *(_DWORD *)buf = 136315650;
      v29 = "_Apple80211IOUCResume";
      v30 = 2112;
      v31 = v8;
      v32 = 1024;
      *(_DWORD *)v33 = v16;
      v17 = MEMORY[0x24BDACB70];
      v18 = "%s: %@ IOServiceOpen failed with %d";
      goto LABEL_35;
    }
    bzero(inputStruct, 0x3C30uLL);
    inputStruct[0] = -1071093303;
    __strlcpy_chk();
    inputStruct[3846] = 43;
    memset(outputStruct, 0, sizeof(outputStruct));
    v26 = 0;
    outputStructCnt = 256;
    v12 = IOConnectCallStructMethod(*(_DWORD *)(v0 + 1804), 0, inputStruct, 0x3C30uLL, outputStruct, &outputStructCnt);
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136315650;
        v29 = "_Apple80211IOUCResume";
        v30 = 2112;
        v31 = v8;
        v32 = 1024;
        *(_DWORD *)v33 = v12;
        v17 = MEMORY[0x24BDACB70];
        v18 = "%s: %@ Driver version query failed with %d";
LABEL_35:
        _os_log_impl(&dword_20647D000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 0x1Cu);
      }
    }
    else
    {
      if (v13)
      {
        *(_DWORD *)buf = 136315650;
        v29 = "_Apple80211IOUCResume";
        v30 = 2112;
        v31 = v8;
        v32 = 2080;
        *(_QWORD *)v33 = outputStruct;
        _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: %@ Sanity test passed. Version - %s", buf, 0x20u);
      }
      outputStructCnt = 1;
      v14 = IOConnectCallStructMethod(*(_DWORD *)(v0 + 1804), 1u, 0, 0, (void *)(v0 + 1801), &outputStructCnt);
      if (!v14)
      {
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
        *(_QWORD *)(v0 + 96) = 0;
        *(_DWORD *)(v0 + 103) = 0;
        *(_QWORD *)(v0 + 88) = 0;
        __strlcpy_chk();
        v24 = v0 + 88;
        LODWORD(v23) = 12;
        DWORD2(v23) = 19;
        if (Apple80211RawGet(v0, (uint64_t)&v22))
          goto LABEL_17;
        if (!*(_QWORD *)(v0 + 72))
          goto LABEL_17;
        inited = Apple80211EventMonitoringInitIOUC(v0, *(NSObject **)(v0 + 1816), *(__CFRunLoop **)(v0 + 1920));
        if (!inited)
          goto LABEL_17;
        v20 = inited;
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_17;
        *(_DWORD *)buf = 136315650;
        v29 = "_Apple80211IOUCResume";
        v30 = 2112;
        v31 = v8;
        v32 = 1024;
        *(_DWORD *)v33 = v20;
        v17 = MEMORY[0x24BDACB70];
        v18 = "%s: %@ IOUC event pipe creation failed! %d";
        goto LABEL_35;
      }
      v19 = v14;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v29 = "_Apple80211IOUCResume";
        v30 = 2112;
        v31 = v8;
        v32 = 1024;
        *(_DWORD *)v33 = v19;
        v17 = MEMORY[0x24BDACB70];
        v18 = "%s: %@ useIOUCWhenPossible query failed with %d";
        goto LABEL_35;
      }
    }
LABEL_17:
    IOObjectRelease(v10);
LABEL_18:
    CFRelease(v8);
    return;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v29 = "_Apple80211IOUCResume";
    v3 = MEMORY[0x24BDACB70];
    v4 = "%s: ifNameRef Null \n";
    v5 = 12;
    goto LABEL_4;
  }
}

uint64_t _Apple80211IOUCHalt(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  IONotificationPort *v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = result;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v2 = *(_DWORD *)(v1 + 1804);
      v3 = *(_QWORD *)(v1 + 1824);
      v5 = 136315906;
      v6 = "_Apple80211IOUCHalt";
      v7 = 2048;
      v8 = v1;
      v9 = 1024;
      v10 = v2;
      v11 = 2048;
      v12 = v3;
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: opaque:%p, connect[%u] port[%p]\n", (uint8_t *)&v5, 0x26u);
    }
    v4 = *(IONotificationPort **)(v1 + 1824);
    if (v4)
    {
      IONotificationPortDestroy(v4);
      *(_QWORD *)(v1 + 1824) = 0;
    }
    else if (!*(_QWORD *)(v1 + 64) && !*(_QWORD *)(v1 + 56))
    {
      goto LABEL_9;
    }
    *(_QWORD *)(v1 + 1848) = 0;
    *(_OWORD *)(v1 + 1832) = 0u;
LABEL_9:
    result = *(unsigned int *)(v1 + 1804);
    if ((_DWORD)result)
    {
      result = IOServiceClose(result);
      *(_DWORD *)(v1 + 1804) = 0;
    }
  }
  return result;
}

uint64_t _getRoamProfile(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  unsigned int v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  int v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  _OWORD v14[8];
  _OWORD v15[8];
  _OWORD v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v4 = *(unsigned __int8 *)(a1 + 99);
  *(_DWORD *)(a2 + 24) = 384;
  *(_QWORD *)(a2 + 32) = v14;
  if (Apple80211RawGet(a1, a2))
    return *__error();
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294963395;
  v7 = Mutable;
  if (!HIDWORD(v14[0]))
    goto LABEL_13;
  v8 = (v4 >> 6) & 1;
  _getRoamProfilePerBand(v8, v14, Mutable);
  CFDictionarySetValue(a3, CFSTR("APPLE80211KEY_ROAM_PROF_2G"), v7);
  CFRelease(v7);
  v9 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v9)
    return 4294963395;
  v7 = v9;
  if (!HIDWORD(v15[0]))
  {
LABEL_13:
    v12 = v7;
    goto LABEL_9;
  }
  _getRoamProfilePerBand(v8, v15, v9);
  CFDictionarySetValue(a3, CFSTR("APPLE80211KEY_ROAM_PROF_5G"), v7);
  CFRelease(v7);
  if (HIDWORD(v16[0]))
  {
    v10 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v10)
    {
      v11 = v10;
      _getRoamProfilePerBand(v8, v16, v10);
      CFDictionarySetValue(a3, CFSTR("APPLE80211KEY_ROAM_PROF_6G"), v11);
      v12 = v11;
LABEL_9:
      CFRelease(v12);
      return 0;
    }
    return 4294963395;
  }
  return 0;
}

uint64_t _getUCMProfile(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  const __CFAllocator *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v24;
  uint64_t v25;
  unint64_t v26;
  CFMutableDictionaryRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  const __CFString *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  int valuePtr;
  void *value;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v40 = 0u;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(theDict, CFSTR("UCM_PROFILE_INDEX"), (const void **)&value))
    return 4294963396;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
  BYTE4(v40) = valuePtr;
  if (valuePtr > 9u)
    return 4294963396;
  *(_DWORD *)(a2 + 24) = 56;
  *(_QWORD *)(a2 + 32) = &v40;
  if (Apple80211IOCTLGetWrapper())
    return *__error();
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt16Type, &v40);
  CFDictionarySetValue(theDict, CFSTR("UCM_VERSION"), v6);
  CFRelease(v6);
  v7 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 4);
  CFDictionarySetValue(theDict, CFSTR("UCM_PROFILE_INDEX"), v7);
  CFRelease(v7);
  v8 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 5);
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_STRONG_WL_BT"), v8);
  CFRelease(v8);
  v9 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 6);
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_WEAK_WL"), v9);
  CFRelease(v9);
  v10 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 7);
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_WEAK_BT"), v10);
  CFRelease(v10);
  v11 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)&v40 + 8);
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_WEAK_WL_BT"), v11);
  CFRelease(v11);
  v12 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 9));
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"), v12);
  CFRelease(v12);
  v13 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xA));
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"), v13);
  CFRelease(v13);
  v14 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xB));
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"), v14);
  CFRelease(v14);
  v15 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xC));
  CFDictionarySetValue(theDict, CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"), v15);
  CFRelease(v15);
  v16 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xD));
  CFDictionarySetValue(theDict, CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"), v16);
  CFRelease(v16);
  v17 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xE));
  CFDictionarySetValue(theDict, CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"), v17);
  CFRelease(v17);
  v18 = CFNumberCreate(v5, kCFNumberSInt8Type, (const void *)((unint64_t)&v40 | 0xF));
  CFDictionarySetValue(theDict, CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"), v18);
  CFRelease(v18);
  v19 = CFNumberCreate(v5, kCFNumberSInt8Type, v41);
  CFDictionarySetValue(theDict, CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"), v19);
  CFRelease(v19);
  v20 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + 1);
  CFDictionarySetValue(theDict, CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"), v20);
  CFRelease(v20);
  v21 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + 2);
  CFDictionarySetValue(theDict, CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"), v21);
  CFRelease(v21);
  if ((v40 & 0xFFFE) == 2)
  {
    v22 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + 3);
    CFDictionarySetValue(theDict, CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"), v22);
    CFRelease(v22);
  }
  if (!BYTE3(v40))
    return 0;
  Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294963395;
  v24 = Mutable;
  if (!BYTE3(v40))
  {
LABEL_18:
    CFDictionarySetValue(theDict, CFSTR("UCM_CHAIN_ATTR"), v24);
    CFRelease(v24);
    return 0;
  }
  v25 = 0;
  v26 = 0;
  while (1)
  {
    v27 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!v27)
      break;
    v28 = v27;
    if ((unsigned __int16)v40 - 1 > 1)
    {
      if ((unsigned __int16)v40 != 3)
        goto LABEL_16;
      v32 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 5);
      CFDictionarySetValue(v28, CFSTR("UCM_DESENSE_STRONG_RSSI"), v32);
      CFRelease(v32);
      v29 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 6);
      v30 = v28;
      v31 = CFSTR("UCM_DESENSE_WEAK_RSSI");
    }
    else
    {
      v29 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 4);
      v30 = v28;
      v31 = CFSTR("UCM_DESENSE_LEVEL");
    }
    CFDictionarySetValue(v30, v31, v29);
    CFRelease(v29);
LABEL_16:
    v33 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 7);
    CFDictionarySetValue(v28, CFSTR("UCM_ACK_PWR_STRONG_RSSI"), v33);
    CFRelease(v33);
    v34 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 8);
    CFDictionarySetValue(v28, CFSTR("UCM_ACK_PWR_WEAK_RSSI"), v34);
    CFRelease(v34);
    v35 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 9);
    CFDictionarySetValue(v28, CFSTR("UCM_TX_PWR_STRONG_RSSI"), v35);
    CFRelease(v35);
    v36 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)v41 + v25 + 10);
    CFDictionarySetValue(v28, CFSTR("UCM_TX_PWR_WEAK_RSSI"), v36);
    CFRelease(v36);
    CFArrayAppendValue(v24, v28);
    CFRelease(v28);
    if (v26 <= 3)
    {
      ++v26;
      v25 += 7;
      if (v26 < BYTE3(v40))
        continue;
    }
    goto LABEL_18;
  }
  CFRelease(v24);
  return 4294963395;
}

uint64_t _get2GChainDisable(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = 1;
  *(_DWORD *)(a2 + 24) = 8;
  *(_QWORD *)(a2 + 32) = v8;
  if (Apple80211IOCTLGetWrapper())
    return *__error();
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, (char *)v8 + 4);
  CFDictionarySetValue(a3, CFSTR("BTCOEX_2G_CHAIN_DISABLE"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)v8 + 5);
  CFDictionarySetValue(a3, CFSTR("BTCOEX_2G_CHAIN_DISABLE_REASSOC"), v6);
  CFRelease(v6);
  return 0;
}

uint64_t _storeTrapInfoDataInDict(__CFDictionary *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  unsigned int v6;
  unsigned __int8 *v7;
  const CFArrayCallBacks *v8;
  unint64_t v9;
  __int16 v10;
  __CFArray *Mutable;
  CFNumberRef v13;
  unint64_t i;
  CFNumberRef v15;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (const void *)(a2 + 8));
  CFDictionarySetValue(a1, CFSTR("TRAP_SEQUENECE_NUM"), v5);
  CFRelease(v5);
  v6 = *(unsigned __int16 *)(a2 + 14);
  if (v6 <= 0x200)
  {
    if (v6 < 2)
      return 0;
    v7 = (unsigned __int8 *)(a2 + 16);
    v8 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    while (1)
    {
      v9 = v7[1];
      v10 = v9 + 2;
      if (v9 + 2 > (unsigned __int16)v6 || (v9 & 3) != 0)
        break;
      Mutable = CFArrayCreateMutable(v4, 0, v8);
      v13 = CFNumberCreate(v4, kCFNumberSInt8Type, v7);
      v7 += 2;
      for (i = v9 >> 2; (_DWORD)i; LODWORD(i) = i - 1)
      {
        v15 = CFNumberCreate(v4, kCFNumberSInt8Type, v7);
        CFArrayAppendValue(Mutable, v15);
        CFRelease(v15);
        v7 += 4;
      }
      CFDictionarySetValue(a1, v13, Mutable);
      CFRelease(Mutable);
      CFRelease(v13);
      LOWORD(v6) = v6 - v10;
      if ((unsigned __int16)v6 <= 1u)
        return 0;
    }
  }
  return 4294963396;
}

uint64_t _setLQMConfigIntoDict(uint64_t a1, __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  uint64_t v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFMutableArrayRef v20;
  uint64_t v21;
  uint64_t v22;
  CFNumberRef v23;
  CFNumberRef v24;
  uint64_t v25;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, (const void *)(a1 + 4));
  if (!v5)
    goto LABEL_18;
  v6 = v5;
  CFDictionarySetValue(a2, CFSTR("LQM_UPDATE_INTERVAL"), v5);
  CFRelease(v6);
  v7 = CFNumberCreate(v4, kCFNumberIntType, (const void *)(a1 + 8));
  if (!v7)
    goto LABEL_18;
  v8 = v7;
  CFDictionarySetValue(a2, CFSTR("LQM_RSSI_UPDATE_INTERVAL"), v7);
  CFRelease(v8);
  v9 = CFNumberCreate(v4, kCFNumberIntType, (const void *)(a1 + 12));
  if (!v9)
    goto LABEL_18;
  v10 = v9;
  CFDictionarySetValue(a2, CFSTR("LQM_CHAN_QUAL_UPDATE_INTERVAL"), v9);
  CFRelease(v10);
  v11 = CFNumberCreate(v4, kCFNumberSInt8Type, (const void *)(a1 + 16));
  if (!v11)
    goto LABEL_18;
  v12 = v11;
  CFDictionarySetValue(a2, CFSTR("LQM_GOOD_RSSI_THRESH"), v11);
  CFRelease(v12);
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
  if (Mutable)
  {
    v14 = Mutable;
    v15 = 0;
    while (1)
    {
      v16 = CFNumberCreate(v4, kCFNumberSInt8Type, (const void *)(a1 + 17 + v15));
      if (!v16)
        break;
      v17 = v16;
      CFArrayAppendValue(v14, v16);
      CFRelease(v17);
      if (++v15 == 7)
      {
        CFDictionarySetValue(a2, CFSTR("LQM_RSSI_LEVELS"), v14);
        CFRelease(v14);
        v18 = CFNumberCreate(v4, kCFNumberCharType, (const void *)(a1 + 24));
        if (v18)
        {
          v19 = v18;
          CFDictionarySetValue(a2, CFSTR("LQM_CCA_HYSTERISIS"), v18);
          CFRelease(v19);
          v20 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
          if (!v20)
            goto LABEL_18;
          v14 = v20;
          v21 = 0;
          v22 = a1 + 25;
          while (1)
          {
            v23 = CFNumberCreate(v4, kCFNumberCharType, (const void *)(v22 + v21));
            if (!v23)
              break;
            v24 = v23;
            CFArrayAppendValue(v14, v23);
            CFRelease(v24);
            if (++v21 == 8)
            {
              CFDictionarySetValue(a2, CFSTR("LQM_CCA_BOUNDS"), v14);
              v25 = 0;
              goto LABEL_15;
            }
          }
        }
        break;
      }
    }
    CFRelease(a2);
    v25 = 4294963395;
LABEL_15:
    a2 = v14;
  }
  else
  {
LABEL_18:
    v25 = 4294963395;
  }
  CFRelease(a2);
  return v25;
}

uint64_t _storeTrapCrashTracerMiniDumpinDict(__CFDictionary *a1, uint64_t a2)
{
  unsigned int *v3;
  const __CFAllocator *v4;
  unint64_t v5;
  CFIndex v6;
  CFDataRef v7;
  CFNumberRef v8;
  uint64_t v9;

  v3 = (unsigned int *)(a2 + 4);
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = 102400;
  while (1)
  {
    v6 = v3[1];
    if (!(_DWORD)v6)
      return 0;
    if (v5 < v6 + 8)
      return 4294963396;
    if (*v3 == 1)
    {
      if (v6 > 0x18028)
        return 4294963396;
      goto LABEL_9;
    }
    if (*v3 || v6 > 0xFC8)
      return 4294963396;
LABEL_9:
    v7 = CFDataCreate(v4, (const UInt8 *)v3 + 8, v6);
    v8 = CFNumberCreate(v4, kCFNumberSInt32Type, v3);
    CFDictionarySetValue(a1, v8, v7);
    CFRelease(v8);
    CFRelease(v7);
    v9 = v3[1];
    v3 = (unsigned int *)((char *)v3 + v9 + 8);
    v5 = (v5 - v9 - 8);
    if (v5 <= 8)
      return 0;
  }
}

void _getRoamProfilePerBand(int a1, _DWORD *a2, __CFDictionary *a3)
{
  const __CFAllocator *v6;
  int *v7;
  CFNumberRef v8;
  _DWORD *v9;
  CFNumberRef v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  unint64_t v13;
  char *v14;
  CFMutableDictionaryRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  int v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  __CFDictionary *theDict;

  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = a2 + 1;
  v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, a2 + 1);
  CFDictionarySetValue(a3, CFSTR("ROAM_PROF_BAND"), v8);
  CFRelease(v8);
  v9 = a2 + 2;
  v10 = CFNumberCreate(v6, kCFNumberSInt32Type, a2 + 2);
  CFDictionarySetValue(a3, CFSTR("ROAM_PROF_NUM"), v10);
  CFRelease(v10);
  if (a2[2])
  {
    Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v12 = Mutable;
      theDict = a3;
      if (*v9)
      {
        v13 = 0;
        v14 = (char *)(a2 + 10);
        while (1)
        {
          v15 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!v15)
            break;
          v16 = v15;
          v17 = CFNumberCreate(v6, kCFNumberSInt32Type, v14 - 24);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_ROAM_FLAGS"), v17);
          CFRelease(v17);
          v18 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 20);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_ROAM_TRIGGER"), v18);
          CFRelease(v18);
          v19 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 19);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_LOWER"), v19);
          CFRelease(v19);
          v20 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 18);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_ROAM_DELTA"), v20);
          CFRelease(v20);
          v21 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 15);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_2G"), v21);
          CFRelease(v21);
          v22 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 14);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_2G"), v22);
          CFRelease(v22);
          v23 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 13);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_5G"), v23);
          CFRelease(v23);
          v24 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 12);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_5G"), v24);
          CFRelease(v24);
          if (a1)
          {
            v25 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 11);
            CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_6G"), v25);
            CFRelease(v25);
            v26 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 10);
            CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_6G"), v26);
            CFRelease(v26);
          }
          v27 = *v7;
          if (*v7 == 2)
          {
            if (*(v14 - 17) != 127)
            {
              v28 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 17);
              CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_2G"), v28);
              CFRelease(v28);
            }
            if (*(v14 - 16) != 127)
            {
              v29 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 16);
              CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_2G"), v29);
              CFRelease(v29);
            }
            v27 = *v7;
          }
          if (v27 == 8 || v27 == 4)
          {
            if (*(v14 - 17) != 127)
            {
              v30 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 17);
              CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_5G"), v30);
              CFRelease(v30);
            }
            if (*(v14 - 16) != 127)
            {
              v31 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 16);
              CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_5G"), v31);
              CFRelease(v31);
            }
          }
          v32 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 17);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH"), v32);
          CFRelease(v32);
          v33 = CFNumberCreate(v6, kCFNumberSInt8Type, v14 - 16);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA"), v33);
          CFRelease(v33);
          v34 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 8);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_NFSCAN"), v34);
          CFRelease(v34);
          v35 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 6);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_FULLSCAN_PERIOD"), v35);
          CFRelease(v35);
          v36 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 4);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_INIT_SCAN_PERIOD"), v36);
          CFRelease(v36);
          v37 = CFNumberCreate(v6, kCFNumberSInt16Type, v14 - 2);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_BACKOFF_MULTIPLIER"), v37);
          CFRelease(v37);
          v38 = CFNumberCreate(v6, kCFNumberSInt16Type, v14);
          CFDictionarySetValue(v16, CFSTR("ROAM_PROF_MAX_SCAN_PERIOD"), v38);
          CFRelease(v38);
          CFArrayAppendValue(v12, v16);
          CFRelease(v16);
          if (v13 <= 2)
          {
            ++v13;
            v14 += 28;
            if (v13 < *v9)
              continue;
          }
          goto LABEL_22;
        }
      }
      else
      {
LABEL_22:
        CFDictionarySetValue(theDict, CFSTR("ROAM_PROF"), v12);
      }
      CFRelease(v12);
    }
  }
}

void _stopHostAPD(uint64_t a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  CFNumberRef v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  _xpc_connection_s *v9;
  dispatch_time_t v10;
  _xpc_connection_s *v11;
  _QWORD v12[5];
  int valuePtr;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 2056))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v15 = "_stopHostAPD";
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s Trying to terminate hostapd process\n", buf, 0xCu);
    }
    v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v4 = Mutable;
      valuePtr = 1;
      v5 = CFNumberCreate(v2, kCFNumberSInt8Type, &valuePtr);
      CFDictionarySetValue(v4, CFSTR("Terminate"), v5);
      CFRelease(v5);
      v6 = _CFXPCCreateXPCObjectFromCFObject();
      if (v6)
      {
        v7 = (void *)v6;
        v8 = dispatch_semaphore_create(0);
        v9 = *(_xpc_connection_s **)(a1 + 2056);
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 0x40000000;
        v12[2] = ___stopHostAPD_block_invoke;
        v12[3] = &__block_descriptor_tmp_2650;
        v12[4] = v8;
        xpc_connection_send_message_with_reply(v9, v7, 0, v12);
        v10 = dispatch_time(0, 1000000000);
        if (dispatch_semaphore_wait(v8, v10) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v15 = "_stopHostAPD";
          _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s Timeout waiting to terminate hostapd process\n", buf, 0xCu);
        }
        CFRelease(v4);
        xpc_release(v7);
        if (v8)
          dispatch_release(v8);
      }
      else
      {
        CFRelease(v4);
      }
    }
    v11 = *(_xpc_connection_s **)(a1 + 2056);
    if (v11)
    {
      xpc_connection_cancel(v11);
      xpc_release(*(xpc_object_t *)(a1 + 2056));
      *(_QWORD *)(a1 + 2056) = 0;
    }
  }
}

uint64_t _getBGScanData(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v13;
  const __CFString *v14;
  const __CFString *v15;
  CFIndex Length;
  CFIndex v17;
  char *v18;
  uint64_t v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  BOOL v22;
  const __CFString *v23;
  ether_addr *v24;
  int v25;
  char *v26;
  const __CFNumber *v27;
  const __CFNumber *BoolRef;
  const __CFNumber *v29;
  const __CFNumber *v30;
  char v31;
  int v32;
  int v33;
  const __CFArray *v34;
  const __CFArray *v35;
  CFIndex v36;
  uint64_t v37;
  CFIndex v38;
  uint64_t v39;
  const __CFDictionary *v40;
  const __CFDictionary *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  int v44;
  int v45;
  char v46;
  unint64_t v47;
  int v48;
  char *v49;
  NSObject *v51;
  const char *v52;
  const __CFNumber *v53;
  uint64_t result;
  const __CFDictionary *v55;
  const void *cf2;
  CFIndex usedBufLen;
  CFBooleanRef v59;
  CFBooleanRef BOOLean;
  int valuePtr;
  void *value;
  char buffer[24];
  uint64_t v64;
  CFRange v65;

  v64 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294963396;
  bzero(a2, 0x2030uLL);
  *(_DWORD *)a2 = 1;
  v5 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SCAN_SSID_LIST"));
  v55 = a1;
  if (v5)
  {
    v6 = v5;
    memset(buffer, 170, 18);
    value = 0;
    valuePtr = 0;
    v59 = 0;
    BOOLean = 0;
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      cf2 = (const void *)*MEMORY[0x24BDBD270];
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
        if (!ValueAtIndex)
          return 4294963396;
        v13 = ValueAtIndex;
        v14 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SSID_STR"));
        if (!v14 || (v15 = v14, CFEqual(v14, &stru_24BF1D4F8)) || v11 > 15)
        {
          if (v10 <= 359)
          {
            v23 = (const __CFString *)CFDictionaryGetValue(v13, CFSTR("BSSID"));
            if (!v23)
              return 4294963396;
            if (!CFStringGetCString(v23, buffer, 18, 0x8000100u))
              return 4294963396;
            v24 = ether_aton(buffer);
            if (!v24)
              return 4294963396;
            v25 = *(_DWORD *)v24->octet;
            v26 = &a2[8 * v10 - v10];
            *((_WORD *)v26 + 456) = *(_WORD *)&v24->octet[4];
            *((_DWORD *)v26 + 227) = v25;
            v27 = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("ENTRY_NETWORK"));
            BoolRef = makeBoolRef(v27);
            v29 = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("EXIT_NETWORK"));
            v30 = makeBoolRef(v29);
            if (!BoolRef)
              goto LABEL_91;
            if (CFEqual(BoolRef, cf2) && v30 && CFEqual(v30, cf2))
            {
              v31 = 3;
LABEL_40:
              a2[8 * v10 - v10 + 914] |= v31;
              ++v10;
              goto LABEL_41;
            }
            if (!CFEqual(BoolRef, cf2))
            {
LABEL_91:
              if (v30 && CFEqual(v30, cf2))
              {
                v31 = 2;
                goto LABEL_40;
              }
            }
            v31 = 1;
            goto LABEL_40;
          }
        }
        else
        {
          Length = CFStringGetLength(v15);
          if (Length > 32)
            return 4294963396;
          v17 = Length;
          v18 = &a2[56 * v11];
          *((_DWORD *)v18 + 2) = 1;
          v19 = (uint64_t)(v18 + 8);
          usedBufLen = 0;
          if (CFStringGetLength(v15))
          {
            v65.location = 0;
            v65.length = v17;
            if (!CFStringGetBytes(v15, v65, 0x8000100u, 0, 0, (UInt8 *)(v19 + 8), 32, &usedBufLen))
              return 4294963396;
          }
          *(_DWORD *)(v19 + 4) = usedBufLen;
          __getNetworkSecurityParams(v13, v19, a3);
          v20 = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("HIDDEN_NETWORK"));
          v21 = makeBoolRef(v20);
          v22 = v21 && CFEqual(v21, cf2);
          a2[56 * v11 + 57] = v22;
          if (CFDictionaryGetValueIfPresent(v13, CFSTR("BGSCANRSSITHRES"), (const void **)&value) && value)
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
            *(_DWORD *)&a2[56 * v11 + 60] = valuePtr;
          }
          if (CFDictionaryGetValueIfPresent(v13, CFSTR("HOTSPOT"), (const void **)&BOOLean) && BOOLean)
            a2[56 * v11 + 56] = a2[56 * v11 + 56] & 0xFB | (4 * (CFBooleanGetValue(BOOLean) & 1));
          if (CFDictionaryGetValueIfPresent(v13, CFSTR("DISALLOW_PNO"), (const void **)&v59) && v59)
            a2[56 * v11 + 56] = a2[56 * v11 + 56] & 0xF7 | (8 * (CFBooleanGetValue(v59) & 1));
          ++v11;
        }
LABEL_41:
        if (v8 == ++v9)
          goto LABEL_44;
      }
    }
    v11 = 0;
    v10 = 0;
LABEL_44:
    v32 = 16;
    if (v11 < 16)
      v32 = v11;
    *((_DWORD *)a2 + 1) = v32;
    v33 = 360;
    if (v10 < 360)
      v33 = v10;
    *((_DWORD *)a2 + 226) = v33;
    a1 = v55;
  }
  v34 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SCAN_CHANNELS"));
  if (v34)
  {
    v35 = v34;
    LODWORD(value) = -1431655766;
    LODWORD(BOOLean) = -1431655766;
    v36 = CFArrayGetCount(v34);
    v37 = 0;
    if (v36 >= 1)
    {
      v38 = 0;
      if ((unint64_t)(v36 - 1) >= 0x18F)
        v39 = 399;
      else
        v39 = v36 - 1;
      while (1)
      {
        v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, v38);
        if (!v40)
          return 4294963396;
        v41 = v40;
        v42 = (const __CFNumber *)CFDictionaryGetValue(v40, CFSTR("CHANNEL"));
        if (!v42 || !CFNumberGetValue(v42, kCFNumberSInt32Type, &value))
          return 4294963396;
        v43 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("CHANNEL_FLAGS"));
        if (v43)
        {
          if (!CFNumberGetValue(v43, kCFNumberSInt32Type, &BOOLean))
            return 4294963396;
        }
        else
        {
          LODWORD(BOOLean) = 0;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buffer = 67109120;
            *(_DWORD *)&buffer[4] = (_DWORD)value;
            _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Missing channel flags for background scan channel (%u)", (uint8_t *)buffer, 8u);
          }
        }
        v44 = (int)BOOLean;
        if (((unsigned __int16)BOOLean & 0x2000) == 0)
          break;
        if ((_os_feature_enabled_impl() & 1) == 0)
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            goto LABEL_72;
          *(_DWORD *)buffer = 67109120;
          *(_DWORD *)&buffer[4] = (_DWORD)value;
          v51 = MEMORY[0x24BDACB70];
          v52 = "Excluding 6GHz scan channel (%u)";
          goto LABEL_77;
        }
        v46 = _os_feature_enabled_impl();
        v45 = (int)value;
        v44 = (int)BOOLean;
        if ((v46 & 1) != 0)
          goto LABEL_71;
        if ((~(_DWORD)BOOLean & 0x2002) == 0)
        {
          v47 = 0;
          do
          {
            v48 = k6GHzPSC[v47];
            if (v47 > 0xD)
              break;
            ++v47;
          }
          while (v48 != (_DWORD)value);
          if (v48 == (_DWORD)value)
            goto LABEL_71;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buffer = 67109120;
          *(_DWORD *)&buffer[4] = v45;
          v51 = MEMORY[0x24BDACB70];
          v52 = "Excluding 6GHz non-PSC scan channel (%u)";
LABEL_77:
          _os_log_error_impl(&dword_20647D000, v51, OS_LOG_TYPE_ERROR, v52, (uint8_t *)buffer, 8u);
        }
LABEL_72:
        if (v38++ == v39)
          goto LABEL_80;
      }
      v45 = (int)value;
LABEL_71:
      v49 = &a2[12 * v37];
      *((_DWORD *)v49 + 858) = 1;
      *((_DWORD *)v49 + 859) = v45;
      *((_DWORD *)v49 + 860) = v44;
      ++v37;
      goto LABEL_72;
    }
LABEL_80:
    *((_DWORD *)a2 + 857) = v37;
    a1 = v55;
  }
  v53 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("BGSCAN_CACHE"));
  if (v53)
  {
    buffer[0] = 0;
    if (!CFNumberGetValue(v53, kCFNumberSInt32Type, buffer))
      return 4294963396;
    *((_DWORD *)a2 + 2058) = buffer[0];
  }
  result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("BGSCAN_CACHE_WSB_ROLLOVER"));
  if (!result)
    return result;
  buffer[0] = 0;
  if (!CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, buffer))
    return 4294963396;
  result = 0;
  a2[8236] = a2[8236] & 0xFE | buffer[0] & 1;
  return result;
}

const __CFDictionary *_setRoamProfile(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  unsigned int v5;
  const __CFDictionary *result;
  int v7;
  const __CFDictionary *Value;
  _OWORD v9[8];
  _OWORD v10[8];
  _OWORD v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v5 = *(unsigned __int8 *)(a1 + 99);
  result = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("APPLE80211KEY_ROAM_PROF_2G"));
  if (result)
  {
    v7 = (v5 >> 6) & 1;
    _setRoamProfilePerBand(v7, (unsigned int *)v9, result);
    result = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("APPLE80211KEY_ROAM_PROF_5G"));
    if (result)
    {
      _setRoamProfilePerBand(v7, (unsigned int *)v10, result);
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("APPLE80211KEY_ROAM_PROF_6G"));
      if (Value)
        _setRoamProfilePerBand(v7, (unsigned int *)v11, Value);
      *(_DWORD *)(a2 + 24) = 384;
      *(_QWORD *)(a2 + 32) = v9;
      result = (const __CFDictionary *)Apple80211RawSet();
      if ((_DWORD)result)
        return (const __CFDictionary *)*__error();
    }
  }
  return result;
}

uint64_t _setUCMProfile(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFIndex Count;
  CFIndex v25;
  uint64_t v26;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v29;
  const __CFNumber *v30;
  char *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  uint64_t result;
  uint64_t v38;
  __int128 valuePtr;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  valuePtr = 0u;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_VERSION"));
  if (!Value)
    return 4294963396;
  if (!CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr))
    return 4294963396;
  v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_PROFILE_INDEX"));
  if (!v6)
    return 4294963396;
  if (!CFNumberGetValue(v6, kCFNumberSInt8Type, (char *)&valuePtr + 4))
    return 4294963396;
  v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_STRONG_WL_BT"));
  if (!v7)
    return 4294963396;
  if (!CFNumberGetValue(v7, kCFNumberSInt8Type, (char *)&valuePtr + 5))
    return 4294963396;
  v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_WEAK_WL"));
  if (!v8)
    return 4294963396;
  if (!CFNumberGetValue(v8, kCFNumberSInt8Type, (char *)&valuePtr + 6))
    return 4294963396;
  v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_WEAK_BT"));
  if (!v9)
    return 4294963396;
  if (!CFNumberGetValue(v9, kCFNumberSInt8Type, (char *)&valuePtr + 7))
    return 4294963396;
  v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_WEAK_WL_BT"));
  if (!v10)
    return 4294963396;
  if (!CFNumberGetValue(v10, kCFNumberSInt8Type, (char *)&valuePtr + 8))
    return 4294963396;
  v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_WL_HI_LO_RSSI_THRESH"));
  if (!v11)
    return 4294963396;
  if (!CFNumberGetValue(v11, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 9)))
    return 4294963396;
  v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_WL_LO_HI_RSSI_THRESH"));
  if (!v12)
    return 4294963396;
  if (!CFNumberGetValue(v12, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xA)))
    return 4294963396;
  v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_BT_HI_LO_RSSI_THRESH"));
  if (!v13)
    return 4294963396;
  if (!CFNumberGetValue(v13, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xB)))
    return 4294963396;
  v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_MODE_BT_LO_HI_RSSI_THRESH"));
  if (!v14)
    return 4294963396;
  if (!CFNumberGetValue(v14, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xC)))
    return 4294963396;
  v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_DESENSE_WL_HI_LO_RSSI_THRESH"));
  if (!v15)
    return 4294963396;
  if (!CFNumberGetValue(v15, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xD)))
    return 4294963396;
  v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_DESENSE_WL_LO_HI_RSSI_THRESH"));
  if (!v16)
    return 4294963396;
  if (!CFNumberGetValue(v16, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xE)))
    return 4294963396;
  v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_ACK_PWR_WL_HI_LO_RSSI_THRESH"));
  if (!v17)
    return 4294963396;
  if (!CFNumberGetValue(v17, kCFNumberSInt8Type, (void *)((unint64_t)&valuePtr | 0xF)))
    return 4294963396;
  v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_ACK_PWR_WL_LO_HI_RSSI_THRESH"));
  if (!v18)
    return 4294963396;
  if (!CFNumberGetValue(v18, kCFNumberSInt8Type, v40))
    return 4294963396;
  v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_TX_PWR_WL_HI_LO_RSSI_THRESH"));
  if (!v19)
    return 4294963396;
  if (!CFNumberGetValue(v19, kCFNumberSInt8Type, (char *)v40 + 1))
    return 4294963396;
  v20 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_TX_PWR_WL_LO_HI_RSSI_THRESH"));
  if (!v20)
    return 4294963396;
  if (!CFNumberGetValue(v20, kCFNumberSInt8Type, (char *)v40 + 2))
    return 4294963396;
  if ((unsigned __int16)valuePtr == 2)
  {
    v21 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("UCM_HYBRID_ANT_CORE_CONFIG"));
    if (!v21 || !CFNumberGetValue(v21, kCFNumberSInt8Type, (char *)v40 + 3))
      return 4294963396;
  }
  v38 = a2;
  v22 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("UCM_CHAIN_ATTR"));
  BYTE3(valuePtr) = 0;
  if (!v22)
    goto LABEL_59;
  v23 = v22;
  Count = CFArrayGetCount(v22);
  if (Count > 5)
    return 4294963396;
  v25 = Count;
  if (Count >= 1)
  {
    v26 = 0;
    for (i = 0; v25 != i; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, i);
      if (!ValueAtIndex)
        return 4294963395;
      v29 = ValueAtIndex;
      if ((unsigned __int16)valuePtr - 1 > 1)
      {
        if ((unsigned __int16)valuePtr != 3)
          goto LABEL_50;
        v32 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("UCM_DESENSE_STRONG_RSSI"));
        if (!v32)
          return 4294963396;
        if (!CFNumberGetValue(v32, kCFNumberSInt8Type, (char *)v40 + v26 + 5))
          return 4294963396;
        v30 = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("UCM_DESENSE_WEAK_RSSI"));
        if (!v30)
          return 4294963396;
        v31 = (char *)v40 + v26 + 6;
      }
      else
      {
        v30 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("UCM_DESENSE_LEVEL"));
        if (!v30)
          return 4294963396;
        v31 = (char *)v40 + v26 + 4;
      }
      if (!CFNumberGetValue(v30, kCFNumberSInt8Type, v31))
        return 4294963396;
LABEL_50:
      v33 = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("UCM_ACK_PWR_STRONG_RSSI"));
      if (!v33)
        return 4294963396;
      if (!CFNumberGetValue(v33, kCFNumberSInt8Type, (char *)v40 + v26 + 7))
        return 4294963396;
      v34 = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("UCM_ACK_PWR_WEAK_RSSI"));
      if (!v34)
        return 4294963396;
      if (!CFNumberGetValue(v34, kCFNumberSInt8Type, (char *)v40 + v26 + 8))
        return 4294963396;
      v35 = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("UCM_TX_PWR_STRONG_RSSI"));
      if (!v35)
        return 4294963396;
      if (!CFNumberGetValue(v35, kCFNumberSInt8Type, (char *)v40 + v26 + 9))
        return 4294963396;
      v36 = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("UCM_TX_PWR_WEAK_RSSI"));
      if (!v36 || !CFNumberGetValue(v36, kCFNumberSInt8Type, (char *)v40 + v26 + 10))
        return 4294963396;
      ++BYTE3(valuePtr);
      v26 += 7;
    }
  }
LABEL_59:
  *(_DWORD *)(v38 + 24) = 56;
  *(_QWORD *)(v38 + 32) = &valuePtr;
  result = Apple80211IOCTLSetWrapper();
  if ((_DWORD)result)
    return *__error();
  return result;
}

uint64_t _set2GChainDisable(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFNumber *v6;
  uint64_t result;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = 1;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("BTCOEX_2G_CHAIN_DISABLE"));
  if (!Value)
    return 4294963396;
  if (!CFNumberGetValue(Value, kCFNumberSInt8Type, (char *)v8 + 4))
    return 4294963396;
  v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("BTCOEX_2G_CHAIN_DISABLE_REASSOC"));
  if (!v6 || !CFNumberGetValue(v6, kCFNumberSInt8Type, (char *)v8 + 5))
    return 4294963396;
  *(_DWORD *)(a2 + 24) = 8;
  *(_QWORD *)(a2 + 32) = v8;
  result = Apple80211IOCTLSetWrapper();
  if ((_DWORD)result)
    return *__error();
  return result;
}

uint64_t _getLQMConfigFromDict(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t result;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  unint64_t v20;
  CFIndex v21;
  unint64_t v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  CFTypeID v28;
  const __CFArray *v29;
  const __CFArray *v30;
  CFIndex v31;
  unint64_t v32;
  CFIndex v33;
  unint64_t v34;
  uint64_t v35;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v37;
  CFTypeID v38;
  char v39;
  char v40;
  int valuePtr;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v42 = 0;
  valuePtr = 0;
  v40 = 0;
  result = 4294963396;
  if (theDict && a2)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LQM_UPDATE_INTERVAL"));
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v6, kCFNumberIntType, &valuePtr))
        {
          *(_DWORD *)(a2 + 4) = valuePtr;
          v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LQM_RSSI_UPDATE_INTERVAL"));
          if (v8)
          {
            v9 = v8;
            v10 = CFGetTypeID(v8);
            if (v10 == CFNumberGetTypeID())
            {
              if (CFNumberGetValue(v9, kCFNumberIntType, &valuePtr))
              {
                *(_DWORD *)(a2 + 8) = valuePtr;
                v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LQM_CHAN_QUAL_UPDATE_INTERVAL"));
                if (v11)
                {
                  v12 = v11;
                  v13 = CFGetTypeID(v11);
                  if (v13 == CFNumberGetTypeID())
                  {
                    if (CFNumberGetValue(v12, kCFNumberIntType, &valuePtr))
                    {
                      *(_DWORD *)(a2 + 12) = valuePtr;
                      v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LQM_GOOD_RSSI_THRESH"));
                      if (v14)
                      {
                        v15 = v14;
                        v16 = CFGetTypeID(v14);
                        if (v16 == CFNumberGetTypeID())
                        {
                          if (CFNumberGetValue(v15, kCFNumberSInt8Type, &v42))
                          {
                            *(_BYTE *)(a2 + 16) = v42;
                            v17 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("LQM_RSSI_LEVELS"));
                            if (v17)
                            {
                              v18 = v17;
                              Count = CFArrayGetCount(v17);
                              v20 = Count - 1;
                              if (Count < 1)
                              {
LABEL_25:
                                v26 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LQM_CCA_HYSTERISIS"));
                                if (v26)
                                {
                                  v27 = v26;
                                  v28 = CFGetTypeID(v26);
                                  if (v28 == CFNumberGetTypeID())
                                  {
                                    if (CFNumberGetValue(v27, kCFNumberCharType, &v40))
                                    {
                                      *(_BYTE *)(a2 + 24) = v40;
                                      v29 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("LQM_CCA_BOUNDS"));
                                      if (v29)
                                      {
                                        v30 = v29;
                                        v31 = CFArrayGetCount(v29);
                                        v32 = v31 - 1;
                                        if (v31 < 1)
                                          return 0;
                                        v33 = 0;
                                        if (v32 >= 7)
                                          v32 = 7;
                                        v34 = v32 + 1;
                                        v35 = a2 + 25;
                                        while (1)
                                        {
                                          v39 = 0;
                                          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v30, v33);
                                          if (!ValueAtIndex)
                                            break;
                                          v37 = ValueAtIndex;
                                          v38 = CFGetTypeID(ValueAtIndex);
                                          if (v38 != CFNumberGetTypeID()
                                            || !CFNumberGetValue(v37, kCFNumberCharType, &v39))
                                          {
                                            break;
                                          }
                                          result = 0;
                                          *(_BYTE *)(v35 + v33++) = v39;
                                          if (v34 == v33)
                                            return result;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                v21 = 0;
                                if (v20 >= 6)
                                  v20 = 6;
                                v22 = v20 + 1;
                                while (1)
                                {
                                  v39 = 0;
                                  v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v18, v21);
                                  if (!v23)
                                    break;
                                  v24 = v23;
                                  v25 = CFGetTypeID(v23);
                                  if (v25 == CFNumberGetTypeID() && CFNumberGetValue(v24, kCFNumberSInt8Type, &v39))
                                    *(_BYTE *)(a2 + 17 + v21) = v39;
                                  if (v22 == ++v21)
                                    goto LABEL_25;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 4294963396;
  }
  return result;
}

uint64_t _getSensingRequest(CFTypeRef cf, uint64_t a2)
{
  CFTypeID v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  const __CFNumber *v7;
  uint64_t result;
  const __CFString *v9;
  ether_addr *v10;
  int v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294963396;
  *(_DWORD *)(a2 + 16) = 1;
  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("SENSING_PARAMS_TIMEOUT"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberIntType, (void *)(a2 + 4));
  v6 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("SENSING_PARAMS_NUMBER_OF_REPORTS"));
  if (v6)
    CFNumberGetValue(v6, kCFNumberIntType, (void *)(a2 + 8));
  v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("SENSING_PARAMS_MATCH_FRAME_TYPE"));
  if (v7)
    CFNumberGetValue(v7, kCFNumberIntType, (void *)(a2 + 12));
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("SENSING_PARAMS_MATCH_MAC_ADDRESS"));
  if (result)
  {
    v9 = (const __CFString *)result;
    memset(v12, 170, 20);
    CFStringGetCString((CFStringRef)result, (char *)v12, 20, 0x8000100u);
    v10 = ether_aton((const char *)v12);
    if (v10)
    {
      v11 = *(_DWORD *)v10->octet;
      *(_WORD *)(a2 + 24) = *(_WORD *)&v10->octet[4];
      *(_DWORD *)(a2 + 20) = v11;
    }
    if (CFStringCompare(v9, CFSTR("00:00:00:00:00:00"), 0) == kCFCompareEqualTo)
      *(_DWORD *)(a2 + 16) = 0;
    return 0;
  }
  return result;
}

void ___stopHostAPD_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (a2 == MEMORY[0x24BDACF38])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v2 = 136315138;
      v3 = "_stopHostAPD_block_invoke";
      _os_log_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s : XPC_ERROR_CONNECTION_INVALID\n", (uint8_t *)&v2, 0xCu);
    }
  }
  else
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
}

const __CFNumber *_setRoamProfilePerBand(int a1, unsigned int *a2, CFDictionaryRef theDict)
{
  const __CFNumber *result;
  unsigned int *v6;
  uint8x8_t v7;
  _DWORD *v9;
  const __CFArray *v10;
  unint64_t v11;
  char *v12;
  const __CFDictionary *ValueAtIndex;
  int v14;
  const __CFDictionary *v15;
  const __CFString *v16;

  result = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ROAM_PROF_BAND"));
  if (result)
  {
    v6 = a2 + 1;
    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, a2 + 1);
    if ((_DWORD)result)
    {
      v7 = (uint8x8_t)vcnt_s8((int8x8_t)*v6);
      v7.i16[0] = vaddlv_u8(v7);
      if (*v6 && v7.i32[0] == 1)
      {
        result = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ROAM_PROF_NUM"));
        if (result)
        {
          v9 = a2 + 2;
          result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, a2 + 2);
          if ((_DWORD)result)
          {
            if ((*v9 - 1) <= 3)
            {
              result = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ROAM_PROF"));
              if (result)
              {
                if (*v9)
                {
                  v10 = result;
                  v11 = 0;
                  v12 = (char *)(a2 + 10);
                  while (1)
                  {
                    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v11);
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_ROAM_FLAGS"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, v12 - 24);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_ROAM_TRIGGER"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 20);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_LOWER"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 19);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_ROAM_DELTA"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 18);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_2G"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 15);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_2G"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 14);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_5G"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 13);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_5G"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 12);
                    if (!(_DWORD)result)
                      return result;
                    if (a1)
                    {
                      result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_6G"));
                      if (!result)
                        return result;
                      result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 11);
                      if (!(_DWORD)result)
                        return result;
                      result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_6G"));
                      if (!result)
                        return result;
                      result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 10);
                      if (!(_DWORD)result)
                        return result;
                    }
                    v14 = *v6;
                    if (*v6 == 8 || v14 == 4)
                    {
                      result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_5G"));
                      if (!result)
                        return result;
                      result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 17);
                      if (!(_DWORD)result)
                        return result;
                      v15 = ValueAtIndex;
                      v16 = CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_5G");
                    }
                    else
                    {
                      if (v14 != 2)
                        goto LABEL_46;
                      result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_RSSI_BOOST_THRESH_2G"));
                      if (!result)
                        return result;
                      result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 17);
                      if (!(_DWORD)result)
                        return result;
                      v15 = ValueAtIndex;
                      v16 = CFSTR("ROAM_PROF_RSSI_BOOST_DELTA_2G");
                    }
                    result = (const __CFNumber *)CFDictionaryGetValue(v15, v16);
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt8Type, v12 - 16);
                    if (!(_DWORD)result)
                      return result;
LABEL_46:
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_NFSCAN"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 8);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_FULLSCAN_PERIOD"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 6);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_INIT_SCAN_PERIOD"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 4);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_BACKOFF_MULTIPLIER"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12 - 2);
                    if (!(_DWORD)result)
                      return result;
                    result = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ROAM_PROF_MAX_SCAN_PERIOD"));
                    if (!result)
                      return result;
                    result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt16Type, v12);
                    if (!(_DWORD)result)
                      return result;
                    if (v11 <= 2)
                    {
                      ++v11;
                      v12 += 28;
                      if (v11 < *v9)
                        continue;
                    }
                    break;
                  }
                }
                a2[3] = 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL _containsNonHiddenRNRChannels(const __CFArray *a1)
{
  const void *v2;
  CFIndex v3;
  const __CFDictionary *ValueAtIndex;
  _BOOL8 v5;

  if (!a1 || !CFArrayGetCount(a1) || CFArrayGetCount(a1) < 1)
    return 0;
  v2 = (const void *)*MEMORY[0x24BDBD270];
  v3 = 1;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v3 - 1);
    if (ValueAtIndex)
      v5 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ORIG_RNR_CHANNEL_FROM_HIDDEN_BSS")) != v2;
    else
      v5 = 0;
    if (CFArrayGetCount(a1) <= v3)
      break;
    ++v3;
  }
  while (!v5);
  return v5;
}

uint64_t _channelFlagsFromIEEEOperatingClass(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 81;
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
      result = 10;
      break;
    case 2:
      result = 524;
      break;
    case 3:
      result = 12;
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 46:
      return result;
    case 34:
    case 43:
    case 44:
      result = 18;
      break;
    case 35:
    case 45:
      result = 532;
      break;
    case 36:
      result = 20;
      break;
    case 37:
    case 40:
      result = 274;
      break;
    case 38:
    case 41:
      result = 788;
      break;
    case 39:
    case 42:
      result = 276;
      break;
    case 47:
      result = 1040;
      break;
    case 48:
    case 49:
      result = 2064;
      break;
    case 50:
    case 55:
      result = 8194;
      break;
    case 51:
      result = 8196;
      break;
    case 52:
      result = 9216;
      break;
    case 53:
    case 54:
      result = 10240;
      break;
    case 56:
      result = 24576;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t Apple80211ParseFILSDiscoveryFrame(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v3;
  int v6;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  __int16 v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  int *v17;
  CFDataRef v18;
  CFNumberRef v19;
  const __CFString *v20;
  CFNumberRef v21;
  UInt8 *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  const void *v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  signed __int8 v47;
  CFNumberRef v48;
  CFNumberRef v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  CFNumberRef v56;
  CFNumberRef v57;
  const void *v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFDataRef v61;
  CFDataRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  unint64_t v69;
  int v71;
  __CFDictionary *theDict;
  int v73;
  char v74;
  unsigned __int8 v75;
  UInt8 v76;
  int v77;
  __int16 v78;
  _QWORD valuePtr[2];

  valuePtr[1] = *MEMORY[0x24BDAC8D0];
  v3 = 4294963396;
  if (a1 && a3)
  {
    v6 = a2 - 14;
    if (a2 < 0xE || *(_BYTE *)a1 != 4 || *(_BYTE *)(a1 + 1) != 34)
      return 0;
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
      return 4294963395;
    v10 = Mutable;
    v11 = *(_WORD *)(a1 + 2);
    valuePtr[0] = *(_QWORD *)(a1 + 4);
    v12 = CFNumberCreate(v8, kCFNumberSInt64Type, valuePtr);
    if (!v12)
      goto LABEL_89;
    v13 = v12;
    CFDictionarySetValue(v10, CFSTR("TIMESTAMP"), v12);
    CFRelease(v13);
    v78 = *(_WORD *)(a1 + 12);
    v14 = CFNumberCreate(v8, kCFNumberSInt16Type, &v78);
    if (!v14)
      goto LABEL_89;
    v15 = v14;
    v16 = (v11 & 0xFu) + 1;
    CFDictionarySetValue(v10, CFSTR("BEACON_INTERVAL"), v14);
    CFRelease(v15);
    if (v6 < (int)v16)
      goto LABEL_90;
    v73 = a2;
    theDict = a3;
    v17 = (int *)(a1 + 14);
    if ((v11 & 0x40) != 0)
    {
      v77 = *v17;
      v21 = CFNumberCreate(v8, kCFNumberSInt32Type, &v77);
      if (!v21)
        goto LABEL_89;
      v19 = v21;
      v20 = CFSTR("SHORT_SSID");
    }
    else
    {
      v18 = CFDataCreate(v8, (const UInt8 *)(a1 + 14), (v11 & 0xFu) + 1);
      if (!v18)
        goto LABEL_89;
      v19 = v18;
      v20 = CFSTR("SSID");
    }
    CFDictionarySetValue(v10, v20, v19);
    CFRelease(v19);
    v22 = (UInt8 *)v17 + v16;
    v23 = v6 - v16;
    if ((v11 & 0x1000) != 0)
    {
      if (a2 < 1)
        goto LABEL_90;
      v71 = *v22;
      if (v23 < v71)
        goto LABEL_90;
      ++v22;
      --v23;
      if ((v11 & 0x20) == 0)
      {
LABEL_17:
        if ((v11 & 0x400) == 0)
          goto LABEL_18;
        goto LABEL_42;
      }
    }
    else
    {
      v71 = 0;
      if ((v11 & 0x20) == 0)
        goto LABEL_17;
    }
    v24 = __OFSUB__(v23, 2);
    v23 -= 2;
    if (v23 < 0 != v24)
      goto LABEL_90;
    v25 = *(unsigned __int16 *)v22;
    v26 = (const void *)*MEMORY[0x24BDBD270];
    v27 = (const void *)*MEMORY[0x24BDBD268];
    if ((v25 & 1) != 0)
      v28 = (const void *)*MEMORY[0x24BDBD270];
    else
      v28 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionarySetValue(v10, CFSTR("FD_CAP_ESS"), v28);
    if ((v25 & 2) != 0)
      v29 = v26;
    else
      v29 = v27;
    CFDictionarySetValue(v10, CFSTR("FD_CAP_PRIVACY"), v29);
    LOBYTE(v77) = (v25 >> 2) & 7;
    v30 = CFNumberCreate(v8, kCFNumberSInt8Type, &v77);
    if (!v30)
      goto LABEL_89;
    v31 = v30;
    CFDictionarySetValue(v10, CFSTR("FD_CAP_BSS_CH_WIDTH"), v30);
    CFRelease(v31);
    v76 = v25 >> 5;
    v32 = CFNumberCreate(v8, kCFNumberSInt8Type, &v76);
    if (!v32)
      goto LABEL_89;
    v33 = v32;
    CFDictionarySetValue(v10, CFSTR("FD_CAP_MAX_NSS"), v32);
    CFRelease(v33);
    v34 = (v25 & 0x200) != 0 ? v26 : v27;
    CFDictionarySetValue(v10, CFSTR("FD_CAP_MULTI_BSSID_PRESENCE_IND"), v34);
    v75 = (v25 >> 10) & 7;
    v35 = CFNumberCreate(v8, kCFNumberSInt8Type, &v75);
    if (!v35)
      goto LABEL_89;
    v36 = v35;
    CFDictionarySetValue(v10, CFSTR("FD_CAP_PHY_INDEX"), v35);
    CFRelease(v36);
    v74 = v25 >> 13;
    v37 = CFNumberCreate(v8, kCFNumberSInt8Type, &v74);
    if (!v37)
      goto LABEL_89;
    v38 = v37;
    CFDictionarySetValue(v10, CFSTR("FD_CAP_FILS_MIN_RATE"), v37);
    CFRelease(v38);
    v22 += 2;
    if ((v11 & 0x400) == 0)
    {
LABEL_18:
      if ((v11 & 0x80) == 0)
        goto LABEL_19;
      goto LABEL_47;
    }
LABEL_42:
    v24 = __OFSUB__(v23, 2);
    v23 -= 2;
    if (v23 < 0 != v24)
      goto LABEL_90;
    v76 = -86;
    v76 = *v22;
    v39 = CFNumberCreate(v8, kCFNumberSInt8Type, &v76);
    if (!v39)
      goto LABEL_89;
    v40 = v39;
    CFDictionarySetValue(v10, CFSTR("OPERATING_CLASS"), v39);
    CFRelease(v40);
    v75 = v22[1];
    v41 = CFNumberCreate(v8, kCFNumberSInt8Type, &v75);
    if (!v41)
      goto LABEL_89;
    v42 = v41;
    CFDictionarySetValue(v10, CFSTR("PRIMARY_CHANNEL"), v41);
    CFRelease(v42);
    v77 = _channelFlagsFromIEEEOperatingClass(v76);
    v43 = CFNumberCreate(v8, kCFNumberSInt32Type, &v77);
    if (!v43)
      goto LABEL_89;
    v44 = v43;
    v22 += 2;
    CFDictionarySetValue(v10, CFSTR("CHANNEL_FLAGS"), v43);
    CFRelease(v44);
    if ((v11 & 0x80) == 0)
    {
LABEL_19:
      if ((v11 & 0x100) == 0)
        goto LABEL_20;
      goto LABEL_50;
    }
LABEL_47:
    v24 = __OFSUB__(v23--, 1);
    if (v23 < 0 != v24)
      goto LABEL_90;
    LOBYTE(v77) = -86;
    LOBYTE(v77) = *v22;
    v45 = CFNumberCreate(v8, kCFNumberSInt8Type, &v77);
    if (!v45)
      goto LABEL_89;
    v46 = v45;
    CFDictionarySetValue(v10, CFSTR("AP_CONFIG_SEQ_NUM"), v45);
    CFRelease(v46);
    ++v22;
    if ((v11 & 0x100) == 0)
    {
LABEL_20:
      if ((v11 & 0x800) == 0)
      {
LABEL_21:
        if ((v11 & 0x200) == 0)
        {
          if ((v11 & 0x2000) == 0)
            goto LABEL_84;
          goto LABEL_74;
        }
        v24 = __OFSUB__(v23--, 1);
        if (v23 < 0 != v24)
          goto LABEL_90;
        LOBYTE(v77) = -86;
        LOBYTE(v77) = *v22;
        v59 = CFNumberCreate(v8, kCFNumberSInt8Type, &v77);
        if (v59)
        {
          v60 = v59;
          CFDictionarySetValue(v10, CFSTR("CHANNEL_CENTER_FREQ_SEG_1"), v59);
          CFRelease(v60);
          ++v22;
          if ((v11 & 0x2000) == 0)
            goto LABEL_84;
LABEL_74:
          if (v23 >= 3)
          {
            v61 = CFDataCreate(v8, v22, 2);
            if (v61)
            {
              v62 = v61;
              CFDictionarySetValue(v10, CFSTR("MOBILITY_DOMAIN_IDENTIFIER"), v61);
              CFRelease(v62);
              LOBYTE(v77) = -86;
              LOBYTE(v77) = *v22;
              v63 = CFNumberCreate(v8, kCFNumberSInt8Type, &v77);
              if (v63)
              {
                v64 = v63;
                CFDictionarySetValue(v10, CFSTR("MOBILITY_DOMAIN_FT_CAP"), v63);
                CFRelease(v64);
                v65 = (const void *)*MEMORY[0x24BDBD270];
                v66 = (const void *)*MEMORY[0x24BDBD268];
                if ((v22[2] & 1) != 0)
                  v67 = (const void *)*MEMORY[0x24BDBD270];
                else
                  v67 = (const void *)*MEMORY[0x24BDBD268];
                CFDictionarySetValue(v10, CFSTR("MOBILITY_DOMAIN_FT_OVER_DS"), v67);
                if ((v22[2] & 2) != 0)
                  v68 = v65;
                else
                  v68 = v66;
                CFDictionarySetValue(v10, CFSTR("MOBILITY_DOMAIN_RESOURCE_REQ_PROTO"), v68);
LABEL_84:
                CFDictionarySetValue(theDict, CFSTR("FILS_DISC_INFO"), v10);
                v69 = (v11 & 0xFu) + 15 + (unint64_t)v71;
                if (v73 - (int)v69 >= 1)
                  Apple80211ParseRNRIE((unsigned __int8 *)(a1 + v69), v73 - v69, theDict);
                v3 = 0;
                goto LABEL_87;
              }
            }
            goto LABEL_89;
          }
LABEL_90:
          v3 = 4294963392;
          goto LABEL_87;
        }
LABEL_89:
        v3 = 4294963395;
LABEL_87:
        CFRelease(v10);
        return v3;
      }
LABEL_65:
      if (v23 < 5)
        goto LABEL_90;
      LOWORD(v77) = *(_DWORD *)v22;
      v56 = CFNumberCreate(v8, kCFNumberSInt16Type, &v77);
      if (v56)
      {
        v57 = v56;
        CFDictionarySetValue(v10, CFSTR("RSN_CAPABILITIES"), v56);
        CFRelease(v57);
        if ((v77 & 1) != 0)
          v58 = (const void *)*MEMORY[0x24BDBD270];
        else
          v58 = (const void *)*MEMORY[0x24BDBD268];
        CFDictionarySetValue(v10, CFSTR("PRE_AUTH"), v58);
        __asm { BR              X10 }
      }
      goto LABEL_89;
    }
LABEL_50:
    v24 = __OFSUB__(v23--, 1);
    if (v23 < 0 != v24)
      goto LABEL_90;
    v47 = *v22;
    LOBYTE(v77) = *v22 & 0xF;
    v48 = CFNumberCreate(v8, kCFNumberSInt8Type, &v77);
    if (!v48)
      goto LABEL_89;
    v49 = v48;
    CFDictionarySetValue(v10, CFSTR("INTERWORKING_ACCESS_NETWORK_TYPE"), v48);
    CFRelease(v49);
    v50 = (const void *)*MEMORY[0x24BDBD270];
    v51 = (const void *)*MEMORY[0x24BDBD268];
    if ((v47 & 0x10) != 0)
      v52 = (const void *)*MEMORY[0x24BDBD270];
    else
      v52 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionarySetValue(v10, CFSTR("INTERWORKING_ACCESS_INTERNET"), v52);
    if ((v47 & 0x20) != 0)
      v53 = v50;
    else
      v53 = v51;
    CFDictionarySetValue(v10, CFSTR("INTERWORKING_ACCESS_ASRA"), v53);
    if ((v47 & 0x40) != 0)
      v54 = v50;
    else
      v54 = v51;
    CFDictionarySetValue(v10, CFSTR("INTERWORKING_ACCESS_ESR"), v54);
    if (v47 >= 0)
      v55 = v51;
    else
      v55 = v50;
    CFDictionarySetValue(v10, CFSTR("INTERWORKING_ACCESS_UESA"), v55);
    ++v22;
    if ((v11 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_65;
  }
  return v3;
}

const char *convertApple80211ReturnToString(int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  const char *result;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int *v11;

  if ((a1 & 0x3E00) != 0x1000)
  {
    if ((a1 & 0x3E00) == 0x3000)
    {
      v2 = 0;
      v3 = a1 & 0x1FF;
      v4 = 1;
      v5 = (int *)&unk_24BF12488;
      result = "unknown IEEE reason";
      while (v4 != v3)
      {
        v4 = *(_DWORD *)((char *)&unk_24BF12488 + v2 * 4 + 16);
        v2 += 4;
        if (v2 == 132)
          return result;
      }
    }
    else
    {
      v2 = 0;
      v5 = kMapping;
      result = "unknown Apple80211 ReturnToString";
      while (kMapping[v2] != a1)
      {
        v2 += 4;
        if (v2 == 680)
          return result;
      }
    }
    v11 = &v5[v2];
    return (const char *)*((_QWORD *)v11 + 1);
  }
  v7 = a1 & 0x1FF;
  if ((a1 & 0x1FF) == 0)
  {
    v10 = 0;
LABEL_18:
    v11 = &k80211StatusDescList[4 * v10];
    return (const char *)*((_QWORD *)v11 + 1);
  }
  v8 = 1;
  result = "unknown IEEE status";
  while (1)
  {
    v9 = k80211StatusDescList[4 * v8];
    if (v9 == -1)
      return result;
    v10 = v8++;
    if (v9 == v7)
      goto LABEL_18;
  }
}

const char *convertIEEEStatusToString(int a1)
{
  unsigned int v2;
  const char *result;
  int v4;
  uint64_t v5;

  if (a1)
  {
    v2 = 1;
    result = "unknown IEEE status";
    while (1)
    {
      v4 = k80211StatusDescList[4 * v2];
      if (v4 == -1)
        break;
      v5 = v2++;
      if (v4 == a1)
        return *(const char **)&k80211StatusDescList[4 * v5 + 2];
    }
  }
  else
  {
    v5 = 0;
    return *(const char **)&k80211StatusDescList[4 * v5 + 2];
  }
  return result;
}

const char *convertIEEEReasonToString(int a1)
{
  uint64_t v2;
  int v3;
  const char *result;

  v2 = 0;
  v3 = 1;
  result = "unknown IEEE reason";
  while (v3 != a1)
  {
    v3 = *(_DWORD *)((char *)&unk_24BF12488 + v2 + 16);
    v2 += 16;
    if (v2 == 528)
      return result;
  }
  return *(const char **)((char *)&unk_24BF12488 + v2 + 8);
}

uint64_t convertApple80211ReturnToErrno(int a1)
{
  uint64_t v2;

  if ((a1 & 0x1E00 | 0x2000) == 0x3000)
    return a1 & 0x1FF;
  v2 = 0;
  while (kMapping[v2] != a1)
  {
    v2 += 4;
    if (v2 == 680)
      return 0;
  }
  return kMapping[v2 + 1];
}

const char *convertLinkStateReasonToString(int a1)
{
  uint64_t v1;

  if (a1 == 1)
  {
    v1 = 0;
    return (const char *)*((_QWORD *)&unk_24BF12ED8 + 2 * v1 + 1);
  }
  if (a1 == 2)
  {
    v1 = 1;
    return (const char *)*((_QWORD *)&unk_24BF12ED8 + 2 * v1 + 1);
  }
  return "unknown reason";
}

const char *convertApple80211IOCTLToString(int a1)
{
  const char *result;

  if (a1 > 556)
    return "Error Invalid ioctl";
  if (a1 == -1)
    return "APPLE80211_IOC_CARD_SPECIFIC";
  if (a1 < 0)
    return "unknown Apple80211_IOC_";
  result = (const char *)gAppleIoucIndexToString[a1];
  if (!result)
    return "unknown Apple80211_IOC_";
  return result;
}

const char *convertApple80211EventToString(int a1)
{
  if ((a1 - 241) >= 0xFFFFFF10)
    return (const char *)gAppleMIndexToString[a1];
  else
    return "unknown APPLE80211_M_";
}

const char *awdlStringForState(unsigned int a1)
{
  if (a1 > 0x35)
    return "unknown";
  else
    return off_24BF147F8[a1];
}

const char *convertBssidChangedReasonToString(int a1)
{
  if ((a1 - 1) > 4)
    return "BSSID_CHANGE_REASON_INVALID";
  else
    return off_24BF149A8[a1 - 1];
}

void IEEE80211iPasswordHash(uint64_t a1, unint64_t a2, void *a3, size_t a4, _OWORD *a5)
{
  int v5;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  _OWORD v14[4];
  uint64_t v15;

  v5 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x40)
  {
    printf("%s[%u] Error: Assert failure\n", "IEEE80211iPasswordHash", 774);
  }
  else
  {
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[2] = v9;
    v14[3] = v9;
    v14[0] = v9;
    v14[1] = v9;
    v11 = v9;
    v12 = v9;
    v13 = 0xAAAAAAAAAAAAAAAALL;
    __memcpy_chk();
    F((int)v14, v5, a3, a4, 1, (uint64_t)&v11);
    F((int)v14, v5, a3, a4, 2, (uint64_t)&v12 + 4);
    v10 = v12;
    *a5 = v11;
    a5[1] = v10;
  }
}

void F(int a1, int a2, void *__src, size_t __n, char a5, uint64_t a6)
{
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 __dst;
  __int128 v15;
  int v16;
  uint64_t v17;

  v8 = __n;
  v17 = *MEMORY[0x24BDAC8D0];
  v16 = -1431655766;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __dst = v9;
  v15 = v9;
  memset(v13, 170, 20);
  if ((_DWORD)__n)
  {
    v10 = __n;
    memcpy(&__dst, __src, __n);
  }
  else
  {
    v10 = 0;
  }
  *((_BYTE *)&__dst + v10) = 0;
  *((_BYTE *)&__dst + (v8 + 1)) = 0;
  *((_BYTE *)&__dst + (v8 + 2)) = 0;
  *((_BYTE *)&__dst + (v8 + 3)) = a5;
  hmac_sha1();
  v11 = 0;
  *(_OWORD *)a6 = v13[0];
  *(_DWORD *)(a6 + 16) = v13[1];
  do
  {
    hmac_sha1();
    v12 = 0;
    v13[0] = __dst;
    LODWORD(v13[1]) = v15;
    do
    {
      *(_BYTE *)(a6 + v12) ^= *((_BYTE *)&__dst + v12);
      ++v12;
    }
    while (v12 != 20);
    ++v11;
  }
  while (v11 != 4095);
}

__n128 hmac_sha1()
{
  const void *v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int8x16_t v10;
  uint64_t i;
  __int128 v12;
  uint64_t v13;
  int8x16_t v14;
  __int128 v15;
  __n128 result;
  _OWORD v17[5];
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[264];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD __dst[4];
  uint64_t v34;

  v0 = (const void *)MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v34 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  if (v1)
    memcpy(__dst, v0, v1);
  v8 = 0;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31 = v9;
  v32 = v9;
  v29 = v9;
  v30 = v9;
  v10.i64[0] = 0x3636363636363636;
  v10.i64[1] = 0x3636363636363636;
  do
  {
    *(__int128 *)((char *)&v29 + v8 * 16) = (__int128)veorq_s8((int8x16_t)__dst[v8], v10);
    ++v8;
  }
  while (v8 != 4);
  memset(&v24[4], 170, 0x1040uLL);
  v24[0] = v29;
  v24[1] = v30;
  v24[2] = v31;
  v24[3] = v32;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      *((_BYTE *)v24 + (i + 64)) = *(_BYTE *)(v7 + i);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v12;
  v28 = v12;
  v25 = v12;
  v26 = v12;
  sha1((uint64_t)v24, v5 + 64, v3);
  v13 = 0;
  v14.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v14.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  do
  {
    *(__int128 *)((char *)&v25 + v13 * 16) = (__int128)veorq_s8((int8x16_t)__dst[v13], v14);
    ++v13;
  }
  while (v13 != 4);
  v23 = -86;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22 = v15;
  v21 = v15;
  v20 = v15;
  v19 = v15;
  v17[0] = v25;
  v17[1] = v26;
  v17[2] = v27;
  v17[3] = v28;
  v17[4] = *(_OWORD *)v3;
  v18 = *(_DWORD *)(v3 + 16);
  sha1((uint64_t)v17, 0x54u, v3);
  return result;
}

void sha1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD __b[81];

  __b[80] = *MEMORY[0x24BDAC8D0];
  memset(__b, 170, 0x280uLL);
  v6 = 8 * a2;
  v7 = (a2 + 9) >> 6;
  if (((a2 + 9) & 0x3F) != 0)
    v8 = v7 + 1;
  else
    v8 = v7;
  v9 = ((_DWORD)v8 << 6);
  if (v9 > a2)
    bzero((void *)(a1 + a2), v9 - a2);
  v10 = 4023233417;
  *(_BYTE *)(a1 + a2) = 0x80;
  *(_BYTE *)(a1 + (v9 - 1)) = v6;
  *(_BYTE *)(a1 + (v9 - 2)) = BYTE1(v6);
  v11 = 3285377520;
  v12 = 2562383102;
  v13 = 1732584193;
  v14 = 271733878;
  *(_BYTE *)(a1 + (v9 - 3)) = BYTE2(v6);
  *(_BYTE *)(a1 + (v9 - 4)) = HIBYTE(v6);
  if ((_DWORD)v8)
  {
    v15 = 0;
    v16 = a1 + 3;
    do
    {
      v17 = 0;
      v18 = __b;
      v19 = v16;
      do
      {
        if (v17 > 0xF)
        {
          v21 = *(v18 - 8) ^ *(v18 - 3) ^ *(v18 - 14) ^ *(v18 - 16);
          v20 = (v21 >> 31) | (2 * (_DWORD)v21);
        }
        else
        {
          v20 = bswap32(*(_DWORD *)(v19 - 3));
        }
        *v18++ = v20;
        ++v17;
        v19 += 4;
      }
      while (v17 != 80);
      v22 = 0;
      v23 = v11;
      v24 = v14;
      v25 = v12;
      v26 = v10;
      v27 = v13;
      do
      {
        v28 = v27;
        v29 = v25;
        v30 = v24;
        v31 = (32 * v27) | (v27 >> 27);
        v32 = v24 & ~v26 | v26 & v25;
        v33 = v25 ^ v24;
        v34 = v33 ^ v26;
        v35 = v33 & v26 ^ v29 & v24;
        if (v22 < 0x3C)
        {
          v36 = 2400959708;
        }
        else
        {
          v35 = v34;
          v36 = 3395469782;
        }
        if (v22 >= 0x28)
        {
          v37 = v36;
        }
        else
        {
          v35 = v34;
          v37 = 1859775393;
        }
        if (v22 < 0x14)
        {
          v38 = 1518500249;
        }
        else
        {
          v32 = v35;
          v38 = v37;
        }
        v39 = v31 + v23 + v32 + v38 + __b[v22];
        v27 = v39;
        v40 = (v26 << 30) | (v26 >> 2);
        v25 = ((_DWORD)v26 << 30) | (v26 >> 2);
        ++v22;
        v23 = v30;
        v24 = v29;
        v26 = v28;
      }
      while (v22 != 80);
      v13 = (v39 + v13);
      v10 = (v28 + v10);
      v12 = (v40 + v12);
      v14 = (v29 + v14);
      v11 = (v30 + v11);
      ++v15;
      v16 += 64;
    }
    while (v15 != v8);
  }
  *(_WORD *)(a3 + 2) = bswap32(v13) >> 16;
  *(_BYTE *)(a3 + 1) = BYTE2(v13);
  *(_BYTE *)a3 = BYTE3(v13);
  *(_BYTE *)(a3 + 7) = v10;
  *(_BYTE *)(a3 + 6) = BYTE1(v10);
  *(_BYTE *)(a3 + 5) = BYTE2(v10);
  *(_BYTE *)(a3 + 4) = BYTE3(v10);
  *(_BYTE *)(a3 + 11) = v12;
  *(_BYTE *)(a3 + 10) = BYTE1(v12);
  *(_BYTE *)(a3 + 9) = BYTE2(v12);
  *(_BYTE *)(a3 + 8) = BYTE3(v12);
  *(_BYTE *)(a3 + 15) = v14;
  *(_BYTE *)(a3 + 14) = BYTE1(v14);
  *(_BYTE *)(a3 + 13) = BYTE2(v14);
  *(_BYTE *)(a3 + 12) = BYTE3(v14);
  *(_BYTE *)(a3 + 19) = v11;
  *(_BYTE *)(a3 + 18) = BYTE1(v11);
  *(_BYTE *)(a3 + 17) = BYTE2(v11);
  *(_BYTE *)(a3 + 16) = BYTE3(v11);
}

uint64_t nan_crc32(uint64_t result, char *a2, uint64_t a3)
{
  char v3;

  for (; a3; --a3)
  {
    v3 = *a2++;
    result = crc32_tab[(v3 ^ result)] ^ (result >> 8);
  }
  return result;
}

uint64_t _Apple80211AWDLCompatibilityCall(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  CFArrayRef v9;
  CFIndex Count;
  __CFString *ValueAtIndex;
  uint64_t v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;
  CFTypeID v17;
  uint64_t v18;
  dispatch_semaphore_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  int v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  double *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  const void *v136;
  unint64_t v137;
  size_t v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  unint64_t v148;
  unint64_t v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  id v163;
  unint64_t v164;
  unint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  _WORD *v169;
  void *v170;
  void *v171;
  id v172;
  void *v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  unsigned int v177;
  CFStringRef v178;
  id v179;
  void *v180;
  void *v181;
  int v182;
  id *v183;
  id v184;
  void *v185;
  const char *v187;
  const char *v188;
  void *v189;
  id v190;
  id obj;
  id obja;
  char *objb;
  CFArrayRef theArray;
  _QWORD v195[6];
  _QWORD v196[6];
  uint64_t v197;
  uint64_t v198;
  _BYTE v199[24];
  const char *v200;
  __int16 v201;
  int v202;
  _BYTE v203[128];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 <= 154)
  {
    if ((int)v6 > 115)
    {
      switch((int)v6)
      {
        case 116:
        case 118:
        case 121:
        case 122:
        case 124:
        case 126:
        case 127:
        case 134:
        case 135:
        case 136:
          goto LABEL_4;
        case 117:
          if ((a3 & 1) != 0)
            goto LABEL_171;
          v22 = *(_QWORD *)(a2 + 32);
          if (!v22 || *(_DWORD *)(a2 + 24) != 12)
            goto LABEL_180;
          -[objc_class currentState](off_253E9DBD0(), "currentState");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v13, "isEnabled");
          goto LABEL_95;
        case 129:
          if ((a3 & 1) != 0)
            goto LABEL_171;
          v24 = *(_QWORD *)(a2 + 32);
          if (!v24 || *(_DWORD *)(a2 + 24) != 400)
            goto LABEL_180;
          *(_OWORD *)(v24 + 368) = 0u;
          *(_OWORD *)(v24 + 384) = 0u;
          *(_OWORD *)(v24 + 336) = 0u;
          *(_OWORD *)(v24 + 352) = 0u;
          *(_OWORD *)(v24 + 304) = 0u;
          *(_OWORD *)(v24 + 320) = 0u;
          *(_OWORD *)(v24 + 272) = 0u;
          *(_OWORD *)(v24 + 288) = 0u;
          *(_OWORD *)(v24 + 240) = 0u;
          *(_OWORD *)(v24 + 256) = 0u;
          *(_OWORD *)(v24 + 208) = 0u;
          *(_OWORD *)(v24 + 224) = 0u;
          *(_OWORD *)(v24 + 176) = 0u;
          *(_OWORD *)(v24 + 192) = 0u;
          *(_OWORD *)(v24 + 144) = 0u;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_OWORD *)(v24 + 112) = 0u;
          *(_OWORD *)(v24 + 128) = 0u;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_OWORD *)(v24 + 96) = 0u;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)v24 = 0u;
          -[objc_class currentState](off_253E9DBD0(), "currentState");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "channelSequence");
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          *(_BYTE *)(v24 + 5) = objc_msgSend(v26, "count");
          v204 = 0u;
          v205 = 0u;
          v206 = 0u;
          v207 = 0u;
          obj = v26;
          v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v204, v203, 16);
          if (v27)
          {
            v28 = 0;
            v29 = *(_QWORD *)v205;
            do
            {
              for (i = 0; i != v27; ++i)
              {
                if (*(_QWORD *)v205 != v29)
                  objc_enumerationMutation(obj);
                v31 = *(void **)(*((_QWORD *)&v204 + 1) + 8 * i);
                if (objc_msgSend(v31, "is2_4GHz"))
                  v32 = 8;
                else
                  v32 = 0;
                if (objc_msgSend(v31, "is5GHz"))
                  v32 |= 0x10u;
                if (objc_msgSend(v31, "isDFS"))
                  v33 = v32 | 0x100;
                else
                  v33 = v32;
                switch(objc_msgSend(v31, "bandwidth"))
                {
                  case 0:
                    v33 |= 1u;
                    break;
                  case 1:
                    v33 |= 2u;
                    break;
                  case 2:
                    v33 |= 4u;
                    break;
                  case 3:
                    v33 |= 0x400u;
                    break;
                  case 4:
                    v33 |= 0x800u;
                    break;
                  default:
                    break;
                }
                *(_DWORD *)(v24 + 12 * (v28 + i) + 20) = v33;
                *(_DWORD *)(v24 + 12 * (v28 + i) + 16) = objc_msgSend(v31, "channelNumber");
              }
              v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v204, v203, 16);
              v28 += i;
            }
            while (v27);
          }

          return 0;
        case 132:
          if ((a3 & 1) != 0)
            goto LABEL_171;
          v12 = *(_QWORD *)(a2 + 32);
          if (!v12 || *(_DWORD *)(a2 + 24) != 8)
            goto LABEL_180;
          -[objc_class currentState](off_253E9DBD0(), "currentState");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "peerMasterChannel");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_90;
        case 148:
          if ((a3 & 1) != 0)
            goto LABEL_171;
          v22 = *(_QWORD *)(a2 + 32);
          if (!v22 || *(_DWORD *)(a2 + 24) != 24)
            goto LABEL_180;
          -[objc_class currentState](off_253E9DBD0(), "currentState");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v13, "substate");
LABEL_95:
          *(_DWORD *)(v22 + 8) = v23;
          break;
        default:
          goto LABEL_170;
      }
      goto LABEL_167;
    }
    if (v6 <= 0x1B && ((1 << v6) & 0x8089000) != 0)
    {
      if ((a3 & 1) == 0)
      {
        *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
        v7 = Apple80211Open(v199);
        if (!(_DWORD)v7)
        {
          theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
          LODWORD(v7) = Apple80211GetIfListCopy(*(int **)v199, &theArray);
          v9 = theArray;
          if (!(_DWORD)v7 && theArray && (Count = CFArrayGetCount(theArray), v9 = theArray, Count))
          {
            ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArray, 0);
            v7 = Apple80211BindToInterface(*(uint64_t *)v199, ValueAtIndex);
            if (theArray)
              CFRelease(theArray);
            if (!(_DWORD)v7)
            {
              CFStringGetCString(ValueAtIndex, (char *)a2, 16, 0x8000100u);
              v7 = Apple80211RawGet(*(uint64_t *)v199, a2);
            }
            Apple80211Close(*(uint64_t *)v199);
          }
          else
          {
            if (v9)
              CFRelease(v9);
            Apple80211Close(*(uint64_t *)v199);
            if ((_DWORD)v7)
              v7 = v7;
            else
              v7 = 4294963396;
          }
        }
        goto LABEL_213;
      }
LABEL_171:
      v7 = 4294963393;
      goto LABEL_214;
    }
    if ((_DWORD)v6 == 96)
    {
      if ((a3 & 1) == 0)
      {
        *(_DWORD *)(a2 + 20) = 6;
        return 0;
      }
      goto LABEL_171;
    }
    if ((_DWORD)v6 == 97)
    {
      if ((a3 & 1) != 0)
        goto LABEL_171;
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)v199 = 0xAAAAAAAAAAAAAAAALL;
        Apple80211GetIfListCopy((int *)a1, (const __CFArray **)v199);
        if (*(_QWORD *)v199)
        {
          if (CFArrayGetCount(*(CFArrayRef *)v199)
            && (v15 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)v199, 0), (v16 = v15) != 0)
            && (v17 = CFGetTypeID(v15), v17 == CFStringGetTypeID()))
          {
            if (CFStringGetCString(v16, *(char **)(a2 + 32), *(unsigned int *)(a2 + 24), 0x8000100u))
              v7 = 0;
            else
              v7 = 4294963395;
          }
          else
          {
            v7 = 4294963396;
          }
          if (*(_QWORD *)v199)
            CFRelease(*(CFTypeRef *)v199);
        }
        else
        {
          v7 = 4294963396;
        }
        goto LABEL_213;
      }
      goto LABEL_180;
    }
    goto LABEL_170;
  }
  if ((int)v6 <= 207)
  {
    if ((int)v6 <= 163)
    {
      if ((_DWORD)v6 != 155)
      {
        if ((_DWORD)v6 != 163)
          goto LABEL_170;
        v18 = *(_QWORD *)(a2 + 32);
        if (!v18 || *(_DWORD *)(a2 + 24) != 8)
          goto LABEL_180;
        if (a3)
        {
          *(_QWORD *)v199 = 0;
          *(_QWORD *)&v199[8] = v199;
          *(_QWORD *)&v199[16] = 0x2020000000;
          LODWORD(v200) = 0;
          v19 = dispatch_semaphore_create(0);
          if (*(_BYTE *)(v18 + 4))
          {
            -[objc_class shared](off_253E9DBD8(), "shared");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v196[0] = MEMORY[0x24BDAC760];
            v196[1] = 3221225472;
            v196[2] = ___Apple80211AWDLCompatibilityInternal_block_invoke;
            v196[3] = &unk_24BF149D8;
            v196[5] = v199;
            v21 = v196;
            v196[4] = v19;
            objc_msgSend(v20, "beginTransaction:completionHandler:", 9, v196);
          }
          else
          {
            -[objc_class shared](off_253E9DBD8(), "shared");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v195[0] = MEMORY[0x24BDAC760];
            v195[1] = 3221225472;
            v195[2] = ___Apple80211AWDLCompatibilityInternal_block_invoke_2;
            v195[3] = &unk_24BF149D8;
            v195[5] = v199;
            v21 = v195;
            v195[4] = v19;
            objc_msgSend(v20, "endTransaction:completionHandler:", 9, v195);
          }

          dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
          v7 = *(unsigned int *)(*(_QWORD *)&v199[8] + 24);

          _Block_object_dispose(v199, 8);
          goto LABEL_213;
        }
        *(_QWORD *)v18 = 0;
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          return 0;
        v176 = *(unsigned int *)(a2 + 16);
        if ((int)v176 > 556)
        {
          v175 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v176 == -1)
        {
          v175 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v176 & 0x80000000) != 0 || (v175 = (const char *)gAppleIoucIndexToString[v176]) == 0)
        {
          v175 = "unknown Apple80211_IOC_";
        }
        goto LABEL_196;
      }
LABEL_4:
      if ((a3 & 1) != 0)
        goto LABEL_171;
      bzero(*(void **)(a2 + 32), *(unsigned int *)(a2 + 24));
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        return 0;
      v174 = *(unsigned int *)(a2 + 16);
      if ((int)v174 > 556)
      {
        v175 = "Error Invalid ioctl";
      }
      else if ((_DWORD)v174 == -1)
      {
        v175 = "APPLE80211_IOC_CARD_SPECIFIC";
      }
      else if ((v174 & 0x80000000) != 0 || (v175 = (const char *)gAppleIoucIndexToString[v174]) == 0)
      {
        v175 = "unknown Apple80211_IOC_";
      }
LABEL_196:
      *(_DWORD *)v199 = 136315394;
      *(_QWORD *)&v199[4] = "_Apple80211AWDLCompatibilityInternal";
      *(_WORD *)&v199[12] = 2080;
      *(_QWORD *)&v199[14] = v175;
      _os_log_error_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s: unsupported get for %s on awdl0", v199, 0x16u);
      return 0;
    }
    if ((_DWORD)v6 == 164)
    {
      v36 = *(_QWORD *)(a2 + 32);
      if ((a3 & 1) != 0)
      {
        if (v36 && *(_DWORD *)(a2 + 24) == 184)
        {
          v37 = *(void **)(a1 + 112);
          if (v37)
          {
            v38 = v37;
          }
          else
          {
            v38 = objc_alloc_init(off_253E9DBB8());
            *(_QWORD *)(a1 + 112) = v38;
          }
          v177 = *(_DWORD *)(v36 + 12);
          if (v177 >= 0x7F)
            v177 = 127;
          *(_BYTE *)(v36 + 16 + v177) = 0;
          v178 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)(v36 + 16), 0x8000100u);
          v179 = objc_alloc(off_253E9DBC0());
          v180 = (void *)objc_msgSend(objc_alloc(off_253E9DBC8()), "initWithAddress:", *(unsigned int *)(v36 + 4) | ((unint64_t)*(unsigned __int16 *)(v36 + 8) << 32));
          v181 = (void *)objc_msgSend(v179, "initWithUniqueIdentifier:peerAddress:", v178, v180);

          CFRelease(v178);
          v182 = *(_DWORD *)(v36 + 172);
          if ((v182 & 2) != 0)
          {
            objc_msgSend(v181, "setOptions:", objc_msgSend(v181, "options") | 1);
            v182 = *(_DWORD *)(v36 + 172);
          }
          if ((v182 & 8) != 0)
            objc_msgSend(v181, "setOptions:", objc_msgSend(v181, "options") | 2);
          if (*(_DWORD *)(v36 + 168))
          {
            v198 = 0;
            objc_msgSend(v38, "setTrafficRegistration:error:", v181, &v198);
            v183 = (id *)&v198;
          }
          else
          {
            v197 = 0;
            objc_msgSend(v38, "clearTrafficRegistration:error:", v181, &v197);
            v183 = (id *)&v197;
          }
          v184 = *v183;
          v185 = v184;
          if (v184)
            v7 = objc_msgSend(v184, "code");
          else
            v7 = 0;

LABEL_213:
          if (!(_DWORD)v7)
            return v7;
LABEL_214:
          *__error() = v7;
          return v7;
        }
      }
      else if (v36 && *(_DWORD *)(a2 + 24) == 184)
      {
        v172 = objc_alloc_init(_MergedGlobals());
        v173 = (void *)objc_msgSend(v172, "copyActiveServiceUniqueIdentifiers");
        *(_DWORD *)(*(_QWORD *)(a2 + 32) + 168) = objc_msgSend(v173, "count");

        return 0;
      }
LABEL_180:
      v7 = 4294963396;
      goto LABEL_214;
    }
    if ((_DWORD)v6 == 203)
    {
      if ((a3 & 1) != 0)
        goto LABEL_171;
      v39 = *(_QWORD *)(a2 + 32);
      if (v39 && *(_DWORD *)(a2 + 24) == 208480)
      {
        v40 = objc_alloc_init(_MergedGlobals());
        objc_msgSend(v40, "queryPeerDatabase");
        obja = (id)objc_claimAutoreleasedReturnValue();

        v41 = objc_msgSend(obja, "count");
        v42 = 100;
        if (v41 < 0x64)
          v42 = v41;
        *(_DWORD *)(v39 + 4) = v42;
        if (v42)
        {
          v43 = 0;
          v44 = (char *)(v39 + 1413);
          do
          {
            objc_msgSend(obja, "objectAtIndexedSubscript:", v43);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            _copyMACAddress((void *)(v39 + 2064 * v43 + 40), v45);
            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_RSSI"));
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)(v39 + 2064 * v43 + 100) = objc_msgSend(v46, "intValue");

            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_AWDL_ELECTION_METRIC"));
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)(v39 + 2064 * v43 + 88) = objc_msgSend(v47, "unsignedIntValue");

            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_HOSTNAME"));
            v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            objc_msgSend(v48, "cStringUsingEncoding:", 4);
            objc_msgSend(v48, "length");
            __strncpy_chk();
            v49 = v39 + 2064 * v43;
            _copyMACAddress((void *)(v49 + 52), v45);
            _copyMACAddress((void *)(v49 + 46), v45);
            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_AWDL_DISTANCE_TOP"));
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            *(_BYTE *)(v39 + 2064 * v43 + 96) = objc_msgSend(v50, "unsignedCharValue");

            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_AWDL_PLATFORM"));
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_BYTE *)(v39 + 2064 * v43 + 505) = objc_msgSend(v51, "unsignedCharValue");

            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_AWDL_VERSION"));
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_BYTE *)(v39 + 2064 * v43 + 506) = objc_msgSend(v52, "unsignedCharValue");

            objc_msgSend(v45, "valueForKey:", CFSTR("STATION_AWDL_SERVICES"));
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = objc_msgSend(v53, "count");
            if (v54 >= 0xA)
              v55 = 10;
            else
              v55 = v54;
            if (v55)
            {
              v56 = 0;
              v57 = v44;
              do
              {
                objc_msgSend(v53, "objectAtIndexedSubscript:", v56);
                v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                strncpy(v57, (const char *)objc_msgSend(v58, "cStringUsingEncoding:", 4), 0x3FuLL);

                ++v56;
                v59 = objc_msgSend(v53, "count");
                if (v59 >= 0xA)
                  v60 = 10;
                else
                  v60 = v59;
                v57 += 64;
              }
              while (v56 < v60);
            }

            ++v43;
            v44 += 2064;
          }
          while (v43 < *(unsigned int *)(v39 + 4));
        }

        return 0;
      }
      goto LABEL_180;
    }
    if ((_DWORD)v6 != 205)
    {
LABEL_170:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
      {
        v187 = "get";
        if (a3)
          v187 = "set";
        if ((int)v6 > 556)
        {
          v188 = "Error Invalid ioctl";
        }
        else if ((_DWORD)v6 == -1)
        {
          v188 = "APPLE80211_IOC_CARD_SPECIFIC";
        }
        else if ((v6 & 0x80000000) != 0 || (v188 = (const char *)gAppleIoucIndexToString[v6]) == 0)
        {
          v188 = "unknown Apple80211_IOC_";
        }
        *(_DWORD *)v199 = 136315906;
        *(_QWORD *)&v199[4] = "_Apple80211AWDLCompatibilityInternal";
        *(_WORD *)&v199[12] = 2080;
        *(_QWORD *)&v199[14] = v187;
        *(_WORD *)&v199[22] = 2080;
        v200 = v188;
        v201 = 1024;
        v202 = v6;
        _os_log_fault_impl(&dword_20647D000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "%s: unsupported %s ioctl on awdl0 for %s[%d]", v199, 0x26u);
      }
      goto LABEL_171;
    }
    if ((a3 & 1) != 0)
      goto LABEL_171;
    v12 = *(_QWORD *)(a2 + 32);
    if (!v12 || *(_DWORD *)(a2 + 24) != 8)
      goto LABEL_180;
    -[objc_class currentState](off_253E9DBD0(), "currentState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "peerSecondaryPreferredChannel");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_90:
    v34 = v14;
    *(_DWORD *)(v12 + 4) = objc_msgSend(v14, "channelNumber");
LABEL_166:

LABEL_167:
    return 0;
  }
  if ((int)v6 > 222)
  {
    if ((_DWORD)v6 == 223)
    {
      if ((a3 & 1) != 0)
        goto LABEL_171;
      objb = *(char **)(a2 + 32);
      if (objb && *(_DWORD *)(a2 + 24) == 3712)
      {
        v61 = objc_alloc_init(_MergedGlobals());
        v62 = (void *)objc_msgSend(v61, "copyStatistics");

        v190 = v62;
        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_FLAGS"));
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 1) = objc_msgSend(v63, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_RXBYTES"));
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 2) = objc_msgSend(v64, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_TXBYTES"));
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 3) = objc_msgSend(v65, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PACKET_FAILURES"));
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 4) = objc_msgSend(v66, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_SELF_INFRA_CHANNEL"));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 5) = objc_msgSend(v67, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_SELF_INFRA_CHANNEL_FLAGS"));
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 904) = objc_msgSend(v68, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_INFRA_CHANNEL"));
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objb[24] = objc_msgSend(v69, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_INFRA_CHANNEL_FLAGS"));
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 905) = objc_msgSend(v70, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_PEERS"));
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objb[25] = objc_msgSend(v71, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_CACHED_PEERS"));
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objb[26] = objc_msgSend(v72, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_CACHED_PEERS_2GHZ"));
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objb[27] = objc_msgSend(v73, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_CACHED_PEERS_5GHZ"));
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objb[28] = objc_msgSend(v74, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_CACHED_PEERS_DFS"));
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objb[29] = objc_msgSend(v75, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_CACHED_PEERS_UNASSOC"));
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        objb[30] = objc_msgSend(v76, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_SYNC_CHANGES"));
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        *((_QWORD *)objb + 11) = objc_msgSend(v77, "unsignedIntegerValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_HOPCOUNT"));
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = objc_msgSend(v78, "count");
        v80 = 6;
        if (v79 < 6)
          v80 = v79;
        if (v80)
        {
          v81 = 0;
          v82 = (double *)(objb + 112);
          do
          {
            objc_msgSend(v78, "objectAtIndexedSubscript:", v81);
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "valueForKey:", CFSTR("AWDL_STATS_HISTOGRAM_BIN_START"));
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            *(v82 - 2) = (double)(unint64_t)objc_msgSend(v84, "unsignedIntegerValue");

            objc_msgSend(v78, "objectAtIndexedSubscript:", v81);
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v85, "valueForKey:", CFSTR("AWDL_STATS_HISTOGRAM_BIN_END"));
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            *(v82 - 1) = (double)(unint64_t)objc_msgSend(v86, "unsignedIntegerValue");

            objc_msgSend(v78, "objectAtIndexedSubscript:", v81);
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "valueForKey:", CFSTR("AWDL_STATS_HISTOGRAM_BIN_VALUE"));
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *v82 = (double)(unint64_t)objc_msgSend(v88, "unsignedIntegerValue");
            v82 += 3;

            ++v81;
            v89 = objc_msgSend(v78, "count");
            if (v89 >= 6)
              v90 = 6;
            else
              v90 = v89;
          }
          while (v81 < v90);
        }
        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PARENTRSSI"));
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        v92 = objc_msgSend(v91, "count");
        v93 = 3;
        if (v92 < 3)
          v93 = v92;
        if (v93)
        {
          v94 = 0;
          v95 = (double *)(objb + 256);
          do
          {
            objc_msgSend(v91, "objectAtIndexedSubscript:", v94);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v96, "valueForKey:", CFSTR("AWDL_STATS_HISTOGRAM_BIN_START"));
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            *(v95 - 2) = (double)(unint64_t)objc_msgSend(v97, "unsignedIntegerValue");

            objc_msgSend(v91, "objectAtIndexedSubscript:", v94);
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v98, "valueForKey:", CFSTR("AWDL_STATS_HISTOGRAM_BIN_END"));
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            *(v95 - 1) = (double)(unint64_t)objc_msgSend(v99, "unsignedIntegerValue");

            objc_msgSend(v91, "objectAtIndexedSubscript:", v94);
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "valueForKey:", CFSTR("AWDL_STATS_HISTOGRAM_BIN_VALUE"));
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            *v95 = (double)(unint64_t)objc_msgSend(v101, "unsignedIntegerValue");
            v95 += 3;

            ++v94;
            v102 = objc_msgSend(v91, "count");
            if (v102 >= 3)
              v103 = 3;
            else
              v103 = v102;
          }
          while (v94 < v103);
        }
        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_SESSION_DURATION"));
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        *((_QWORD *)objb + 6) = objc_msgSend(v104, "unsignedIntegerValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_SUSPEND_DURATION"));
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        *((_QWORD *)objb + 7) = objc_msgSend(v105, "unsignedIntegerValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_SUSPEND_COUNT"));
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 16) = objc_msgSend(v106, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_VERSION_BITMAP"));
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        *((_WORD *)objb + 34) = objc_msgSend(v107, "unsignedShortValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_MCAST_RXBYTES"));
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 18) = objc_msgSend(v108, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_MCAST_TXBYTES"));
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 19) = objc_msgSend(v109, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_AF_RXBYTES"));
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 20) = objc_msgSend(v110, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DFSPAIRPLAY_CONNECTED"));
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 84) = objc_msgSend(v111, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DFSPAIRPLAY_FAILED"));
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 85) = objc_msgSend(v112, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DFSP_CSA_PEER"));
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 86) = objc_msgSend(v113, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DFSP_CSA_AP"));
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 87) = objc_msgSend(v114, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DFSP_CSA_SUSPECT"));
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 88) = objc_msgSend(v115, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DFSP_CSA_RESUME"));
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 89) = objc_msgSend(v116, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_RT_SESSION"));
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        *((_WORD *)objb + 1781) = objc_msgSend(v117, "unsignedShortValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DYNSDB_ALLOWED"));
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        *((_WORD *)objb + 1782) = objc_msgSend(v118, "unsignedShortValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DYNSDB_ENTRY_OK"));
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        *((_WORD *)objb + 1783) = objc_msgSend(v119, "unsignedShortValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DYNSDB_RATE_EXIT"));
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        *((_WORD *)objb + 1784) = objc_msgSend(v120, "unsignedShortValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_DYNSDB_ALLOWED"));
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        *((_WORD *)objb + 1785) = objc_msgSend(v121, "unsignedShortValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_CHANNEL_STEER_COUNT_2G"));
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 913) = objc_msgSend(v122, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_CHANNEL_STEER_COUNT_5G"));
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 914) = objc_msgSend(v123, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_CHANNEL_STEER_BEFORE"));
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 915) = objc_msgSend(v124, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PEER_CHANNEL_STEER_AFTER"));
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 916) = objc_msgSend(v125, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_STATS_DWELL_SESSION_COUNT"));
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 917) = objc_msgSend(v126, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_TOTAL_DURATION"));
        v127 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 919) = objc_msgSend(v127, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_STATS_INACTIVITY_DURATION"));
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 920) = objc_msgSend(v128, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_STATS_ACTIVITY_DURATION"));
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 921) = objc_msgSend(v129, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PERCENTAGE_INACTIVITY"));
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 922) = objc_msgSend(v130, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_TIME_TO_SERVICE"));
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 923) = objc_msgSend(v131, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PERCENTAGE_INFRA_IDLE"));
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 924) = objc_msgSend(v132, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PERCENTAGE_INFRA_REAL"));
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 925) = objc_msgSend(v133, "unsignedIntValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_PERCENTAGE_INFRA_NONREAL"));
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        *((_DWORD *)objb + 926) = objc_msgSend(v134, "unsignedIntValue");

        objc_msgSend(v190, "objectForKey:", CFSTR("AWDL_STATS_OUI"));
        v135 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v136 = (const void *)objc_msgSend(v135, "bytes");
        v189 = v135;
        v137 = objc_msgSend(v135, "length");
        if (v137 >= 3)
          v138 = 3;
        else
          v138 = v137;
        memcpy(objb + 3708, v136, v138);
        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_STATES"));
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = objc_msgSend(v139, "count");
        v141 = 54;
        if (v140 < 0x36)
          v141 = v140;
        if (v141)
        {
          v142 = 0;
          v143 = objb + 368;
          do
          {
            objc_msgSend(v139, "objectAtIndexedSubscript:", v142);
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v144, "valueForKey:", CFSTR("AWDL_STATS_STATE_COUNT"));
            v145 = (void *)objc_claimAutoreleasedReturnValue();
            *((_DWORD *)v143 - 2) = objc_msgSend(v145, "unsignedIntValue");

            objc_msgSend(v139, "objectAtIndexedSubscript:", v142);
            v146 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v146, "valueForKey:", CFSTR("AWDL_STATS_STATE_DURATION"));
            v147 = (void *)objc_claimAutoreleasedReturnValue();
            *v143 = objc_msgSend(v147, "unsignedIntegerValue");
            v143 += 2;

            ++v142;
            v148 = objc_msgSend(v139, "count");
            if (v148 >= 0x36)
              v149 = 54;
            else
              v149 = v148;
          }
          while (v142 < v149);
        }
        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_SERVICES"));
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        v151 = objc_msgSend(v150, "count");
        v152 = 16;
        if (v151 < 0x10)
          v152 = v151;
        if (v152)
        {
          v153 = 0;
          v154 = objb + 2808;
          do
          {
            objc_msgSend(v150, "objectAtIndexedSubscript:", v153);
            v155 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v155, "valueForKey:", CFSTR("AWDL_STATS_SERVICE_DURATION"));
            v156 = (void *)objc_claimAutoreleasedReturnValue();
            *((_QWORD *)v154 - 1) = objc_msgSend(v156, "unsignedLongValue");

            objc_msgSend(v150, "objectAtIndexedSubscript:", v153);
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v157, "valueForKey:", CFSTR("AWDL_STATS_SERVICE_ID"));
            v158 = (void *)objc_claimAutoreleasedReturnValue();
            *((_DWORD *)v154 - 3) = objc_msgSend(v158, "unsignedIntValue");

            objc_msgSend(v150, "objectAtIndexedSubscript:", v153);
            v159 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v159, "valueForKey:", CFSTR("AWDL_STATS_SERVICE_TYPE"));
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            *(v154 - 15) = objc_msgSend(v160, "unsignedCharValue");

            objc_msgSend(v150, "objectAtIndexedSubscript:", v153);
            v161 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v161, "valueForKey:", CFSTR("AWDL_STATS_SERVICE_KEY"));
            v162 = (void *)objc_claimAutoreleasedReturnValue();

            v163 = objc_retainAutorelease(v162);
            strncpy(v154, (const char *)objc_msgSend(v163, "cStringUsingEncoding:", 4), 0x1FuLL);

            ++v153;
            v164 = objc_msgSend(v150, "count");
            if (v164 >= 0x10)
              v165 = 16;
            else
              v165 = v164;
            v154 += 48;
          }
          while (v153 < v165);
        }
        objc_msgSend(v190, "valueForKey:", CFSTR("AWDL_STATS_NUM_CACHED_PEERS_6GHZ"));
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        objb[3624] = objc_msgSend(v166, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("APPLE80211KEY_AWDL_STATS_SELF_6E_CAPABLE"));
        v167 = (void *)objc_claimAutoreleasedReturnValue();
        objb[3625] = objc_msgSend(v167, "unsignedCharValue");

        objc_msgSend(v190, "valueForKey:", CFSTR("APPLE80211KEY_AWDL_STATS_PEER_6E_CAP_COUNT"));
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        objb[3626] = objc_msgSend(v168, "unsignedCharValue");

        v13 = v190;
        goto LABEL_167;
      }
      goto LABEL_180;
    }
    if ((_DWORD)v6 != 244)
    {
      if ((_DWORD)v6 != 351)
        goto LABEL_170;
      goto LABEL_4;
    }
    if ((a3 & 1) != 0)
      goto LABEL_171;
    v169 = *(_WORD **)(a2 + 32);
    if (!v169 || *(_DWORD *)(a2 + 24) != 12)
      goto LABEL_180;
    -[objc_class currentState](off_253E9DBD0(), "currentState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "peerMasterChannel");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v169[3] = objc_msgSend(v170, "channelNumber");

    objc_msgSend(v13, "peerPrimaryPreferredChannel");
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    v169[2] = objc_msgSend(v171, "channelNumber");

    objc_msgSend(v13, "peerSecondaryPreferredChannel");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v169[4] = objc_msgSend(v34, "channelNumber");
    goto LABEL_166;
  }
  if ((_DWORD)v6 == 208)
    goto LABEL_4;
  if ((_DWORD)v6 != 217)
  {
    if ((_DWORD)v6 != 220)
      goto LABEL_170;
    goto LABEL_4;
  }
  if ((a3 & 1) != 0)
    goto LABEL_171;
  v35 = *(_QWORD *)(a2 + 32);
  if (!v35 || *(_DWORD *)(a2 + 24) != 8)
    goto LABEL_180;
  *(_DWORD *)(v35 + 4) = 0;
  return 0;
}

void sub_2064B9784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

Class initWiFiP2PAWDLStateMonitor()
{
  Class result;

  if (qword_2544F57B8 != -1)
    dispatch_once(&qword_2544F57B8, &__block_literal_global_0);
  result = objc_getClass("WiFiP2PAWDLStateMonitor");
  _MergedGlobals_7 = (uint64_t)result;
  _MergedGlobals = (uint64_t (*)())WiFiP2PAWDLStateMonitorFunction;
  return result;
}

id WiFiP2PAWDLStateMonitorFunction()
{
  return (id)_MergedGlobals_7;
}

Class initAWDLServiceDiscoveryManager()
{
  Class result;

  if (qword_2544F57B8 != -1)
    dispatch_once(&qword_2544F57B8, &__block_literal_global_0);
  result = objc_getClass("AWDLServiceDiscoveryManager");
  qword_2544F57C0 = (uint64_t)result;
  off_253E9DBB8 = (uint64_t (*)())AWDLServiceDiscoveryManagerFunction;
  return result;
}

id AWDLServiceDiscoveryManagerFunction()
{
  return (id)qword_2544F57C0;
}

Class initAWDLTrafficRegistrationConfiguration()
{
  Class result;

  if (qword_2544F57B8 != -1)
    dispatch_once(&qword_2544F57B8, &__block_literal_global_0);
  result = objc_getClass("AWDLTrafficRegistrationConfiguration");
  qword_2544F57C8 = (uint64_t)result;
  off_253E9DBC0 = (uint64_t (*)())AWDLTrafficRegistrationConfigurationFunction;
  return result;
}

id AWDLTrafficRegistrationConfigurationFunction()
{
  return (id)qword_2544F57C8;
}

Class initWiFiMACAddress()
{
  Class result;

  if (qword_2544F57B8 != -1)
    dispatch_once(&qword_2544F57B8, &__block_literal_global_0);
  result = objc_getClass("WiFiMACAddress");
  qword_2544F57D0 = (uint64_t)result;
  off_253E9DBC8 = (uint64_t (*)())WiFiMACAddressFunction;
  return result;
}

id WiFiMACAddressFunction()
{
  return (id)qword_2544F57D0;
}

Class initWiFiP2PAWDLState()
{
  Class result;

  if (qword_2544F57B8 != -1)
    dispatch_once(&qword_2544F57B8, &__block_literal_global_0);
  result = objc_getClass("WiFiP2PAWDLState");
  qword_2544F57D8 = (uint64_t)result;
  off_253E9DBD0 = (uint64_t (*)())WiFiP2PAWDLStateFunction;
  return result;
}

id WiFiP2PAWDLStateFunction()
{
  return (id)qword_2544F57D8;
}

Class initWiFiP2PSPITransactionRequestor()
{
  Class result;

  if (qword_2544F57B8 != -1)
    dispatch_once(&qword_2544F57B8, &__block_literal_global_0);
  result = objc_getClass("WiFiP2PSPITransactionRequestor");
  qword_2544F57E0 = (uint64_t)result;
  off_253E9DBD8 = (uint64_t (*)())WiFiP2PSPITransactionRequestorFunction;
  return result;
}

id WiFiP2PSPITransactionRequestorFunction()
{
  return (id)qword_2544F57E0;
}

void _copyMACAddress(void *a1, void *a2)
{
  const void *v3;
  unint64_t v4;
  size_t v5;
  id v6;

  objc_msgSend(a2, "objectForKey:");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v3 = (const void *)objc_msgSend(v6, "bytes");
  v4 = objc_msgSend(v6, "length");
  if (v4 >= 6)
    v5 = 6;
  else
    v5 = v4;
  memcpy(a1, v3, v5);

}

void *funcAddr(char *__symbol)
{
  void *result;
  char *v3;
  timespec v4;
  const char *v5;
  char v6[1024];
  stat v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  result = (void *)image;
  if (image)
    return dlsym(result, __symbol);
  v3 = getenv("DYLD_IMAGE_SUFFIX");
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blksize = v4;
  *(timespec *)v7.st_qspare = v4;
  v7.st_birthtimespec = v4;
  *(timespec *)&v7.st_size = v4;
  v7.st_mtimespec = v4;
  v7.st_ctimespec = v4;
  *(timespec *)&v7.st_uid = v4;
  v7.st_atimespec = v4;
  *(timespec *)&v7.st_dev = v4;
  memset(v6, 170, sizeof(v6));
  __strlcpy_chk();
  if (v3)
    __strlcat_chk();
  v5 = stat(v6, &v7) < 0 ? "/usr/lib/libWAPI.dylib" : v6;
  result = dlopen(v5, 6);
  image = (uint64_t)result;
  if (result)
    return dlsym(result, __symbol);
  return result;
}

uint64_t _WAPIStop(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!image)
    return 0;
  v2 = (uint64_t (*)(uint64_t))_WAPIStop_wapistop;
  if (_WAPIStop_wapistop)
    return v2(a1);
  v2 = (uint64_t (*)(uint64_t))funcAddr("WAPIStop");
  _WAPIStop_wapistop = v2;
  if (v2)
    return v2(a1);
  else
    return 0xFFFFFFFFLL;
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x24BDAC308](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x24BDAC310](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC318](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x24BDBB7E8](theArray, range.location, range.length, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB810](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x24BDBB880](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x24BDBB898](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x24BDBB8A0](theArray, range.location, range.length, comparator, context);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x24BDBBC88](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDE0](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x24BDBBE48](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDBC1C0](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x24BDBC2C8](rl, source, mode);
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  MEMORY[0x24BDBC2D0](rl, timer, mode);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x24BDBC338](rl, mode, block);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x24BDBC360](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x24BDBC390](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
  MEMORY[0x24BDBC3A8](timer);
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
  MEMORY[0x24BDBC3B0](timer, fireDate);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x24BDBC3B8](rl);
}

CFRunLoopSourceRef CFSocketCreateRunLoopSource(CFAllocatorRef allocator, CFSocketRef s, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x24BDBC450](allocator, s, order);
}

CFSocketRef CFSocketCreateWithNative(CFAllocatorRef allocator, CFSocketNativeHandle sock, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context)
{
  return (CFSocketRef)MEMORY[0x24BDBC458](allocator, *(_QWORD *)&sock, callBackTypes, callout, context);
}

CFSocketNativeHandle CFSocketGetNative(CFSocketRef s)
{
  return MEMORY[0x24BDBC470](s);
}

void CFSocketInvalidate(CFSocketRef s)
{
  MEMORY[0x24BDBC480](s);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x24BDBC4A8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x24BDBC4B0](theString, cStr, *(_QWORD *)&encoding);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC530](alloc, data, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC660](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

uint64_t CNCRC()
{
  return MEMORY[0x24BDAC3B8]();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7EE0](*(_QWORD *)&connection, *(_QWORD *)&selector, *(_QWORD *)&wake_port, reference, *(_QWORD *)&referenceCnt, input, *(_QWORD *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7F08](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectMapMemory(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return MEMORY[0x24BDD7F18](*(_QWORD *)&connect, *(_QWORD *)&memoryType, *(_QWORD *)&intoTask, atAddress, ofSize, *(_QWORD *)&options);
}

kern_return_t IOConnectUnmapMemory(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return MEMORY[0x24BDD7F80](*(_QWORD *)&connect, *(_QWORD *)&memoryType, *(_QWORD *)&fromTask, atAddress);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x24BDD8668](*(_QWORD *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x24BDD8680](*(_QWORD *)&bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x24BDD8690](*(_QWORD *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x24BDD8698](notify);
}

mach_port_t IONotificationPortGetMachPort(IONotificationPortRef notify)
{
  return MEMORY[0x24BDD86A0](notify);
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x24BDD86A8](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
  MEMORY[0x24BDD86B0](notify, queue);
}

uint32_t IOObjectGetKernelRetainCount(io_object_t object)
{
  return MEMORY[0x24BDD86E0](*(_QWORD *)&object);
}

uint32_t IOObjectGetUserRetainCount(io_object_t object)
{
  return MEMORY[0x24BDD86E8](*(_QWORD *)&object);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD8928](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x24BDD8960](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x24BDD8970](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x24BDD8990](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x24BDD89B8](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x24BDE8D48](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x24BDBD148]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x24BDAC7B8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x24BDAC908]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x24BDAC910]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x24BDAC920]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x24BDAD9C0](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDE0](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x24BDADF40](object, context);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFA0](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x24BDADFB8](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

ether_addr *__cdecl ether_aton(const char *a1)
{
  return (ether_addr *)MEMORY[0x24BDAE1D8](a1);
}

char *__cdecl ether_ntoa(const ether_addr *a1)
{
  return (char *)MEMORY[0x24BDAE1E0](a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x24BDAE468](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x24BDAE660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x24BDAE8C8](*(_QWORD *)&a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return MEMORY[0x24BDAF3D8]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x24BDAF6E0](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x24BDAFC70](*(_QWORD *)&a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x24BDAFE50](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF30](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF38](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x24BDAFFC0](__s, __charset);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x24BDB0128](*(_QWORD *)&a1, a2);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

void uuid_generate(uuid_t out)
{
  MEMORY[0x24BDB0318](out);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x24BDB0338](uu, out);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x24BDB0710](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x24BDB0718](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x24BDB0740](name, targetq, flags);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x24BDB07B0](connection, message, replyq, handler);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x24BDB07C8](connection, handler);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB08C0](keys, values, count);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x24BDB0AE0](object);
}

