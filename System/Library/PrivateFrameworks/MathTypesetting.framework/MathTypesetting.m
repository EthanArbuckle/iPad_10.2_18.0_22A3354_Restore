uint64_t MathPresentation.SourceAttribution.content.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MathPresentation.SourceAttribution.content.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MathPresentation.SourceAttribution.content.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.SourceAttribution.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MathPresentation.SourceAttribution.range.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MathPresentation.SourceAttribution.range.modify())()
{
  return nullsub_1;
}

void MathPresentation.enumerate<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;

  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    swift_unknownObjectRetain();
    v6 = OUTLINED_FUNCTION_0();
    v7 = OUTLINED_FUNCTION_0();
    sub_241191A34(v6, (uint64_t)v7, a1, a2, a3);
    swift_unknownObjectRelease();

  }
}

void sub_241191A34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t i;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD v36[4];

  if (objc_msgSend(a1, sel_canContainBoxes))
  {
    v10 = objc_msgSend(a1, sel_containedBoxes);
    sub_241192090();
    v11 = sub_24120DFE4();

    objc_msgSend(a1, sel_boundsWithRoot_, a2);
    (*(void (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  }
  else
  {
    v11 = 0;
  }
  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    v13 = (void *)v12;
    v14 = a1;
    v15 = objc_msgSend(v13, sel_attribution);
    v16 = objc_msgSend(v15, sel_source);

    if (!v16)
    {

      goto LABEL_16;
    }
    v35 = v14;
    v17 = sub_24120DFB4();
    v19 = v18;

    v20 = objc_msgSend(v13, sel_attribution);
    objc_msgSend(v20, sel_range);

    v21 = sub_24120DFF0();
    if ((v23 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      goto LABEL_16;
    }
    v36[0] = v17;
    v36[1] = v19;
    v36[2] = v21;
    v36[3] = v22;
    v24 = v35;
    objc_msgSend(v35, sel_boundsWithRoot_, a2);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a5 + 24))(v36, a4, a5);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  objc_opt_self();
  v25 = swift_dynamicCastObjCClass();
  if (v25)
  {
    v26 = (void *)v25;
    v27 = a1;
    v28 = objc_msgSend(v26, sel_cgPath);
    objc_msgSend(v27, sel_boundsWithRoot_, a2);
    (*(void (**)(id, uint64_t, uint64_t))(a5 + 32))(v28, a4, a5);
LABEL_10:

    goto LABEL_16;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v24 = a1;
    objc_msgSend(v24, sel_boundsWithRoot_, a2);
    (*(void (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5);
LABEL_15:

    goto LABEL_16;
  }
  objc_opt_self();
  v33 = swift_dynamicCastObjCClass();
  if (v33)
  {
    v34 = (void *)v33;
    v27 = a1;
    v28 = objc_msgSend(v34, sel_attributedString);
    objc_msgSend(v27, sel_boundsWithRoot_, a2);
    (*(void (**)(id, uint64_t, uint64_t))(a5 + 48))(v28, a4, a5);
    goto LABEL_10;
  }
LABEL_16:
  if (!v11)
    return;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v29 = sub_24120E020();
    swift_bridgeObjectRelease();
    if (v29)
      goto LABEL_19;
  }
  else
  {
    v29 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29)
    {
LABEL_19:
      if (v29 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v29; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0)
          v31 = (id)MEMORY[0x24268FEF4](i, v11);
        else
          v31 = *(id *)(v11 + 8 * i + 32);
        v32 = v31;
        sub_241191A34(v31, a2, a3, a4, a5);

      }
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitBeginContainer(bounds:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitEndContainer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitSourceAttribution(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitPath(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitRule(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MathPresentationEnumerationCollector.emitString(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t _s17SourceAttributionVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s17SourceAttributionVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s17SourceAttributionVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s17SourceAttributionVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _s17SourceAttributionVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t _s17SourceAttributionVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s17SourceAttributionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MathPresentation.SourceAttribution()
{
  return &type metadata for MathPresentation.SourceAttribution;
}

void type metadata accessor for CGContext(uint64_t a1)
{
  sub_24119204C(a1, &qword_2571021A8);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_241191FDC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_241191FFC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_24119204C(a1, &qword_2571021B0);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_24119204C(a1, &qword_2571021B8);
}

void sub_24119204C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_241192090()
{
  unint64_t result;

  result = qword_2571021C0;
  if (!qword_2571021C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2571021C0);
  }
  return result;
}

id OUTLINED_FUNCTION_0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 235));
}

void MathPresentation.layout(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;

  v2 = v1;
  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = *((_BYTE *)a1 + 40);
  v9 = a1[6];
  v10 = a1[7];
  v11 = *((_BYTE *)a1 + 64);
  v12 = (void *)a1[9];
  type metadata accessor for MathPresentation._LayoutContext();
  v17[0] = v3;
  v17[1] = v5;
  v17[2] = v4;
  v17[3] = v6;
  v17[4] = v7;
  v18 = v8;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v13 = v12;
  OUTLINED_FUNCTION_4();
  v16 = sub_2411921D0((uint64_t)v17);
  v14 = *(void **)(v2 + 8);
  v15 = v13;

  *(_QWORD *)(v2 + 8) = v12;
  objc_msgSend(*(id *)v2, sel_layoutWithContext_, v16);

}

uint64_t type metadata accessor for MathPresentation._LayoutContext()
{
  return objc_opt_self();
}

id sub_2411921D0(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char v4;
  char v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = &v3[OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context];
  *(_QWORD *)v7 = *(_QWORD *)a1;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(a1 + 24);
  v7[40] = v4;
  *((_OWORD *)v7 + 3) = *(_OWORD *)(a1 + 48);
  v7[64] = v5;
  *((_QWORD *)v7 + 9) = v6;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id MathPresentation.width.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_width);
}

id MathPresentation.height.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_height);
}

id MathPresentation.depth.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_depth);
}

id MathPresentation.vsize.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_vsize);
}

id MathPresentation.drawingBounds.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_erasableBounds);
}

void MathPresentation.draw(in:offset:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  CGColor *v10;
  id v11;
  CGColor *v12;
  CGContext *v13;
  CGColor *color;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(void **)v3;
  v10 = *(CGColor **)(v3 + 8);
  v11 = objc_msgSend(objc_allocWithZone((Class)EQKitRenderContext), sel_initWithCGContext_, *(_QWORD *)a1);
  objc_msgSend(v11, sel_setRendersDebugRects_, v6 & 1);
  objc_msgSend(v11, sel_setHighlightColor_, v8);
  objc_msgSend(v11, sel_setSelection_, v7);
  if (v10)
    color = v10;
  else
    color = CGColorCreateGenericGray(0.0, 1.0);
  v12 = v10;
  v13 = (CGContext *)objc_msgSend(v11, sel_cgContext);
  CGContextSetFillColorWithColor(v13, color);

  objc_msgSend(v9, sel_renderIntoContext_offset_, v11, a2, a3);
}

MathTypesetting::MathPresentation::Selection_optional __swiftcall MathPresentation.selection(at:)(CGPoint at)
{
  _QWORD *v1;
  id *v2;
  objc_class *v3;
  EQKitBox *v4;
  Swift::Bool v5;
  MathTypesetting::MathPresentation::Selection_optional result;

  *v1 = objc_msgSend(*v2, sel_selectionForPoint_, at.x, at.y);
  OUTLINED_FUNCTION_1();
  result.value.selection._box = v4;
  result.value.selection.super.isa = v3;
  result.is_nil = v5;
  return result;
}

BOOL sub_2411923F4(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_241192404()
{
  sub_24120E038();
  OUTLINED_FUNCTION_1();
}

uint64_t sub_241192424()
{
  sub_24120E02C();
  sub_24120E038();
  return sub_24120E050();
}

BOOL sub_241192468(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2411923F4(*a1, *a2);
}

uint64_t sub_241192474()
{
  return sub_241192424();
}

void sub_24119247C()
{
  sub_241192404();
}

uint64_t sub_241192484()
{
  sub_24120E02C();
  sub_24120E038();
  return sub_24120E050();
}

void static MathPresentation.Format.mathML.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static MathPresentation.Format.laTeX.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static MathPresentation.Format.format(from:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = sub_24120DFD8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24120DFCC();
  v6 = sub_24120DFC0();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8 >> 60 == 15)
  {
    *a1 = 2;
  }
  else
  {
    static MathPresentation.Format.format(from:)(a1);
    return sub_241193330(v6, v8);
  }
  return result;
}

void static MathPresentation.Format.format(from:)(_BYTE *a1@<X8>)
{
  void *v2;
  void *v3;
  unint64_t v4;
  unsigned int v5;

  v2 = (void *)objc_opt_self();
  v3 = (void *)sub_24120DF9C();
  v4 = (unint64_t)objc_msgSend(v2, sel_formatFromData_, v3);

  v5 = 0x10002u >> (8 * v4);
  if (v4 >= 3)
    LOBYTE(v5) = 2;
  *a1 = v5;
  OUTLINED_FUNCTION_5();
}

BOOL static MathPresentation.Format.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __swiftcall MathPresentation.Environment.init()(MathTypesetting::MathPresentation::Environment *__return_ptr retstr)
{
  retstr->env.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_createDefaultEnvironment);
  OUTLINED_FUNCTION_1();
}

id sub_24119268C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_createDefaultEnvironment);
  qword_257102230 = (uint64_t)result;
  return result;
}

id static MathPresentation.Environment.default.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_257102140 != -1)
    swift_once();
  v2 = (void *)qword_257102230;
  *a1 = qword_257102230;
  return v2;
}

id MathPresentation.Environment.sourceAttribution.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_sourceAttribution);
}

id sub_241192734@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = MathPresentation.Environment.sourceAttribution.getter();
  *a1 = result & 1;
  return result;
}

id MathPresentation.Environment.sourceAttribution.setter(char a1)
{
  void **v1;

  return OUTLINED_FUNCTION_2(a1, sel_setSourceAttribution_, *v1);
}

void MathPresentation.Environment.sourceAttribution.modify(uint64_t a1)
{
  id *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*v1, sel_sourceAttribution);
  OUTLINED_FUNCTION_1();
}

id sub_2411927BC(uint64_t a1, uint64_t a2)
{
  return sub_24119287C(a1, a2, (SEL *)&selRef_setSourceAttribution_);
}

id MathPresentation.Environment.allowSingleLineHeight.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_allowSingleLineHeight);
}

id sub_2411927E8@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = MathPresentation.Environment.allowSingleLineHeight.getter();
  *a1 = result & 1;
  return result;
}

id MathPresentation.Environment.allowSingleLineHeight.setter(char a1)
{
  void **v1;

  return OUTLINED_FUNCTION_2(a1, sel_setAllowSingleLineHeight_, *v1);
}

void MathPresentation.Environment.allowSingleLineHeight.modify(uint64_t a1)
{
  id *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*v1, sel_allowSingleLineHeight);
  OUTLINED_FUNCTION_1();
}

id sub_241192870(uint64_t a1, uint64_t a2)
{
  return sub_24119287C(a1, a2, (SEL *)&selRef_setAllowSingleLineHeight_);
}

id sub_24119287C(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(**(id **)a1, *a3, *(unsigned __int8 *)(a1 + 8));
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MathPresentation.Model.init(_:format:environment:)(MathTypesetting::MathPresentation::Model_optional *__return_ptr retstr, Swift::String _, MathTypesetting::MathPresentation::Format format, MathTypesetting::MathPresentation::Environment *environment)
{
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  Class isa;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  MathTypesetting::MathPresentation::Model_optional *v19;

  v6 = *(unsigned __int8 **)&format;
  v19 = retstr;
  v7 = sub_24120DFD8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v6;
  isa = environment->env.super.isa;
  sub_24120DFCC();
  v13 = sub_24120DFC0();
  v15 = v14;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v15 >> 60 == 15)
  {

    v16 = 0;
LABEL_7:
    v19->value.model.super.isa = v16;
    return;
  }
  if (v11)
    v17 = 2;
  else
    v17 = 1;
  sub_241193534(0, &qword_257102238);
  v16 = (objc_class *)sub_2411929D4(v13, v15, v17, isa);
  if (!v4)
    goto LABEL_7;
}

id sub_2411929D4(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = (void *)sub_24120DF9C();
  v13[0] = 0;
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_equationWithData_format_environment_error_, v8, a3, a4, v13);

  if (v9)
  {
    v10 = v13[0];
  }
  else
  {
    v11 = v13[0];
    sub_24120DF90();

    swift_willThrow();
  }

  sub_241193344(a1, a2);
  return v9;
}

id MathPresentation.Model.layout(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id result;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v23[5];
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v10 = a1[6];
  v9 = a1[7];
  v11 = (void *)a1[9];
  v20 = a1[8];
  result = objc_msgSend(*v2, sel_newLayout);
  if (v5 == 1)
  {
    v11 = 0;
  }
  else
  {
    v21 = result;
    type metadata accessor for MathPresentation._LayoutContext();
    v19 = v9;
    v23[0] = v4;
    v23[1] = v3;
    v23[2] = v5;
    v23[3] = v6;
    v23[4] = v7;
    v24 = v8 & 1;
    v25 = v10;
    v26 = v9;
    v27 = v20 & 1;
    v28 = v11;
    v13 = v11;
    swift_bridgeObjectRetain_n();
    v14 = v4;
    v15 = v7;
    v16 = v13;
    v17 = sub_2411921D0((uint64_t)v23);
    v18 = v16;
    objc_msgSend(v21, sel_layoutWithContext_, v17);

    sub_241193388(v14, v3, v5, v6, v15, v8, v10, v19, v20, v11);
    result = v21;
  }
  *a2 = result;
  a2[1] = v11;
  return result;
}

double MathPresentation.LayoutContext.baseFontSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MathPresentation.LayoutContext.baseFontSize.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*MathPresentation.LayoutContext.baseFontSize.modify())()
{
  return nullsub_1;
}

void MathPresentation.LayoutContext.baseFontName.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1();
}

void MathPresentation.LayoutContext.baseFontName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  OUTLINED_FUNCTION_5();
}

uint64_t (*MathPresentation.LayoutContext.baseFontName.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.targetSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MathPresentation.LayoutContext.targetSize.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = result;
  *(_QWORD *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = a3 & 1;
  return result;
}

uint64_t (*MathPresentation.LayoutContext.targetSize.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.containerSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t MathPresentation.LayoutContext.containerSize.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 48) = result;
  *(_QWORD *)(v3 + 56) = a2;
  *(_BYTE *)(v3 + 64) = a3 & 1;
  return result;
}

uint64_t (*MathPresentation.LayoutContext.containerSize.modify())()
{
  return nullsub_1;
}

void MathPresentation.LayoutContext.baseColor.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 72);
  OUTLINED_FUNCTION_1();
}

void MathPresentation.LayoutContext.baseColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  OUTLINED_FUNCTION_1();
}

uint64_t (*MathPresentation.LayoutContext.baseColor.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.LayoutContext.init(baseFontSize:baseFontName:targetSize:containerSize:baseColor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11)
{
  *(double *)a9 = a10;
  *(_QWORD *)(a9 + 8) = result;
  *(_QWORD *)(a9 + 16) = a2;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_BYTE *)(a9 + 40) = a5 & 1;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 56) = a7;
  *(_BYTE *)(a9 + 64) = a8 & 1;
  *(_QWORD *)(a9 + 72) = a11;
  return result;
}

void MathPresentation.LayoutContext.init(font:)(const __CTFont *a1@<X0>, uint64_t a2@<X8>)
{
  CGFloat Size;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Size = CTFontGetSize(a1);
  v5 = (__CFString *)CTFontCopyPostScriptName(a1);
  v6 = sub_24120DFB4();
  v8 = v7;

  *(CGFloat *)a2 = Size;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  *(_QWORD *)(a2 + 72) = 0;
}

double sub_241192E08()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context);
}

void sub_241192E5C()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_1();
}

double sub_241192EAC()
{
  uint64_t v0;
  double result;

  result = 0.0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 40) & 1) == 0)
    return *(double *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 24);
  return result;
}

double sub_241192EF0()
{
  uint64_t v0;
  double result;

  result = 0.0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 64) & 1) == 0)
    return *(double *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 48);
  return result;
}

void sub_241192F34()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR____TtCV15MathTypesetting16MathPresentation14_LayoutContext_context + 72);
  OUTLINED_FUNCTION_1();
}

void sub_241192F60()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_241192F98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MathPresentation.DrawingContext.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t MathPresentation.DrawingContext.Options.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MathPresentation.DrawingContext.Options.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.DrawingContext.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static MathPresentation.DrawingContext.Options.debugRects.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_241193038@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return MathPresentation.DrawingContext.Options.init(rawValue:)(*a1, a2);
}

uint64_t sub_241193040()
{
  return sub_241193048();
}

uint64_t sub_241193048()
{
  sub_24120E02C();
  sub_24120E044();
  return sub_24120E050();
}

uint64_t sub_24119308C()
{
  return sub_241193094();
}

uint64_t sub_241193094()
{
  return sub_24120E044();
}

uint64_t sub_2411930B8()
{
  return sub_2411930C0();
}

uint64_t sub_2411930C0()
{
  sub_24120E02C();
  sub_24120E044();
  return sub_24120E050();
}

void sub_241193104(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_24119310C@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;

  return sub_241193118(*a1, *v2, a2);
}

uint64_t sub_241193118@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 | result;
  return result;
}

uint64_t sub_241193124@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;

  return sub_241193130(*a1, *v2, a2);
}

uint64_t sub_241193130@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 & result;
  return result;
}

uint64_t sub_24119313C@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;

  return sub_241193148(*a1, *v2, a2);
}

uint64_t sub_241193148@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 ^ result;
  return result;
}

BOOL sub_241193154(_DWORD *a1, int *a2)
{
  return sub_24119315C(a1, *a2);
}

BOOL sub_24119315C(_DWORD *a1, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_241193188@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_241193190(*a1, a2);
}

uint64_t sub_241193190@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & result;
  if (v3)
    *v2 &= ~(_DWORD)result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

uint64_t sub_2411931B8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2411931C0(*a1, a2);
}

uint64_t sub_2411931C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;

  v3 = *v2;
  *v2 |= result;
  v4 = v3 & result;
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v4 == 0;
  return result;
}

uint64_t sub_2411931E0(unsigned int *a1)
{
  return sub_2411931E8(*a1);
}

uint64_t sub_2411931E8(uint64_t result)
{
  _DWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_2411931F8(unsigned int *a1)
{
  return sub_241193200(*a1);
}

uint64_t sub_241193200(uint64_t result)
{
  _DWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_241193210(unsigned int *a1)
{
  return sub_241193218(*a1);
}

uint64_t sub_241193218(uint64_t result)
{
  _DWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_241193228@<X0>(unsigned int *a1@<X0>, int *a2@<X8>)
{
  int *v2;

  return sub_241193234(*a1, *v2, a2);
}

uint64_t sub_241193234@<X0>(uint64_t result@<X0>, int a2@<W1>, int *a3@<X8>)
{
  *a3 = a2 & ~(_DWORD)result;
  return result;
}

BOOL sub_241193240(int *a1)
{
  int *v1;

  return sub_24119324C(*a1, *v1);
}

BOOL sub_24119324C(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_241193258(int *a1)
{
  int *v1;

  return sub_241193264(*a1, *v1);
}

BOOL sub_241193264(int a1, int a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_241193270(int *a1)
{
  int *v1;

  return sub_24119327C(*a1, *v1);
}

BOOL sub_24119327C(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_241193288()
{
  int *v0;

  return sub_241193290(*v0);
}

BOOL sub_241193290(int a1)
{
  return a1 == 0;
}

uint64_t sub_24119329C()
{
  return sub_24120E008();
}

uint64_t sub_2411932B4(unsigned int *a1)
{
  return sub_2411932BC(*a1);
}

uint64_t sub_2411932BC(uint64_t result)
{
  _DWORD *v1;

  *v1 &= ~(_DWORD)result;
  return result;
}

uint64_t sub_2411932CC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = MathPresentation.DrawingContext.Options.init(rawValue:)(*a1, (_DWORD *)a2);
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_2411932F4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = MathPresentation.DrawingContext.Options.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL sub_241193318(int *a1, int *a2)
{
  return sub_241193324(*a1, *a2);
}

BOOL sub_241193324(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_241193330(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_241193344(a1, a2);
  return a1;
}

uint64_t sub_241193344(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void sub_241193388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_2411933C4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void MathPresentation.DrawingContext.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *MathPresentation.DrawingContext.options.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*MathPresentation.DrawingContext.options.modify())()
{
  return nullsub_1;
}

id MathPresentation.DrawingContext.selection.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

void MathPresentation.DrawingContext.selection.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;

  *(_QWORD *)(v1 + 16) = v2;
  OUTLINED_FUNCTION_1();
}

uint64_t (*MathPresentation.DrawingContext.selection.modify())()
{
  return nullsub_1;
}

void MathPresentation.DrawingContext.highlightColor.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 24);
  OUTLINED_FUNCTION_1();
}

void MathPresentation.DrawingContext.highlightColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  OUTLINED_FUNCTION_1();
}

uint64_t (*MathPresentation.DrawingContext.highlightColor.modify())()
{
  return nullsub_1;
}

uint64_t MathPresentation.DrawingContext.init(context:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t static MathPresentation.Selection.== infix(_:_:)()
{
  sub_241193534(0, &qword_257102240);
  return sub_24120DFFC() & 1;
}

void sub_241193534(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  OUTLINED_FUNCTION_1();
}

unint64_t sub_24119356C()
{
  unint64_t result;

  result = qword_257102248;
  if (!qword_257102248)
  {
    result = MEMORY[0x242690BA8](&protocol conformance descriptor for MathPresentation.DrawingContext.Options, &type metadata for MathPresentation.DrawingContext.Options);
    atomic_store(result, (unint64_t *)&qword_257102248);
  }
  return result;
}

unint64_t sub_2411935AC()
{
  unint64_t result;

  result = qword_257102250;
  if (!qword_257102250)
  {
    result = MEMORY[0x242690BA8](&protocol conformance descriptor for MathPresentation.DrawingContext.Options, &type metadata for MathPresentation.DrawingContext.Options);
    atomic_store(result, (unint64_t *)&qword_257102250);
  }
  return result;
}

unint64_t sub_2411935EC()
{
  unint64_t result;

  result = qword_257102258;
  if (!qword_257102258)
  {
    result = MEMORY[0x242690BA8](&protocol conformance descriptor for MathPresentation.DrawingContext.Options, &type metadata for MathPresentation.DrawingContext.Options);
    atomic_store(result, (unint64_t *)&qword_257102258);
  }
  return result;
}

unint64_t sub_24119362C()
{
  unint64_t result;

  result = qword_257102260;
  if (!qword_257102260)
  {
    result = MEMORY[0x242690BA8](&protocol conformance descriptor for MathPresentation.DrawingContext.Options, &type metadata for MathPresentation.DrawingContext.Options);
    atomic_store(result, (unint64_t *)&qword_257102260);
  }
  return result;
}

void sub_241193670(char *a1)
{
  MathPresentation.Environment.sourceAttribution.setter(*a1);
  OUTLINED_FUNCTION_1();
}

void sub_241193694(char *a1)
{
  MathPresentation.Environment.allowSingleLineHeight.setter(*a1);
  OUTLINED_FUNCTION_1();
}

_QWORD *initializeBufferWithCopyOfBuffer for MathPresentation(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  v4 = v3;
  return a1;
}

void destroy for MathPresentation(uint64_t a1)
{
  swift_unknownObjectRelease();

}

_QWORD *assignWithCopy for MathPresentation(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for MathPresentation(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_unknownObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MathPresentation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for MathPresentation()
{
  OUTLINED_FUNCTION_0_0();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for MathPresentation.Format()
{
  OUTLINED_FUNCTION_0_0();
}

void type metadata accessor for MathPresentation.Environment()
{
  OUTLINED_FUNCTION_0_0();
}

void type metadata accessor for MathPresentation.Model()
{
  OUTLINED_FUNCTION_0_0();
}

void destroy for MathPresentation.LayoutContext(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for MathPresentation.LayoutContext(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v3 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v3;
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for MathPresentation.LayoutContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  void *v6;
  void *v7;
  id v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v5;
  v6 = *(void **)(a1 + 72);
  v7 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = v7;

  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for MathPresentation.LayoutContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for MathPresentation.LayoutContext(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPresentation.LayoutContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata accessor for MathPresentation.LayoutContext()
{
  OUTLINED_FUNCTION_0_0();
}

void destroy for MathPresentation.DrawingContext(id *a1)
{

}

uint64_t initializeWithCopy for MathPresentation.DrawingContext(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for MathPresentation.DrawingContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 24);
  v11 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for MathPresentation.DrawingContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for MathPresentation.DrawingContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPresentation.DrawingContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for MathPresentation.DrawingContext()
{
  OUTLINED_FUNCTION_0_0();
}

void type metadata accessor for MathPresentation.DrawingContext.Options()
{
  OUTLINED_FUNCTION_0_0();
}

void type metadata accessor for MathPresentation.Selection()
{
  OUTLINED_FUNCTION_0_0();
}

uint64_t _s15MathTypesetting16MathPresentationV6FormatVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s15MathTypesetting16MathPresentationV6FormatVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_241193D64 + 4 * byte_241211575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_241193D98 + 4 * byte_241211570[v4]))();
}

uint64_t sub_241193D98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_241193DA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x241193DA8);
  return result;
}

uint64_t sub_241193DB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x241193DBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_241193DC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241193DC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_241193DD4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_241193DDC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void type metadata accessor for MathPresentation.Format.Storage()
{
  OUTLINED_FUNCTION_0_0();
}

unint64_t sub_241193DF8()
{
  unint64_t result;

  result = qword_2571022F8;
  if (!qword_2571022F8)
  {
    result = MEMORY[0x242690BA8](&unk_241211890, &unk_25112A000);
    atomic_store(result, (unint64_t *)&qword_2571022F8);
  }
  return result;
}

id OUTLINED_FUNCTION_2@<X0>(char a1@<W0>, const char *a2@<X1>, void *a3@<X8>)
{
  return objc_msgSend(a3, a2, a1 & 1);
}

uint64_t OUTLINED_FUNCTION_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t EQKitXMLIsTextContentOnly(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
    {
      v2 = 0;
      while (xmlNodeIsText((const xmlNode *)v1) || *(_DWORD *)(v1 + 8) == 8)
      {
        v1 = *(_QWORD *)(v1 + 48);
        v2 = 1;
        v3 = 1;
        if (!v1)
          return v3 & v2;
      }
      v3 = 0;
      return v3 & v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *EQKitXMLIsNamedElement(_xmlNode *a1, _xmlNs *a2, const char *__s2)
{
  const char *result;

  result = 0;
  if (a1 && __s2)
  {
    if (a1->type == XML_ELEMENT_NODE && a1->ns == a2)
    {
      result = (const char *)a1->name;
      if (result)
        return (const char *)(strcmp(result, __s2) == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL EQKitXMLIsNsElement(_BOOL8 result, _xmlNs *a2)
{
  if (result)
    return *(_DWORD *)(result + 8) == 1 && *(_QWORD *)(result + 72) == (_QWORD)a2;
  return result;
}

BOOL EQKitXMLIsElement(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 8) == 1;
  return result;
}

void EQKitXMLTextContentAsString(_xmlNode *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  xmlBufferPtr v6;
  char *v7;
  void **v8;
  std::string *p_str;
  std::string::size_type size;
  size_t v11;
  std::string *v12;
  std::string::size_type v13;
  char *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  void *v18;
  void *__p[2];
  unsigned __int8 v20;
  std::string __str;
  char v22;

  v6 = xmlBufferCreate();
  xmlNodeBufGetContent(v6, a1);
  if (a2)
  {
    v7 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:ne180100]<0>(&__str, v7);
    v8 = __p;
    std::string::basic_string[abi:ne180100]<0>(__p, " \t\n");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if ((v20 & 0x80u) == 0)
    {
      v11 = v20;
    }
    else
    {
      v8 = (void **)__p[0];
      v11 = (size_t)__p[1];
    }
    if (!size)
      goto LABEL_24;
    v12 = p_str;
    if (v11)
    {
      v13 = size;
      v12 = p_str;
      while (memchr(v8, v12->__r_.__value_.__s.__data_[0], v11))
      {
        v12 = (std::string *)((char *)v12 + 1);
        if (!--v13)
          goto LABEL_24;
      }
    }
    v15 = (char *)v12 - (char *)p_str;
    if (v15 == -1)
    {
LABEL_24:
      std::string::basic_string[abi:ne180100]<0>(a3, "");
    }
    else
    {
      v16 = size - 1;
      do
      {
        v17 = v16;
        if (v16 == -1)
          break;
        if (!v11)
          break;
        v18 = memchr(v8, p_str->__r_.__value_.__s.__data_[v16], v11);
        v16 = v17 - 1;
      }
      while (v18);
      std::string::basic_string(a3, &__str, v15, v17 - v15 + 1, (std::allocator<char> *)&v22);
    }
    if ((char)v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:ne180100]<0>(a3, v14);
  }
  xmlBufferFree(v6);
}

void sub_241194224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void EQKitXMLAttributeValueAsString(_xmlNode *a1@<X0>, _xmlAttr *a2@<X1>, std::string *a3@<X8>)
{
  xmlChar *String;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1 && a2)
  {
    String = xmlNodeListGetString(a1->doc, a2->children, 1);
    if (String)
    {
      std::string::__assign_external(a3, (const std::string::value_type *)String);
      free(String);
    }
  }
}

void sub_2411942CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_2411943A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x242690704](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x242690704](a1 + 120);
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2511295B8, MEMORY[0x24BEDAAF0]);
}

void sub_2411944A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_2411946E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t CoverageTableGetIndexOfGlyphID(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  size_t v9;
  size_t v11;
  _BYTE *v12;
  unsigned __int16 *v13;
  _QWORD v14[4];
  __int16 v15;
  _WORD __key[3];
  _QWORD __compar[4];
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 == 0xFFFF)
    return -1;
  v20 = v2;
  v21 = v3;
  v5 = __rev16(a2);
  v19 = v5;
  v6 = *a1;
  v7 = __rev16(v6);
  if (v7 == 2)
  {
    __key[0] = v5;
    __key[1] = v5;
    __key[2] = 0;
    if (v6 == 512)
      v11 = bswap32(a1[1]) >> 16;
    else
      v11 = 0;
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 0x40000000;
    v14[2] = __CoverageTableGetIndexOfGlyphID_block_invoke_2;
    v14[3] = &__block_descriptor_tmp_1;
    v15 = a2;
    v13 = (unsigned __int16 *)bsearch_b(__key, a1 + 2, v11, 6uLL, v14);
    if (v13)
      return (bswap32(v13[2]) >> 16) + (unint64_t)a2 - (bswap32(*v13) >> 16);
  }
  else if (v7 == 1)
  {
    v8 = a1 + 2;
    v9 = v6 == 256 ? bswap32(a1[1]) >> 16 : 0;
    __compar[0] = MEMORY[0x24BDAC760];
    __compar[1] = 0x40000000;
    __compar[2] = __CoverageTableGetIndexOfGlyphID_block_invoke;
    __compar[3] = &__block_descriptor_tmp;
    v18 = a2;
    v12 = bsearch_b(&v19, v8, v9, 2uLL, __compar);
    if (v12)
      return (v12 - (_BYTE *)v8) >> 1;
  }
  return -1;
}

uint64_t MathValueRecordGetValue(unsigned __int16 *a1)
{
  return ((int)bswap32(*a1) >> 16);
}

char *MathGlyphInfoGetItalicsCorrectionInfo(unsigned __int16 *a1)
{
  return (char *)a1 + (bswap32(*a1) >> 16);
}

uint64_t MathGlyphInfoGetTopAttachment(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
}

uint64_t MathGlyphInfoGetExtendedShapesCoverageTable(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + __rev16(*(unsigned __int16 *)(a1 + 4));
  if (*(_WORD *)(a1 + 4))
    return v1;
  else
    return 0;
}

uint64_t GlyphPartRecordGetGlyphID(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t GlyphPartRecordGetStartConnectorLength(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
}

uint64_t GlyphPartRecordGetEndConnectorLength(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16;
}

uint64_t GlyphPartRecordGetFullAdvance(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16;
}

uint64_t GlyphPartRecordGetPartFlags(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
}

uint64_t GlyphAssemblyGetPartAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16)
    return 0;
  else
    return a1 + 10 * a2 + 6;
}

char *MathGlyphConstructionGetGlyphAssembly(_WORD *a1)
{
  char *v1;

  v1 = (char *)a1 + __rev16((unsigned __int16)*a1);
  if (*a1)
    return v1;
  else
    return 0;
}

uint64_t MathGlyphConstructionGetGlyphVariantAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16)
    return 0;
  else
    return a1 + 4 * a2 + 4;
}

uint64_t MathVariantsGetVertGlyphConstructionAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16)
    return 0;
  else
    return a1 + (bswap32(*(unsigned __int16 *)(a1 + 2 * a2 + 10)) >> 16);
}

uint64_t MathVariantsGetHorizGlyphCoverageTable(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16);
}

uint64_t MathVariantsGetHorizGlyphConstructionAtIndex(uint64_t a1, unsigned int a2)
{
  if (a2 >= bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16)
    return 0;
  else
    return a1
         + (bswap32(*(unsigned __int16 *)(a1
                                        + 2 * ((bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16) + (unint64_t)a2)
                                        + 10)) >> 16);
}

uint64_t MathHeaderGetMathGlyphInfo(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 6)) >> 16);
}

uint64_t MathHeaderGetMathVariants(uint64_t a1)
{
  return a1 + (bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16);
}

uint64_t MathConstantsScriptScriptPercentScaleDown(uint64_t a1)
{
  return ((int)bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
}

uint64_t MathConstantsMathLeading(uint64_t a1)
{
  return a1 + 8;
}

uint64_t MathConstantsAxisHeight(uint64_t a1)
{
  return a1 + 12;
}

uint64_t MathConstantsAccentBaseHeight(uint64_t a1)
{
  return a1 + 16;
}

uint64_t MathConstantsSubscriptShiftDown(uint64_t a1)
{
  return a1 + 24;
}

uint64_t MathConstantsSubscriptTopMax(uint64_t a1)
{
  return a1 + 28;
}

uint64_t MathConstantsSubscriptBaselineDropMin(uint64_t a1)
{
  return a1 + 32;
}

uint64_t MathConstantsSuperscriptShiftUp(uint64_t a1)
{
  return a1 + 36;
}

uint64_t MathConstantsSuperscriptShiftUpCramped(uint64_t a1)
{
  return a1 + 40;
}

uint64_t MathConstantsSuperscriptBottomMin(uint64_t a1)
{
  return a1 + 44;
}

uint64_t MathConstantsSuperscriptBaselineDropMax(uint64_t a1)
{
  return a1 + 48;
}

uint64_t MathConstantsSubSuperscriptGapMin(uint64_t a1)
{
  return a1 + 52;
}

uint64_t MathConstantsSuperscriptBottomMaxWithSubscript(uint64_t a1)
{
  return a1 + 56;
}

uint64_t MathConstantsSpaceAfterScript(uint64_t a1)
{
  return a1 + 60;
}

uint64_t MathConstantsUpperLimitGapMin(uint64_t a1)
{
  return a1 + 64;
}

uint64_t MathConstantsUpperLimitBaselineRiseMin(uint64_t a1)
{
  return a1 + 68;
}

uint64_t MathConstantsLowerLimitGapMin(uint64_t a1)
{
  return a1 + 72;
}

uint64_t MathConstantsLowerLimitBaselineDropMin(uint64_t a1)
{
  return a1 + 76;
}

uint64_t MathConstantsStackTopShiftUp(uint64_t a1)
{
  return a1 + 80;
}

uint64_t MathConstantsStackTopDisplayStyleShiftUp(uint64_t a1)
{
  return a1 + 84;
}

uint64_t MathConstantsStackBottomShiftDown(uint64_t a1)
{
  return a1 + 88;
}

uint64_t MathConstantsStackBottomDisplayStyleShiftDown(uint64_t a1)
{
  return a1 + 92;
}

uint64_t MathConstantsStackGapMin(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MathConstantsStackDisplayStyleGapMin(uint64_t a1)
{
  return a1 + 100;
}

uint64_t MathConstantsStretchStackTopShiftUp(uint64_t a1)
{
  return a1 + 104;
}

uint64_t MathConstantsStretchStackBottomShiftDown(uint64_t a1)
{
  return a1 + 108;
}

uint64_t MathConstantsStretchStackGapAboveMin(uint64_t a1)
{
  return a1 + 112;
}

uint64_t MathConstantsStretchStackGapBelowMin(uint64_t a1)
{
  return a1 + 116;
}

uint64_t MathConstantsFractionNumeratorShiftUp(uint64_t a1)
{
  return a1 + 120;
}

uint64_t MathConstantsFractionNumeratorDisplayStyleShiftUp(uint64_t a1)
{
  return a1 + 124;
}

uint64_t MathConstantsFractionDenominatorShiftDown(uint64_t a1)
{
  return a1 + 128;
}

uint64_t MathConstantsFractionDenominatorDisplayStyleShiftDown(uint64_t a1)
{
  return a1 + 132;
}

uint64_t MathConstantsFractionNumeratorGapMin(uint64_t a1)
{
  return a1 + 136;
}

uint64_t MathConstantsFractionNumDisplayStyleGapMin(uint64_t a1)
{
  return a1 + 140;
}

uint64_t MathConstantsFractionRuleThickness(uint64_t a1)
{
  return a1 + 144;
}

uint64_t MathConstantsFractionDenominatorGapMin(uint64_t a1)
{
  return a1 + 148;
}

uint64_t MathConstantsFractionDenomDisplayStyleGapMin(uint64_t a1)
{
  return a1 + 152;
}

uint64_t MathConstantsOverbarVerticalGap(uint64_t a1)
{
  return a1 + 164;
}

uint64_t MathConstantsOverbarExtraAscender(uint64_t a1)
{
  return a1 + 172;
}

uint64_t MathConstantsUnderbarVerticalGap(uint64_t a1)
{
  return a1 + 176;
}

uint64_t MathConstantsUnderbarExtraDescender(uint64_t a1)
{
  return a1 + 184;
}

uint64_t MathConstantsRadicalVerticalGap(uint64_t a1)
{
  return a1 + 188;
}

uint64_t MathConstantsRadicalDisplayStyleVerticalGap(uint64_t a1)
{
  return a1 + 192;
}

uint64_t MathConstantsRadicalRuleThickness(uint64_t a1)
{
  return a1 + 196;
}

uint64_t MathConstantsRadicalExtraAscender(uint64_t a1)
{
  return a1 + 200;
}

uint64_t MathConstantsRadicalKernBeforeDegree(uint64_t a1)
{
  return a1 + 204;
}

uint64_t MathConstantsRadicalKernAfterDegree(uint64_t a1)
{
  return a1 + 208;
}

uint64_t MathConstantsRadicalDegreeBottomRaisePercent(uint64_t a1)
{
  return ((int)bswap32(*(unsigned __int16 *)(a1 + 212)) >> 16);
}

BOOL EQKit::ScriptLevel::fromString(const std::string *a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v5;
  int v6;
  uint64_t v8;
  _QWORD v9[12];
  char v10;
  uint64_t v11;

  std::istringstream::basic_istringstream[abi:ne180100](v9, a1, 8);
  v3 = std::istream::peek() << 24;
  v5 = v3 == 721420288 || v3 == 754974720;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  MEMORY[0x2426905FC](v9, &v8);
  v6 = *(_DWORD *)((_BYTE *)&v9[4] + *(_QWORD *)(v9[0] - 24)) & 7;
  if (v6 == 2)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v5;
  }
  v9[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v9[2] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x242690704](&v11);
  return v6 == 2;
}

void sub_241194E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::ScriptLevel::resolveWithBase(EQKit::ScriptLevel *this, uint64_t a2)
{
  uint64_t v2;

  if (*((_BYTE *)this + 8))
    v2 = a2;
  else
    v2 = 0;
  return v2 + *(_QWORD *)this;
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::add(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t **v4;
  void **v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::string __p;
  __int16 v12;

  v4 = (uint64_t **)(a1 + 4);
  v5 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>((uint64_t)(a1 + 4), (void **)a2);
  if (a1 + 8 != (unsigned __int16 *)v5)
    return *((unsigned __int16 *)v5 + 28);
  v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v12 = v6;
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(v4, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (uint64_t *)(a1 + 16);
  v8 = *((_QWORD *)a1 + 5);
  if (v8 >= *((_QWORD *)a1 + 6))
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, (__int128 *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, (__int128 *)a2);
    v9 = v8 + 24;
  }
  *((_QWORD *)a1 + 5) = v9;
  ++*a1;
  return v6;
}

void sub_241194F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKit::Config::Operator::Dictionary::~Dictionary(EQKit::Config::Operator::Dictionary *this)
{
  void **v2;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

unsigned __int16 *EQKit::Config::Operator::Dictionary::dictionaryFromURL(EQKit::Config::Operator::Dictionary *this, NSURL *a2)
{
  void *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned __int16 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  int v22;
  void *v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t **v27;
  char v28;
  uint64_t *v29;
  EQKit::Config::Operator::Dictionary *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t *v35;
  BOOL v36;
  uint64_t **v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  id obj;
  uint64_t **v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned __int16 *v49;
  int v50;
  unsigned __int16 v51[2];
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *__p[2];
  char v58;
  unsigned __int16 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v64 = 0;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithContentsOfURL:error:", this, &v64);
  obj = v3;
  if (!v3)
  {
    __p[0] = 0;
    -[EQKit::Config::Operator::Dictionary getResourceValue:forKey:error:](this, "getResourceValue:forKey:error:", __p, *MEMORY[0x24BDBCCD0], 0);
    NSLog(CFSTR("Failed to read %@ with error: %@"), __p[0], v64);
    v3 = 0;
  }
  if (!objc_msgSend(v3, "count") || (v4 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8])) == 0)
  {
LABEL_85:
    v49 = 0;
    goto LABEL_86;
  }
  *(_WORD *)v4 = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 1) = v4 + 16;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = v4 + 64;
  v38 = (uint64_t **)(v4 + 56);
  *((_QWORD *)v4 + 9) = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 10) = v4 + 88;
  v43 = (uint64_t **)(v4 + 80);
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 14) = 0;
  v48 = (uint64_t *)(v4 + 112);
  v49 = (unsigned __int16 *)v4;
  *((_QWORD *)v4 + 13) = v4 + 112;
  v40 = (uint64_t **)(v4 + 104);
  *((_QWORD *)v4 + 15) = 0;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
  if (!v41)
  {
    v28 = 0;
    goto LABEL_71;
  }
  v39 = *(_QWORD *)v61;
  while (2)
  {
    v5 = 0;
    do
    {
      if (*(_QWORD *)v61 != v39)
      {
        v6 = v5;
        objc_enumerationMutation(obj);
        v5 = v6;
      }
      v47 = v5;
      v7 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v5);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(CFSTR("invalid item class: %@"), v7);
LABEL_70:
        v28 = 1;
        goto LABEL_71;
      }
      v8 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("char"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog(CFSTR("missing/invalid '%@': %@"), CFSTR("char"), v7);
        goto LABEL_70;
      }
      v59 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v8, "UTF8String"));
      v9 = EQKit::Config::Operator::Dictionary::IdentifierMap::add(v49, (uint64_t)__p);
      if (v58 < 0)
        operator delete(__p[0]);
      v59 = v9;
      v10 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("form"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v10, "UTF8String"));
        v50 = EQKit::Config::Operator::formFromMathMLString((uint64_t *)__p, 0);
        if (v58 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v50 = 0;
      }
      v11 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("lspace"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v46 = objc_msgSend(v11, "integerValue");
      else
        v46 = 0;
      v12 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("rspace"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v45 = objc_msgSend(v12, "integerValue");
      else
        v45 = 0;
      v13 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("prio"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v44 = objc_msgSend(v13, "unsignedIntegerValue");
      else
        v44 = 0;
      v14 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("flags"));
      objc_opt_class();
      v15 = 0.0;
      if ((objc_opt_isKindOfClass() & 1) != 0
        && objc_msgSend(v14, "length")
        && (v16 = (void *)objc_msgSend(v14, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "characterSetWithCharactersInString:", CFSTR(","))), v55 = 0u, v56 = 0u, v53 = 0u, v54 = 0u, (v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v53, v65, 16)) != 0))
      {
        v18 = 0;
        v19 = *(_QWORD *)v54;
        do
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v54 != v19)
              objc_enumerationMutation(v16);
            v21 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
            if (objc_msgSend(v21, "isEqualToString:", CFSTR("stretchy")))
            {
              v18 |= 1u;
            }
            else if (objc_msgSend(v21, "isEqualToString:", CFSTR("symmetric")))
            {
              v18 |= 2u;
            }
            else if (objc_msgSend(v21, "isEqualToString:", CFSTR("largeop")))
            {
              if ((v18 & 0x80u) != 0)
              {
                v22 = 4;
              }
              else
              {
                v15 = 1.0;
                v22 = -124;
              }
              v18 |= v22;
            }
            else if (objc_msgSend(v21, "isEqualToString:", CFSTR("fence")))
            {
              v18 |= 0x10u;
            }
            else if (objc_msgSend(v21, "isEqualToString:", CFSTR("accent")))
            {
              v18 |= 8u;
            }
            else if (objc_msgSend(v21, "isEqualToString:", CFSTR("movablelimits")))
            {
              v18 |= 0x20u;
            }
            else if (objc_msgSend(v21, "isEqualToString:", CFSTR("relational")))
            {
              v18 |= 0x40u;
            }
            else if (objc_msgSend(v21, "hasPrefix:", CFSTR("cramped=")))
            {
              v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v21);
              LODWORD(__p[0]) = 0;
              if (objc_msgSend(v23, "scanString:intoString:", CFSTR("cramped="), 0)
                && objc_msgSend(v23, "scanFloat:", __p))
              {
                v24 = objc_msgSend(v23, "isAtEnd");
                v25 = *(float *)__p == 0.0 ? 0 : v24;
                if (v25 == 1)
                {
                  v18 |= 0xFFFFFF80;
                  v15 = *(float *)__p;
                }
              }

            }
          }
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v53, v65, 16);
        }
        while (v17);
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      v51[0] = v59;
      v52 = v50;
      __p[0] = v51;
      v26 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(v38, v51, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
      *((_DWORD *)v26 + 10) = 3;
      *((double *)v26 + 6) = (double)v46 / 18.0;
      *((_DWORD *)v26 + 14) = 3;
      *((double *)v26 + 8) = (double)v45 / 18.0;
      *((_WORD *)v26 + 36) = v44;
      *((double *)v26 + 10) = v15;
      *((_BYTE *)v26 + 88) = v18;
      __p[0] = &v59;
      *((_DWORD *)std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v43, &v59, (uint64_t)&std::piecewise_construct, (_WORD **)__p)+ 8) = v50;
      __p[0] = &v59;
      v27 = std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v40, &v59, (uint64_t)&std::piecewise_construct, (_WORD **)__p);
      v27[5] = (uint64_t *)((unint64_t)v27[5] | (1 << v50));
      v5 = v47 + 1;
    }
    while (v47 + 1 != v41);
    v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
    v28 = 0;
    if (v41)
      continue;
    break;
  }
LABEL_71:
  v29 = *v40;
  v30 = (EQKit::Config::Operator::Dictionary *)v49;
  if (*v40 != v48)
  {
    do
    {
      v31 = v29[5];
      if (v31)
      {
        v32 = 0;
        do
        {
          v32 += v31 & 1;
          v33 = v31 > 1;
          v31 >>= 1;
        }
        while (v33);
        if (v32 >= 2)
        {
          std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>((uint64_t)v43, (unsigned __int16 *)v29 + 16);
          v30 = (EQKit::Config::Operator::Dictionary *)v49;
        }
      }
      v34 = (uint64_t *)v29[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (uint64_t *)v29[2];
          v36 = *v35 == (_QWORD)v29;
          v29 = v35;
        }
        while (!v36);
      }
      v29 = v35;
    }
    while (v35 != v48);
  }
  if ((v28 & 1) != 0)
  {
    EQKit::Config::Operator::Dictionary::~Dictionary(v30);
    MEMORY[0x242690740]();
    goto LABEL_85;
  }
LABEL_86:

  return v49;
}

void sub_241195790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Config::Operator::Dictionary::lookup(uint64_t a1, unsigned __int16 a2, int a3)
{
  int v4;
  uint64_t v5;
  unsigned __int16 v7[2];
  int v8;

  if (a3)
    v4 = a3;
  else
    v4 = 2;
  v7[0] = a2;
  v8 = v4;
  v5 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(a1 + 56, v7);
  if (a1 + 64 == v5)
    return 0;
  else
    return v5 + 40;
}

uint64_t EQKit::Config::Operator::Dictionary::operatorId(uint64_t a1, void **a2)
{
  void **v3;

  v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(a1 + 8, a2);
  if ((void **)(a1 + 16) == v3)
    return 0;
  else
    return *((unsigned __int16 *)v3 + 28);
}

uint64_t EQKit::Config::Operator::Dictionary::formForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 88;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *((unsigned __int16 *)v3 + 14);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 14) <= a2)
    return *((unsigned int *)v5 + 8);
  else
    return 0;
}

uint64_t EQKit::Config::Operator::Dictionary::formMaskForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 14);
  v2 = (char *)this + 112;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *((unsigned __int16 *)v3 + 16);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 16) <= a2)
    return *((_QWORD *)v5 + 5);
  else
    return 0;
}

uint64_t EQKit::Config::Operator::Dictionary::enumerateEntries(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v2 = *(_QWORD **)(result + 56);
  v3 = (_QWORD *)(result + 64);
  if (v2 != (_QWORD *)(result + 64))
  {
    v5 = result;
    do
    {
      if (*((_WORD *)v2 + 16))
      {
        v6 = *(_QWORD *)(v5 + 32);
        v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 40) - v6) >> 3);
        v8 = v6 + 24 * *((unsigned __int16 *)v2 + 16) - 24;
        if (v7 >= *((unsigned __int16 *)v2 + 16))
          v9 = (void *)v8;
        else
          v9 = &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
      }
      else
      {
        v9 = &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
      }
      result = (*(uint64_t (**)(uint64_t, void *, _QWORD, _QWORD *))(a2 + 16))(a2, v9, *((unsigned int *)v2 + 9), v2 + 5);
      v10 = (_QWORD *)v2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v2[2];
          v12 = *v11 == (_QWORD)v2;
          v2 = v11;
        }
        while (!v12);
      }
      v2 = v11;
    }
    while (v11 != v3);
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_241195B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::wstring> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::string *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = (std::string *)this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, (std::string *)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, (std::string *)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_241195E48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_241195E50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::wstring> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_241195F40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_241196054(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::wstring> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2411967A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>((uint64_t)a1, &v10, a2);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x60uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 1;
    v7[6] = 0;
    *((_DWORD *)v7 + 14) = 1;
    v7[8] = 0;
    v7[10] = 0;
    *((_BYTE *)v7 + 88) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  char v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      v8 = v4;
      v9 = *((unsigned __int16 *)v4 + 16);
      if (v6 == v9)
      {
        v10 = *((_DWORD *)v8 + 9);
        if (v7 >= v10)
        {
          v11 = v10 == v7;
          if (v10 >= v7)
            v12 = 1;
          else
            v12 = -1;
          if (v11)
            v12 = 0;
          if ((v12 & 0x80) == 0)
            goto LABEL_22;
          goto LABEL_19;
        }
LABEL_13:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_22;
      }
      else
      {
        if (v6 < v9)
          goto LABEL_13;
        if (v9 >= v6)
          v13 = 1;
        else
          v13 = -1;
        if ((v13 & 0x80) == 0)
          goto LABEL_22;
LABEL_19:
        result = v8 + 1;
        v4 = (uint64_t *)v8[1];
        if (!v4)
          goto LABEL_22;
      }
    }
  }
  v8 = result;
LABEL_22:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[14] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int16 *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 28))
    return 0;
  std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;

  v3 = a1 + 8;
  result = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__lower_bound<std::pair<unsigned short,EQKit::Config::Operator::Form>>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == result)
    return v3;
  v5 = *a2;
  v6 = *(unsigned __int16 *)(result + 32);
  v7 = v5 == v6;
  if (v5 >= v6)
    v8 = 1;
  else
    v8 = -1;
  if (v7)
  {
    v9 = *((_DWORD *)a2 + 1);
    v10 = *(_DWORD *)(result + 36);
    v11 = v9 >= v10;
    v12 = v9 == v10;
    v8 = -1;
    if (v11)
      v8 = 1;
    if (v12)
      v8 = 0;
  }
  if (v8 < 0)
    return v3;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__lower_bound<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t *v13;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 1);
    do
    {
      v7 = *(unsigned __int16 *)(a3 + 32);
      v8 = v7 == v5;
      if (v7 >= v5)
        v9 = 1;
      else
        v9 = -1;
      if (v8)
      {
        v10 = *(_DWORD *)(a3 + 36);
        v11 = v10 == v6;
        v9 = v10 >= v6 ? 1 : -1;
        if (v11)
          v9 = 0;
      }
      v12 = (v9 & 0x80) == 0;
      if (v9 < 0)
        v13 = (uint64_t *)(a3 + 8);
      else
        v13 = (uint64_t *)a3;
      if (v12)
        result = a3;
      a3 = *v13;
    }
    while (*v13);
  }
  return result;
}

EQKit::Environment::Version *EQKit::Environment::Version::Version(EQKit::Environment::Version *this, NSNumber *a2)
{
  NSUInteger v3;

  if (a2)
    v3 = -[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue");
  else
    v3 = 0;
  *(_QWORD *)this = v3;
  return this;
}

EQKit::Blahtex::Config *EQKit::Blahtex::Config::Config(EQKit::Blahtex::Config *this, const EQKit::Config::Operator::Dictionary *a2)
{
  uint64_t v3;
  _QWORD v5[5];

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = MEMORY[0x24BDAC760];
  *((_DWORD *)this + 18) = 1065353216;
  v5[0] = v3;
  v5[1] = 3221225472;
  v5[2] = ___ZN5EQKit7Blahtex6ConfigC2ERKNS_6Config8Operator10DictionaryE_block_invoke;
  v5[3] = &__block_descriptor_40_e79_v28__0r_v8i16r__Entry__EQKitLength_id__EQKitLength_id_Sd___b1b1b1b1b1b1b1b1__20l;
  v5[4] = this;
  EQKit::Config::Operator::Dictionary::enumerateEntries((uint64_t)a2, (uint64_t)v5);
  return this;
}

void sub_241197090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v2);
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ___ZN5EQKit7Blahtex6ConfigC2ERKNS_6Config8Operator10DictionaryE_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  uint64_t *v8;
  void *v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (void *)objc_msgSend(v7, "initWithUTF8String:", v8);
  v10 = EQKitUtilUTF32CharFromString(v9);
  if (v10)
  {
    v11 = v10;
    v12 = *(_BYTE *)(a4 + 48);
    if ((v12 & 2) != 0)
    {
      v14 = v10;
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t>(v6 + 40, &v14, &v14);
      v12 = *(_BYTE *)(a4 + 48);
    }
    if ((v12 & 1) != 0)
    {
      v13 = v11;
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t>(v6, &v13, &v13);
    }
  }

}

uint64_t EQKit::Blahtex::Config::updateOptions(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = result + 40;
  return result;
}

uint64_t std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2411973A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t _laTeXPatterns(void)
{
  uint64_t result;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = _laTeXPatterns(void)::sLaTeXPatterns;
  if (!_laTeXPatterns(void)::sLaTeXPatterns)
  {
    v1 = objc_alloc(MEMORY[0x24BDBCE30]);
    v2 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("$"), 0);
    v3 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("$$"), 0);
    v4 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\("), CFSTR("\\)"), 0);
    v5 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\["), CFSTR("\\]"), 0);
    v6 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\begin{math}"), CFSTR("\\end{math}"), 0);
    v7 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\begin{displaymath}"), CFSTR("\\end{displaymath}"), 0);
    v8 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\begin{equation}"), CFSTR("\\end{equation}"), 0);
    result = objc_msgSend(v1, "initWithObjects:", v2, v3, v4, v5, v6, v7, v8, objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\begin{equation*}"), CFSTR("\\end{equation*}"), 0), 0);
    _laTeXPatterns(void)::sLaTeXPatterns = result;
  }
  return result;
}

uint64_t _convertLaTeXStringToMathML(EQKitEnvironment *a1, NSString *a2, NSError **a3)
{
  uint64_t v5;
  void *v6;
  NSArray *v7;
  int isLaTeXStringUsingPatterns;
  NSString *v9;
  NSData *v10;
  id v11;
  id v12;
  NSArray *v13;
  int v14;
  void *v15;
  NSArray *v16;
  int v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::wstringbuf::string_type __p;
  uint64_t *v24;
  int v25;
  char v26;
  char v27;
  char v28;
  int v29;
  __int16 v30;
  BOOL v31;
  int v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  void *v36[4];

  v5 = objc_opt_class();
  v6 = (void *)EQKitUtilDynamicCast(v5, (uint64_t)a1);
  v7 = (NSArray *)_laTeXInlinePatterns();
  isLaTeXStringUsingPatterns = _isLaTeXStringUsingPatterns(a2, v7);
  v9 = _stripLaTeXPatterns(a2);
  isLaTeXStringUsingPatterns ^= 1u;
  v27 = 0;
  v24 = 0;
  v28 = 1;
  v29 = 1;
  v30 = 256;
  v32 = 0;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  memset(v36, 0, 26);
  v25 = 1;
  v26 = isLaTeXStringUsingPatterns;
  v31 = -[EQKitEnvironment sourceAttribution](a1, "sourceAttribution");
  EQKit::Blahtex::Config::updateOptions(objc_msgSend(v6, "blahtexConfig"), (uint64_t)&v25);
  v10 = -[NSString dataUsingEncoding:](v9, "dataUsingEncoding:", 2617245952);
  std::wstring::basic_string[abi:ne180100](&__p, (void *)-[NSData bytes](v10, "bytes"), -[NSData length](v10, "length") >> 2);
  blahtex::Interface::ProcessInput((uint64_t)&v24, (std::wstring::size_type)&__p, isLaTeXStringUsingPatterns);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  blahtex::Interface::GetMathml((blahtex::Interface *)&v24, &__p);
  v11 = _stringFromWideString((uint64_t *)&__p);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v12)
    {
LABEL_13:
      v20 = 0;
      goto LABEL_14;
    }
  }
  else if (!v11)
  {
    goto LABEL_13;
  }
  v13 = (NSArray *)_laTeXPatterns();
  v14 = _isLaTeXStringUsingPatterns(a2, v13);
  v15 = (void *)MEMORY[0x24BDD17C8];
  if (v14)
  {
    v16 = (NSArray *)_laTeXInlinePatterns();
    v17 = _isLaTeXStringUsingPatterns(a2, v16);
    v18 = CFSTR("block");
    if (v17)
      v18 = CFSTR("inline");
    v19 = objc_msgSend(v15, "stringWithFormat:", CFSTR("<math display='%@'>%@</math>"), v18, v12);
  }
  else
  {
    v19 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("<math>%@</math>"), v12);
  }
  v20 = v19;
LABEL_14:
  if (SHIBYTE(v36[2]) < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  v21 = v24;
  v24 = 0;
  if (v21)
    std::default_delete<blahtex::Manager>::operator()[abi:ne180100]((uint64_t)&v24, v21);
  return v20;
}

void sub_241198110(void *a1, int a2)
{
  _QWORD *v2;
  uint64_t *v5;
  void *v6;

  blahtex::Interface::~Interface(&v6);
  if (a2 == 1)
  {
    v5 = (uint64_t *)__cxa_begin_catch(a1);
    if (v2 && !*v2)
      *v2 = objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("EQKitErrorDomain"), 7, objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1488], "mainBundle"), "localizedStringForKey:value:table:", CFSTR("Converting from LaTeX to MathML resulted in a syntax error: %@"), &stru_25114C368, 0), _stringFromWideString(v5)), *MEMORY[0x24BDD0FC8], 0));
    __cxa_end_catch();
    JUMPOUT(0x2411980F4);
  }
  JUMPOUT(0x241198200);
}

void sub_2411981F8()
{
  __cxa_end_catch();
  JUMPOUT(0x241198200);
}

NSString *_stripLaTeXPatterns(NSString *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t Pattern;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = -[NSString stringByTrimmingCharactersInSet:](a1, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet"));
  v2 = (void *)_laTeXPatterns();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        Pattern = _findPattern(*(NSArray **)(*((_QWORD *)&v10 + 1) + 8 * i), v1, 1);
        if (Pattern != 0x7FFFFFFFFFFFFFFFLL)
          return -[NSString substringWithRange:](v1, "substringWithRange:", Pattern, v8);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
  return v1;
}

uint64_t NoExternalEntityLoader(const char *a1, const char *a2, _xmlParserCtxt *a3)
{
  const char *v5;
  const char *v6;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v5 = "<NULL>";
    if (a1)
      v6 = a1;
    else
      v6 = "<NULL>";
    if (a2)
      v5 = a2;
    v8 = 136315394;
    v9 = v6;
    v10 = 2080;
    v11 = v5;
    _os_log_impl(&dword_241190000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Refusing to load exernal entity with URL %s, ID %s", (uint8_t *)&v8, 0x16u);
  }
  return 0;
}

uint64_t sfaxmlNSMutableDataWriteCallback(void *a1, const char *a2, uint64_t a3)
{
  objc_msgSend(a1, "appendBytes:length:", a2, (int)a3);
  return a3;
}

uint64_t _findPattern(NSArray *a1, NSString *a2, int a3)
{
  NSUInteger v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  NSString *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v30;
  int v31;

  v6 = -[NSString length](a2, "length");
  if (-[NSArray count](a1, "count") == 4)
  {
    v7 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", -[NSArray objectAtIndex:](a1, "objectAtIndex:", 1), 0, 0, v6);
    if (!v8)
      goto LABEL_23;
    v9 = v7;
    v10 = -[NSArray objectAtIndex:](a1, "objectAtIndex:", 0);
    v11 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v10, 0, 0, v9);
    v13 = 0;
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v12 && v11 < v9)
    {
      v13 = 0;
      do
      {
        if (v9 > v11 + v12)
        {
          v13 = v9 - (v11 + v12);
          v14 = v11 + v12;
        }
        v11 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v10, 0, v11 + v12, v9 - (v11 + v12));
        if (v12)
          v15 = v11 >= v9;
        else
          v15 = 1;
      }
      while (!v15);
    }
    if (!v13)
    {
LABEL_23:
      v17 = 0;
      v19 = 0;
      v20 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_24;
    }
    v16 = -[NSString substringWithRange:](a2, "substringWithRange:", v14, v13);
    v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("%@%@%@"), -[NSArray objectAtIndex:](a1, "objectAtIndex:", 0), v16, -[NSArray objectAtIndex:](a1, "objectAtIndex:", 1));
    v18 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("%@%@%@"), -[NSArray objectAtIndex:](a1, "objectAtIndex:", 2), v16, -[NSArray objectAtIndex:](a1, "objectAtIndex:", 3));
  }
  else
  {
    v17 = -[NSArray objectAtIndex:](a1, "objectAtIndex:", 0);
    v18 = -[NSArray objectAtIndex:](a1, "objectAtIndex:", 1);
  }
  v19 = v18;
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  if (v17)
  {
    if (v18)
    {
      v21 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v17, 0, 0, v6);
      if (v22)
      {
        v23 = v21;
        v24 = v21 + v22;
        v25 = -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v19, 4, v21 + v22, v6 - (v21 + v22));
        if (v25 > v23)
        {
          if (v26)
          {
            v27 = v25 + v26;
            -[NSString rangeOfString:options:range:](a2, "rangeOfString:options:range:", v17, 0, v25 + v26, v6 - (v25 + v26));
            if (!v28)
            {
              if (v23)
                v30 = 0;
              else
                v30 = v6 == v27;
              v31 = a3 ^ 1;
              if (v30)
                v31 = 1;
              if (v31)
                v20 = v24;
            }
          }
        }
      }
    }
  }
LABEL_24:

  return v20;
}

uint64_t _isLaTeXStringUsingPatterns(NSString *a1, NSArray *a2)
{
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = -[NSString stringByTrimmingCharactersInSet:](a1, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v11;
  v7 = 1;
LABEL_3:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v6)
      objc_enumerationMutation(a2);
    if (_findPattern(*(NSArray **)(*((_QWORD *)&v10 + 1) + 8 * v8), v3, 1) != 0x7FFFFFFFFFFFFFFFLL)
      return v7;
    if (v5 == ++v8)
    {
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        goto LABEL_3;
      return 0;
    }
  }
}

uint64_t _laTeXInlinePatterns(void)
{
  uint64_t result;
  id v1;
  uint64_t v2;
  uint64_t v3;

  result = _laTeXInlinePatterns(void)::slaTeXInlinePatterns;
  if (!_laTeXInlinePatterns(void)::slaTeXInlinePatterns)
  {
    v1 = objc_alloc(MEMORY[0x24BDBCE30]);
    v2 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("$"), 0);
    v3 = objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\("), CFSTR("\\)"), 0);
    result = objc_msgSend(v1, "initWithObjects:", v2, v3, objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", CFSTR("\\begin{math}"), CFSTR("\\end{math}"), 0), 0);
    _laTeXInlinePatterns(void)::slaTeXInlinePatterns = result;
  }
  return result;
}

id _stringFromWideString(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *((unsigned __int8 *)a1 + 23);
  if ((v1 & 0x80u) == 0)
    v2 = a1;
  else
    v2 = (uint64_t *)*a1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  return (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", v2, 4 * v1, 2617245952);
}

void blahtex::Interface::~Interface(void **this)
{
  uint64_t *v2;

  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = (uint64_t *)*this;
  *this = 0;
  if (v2)
    std::default_delete<blahtex::Manager>::operator()[abi:ne180100]((uint64_t)this, v2);
}

void std::default_delete<blahtex::Manager>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 6);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    if (*((char *)a2 + 47) < 0)
      operator delete((void *)a2[3]);
    v3 = a2[1];
    a2[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *a2;
    *a2 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    MEMORY[0x242690740](a2, 0x1032C408BA9FD94);
  }
}

_QWORD *std::wstring::basic_string[abi:ne180100](_QWORD *__dst, void *__src, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a3 >= 5)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a3 | 1) != 5)
      v7 = a3 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
    v6 = __dst;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v6, __src, 4 * a3);
LABEL_9:
  *((_DWORD *)v6 + a3) = 0;
  return __dst;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t EQKitUtilDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return a2;
  return 0;
}

uint64_t EQKitUtilGetFakeContext()
{
  if (EQKitUtilGetFakeContext::onceToken != -1)
    dispatch_once(&EQKitUtilGetFakeContext::onceToken, &__block_literal_global_1);
  return EQKitUtilGetFakeContext::sFakeContext;
}

uint64_t EQKitUtilUTF32CharFromString(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned __int16 v5;
  unsigned __int16 v6;

  v2 = objc_msgSend(a1, "length");
  if ((unint64_t)(v2 - 1) > 1)
    return 0;
  v3 = v2;
  objc_msgSend(a1, "getCharacters:range:", &v5, 0, v2);
  result = v5;
  if (v3 == 1)
    return result;
  if ((v5 & 0xFC00) != 0xD800)
    return 0;
  if ((v6 & 0xFC00) == 0xDC00)
    return v6 + (v5 << 10) - 56613888;
  return 0;
}

uint64_t EQKitUtilNewStringFromUTF32Char(int a1)
{
  unsigned int v1;
  uint64_t v2;
  _WORD v4[2];

  if ((a1 - 0x10000) >> 20)
  {
    v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    v2 = 2;
  }
  v4[0] = v1;
  return objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", v4, v2);
}

BOOL EQKitLength::isNamedspaceString(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD v6[2];

  LengthMap();
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v6[0] = v4;
  v6[1] = v3;
  return std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&LengthMap(void)::sMap, (uint64_t)v6) != (_QWORD)&unk_257103458;
}

void LengthMap(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
    }
  }
}

void sub_241199A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double EQKitLength::EQKitLengthFromMathMLString@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  double result;
  _QWORD v8[2];

  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  LengthMap();
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  v8[0] = v5;
  v8[1] = v4;
  v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&LengthMap(void)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v6 != &unk_257103458)
  {
    result = *(float *)(v6 + 48);
    *(_DWORD *)a2 = 3;
    *(double *)(a2 + 8) = result;
  }
  return result;
}

uint64_t EQKitLength::EQKitLength(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void **v10;
  int v11;
  void **v12;
  double v13;
  void **v14;
  double v15;
  double v16;
  double v17;
  _BOOL8 v19;
  int v20;
  uint64_t v21;
  void *__p[2];
  unsigned __int8 v23;
  float v24;

  *(_DWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
  v6 = objc_msgSend(v5, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet"));
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v6);
  v24 = 0.0;
  objc_msgSend(v7, "scanFloat:", &v24);
  *(double *)(a1 + 8) = v24;
  v8 = (void *)objc_msgSend((id)objc_msgSend(v7, "string"), "substringFromIndex:", objc_msgSend(v7, "scanLocation"));
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet")), "UTF8String"));

  if ((v23 & 0x80u) == 0)
    v9 = v23;
  else
    v9 = (unint64_t)__p[1];
  switch(v9)
  {
    case 4uLL:
      if ((v23 & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if (!memcmp(v14, "rule", 4uLL))
      {
        v11 = 5;
        goto LABEL_35;
      }
      break;
    case 2uLL:
      if ((v23 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if (!memcmp(v12, "pt", 2uLL))
        goto LABEL_34;
      if (*(_WORD *)v12 == 30821)
      {
        v11 = 2;
        goto LABEL_35;
      }
      if (*(_WORD *)v12 == 28005)
      {
        v11 = 3;
        goto LABEL_35;
      }
      if (!memcmp(v12, "cm", 2uLL))
      {
        v13 = *(double *)(a1 + 8);
LABEL_28:
        v15 = 2.54;
LABEL_29:
        v16 = v13 / v15;
LABEL_32:
        v17 = 72.0;
LABEL_33:
        *(double *)(a1 + 8) = v16 * v17;
LABEL_34:
        v11 = 1;
        goto LABEL_35;
      }
      break;
    case 1uLL:
      v10 = __p;
      if ((v23 & 0x80u) != 0)
        v10 = (void **)__p[0];
      if (*(_BYTE *)v10 == 37)
      {
        v11 = 4;
LABEL_35:
        *(_DWORD *)a1 = v11;
        goto LABEL_36;
      }
      break;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "mm"))
  {
    v13 = *(double *)(a1 + 8) / 10.0;
    goto LABEL_28;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "in"))
  {
    v16 = *(double *)(a1 + 8);
    goto LABEL_32;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "px"))
  {
    v13 = *(double *)(a1 + 8);
    v15 = 96.0;
    goto LABEL_29;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "pc"))
  {
    v16 = *(double *)(a1 + 8);
    v17 = 12.0;
    goto LABEL_33;
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "ch")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "rem")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "vw")
    && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "vh"))
  {
    v19 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, "vmin");
    if (!v19)
    {
      if (EQKitLength::isNamedspaceString(v19, (uint64_t *)__p))
      {
        EQKitLength::EQKitLengthFromMathMLString((uint64_t *)__p, (uint64_t)&v20);
        *(_DWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v21;
      }
      else
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, ""))
        {
          v11 = 6;
          goto LABEL_35;
        }
        *(_DWORD *)a1 = 0;
      }
    }
  }
LABEL_36:
  if ((char)v23 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_241199E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

double EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(double *a1, uint64_t a2, double a3)
{
  double v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = *(unsigned int *)a1;
  switch((int)v4)
  {
    case 2:
    case 3:
    case 5:
      a3 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
      goto LABEL_3;
    case 4:
      v3 = v3 * a3 / 100.0;
      break;
    case 6:
LABEL_3:
      v3 = v3 * a3;
      break;
    default:
      return v3;
  }
  return v3;
}

double EQKitLength::resolveToAbsoluteWithSize(EQKitLength *this, double a2)
{
  double result;

  result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      goto LABEL_5;
    case 4:
      result = result * a2 / 100.0;
      break;
    case 5:
      a2 = 0.0;
LABEL_5:
      result = result * a2;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double EQKitLength::resolveToAbsoluteWithSizeAndRule(EQKitLength *this, double a2, double a3)
{
  double result;

  result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      result = result * a2;
      break;
    case 4:
      result = result * a2 / 100.0;
      break;
    case 5:
      result = result * a3;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

uint64_t EQKitLength::lengthVectorFromString(std::string *__str, uint64_t a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  char v5;
  int v6;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::string::size_type v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  std::string *v29;
  std::string::size_type v30;
  char *v31;
  char *v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v39;
  uint64_t v40;
  std::string v41;
  void *__p;
  char *v43;
  char *v44;

  v3 = 0;
  __p = 0;
  v43 = 0;
  v44 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  v5 = 1;
  while (v3 < size)
  {
    v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    v7 = v6 < 0;
    if (v6 >= 0)
      v8 = __str;
    else
      v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v7)
      v9 = __str->__r_.__value_.__l.__size_;
    else
      v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v9 > v3)
    {
      v10 = (unsigned __int8 *)v8 + v3;
      v11 = (unsigned __int8 *)v8 + v9;
LABEL_14:
      v12 = 0;
      while (*v10 != asc_2412366F7[v12])
      {
        if (++v12 == 3)
        {
          if (++v10 != v11)
            goto LABEL_14;
          goto LABEL_21;
        }
      }
      if (v10 != v11)
      {
        v13 = v10 - (unsigned __int8 *)v8;
        if (v10 - (unsigned __int8 *)v8 != -1)
          goto LABEL_22;
      }
    }
LABEL_21:
    v13 = size;
LABEL_22:
    std::string::basic_string(&v41, __str, v3, v13 - v3, (std::allocator<char> *)&v39);
    EQKitLength::EQKitLength((uint64_t)&v39, (uint64_t *)&v41, 0);
    v14 = v39;
    if (v39)
    {
      v15 = v43;
      if (v43 >= v44)
      {
        v17 = (v43 - (_BYTE *)__p) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v19 = v44 - (_BYTE *)__p;
        if ((v44 - (_BYTE *)__p) >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)&v44, v20);
        v23 = &v21[16 * v17];
        *(_DWORD *)v23 = v39;
        *((_QWORD *)v23 + 1) = v40;
        v24 = (char *)__p;
        v25 = v43;
        v26 = v23;
        while (v25 != v24)
        {
          v27 = *((_DWORD *)v25 - 4);
          v25 -= 16;
          *((_DWORD *)v26 - 4) = v27;
          v26 -= 16;
          *((_QWORD *)v26 + 1) = *((_QWORD *)v25 + 1);
        }
        v16 = v23 + 16;
        __p = v26;
        v43 = v23 + 16;
        v44 = &v21[16 * v22];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v43 = v39;
        *((_QWORD *)v15 + 1) = v40;
        v16 = v15 + 16;
      }
      v43 = v16;
      if (v13 >= size)
        goto LABEL_49;
      v28 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      v29 = v28 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
      v30 = v28 >= 0 ? HIBYTE(__str->__r_.__value_.__r.__words[2]) : __str->__r_.__value_.__l.__size_;
      if (v30 <= v13)
        goto LABEL_50;
      while (memchr(" \t\n", v29->__r_.__value_.__s.__data_[v13], 3uLL))
      {
        if (v30 == ++v13)
          goto LABEL_50;
      }
      if (v13 == -1)
LABEL_50:
        v3 = size;
      else
LABEL_49:
        v3 = v13;
    }
    else
    {
      v5 = 0;
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if (!v14)
        break;
    }
    else if (!v14)
    {
      break;
    }
  }
  v31 = (char *)__p;
  if ((v5 & 1) != 0)
  {
    v32 = v43;
    if (__p != v43)
    {
      v33 = *(void **)a2;
      *(_QWORD *)a2 = __p;
      *(_QWORD *)(a2 + 8) = v32;
      v34 = v44;
      v35 = *(char **)(a2 + 16);
      __p = v33;
      v44 = v35;
      *(_QWORD *)(a2 + 16) = v34;
      v36 = 1;
      v31 = (char *)v33;
      if (!v33)
        return v36;
      goto LABEL_60;
    }
  }
  v36 = 0;
  if (__p)
  {
LABEL_60:
    v43 = v31;
    operator delete(v31);
  }
  return v36;
}

void sub_24119A2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string_view const,float>::map[abi:ne180100]<std::pair<std::string_view const,float> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_24119A378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v19;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a5, *(_QWORD *)(a5 + 8), (void *)a2[4], a2[5]) & 0x80) != 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
    }
    else
    {
      v11 = (uint64_t *)*a2;
      if (*a2)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = a2;
        do
        {
          v12 = (uint64_t *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>((const void *)v12[4], v12[5], *(void **)a5, *(_QWORD *)(a5 + 8)) & 0x80) == 0)return std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>((const void *)a2[4], a2[5], *(void **)a5, *(_QWORD *)(a5 + 8)) & 0x80) != 0)
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = a2;
      do
      {
        v15 = (uint64_t *)v19[2];
        v17 = *v15 == (_QWORD)v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a5, *(_QWORD *)(a5 + 8), (void *)v15[4], v15[5]) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = a2;
      }
      return a4;
    }
    return std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a3, *(_QWORD *)(a3 + 8), (void *)v4[4], v4[5]) & 0x80) == 0)break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>((const void *)v7[4], v7[5], *(void **)a3, *(_QWORD *)(a3 + 8)) & 0x80) == 0)break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1 + 8;
  v4 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__lower_bound<std::string_view>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)a2, *(_QWORD *)(a2 + 8), *(void **)(v5 + 32), *(_QWORD *)(v5 + 40)) & 0x80) != 0)return v3;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__lower_bound<std::string_view>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v7;
  uint64_t *v8;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)(v5 + 32), *(_QWORD *)(v5 + 40), *(void **)a2, *(_QWORD *)(a2 + 8));
      if (v7 >= 0)
        v8 = (uint64_t *)v5;
      else
        v8 = (uint64_t *)(v5 + 8);
      if (v7 >= 0)
        a4 = v5;
      v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t EQKitPseudoUnitLength::EQKitPseudoUnitLength(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  std::string *v9;
  void **v10;
  int64_t v11;
  int64_t size;
  char *v13;
  void **v14;
  void **v15;
  std::string::size_type v16;
  int v17;
  int v18;
  int64_t v19;
  std::string *v20;
  int64_t v21;
  char *v22;
  char *v23;
  int v24;
  int64_t v25;
  std::string *v26;
  int64_t v27;
  char *v28;
  char *v29;
  int v30;
  BOOL v31;
  int v34;
  std::string *v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  void *__p[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  std::string v46;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v4 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  v5 = objc_msgSend(v4, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet"));
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v5);
  if (objc_msgSend(v6, "scanString:intoString:", CFSTR("+"), 0))
  {
    v7 = 2;
  }
  else if (objc_msgSend(v6, "scanString:intoString:", CFSTR("-"), 0))
  {
    v7 = 3;
  }
  else
  {
    if ((objc_msgSend(v6, "isAtEnd") & 1) != 0)
    {
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_12;
    }
    v7 = 1;
  }
  *(_DWORD *)(a1 + 16) = v7;
LABEL_12:
  v8 = (void *)objc_msgSend((id)objc_msgSend(v6, "string"), "substringFromIndex:", objc_msgSend(v6, "scanLocation"));
  std::string::basic_string[abi:ne180100]<0>(&v46, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet")), "UTF8String"));

  std::string::basic_string[abi:ne180100]<0>(v44, "height");
  std::string::basic_string[abi:ne180100]<0>(v42, "depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v46;
  else
    v9 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v45 & 0x80u) == 0)
    v10 = v44;
  else
    v10 = (void **)v44[0];
  if ((v45 & 0x80u) == 0)
    v11 = v45;
  else
    v11 = (int64_t)v44[1];
  if (!v11)
  {
    v16 = 0;
LABEL_44:
    v17 = 1;
    goto LABEL_61;
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    size = v46.__r_.__value_.__l.__size_;
  v13 = (char *)v9 + size;
  if (size >= v11)
  {
    v18 = *(char *)v10;
    v19 = size;
    v20 = v9;
    do
    {
      v21 = v19 - v11;
      if (v21 == -1)
        break;
      v22 = (char *)memchr(v20, v18, v21 + 1);
      if (!v22)
        break;
      v23 = v22;
      if (!memcmp(v22, v10, v11))
      {
        if (v23 != v13)
        {
          v16 = v23 - (char *)v9;
          if (v23 - (char *)v9 != -1)
            goto LABEL_44;
        }
        break;
      }
      v20 = (std::string *)(v23 + 1);
      v19 = v13 - (v23 + 1);
    }
    while (v19 >= v11);
  }
  if ((v43 & 0x80u) == 0)
    v14 = v42;
  else
    v14 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v11 = v43;
  else
    v11 = (int64_t)v42[1];
  if (!v11)
  {
    v16 = 0;
LABEL_52:
    v17 = 2;
    goto LABEL_61;
  }
  if (size >= v11)
  {
    v24 = *(char *)v14;
    v25 = size;
    v26 = v9;
    do
    {
      v27 = v25 - v11;
      if (v27 == -1)
        break;
      v28 = (char *)memchr(v26, v24, v27 + 1);
      if (!v28)
        break;
      v29 = v28;
      if (!memcmp(v28, v14, v11))
      {
        if (v29 != v13)
        {
          v16 = v29 - (char *)v9;
          if (v29 - (char *)v9 != -1)
            goto LABEL_52;
        }
        break;
      }
      v26 = (std::string *)(v29 + 1);
      v25 = v13 - (v29 + 1);
    }
    while (v25 >= v11);
  }
  if ((v41 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v41 & 0x80u) == 0)
    v11 = v41;
  else
    v11 = (int64_t)__p[1];
  if (!v11)
  {
    v16 = 0;
LABEL_60:
    v17 = 3;
LABEL_61:
    *(_DWORD *)(a1 + 20) = v17;
    std::string::erase(&v46, v16, v11);
    goto LABEL_62;
  }
  if (size >= v11)
  {
    v34 = *(char *)v15;
    v35 = v9;
    do
    {
      if (size - v11 == -1)
        break;
      v36 = (char *)memchr(v35, v34, size - v11 + 1);
      if (!v36)
        break;
      v37 = v36;
      if (!memcmp(v36, v15, v11))
      {
        if (v37 != v13)
        {
          v16 = v37 - (char *)v9;
          if (v37 - (char *)v9 != -1)
            goto LABEL_60;
        }
        break;
      }
      v35 = (std::string *)(v37 + 1);
      size = v13 - (v37 + 1);
    }
    while (size >= v11);
  }
  *(_DWORD *)(a1 + 20) = 0;
LABEL_62:
  EQKitLength::EQKitLength(&v38, &v46, 1);
  v30 = v38;
  *(_DWORD *)a1 = v38;
  *(_QWORD *)(a1 + 8) = v39;
  if (*(_DWORD *)(a1 + 20))
    v31 = v30 == 6;
  else
    v31 = 1;
  if (!v31 && v30 != 4)
  {
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if ((char)v41 < 0)
    operator delete(__p[0]);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  if ((char)v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  return a1;
}

void sub_24119AAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

double EQKitPseudoUnitLength::adjustedPseudoLength(EQKitPseudoUnitLength *this, double a2, double a3, double a4, double a5)
{
  int v5;
  double v6;
  int v7;

  v5 = *((_DWORD *)this + 5);
  switch(v5)
  {
    case 3:
      v6 = *((double *)this + 1) * a5;
      break;
    case 2:
      v6 = *((double *)this + 1) * a4;
      break;
    case 1:
      v6 = *((double *)this + 1) * a3;
      break;
    default:
      return a2;
  }
  if (*(_DWORD *)this == 4)
    v6 = v6 / 100.0;
  v7 = *((_DWORD *)this + 4);
  if (v7 != 1)
  {
    if (v7 == 3)
      return a2 - v6;
    if (v7 == 2)
      return v6 + a2;
    return a2;
  }
  return v6;
}

double EQKitPseudoUnitLength::resolveToAbsoluteLength(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v9;
  double v11;
  int v13;

  v9 = a3;
  v11 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)a1, a2, a3);
  if (*(_DWORD *)(a1 + 20))
    return EQKitPseudoUnitLength::adjustedPseudoLength((EQKitPseudoUnitLength *)a1, v9, a4, a5, a6);
  v13 = *(_DWORD *)(a1 + 16);
  switch(v13)
  {
    case 1:
      return v11;
    case 3:
      return v9 - v11;
    case 2:
      return v11 + v9;
  }
  return v9;
}

double EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this)
{
  double result;

  *(_QWORD *)this = 4;
  result = 0.25;
  *(_OWORD *)((char *)this + 8) = xmmword_241211900;
  *((_QWORD *)this + 3) = 0x3FD0000000000000;
  return result;
}

EQKitPath::QuantizationConfig *EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this, NSDictionary *a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  float v10;
  uint64_t v11;
  void *v12;
  float v13;

  *(_QWORD *)this = 4;
  *(_OWORD *)((char *)this + 8) = xmmword_241211900;
  *((_QWORD *)this + 3) = 0x3FD0000000000000;
  v4 = objc_opt_class();
  v5 = (void *)EQKitUtilDynamicCast(v4, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("bucketsPerUnit")));
  if (v5)
  {
    v6 = objc_msgSend(v5, "unsignedIntegerValue");
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    *(_QWORD *)this = v7;
    *((double *)this + 1) = 1.0 / (double)v7;
  }
  v8 = objc_opt_class();
  v9 = (void *)EQKitUtilDynamicCast(v8, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("thresholdCurveBoundsMinMax")));
  if (v9)
  {
    objc_msgSend(v9, "floatValue");
    *((double *)this + 2) = v10;
  }
  v11 = objc_opt_class();
  v12 = (void *)EQKitUtilDynamicCast(v11, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("thresholdCurveControlPointDistance")));
  if (v12)
  {
    objc_msgSend(v12, "floatValue");
    *((double *)this + 3) = v13;
  }
  return this;
}

uint64_t EQKitPath::QuantizationConfig::setThresholdCurveControlPointDistance(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

uint64_t EQKitPath::Stem::Stem(uint64_t result, int a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 56) = a2;
  v4 = (_OWORD *)(result + 8);
  if (a4)
  {
    v5 = a4[1];
    *v4 = *a4;
    *(_OWORD *)(result + 24) = v5;
    v7 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    v9 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)(result + 32);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v7 = 0;
    *v4 = 0u;
    *(_OWORD *)(result + 24) = 0u;
  }
  v10 = *(_QWORD *)(a3 + 8);
  v11 = (*(_QWORD *)(a3 + 16) - v10) >> 4;
  if (v11 <= v7)
    v12 = (double *)MEMORY[0x24BDBEFB0];
  else
    v12 = (double *)(v10 + 16 * v7);
  v13 = *v12;
  v14 = v12[1];
  if (v11 <= v6)
    v15 = (double *)MEMORY[0x24BDBEFB0];
  else
    v15 = (double *)(v10 + 16 * v6);
  v16 = v15[1];
  v17 = *v15 - v13;
  v18 = v16 - v14;
  if (v11 <= v9)
    v19 = (double *)MEMORY[0x24BDBEFB0];
  else
    v19 = (double *)(v10 + 16 * v9);
  v20 = *v19;
  v21 = v19[1];
  if (v11 <= v8)
    v22 = (double *)MEMORY[0x24BDBEFB0];
  else
    v22 = (double *)(v10 + 16 * v8);
  v23 = v22[1];
  v24 = *v22 - v20;
  v25 = v23 - v21;
  if ((a2 | 2) == 3)
  {
    v26 = fabs(v18);
    v27 = fabs(v25);
    if (v26 >= v27)
      v26 = v27;
    v28 = vabdd_f64(*v22, v13);
    v29 = vabdd_f64(v20, *v15);
    if (v28 < v29)
      v28 = v29;
    *(double *)(result + 40) = v26;
    *(double *)(result + 48) = v28;
    if (v18 != 0.0 && v25 != 0.0)
    {
      v30 = v17 / v18;
      v31 = v24 / v25;
      goto LABEL_31;
    }
  }
  else
  {
    v32 = fabs(v17);
    v33 = fabs(v24);
    if (v32 >= v33)
      v32 = v33;
    v34 = vabdd_f64(v23, v14);
    v35 = vabdd_f64(v21, v16);
    if (v34 < v35)
      v34 = v35;
    *(double *)(result + 40) = v32;
    *(double *)(result + 48) = v34;
    if (v17 != 0.0 && v24 != 0.0)
    {
      v30 = v18 / v17;
      v31 = v25 / v24;
LABEL_31:
      if (vabdd_f64(v30, v31) < 0.00100000005)
        *(_BYTE *)result = 1;
    }
  }
  return result;
}

double EQKitPath::vector(EQKitPath *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  double *v5;
  double *v6;
  double *v7;

  v3 = *((_QWORD *)this + 1);
  v4 = (*((_QWORD *)this + 2) - v3) >> 4;
  v5 = (double *)(v3 + 16 * a2);
  if (v4 <= a2)
    v5 = (double *)MEMORY[0x24BDBEFB0];
  v6 = (double *)(v3 + 16 * a3);
  if (v4 <= a3)
    v7 = (double *)MEMORY[0x24BDBEFB0];
  else
    v7 = v6;
  return *v7 - *v5;
}

__n128 EQKitPath::Stem::Stem(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t EQKitPath::Stem::adjustStemPoints(uint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v5 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v6 = (double *)(*a3 + 16 * v4);
  v8 = *v6;
  v7 = v6[1];
  v9 = (double *)(*a3 + 16 * *(_QWORD *)(result + 24));
  v11 = *v9;
  v10 = v9[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (*(_QWORD *)(a2 + 16) - v12) >> 4;
  if (v13 <= v5)
    v14 = (double *)MEMORY[0x24BDBEFB0];
  else
    v14 = (double *)(v12 + 16 * v5);
  v15 = (double *)(v12 + 16 * v4);
  if (v13 <= v4)
    v16 = (double *)MEMORY[0x24BDBEFB0];
  else
    v16 = v15;
  v17 = *v16 - *v14;
  v18 = v16[1] - v14[1];
  switch(*(_DWORD *)(result + 56))
  {
    case 0:
      v8 = v8 - a4;
      v11 = v11 - a4;
      goto LABEL_11;
    case 1:
      v7 = v7 - a4;
      v10 = v10 - a4;
      goto LABEL_13;
    case 2:
      v8 = v8 + a4;
      v11 = v11 + a4;
LABEL_11:
      v19 = v18 * a4 / v17;
      v7 = v7 + v19;
      v10 = v10 + v19;
      break;
    case 3:
      v7 = v7 + a4;
      v10 = v10 + a4;
LABEL_13:
      v20 = v17 * a4 / v18;
      v8 = v8 + v20;
      v11 = v11 + v20;
      break;
    default:
      break;
  }
  *v6 = v8;
  v6[1] = v7;
  *v9 = v11;
  v9[1] = v10;
  return result;
}

void EQKitPath::extractorFunction(EQKitPath *this, _QWORD *a2, const CGPathElement *a3)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unint64_t v9;
  char **v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  EQKitPath *v29;
  double *v30;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BOOL4 v44;
  __int128 *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  _BOOL4 v70;
  __int128 v71;

  if (this)
  {
    if (a2)
    {
      v4 = (_QWORD *)*((_QWORD *)this + 1);
      if (v4)
      {
        v5 = *(_DWORD *)a2;
        v6 = 2;
        v7 = 3;
        if (*(_DWORD *)a2 != 3)
          v7 = 0;
        v65 = *(_DWORD *)a2;
        v8 = v5 == 2 || *(_DWORD *)a2 == 3;
        if (v5 != 2)
          v6 = v7;
        if (v5 < 2)
          v8 = 1;
        v70 = v8;
        if (v5 >= 2)
          v9 = v6;
        else
          v9 = 1;
        v10 = (char **)(v4 + 1);
        v66 = v4[1];
        v68 = v4[2];
        v69 = v9;
        if (a2[1] && v70)
        {
          v11 = 0;
          v12 = v4 + 3;
          v13 = (char *)v4[2];
          if (v9 <= 1)
            v14 = 1;
          else
            v14 = v9;
          do
          {
            v15 = (_OWORD *)(a2[1] + 16 * v11);
            if ((unint64_t)v13 >= *v12)
            {
              v16 = (v13 - *v10) >> 4;
              if ((unint64_t)(v16 + 1) >> 60)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v17 = *v12 - (_QWORD)*v10;
              v18 = v17 >> 3;
              if (v17 >> 3 <= (unint64_t)(v16 + 1))
                v18 = v16 + 1;
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
                v19 = 0xFFFFFFFFFFFFFFFLL;
              else
                v19 = v18;
              if (v19)
                v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)(v4 + 3), v19);
              else
                v20 = 0;
              v21 = &v20[16 * v16];
              *(_OWORD *)v21 = *v15;
              v23 = (char *)v4[1];
              v22 = (char *)v4[2];
              v24 = v21;
              if (v22 != v23)
              {
                do
                {
                  *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
                  v24 -= 16;
                  v22 -= 16;
                }
                while (v22 != v23);
                v22 = *v10;
              }
              v13 = v21 + 16;
              v4[1] = v24;
              v4[2] = v21 + 16;
              v4[3] = &v20[16 * v19];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_OWORD *)v13 = *v15;
              v13 += 16;
            }
            v4[2] = v13;
            ++v11;
          }
          while (v11 != v14);
        }
        v25 = (char *)v4[4];
        v26 = (char *)v4[5];
        v27 = (v26 - v25) >> 4;
        if (*(_DWORD *)a2 != 4 || v26 == v25)
        {
          v29 = this;
        }
        else
        {
          v29 = this;
          if (v27 > *(_QWORD *)(v4[8] - 8) && *(_DWORD *)&v25[16 * v27 - 16] == 1)
          {
            v30 = (double *)&(*v10)[16 * *(_QWORD *)&v25[16 * v27 - 8]];
            if (*((double *)this + 3) == *v30 && *((double *)this + 4) == v30[1])
            {
              v4[2] -= 16;
              v26 -= 16;
              v4[5] = v26;
              v27 = (v26 - v25) >> 4;
            }
          }
        }
        v32 = (v68 - v66) >> 4;
        v33 = v4[6];
        if ((unint64_t)v26 >= v33)
        {
          v36 = (v26 - v25) >> 4;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v38 = v33 - (_QWORD)v25;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v39 = 0xFFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)(v4 + 6), v39);
            v25 = (char *)v4[4];
            v26 = (char *)v4[5];
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[16 * v36];
          v42 = &v40[16 * v39];
          *(_DWORD *)v41 = v65;
          *((_QWORD *)v41 + 1) = v32;
          v34 = v41 + 16;
          if (v26 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
              v41 -= 16;
              v26 -= 16;
            }
            while (v26 != v25);
            v25 = (char *)v4[4];
          }
          v4[4] = v41;
          v4[5] = v34;
          v4[6] = v42;
          v35 = v69;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v26 = v65;
          *((_QWORD *)v26 + 1) = v32;
          v34 = v26 + 16;
          v35 = v69;
        }
        v4[5] = v34;
        v43 = a2[1];
        v44 = v43 != 0;
        v45 = (__int128 *)(v43 + 16 * v35 - 16);
        if (!v70 || !v44)
          v45 = (__int128 *)MEMORY[0x24BDBEFB0];
        v71 = *v45;
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 == 4)
          {
            *((_BYTE *)v29 + 16) = 0;
LABEL_104:
            *(_QWORD *)v29 += v35;
            return;
          }
          if (*((_BYTE *)v29 + 16))
            goto LABEL_104;
          v54 = v4[9];
          v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v54)
            goto LABEL_84;
          v48 = (unint64_t *)v4[7];
          v56 = v47 - v48;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            v57 = v54 - (_QWORD)v48;
            v58 = (uint64_t)(v54 - (_QWORD)v48) >> 2;
            if (v58 <= v56 + 1)
              v58 = v56 + 1;
            if (v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v59);
              v48 = (unint64_t *)v4[7];
              v47 = (unint64_t *)v4[8];
            }
            else
            {
              v60 = 0;
            }
            v61 = (unint64_t *)&v60[8 * v56];
            v62 = &v60[8 * v59];
            *v61 = v27;
            v55 = v61 + 1;
            while (v47 != v48)
            {
              v64 = *--v47;
              *--v61 = v64;
            }
LABEL_101:
            v4[7] = v61;
            v4[8] = v55;
            v4[9] = v62;
            if (v48)
              operator delete(v48);
            goto LABEL_103;
          }
        }
        else
        {
          v46 = v4[9];
          v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v46)
          {
LABEL_84:
            *v47 = v27;
            v55 = v47 + 1;
LABEL_103:
            v4[8] = v55;
            *((_BYTE *)v29 + 16) = 1;
            *(_OWORD *)((char *)v29 + 24) = v71;
            goto LABEL_104;
          }
          v48 = (unint64_t *)v4[7];
          v49 = v47 - v48;
          if (!((unint64_t)(v49 + 1) >> 61))
          {
            v50 = v46 - (_QWORD)v48;
            v51 = (uint64_t)(v46 - (_QWORD)v48) >> 2;
            if (v51 <= v49 + 1)
              v51 = v49 + 1;
            if (v50 >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
            {
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v52);
              v48 = (unint64_t *)v4[7];
              v47 = (unint64_t *)v4[8];
            }
            else
            {
              v53 = 0;
            }
            v61 = (unint64_t *)&v53[8 * v49];
            v62 = &v53[8 * v52];
            *v61 = v27;
            v55 = v61 + 1;
            while (v47 != v48)
            {
              v63 = *--v47;
              *--v61 = v63;
            }
            goto LABEL_101;
          }
        }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

void sub_24119B534(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24119B348);
}

void sub_24119B544(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x24119B1D8);
}

void EQKitPath::EQKitPath(EQKitPath *this, CGPathRef path)
{
  CGMutablePathRef MutableCopy;
  int64x2_t v4;

  *(_OWORD *)((char *)this + 8) = 0u;
  *((_BYTE *)this + 120) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 65) = 0u;
  if (path)
    MutableCopy = CGPathCreateMutableCopy(path);
  else
    MutableCopy = 0;
  *(_QWORD *)this = MutableCopy;
  v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + 8) = v4;
  *((int64x2_t *)this + 9) = v4;
}

void sub_24119B5C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 56);
  if (v5)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  EQKitPath::EQKitPath(v3, v2, v1);
  _Unwind_Resume(a1);
}

void EQKitPath::EQKitPath(EQKitPath *this, const __CTFont *a2, int a3)
{
  unsigned int v6;
  CFIndex v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CTFont *v10;
  const __CTFont *v11;
  int64x2_t v12;
  CGAffineTransform v13;
  CGGlyph glyphs[2];
  UniChar characters[2];
  CFRange v16;

  *((_BYTE *)this + 120) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_BYTE *)this + 80) = 0;
  if (a2)
  {
    *(_DWORD *)glyphs = -1;
    memset(&v13, 0, sizeof(v13));
    CGAffineTransformMakeScale(&v13, 1.0, -1.0);
    if ((a3 - 0x10000) >> 20)
    {
      v7 = 1;
      LOWORD(v6) = a3;
    }
    else
    {
      v6 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      v7 = 2;
    }
    characters[0] = v6;
    if (CTFontGetGlyphsForCharacters(a2, characters, glyphs, v7))
    {
      *(_QWORD *)this = CTFontCreatePathForGlyph(a2, glyphs[0], &v13);
    }
    else
    {
      v8 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], characters, v7);
      v9 = v8;
      if (v8)
      {
        v16.length = CFStringGetLength(v8);
        v16.location = 0;
        v10 = CTFontCreateForString(a2, v9, v16);
        v11 = v10;
        if (v10)
        {
          CTFontGetGlyphsForCharacters(v10, characters, glyphs, v7);
          *(_QWORD *)this = CTFontCreatePathForGlyph(v11, glyphs[0], &v13);
          CFRelease(v11);
        }
        CFRelease(v9);
      }
    }
  }
  v12 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + 8) = v12;
  *((int64x2_t *)this + 9) = v12;
}

void sub_24119B758(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[1];
  if (v5)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::~EQKitPath(CGPathRef *this)
{
  const CGPath *v2;
  const CGPath *v3;
  const CGPath *v4;

  CGPathRelease(*this);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
  v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

uint64_t EQKitPath::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const CGPath *MutableCopy;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    MutableCopy = *(const CGPath **)a2;
    if (*(_QWORD *)a2)
      MutableCopy = CGPathCreateMutableCopy(MutableCopy);
    *(_QWORD *)a1 = MutableCopy;
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v6 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
  }
  return a1;
}

EQKitPath *EQKitPath::newPathFromCharacterWithFont(EQKitPath *this, CTFontRef font, const __CTFont *a3)
{
  EQKitPath *v3;
  CGPathRef v4;
  const CGPath *v5;
  CGAffineTransform v7;
  CGGlyph glyphs;
  UniChar characters;

  v3 = font;
  characters = (unsigned __int16)this;
  glyphs = -1;
  if (font)
  {
    if (CTFontGetGlyphsForCharacters(font, &characters, &glyphs, 1)
      && (memset(&v7, 0, sizeof(v7)),
          CGAffineTransformMakeScale(&v7, 1.0, -1.0),
          (v4 = CTFontCreatePathForGlyph(v3, glyphs, &v7)) != 0))
    {
      v5 = v4;
      v3 = (EQKitPath *)operator new();
      EQKitPath::EQKitPath(v3, v5);
      CGPathRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_24119B964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

EQKitPath *EQKitPath::newPathFromGlyphWithFont(EQKitPath *this, const __CTFont *a2, const __CTFont *a3)
{
  CGGlyph v4;
  CGPathRef v5;
  const CGPath *v6;
  EQKitPath *v7;
  CGAffineTransform v9;

  v4 = (unsigned __int16)this;
  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.0, -1.0);
  v5 = CTFontCreatePathForGlyph(a2, v4, &v9);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (EQKitPath *)operator new();
  EQKitPath::EQKitPath(v7, v6);
  CGPathRelease(v6);
  return v7;
}

void sub_24119BA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

void EQKitPath::extractPath(EQKitPath *this)
{
  _QWORD info[2];
  char v2;

  if (!*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 1;
    info[0] = 0;
    info[1] = this;
    v2 = 0;
    CGPathApply(*(CGPathRef *)this, info, (CGPathApplierFunction)EQKitPath::extractorFunction);
  }
}

CGFloat *EQKitPath::computePathBounds(CGFloat *this)
{
  CGFloat *v1;
  CGRect PathBoundingBox;

  v1 = this;
  *((_BYTE *)this + 120) = 1;
  PathBoundingBox = CGPathGetPathBoundingBox((CGPathRef)*(_QWORD *)this);
  v1[11] = PathBoundingBox.origin.x;
  v1[12] = PathBoundingBox.origin.y;
  v1 += 11;
  v1[2] = PathBoundingBox.size.width;
  v1[3] = PathBoundingBox.size.height;
  return v1;
}

BOOL EQKitPath::elementMinMax(EQKitPath *this, unint64_t a2, CGPoint *a3, CGPoint *a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  _BOOL8 result;
  unint64_t v30;
  uint64_t v31;
  char v32;

  EQKitPath::extractPath(this);
  v8 = *MEMORY[0x24BDBEFB0];
  v9 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
  v10 = *((_QWORD *)this + 4);
  if (a2 >= (*((_QWORD *)this + 5) - v10) >> 4)
    goto LABEL_35;
  v11 = *(int *)(v10 + 16 * a2);
  v12 = v11 > 3 ? 0 : qword_241211970[v11];
  EQKitPath::subpathContainingElement((unint64_t **)this, a2, (uint64_t)&v30);
  v13 = v30 >= a2 ? v31 + v30 : a2;
  v14 = v30 >= v13 - 1 ? v31 + v30 : v13 - 1;
  v15 = v14 - 1;
  v16 = v13 != v31 + v30 || v32 == 0;
  v17 = v16 ? v13 - 1 : v15;
  if (v17 == 0x7FFFFFFFFFFFFFFFLL || (v18 = EQKitPath::endPointIndexForElement(this, v17), v18 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v19 = 0;
  }
  else
  {
    v20 = (double *)(*((_QWORD *)this + 1) + 16 * v18);
    v8 = *v20;
    v9 = v20[1];
    v19 = 1;
  }
  v21 = *(_QWORD *)(v10 + 16 * a2 + 8);
  if (v21 >= v21 + v12)
  {
LABEL_35:
    result = 0;
    v25 = v8;
    v24 = v9;
  }
  else
  {
    v22 = (double *)(*((_QWORD *)this + 1) + 16 * v21 + 8);
    v23 = v12;
    v24 = v9;
    v25 = v8;
    v26 = v19;
    do
    {
      v28 = *(v22 - 1);
      v27 = *v22;
      if (v26)
      {
        if (v28 < v25)
          v25 = *(v22 - 1);
        if (v27 < v24)
          v24 = *v22;
        if (v28 > v8)
          v8 = *(v22 - 1);
        if (v27 > v9)
          v9 = *v22;
      }
      else
      {
        v9 = *v22;
        v8 = *(v22 - 1);
        v25 = v8;
        v24 = *v22;
      }
      ++v26;
      v22 += 2;
      --v23;
    }
    while (v23);
    result = (unint64_t)(v12 + v19) > 1;
  }
  a3->x = v25;
  a3->y = v24;
  a4->x = v8;
  a4->y = v9;
  return result;
}

void EQKitPath::subpathContainingElement(unint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  EQKitPath::extractPath((EQKitPath *)this);
  *(_OWORD *)a3 = xmmword_241211910;
  *(_BYTE *)(a3 + 16) = 0;
  v6 = this[4];
  v7 = ((char *)this[5] - (char *)v6) >> 4;
  if (v7 > a2)
  {
    v9 = this[7];
    v8 = this[8];
    if (v8 != v9)
    {
      v10 = v8 - v9;
      v11 = this[7];
      do
      {
        v12 = v10 >> 1;
        v13 = &v11[v10 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v10 += ~(v10 >> 1);
        if (v15 > a2)
          v10 = v12;
        else
          v11 = v14;
      }
      while (v10);
      if (v11 != v9)
      {
        v16 = *(v11 - 1);
        if (v11 != v8)
          v7 = *v11;
        v17 = v6[2 * v7 - 2];
        *(_QWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = v7 - v16;
        *(_BYTE *)(a3 + 16) = v17 == 4;
      }
    }
  }
}

uint64_t EQKitPath::endPointIndexForElement(EQKitPath *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  EQKitPath::extractPath(this);
  v4 = *((_QWORD *)this + 4);
  if (a2 >= (*((_QWORD *)this + 5) - v4) >> 4)
    return 0x7FFFFFFFFFFFFFFFLL;
  v5 = *(int *)(v4 + 16 * a2);
  if (v5 > 3)
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return qword_241211950[v5] + *(_QWORD *)(v4 + 16 * a2 + 8);
}

void EQKitPath::quantizeElementEdge(EQKitPath *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26[9];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  EQKitPath::extractPath(a1);
  v10 = *((_QWORD *)a1 + 4);
  if (a2 < (*((_QWORD *)a1 + 5) - v10) >> 4)
  {
    v11 = (int *)(v10 + 16 * a2);
    v12 = *v11;
    if ((*v11 - 2) < 2)
    {
      EQKitPath::subpathContainingElement((unint64_t **)a1, a2, (uint64_t)&v23);
      if (v23 >= a2)
        v14 = v24 + v23;
      else
        v14 = a2;
      if (v23 >= v14 - 1)
        v15 = v24 + v23;
      else
        v15 = v14 - 1;
      v16 = v15 - 1;
      if (v14 != v24 + v23 || v25 == 0)
        v18 = v14 - 1;
      else
        v18 = v16;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL
        || (v19 = EQKitPath::endPointIndexForElement(a1, v18), v19 == 0x7FFFFFFFFFFFFFFFLL))
      {
        v20 = 0;
      }
      else
      {
        *(_OWORD *)v26 = *(_OWORD *)(*((_QWORD *)a1 + 1) + 16 * v19);
        v20 = 1;
      }
      v21 = *v11;
      if (v21 > 3)
      {
        v22 = 0;
      }
      else
      {
        v22 = qword_241211970[v21];
        memcpy(&v26[2 * v20], (const void *)(*((_QWORD *)a1 + 1) + 16 * *(_QWORD *)(v10 + 16 * a2 + 8)), 16 * v22);
      }
      _quantizeCurve((uint64_t)v26, v22 + v20, a3, a4, a5);
    }
    else if (v12 == 4 || v12 == 1)
    {
      v26[0] = 0x7FFFFFFFFFFFFFFFLL;
      v23 = 0x7FFFFFFFFFFFFFFFLL;
      if (EQKitPath::isLineTo((unint64_t **)a1, a2, v26, &v23, 0))
        _quantizeLine(a3, a4, a5, *(double *)(*((_QWORD *)a1 + 1) + 16 * v26[0]), *(double *)(*((_QWORD *)a1 + 1) + 16 * v26[0] + 8), *(double *)(*((_QWORD *)a1 + 1) + 16 * v23), *(double *)(*((_QWORD *)a1 + 1) + 16 * v23 + 8));
    }
  }
}

BOOL EQKitPath::isLineTo(unint64_t **this, unint64_t a2, uint64_t *a3, _QWORD *a4, __int128 *a5)
{
  unint64_t v9;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  int v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  EQKitPath *v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;

  if (a5)
  {
    v22 = *a5;
    v23 = *((_QWORD *)a5 + 2);
  }
  else
  {
    EQKitPath::subpathContainingElement(this, a2, (uint64_t)&v22);
  }
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  *a4 = 0x7FFFFFFFFFFFFFFFLL;
  v9 = v22;
  if (a2 < (unint64_t)v22 || a2 - (unint64_t)v22 >= *((_QWORD *)&v22 + 1))
    return 0;
  if (a2 <= (unint64_t)v22)
    v12 = *((_QWORD *)&v22 + 1) + v22;
  else
    v12 = a2;
  v13 = v12 - 1;
  v14 = this[4];
  v15 = v14[2 * a2];
  if (a2 == (_QWORD)v22 && ((v16 = v14[2 * v13], !v15) ? (v17 = v16 == 4) : (v17 = 0), v17))
  {
    v18 = *((_QWORD *)&v22 + 1) + a2;
    if (v13 > a2)
      v18 = v13;
    v13 = v18 - 1;
  }
  else
  {
    if (a2 + 1 == *((_QWORD *)&v22 + 1) + (_QWORD)v22 && v15 == 4)
    {
      v19 = (EQKitPath *)this;
      goto LABEL_26;
    }
    if (v15 != 1)
    {
      v20 = *a3;
      return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  v19 = (EQKitPath *)this;
  v9 = a2;
LABEL_26:
  *a4 = EQKitPath::endPointIndexForElement(v19, v9);
  v20 = EQKitPath::endPointIndexForElement((EQKitPath *)this, v13);
  *a3 = v20;
  return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _quantizeLine(uint64_t result, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;

  if ((result & 0xFFFFFFFD) != 0)
    return result;
  v7 = result & 0xFFFFFFFE;
  v8 = *a3;
  v9 = (a3[1] - *a3) >> 3;
  if (a5 == a7)
  {
    v10 = a5 * (double)*(unint64_t *)(a2 + 8);
    v11 = (uint64_t)(float)(floorf(v10) - (float)*(uint64_t *)a2);
    goto LABEL_5;
  }
  v14 = (double)*(unint64_t *)(a2 + 8);
  v15 = a5 * v14;
  v16 = (float)*(uint64_t *)a2;
  v11 = (uint64_t)(float)(floorf(v15) - v16);
  v17 = a7 * v14;
  v18 = floorf(v17);
  v19 = (uint64_t)(float)(v18 - v16);
  if (a4 == a6)
  {
    if (v11 <= v19)
      v20 = (uint64_t)(float)(v18 - v16);
    else
      v20 = v11;
    if (v11 >= v19)
      v11 = (uint64_t)(float)(v18 - v16);
    v21 = v11 & ~(v11 >> 63);
    v22 = v9 - 1;
    if (v20 < v22)
      v22 = v20;
    if (v21 <= v22)
    {
      if (a6 >= a4)
        v23 = a4;
      else
        v23 = a6;
      if (a4 < a6)
        a4 = a6;
      do
      {
        v24 = *(double *)(v8 + 8 * v21);
        if (v7 == 2)
        {
          if (v24 >= a4)
            v25 = *(double *)(v8 + 8 * v21);
          else
            v25 = a4;
        }
        else if (v23 >= v24)
        {
          v25 = *(double *)(v8 + 8 * v21);
        }
        else
        {
          v25 = v23;
        }
        *(double *)(v8 + 8 * v21) = v25;
      }
      while (v21++ < v22);
    }
  }
  else
  {
    if (v11 == v19)
    {
LABEL_5:
      if (v11 < 0 || v9 <= v11)
        return result;
      v12 = *(double *)(v8 + 8 * v11);
      if (v7 == 2)
      {
        if (a4 < a6)
          a4 = a6;
        v13 = v12 < a4;
      }
      else
      {
        if (a6 < a4)
          a4 = a6;
        v13 = a4 < v12;
      }
      if (!v13)
        a4 = *(double *)(v8 + 8 * v11);
LABEL_39:
      *(double *)(v8 + 8 * v11) = a4;
      return result;
    }
    if (v11 > v19)
      v27 = a4;
    else
      v27 = a6;
    if (v11 > v19)
      v28 = a5;
    else
      v28 = a7;
    if (v11 > v19)
    {
      v29 = v19;
    }
    else
    {
      a6 = a4;
      v29 = v11;
    }
    if (v11 > v19)
    {
      v30 = a7;
    }
    else
    {
      v11 = v19;
      v30 = a5;
    }
    v31 = (v27 - a6) / (v28 - v30);
    v32 = v29 + 1;
    a4 = a6 + ((double)(uint64_t)(v29 + 1 + *(_QWORD *)a2) / v14 - v30) * v31;
    if ((v29 & 0x8000000000000000) == 0 && v29 < v9)
    {
      v33 = *(double *)(v8 + 8 * v29);
      if (a4 >= a6)
        v34 = a6;
      else
        v34 = a4;
      if (v34 >= v33)
        v34 = *(double *)(v8 + 8 * v29);
      if (a6 < a4)
        a6 = a4;
      if (v33 >= a6)
        a6 = *(double *)(v8 + 8 * v29);
      if (v7 != 2)
        a6 = v34;
      *(double *)(v8 + 8 * v29) = a6;
    }
    if ((uint64_t)v32 < v11)
    {
      v35 = *(double *)(a2 + 16);
      do
      {
        v36 = a4;
        a4 = a4 + v31 * v35;
        if ((v32 & 0x8000000000000000) == 0 && v32 < v9)
        {
          v37 = *(double *)(v8 + 8 * v32);
          if (a4 >= v36)
            v38 = v36;
          else
            v38 = a4;
          if (v38 >= v37)
            v38 = *(double *)(v8 + 8 * v32);
          if (v36 < a4)
            v36 = a4;
          if (v37 >= v36)
            v36 = *(double *)(v8 + 8 * v32);
          if (v7 != 2)
            v36 = v38;
          *(double *)(v8 + 8 * v32) = v36;
        }
        ++v32;
      }
      while (v11 != v32);
    }
    if ((v11 & 0x8000000000000000) == 0 && v11 < v9)
    {
      v39 = *(double *)(v8 + 8 * v11);
      if (v27 >= a4)
        v40 = a4;
      else
        v40 = v27;
      if (v40 >= v39)
        v40 = *(double *)(v8 + 8 * v11);
      if (a4 < v27)
        a4 = v27;
      if (v39 >= a4)
        a4 = *(double *)(v8 + 8 * v11);
      if (v7 != 2)
        a4 = v40;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t _quantizeCurve(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  double v24;
  double v25;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  float64x2_t v39;
  float64x2_t *v40;
  const double *v41;
  int8x16_t v42;
  int8x16_t v43;
  int64x2_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  double v49;
  const double *v50;
  int64x2_t v52;
  int64x2_t v53;
  float64x2_t v54[2];
  float64x2_t v55[2];
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  __int128 v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  float64x2x2_t v65;
  float64x2x2_t v66;

  v64 = *MEMORY[0x24BDAC8D0];
  v8 = *(float64x2_t *)result;
  v9 = *(double *)(result + 8);
  v10 = v9;
  v11 = *(double *)result;
  v12 = *(double *)result;
  v13 = v9;
  if (a2 >= 2)
  {
    v14 = a2 - 1;
    v15 = (double *)(result + 24);
    v13 = *(double *)(result + 8);
    v12 = *(double *)result;
    v11 = *(double *)result;
    v10 = v13;
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      if (v16 < v12)
        v12 = *(v15 - 1);
      if (v17 < v13)
        v13 = *v15;
      if (v11 < v16)
        v11 = *(v15 - 1);
      if (v10 < v17)
        v10 = *v15;
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  if ((a3 & 0xFFFFFFFD) == 0)
  {
    v18 = (double)*(unint64_t *)(a4 + 8);
    v19 = v13 * v18;
    v20 = (float)*(uint64_t *)a4;
    v21 = (uint64_t)(float)(floorf(v19) - v20);
    v22 = v10 * v18;
    if (v21 == (uint64_t)(float)(floorf(v22) - v20))
    {
      if ((v21 & 0x8000000000000000) == 0)
      {
        v23 = *a5;
        if ((a5[1] - *a5) >> 3 > v21)
        {
          v24 = *(double *)(v23 + 8 * v21);
          if ((a3 & 0xFFFFFFFE) == 2)
          {
            if (v12 >= v11)
              v25 = v12;
            else
              v25 = v11;
            _NF = v24 < v25;
          }
          else
          {
            if (v11 >= v12)
              v25 = v12;
            else
              v25 = v11;
            _NF = v25 < v24;
          }
          if (_NF)
            v24 = v25;
          *(double *)(v23 + 8 * v21) = v24;
        }
      }
    }
    else if (v11 - v12 <= *(double *)(a4 + 24))
    {
      v47 = result + 16 * a2;
      v48 = *(double *)(v47 - 16);
      v49 = *(double *)(v47 - 8);
      return _quantizeLine(a3, a4, a5, v8.f64[0], v9, v48, v49);
    }
    else
    {
      v27 = (double *)(result + 16 * a2 - 16);
      v28 = 2;
      if (a2 <= 2)
        v29 = 2;
      else
        v29 = a2;
      v30 = (double *)(result + 24);
      do
      {
        if (v29 == v28)
          goto LABEL_36;
        v31 = *v27 - v8.f64[0];
        v32 = *(double *)(result + 16 * a2 - 8) - v9;
        v33 = fabs(v31 * (v9 - *v30) - (v8.f64[0] - *(v30 - 1)) * v32);
        *(float *)&v31 = v32 * v32 + v31 * v31;
        v30 += 2;
        ++v28;
      }
      while (v33 / sqrtf(*(float *)&v31) <= *(double *)(a4 + 32));
      if (v28 - 1 >= a2)
      {
LABEL_36:
        v48 = *v27;
        v49 = *(double *)(result + 16 * a2 - 8);
        return _quantizeLine(a3, a4, a5, v8.f64[0], v9, v48, v49);
      }
      if (a2 == 3)
      {
        v50 = (const double *)(result + 16);
        v65 = vld2q_f64(v50);
        __asm { FMOV            V4.2D, #0.5 }
        v52 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0), (int8x16_t)v65.val[0], 8uLL), v65.val[0]), _Q4);
        v53 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v65.val[1], 8uLL), v65.val[1]), _Q4);
        v65.val[0] = (float64x2_t)vzip2q_s64(v52, v53);
        v60 = *(float64x2_t *)result;
        v61 = (float64x2_t)vzip1q_s64(v52, v53);
        v62 = vmulq_f64(vaddq_f64(v61, v65.val[0]), _Q4);
        v56 = v62;
        v57 = v65.val[0];
        v58 = *(float64x2_t *)(result + 32);
        _quantizeCurve(&v60, 3, a3, a4, a5);
        v46 = 3;
      }
      else
      {
        if (a2 != 4)
          return result;
        v34 = 0;
        __asm { FMOV            V1.2D, #0.5 }
        do
        {
          v39 = *(float64x2_t *)(result + v34 * 16 + 16);
          v54[v34++] = vmulq_f64(vaddq_f64(v8, v39), _Q1);
          v8 = v39;
        }
        while (v34 != 3);
        v40 = v54;
        v41 = (const double *)v55;
        v42 = (int8x16_t)vld1q_dup_f64(v40->f64);
        v40 = (float64x2_t *)((char *)v40 + 8);
        v66 = vld2q_f64(v41);
        v43 = (int8x16_t)vld1q_dup_f64(v40->f64);
        v44 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v42, (int8x16_t)v66.val[0], 8uLL), v66.val[0]), _Q1);
        v66.val[0] = vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v43, (int8x16_t)v66.val[1], 8uLL), v66.val[1]), _Q1);
        v66.val[1] = (float64x2_t)vzip2q_s64(v44, (int64x2_t)v66.val[0]);
        v60 = *(float64x2_t *)result;
        v61 = v54[0];
        v62 = (float64x2_t)vzip1q_s64(v44, (int64x2_t)v66.val[0]);
        v63 = vmulq_f64(vaddq_f64(v62, v66.val[1]), _Q1);
        v56 = v63;
        v57 = v66.val[1];
        v45 = *(_OWORD *)(result + 48);
        v58 = v55[1];
        v59 = v45;
        _quantizeCurve(&v60, 4, a3, a4, a5);
        v46 = 4;
      }
      return _quantizeCurve(&v56, v46, a3, a4, a5);
    }
  }
  return result;
}

BOOL EQKitPath::endPointForElement(EQKitPath *a1, unint64_t a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;

  EQKitPath::extractPath(a1);
  v8 = EQKitPath::endPointIndexForElement(a1, a2);
  v9 = *((_QWORD *)a1 + 1);
  v10 = *((_QWORD *)a1 + 2);
  v11 = (_QWORD *)((char *)a1 + 8);
  v12 = (v10 - v9) >> 4;
  if (v8 < v12)
  {
    if (a4)
      v13 = a4;
    else
      v13 = v11;
    *a3 = *(_OWORD *)(*v13 + 16 * v8);
  }
  return v8 < v12;
}

unint64_t EQKitPath::findJoinForEdge(_QWORD *a1, int a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t *v22;
  _QWORD *v23;
  __int128 v25;

  EQKitPath::extractPath((EQKitPath *)a1);
  switch(a2)
  {
    case 0:
      v8 = a1 + 16;
      goto LABEL_6;
    case 1:
      v8 = a1 + 18;
      goto LABEL_6;
    case 2:
      v8 = a1 + 17;
      goto LABEL_6;
    case 3:
      v8 = a1 + 19;
LABEL_6:
      v9 = *v8;
      if (*v8 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_7;
      goto LABEL_48;
    default:
LABEL_7:
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      v11 = a1[5] - a1[4];
      if (!v11)
        return v10;
      v12 = 0;
      v13 = (__int128 *)MEMORY[0x24BDBEFB0];
      v14 = v11 >> 4;
      v16 = *MEMORY[0x24BDBEFB0];
      v15 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
      if (v14 <= 1)
        v17 = 1;
      else
        v17 = v14;
      v9 = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
  do
  {
    v25 = *v13;
    if (!EQKitPath::endPointForElement((EQKitPath *)a1, v12, &v25, 0))
      goto LABEL_16;
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
LABEL_15:
      v9 = v12;
      v15 = v19;
      v16 = v18;
      goto LABEL_16;
    }
    if (a2 == 2)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*(double *)&v25 > v16)
        goto LABEL_15;
      if (*(double *)&v25 == v16 && *((double *)&v25 + 1) < v15)
        goto LABEL_15;
    }
    else if (a2 == 1)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) < v15)
        goto LABEL_15;
      if (*((double *)&v25 + 1) == v15 && *(double *)&v25 < v16)
        goto LABEL_15;
    }
    else if (a2)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) > v15 || *((double *)&v25 + 1) == v15 && *(double *)&v25 < v16)
        goto LABEL_15;
    }
    else
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*(double *)&v25 < v16 || *(double *)&v25 == v16 && *((double *)&v25 + 1) < v15)
        goto LABEL_15;
    }
LABEL_16:
    ++v12;
  }
  while (v17 != v12);
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 != 0x7FFFFFFFFFFFFFFFLL)
  {
    switch(a2)
    {
      case 0:
        v22 = a1 + 16;
        goto LABEL_47;
      case 1:
        v22 = a1 + 18;
        goto LABEL_47;
      case 2:
        v22 = a1 + 17;
        goto LABEL_47;
      case 3:
        v22 = a1 + 19;
LABEL_47:
        *v22 = v9;
        break;
      default:
        break;
    }
LABEL_48:
    if (a4)
      v23 = a4;
    else
      v23 = a1 + 1;
    EQKitPath::endPointForElement((EQKitPath *)a1, v9, a3, v23);
    return v9;
  }
  return v10;
}

void EQKitPath::appendToCGPath(uint64_t *a1, CGPath *a2, const CGAffineTransform *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  CGFloat *v11;

  EQKitPath::extractPath((EQKitPath *)a1);
  if (!a4)
    a4 = a1 + 1;
  if (a4[1] - *a4 == a1[2] - a1[1])
  {
    for (i = a1[4]; i != a1[5]; i += 16)
    {
      if (*(_DWORD *)i == 4)
      {
        CGPathCloseSubpath(a2);
      }
      else
      {
        v9 = *(_QWORD *)(i + 8);
        v10 = *a4;
        v11 = (CGFloat *)(*a4 + 16 * v9);
        switch(*(_DWORD *)i)
        {
          case 0:
            CGPathMoveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
            break;
          case 1:
            CGPathAddLineToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
            break;
          case 2:
            CGPathAddQuadCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3]);
            break;
          case 3:
            CGPathAddCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3], v11[4], v11[5]);
            break;
          default:
            continue;
        }
      }
    }
  }
}

uint64_t EQKitPath::findCurveMirrorParallelWithAxis(EQKitPath *a1, int a2, double *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double *v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  _QWORD v39[3];

  *a3 = 0.0;
  EQKitPath::extractPath(a1);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  if (v7 == v6)
    return 0x7FFFFFFFFFFFFFFFLL;
  v8 = 0;
  v9 = 0;
  v10 = MEMORY[0x24BDBEFB0];
  while (1)
  {
    if (*(_DWORD *)(v6 + v8) != 3)
      goto LABEL_36;
    v11 = v6 + v8;
    v12 = *(_QWORD *)(v6 + v8 + 8);
    v13 = v12 + 1;
    v14 = v12 + 2;
    v15 = *((_QWORD *)a1 + 1);
    v16 = (*((_QWORD *)a1 + 2) - v15) >> 4;
    v17 = (double *)(v16 <= v13 ? v10 : v15 + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = (double *)(v16 <= v14 ? v10 : v15 + 16 * v14);
    v21 = v20[1];
    v22 = *v20 - v18;
    v23 = v21 - v19;
    v24 = a2 == 1 ? v21 - v19 : *v20 - v18;
    if (v24 != 0.0)
      goto LABEL_36;
    EQKitPath::subpathContainingElement((unint64_t **)a1, v9, (uint64_t)v39);
    v25 = v39[0];
    if (v9 + 1 < v39[1] + v39[0])
      v25 = v9 + 1;
    v6 = *((_QWORD *)a1 + 4);
    if (*(_DWORD *)(v6 + 16 * v25) == 3)
    {
      v26 = *(_QWORD *)(v11 + 8) + 2;
      v27 = *(_QWORD *)(v6 + 16 * v25 + 8);
      v28 = *((_QWORD *)a1 + 1);
      v29 = (*((_QWORD *)a1 + 2) - v28) >> 4;
      v30 = (double *)(v29 <= v26 ? v10 : v28 + 16 * v26);
      v31 = v30[1];
      v32 = (double *)(v29 <= v27 ? v10 : v28 + 16 * v27);
      v33 = v32[1];
      v34 = *v32 - *v30;
      v35 = v33 - v31;
      v36 = a2 == 1 ? v33 - v31 : *v32 - *v30;
      if (v36 == 0.0)
      {
        if (v22 > 0.0 && v34 > 0.0)
          goto LABEL_40;
        if (v22 < 0.0 && v34 < 0.0)
        {
          v38 = -1.0;
          if (v22 <= 0.0)
            goto LABEL_41;
          goto LABEL_40;
        }
        if (v23 > 0.0 && v35 > 0.0)
          goto LABEL_40;
        if (v23 < 0.0 && v35 < 0.0)
          break;
      }
    }
    v7 = *((_QWORD *)a1 + 5);
LABEL_36:
    ++v9;
    v8 += 16;
    if (v9 >= (v7 - v6) >> 4)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  v38 = -1.0;
  if (v23 > 0.0)
LABEL_40:
    v38 = 1.0;
LABEL_41:
  *a3 = v38;
  return v9;
}

uint64_t EQKitPath::addLineToAfterElement(EQKitPath *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v35;
  __int128 v36;

  v4 = EQKitPath::endPointIndexForElement(this, a2);
  v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = (char **)((char *)this + 8);
    v6 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 4);
    v36 = *(_OWORD *)(v6 + 16 * v4);
    *((_QWORD *)&v35 + 1) = (*((_QWORD *)this + 2) - v6) >> 4;
    *(_QWORD *)&v35 = 1;
    v9 = (_OWORD *)*((_QWORD *)this + 5);
    v10 = (uint64_t)v9 - v8;
    if (a2 + 1 >= ((uint64_t)v9 - v8) >> 4)
    {
      v11 = *((_QWORD *)this + 6);
      if ((unint64_t)v9 >= v11)
      {
        v13 = v10 >> 4;
        v14 = (v10 >> 4) + 1;
        if (v14 >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = v11 - v8;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v13];
        v19 = &v17[16 * v16];
        *(_OWORD *)v18 = v35;
        v12 = v18 + 16;
        v21 = (char *)*((_QWORD *)this + 4);
        v20 = (char *)*((_QWORD *)this + 5);
        if (v20 != v21)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
            v18 -= 16;
            v20 -= 16;
          }
          while (v20 != v21);
          v20 = (char *)*((_QWORD *)this + 4);
        }
        *((_QWORD *)this + 4) = v18;
        *((_QWORD *)this + 5) = v12;
        *((_QWORD *)this + 6) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v9 = v35;
        v12 = v9 + 1;
      }
      *((_QWORD *)this + 5) = v12;
    }
    else
    {
      std::vector<EQKitPath::PathElement>::insert((uint64_t)this + 32, (char *)(v8 + 16 * (a2 + 1)), (char *)&v35);
    }
    v22 = *((_QWORD *)this + 3);
    v23 = (_OWORD *)*((_QWORD *)this + 2);
    if ((unint64_t)v23 >= v22)
    {
      v25 = ((char *)v23 - *v7) >> 4;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)*v7;
      if (v27 >> 3 > v26)
        v26 = v27 >> 3;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v28);
      else
        v29 = 0;
      v30 = &v29[16 * v25];
      v31 = &v29[16 * v28];
      *(_OWORD *)v30 = v36;
      v24 = v30 + 16;
      v33 = (char *)*((_QWORD *)this + 1);
      v32 = (char *)*((_QWORD *)this + 2);
      if (v32 != v33)
      {
        do
        {
          *((_OWORD *)v30 - 1) = *((_OWORD *)v32 - 1);
          v30 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        v32 = *v7;
      }
      *((_QWORD *)this + 1) = v30;
      *((_QWORD *)this + 2) = v24;
      *((_QWORD *)this + 3) = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v23 = v36;
      v24 = v23 + 1;
    }
    *((_QWORD *)this + 2) = v24;
    return *((_QWORD *)&v35 + 1);
  }
  return v5;
}

char *std::vector<EQKitPath::PathElement>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_24119D0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKitPath::appendSubpathRect(EQKitPath *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v7;
  CGFloat v8;
  CGFloat MaxY;
  CGFloat v10;
  double v11;
  double v12;
  char *v13;
  char **v14;
  CGFloat *v15;
  void **v16;
  CGFloat *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  CGFloat *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  CGFloat *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  CGFloat *v49;
  char *v50;
  unint64_t v51;
  char **v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  CGFloat MinY;
  CGFloat MinX;
  CGFloat MaxX;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  MinX = CGRectGetMinX(a2);
  v113.origin.x = x;
  v113.origin.y = y;
  v113.size.width = width;
  v113.size.height = height;
  MinY = CGRectGetMinY(v113);
  v114.origin.x = x;
  v114.origin.y = y;
  v114.size.width = width;
  v114.size.height = height;
  MaxX = CGRectGetMaxX(v114);
  v115.origin.x = x;
  v115.origin.y = y;
  v115.size.width = width;
  v115.size.height = height;
  v7 = CGRectGetMinY(v115);
  v116.origin.x = x;
  v116.origin.y = y;
  v116.size.width = width;
  v116.size.height = height;
  v8 = CGRectGetMaxX(v116);
  v117.origin.x = x;
  v117.origin.y = y;
  v117.size.width = width;
  v117.size.height = height;
  MaxY = CGRectGetMaxY(v117);
  v118.origin.x = x;
  v118.origin.y = y;
  v118.size.width = width;
  v118.size.height = height;
  v10 = CGRectGetMinX(v118);
  v119.origin.x = x;
  v119.origin.y = y;
  v119.size.width = width;
  v119.size.height = height;
  v11 = CGRectGetMaxY(v119);
  v12 = v11;
  v14 = (char **)((char *)this + 24);
  v13 = (char *)*((_QWORD *)this + 3);
  v16 = (void **)((char *)this + 8);
  v15 = (CGFloat *)*((_QWORD *)this + 1);
  v17 = (CGFloat *)*((_QWORD *)this + 2);
  v18 = ((char *)v17 - (char *)v15) >> 4;
  v19 = v18 + 1;
  if (v17 >= (CGFloat *)v13)
  {
    if (v19 >> 60)
      goto LABEL_147;
    v21 = v13 - (char *)v15;
    v22 = v21 >> 3;
    if (v21 >> 3 <= v19)
      v22 = v18 + 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v23);
      v15 = (CGFloat *)*((_QWORD *)this + 1);
      v17 = (CGFloat *)*((_QWORD *)this + 2);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[16 * v18];
    v13 = &v24[16 * v23];
    *(CGFloat *)v25 = v10;
    *((double *)v25 + 1) = v12;
    v20 = v25 + 16;
    if (v17 != v15)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
        v25 -= 16;
        v17 -= 2;
      }
      while (v17 != v15);
      v15 = (CGFloat *)*v16;
    }
    *((_QWORD *)this + 1) = v25;
    *((_QWORD *)this + 2) = v20;
    *((_QWORD *)this + 3) = v13;
    if (v15)
    {
      operator delete(v15);
      v13 = *v14;
    }
  }
  else
  {
    *v17 = v10;
    v17[1] = v11;
    v20 = (char *)(v17 + 2);
  }
  *((_QWORD *)this + 2) = v20;
  if (v20 >= v13)
  {
    v27 = (char *)*v16;
    v28 = (v20 - (_BYTE *)*v16) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
      goto LABEL_147;
    v30 = v13 - v27;
    if (v30 >> 3 > v29)
      v29 = v30 >> 3;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v31);
      v27 = (char *)*((_QWORD *)this + 1);
      v20 = (char *)*((_QWORD *)this + 2);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[16 * v28];
    v13 = &v32[16 * v31];
    *(CGFloat *)v33 = v8;
    *((CGFloat *)v33 + 1) = MaxY;
    v26 = v33 + 16;
    if (v20 != v27)
    {
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v20 - 1);
        v33 -= 16;
        v20 -= 16;
      }
      while (v20 != v27);
      v27 = (char *)*v16;
    }
    *((_QWORD *)this + 1) = v33;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v13;
    if (v27)
    {
      operator delete(v27);
      v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)v20 = v8;
    *((CGFloat *)v20 + 1) = MaxY;
    v26 = v20 + 16;
  }
  *((_QWORD *)this + 2) = v26;
  if (v26 >= v13)
  {
    v35 = (char *)*v16;
    v36 = (v26 - (_BYTE *)*v16) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      goto LABEL_147;
    v38 = v13 - v35;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v39);
      v35 = (char *)*((_QWORD *)this + 1);
      v26 = (char *)*((_QWORD *)this + 2);
    }
    else
    {
      v40 = 0;
    }
    v41 = (CGFloat *)&v40[16 * v36];
    v13 = &v40[16 * v39];
    *v41 = MaxX;
    v41[1] = v7;
    v34 = v41 + 2;
    if (v26 != v35)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
        v41 -= 2;
        v26 -= 16;
      }
      while (v26 != v35);
      v35 = (char *)*v16;
    }
    *((_QWORD *)this + 1) = v41;
    *((_QWORD *)this + 2) = v34;
    *((_QWORD *)this + 3) = v13;
    if (v35)
    {
      operator delete(v35);
      v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)v26 = MaxX;
    *((CGFloat *)v26 + 1) = v7;
    v34 = (CGFloat *)(v26 + 16);
  }
  *((_QWORD *)this + 2) = v34;
  if (v34 < (CGFloat *)v13)
  {
    *v34 = MinX;
    v34[1] = MinY;
    v42 = v34 + 2;
    goto LABEL_65;
  }
  v43 = (char *)*v16;
  v44 = ((char *)v34 - (_BYTE *)*v16) >> 4;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60)
LABEL_147:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v46 = v13 - v43;
  if (v46 >> 3 > v45)
    v45 = v46 >> 3;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
    v47 = 0xFFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 24, v47);
    v43 = (char *)*((_QWORD *)this + 1);
    v34 = (CGFloat *)*((_QWORD *)this + 2);
  }
  else
  {
    v48 = 0;
  }
  v49 = (CGFloat *)&v48[16 * v44];
  v50 = &v48[16 * v47];
  *v49 = MinX;
  v49[1] = MinY;
  v42 = v49 + 2;
  if (v34 != (CGFloat *)v43)
  {
    do
    {
      *((_OWORD *)v49 - 1) = *((_OWORD *)v34 - 1);
      v49 -= 2;
      v34 -= 2;
    }
    while (v34 != (CGFloat *)v43);
    v43 = (char *)*v16;
  }
  *((_QWORD *)this + 1) = v49;
  *((_QWORD *)this + 2) = v42;
  *((_QWORD *)this + 3) = v50;
  if (v43)
    operator delete(v43);
LABEL_65:
  v51 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 2) = v42;
  v52 = (char **)((char *)this + 32);
  v53 = (_QWORD *)*((_QWORD *)this + 5);
  if ((unint64_t)v53 >= v51)
  {
    v55 = ((char *)v53 - *v52) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      goto LABEL_146;
    v57 = v51 - (_QWORD)*v52;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    if (v58)
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v58);
    else
      v59 = 0;
    v60 = &v59[16 * v55];
    v61 = &v59[16 * v58];
    *(_QWORD *)v60 = 0;
    *((_QWORD *)v60 + 1) = v18;
    v54 = v60 + 16;
    v63 = (char *)*((_QWORD *)this + 4);
    v62 = (char *)*((_QWORD *)this + 5);
    if (v62 != v63)
    {
      do
      {
        *((_OWORD *)v60 - 1) = *((_OWORD *)v62 - 1);
        v60 -= 16;
        v62 -= 16;
      }
      while (v62 != v63);
      v62 = *v52;
    }
    *((_QWORD *)this + 4) = v60;
    *((_QWORD *)this + 5) = v54;
    *((_QWORD *)this + 6) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *v53 = 0;
    v53[1] = v18;
    v54 = v53 + 2;
  }
  *((_QWORD *)this + 5) = v54;
  v64 = *((_QWORD *)this + 6);
  if ((unint64_t)v54 >= v64)
  {
    v66 = ((char *)v54 - *v52) >> 4;
    if ((unint64_t)(v66 + 1) >> 60)
      goto LABEL_146;
    v67 = v64 - (_QWORD)*v52;
    v68 = v67 >> 3;
    if (v67 >> 3 <= (unint64_t)(v66 + 1))
      v68 = v66 + 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v69 = 0xFFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    if (v69)
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v69);
    else
      v70 = 0;
    v71 = &v70[16 * v66];
    v72 = &v70[16 * v69];
    *(_QWORD *)v71 = 1;
    *((_QWORD *)v71 + 1) = v19;
    v65 = v71 + 16;
    v74 = (char *)*((_QWORD *)this + 4);
    v73 = (char *)*((_QWORD *)this + 5);
    if (v73 != v74)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v73 - 1);
        v71 -= 16;
        v73 -= 16;
      }
      while (v73 != v74);
      v73 = *v52;
    }
    *((_QWORD *)this + 4) = v71;
    *((_QWORD *)this + 5) = v65;
    *((_QWORD *)this + 6) = v72;
    if (v73)
      operator delete(v73);
  }
  else
  {
    *v54 = 1;
    v54[1] = v19;
    v65 = v54 + 2;
  }
  v75 = v18 + 2;
  *((_QWORD *)this + 5) = v65;
  v76 = *((_QWORD *)this + 6);
  if ((unint64_t)v65 >= v76)
  {
    v78 = ((char *)v65 - *v52) >> 4;
    if ((unint64_t)(v78 + 1) >> 60)
      goto LABEL_146;
    v79 = v76 - (_QWORD)*v52;
    v80 = v79 >> 3;
    if (v79 >> 3 <= (unint64_t)(v78 + 1))
      v80 = v78 + 1;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v81 = 0xFFFFFFFFFFFFFFFLL;
    else
      v81 = v80;
    if (v81)
      v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v81);
    else
      v82 = 0;
    v83 = &v82[16 * v78];
    v84 = &v82[16 * v81];
    *(_QWORD *)v83 = 1;
    *((_QWORD *)v83 + 1) = v75;
    v77 = v83 + 16;
    v86 = (char *)*((_QWORD *)this + 4);
    v85 = (char *)*((_QWORD *)this + 5);
    if (v85 != v86)
    {
      do
      {
        *((_OWORD *)v83 - 1) = *((_OWORD *)v85 - 1);
        v83 -= 16;
        v85 -= 16;
      }
      while (v85 != v86);
      v85 = *v52;
    }
    *((_QWORD *)this + 4) = v83;
    *((_QWORD *)this + 5) = v77;
    *((_QWORD *)this + 6) = v84;
    if (v85)
      operator delete(v85);
  }
  else
  {
    *v65 = 1;
    v65[1] = v75;
    v77 = v65 + 2;
  }
  v87 = v18 + 3;
  *((_QWORD *)this + 5) = v77;
  v88 = *((_QWORD *)this + 6);
  if ((unint64_t)v77 >= v88)
  {
    v90 = ((char *)v77 - *v52) >> 4;
    if ((unint64_t)(v90 + 1) >> 60)
      goto LABEL_146;
    v91 = v88 - (_QWORD)*v52;
    v92 = v91 >> 3;
    if (v91 >> 3 <= (unint64_t)(v90 + 1))
      v92 = v90 + 1;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
      v93 = 0xFFFFFFFFFFFFFFFLL;
    else
      v93 = v92;
    if (v93)
      v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v93);
    else
      v94 = 0;
    v95 = &v94[16 * v90];
    v96 = &v94[16 * v93];
    *(_QWORD *)v95 = 1;
    *((_QWORD *)v95 + 1) = v87;
    v89 = v95 + 16;
    v98 = (char *)*((_QWORD *)this + 4);
    v97 = (char *)*((_QWORD *)this + 5);
    if (v97 != v98)
    {
      do
      {
        *((_OWORD *)v95 - 1) = *((_OWORD *)v97 - 1);
        v95 -= 16;
        v97 -= 16;
      }
      while (v97 != v98);
      v97 = *v52;
    }
    *((_QWORD *)this + 4) = v95;
    *((_QWORD *)this + 5) = v89;
    *((_QWORD *)this + 6) = v96;
    if (v97)
      operator delete(v97);
  }
  else
  {
    *v77 = 1;
    v77[1] = v87;
    v89 = v77 + 2;
  }
  *((_QWORD *)this + 5) = v89;
  v99 = *((_QWORD *)this + 6);
  if ((unint64_t)v89 < v99)
  {
    *v89 = xmmword_241211920;
    v100 = v89 + 1;
    goto LABEL_145;
  }
  v101 = ((char *)v89 - *v52) >> 4;
  if ((unint64_t)(v101 + 1) >> 60)
LABEL_146:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v102 = v99 - (_QWORD)*v52;
  v103 = v102 >> 3;
  if (v102 >> 3 <= (unint64_t)(v101 + 1))
    v103 = v101 + 1;
  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
    v104 = 0xFFFFFFFFFFFFFFFLL;
  else
    v104 = v103;
  if (v104)
    v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)this + 48, v104);
  else
    v105 = 0;
  v106 = &v105[16 * v101];
  v107 = &v105[16 * v104];
  *(_OWORD *)v106 = xmmword_241211920;
  v100 = v106 + 16;
  v109 = (char *)*((_QWORD *)this + 4);
  v108 = (char *)*((_QWORD *)this + 5);
  if (v108 != v109)
  {
    do
    {
      *((_OWORD *)v106 - 1) = *((_OWORD *)v108 - 1);
      v106 -= 16;
      v108 -= 16;
    }
    while (v108 != v109);
    v108 = *v52;
  }
  *((_QWORD *)this + 4) = v106;
  *((_QWORD *)this + 5) = v100;
  *((_QWORD *)this + 6) = v107;
  if (v108)
    operator delete(v108);
LABEL_145:
  *((_QWORD *)this + 5) = v100;
}

uint64_t EQKitPath::findStemForEdge@<X0>(unint64_t **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  double *v11;
  double *v12;
  unsigned __int32 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  double *v37;
  double *v38;
  char v39[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_DWORD *)(a3 + 56) = 0;
  result = EQKitPath::findJoinForEdge(this, a2, &v49, 0);
  if (result != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = result;
    EQKitPath::subpathContainingElement(this, result, (uint64_t)&v47);
    v45 = 0;
    v46 = 0;
    v44 = 0;
    result = EQKitPath::isLineTo(this, v7, &v46, &v45, &v47);
    if ((_DWORD)result)
    {
      v8 = v45;
      v9 = v46;
      v10 = this[1];
      v11 = (double *)&v10[2 * v46];
      v12 = (double *)&v10[2 * v45];
      v13 = a2 & 0xFFFFFFFD;
      if ((a2 & 0xFFFFFFFD) == 1)
        ++v11;
      if (v13 == 1)
        ++v12;
      if (vabdd_f64(*v11, *v12) >= 0.00100000005)
      {
        *(_QWORD *)&v50 = v46;
        *((_QWORD *)&v50 + 1) = v45;
        v26 = v47;
        v27 = *((_QWORD *)&v47 + 1) + v47;
        if (v7 + 1 < *((_QWORD *)&v47 + 1) + (_QWORD)v47)
          v28 = v7 + 1;
        else
          v28 = v47;
        if (v28 + 1 < v27)
          v26 = v28 + 1;
        if (v28 != v27 - 1 || v48 == 0)
          v30 = v28;
        else
          v30 = v26;
        result = EQKitPath::isLineTo(this, v30, &v44, &v51, &v47);
        if ((_DWORD)result && v44 == *((_QWORD *)&v50 + 1))
        {
          v31 = v47;
          v32 = *((_QWORD *)&v47 + 1) + v47;
          if (v30 + 1 < *((_QWORD *)&v47 + 1) + (_QWORD)v47)
            v33 = v30 + 1;
          else
            v33 = v47;
          if (v33 + 1 < v32)
            v31 = v33 + 1;
          v34 = v33 != v32 - 1 || v48 == 0;
          v35 = v34 ? v33 : v31;
          result = EQKitPath::isLineTo(this, v35, &v44, v52, &v47);
          if ((_DWORD)result)
          {
            if (v44 == v51)
            {
              v36 = this[1];
              v37 = (double *)&v36[2 * *((_QWORD *)&v50 + 1)];
              v38 = (double *)&v36[2 * v44];
              if (v13 == 1)
              {
                ++v37;
                ++v38;
              }
              if (vabdd_f64(*v37, *v38) < 0.00100000005)
                goto LABEL_38;
            }
          }
        }
      }
      else
      {
        *((_QWORD *)&v50 + 1) = v46;
        v51 = v45;
        if ((unint64_t)v47 >= v7)
          v14 = *((_QWORD *)&v47 + 1) + v47;
        else
          v14 = v7;
        if ((unint64_t)v47 >= v14 - 1)
          v15 = *((_QWORD *)&v47 + 1) + v47;
        else
          v15 = v14 - 1;
        v16 = v15 - 1;
        if (v14 != *((_QWORD *)&v47 + 1) + (_QWORD)v47 || v48 == 0)
          v18 = v14 - 1;
        else
          v18 = v16;
        result = EQKitPath::isLineTo(this, v18, (uint64_t *)&v50, &v44, &v47);
        if ((_DWORD)result)
          v19 = v44 == v9;
        else
          v19 = 0;
        if (v19)
        {
          v20 = v47;
          v21 = *((_QWORD *)&v47 + 1) + v47;
          if (v7 + 1 < *((_QWORD *)&v47 + 1) + (_QWORD)v47)
            v22 = v7 + 1;
          else
            v22 = v47;
          if (v22 + 1 < v21)
            v20 = v22 + 1;
          v23 = v22 != v21 - 1 || v48 == 0;
          v24 = v23 ? v22 : v20;
          result = EQKitPath::isLineTo(this, v24, &v44, v52, &v47);
          if ((_DWORD)result)
          {
            if (v44 == v8)
            {
LABEL_38:
              result = EQKitPath::Stem::Stem((uint64_t)v39, a2, (uint64_t)this, &v50);
              if (v39 != (char *)a3)
              {
                *(_BYTE *)a3 = v39[0];
                v25 = v41;
                *(_OWORD *)(a3 + 8) = v40;
                *(_OWORD *)(a3 + 24) = v25;
                *(_OWORD *)(a3 + 40) = v42;
                *(_DWORD *)(a3 + 56) = v43;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void EQKitPath::appendToCGPathWithModifiedStem(uint64_t a1, CGPath *a2, double *a3, int a4, uint64_t a5, double a6)
{
  int v12;
  int v13;
  CGAffineTransform v14;
  __int128 v15;
  void *__p[2];
  uint64_t v17;

  if (a2)
  {
    if (!a5 || a6 == 0.0)
    {
      *(_OWORD *)__p = *MEMORY[0x24BDBEFB0];
      if (EQKitPath::findJoinForEdge((_QWORD *)a1, a4, __p, 0) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, *a3 - *(double *)__p, a3[1] - *(double *)&__p[1]);
        EQKitPath::appendToCGPath((uint64_t *)a1, a2, &v14, 0);
        v13 = a4 > 2 ? 1 : dword_241211990[a4];
        if (EQKitPath::findJoinForEdge((_QWORD *)a1, v13, __p, 0))
          *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *(double *)&__p[1]), *(float64x2_t *)&v14.a, *(double *)__p));
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v17 = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4);
      EQKitPath::Stem::adjustStemPoints(a5, a1, __p, a6);
      v15 = *MEMORY[0x24BDBEFB0];
      if (EQKitPath::findJoinForEdge((_QWORD *)a1, a4, &v15, __p) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, *a3 - *(double *)&v15, a3[1] - *((double *)&v15 + 1));
        EQKitPath::appendToCGPath((uint64_t *)a1, a2, &v14, (uint64_t *)__p);
        if (a4 > 2)
          v12 = 1;
        else
          v12 = dword_241211990[a4];
        if (EQKitPath::findJoinForEdge((_QWORD *)a1, v12, &v15, __p))
          *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *((double *)&v15 + 1)), *(float64x2_t *)&v14.a, *(double *)&v15));
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_24119DE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitPath::applyModifiedStemToPoints(uint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  if (a2)
  {
    if (a4 != 0.0)
      return EQKitPath::Stem::adjustStemPoints(a2, result, a3, a4);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24119DF4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24119E004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void *std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void EQKitPath::EQKitPath(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 40) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 16) = v6;
    operator delete(v6);
  }
}

uint64_t EQKitCompositeGlyph::EQKitCompositeGlyph(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const __CFString *v5;

  *(_QWORD *)a1 = &off_25112A3B0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a4 + 8);
  v5 = *(const __CFString **)a4;
  if (*(_QWORD *)a4)
    v5 = (const __CFString *)CTFontCreateWithName(v5, *(CGFloat *)(a2 + 16), 0);
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void EQKitCompositeGlyph::~EQKitCompositeGlyph(EQKitCompositeGlyph *this)
{
  const void *v2;

  *(_QWORD *)this = &off_25112A3B0;
  EQKitCompositeGlyph::clearCache(this);
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
}

{
  EQKitCompositeGlyph::~EQKitCompositeGlyph(this);
  JUMPOUT(0x242690740);
}

uint64_t EQKitCompositeGlyph::clearCache(EQKitCompositeGlyph *this)
{
  EQKitPath *v2;
  EQKitPath *v3;
  EQKitPath *v4;
  EQKitPath *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = (EQKitPath *)*((_QWORD *)this + 4);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 4) = 0;
  }
  v3 = (EQKitPath *)*((_QWORD *)this + 5);
  if (v3)
  {
    EQKitPath::~EQKitPath(v3);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 5) = 0;
  }
  v4 = (EQKitPath *)*((_QWORD *)this + 6);
  if (v4)
  {
    EQKitPath::~EQKitPath(v4);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 6) = 0;
  }
  v5 = (EQKitPath *)*((_QWORD *)this + 7);
  if (v5)
  {
    EQKitPath::~EQKitPath(v5);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 7) = 0;
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    MEMORY[0x242690740](v6, 0x1000C401B087D88);
    *((_QWORD *)this + 8) = 0;
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    MEMORY[0x242690740](v7, 0x1000C401B087D88);
    *((_QWORD *)this + 9) = 0;
  }
  v8 = *((_QWORD *)this + 10);
  if (v8)
  {
    MEMORY[0x242690740](v8, 0x1000C401B087D88);
    *((_QWORD *)this + 10) = 0;
  }
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    MEMORY[0x242690740](v9, 0x1000C401B087D88);
    *((_QWORD *)this + 11) = 0;
  }
  result = *((_QWORD *)this + 12);
  if (result)
  {
    result = MEMORY[0x242690740](result, 0x1000C401B087D88);
    *((_QWORD *)this + 12) = 0;
  }
  return result;
}

uint64_t EQKitCompositeGlyph::upperPath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 4);
  v4 = *((unsigned __int16 *)this + 10);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 4) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 4);
  }
  return result;
}

void sub_24119E654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 5);
  v4 = *((unsigned __int16 *)this + 11);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 5) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 5);
  }
  return result;
}

void sub_24119E728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::middlePath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 6);
  v4 = *((unsigned __int16 *)this + 12);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 6) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 6);
  }
  return result;
}

void sub_24119E7FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::extenderPath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 7);
  v4 = *((unsigned __int16 *)this + 13);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 7) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 7);
  }
  return result;
}

void sub_24119E8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::upperPathLowerStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  int v3;
  uint64_t result;

  if ((*((_BYTE *)this + 104) & 1) != 0)
    return *((_QWORD *)this + 8);
  v2 = (unint64_t **)EQKitCompositeGlyph::upperPath(this);
  if (*((_DWORD *)this + 4) == 2)
    v3 = 3;
  else
    v3 = 2;
  result = _createStem(v2, v3);
  *((_QWORD *)this + 8) = result;
  *((_BYTE *)this + 104) |= 1u;
  return result;
}

uint64_t _createStem(unint64_t **a1, int a2)
{
  uint64_t v2;
  _BYTE v4[64];

  if (!a1)
    return 0;
  EQKitPath::findStemForEdge(a1, a2, (uint64_t)v4);
  if (!v4[0])
    return 0;
  v2 = operator new();
  EQKitPath::Stem::Stem(v2, (uint64_t)v4);
  return v2;
}

void sub_24119E9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1000C401B087D88);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPathUpperStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  uint64_t result;

  if ((*((_BYTE *)this + 104) & 2) != 0)
    return *((_QWORD *)this + 9);
  v2 = (unint64_t **)EQKitCompositeGlyph::lowerPath(this);
  result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((_QWORD *)this + 9) = result;
  *((_BYTE *)this + 104) |= 2u;
  return result;
}

uint64_t EQKitCompositeGlyph::middlePathUpperStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  uint64_t result;

  if ((*((_BYTE *)this + 104) & 4) != 0)
    return *((_QWORD *)this + 10);
  v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((_QWORD *)this + 10) = result;
  *((_BYTE *)this + 104) |= 4u;
  return result;
}

uint64_t EQKitCompositeGlyph::middlePathLowerStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  int v3;
  uint64_t result;

  if ((*((_BYTE *)this + 104) & 8) != 0)
    return *((_QWORD *)this + 11);
  v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  if (*((_DWORD *)this + 4) == 2)
    v3 = 3;
  else
    v3 = 2;
  result = _createStem(v2, v3);
  *((_QWORD *)this + 11) = result;
  *((_BYTE *)this + 104) |= 8u;
  return result;
}

uint64_t EQKitCompositeGlyph::extenderPathStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  int v3;
  uint64_t result;

  if ((*((_BYTE *)this + 104) & 0x10) != 0)
    return *((_QWORD *)this + 12);
  v2 = (unint64_t **)EQKitCompositeGlyph::extenderPath(this);
  if (*((_DWORD *)this + 4) == 2)
    v3 = 3;
  else
    v3 = 2;
  result = _createStem(v2, v3);
  *((_QWORD *)this + 12) = result;
  *((_BYTE *)this + 104) |= 0x10u;
  return result;
}

CGPath *EQKitCompositeGlyph::createPathWithLength(EQKitCompositeGlyph *this, double a2, CGSize *a3)
{
  CGPath *Mutable;
  CGSize *v7;
  double width;
  double height;
  CGAffineTransform v11;
  CGFloat v12[11];
  _BYTE v13[72];

  Mutable = CGPathCreateMutable();
  EQKitCompositeGlyph::compose(this, a2, Mutable);
  EQKitPath::EQKitPath((EQKitPath *)v12, Mutable);
  if (v13[32])
    v7 = (CGSize *)v13;
  else
    v7 = (CGSize *)EQKitPath::computePathBounds(v12);
  width = v7->width;
  height = v7->height;
  *a3 = v7[1];
  if (width != 0.0 || height != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v11, 0, sizeof(v11));
    CGAffineTransformMakeTranslation(&v11, -width, -height);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v12, Mutable, &v11, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v12);
  return Mutable;
}

void sub_24119EC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

double EQKitCompositeGlyph::compose(EQKitCompositeGlyph *this, double a2, CGPath *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  CGRect *v18;
  CGRect *v19;
  double Height;
  CGRect *v21;
  CGRect *v22;
  double Width;
  CGRect *v24;
  CGRect *v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD *v51;
  _BOOL4 v54;
  CGRect *v55;
  _DWORD *v56;
  uint64_t v57;
  CGRect *v58;
  CGRect *v59;
  CGRect *v60;
  double v61;
  double v62;
  double v63;
  CGRect *v64;
  CGRect *v65;
  double v66;
  int v67;
  CGRect *v68;
  CGRect *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  CGRect *v74;
  CGRect *v75;
  double v76;
  uint64_t v78;
  uint64_t v79;
  CGAffineTransform v80;
  double v81[3];
  void *__p;
  void *v83;
  uint64_t v84;
  float64x2_t v85;

  v6 = EQKitCompositeGlyph::upperPath(this);
  v7 = EQKitCompositeGlyph::lowerPath(this);
  v8 = EQKitCompositeGlyph::middlePath(this);
  v9 = EQKitCompositeGlyph::extenderPath(this);
  v10 = EQKitCompositeGlyph::upperPathLowerStem(this);
  v11 = EQKitCompositeGlyph::lowerPathUpperStem(this);
  v12 = EQKitCompositeGlyph::middlePathUpperStem(this);
  v79 = EQKitCompositeGlyph::middlePathLowerStem(this);
  v13 = EQKitCompositeGlyph::extenderPathStem(this);
  v14 = a2;
  if (!(v6 | v7))
    return a2 - v14;
  v15 = v13;
  v16 = 0.0;
  v17 = 0.0;
  if (v6)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v6 + 120))
        v18 = (CGRect *)(v6 + 88);
      else
        v18 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      Height = CGRectGetHeight(*v18);
    }
    else
    {
      if (*(_BYTE *)(v6 + 120))
        v19 = (CGRect *)(v6 + 88);
      else
        v19 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      Height = CGRectGetWidth(*v19);
    }
    v17 = Height;
  }
  if (v7)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v7 + 120))
        v21 = (CGRect *)(v7 + 88);
      else
        v21 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      Width = CGRectGetHeight(*v21);
    }
    else
    {
      if (*(_BYTE *)(v7 + 120))
        v22 = (CGRect *)(v7 + 88);
      else
        v22 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      Width = CGRectGetWidth(*v22);
    }
    v16 = Width;
  }
  v14 = a2 - (v17 + v16);
  if (v8)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v8 + 120))
        v24 = (CGRect *)(v8 + 88);
      else
        v24 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      v26 = CGRectGetHeight(*v24);
    }
    else
    {
      if (*(_BYTE *)(v8 + 120))
        v25 = (CGRect *)(v8 + 88);
      else
        v25 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      v26 = CGRectGetWidth(*v25);
    }
    v14 = v14 - v26;
  }
  v27 = v79;
  v28 = 0.0;
  v29 = 0.0;
  v30 = 0.0;
  v31 = 0.0;
  if (v14 < 0.0)
  {
    v32 = 0.0;
    if (v10)
      v32 = *(double *)(v10 + 40);
    if (v12)
      v31 = *(double *)(v12 + 40);
    v33 = 0.0;
    v34 = 0.0;
    if (v11)
      v34 = *(double *)(v11 + 40);
    v35 = v32 + v31;
    if (v79)
      v33 = *(double *)(v79 + 40);
    v36 = v34 + v33;
    v37 = fabs(v14);
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = v37 - v38;
    if (v39 >= v36)
      v39 = v36;
    if (v35 >= v36)
      v35 = v36;
    v40 = fabs(v14 * 0.5);
    if (v40 < v35)
      v35 = v40;
    if (v8)
      v41 = v35;
    else
      v41 = v39;
    if (v8)
      v42 = v35;
    else
      v42 = v38;
    v43 = 0.0;
    v31 = 0.0;
    if (v10)
      v31 = *(double *)(v10 + 40);
    if (v31 >= v42)
      v31 = v42;
    if (v11)
      v43 = *(double *)(v11 + 40);
    v44 = v42 - v31;
    if (v43 >= v41)
      v30 = v41;
    else
      v30 = v43;
    v45 = 0.0;
    v46 = 0.0;
    if (v12)
      v46 = *(double *)(v12 + 40);
    v47 = v41 - v30;
    if (v46 >= v44)
      v29 = v44;
    else
      v29 = v46;
    if (v79)
      v45 = *(double *)(v79 + 40);
    if (v45 >= v47)
      v28 = v47;
    else
      v28 = v45;
  }
  v78 = v11;
  if (v9)
  {
    v48 = fmax(v14, 0.0);
  }
  else
  {
    v48 = 0.0;
    if (v14 > 0.0)
    {
      if (v10 && v11)
      {
        v31 = v31 - v14 * 0.5;
        v30 = v30 - v14 * 0.5;
      }
      else
      {
        if (v11)
          v49 = v14;
        else
          v49 = 0.0;
        v50 = v30 - v49;
        if (v10)
          v31 = v31 - v14;
        else
          v30 = v50;
      }
    }
  }
  v51 = (_OWORD *)MEMORY[0x24BDBEFB0];
  v85 = *(float64x2_t *)MEMORY[0x24BDBEFB0];
  if (v6)
  {
    v14 = v14 + v31;
    if (a3)
    {
      EQKitPath::appendToCGPathWithModifiedStem(v6, a3, v85.f64, *((_DWORD *)this + 4) == 2, v10, -v31);
      v27 = v79;
    }
  }
  v54 = v48 > 0.0 && v9 != 0 && v15 != 0;
  if (v8)
  {
    if (v54)
    {
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(_BYTE *)(v9 + 120))
          v55 = (CGRect *)(v9 + 88);
        else
          v55 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v61 = CGRectGetHeight(*v55);
      }
      else
      {
        if (*(_BYTE *)(v9 + 120))
          v59 = (CGRect *)(v9 + 88);
        else
          v59 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v61 = CGRectGetWidth(*v59);
      }
      v62 = v61 + v48 * -0.5;
      if (v62 >= *(double *)(v15 + 40))
        v63 = *(double *)(v15 + 40);
      else
        v63 = v62;
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(_BYTE *)(v9 + 120))
          v64 = (CGRect *)(v9 + 88);
        else
          v64 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v66 = CGRectGetHeight(*v64);
      }
      else
      {
        if (*(_BYTE *)(v9 + 120))
          v65 = (CGRect *)(v9 + 88);
        else
          v65 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v66 = CGRectGetWidth(*v65);
      }
      v14 = v63 + v14 - v66;
      if (a3)
        EQKitPath::appendToCGPathWithModifiedStem(v9, a3, v85.f64, *((_DWORD *)this + 4) == 2, v15, -v63);
      v27 = v79;
    }
    if ((v29 == 0.0 || !v12) && (v28 == 0.0 || !v27))
    {
      v57 = v78;
      if (a3)
        EQKitPath::appendToCGPathWithModifiedStem(v8, a3, v85.f64, *((_DWORD *)this + 4) == 2, 0, 0.0);
    }
    else
    {
      if (a3)
      {
        EQKitPath::extractPath((EQKitPath *)v8);
        v83 = 0;
        v84 = 0;
        __p = 0;
        std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&__p, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 4);
        EQKitPath::applyModifiedStemToPoints(v8, v12, &__p, -v29);
        EQKitPath::applyModifiedStemToPoints(v8, v79, &__p, -v28);
        *(_OWORD *)v81 = *v51;
        EQKitPath::findJoinForEdge((_QWORD *)v8, *((_DWORD *)this + 4) == 2, v81, &__p);
        memset(&v80, 0, sizeof(v80));
        CGAffineTransformMakeTranslation(&v80, v85.f64[0] - v81[0], v85.f64[1] - v81[1]);
        EQKitPath::appendToCGPath((uint64_t *)v8, a3, &v80, (uint64_t *)&__p);
        v67 = *((_DWORD *)this + 4) == 2 ? 3 : 2;
        EQKitPath::findJoinForEdge((_QWORD *)v8, v67, &v85, &__p);
        v85 = vaddq_f64(*(float64x2_t *)&v80.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v80.c, v85.f64[1]), *(float64x2_t *)&v80.a, v85.f64[0]));
        if (__p)
        {
          v83 = __p;
          operator delete(__p);
        }
      }
      v14 = v28 + v29 + v14;
      v57 = v78;
    }
    if (!v54)
      goto LABEL_178;
    v56 = (_DWORD *)((char *)this + 16);
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v9 + 120))
        v68 = (CGRect *)(v9 + 88);
      else
        v68 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v70 = CGRectGetHeight(*v68);
    }
    else
    {
      if (*(_BYTE *)(v9 + 120))
        v69 = (CGRect *)(v9 + 88);
      else
        v69 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v70 = CGRectGetWidth(*v69);
    }
    v71 = v70 + v48 * -0.5;
    goto LABEL_164;
  }
  if (v54)
  {
    v56 = (_DWORD *)((char *)this + 16);
    v57 = v78;
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v9 + 120))
        v58 = (CGRect *)(v9 + 88);
      else
        v58 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v72 = CGRectGetHeight(*v58);
    }
    else
    {
      if (*(_BYTE *)(v9 + 120))
        v60 = (CGRect *)(v9 + 88);
      else
        v60 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v72 = CGRectGetWidth(*v60);
    }
    v71 = v72 - v48;
LABEL_164:
    if (v71 >= *(double *)(v15 + 40))
      v73 = *(double *)(v15 + 40);
    else
      v73 = v71;
    if (*v56 == 2)
    {
      if (*(_BYTE *)(v9 + 120))
        v74 = (CGRect *)(v9 + 88);
      else
        v74 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v76 = CGRectGetHeight(*v74);
    }
    else
    {
      if (*(_BYTE *)(v9 + 120))
        v75 = (CGRect *)(v9 + 88);
      else
        v75 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v76 = CGRectGetWidth(*v75);
    }
    v14 = v73 + v14 - v76;
    if (a3)
      EQKitPath::appendToCGPathWithModifiedStem(v9, a3, v85.f64, *v56 == 2, v15, -v73);
    goto LABEL_178;
  }
  v57 = v78;
LABEL_178:
  if (v7)
  {
    v14 = v30 + v14;
    if (a3)
      EQKitPath::appendToCGPathWithModifiedStem(v7, a3, v85.f64, *((_DWORD *)this + 4) == 2, v57, -v30);
  }
  return a2 - v14;
}

void sub_24119F3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL EQKit::Unicode::isPseudoScript(EQKit::Unicode *this)
{
  unsigned int v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v1 = this;
  if ((v2 & 1) == 0
  {
    std::set<unsigned int>::set[abi:ne180100]<unsigned int const*>((uint64_t)&EQKit::Unicode::isPseudoScript::sPseudoScriptSet, sPseudoScriptData, dword_241211A58);
  }
  v3 = qword_257103478;
  if (!qword_257103478)
    return 0;
  v4 = &qword_257103478;
  do
  {
    v5 = *(_DWORD *)(v3 + 28);
    v6 = v5 >= v1;
    if (v5 >= v1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  return v4 != &qword_257103478 && *((_DWORD *)v4 + 7) <= v1;
}

void sub_24119F490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKit::Unicode::variationSelector(EQKit::Unicode *this)
{
  unsigned int v1;

  if (((_DWORD)this - 917760) >= 0xF0)
    v1 = 0;
  else
    v1 = (_DWORD)this - 917743;
  if (this >> 4 == 4064)
    return ((_DWORD)this - 65023);
  else
    return v1;
}

uint64_t EQKit::Unicode::lookupChar(uint64_t this, uint64_t a2, const EQKit::Script::Info *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  switch((_DWORD)this)
  {
    case '\'':
      if (!*(_DWORD *)(a2 + 24))
        return 8242;
      break;
    case '*':
      if (!*(_DWORD *)(a2 + 24))
        return 8727;
      break;
    case '-':
      if (*(_DWORD *)(a2 + 24) == 1)
        return 8208;
      else
        return 8722;
  }
  v3 = this - 65;
  if ((this - 65) < 0x1A || (this - 97) <= 0x19)
  {
    switch(*(_DWORD *)(a2 + 12))
    {
      case 2:
        if (v3 >= 0x1A)
          v5 = 119834;
        else
          v5 = 119808;
        if (!*(_DWORD *)(a2 + 24))
          goto LABEL_53;
        return this;
      case 3:
        v10 = *(_DWORD *)(a2 + 24);
        v5 = 119860;
        v11 = 78;
        goto LABEL_37;
      case 4:
        v10 = *(_DWORD *)(a2 + 24);
        v5 = 119912;
        v11 = 130;
LABEL_37:
        if (v3 >= 0x1A)
          v5 = v11 | 0x1D400;
        if (v10)
          return this;
        goto LABEL_53;
      case 5:
        v5 = 120120;
        v12 = 338;
        goto LABEL_51;
      case 6:
        v5 = 120172;
        v12 = 390;
        goto LABEL_51;
      case 7:
        v5 = 119964;
        v12 = 182;
        goto LABEL_51;
      case 8:
        v5 = 120016;
        v12 = 234;
        goto LABEL_51;
      case 9:
        v5 = 120068;
        v12 = 286;
        goto LABEL_51;
      case 0xA:
        v5 = 120224;
        v12 = 442;
        goto LABEL_51;
      case 0xB:
        v5 = 120276;
        v12 = 494;
        goto LABEL_51;
      case 0xC:
        v5 = 120328;
        v12 = 546;
        goto LABEL_51;
      case 0xD:
        v5 = 120380;
        v12 = 598;
        goto LABEL_51;
      case 0xE:
        v5 = 120432;
        v12 = 650;
LABEL_51:
        if (v3 >= 0x1A)
          v5 = v12 | 0x1D400;
LABEL_53:
        v13 = v3 >= 0x1A;
        v14 = -97;
        v15 = -65;
LABEL_61:
        if (!v13)
          v14 = v15;
        this = fixOutOfSequenceUnicodeChar((v14 + this + v5));
        break;
      default:
        return this;
    }
  }
  else if ((this - 48) > 9)
  {
    v6 = this - 913;
    v7 = *(_DWORD *)(a2 + 12);
    if ((this - 913) < 0x19 || (this - 945) <= 0x18)
    {
      switch(v7)
      {
        case 2:
          v5 = 120488;
          v9 = 706;
          goto LABEL_58;
        case 3:
          v5 = 120546;
          v9 = 764;
          goto LABEL_58;
        case 4:
          v5 = 120604;
          v9 = 822;
          goto LABEL_58;
        case 11:
          v5 = 120662;
          v9 = 880;
          goto LABEL_58;
        case 13:
          v5 = 120720;
          v9 = 938;
LABEL_58:
          if (v6 >= 0x19)
            v5 = v9 | 0x1D400;
          v13 = v6 >= 0x19;
          v14 = -945;
          v15 = -913;
          goto LABEL_61;
        default:
          return this;
      }
    }
    if ((_DWORD)this == 567)
      v8 = 120485;
    else
      v8 = 0;
    if ((_DWORD)this == 305)
      v8 = 120484;
    if (v7 == 3)
      return v8;
    else
      return 0;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 12) - 2;
    if (v4 <= 0xC && ((0x1F09u >> v4) & 1) != 0)
      return dword_241211A58[v4] + (_DWORD)this - 48;
  }
  return this;
}

uint64_t fixOutOfSequenceUnicodeChar(uint64_t result)
{
  if ((int)result > 120069)
  {
    if ((int)result > 120121)
    {
      switch((int)result)
      {
        case 120127:
          result = 8461;
          break;
        case 120128:
        case 120129:
        case 120130:
        case 120131:
        case 120132:
        case 120134:
          return result;
        case 120133:
          result = 8469;
          break;
        case 120135:
          result = 8473;
          break;
        case 120136:
          result = 8474;
          break;
        case 120137:
          result = 8477;
          break;
        default:
          if ((_DWORD)result == 120122)
          {
            result = 8450;
          }
          else if ((_DWORD)result == 120145)
          {
            result = 8484;
          }
          break;
      }
    }
    else if ((int)result <= 120075)
    {
      if ((_DWORD)result == 120070)
      {
        return 8493;
      }
      else if ((_DWORD)result == 120075)
      {
        return 8460;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0x1D50C:
          return 8465;
        case 0x1D515:
          return 8476;
        case 0x1D51D:
          return 8488;
      }
    }
  }
  else if ((int)result > 119993)
  {
    switch((_DWORD)result)
    {
      case 0x1D4BA:
        return 8495;
      case 0x1D4BC:
        return 8458;
      case 0x1D4C4:
        return 8500;
    }
  }
  else
  {
    switch((int)result)
    {
      case 119965:
        result = 8492;
        break;
      case 119966:
      case 119967:
      case 119970:
      case 119973:
      case 119974:
      case 119977:
      case 119978:
      case 119979:
      case 119980:
        return result;
      case 119968:
        result = 8496;
        break;
      case 119969:
        result = 8497;
        break;
      case 119971:
        result = 8459;
        break;
      case 119972:
        result = 8464;
        break;
      case 119975:
        result = 8466;
        break;
      case 119976:
        result = 8499;
        break;
      case 119981:
        result = 8475;
        break;
      default:
        if ((_DWORD)result == 119893)
          result = 8462;
        break;
    }
  }
  return result;
}

double EQKit::Unicode::emSize(EQKit::Unicode *this)
{
  double result;

  result = 0.5;
  switch((int)this)
  {
    case 8192:
    case 8194:
      return result;
    case 8193:
    case 8195:
      result = 1.0;
      break;
    case 8196:
      result = 0.33333333;
      break;
    case 8197:
      result = 0.25;
      break;
    case 8198:
    case 8201:
      result = 0.16666666;
      break;
    case 8199:
    case 8200:
      goto LABEL_6;
    case 8202:
      result = 0.08333333;
      break;
    default:
      if ((_DWORD)this == 8287)
        result = 0.22222222;
      else
LABEL_6:
        result = 0.0;
      break;
  }
  return result;
}

uint64_t std::set<unsigned int>::set[abi:ne180100]<unsigned int const*>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v4;
  unsigned int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_24119FB08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t EQKit::StemStretch::Config::Entry::Entry(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = *(_BYTE *)(this + 16) & 0xF0 | 1;
  return this;
}

uint64_t EQKit::StemStretch::Config::Entry::fromDictionary(EQKit::StemStretch::Config::Entry *this, NSDictionary *a2, EQKit::StemStretch::Config::Entry *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  const void *p_p;
  int v13;
  char v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  char v20;
  const void *v21;
  const void *v22;
  int v24;
  objc_class *v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  v5 = _stringForKey(this, (uint64_t)CFSTR("analyzeMethod"), &__p);
  if ((_DWORD)v5)
  {
    if (v28 >= 0)
      v6 = HIBYTE(v28);
    else
      v6 = v27;
    if (v6 == 13)
    {
      if (v28 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (!memcmp(p_p, "ParallelStems", 0xDuLL))
      {
        v11 = (uint64_t)a2[2].super.isa & 0xFC | 1;
        goto LABEL_22;
      }
    }
    else if (v6 == 11)
    {
      v7 = (uint64_t *)&__p;
      if (v28 < 0)
        v7 = (uint64_t *)__p;
      v8 = *v7;
      v9 = *(uint64_t *)((char *)v7 + 3);
      if (v8 == 0x7543726F7272694DLL && v9 == 0x6576727543726F72)
      {
        v11 = (uint64_t)a2[2].super.isa & 0xFC | 2;
LABEL_22:
        LOBYTE(a2[2].super.isa) = v11;
        goto LABEL_23;
      }
    }
    v11 = (uint64_t)a2[2].super.isa & 0xFC;
    goto LABEL_22;
  }
LABEL_23:
  if (_stringForKey(this, (uint64_t)CFSTR("minStemLength"), &__p))
  {
    EQKitLength::EQKitLength(&v24, &__p, 0);
    LODWORD(a2->super.isa) = v24;
    a2[1].super.isa = v25;
    v5 = 1;
  }
  v13 = _stringForKey(this, (uint64_t)CFSTR("axis"), &__p);
  v14 = HIBYTE(v28);
  if (!v13)
    goto LABEL_52;
  if (v28 >= 0)
    v15 = HIBYTE(v28);
  else
    v15 = v27;
  switch(v15)
  {
    case 4:
      if (v28 >= 0)
        v21 = &__p;
      else
        v21 = __p;
      if (memcmp(v21, "none", 4uLL))
        goto LABEL_51;
      v20 = LOBYTE(a2[2].super.isa) | 0xC;
      break;
    case 8:
      if (v28 >= 0)
        v22 = &__p;
      else
        v22 = __p;
      if (memcmp(v22, "vertical", 8uLL))
        goto LABEL_51;
      v20 = (uint64_t)a2[2].super.isa & 0xF3 | 8;
      break;
    case 10:
      v16 = (unsigned __int16 *)&__p;
      if (v28 < 0)
        v16 = (unsigned __int16 *)__p;
      v17 = *(_QWORD *)v16;
      v18 = v16[4];
      if (v17 != 0x746E6F7A69726F68 || v18 != 27745)
        goto LABEL_51;
      v20 = (uint64_t)a2[2].super.isa & 0xF3 | 4;
      break;
    default:
      goto LABEL_51;
  }
  LOBYTE(a2[2].super.isa) = v20;
LABEL_51:
  v5 = 1;
LABEL_52:
  if (v14 < 0)
    operator delete(__p);
  return v5;
}

void sub_24119FFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _stringForKey(void *a1, uint64_t a2, void **a3)
{
  void *v4;
  char isKindOfClass;
  __int128 v7;
  void *v8;

  v4 = (void *)objc_msgSend(a1, "objectForKey:", a2);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)objc_msgSend(v4, "UTF8String"));
    if (*((char *)a3 + 23) < 0)
      operator delete(*a3);
    *(_OWORD *)a3 = v7;
    a3[2] = v8;
  }
  else
  {
    if (*((char *)a3 + 23) < 0)
    {
      a3[1] = 0;
      a3 = (void **)*a3;
    }
    else
    {
      *((_BYTE *)a3 + 23) = 0;
    }
    *(_BYTE *)a3 = 0;
  }
  return isKindOfClass & 1;
}

uint64_t EQKit::StemStretch::Key::Key(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, CTFontRef font, __int16 a3, int a4, double a5)
{
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = a3;
  *((_DWORD *)this + 5) = a4;
  *((double *)this + 3) = a5;
  if (font)
  {
    *(_QWORD *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, const EQKit::StemStretch::Key *a2)
{
  const void *v3;

  v3 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  if (v3)
    CFRetain(v3);
  return this;
}

uint64_t EQKit::StemStretch::Key::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  }
  return a1;
}

void EQKit::StemStretch::Key::~Key(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

BOOL EQKit::StemStretch::Key::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  v2 = *(const __CFString **)a1;
  v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3)
    return 1;
  result = 0;
  if (v2 && v3)
    return CFStringCompare(v2, v3, 0) == kCFCompareEqualTo;
  return result;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::keyForFontAndCharacter@<X0>(EQKit::StemStretch::Key *this@<X0>, const __CTFont *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  int v6;
  const __CTFont *v7;
  CGGlyph glyphs;
  UniChar characters;

  characters = (unsigned __int16)a2;
  glyphs = -1;
  if (this)
  {
    v6 = (int)a2;
    v7 = this;
    this = (EQKit::StemStretch::Key *)CTFontGetGlyphsForCharacters(this, &characters, &glyphs, 1);
    if ((_DWORD)this)
      return EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)a4, v7, glyphs, v6, a3);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = -1;
  *(_DWORD *)(a4 + 20) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  return this;
}

EQKit::StemStretch::Glyph *EQKit::StemStretch::Glyph::Glyph(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Key *a2, const EQKit::StemStretch::Config::Entry *a3)
{
  const __CTFont *v6;
  double Size;
  int v8;
  BOOL v9;
  EQKitPath *v10;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*(_QWORD *)a2)
    v6 = CTFontCreateWithName(*(CFStringRef *)a2, *((CGFloat *)a2 + 1), 0);
  else
    v6 = 0;
  *((_QWORD *)this + 1) = EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*((unsigned __int16 *)a2 + 8), v6, a3);
  if (!a3)
    goto LABEL_9;
  if (*(_DWORD *)a3)
  {
    Size = CTFontGetSize(v6);
    *((double *)this + 2) = EQKitLength::resolveToAbsoluteWithSizeAndRule(a3, Size, *((double *)a2 + 3));
  }
  v8 = *((_BYTE *)a3 + 16) & 3;
  if (v8 == 2)
  {
    v9 = EQKit::StemStretch::Glyph::analyzeMirrorCurve(this, a3);
LABEL_11:
    if (v9)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (v8 == 1)
  {
LABEL_9:
    v9 = EQKit::StemStretch::Glyph::analyzeParallelStems(this, a3);
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)this = 0;
  v10 = (EQKitPath *)*((_QWORD *)this + 1);
  if (v10)
  {
    EQKitPath::~EQKitPath(v10);
    MEMORY[0x242690740]();
  }
  *((_QWORD *)this + 1) = 0;
LABEL_15:
  if (v6)
    CFRelease(v6);
  return this;
}

void sub_2411A044C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)(v2 + 48);
  if (v4)
  {
    *(_QWORD *)(v2 + 56) = v4;
    operator delete(v4);
  }
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeParallelStems(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  uint64_t v3;
  uint64_t *v5;
  char v6;
  _BOOL4 v7;
  _BOOL8 v8;
  _BOOL4 v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double *v16;
  void *v17;
  double *v18;
  double v19;
  int *v20;
  __int128 v21;
  __int128 v22;
  double *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  void **v34;
  int v35;
  uint64_t v36[3];
  __int128 v37;
  void *__p[2];
  double *v39;
  uint64_t v40;
  char v41[8];
  int v42;
  uint64_t v43[3];
  __int128 v44;
  __int128 v45;
  double *v46;
  uint64_t v47;
  void **v48;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)v41, v3, 1);
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)&v34, *((_QWORD *)this + 1), 2);
  v5 = &v47;
  if (a2 && (v6 = *((_BYTE *)a2 + 16), (v6 & 8) != 0))
  {
    v7 = 0;
  }
  else
  {
    v7 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)v41, *((double *)this + 2));
    if (!a2)
      goto LABEL_9;
    v6 = *((_BYTE *)a2 + 16);
  }
  if ((((v6 & 4) != 0) | 2) != 2)
  {
    if (!v7)
      goto LABEL_31;
    goto LABEL_25;
  }
LABEL_9:
  v9 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)&v34, *((double *)this + 2));
  if (v7 && v9)
  {
    v11 = *((_QWORD *)&v45 + 1);
    v10 = v46;
    v12 = 0.0;
    v13 = 0.0;
    if (*((double **)&v45 + 1) != v46)
    {
      v14 = (double *)*((_QWORD *)&v45 + 1);
      do
      {
        v15 = *v14++;
        v13 = v13 + v15;
      }
      while (v14 != v46);
    }
    v17 = __p[1];
    v16 = v39;
    if (__p[1] != v39)
    {
      v12 = 0.0;
      v18 = (double *)__p[1];
      do
      {
        v19 = *v18++;
        v12 = v12 + v19;
      }
      while (v18 != v39);
    }
    if (v13 < v12)
    {
      if (v35)
      {
        *(_DWORD *)this = v35;
        v20 = &v35;
        v21 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)((char *)this + 24) = v37;
        v22 = *(_OWORD *)((char *)this + 40);
        *((void **)this + 5) = __p[0];
        *((_QWORD *)this + 6) = v17;
        v37 = v21;
        *(_OWORD *)__p = v22;
        v23 = (double *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v16;
LABEL_23:
        v5 = &v40;
        v39 = v23;
LABEL_30:
        v31 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = *v5;
        *v5 = v31;
        *v20 = 0;
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (!v42)
      goto LABEL_31;
    *(_DWORD *)this = v42;
    v20 = &v42;
    v29 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    v44 = v29;
    v30 = *(_OWORD *)((char *)this + 40);
    *((_QWORD *)this + 5) = v45;
    *((_QWORD *)this + 6) = v11;
    v45 = v30;
    v28 = (double *)*((_QWORD *)this + 7);
LABEL_29:
    *((_QWORD *)this + 7) = v10;
    v46 = v28;
    goto LABEL_30;
  }
  if (v7)
  {
LABEL_25:
    if (!v42)
      goto LABEL_31;
    *(_DWORD *)this = v42;
    v20 = &v42;
    v26 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    v44 = v26;
    v27 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = v45;
    v45 = v27;
    v28 = (double *)*((_QWORD *)this + 7);
    v10 = v46;
    goto LABEL_29;
  }
  if (v9 && v35)
  {
    *(_DWORD *)this = v35;
    v20 = &v35;
    v24 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v37;
    v25 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)__p;
    v37 = v24;
    *(_OWORD *)__p = v25;
    v23 = (double *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v39;
    goto LABEL_23;
  }
LABEL_31:
  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  v8 = v32 >= 2 && v32 - 1 == (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3;
  if (__p[1])
  {
    v39 = (double *)__p[1];
    operator delete(__p[1]);
  }
  v48 = (void **)&v37;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v48);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v36);
  if (*((_QWORD *)&v45 + 1))
  {
    v46 = (double *)*((_QWORD *)&v45 + 1);
    operator delete(*((void **)&v45 + 1));
  }
  v34 = (void **)&v44;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v34);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v43);
  return v8;
}

void sub_2411A0754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  EQKit::StemStretch::FeatureRange::~FeatureRange((EQKit::StemStretch::FeatureRange *)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeMirrorCurve(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  unsigned int v3;
  int v4;
  EQKitPath *v5;
  unint64_t CurveMirrorParallelWithAxis;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  EQKitPath *v11;
  double *v12;
  double v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  EQKitPath *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  _QWORD **v43;
  _QWORD *v44;
  uint64_t v45;
  double v46;

  if (a2)
    v3 = (*((unsigned __int8 *)a2 + 16) >> 2) & 3;
  else
    v3 = 0;
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  v5 = (EQKitPath *)*((_QWORD *)this + 1);
  if (!v5)
    return 0;
  v46 = 0.0;
  CurveMirrorParallelWithAxis = EQKitPath::findCurveMirrorParallelWithAxis(v5, v4, &v46);
  v7 = CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL;
  if (CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = CurveMirrorParallelWithAxis;
    v9 = EQKitPath::endPointIndexForElement(*((EQKitPath **)this + 1), CurveMirrorParallelWithAxis);
    v10 = EQKitPath::addLineToAfterElement(*((EQKitPath **)this + 1), v8);
    v11 = (EQKitPath *)*((_QWORD *)this + 1);
    EQKitPath::extractPath(v11);
    v12 = (double *)(*((_QWORD *)v11 + 1) + 16 * v9);
    v13 = *v12;
    v14 = v12[1];
    v44 = 0;
    v45 = 0;
    v43 = &v44;
    v15 = *((_QWORD *)this + 4);
    if (v15 >= *((_QWORD *)this + 5))
    {
      v16 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t *)this + 3, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:ne180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      v16 = v15 + 24;
      *((_QWORD *)this + 4) = v15 + 24;
    }
    *((_QWORD *)this + 4) = v16;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    v44 = 0;
    v45 = 0;
    v43 = &v44;
    v17 = *((_QWORD *)this + 4);
    if (v17 >= *((_QWORD *)this + 5))
    {
      v18 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t *)this + 3, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:ne180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      v18 = v17 + 24;
      *((_QWORD *)this + 4) = v17 + 24;
    }
    *((_QWORD *)this + 4) = v18;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    v19 = *((_QWORD *)this + 8);
    v20 = (uint64_t **)*((_QWORD *)this + 3);
    v21 = *((_QWORD *)this + 4);
    v22 = (char *)*((_QWORD *)this + 7);
    if ((unint64_t)v22 >= v19)
    {
      v24 = (char *)*((_QWORD *)this + 6);
      v25 = (v22 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v26 = v19 - (_QWORD)v24;
      v27 = (uint64_t)(v19 - (_QWORD)v24) >> 2;
      if (v27 <= v25 + 1)
        v27 = v25 + 1;
      v28 = v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v27;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 64, v28);
        v24 = (char *)*((_QWORD *)this + 6);
        v22 = (char *)*((_QWORD *)this + 7);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * v25];
      v31 = &v29[8 * v28];
      *(_QWORD *)v30 = 0;
      v23 = v30 + 8;
      while (v22 != v24)
      {
        v32 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v30 - 1) = v32;
        v30 -= 8;
      }
      *((_QWORD *)this + 6) = v30;
      *((_QWORD *)this + 7) = v23;
      *((_QWORD *)this + 8) = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v22 = 0;
      v23 = v22 + 8;
    }
    *((_QWORD *)this + 7) = v23;
    v33 = (EQKitPath *)*((_QWORD *)this + 1);
    EQKitPath::extractPath(v33);
    *(_DWORD *)this = v4;
    v34 = *((_QWORD *)v33 + 2) - *((_QWORD *)v33 + 1);
    if (v34)
    {
      v35 = 0;
      v36 = 0;
      v37 = (uint64_t **)(v21 - 24);
      v38 = v34 >> 4;
      if (v38 <= 1)
        v39 = 1;
      else
        v39 = v38;
      do
      {
        if (v9 == v36)
        {
          if (v46 <= 0.0)
          {
            v43 = (_QWORD **)v9;
            goto LABEL_50;
          }
          v43 = (_QWORD **)v9;
        }
        else if (v10 == v36)
        {
          if (v46 > 0.0)
          {
            v43 = (_QWORD **)v10;
LABEL_50:
            v41 = v37;
            goto LABEL_51;
          }
          v43 = (_QWORD **)v10;
        }
        else
        {
          v40 = *((_QWORD *)v33 + 1);
          if (v3 > 1)
          {
            if (*(double *)(v40 + v35 + 8) > v14)
            {
LABEL_49:
              v43 = (_QWORD **)v36;
              goto LABEL_50;
            }
          }
          else if (*(double *)(v40 + v35) > v13)
          {
            goto LABEL_49;
          }
          v43 = (_QWORD **)v36;
        }
        v41 = v20;
LABEL_51:
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v41, (unint64_t *)&v43, (uint64_t *)&v43);
        ++v36;
        v35 += 16;
      }
      while (v39 != v36);
    }
  }
  return v7;
}

void sub_2411A0A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void EQKit::StemStretch::Glyph::~Glyph(EQKit::StemStretch::Glyph *this)
{
  EQKitPath *v2;
  void *v3;
  void **v4;

  v2 = (EQKitPath *)*((_QWORD *)this + 1);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x242690740]();
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 24);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v4);
}

BOOL EQKit::StemStretch::FeatureRange::analyze(EQKit::StemStretch::FeatureRange *this, double a2)
{
  unint64_t v4;
  int v5;
  double *v6;
  CGPoint *v7;
  uint64_t v8;
  __n128 v9;
  CGPoint *p_y;
  CGPoint *v11;
  double v12;
  double v13;
  double v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double *v28;
  int v29;
  CGPoint *v30;
  CGFloat v31;
  char *v32;
  __int128 *v33;
  char v34;
  double *v35;
  __int128 *v36;
  uint64_t i;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  __int128 *j;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  double *v49;
  __int128 *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  double *v57;
  uint64_t v58;
  double *v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  uint64_t k;
  char *v69;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  BOOL v82;
  double v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t m;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  int v96;
  double v97;
  double v98;
  int v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  double x;
  CGPoint v104;
  CGPoint v105;
  void *__p;
  char *v107;
  unint64_t v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  _QWORD v112[14];

  v4 = 0;
  v112[12] = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 2);
  __p = 0;
  v107 = 0;
  v108 = 0;
  v6 = (double *)((char *)this + 16);
  v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
  v96 = v5;
  while (1)
  {
    v8 = *(_QWORD *)this;
    EQKitPath::extractPath(*(EQKitPath **)this);
    if (v4 >= (uint64_t)(*(_QWORD *)(v8 + 40) - *(_QWORD *)(v8 + 32)) >> 4)
      break;
    v104 = *v7;
    v105 = v104;
    if (!EQKitPath::elementMinMax(*(EQKitPath **)this, v4, &v105, &v104))
      goto LABEL_77;
    p_y = (CGPoint *)&v105.y;
    if (v5 == 1)
      p_y = &v105;
    x = p_y->x;
    v11 = (CGPoint *)&v104.y;
    if (v5 == 1)
      v11 = &v104;
    v12 = v11->x;
    v101 = 0;
    v102 = 0;
    if (EQKitPath::isLineTo(*(unint64_t ***)this, v4, (uint64_t *)&v102, &v101, 0))
    {
      v13 = EQKitPath::vector(*(EQKitPath **)this, v102, v101);
      if (v5 == 1)
        v13 = v14;
      v15 = v13 == 0.0;
    }
    else
    {
      v15 = 0;
    }
    if (x > v12)
      __assert_rtn("analyze", "EQKitStemStretch.mm", 532, "min <= max");
    v16 = *((_QWORD *)this + 3);
    LOBYTE(v97) = 0;
    v17 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(v16, (uint64_t)v6, &x);
    v18 = v17;
    if (x >= v12 || v6 == (double *)v17)
    {
      v21 = x != v12 || v6 == (double *)v17 || v15;
      if ((v21 & 1) == 0)
      {
        v22 = 0;
        v97 = x;
        v98 = v12;
        v99 = 1;
        v100 = 0uLL;
        do
        {
          v23 = (char *)&v109 + v22;
          *(_OWORD *)v23 = xmmword_241211AB0;
          *((_DWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 3) = 0;
          *((_QWORD *)v23 + 4) = 0;
          v22 += 40;
        }
        while (v22 != 120);
        v24 = (__int128 *)(v17 + 16);
        v25 = EQKit::StemStretch::FeatureRange::Span::split(v17 + 16, (uint64_t)&v97, (uint64_t)&v109);
        if (v25)
        {
          v26 = v25 - 1;
          if (v25 == 1)
          {
            if (v24 != &v109)
            {
              *(_OWORD *)(v18 + 16) = v109;
              *(_DWORD *)(v18 + 32) = v110;
              *(_QWORD *)(v18 + 40) = v111;
              v27 = v112;
              v28 = (double *)v18;
              goto LABEL_72;
            }
            v28 = (double *)v18;
          }
          else
          {
            v47 = &v109;
            v48 = v25 - 1;
            v28 = (double *)v18;
            do
            {
              std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, (uint64_t *)v18, (uint64_t)v47);
              if (v28 == (double *)v18)
                v28 = v49;
              v47 = (__int128 *)((char *)v47 + 40);
              --v48;
            }
            while (v48);
            v50 = (__int128 *)((char *)&v109 + 40 * v26);
            if (v24 == v50)
            {
              v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
            }
            else
            {
              *(_OWORD *)(v18 + 16) = *v50;
              v51 = (char *)&v109 + 40 * v26;
              *(_DWORD *)(v18 + 32) = *((_DWORD *)v51 + 4);
              *(_QWORD *)(v18 + 40) = *((_QWORD *)v51 + 3);
              v27 = v51 + 32;
              v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
LABEL_72:
              *(_QWORD *)(v18 + 48) = *v27;
            }
          }
          EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, v28, (double *)v18);
        }
        v5 = v96;
      }
    }
    else
    {
      if (x < *(double *)(v17 + 16) && *((_QWORD *)this + 3) != v17)
        v18 = *(_QWORD *)v17;
      if (v15)
        v29 = 2;
      else
        v29 = 1;
      v97 = x;
      v98 = v12;
      v99 = v29;
      v100 = 0uLL;
      if (v15)
      {
        v30 = (CGPoint *)&v105.y;
        if (v5 != 1)
          v30 = &v105;
        v31 = v30->x;
        *(CGFloat *)&v100 = v30->x;
        v32 = v107;
        if ((unint64_t)v107 >= v108)
        {
          v33 = (__int128 *)std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>((uint64_t *)&__p, (uint64_t)&v97);
        }
        else
        {
          *(double *)v107 = x;
          *((double *)v32 + 1) = v12;
          *((_DWORD *)v32 + 4) = 2;
          *((CGFloat *)v32 + 3) = v31;
          v33 = (__int128 *)(v32 + 40);
          *((_QWORD *)v32 + 4) = 0;
        }
        v107 = (char *)v33;
      }
      if ((double *)v18 != v6)
      {
        v34 = 0;
        v35 = (double *)v18;
        while (1)
        {
          v36 = (__int128 *)(v35 + 2);
          if (v35[2] >= v12)
          {
LABEL_63:
            v5 = v96;
            if ((v34 & 1) != 0)
              EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (double *)v18, v35);
            goto LABEL_65;
          }
          for (i = 0; i != 120; i += 40)
          {
            v38 = (char *)&v109 + i;
            *(_OWORD *)v38 = xmmword_241211AB0;
            *((_DWORD *)v38 + 4) = 0;
            *((_QWORD *)v38 + 3) = 0;
            *((_QWORD *)v38 + 4) = 0;
          }
          v39 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)(v35 + 2), (uint64_t)&v97, (uint64_t)&v109);
          v40 = v39;
          if (v39)
            break;
LABEL_61:
          v35 = (double *)*((_QWORD *)v35 + 1);
          if (v35 == v6)
          {
            v35 = v6;
            goto LABEL_63;
          }
        }
        v41 = v39 - 1;
        if (v39 == 1)
        {
          if (v36 != &v109)
          {
            *((_OWORD *)v35 + 1) = v109;
            *((_DWORD *)v35 + 8) = v110;
            *((_QWORD *)v35 + 5) = v111;
            v42 = (double *)v112;
            goto LABEL_59;
          }
        }
        else
        {
          for (j = &v109; --v40; j = v44)
          {
            v44 = (__int128 *)((char *)j + 40);
            std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, (uint64_t *)v35, (uint64_t)j);
          }
          v45 = (__int128 *)((char *)&v109 + 40 * v41);
          if (v36 != v45)
          {
            *((_OWORD *)v35 + 1) = *v45;
            v46 = (char *)&v109 + 40 * v41;
            *((_DWORD *)v35 + 8) = *((_DWORD *)v46 + 4);
            v35[5] = *((double *)v46 + 3);
            v42 = (double *)(v46 + 32);
LABEL_59:
            v35[6] = *v42;
          }
        }
        v34 = 1;
        goto LABEL_61;
      }
LABEL_65:
      v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
    }
LABEL_77:
    ++v4;
  }
  v52 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v107 - (_BYTE *)__p) >> 3));
  *(_QWORD *)&v109 = EQKit::StemStretch::FeatureRange::Span::compareOrthogonal;
  if (v107 == __p)
    v53 = 0;
  else
    v53 = v52;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>((uint64_t)__p, (__int128 *)v107, (uint64_t (**)(__int128 *, __int128 *))&v109, v53, 1, v9);
  EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (uint64_t *)&__p);
  v54 = *((_QWORD *)this + 3);
  if ((double *)v54 == v6)
    goto LABEL_131;
  v55 = 0;
  while (2)
  {
    if (*(_DWORD *)(v54 + 32) == 2)
    {
      v57 = (double *)__p;
      v56 = v107;
      if (__p == v107)
        goto LABEL_121;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0.0;
      v62 = 0.0;
      v63 = 0.0;
      v64 = (double *)__p;
      do
      {
        if (*(double *)(v54 + 24) > *v64)
        {
          v65 = v64[1];
          if (*(double *)(v54 + 16) < v65)
          {
            if (v59)
            {
              v66 = vabdd_f64(v64[3], v59[3]);
              if (v63 < v66)
                v63 = v66;
              v60 = 1;
              v59 = 0;
            }
            else
            {
              v59 = v64;
            }
            if (v62 >= v65)
              v62 = v64[1];
            if (!v58)
              v62 = v64[1];
            if (v61 < *v64 || v58 == 0)
              v61 = *v64;
            ++v58;
          }
        }
        v64 += 5;
      }
      while (v64 != (double *)v107);
      if (!v58)
        goto LABEL_121;
      v97 = v61;
      v98 = v62;
      v99 = 0;
      v100 = 0uLL;
      do
      {
        if (*(double *)(v54 + 24) <= *v57 || *(double *)(v54 + 16) >= v57[1])
        {
          for (k = 0; k != 120; k += 40)
          {
            v69 = (char *)&v109 + k;
            *(_OWORD *)v69 = xmmword_241211AB0;
            *((_DWORD *)v69 + 4) = 0;
            *((_QWORD *)v69 + 3) = 0;
            *((_QWORD *)v69 + 4) = 0;
          }
          v70 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)&v97, (uint64_t)v57, (uint64_t)&v109);
          if (v70)
          {
            v71 = (double *)&v109;
            while (1)
            {
              if (*(double *)(v54 + 24) > *v71)
              {
                v72 = v71[1];
                if (*(double *)(v54 + 16) < v72)
                  break;
              }
              v71 += 5;
              if (!--v70)
                goto LABEL_118;
            }
            if (v71 != &v97)
            {
              v97 = *v71;
              v98 = v72;
              v99 = *((_DWORD *)v71 + 4);
              v100 = *(_OWORD *)(v71 + 3);
            }
          }
LABEL_118:
          v56 = v107;
        }
        v57 += 5;
      }
      while (v57 != (double *)v56);
      if (v98 >= v97)
      {
        v73 = vabdd_f64(v98, v97);
        if (((v73 >= a2) & v60) == 1)
        {
          if (v63 / (v98 - v97) >= 2.0)
            goto LABEL_121;
        }
        else if (v73 < a2)
        {
          goto LABEL_121;
        }
        *(double *)(v54 + 48) = v73;
      }
      else
      {
LABEL_121:
        v55 = 1;
        *(_DWORD *)(v54 + 32) = 1;
      }
    }
    v54 = *(_QWORD *)(v54 + 8);
    if ((double *)v54 != v6)
      continue;
    break;
  }
  if ((v55 & 1) != 0)
    EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, *((double **)this + 3), v6);
LABEL_131:
  v74 = *((_QWORD *)this + 4);
  if (v74)
  {
    v75 = (_DWORD *)*((_QWORD *)this + 3);
    if (v75[8]
      || (v76 = *(_QWORD *)v75,
          *(_QWORD *)(v76 + 8) = *((_QWORD *)v75 + 1),
          **((_QWORD **)v75 + 1) = v76,
          *((_QWORD *)this + 4) = v74 - 1,
          operator delete(v75),
          (v74 = *((_QWORD *)this + 4)) != 0))
    {
      v77 = *(uint64_t **)v6;
      if (*(_DWORD *)(*(_QWORD *)v6 + 32)
        || (v78 = *v77,
            *(_QWORD *)(v78 + 8) = v77[1],
            *(_QWORD *)v77[1] = v78,
            *((_QWORD *)this + 4) = v74 - 1,
            operator delete(v77),
            (v74 = *((_QWORD *)this + 4)) != 0))
      {
        v79 = *((_QWORD *)this + 3);
        if (*(_DWORD *)(v79 + 32) != 2)
          goto LABEL_158;
        v80 = *(_QWORD *)(v79 + 16);
        v81 = operator new(0x38uLL);
        v81[2] = v80;
        v81[3] = v80;
        *((_DWORD *)v81 + 8) = 1;
        v81[5] = 0;
        v81[6] = 0;
        *v81 = v6;
        v81[1] = v79;
        *(_QWORD *)v79 = v81;
        v82 = __CFADD__(v74++, 1);
        *((_QWORD *)this + 3) = v81;
        *((_QWORD *)this + 4) = v74;
        if (!v82)
        {
LABEL_158:
          v83 = *v6;
          if (*(_DWORD *)(*(_QWORD *)v6 + 32) == 2)
          {
            v84 = *(_QWORD *)(*(_QWORD *)&v83 + 24);
            v85 = operator new(0x38uLL);
            v85[2] = v84;
            v85[3] = v84;
            *((_DWORD *)v85 + 8) = 1;
            v85[5] = 0;
            v85[6] = 0;
            *(double *)v85 = v83;
            v85[1] = v6;
            *(_QWORD *)(*(_QWORD *)&v83 + 8) = v85;
            *((_QWORD *)this + 2) = v85;
            *((_QWORD *)this + 4) = v74 + 1;
          }
        }
      }
    }
  }
  for (m = *((_QWORD *)this + 3); (double *)m != v6; m = *(_QWORD *)(m + 8))
  {
    v87 = *(_DWORD *)(m + 32);
    if (v87 == 1)
    {
      EQKit::StemStretch::FeatureRange::addFeatureCluster(this, *(double *)(m + 16), *(double *)(m + 24));
    }
    else if (v87 == 2)
    {
      EQKit::StemStretch::FeatureRange::addStem(this, *(double *)(m + 16), *(double *)(m + 24), *(double *)(m + 48));
    }
  }
  v89 = *((_QWORD *)this + 5);
  v88 = *((_QWORD *)this + 6);
  v92 = (char *)this + 64;
  v90 = *((_QWORD *)this + 8);
  v91 = *((_QWORD *)v92 + 1);
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v89) >> 3);
  return v93 > 1 && v93 == ((v91 - v90) >> 3) + 1;
}

void sub_2411A13A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKit::StemStretch::FeatureRange::~FeatureRange(EQKit::StemStretch::FeatureRange *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear((_QWORD *)this + 2);
}

CGPath *EQKit::StemStretch::Glyph::newPathWithLength(EQKit::StemStretch::Glyph *this, double a2, CGSize *a3)
{
  uint64_t v4;
  float64x2_t v7;
  CGFloat *v8;
  CGPath *Mutable;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGSize *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t *v28;
  uint64_t v29;
  int32x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float64x2_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  double width;
  double height;
  float64x2_t v46;
  float64x2_t v47;
  CGAffineTransform v48;
  void *__p;
  void *v50;
  uint64_t v51;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    return 0;
  v7 = *(float64x2_t *)MEMORY[0x24BDBEFB0];
  if (*(_BYTE *)(v4 + 120))
  {
    v8 = (CGFloat *)(v4 + 88);
  }
  else
  {
    v46 = *(float64x2_t *)MEMORY[0x24BDBEFB0];
    v8 = EQKitPath::computePathBounds((CGFloat *)v4);
    v7 = v46;
  }
  v10 = v8[2];
  v11 = v8[3];
  v12 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
    v13 = v8[2];
  else
    v13 = v8[3];
  v14 = a2 - v13;
  if (a2 - v13 <= 0.0)
  {
    v19 = *((_QWORD *)this + 1);
    if (*(_BYTE *)(v19 + 120))
      v20 = (CGSize *)(v19 + 88);
    else
      v20 = (CGSize *)EQKitPath::computePathBounds((CGFloat *)v19);
    width = v20->width;
    height = v20->height;
    *a3 = v20[1];
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -width, -height);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, 0);
  }
  else
  {
    v15 = *v8;
    v16 = v8[1];
    v18 = *((_QWORD *)this + 6);
    v17 = *((_QWORD *)this + 7);
    a3->width = v10;
    a3->height = v11;
    v47 = v7;
    if (v12 == 1)
      a3->width = v10 + v14;
    else
      a3->height = v14 + v11;
    v21 = *((_QWORD *)this + 1);
    EQKitPath::extractPath((EQKitPath *)v21);
    v50 = 0;
    v51 = 0;
    __p = 0;
    std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(&__p, *(const void **)(v21 + 8), *(_QWORD *)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 4);
    v22 = *((_QWORD *)this + 3);
    v23 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v22) >> 3);
    v24 = v23 >= 2;
    v25 = v23 - 2;
    v26 = v47;
    if (v24)
    {
      v27 = 0;
      v28 = (float64x2_t *)__p;
      v29 = ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3) + 1;
      v30 = vdup_n_s32(v12 == 1);
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      v32 = (int8x16_t)vdupq_lane_s64(0x8000000000000000, 0);
      v33.i64[1] = v32.i64[1];
      *(double *)v33.i64 = v14 / (double)(unint64_t)((v17 - v18) >> 3);
      v32.i64[1] = v33.i64[0];
      v34 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL)), v33, v32);
      v35 = 1;
      do
      {
        if (v35 == v29)
          break;
        v26 = vaddq_f64(v26, v34);
        v36 = (_QWORD *)(v22 + 24 * v35);
        v39 = (_QWORD *)*v36;
        v37 = v36 + 1;
        v38 = v39;
        if (v39 != v37)
        {
          do
          {
            v28[v38[4]] = vaddq_f64(v26, v28[v38[4]]);
            v40 = (_QWORD *)v38[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v38[2];
                v42 = *v41 == (_QWORD)v38;
                v38 = v41;
              }
              while (!v42);
            }
            v38 = v41;
          }
          while (v41 != v37);
        }
        ++v35;
        v42 = v27++ == v25;
      }
      while (!v42);
    }
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -v15, -v16);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, (uint64_t *)&__p);
    if (__p)
    {
      v50 = __p;
      operator delete(__p);
    }
  }
  return Mutable;
}

void sub_2411A1700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKit::StemStretch::FeatureRange::FeatureRange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _OWORD *v5;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = operator new(0x38uLL);
  v5[1] = xmmword_241211AB0;
  *((_DWORD *)v5 + 8) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = 1;
  return a1;
}

void sub_2411A1814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  _QWORD *v11;

  a10 = (void **)(v10 + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v11);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t EQKit::StemStretch::FeatureRange::Span::split(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;

  v4 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v3 - *(double *)a2 == 0.0 && v5 == 1;
  if (!v6 && (v3 <= *(double *)a1 || v4 >= *(double *)(a1 + 8)))
    return 0;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 1 || v7 == v5)
    return 0;
  v11 = *(double *)a1;
  if (*(double *)a1 == v4)
  {
    v12 = *(double *)(a1 + 8);
    if (v12 == v3)
    {
      if (v5 == 1)
      {
        if (a3 != a1)
        {
          *(double *)a3 = v11;
          *(double *)(a3 + 8) = v12;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
        }
        v9 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        return v9;
      }
      if (!v7)
      {
        if (a3 != a2)
        {
          *(double *)a3 = v4;
          *(double *)(a3 + 8) = v3;
          *(_DWORD *)(a3 + 16) = v5;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
        }
        return 1;
      }
      return 0;
    }
  }
  if (v11 >= v4)
  {
    v13 = 0;
  }
  else
  {
    *(double *)a3 = v11;
    *(double *)(a3 + 8) = v4;
    *(_DWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v11 = *(double *)a1;
    v4 = *(double *)a2;
    v3 = *(double *)(a2 + 8);
    v13 = 1;
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v11 >= v4)
    v4 = v11;
  if (v3 >= *(double *)(a1 + 8))
    v3 = *(double *)(a1 + 8);
  v14 = a3 + 40 * v13;
  *(double *)v14 = v4;
  *(double *)(v14 + 8) = v3;
  *(_DWORD *)(v14 + 16) = v5;
  v9 = v13 + 1;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = *(double *)(a2 + 8);
  v16 = *(double *)(a1 + 8);
  if (v15 < v16)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = a3 + 40 * v9;
    *(double *)v18 = v15;
    *(double *)(v18 + 8) = v16;
    *(_DWORD *)(v18 + 16) = v17;
    v9 = v13 | 2;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
  }
  return v9;
}

__n128 std::list<EQKit::StemStretch::FeatureRange::Span>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  __n128 result;
  uint64_t v8;

  v6 = (char *)operator new(0x38uLL);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v6 + 8) = *(_DWORD *)(a3 + 16);
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 40) = result;
  v8 = *a2;
  *(_QWORD *)(v8 + 8) = v6;
  *(_QWORD *)v6 = v8;
  *a2 = (uint64_t)v6;
  *((_QWORD *)v6 + 1) = a2;
  ++*(_QWORD *)(a1 + 16);
  return result;
}

void EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, double *__p, double *a3)
{
  double *v3;
  double *v4;
  double *v6;
  double *v7;
  uint64_t v8;

  v3 = a3;
  v4 = __p;
  v6 = (double *)(a1 + 16);
  if (*(double **)(a1 + 24) != __p)
    v4 = *(double **)__p;
  if (v6 != a3)
    v3 = (double *)*((_QWORD *)a3 + 1);
  while (v4 != v3)
  {
    v7 = v4;
    v4 = (double *)*((_QWORD *)v4 + 1);
    if (v4 != v6)
    {
      if (v7[3] != v4[2])
        EQKit::StemStretch::FeatureRange::collapse();
      if (*((_DWORD *)v7 + 8) == *((_DWORD *)v4 + 8))
      {
        v4[2] = v7[2];
        v8 = *(_QWORD *)v7;
        *(_QWORD *)(v8 + 8) = v4;
        **((_QWORD **)v7 + 1) = v8;
        --*(_QWORD *)(a1 + 32);
        operator delete(v7);
      }
    }
  }
}

BOOL EQKit::StemStretch::FeatureRange::Span::compareOrthogonal(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = a1[3];
  v3 = a2[3];
  if (v2 < v3)
    return 1;
  if (v2 == v3)
    return *a1 < *a2;
  return 0;
}

uint64_t EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a2;
  v3 = a2[1];
  while (v4 != v3 && v4 + 40 != v3)
  {
    if (*(double *)(v4 + 8) == *(double *)(v4 + 40)
      && *(double *)(v4 + 24) == *(double *)(v4 + 64)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v4 + 56))
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 48);
      result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(v4 + 80, v3, v4 + 40);
      a2[1] = v3;
    }
    else
    {
      v4 += 40;
    }
  }
  return result;
}

void EQKit::StemStretch::FeatureRange::addFeatureCluster(EQKit::StemStretch::FeatureRange *this, double a2, double a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  EQKitPath *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  double *v16;
  _QWORD **v18;
  _QWORD *v19[2];

  v6 = *((_DWORD *)this + 2);
  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  v7 = *((_QWORD *)this + 6);
  if (v7 >= *((_QWORD *)this + 7))
  {
    v8 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t *)this + 5, (uint64_t)&v18);
  }
  else
  {
    std::set<unsigned long>::set[abi:ne180100](*((uint64_t **)this + 6), (uint64_t)&v18);
    v8 = v7 + 24;
    *((_QWORD *)this + 6) = v7 + 24;
  }
  *((_QWORD *)this + 6) = v8;
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v18, v19[0]);
  v9 = *((_QWORD *)this + 6);
  v10 = *(EQKitPath **)this;
  EQKitPath::extractPath(v10);
  v12 = *((_QWORD *)v10 + 1);
  v11 = *((_QWORD *)v10 + 2);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = (uint64_t **)(v9 - 24);
    do
    {
      v16 = (double *)(v12 + v13);
      if (v6 != 1)
        v16 = (double *)(v12 + v13 + 8);
      if (*v16 >= a2 && *v16 <= a3)
      {
        v18 = (_QWORD **)v14;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v15, (unint64_t *)&v18, (uint64_t *)&v18);
        v12 = *((_QWORD *)v10 + 1);
        v11 = *((_QWORD *)v10 + 2);
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < (v11 - v12) >> 4);
  }
}

void sub_2411A1CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void EQKit::StemStretch::FeatureRange::addStem(EQKit::StemStretch::FeatureRange *this, double a2, double a3, double a4)
{
  char *v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  char *v17;
  uint64_t v18;

  v6 = (char *)this + 80;
  v7 = *((_QWORD *)this + 10);
  v8 = (double *)*((_QWORD *)this + 9);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (double *)*((_QWORD *)this + 8);
    v11 = v8 - v10;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 2;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v14);
      v10 = (double *)*((_QWORD *)this + 8);
      v8 = (double *)*((_QWORD *)this + 9);
    }
    else
    {
      v15 = 0;
    }
    v16 = (double *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a4;
    v9 = v16 + 1;
    while (v8 != v10)
    {
      v18 = *((_QWORD *)v8-- - 1);
      *((_QWORD *)v16-- - 1) = v18;
    }
    *((_QWORD *)this + 8) = v16;
    *((_QWORD *)this + 9) = v9;
    *((_QWORD *)this + 10) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = a4;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 9) = v9;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, double *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (result != a2)
  {
    v3 = 0;
    v4 = result;
    do
    {
      ++v3;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    do
    {
      v5 = v3 >> 1;
      v6 = result;
      if (v3 != 1)
      {
        v7 = v5 + 1;
        v6 = result;
        do
        {
          v6 = *(_QWORD *)(v6 + 8);
          --v7;
        }
        while (v7 > 1);
      }
      if (*(double *)(v6 + 24) < *a3)
      {
        result = *(_QWORD *)(v6 + 8);
        v5 = v3 + ~v5;
      }
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(v7, v9);
  v11 = &v10[40 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[40 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  v17 = v11 + 40;
  std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 40) % 0x28uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_2411A1F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(uint64_t result, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  char v22;
  _BOOL4 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;

  v8 = a2;
  v9 = (__int128 *)result;
  v26 = a2;
  v27 = (__int128 *)result;
  while (2)
  {
    v10 = 1 - a4;
LABEL_3:
    v11 = (char *)v8 - (char *)v9;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = *a3;
        v26 = (__int128 *)((char *)v8 - 40);
        result = ((uint64_t (*)(void))v24)();
        if ((_DWORD)result)
          return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v27, &v26);
        return result;
      case 3uLL:
        v26 = (__int128 *)((char *)v8 - 40);
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40), (__int128 *)((char *)v8 - 40), a3);
      case 4uLL:
        v26 = (__int128 *)((char *)v8 - 40);
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40), v9 + 5, (__int128 *)((char *)v8 - 40), a3);
      case 5uLL:
        v26 = (__int128 *)((char *)v8 - 40);
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40), v9 + 5, (__int128 *)((char *)v9 + 120), (__int128 *)((char *)v8 - 40), a3);
      default:
        if (v11 <= 959)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v9, v8, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v9, v8, (uint64_t (**)(_OWORD *, _QWORD))a3);
        }
        if (v10 == 1)
        {
          if (v9 != v8)
            return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(v9, v8, v8, (unsigned int (**)(int64_t, uint64_t))a3, a6);
          return result;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)((char *)v8 - 40);
        if ((unint64_t)v11 < 0x1401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v9 + 40 * (v12 >> 1)), v9, v14, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v8 = v26;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40 * (v12 >> 1)), v14, a3);
          v15 = v26;
          v16 = 5 * v13;
          v17 = 40 * v13;
          v18 = 40 * v13 - 40;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v27 + 40), (__int128 *)((char *)v27 + v18), v26 - 5, a3);
          v17 += 40;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v27 + 5, (__int128 *)((char *)v27 + v17), (__int128 *)((char *)v15 - 120), a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v27 + v18), (__int128 *)((char *)v27 + 8 * v16), (__int128 *)((char *)v27 + v17), a3);
          v25 = (__int128 *)((char *)v27 + 8 * v16);
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v27, &v25);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v19 = ((uint64_t (*)(char *))*a3)((char *)v27 - 40);
        v8 = v26;
        if ((v19 & 1) == 0)
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v27, v26, a3);
          v9 = (__int128 *)result;
          goto LABEL_20;
        }
LABEL_12:
        a6.n128_f64[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v27, v8, (uint64_t (**)(void))a3);
        v21 = v20;
        if ((v22 & 1) == 0)
          goto LABEL_19;
        v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v27, v20, a3);
        v9 = (__int128 *)((char *)v21 + 40);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v21 + 40), v8, a3);
        if (!(_DWORD)result)
        {
          if (v23)
          {
            v27 = (__int128 *)((char *)v21 + 40);
            goto LABEL_18;
          }
LABEL_19:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(v27, v21, a3, -v10, a5 & 1, a6);
          v9 = (__int128 *)((char *)v21 + 40);
LABEL_20:
          a5 = 0;
          v27 = v9;
          a4 = -v10;
          continue;
        }
        if (!v23)
        {
          v26 = v21;
          v9 = v27;
          v8 = v21;
LABEL_18:
          ++v10;
          goto LABEL_3;
        }
        return result;
    }
  }
}

__int128 **std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(__int128 **result, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v2 = *result;
  v3 = *a2;
  v4 = **result;
  v5 = *((_DWORD *)*result + 4);
  v6 = *(__int128 *)((char *)*result + 24);
  if (*result != *a2)
  {
    *v2 = *v3;
    *((_DWORD *)v2 + 4) = *((_DWORD *)v3 + 4);
    *(__int128 *)((char *)v2 + 24) = *(__int128 *)((char *)v3 + 24);
  }
  *v3 = v4;
  *((_DWORD *)v3 + 4) = v5;
  *(__int128 *)((char *)v3 + 24) = v6;
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  if ((_OWORD *)result != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = result;
    v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v15 = *v11;
          v16 = *((_DWORD *)v10 + 14);
          v17 = v10[4];
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 40) = *(_OWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 56) = *(_DWORD *)(v6 + v12 + 16);
            *(_OWORD *)(v13 + 64) = *(_OWORD *)(v6 + v12 + 24);
            if (!v12)
              break;
            v12 -= 40;
            result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 40;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          if ((__int128 *)v14 != &v15)
          {
            *(_OWORD *)v14 = v15;
            *(_DWORD *)(v14 + 16) = v16;
            *(_OWORD *)(v14 + 24) = v17;
          }
        }
        v7 = (_OWORD *)((char *)v11 + 40);
        v9 += 40;
        v10 = v11;
      }
      while ((_OWORD *)((char *)v11 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((_OWORD *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      v9 = result - 40;
      do
      {
        v10 = v7;
        result = (*a3)(v7, v6);
        if ((_DWORD)result)
        {
          v12 = *v10;
          v13 = *((_DWORD *)v6 + 14);
          v14 = v6[4];
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 80) = *(_OWORD *)(v11 + 40);
            *(_DWORD *)(v11 + 96) = *(_DWORD *)(v11 + 56);
            *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 + 64);
            result = (*a3)(&v12, v11);
            v11 -= 40;
          }
          while ((result & 1) != 0);
          if ((__int128 *)(v11 + 80) != &v12)
          {
            *(_OWORD *)(v11 + 80) = v12;
            *(_DWORD *)(v11 + 96) = v13;
            *(_OWORD *)(v11 + 104) = v14;
          }
        }
        v7 = (_OWORD *)((char *)v10 + 40);
        v9 += 40;
        v6 = v10;
      }
      while ((_OWORD *)((char *)v10 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v7;
  uint64_t result;
  __int128 **v9;
  __int128 **v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;

  v12 = a2;
  v13 = a1;
  v11 = a3;
  v7 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    if (!(*a4)(v12, v13))
      return 1;
    v9 = &v13;
    v10 = &v12;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
    if (!(*a4)(v11, v12))
      return 1;
    v9 = &v12;
    v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v11);
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v5;
  __int128 *v6;
  int v7;
  __int128 *v8;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;

  v13 = a2;
  v10 = *(_OWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 24);
  if (((*a3)(&v10, (__int128 *)((char *)a2 - 40)) & 1) != 0)
  {
    v5 = (__int128 *)a1;
    do
    {
      v5 = (__int128 *)((char *)v5 + 40);
      v14 = v5;
    }
    while (((*a3)(&v10, v5) & 1) == 0);
  }
  else
  {
    v6 = (__int128 *)(a1 + 40);
    do
    {
      v5 = v6;
      v14 = v6;
      if (v6 >= v13)
        break;
      v7 = (*a3)(&v10, v6);
      v6 = (__int128 *)((char *)v5 + 40);
    }
    while (!v7);
  }
  v8 = v13;
  if (v5 < v13)
  {
    do
    {
      v8 = (__int128 *)((char *)v8 - 40);
      v13 = v8;
    }
    while (((*a3)(&v10, v8) & 1) != 0);
    v5 = v14;
  }
  if (v5 < v8)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
      do
        v14 = (__int128 *)((char *)v14 + 40);
      while (!((unsigned int (*)(__int128 *))*a3)(&v10));
      do
        v13 = (__int128 *)((char *)v13 - 40);
      while ((((uint64_t (*)(__int128 *))*a3)(&v10) & 1) != 0);
      v5 = v14;
    }
    while (v14 < v13);
  }
  if ((__int128 *)((char *)v5 - 40) != (__int128 *)a1)
  {
    *(_OWORD *)a1 = *(__int128 *)((char *)v5 - 40);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v5 - 6);
    *(_OWORD *)(a1 + 24) = *(v5 - 1);
  }
  if ((__int128 *)((char *)v5 - 40) != &v10)
  {
    *(__int128 *)((char *)v5 - 40) = v10;
    *((_DWORD *)v5 - 6) = v11;
    *(v5 - 1) = v12;
  }
  return v5;
}

double std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(void))
{
  uint64_t v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  __int128 *v10;
  uint64_t (*v11)(void);
  __int128 *v12;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 *v17;
  __int128 *v18;

  v5 = 0;
  v17 = a2;
  v14 = *(_OWORD *)a1;
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *(_OWORD *)(a1 + 24);
  do
  {
    v5 += 40;
    v18 = (__int128 *)(v5 + a1);
  }
  while (((*a3)() & 1) != 0);
  v7 = v17;
  if (v5 == 40)
  {
    v10 = (__int128 *)(a1 + 40);
    do
    {
      if (v10 >= v7)
        break;
      v11 = *a3;
      v7 = (__int128 *)((char *)v7 - 40);
      v17 = v7;
    }
    while ((((uint64_t (*)(__int128 *, __int128 *))v11)(v7, &v14) & 1) == 0);
  }
  else
  {
    v8 = (__int128 *)((char *)v17 - 40);
    do
    {
      v17 = v8;
      v9 = ((uint64_t (*)(__int128 *, __int128 *))*a3)(v8, &v14);
      v8 = (__int128 *)((char *)v8 - 40);
    }
    while (!v9);
    v10 = v18;
  }
  v12 = v10;
  if (v10 < v17)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v18, &v17);
      do
        v18 = (__int128 *)((char *)v18 + 40);
      while (((*a3)() & 1) != 0);
      do
        v17 = (__int128 *)((char *)v17 - 40);
      while (!(*a3)());
      v12 = v18;
    }
    while (v18 < v17);
  }
  if ((__int128 *)((char *)v12 - 40) != (__int128 *)a1)
  {
    *(_OWORD *)a1 = *(__int128 *)((char *)v12 - 40);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v12 - 6);
    v6 = *(v12 - 1);
    *(_OWORD *)(a1 + 24) = v6;
  }
  if ((__int128 *)((char *)v12 - 40) != &v14)
  {
    *(__int128 *)((char *)v12 - 40) = v14;
    *((_DWORD *)v12 - 6) = v15;
    *(_QWORD *)&v6 = v16;
    *(v12 - 1) = v16;
  }
  return *(double *)&v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(__int128 *, __int128 *);
  __int128 *v9;
  __int128 *v10;
  int v11;
  __int128 *v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;

  v16 = a2;
  v17 = a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v16 = (__int128 *)((char *)a2 - 40);
      if (((unsigned int (*)(void))v8)())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), (__int128 *)((char *)a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), a1 + 5, (__int128 *)((char *)a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), a1 + 5, (__int128 *)((char *)a1 + 120), (__int128 *)((char *)a2 - 40), a3);
      return 1;
    default:
      v9 = a1 + 5;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), a1 + 5, a3);
      v10 = (__int128 *)((char *)a1 + 120);
      if (v10 == a2)
        return 1;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      v13 = *v10;
      v14 = *((_DWORD *)v10 + 4);
      v15 = *(__int128 *)((char *)v10 + 24);
      do
      {
        v12 = v9;
        *(__int128 *)((char *)v9 + 40) = *v9;
        *((_DWORD *)v9 + 14) = *((_DWORD *)v9 + 4);
        v9[4] = *(__int128 *)((char *)v9 + 24);
        if (v9 == v17)
          break;
        v9 = (__int128 *)((char *)v9 - 40);
      }
      while (((*a3)(&v13, (__int128 *)((char *)v12 - 40)) & 1) != 0);
      if (v12 != &v13)
      {
        *v12 = v13;
        *((_DWORD *)v12 + 4) = v14;
        *(__int128 *)((char *)v12 + 24) = v15;
      }
      if (++v11 == 8)
        break;
    }
    v9 = v10;
    v10 = (__int128 *)((char *)v10 + 40);
    if (v10 == v16)
      return 1;
  }
  return (__int128 *)((char *)v10 + 40) == v16;
}

__int128 **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __int128 **result;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a5);
  result = (__int128 **)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    result = (__int128 **)(*a5)(v12, a2);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
      result = (__int128 **)(*a5)(v13, a1);
      if ((_DWORD)result)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
    }
  }
  return result;
}

__int128 **std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __int128 **result;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;

  v16 = a2;
  v17 = a1;
  v14 = a4;
  v15 = a3;
  v13 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a4, a6);
  result = (__int128 **)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
    result = (__int128 **)(*a6)(v14, a3);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v15, &v14);
      result = (__int128 **)(*a6)(v15, a2);
      if ((_DWORD)result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v16, &v15);
        result = (__int128 **)(*a6)(v16, a1);
        if ((_DWORD)result)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v25;
  __int128 *v26;

  v26 = a1;
  if (a1 != a2)
  {
    v8 = a1;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 40;
    if ((char *)a2 - (char *)a1 >= 41)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)((char *)a1 + 40 * v11);
      do
      {
        a5.n128_f64[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 40);
        --v12;
      }
      while (v12);
    }
    v25 = a2;
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      v14 = a2;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a4)(v14, v26, a5))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v25, &v26);
          a5.n128_f64[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v26, a4, v10, v26);
        }
        v14 = (__int128 *)((char *)v25 + 40);
        v25 = v14;
      }
      while (v14 != a3);
      v8 = v26;
      v9 = (char *)a2 - (char *)v26;
    }
    if (v9 >= 41)
    {
      v15 = v9 / 0x28uLL;
      v16 = (char *)a2 - 40;
      do
      {
        v18 = *(_QWORD *)v8;
        v17 = *((_QWORD *)v8 + 1);
        v19 = *((_DWORD *)v8 + 4);
        v21 = *((_QWORD *)v8 + 3);
        v20 = *((_QWORD *)v8 + 4);
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v15);
        if (v16 == (char *)v22)
        {
          *(_QWORD *)v22 = v18;
          *(_QWORD *)(v22 + 8) = v17;
          *(_DWORD *)(v22 + 16) = v19;
          *(_QWORD *)(v22 + 24) = v21;
          *(_QWORD *)(v22 + 32) = v20;
        }
        else
        {
          *(_OWORD *)v22 = *(_OWORD *)v16;
          *(_DWORD *)(v22 + 16) = *((_DWORD *)v16 + 4);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v16 + 24);
          *(_QWORD *)v16 = v18;
          *((_QWORD *)v16 + 1) = v17;
          *((_DWORD *)v16 + 4) = v19;
          *((_QWORD *)v16 + 3) = v21;
          *((_QWORD *)v16 + 4) = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, v22 + 40, (uint64_t (**)(uint64_t, __int128 *))a4, 0xCCCCCCCCCCCCCCCDLL * ((v22 + 40 - (uint64_t)v8) >> 3));
        }
        v16 -= 40;
      }
      while (v15-- > 2);
      return v25;
    }
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  int64_t v9;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v23 = v4;
    v24 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 40 * v12;
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, v13 + 40))
      {
        v13 += 40;
        v12 = v14;
      }
      if ((((uint64_t (*)(int64_t, __int128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = *((_DWORD *)v7 + 4);
        v15 = *(__int128 *)((char *)v7 + 24);
        v22 = v15;
        do
        {
          v16 = (__int128 *)v13;
          if (v7 != (__int128 *)v13)
          {
            *v7 = *(_OWORD *)v13;
            *((_DWORD *)v7 + 4) = *(_DWORD *)(v13 + 16);
            v15 = *(_OWORD *)(v13 + 24);
            *(__int128 *)((char *)v7 + 24) = v15;
          }
          if (v9 < v12)
            break;
          v17 = (2 * v12) | 1;
          v13 = a1 + 40 * v17;
          v18 = 2 * v12 + 2;
          if (v18 < a3 && (*a2)(a1 + 40 * v17, v13 + 40))
          {
            v13 += 40;
            v17 = v18;
          }
          v7 = v16;
          v12 = v17;
        }
        while (!(*a2)(v13, (uint64_t)&v20));
        if (v16 != &v20)
        {
          *v16 = v20;
          *((_DWORD *)v16 + 4) = v21;
          *(_QWORD *)&v15 = v22;
          *(__int128 *)((char *)v16 + 24) = v22;
        }
      }
    }
  }
  return *(double *)&v15;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 40))
    {
      v9 += 40;
      v6 = v11;
    }
    if (a1 != v9)
    {
      *(_OWORD *)a1 = *(_OWORD *)v9;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v9 + 24);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v19 = v4;
    v20 = v5;
    v10 = v6 >> 1;
    v11 = a1 + 40 * (v6 >> 1);
    v12 = a2 - 40;
    if ((*a3)(v11, (__int128 *)(a2 - 40)))
    {
      v16 = *(_OWORD *)(a2 - 40);
      v17 = *(_DWORD *)(a2 - 24);
      v13 = *(_OWORD *)(a2 - 16);
      v18 = v13;
      do
      {
        v14 = v11;
        if (v12 != v11)
        {
          *(_OWORD *)v12 = *(_OWORD *)v11;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
          v13 = *(_OWORD *)(v11 + 24);
          *(_OWORD *)(v12 + 24) = v13;
        }
        if (!v10)
          break;
        v10 = (v10 - 1) >> 1;
        v11 = a1 + 40 * v10;
        v12 = v14;
      }
      while (((*a3)(v11, &v16) & 1) != 0);
      if ((__int128 *)v14 != &v16)
      {
        *(_OWORD *)v14 = v16;
        *(_DWORD *)(v14 + 16) = v17;
        *(_QWORD *)&v13 = v18;
        *(_OWORD *)(v14 + 24) = v18;
      }
    }
  }
  return *(double *)&v13;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 16);
        *(_OWORD *)(a3 + 24) = *(_OWORD *)(result + 24);
      }
      result += 40;
      a3 += 40;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::set<unsigned long>::set[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(&v13);
  return v11;
}

void sub_2411A3324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 24;
      std::set<unsigned long>::set[abi:ne180100]((uint64_t *)(v7 - 24), v9);
      v7 = *((_QWORD *)&v15 + 1) - 24;
      *((_QWORD *)&v15 + 1) -= 24;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2411A3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<EQKit::StemStretch::FeatureCluster>,std::reverse_iterator<EQKit::StemStretch::FeatureCluster*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(void **a1)
{
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<EQKit::StemStretch::FeatureCluster>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_2411A3588(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<unsigned long>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void EQKit::StemStretch::FeatureRange::collapse()
{
  __assert_rtn("collapse", "EQKitStemStretch.mm", 427, "cur->max() == next->min()");
}

uint64_t EQKit::OpticalKern::Glyph::Key::Key(uint64_t a1, uint64_t a2)
{
  const void *v4;

  v4 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void EQKit::OpticalKern::Glyph::Key::~Key(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t EQKit::OpticalKern::Glyph::Key::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  }
  return a1;
}

BOOL EQKit::OpticalKern::Glyph::Key::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  if (*(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
  {
    return 0;
  }
  v2 = *(const __CFString **)a1;
  v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3)
    return 1;
  result = 0;
  if (v2)
  {
    if (v3)
      return CFStringCompare(v2, v3, 0) == kCFCompareEqualTo;
  }
  return result;
}

EQKit::OpticalKern::Edge::Path *EQKit::OpticalKern::Edge::Path::Path(EQKit::OpticalKern::Edge::Path *this, const EQKit::OpticalKern::Glyph::Key *a2, const EQKitPath::QuantizationConfig *a3, const Config *a4)
{
  const __CTFont *v7;
  const CGPath *v8;
  unint64_t **v10[2];
  CGAffineTransform matrix;

  *(_DWORD *)this = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 1) = 4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = CTFontCreateWithName(*(CFStringRef *)a2, *((CGFloat *)a2 + 2), 0);
  memset(&matrix, 0, sizeof(matrix));
  CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
  if (v7)
    v8 = CTFontCreatePathForGlyph(v7, *((_WORD *)a2 + 4), &matrix);
  else
    v8 = 0;
  v10[0] = 0;
  v10[1] = 0;
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)this, v8, (__int128 *)a3, v10);
  CGPathRelease(v8);
  if (v7)
    CFRelease(v7);
  return this;
}

void sub_2411A3B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Edge::Path::analyze(unsigned int *a1, const CGPath *a2, __int128 *a3, unint64_t ***a4)
{
  uint64_t *v5;
  int v8;
  CGFloat *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  __int128 v24;
  unint64_t **v25;
  unint64_t *i;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  double v34;
  double v35;
  _BOOL4 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  CGFloat v40[4];
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[72];
  CGRect v44;
  CGRect v45;

  *((_QWORD *)a1 + 2) = 0;
  v5 = (uint64_t *)(a1 + 4);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 7) = 0x7FF8000000000000;
  if (a2)
  {
    v8 = *a1;
    EQKitPath::EQKitPath((EQKitPath *)v40, a2);
    if (v43[32])
      v9 = (CGFloat *)v43;
    else
      v9 = EQKitPath::computePathBounds(v40);
    v11 = *v9;
    v10 = v9[1];
    v13 = v9[2];
    v12 = v9[3];
    v14 = *(_QWORD *)v9;
    v15 = v10;
    v16 = v13;
    v17 = v12;
    if ((v8 | 2) == 2)
    {
      v18 = CGRectGetMinY(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((_QWORD *)a1 + 2) = vcvtms_s32_f32(v18);
      v44.origin.x = v11;
      v44.origin.y = v10;
      v44.size.width = v13;
      v44.size.height = v12;
      v19 = CGRectGetMaxY(v44) * (double)*((unint64_t *)a1 + 1);
      v20 = ceilf(v19);
    }
    else
    {
      v21 = CGRectGetMinX(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((_QWORD *)a1 + 2) = vcvtms_s32_f32(v21);
      v45.origin.x = v11;
      v45.origin.y = v10;
      v45.size.width = v13;
      v45.size.height = v12;
      v22 = CGRectGetMaxX(v45) * (double)*((unint64_t *)a1 + 1);
      v20 = floorf(v22);
    }
    *((_QWORD *)a1 + 3) = (uint64_t)v20;
    v23 = (uint64_t)v20 - *((_QWORD *)a1 + 2) + 1;
    v37 = 0x7FF8000000000000;
    std::vector<double>::resize((uint64_t)(a1 + 8), v23, &v37);
    v37 = *v5;
    v24 = a3[1];
    v38 = *a3;
    v39 = v24;
    v25 = *a4;
    if (*a4)
    {
      for (i = *v25; i != v25[1]; ++i)
      {
        EQKitPath::quantizeElementEdge((EQKitPath *)v40, *i, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        v25 = *a4;
      }
    }
    else
    {
      EQKitPath::extractPath((EQKitPath *)v40);
      if (v42 != v41)
      {
        v27 = 0;
        if ((unint64_t)((v42 - v41) >> 4) <= 1)
          v28 = 1;
        else
          v28 = (v42 - v41) >> 4;
        do
          EQKitPath::quantizeElementEdge((EQKitPath *)v40, v27++, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        while (v28 != v27);
      }
    }
    v29 = (double *)*((_QWORD *)a1 + 4);
    v30 = *((_QWORD *)a1 + 5) - (_QWORD)v29;
    if (v30)
    {
      v31 = v30 >> 3;
      v32 = *a1 & 0xFFFFFFFE;
      if (v31 <= 1)
        v31 = 1;
      v33 = 1;
      do
      {
        v34 = *v29;
        if ((v33 & 1) == 0)
        {
          v35 = *((double *)a1 + 7);
          v36 = v34 < v35;
          if (v32 == 2)
            v36 = v35 < v34;
          if (!v36)
            v34 = *((double *)a1 + 7);
        }
        v33 = 0;
        *((double *)a1 + 7) = v34;
        ++v29;
        --v31;
      }
      while (v31);
    }
    EQKitPath::~EQKitPath((EQKitPath *)v40);
  }
  else
  {
    v40[0] = NAN;
    std::vector<double>::resize((uint64_t)(a1 + 8), 1uLL, v40);
  }
}

void sub_2411A3E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Edge::Path::Path(uint64_t a1, int a2, const CGPath *a3, __int128 *a4, unint64_t ***a5)
{
  unint64_t **v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t **v12[2];

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a5[1];
  v12[0] = *a5;
  v12[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)a1, a3, a4, v12);
  if (v6)
  {
    v9 = (unint64_t *)(v6 + 1);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(unint64_t **))(*v6)[2])(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  return a1;
}

void sub_2411A3F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

unint64_t EQKit::OpticalKern::Edge::Segment::closestBucketIndex(EQKit::OpticalKern::Edge::Segment *this, double a2)
{
  double v3;
  float v4;
  unint64_t v5;

  v3 = a2 - (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 24))(this);
  v4 = v3 / (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 56))(this);
  v5 = vcvtms_s32_f32(v4);
  if ((v5 & 0x8000000000000000) != 0)
    return 0;
  if ((*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 48))(this) <= v5)
    return (*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 48))(this) - 1;
  return v5;
}

uint64_t EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(_DWORD *a1, _DWORD *a2, double *a3, _OWORD *a4, void **a5, double a6)
{
  char v6;
  double v14;
  double v15;
  double v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  __int128 v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  double v49;
  double v50;
  BOOL v51;
  double v52;
  double v53;
  double v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  double v60;
  unint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  unint64_t v73;
  double v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  unint64_t v87;
  double v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  double v93;
  BOOL v94;
  uint64_t v96;
  _OWORD *v97;
  double *v98;
  void **v99;
  char v100;
  unint64_t v101;
  unsigned int v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  double v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[2];
  __int128 v112;
  double v113;
  __int128 v114;
  double v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  double v119;
  __int128 v120;
  double v121;

  v6 = 0;
  if ((a1[2] & 0xFFFFFFFE) == 2 && a6 >= 0.0 && (a2[2] & 0xFFFFFFFE) != 2)
  {
    v14 = (*(double (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
    if (v14 - (*(double (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1) >= a6
      || (v15 = (*(double (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1) + a6,
          v15 <= (*(double (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2))
      || (v16 = (*(double (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2) + a6,
          v16 <= (*(double (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1)))
    {
      v6 = 0;
    }
    else
    {
      v17 = a1[2];
      v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
      v19 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 48))(a2);
      v20 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 88))(a1, 0);
      v21 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
      v6 = 0;
      if (v20 < v18)
      {
        v22 = v21;
        v104 = v19;
        if (v21 < v19)
        {
          v98 = a3;
          v97 = a4;
          v23 = v17 & 0xFFFFFFFD;
          v24 = a6 * a6;
          *(_QWORD *)&v120 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v20);
          *((_QWORD *)&v120 + 1) = v25;
          v121 = v26;
          v100 = 0;
          *(_QWORD *)&v118 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v22);
          *((_QWORD *)&v118 + 1) = v27;
          v119 = v28;
          v96 = (uint64_t)(a5 + 2);
          v29 = 1.79769313e308;
          v30 = v20;
          v31 = v22;
          v102 = v23;
          v99 = a5;
          do
          {
            v116 = *MEMORY[0x24BDBEFB0];
            v117 = v116;
            v32 = _determineBucketDistance((double *)&v120, (double *)&v118, v23 == 0, (double *)&v116);
            if (v32 < v24)
            {
              if (v32 < v29)
              {
                v33 = v117;
                *v97 = v116;
                v97[1] = v33;
                v29 = v32;
              }
              if (a5)
              {
                v34 = a5[1];
                v35 = (unint64_t)a5[2];
                if ((unint64_t)v34 >= v35)
                {
                  v38 = ((char *)v34 - (_BYTE *)*a5) >> 5;
                  v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 59)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  v40 = v35 - (_QWORD)*a5;
                  if (v40 >> 4 > v39)
                    v39 = v40 >> 4;
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
                    v41 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v41 = v39;
                  if (v41)
                    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v96, v41);
                  else
                    v42 = 0;
                  v43 = &v42[32 * v38];
                  v44 = v117;
                  *(_OWORD *)v43 = v116;
                  *((_OWORD *)v43 + 1) = v44;
                  v46 = (char *)*a5;
                  v45 = (char *)a5[1];
                  v47 = v43;
                  if (v45 != *a5)
                  {
                    do
                    {
                      v48 = *((_OWORD *)v45 - 1);
                      *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
                      *((_OWORD *)v47 - 1) = v48;
                      v47 -= 32;
                      v45 -= 32;
                    }
                    while (v45 != v46);
                    v45 = (char *)*a5;
                  }
                  v37 = v43 + 32;
                  *a5 = v47;
                  a5[1] = v43 + 32;
                  a5[2] = &v42[32 * v41];
                  if (v45)
                    operator delete(v45);
                }
                else
                {
                  v36 = v117;
                  *v34 = v116;
                  v34[1] = v36;
                  v37 = v34 + 2;
                }
                a5[1] = v37;
                v23 = v102;
              }
              if (*(double *)&v118 < *(double *)&v120)
              {
                v49 = v119;
                v50 = *((double *)&v120 + 1);
                v51 = v121 > *((double *)&v118 + 1) && v119 > *((double *)&v120 + 1);
                if (!v51)
                {
                  if (v121 >= *((double *)&v118 + 1))
                  {
                    if (v23)
                    {
                      v52 = v119;
                      v49 = *(double *)&v118;
                      v53 = *((double *)&v120 + 1);
                      v50 = *(double *)&v120;
                    }
                    else
                    {
                      v52 = *(double *)&v118;
                      v53 = *(double *)&v120;
                    }
                  }
                  else
                  {
                    if (v23)
                      v52 = *((double *)&v118 + 1);
                    else
                      v52 = *(double *)&v118;
                    if (v23)
                      v49 = *(double *)&v118;
                    else
                      v49 = *((double *)&v118 + 1);
                    if (v23)
                      v53 = v121;
                    else
                      v53 = *(double *)&v120;
                    if (v23)
                      v50 = *(double *)&v120;
                    else
                      v50 = v121;
                  }
                  *(double *)&v116 = v53;
                  *((double *)&v116 + 1) = v50;
                  *(double *)&v117 = v52;
                  *((double *)&v117 + 1) = v49;
                }
              }
              v54 = (*(double *)&v117 - *(double *)&v116) * (*(double *)&v117 - *(double *)&v116);
              if (!v23)
                v54 = (*((double *)&v117 + 1) - *((double *)&v116 + 1))
                    * (*((double *)&v117 + 1) - *((double *)&v116 + 1));
              v55 = *(double *)&v120 + sqrt(v24 - v54) - *(double *)&v118;
              if (*v98 >= v55)
                v55 = *v98;
              *v98 = v55;
              v100 = 1;
            }
            v56 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 88))(a1, v20 + 1);
            v103 = v31;
            v57 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 88))(a2, v31 + 1);
            v31 = v57;
            if (v56 >= v18 || v57 >= v104)
            {
              if (v56 < v18)
              {
                *(_QWORD *)&v120 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v56);
                *((_QWORD *)&v120 + 1) = v80;
                v121 = v81;
                v31 = v103;
              }
              else
              {
                if (v57 >= v104)
                  break;
                *(_QWORD *)&v118 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v57);
                *((_QWORD *)&v118 + 1) = v59;
                v119 = v60;
                v56 = v20;
              }
              v61 = v104;
            }
            else
            {
              v101 = v20;
              v51 = v30 > v20;
              v61 = v104;
              if (!v51)
              {
                v62 = *(double *)&v120;
                v30 = v56;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 72))(a1, v30) > v62)
                    break;
                  v30 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 88))(a1, v30 + 1);
                }
                while (v30 < v18);
              }
              if (v22 <= v103)
              {
                v63 = *(double *)&v118;
                v22 = v31;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 72))(a2, v22) < v63)
                    break;
                  v22 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 88))(a2, v22 + 1);
                }
                while (v22 < v104);
              }
              *(_QWORD *)&v114 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v56);
              *((_QWORD *)&v114 + 1) = v64;
              v115 = v65;
              *(_QWORD *)&v112 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v31);
              *((_QWORD *)&v112 + 1) = v66;
              v113 = v67;
              v68 = _determineBucketDistance((double *)&v120, (double *)&v112, v23 == 0, (double *)v111);
              if (v22 >= v104)
              {
                v77 = v22;
              }
              else
              {
                *(_QWORD *)&v105 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v22);
                *((_QWORD *)&v105 + 1) = v69;
                *(_QWORD *)&v106 = v70;
                v109 = *MEMORY[0x24BDBEFB0];
                v110 = v109;
                v71 = _determineBucketDistance((double *)&v120, (double *)&v105, v23 == 0, (double *)&v109);
                if (v71 >= v68)
                {
                  v72 = v68;
                  v77 = v22;
                }
                else
                {
                  v72 = v71;
                  if (v30 >= v18)
                    v73 = v101;
                  else
                    v73 = v30;
                  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v73);
                  v75 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 80))(a2, v74);
                  if (v31 <= v75)
                    v76 = v75;
                  else
                    v76 = v31;
                  v77 = v22;
                  if (v76 < v22)
                  {
                    *(_QWORD *)&v105 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v76);
                    *((_QWORD *)&v105 + 1) = v78;
                    *(_QWORD *)&v106 = v79;
                    v72 = _determineBucketDistance((double *)&v120, (double *)&v105, v102 == 0, (double *)&v109);
                    v77 = v76;
                  }
                  if (v72 >= v68)
                  {
                    v72 = v68;
                  }
                  else
                  {
                    v113 = *(double *)&v106;
                    v111[0] = v109;
                    v111[1] = v110;
                    v112 = v105;
                    v31 = v77;
                  }
                }
                v68 = v72;
              }
              v23 = v102;
              v82 = _determineBucketDistance((double *)&v114, (double *)&v118, v102 == 0, (double *)&v109);
              if (v30 >= v18)
              {
                a5 = v99;
              }
              else
              {
                *(_QWORD *)&v107 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v30);
                *((_QWORD *)&v107 + 1) = v83;
                v108 = v84;
                v105 = *MEMORY[0x24BDBEFB0];
                v106 = v105;
                v85 = _determineBucketDistance((double *)&v107, (double *)&v118, v102 == 0, (double *)&v105);
                if (v85 >= v82)
                {
                  a5 = v99;
                  v23 = v102;
                }
                else
                {
                  v86 = v85;
                  if (v77 >= v104)
                    v87 = v103;
                  else
                    v87 = v77;
                  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v87);
                  v89 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a1 + 80))(a1, v88);
                  if (v56 <= v89)
                    v90 = v89;
                  else
                    v90 = v56;
                  v91 = v30;
                  v23 = v102;
                  if (v90 < v30)
                  {
                    *(_QWORD *)&v107 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v90);
                    *((_QWORD *)&v107 + 1) = v92;
                    v108 = v93;
                    v86 = _determineBucketDistance((double *)&v107, (double *)&v118, v102 == 0, (double *)&v105);
                    v91 = v90;
                  }
                  a5 = v99;
                  if (v86 < v82)
                  {
                    v114 = v107;
                    v115 = v108;
                    v109 = v105;
                    v110 = v106;
                    v56 = v91;
                    v82 = v86;
                  }
                }
              }
              if (v68 <= v82)
              {
                v118 = v112;
                v119 = v113;
                v56 = v101;
              }
              else
              {
                v120 = v114;
                v121 = v115;
                v31 = v103;
              }
            }
            v94 = v56 >= v18 || v31 >= v61;
            v20 = v56;
          }
          while (!v94);
          v6 = v100;
        }
      }
    }
  }
  return v6 & 1;
}

void EQKit::OpticalKern::Edge::PathSegment::minOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((_QWORD *)this + 6))
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(_QWORD *)this + 56))(this);
}

void EQKit::OpticalKern::Edge::PathSegment::maxOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((_QWORD *)this + 6))
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(_QWORD *)this + 56))(this);
}

double EQKit::OpticalKern::Edge::PathSegment::closestOffset(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *((double *)this + 5) + *(double *)(v1 + 56) * *((double *)this + 8);
  else
    return 0.0;
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::bucketCount(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(_QWORD *)(v1 + 24) - *(_QWORD *)(v1 + 16) + 1;
  else
    return 1;
}

double EQKit::OpticalKern::Edge::PathSegment::bucketLength(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *((double *)this + 8) * (1.0 / (double)*(unint64_t *)(v1 + 8));
  else
    return 1.0;
}

double EQKit::OpticalKern::Edge::PathSegment::bucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    return *((double *)this + 5) + *(double *)(*(_QWORD *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  else
    return 0.0;
}

double EQKit::OpticalKern::Edge::PathSegment::offset(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    return *((double *)this + 5) + *(double *)(*(_QWORD *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  else
    return 0.0;
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::nextValidBucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  if (!*((_QWORD *)this + 6))
    return 0x7FFFFFFFFFFFFFFFLL;
  return a2;
}

void EQKit::OpticalKern::Edge::PathSegment::appendToCGPath(EQKit::OpticalKern::Edge::PathSegment *this, CGPath *a2)
{
  int *v2;
  int v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  CGPath *v23;
  double v24;
  double v25;
  CGPath *v26;
  double v27;
  BOOL v28;
  CGAffineTransform v29;

  v2 = (int *)*((_QWORD *)this + 6);
  if (v2)
  {
    v5 = *v2;
    v6 = *((_QWORD *)v2 + 1);
    v7 = *((double *)this + 8);
    memset(&v29, 0, sizeof(v29));
    CGAffineTransformMakeTranslation(&v29, *((CGFloat *)this + 2), *((CGFloat *)this + 3));
    v8 = *((_QWORD *)v2 + 2);
    if (v8 <= *((_QWORD *)v2 + 3))
    {
      v9 = 0;
      v10 = v7 * (1.0 / (double)v6);
      v11 = 0.0;
      do
      {
        v12 = *((_QWORD *)v2 + 2);
        v13 = __OFSUB__(v8, v12);
        v14 = v8 - v12;
        if (v14 < 0 != v13 || (v15 = *((_QWORD *)v2 + 4), v14 >= (unint64_t)((*((_QWORD *)v2 + 5) - v15) >> 3)))
        {
          v16 = 1.79769313e308;
          if ((*v2 & 0xFFFFFFFE) == 2)
            v16 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(v15 + 8 * v14);
        }
        v17 = v16 * *((double *)this + 8);
        if ((v9 & 1) == 0)
        {
          v20 = (double)v8;
          if ((v5 | 2) == 2)
          {
            CGPathMoveToPoint(a2, &v29, v17, v10 * v20);
            v21 = v8 + 1;
            v22 = v10 * (double)(v8 + 1);
            v23 = a2;
            v24 = v17;
          }
          else
          {
            CGPathMoveToPoint(a2, &v29, v10 * v20, v17);
            v21 = v8 + 1;
            v24 = v10 * (double)(v8 + 1);
            v23 = a2;
            v22 = v17;
          }
          CGPathAddLineToPoint(v23, &v29, v24, v22);
          v9 = 1;
          v11 = v17;
          goto LABEL_22;
        }
        v18 = v5 | 2;
        if (v17 == v11)
        {
          if (v18 != 2)
            goto LABEL_20;
        }
        else
        {
          v19 = (double)v8;
          if (v18 != 2)
          {
            CGPathAddLineToPoint(a2, &v29, v10 * v19, v17);
LABEL_20:
            v21 = v8 + 1;
            v27 = v10 * (double)(v8 + 1);
            v26 = a2;
            v25 = v17;
            goto LABEL_21;
          }
          CGPathAddLineToPoint(a2, &v29, v17, v10 * v19);
        }
        v21 = v8 + 1;
        v25 = v10 * (double)(v8 + 1);
        v26 = a2;
        v27 = v17;
LABEL_21:
        CGPathAddLineToPoint(v26, &v29, v27, v25);
        v9 = 1;
LABEL_22:
        v2 = (int *)*((_QWORD *)this + 6);
        v28 = v8 < *((_QWORD *)v2 + 3);
        v8 = v21;
      }
      while (v28);
    }
  }
}

double EQKit::OpticalKern::Edge::ParallelSegment::minOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4);
}

double EQKit::OpticalKern::Edge::ParallelSegment::maxOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4) + *((double *)this + 6);
}

double EQKit::OpticalKern::Edge::ParallelSegment::closestOffset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::bucketCount(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return 1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucketLength(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double result;

  result = *((double *)this + 6);
  if (result <= 0.0)
    return 1.0;
  return result;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucket(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double v1;

  v1 = *((double *)this + 5);
  (*(void (**)(EQKit::OpticalKern::Edge::ParallelSegment *))(*(_QWORD *)this + 56))(this);
  return v1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::offset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::nextValidBucket(EQKit::OpticalKern::Edge::ParallelSegment *this, uint64_t a2)
{
  return a2;
}

void EQKit::OpticalKern::Edge::ParallelSegment::appendToCGPath(CGFloat *this, CGMutablePathRef path)
{
  double v4;
  double v5;

  if (path)
  {
    if ((*((_DWORD *)this + 2) | 2) == 2)
    {
      CGPathMoveToPoint(path, 0, this[5], this[4]);
      v4 = this[5];
      v5 = this[4] + this[6];
    }
    else
    {
      CGPathMoveToPoint(path, 0, this[4], this[5]);
      v5 = this[5];
      v4 = this[4] + this[6];
    }
    CGPathAddLineToPoint(path, 0, v4, v5);
  }
}

uint64_t EQKit::OpticalKern::Edge::Composite::Composite(uint64_t a1, int **a2, __int128 *a3, uint64_t **a4)
{
  uint64_t v4;
  int v5;
  char **v6;
  int *v7;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  CGFloat b;
  unint64_t *v20;
  unint64_t v21;
  const CGPath *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  CGFloat a;
  CGFloat v35;
  unint64_t *v36;
  unint64_t v37;
  double v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  const __CTFont *v47;
  __int128 v48;
  const __CTFont *CopyWithAttributes;
  uint64_t **v50;
  __int128 *v51;
  const CGPath *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  unint64_t *v65;
  unint64_t v66;
  double Size;
  double v68;
  double v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  CGFloat v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  __int128 *v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  char **v84;
  __int128 v85;
  unint64_t **v86;
  std::__shared_weak_count *v87;
  CGAffineTransform matrix;
  __int128 v89;
  CGFloat v90;
  CGFloat v91;
  uint64_t (*v92[3])(uint64_t *, uint64_t *);
  unint64_t **v93;
  std::__shared_weak_count *v94;

  v4 = a1;
  v5 = *((_DWORD *)a2 + 6);
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (char **)(a1 + 8);
  *(_DWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *a2;
  v84 = (char **)(a1 + 8);
  if (*a2 != a2[1])
  {
    v11 = *((_DWORD *)a2 + 6);
    v12 = v11 & 0xFFFFFFFD;
    while (1)
    {
      v13 = *v7;
      if (*v7 == 1)
        break;
      if (v13 != 2)
      {
        if (v13 != 3)
          goto LABEL_89;
        v14 = operator new();
        v15 = *((double *)v7 + 1);
        v16 = *((double *)v7 + 2);
        v17 = *((_QWORD *)v7 + 6);
        *(_DWORD *)(v14 + 8) = v11;
        *(double *)(v14 + 16) = v15;
        *(double *)(v14 + 24) = v16;
        if (v12)
          v18 = v16;
        else
          v18 = v15;
        if (!v12)
          v15 = v16;
        *(double *)(v14 + 32) = v15;
        *(double *)(v14 + 40) = v18;
        *(_QWORD *)v14 = &off_25112A478;
        *(_QWORD *)(v14 + 48) = v17;
        std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(&matrix, v14);
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::push_back[abi:ne180100](v6, (__int128 *)&matrix);
        b = matrix.b;
        if (!*(_QWORD *)&matrix.b)
          goto LABEL_89;
        v20 = (unint64_t *)(*(_QWORD *)&matrix.b + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        goto LABEL_87;
      }
      *(_OWORD *)v92 = 0uLL;
      v47 = (const __CTFont *)*((_QWORD *)v7 + 4);
      if (a4 && v47)
      {
        LOWORD(matrix.b) = *((_WORD *)v7 + 20);
        matrix.c = 12.0;
        LODWORD(matrix.d) = v11;
        *(_QWORD *)&matrix.a = CTFontCopyPostScriptName(v47);
        EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(a4, (uint64_t)&matrix, &v89);
        v48 = v89;
        v89 = 0uLL;
        *(_OWORD *)v92 = v48;
        EQKit::OpticalKern::Glyph::Key::~Key((const void **)&matrix);
        goto LABEL_62;
      }
      if (v47)
      {
        CopyWithAttributes = CTFontCreateCopyWithAttributes(*((CTFontRef *)v7 + 4), 12.0, 0, 0);
        if (CopyWithAttributes)
        {
          v50 = a4;
          v51 = a3;
          memset(&matrix, 0, sizeof(matrix));
          CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
          v52 = CTFontCreatePathForGlyph(CopyWithAttributes, *((_WORD *)v7 + 20), &matrix);
          v53 = operator new();
          v54 = v53;
          v55 = (std::__shared_weak_count *)*((_QWORD *)v7 + 8);
          v86 = (unint64_t **)*((_QWORD *)v7 + 7);
          v87 = v55;
          if (v55)
          {
            p_shared_owners = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(p_shared_owners);
            while (__stxr(v57 + 1, p_shared_owners));
          }
          EQKit::OpticalKern::Edge::Path::Path(v53, v11, v52, v51, &v86);
          std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(&v89, v54);
          v58 = v89;
          v89 = 0uLL;
          *(_OWORD *)v92 = v58;
          v59 = v87;
          if (v87)
          {
            v60 = (unint64_t *)&v87->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          CGPathRelease(v52);
          CFRelease(CopyWithAttributes);
          a3 = v51;
          a4 = v50;
        }
LABEL_62:
        v62 = operator new();
        v63 = *((double *)v7 + 1);
        v64 = *((double *)v7 + 2);
        v85 = *(_OWORD *)v92;
        v6 = v84;
        if (v92[1])
        {
          v65 = (unint64_t *)((char *)v92[1] + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        Size = CTFontGetSize(v47);
        *(_DWORD *)(v62 + 8) = v11;
        *(double *)(v62 + 16) = v63;
        *(double *)(v62 + 24) = v64;
        if (v12)
          v68 = v64;
        else
          v68 = v63;
        if (v12)
          v69 = v63;
        else
          v69 = v64;
        *(double *)(v62 + 32) = v69;
        *(double *)(v62 + 40) = v68;
        *(_QWORD *)v62 = &off_25112A3F0;
        *(_OWORD *)(v62 + 48) = v85;
        if (*((_QWORD *)&v85 + 1))
        {
          v70 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        *(double *)(v62 + 64) = Size / 12.0;
        std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::PathSegment,void>(&matrix, v62);
        if (*((_QWORD *)&v85 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
          }
        }
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::push_back[abi:ne180100](v84, (__int128 *)&matrix);
        v74 = matrix.b;
        if (*(_QWORD *)&matrix.b)
        {
          v75 = (unint64_t *)(*(_QWORD *)&matrix.b + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&v74 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v74));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v74);
          }
        }
        b = *(double *)&v92[1];
        if (!v92[1])
          goto LABEL_89;
        v77 = (unint64_t *)((char *)v92[1] + 8);
        do
          v21 = __ldaxr(v77);
        while (__stlxr(v21 - 1, v77));
LABEL_87:
        if (!v21)
        {
          (*(void (**)(CGFloat))(**(_QWORD **)&b + 16))(COERCE_CGFLOAT(*(_QWORD *)&b));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&b);
        }
      }
LABEL_89:
      v7 += 18;
      if (v7 == a2[1])
      {
        v4 = a1;
        v78 = *(__int128 **)(a1 + 8);
        v79 = *(uint64_t **)(a1 + 16);
        goto LABEL_92;
      }
    }
    v22 = EQKit::OpticalKern::Spec::Entry::copyPath((CFTypeRef *)v7);
    v23 = operator new();
    v24 = v23;
    v25 = (std::__shared_weak_count *)*((_QWORD *)v7 + 8);
    v93 = (unint64_t **)*((_QWORD *)v7 + 7);
    v94 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    EQKit::OpticalKern::Edge::Path::Path(v23, v11, v22, a3, &v93);
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(&matrix, v24);
    v28 = v94;
    if (v94)
    {
      v29 = (unint64_t *)&v94->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    CGPathRelease(v22);
    v31 = operator new();
    v32 = *((double *)v7 + 1);
    v33 = *((double *)v7 + 2);
    a = matrix.a;
    v35 = matrix.b;
    v90 = matrix.a;
    v91 = matrix.b;
    if (*(_QWORD *)&matrix.b)
    {
      v36 = (unint64_t *)(*(_QWORD *)&matrix.b + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    *(_DWORD *)(v31 + 8) = v11;
    *(double *)(v31 + 16) = v32;
    *(double *)(v31 + 24) = v33;
    if (v12)
      v38 = v33;
    else
      v38 = v32;
    if (!v12)
      v32 = v33;
    *(double *)(v31 + 32) = v32;
    *(double *)(v31 + 40) = v38;
    *(_QWORD *)v31 = &off_25112A3F0;
    *(CGFloat *)(v31 + 48) = a;
    *(CGFloat *)(v31 + 56) = v35;
    if (v35 != 0.0)
    {
      v39 = (unint64_t *)(*(_QWORD *)&v35 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    *(_QWORD *)(v31 + 64) = 0x3FF0000000000000;
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::PathSegment,void>(v92, v31);
    if (v35 != 0.0)
    {
      v41 = (unint64_t *)(*(_QWORD *)&v35 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&v35 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v35));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v35);
      }
    }
    std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::push_back[abi:ne180100](v6, (__int128 *)v92);
    v43 = (std::__shared_weak_count *)v92[1];
    if (v92[1])
    {
      v44 = (unint64_t *)((char *)v92[1] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    b = matrix.b;
    if (!*(_QWORD *)&matrix.b)
      goto LABEL_89;
    v46 = (unint64_t *)(*(_QWORD *)&matrix.b + 8);
    do
      v21 = __ldaxr(v46);
    while (__stlxr(v21 - 1, v46));
    goto LABEL_87;
  }
  v79 = 0;
  v78 = 0;
LABEL_92:
  v80 = 126 - 2 * __clz(((char *)v79 - (char *)v78) >> 4);
  v92[0] = _compareSegmentsMinOrthogonal;
  if (v79 == (uint64_t *)v78)
    v81 = 0;
  else
    v81 = v80;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(v78, v79, v92, v81, 1);
  return v4;
}

void sub_2411A5398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = a10;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_rwlock_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v7 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
  v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(a3, v7 + 6);
  }
  pthread_rwlock_unlock(v6);
  if (!v8)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    if (((unsigned int (*)(void))a1[34][2])())
    {
      pthread_rwlock_wrlock(v6);
      v9 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
      if (v9)
      {
        v10 = v9 + 6;
        v9[8] = **a1;
      }
      else
      {
        v17 = **a1;
        v18 = a2;
        v11 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v18);
        v10 = &v15;
        std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(v11 + 6, &v15);
        v11[8] = v17;
        if (a1[4] > a1[7])
        {
          *((_BYTE *)a1 + 48) = 1;
          v10 = &v15;
        }
      }
      std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(a3, v10);
      pthread_rwlock_unlock(v6);
    }
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_2411A57B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t _compareSegmentsMinOrthogonal(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  double v4;

  result = *a1;
  if (result)
  {
    if (*a2)
    {
      v4 = (*(double (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      return v4 < (*(double (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold(int *a1, uint64_t a2, double *a3, double *a4, void **a5, double a6)
{
  int v6;
  uint64_t v7;
  char v13;
  __int128 *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  _DWORD *v36;
  std::__shared_weak_count *v37;
  _DWORD *v38;
  std::__shared_weak_count *v39;

  v6 = *a1;
  *a3 = 0.0;
  v7 = *((_QWORD *)a1 + 1);
  if (v7 == *((_QWORD *)a1 + 2))
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v33 = v6 & 0xFFFFFFFD;
    v14 = (__int128 *)MEMORY[0x24BDBEFB0];
    do
    {
      v15 = *(std::__shared_weak_count **)(v7 + 8);
      v38 = *(_DWORD **)v7;
      v39 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = *(_QWORD *)(a2 + 8);
      if (v18 != *(_QWORD *)(a2 + 16))
      {
        do
        {
          v19 = *(_DWORD **)v18;
          v20 = *(std::__shared_weak_count **)(v18 + 8);
          v36 = *(_DWORD **)v18;
          v37 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v34 = *v14;
          v35 = v34;
          if (v38
            && v19
            && EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(v38, v19, a3, &v34, a5, a6))
          {
            if ((v13 & 1) == 0
              || (!v33
                ? (v23 = *(double *)&v35 - *(double *)&v34, v24 = a4[2], v25 = *a4)
                : (v23 = *((double *)&v35 + 1) - *((double *)&v34 + 1), v24 = a4[3], v25 = a4[1]),
                  v23 < v24 - v25))
            {
              v26 = v35;
              *(_OWORD *)a4 = v34;
              *((_OWORD *)a4 + 1) = v26;
            }
            v13 = 1;
          }
          if (v20)
          {
            v27 = (unint64_t *)&v20->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v18 += 16;
        }
        while (v18 != *(_QWORD *)(a2 + 16));
        v15 = v39;
      }
      if (v15)
      {
        v29 = (unint64_t *)&v15->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v7 += 16;
    }
    while (v7 != *((_QWORD *)a1 + 2));
  }
  return v13 & 1;
}

void sub_2411A5A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

CGMutablePathRef EQKit::OpticalKern::Edge::Composite::newPathForEdge(EQKit::OpticalKern::Edge::Composite *this)
{
  CGMutablePathRef Mutable;
  uint64_t *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  Mutable = CGPathCreateMutable();
  if (Mutable)
  {
    for (i = (uint64_t *)*((_QWORD *)this + 1); i != *((uint64_t **)this + 2); i += 2)
    {
      v4 = *i;
      v5 = (std::__shared_weak_count *)i[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      if (v4)
        (*(void (**)(uint64_t, CGMutablePathRef))(*(_QWORD *)v4 + 16))(v4, Mutable);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  return Mutable;
}

void sub_2411A5B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Edge::PathSegment::~PathSegment(EQKit::OpticalKern::Edge::PathSegment *this)
{
  *(_QWORD *)this = &off_25112A3F0;
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
}

{
  *(_QWORD *)this = &off_25112A3F0;
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  JUMPOUT(0x242690740);
}

void EQKit::OpticalKern::Edge::ParallelSegment::~ParallelSegment(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  JUMPOUT(0x242690740);
}

void std::vector<double>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

double _determineBucketDistance(double *a1, double *a2, int a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double result;

  v4 = a2[1];
  v5 = a2[2];
  v7 = a1[1];
  v6 = a1[2];
  if (v6 > v4 && v5 > v7)
  {
    if (v7 >= v4)
      v4 = a1[1];
    if (v5 < v6)
      v6 = a2[2];
    v28 = v6 + v4;
    v27 = v28 * 0.5;
    v25 = *a1;
    if (a3)
      v24 = *a1;
    else
      v24 = v28 * 0.5;
    if (a3)
    {
      v25 = v27;
      v26 = *a2;
    }
    else
    {
      v26 = v27;
    }
    if (!a3)
      v27 = *a2;
  }
  else
  {
    if ((a3 & 1) != 0)
      v9 = *a1;
    else
      v9 = a1[1];
    if ((a3 & 1) != 0)
      v10 = a1[1];
    else
      v10 = *a1;
    if ((a3 & 1) != 0)
      v11 = *a2;
    else
      v11 = a2[2];
    if ((a3 & 1) != 0)
      v12 = a2[2];
    else
      v12 = *a2;
    if (a3)
      v13 = *a2;
    else
      v13 = a2[1];
    if (a3)
      v14 = a2[1];
    else
      v14 = *a2;
    if (a3)
      v15 = *a1;
    else
      v15 = a1[2];
    if (a3)
      v16 = a1[2];
    else
      v16 = *a1;
    if (v6 < v4)
    {
      v9 = v15;
      v10 = v16;
      v11 = v13;
      v12 = v14;
    }
    if (a3)
      v17 = *a2;
    else
      v17 = a2[2];
    if (a3)
      v18 = a2[2];
    else
      v18 = *a2;
    if (a3)
      v19 = *a2;
    else
      v19 = a1[1];
    if (a3)
    {
      v20 = *a2;
    }
    else
    {
      v7 = *a2;
      v20 = a2[1];
    }
    if (a3)
      v21 = a2[1];
    else
      v21 = *a2;
    if (a3)
    {
      v5 = *a2;
      v22 = a1[2];
    }
    else
    {
      v22 = *a2;
    }
    v23 = v6 < v4;
    if (v6 < v4)
      v24 = v5;
    else
      v24 = v19;
    if (v23)
      v25 = v22;
    else
      v25 = v7;
    if (v23)
      v26 = v20;
    else
      v26 = v17;
    if (v23)
      v27 = v21;
    else
      v27 = v18;
    if (*a2 >= *a1)
    {
      v24 = v9;
      v25 = v10;
      v26 = v11;
      v27 = v12;
    }
  }
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
  a4[3] = v27;
  result = (v27 - v25) * (v27 - v25) + (v26 - v24) * (v26 - v24);
  if (*a2 < *a1 && a2[2] > a1[1] && a1[2] > a2[1])
    return -result;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(__int128 *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  char v31;
  BOOL v32;
  uint64_t (*v33)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

LABEL_1:
  v10 = (uint64_t *)a1;
  while (2)
  {
    a1 = (__int128 *)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v33 = *a3;
        v34 = (std::__shared_weak_count *)*(a2 - 1);
        v55 = *(a2 - 2);
        v56 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        v37 = v10[1];
        v53 = *v10;
        v54 = (std::__shared_weak_count *)v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = v33(&v55, &v53);
        v41 = v54;
        if (v54)
        {
          v42 = (unint64_t *)&v54->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = v56;
        if (v56)
        {
          v45 = (unint64_t *)&v56->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v40)
        {
          v47 = *v10;
          *v10 = *(a2 - 2);
          *(a2 - 2) = v47;
          v48 = v10[1];
          v10[1] = *(a2 - 1);
          *(a2 - 1) = v48;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v11 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, a2, a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
          return;
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(&v10[2 * (v12 >> 1)], v10, a2 - 2, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, &v10[2 * (v12 >> 1)], a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10 + 2, v14 - 2, a2 - 4, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10 + 4, &v10[2 * v13 + 2], a2 - 6, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v14 - 2, v14, &v10[2 * v13 + 2], a3);
          v15 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *a3;
          v17 = (std::__shared_weak_count *)*(v10 - 1);
          v51 = *(v10 - 2);
          v52 = v17;
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = v10[1];
          v49 = *v10;
          v50 = (std::__shared_weak_count *)v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = v16(&v51, &v49);
          v24 = v50;
          if (v50)
          {
            v25 = (unint64_t *)&v50->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = v52;
          if (v52)
          {
            v28 = (unint64_t *)&v52->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if ((v23 & 1) == 0)
          {
            v10 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(a1, (__int128 *)a2, a3);
            a5 = 0;
            continue;
          }
        }
        v30 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>((uint64_t)a1, (__int128 *)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
        if ((v31 & 1) == 0)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(a1, v30, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v30 + 2;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t *)a1, v30, a3);
        v10 = v30 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v30 + 2, a2, a3))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v30;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 40, v9))
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v9, a2 - 40);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, v9 + 40, a2 - 40, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, v9 + 40, v9 + 80, a2 - 40, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, v9 + 40, v9 + 80, v9 + 120, a2 - 40, a3);
        return;
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 40 * (v13 >> 1);
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v15, v9, a2 - 40, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, v15, a2 - 40, a3);
            v16 = 5 * v14;
            v17 = v9 + 40 * v14 - 40;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9 + 40, v17, a2 - 80, a3);
            v18 = v9 + 80;
            v19 = v9 + 40 + 8 * v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v18, v19, a2 - 120, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v17, v15, v19, a3);
            std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(a1 - 40, a1) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, a2, (uint64_t (**)(_BYTE *, unint64_t))a3);
            goto LABEL_16;
          }
LABEL_11:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, a2, (uint64_t (**)(uint64_t, _BYTE *))a3);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v20, a3);
          v9 = v20 + 40;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v20 + 40, a2, a3))
          {
            v10 = v11 + 1;
            if ((v22 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = v20 + 40;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if ((v22 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((const EQKit::StemStretch::Key *)((char *)a2 - 40), v9))
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v9, (uint64_t)a2 - 40);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, (EQKit::StemStretch::Key *)((char *)v9 + 40), (uint64_t)a2 - 40, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, (EQKit::StemStretch::Key *)((char *)v9 + 40), (EQKit::StemStretch::Key *)((char *)v9 + 80), (uint64_t)a2 - 40, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, (EQKit::StemStretch::Key *)((char *)v9 + 40), (EQKit::StemStretch::Key *)((char *)v9 + 80), (EQKit::StemStretch::Key *)((char *)v9 + 120), (uint64_t)a2 - 40, a3);
        return;
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v9, a2, (uint64_t (**)(const EQKit::StemStretch::Key *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v9, a2, (uint64_t (**)(const EQKit::StemStretch::Key *, uint64_t))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (EQKit::StemStretch::Key *)((char *)v9 + 40 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v15, v9, (uint64_t)a2 - 40, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, v15, (uint64_t)a2 - 40, a3);
            v16 = 5 * v14;
            v17 = (EQKit::StemStretch::Key *)((char *)v9 + 40 * v14 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)((char *)v9 + 40), v17, (uint64_t)a2 - 80, a3);
            v18 = (EQKit::StemStretch::Key *)((char *)v9 + 80);
            v19 = (EQKit::StemStretch::Key *)((char *)v9 + 8 * v16 + 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v18, v19, (uint64_t)a2 - 120, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v17, v15, (uint64_t)v19, a3);
            std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((EQKit::StemStretch::Key *)((char *)a1 - 40), a1) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(_BYTE *, EQKit::StemStretch::Key *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v20 = (EQKit::StemStretch::Key *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(char *, _BYTE *))a3);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v20, a3);
          v9 = (EQKit::StemStretch::Key *)((char *)v20 + 40);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v20 + 40, a2, a3))
          {
            v10 = v11 + 1;
            if ((v22 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = (EQKit::StemStretch::Key *)((char *)v20 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if ((v22 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, a2, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
        return;
    }
  }
}

void sub_2411A6278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  if ((_QWORD *)a1 != a2)
  {
    v5 = (_QWORD *)(a1 + 16);
    if ((_QWORD *)(a1 + 16) != a2)
    {
      v7 = a1;
      do
      {
        v8 = v5;
        v9 = *a3;
        v10 = *(std::__shared_weak_count **)(v7 + 24);
        v47 = *(_QWORD *)(v7 + 16);
        v48 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = *(std::__shared_weak_count **)(v7 + 8);
        v45 = *(_QWORD *)v7;
        v46 = v13;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = v9(&v47, &v45);
        v17 = v46;
        if (v46)
        {
          v18 = (unint64_t *)&v46->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = v48;
        if (!v48)
          goto LABEL_19;
        v21 = (unint64_t *)&v48->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          if (v16)
          {
LABEL_20:
            v44 = *(_OWORD *)(v7 + 16);
            *v8 = 0;
            v8[1] = 0;
            std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)v7);
            v23 = a1;
            if (v7 != a1)
            {
              while (1)
              {
                v24 = *a3;
                v43 = v44;
                if (*((_QWORD *)&v44 + 1))
                {
                  v25 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
                  do
                    v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }
                v27 = v7 - 16;
                v41 = *(_QWORD *)(v7 - 16);
                v28 = *(std::__shared_weak_count **)(v7 - 8);
                v42 = v28;
                if (v28)
                {
                  v29 = (unint64_t *)&v28->__shared_owners_;
                  do
                    v30 = __ldxr(v29);
                  while (__stxr(v30 + 1, v29));
                }
                v31 = v24((uint64_t *)&v43, &v41);
                v32 = v42;
                if (v42)
                {
                  v33 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
                v35 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
                if (!*((_QWORD *)&v43 + 1))
                  goto LABEL_36;
                v36 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                  if ((v31 & 1) == 0)
                  {
LABEL_43:
                    v23 = v7;
                    break;
                  }
                }
                else
                {
LABEL_36:
                  if (!v31)
                    goto LABEL_43;
                }
                std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v7, (__int128 *)(v7 - 16));
                v7 -= 16;
                if (v27 == a1)
                {
                  v23 = a1;
                  break;
                }
              }
            }
            std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v23, &v44);
            v38 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
            if (*((_QWORD *)&v44 + 1))
            {
              v39 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
        }
        else
        {
LABEL_19:
          if (v16)
            goto LABEL_20;
        }
        v5 = v8 + 2;
        v7 = (uint64_t)v8;
      }
      while (v8 + 2 != a2);
    }
  }
}

void sub_2411A654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 16;
    if (a1 + 16 != a2)
    {
      do
      {
        v7 = v5;
        v8 = *a3;
        v9 = *(std::__shared_weak_count **)(v4 + 24);
        v46 = *(_QWORD *)(v4 + 16);
        v47 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = *(std::__shared_weak_count **)(v4 + 8);
        v44 = *(_QWORD *)v4;
        v45 = v12;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = v8(&v46, &v44);
        v16 = v45;
        if (v45)
        {
          v17 = (unint64_t *)&v45->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = v47;
        if (!v47)
          goto LABEL_18;
        v20 = (unint64_t *)&v47->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          if (v15)
          {
LABEL_19:
            v43 = *(_OWORD *)v7;
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            v22 = v7;
            do
            {
              while (1)
              {
                v23 = v22;
                v22 = v4;
                std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v23, (__int128 *)v4);
                v24 = *a3;
                v42 = v43;
                if (*((_QWORD *)&v43 + 1))
                {
                  v25 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
                  do
                    v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }
                v4 -= 16;
                v40 = *(_QWORD *)(v22 - 16);
                v27 = *(std::__shared_weak_count **)(v22 - 8);
                v41 = v27;
                if (v27)
                {
                  v28 = (unint64_t *)&v27->__shared_owners_;
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                }
                v30 = v24((uint64_t *)&v42, &v40);
                v31 = v41;
                if (v41)
                {
                  v32 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
                if (*((_QWORD *)&v42 + 1))
                {
                  v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                    break;
                }
                if ((v30 & 1) == 0)
                  goto LABEL_38;
              }
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
            while ((v30 & 1) != 0);
LABEL_38:
            std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v22, &v43);
            v37 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1))
            {
              v38 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
          }
        }
        else
        {
LABEL_18:
          if (v15)
            goto LABEL_19;
        }
        v5 = v7 + 16;
        v4 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
}

void sub_2411A6800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  std::__shared_weak_count **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count **v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  std::__shared_weak_count **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t (*v72)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;

  v8 = *a4;
  v10 = (std::__shared_weak_count **)(a2 + 1);
  v9 = (std::__shared_weak_count *)a2[1];
  v105 = *a2;
  v106 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count **)(a1 + 1);
  v13 = (std::__shared_weak_count *)a1[1];
  v103 = *a1;
  v104 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v8(&v105, &v103);
  v18 = v104;
  if (v104)
  {
    v19 = (unint64_t *)&v104->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v106;
  if (v106)
  {
    v22 = (unint64_t *)&v106->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *a4;
  v25 = (std::__shared_weak_count **)(a3 + 1);
  if ((v17 & 1) != 0)
  {
    v26 = *v25;
    v93 = *a3;
    v94 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (std::__shared_weak_count *)a2[1];
    v91 = *a2;
    v92 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = v24(&v93, &v91);
    v33 = v92;
    if (v92)
    {
      v34 = (unint64_t *)&v92->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v94;
    if (v94)
    {
      v37 = (unint64_t *)&v94->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *a1;
    if (v32)
    {
      *a1 = *a3;
      *a3 = v39;
      result = 1;
LABEL_87:
      v10 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_88;
    }
    *a1 = *a2;
    *a2 = v39;
    v71 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v71;
    v72 = *a4;
    v73 = (std::__shared_weak_count *)a3[1];
    v89 = *a3;
    v90 = v73;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      v71 = *v10;
    }
    v87 = *a2;
    v88 = v71;
    if (v71)
    {
      v76 = (unint64_t *)&v71->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = v72(&v89, &v87);
    v79 = v88;
    if (v88)
    {
      v80 = (unint64_t *)&v88->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v90;
    if (!v90)
      goto LABEL_85;
    v83 = (unint64_t *)&v90->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      if (v78)
        goto LABEL_86;
    }
    else
    {
LABEL_85:
      if (v78)
      {
LABEL_86:
        v85 = *a2;
        *a2 = *a3;
        *a3 = v85;
        result = 2;
        v14 = v10;
        goto LABEL_87;
      }
    }
    return 1;
  }
  v41 = *v25;
  v101 = *a3;
  v102 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = (std::__shared_weak_count *)a2[1];
  v99 = *a2;
  v100 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = v24(&v101, &v99);
  v48 = v100;
  if (v100)
  {
    v49 = (unint64_t *)&v100->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v102;
  if (!v102)
    goto LABEL_51;
  v52 = (unint64_t *)&v102->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
  {
LABEL_51:
    if ((v47 & 1) != 0)
      goto LABEL_52;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if ((v47 & 1) == 0)
    return 0;
LABEL_52:
  v54 = *a2;
  *a2 = *a3;
  *a3 = v54;
  v55 = a2[1];
  a2[1] = a3[1];
  a3[1] = v55;
  v56 = *a4;
  v57 = (std::__shared_weak_count *)a2[1];
  v97 = *a2;
  v98 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = (std::__shared_weak_count *)a1[1];
  v95 = *a1;
  v96 = v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = v56(&v97, &v95);
  v64 = v96;
  if (v96)
  {
    v65 = (unint64_t *)&v96->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v98;
  if (!v98)
    goto LABEL_67;
  v68 = (unint64_t *)&v98->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (v63)
      goto LABEL_68;
  }
  else
  {
LABEL_67:
    if (v63)
    {
LABEL_68:
      v70 = *a1;
      *a1 = *a2;
      *a2 = v70;
      result = 2;
LABEL_88:
      v86 = *v14;
      *v14 = *v10;
      *v10 = v86;
      return result;
    }
  }
  return 1;
}

void sub_2411A6D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  __int128 *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t (*v22)(uint64_t *, uint64_t *);
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t (*v37)(uint64_t *, uint64_t *);
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t (*v50)(uint64_t *, uint64_t *);
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t *, uint64_t *);
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (*v78)(uint64_t *, uint64_t *);
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;

  v4 = a2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v114 = *(_QWORD *)a1;
  v7 = v114;
  *((_QWORD *)&v114 + 1) = v6;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *a3;
  v112 = v7;
  v113 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
  v110 = *((_QWORD *)a2 - 2);
  v111 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v8(&v112, &v110);
  v15 = v111;
  if (v111)
  {
    v16 = (unint64_t *)&v111->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v113;
  if (!v113)
    goto LABEL_16;
  v19 = (unint64_t *)&v113->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_16:
    if ((v14 & 1) != 0)
      goto LABEL_17;
LABEL_37:
    v21 = a1 + 1;
    if (a1 + 1 >= v4)
      goto LABEL_60;
    v35 = a1;
    while (1)
    {
      v36 = v21;
      v37 = *a3;
      v106 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)v35 + 3);
      v104 = *(_QWORD *)v21;
      v105 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = v37((uint64_t *)&v106, &v104);
      v44 = v105;
      if (v105)
      {
        v45 = (unint64_t *)&v105->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (!*((_QWORD *)&v106 + 1))
        goto LABEL_54;
      v48 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        if ((v43 & 1) != 0)
        {
LABEL_59:
          v21 = v36;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_54:
        if ((v43 & 1) != 0)
          goto LABEL_59;
      }
      v21 = v36 + 1;
      v35 = v36;
      if (v36 + 1 >= v4)
        goto LABEL_60;
    }
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if ((v14 & 1) == 0)
    goto LABEL_37;
LABEL_17:
  v21 = a1;
  do
  {
    v22 = *a3;
    v109 = v114;
    if (*((_QWORD *)&v114 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
    v107 = *((_QWORD *)v21 + 2);
    v108 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v22((uint64_t *)&v109, &v107);
    v29 = v108;
    if (v108)
    {
      v30 = (unint64_t *)&v108->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    ++v21;
  }
  while ((v28 & 1) == 0);
LABEL_60:
  if (v21 < v4)
  {
    do
    {
      v50 = *a3;
      v103 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v101 = *((_QWORD *)v4 - 2);
      v102 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = v50((uint64_t *)&v103, &v101);
      v57 = v102;
      if (v102)
      {
        v58 = (unint64_t *)&v102->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      --v4;
    }
    while ((v56 & 1) != 0);
  }
  while (v21 < v4)
  {
    v63 = *(_QWORD *)v21;
    *(_QWORD *)v21 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v63;
    v64 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v64;
    do
    {
      v65 = *a3;
      v100 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
      v98 = *((_QWORD *)v21 + 2);
      v99 = v68;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = v65((uint64_t *)&v100, &v98);
      v72 = v99;
      if (v99)
      {
        v73 = (unint64_t *)&v99->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      ++v21;
    }
    while (!v71);
    do
    {
      v78 = *a3;
      v97 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v95 = *((_QWORD *)v4 - 2);
      v81 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v96 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v78((uint64_t *)&v97, &v95);
      v85 = v96;
      if (v96)
      {
        v86 = (unint64_t *)&v96->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      --v4;
    }
    while ((v84 & 1) != 0);
  }
  if (v21 - 1 != a1)
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)a1, v21 - 1);
  std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)(v21 - 1), &v114);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  return v21;
}

void sub_2411A738C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v1 - 112);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v1 - 96);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  unint64_t v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, __int128 *);
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, __int128 *);
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t *, __int128 *);
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t *, __int128 *);
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t *, __int128 *);
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  __int128 v102;

  v102 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1;
  do
  {
    while (1)
    {
      v7 = (__int128 *)v6;
      v9 = *(_QWORD *)(v6 + 16);
      v8 = *(std::__shared_weak_count **)(v6 + 24);
      v6 += 16;
      v10 = *a3;
      v100 = v9;
      v101 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v99 = v102;
      if (*((_QWORD *)&v102 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v10(&v100, &v99);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v101;
      if (v101)
      {
        v20 = (unint64_t *)&v101->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
          break;
      }
      if ((v15 & 1) == 0)
        goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  while ((v15 & 1) != 0);
LABEL_20:
  if (v7 == (__int128 *)a1)
  {
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v36 = *a3;
        v38 = *((_QWORD *)a2 - 2);
        v37 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        v97 = v38;
        v98 = v37;
        if (v37)
        {
          v39 = (unint64_t *)&v37->__shared_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v96 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = v36(&v97, &v96);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v98;
        if (v98)
        {
          v48 = (unint64_t *)&v98->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (v6 >= (unint64_t)a2)
          v50 = 1;
        else
          v50 = v43;
      }
      while ((v50 & 1) == 0);
    }
  }
  else
  {
    do
    {
      while (1)
      {
        v23 = *((_QWORD *)a2 - 2);
        v22 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        v24 = *a3;
        v94 = v23;
        v95 = v22;
        if (v22)
        {
          v25 = (unint64_t *)&v22->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v93 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v24(&v94, &v93);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        if (*((_QWORD *)&v93 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v95;
        if (v95)
        {
          v34 = (unint64_t *)&v95->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
            break;
        }
        if ((v29 & 1) != 0)
          goto LABEL_61;
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    while ((v29 & 1) == 0);
  }
LABEL_61:
  if (v6 < (unint64_t)a2)
  {
    v51 = (__int128 *)v6;
    v52 = a2;
    do
    {
      v53 = *(_QWORD *)v51;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *(_QWORD *)v52 = v53;
      v54 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
      *((_QWORD *)v52 + 1) = v54;
      do
      {
        while (1)
        {
          v7 = v51;
          v56 = *((_QWORD *)v51 + 2);
          v55 = (std::__shared_weak_count *)*((_QWORD *)v51++ + 3);
          v57 = *a3;
          v91 = v56;
          v92 = v55;
          if (v55)
          {
            v58 = (unint64_t *)&v55->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v90 = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = v57(&v91, &v90);
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
          if (*((_QWORD *)&v90 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = v92;
          if (v92)
          {
            v67 = (unint64_t *)&v92->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
              break;
          }
          if ((v62 & 1) == 0)
            goto LABEL_84;
        }
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      while ((v62 & 1) != 0);
      do
      {
        while (1)
        {
LABEL_84:
          v69 = *((_QWORD *)v52-- - 2);
          v70 = *a3;
          v88 = v69;
          v71 = (std::__shared_weak_count *)*((_QWORD *)v52 + 1);
          v89 = v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v87 = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v74 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          v76 = v70(&v88, &v87);
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = v89;
          if (!v89)
            break;
          v81 = (unint64_t *)&v89->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (v82)
            break;
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
          if (v76)
            goto LABEL_100;
        }
      }
      while (!v76);
LABEL_100:
      ;
    }
    while (v51 < v52);
  }
  if (v7 != (__int128 *)a1)
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](a1, v7);
  std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)v7, &v102);
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  return v7;
}

void sub_2411A7930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v13 - 96);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t (*v27)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t *);
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v9 = (std::__shared_weak_count *)*(a2 - 1);
      v69 = *(a2 - 2);
      v70 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = a1[1];
      v67 = *a1;
      v68 = (std::__shared_weak_count *)v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v8(&v69, &v67);
      v16 = v68;
      if (v68)
      {
        v17 = (unint64_t *)&v68->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v70;
      if (v70)
      {
        v20 = (unint64_t *)&v70->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v15)
      {
        v22 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v22;
        v23 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v24 = (uint64_t)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a3);
      v25 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v26 = 0;
      break;
  }
  while (1)
  {
    v27 = *a3;
    v28 = (std::__shared_weak_count *)v25[1];
    v65 = *v25;
    v66 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(std::__shared_weak_count **)(v24 + 8);
    v63 = *(_QWORD *)v24;
    v64 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = v27(&v65, &v63);
    v35 = v64;
    if (v64)
    {
      v36 = (unint64_t *)&v64->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v66;
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
        break;
    }
    if (v34)
      goto LABEL_39;
LABEL_69:
    v24 = (uint64_t)v25;
    v25 += 2;
    if (v25 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (!v34)
    goto LABEL_69;
LABEL_39:
  v62 = *(_OWORD *)v25;
  *v25 = 0;
  v25[1] = 0;
  std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)v25, (__int128 *)v24);
  v41 = (uint64_t)a1;
  if ((uint64_t *)v24 != a1)
  {
    while (1)
    {
      v42 = *a3;
      v61 = v62;
      if (*((_QWORD *)&v62 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (uint64_t *)(v24 - 16);
      v59 = *(_QWORD *)(v24 - 16);
      v46 = *(std::__shared_weak_count **)(v24 - 8);
      v60 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = v42((uint64_t *)&v61, &v59);
      v50 = v60;
      if (v60)
      {
        v51 = (unint64_t *)&v60->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      if (!*((_QWORD *)&v61 + 1))
        goto LABEL_55;
      v54 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        if ((v49 & 1) == 0)
        {
LABEL_62:
          v41 = v24;
          break;
        }
      }
      else
      {
LABEL_55:
        if (!v49)
          goto LABEL_62;
      }
      std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v24, (__int128 *)(v24 - 16));
      v24 -= 16;
      if (v45 == a1)
      {
        v41 = (uint64_t)a1;
        break;
      }
    }
  }
  std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v41, &v62);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (++v26 != 8)
    goto LABEL_69;
  return v25 + 2 == a2;
}

void sub_2411A7DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t (*v10)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a5);
  v10 = *a5;
  v11 = (std::__shared_weak_count *)a4[1];
  v68 = *a4;
  v69 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v66 = *a3;
  v67 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v10(&v68, &v66);
  v18 = v67;
  if (v67)
  {
    v19 = (unint64_t *)&v67->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v69;
  if (!v69)
    goto LABEL_16;
  v22 = (unint64_t *)&v69->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  v25 = a3[1];
  a3[1] = a4[1];
  a4[1] = v25;
  v26 = *a5;
  v27 = (std::__shared_weak_count *)a3[1];
  v64 = *a3;
  v65 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)a2[1];
  v62 = *a2;
  v63 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v26(&v64, &v62);
  v34 = v63;
  if (v63)
  {
    v35 = (unint64_t *)&v63->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v65;
  if (!v65)
    goto LABEL_32;
  v38 = (unint64_t *)&v65->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v33)
      return;
  }
  else
  {
LABEL_32:
    if (!v33)
      return;
  }
  v40 = *a2;
  *a2 = *a3;
  *a3 = v40;
  v41 = a2[1];
  a2[1] = a3[1];
  a3[1] = v41;
  v42 = *a5;
  v43 = (std::__shared_weak_count *)a2[1];
  v60 = *a2;
  v61 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = a1[1];
  v58 = *a1;
  v59 = (std::__shared_weak_count *)v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v42(&v60, &v58);
  v50 = v59;
  if (v59)
  {
    v51 = (unint64_t *)&v59->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v61;
  if (v61)
  {
    v54 = (unint64_t *)&v61->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v49)
  {
    v56 = *a1;
    *a1 = *a2;
    *a2 = v56;
    v57 = a1[1];
    a1[1] = a2[1];
    a2[1] = v57;
  }
}

void sub_2411A8148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t (*v12)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *, uint64_t *);
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t *);
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t *, uint64_t *);
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = (std::__shared_weak_count *)a5[1];
  v90 = *a5;
  v91 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = a4[1];
  v88 = *a4;
  v89 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = v12(&v90, &v88);
  v20 = v89;
  if (v89)
  {
    v21 = (unint64_t *)&v89->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v91;
  if (!v91)
    goto LABEL_16;
  v24 = (unint64_t *)&v91->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v19)
      return;
  }
  else
  {
LABEL_16:
    if (!v19)
      return;
  }
  v26 = *a4;
  *a4 = *a5;
  *a5 = v26;
  v27 = a4[1];
  a4[1] = a5[1];
  a5[1] = v27;
  v28 = *a6;
  v29 = a4[1];
  v86 = *a4;
  v87 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = a3[1];
  v84 = *a3;
  v85 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = v28(&v86, &v84);
  v36 = v85;
  if (v85)
  {
    v37 = (unint64_t *)&v85->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v87;
  if (!v87)
    goto LABEL_32;
  v40 = (unint64_t *)&v87->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v35)
      return;
  }
  else
  {
LABEL_32:
    if (!v35)
      return;
  }
  v42 = *a3;
  *a3 = *a4;
  *a4 = v42;
  v43 = a3[1];
  a3[1] = a4[1];
  a4[1] = v43;
  v44 = *a6;
  v45 = a3[1];
  v82 = *a3;
  v83 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = a2[1];
  v80 = *a2;
  v81 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = v44(&v82, &v80);
  v52 = v81;
  if (v81)
  {
    v53 = (unint64_t *)&v81->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v83;
  if (!v83)
    goto LABEL_48;
  v56 = (unint64_t *)&v83->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (!v51)
      return;
  }
  else
  {
LABEL_48:
    if (!v51)
      return;
  }
  v58 = *a2;
  *a2 = *a3;
  *a3 = v58;
  v59 = a2[1];
  a2[1] = a3[1];
  a3[1] = v59;
  v60 = *a6;
  v61 = a2[1];
  v78 = *a2;
  v79 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = a1[1];
  v76 = *a1;
  v77 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = v60(&v78, &v76);
  v68 = v77;
  if (v77)
  {
    v69 = (unint64_t *)&v77->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v79;
  if (v79)
  {
    v72 = (unint64_t *)&v79->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v67)
  {
    v74 = *a1;
    *a1 = *a2;
    *a2 = v74;
    v75 = a1[1];
    a1[1] = a2[1];
    a2[1] = v75;
  }
}

void sub_2411A8598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, __int128 *))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(uint64_t *, __int128 *);
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *a4;
        v16 = (std::__shared_weak_count *)v14[1];
        v36 = *v14;
        v37 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        v19 = a1[1];
        v34 = *a1;
        v35 = (std::__shared_weak_count *)v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v15(&v36, (__int128 *)&v34);
        v23 = v35;
        if (v35)
        {
          v24 = (unint64_t *)&v35->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v37;
        if (v37)
        {
          v27 = (unint64_t *)&v37->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
            break;
        }
        if (v22)
          goto LABEL_23;
LABEL_24:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          goto LABEL_28;
        }
      }
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v22)
        goto LABEL_24;
LABEL_23:
      v29 = *v14;
      *v14 = *a1;
      *a1 = v29;
      v30 = v14[1];
      v14[1] = a1[1];
      a1[1] = v30;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, a1);
      goto LABEL_24;
    }
LABEL_28:
    if (v8 >= 17)
    {
      v31 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, v6, (uint64_t (**)(__int128 *, uint64_t *))a4, v31);
        v6 -= 16;
      }
      while (v31-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_2411A8848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(uint64_t *, __int128 *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, __int128 *);
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(__int128 *, uint64_t *);
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t *, __int128 *);
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;

  v4 = a3 - 2;
  if (a3 < 2)
    return;
  v5 = a4;
  v73 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v9 = ((uint64_t)a4 - a1) >> 3;
  v10 = v9 + 1;
  v11 = a1 + 16 * (v9 + 1);
  v12 = v9 + 2;
  if (v9 + 2 >= a3)
    goto LABEL_21;
  v13 = *a2;
  v87 = *(_OWORD *)v11;
  if (*((_QWORD *)&v87 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(v11 + 24);
  v85 = *(_QWORD *)(v11 + 16);
  v86 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v13((uint64_t *)&v87, (__int128 *)&v85);
  v20 = v86;
  if (v86)
  {
    v21 = (unint64_t *)&v86->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v19 & 1) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  if (v19)
  {
LABEL_20:
    v11 += 16;
    v10 = v12;
  }
LABEL_21:
  v26 = (uint64_t (*)(uint64_t *, uint64_t *))*a2;
  v27 = *(std::__shared_weak_count **)(v11 + 8);
  v83 = *(_QWORD *)v11;
  v84 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)v5[1];
  v81 = *v5;
  v82 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v26(&v83, &v81);
  v34 = v82;
  if (v82)
  {
    v35 = (unint64_t *)&v82->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v84;
  if (!v84)
    goto LABEL_36;
  v38 = (unint64_t *)&v84->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((v33 & 1) != 0)
      return;
  }
  else
  {
LABEL_36:
    if ((v33 & 1) != 0)
      return;
  }
  v80 = *(_OWORD *)v5;
  *v5 = 0;
  v5[1] = 0;
  do
  {
    v40 = v11;
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)v11);
    if (v73 < v10)
      break;
    v41 = 2 * v10;
    v10 = (2 * v10) | 1;
    v11 = a1 + 16 * v10;
    v42 = v41 + 2;
    if (v41 + 2 < a3)
    {
      v43 = (uint64_t (*)(__int128 *, uint64_t *))*a2;
      v44 = *(_OWORD *)v11;
      v79 = v44;
      if (*((_QWORD *)&v44 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = *(std::__shared_weak_count **)(v11 + 24);
      v77 = *(_QWORD *)(v11 + 16);
      v78 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = v43(&v79, &v77);
      v51 = v78;
      if (v78)
      {
        v52 = (unint64_t *)&v78->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          if ((v50 & 1) == 0)
            goto LABEL_57;
LABEL_56:
          v11 += 16;
          v10 = v42;
          goto LABEL_57;
        }
      }
      if (v50)
        goto LABEL_56;
    }
LABEL_57:
    v57 = *a2;
    v58 = *(std::__shared_weak_count **)(v11 + 8);
    v75 = *(_QWORD *)v11;
    v76 = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v74 = v80;
    if (*((_QWORD *)&v80 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = v57(&v75, &v74);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v76;
    if (v76)
    {
      v68 = (unint64_t *)&v76->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v5 = (uint64_t *)v40;
  }
  while (!v63);
  std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v40, &v80);
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_2411A8CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v17 - 112);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if ((__int128 *)v7 == v9)
    {
      std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v7, &v13);
    }
    else
    {
      std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v7, v9);
      std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, v8 + 16, a3, (v8 + 16 - a1) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_2411A8E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t *);
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    a1 += 16 * v6 + 16;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_22;
    v12 = *a2;
    v13 = *(_OWORD *)a1;
    v29 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(std::__shared_weak_count **)(a1 + 24);
    v27 = *(_QWORD *)(a1 + 16);
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v19 = v12(&v29, &v27);
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_20;
    v24 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (v25)
    {
LABEL_20:
      if (!v19)
        goto LABEL_22;
LABEL_21:
      a1 += 16;
      v6 = v11;
      goto LABEL_22;
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v19 & 1) != 0)
      goto LABEL_21;
LABEL_22:
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v9, (__int128 *)a1);
  }
  while (v6 <= v8);
  return a1;
}

void sub_2411A8FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t (*v9)(__int128 *, uint64_t *);
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(__int128 *, uint64_t *);
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = *a3;
    v10 = *v8;
    v46 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(a2 - 8);
    v14 = a2 - 16;
    v44 = *(_QWORD *)(a2 - 16);
    v45 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = v9(&v46, &v44);
    v18 = v45;
    if (v45)
    {
      v19 = (unint64_t *)&v45->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (!*((_QWORD *)&v46 + 1))
      goto LABEL_17;
    v22 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v17)
        return;
    }
    else
    {
LABEL_17:
      if (!v17)
        return;
    }
    v43 = *(_OWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    do
    {
      v24 = (uint64_t)v8;
      std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v14, v8);
      if (!v7)
        break;
      v7 = (v7 - 1) >> 1;
      v8 = (__int128 *)(a1 + 16 * v7);
      v25 = *a3;
      v26 = *v8;
      v42 = v26;
      if (*((_QWORD *)&v26 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v41 = v43;
      if (*((_QWORD *)&v43 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v25(&v42, (uint64_t *)&v41);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v14 = v24;
    }
    while ((v31 & 1) != 0);
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](v24, &v43);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_2411A9230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_25112A500;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2411A9384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x242690740);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_25112A578;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2411A94CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x242690740);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 32);
    if (v2)
    {
      *(_QWORD *)(a2 + 40) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x242690740);
  }
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::PathSegment,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_25112A5F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2411A95F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x242690740);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = CFHash((CFTypeRef)v4);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = v6 & (*(_QWORD *)&v5 - 1);
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  CFHashCode v8;
  uint64_t v9;
  CFHashCode v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v27;

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 8) << 16;
  v10 = v8 ^ *(unsigned int *)(a2 + 24);
  v11 = v10 ^ v9;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10 ^ v9;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        do
        {
          v17 = v16[1];
          if (v17 == v11)
          {
            if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v16 + 2), a2))
              return v16;
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(a1, v11, a4, (uint64_t)&v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v27 = *v24;
    *v24 = v27;
  }
  else
  {
    *v27 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v27)
    {
      v25 = *(_QWORD *)(*v27 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27;
    }
  }
  v16 = v27;
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_2411A9A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:ne180100]<EQKit::OpticalKern::Glyph::Key const&>((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2411A9B20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:ne180100]<EQKit::OpticalKern::Glyph::Key const&>(uint64_t a1, uint64_t a2)
{
  const void *v4;

  v4 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, const void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)(__p + 6));
    EQKit::OpticalKern::Glyph::Key::~Key(__p + 2);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_25112A668;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2411A9C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x242690740);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void EQKit::OpticalKern::Spec::Entry::~Entry(EQKit::OpticalKern::Spec::Entry *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const CGPath *a3)
{
  *(_DWORD *)this = 1;
  *(CGPoint *)((char *)this + 8) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = -1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a3)
    CFRetain(a3);
  return this;
}

void sub_2411A9D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v1 + 56);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  *(_DWORD *)this = 2;
  *(CGPoint *)((char *)this + 8) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  *((_WORD *)this + 20) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a3)
    CFRetain(a3);
  return this;
}

void sub_2411A9DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v1 + 56);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, const EQKit::OpticalKern::Spec::Entry *a2)
{
  const void *v3;
  const void *v4;
  __int16 v5;
  uint64_t v6;

  *(_DWORD *)this = *(_DWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  v4 = (const void *)*((_QWORD *)a2 + 3);
  v3 = (const void *)*((_QWORD *)a2 + 4);
  v5 = *((_WORD *)a2 + 20);
  v6 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 4) = v3;
  *((_WORD *)this + 20) = v5;
  *((_QWORD *)this + 6) = v6;
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    CFRetain(v4);
    v3 = (const void *)*((_QWORD *)this + 4);
  }
  if (v3)
    CFRetain(v3);
  return this;
}

void sub_2411A9E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CGPathRef EQKit::OpticalKern::Spec::Entry::copyPath(CFTypeRef *this)
{
  const __CTFont *v2;
  int v3;
  CGAffineTransform v4;

  if (this[3])
    return (CGPathRef)CFRetain(this[3]);
  v2 = (const __CTFont *)this[4];
  if (!v2)
    return 0;
  v3 = *((unsigned __int16 *)this + 20);
  if (v3 == 0xFFFF)
    return 0;
  memset(&v4, 0, sizeof(v4));
  CGAffineTransformMakeScale(&v4, 1.0, -1.0);
  return CTFontCreatePathForGlyph(v2, v3, &v4);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const CGPath *a3)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[72];

  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v6, a2, a3);
  v4 = *((_QWORD *)this + 1);
  if (v4 >= *((_QWORD *)this + 2))
  {
    v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t *)this, (const EQKit::OpticalKern::Spec::Entry *)v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v6);
    v5 = v4 + 72;
    *((_QWORD *)this + 1) = v4 + 72;
  }
  *((_QWORD *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v6);
}

void sub_2411A9F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  unint64_t v5;
  uint64_t v6;
  _BYTE v7[72];

  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v7, a2, a3, a4);
  v5 = *((_QWORD *)this + 1);
  if (v5 >= *((_QWORD *)this + 2))
  {
    v6 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t *)this, (const EQKit::OpticalKern::Spec::Entry *)v7);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v7);
    v6 = v5 + 72;
    *((_QWORD *)this + 1) = v5 + 72;
  }
  *((_QWORD *)this + 1) = v6;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v7);
}

void sub_2411A9FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, double a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  CGPoint v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  v6 = 3;
  v7 = a2;
  v8 = 0;
  v9 = 0;
  v10 = -1;
  v11 = a3;
  v12 = 0;
  v13 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4 >= *((_QWORD *)this + 2))
  {
    v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t *)this, (const EQKit::OpticalKern::Spec::Entry *)&v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)&v6);
    v5 = v4 + 72;
    *((_QWORD *)this + 1) = v4 + 72;
  }
  *((_QWORD *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)&v6);
}

void sub_2411AA07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>(uint64_t *a1, const EQKit::OpticalKern::Spec::Entry *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  EQKit::OpticalKern::Spec::Entry *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (EQKit::OpticalKern::Spec::Entry *)&v10[72 * v4];
  v16 = &v10[72 * v9];
  EQKit::OpticalKern::Spec::Entry::Entry(v14, a2);
  v15 = (char *)v14 + 72;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2411AA1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>,std::reverse_iterator<EQKit::OpticalKern::Spec::Entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  EQKit::OpticalKern::Spec::Entry *v12;

  v10 = 0;
  v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    v12 = (EQKit::OpticalKern::Spec::Entry *)(v11 + v10);
    v10 -= 72;
    EQKit::OpticalKern::Spec::Entry::Entry(v12, (const EQKit::OpticalKern::Spec::Entry *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void EQKit::Kerning::Manager::~Manager(EQKit::Kerning::Manager *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  if (v1)
  {
    v2 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(v1);
    MEMORY[0x242690740](v2, 0x10E0C40B27302BALL);
  }
}

EQKit::Kerning::Manager *EQKit::Kerning::Manager::Manager(EQKit::Kerning::Manager *this, const EQKit::Environment::Version *a2, NSDictionary *a3)
{
  char *v6;
  EQKitPath::QuantizationConfig *v7;
  uint64_t v8;
  NSDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[5];

  *((_QWORD *)this + 1) = 0;
  v6 = (char *)this + 8;
  *((_BYTE *)this + 16) = *(_QWORD *)a2 > 1uLL;
  v7 = (EQKit::Kerning::Manager *)((char *)this + 24);
  v8 = objc_opt_class();
  v9 = (NSDictionary *)EQKitUtilDynamicCast(v8, (uint64_t)-[NSDictionary objectForKey:](a3, "objectForKey:", CFSTR("quantization")));
  EQKitPath::QuantizationConfig::QuantizationConfig(v7, v9);
  v10 = operator new();
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = ___ZN5EQKit7Kerning7ManagerC2ERKNS_11Environment7VersionEP12NSDictionary_block_invoke;
  v14[3] = &__block_descriptor_40_e35_B24__0r__Key_____CFString_SdI_8_v16l;
  v14[4] = this;
  EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::EQKitCache(v10, (uint64_t)v6, v14);
  *(_QWORD *)this = v10;
  v11 = objc_opt_class();
  v12 = (void *)EQKitUtilDynamicCast(v11, (uint64_t)-[NSDictionary objectForKey:](a3, "objectForKey:", CFSTR("enabled")));
  if (v12 && *(_QWORD *)a2 >= 2uLL)
    *((_BYTE *)this + 16) = objc_msgSend(v12, "BOOLValue");
  return this;
}

void sub_2411AA4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit7Kerning7ManagerC2ERKNS_11Environment7VersionEP12NSDictionary_block_invoke(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t a3)
{
  uint64_t v5;
  EQKit::OpticalKern::Edge::Path *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (EQKit::OpticalKern::Edge::Path *)operator new();
  EQKit::OpticalKern::Edge::Path::Path(v6, a2, (const EQKitPath::QuantizationConfig *)(v5 + 24), 0);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(&v11, (uint64_t)v6);
  std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::operator=[abi:ne180100](a3, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_2411AA5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1080C4076FF3075);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Kerning::Manager::beginLayout(uint64_t this)
{
  ++*(_QWORD *)(this + 8);
  return this;
}

uint64_t EQKit::Kerning::Manager::endLayout(uint64_t ***this)
{
  return EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(*this);
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18[4];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = a1[3];
      if (v6)
      {
        do
        {
          v7 = v6[8];
          EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v18, (uint64_t)(v6 + 2));
          v19 = v5 - v7;
          v8 = v21;
          if (v21 >= v22)
          {
            v9 = std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>(&v20, (uint64_t)v18);
          }
          else
          {
            EQKit::OpticalKern::Glyph::Key::Key(v21, (uint64_t)v18);
            *(_QWORD *)(v8 + 32) = v19;
            v9 = v8 + 40;
          }
          v21 = v9;
          EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v18);
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v10 = v20;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v10) >> 3));
      v23 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(uint64_t, uint64_t))&v23, v13, 1);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v20) >> 3);
      v15 = a1[8];
      v16 = v14 - (_QWORD)v15;
      if (v14 > (unint64_t)v15)
      {
        v17 = 40 * (_QWORD)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(a1 + 1, v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((_BYTE *)a1 + 48) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_2411AA77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(_QWORD *a1, int a2, void *a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGFloat MinX;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double MinY;
  double v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double MaxX;
  double v42;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _OWORD v49[2];
  void **v50;
  uint64_t v51;
  void ***v52;
  uint64_t v53;
  void **v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  double v58;
  CGPoint v59;
  CGPoint v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;

  v58 = 0.0;
  v10 = 0.0;
  if (*((_BYTE *)a1 + 16))
  {
    objc_msgSend(a3, "erasableBounds");
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v26 = v25;
    objc_msgSend(a5, "erasableBounds");
    y = v61.origin.y;
    x = v61.origin.x;
    height = v61.size.height;
    width = v61.size.width;
    MinX = CGRectGetMinX(v61);
    v28 = a8;
    v29 = a10;
    v42 = v28;
    v30 = v28 + MinX;
    v62.origin.x = v20;
    v62.origin.y = v22;
    v62.size.width = v24;
    v62.size.height = v26;
    if (v30 - (a6 + CGRectGetMaxX(v62)) < v29)
    {
      v31 = v29;
      memset(v56, 0, sizeof(v56));
      v57 = 2;
      memset(v54, 0, sizeof(v54));
      v55 = 0;
      if (a2 == 2)
      {
        v63.origin.x = v20;
        v63.origin.y = v22;
        v63.size.width = v24;
        v63.size.height = v26;
        MaxX = CGRectGetMaxX(v63);
        v33 = a9;
        v64.origin.x = v20;
        v64.origin.y = v22;
        v64.size.width = v24;
        v64.size.height = v26;
        MinY = CGRectGetMinY(v64);
        v65.origin.x = v20;
        v65.origin.y = v22;
        v65.size.width = v24;
        v65.size.height = v26;
        v35 = CGRectGetHeight(v65);
        v59.y = a7 + MinY;
        v59.x = a6 + MaxX;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v56, v59, v35);
        v32 = 1;
      }
      else
      {
        v32 = 0;
        v33 = a9;
        if (!a2)
          v32 = objc_msgSend(a3, "appendOpticalAlignToSpec:offset:", v56, a6, a7);
      }
      if (a4 == 2)
      {
        v66.origin.y = y;
        v66.origin.x = x;
        v66.size.height = height;
        v66.size.width = width;
        v37 = CGRectGetMinX(v66);
        v67.origin.y = y;
        v67.origin.x = x;
        v67.size.height = height;
        v67.size.width = width;
        v38 = CGRectGetMinY(v67);
        v68.origin.y = y;
        v68.origin.x = x;
        v68.size.height = height;
        v68.size.width = width;
        v39 = CGRectGetHeight(v68);
        v60.y = v33 + v38;
        v60.x = v42 + v37;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v54, v60, v39);
        v36 = 1;
      }
      else
      {
        if (a4)
        {
LABEL_13:
          v52 = v54;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
          v54[0] = (void **)v56;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100](v54);
          return v58;
        }
        v36 = objc_msgSend(a5, "appendOpticalAlignToSpec:offset:", v54, v42, v33);
      }
      if ((v32 & v36) == 1)
      {
        EQKit::OpticalKern::Edge::Composite::Composite(&v52, v56, a1 + 3, *a1);
        EQKit::OpticalKern::Edge::Composite::Composite(&v50, v54, a1 + 3, *a1);
        v49[0] = *MEMORY[0x24BDBEFB0];
        v49[1] = v49[0];
        EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold((int *)&v52, (uint64_t)&v50, &v58, (double *)v49, 0, v31);
        *(_QWORD *)&v49[0] = &v51;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
        v50 = (void **)&v53;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&v50);
      }
      goto LABEL_13;
    }
  }
  return v10;
}

void sub_2411AAA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,void ***a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  uint64_t v30;
  uint64_t v31;

  a17 = (void **)(v30 + 8);
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a22 = (void **)&a27;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:ne180100](&a22);
  a26 = &a30;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a30 = (void **)(v31 - 168);
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100](&a30);
  _Unwind_Resume(a1);
}

void std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(v4 - 72));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 6));
      EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_241212010;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2411AAC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v15 = (uint64_t)v14;
  v16 = &v10[40 * v9];
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v14, a2);
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a2 + 32);
  v15 += 40;
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2411AADB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      EQKit::OpticalKern::Glyph::Key::Key(a7 + v11 - 40, a3 + v11 - 40);
      *(_QWORD *)(a7 + v11 - 8) = *(_QWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2411AAEC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 40)
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;

  if (a1 != a2)
  {
    v5 = a1 + 40;
    if (a1 + 40 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v5;
        if ((*a3)(v5, v8))
        {
          EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v13, v9);
          v14 = *(_QWORD *)(v8 + 72);
          v10 = v7;
          while (1)
          {
            EQKit::OpticalKern::Glyph::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(_QWORD *)(a1 + v10 + 72) = *(_QWORD *)(a1 + v10 + 32);
            if (!v10)
              break;
            v11 = (*a3)((uint64_t)v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          EQKit::OpticalKern::Glyph::Key::operator=(v12, (uint64_t)v13);
          *(_QWORD *)(v12 + 32) = v14;
          EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v13);
        }
        v5 = v9 + 40;
        v7 += 40;
        v8 = v9;
      }
      while (v9 + 40 != a2);
    }
  }
}

void sub_2411AB3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[32];
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 40;
    if (a1 + 40 != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v8, v7);
          v9 = *(_QWORD *)(v4 + 72);
          do
          {
            EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, v4);
            *(_QWORD *)(v4 + 72) = *(_QWORD *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)((uint64_t)v8, v4) & 1) != 0);
          EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, (uint64_t)v8);
          *(_QWORD *)(v4 + 72) = v9;
          EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v8);
        }
        v5 = v7 + 40;
        v4 = v7;
      }
      while (v7 + 40 != a2);
    }
  }
}

void sub_2411AB490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a2, a3);
    if (!(*a4)(a2, a1))
      return 1;
    v10 = a1;
    v11 = a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2);
    if (!(*a4)(a3, a2))
      return 1;
    v10 = a2;
    v11 = a3;
LABEL_9:
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a3);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(_BYTE *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  _BYTE v10[32];
  uint64_t v11;

  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v10, a1);
  v11 = *(_QWORD *)(a1 + 32);
  if (((*a3)(v10, a2 - 40) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 40;
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 40;
    do
    {
      v6 = v7;
      if (v7 >= a2)
        break;
      v8 = (*a3)(v10, v7);
      v7 = v6 + 40;
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v6, a2);
    do
      v6 += 40;
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, a2) & 1) != 0);
  }
  if (v6 - 40 != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v6 - 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 - 8);
  }
  EQKit::OpticalKern::Glyph::Key::operator=(v6 - 40, (uint64_t)v10);
  *(_QWORD *)(v6 - 8) = v11;
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v10);
  return v6;
}

void sub_2411AB6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, _BYTE *))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[32];
  uint64_t v13;

  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v12, a1);
  v6 = 0;
  v13 = *(_QWORD *)(a1 + 32);
  do
  {
    v7 = (*a3)(a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= a2)
        break;
      a2 -= 40;
    }
    while (((*a3)(a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, v12));
  }
  v9 = a1 + v6;
  if (v8 < a2)
  {
    v10 = a2;
    do
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v9, v10);
      do
        v9 += 40;
      while (((*a3)(v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)(v10, v12));
    }
    while (v9 < v10);
  }
  if (v9 - 40 != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v9 - 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
  }
  EQKit::OpticalKern::Glyph::Key::operator=(v9 - 40, (uint64_t)v12);
  *(_QWORD *)(v9 - 8) = v13;
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v12);
  return v9 - 40;
}

void sub_2411AB858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v15[32];
  uint64_t v16;

  v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)(a2 - 40, a1))
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2 - 40);
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return v6;
    default:
      v7 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a1 + 40, a1 + 80, a3);
      v8 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    v7 = v8;
    v9 += 40;
    v8 += 40;
    if (v8 == a2)
      return 1;
  }
  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v15, v8);
  v16 = *(_QWORD *)(v8 + 32);
  v11 = v9;
  while (1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(_QWORD *)(a1 + v11 + 152) = *(_QWORD *)(a1 + v11 + 112);
    if (v11 == -80)
      break;
    v12 = (*a3)((uint64_t)v15, a1 + v11 + 40);
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
  *(_QWORD *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v15);
    goto LABEL_14;
  }
  v6 = v8 + 40 == a2;
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v15);
  return v6;
}

void sub_2411ABA80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[32];

  EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v5, a1);
  EQKit::OpticalKern::Glyph::Key::operator=(a1, a2);
  EQKit::OpticalKern::Glyph::Key::operator=(a2, (uint64_t)v5);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v5);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
}

void sub_2411ABAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)&a9);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a2, a3);
      if ((*a5)(a2, a1))
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a3, a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a2, a3);
        if ((*a6)(a2, a1))
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](a1, a2);
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 40 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a4, v9, v12);
        v12 -= 40;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a4, v9, a1);
        }
        v14 += 40;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 41)
    {
      v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  int64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a4 - a1) >> 3)))
    {
      v10 = (0x999999999999999ALL * ((a4 - a1) >> 3)) | 1;
      v11 = a1 + 40 * v10;
      v12 = 0x999999999999999ALL * ((a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        v10 = v12;
      }
      if (((*a2)(v11, v5) & 1) == 0)
      {
        EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v15, v5);
        v16 = *(_QWORD *)(v5 + 32);
        do
        {
          v13 = v11;
          EQKit::OpticalKern::Glyph::Key::operator=(v5, v11);
          *(_QWORD *)(v5 + 32) = *(_QWORD *)(v11 + 32);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = a1 + 40 * v14;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            v10 = v14;
          }
          v5 = v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
        *(_QWORD *)(v13 + 32) = v16;
        EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v15);
      }
    }
  }
}

void sub_2411ABF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  uint64_t v11;

  if (a4 >= 2)
  {
    EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v10, a1);
    v11 = *(_QWORD *)(a1 + 32);
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a3, a4);
    v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, (uint64_t)v10);
      *(_QWORD *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, a2 - 40);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 - 8);
      EQKit::OpticalKern::Glyph::Key::operator=(a2 - 40, (uint64_t)v10);
      *(_QWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v9 + 40, (uint64_t (**)(uint64_t, uint64_t))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - a1) >> 3));
    }
    EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v10);
  }
}

void sub_2411AC050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      v10 = v11;
    }
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v9);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 40 * (v4 >> 1);
    v10 = a2 - 40;
    if ((*a3)(v9, a2 - 40))
    {
      EQKit::OpticalKern::Glyph::Key::Key((uint64_t)v12, v10);
      v13 = *(_QWORD *)(a2 - 8);
      do
      {
        v11 = v9;
        EQKit::OpticalKern::Glyph::Key::operator=(v10, v9);
        *(_QWORD *)(v10 + 32) = *(_QWORD *)(v9 + 32);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 40 * v8;
        v10 = v11;
      }
      while (((*a3)(v9, (uint64_t)v12) & 1) != 0);
      EQKit::OpticalKern::Glyph::Key::operator=(v11, (uint64_t)v12);
      *(_QWORD *)(v11 + 32) = v13;
      EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)v12);
    }
  }
}

void sub_2411AC20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  const void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (const void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Glyph::Key::~Key((EQKit::OpticalKern::Glyph::Key *)(v4 - 40));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKitLayoutManager::EQKitLayoutManager(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  double v8;
  double v9;
  const Collection *v10;
  NSString *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  double v17;
  const Collection *v18;
  _BYTE v20[152];

  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "kerningManager");
  *(_QWORD *)(a1 + 48) = objc_msgSend(a3, "layoutConfig");
  objc_msgSend(a2, "baseFontSize");
  v9 = v8;
  v10 = (const Collection *)EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(a3, "fontManager"));
  v11 = (NSString *)objc_msgSend(a2, "baseFontName");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(a2, "textMacroFontSize");
  else
    objc_msgSend(a2, "baseFontSize");
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)(a1 + 56), v9, v10, v11, v12, 1);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = a3;
  *(_QWORD *)(a1 + 616) = a4;
  *(_QWORD *)a1 = a2;
  objc_msgSend(a2, "baseFontSize");
  *(_QWORD *)(a1 + 8) = v13;
  objc_msgSend(a2, "containerSize");
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v15;
  v16 = (const void *)objc_msgSend(a2, "baseFontName");
  *(_QWORD *)(a1 + 32) = v16;
  if (v16)
    CFRetain(v16);
  v17 = *(double *)(a1 + 8);
  v18 = (const Collection *)EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(a3, "fontManager"));
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)v20, v17, v18, (NSString *)objc_msgSend(a2, "baseFontName"), *(double *)(a1 + 136), 1);
  std::deque<EQKitLayoutContext>::push_back((_QWORD *)(a1 + 256), (EQKitLayoutContext *)v20);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v20);
  return a1;
}

void sub_2411ACCC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  EQKitLayoutContext *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v7;
  va_list va;

  va_start(va, a2);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)va);
  std::deque<EQKitLayoutTable>::~deque[abi:ne180100](v4 + 44);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:ne180100](v4 + 38);
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table((uint64_t)(v4 + 33));
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](v4 + 27);
  v7 = (void *)v2[50];
  if (v7)
  {
    v2[51] = v7;
    operator delete(v7);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:ne180100](v2 + 44);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](v2 + 38);
  std::deque<EQKitLayoutContext>::~deque[abi:ne180100](v5);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](v4);
  EQKitLayoutContext::~EQKitLayoutContext(v3);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::~EQKitLayoutManager(id *this)
{
  id v2;
  id v3;

  v2 = this[4];
  if (v2)
    CFRelease(v2);
  std::deque<EQKitLayoutTable>::~deque[abi:ne180100](this + 70);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:ne180100](this + 64);
  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table((uint64_t)(this + 59));
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 53);
  v3 = this[50];
  if (v3)
  {
    this[51] = v3;
    operator delete(v3);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:ne180100](this + 44);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 38);
  std::deque<EQKitLayoutContext>::~deque[abi:ne180100](this + 32);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 26);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)(this + 7));
}

unint64_t EQKitLayoutManager::layoutContext(EQKitLayoutManager *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 37);
  if (v1)
    return *(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v1 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
         + 152 * ((v1 + *((_QWORD *)this + 36) - 1) % 0x1AuLL);
  else
    return (unint64_t)this + 56;
}

double EQKitLayoutManager::leftSpaceForOperator(uint64_t a1, void *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  EQKitLength *v9;
  EQKitLength *v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  double v14;

  v4 = *(_QWORD *)(a1 + 296);
  if (v4)
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v4 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
       + 152 * ((v4 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v5 = a1 + 56;
  v6 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  v9 = (EQKitLength *)EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (v9)
  {
    v10 = v9;
    v11 = EQKitLength::resolveToAbsoluteWithSize(v9, *(double *)(v5 + 24));
    if (v11 != 0.0)
    {
      v12 = *(_QWORD *)(a1 + 392) + *(_QWORD *)(a1 + 384) - 1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * (v12 / 0x19)) + 160 * (v12 % 0x19) + 152) == 2)
      {
        if (*((char *)v10 + 48) < 0)
        {
          v14 = *((double *)v10 + 5);
        }
        else
        {
          v13 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, 1);
        }
        v11 = v11 * v14;
      }
    }
  }
  else
  {
    v11 = 0.0;
  }
  return EQKitLayoutManager::lengthForAttribute((_QWORD *)a1, 10, (uint64_t)a2, v11);
}

uint64_t EQKitLayoutManager::operatorForm(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  int v16;

  v14 = 0;
  v4 = *(_QWORD *)(a1 + 616);
  v15 = a2;
  v16 = 15;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 344, (uint64_t)&v15, &v14);
  result = v14;
  if (!v14)
  {
    v6 = objc_msgSend(a2, "operatorId");
    result = EQKit::Config::Operator::Dictionary::formForOperatorId((EQKit::Config::Operator::Dictionary *)objc_msgSend(*(id *)(a1 + 608), "operatorDictionary"), v6);
    v14 = result;
    if (!(_DWORD)result)
    {
      v7 = EQKit::Config::Operator::Dictionary::formMaskForOperatorId((EQKit::Config::Operator::Dictionary *)objc_msgSend(*(id *)(a1 + 608), "operatorDictionary"), v6);
      v8 = *(_QWORD *)(a1 + 248);
      if (v8)
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216)
                                   + (((unint64_t)(v8 + *(_QWORD *)(a1 + 240) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v8 + *(_QWORD *)(a1 + 240) - 1) & 0x1FF));
      v9 = v8 & v7;
      if ((v7 & 8) != 0)
        v10 = 3;
      else
        v10 = 2;
      if ((v7 & 2) != 0)
        v11 = 1;
      else
        v11 = v10;
      if ((v9 & 4) != 0)
        v12 = 2;
      else
        v12 = v11;
      if ((v9 & 8) != 0)
        v13 = 3;
      else
        v13 = v12;
      if ((v9 & 2) != 0)
        return 1;
      else
        return v13;
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::fontCollection(id *this)
{
  return EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(this[76], "fontManager"));
}

double EQKitLayoutManager::lengthForAttribute(_QWORD *a1, int a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v10[2];
  uint64_t v11;
  int v12;

  LODWORD(v10[0]) = 1;
  v10[1] = 0.0;
  v11 = a3;
  v6 = a1[77];
  v12 = a2;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v6, v6 + 32, (uint64_t)&v11, (uint64_t)v10))
  {
    v7 = a1[37];
    if (v7)
      v8 = *(_QWORD *)(a1[33] + 8 * ((v7 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v7 + a1[36] - 1) % 0x1AuLL);
    else
      v8 = (uint64_t)(a1 + 7);
    return EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v10, v8, a4);
  }
  return a4;
}

double EQKitLayoutManager::rightSpaceForOperator(uint64_t a1, void *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  double v14;

  v4 = *(_QWORD *)(a1 + 296);
  if (v4)
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v4 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
       + 152 * ((v4 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v5 = a1 + 56;
  v6 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  v9 = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (v9)
  {
    v10 = v9;
    v11 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)(v9 + 16), *(double *)(v5 + 24));
    if (v11 != 0.0)
    {
      v12 = *(_QWORD *)(a1 + 392) + *(_QWORD *)(a1 + 384) - 1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * (v12 / 0x19)) + 160 * (v12 % 0x19) + 152) == 2)
      {
        if (*(char *)(v10 + 48) < 0)
        {
          v14 = *(double *)(v10 + 40);
        }
        else
        {
          v13 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, 1);
        }
        v11 = v11 * v14;
      }
    }
  }
  else
  {
    v11 = 0.0;
  }
  return EQKitLayoutManager::lengthForAttribute((_QWORD *)a1, 11, (uint64_t)a2, v11);
}

CGPath *EQKitLayoutManager::createPathForNotation(_QWORD *a1, void *a2, int a3)
{
  CGPath *Mutable;
  double v7;
  double v8;
  __n128 v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGPath *v18;
  double v19;
  double v20;

  Mutable = CGPathCreateMutable();
  objc_msgSend(a2, "width");
  v8 = v7;
  objc_msgSend(a2, "vsize");
  v10 = v9.n128_f64[0];
  v11 = a1[37];
  if (v11)
    v12 = *(_QWORD *)(a1[33] + 8 * ((v11 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v11 + a1[36] - 1) % 0x1AuLL);
  else
    v12 = (unint64_t)(a1 + 7);
  v13 = *(_QWORD *)(v12 + 88);
  if ((*(_BYTE *)(v12 + 120) & 1) != 0)
    v9.n128_u64[0] = *(_QWORD *)(v12 + 128);
  else
    v9.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v12);
  v14 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v13 + 56))(v13, 24, v12 + 8, v9);
  v15 = v14;
  switch(a3)
  {
    case 1:
      v16 = -v14;
      v17 = v10 + v14;
      v18 = Mutable;
      v19 = -v14;
      goto LABEL_13;
    case 2:
      CGPathMoveToPoint(Mutable, 0, -v14, -v14);
      v20 = v8 + v15;
      goto LABEL_11;
    case 3:
      v20 = v8 * 0.5;
      CGPathMoveToPoint(Mutable, 0, v20, -v14);
LABEL_11:
      v16 = v10 + v15;
      goto LABEL_14;
    case 4:
      v19 = -v14;
      v16 = v10 * 0.5;
      v18 = Mutable;
      v17 = v10 * 0.5;
LABEL_13:
      CGPathMoveToPoint(v18, 0, v19, v17);
      v20 = v8 + v15;
LABEL_14:
      CGPathAddLineToPoint(Mutable, 0, v20, v16);
      break;
    default:
      return Mutable;
  }
  return Mutable;
}

EQKitBox *EQKitLayoutManager::layoutExpression(EQKitLayoutManager *a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, double *a6, BOOL *a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  EQKitBox *v14;
  char v15;
  BOOL v16;
  id v18[2];
  id v19;
  int v20;
  __int16 v21;
  _QWORD v22[10];
  _QWORD v23[4];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];

  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  *a3 = 0;
  v26[3] = a3;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  *a4 = 0;
  v25[3] = a4;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  *a5 = 0;
  v24[3] = a5;
  *a6 = 1.79769313e308;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v23[3] = 0;
  LODWORD(v18[0]) = 0;
  v11 = *((_QWORD *)a1 + 77);
  v19 = a2;
  v20 = 7;
  v12 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v11, v11 + 320, (uint64_t)&v19, v18) ^ 1;
  if (!LODWORD(v18[0]))
    v12 = 1;
  if (LODWORD(v18[0]) == 2)
    v13 = 1;
  else
    v13 = v12;
  EQKitLayoutManager::beginRow(a1, 1, 0);
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke;
  v22[3] = &unk_25112A6E8;
  v22[4] = a2;
  v22[5] = v23;
  v22[6] = v26;
  v22[7] = v25;
  v22[8] = v24;
  v22[9] = a1;
  EQKitLayoutManager::layout(a1, a2, 0, v13, 0, (uint64_t)v22);
  EQKitLayoutManager::endRow(a1, (EQKit::ILayout *)&v19);
  v14 = (EQKitBox *)v19;
  if (*(_BYTE *)(*((_QWORD *)a1 + 6) + 5))
    v15 = v13;
  else
    v15 = 1;
  v16 = (v15 & 1) == 0 && (v21 & 0x1C00u) > 0x800;
  *a7 = v16;
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v18, 0, 0.0);
  if (EQKit::ILayout::getOffsetOfKind((uint64_t)&v19, 1, v18))
    *a6 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v18, v14);
  EQKit::ILayoutOffset::~ILayoutOffset(v18);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v19);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  return v14;
}

void sub_2411AD678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 80), 8);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::beginRow(EQKitLayoutManager *this, char a2, BOOL a3)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE v5[160];

  if ((a2 & 1) != 0 || (v3 = *((_QWORD *)this + 49)) == 0)
  {
    v4 = (_QWORD *)((char *)this + 352);
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v5, a3);
    std::deque<EQKitLayoutRow>::push_back(v4, (EQKitLayoutRow *)v5);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v5);
  }
  else
  {
    EQKitLayoutRow::beginNestedRow(*(_QWORD *)(*((_QWORD *)this + 45) + 8 * ((v3 + *((_QWORD *)this + 48) - 1) / 0x19uLL))+ 160 * ((v3 + *((_QWORD *)this + 48) - 1) % 0x19uLL));
  }
}

void sub_2411AD784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  EQKitLayoutContext *v6;
  const __CFString *v7;
  const __CFString *v8;
  void *v9;
  const void *v10;
  const __CTFont *v11;

  if (a1[4] == a2)
  {
    v3 = (_QWORD *)a1[9];
    v4 = v3[37];
    if (*(_BYTE *)(v3[6] + 4))
    {
      if (v4)
        v5 = *(_QWORD *)(v3[33] + 8 * ((v4 + v3[36] - 1) / 0x1AuLL)) + 152 * ((v4 + v3[36] - 1) % 0x1AuLL);
      else
        v5 = (unint64_t)(v3 + 7);
      v7 = (const __CFString *)v3[4];
      if (v7)
        v8 = v7;
      else
        v8 = CFSTR("Times New Roman");
      v9 = CTFontCreateWithName(v8, *(CGFloat *)(v5 + 24), 0);
    }
    else
    {
      if (v4)
        v6 = (EQKitLayoutContext *)(*(_QWORD *)(v3[33] + 8 * ((v4 + v3[36] - 1) / 0x1AuLL))
                                  + 152 * ((v4 + v3[36] - 1) % 0x1AuLL));
      else
        v6 = (EQKitLayoutContext *)(v3 + 7);
      v10 = (const void *)EQKitLayoutContext::font(v6);
      v9 = (void *)CFRetain(v10);
    }
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v9;
    v11 = *(const __CTFont **)(*(_QWORD *)(a1[5] + 8) + 24);
    if (v11)
    {
      **(CGFloat **)(*(_QWORD *)(a1[6] + 8) + 24) = CTFontGetAscent(v11);
      **(CGFloat **)(*(_QWORD *)(a1[7] + 8) + 24) = CTFontGetDescent(*(CTFontRef *)(*(_QWORD *)(a1[5] + 8) + 24));
      **(CGFloat **)(*(_QWORD *)(a1[8] + 8) + 24) = CTFontGetLeading(*(CTFontRef *)(*(_QWORD *)(a1[5] + 8) + 24));
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1[5] + 8) + 24));
    }
  }
}

void EQKitLayoutManager::endRow(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutRow *v8;
  unint64_t v9;
  uint64_t *v10[20];

  EQKit::ILayout::ILayout(a2, 0);
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    v5 = v4 + *((_QWORD *)this + 48) - 1;
    v6 = *(_QWORD *)(*((_QWORD *)this + 45) + 8 * (v5 / 0x19));
    v7 = v5 % 0x19;
    v8 = (EQKitLayoutRow *)(v6 + 160 * v7);
    if (*((_QWORD *)v8 + 8))
    {
      EQKitLayoutRow::endNestedRow(v6 + 160 * v7);
    }
    else if (v4 >= 2 && *(_BYTE *)(v6 + 160 * v7 + 156))
    {
      EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v10, (const EQKitLayoutRow *)(v6 + 160 * v7));
      std::deque<EQKitLayoutRow>::pop_back((_QWORD *)this + 44);
      v9 = *((_QWORD *)this + 49) + *((_QWORD *)this + 48) - 1;
      EQKitLayoutRow::addChild((EQKitLayoutRow *)(*(_QWORD *)(*((_QWORD *)this + 45) + 8 * (v9 / 0x19)) + 160 * (v9 % 0x19)), (const EQKitLayoutRow *)v10);
      EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v10);
    }
    else
    {
      EQKitLayoutRow::resolveKerning((EQKitLayoutRow *)(v6 + 160 * v7), *((const EQKit::Kerning::Manager **)this + 5));
      EQKitLayoutRow::overallLayout(v8, v10);
      EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v10);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
      std::deque<EQKitLayoutRow>::pop_back((_QWORD *)this + 44);
    }
  }
}

void sub_2411ADA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, EQKit::ILayout *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *((_QWORD *)a1 + 37);
  if (v4)
    v5 = *(_QWORD *)(*((_QWORD *)a1 + 33) + 8 * ((v4 + *((_QWORD *)a1 + 36) - 1) / 0x1AuLL))
       + 152 * ((v4 + *((_QWORD *)a1 + 36) - 1) % 0x1AuLL);
  else
    v5 = (unint64_t)a1 + 56;
  EQKitLayoutManager::layoutBox(a1, a2, 0, *(unsigned __int8 *)(v5 + 16), 0, 0, a3, a4);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, EQKit::ILayout *a8@<X8>)
{
  unint64_t v16;

  EQKitLayoutManager::beginRow(a1, 1, 0);
  v16 = *((_QWORD *)a1 + 49) + *((_QWORD *)a1 + 48) - 1;
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 45) + 8 * (v16 / 0x19)) + 160 * (v16 % 0x19) + 152) = a5;
  EQKitLayoutManager::layout(a1, a2, a3, a4, a6, a7);
  EQKitLayoutManager::endRow(a1, a8);
}

void EQKitLayoutManager::layout(EQKitLayoutManager *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 isOperatorPaddingRequired;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  int isEmbellishedOperatorRoot;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  int v34;
  _OWORD v35[2];
  void *v36;
  int v37;
  uint64_t v38;
  id v39[2];

  v38 = a6;
  v39[0] = a2;
  v11 = *((_QWORD *)a1 + 37) + *((_QWORD *)a1 + 36) - 1;
  v12 = *(_QWORD *)(*((_QWORD *)a1 + 33) + 8 * (v11 / 0x1A));
  if (a6)
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back((_QWORD *)a1 + 38, &v38);
  LODWORD(v35[0]) = 0;
  v13 = *((_QWORD *)a1 + 77);
  v36 = a2;
  v37 = 8;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v13, v13 + 8, (uint64_t)&v36, v35);
  if (LODWORD(v35[0]) == 2)
  {
    a4 = 1;
  }
  else if (LODWORD(v35[0]) == 1)
  {
    a4 = 0;
  }
  isOperatorPaddingRequired = EQKitLayoutManager::isOperatorPaddingRequired(a1);
  v16 = (_QWORD *)*((_QWORD *)a1 + 51);
  v15 = *((_QWORD *)a1 + 52);
  v34 = isOperatorPaddingRequired;
  if ((unint64_t)v16 >= v15)
  {
    v18 = *((_QWORD *)a1 + 50);
    v19 = ((uint64_t)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = v15 - v18;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)a1 + 416, v22);
    else
      v23 = 0;
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *(_QWORD *)v24 = a2;
    v17 = v24 + 8;
    v27 = (char *)*((_QWORD *)a1 + 50);
    v26 = (char *)*((_QWORD *)a1 + 51);
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = (char *)*((_QWORD *)a1 + 50);
    }
    *((_QWORD *)a1 + 50) = v24;
    *((_QWORD *)a1 + 51) = v17;
    *((_QWORD *)a1 + 52) = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = a2;
    v17 = v16 + 1;
  }
  *((_QWORD *)a1 + 51) = v17;
  v29 = v39[0];
  EQKitLayoutContext::EQKitLayoutContext(&v36, a1, v12 + 152 * (v11 % 0x1A), v39[0], a3, a4, a5);
  std::deque<EQKitLayoutContext>::push_back((_QWORD *)a1 + 32, (EQKitLayoutContext *)&v36);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)&v36);
  isEmbellishedOperatorRoot = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, v29);
  if (isEmbellishedOperatorRoot)
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back((_QWORD *)a1 + 53, v39);
  EQKit::Layout::Schemata::Schemata((uint64_t)&v36);
  *(id *)&v35[0] = v39[0];
  v31 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((_QWORD *)a1 + 59, v35);
  if (v31)
  {
    EQKitLayoutManager::schemataForStretchedOperator((uint64_t)a1, (uint64_t)(v31 + 3), (uint64_t)v35);
    EQKit::Layout::Schemata::operator=((uint64_t)&v36, (uint64_t)v35);
  }
  else
  {
    if (v39[0])
      objc_msgSend(v39[0], "layoutSchemata");
    else
      memset(v35, 0, sizeof(v35));
    EQKit::Layout::Schemata::operator=((uint64_t)&v36, (uint64_t)v35);
  }
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v35);
  if (isEmbellishedOperatorRoot)
    v32 = v39[0];
  else
    v32 = 0;
  EQKitLayoutManager::layoutSchemata(a1, (EQKit::Layout::Schemata *)&v36, v34, v32);
  v33 = *((_QWORD *)a1 + 43);
  if (v33)
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 39)
                                              + (((unint64_t)(v33 + *((_QWORD *)a1 + 42) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v33 + *((_QWORD *)a1 + 42) - 1) & 0x1FF))
                      + 16))();
  if (isEmbellishedOperatorRoot)
  {
    --*((_QWORD *)a1 + 58);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1 + 53, 1);
  }
  std::deque<EQKitLayoutContext>::pop_back((_QWORD *)a1 + 32);
  *((_QWORD *)a1 + 51) -= 8;
  if (v38)
  {
    --*((_QWORD *)a1 + 43);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)a1 + 38, 1);
  }
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v36);
}

void sub_2411ADEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layout(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a1[37];
  if (v3)
    v4 = *(_QWORD *)(a1[33] + 8 * ((v3 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v3 + a1[36] - 1) % 0x1AuLL);
  else
    v4 = (unint64_t)(a1 + 7);
  return EQKitLayoutManager::layout(a1, a2, 0, *(unsigned __int8 *)(v4 + 16), 0, a3);
}

void EQKitLayoutManager::layoutIntoRow(uint64_t a1, EQKitLayoutRow *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _BYTE v13[56];
  _BYTE v14[160];

  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  EQKitLayoutManager::layout(a1, a3, a4, a5, 0, a6);
  v12 = *(_QWORD *)(a1 + 392);
  if (v12)
  {
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v14, (const EQKitLayoutRow *)(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * ((v12 + *(_QWORD *)(a1 + 384) - 1) / 0x19uLL))+ 160 * ((v12 + *(_QWORD *)(a1 + 384) - 1) % 0x19uLL)));
    EQKitLayoutRow::operator=(a2, (EQKitLayoutRow *)v14);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v14);
    EQKitLayoutRow::resolveKerning(a2, *(const EQKit::Kerning::Manager **)(a1 + 40));
    EQKitLayoutRow::buildAlignmentGroups(a2);
  }
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)v13);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v13);
}

void sub_2411AE0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addHSpace(EQKitLayoutManager *this, double a2)
{
  EQKitHSpace *v3;
  _BYTE v4[56];
  _BYTE v5[56];

  if (a2 != 0.0)
  {
    v3 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a2);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v5, &v3->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v5, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v5, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v4, (const EQKit::ILayout *)v5);
    EQKitLayoutManager::addRowChild(this, (uint64_t)v4, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v4);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v5);
  }
}

void sub_2411AE15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a16);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addRowChild(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  if (a1[49])
  {
    v6 = *(unsigned __int16 *)(a2 + 32);
    v7 = (v6 >> 4) & 3;
    v8 = 0;
    v9 = 0;
    if (v7 != 3)
    {
      EQKitLayoutManager::lengthForMetric((uint64_t)a1, (v7 + 30));
      v9 = v10;
      LOWORD(v6) = *(_WORD *)(a2 + 32);
    }
    v11 = v6 >> 6;
    if (v11 != 3)
    {
      EQKitLayoutManager::lengthForMetric((uint64_t)a1, (v11 + 30));
      v8 = v12;
    }
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 48) = v8;
    v13 = a1[49] + a1[48] - 1;
    EQKitLayoutRow::addChild(*(_QWORD *)(a1[45] + 8 * (v13 / 0x19)) + 160 * (v13 % 0x19), a3, (const EQKit::ILayout *)a2);
  }
}

void EQKitLayoutManager::addOperatorLeftSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  EQKitHSpace *v8;
  _BYTE v9[56];
  _BYTE v10[56];

  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 45) + 8 * ((v4 + *((_QWORD *)this + 48) - 1) / 0x19uLL))
       + 160 * ((v4 + *((_QWORD *)this + 48) - 1) % 0x19uLL);
    v6 = *(double *)(v5 + 144);
    v7 = a2 - v6;
    if (a2 - v6 < 0.0)
      v7 = 0.0;
    if (v6 > 0.0)
      a2 = v7;
    *(_QWORD *)(v5 + 144) = 0;
  }
  if (a2 != 0.0)
  {
    v8 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a2);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v10, &v8->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v10, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v10, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v9, (const EQKit::ILayout *)v10);
    EQKitLayoutManager::addRowChild(this, (uint64_t)v9, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2411AE378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a16);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addOperatorRightSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v3;
  EQKitHSpace *v4;
  _BYTE v5[56];
  _BYTE v6[56];

  v3 = *((_QWORD *)this + 49);
  if (v3)
    *(double *)(*(_QWORD *)(*((_QWORD *)this + 45) + 8 * ((v3 + *((_QWORD *)this + 48) - 1) / 0x19uLL))
              + 160 * ((v3 + *((_QWORD *)this + 48) - 1) % 0x19uLL)
              + 144) = a2;
  if (a2 != 0.0)
  {
    v4 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a2);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v6, &v4->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v6, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v6, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v5, (const EQKit::ILayout *)v6);
    EQKitLayoutManager::addRowChild(this, (uint64_t)v5, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v5);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v6);
  }
}

void sub_2411AE490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a16);
  _Unwind_Resume(a1);
}

char *EQKitLayoutManager::registerVerticalStretchedOperator(_QWORD *a1, void *a2, double a3, double a4)
{
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  double v10;
  double v11;
  char *v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v18[2];
  uint64_t v19;
  double v20;
  double v21;
  void *v22;

  v22 = a2;
  v20 = a4;
  v21 = a3;
  v7 = (uint64_t)(a1 + 59);
  v8 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>(a1 + 59, &v22);
  if (v8)
  {
    v9 = (char *)(v8 + 2);
    if (*((_DWORD *)v8 + 8) != 2)
      return v9 + 8;
    v11 = *((double *)v8 + 5);
    v10 = *((double *)v8 + 6);
    if (v11 >= a3 && v10 >= a4)
      return v9 + 8;
    if (v11 <= a3)
      v11 = a3;
    if (v10 <= a4)
      v10 = a4;
    v20 = v10;
    v21 = v11;
  }
  EQKitLayoutManager::adjustStretchyVSize(a1, v22, &v21, &v20);
  EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v18, (uint64_t)v22, 2, v21, v20, 0.0);
  v13 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::__emplace_unique_key_args<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},objc_object  {objcproto15EQKitLayoutNode13EQKitOperator} const&,objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}* const&>(v7, &v22, &v22, (uint64_t)v18);
  if (!v14)
  {
    v15 = v19;
    v16 = v18[1];
    *(_OWORD *)(v13 + 24) = v18[0];
    *(_OWORD *)(v13 + 40) = v16;
    *((_QWORD *)v13 + 7) = v15;
  }
  v9 = v13 + 16;
  return v9 + 8;
}

void EQKitLayoutManager::adjustStretchyVSize(_QWORD *a1, void *a2, double *a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isOperatorSymmetric;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGFloat MaxY;
  uint64_t v24;
  double Height;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34[2];
  double v35[2];
  void *v36;
  int v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v8 = a1[37];
  if (v8)
    v9 = *(_QWORD *)(a1[33] + 8 * ((v8 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v8 + a1[36] - 1) % 0x1AuLL);
  else
    v9 = (uint64_t)(a1 + 7);
  v10 = objc_msgSend(a2, "operatorUnicharOrNul");
  if ((_DWORD)v10)
  {
    v11 = v10;
    isOperatorSymmetric = EQKitLayoutManager::isOperatorSymmetric((uint64_t)a1, a2);
    if ((*(_BYTE *)(v9 + 120) & 2) != 0)
      v13 = *(double *)(v9 + 136);
    else
      v13 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v9);
    v17 = (*(double (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 88) + 136))(*(_QWORD *)(v9 + 88), v11, v9 + 8);
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v21 = *a3 + *a4;
    if (v21 == 0.0)
    {
      v22 = v17;
      *a3 = -CGRectGetMinY(*(CGRect *)(&v14 - 1));
      v38.origin.x = v17;
      v38.origin.y = v18;
      v38.size.width = v19;
      v38.size.height = v20;
      MaxY = CGRectGetMaxY(v38);
      *a4 = MaxY;
      v21 = MaxY + *a3;
    }
    LODWORD(v35[0]) = 1;
    v35[1] = 0.0;
    v36 = a2;
    v24 = a1[77];
    v37 = 41;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v24, v24 + 32, (uint64_t)&v36, (uint64_t)v35))
    {
      v39.origin.x = v17;
      v39.origin.y = v18;
      v39.size.width = v19;
      v39.size.height = v20;
      Height = CGRectGetHeight(v39);
      v26 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v35, v9, Height);
      if (v26 < v21)
      {
        if (isOperatorSymmetric)
        {
          *a3 = v13 + v26 * 0.5;
          v27 = v26 * 0.5 - v13;
        }
        else if (v21 == 0.0)
        {
          v27 = v26 * 0.5;
          *a3 = v26 * 0.5;
        }
        else
        {
          *a3 = v26 / v21 * *a3;
          v27 = v26 / v21 * *a4;
        }
        *a4 = v27;
        v21 = v26;
      }
    }
    LODWORD(v34[0]) = 1;
    v34[1] = 0.0;
    v28 = a1[77];
    v36 = a2;
    v37 = 40;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v28, v28 + 32, (uint64_t)&v36, (uint64_t)v34))
    {
      v40.origin.x = v17;
      v40.origin.y = v18;
      v40.size.width = v19;
      v40.size.height = v20;
      v29 = CGRectGetHeight(v40);
      v30 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v34, v9, v29);
      if (v30 > v21)
      {
        if (isOperatorSymmetric)
        {
          v31 = v30 * 0.5;
          *a3 = v13 + v31;
          v32 = v31 - v13;
        }
        else if (v21 == 0.0)
        {
          v32 = v30 * 0.5;
          *a3 = v32;
        }
        else
        {
          v33 = v30 / v21;
          *a3 = v33 * *a3;
          v32 = v33 * *a4;
        }
        *a4 = v32;
      }
    }
  }
}

char *EQKitLayoutManager::registerHorizontalStretchedOperator(_QWORD *a1, void *a2, char a3, double a4)
{
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  double v11;
  char *v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v17[2];
  uint64_t v18;
  void *v19;

  v19 = a2;
  v7 = (uint64_t)(a1 + 59);
  v8 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>(a1 + 59, &v19);
  if ((a3 & 1) != 0 || !v8 || (v9 = (char *)(v8 + 2), *((_DWORD *)v8 + 8) == 1) && *((double *)v8 + 7) < a4)
  {
    v10 = (uint64_t)v19;
    v11 = EQKitLayoutManager::adjustStretchyWidth(a1, v19, a4);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v17, v10, 1, 0.0, 0.0, v11);
    v12 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::__emplace_unique_key_args<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},objc_object  {objcproto15EQKitLayoutNode13EQKitOperator} const&,objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}* const&>(v7, &v19, &v19, (uint64_t)v17);
    if (!v13)
    {
      v14 = v18;
      v15 = v17[1];
      *(_OWORD *)(v12 + 24) = v17[0];
      *(_OWORD *)(v12 + 40) = v15;
      *((_QWORD *)v12 + 7) = v14;
    }
    v9 = v12 + 16;
  }
  return v9 + 8;
}

double EQKitLayoutManager::adjustStretchyWidth(_QWORD *a1, void *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  uint64_t v18;
  double Width;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v25[2];
  double v26[2];
  void *v27;
  int v28;
  CGRect v29;
  CGRect v30;

  v6 = a1[37];
  if (v6)
    v7 = *(_QWORD *)(a1[33] + 8 * ((v6 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v6 + a1[36] - 1) % 0x1AuLL);
  else
    v7 = (uint64_t)(a1 + 7);
  v8 = objc_msgSend(a2, "operatorUnicharOrNul");
  if ((_DWORD)v8)
  {
    v9 = a1[37];
    if (v9)
      v10 = *(_QWORD *)(a1[33] + 8 * ((v9 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v9 + a1[36] - 1) % 0x1AuLL);
    else
      v10 = (unint64_t)(a1 + 7);
    v11 = (*(double (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v7 + 88) + 136))(*(_QWORD *)(v7 + 88), v8, v10 + 8);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    LODWORD(v26[0]) = 1;
    v26[1] = 0.0;
    v27 = a2;
    v18 = a1[77];
    v28 = 41;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v18, v18 + 32, (uint64_t)&v27, (uint64_t)v26))
    {
      v29.origin.x = v11;
      v29.origin.y = v13;
      v29.size.width = v15;
      v29.size.height = v17;
      Width = CGRectGetWidth(v29);
      v20 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v26, v7, Width);
      if (v20 < a3)
        a3 = v20;
    }
    LODWORD(v25[0]) = 1;
    v25[1] = 0.0;
    v21 = a1[77];
    v27 = a2;
    v28 = 40;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v21, v21 + 32, (uint64_t)&v27, (uint64_t)v25))
    {
      v30.origin.x = v11;
      v30.origin.y = v13;
      v30.size.width = v15;
      v30.size.height = v17;
      v22 = CGRectGetWidth(v30);
      v23 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v25, v7, v22);
      if (v23 > a3)
        return v23;
    }
  }
  return a3;
}

void EQKitLayoutManager::alignBoxHorizontally(const EQKit::ILayout *a1@<X1>, int a2@<W2>, int a3@<W3>, EQKit::ILayout *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  double v12;
  double v13;
  id v14;
  double v15;
  EQKitLayoutManager *v16;
  double v17;
  double v18;
  _BYTE v19[56];
  CGRect v20;

  EQKit::ILayout::ILayout(a4, a1);
  if (a2 == 2)
  {
    v14 = *(id *)a1;
    if (a3)
    {
      objc_msgSend(v14, "erasableBounds");
      v12 = 0.0 - CGRectGetMidX(v20) + a6;
    }
    else
    {
      objc_msgSend(v14, "width");
      v12 = (a5 - v15) * 0.5;
    }
  }
  else
  {
    v12 = 0.0;
    if (a2 == 3)
    {
      objc_msgSend(*(id *)a1, "width");
      v12 = a5 - v13;
    }
  }
  v16 = (EQKitLayoutManager *)objc_msgSend(*(id *)a1, "width");
  v18 = a5 - (v12 + v17);
  if (v12 != 0.0 || v18 != 0.0)
  {
    EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(v16, a1, v12, v18, (EQKit::ILayout *)v19);
    EQKit::ILayout::operator=((uint64_t)a4, (uint64_t)v19);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v19);
  }
}

void sub_2411AEBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(EQKitLayoutManager *this@<X0>, const EQKit::ILayout *a2@<X1>, double a3@<D0>, double a4@<D1>, EQKit::ILayout *a5@<X8>)
{
  void *v9;
  id v10;

  v9 = (void *)MEMORY[0x2426908D8](this);
  if (*(_QWORD *)a2)
  {
    v10 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 3);
    if (a3 != 0.0)
      objc_msgSend(v10, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a3));
    objc_msgSend(v10, "addObject:", *(_QWORD *)a2);
    if (a4 != 0.0)
      objc_msgSend(v10, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a4));
    EQKit::ILayout::ILayout(a5, a2);
    EQKit::ILayout::setBox((EQKitBox *)a5, (EQKitBox *)-[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v10));
  }
  else
  {
    EQKit::ILayout::ILayout(a5, (EQKitBox *)-[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a3 + a4));
  }
  objc_autoreleasePoolPop(v9);
}

void sub_2411AED20(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitLayoutManager::isOperatorPaddingRequired(EQKitLayoutManager *this)
{
  unint64_t v1;
  uint64_t i;
  void *v5;
  int v6;

  v1 = *((_QWORD *)this + 49) + *((_QWORD *)this + 48) - 1;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 45) + 8 * (v1 / 0x19)) + 160 * (v1 % 0x19) + 152) != 1)
  {
    for (i = *((_QWORD *)this + 51); i != *((_QWORD *)this + 50); i -= 8)
    {
      v5 = *(void **)(i - 8);
      v6 = objc_msgSend(v5, "isOperatorPaddingRequired");
      if (v6)
        return v6 == 2;
    }
  }
  return 0;
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorRoot(_QWORD *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
  {
    v5 = a1[58];
    if (v5)
    {
      v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1[54] + (((unint64_t)(v5 + a1[57] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v5 + a1[57] - 1) & 0x1FF)), "operatorCore");
      return v6 != objc_msgSend(a2, "operatorCore");
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void EQKitLayoutManager::schemataForStretchedOperator(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  int v7;
  _OWORD v8[2];

  EQKit::Layout::Schemata::Schemata(a3);
  v6 = *(void **)a2;
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 == 1)
  {
    if (EQKitLayoutManager::isOperatorStretchableInAxis(a1, *(void **)a2, 1))
    {
      if (v6)
        objc_msgSend(v6, "stretchyLayoutSchemata");
      else
        memset(v8, 0, sizeof(v8));
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v8);
    }
    else
    {
      if (!v6)
        return;
      objc_msgSend(v6, "layoutSchemata");
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v8);
    }
    goto LABEL_13;
  }
  if (v7 == 2)
  {
    EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(a1, *(void **)a2, a3);
    return;
  }
  if (v6)
  {
    objc_msgSend(*(id *)a2, "layoutSchemata");
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v8);
LABEL_13:
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v8);
  }
}

void sub_2411AEF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::Layout::Schemata *v9;

  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&a9);
  EQKit::Layout::Schemata::~Schemata(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSchemata(EQKitLayoutManager *a1, EQKit::Layout::Schemata *a2, int a3, void *a4)
{
  const EQKit::Layout::Schemata *v8;
  int v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  EQKitHVSpace *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  EQKitBox *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  EQKitAttributionBox *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  _BYTE v30[56];
  _BYTE v31[56];
  _QWORD v32[7];
  id v33[7];
  _QWORD v34[7];

  EQKit::ILayout::ILayout((EQKit::ILayout *)v34, 0);
  v9 = *((_DWORD *)a2 + 2);
  if (a4)
    v10 = a3;
  else
    v10 = 0;
  if (((v9 - 5) & 0xFFFFFFFD) != 0)
    v11 = v10;
  else
    v11 = 0;
  if (v11 == 1)
  {
    v12 = EQKitLayoutManager::leftSpaceForOperator((uint64_t)a1, (void *)objc_msgSend(a4, "operatorCore"));
    EQKitLayoutManager::addOperatorLeftSpace(a1, v12);
    v9 = *((_DWORD *)a2 + 2);
  }
  switch(v9)
  {
    case 1:
      v13 = EQKit::Layout::Schemata::nodeSchemata(a2);
      EQKitLayoutManager::layout(a1, v13, 0);
      break;
    case 2:
      EQKitLayoutManager::layoutRow(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 3:
      v14 = objc_msgSend((id)EQKit::Layout::Schemata::phantomSchemata(a2), "schemataChild");
      EQKitLayoutManager::layoutBox(a1, v14, 0, (EQKit::ILayout *)v33);
      v15 = [EQKitHVSpace alloc];
      objc_msgSend(v33[0], "width");
      v17 = v16;
      objc_msgSend(v33[0], "height");
      v19 = v18;
      objc_msgSend(v33[0], "depth");
      v21 = -[EQKitHVSpace initWithWidth:height:depth:](v15, "initWithWidth:height:depth:", v17, v19, v20);
      EQKit::ILayout::ILayout((EQKit::ILayout *)v32, v21);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v32);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v32);

      goto LABEL_39;
    case 4:
      EQKitLayoutManager::layoutSubsuperscript(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 5:
      EQKitLayoutManager::layoutUnderover(a2, (uint64_t)a1, a3, a4, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 6:
      EQKitLayoutManager::layoutRadical(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 7:
      EQKitLayoutManager::layoutFraction(a2, (uint64_t)a1, a3, a4, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 8:
      EQKitLayoutManager::layoutIdentifier(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 9:
      EQKitLayoutManager::layoutNumber(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 10:
      EQKitLayoutManager::layoutOperator(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 11:
      v32[0] = objc_msgSend((id)EQKit::Layout::Schemata::operatorSchemata(a2), "schemataOperator");
      v22 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((_QWORD *)a1 + 59, v32);
      v23 = v22;
      if (v22)
      {
        EQKitLayoutManager::layoutStretchOperator((uint64_t)a1, (uint64_t)(v22 + 3), (EQKit::ILayout *)v33);
        EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
        std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::erase((_QWORD *)a1 + 59, v23);
      }
      break;
    case 12:
      EQKitLayoutManager::layoutStack(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 13:
      EQKitLayoutManager::layoutStackGroup(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 14:
      EQKitLayoutManager::layoutStackRow(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 15:
      EQKitLayoutManager::layoutStackLine(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 16:
      EQKitLayoutManager::layoutStackCarries(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 17:
      EQKitLayoutManager::layoutStackCarry(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 18:
      EQKitLayoutManager::layoutLongDivision(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 19:
      EQKitLayoutManager::layoutTable(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 20:
      EQKitLayoutManager::layoutTableRow(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 21:
      EQKitLayoutManager::layoutNone((EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 22:
      EQKitLayoutManager::layoutText(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 23:
      EQKitLayoutManager::layoutPadded(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 24:
      EQKitLayoutManager::layoutSpace(a1, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 25:
      EQKitLayoutManager::layoutFenced(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 26:
      EQKitLayoutManager::layoutAlignGroup(a1, v8);
      break;
    case 27:
      EQKitLayoutManager::layoutAlignMark((EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
      goto LABEL_39;
    case 28:
      EQKitLayoutManager::layoutEnclose(a1, a2, (EQKit::ILayout *)v33);
      EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
LABEL_39:
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
      break;
    default:
      break;
  }
  if (v34[0])
  {
    if (EQKit::Layout::Schemata::automaticSourceAttribution(a2))
    {
      v24 = EQKit::Layout::Schemata::sourceAttribution((id *)a2);
      if (v24)
      {
        v25 = [EQKitAttributionBox alloc];
        EQKit::ILayout::ILayout((EQKit::ILayout *)v33, (EQKitBox *)-[EQKitAttributionBox initWithBox:attribution:](v25, "initWithBox:attribution:", v34[0], v24));
        EQKit::ILayout::operator=((uint64_t)v34, (uint64_t)v33);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
      }
    }
    EQKitLayoutManager::beginRow(a1, 0, 1);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v31, (const EQKit::ILayout *)v34);
    v26 = *((_QWORD *)a1 + 51);
    if (*((_QWORD *)a1 + 50) == v26)
      v27 = 0;
    else
      v27 = *(_QWORD *)(v26 - 8);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v31, v27);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v31);
    EQKitLayoutManager::endRow(a1, (EQKit::ILayout *)v30);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v30);
  }
  if (v11)
  {
    v28 = EQKitLayoutManager::rightSpaceForOperator((uint64_t)a1, (void *)objc_msgSend(a4, "operatorCore"));
    EQKitLayoutManager::addOperatorRightSpace(a1, v28);
  }
  else if (!a4)
  {
    if (a3)
    {
      v29 = *((_QWORD *)a1 + 49);
      if (v29)
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 45) + 8 * ((v29 + *((_QWORD *)a1 + 48) - 1) / 0x19uLL))
                  + 160 * ((v29 + *((_QWORD *)a1 + 48) - 1) % 0x19uLL)
                  + 144) = 0;
    }
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v34);
}

void sub_2411AF57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::isOperatorStretchableInAxis(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = objc_msgSend(a2, "operatorUnicharOrNul");
  v6 = v5;
  if (!v5)
    return 0;
  v7 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
  v8 = *(_QWORD *)(a1 + 296);
  if (v8)
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v8 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
       + 152 * ((v8 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v9 = a1 + 56;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 104))(v7, v6, a3, v9 + 8);
}

uint64_t EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t isOperatorStretchableInAxis;
  __int128 v7;
  __int128 v8;

  isOperatorStretchableInAxis = EQKitLayoutManager::isOperatorStretchableInAxis(a1, a2, 2);
  if ((_DWORD)isOperatorStretchableInAxis)
  {
    if (a2)
    {
      objc_msgSend(a2, "stretchyLayoutSchemata");
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
  }
  else if (a2)
  {
    objc_msgSend(a2, "layoutSchemata");
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  EQKit::Layout::Schemata::operator=(a3, (uint64_t)&v7);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v7);
  return isOperatorStretchableInAxis;
}

void sub_2411AF7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&a9);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutManager::layoutText@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  EQKitLayoutContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  std::string *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  void *v20;
  EQKitStringBox *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  std::string *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  EQKitStringBox *v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  EQKitLayoutContext *v39;
  const __CTFont *v40;
  _BYTE v41[56];
  _BYTE v42[56];
  _BYTE v43[56];
  std::string __p[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = EQKit::Layout::Schemata::textSchemata(a2);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *((_QWORD *)this + 37);
    if (v6)
      v7 = (EQKitLayoutContext *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v6 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                                + 152 * ((v6 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
    else
      v7 = (EQKitLayoutManager *)((char *)this + 56);
    v39 = v7;
    v40 = EQKitLayoutContext::textFont(v7);
    EQKitLayoutManager::beginRow(this, 0, 1);
    v37 = objc_msgSend(v5, "schemataIsQuoted");
    if (v37)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\"");
      v8 = *((_QWORD *)this + 77);
      v9 = *((_QWORD *)this + 51);
      if (*((_QWORD *)this + 50) == v9)
        v10 = 0;
      else
        v10 = *(_QWORD *)(v9 - 8);
      v49 = v10;
      v50 = 12;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v8, v8 + 80, (uint64_t)&v49, __p);
      v12 = objc_alloc(MEMORY[0x24BDD16A8]);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = __p;
      else
        v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v11 = (void *)objc_msgSend(v12, "initWithUTF8String:", v13);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    else
    {
      v11 = 0;
    }
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v14 = (void *)objc_msgSend(v5, "schemataChildren");
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v46 != v16)
            objc_enumerationMutation(v14);
          v18 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if (v11)
              objc_msgSend(v11, "appendString:", v18);
            else
              v11 = (void *)objc_msgSend(v18, "mutableCopy");
          }
          else if (objc_msgSend(v18, "conformsToProtocol:", &unk_257105C10))
          {
            if (v11)
            {
              v19 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*((id *)this + 76), "fontManager"));
              v20 = (void *)(*(uint64_t (**)(uint64_t, void *, const __CTFont *))(*(_QWORD *)v19 + 144))(v19, v11, v40);
              v21 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v20, *((_QWORD *)v39 + 14));
              EQKit::ILayout::ILayout((EQKit::ILayout *)__p, &v21->super);
              EQKit::ILayout::setVerticalContentClassification((uint64_t)__p, 5);
              EQKit::ILayout::ILayout((EQKit::ILayout *)v43, (const EQKit::ILayout *)__p);
              v22 = *((_QWORD *)this + 51);
              if (*((_QWORD *)this + 50) == v22)
                v23 = 0;
              else
                v23 = *(_QWORD *)(v22 - 8);
              EQKitLayoutManager::addRowChild(this, (uint64_t)v43, v23);
              EQKit::ILayout::~ILayout((EQKit::ILayout *)v43);

              EQKit::ILayout::~ILayout((EQKit::ILayout *)__p);
            }
            EQKitLayoutManager::layout(this, (uint64_t)v18, 0);
            v11 = 0;
          }
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
      }
      while (v15);
    }
    if (!v37)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "\"");
    v24 = *((_QWORD *)this + 77);
    v25 = *((_QWORD *)this + 51);
    v26 = *((_QWORD *)this + 50) == v25 ? 0 : *(_QWORD *)(v25 - 8);
    v49 = v26;
    v50 = 13;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v24, v24 + 80, (uint64_t)&v49, __p);
    v27 = objc_alloc(MEMORY[0x24BDD16A8]);
    v28 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? __p
        : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v29 = (void *)objc_msgSend(v27, "initWithUTF8String:", v28);
    v30 = v29;
    if (v11)
      objc_msgSend(v11, "appendString:", v29);
    else
      v11 = (void *)objc_msgSend(v29, "mutableCopy");

    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v11)
        goto LABEL_45;
    }
    else
    {
LABEL_44:
      if (v11)
      {
LABEL_45:
        v31 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*((id *)this + 76), "fontManager"));
        v32 = (void *)(*(uint64_t (**)(uint64_t, void *, const __CTFont *))(*(_QWORD *)v31 + 144))(v31, v11, v40);
        v33 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v32, *((_QWORD *)v39 + 14));
        EQKit::ILayout::ILayout((EQKit::ILayout *)v42, &v33->super);
        v34 = *((_QWORD *)this + 51);
        if (*((_QWORD *)this + 50) == v34)
          v35 = 0;
        else
          v35 = *(_QWORD *)(v34 - 8);
        EQKitLayoutManager::addRowChild(this, (uint64_t)v42, v35);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v42);

      }
    }
    EQKitLayoutManager::endRow(this, (EQKit::ILayout *)v41);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);
  }
  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_2411AFC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutManager::currentNode(EQKitLayoutManager *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v1)
    return 0;
  else
    return *(_QWORD *)(v1 - 8);
}

void EQKitLayoutManager::layoutRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  int v9;
  NSArray *v10;
  _QWORD *v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  EQKit::ILayout *v18;
  int v19;
  _QWORD v21[7];
  _BYTE v22[56];
  _BYTE v23[56];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)EQKit::Layout::Schemata::children(a2);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v29 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        if (objc_msgSend(v8, "isEmbellishedOperator")
          && (EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)objc_msgSend(v8, "operatorCore")) & 1) != 0)
        {
          v9 = 1;
          goto LABEL_12;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_12:
  v10 = (NSArray *)EQKitLayoutFilterOutSpaceLike(v4);
  v12 = -[NSArray count](v10, "count") == 1
     && (v21[0] = objc_msgSend(-[NSArray firstObject](v10, "firstObject"), "operatorCore")) != 0
     && (v11 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((_QWORD *)this + 59, v21)) != 0&& *((_DWORD *)v11 + 8) == 1;
  if ((v9 | v12) == 1
    && (v13 = *((_QWORD *)this + 49) + *((_QWORD *)this + 48) - 1,
        EQKitLayoutRow::isNewRowRequiredForStretching((EQKitLayoutRow *)(*(_QWORD *)(*((_QWORD *)this + 45)
                                                                                   + 8 * (v13 / 0x19))
                                                                       + 160 * (v13 % 0x19)))))
  {
    EQKitLayoutManager::beginRow(this, 1, 1);
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v14 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v25;
    do
    {
      for (j = 0; j != v14; ++j)
      {
        if (*(_QWORD *)v25 != v15)
          objc_enumerationMutation(v4);
        v17 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * j);
        if (v9
          && objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * j), "isEmbellishedOperator")
          && EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)objc_msgSend(v17, "operatorCore")))
        {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v23, 0);
          EQKitLayoutManager::addRowChild(this, (uint64_t)v23, (uint64_t)v17);
          v18 = (EQKit::ILayout *)v23;
LABEL_33:
          EQKit::ILayout::~ILayout(v18);
          continue;
        }
        if (v12 && objc_msgSend(v17, "isEmbellishedOperator"))
        {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v22, 0);
          EQKitLayoutManager::addRowChild(this, (uint64_t)v22, (uint64_t)v17);
          v18 = (EQKit::ILayout *)v22;
          goto LABEL_33;
        }
        EQKitLayoutManager::pushImplicitFormIfRequired(this, v17, v10);
        EQKitLayoutManager::layout(this, (uint64_t)v17, 0);
        EQKitLayoutManager::popImplicitFormIfRequired(this, v17);
      }
      v14 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v14);
  }
  EQKit::ILayout::ILayout(a3, 0);
  if (v9 | v12)
  {
    EQKitLayoutManager::resolveRow(this, v10);
    if (v19)
    {
      EQKitLayoutManager::endRow(this, (EQKit::ILayout *)v21);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v21);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v21);
    }
  }
}

void sub_2411B0068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, EQKit::ILayout *a4, ...)
{
  va_list va;

  va_start(va, a4);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(a4);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFraction(EQKit::Layout::Schemata *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  void *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  EQKitBox *v22;
  EQKitBox *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  EQKitVSpace *v58;
  EQKitRule *v59;
  uint64_t v60;
  unint64_t v61;
  EQKitLayoutManager *v62;
  EQKitBox *v63;
  EQKitVSpace *v64;
  EQKitOffsetVBox *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  void *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  double v84;
  _BYTE v86[56];
  _BYTE v87[56];
  uint64_t v88;
  int v89;
  _BYTE v90[56];
  int v91;
  int v92;
  _QWORD v93[4];
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD v98[4];
  __int16 v99;
  _QWORD v100[8];
  id v101[4];
  __int16 v102;
  uint64_t v103;
  double *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;

  v8 = *(_QWORD *)(a2 + 296);
  if (v8)
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v8 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
       + 152 * ((v8 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
  else
    v9 = a2 + 56;
  v10 = (void *)EQKit::Layout::Schemata::fractionSchemata(this);
  v115 = 0;
  v116 = (double *)&v115;
  v117 = 0x2020000000;
  v118 = 0;
  v111 = 0;
  v112 = (double *)&v111;
  v113 = 0x2020000000;
  v114 = 0;
  v107 = 0;
  v108 = (double *)&v107;
  v109 = 0x2020000000;
  v110 = 0;
  v103 = 0;
  v104 = (double *)&v103;
  v105 = 0x2020000000;
  v106 = 0;
  v11 = *(_BYTE *)(v9 + 16) == 0;
  v12 = objc_msgSend(v10, "schemataNumerator");
  v13 = MEMORY[0x24BDAC760];
  v100[0] = MEMORY[0x24BDAC760];
  v100[1] = 3221225472;
  v100[2] = ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke;
  v100[3] = &unk_25112A738;
  v100[4] = v12;
  v100[5] = &v115;
  v100[6] = &v111;
  v100[7] = a2;
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, v12, v11, 0, 0, 0, (uint64_t)v100, (EQKit::ILayout *)v101);
  v93[0] = v13;
  v93[1] = 3221225472;
  v93[2] = ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2;
  v93[3] = &unk_25112A738;
  v94 = objc_msgSend(v10, "schemataDenominator");
  v95 = &v107;
  v96 = &v103;
  v97 = a2;
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, v94, v11, 0, 0, 1, (uint64_t)v93, (EQKit::ILayout *)v98);
  if ((*(_BYTE *)(v9 + 120) & 1) != 0)
    v14 = *(double *)(v9 + 128);
  else
    v14 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v9);
  v15 = *(_QWORD *)(a2 + 408);
  if (*(_QWORD *)(a2 + 400) == v15)
    v16 = 0;
  else
    v16 = *(_QWORD *)(v15 - 8);
  v17 = EQKitLayoutManager::lengthForAttribute((_QWORD *)a2, 36, v16, v14);
  v18 = 0.0;
  if (v17 > 0.0)
  {
    v19 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
    v20 = *(_QWORD *)(a2 + 296);
    if (v20)
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v20 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
          + 152 * ((v20 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
    else
      v21 = a2 + 56;
    v18 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v19 + 56))(v19, 25, v21 + 8, v14);
  }
  v22 = (EQKitBox *)v101[0];
  v23 = (EQKitBox *)v98[0];
  objc_msgSend(v101[0], "width");
  v25 = v24;
  -[EQKitBox width](v23, "width");
  v27 = v26;
  if (v25 >= v26)
    v28 = v25;
  else
    v28 = v26;
  v29 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29) & 1) == 0)
  {
    v31 = *(_QWORD *)(v9 + 88);
    if ((*(_BYTE *)(v9 + 120) & 1) != 0)
      v30.n128_u64[0] = *(_QWORD *)(v9 + 128);
    else
      v30.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v9);
    v32.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v31 + 56))(v31, 3, v9 + 8, v30);
    v116[3] = v32.n128_f64[0];
    v33 = *(_QWORD *)(v9 + 88);
    if ((*(_BYTE *)(v9 + 120) & 1) != 0)
      v32.n128_u64[0] = *(_QWORD *)(v9 + 128);
    else
      v32.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v9);
    v34.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v33 + 56))(v33, 4, v9 + 8, v32);
    v108[3] = v34.n128_f64[0];
    v35 = *(_QWORD *)(v9 + 88);
    if ((*(_BYTE *)(v9 + 120) & 1) != 0)
      v34.n128_u64[0] = *(_QWORD *)(v9 + 128);
    else
      v34.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v9);
    v36 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v35 + 56))(v35, 2, v9 + 8, v34);
    v112[3] = v36;
    v104[3] = v36;
  }
  if ((*(_BYTE *)(v9 + 120) & 2) != 0)
    v37 = *(double *)(v9 + 136);
  else
    v37 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v9);
  v38 = v112;
  v39 = v116[3];
  if (v17 <= 0.0)
    v40 = 0.0;
  else
    v40 = v17 * 0.5;
  -[EQKitBox depth](v22, "depth");
  v42 = v39 - v37 - v40 - v41;
  if (v38[3] >= v42)
    v43 = v38[3];
  else
    v43 = v42;
  v44 = v104;
  v45 = v108[3];
  -[EQKitBox height](v23, "height");
  v47 = v37 - v40 + v45 - v46;
  if (v44[3] >= v47)
    v47 = v44[3];
  v84 = v47;
  v48 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v92 = 2;
  v49 = *(_QWORD *)(a2 + 616);
  v50 = *(_QWORD *)(a2 + 408);
  if (*(_QWORD *)(a2 + 400) == v50)
    v51 = 0;
  else
    v51 = *(_QWORD *)(v50 - 8);
  v88 = v51;
  v89 = 24;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v49, v49 + 128, (uint64_t)&v88, &v92);
  v91 = 2;
  v52 = *(_QWORD *)(a2 + 616);
  v53 = *(_QWORD *)(a2 + 408);
  if (*(_QWORD *)(a2 + 400) == v53)
    v54 = 0;
  else
    v54 = *(_QWORD *)(v53 - 8);
  v88 = v54;
  v89 = 25;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v52, v52 + 128, (uint64_t)&v88, &v91);
  v55 = v28 + v18 * 2.0;
  if (v92 == 3)
  {
    v56 = v55 - v25;
  }
  else
  {
    v56 = 0.0;
    if (v92 == 2)
      v56 = (v55 - v25) * 0.5;
  }
  if (v91 == 3)
  {
    v57 = v55 - v27;
  }
  else
  {
    v57 = 0.0;
    if (v91 == 2)
      v57 = (v55 - v27) * 0.5;
  }
  if (v56 == 0.0)
  {
    objc_msgSend(v48, "addObject:", v22);
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a2, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a2, v56);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v90, v22);
    EQKitLayoutManager::addRowChild((_QWORD *)a2, (uint64_t)v90, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v90);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a2, (EQKit::ILayout *)&v88);
    if (v88)
      objc_msgSend(v48, "addObject:");
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v88);
  }
  v58 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v43, 0.0);
  objc_msgSend(v48, "addObject:", v58);

  v59 = [EQKitRule alloc];
  v60 = *(_QWORD *)(a2 + 296);
  if (v60)
    v61 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v60 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
        + 152 * ((v60 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
  else
    v61 = a2 + 56;
  v62 = -[EQKitRule initWithHeight:depth:width:cgColor:](v59, "initWithHeight:depth:width:cgColor:", *(_QWORD *)(v61 + 112), v40, v40, v55);
  v63 = EQKitLayoutManager::wrapBoxWithAttribution(v62, (EQKitBox *)v62, (id *)this);
  objc_msgSend(v48, "addObject:", v63);

  v64 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v84, 0.0);
  objc_msgSend(v48, "addObject:", v64);

  if (v57 == 0.0)
  {
    objc_msgSend(v48, "addObject:", v23);
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a2, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a2, v57);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v87, v23);
    EQKitLayoutManager::addRowChild((_QWORD *)a2, (uint64_t)v87, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v87);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a2, (EQKit::ILayout *)&v88);
    if (v88)
      objc_msgSend(v48, "addObject:");
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v88);
  }
  v65 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v48, 2, v37);
  EQKit::ILayout::ILayout(a5, &v65->super.super.super);

  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF0 | 0xA;
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v101);
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v98);
  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a5, 1);

  v66 = *(_QWORD *)(a2 + 296);
  if (v66)
    v67 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v66 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
        + 152 * ((v66 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
  else
    v67 = a2 + 56;
  if (*(_BYTE *)(v67 + 16))
    goto LABEL_71;
  if ((v102 & 0x1C00u) <= 0x1000 || (v99 & 0x1C00u) <= 0x1000)
  {
    if ((v102 & 0x1000) == 0)
    {
LABEL_71:
      v68 = 1;
      goto LABEL_72;
    }
    if ((v99 & 0x1000) != 0)
      v68 = 3;
    else
      v68 = 1;
  }
  else
  {
    if (v66)
      v74 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v66 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
          + 152 * ((v66 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
    else
      v74 = a2 + 56;
    if (*(uint64_t *)(v74 + 8) <= 0)
      v68 = 3;
    else
      v68 = 4;
  }
LABEL_72:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v68);
  if (a3)
  {
    v69 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
    v71 = *(_QWORD *)(a2 + 296);
    if (v71)
    {
      v72 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v71 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
          + 152 * ((v71 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
      v73 = v72 + 8;
    }
    else
    {
      v73 = a2 + 64;
      v72 = a2 + 56;
    }
    if ((*(_BYTE *)(v72 + 120) & 1) != 0)
      v70.n128_u64[0] = *(_QWORD *)(v72 + 128);
    else
      v70.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v72);
    v75 = (*(double (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v69 + 56))(v69, 26, v73, v70);
    v76 = (void *)objc_msgSend(a4, "operatorCore");
    if (v76)
    {
      v77 = EQKitLayoutManager::leftSpaceForOperator(a2, v76);
      v78 = EQKitLayoutManager::rightSpaceForOperator(a2, v76);
      if (v75 >= v77)
        v79 = v75;
      else
        v79 = v77;
      if (v75 >= v78)
        v80 = v75;
      else
        v80 = v78;
      v75 = v79;
    }
    else
    {
      v80 = v75;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a2, v75);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v86, a5);
    v81 = *(_QWORD *)(a2 + 408);
    if (*(_QWORD *)(a2 + 400) == v81)
      v82 = 0;
    else
      v82 = *(_QWORD *)(v81 - 8);
    EQKitLayoutManager::addRowChild((_QWORD *)a2, (uint64_t)v86, v82);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v86);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a2, v80);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v88, 0);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v88);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v88);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v98);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v101);
  _Block_object_dispose(&v103, 8);
  _Block_object_dispose(&v107, 8);
  _Block_object_dispose(&v111, 8);
  _Block_object_dispose(&v115, 8);
}

void sub_2411B0A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a72;
  EQKit::ILayout *v72;
  uint64_t v73;

  EQKit::ILayout::~ILayout(v72);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a50);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a65);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose((const void *)(v73 - 248), 8);
  _Block_object_dispose((const void *)(v73 - 216), 8);
  _Block_object_dispose((const void *)(v73 - 184), 8);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSubsuperscript(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v5;

  v5 = (void *)EQKit::Layout::Schemata::subsuperscriptSchemata(a2);
  EQKitLayoutManager::layoutSubsuperscript((uint64_t)this, objc_msgSend(v5, "schemataKernel"), objc_msgSend(v5, "schemataSubscript"), (void *)objc_msgSend(v5, "schemataSuperscript"), a3);
}

uint64_t EQKitLayoutManager::layoutOperator@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  EQKitStringBox *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  EQKitVShift *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned __int16 v27;
  int v28;
  uint64_t v29;
  double v30;
  char v31;
  id v33[2];

  v5 = *((_QWORD *)this + 37);
  if (v5)
    v6 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v5 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                + 152 * ((v5 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v6 = (char *)this + 56;
  v7 = (void *)EQKit::Layout::Schemata::tokenSchemata(a2);
  v8 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v6 + 11) + 80))(*((_QWORD *)v6 + 11), objc_msgSend(v7, "schemataTokenString"), v6 + 8);
  v9 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v8, *((_QWORD *)v6 + 14));
  v10 = objc_msgSend(v7, "schemataUnicharOrNul");
  v11 = 0.0;
  if ((_DWORD)v10)
  {
    v12 = *((_QWORD *)this + 51);
    v13 = *((_QWORD *)this + 50) == v12 ? 0 : *(void **)(v12 - 8);
    if (EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, (void *)objc_msgSend(v13, "operatorCore"))
      && ((*(uint64_t (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v6 + 11) + 128))(*((_QWORD *)v6 + 11), v10, v6 + 8) & 1) == 0)
    {
      -[EQKitStringBox depth](v9, "depth");
      v15 = v14;
      -[EQKitStringBox height](v9, "height");
      v17 = v16;
      -[EQKitStringBox depth](v9, "depth");
      v19 = v15 + (v17 + v18) * -0.5;
      if ((v6[120] & 2) != 0)
        v20 = *((double *)v6 + 17);
      else
        v20 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v6);
      v11 = v19 + v20;
    }
  }
  v21 = v11 + EQKitLayoutManager::lengthForCharacterProperty((uint64_t)this, 3, v10, 0.0);
  if (v21 == 0.0)
  {
    v22 = v9;
  }
  else
  {
    v22 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v9, v21);

  }
  EQKit::ILayout::ILayout(a3, &v22->super);
  v23 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v23)
    v24 = 0;
  else
    v24 = *(void **)(v23 - 8);
  v25 = (void *)objc_msgSend(v24, "operatorCore");
  v26 = objc_msgSend(*((id *)this + 76), "operatorDictionary");
  v27 = objc_msgSend(v25, "operatorId");
  v28 = EQKitLayoutManager::operatorForm((uint64_t)this, v25);
  v29 = EQKit::Config::Operator::Dictionary::lookup(v26, v27, v28);
  if (v29 && (*(_BYTE *)(v29 + 48) & 0x40) != 0)
  {
    -[EQKitVShift width](v22, "width");
    EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v33, &v22->super, v30 * 0.5);
    EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 1, (uint64_t)v33);
    EQKit::ILayoutOffset::~ILayoutOffset(v33);
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v6 + 11) + 112))(*((_QWORD *)v6 + 11), v10, v6 + 8))
  {
    v31 = 5;
  }
  else
  {
    v31 = 2;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v31);
}

void sub_2411B0ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutIdentifier(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  EQKitStringBox *v9;
  EQKit::ILayout *v10;
  unsigned int v11;
  BOOL v12;
  int v13;

  v4 = *((_QWORD *)this + 37);
  if (v4)
    v5 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v4 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                + 152 * ((v4 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v5 = (char *)this + 56;
  v6 = *((_QWORD *)v5 + 11);
  v7 = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a2), "schemataTokenString");
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v6 + 80))(v6, v7, v5 + 8);
  v9 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v8, *((_QWORD *)v5 + 14));
  v10 = EQKit::ILayout::ILayout(a3, &v9->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v10, 5);
  v11 = *((_DWORD *)v5 + 5);
  v12 = v11 > 0xD;
  v13 = (1 << v11) & 0x3018;
  if (!v12 && v13 != 0)
    *((_WORD *)a3 + 16) = *((_WORD *)a3 + 16) & 0xFF3F | 0x80;

}

void sub_2411B1000(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutNumber(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  EQKitStringBox *v10;
  EQKit::ILayout *v11;
  double v12;
  id v13[2];

  v5 = *((_QWORD *)this + 37);
  if (v5)
    v6 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v5 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                + 152 * ((v5 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v6 = (char *)this + 56;
  v7 = *((_QWORD *)v6 + 11);
  v8 = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a2), "schemataTokenString");
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v7 + 80))(v7, v8, v6 + 8);
  v10 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v9, *((_QWORD *)v6 + 14));
  v11 = EQKit::ILayout::ILayout(a3, &v10->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v11, 5);
  EQKitLayoutManager::decimalPointOffsetInStringBox(this, v10);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v13, &v10->super, v12);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 2, (uint64_t)v13);
  EQKit::ILayoutOffset::~ILayoutOffset(v13);

}

void sub_2411B1124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutUnderover(EQKit::Layout::Schemata *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int isEmbellishedOperatorWithAccent;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int isOperatorStretchy;
  int v26;
  int v27;
  _QWORD *v28;
  char v29;
  double v30;
  double v31;
  char v32;
  double v33;
  char v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  double v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  double MidX;
  __n128 v53;
  double v54;
  __n128 v55;
  __n128 v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  int v61;
  int v62;
  __n128 v63;
  double v64;
  double v65;
  __n128 v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  double v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  __n128 v78;
  double v79;
  uint64_t v80;
  __n128 v81;
  double v82;
  uint64_t v83;
  __n128 v84;
  double v85;
  uint64_t v86;
  __n128 v87;
  double v88;
  uint64_t v89;
  int v90;
  double v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  __n128 v97;
  double v98;
  uint64_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  int v107;
  __n128 v108;
  double v109;
  double v110;
  double v111;
  double v112;
  __n128 v113;
  double v114;
  uint64_t v115;
  double v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  __n128 v128;
  double v129;
  uint64_t v130;
  __n128 v131;
  double v132;
  uint64_t v133;
  double v134;
  int v135;
  double v136;
  double v137;
  int v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  double v146;
  double v147;
  EQKitLayoutManager *v148;
  double v149;
  double v150;
  double v151;
  EQKitLayoutManager *v152;
  double v153;
  id v154;
  id v155;
  EQKitVSpace *v156;
  EQKitVSpace *v157;
  uint64_t v158;
  id v159;
  EQKitVSpace *v160;
  EQKitVSpace *v161;
  EQKitVBox *v162;
  char v163;
  char v164;
  int v165;
  int v166;
  void *v167;
  double v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v179;
  int v181;
  int v182;
  _BYTE v184[56];
  _QWORD v185[2];
  _QWORD v186[7];
  id v187[7];
  double v188;
  char v189;
  unsigned int v190;
  char v191;
  id v192[7];
  id v193[4];
  __int16 v194;
  uint64_t v195;
  __int16 v196;
  char v197;
  int v198;
  double v199;
  int v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  int v204;
  void *v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t, EQKit::Layout::Schemata *);
  void *v208;
  void *v209;
  uint64_t v210;
  unsigned int *v211;
  uint64_t *v212;
  char *v213;
  CGRect v214;

  v6 = (void *)EQKit::Layout::Schemata::underoverSchemata(this);
  v7 = (void *)objc_msgSend(v6, "schemataBase");
  v8 = (void *)objc_msgSend(v6, "schemataUnder");
  v9 = (void *)objc_msgSend(v6, "schemataOver");
  v10 = *(_QWORD *)(a2 + 296);
  if (v10)
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v10 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
        + 152 * ((v10 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
  else
    v11 = a2 + 56;
  EQKit::ILayout::ILayout(a5, 0);
  if (!*(_BYTE *)(v11 + 16) && EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(a2, v7))
  {
    EQKitLayoutManager::layoutSubsuperscript(a2, (uint64_t)v7, (uint64_t)v8, v9, (EQKit::ILayout *)&v205);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
    v12 = 0.0;
    goto LABEL_306;
  }
  LODWORD(v193[0]) = 0;
  LODWORD(v192[0]) = 0;
  if (v8)
  {
    v13 = *(_QWORD *)(a2 + 616);
    v205 = v8;
    LODWORD(v206) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v13, v13 + 8, (uint64_t)&v205, v193) & 1) == 0)
    {
      v14 = *(_QWORD *)(a2 + 616);
      v15 = *(_QWORD *)(a2 + 408);
      if (*(_QWORD *)(a2 + 400) == v15)
        v16 = 0;
      else
        v16 = *(void **)(v15 - 8);
      v205 = v16;
      LODWORD(v206) = 6;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v14, v14 + 8, (uint64_t)&v205, v193);
    }
  }
  if (v9)
  {
    v17 = *(_QWORD *)(a2 + 616);
    v205 = v9;
    LODWORD(v206) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v17, v17 + 8, (uint64_t)&v205, v192) & 1) == 0)
    {
      v18 = *(_QWORD *)(a2 + 616);
      v19 = *(_QWORD *)(a2 + 408);
      if (*(_QWORD *)(a2 + 400) == v19)
        v20 = 0;
      else
        v20 = *(void **)(v19 - 8);
      v205 = v20;
      LODWORD(v206) = 5;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v18, v18 + 8, (uint64_t)&v205, v192);
    }
  }
  if (LODWORD(v193[0]))
    isEmbellishedOperatorWithAccent = LODWORD(v193[0]) == 2;
  else
    isEmbellishedOperatorWithAccent = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v8);
  if (LODWORD(v192[0]))
    v182 = LODWORD(v192[0]) == 2;
  else
    v182 = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v9);
  v204 = 2;
  v22 = *(_QWORD *)(a2 + 616);
  v23 = *(_QWORD *)(a2 + 408);
  if (*(_QWORD *)(a2 + 400) == v23)
    v24 = 0;
  else
    v24 = *(void **)(v23 - 8);
  v205 = v24;
  LODWORD(v206) = 1;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v22, v22 + 128, (uint64_t)&v205, &v204);
  if (objc_msgSend(v7, "isEmbellishedOperator"))
    isOperatorStretchy = EQKitLayoutManager::isOperatorStretchy(a2, (void *)objc_msgSend(v7, "operatorCore"));
  else
    isOperatorStretchy = 0;
  if (objc_msgSend(v8, "isEmbellishedOperator"))
    v26 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)objc_msgSend(v8, "operatorCore"));
  else
    v26 = 0;
  if (objc_msgSend(v9, "isEmbellishedOperator"))
  {
    v27 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)objc_msgSend(v9, "operatorCore"));
    if (!isOperatorStretchy)
      goto LABEL_42;
  }
  else
  {
    v27 = 0;
    if (!isOperatorStretchy)
      goto LABEL_42;
  }
  v205 = v7;
  isOperatorStretchy = !v7
                    || (v28 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((_QWORD *)(a2 + 472), &v205)) == 0|| *((_DWORD *)v28 + 8) != 2;
LABEL_42:
  v203 = 0;
  v202 = 0;
  v195 = 0;
  v196 = 1;
  v197 = 0;
  v198 = 1;
  v199 = 12.0;
  v200 = 0;
  v201 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v193, 0);
  if (v7)
    v29 = isOperatorStretchy;
  else
    v29 = 1;
  v30 = 0.0;
  if ((v29 & 1) == 0)
  {
    v205 = (void *)MEMORY[0x24BDAC760];
    v206 = 3221225472;
    v207 = ___ZN18EQKitLayoutManager22layoutUnderoverBaseBoxEPU26objcproto15EQKitLayoutNode11objc_objectPN5EQKit6Script4InfoEPbPj_block_invoke;
    v208 = &unk_25112A7B0;
    v209 = v7;
    v210 = a2;
    v211 = &v203;
    v212 = &v195;
    v213 = &v202;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v7, (uint64_t)&v205, (EQKit::ILayout *)v192);
    EQKit::ILayout::operator=((uint64_t)v193, (uint64_t)v192);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v192);
    objc_msgSend(v193[0], "width");
    v30 = fmax(v31, 0.0);
  }
  v191 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v192, 0);
  if (v8)
    v32 = v26;
  else
    v32 = 1;
  if ((v32 & 1) == 0)
  {
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v8, isEmbellishedOperatorWithAccent, (uint64_t)&v191, 0, 0, (EQKit::ILayout *)&v205);
    EQKit::ILayout::operator=((uint64_t)v192, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
    objc_msgSend(v192[0], "width");
    if (v30 < v33)
      v30 = v33;
  }
  v190 = 0;
  v189 = 0;
  v188 = 0.0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v187, 0);
  if (v9)
    v34 = v27;
  else
    v34 = 1;
  if ((v34 & 1) == 0)
  {
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v9, v182, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v188, (EQKit::ILayout *)&v205);
    EQKit::ILayout::operator=((uint64_t)v187, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
    objc_msgSend(v187[0], "width");
    if (v30 < v35)
      v30 = v35;
  }
  if (isOperatorStretchy)
  {
    EQKitLayoutManager::registerHorizontalStretchedOperator((_QWORD *)a2, (void *)objc_msgSend(v7, "operatorCore"), 0, v30);
    v205 = (void *)MEMORY[0x24BDAC760];
    v206 = 3221225472;
    v207 = ___ZN18EQKitLayoutManager22layoutUnderoverBaseBoxEPU26objcproto15EQKitLayoutNode11objc_objectPN5EQKit6Script4InfoEPbPj_block_invoke;
    v208 = &unk_25112A7B0;
    v209 = v7;
    v210 = a2;
    v211 = &v203;
    v212 = &v195;
    v213 = &v202;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v7, (uint64_t)&v205, (EQKit::ILayout *)v186);
    EQKit::ILayout::operator=((uint64_t)v193, (uint64_t)v186);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v186);
  }
  if (v26)
  {
    EQKitLayoutManager::registerHorizontalStretchedOperator((_QWORD *)a2, (void *)objc_msgSend(v8, "operatorCore"), 0, v30);
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v8, isEmbellishedOperatorWithAccent, (uint64_t)&v191, 0, 0, (EQKit::ILayout *)&v205);
    EQKit::ILayout::operator=((uint64_t)v192, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
  }
  if (v27)
  {
    if (!objc_msgSend((id)objc_msgSend(v9, "operatorCore"), "operatorId"))
      v30 = v30 + (*(double *)(a2 + 8) + *(double *)(a2 + 8)) / -12.0;
    EQKitLayoutManager::registerHorizontalStretchedOperator((_QWORD *)a2, (void *)objc_msgSend(v9, "operatorCore"), 0, v30);
    EQKitLayoutManager::layoutOverOrUnderBox((EQKitLayoutManager *)a2, (uint64_t)v9, v182, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v188, (EQKit::ILayout *)&v205);
    EQKit::ILayout::operator=((uint64_t)v187, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
  }
  objc_msgSend(v193[0], "width");
  v37 = v36;
  if (v187[0])
  {
    objc_msgSend(v187[0], "width");
    if (v38 >= v37)
      v39 = v38;
    else
      v39 = v37;
    if (v182)
      v40 = v37;
    else
      v40 = v39;
  }
  else
  {
    v40 = v36;
    v39 = v36;
  }
  if (v192[0])
  {
    objc_msgSend(v192[0], "width");
    if (v41 >= v39)
      v39 = v41;
    if (v41 < v40)
      v42 = 1;
    else
      v42 = isEmbellishedOperatorWithAccent;
    if (!v42)
      v40 = v41;
  }
  v43 = 0.0;
  if (v37 < v40)
  {
    v44 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
    v46 = *(_QWORD *)(a2 + 296);
    if (v46)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 8 * ((v46 + *(_QWORD *)(a2 + 288) - 1) / 0x1AuLL))
          + 152 * ((v46 + *(_QWORD *)(a2 + 288) - 1) % 0x1AuLL);
      v48 = v47 + 8;
    }
    else
    {
      v48 = a2 + 64;
      v47 = a2 + 56;
    }
    if ((*(_BYTE *)(v47 + 120) & 1) != 0)
      v45.n128_u64[0] = *(_QWORD *)(v47 + 128);
    else
      v45.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v47);
    v43 = (*(double (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v44 + 56))(v44, 27, v48, v45);
  }
  v181 = isEmbellishedOperatorWithAccent;
  v49 = v187[0];
  v50 = v193[0];
  v51 = v192[0];
  objc_msgSend(v193[0], "erasableBounds");
  MidX = CGRectGetMidX(v214);
  EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v193, v204, 0, (EQKit::ILayout *)&v205, v39, 0.0);
  v179 = v43;
  EQKit::ILayout::operator=((uint64_t)v193, (uint64_t)&v205);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
  v54 = (v39 - v37) * 0.5 + MidX;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v11 + 88) + 16))(*(_QWORD *)(v11 + 88)))
  {
    v59 = 0.0;
    v60 = 0.0;
    v61 = v181;
    if (!v49)
      goto LABEL_207;
    if (v189)
      v62 = v182;
    else
      v62 = 0;
    if (v62 == 1)
    {
      objc_msgSend(v49, "depth");
      if (v63.n128_f64[0] >= 0.0)
      {
        v92 = *(_QWORD *)(v11 + 88);
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v63.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v63.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v116 = -(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v92 + 56))(v92, 11, v11 + 8, v63);
      }
      else
      {
        v64 = v54;
        v65 = v188;
        objc_msgSend(v49, "depth");
        v67 = v66.n128_f64[0];
        v68 = *(_QWORD *)(v11 + 88);
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v66.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v66.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v122 = -v67
             - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v68 + 56))(v68, 11, v11 + 8, v66);
        if (v65 >= v122)
          v116 = v122;
        else
          v116 = v65;
        v54 = v64;
      }
      objc_msgSend(v193[0], "height");
      if (v116 < v123)
        v123 = v116;
      v60 = -v123;
    }
    else
    {
      v70 = *(_QWORD *)(v11 + 88);
      if (!v182)
      {
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v53.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v114 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v70 + 56))(v70, 11, v11 + 8, v53);
        v115 = *(_QWORD *)(v11 + 88);
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v113.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v113.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v117 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v115 + 56))(v115, 12, v11 + 8, v113);
        objc_msgSend(v49, "layoutDepth");
        v118 = 0;
        v120 = v117 - v119;
        if (v114 >= v120)
          v60 = v114;
        else
          v60 = v120;
        v121 = v54;
        goto LABEL_206;
      }
      if ((*(_BYTE *)(v11 + 120) & 1) != 0)
        v53.n128_u64[0] = *(_QWORD *)(v11 + 128);
      else
        v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v60 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v70 + 56))(v70, 11, v11 + 8, v53);
    }
    if (v202)
      v124 = v182;
    else
      v124 = 0;
    if (v124 == 1)
    {
      v125 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
      v121 = v54 + (*(double (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v125 + 176))(v125, v203, &v195);
      v118 = 1;
    }
    else
    {
      v118 = 0;
      v121 = v54;
    }
    v61 = v181;
LABEL_206:
    EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v187, v204, v118, (EQKit::ILayout *)&v205, v39, v121);
    EQKit::ILayout::operator=((uint64_t)v187, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
LABEL_207:
    if (!v51)
    {
      v85 = 0.0;
LABEL_241:
      v140 = 0.0;
      goto LABEL_272;
    }
    if (v191)
      v126 = v61;
    else
      v126 = 0;
    if (v126 == 1)
    {
      objc_msgSend(v51, "height");
      if (v53.n128_f64[0] <= 0.0)
      {
        objc_msgSend(v51, "height");
        v129 = v128.n128_f64[0];
        v130 = *(_QWORD *)(v11 + 88);
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v128.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v128.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v85 = v129
            + (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v130 + 56))(v130, 13, v11 + 8, v128);
        goto LABEL_234;
      }
      v127 = *(_QWORD *)(v11 + 88);
      if ((*(_BYTE *)(v11 + 120) & 1) == 0)
        goto LABEL_214;
    }
    else
    {
      v127 = *(_QWORD *)(v11 + 88);
      if (!v61)
      {
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v53.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v132 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v127 + 56))(v127, 13, v11 + 8, v53);
        v133 = *(_QWORD *)(v11 + 88);
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v131.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v131.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v134 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v133 + 56))(v133, 14, v11 + 8, v131);
        objc_msgSend(v51, "layoutHeight");
        v135 = 0;
        v137 = v134 - v136;
        if (v132 >= v137)
          v85 = v132;
        else
          v85 = v137;
        goto LABEL_240;
      }
      if ((*(_BYTE *)(v11 + 120) & 1) == 0)
      {
LABEL_214:
        v53.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
LABEL_222:
        v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v127 + 56))(v127, 13, v11 + 8, v53);
LABEL_234:
        v61 = v181;
        if (v202)
          v138 = v181;
        else
          v138 = 0;
        if (v138 == 1)
        {
          v139 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
          v54 = v54
              + (*(double (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v139 + 184))(v139, v203, &v195);
          v135 = 1;
        }
        else
        {
          v135 = 0;
        }
LABEL_240:
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v192, v204, v135, (EQKit::ILayout *)&v205, v39, v54);
        EQKit::ILayout::operator=((uint64_t)v192, (uint64_t)&v205);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
        goto LABEL_241;
      }
    }
    v53.n128_u64[0] = *(_QWORD *)(v11 + 128);
    goto LABEL_222;
  }
  if ((objc_msgSend(v7, "isEmbellishedOperator") & 1) != 0
    && EQKitLayoutManager::isOperatorLargeOp(a2, (void *)objc_msgSend(v7, "operatorCore")))
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t *, _QWORD))(**(_QWORD **)(v11 + 88) + 48))(&v205, *(_QWORD *)(v11 + 88), 14, &v195, v203);
    v57 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)&v205, v199);
    v58 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v56.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v56.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v58 + 56))(v58, 12, v11 + 8, v56);
    v94 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v93.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v93.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v174 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v94 + 56))(v94, 11, v11 + 8, v93);
    v96 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v95.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v95.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v98 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v96 + 56))(v96, 14, v11 + 8, v95);
    v99 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v97.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v97.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v99 + 56))(v99, 13, v11 + 8, v97);
    v173 = v98;
    v90 = 0;
LABEL_154:
    v176 = 0.0;
    v88 = 0.0;
    v91 = 0.0;
    goto LABEL_155;
  }
  v69 = *(_QWORD *)(v11 + 88);
  if (v7 && v202 && ((isOperatorStretchy ^ 1) & 1) == 0)
  {
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v55.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v55.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v69 + 56))(v69, 44, v11 + 8, v55);
    v73 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v71.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v71.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v174 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v73 + 56))(v73, 45, v11 + 8, v71);
    v77 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v76.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v76.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v82 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v77 + 56))(v77, 42, v11 + 8, v76);
    v83 = *(_QWORD *)(v11 + 88);
    if ((*(_BYTE *)(v11 + 120) & 1) != 0)
      v81.n128_u64[0] = *(_QWORD *)(v11 + 128);
    else
      v81.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
    v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v83 + 56))(v83, 43, v11 + 8, v81);
    v173 = v82;
    v90 = 0;
    v57 = 0.0;
    goto LABEL_154;
  }
  if ((*(_BYTE *)(v11 + 120) & 1) != 0)
    v55.n128_u64[0] = *(_QWORD *)(v11 + 128);
  else
    v55.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  v174 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v69 + 56))(v69, 50, v11 + 8, v55);
  v75 = *(_QWORD *)(v11 + 88);
  if ((*(_BYTE *)(v11 + 120) & 1) != 0)
    v74.n128_u64[0] = *(_QWORD *)(v11 + 128);
  else
    v74.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  v79 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v75 + 56))(v75, 51, v11 + 8, v74);
  v80 = *(_QWORD *)(v11 + 88);
  if ((*(_BYTE *)(v11 + 120) & 1) != 0)
    v78.n128_u64[0] = *(_QWORD *)(v11 + 128);
  else
    v78.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  v85 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v80 + 56))(v80, 48, v11 + 8, v78);
  v86 = *(_QWORD *)(v11 + 88);
  if ((*(_BYTE *)(v11 + 120) & 1) != 0)
    v84.n128_u64[0] = *(_QWORD *)(v11 + 128);
  else
    v84.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  v88 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v86 + 56))(v86, 49, v11 + 8, v84);
  v89 = *(_QWORD *)(v11 + 88);
  if ((*(_BYTE *)(v11 + 120) & 1) != 0)
    v87.n128_u64[0] = *(_QWORD *)(v11 + 128);
  else
    v87.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  v91 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v89 + 56))(v89, 34, v11 + 8, v87);
  v176 = v79;
  v90 = 1;
  v57 = 0.0;
  v72 = 0.0;
  v173 = 0.0;
LABEL_155:
  v177 = v88;
  if (v49)
  {
    objc_msgSend(v49, "width");
    v101 = v57;
    v102 = v100 * 0.5 - v57 * 0.5;
    if (v51)
    {
LABEL_157:
      v103 = v54;
      objc_msgSend(v51, "width");
      v105 = v101 * 0.5 + v104 * 0.5;
      goto LABEL_160;
    }
  }
  else
  {
    v101 = v57;
    v102 = -1.79769313e308;
    if (v51)
      goto LABEL_157;
  }
  v103 = v54;
  v105 = -1.79769313e308;
LABEL_160:
  if (v102 <= v103)
    v106 = v103;
  else
    v106 = v102;
  if (v105 > v106)
    v106 = v105;
  v175 = v106;
  v60 = 0.0;
  if (!v49)
    goto LABEL_263;
  if (v90)
  {
    if (v189)
      v107 = v182;
    else
      v107 = 0;
    if (v107 == 1)
    {
      objc_msgSend(v49, "depth");
      if (v108.n128_f64[0] >= 0.0)
      {
        v141 = *(_QWORD *)(v11 + 88);
        if ((*(_BYTE *)(v11 + 120) & 1) != 0)
          v108.n128_u64[0] = *(_QWORD *)(v11 + 128);
        else
          v108.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v91 = -(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v141 + 56))(v141, 11, v11 + 8, v108);
      }
      else
      {
        objc_msgSend(v49, "depth");
        v110 = -v109 - v174;
        if (v91 >= v110)
          v91 = v110;
      }
      objc_msgSend(v50, "height");
      if (v91 < v142)
        v142 = v91;
      v60 = -v142;
    }
    else
    {
      v60 = v174;
    }
  }
  else
  {
    objc_msgSend(v50, "layoutHeight");
    v112 = v72 - v111;
    if (v174 >= v112)
      v60 = v174;
    else
      v60 = v112;
  }
  if (v204 == 2)
  {
    if (v203)
    {
      v143 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v143 + 48))(v186, v143, 1, &v195, v203);
      if (LODWORD(v186[0]))
      {
        v144 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v186, v199) - v103;
        goto LABEL_256;
      }
    }
    else
    {
      LODWORD(v186[0]) = 0;
      v186[1] = 0;
    }
    v144 = 0.0;
LABEL_256:
    if (v190)
    {
      v145 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 608), "fontManager"));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v145 + 48))(v185, v145, 1, &v195, v190);
      if (LODWORD(v185[0]))
      {
        v146 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v185, v199);
LABEL_261:
        v148 = (EQKitLayoutManager *)objc_msgSend(v49, "width");
        EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(v148, (const EQKit::ILayout *)v187, v101 * 0.5 + v175 + v144 - v146, v39 - v149 - (v101 * 0.5 + v175 + v144 - v146), (EQKit::ILayout *)&v205);
        EQKit::ILayout::operator=((uint64_t)v187, (uint64_t)&v205);
        goto LABEL_262;
      }
    }
    else
    {
      LODWORD(v185[0]) = 0;
      v185[1] = 0;
    }
    objc_msgSend(v49, "width");
    v146 = v147 * 0.5;
    goto LABEL_261;
  }
  EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v187, v204, 0, (EQKit::ILayout *)&v205, v39, 0.0);
  EQKit::ILayout::operator=((uint64_t)v187, (uint64_t)&v205);
LABEL_262:
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
LABEL_263:
  if (v51)
  {
    v61 = v181;
    v59 = v176;
    v140 = v177;
    if ((v90 & 1) == 0)
    {
      objc_msgSend(v51, "layoutHeight");
      v151 = v173 - v150;
      if (v85 < v151)
        v85 = v151;
    }
    if (v204 == 2)
    {
      v152 = (EQKitLayoutManager *)objc_msgSend(v51, "width");
      EQKitLayoutManager::layoutBoxHorizontallyWithSpacings(v152, (const EQKit::ILayout *)v192, v175 - v105, v39 - v153 - (v175 - v105), (EQKit::ILayout *)&v205);
    }
    else
    {
      EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v192, v204, 0, (EQKit::ILayout *)&v205, v39, 0.0);
    }
    EQKit::ILayout::operator=((uint64_t)v192, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
  }
  else
  {
    v85 = 0.0;
    v61 = v181;
    v59 = v176;
    v140 = v177;
  }
LABEL_272:
  v154 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v155 = v187[0];
  if (v187[0])
  {
    if (v59 != 0.0)
    {
      v156 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v59, 0.0);
      objc_msgSend(v154, "addObject:", v156);

      v155 = v187[0];
    }
    objc_msgSend(v154, "addObject:", v155);
    if (v60 != 0.0)
    {
      v157 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v60, 0.0);
      objc_msgSend(v154, "addObject:", v157);

    }
  }
  v158 = objc_msgSend(v154, "count");
  if (v193[0])
    objc_msgSend(v154, "addObject:");
  v159 = v192[0];
  if (v192[0])
  {
    if (v85 != 0.0)
    {
      v160 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v85, 0.0);
      objc_msgSend(v154, "addObject:", v160);

      v159 = v192[0];
    }
    objc_msgSend(v154, "addObject:", v159);
    if (v140 != 0.0)
    {
      v161 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", 0.0, v140);
      objc_msgSend(v154, "addObject:", v161);

    }
  }
  v12 = v179;
  v162 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v154, v158);
  EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)v193);
  if (v7)
  {
    if (v8)
      v163 = v61;
    else
      v163 = 1;
    v164 = 1;
    if ((v194 & 0x1C00u) <= 0x1000 || (v163 & 1) == 0)
      goto LABEL_301;
LABEL_295:
    v166 = v182;
    if (!v9)
      v166 = 1;
    if (v166)
      v164 = 4;
    else
      v164 = 1;
    goto LABEL_301;
  }
  if (v8)
    v165 = v61;
  else
    v165 = 1;
  if (v165 == 1)
    goto LABEL_295;
  v164 = 1;
LABEL_301:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v164);
  EQKit::ILayout::setBox((EQKitBox *)a5, &v162->super.super);

  if (v9 && v202 && ((v182 ^ 1) & 1) == 0)
    EQKit::ILayout::setIsOverAccentTokenWithBaseToken((uint64_t)a5, 1);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v187);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v192);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v193);
LABEL_306:
  if (a3)
  {
    v167 = (void *)objc_msgSend(a4, "operatorCore");
    if (v167)
    {
      v168 = EQKitLayoutManager::leftSpaceForOperator(a2, v167);
      v169 = EQKitLayoutManager::rightSpaceForOperator(a2, v167);
      if (v12 >= v168)
        v170 = v12;
      else
        v170 = v168;
      if (v12 < v169)
        v12 = v169;
    }
    else
    {
      v170 = v12;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a2, v170);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v184, a5);
    v171 = *(_QWORD *)(a2 + 408);
    if (*(_QWORD *)(a2 + 400) == v171)
      v172 = 0;
    else
      v172 = *(_QWORD *)(v171 - 8);
    EQKitLayoutManager::addRowChild((_QWORD *)a2, (uint64_t)v184, v172);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v184);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a2, v12);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v205, 0);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v205);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v205);
  }
}

void sub_2411B2658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, EQKit::ILayout *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a36);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a46);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a53);
  EQKit::ILayout::~ILayout(a19);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutTable@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[25];

  EQKit::ILayout::ILayout(a3, 0);
  v9[0] = &off_25112A7E0;
  v9[1] = this;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  std::deque<EQKitLayoutTable>::push_back((_QWORD *)this + 70, (uint64_t)v9);
  EQKitLayoutTable::~EQKitLayoutTable((EQKitLayoutTable *)v9);
  v6 = (void *)EQKit::Layout::Schemata::tableSchemata(a2);
  if (v6)
  {
    v7 = *((_QWORD *)this + 75);
    if (v7)
    {
      EQKitLayoutTable::layoutTable(*(_QWORD *)(*((_QWORD *)this + 71) + 8 * ((v7 + *((_QWORD *)this + 74) - 1) / 0x2AuLL))+ 96 * ((v7 + *((_QWORD *)this + 74) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v9);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v9);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);
    }
  }
  return std::deque<EQKitLayoutTable>::pop_back((_QWORD *)this + 70);
}

void sub_2411B28F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutTableRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  _BYTE v8[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = (void *)EQKit::Layout::Schemata::tableRowSchemata(a2);
  if (v6)
  {
    v7 = *((_QWORD *)this + 75);
    if (v7)
    {
      EQKitLayoutTable::layoutTr(*(_QWORD *)(*((_QWORD *)this + 71) + 8 * ((v7 + *((_QWORD *)this + 74) - 1) / 0x2AuLL))+ 96 * ((v7 + *((_QWORD *)this + 74) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v8);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v8);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v8);
    }
  }
}

void sub_2411B29E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[168];

  v5 = (_QWORD *)((char *)this + 512);
  v6 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v9, (uint64_t)this, v6, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, 0.0);
  std::deque<EQKitLayoutElementaryStack>::push_back(v5, (const EQKitLayoutElementaryStack *)v9);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v9);
  v7 = *((_QWORD *)this + 69) + *((_QWORD *)this + 68) - 1;
  EQKitLayoutElementaryStack::layout((id *)(*(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18)), a3);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v5);
}

void sub_2411B2AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  EQKit::ILayout *v10;

  EQKit::ILayout::~ILayout(v10);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackGroup(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 69);
  if (v6)
  {
    v7 = v6 + *((_QWORD *)this + 68) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackGroupSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackGroup((_QWORD *)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2411B2B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 69);
  if (v6)
  {
    v7 = v6 + *((_QWORD *)this + 68) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackRowSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackRow((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2411B2C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackLine(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v9[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 69);
  if (v6)
  {
    v7 = v6 + *((_QWORD *)this + 68) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v7 / 0x18));
    EQKit::Layout::Schemata::stackLineSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackLine(v8 + 168 * (v7 % 0x18), (EQKit::ILayout *)v9);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v9);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);
  }
}

void sub_2411B2D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarries(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 69);
  if (v6)
  {
    v7 = v6 + *((_QWORD *)this + 68) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackCarriesSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarries((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2411B2E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarry(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 69);
  if (v6)
  {
    v7 = v6 + *((_QWORD *)this + 68) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackCarrySchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarry((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2411B2ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutLongDivision(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  double v14;
  double v15;
  EQKitPathBox *v16;
  EQKitPathBox *v17;
  EQKitPaddedBox *v18;
  double v19;
  double v20;
  CGRect *v21;
  EQKitBox *v22;
  double Width;
  double v24;
  double v25;
  double v26;
  EQKitPaddedBox *v27;
  EQKitHBox *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  EQKitVShift *v32;
  const void *v33;
  _OWORD v34[2];
  double v35;
  id v36[8];
  unint64_t *v37;
  int v38;
  _BYTE v39[72];
  _QWORD v40[7];
  __CTFont *v41;
  _BYTE v42[8];
  _QWORD v43[18];
  _QWORD v44[4];

  v44[3] = *MEMORY[0x24BDAC8D0];
  v5 = (void *)EQKit::Layout::Schemata::longDivisionSchemata(a2);
  v6 = *((_QWORD *)this + 37);
  if (v6)
    v7 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v6 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                + 152 * ((v6 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v7 = (char *)this + 56;
  v8 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v8)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v8 - 8);
  EQKitLayoutContext::EQKitLayoutContext(v42, this, v7, v9, 0, 0, 0);
  std::deque<EQKitLayoutContext>::push_back((_QWORD *)this + 32, (EQKitLayoutContext *)v42);
  v10 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*((id *)this + 76), "fontManager"));
  v41 = (__CTFont *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 72))(v10, v43);
  if (!v41)
    goto LABEL_18;
  EQKitLayoutManager::layoutBox(this, objc_msgSend(v5, "schemataDivisor"), 0, 0, 0, 0, 0, (EQKit::ILayout *)v40);
  EQKitPath::EQKitPath((EQKitPath *)&v37, v41, 0x27CCu);
  EQKitPath::findStemForEdge(&v37, 2, (uint64_t)v36);
  v11 = v36[6];
  v35 = 0.0;
  v12 = (void *)objc_msgSend(v5, "schemataStack");
  if (v12)
    objc_msgSend(v12, "layoutSchemata");
  else
    memset(v34, 0, sizeof(v34));
  EQKitLayoutManager::layoutStack(this, (const EQKit::Layout::Schemata *)v34, *(double *)&v11, &v35, 2, 1, (EQKit::ILayout *)v36);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v34);
  *(_QWORD *)&v34[0] = 0;
  v13 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*((id *)this + 76), "fontManager"));
  v14 = v35;
  objc_msgSend(v36[0], "width");
  v33 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, double, double))(*(_QWORD *)v13 + 168))(v13, v43, v34, v14, v15);
  if (v33)
  {
    v16 = [EQKitPathBox alloc];
    v17 = -[EQKitPathBox initWithCGPath:height:cgColor:](v16, "initWithCGPath:height:cgColor:", v33, v43[13], *(double *)&v11);
    v18 = [EQKitPaddedBox alloc];
    -[EQKitPathBox height](v17, "height");
    v20 = v19;
    v21 = (CGRect *)(v39[32] ? v39 : EQKitPath::computePathBounds((CGFloat *)&v37));
    Width = CGRectGetWidth(*v21);
    -[EQKitPathBox depth](v17, "depth");
    v25 = v24;
    -[EQKitPathBox height](v17, "height");
    v27 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v18, "initWithBox:height:width:depth:lspace:voffset:", v17, v20, Width, v25, 0.0, v14 - v26);

    v28 = [EQKitHBox alloc];
    v44[0] = v40[0];
    v44[1] = v27;
    v44[2] = v36[0];
    v22 = -[EQKitCompoundBox initWithChildBoxes:](v28, "initWithChildBoxes:", objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v44, 3));

  }
  else
  {
    v22 = 0;
  }
  EQKit::AutoCFType<CGPath const*>::~AutoCFType(&v33);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v36);
  EQKitPath::~EQKitPath((EQKitPath *)&v37);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v40);
  if (!v22)
LABEL_18:
    v22 = objc_alloc_init(EQKitBox);
  LODWORD(v36[0]) = 0;
  v29 = *((_QWORD *)this + 77);
  v30 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v30)
    v31 = 0;
  else
    v31 = *(unint64_t **)(v30 - 8);
  v37 = v31;
  v38 = 2;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v29, v29 + 152, (uint64_t)&v37, v36);
  std::deque<EQKitLayoutContext>::pop_back((_QWORD *)this + 32);
  v32 = EQKitLayoutManager::baselineAlignBox(this, v22, (int)v36[0]);
  EQKit::ILayout::ILayout(a3, &v32->super);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v41);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v42);
}

void sub_2411B32B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,const void *a51,char a52)
{
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&a11);
  EQKitPath::~EQKitPath((EQKitPath *)&a24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a44);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType(&a51);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)&a52);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutRadical(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  double *v7;
  void *v8;
  void *v9;
  __n128 v10;
  void *v11;
  char v12;
  double v13;
  uint64_t v14;
  double v15;
  __n128 v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  EQKitPathBox *v30;
  double v31;
  EQKitLayoutManager *v32;
  EQKitBox *v33;
  EQKitPaddedBox *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  EQKitPaddedBox *v41;
  __n128 v42;
  double v43;
  double v44;
  double v45;
  __n128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  id v65;
  EQKitVSpace *v66;
  double v67;
  double v68;
  EQKitHSpace *v69;
  EQKitHBox *v70;
  EQKitHBox *v71;
  EQKitVBox *v72;
  id v73;
  double v74;
  double v75;
  id v76;
  __n128 v77;
  uint64_t v78;
  int v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  __n128 v89;
  double Width;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  char *v97;
  double v98;
  double v99;
  uint64_t v100;
  char *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  EQKitVSpace *v106;
  double v107;
  double v108;
  double v109;
  double v110;
  void *v111;
  EQKitHSpace *v112;
  double v113;
  double v114;
  double v115;
  double v116;
  EQKitOffsetVBox *v117;
  id v118;
  EQKitHSpace *v119;
  EQKitHBox *v120;
  char v121;
  void *v122;
  const void *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  __int128 v128;
  __int128 v129;
  double v130;
  _QWORD v131[4];
  __int16 v132;
  _QWORD v133[4];
  __int16 v134;
  _QWORD v135[5];
  CGRect v136;
  CGRect v137;
  CGRect v138;

  v135[3] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 37);
  if (v6)
    v7 = (double *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v6 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                  + 152 * ((v6 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v7 = (double *)((char *)this + 56);
  v8 = (void *)EQKit::Layout::Schemata::radicalSchemata(a2);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v133, 0);
  v122 = v8;
  if (objc_msgSend(v8, "schemataIndex"))
  {
    EQKitLayoutManager::layoutBox(this, objc_msgSend(v8, "schemataIndex"), 2, 0, 0, 0, 0, (EQKit::ILayout *)v131);
    EQKit::ILayout::operator=((uint64_t)v133, (uint64_t)v131);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v131);
  }
  v9 = (void *)v133[0];
  EQKitLayoutManager::layoutBox(this, objc_msgSend(v8, "schemataRadicand"), 0, *((unsigned __int8 *)v7 + 16), 0, 0, 0, (EQKit::ILayout *)v131);
  v11 = (void *)v131[0];
  v12 = *((_BYTE *)v7 + 120);
  if ((v12 & 1) != 0)
  {
    v13 = v7[16];
  }
  else
  {
    v13 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    v12 = *((_BYTE *)v7 + 120);
  }
  v14 = *((_QWORD *)v7 + 11);
  if ((v12 & 1) != 0)
    v10.n128_f64[0] = v7[16];
  else
    v10.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
  v15 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v14 + 56))(v14, 17, (char *)v7 + 8, v10);
  v17 = v13;
  v18 = v13;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 11) + 16))(*((_QWORD *)v7 + 11)))
  {
    v19 = *((_QWORD *)v7 + 11);
    if (((_BYTE)v7[15] & 1) != 0)
      v16.n128_f64[0] = v7[16];
    else
      v16.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    v18 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v19 + 56))(v19, 53, (char *)v7 + 8, v16);
    v17 = 0.0;
  }
  v20 = *((_QWORD *)v7 + 11);
  if (((_BYTE)v7[15] & 1) != 0)
    v16.n128_f64[0] = v7[16];
  else
    v16.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
  v21 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v20 + 56))(v20, 18, (char *)v7 + 8, v16);
  objc_msgSend(v11, "erasableBounds");
  v23 = v22;
  objc_msgSend(v11, "width");
  v25 = v24;
  v130 = 0.0;
  v128 = 0u;
  v129 = 0u;
  v124 = *MEMORY[0x24BDBF148];
  v125 = 0;
  v126 = 0;
  v26 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*((id *)this + 76), "fontManager"));
  v123 = (const void *)(*(uint64_t (**)(uint64_t, char *, __int128 *, __int128 *, double, double, double))(*(_QWORD *)v26 + 160))(v26, (char *)v7 + 8, &v128, &v124, v21 + v18 + v23 + v17 * 2.0, v25, v18);
  if (v123)
  {
    v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 11) + 16))(*((_QWORD *)v7 + 11));
    v28 = *((double *)&v124 + 1);
    v29 = v127;
    v30 = [EQKitPathBox alloc];
    v31 = 0.0;
    if (v27)
      v31 = v29;
    v32 = -[EQKitPathBox initWithCGPath:height:cgColor:](v30, "initWithCGPath:height:cgColor:", v123, *((_QWORD *)v7 + 14), v28 - v31);
    v33 = EQKitLayoutManager::wrapBoxWithAttribution(v32, (EQKitBox *)v32, (id *)a2);
    v34 = [EQKitPaddedBox alloc];
    -[EQKitBox height](v33, "height");
    v36 = v35;
    -[EQKitBox width](v33, "width");
    v38 = v37;
    v39 = v130;
    -[EQKitBox depth](v33, "depth");
    v41 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v34, "initWithBox:height:width:depth:lspace:voffset:", v33, v36, v38 - v25 - v39, v40, 0.0, 0.0);

  }
  else
  {
    v41 = 0;
  }
  v43 = v18 + v21;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 11) + 16))(*((_QWORD *)v7 + 11)))
  {
    -[EQKitBox layoutHeight](v41, "layoutHeight");
    v45 = v44;
    objc_msgSend(v11, "layoutHeight");
    if (v45 > v43 + v46.n128_f64[0])
    {
      -[EQKitBox layoutDepth](v41, "layoutDepth");
      v48 = v47;
      objc_msgSend(v11, "layoutDepth");
      if (v48 > v46.n128_f64[0])
      {
        -[EQKitBox layoutHeight](v41, "layoutHeight");
        v50 = v49;
        objc_msgSend(v11, "layoutHeight");
        v43 = v50 - v46.n128_f64[0];
      }
    }
    v51 = *((_QWORD *)v7 + 11);
    if (((_BYTE)v7[15] & 1) != 0)
      v46.n128_f64[0] = v7[16];
    else
      v46.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    v64 = v43
        + (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v51 + 56))(v51, 52, (char *)v7 + 8, v46);
  }
  else
  {
    v52 = *((_QWORD *)v7 + 11);
    if (((_BYTE)v7[15] & 1) != 0)
      v42.n128_f64[0] = v7[16];
    else
      v42.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
    v53 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v52 + 56))(v52, 19, (char *)v7 + 8, v42);
    -[EQKitBox layoutHeight](v41, "layoutHeight");
    v55 = v54;
    objc_msgSend(v11, "layoutVSize");
    v57 = v55 - v18 - v21;
    if (v57 >= v53)
      v57 = v53;
    if (v56 >= v57)
      v58 = v56;
    else
      v58 = v57;
    -[EQKitBox layoutHeight](v41, "layoutHeight");
    v60 = v59;
    objc_msgSend(v11, "layoutVSize");
    v62 = v60 - v18 - (v21 + v58);
    if (v62 <= 0.0)
      v63 = v18 + v21;
    else
      v63 = v43 + v62 * 0.5;
    v64 = v63 + v58 - v61;
  }
  v65 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if (v64 != 0.0)
  {
    v66 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v64, 0.0);
    objc_msgSend(v65, "addObject:", v66);

  }
  objc_msgSend(v11, "width");
  v68 = v15 + (v25 - v67) * 0.5;
  if (v68 == 0.0)
  {
    objc_msgSend(v65, "addObject:", v11);
  }
  else
  {
    v69 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v68);
    v70 = [EQKitHBox alloc];
    v135[0] = v69;
    v135[1] = v11;
    v135[2] = v69;
    v71 = -[EQKitCompoundBox initWithChildBoxes:](v70, "initWithChildBoxes:", objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v135, 3));
    objc_msgSend(v65, "addObject:", v71);

  }
  v72 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v65, objc_msgSend(v65, "count") - 1);
  v73 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  -[EQKitPaddedBox width](v41, "width");
  v75 = v74;
  if (v9)
  {
    v76 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 11) + 16))(*((_QWORD *)v7 + 11)))
    {
      v78 = *((_QWORD *)v7 + 11);
      if (((_BYTE)v7[15] & 1) != 0)
        v77.n128_f64[0] = v7[16];
      else
        v77.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
      v88 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v78 + 56))(v78, 54, (char *)v7 + 8, v77);
      objc_msgSend(v9, "erasableBounds");
      Width = CGRectGetWidth(v136);
      v91 = *((_QWORD *)v7 + 11);
      if (((_BYTE)v7[15] & 1) != 0)
        v89.n128_f64[0] = v7[16];
      else
        v89.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
      v92 = (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v91 + 56))(v91, 55, (char *)v7 + 8, v89);
      if (v92 <= -Width)
        v93 = -Width;
      else
        v93 = v92;
      objc_msgSend(v9, "erasableBounds");
      v94 = fmax(v88, 0.0);
      if (CGRectGetWidth(v137) < -v93
        || (objc_msgSend(v9, "erasableBounds"), v94 = v94 - v93 - CGRectGetWidth(v138), v94 >= 0.0))
      {
        if (v94 != 0.0)
          objc_msgSend(v76, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v94));
      }
      else
      {
        v75 = v75 - v94;
      }
      objc_msgSend(v76, "addObject:", v9);
    }
    else
    {
      v79 = **((_DWORD **)this + 6);
      v80 = *(double *)&v129;
      objc_msgSend(v9, "width");
      v82 = v80 - v81;
      if (v79 != 3)
      {
        v83 = *((double *)&v128 + 1);
        objc_msgSend(v9, "width");
        v85 = v83 + v84 * -0.5;
        if (v82 >= v85)
          v82 = v85;
      }
      objc_msgSend(v9, "width");
      v87 = v82 + v86;
      if (v75 < v87)
        v75 = v87;
      if (v82 > 0.0)
        objc_msgSend(v76, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v82));
      objc_msgSend(v76, "addObject:", v9);
      v75 = v75 - fmin(v82, 0.0);
    }
    objc_msgSend(v73, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v76));
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 11) + 16))(*((_QWORD *)v7 + 11)))
    {
      v95 = (*(double (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 11) + 64))(*((_QWORD *)v7 + 11), 5);
      objc_msgSend(v73, "addObject:", -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", (v95 / 100.0 + -1.0) * *((double *)&v124 + 1), 0.0));
    }
    else
    {
      v96 = *((_QWORD *)this + 37);
      if (v96)
        v97 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v96 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                     + 152 * ((v96 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
      else
        v97 = (char *)this + 56;
      v98 = *(double *)&v128;
      v99 = (*(double (**)(_QWORD, uint64_t, char *, double))(**((_QWORD **)v7 + 11) + 56))(*((_QWORD *)v7 + 11), 20, v97 + 8, v13);
      v100 = *((_QWORD *)this + 37);
      if (v100)
        v101 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v100 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                      + 152 * ((v100 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
      else
        v101 = (char *)this + 56;
      v102 = (*(double (**)(_QWORD, uint64_t, char *, double))(**((_QWORD **)v7 + 11) + 56))(*((_QWORD *)v7 + 11), 21, v101 + 8, v13);
      objc_msgSend(v9, "layoutDepth");
      v104 = v102 + v103;
      if (v99 >= v104)
        v105 = v99;
      else
        v105 = v104;
      v106 = [EQKitVSpace alloc];
      objc_msgSend(v9, "layoutDepth");
      v108 = v107;
      -[EQKitBox layoutHeight](v41, "layoutHeight");
      objc_msgSend(v73, "addObject:", -[EQKitVSpace initWithHeight:depth:](v106, "initWithHeight:depth:", v98 + v105 - v108 - v109, 0.0));
    }
  }
  -[EQKitPaddedBox width](v41, "width");
  if (v110 >= v75)
  {
    if (v41)
      objc_msgSend(v73, "addObject:", v41);
  }
  else
  {
    v111 = (void *)MEMORY[0x24BDBCE30];
    v112 = [EQKitHSpace alloc];
    -[EQKitPaddedBox width](v41, "width");
    objc_msgSend(v73, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", objc_msgSend(v111, "arrayWithObjects:", -[EQKitHSpace initWithWidth:](v112, "initWithWidth:", v75 - v113), v41, 0)));
  }
  -[EQKitCompoundBox height](v72, "height");
  v115 = v114;
  -[EQKitPaddedBox height](v41, "height");
  v117 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v73, objc_msgSend(v73, "count") - 1, v115 - v13 - v116);
  v118 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  objc_msgSend(v118, "addObject:", v117);
  if (v15 != 0.0)
    objc_msgSend(v118, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", -v15));
  objc_msgSend(v118, "addObject:", v72);
  if (v130 != 0.0)
  {
    v119 = [EQKitHSpace alloc];
    objc_msgSend(v118, "addObject:", -[EQKitHSpace initWithWidth:](v119, "initWithWidth:", v130));
  }

  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v131);
  v120 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v118);
  EQKit::ILayout::setBox((EQKitBox *)a3, &v120->super.super);

  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a3, 1);
  if (!objc_msgSend(v122, "schemataIndex") || (v134 & 0x1000) != 0)
  {
    if ((v132 & 0x1C00u) <= 0x1000)
      v121 = 0;
    else
      v121 = 3;
  }
  else
  {
    v121 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v121);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType(&v123);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v131);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
}

void sub_2411B3EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  EQKit::AutoCFType<CGPath const*>::~AutoCFType(&a12);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a31);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutManager::layoutNone@<X0>(EQKit::ILayout *a1@<X8>)
{
  return EQKit::ILayout::ILayout(a1, (EQKitBox *)-[EQKitHVSpace initWithWidth:height:depth:]([EQKitHVSpace alloc], "initWithWidth:height:depth:", 0.0, 0.0, 0.0));
}

void EQKitLayoutManager::layoutPadded(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  EQKitPaddedBox *v37;
  EQKitBox *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55[4];
  unsigned __int16 v56;
  uint64_t v57;
  int v58;

  v5 = objc_msgSend((id)EQKit::Layout::Schemata::paddedSchemata(a2), "schemataNode");
  EQKitLayoutManager::layoutBox(this, v5, 0, (EQKit::ILayout *)v55);
  objc_msgSend(v55[0], "layoutHeight");
  v7 = v6;
  objc_msgSend(v55[0], "layoutDepth");
  v9 = v8;
  objc_msgSend(v55[0], "width");
  v11 = v10;
  v12 = *((_QWORD *)this + 37);
  if (v12)
    v13 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v12 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                 + 152 * ((v12 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v13 = (char *)this + 56;
  LODWORD(v52) = 1;
  v53 = 0;
  v54 = 0;
  v14 = *((_QWORD *)this + 77);
  v15 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v15)
    v16 = 0;
  else
    v16 = *(_QWORD *)(v15 - 8);
  v49 = v16;
  LODWORD(v50) = 29;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v14, v14 + 464, (uint64_t)&v49, (uint64_t)&v52);
  v17 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v52, (uint64_t)v13, v7, v7, v9, v11);
  if (v17 >= 0.0)
    v18 = v17;
  else
    v18 = 0.0;
  LODWORD(v49) = 1;
  v50 = 0;
  v51 = 0;
  v19 = *((_QWORD *)this + 77);
  v20 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v20)
    v21 = 0;
  else
    v21 = *(_QWORD *)(v20 - 8);
  v46 = v21;
  LODWORD(v47) = 30;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v19, v19 + 464, (uint64_t)&v46, (uint64_t)&v49);
  v22 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v49, (uint64_t)v13, v9, v7, v9, v11);
  if (v22 >= 0.0)
    v23 = v22;
  else
    v23 = 0.0;
  LODWORD(v46) = 1;
  v47 = 0;
  v48 = 0;
  v24 = *((_QWORD *)this + 77);
  v25 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v25)
    v26 = 0;
  else
    v26 = *(_QWORD *)(v25 - 8);
  v43 = v26;
  LODWORD(v44) = 31;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v24, v24 + 464, (uint64_t)&v43, (uint64_t)&v46);
  v27 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v46, (uint64_t)v13, v11, v7, v9, v11);
  if (v27 >= 0.0)
    v28 = v27;
  else
    v28 = 0.0;
  LODWORD(v43) = 1;
  v44 = 0;
  v45 = 0;
  v29 = *((_QWORD *)this + 77);
  v30 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v30)
    v31 = 0;
  else
    v31 = *(_QWORD *)(v30 - 8);
  v40 = v31;
  LODWORD(v41) = 32;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v29, v29 + 464, (uint64_t)&v40, (uint64_t)&v43);
  v32 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v43, (uint64_t)v13, 0.0, v7, v9, v11);
  LODWORD(v40) = 1;
  v41 = 0;
  v42 = 0;
  v33 = *((_QWORD *)this + 77);
  v34 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v34)
    v35 = 0;
  else
    v35 = *(_QWORD *)(v34 - 8);
  v57 = v35;
  v58 = 33;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v33, v33 + 464, (uint64_t)&v57, (uint64_t)&v40);
  v36 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v40, (uint64_t)v13, 0.0, v7, v9, v11);
  v37 = [EQKitPaddedBox alloc];
  v38 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v37, "initWithBox:height:width:depth:lspace:voffset:", v55[0], v18, v28, v23, v32, v36, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50,
          v51,
          v52,
          v53,
          v54);
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v55);
  EQKit::ILayout::setBox((EQKitBox *)a3, v38);
  if (v18 == v7 && v23 == v9 && v36 == 0.0)
    v39 = (v56 >> 10) & 7;
  else
    LOBYTE(v39) = 0;
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v39);

  EQKit::ILayout::~ILayout((EQKit::ILayout *)v55);
}

void sub_2411B438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  EQKit::ILayout *v24;

  EQKit::ILayout::~ILayout(v24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a24);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSpace(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  EQKitHVSpace *v13;
  EQKit::ILayout *v14;
  char v16;

  v5 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v5)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v5 - 8);
  v7 = EQKitLayoutManager::lengthForAttribute(this, 26, v6, 0.0);
  v8 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v8)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v8 - 8);
  v10 = EQKitLayoutManager::lengthForAttribute(this, 27, v9, 0.0);
  v11 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v11)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v11 - 8);
  v13 = -[EQKitHVSpace initWithWidth:height:depth:]([EQKitHVSpace alloc], "initWithWidth:height:depth:", EQKitLayoutManager::lengthForAttribute(this, 28, v12, 0.0), v7, v10);
  v14 = EQKit::ILayout::ILayout(a2, &v13->super);
  EQKit::ILayout::setIsUserSpace((uint64_t)v14, 1);
  if (v10 == 0.0 && v7 == 0.0)
    v16 = 6;
  else
    v16 = 0;
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v16);

}

void sub_2411B44F0(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFenced(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v4;
  id v5;
  std::vector<std::string>::pointer end;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::vector<std::string>::pointer v24;
  std::vector<std::string>::pointer begin;
  std::string::size_type size;
  id v27;
  std::string *v28;
  void *v29;
  EQKitMathMLMOperator *v30;
  EQKitMathMLMOperator *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t i;
  unint64_t v39;
  std::string *v40;
  id v41;
  void *v42;
  EQKitMathMLMOperator *v43;
  EQKitMathMLMOperator *v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  id v48;
  std::string *v49;
  void *v50;
  EQKitMathMLMOperator *v51;
  EQKitMathMLMOperator *v52;
  uint64_t v53;
  uint64_t v54;
  EQKit::ILayout *v55;
  id obj;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p[2];
  std::string::size_type v63;
  std::vector<std::string> v64;
  std::string v65;
  std::string v66;
  std::__split_buffer<std::string> __v;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  obj = (id)objc_msgSend((id)EQKit::Layout::Schemata::fencedSchemata(a2), "schemataChildren");
  v4 = objc_msgSend(obj, "count");
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  std::string::basic_string[abi:ne180100]<0>(&v66, "(");
  std::string::basic_string[abi:ne180100]<0>(&v65, ")");
  memset(&v64, 0, sizeof(v64));
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  end = v64.__end_;
  if (v64.__end_ >= v64.__end_cap_.__value_)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v9)
      v9 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
    if (v10)
      v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v64.__end_cap_, v10);
    else
      v11 = 0;
    v12 = v11 + v8;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v63;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    v63 = 0;
    __p[0] = 0;
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v64, &__v);
    v14 = v64.__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    v64.__end_ = v14;
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    v64.__end_->__r_.__value_.__r.__words[2] = v63;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v64.__end_ = end + 1;
  }
  v15 = *((_QWORD *)this + 77);
  v16 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v16)
    v17 = 0;
  else
    v17 = *(std::string **)(v16 - 8);
  __v.__first_ = v17;
  LODWORD(__v.__begin_) = 18;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v15, v15 + 80, (uint64_t)&__v, &v66);
  v18 = *((_QWORD *)this + 77);
  v19 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v19)
    v20 = 0;
  else
    v20 = *(std::string **)(v19 - 8);
  __v.__first_ = v20;
  LODWORD(__v.__begin_) = 19;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v18, v18 + 80, (uint64_t)&__v, &v65);
  v21 = *((_QWORD *)this + 77);
  v22 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v22)
    v23 = 0;
  else
    v23 = *(std::string **)(v22 - 8);
  __v.__first_ = v23;
  LODWORD(__v.__begin_) = 20;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(v21, v21 + 104, (uint64_t)&__v, (std::vector<std::wstring> *)&v64);
  v55 = a3;
  begin = v64.__begin_;
  v24 = v64.__end_;
  size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v66.__r_.__value_.__l.__size_;
  if (size)
  {
    v27 = objc_alloc(MEMORY[0x24BDD17C8]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v66;
    else
      v28 = (std::string *)v66.__r_.__value_.__r.__words[0];
    v29 = (void *)objc_msgSend(v27, "initWithUTF8String:", v28);
    v30 = -[EQKitMathMLMOperator initWithString:environment:]([EQKitMathMLMOperator alloc], "initWithString:environment:", v29, *((_QWORD *)this + 76));
    v31 = v30;
    v32 = *((_QWORD *)this + 51);
    if (*((_QWORD *)this + 50) == v32)
      v33 = 0;
    else
      v33 = *(_QWORD *)(v32 - 8);
    -[EQKitMathMLNode setParent:](v30, "setParent:", v33);
    objc_msgSend(v5, "addObject:", v31);

  }
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
  if (v34)
  {
    v35 = 0;
    v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)begin) >> 3);
    v37 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)v59 != v37)
          objc_enumerationMutation(obj);
        objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * i));
        if (v35 + i + 1 < v4 && v64.__end_ != v64.__begin_)
        {
          v39 = v35 + i;
          if (v35 + i >= v36)
            v39 = v36 - 1;
          v40 = &v64.__begin_[v39];
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v40->__r_.__value_.__l.__size_)
              continue;
          }
          else if (!*((_BYTE *)&v40->__r_.__value_.__s + 23))
          {
            continue;
          }
          v41 = objc_alloc(MEMORY[0x24BDD17C8]);
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
            v40 = (std::string *)v40->__r_.__value_.__r.__words[0];
          v42 = (void *)objc_msgSend(v41, "initWithUTF8String:", v40);
          v43 = -[EQKitMathMLMOperator initWithString:environment:]([EQKitMathMLMOperator alloc], "initWithString:environment:", v42, *((_QWORD *)this + 76));
          v44 = v43;
          v45 = *((_QWORD *)this + 51);
          if (*((_QWORD *)this + 50) == v45)
            v46 = 0;
          else
            v46 = *(_QWORD *)(v45 - 8);
          -[EQKitMathMLNode setParent:](v43, "setParent:", v46);
          objc_msgSend(v5, "addObject:", v44);

        }
      }
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
      v35 += i;
    }
    while (v34);
  }
  v47 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v47 = v65.__r_.__value_.__l.__size_;
  if (v47)
  {
    v48 = objc_alloc(MEMORY[0x24BDD17C8]);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v65;
    else
      v49 = (std::string *)v65.__r_.__value_.__r.__words[0];
    v50 = (void *)objc_msgSend(v48, "initWithUTF8String:", v49);
    v51 = -[EQKitMathMLMOperator initWithString:environment:]([EQKitMathMLMOperator alloc], "initWithString:environment:", v50, *((_QWORD *)this + 76));
    v52 = v51;
    v53 = *((_QWORD *)this + 51);
    if (*((_QWORD *)this + 50) == v53)
      v54 = 0;
    else
      v54 = *(_QWORD *)(v53 - 8);
    -[EQKitMathMLNode setParent:](v51, "setParent:", v54);
    objc_msgSend(v5, "addObject:", v52);

  }
  EQKit::Layout::Schemata::row((EQKit::Layout::Schemata *)v5, (uint64_t)&__v);

  EQKitLayoutManager::layoutRow(this, (const EQKit::Layout::Schemata *)&__v, v55);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
}

void sub_2411B4A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int *__pa,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,std::__split_buffer<std::wstring> *a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a46);
  if (SHIBYTE(a27) < 0)
    operator delete(__pa);
  __pa = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutEnclose(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGPath *Mutable;
  int *v10;
  int *v11;
  CGPath *PathForNotation;
  EQKitPathBox *v13;
  __n128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  EQKitPathBox *v21;
  EQKitOverlayBox *v22;
  EQKitBox *v23;
  void *__p;
  int *v25;
  uint64_t v26;
  void *v27[7];
  uint64_t v28;
  int v29;

  v5 = objc_msgSend((id)EQKit::Layout::Schemata::encloseSchemata(a2), "schemataRow");
  EQKitLayoutManager::layoutBox(this, v5, 0, (EQKit::ILayout *)v27);
  __p = 0;
  v25 = 0;
  v26 = 0;
  v6 = *((_QWORD *)this + 77);
  v7 = *((_QWORD *)this + 51);
  if (*((_QWORD *)this + 50) == v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(v7 - 8);
  v28 = v8;
  v29 = 47;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v6, v6 + 224, (uint64_t)&v28, (char *)&__p);
  Mutable = CGPathCreateMutable();
  v10 = (int *)__p;
  v11 = v25;
  while (v10 != v11)
  {
    PathForNotation = EQKitLayoutManager::createPathForNotation(this, v27[0], *v10);
    CGPathAddPath(Mutable, 0, PathForNotation);
    CGPathRelease(PathForNotation);
    ++v10;
  }
  v13 = [EQKitPathBox alloc];
  objc_msgSend(v27[0], "height");
  v15 = v14.n128_f64[0];
  v16 = *((_QWORD *)this + 37);
  if (v16)
  {
    v17 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v16 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                 + 152 * ((v16 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
    v18 = (uint64_t *)(v17 + 112);
  }
  else
  {
    v18 = (uint64_t *)((char *)this + 168);
    v17 = (char *)this + 56;
  }
  v19 = *v18;
  v20 = *((_QWORD *)v17 + 11);
  if ((v17[120] & 1) != 0)
    v14.n128_u64[0] = *((_QWORD *)v17 + 16);
  else
    v14.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v17);
  v21 = -[EQKitPathBox initWithCGPath:height:cgColor:drawingMode:lineWidth:](v13, "initWithCGPath:height:cgColor:drawingMode:lineWidth:", Mutable, v19, 2, v15, (*(double (**)(uint64_t, uint64_t, char *, __n128))(*(_QWORD *)v20 + 56))(v20, 23, v17 + 8, v14));
  v22 = [EQKitOverlayBox alloc];
  v23 = -[EQKitOverlayBox initWithBox:overlayBox:](v22, "initWithBox:overlayBox:", v27[0], v21);
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v27);
  EQKit::ILayout::setBox((EQKitBox *)a3, v23);

  CGPathRelease(Mutable);
  if (__p)
  {
    v25 = (int *)__p;
    operator delete(__p);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v27);
}

void sub_2411B4D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutAlignGroup(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  if (*((_QWORD *)this + 49))
  {
    v7 = 0;
    v3 = *((_QWORD *)this + 77);
    v4 = *((_QWORD *)this + 51);
    if (*((_QWORD *)this + 50) == v4)
      v5 = 0;
    else
      v5 = *(_QWORD *)(v4 - 8);
    v8 = v5;
    v9 = 37;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v3, v3 + 176, (uint64_t)&v8, &v7);
    v6 = *((_QWORD *)this + 49) + *((_QWORD *)this + 48) - 1;
    EQKitLayoutRow::beginAlignmentGroup((_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 45) + 8 * (v6 / 0x19)) + 160 * (v6 % 0x19)), v7);
  }
}

void EQKitLayoutManager::layoutAlignMark(EQKit::ILayout *a1@<X8>)
{
  EQKitBox *v4;
  id v5[2];

  v4 = objc_alloc_init(EQKitBox);
  EQKit::ILayout::ILayout(a1, v4);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v5, v4, 0.0);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a1, 3, (uint64_t)v5);
  EQKit::ILayoutOffset::~ILayoutOffset(v5);

}

void sub_2411B4EB0(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutStretchOperator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  EQKitStringBox *v14;
  uint64_t v15;
  unint64_t v16;
  EQKitStringBox *v17;
  EQKitBox *p_super;
  int v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v24;
  EQKitVShift *v25;
  uint64_t v26;
  __n128 v27;
  const CGPath *v28;
  double v29;
  double v30;
  EQKitPathBox *v31;
  uint64_t v32;
  unint64_t v33;
  EQKitPathBox *v34;
  uint64_t v35;
  unint64_t v36;
  EQKitBox *v37;
  EQKitBox *v38;
  __int128 v40;
  _BYTE v41[60];
  unsigned int v42;

  EQKit::ILayout::ILayout(a3, 0);
  v6 = objc_msgSend(*(id *)a2, "operatorUnicharOrNul");
  v42 = v6;
  if (*(_DWORD *)(a2 + 8) == 2)
    v7 = *(double *)(a2 + 24) + *(double *)(a2 + 16);
  else
    v7 = *(double *)(a2 + 32);
  v8 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
  v9 = *(_QWORD *)(a1 + 296);
  if (v9)
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v9 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
        + 152 * ((v9 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v10 = a1 + 56;
  v11 = (const void *)(*(uint64_t (**)(uint64_t, unsigned int *, _QWORD, unint64_t, double))(*(_QWORD *)v8 + 88))(v8, &v42, *(unsigned int *)(a2 + 8), v10 + 8, v7);
  if (v11)
  {
    v12 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
    v13 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)v12 + 152))(v12, v42, v11);
    if (!v13)
    {
LABEL_22:
      CFRelease(v11);
      goto LABEL_23;
    }
    v14 = [EQKitStringBox alloc];
    v15 = *(_QWORD *)(a1 + 296);
    if (v15)
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v15 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
          + 152 * ((v15 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
    else
      v16 = a1 + 56;
    v17 = -[EQKitStringBox initWithAttributedString:cgColor:](v14, "initWithAttributedString:cgColor:", v13, *(_QWORD *)(v16 + 112));
    p_super = &v17->super;
    v19 = *(_DWORD *)(a2 + 8);
    if (v17)
      v20 = v19 == 2;
    else
      v20 = 0;
    if (v20)
    {
      -[EQKitStringBox height](v17, "height");
      v22 = v21;
      -[EQKitBox depth](p_super, "depth");
      v24 = (v7 - (v22 + v23)) * 0.5 + v23 - *(double *)(a2 + 24);
      if (v24 == 0.0)
      {
LABEL_20:
        EQKit::ILayout::ILayout((EQKit::ILayout *)v41, p_super);
        EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v41);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);
        goto LABEL_21;
      }
      v25 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", p_super, v24);
      EQKit::ILayout::ILayout((EQKit::ILayout *)v41, &v25->super);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v41);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);

    }
    else if (v19 == 1)
    {
      goto LABEL_20;
    }
LABEL_21:

    goto LABEL_22;
  }
LABEL_23:
  if (!*(_QWORD *)a3)
  {
    v40 = *MEMORY[0x24BDBF148];
    v26 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager", *MEMORY[0x24BDBF148]));
    v27.n128_f64[0] = *(double *)(a2 + 24) + *(double *)(a2 + 16);
    if (*(_DWORD *)(a2 + 8) != 2)
      v27.n128_u64[0] = *(_QWORD *)(a2 + 32);
    v28 = (const CGPath *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v26 + 96))(v26, v6, v27);
    if (v28)
    {
      if (*(_DWORD *)(a2 + 8) == 2)
      {
        v29 = *(double *)(a2 + 16);
        v30 = *(double *)(a2 + 24);
        v31 = [EQKitPathBox alloc];
        v32 = *(_QWORD *)(a1 + 296);
        if (v32)
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v32 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
              + 152 * ((v32 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
        else
          v33 = a1 + 56;
        v37 = -[EQKitPathBox initWithCGPath:height:paddingLeft:paddingRight:cgColor:](v31, "initWithCGPath:height:paddingLeft:paddingRight:cgColor:", v28, *(_QWORD *)(v33 + 112), v29 + (*((double *)&v40 + 1) - (v29 + v30)) * 0.5, 0.0, 0.0);
      }
      else
      {
        v34 = [EQKitPathBox alloc];
        v35 = *(_QWORD *)(a1 + 296);
        if (v35)
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v35 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
              + 152 * ((v35 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
        else
          v36 = a1 + 56;
        v37 = -[EQKitPathBox initWithCGPath:height:cgColor:](v34, "initWithCGPath:height:cgColor:", v28, *(_QWORD *)(v36 + 112), *((double *)&v40 + 1));
      }
      v38 = v37;
      EQKit::ILayout::ILayout((EQKit::ILayout *)v41, v37);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v41);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v41);

      CGPathRelease(v28);
    }
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, 5);
}

void sub_2411B532C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  EQKit::ILayout *v7;
  va_list va;

  va_start(va, a7);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v7);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::isOperatorSymmetric(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 616);
  v10 = a2;
  v11 = 14;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return 1;
  v6 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result)
    return (*(unsigned __int8 *)(result + 48) >> 1) & 1;
  return result;
}

double EQKitLayoutManager::lengthForCharacterProperty(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];

  v8 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
  v9 = *(_QWORD *)(a1 + 296);
  if (v9)
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v9 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
        + 152 * ((v9 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v10 = a1 + 56;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v14, v8, a2, v10 + 8, a3);
  if (LODWORD(v14[0]))
  {
    v11 = *(_QWORD *)(a1 + 296);
    if (v11)
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v11 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
          + 152 * ((v11 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
    else
      v12 = a1 + 56;
    return EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v14, *(double *)(v12 + 24));
  }
  return a4;
}

uint64_t EQKitLayoutManager::decimalPointOffsetInStringBox(EQKitLayoutManager *this, EQKitStringBox *a2)
{
  void *v3;
  uint64_t v4;
  __int16 v6;

  v6 = EQKitLayoutManager::decimalPointCharacter(this);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", &v6, 1);
  v4 = -[NSString rangeOfString:](-[NSAttributedString string](-[EQKitStringBox attributedString](a2, "attributedString"), "string"), "rangeOfString:", v3);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    v4 = -[NSAttributedString length](-[EQKitStringBox attributedString](a2, "attributedString"), "length");

  return -[EQKitStringBox positionOfCharacterAtIndex:](a2, "positionOfCharacterAtIndex:", v4);
}

void *EQKitLayoutManager::layoutNumberDigits(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2, unint64_t *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[9];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  v6 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v7 = *((_QWORD *)this + 37);
  if (v7)
    v8 = (char *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v7 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                + 152 * ((v7 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
  else
    v8 = (char *)this + 56;
  v9 = *((_QWORD *)v8 + 11);
  v10 = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a2), "schemataTokenString");
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v9 + 80))(v9, v10, v8 + 8);
  v23 = EQKitLayoutManager::decimalPointCharacter(this);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", &v23, 1);
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0x7FFFFFFFFFFFFFFFLL;
  v13 = (void *)objc_msgSend(v11, "string");
  v14 = objc_msgSend(v11, "length");
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke;
  v18[3] = &unk_25112A710;
  v18[4] = v11;
  v18[5] = v12;
  v18[6] = v6;
  v18[7] = &v19;
  v18[8] = v8;
  objc_msgSend(v13, "enumerateSubstringsInRange:options:usingBlock:", 0, v14, 2, v18);

  v15 = objc_msgSend(v6, "count");
  *a3 = v15;
  v16 = v20[3];
  if (v16 == 0x7FFFFFFFFFFFFFFFLL)
    v16 = v15;
  *a3 = v16;

  _Block_object_dispose(&v19, 8);
  return v6;
}

void sub_2411B57A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::decimalPointCharacter(EQKitLayoutManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v7;
  uint64_t v8;
  int v9;

  v7 = 46;
  v2 = *((_QWORD *)this + 77);
  v4 = *((_QWORD *)this + 50);
  v3 = *((_QWORD *)this + 51);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v3 - 8);
  v8 = v5;
  v9 = 35;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(v2, v2 + 488, (uint64_t)&v8, &v7);
  return v7;
}

void ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  EQKitStringBox *v5;

  v4 = objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 40)))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 48), "count");
  }
  v5 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v4, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 112));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);

}

uint64_t EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  void *v11;
  int v12;

  result = objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
  {
    v5 = (void *)objc_msgSend(a2, "operatorCore");
    v10 = 0;
    v6 = *(_QWORD *)(a1 + 616);
    v11 = v5;
    v12 = 45;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v6, v6 + 8, (uint64_t)&v11, &v10);
    if (v10)
    {
      return v10 == 2;
    }
    else
    {
      v7 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
      v8 = objc_msgSend(v5, "operatorId");
      v9 = EQKitLayoutManager::operatorForm(a1, v5);
      result = EQKit::Config::Operator::Dictionary::lookup(v7, v8, v9);
      if (result)
        return (*(unsigned __int8 *)(result + 48) >> 5) & 1;
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorWithAccent(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;

  result = objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
  {
    v5 = (void *)objc_msgSend(a2, "operatorCore");
    v6 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
    v7 = objc_msgSend(v5, "operatorId");
    v8 = EQKitLayoutManager::operatorForm(a1, v5);
    result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
    if (result)
      return (*(unsigned __int8 *)(result + 48) >> 3) & 1;
  }
  return result;
}

uint64_t EQKitLayoutManager::isOperatorStretchy(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 616);
  v10 = a2;
  v11 = 16;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return 1;
  v6 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result)
    return *(_BYTE *)(result + 48) & 1;
  return result;
}

uint64_t EQKitLayoutManager::doesOperatorRequireVerticalStretch(uint64_t a1, void *a2)
{
  uint64_t v3;
  _BYTE v5[32];
  void *v6;

  v6 = a2;
  if (std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((_QWORD *)(a1 + 472), &v6)|| !EQKitLayoutManager::isOperatorStretchy(a1, v6))
  {
    return 0;
  }
  EQKit::Layout::Schemata::Schemata((uint64_t)v5);
  v3 = EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(a1, v6, (uint64_t)v5);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v5);
  return v3;
}

void sub_2411B5B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::isOperatorLargeOp(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 616);
  v10 = a2;
  v11 = 39;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return 1;
  v6 = objc_msgSend(*(id *)(a1 + 608), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result)
    return (*(unsigned __int8 *)(result + 48) >> 2) & 1;
  return result;
}

void EQKitLayoutManager::pushImplicitFormIfRequired(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2))
  {
    v6 = objc_msgSend(a3, "firstObject");
    v8 = 2 * (v6 == (_QWORD)a2);
    if ((void *)objc_msgSend(a3, "lastObject") == a2)
    {
      v7 = (2 * (v6 == (_QWORD)a2)) | 8;
    }
    else
    {
      if ((void *)v6 == a2)
      {
LABEL_7:
        std::deque<unsigned long>::push_back(a1 + 26, &v8);
        return;
      }
      v7 = 4;
    }
    v8 = v7;
    goto LABEL_7;
  }
}

uint64_t EQKitLayoutManager::popImplicitFormIfRequired(_QWORD *a1, void *a2)
{
  uint64_t result;
  uint64_t v4;

  result = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2);
  if ((_DWORD)result)
  {
    v4 = a1[31];
    if (v4)
    {
      a1[31] = v4 - 1;
      return std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](a1 + 26, 1);
    }
  }
  return result;
}

void EQKitLayoutManager::resolveRow(EQKitLayoutManager *this, NSArray *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  EQKitLayoutRow *v7;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  double *v12;
  double v13;
  unint64_t i;
  void *v15;
  void *v16;
  double *v17;
  double *v18;
  double v19;
  int isOperatorSymmetric;
  double v21;
  double v22;
  double v23;
  char *v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void **v30[7];
  void *v31;
  double v32;
  double v33;
  _QWORD v34[4];

  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    v4 = v2 + *((_QWORD *)this + 48) - 1;
    v5 = *(_QWORD *)(*((_QWORD *)this + 45) + 8 * (v4 / 0x19));
    v6 = v4 % 0x19;
    v7 = (EQKitLayoutRow *)(v5 + 160 * v6);
    if (!*((_QWORD *)v7 + 8))
    {
      v9 = (uint64_t *)(v5 + 160 * v6);
      memset(v34, 0, 24);
      std::vector<EQKit::ILayout>::__init_with_size[abi:ne180100]<EQKit::ILayout*,EQKit::ILayout*>(v34, v9[1], v9[2], 0x6DB6DB6DB6DB6DB7 * ((v9[2] - v9[1]) >> 3));
      v10 = (void *)v9[7];
      v32 = 0.0;
      v33 = 0.0;
      EQKitLayoutRow::determineVSize(v7, &v33, &v32);
      v11 = *((_QWORD *)this + 37);
      if (v11)
        v12 = (double *)(*(_QWORD *)(*((_QWORD *)this + 33) + 8 * ((v11 + *((_QWORD *)this + 36) - 1) / 0x1AuLL))
                       + 152 * ((v11 + *((_QWORD *)this + 36) - 1) % 0x1AuLL));
      else
        v12 = (double *)((char *)this + 56);
      if (((_BYTE)v12[15] & 2) != 0)
        v13 = v12[17];
      else
        v13 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v12);
      for (i = objc_msgSend(v10, "firstIndex");
            i != 0x7FFFFFFFFFFFFFFFLL;
            i = objc_msgSend(v10, "indexGreaterThanIndex:", i))
      {
        v15 = EQKitLayoutRow::childNodeAtIndex((id *)v7, i);
        v16 = v15;
        if (v15)
        {
          v31 = 0;
          v31 = (void *)objc_msgSend(v15, "operatorCore");
          v17 = (double *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>((_QWORD *)this + 59, &v31);
          v18 = v17;
          if (v17 && *((_DWORD *)v17 + 8) == 1)
          {
            v19 = EQKitLayoutRow::determineWidth(v7);
            EQKitLayoutManager::registerHorizontalStretchedOperator(this, v31, 1, v18[7] - v19);
            EQKitLayoutManager::layoutBox(this, (uint64_t)v16, 0, (EQKit::ILayout *)v30);
            EQKit::ILayout::operator=(v34[0] + 56 * i, (uint64_t)v30);
          }
          else
          {
            EQKitLayoutManager::pushImplicitFormIfRequired(this, v16, a2);
            isOperatorSymmetric = EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, v31);
            v21 = v33;
            if (isOperatorSymmetric)
            {
              v22 = v33 - v13;
              if (v33 - v13 < v13 + v32)
                v22 = v13 + v32;
              v21 = v13 + v22;
              v23 = v22 - v13;
            }
            else
            {
              v23 = v32;
            }
            v24 = EQKitLayoutManager::registerVerticalStretchedOperator(this, v31, v21, v23);
            v25 = *((_DWORD *)v24 + 2);
            v27 = *((double *)v24 + 2);
            v26 = *((double *)v24 + 3);
            v28 = *((double *)v24 + 4);
            EQKitLayoutManager::layoutBox(this, (uint64_t)v16, 0, (EQKit::ILayout *)v30);
            v29 = v26 + v27;
            if (v25 != 2)
              v29 = v28;
            if (v21 + v23 < v29)
              EQKit::ILayout::setVerticalContentClassification((uint64_t)v30, 0);
            EQKit::ILayout::operator=(v34[0] + 56 * i, (uint64_t)v30);
            EQKitLayoutManager::popImplicitFormIfRequired(this, v16);
          }
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v30);
        }
      }
      EQKitLayoutRow::resolveLayouts((uint64_t)v7, v34);
      v30[0] = (void **)v34;
      std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](v30);
    }
  }
}

void sub_2411B5FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a9 = (void **)&a19;
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke(_QWORD *a1, uint64_t a2, __n128 a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1[4] == a2)
  {
    v4 = (_QWORD *)a1[7];
    v5 = v4[37];
    if (v5)
      v6 = *(_QWORD *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    else
      v6 = (unint64_t)(v4 + 7);
    v7 = *(_QWORD *)(v6 + 88);
    if ((*(_BYTE *)(v6 + 120) & 1) != 0)
      a3.n128_u64[0] = *(_QWORD *)(v6 + 128);
    else
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v7 + 56))(v7, 3, v6 + 8, a3);
    v9 = v4[37];
    if (v9)
      v10 = *(_QWORD *)(v4[33] + 8 * ((v9 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v9 + v4[36] - 1) % 0x1AuLL);
    else
      v10 = (unint64_t)(v4 + 7);
    v11 = *(_QWORD *)(v10 + 88);
    if ((*(_BYTE *)(v10 + 120) & 1) != 0)
      v8.n128_u64[0] = *(_QWORD *)(v10 + 128);
    else
      v8.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v11 + 56))(v11, 37, v10 + 8, v8);
  }
}

void ___ZN18EQKitLayoutManager14layoutFractionERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2(_QWORD *a1, uint64_t a2, __n128 a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1[4] == a2)
  {
    v4 = (_QWORD *)a1[7];
    v5 = v4[37];
    if (v5)
      v6 = *(_QWORD *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    else
      v6 = (unint64_t)(v4 + 7);
    v7 = *(_QWORD *)(v6 + 88);
    if ((*(_BYTE *)(v6 + 120) & 1) != 0)
      a3.n128_u64[0] = *(_QWORD *)(v6 + 128);
    else
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v7 + 56))(v7, 4, v6 + 8, a3);
    v9 = v4[37];
    if (v9)
      v10 = *(_QWORD *)(v4[33] + 8 * ((v9 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v9 + v4[36] - 1) % 0x1AuLL);
    else
      v10 = (unint64_t)(v4 + 7);
    v11 = *(_QWORD *)(v10 + 88);
    if ((*(_BYTE *)(v10 + 120) & 1) != 0)
      v8.n128_u64[0] = *(_QWORD *)(v10 + 128);
    else
      v8.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v11 + 56))(v11, 38, v10 + 8, v8);
  }
}

EQKitBox *EQKitLayoutManager::wrapBoxWithAttribution(EQKitLayoutManager *this, EQKitBox *a2, id *a3)
{
  uint64_t v4;
  EQKitAttributionBox *v5;

  v4 = EQKit::Layout::Schemata::sourceAttribution(a3);
  if (!v4)
    return a2;
  v5 = -[EQKitAttributionBox initWithBox:attribution:]([EQKitAttributionBox alloc], "initWithBox:attribution:", a2, v4);

  return (EQKitBox *)v5;
}

uint64_t EQKitLayoutManager::lengthForMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
  v6 = *(_QWORD *)(a1 + 296);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v6 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
       + 152 * ((v6 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
    v8 = v7 + 8;
  }
  else
  {
    v8 = a1 + 64;
    v7 = a1 + 56;
  }
  if ((*(_BYTE *)(v7 + 120) & 1) != 0)
    v5.n128_u64[0] = *(_QWORD *)(v7 + 128);
  else
    v5.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v4 + 56))(v4, a2, v8, v5);
}

void EQKitLayoutManager::layoutSubsuperscript(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  _BOOL4 isLayoutSchemataOnlyPseudoSuperscripts;
  __n128 v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  double v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  double v36;
  __n128 v37;
  _BOOL4 v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  __n128 v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  BOOL v51;
  double v52;
  double v53;
  double v54;
  unsigned int v55;
  unsigned __int8 v56;
  int v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  unsigned __int8 v63;
  int v64;
  uint64_t v65;
  double v66;
  double v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  int v71;
  uint64_t v72;
  double v73;
  double v74;
  int v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double *v80;
  void *v81;
  void *v82;
  int v83;
  double v84;
  uint64_t v85;
  EQKit::ILayout *v86;
  double v87;
  double v88;
  _QWORD *v89;
  unsigned int v90;
  double v91;
  double v92;
  id v93;
  char v94;
  double v95;
  double v96;
  double v97;
  int v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  EQKit::ILayout *v103;
  double v104;
  double v105;
  _QWORD *v106;
  unsigned int v107;
  double v108;
  double v109;
  id v110;
  char v111;
  double v112;
  double v113;
  double v114;
  EQKitHSpace *v115;
  void *v116;
  EQKitHSpace *v117;
  EQKitHBox *v118;
  void *v119;
  EQKitHSpace *v120;
  EQKitHBox *v121;
  double v122;
  double v123;
  double v124;
  EQKitVSpace *v125;
  void *v126;
  EQKitVBox *v127;
  EQKitVShift *v128;
  EQKitVShift *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  unint64_t v140;
  int v141;
  double v142;
  int v143;
  void *v144;
  int isOperatorLargeOp;
  _BYTE v147[56];
  _BYTE v148[56];
  _BYTE v149[56];
  _QWORD v150[8];
  _BYTE v151[32];
  __int16 v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[8];
  void *v158[4];
  unsigned __int16 v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  double *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166[4];
  unsigned __int16 v167;
  double v168;
  uint64_t v169;
  _QWORD v170[12];
  id v171;
  int v172;
  unsigned __int16 v173;
  uint64_t v174;
  double v175;
  uint64_t v176;
  double *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;

  v9 = *(_QWORD *)(a1 + 296);
  if (v9)
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v9 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
        + 152 * ((v9 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v10 = a1 + 56;
  v192 = 0;
  v193 = &v192;
  v194 = 0x2020000000;
  v195 = 0;
  v188 = 0;
  v189 = &v188;
  v190 = 0x2020000000;
  v191 = 0;
  v184 = 0;
  v185 = (double *)&v184;
  v186 = 0x2020000000;
  v187 = 0;
  v180 = 0;
  v181 = (double *)&v180;
  v182 = 0x2020000000;
  v183 = 0;
  v176 = 0;
  v177 = (double *)&v176;
  v178 = 0x2020000000;
  v179 = 0;
  v11 = (void *)a2;
  if (a2)
  {
    while (1)
    {
      v12 = v11;
      objc_msgSend(v11, "layoutSchemata");
      if (v172 != 2)
        break;
      v13 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v171);
      if (objc_msgSend(v13, "count") != 1)
        break;
      v11 = (void *)objc_msgSend(v13, "objectAtIndex:", 0);
      EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v171);
      if (!v11)
        goto LABEL_11;
    }
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v171);
  }
  else
  {
    v12 = 0;
  }
LABEL_11:
  if (objc_msgSend(v12, "isEmbellishedOperator"))
    isOperatorLargeOp = EQKitLayoutManager::isOperatorLargeOp(a1, (void *)objc_msgSend(v12, "operatorCore"));
  else
    isOperatorLargeOp = 0;
  v14 = MEMORY[0x24BDAC760];
  v170[0] = MEMORY[0x24BDAC760];
  v170[1] = 3221225472;
  v170[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke;
  v170[3] = &unk_25112A760;
  v170[6] = &v192;
  v170[7] = &v188;
  v170[8] = &v184;
  v170[9] = &v180;
  v170[11] = a1;
  v170[10] = &v176;
  v170[4] = v12;
  v170[5] = a2;
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a2, (uint64_t)v170, (EQKit::ILayout *)&v171);
  if ((v173 & 0x100) != 0)
    *((_BYTE *)v189 + 24) = 1;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v166, 0);
  v162 = 0;
  v163 = (double *)&v162;
  v164 = 0x2020000000;
  v165 = 0;
  if (a3)
  {
    v157[0] = v14;
    v157[1] = 3221225472;
    v157[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2;
    v157[3] = &unk_25112A738;
    v157[4] = a3;
    v157[5] = &v188;
    v157[6] = &v162;
    v157[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a3, 1, 0, 2, 1, (uint64_t)v157, (EQKit::ILayout *)v158);
    EQKit::ILayout::operator=((uint64_t)v166, (uint64_t)v158);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v158, 0);
    EQKit::ILayout::operator=((uint64_t)v166, (uint64_t)v158);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v158);
  if (*((double *)v193 + 3) != 0.0)
  {
    v15 = EQKit::Font::Manager::fontCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 608), "fontManager"));
    v16 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, 0);
    *((double *)v193 + 3) = v16 * *((double *)v193 + 3);
  }
  if (a4 && (*((_BYTE *)v189 + 24) || !*(_BYTE *)(*(_QWORD *)(a1 + 48) + 6)))
  {
    objc_msgSend(a4, "layoutSchemata");
    isLayoutSchemataOnlyPseudoSuperscripts = _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v158);
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v158);
  }
  else
  {
    isLayoutSchemataOnlyPseudoSuperscripts = 0;
  }
  EQKit::ILayout::ILayout((EQKit::ILayout *)v158, 0);
  v153 = 0;
  v154 = (double *)&v153;
  v155 = 0x2020000000;
  v156 = 0;
  if (a4)
  {
    v150[0] = v14;
    v150[1] = 3221225472;
    v150[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3;
    v150[3] = &unk_25112A738;
    v150[4] = a4;
    v150[5] = &v188;
    v150[6] = &v153;
    v150[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, (uint64_t)a4, !isLayoutSchemataOnlyPseudoSuperscripts, 0, 2, 0, (uint64_t)v150, (EQKit::ILayout *)v151);
    EQKit::ILayout::operator=((uint64_t)v158, (uint64_t)v151);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v151, 0);
    EQKit::ILayout::operator=((uint64_t)v158, (uint64_t)v151);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v151);
  v19 = v166[0];
  v20 = v158[0];
  if (*((_BYTE *)v189 + 24))
  {
    v21 = *(_QWORD *)(v10 + 88);
    if ((*(_BYTE *)(v10 + 120) & 1) != 0)
      v18.n128_u64[0] = *(_QWORD *)(v10 + 128);
    else
      v18.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    v26 = (*(double (**)(uint64_t, _QWORD, unint64_t, __n128))(*(_QWORD *)v21 + 56))(v21, 0, v10 + 8, v18);
    v30 = *(_QWORD *)(v10 + 88);
    if ((*(_BYTE *)(v10 + 120) & 1) != 0)
      v29.n128_u64[0] = *(_QWORD *)(v10 + 128);
    else
      v29.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    v28 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v30 + 56))(v30, 1, v10 + 8, v29);
  }
  else
  {
    v22 = v171;
    objc_msgSend(v171, "depth");
    v24 = v23;
    v25 = v163[3];
    objc_msgSend(v22, "height");
    v26 = v24 + v25;
    v28 = v27 - v154[3];
  }
  objc_msgSend(v19, "height");
  v32 = v31.n128_f64[0];
  v33 = *(_QWORD *)(v10 + 88);
  if ((*(_BYTE *)(v10 + 120) & 1) != 0)
    v31.n128_u64[0] = *(_QWORD *)(v10 + 128);
  else
    v31.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  v34.n128_f64[0] = v32
                  - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v33 + 56))(v33, 8, v10 + 8, v31);
  if (v26 < v34.n128_f64[0])
    v26 = v34.n128_f64[0];
  v35 = *(_QWORD *)(v10 + 88);
  if ((*(_BYTE *)(v10 + 120) & 1) != 0)
    v34.n128_u64[0] = *(_QWORD *)(v10 + 128);
  else
    v34.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  v36 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v35 + 56))(v35, 7, v10 + 8, v34);
  objc_msgSend(v20, "depth");
  v37.n128_f64[0] = v36 + v37.n128_f64[0];
  if (v28 < v37.n128_f64[0])
    v28 = v37.n128_f64[0];
  if (v20)
    v38 = isLayoutSchemataOnlyPseudoSuperscripts;
  else
    v38 = 0;
  if (v38)
  {
    v28 = 0.0;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 16))
    {
      EQKitLayoutManager::lengthForMetric(a1, 29);
      v181[3] = v37.n128_f64[0] + v181[3];
    }
  }
  if (v19)
    v39 = v20 == 0;
  else
    v39 = 1;
  v40 = !v39;
  v143 = v40;
  if (!v39)
  {
    v41 = *(_QWORD *)(v10 + 88);
    if ((*(_BYTE *)(v10 + 120) & 1) != 0)
      v37.n128_u64[0] = *(_QWORD *)(v10 + 128);
    else
      v37.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
    v42 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v41 + 56))(v41, 9, v10 + 8, v37);
    objc_msgSend(v20, "depth");
    v44 = v43;
    objc_msgSend(v19, "height");
    v46 = v28 - v44;
    v47 = v42 - (v46 + v26 - v45.n128_f64[0]);
    if (v47 > 0.0)
    {
      v48 = *(_QWORD *)(v10 + 88);
      if ((*(_BYTE *)(v10 + 120) & 1) != 0)
        v45.n128_u64[0] = *(_QWORD *)(v10 + 128);
      else
        v45.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
      v49 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v48 + 56))(v48, 10, v10 + 8, v45)- v46;
      if (v49 >= v47)
        v50 = v47;
      else
        v50 = v49;
      v51 = v49 <= 0.0;
      v52 = -0.0;
      if (!v51)
        v52 = v50;
      v28 = v28 + v52;
      v53 = 0.0;
      if (!v51)
        v53 = v50;
      v54 = v47 - v53;
      if (v54 > 0.0)
        v26 = v26 + v54;
    }
  }
  v55 = v173;
  v56 = v173 & 0x3F | 0x40;
  v173 = v173 & 0xFF3F | 0x40;
  v167 = v167 & 0xFFCF | 0x10;
  v159 = v159 & 0xFFCF | 0x10;
  v57 = (v55 >> 4) & 3;
  v58 = 0.0;
  v59 = 0;
  if (v57 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v57 + 30));
    v59 = v60;
    v56 = v173;
  }
  v61 = v56 >> 6;
  if (v61 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v61 + 30));
    v58 = v62;
  }
  v174 = v59;
  v175 = v58;
  v63 = v167;
  v64 = (v167 >> 4) & 3;
  v65 = 0;
  v66 = 0.0;
  if (v64 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v64 + 30));
    v66 = v67;
    v63 = v167;
  }
  v68 = v63 >> 6;
  if (v68 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v68 + 30));
    v65 = v69;
  }
  v168 = v66;
  v169 = v65;
  v70 = v159;
  v71 = (v159 >> 4) & 3;
  v72 = 0;
  v73 = 0.0;
  if (v71 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v71 + 30));
    v73 = v74;
    v70 = v159;
  }
  v75 = v70 >> 6;
  if (v75 != 3)
  {
    EQKitLayoutManager::lengthForMetric(a1, (v75 + 30));
    v72 = v76;
  }
  v160 = v73;
  v161 = v72;
  v77 = 0.0;
  v78 = 0.0;
  v79 = 0.0;
  v80 = (double *)MEMORY[0x24BDBEFB0];
  v81 = v19;
  v82 = a4;
  v144 = v81;
  if (v81)
  {
    if (*((double *)v193 + 3) != 0.0 && v26 != 0.0 || v185[3] != 0.0)
    {
      v83 = _startsWithToken(a3, *(_QWORD *)(a1 + 48));
      v84 = 0.0;
      if (v83)
        v84 = v26 * tan(*((long double *)v193 + 3));
      v79 = v84 - v185[3];
    }
    v85 = a3;
    v86 = a5;
    if (isOperatorLargeOp)
      v79 = v79 - v177[3];
    v87 = v175;
    v88 = v168;
    v89 = *(_QWORD **)(a1 + 40);
    v90 = v173;
    v91 = *v80;
    v92 = v80[1];
    v93 = v171;
    v94 = v167;
    objc_msgSend(v171, "opticalAlignWidth");
    if (v87 >= v88)
      v96 = v87;
    else
      v96 = v88;
    v78 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v89, (v90 >> 2) & 3, v93, v94 & 3, v166[0], v91, v92, v79 + v95, v26, v96);
    a5 = v86;
    a3 = v85;
    a4 = v82;
  }
  v97 = 0.0;
  if (v20)
  {
    v142 = v79;
    if ((*((double *)v193 + 3) == 0.0 || v28 == 0.0) && v181[3] == 0.0)
    {
      v100 = 0.0;
    }
    else
    {
      v98 = _startsWithToken((uint64_t)a4, *(_QWORD *)(a1 + 48));
      v99 = 0.0;
      if (v98)
        v99 = v28 * tan(*((long double *)v193 + 3));
      v100 = v181[3] - v99;
    }
    v101 = a3;
    v102 = v26;
    v103 = a5;
    if ((isOperatorLargeOp & 1) == 0)
      v100 = v100 + v177[3];
    v104 = v175;
    v105 = v160;
    v106 = *(_QWORD **)(a1 + 40);
    v107 = v173;
    v108 = *v80;
    v109 = v80[1];
    v110 = v171;
    v111 = v159;
    objc_msgSend(v171, "opticalAlignWidth");
    if (v104 >= v105)
      v113 = v104;
    else
      v113 = v105;
    v77 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v106, (v107 >> 2) & 3, v110, v111 & 3, v158[0], v108, v109, v100 + v112, -v28, v113);
    a5 = v103;
    a3 = v101;
    a4 = v82;
    v26 = v102;
    v97 = v100;
    v79 = v142;
  }
  if (v78 < v77)
    v78 = v77;
  EQKitLayoutManager::lengthForMetric(a1, 36);
  if (v114 == 0.0)
  {
    v115 = 0;
    if (!v144)
      goto LABEL_129;
  }
  else
  {
    v115 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v114);
    if (!v144)
      goto LABEL_129;
  }
  if (v79 + v78 != 0.0 || v115)
  {
    v116 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 3);
    if (v79 + v78 != 0.0)
    {
      v117 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v79 + v78);
      objc_msgSend(v116, "addObject:", v117);

    }
    objc_msgSend(v116, "addObject:", v144);
    if (v115)
      objc_msgSend(v116, "addObject:", v115);
    if (v116)
    {
      v118 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v116);
      goto LABEL_130;
    }
  }
LABEL_129:
  v118 = v144;
  v116 = 0;
LABEL_130:

  if (!v20 || v97 + v78 == 0.0 && !v115)
    goto LABEL_139;
  v119 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 3);
  if (v97 + v78 != 0.0)
  {
    v120 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v97 + v78);
    objc_msgSend(v119, "addObject:", v120);

  }
  objc_msgSend(v119, "addObject:", v20);
  if (v115)
    objc_msgSend(v119, "addObject:", v115);
  if (v119)
  {
    v121 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v119);
  }
  else
  {
LABEL_139:
    v121 = v20;
    v119 = 0;
  }

  EQKit::ILayout::ILayout((EQKit::ILayout *)v151, 0);
  if (v143)
  {
    objc_msgSend(v20, "layoutDepth");
    v123 = v122;
    objc_msgSend(v144, "layoutHeight");
    v125 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v28 - v123, v26 - v124);
    v126 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v121, v125, v118, 0);
    v127 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v126, 1);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v149, &v127->super.super);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v149);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v149);

  }
  else if (v144)
  {
    v128 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v118, -v26);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v149, &v128->super);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v149);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v149);

  }
  else if (v20)
  {
    v129 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v121, v28);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v149, &v129->super);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v149);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v149);

  }
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  v173 = v173 & 0xFFF3 | 4;
  v152 = v152 & 0xFFFC | 1;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v148, (const EQKit::ILayout *)&v171);
  EQKitLayoutManager::addRowChild((_QWORD *)a1, (uint64_t)v148, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v148);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v147, (const EQKit::ILayout *)v151);
  v130 = *(_QWORD *)(a1 + 408);
  if (*(_QWORD *)(a1 + 400) == v130)
    v131 = 0;
  else
    v131 = *(_QWORD *)(v130 - 8);
  EQKitLayoutManager::addRowChild((_QWORD *)a1, (uint64_t)v147, v131);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v147);
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, a5);
  v132 = *(_QWORD *)(a1 + 296);
  if (v132)
    v133 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * ((v132 + *(_QWORD *)(a1 + 288) - 1) / 0x1AuLL))
         + 152 * ((v132 + *(_QWORD *)(a1 + 288) - 1) % 0x1AuLL);
  else
    v133 = a1 + 56;
  if (!*(_BYTE *)(v133 + 16) && (v173 & 0x1000) != 0)
  {
    if (a4)
      v135 = ((unint64_t)v159 >> 12) & 1;
    else
      v135 = 0;
    v136 = a3 != 0;
    if (a3)
      v137 = (a4 != 0) + 1;
    else
      v137 = a4 != 0;
    v138 = ((unint64_t)v167 >> 12) & 1;
    if (!a3)
      v138 = 0;
    if ((v167 & 0x1C00u) <= 0x1000)
      v136 = 0;
    v139 = (v159 & 0x1C00u) > 0x1000 && a4 != 0;
    v140 = v138 + v135;
    if (v137 == 1 && v140 == 1
      || (v137 == 2 ? (v141 = v139) : (v141 = 0),
          (v141 & v136 & 1) != 0 || (v134 = 0, v137 == 2) && v136 != v139 && v140 == 2))
    {
      v134 = 3;
    }
  }
  else
  {
    v134 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v134);
  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF3 | 8;
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v151);
  _Block_object_dispose(&v153, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v158);
  _Block_object_dispose(&v162, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v166);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v171);
  _Block_object_dispose(&v176, 8);
  _Block_object_dispose(&v180, 8);
  _Block_object_dispose(&v184, 8);
  _Block_object_dispose(&v188, 8);
  _Block_object_dispose(&v192, 8);
}

void sub_2411B7270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a72;
  uint64_t v72;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a31);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a46);
  _Block_object_dispose(&a53, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a65);
  _Block_object_dispose(&a72, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x218]);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x2B0]);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose((const void *)(v72 - 248), 8);
  _Block_object_dispose((const void *)(v72 - 216), 8);
  _Block_object_dispose((const void *)(v72 - 184), 8);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke(_QWORD *a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  double v10;
  void *v11;
  unsigned __int16 v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (a1[4] == a2 && (v6 = (_QWORD *)a1[11], EQKit::Layout::Schemata::isToken(this)))
  {
    v7 = v6[37];
    if (v7)
      v8 = *(_QWORD *)(v6[33] + 8 * ((v7 + v6[36] - 1) / 0x1AuLL)) + 152 * ((v7 + v6[36] - 1) % 0x1AuLL);
    else
      v8 = (unint64_t)(v6 + 7);
    if ((*(_BYTE *)(v8 + 120) & 4) != 0)
      v10 = *(double *)(v8 + 144);
    else
      v10 = EQKitLayoutContext::pComputeSlantAngle((EQKitLayoutContext *)v8);
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = v10;
    v11 = (void *)EQKit::Layout::Schemata::tokenSchemata(this);
    if (v11)
    {
      v12 = objc_msgSend(v11, "schemataUnicharOrNul");
      v13 = v6[37];
      if (v13)
      {
        v14 = *(_QWORD *)(v6[33] + 8 * ((v13 + v6[36] - 1) / 0x1AuLL)) + 152 * ((v13 + v6[36] - 1) % 0x1AuLL);
        v15 = (_QWORD *)(v14 + 88);
      }
      else
      {
        v15 = v6 + 18;
        v14 = (unint64_t)(v6 + 7);
      }
      v16 = v12;
      if ((*(unsigned int (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*v15 + 120))(*v15, v12, v14 + 8))
      {
        *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
      }
      if ((_DWORD)v16)
      {
        *(double *)(*(_QWORD *)(a1[8] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((uint64_t)v6, 10, v16, 0.0);
        *(double *)(*(_QWORD *)(a1[9] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((uint64_t)v6, 9, v16, 0.0);
        *(double *)(*(_QWORD *)(a1[10] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((uint64_t)v6, 14, v16, 0.0);
      }
    }
  }
  else
  {
    v9 = a1[5] == a2 && *((_DWORD *)this + 2) == 2;
    if (v9 && !objc_msgSend((id)EQKit::Layout::Schemata::children(this), "count"))
      *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2(_QWORD *a1, uint64_t a2, __n128 a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a1[4] == a2 && !*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v4 = (_QWORD *)a1[7];
    v5 = v4[37];
    if (v5)
      v6 = *(_QWORD *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    else
      v6 = (unint64_t)(v4 + 7);
    v7 = *(_QWORD *)(v6 + 88);
    if ((*(_BYTE *)(v6 + 120) & 1) != 0)
      a3.n128_u64[0] = *(_QWORD *)(v6 + 128);
    else
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v7 + 56))(v7, 6, v6 + 8, a3);
  }
}

BOOL _isLayoutSchemataOnlyPseudoSuperscripts(const EQKit::Layout::Schemata *a1)
{
  EQKit::Unicode *v2;
  _BOOL8 result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isLayoutSchemataOnlyPseudoSuperscripts;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (EQKit::Layout::Schemata::isToken(a1))
  {
    v2 = (EQKit::Unicode *)objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a1), "schemataUnicharOrNul");
    return EQKit::Unicode::isPseudoScript(v2);
  }
  if (*((_DWORD *)a1 + 2) != 2)
    return 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = (void *)EQKit::Layout::Schemata::children(a1);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v12;
LABEL_6:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v6)
        objc_enumerationMutation(v4);
      v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v7);
      if (v8)
        objc_msgSend(v8, "layoutSchemata");
      else
        memset(v10, 0, sizeof(v10));
      isLayoutSchemataOnlyPseudoSuperscripts = _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v10);
      EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v10);
      if ((isLayoutSchemataOnlyPseudoSuperscripts & 1) == 0)
        return 0;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        result = 1;
        if (v5)
          goto LABEL_6;
        return result;
      }
    }
  }
  return 1;
}

void sub_2411B783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3(_QWORD *a1, uint64_t a2, __n128 a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a1[4] == a2 && !*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v4 = (_QWORD *)a1[7];
    v5 = v4[37];
    if (v5)
      v6 = *(_QWORD *)(v4[33] + 8 * ((v5 + v4[36] - 1) / 0x1AuLL)) + 152 * ((v5 + v4[36] - 1) % 0x1AuLL);
    else
      v6 = (unint64_t)(v4 + 7);
    v7 = *(_QWORD *)(v6 + 88);
    if ((*(_BYTE *)(v6 + 120) & 1) != 0)
      a3.n128_u64[0] = *(_QWORD *)(v6 + 128);
    else
      a3.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v7 + 56))(v7, 5, v6 + 8, a3);
  }
}

uint64_t _startsWithToken(uint64_t result, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = (void *)result;
    while (1)
    {
      objc_msgSend(v3, "layoutSchemata");
      if (EQKit::Layout::Schemata::isToken((EQKit::Layout::Schemata *)&v6))
        break;
      if (v7 == 4)
      {
        if (!*(_BYTE *)(a2 + 7))
          goto LABEL_12;
        v5 = objc_msgSend((id)EQKit::Layout::Schemata::subsuperscriptSchemata((EQKit::Layout::Schemata *)&v6), "schemataKernel");
      }
      else
      {
        if (v7 != 2
          || (v4 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v6), !objc_msgSend(v4, "count")))
        {
LABEL_12:
          EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v6);
          return 0;
        }
        v5 = objc_msgSend(v4, "objectAtIndex:", 0);
      }
      v3 = (void *)v5;
      EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v6);
      if (!v3)
        return 0;
    }
    EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&v6);
    return 1;
  }
  return result;
}

void sub_2411B79E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)&a9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutOverOrUnderBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, EQKit::ILayout *a7@<X8>)
{
  _QWORD v7[9];
  char v8;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = ___ZN18EQKitLayoutManager20layoutOverOrUnderBoxEPU26objcproto15EQKitLayoutNode11objc_objectbPbPjPd_block_invoke;
  v7[3] = &unk_25112A788;
  v8 = a3;
  v7[4] = a2;
  v7[5] = a1;
  v7[6] = a4;
  v7[7] = a5;
  v7[8] = a6;
  EQKitLayoutManager::layoutBox(a1, a2, a3 ^ 1u, 0, 2, 0, (uint64_t)v7, a7);
}

void ___ZN18EQKitLayoutManager20layoutOverOrUnderBoxEPU26objcproto15EQKitLayoutNode11objc_objectbPbPjPd_block_invoke(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  EQKitLayoutContext *v8;
  const __CTFont *v9;

  if (*(_BYTE *)(a1 + 72))
  {
    if (*(_QWORD *)(a1 + 32) == a2)
    {
      v5 = *(_QWORD **)(a1 + 40);
      if (EQKit::Layout::Schemata::isToken(this))
      {
        v6 = *(_QWORD *)(a1 + 56);
        **(_BYTE **)(a1 + 48) = 1;
        if (v6)
          **(_DWORD **)(a1 + 56) = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(this), "schemataUnicharOrNul");
        if (*(_QWORD *)(a1 + 64))
        {
          v7 = v5[37];
          if (v7)
            v8 = (EQKitLayoutContext *)(*(_QWORD *)(v5[33] + 8 * ((v7 + v5[36] - 1) / 0x1AuLL))
                                      + 152 * ((v7 + v5[36] - 1) % 0x1AuLL));
          else
            v8 = (EQKitLayoutContext *)(v5 + 7);
          v9 = (const __CTFont *)EQKitLayoutContext::font(v8);
          **(CGFloat **)(a1 + 64) = CTFontGetXHeight(v9);
        }
      }
    }
  }
}

void ___ZN18EQKitLayoutManager22layoutUnderoverBaseBoxEPU26objcproto15EQKitLayoutNode11objc_objectPN5EQKit6Script4InfoEPbPj_block_invoke(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 32) == a2)
  {
    v5 = *(_QWORD **)(a1 + 40);
    if (EQKit::Layout::Schemata::isToken(this))
    {
      **(_DWORD **)(a1 + 48) = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(this), "schemataUnicharOrNul");
      v6 = v5[37];
      if (v6)
        v7 = *(_QWORD *)(v5[33] + 8 * ((v6 + v5[36] - 1) / 0x1AuLL)) + 152 * ((v6 + v5[36] - 1) % 0x1AuLL);
      else
        v7 = (unint64_t)(v5 + 7);
      EQKit::Script::Info::operator=(*(_QWORD *)(a1 + 56), v7 + 8);
      **(_BYTE **)(a1 + 64) = 1;
    }
  }
}

double EQKit::Script::Info::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    result = *(double *)(a2 + 16);
    *(double *)(a1 + 16) = result;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return result;
}

EQKitVShift *EQKitLayoutManager::baselineAlignBox(_QWORD *a1, void *a2, int a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;

  switch(a3)
  {
    case 0:
    case 3:
    case 4:
      objc_msgSend(a2, "vsize");
      v5 = v4 * 0.5;
      objc_msgSend(a2, "height");
      v7 = v5 - v6;
      break;
    case 1:
      objc_msgSend(a2, "height");
      v7 = -v8;
      break;
    case 2:
      objc_msgSend(a2, "vsize");
      v11 = v10 * 0.5;
      objc_msgSend(a2, "height");
      v13 = a1[37];
      if (v13)
        v14 = *(_QWORD *)(a1[33] + 8 * ((v13 + a1[36] - 1) / 0x1AuLL)) + 152 * ((v13 + a1[36] - 1) % 0x1AuLL);
      else
        v14 = (unint64_t)(a1 + 7);
      v16 = v11 - v12;
      if ((*(_BYTE *)(v14 + 120) & 2) != 0)
        v17 = *(double *)(v14 + 136);
      else
        v17 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v14);
      v7 = v16 + v17;
      break;
    case 5:
      objc_msgSend(a2, "depth");
      v7 = v15;
      break;
    default:
      v7 = 0.0;
      break;
  }
  return -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", a2, v7);
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, double a3@<D0>, double *a4@<X4>, uint64_t a5@<X2>, uint64_t a6@<X3>, EQKit::ILayout *a7@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  id *v16;
  double v17;
  _BYTE v19[168];

  v13 = (_QWORD *)((char *)this + 512);
  v14 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v19, (uint64_t)this, v14, a5, a6, a3);
  std::deque<EQKitLayoutElementaryStack>::push_back(v13, (const EQKitLayoutElementaryStack *)v19);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v19);
  v15 = *((_QWORD *)this + 69) + *((_QWORD *)this + 68) - 1;
  v16 = (id *)(*(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v15 / 0x18)) + 168 * (v15 % 0x18));
  EQKitLayoutElementaryStack::layout(v16, a7);
  v17 = EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 2uLL);
  *a4 = v17 - EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 1uLL);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v13);
}

void sub_2411B7E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutTable>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x2A];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if ((char *)*v6 + 96 * (v5 % 0x2A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 96 * (v5 % 0x2A));
      do
      {
        v9 = *v8;
        v8 += 12;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4032)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 42;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<EQKitLayoutTable *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<EQKitLayoutElementaryStack>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  EQKitLayoutElementaryStack *v7;
  unint64_t v8;
  uint64_t v9;
  EQKitLayoutElementaryStack *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x18];
    v7 = (EQKitLayoutElementaryStack *)((char *)*v6 + 168 * (v5 % 0x18));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x18] + 168 * ((a1[5] + v5) % 0x18);
    if (v7 != (EQKitLayoutElementaryStack *)v8)
    {
      do
      {
        EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(v7);
        v7 = (EQKitLayoutElementaryStack *)(v9 + 168);
        if (v7 - (EQKitLayoutElementaryStack *)*v6 == 4032)
        {
          v10 = (EQKitLayoutElementaryStack *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutElementaryStack *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 12;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 24;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutRow>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  EQKitLayoutRow *v7;
  unint64_t v8;
  uint64_t v9;
  EQKitLayoutRow *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x19];
    v7 = (EQKitLayoutRow *)((char *)*v6 + 160 * (v5 % 0x19));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x19] + 160 * ((a1[5] + v5) % 0x19);
    if (v7 != (EQKitLayoutRow *)v8)
    {
      do
      {
        EQKitLayoutRow::~EQKitLayoutRow(v7);
        v7 = (EQKitLayoutRow *)(v9 + 160);
        if (v7 - (EQKitLayoutRow *)*v6 == 4000)
        {
          v10 = (EQKitLayoutRow *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutRow *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 12;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 25;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutContext>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x1A];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x1A] + 152 * ((a1[5] + v5) % 0x1A);
    if ((char *)*v6 + 152 * (v5 % 0x1A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 152 * (v5 % 0x1A));
      do
      {
        v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 3952)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 13;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 26;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = *(_DWORD *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *(_DWORD *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  int v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = v2;
  do
  {
    v8 = *(_QWORD *)(v3 + 32);
    if (v5 == v8)
      v9 = *(_DWORD *)(v3 + 40) < v6;
    else
      v9 = v8 < v5;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(_QWORD *)(v7 + 32);
  v13 = v6 < *(_DWORD *)(v7 + 40);
  v14 = v12 == v5 ? v13 : v5 < v12;
  if (v14 == 1)
    return v2;
  return v7;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v7;
  uint64_t v8;
  const std::string *v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = (const std::string *)(v7 + 48);
LABEL_3:
    std::string::operator=(a4, v9);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = (const std::string *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = *(_WORD *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *(_WORD *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    *(_DWORD *)a4 = *(_DWORD *)(v7 + 48);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(v7 + 56);
    v9 = *(_QWORD *)(v7 + 64);
LABEL_3:
    *(_QWORD *)(a4 + 16) = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      *(_DWORD *)a4 = *(_DWORD *)(v13 + 48);
      *(_QWORD *)(a4 + 8) = *(_QWORD *)(v13 + 56);
      v9 = *(_QWORD *)(v13 + 64);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    if ((char *)(v7 + 48) == a4)
      return 1;
    v9 = *(char **)(v7 + 48);
    v10 = *(_QWORD *)(v7 + 56);
LABEL_4:
    std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(a4, v9, v10, (v10 - (uint64_t)v9) >> 2);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      if ((char *)(v14 + 48) == a4)
        return 1;
      v9 = *(char **)(v14 + 48);
      v10 = *(_QWORD *)(v14 + 56);
      goto LABEL_4;
    }
  }
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<std::wstring> *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 *v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    if ((std::vector<std::wstring> *)(v7 + 48) == a4)
      return 1;
    v9 = *(std::string **)(v7 + 48);
    v10 = *(__int128 **)(v7 + 56);
LABEL_4:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a4, v9, v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      if ((std::vector<std::wstring> *)(v14 + 48) == a4)
        return 1;
      v9 = *(std::string **)(v14 + 48);
      v10 = *(__int128 **)(v14 + 56);
      goto LABEL_4;
    }
  }
  return result;
}

void EQKitLayoutTable::~EQKitLayoutTable(EQKitLayoutTable *this)
{
  EQKitLayoutTable::~EQKitLayoutTable(this);
  JUMPOUT(0x242690740);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_25112A7E0;
  v4 = (void **)((char *)this + 64);
  std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)(a1 + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(a1 + 64));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    *(_DWORD *)a4 = *(_DWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v7 + 56);
LABEL_3:
    *(_QWORD *)(a4 + 8) = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      *(_DWORD *)a4 = *(_DWORD *)(v13 + 48);
      v9 = *(_QWORD *)(v13 + 56);
      goto LABEL_3;
    }
  }
  return result;
}

_QWORD *std::vector<EQKit::ILayout>::__init_with_size[abi:ne180100]<EQKit::ILayout*,EQKit::ILayout*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<EQKit::ILayout>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2411B8ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<EQKit::ILayout>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKit::ILayout::ILayout((EQKit::ILayout *)(a4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2411B8FE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 - 56));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

EQKitLayoutContext *std::deque<EQKitLayoutContext>::push_back(_QWORD *a1, EQKitLayoutContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutContext *v8;
  EQKitLayoutContext *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 26 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutContext>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (EQKitLayoutContext *)(*(_QWORD *)(v4 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A));
  }
  result = EQKitLayoutContext::EQKitLayoutContext(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutContext>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF70uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF70uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF70uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411B93F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<EQKitLayoutContext *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<EQKitLayoutContext *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<EQKitLayoutContext>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  void (***v3)(_QWORD);

  v2 = a1[5] + a1[4] - 1;
  v3 = (void (***)(_QWORD))(*(_QWORD *)(a1[1] + 8 * (v2 / 0x1A)) + 152 * (v2 % 0x1A));
  (**v3)(v3);
  --a1[5];
  return std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 26 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1A)
    a2 = 1;
  if (v5 < 0x34)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::find<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::__emplace_unique_key_args<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},objc_object  {objcproto15EQKitLayoutNode13EQKitOperator} const&,objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}* const&>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == *a2)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = *a3;
  v16 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v14 + 40) = v16;
  *((_QWORD *)v14 + 7) = *(_QWORD *)(a4 + 32);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2411B9CD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BA124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BA4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

EQKitLayoutElementaryStack *std::deque<EQKitLayoutElementaryStack>::push_back(_QWORD *a1, const EQKitLayoutElementaryStack *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutElementaryStack *v8;
  EQKitLayoutElementaryStack *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 24 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (EQKitLayoutElementaryStack *)(*(_QWORD *)(v4 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18));
  }
  result = EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x18;
  v4 = v2 - 24;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x18))
                                                                                       + 168 * (v2 % 0x18)));
  --a1[5];
  return std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 24 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x18)
    a2 = 1;
  if (v5 < 0x30)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

const void **EQKit::AutoCFType<__CTFont const*>::~AutoCFType(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **EQKit::AutoCFType<CGPath const*>::~AutoCFType(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

double std::deque<EQKitLayoutTable>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<EQKitLayoutTable>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v8 = &off_25112A7E0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(a2 + 88);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutTable>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BAE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutTable>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  void (***v3)(_QWORD);

  v2 = a1[5] + a1[4] - 1;
  v3 = (void (***)(_QWORD))(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A)) + 96 * (v2 % 0x2A));
  (**v3)(v3);
  --a1[5];
  return std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BB2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

EQKitLayoutRow *std::deque<EQKitLayoutRow>::push_back(_QWORD *a1, EQKitLayoutRow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutRow *v8;
  EQKitLayoutRow *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 25 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutRow>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (EQKitLayoutRow *)(*(_QWORD *)(v4 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19));
  }
  result = EQKitLayoutRow::EQKitLayoutRow(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutRow>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x19;
  v4 = v2 - 25;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFA0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFA0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFA0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BB6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutRow>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x19)) + 160 * (v2 % 0x19)));
  --a1[5];
  return std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 25 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19)
    a2 = 1;
  if (v5 < 0x32)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_2411BC0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  a29 = &a43;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = &a47;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t _pathBoxForCompositeEdge(const EQKit::OpticalKern::Edge::Composite *a1, double a2)
{
  CGMutablePathRef v3;
  CGMutablePathRef v4;
  CGColorSpace *v5;
  CGColor *v6;
  EQKitPathBox *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = EQKit::OpticalKern::Edge::Composite::newPathForEdge(a1);
  if (!v3)
    return 0;
  v4 = v3;
  v10 = xmmword_2412120D0;
  v11 = unk_2412120E0;
  v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF2A0]);
  v6 = CGColorCreate(v5, (const CGFloat *)&v10);
  CGColorSpaceRelease(v5);
  v7 = [EQKitPathBox alloc];
  v8 = -[EQKitPathBox initWithCGPath:height:cgColor:drawingMode:lineWidth:](v7, "initWithCGPath:height:cgColor:drawingMode:lineWidth:", v4, v6, 2, 0.0, 1.0 / a2, v10, v11);
  CGColorRelease(v6);
  CFRelease(v4);
  return v8;
}

void sub_2411BC4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  MEMORY[0x242690740](v20, 0x10C402FEFCB83);
  if (__p)
  {
    a15 = __p;
    operator delete(__p);
  }
  __p = &a20;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<EQKit::OpticalKern::Spec::Entry>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<EQKit::OpticalKern::Spec::Entry>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 72 * a2;
    while (v3 != v7)
      EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(v3 - 72));
    a1[1] = v7;
  }
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 72 * a2;
      v14 = (_OWORD *)MEMORY[0x24BDBEFB0];
      do
      {
        *(_DWORD *)v7 = 0;
        *(_OWORD *)(v7 + 8) = *v14;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_WORD *)(v7 + 40) = -1;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        v7 += 72;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    v18[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(result, v11);
    else
      v12 = 0;
    v15 = &v12[72 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[72 * v11];
    v16 = &v15[72 * a2];
    v17 = (_OWORD *)MEMORY[0x24BDBEFB0];
    do
    {
      *(_DWORD *)v15 = 0;
      *(_OWORD *)(v15 + 8) = *v17;
      *((_QWORD *)v15 + 3) = 0;
      *((_QWORD *)v15 + 4) = 0;
      *((_WORD *)v15 + 20) = -1;
      *((_QWORD *)v15 + 7) = 0;
      *((_QWORD *)v15 + 8) = 0;
      *((_QWORD *)v15 + 6) = 0;
      v15 += 72;
    }
    while (v15 != v16);
    v18[2] = v16;
    std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_2411BC798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::vector<unsigned long> const>::shared_ptr[abi:ne180100]<std::vector<unsigned long>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_25112A810;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2411BC80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<std::vector<unsigned long>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<unsigned long> *,std::shared_ptr<std::vector<unsigned long> const>::__shared_ptr_default_delete<std::vector<unsigned long> const,std::vector<unsigned long>>,std::allocator<std::vector<unsigned long>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x242690740);
}

void std::__shared_ptr_pointer<std::vector<unsigned long> *,std::shared_ptr<std::vector<unsigned long> const>::__shared_ptr_default_delete<std::vector<unsigned long> const,std::vector<unsigned long>>,std::allocator<std::vector<unsigned long>>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<std::vector<unsigned long>>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<unsigned long> *,std::shared_ptr<std::vector<unsigned long> const>::__shared_ptr_default_delete<std::vector<unsigned long> const,std::vector<unsigned long>>,std::allocator<std::vector<unsigned long>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<unsigned long>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x242690740);
  }
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, double a2, const Collection *a3, NSString *a4, double a5, char a6)
{
  double v7;

  *(_QWORD *)this = &off_25112A888;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a6;
  *(_WORD *)((char *)this + 17) = 0;
  *((_DWORD *)this + 5) = 1;
  *((double *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = a4;
  *((double *)this + 6) = a2;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 0;
  *((double *)this + 10) = a5;
  *((_QWORD *)this + 11) = a3;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v7 = (*((double (**)(const Collection *, uint64_t))*a3 + 8))(a3, 2);
  if (*((double *)this + 6) < v7)
    v7 = *((double *)this + 6);
  *((double *)this + 8) = v7;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, const EQKitLayoutContext *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  __int128 v7;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &off_25112A888;
  *((_QWORD *)this + 1) = v4;
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *(_WORD *)((char *)this + 17) = *(_WORD *)((char *)a2 + 17);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  v5 = (CFTypeRef)*((_QWORD *)a2 + 12);
  if (v5)
    v5 = CFRetain(v5);
  *((_QWORD *)this + 12) = v5;
  *((_QWORD *)this + 13) = 0;
  v6 = (CFTypeRef)*((_QWORD *)a2 + 14);
  if (v6)
    v6 = CFRetain(v6);
  *((_QWORD *)this + 14) = v6;
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  v7 = *((_OWORD *)a2 + 8);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_OWORD *)this + 8) = v7;
}

void EQKitLayoutContext::EQKitLayoutContext(uint64_t a1, EQKitLayoutContext *this, uint64_t a3, void *a4, uint64_t a5, char a6, int a7)
{
  double *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int v23;
  const void **v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  char v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  char isOperatorLargeOp;
  BOOL v36;
  uint64_t v37;
  int v38;
  CFTypeRef v39;
  const void *v41[2];
  uint64_t v42;
  char v43;
  void *v44;
  int v45;

  *(_QWORD *)a1 = &off_25112A888;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = 0x4028000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 56);
  v13 = (double *)(a1 + 56);
  *(_QWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 80);
  v14 = EQKitLayoutManager::fontCollection((id *)this);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v42 = 0;
  v43 = 1;
  v15 = *((_QWORD *)this + 77);
  v44 = a4;
  v45 = 9;
  v16 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(v15, v15 + 296, (uint64_t)&v44, (uint64_t)&v42);
  v17 = *(_QWORD *)(a3 + 8);
  if (v16)
  {
    v18 = EQKit::ScriptLevel::resolveWithBase((EQKit::ScriptLevel *)&v42, *(_QWORD *)(a3 + 8));
    v17 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v18 = v17 + a5;
  }
  v19 = *((_QWORD *)this + 77);
  v44 = a4;
  v45 = 42;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(v19, v19 + 440, (uint64_t)&v44, v13);
  LODWORD(v41[0]) = 1;
  v41[1] = 0;
  v20 = *((_QWORD *)this + 77);
  v44 = a4;
  v45 = 43;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v20, v20 + 32, (uint64_t)&v44, (uint64_t)v41))
  {
    v21 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), 2);
    if (*(double *)(a1 + 48) < v21)
      v21 = *(double *)(a1 + 48);
    *(double *)(a1 + 64) = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)v41, a3, v21);
  }
  v41[0] = 0;
  v22 = *((_QWORD *)this + 77);
  v44 = a4;
  v45 = 44;
  v23 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(v22, v22 + 536, (uint64_t)&v44, v41);
  v24 = (const void **)(a3 + 112);
  if (v23)
    v24 = v41;
  v25 = *v24;
  *(_QWORD *)(a1 + 112) = *v24;
  if (v25)
    CFRetain(v25);
  EQKitTypes::CFRetainRelease::~CFRetainRelease(v41);
  LODWORD(v41[0]) = 0;
  if (objc_msgSend(*(id *)(a1 + 72), "conformsToProtocol:", &unk_2571063E8))
    v26 = *(void **)(a1 + 72);
  else
    v26 = 0;
  v27 = *((_QWORD *)this + 77);
  v44 = a4;
  v45 = 17;
  v28 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v27, v27 + 368, (uint64_t)&v44, v41);
  if (v26)
    v30 = v28;
  else
    v30 = 1;
  if ((v30 & 1) != 0)
  {
    if (!v26)
      goto LABEL_23;
  }
  else
  {
    LODWORD(v41[0]) = objc_msgSend(v26, "scriptVariant");
  }
  LODWORD(v26) = objc_msgSend(v26, "scriptContext");
LABEL_23:
  if (*v13 != 0.0
    || (unint64_t)(v18 - 1) > 1
    || (v18 == 1 ? (v31 = 3) : (v31 = 4),
        v32 = *((double *)this + 1),
        v29.n128_f64[0] = *v13,
        v33 = v32
            * (*(double (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), v31, v29), v33 == 0.0))
  {
    v33 = *(double *)(a1 + 48);
    if (v18 != v17)
    {
      v34 = *v13;
      if (*v13 == 0.0)
        v34 = 0.71;
      v33 = v33 * pow(v34, (double)(v18 - v17));
    }
  }
  if (v33 < *(double *)(a1 + 64))
    v33 = *(double *)(a1 + 64);
  if ((void *)objc_msgSend(a4, "operatorCore") == a4)
    isOperatorLargeOp = EQKitLayoutManager::isOperatorLargeOp((uint64_t)this, a4);
  else
    isOperatorLargeOp = 0;
  v36 = *(_BYTE *)(a3 + 17) != 0;
  if (a7 == 2)
  {
    v36 = 0;
  }
  else if (a7 == 1)
  {
    v36 = 1;
  }
  v37 = *(_QWORD *)(a3 + 40);
  v38 = (int)v41[0];
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = a6;
  *(_BYTE *)(a1 + 17) = v36;
  *(_BYTE *)(a1 + 18) = isOperatorLargeOp;
  *(_DWORD *)(a1 + 20) = v38;
  *(double *)(a1 + 24) = v33;
  *(_DWORD *)(a1 + 32) = (_DWORD)v26;
  *(_QWORD *)(a1 + 40) = v37;
  if (v33 == *(double *)(a3 + 24) && v38 == *(_DWORD *)(a3 + 20))
  {
    v39 = *(CFTypeRef *)(a3 + 96);
    if (v39)
      v39 = CFRetain(v39);
    *(_QWORD *)(a1 + 96) = v39;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
}

void sub_2411BCDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::~EQKitLayoutContext(CGColorRef *this)
{
  *this = (CGColorRef)&off_25112A888;
  EQKitLayoutContext::pInvalidateFonts((EQKitLayoutContext *)this);
  CGColorRelease(this[14]);
}

{
  EQKitLayoutContext::~EQKitLayoutContext(this);
  JUMPOUT(0x242690740);
}

void EQKitLayoutContext::pInvalidateFonts(EQKitLayoutContext *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 12);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 12) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 13);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 13) = 0;
  }
}

uint64_t EQKitLayoutContext::font(EQKitLayoutContext *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 11) + 72))(*((_QWORD *)this + 11), (char *)this + 8);
    *((_QWORD *)this + 12) = result;
  }
  return result;
}

const __CTFont *EQKitLayoutContext::textFont(EQKitLayoutContext *this)
{
  const __CTFont *result;
  uint64_t v3;
  CFDictionaryRef v4;
  uint64_t v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  const __CTFontDescriptor *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  result = (const __CTFont *)*((_QWORD *)this + 13);
  if (!result)
  {
    *((_QWORD *)this + 13) = CTFontCreateWithName(*((CFStringRef *)this + 5), *((CGFloat *)this + 10), 0);
    v3 = EQKit::Script::Info::symbolicFontTraits((EQKitLayoutContext *)((char *)this + 8));
    result = (const __CTFont *)*((_QWORD *)this + 13);
    if ((_DWORD)v3)
    {
      v4 = CTFontCopyTraits(result);
      v5 = *MEMORY[0x24BDC4DC8];
      if (-[__CFDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", *MEMORY[0x24BDC4DC8]) != v3)
      {
        v6 = CTFontCopyFamilyName(*((CTFontRef *)this + 13));
        v7 = *MEMORY[0x24BDC4D08];
        v13[0] = v6;
        v8 = *MEMORY[0x24BDC4DA8];
        v12[0] = v7;
        v12[1] = v8;
        v13[1] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *((double *)this + 10));
        v12[2] = *MEMORY[0x24BDC4DE0];
        v10 = v5;
        v11 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v3);
        v13[2] = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
        v9 = CTFontDescriptorCreateWithAttributes((CFDictionaryRef)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, v12, 3));
        CFRelease(*((CFTypeRef *)this + 13));
        *((_QWORD *)this + 13) = CTFontCreateWithFontDescriptor(v9, *((CGFloat *)this + 10), 0);
        CFRelease(v9);
        CFRelease(v6);
      }
      CFRelease(v4);
      return (const __CTFont *)*((_QWORD *)this + 13);
    }
  }
  return result;
}

uint64_t EQKit::Script::Info::symbolicFontTraits(EQKit::Script::Info *this)
{
  int v1;

  v1 = *((_DWORD *)this + 3) - 2;
  if (v1 > 0xC)
    return 0;
  else
    return dword_24121225C[v1];
}

double EQKitLayoutContext::pComputeRuleThickness(EQKitLayoutContext *this)
{
  EQKitLayoutContext::pComputeMathAxis(this);
  return *((double *)this + 16);
}

double EQKitLayoutContext::pComputeMathAxis(EQKitLayoutContext *this)
{
  double v2;
  double v3;
  uint64_t v4;
  id v5;
  void *v6;
  const __CFAttributedString *v7;
  const __CTLine *v8;
  CGContext *FakeContext;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect ImageBounds;
  CGRect v16;
  CGRect v17;

  v2 = (*(double (**)(_QWORD, uint64_t, char *, double))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), 33, (char *)this + 8, 0.0);
  if (v2 == 0.0)
  {
    v4 = *((_QWORD *)this + 12);
    if (v4
      || (v4 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 11) + 72))(*((_QWORD *)this + 11), (char *)this + 8), (*((_QWORD *)this + 12) = v4) != 0))
    {
      v5 = objc_alloc(MEMORY[0x24BDBCE70]);
      v6 = (void *)objc_msgSend(v5, "initWithObjectsAndKeys:", v4, *MEMORY[0x24BDC4C28], 0);
    }
    else
    {
      v6 = 0;
    }
    v7 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", CFSTR("−"), v6);
    v8 = CTLineCreateWithAttributedString(v7);
    FakeContext = (CGContext *)EQKitUtilGetFakeContext();
    ImageBounds = CTLineGetImageBounds(v8, FakeContext);
    x = ImageBounds.origin.x;
    y = ImageBounds.origin.y;
    width = ImageBounds.size.width;
    height = ImageBounds.size.height;
    CFRelease(v8);

    v16.origin.x = x;
    v16.origin.y = y;
    v16.size.width = width;
    v16.size.height = height;
    *((CGFloat *)this + 17) = CGRectGetMidY(v16);
    v17.origin.x = x;
    v17.origin.y = y;
    v17.size.width = width;
    v17.size.height = height;
    v3 = CGRectGetHeight(v17);
  }
  else
  {
    *((double *)this + 17) = v2;
    (*(void (**)(_QWORD, uint64_t, char *, double))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), 35, (char *)this + 8, 0.0);
  }
  *((double *)this + 16) = v3;
  *((_BYTE *)this + 120) |= 3u;
  return *((double *)this + 17);
}

CGFloat EQKitLayoutContext::pComputeSlantAngle(EQKitLayoutContext *this)
{
  const __CTFont *v2;
  CGFloat SlantAngle;
  CGFloat result;

  *((_BYTE *)this + 120) |= 4u;
  v2 = (const __CTFont *)*((_QWORD *)this + 12);
  if (!v2)
  {
    v2 = (const __CTFont *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 11) + 72))(*((_QWORD *)this + 11), (char *)this + 8);
    *((_QWORD *)this + 12) = v2;
  }
  SlantAngle = CTFontGetSlantAngle(v2);
  result = (SlantAngle + SlantAngle) * 3.14159265 / 360.0;
  *((CGFloat *)this + 18) = result;
  return result;
}

CGFloat EQKitLayoutContext::unitValue(EQKitLayoutContext *this, int a2)
{
  double v3;
  const __CTFont *v4;

  v3 = 1.0;
  switch(a2)
  {
    case 2:
      v4 = (const __CTFont *)*((_QWORD *)this + 12);
      if (v4)
        return CTFontGetXHeight(v4);
      v4 = (const __CTFont *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 11) + 72))(*((_QWORD *)this + 11), (char *)this + 8);
      *((_QWORD *)this + 12) = v4;
      if (v4)
        return CTFontGetXHeight(v4);
      break;
    case 5:
      if ((*((_BYTE *)this + 120) & 1) == 0)
        EQKitLayoutContext::pComputeMathAxis(this);
      return *((double *)this + 16);
    case 3:
      return *((double *)this + 3);
  }
  return v3;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = *(_QWORD *)(v7 + 48);
    v10 = *(_BYTE *)(v7 + 56);
LABEL_3:
    *(_BYTE *)(a4 + 8) = v10;
    *(_QWORD *)a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *(_QWORD *)(v14 + 48);
      v10 = *(_BYTE *)(v14 + 56);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = *(_QWORD *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *(_QWORD *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v7;
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = (CFTypeRef *)(v7 + 48);
LABEL_3:
    EQKitTypes::CFRetainRelease::operator=(a4, v9);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = (CFTypeRef *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

const void **EQKitTypes::CFRetainRelease::operator=(const void **a1, CFTypeRef *a2)
{
  const void *v4;
  CFTypeRef v5;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  v5 = *a2;
  if (*a2)
    v5 = CFRetain(v5);
  *a1 = v5;
  return a1;
}

void EQKitTypes::CFRetainRelease::~CFRetainRelease(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

double EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = objc_msgSend(*(id *)(a2 + 40), "mutableCopy");
  *(_QWORD *)(a1 + 48) = objc_msgSend(*(id *)(a2 + 48), "mutableCopy");
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(id *this)
{

  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 15);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:ne180100](this + 9);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layout@<X0>(id *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  double *v9;
  float v10;
  double v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  EQKitHVSpace *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  EQKitBox *v27;
  EQKitVSpace *v28;
  EQKitVSpace *v29;
  EQKitVBox *v30;
  uint64_t v31;
  EQKitVBox *v32;
  EQKit::ILayout *v34;
  uint64_t v35;
  int v36[14];
  id v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p;
  double *v48;
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  EQKitLayoutElementaryStack::collectRows(this);
  if (objc_msgSend(this[5], "count"))
  {
    if (!this[6])
      this[6] = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    std::vector<double>::vector(&__p, (unint64_t)this[7] + (_QWORD)this[8]);
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v4 = this[5];
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v44 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
          objc_msgSend(v8, "setFirstColumnIndex:", (char *)this[7] + objc_msgSend(v8, "alignmentShift"));
          objc_msgSend(v8, "populateMaxColumnWidths:", (char *)__p + 8 * objc_msgSend(v8, "firstColumnIndex"));
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
      }
      while (v5);
    }
    v9 = (double *)__p;
    v10 = 0.0;
    while (v9 != v48)
    {
      v11 = *v9++;
      v10 = v11 + v10;
    }
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v12 = this[5];
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
    v34 = a2;
    v14 = 0;
    if (v13)
    {
      v15 = 0;
      v16 = 0;
      v17 = v10;
      v18 = *(_QWORD *)v40;
      do
      {
        v19 = 0;
        v35 = v15 + v13;
        v20 = (uint64_t)v16;
        do
        {
          if (*(_QWORD *)v40 != v18)
            objc_enumerationMutation(v12);
          v16 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v19);
          if ((id)(v15 + v19) == this[2])
            v14 = objc_msgSend(this[6], "count");
          EQKitLayoutElementaryStack::layoutForRow(this, v16, v20, (uint64_t)&__p, (EQKit::ILayout *)&v37, v17);
          if ((id)(v15 + v19) == this[3])
          {
            v21 = [EQKitHVSpace alloc];
            objc_msgSend(v37, "width");
            v23 = v22;
            objc_msgSend(v37, "height");
            v25 = v24;
            objc_msgSend(v37, "depth");
            v27 = -[EQKitHVSpace initWithWidth:height:depth:](v21, "initWithWidth:height:depth:", v23, v25, v26);
            EQKit::ILayout::ILayout((EQKit::ILayout *)v36, v27);
            EQKit::ILayout::operator=((uint64_t)&v37, (uint64_t)v36);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v36);

          }
          objc_msgSend(this[6], "addObject:", v37, v34);
          if (v15 + v19 + 1 < (unint64_t)objc_msgSend(this[5], "count"))
          {
            v28 = [EQKitVSpace alloc];
            objc_msgSend(v16, "followingSpace");
            v29 = -[EQKitVSpace initWithHeight:depth:](v28, "initWithHeight:depth:");
            objc_msgSend(this[6], "addObject:", v29);

          }
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v37);
          ++v19;
          v20 = (uint64_t)v16;
        }
        while (v13 != v19);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
        v15 = v35;
      }
      while (v13);
    }
    a2 = v34;
    if (this[2] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v30 = -[EQKitVBox initWithChildBoxes:]([EQKitVBox alloc], "initWithChildBoxes:", this[6]);
      v36[0] = 0;
      v31 = *((_QWORD *)*this + 77);
      v37 = (id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)*this);
      v38 = 2;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v31, v31 + 152, (uint64_t)&v37, v36);
      v32 = (EQKitVBox *)EQKitLayoutManager::baselineAlignBox(*this, v30, v36[0]);

    }
    else
    {
      v32 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", this[6], v14);
    }
    if (__p)
    {
      v48 = (double *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v32 = 0;
  }
  return EQKit::ILayout::ILayout(a2, &v32->super.super);
}

void sub_2411BDAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutElementaryStack::collectRows(id *this)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[56];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_msgSend(this[1], "schemataChildren");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*this, *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6), 0, (EQKit::ILayout *)v7);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v7);
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void EQKitLayoutElementaryStack::layoutForRow(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, EQKit::ILayout *a5@<X8>, double a6@<D0>)
{
  id v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  double v17;
  double v18;
  EQKitHSpace *v19;
  void *v20;
  EQKitHBox *v21;

  v12 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if ((objc_msgSend(a2, "spansStack") & 1) == 0)
  {
    v13 = *(double **)a4;
    v14 = objc_msgSend(a2, "firstColumnIndex");
    if (v14)
    {
      v15 = 8 * v14;
      v16 = 0.0;
      do
      {
        v17 = *v13++;
        v16 = v17 + v16;
        v15 -= 8;
      }
      while (v15);
      v18 = v16;
    }
    else
    {
      v18 = 0.0;
    }
    v19 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v18);
    objc_msgSend(v12, "addObject:", v19);

  }
  v20 = (void *)objc_msgSend(a2, "newBoxWithStackWidth:columnWidthIter:iterMax:previousRow:layoutManager:", *(_QWORD *)a4 + 8 * objc_msgSend(a2, "firstColumnIndex"), *(_QWORD *)(a4 + 8), a3, *a1, a6);
  objc_msgSend(v12, "addObject:", v20);

  v21 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v12);
  EQKit::ILayout::ILayout(a5, &v21->super.super);

}

void sub_2411BDD9C(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackGroup@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKitLayoutManager *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[56];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v7 = a1 + 9;
  v6 = (EQKitLayoutManager *)*a1;
  v8 = *((_QWORD *)v6 + 77);
  v24 = EQKitLayoutManager::currentNode(v6);
  v25 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v8, v8 + 392, (uint64_t)&v24, &v23);
  v9 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v24 = v23 + v9;
  std::deque<long>::push_back(v7, &v24);
  v22 = 0;
  v10 = *(_QWORD *)(*a1 + 616);
  v24 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)*a1);
  v25 = 22;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v10, v10 + 392, (uint64_t)&v24, &v22);
  std::deque<long>::push_back(a1 + 15, &v22);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v11 = (void *)objc_msgSend(a2, "schemataChildren");
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v19;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v19 != v14)
          objc_enumerationMutation(v11);
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*a1, *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v15), 0, (EQKit::ILayout *)v17);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v17);
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v13);
  }
  --a1[14];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](v7, 1);
  --a1[20];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100](a1 + 15, 1);
  return EQKit::ILayout::ILayout(a3, 0);
}

uint64_t EQKitLayoutElementaryStack::shiftPosition(EQKitLayoutElementaryStack *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
    return 0;
  v2 = *((_QWORD *)this + 20);
  if (!v2)
    return 0;
  v3 = v1 - 1;
  v4 = (_QWORD *)((char *)this + 72);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10)
                             + (((unint64_t)(*((_QWORD *)this + 13) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*((_QWORD *)this + 13) + v3) & 0x1FF));
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 19) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *((_QWORD *)this + 19) - 1) & 0x1FF))
     + v5;
  *((_QWORD *)this + 14) = v3;
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 9, 1);
  std::deque<long>::push_back(v4, &v7);
  return v5;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackRow@<X0>(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  EQKitLayoutManager *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  EQKitLayoutElementaryStackDigitRow *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  EQKitLayoutElementaryStackDigitRow *v23;
  _OWORD v26[3];
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v6 = (void *)objc_msgSend(a2, "schemataChildren");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (!v7)
    goto LABEL_17;
  v8 = *(_QWORD *)v29;
  v9 = 0x7FFFFFFFLL;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v29 != v8)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
      if (objc_msgSend(v11, "isNumber"))
      {
        v27 = 0;
        v12 = *a1;
        if (v11)
          objc_msgSend(v11, "layoutSchemata");
        else
          memset(v26, 0, 32);
        v13 = EQKitLayoutManager::layoutNumberDigits(v12, (const EQKit::Layout::Schemata *)v26, &v27);
        EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)v26);
        if (v9 == 0x7FFFFFFF)
        {
          v14 = objc_msgSend(v5, "count");
          v9 = v27 + v14;
        }
        objc_msgSend(v5, "addObjectsFromArray:", v13);
      }
      else
      {
        EQKitLayoutManager::layoutBox(*a1, (uint64_t)v11, 0, (EQKit::ILayout *)v26);
        objc_msgSend(v5, "addObject:", *(_QWORD *)&v26[0]);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
      }
    }
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  }
  while (v7);
  if (v9 == 0x7FFFFFFF)
LABEL_17:
    v9 = objc_msgSend(v5, "count");
  v27 = 0;
  v15 = *((_QWORD *)*a1 + 77);
  *(_QWORD *)&v26[0] = EQKitLayoutManager::currentNode(*a1);
  DWORD2(v26[0]) = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v15, v15 + 392, (uint64_t)v26, &v27);
  v16 = [EQKitLayoutElementaryStackDigitRow alloc];
  v17 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v18 = v27;
  v19 = EQKitLayoutManager::layoutContext(*a1);
  v21 = v19;
  v22 = *(_QWORD *)(v19 + 88);
  if ((*(_BYTE *)(v19 + 120) & 1) != 0)
    v20.n128_u64[0] = *(_QWORD *)(v19 + 128);
  else
    v20.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v19);
  (*(void (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v22 + 56))(v22, 16, v21 + 8, v20);
  v23 = -[EQKitLayoutElementaryStackDigitRow initWithChildren:decimalPoint:position:followingSpace:](v16, "initWithChildren:decimalPoint:position:followingSpace:", v5, v9, v18 + v17);
  EQKitLayoutElementaryStack::addRow(a1, v23);

  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_2411BE2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  EQKit::Layout::Schemata::~Schemata((EQKit::Layout::Schemata *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutElementaryStack::addRow(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = (id)a1[5];
  if (!v4)
  {
    v4 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    a1[5] = v4;
  }
  objc_msgSend(v4, "addObject:", a2);
  v5 = objc_msgSend(a2, "alignmentShift");
  if (a1[7] <= -v5)
    v6 = -v5;
  else
    v6 = a1[7];
  a1[7] = v6;
  v7 = objc_msgSend(a2, "alignmentShift");
  result = objc_msgSend(a2, "columnCount");
  v9 = result + v7;
  if (a1[8] > result + v7)
    v9 = a1[8];
  a1[8] = v9;
  return result;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackLine@<X0>(uint64_t a1@<X0>, EQKit::ILayout *a2@<X8>)
{
  double v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  EQKitLayoutElementaryStackLineRow *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  EQKitLayoutElementaryStackLineRow *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *(double *)(a1 + 32);
  if (v4 <= 0.0)
  {
    v5 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
    if ((*(_BYTE *)(v5 + 120) & 1) != 0)
      v4 = *(double *)(v5 + 128);
    else
      v4 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v5);
  }
  v19 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 616);
  v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  v21 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v6, v6 + 392, (uint64_t)&v20, &v19);
  v18 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 616);
  v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  v21 = 23;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v7, v7 + 416, (uint64_t)&v20, &v18);
  v8 = [EQKitLayoutElementaryStackLineRow alloc];
  v9 = v18;
  v10 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v11 = v19;
  v12 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
  v14 = v12;
  v15 = *(_QWORD *)(v12 + 88);
  if ((*(_BYTE *)(v12 + 120) & 1) != 0)
    v13.n128_u64[0] = *(_QWORD *)(v12 + 128);
  else
    v13.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v12);
  v16 = -[EQKitLayoutElementaryStackLineRow initWithLength:thickness:position:followingSpace:](v8, "initWithLength:thickness:position:followingSpace:", v9, v11 + v10, v4, (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v15 + 56))(v15, 16, v14 + 8, v13));
  EQKitLayoutElementaryStack::addRow((_QWORD *)a1, v16);

  return EQKit::ILayout::ILayout(a2, 0);
}

void EQKitLayoutElementaryStack::layoutStackCarries(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  EQKitLayoutManager *v11;
  uint64_t v12;
  EQKitLayoutElementaryStackCarryRow *v13;
  uint64_t v14;
  uint64_t v15;
  EQKitLayoutElementaryStackCarryRow *v16;
  id v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __n128 (*v40)(__n128 *, __n128 *);
  void (*v41)(uint64_t);
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v18 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v37 = 0;
  v38 = &v37;
  v39 = 0x4812000000;
  v40 = __Block_byref_object_copy_;
  v41 = __Block_byref_object_dispose_;
  v42 = &unk_24124964B;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v33 = 0;
  v34 = (double *)&v33;
  v35 = 0x2020000000;
  v36 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v5 = *((_QWORD *)*a1 + 77);
  v24 = EQKitLayoutManager::currentNode(*a1);
  v25 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v5, v5 + 200, (uint64_t)&v24, (char *)&v30);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v6 = (void *)objc_msgSend(a2, "schemataChildren");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v46, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v27 != v8)
          objc_enumerationMutation(v6);
        v10 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
        v11 = *a1;
        v20[0] = MEMORY[0x24BDAC760];
        v20[1] = 3321888768;
        v20[2] = ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke;
        v20[3] = &unk_25112A8D0;
        v20[7] = a1;
        v20[4] = v10;
        v20[5] = &v37;
        v22 = 0;
        v23 = 0;
        __p = 0;
        std::vector<EQKitTypes::Crossout::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Crossout::Enum*,EQKitTypes::Crossout::Enum*>(&__p, v30, (uint64_t)v31, (v31 - (_BYTE *)v30) >> 2);
        v20[6] = &v33;
        EQKitLayoutManager::layoutBox(v11, v10, 1, 0, 0, 0, (uint64_t)v20, (EQKit::ILayout *)&v24);
        objc_msgSend(v18, "addObject:", v24);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v24);
        if (__p)
        {
          v22 = __p;
          operator delete(__p);
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v46, 16);
    }
    while (v7);
  }
  v19 = 0;
  v12 = *((_QWORD *)*a1 + 77);
  v24 = EQKitLayoutManager::currentNode(*a1);
  v25 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v12, v12 + 392, (uint64_t)&v24, &v19);
  v13 = [EQKitLayoutElementaryStackCarryRow alloc];
  v14 = objc_msgSend(v18, "count");
  v15 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v16 = -[EQKitLayoutElementaryStackCarryRow initWithChildren:decimalPoint:position:followingSpace:crossouts:](v13, "initWithChildren:decimalPoint:position:followingSpace:crossouts:", v18, v14, v19 + v15, v38 + 6, v34[3]);
  EQKitLayoutElementaryStack::addRow(a1, v16);

  EQKit::ILayout::ILayout(a3, 0);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_2411BE820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke(_QWORD *a1, uint64_t a2)
{
  EQKitLayoutManager **v3;
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  void *__p;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  if (a1[4] != a2)
    return;
  v3 = (EQKitLayoutManager **)a1[7];
  __p = 0;
  v42 = 0;
  v43 = 0;
  v4 = *((_QWORD *)*v3 + 77);
  v44 = a2;
  v45 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v4, v4 + 200, (uint64_t)&v44, (char *)&__p);
  v5 = __p;
  if (__p != v42)
  {
    v6 = *(_QWORD **)(a1[5] + 8);
    v7 = (char *)v6[7];
    v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      v9 = (char *)v6[6];
      v10 = (v7 - v9) >> 2;
      if (!((unint64_t)(v10 + 1) >> 62))
      {
        v11 = v8 - (_QWORD)v9;
        v12 = (uint64_t)(v8 - (_QWORD)v9) >> 1;
        if (v12 <= v10 + 1)
          v12 = v10 + 1;
        if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(v6 + 8), v13);
          v9 = (char *)v6[6];
          v7 = (char *)v6[7];
        }
        else
        {
          v14 = 0;
        }
        v25 = &v14[4 * v10];
        v26 = &v14[4 * v13];
        *(_DWORD *)v25 = *v5;
        v19 = v25 + 4;
        while (v7 != v9)
        {
          v27 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v25 - 1) = v27;
          v25 -= 4;
        }
LABEL_46:
        v6[6] = v25;
        v6[7] = v19;
        v6[8] = v26;
        if (v9)
          operator delete(v9);
        goto LABEL_48;
      }
      goto LABEL_56;
    }
LABEL_14:
    *(_DWORD *)v7 = *v5;
    v18 = v7 + 4;
    goto LABEL_15;
  }
  v5 = (_DWORD *)a1[8];
  v6 = *(_QWORD **)(a1[5] + 8);
  v15 = (void **)(v6 + 6);
  v7 = (char *)v6[7];
  v16 = (uint64_t)(v6 + 8);
  v17 = v6[8];
  if (v5 != (_DWORD *)a1[9])
  {
    if ((unint64_t)v7 >= v17)
    {
      v9 = (char *)*v15;
      v20 = (v7 - (_BYTE *)*v15) >> 2;
      if (!((unint64_t)(v20 + 1) >> 62))
      {
        v21 = v17 - (_QWORD)v9;
        v22 = (uint64_t)(v17 - (_QWORD)v9) >> 1;
        if (v22 <= v20 + 1)
          v22 = v20 + 1;
        if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v16, v23);
          v9 = (char *)v6[6];
          v7 = (char *)v6[7];
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        v26 = &v24[4 * v23];
        *(_DWORD *)v25 = *v5;
        v19 = v25 + 4;
        while (v7 != v9)
        {
          v33 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v25 - 1) = v33;
          v25 -= 4;
        }
        goto LABEL_46;
      }
LABEL_56:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_14;
  }
  if ((unint64_t)v7 >= v17)
  {
    v9 = (char *)*v15;
    v28 = (v7 - (_BYTE *)*v15) >> 2;
    if ((unint64_t)(v28 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v29 = v17 - (_QWORD)v9;
    v30 = (uint64_t)(v17 - (_QWORD)v9) >> 1;
    if (v30 <= v28 + 1)
      v30 = v28 + 1;
    if (v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v16, v31);
      v9 = (char *)v6[6];
      v7 = (char *)v6[7];
    }
    else
    {
      v32 = 0;
    }
    v25 = &v32[4 * v28];
    v26 = &v32[4 * v31];
    *(_DWORD *)v25 = 0;
    v19 = v25 + 4;
    while (v7 != v9)
    {
      v34 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v25 - 1) = v34;
      v25 -= 4;
    }
    goto LABEL_46;
  }
  *(_DWORD *)v7 = 0;
  v18 = v7 + 4;
LABEL_15:
  v19 = v18;
LABEL_48:
  v6[7] = v19;
  v35 = *(_QWORD *)(a1[6] + 8);
  v36 = EQKitLayoutManager::layoutContext(*v3);
  v38 = v36;
  v39 = *(_QWORD *)(v36 + 88);
  if ((*(_BYTE *)(v36 + 120) & 1) != 0)
    v37.n128_u64[0] = *(_QWORD *)(v36 + 128);
  else
    v37.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v36);
  v40 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v39 + 56))(v39, 16, v38 + 8, v37);
  if (*(double *)(v35 + 24) >= v40)
    v40 = *(double *)(v35 + 24);
  *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = v40;
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
}

void sub_2411BEBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v2 = (_QWORD *)(a1 + 64);
  v2[2] = 0;
  return std::vector<EQKitTypes::Crossout::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Crossout::Enum*,EQKitTypes::Crossout::Enum*>(v2, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
}

void __destroy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void EQKitLayoutElementaryStack::layoutStackCarry(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  EQKitLayoutManager::beginRow(*a1, 0, 1);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = (void *)objc_msgSend(a2, "schemataChildren", 0);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        EQKitLayoutManager::layout(*a1, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v10++), 0);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
  EQKitLayoutManager::endRow(*a1, a3);
}

double EQKitLayoutElementaryStack::baselineForRowAtIndex(id *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  void *v7;
  double v8;

  if (!objc_msgSend(this[6], "count"))
    return 0.0;
  v4 = 0;
  v5 = 0;
  v6 = 0.0;
  do
  {
    v7 = (void *)objc_msgSend(this[6], "objectAtIndex:", v4);
    if (v5 >= a2)
      objc_msgSend(v7, "height");
    else
      objc_msgSend(v7, "vsize");
    v6 = v6 + v8;
    if ((v4 & 1) == 0 && v5 == a2)
      break;
    if ((v4 & 1) == 0 && v5 != a2)
      ++v5;
    ++v4;
  }
  while (v4 < objc_msgSend(this[6], "count"));
  return v6;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2411BF5B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    v9 = *(_QWORD *)(v7 + 48);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *(_QWORD *)(v13 + 48);
      goto LABEL_3;
    }
  }
  return result;
}

_QWORD *std::vector<EQKitTypes::Crossout::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Crossout::Enum*,EQKitTypes::Crossout::Enum*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2411BF6F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411BFA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void EQKit::Layout::Schemata::~Schemata(id *this)
{
  *this = &off_25112A910;

}

{
  EQKit::Layout::Schemata::~Schemata(this);
  JUMPOUT(0x242690740);
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t this)
{
  *(_QWORD *)this = &off_25112A910;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t EQKit::Layout::Schemata::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {

    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = objc_msgSend(*(id *)(a2 + 24), "copy");
  }
  return a1;
}

id EQKit::Layout::Schemata::phantom@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 3;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::ident@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 8;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::oper@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 10;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::operFontStretch@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 11;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::text@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 22;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::num@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 9;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fraction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 7;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::subsuperscript@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 4;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::underover@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 5;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::radical@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 6;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stack@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 12;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackGroup@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 13;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 14;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackLine@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 15;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarries@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 16;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarry@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 17;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::longDivision@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 18;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::table@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 19;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::tableRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 20;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::padded@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 23;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::space@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 24;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fenced@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 25;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::enclose@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 28;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void EQKit::Layout::Schemata::alignGroup(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_25112A910;
  *(_DWORD *)(a1 + 8) = 26;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::alignMark(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_25112A910;
  *(_DWORD *)(a1 + 8) = 27;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::none(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_25112A910;
  *(_DWORD *)(a1 + 8) = 21;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t EQKit::Layout::Schemata::subsuperscriptSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 4)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::underoverSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 5)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::tableSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 19)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::tableRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 20)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 12)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackGroupSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 13)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 14)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::radicalSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 6)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::textSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 22)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackLineSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 15)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackCarriesSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 16)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackCarrySchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 17)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::tokenSchemata(EQKit::Layout::Schemata *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

BOOL EQKit::Layout::Schemata::isToken(EQKit::Layout::Schemata *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8;
}

uint64_t EQKit::Layout::Schemata::phantomSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 3)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::operatorSchemata(EQKit::Layout::Schemata *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFE) == 0xA)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::fractionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 7)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::longDivisionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 18)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::paddedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 23)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::fencedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 25)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::encloseSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 28)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

id EQKit::Layout::Schemata::node@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 1;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t EQKit::Layout::Schemata::nodeSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 1)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::row@<X0>(EQKit::Layout::Schemata *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_25112A910;
  *(_DWORD *)(a2 + 8) = 2;
  *(_QWORD *)(a2 + 16) = 0;
  result = -[EQKit::Layout::Schemata copy](this, "copy");
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

uint64_t EQKit::Layout::Schemata::children(EQKit::Layout::Schemata *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 2) != 2)
    return 0;
  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return objc_msgSend(*((id *)this + 2), "schemataChildren");
  return v1;
}

uint64_t EQKit::Layout::Schemata::automaticSourceAttribution(EQKit::Layout::Schemata *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v1, "schemataAutomaticSourceAttribution");
  else
    return 1;
}

uint64_t EQKit::Layout::Schemata::sourceAttribution(id *this)
{
  return objc_msgSend(this[2], "sourceAttribution");
}

double swap(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v4;
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap((uint64_t *)a1 + 9, (uint64_t)a2 + 72);
  v13 = *((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v14;
  v15 = *((_QWORD *)a1 + 14);
  *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v15;
  v16 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v16;
  v17 = *((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v17;
  v18 = *((_QWORD *)a1 + 17);
  *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v18;
  result = *((double *)a1 + 18);
  *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
  *((double *)a2 + 18) = result;
  LODWORD(v18) = *((_DWORD *)a1 + 38);
  *((_DWORD *)a1 + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v18;
  LOBYTE(v18) = *((_BYTE *)a1 + 156);
  *((_BYTE *)a1 + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v18;
  return result;
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, char a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_QWORD *)this = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 156) = a2;
}

void sub_2411C0614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  v6 = *(void **)(v2 + 120);
  if (v6)
  {
    *(_QWORD *)(v2 + 128) = v6;
    operator delete(v6);
  }
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v3, *(id **)(v2 + 80));
  v8 = *(void **)(v2 + 32);
  if (v8)
  {
    *(_QWORD *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<EQKit::ILayout>::__init_with_size[abi:ne180100]<EQKit::ILayout*,EQKit::ILayout*>((_QWORD *)this + 1, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<EQKitLayoutRow::Kerning>::__init_with_size[abi:ne180100]<EQKitLayoutRow::Kerning*,EQKitLayoutRow::Kerning*>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:ne180100]((uint64_t *)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<EQKitAlignmentGroup>::__init_with_size[abi:ne180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((_QWORD *)this + 12, *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 15, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *(_QWORD *)this = objc_msgSend(*(id *)a2, "mutableCopy");
  *((_QWORD *)this + 7) = objc_msgSend(*((id *)a2 + 7), "mutableCopy");
}

void sub_2411C079C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v4, *(id **)(v2 + 80));
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::~EQKitLayoutRow(EQKitLayoutRow *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 72, *((id **)this + 10));
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 8);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:ne180100](&v5);
}

EQKitLayoutRow *EQKitLayoutRow::operator=(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  swap(a1, a2);
  return a1;
}

void EQKitLayoutRow::addChild(uint64_t a1, uint64_t a2, const EQKit::ILayout *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  int v23;
  id v24[2];

  v6 = objc_msgSend(*(id *)a1, "count");
  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >= *(_QWORD *)(a1 + 24))
  {
    v9 = std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>((uint64_t *)(a1 + 8), a3);
  }
  else
  {
    EQKit::ILayout::ILayout(*(EQKit::ILayout **)(a1 + 16), a3);
    v9 = v8 + 56;
    *(_QWORD *)(a1 + 16) = v8 + 56;
  }
  *(_QWORD *)(a1 + 16) = v9;
  if (!(a2 | v7))
    goto LABEL_8;
  v10 = *(id *)a1;
  if (!a2)
    a2 = objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  objc_msgSend(v10, "addObject:", a2);
  if (!v7)
  {
LABEL_8:
    v11 = *(id *)(a1 + 56);
    if (!v11)
    {
      v11 = objc_alloc_init(MEMORY[0x24BDD1698]);
      *(_QWORD *)(a1 + 56) = v11;
    }
    objc_msgSend(v11, "addIndex:", v6);
  }
  v12 = (_QWORD *)*((_QWORD *)a3 + 1);
  if (v12 != (_QWORD *)((char *)a3 + 16))
  {
    v13 = (uint64_t *)(a1 + 80);
    do
    {
      v14 = *v13;
      v15 = *((_DWORD *)v12 + 8);
      if (!*v13)
        goto LABEL_23;
      v16 = a1 + 80;
      do
      {
        v17 = *(_DWORD *)(v14 + 32);
        v18 = v17 < v15;
        if (v17 >= v15)
          v19 = (uint64_t *)v14;
        else
          v19 = (uint64_t *)(v14 + 8);
        if (!v18)
          v16 = v14;
        v14 = *v19;
      }
      while (*v19);
      if ((uint64_t *)v16 == v13 || v15 < *(_DWORD *)(v16 + 32))
      {
LABEL_23:
        v23 = *((_DWORD *)v12 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v24, (id *)v12 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(a1 + 72, &v23, (uint64_t)&v23);
        EQKit::ILayoutOffset::~ILayoutOffset(v24);
      }
      v20 = (_QWORD *)v12[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v12[2];
          v22 = *v21 == (_QWORD)v12;
          v12 = v21;
        }
        while (!v22);
      }
      v12 = v21;
    }
    while (v21 != (_QWORD *)((char *)a3 + 16));
  }
}

void sub_2411C0A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

double EQKitLayoutRow::addChild(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  uint64_t v4;
  uint64_t v5;
  const EQKitLayoutRow *v6;
  char **v7;
  char *v8;
  int v9;
  char **v10;
  int v11;
  BOOL v12;
  char **v13;
  const EQKitLayoutRow *v14;
  const EQKitLayoutRow *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  double result;
  const EQKitLayoutRow *v34;
  int v35;
  id v36[2];

  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 1);
  std::vector<EQKit::ILayout>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>((uint64_t *)this + 1, v4, *((const EQKit::ILayout **)a2 + 1), *((_QWORD *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  objc_msgSend(*(id *)this, "addObjectsFromArray:", *(_QWORD *)a2);
  v6 = (const EQKitLayoutRow *)*((_QWORD *)a2 + 9);
  if (v6 != (const EQKitLayoutRow *)((char *)a2 + 80))
  {
    v7 = (char **)((char *)this + 80);
    do
    {
      v8 = *v7;
      v9 = *((_DWORD *)v6 + 8);
      if (!*v7)
        goto LABEL_13;
      v10 = (char **)((char *)this + 80);
      do
      {
        v11 = *((_DWORD *)v8 + 8);
        v12 = v11 < v9;
        if (v11 >= v9)
          v13 = (char **)v8;
        else
          v13 = (char **)(v8 + 8);
        if (!v12)
          v10 = (char **)v8;
        v8 = *v13;
      }
      while (*v13);
      if (v10 == v7 || v9 < *((_DWORD *)v10 + 8))
      {
LABEL_13:
        v35 = *((_DWORD *)v6 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v36, (id *)v6 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)this + 72, &v35, (uint64_t)&v35);
        EQKit::ILayoutOffset::~ILayoutOffset(v36);
      }
      v14 = (const EQKitLayoutRow *)*((_QWORD *)v6 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(const EQKitLayoutRow **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (const EQKitLayoutRow *)*((_QWORD *)v6 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
    }
    while (v15 != (const EQKitLayoutRow *)((char *)a2 + 80));
  }
  std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>((uint64_t *)this + 12, *((_QWORD *)this + 13), *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  v17 = (_QWORD *)*((_QWORD *)a2 + 15);
  v18 = (_QWORD *)*((_QWORD *)a2 + 16);
  v34 = a2;
  if (v17 != v18)
  {
    v19 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3);
    v20 = (void **)((char *)this + 120);
    v21 = (_QWORD *)((char *)this + 136);
    v22 = (char *)*((_QWORD *)this + 16);
    do
    {
      v23 = *v17 + v19;
      if ((unint64_t)v22 >= *v21)
      {
        v25 = (char *)*v20;
        v26 = (v22 - (_BYTE *)*v20) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v28 = *v21 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 136, v29);
          v25 = (char *)*((_QWORD *)this + 15);
          v22 = (char *)*((_QWORD *)this + 16);
        }
        else
        {
          v30 = 0;
        }
        v31 = (uint64_t *)&v30[8 * v26];
        *v31 = v23;
        v24 = (char *)(v31 + 1);
        while (v22 != v25)
        {
          v32 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v31 = v32;
        }
        *((_QWORD *)this + 15) = v31;
        *((_QWORD *)this + 16) = v24;
        *((_QWORD *)this + 17) = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v22 = v23;
        v24 = v22 + 8;
      }
      *((_QWORD *)this + 16) = v24;
      ++v17;
      v22 = v24;
    }
    while (v17 != v18);
  }
  result = *((double *)v34 + 18);
  *((double *)this + 18) = result;
  return result;
}

void sub_2411C0CD4(_Unwind_Exception *a1)
{
  id *v1;

  EQKit::ILayoutOffset::~ILayoutOffset(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutRow::beginNestedRow(uint64_t this)
{
  ++*(_QWORD *)(this + 64);
  return this;
}

uint64_t EQKitLayoutRow::endNestedRow(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 64);
  if (v1)
    *(_QWORD *)(this + 64) = v1 - 1;
  return this;
}

void *EQKitLayoutRow::childNodeAtIndex(id *this, unint64_t a2)
{
  void *v4;

  if (objc_msgSend(*this, "count") <= a2)
    v4 = 0;
  else
    v4 = (void *)objc_msgSend(*this, "objectAtIndex:", a2);
  if (objc_msgSend(v4, "conformsToProtocol:", &unk_257105C10))
    return v4;
  else
    return 0;
}

uint64_t EQKitLayoutRow::overallLayout@<X0>(EQKitLayoutRow *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4;
  EQKitHBox *v6;
  uint64_t v7;
  int v8;
  _BYTE v9[56];

  EQKit::ILayout::ILayout((EQKit::ILayout *)a2, 0);
  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 56)
    return EQKit::ILayout::operator=((uint64_t)a2, v4);
  v6 = EQKitLayoutRow::newChildrenBox(this);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v9, &v6->super.super);
  EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v9);

  if (a2 + 1 != (uint64_t **)((char *)this + 72))
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(a2 + 1, *((_QWORD **)this + 9), (_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 1);
  v8 = 6;
  while (v7 != *((_QWORD *)this + 2))
  {
    if (v8 >= ((*(unsigned __int16 *)(v7 + 32) >> 10) & 7))
      v8 = (*(unsigned __int16 *)(v7 + 32) >> 10) & 7;
    v7 += 56;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v8);
}

void sub_2411C0E40(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKitHBox *EQKitLayoutRow::newChildrenBox(EQKitLayoutRow *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  EQKitHSpace *v14;
  EQKitHBox *v15;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = (v2 - v3) / 56;
  v6 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", v4);
  if (v2 != v3)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = (v5 - v6) >> 4;
    if (v4 <= 1)
      v12 = 1;
    else
      v12 = v4;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)this + 1) + v9))
        objc_msgSend(v7, "addObject:");
      if (v10 < v11)
      {
        v13 = *(double *)(*((_QWORD *)this + 4) + v8);
        if (v13 != 0.0)
        {
          v14 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v13);
          objc_msgSend(v7, "addObject:", v14);

        }
      }
      ++v10;
      v9 += 56;
      v8 += 16;
    }
    while (v12 != v10);
  }
  v15 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v7);

  return v15;
}

BOOL EQKitLayoutRow::isNewRowRequiredForStretching(EQKitLayoutRow *this)
{
  return *((_QWORD *)this + 1) != *((_QWORD *)this + 2) || *((_QWORD *)this + 12) != *((_QWORD *)this + 13);
}

void EQKitLayoutRow::determineVSize(EQKitLayoutRow *this, double *a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  EQKitHBox *v7;

  v7 = EQKitLayoutRow::newChildrenBox(this);
  -[EQKitCompoundBox height](v7, "height");
  *(_QWORD *)a2 = v5;
  -[EQKitCompoundBox depth](v7, "depth");
  *(_QWORD *)a3 = v6;

}

double EQKitLayoutRow::determineWidth(EQKitLayoutRow *this)
{
  EQKitHBox *v1;
  double v2;
  double v3;

  v1 = EQKitLayoutRow::newChildrenBox(this);
  -[EQKitCompoundBox width](v1, "width");
  v3 = v2;

  return v3;
}

void EQKitLayoutRow::resolveKerning(EQKitLayoutRow *this, const EQKit::Kerning::Manager *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  __int16 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v21;

  v21 = (_QWORD *)((char *)this + 32);
  if (*((_QWORD *)this + 4) == *((_QWORD *)this + 5))
  {
    v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
    std::vector<EQKitLayoutRow::Kerning>::resize((uint64_t)v21, v3);
    if (v3 >= 2)
    {
      v4 = 0;
      for (i = 1; i < v3; ++i)
      {
        v6 = *((_QWORD *)this + 1);
        v7 = v6 + 56 * v4;
        v9 = *(_WORD *)(v7 + 32);
        v8 = (unsigned __int16 *)(v7 + 32);
        if ((v9 & 0x200) == 0 && i < v3)
        {
          v10 = v6 + 56 * i + 32;
          while ((*(_WORD *)v10 & 0x200) != 0)
          {
            ++i;
            v10 += 56;
            if (v3 == i)
            {
              i = v3;
              goto LABEL_14;
            }
          }
          v11 = *(void **)(v6 + 56 * v4);
          v12 = *(void **)(v10 - 32);
          v13 = *MEMORY[0x24BDBEFB0];
          v14 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
          objc_msgSend(v11, "opticalAlignWidth");
          v16 = v6 + 56 * v4;
          if (*(double *)(v16 + 48) >= *(double *)(v10 + 8))
            v17 = *(double *)(v16 + 48);
          else
            v17 = *(double *)(v10 + 8);
          v18 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(a2, (*v8 >> 2) & 3, v11, *(_WORD *)v10 & 3, v12, v13, v14, v15, 0.0, v17);
          v19 = *v21 + 16 * v4;
          *(double *)v19 = v18;
          *(_QWORD *)(v19 + 8) = i;
        }
LABEL_14:
        v4 = i;
      }
    }
  }
}

void std::vector<EQKitLayoutRow::Kerning>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<EQKitLayoutRow::Kerning>::__append((void **)a1, a2 - v2);
  }
}

void EQKitLayoutRow::resolveLayouts(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *a2;
  *a2 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[1];
  a2[1] = v5;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2[2];
  a2[2] = v6;
}

void EQKitLayoutRow::beginAlignmentGroup(_QWORD *a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  _BYTE v18[24];

  if (a1[1] == a1[2] || a1[15] != a1[16])
  {
    EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v18, a2);
    v3 = a1[13];
    if (v3 >= a1[14])
    {
      v4 = std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(a1 + 12, (uint64_t)v18);
    }
    else
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(a1[13], (uint64_t)v18);
      v4 = v3 + 24;
      a1[13] = v3 + 24;
    }
    a1[13] = v4;
    v5 = a1[17];
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3);
    v7 = (uint64_t *)a1[16];
    if ((unint64_t)v7 >= v5)
    {
      v9 = (uint64_t *)a1[15];
      v10 = v7 - v9;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = v5 - (_QWORD)v9;
      v12 = (uint64_t)(v5 - (_QWORD)v9) >> 2;
      if (v12 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 17), v13);
        v9 = (uint64_t *)a1[15];
        v7 = (uint64_t *)a1[16];
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v6;
      v8 = v15 + 1;
      while (v7 != v9)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      a1[15] = v15;
      a1[16] = v8;
      a1[17] = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v7 = v6;
      v8 = v7 + 1;
    }
    a1[16] = v8;
  }
}

void sub_2411C1394(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::buildAlignmentGroups(EQKitLayoutRow *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  EQKitAlignmentGroup *v11;
  uint64_t v12;
  uint64_t v13;
  EQKitBox **v14;
  EQKitBox *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  id v21[2];
  id v22[2];

  v1 = *((_QWORD *)this + 13) - *((_QWORD *)this + 12);
  if (v1)
  {
    v3 = 0;
    v4 = (unsigned __int128)(v1 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v5 = (v4 >> 2) + ((unint64_t)v4 >> 63);
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = (v4 >> 2) + ((unint64_t)v4 >> 63);
    v20 = v6;
    do
    {
      v7 = v3;
      v8 = *((_QWORD *)this + 15);
      if (++v3 >= v5)
        v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      else
        v9 = *(_QWORD *)(v8 + 8 * v3);
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (v10 < v9)
      {
        v11 = (EQKitAlignmentGroup *)(*((_QWORD *)this + 12) + 24 * v7);
        v12 = 56 * v10;
        v13 = 16 * v10;
        do
        {
          v14 = (EQKitBox **)(*((_QWORD *)this + 1) + v12);
          v15 = *v14;
          EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v22, 0, 0.0);
          if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 3, v22))
          {
            v16 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v22, v15);
            EQKitAlignmentGroup::saveAlignmentPoint(v11, v16);
          }
          if (EQKitAlignmentGroup::needsDecimalAlignmentPoint(v11))
          {
            EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v21, 0, 0.0);
            if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 2, v21))
            {
              v17 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v21, v15);
              EQKitAlignmentGroup::saveAlignmentPoint(v11, v17);
            }
            EQKit::ILayoutOffset::~ILayoutOffset(v21);
          }
          -[EQKitBox width](v15, "width");
          EQKitAlignmentGroup::increaseWidth(v11, v18);
          v19 = *((_QWORD *)this + 4);
          if (*(_QWORD *)(v19 + v13 + 8) < v9)
            EQKitAlignmentGroup::increaseWidth(v11, *(double *)(v19 + v13));
          EQKit::ILayoutOffset::~ILayoutOffset(v22);
          ++v10;
          v12 += 56;
          v13 += 16;
        }
        while (v9 != v10);
      }
    }
    while (v3 != v20);
  }
}

void sub_2411C155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::addToAlignmentContext(EQKitLayoutRow *this, EQKitGroupAlignmentContext *a2)
{
  EQKitGroupAlignmentContext::addRow((uint64_t *)a2, (uint64_t *)this + 12);
}

void EQKitLayoutRow::overallLayoutWithAlignmentContext(EQKitLayoutRow *this@<X0>, const EQKitGroupAlignmentContext *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  id v6;
  unint64_t i;
  uint64_t v8;
  id v9;
  EQKitHSpace *v10;
  const EQKitAlignmentGroup *v11;
  EQKitHSpace *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  EQKitHSpace *v19;
  EQKitHSpace *v20;
  EQKitHBox *v21;
  EQKitHSpace *v22;
  EQKitHBox *v23;
  uint64_t v24;
  uint64_t *v25[7];

  EQKit::ILayout::ILayout(a3, 0);
  if (*((_QWORD *)this + 12) == *((_QWORD *)this + 13))
  {
    EQKitLayoutRow::overallLayout(this, v25);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v25);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v25);
  }
  else
  {
    v24 = (uint64_t)a3;
    v6 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    for (i = 0; ; i = v13)
    {
      v8 = *((_QWORD *)this + 12);
      if (i >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 13) - v8) >> 3))
        break;
      v9 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v10 = [EQKitHSpace alloc];
      v11 = (const EQKitAlignmentGroup *)(v8 + 24 * i);
      EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(a2, v11, i);
      v12 = -[EQKitHSpace initWithWidth:](v10, "initWithWidth:");
      objc_msgSend(v9, "addObject:", v12);

      v13 = i + 1;
      v14 = *((_QWORD *)this + 15);
      if (i + 1 >= (*((_QWORD *)this + 16) - v14) >> 3)
        v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      else
        v15 = *(_QWORD *)(v14 + 8 * v13);
      v16 = *(_QWORD *)(v14 + 8 * i);
      v17 = v15 - v16;
      if (v15 > v16)
      {
        v18 = 56 * v16;
        do
        {
          objc_msgSend(v9, "addObject:", *(_QWORD *)(*((_QWORD *)this + 1) + v18), v24);
          v18 += 56;
          --v17;
        }
        while (v17);
      }
      v19 = [EQKitHSpace alloc];
      EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(a2, v11, i);
      v20 = -[EQKitHSpace initWithWidth:](v19, "initWithWidth:");
      objc_msgSend(v9, "addObject:", v20);

      v21 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v9);
      objc_msgSend(v6, "addObject:", v21);

    }
    v22 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3) - 1));
    objc_msgSend(v6, "addObject:", v22);

    v23 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v25, &v23->super.super);
    EQKit::ILayout::operator=(v24, (uint64_t)v25);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v25);
    if ((EQKitLayoutRow *)(v24 + 8) != (EQKitLayoutRow *)((char *)this + 72))
      std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(v24 + 8), *((_QWORD **)this + 9), (_QWORD *)this + 10);

  }
}

void sub_2411C182C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<EQKitLayoutRow::Kerning>::__init_with_size[abi:ne180100]<EQKitLayoutRow::Kerning*,EQKitLayoutRow::Kerning*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2411C18DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__init_with_size[abi:ne180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a4);
    std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((uint64_t)a1, a2, a3);
  }
}

void sub_2411C1948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v4 + v7, a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_2411C19CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>(uint64_t *a1, const EQKit::ILayout *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  EQKit::ILayout *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (EQKit::ILayout *)&v10[56 * v4];
  v16 = &v10[56 * v9];
  EQKit::ILayout::ILayout(v14, a2);
  v15 = (char *)v14 + 56;
  std::vector<EQKit::ILayout>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2411C1ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  EQKit::ILayout *v12;

  v10 = 0;
  v11 = a7 - 56;
  while (a3 + v10 != a5)
  {
    v12 = (EQKit::ILayout *)(v11 + v10);
    v10 -= 56;
    EQKit::ILayout::ILayout(v12, (const EQKit::ILayout *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<EQKit::ILayout>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    EQKit::ILayout::~ILayout((EQKit::ILayout *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<EQKit::ILayout>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>(uint64_t *a1, uint64_t a2, const EQKit::ILayout *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const EQKit::ILayout *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  EQKit::ILayout *v22;
  uint64_t v23;
  EQKit::ILayout *v24;
  _QWORD v26[2];
  EQKit::ILayout *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = (uint64_t)a3 + 56 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout const*,EQKit::ILayout const*,EQKit::ILayout*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<EQKit::ILayout>::__move_range((uint64_t)a1, v5, v12, v5 + 56 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>((uint64_t)v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::ILayout>>(v9, v18);
      else
        v19 = 0;
      v22 = (EQKit::ILayout *)&v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[56 * v18];
      v23 = 56 * a5;
      v24 = (EQKit::ILayout *)((char *)v22 + 56 * a5);
      do
      {
        EQKit::ILayout::ILayout(v22, v7);
        v22 = (EQKit::ILayout *)((char *)v22 + 56);
        v7 = (const EQKit::ILayout *)((char *)v7 + 56);
        v23 -= 56;
      }
      while (v23);
      v27 = v24;
      v5 = std::vector<EQKit::ILayout>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_2411C1E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<EQKit::ILayout>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  EQKit::ILayout *v8;
  const EQKit::ILayout *v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (EQKit::ILayout *)v6;
  if (v7 < a3)
  {
    v10 = (const EQKit::ILayout *)(a2 + v6 - a4);
    v8 = *(EQKit::ILayout **)(a1 + 8);
    do
    {
      EQKit::ILayout::ILayout(v8, v10);
      v10 = (const EQKit::ILayout *)((char *)v10 + 56);
      v8 = (EQKit::ILayout *)((char *)v8 + 56);
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(a2, v7, v6);
}

void sub_2411C1ED0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>,std::reverse_iterator<EQKit::ILayout*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout const*,EQKit::ILayout const*,EQKit::ILayout*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKit::ILayout::ILayout((EQKit::ILayout *)(a4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2411C1FE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 56;
      a3 -= 56;
      EQKit::ILayout::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      EQKit::ILayout::operator=(a3, v4);
      v4 += 56;
      a3 += 56;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKit::ILayout>,EQKit::ILayout*,EQKit::ILayout*,EQKit::ILayout*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKit::ILayout::ILayout((EQKit::ILayout *)(a4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2411C211C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:ne180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 3)))
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        std::vector<EQKitAlignmentGroup>::__construct_at_end<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>((uint64_t)a1, v21, a4);
        if (v20 < 1)
          return v5;
      }
      std::vector<EQKitAlignmentGroup>::__move_range((uint64_t)a1, v5, v12, v5 + 24 * a5);
      if (v21 != v7)
      {
        v22 = v5;
        do
        {
          v23 = *(_OWORD *)v7;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v7 += 24;
        }
        while (v7 != v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v33 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      else
        v19 = 0;
      v24 = (uint64_t)&v19[24 * v15];
      __p = v19;
      v30 = v24;
      v31 = v24;
      v32 = &v19[24 * v18];
      v25 = 3 * a5;
      v26 = v24 + 24 * a5;
      v27 = 8 * v25;
      do
      {
        EQKitAlignmentGroup::EQKitAlignmentGroup(v24, v7);
        v24 += 24;
        v7 += 24;
        v27 -= 24;
      }
      while (v27);
      v31 = v26;
      v5 = std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p, v5);
      if (v31 != v30)
        v31 = (v31 - v30 - 24) % 0x18uLL + v30;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_2411C2354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__construct_at_end<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v4 + v7, a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_2411C2418(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 std::vector<EQKitAlignmentGroup>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  __n128 result;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 - a4;
  v9 = a2 + v7 - a4;
  if (v9 >= a3)
  {
    v11 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    do
    {
      result.n128_f64[0] = EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v9);
      v9 += 24;
      v11 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v11;
  if (v7 != a4)
  {
    v13 = (__n128 *)(v7 - 24);
    v14 = 8 * (v8 >> 3);
    v15 = a2 - 24;
    do
    {
      result = *(__n128 *)(v15 + v14);
      v13[1].n128_u64[0] = *(_QWORD *)(v15 + v14 + 16);
      *v13 = result;
      v13 = (__n128 *)((char *)v13 - 24);
      v14 -= 24;
    }
    while (v14);
  }
  return result;
}

void sub_2411C24E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = *a1;
  v8 = v6;
  if (v7 != a3)
  {
    v9 = a3;
    v8 = a2[1];
    do
    {
      v9 -= 24;
      EQKitAlignmentGroup::EQKitAlignmentGroup(v8 - 24, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = a1[1];
  v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v3);
      v3 += 24;
      v11 += 24;
    }
    while (v3 != v10);
    v8 = a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t **std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          EQKit::ILayoutOffset::operator=((uint64_t)(v8 + 5), (uint64_t)(v9 + 5));
          std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(v5, (uint64_t)v16);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2411C271C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(_QWORD *)a1, *(id **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(_QWORD *)a1, (id *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, a2[1]);
    EQKit::ILayoutOffset::~ILayoutOffset(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v8[3];

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(a1, a2, (uint64_t)v8);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v8[0] + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v6;
}

EQKit::ILayoutOffset *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  EQKit::ILayoutOffset *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)(v6 + 10), (id *)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2411C2978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      EQKit::ILayoutOffset::~ILayoutOffset(v2 + 5);
    operator delete(v2);
  }
}

void std::vector<EQKitLayoutRow::Kerning>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[2 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0x7FFFFFFFFFFFFFFFLL;
        v7 += 2;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

uint64_t std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v14, a2);
  v15 = v14 + 24;
  std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p);
  v11 = a1[1];
  if (v15 != v14)
    v15 = &v14[(v15 - v14 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_2411C2C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 24;
    EQKitAlignmentGroup::EQKitAlignmentGroup(v6 - 24, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_2411C2D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v1, *(id **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v4;
        v8 = *(_DWORD *)(v4 + 32);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

EQKit::ILayoutOffset *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  EQKit::ILayoutOffset *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)(v6 + 10), (id *)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2411C3168(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

uint64_t EQKitLayoutTable::resolveColumnAlignment(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a4[1] - *a4 != 4 || (result = *(unsigned int *)*a4, !(_DWORD)result))
  {
    v6 = *a3;
    v7 = a3[1];
    if (*a3 == v7)
      goto LABEL_8;
    v8 = ((v7 - v6) >> 2) - 1;
    if (v8 >= a5)
      v8 = a5;
    result = *(unsigned int *)(v6 + 4 * v8);
    if (!(_DWORD)result)
    {
LABEL_8:
      v9 = *a2;
      v10 = a2[1];
      if (*a2 == v10)
        return 2;
      v11 = ((v10 - v9) >> 2) - 1;
      if (v11 >= a5)
        v11 = a5;
      result = *(unsigned int *)(v9 + 4 * v11);
      if (!(_DWORD)result)
        return 2;
    }
  }
  return result;
}

uint64_t EQKitLayoutTable::resolveRowAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int *v5;
  uint64_t result;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *(unsigned int **)(a4 + 24);
  if (*(_QWORD *)(a4 + 32) - (_QWORD)v5 != 4 || (result = *v5, !(_DWORD)result))
  {
    v7 = *(unsigned int **)(a3 + 24);
    if (*(_QWORD *)(a3 + 32) - (_QWORD)v7 != 4 || (result = *v7, !(_DWORD)result))
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      if (v8 == v9)
        return 4;
      v10 = ((v9 - v8) >> 2) - 1;
      if (v10 >= a5)
        v10 = a5;
      result = *(unsigned int *)(v8 + 4 * v10);
      if (!(_DWORD)result)
        return 4;
    }
  }
  return result;
}

void EQKitLayoutTable::resolveAlignmentGroups(EQKitLayoutTable *this, uint64_t a2, uint64_t a3)
{
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[56];
  _OWORD v15[3];

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      memset(v15, 0, sizeof(v15));
      if (a2)
      {
        v7 = 0;
        v8 = a2;
        do
        {
          v9 = *(_QWORD *)(*((_QWORD *)this + 8) + v7 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(_QWORD *)(*((_QWORD *)this + 8) + v7 + 64) - v9) >> 3))
            EQKitLayoutRow::addToAlignmentContext((EQKitLayoutRow *)(v9 + 280 * i + 64), (EQKitGroupAlignmentContext *)v15);
          v7 += 80;
          --v8;
        }
        while (v8);
        v10 = 0;
        v11 = a2;
        do
        {
          v12 = *((_QWORD *)this + 8) + v10;
          v13 = *(_QWORD *)(v12 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(_QWORD *)(v12 + 64) - v13) >> 3))
          {
            EQKitLayoutRow::overallLayoutWithAlignmentContext((EQKitLayoutRow *)(v13 + 280 * i + 64), (const EQKitGroupAlignmentContext *)v15, (EQKit::ILayout *)v14);
            EQKit::ILayout::operator=(v13 + 280 * i + 224, (uint64_t)v14);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v14);
          }
          v10 += 80;
          --v11;
        }
        while (v11);
      }
      EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)v15);
    }
  }
}

void sub_2411C33A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::relationalOperatorOffset(EQKitLayoutTable *this@<X0>, EQKitBox **a2@<X1>, EQKit::ILayoutOffset *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  double v9;
  int v10;
  unint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  double v15;
  EQKit::ILayoutOffset *v16;
  id v17[2];

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 == v6)
  {
    EQKit::ILayoutOffset::ILayoutOffset(a3, 0, 0.0);
  }
  else
  {
    v16 = a3;
    v8 = 0;
    v9 = 1.79769313e308;
    do
    {
      v10 = 0;
      v11 = 0;
      for (i = 224; ; i += 280)
      {
        v13 = v5 == v6 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 3);
        if (((v11 < v13) & (v10 ^ 1)) == 0)
          break;
        v14 = *(_QWORD *)(v6 + 80 * v8 + 56) + i;
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, 0, 0.0);
        if (EQKit::ILayout::getOffsetOfKind(v14, 1, v17))
        {
          v15 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v17, *a2);
          if (v9 == 1.79769313e308 || vabdd_f64(v15, v9) < 0.00100000005)
          {
            v10 = 0;
            v9 = v15;
          }
          else
          {
            v10 = 1;
            v9 = 1.79769313e308;
          }
        }
        else
        {
          v10 = 0;
        }
        EQKit::ILayoutOffset::~ILayoutOffset(v17);
        ++v11;
        v6 = *((_QWORD *)this + 8);
        v5 = *((_QWORD *)this + 9);
      }
      ++v8;
    }
    while (!((v8 >= 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4)) | v10 & 1));
    EQKit::ILayoutOffset::ILayoutOffset(v16, 0, 0.0);
    if (v9 != 1.79769313e308)
    {
      EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, *a2, v9);
      EQKit::ILayoutOffset::operator=((uint64_t)v16, (uint64_t)v17);
      EQKit::ILayoutOffset::~ILayoutOffset(v17);
    }
  }
}

void sub_2411C35B8(_Unwind_Exception *a1, uint64_t a2, id *a3, ...)
{
  va_list va;

  va_start(va, a3);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  EQKit::ILayoutOffset::~ILayoutOffset(a3);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutTable::layoutTr@<X0>(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout *result;
  void *v6;
  EQKit::ILayout *v7;
  EQKit::ILayout *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id obj;
  uint64_t v20;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  result = EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    v6 = (void *)objc_msgSend(a2, "schemataChildren", a3);
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    result = (EQKit::ILayout *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    v7 = result;
    if (result)
    {
      v20 = *(_QWORD *)v32;
      obj = v6;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v32 != v20)
            objc_enumerationMutation(obj);
          v9 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v8);
          v10 = *(_QWORD *)(a1 + 72);
          EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)v26);
          v11 = *(_QWORD *)(v10 - 16);
          if (v11 >= *(_QWORD *)(v10 - 8))
          {
            v12 = std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>((uint64_t *)(v10 - 24), (const EQKitLayoutTable::LayoutCell *)v26);
          }
          else
          {
            EQKitLayoutTable::LayoutCell::LayoutCell(*(EQKitLayoutTable::LayoutCell **)(v10 - 16), (const EQKitLayoutTable::LayoutCell *)v26);
            v12 = v11 + 280;
            *(_QWORD *)(v10 - 16) = v11 + 280;
          }
          *(_QWORD *)(v10 - 16) = v12;
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v30);
          EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)&v29);
          if (*((_QWORD *)&v27 + 1))
          {
            *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
            operator delete(*((void **)&v27 + 1));
          }
          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) - 16);
          v22 = 0;
          v23 = &v22;
          v24 = 0x2020000000;
          v25 = 0;
          v14 = *(_QWORD *)(a1 + 8);
          v15 = *(unsigned __int8 *)(a1 + 88);
          v21[0] = MEMORY[0x24BDAC760];
          v21[1] = 3221225472;
          v21[2] = ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke;
          v21[3] = &unk_25112A938;
          v21[5] = &v22;
          v21[6] = a1;
          v21[4] = v9;
          EQKitLayoutManager::layoutIntoRow(v14, (EQKitLayoutRow *)(v13 - 216), v9, 0, v15, (uint64_t)v21);
          v27 = 0u;
          v28 = 0u;
          *(_OWORD *)v26 = 0u;
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 616);
          v35 = v9;
          v36 = 3;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v16, v16 + 248, (uint64_t)&v35, (char *)&v27 + 8);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 616);
          v35 = v9;
          v36 = 4;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v17, v17 + 272, (uint64_t)&v35, (char *)v26);
          if ((void **)(v13 - 280) != v26)
          {
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 280), (char *)v26[0], (uint64_t)v26[1], ((char *)v26[1] - (char *)v26[0]) >> 2);
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 256), *((char **)&v27 + 1), v28, (uint64_t)(v28 - *((_QWORD *)&v27 + 1)) >> 2);
          }
          *(_QWORD *)(v13 - 224) = v23[3];
          if (*((_QWORD *)&v27 + 1))
          {
            *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
            operator delete(*((void **)&v27 + 1));
          }
          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          _Block_object_dispose(&v22, 8);
          v8 = (EQKit::ILayout *)((char *)v8 + 1);
        }
        while (v7 != v8);
        result = (EQKit::ILayout *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
        v7 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_2411C38C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::ILayout *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  EQKit::ILayout::~ILayout(a9);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::LayoutCell::~LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  void *v2;
  void *v3;

  EQKit::ILayout::~ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  double v4;

  if (a1[4] == a2)
  {
    v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1[6] + 8));
    if ((*(_BYTE *)(v3 + 120) & 2) != 0)
      v4 = *(double *)(v3 + 136);
    else
      v4 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v3);
    *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
  }
}

void EQKitLayoutTable::Properties::~Properties(EQKitLayoutTable::Properties *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void EQKitLayoutTable::generateTableLayout(EQKitLayoutTable *this, NSArray *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  void *v41[2];
  void *__p[2];
  __int128 v43;
  _BYTE v44[56];
  void *v45[2];
  void *v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v51 != v4)
          objc_enumerationMutation(a2);
        v6 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * i);
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)v46 = 0u;
        v47 = 0u;
        *(_OWORD *)v45 = 0u;
        v7 = (_QWORD *)*((_QWORD *)this + 9);
        if ((unint64_t)v7 >= *((_QWORD *)this + 10))
        {
          v9 = std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>((uint64_t *)this + 8, (const EQKitLayoutTable::LayoutRow *)v45);
        }
        else
        {
          *v7 = 0;
          v7[1] = 0;
          v7[2] = 0;
          std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(v7, v45[0], (uint64_t)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          v7[3] = 0;
          v7[4] = 0;
          v7[5] = 0;
          std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>(v7 + 3, v46[1], v47, (uint64_t)(v47 - (unint64_t)v46[1]) >> 2);
          v8 = v48;
          v7[7] = 0;
          v7[6] = v8;
          v7[8] = 0;
          v7[9] = 0;
          std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:ne180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(v7 + 7, *((uint64_t *)&v48 + 1), v49, 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v49 - *((_QWORD *)&v48 + 1)) >> 3));
          v9 = (uint64_t)(v7 + 10);
          *((_QWORD *)this + 9) = v7 + 10;
        }
        *((_QWORD *)this + 9) = v9;
        EQKitLayoutManager::layoutBox(*((EQKitLayoutManager **)this + 1), v6, 0, (EQKit::ILayout *)v44);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v44);
        *(_OWORD *)__p = 0u;
        v43 = 0u;
        *(_OWORD *)v41 = 0u;
        v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 616);
        v54 = v6;
        v55 = 3;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 248, (uint64_t)&v54, (char *)&__p[1]);
        v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 616);
        v54 = v6;
        v55 = 4;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v11, v11 + 272, (uint64_t)&v54, (char *)v41);
        if ((void **)((char *)this + 16) != v41)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 16, (char *)v41[0], (uint64_t)v41[1], ((char *)v41[1] - (char *)v41[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 40, (char *)__p[1], v43, (uint64_t)(v43 - (unint64_t)__p[1]) >> 2);
        }
        v12 = (char *)(*((_QWORD *)this + 9) - 80);
        if (v12 != (char *)v41)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v12, (char *)v41[0], (uint64_t)v41[1], ((char *)v41[1] - (char *)v41[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v12 + 24, (char *)__p[1], v43, (uint64_t)(v43 - (unint64_t)__p[1]) >> 2);
        }
        if (__p[1])
        {
          *(void **)&v43 = __p[1];
          operator delete(__p[1]);
        }
        if (v41[0])
        {
          v41[1] = v41[0];
          operator delete(v41[0]);
        }
        v41[0] = (char *)&v48 + 8;
        std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
        if (v46[1])
        {
          *(void **)&v47 = v46[1];
          operator delete(v46[1]);
        }
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
      }
      v3 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
    }
    while (v3);
  }
  v14 = *((_QWORD *)this + 8);
  v13 = *((_QWORD *)this + 9);
  v15 = (v13 - v14) / 80;
  v16 = 0;
  if (v13 != v14)
  {
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = (v13 - v14) / 80;
    v18 = (_QWORD *)(v14 + 64);
    do
    {
      if (v16 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v18 - *(v18 - 1)) >> 3))
        v16 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v18 - *(v18 - 1)) >> 3);
      v18 += 10;
      --v17;
    }
    while (v17);
  }
  EQKitLayoutTable::resolveAlignmentGroups(this, (v13 - v14) / 80, v16);
  v45[0] = 0;
  v45[1] = 0;
  v46[0] = 0;
  v41[0] = 0;
  std::vector<double>::resize((uint64_t)v45, v16, v41);
  if (v13 != v14)
  {
    v19 = 0;
    if (v15 <= 1)
      v20 = 1;
    else
      v20 = v15;
    v21 = *((_QWORD *)this + 8);
    do
    {
      v22 = v21 + 80 * v19;
      v23 = *(_QWORD *)(v22 + 56);
      v24 = *(_QWORD *)(v22 + 64);
      std::vector<EQKitLayoutTable::LayoutCell>::resize((uint64_t *)(v22 + 56), v16);
      v21 = *((_QWORD *)this + 8);
      v25 = v21 + 80 * v19;
      *(_QWORD *)(v25 + 48) = 0;
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0xAF8AF8AF8AF8AF8BLL * ((v24 - v23) >> 3);
        do
        {
          if (v27 >= v28)
          {
            v29 = *(_QWORD *)(v21 + 80 * v19 + 56);
            if (v29 + v26 != v25)
            {
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v29 + v26), *(char **)v25, *(_QWORD *)(v25 + 8), (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2);
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v29 + v26 + 24), *(char **)(v25 + 24), *(_QWORD *)(v25 + 32), (uint64_t)(*(_QWORD *)(v25 + 32) - *(_QWORD *)(v25 + 24)) >> 2);
              v21 = *((_QWORD *)this + 8);
            }
          }
          v30 = *(void **)(*(_QWORD *)(v21 + 80 * v19 + 56) + v26 + 224);
          objc_msgSend(v30, "width");
          if (v31 < *((double *)v45[0] + v27))
            v31 = *((double *)v45[0] + v27);
          *((double *)v45[0] + v27) = v31;
          objc_msgSend(v30, "layoutVSize");
          v21 = *((_QWORD *)this + 8);
          v33 = v21 + 80 * v19;
          if (v32 < *(double *)(v33 + 48))
            v32 = *(double *)(v33 + 48);
          *(double *)(v33 + 48) = v32;
          ++v27;
          v26 += 280;
        }
        while (v16 != v27);
      }
      ++v19;
    }
    while (v19 != v20);
    v34 = 0;
    v35 = (uint64_t *)v45[0];
    do
    {
      if (v16)
      {
        v36 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 80 * v34 + 56) + 48);
        v37 = v35;
        v38 = v16;
        do
        {
          v39 = *v37++;
          *v36 = v39;
          v36 += 35;
          --v38;
        }
        while (v38);
      }
      ++v34;
    }
    while (v34 != v20);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
}

void sub_2411C3EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::LayoutRow::~LayoutRow(EQKitLayoutTable::LayoutRow *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAF8AF8AF8AF8AF8BLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<EQKitLayoutTable::LayoutCell>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 280 * a2;
    while (v3 != v7)
    {
      v3 -= 280;
      std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(v3);
    }
    a1[1] = v7;
  }
}

void EQKitLayoutTable::generateRowBox(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  unint64_t v7;
  char v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unsigned int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  EQKitVShift *v41;
  EQKitVShift *v42;
  unint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  double *v50;
  EQKitHSpace *v51;
  EQKitHBox *v52;
  uint64_t v53;
  _BYTE v56[56];

  v53 = (uint64_t)a5;
  EQKit::ILayout::ILayout(a5, 0);
  v7 = 0;
  v8 = 0;
  v9 = 0.0;
  v10 = 56;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  while (1)
  {
    v15 = a1[8];
    v16 = a1[9] == v15 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v15 + 64) - *(_QWORD *)(v15 + 56)) >> 3);
    if (v7 >= v16)
      break;
    v17 = (void *)objc_msgSend(a2, "objectAtIndex:", v7, v53);
    v18 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v17, (uint64_t)(a1 + 2), a1[8] + 80 * a3, *(_QWORD *)(a1[8] + 80 * a3 + 56) + v10 - 56, a3);
    if (v18 <= 5)
    {
      if (((1 << v18) & 0x2A) != 0)
      {
        objc_msgSend(v17, "layoutVSize");
        if (v14 < v19)
          v14 = v19;
      }
      else if (((1 << v18) & 0x14) != 0)
      {
        objc_msgSend(v17, "layoutHeight");
        v21 = v20;
        objc_msgSend(v17, "layoutDepth");
        if (v13 < v21)
          v13 = v21;
        if (v12 < v22)
          v12 = v22;
        v23 = *(double *)(*(_QWORD *)(a1[8] + 80 * a3 + 56) + v10);
        if ((v8 & (v9 < v23)) == 0)
          v9 = *(double *)(*(_QWORD *)(a1[8] + 80 * a3 + 56) + v10);
        if (v11 < v23)
          v11 = *(double *)(*(_QWORD *)(a1[8] + 80 * a3 + 56) + v10);
        v8 = 1;
      }
    }
    ++v7;
    v10 += 280;
  }
  if (v14 <= 0.0 && v13 <= 0.0 && v12 <= 0.0)
    return;
  if (v14 == 0.0)
  {
    v14 = v12 + v13;
  }
  else if (v13 == 0.0 && v12 == 0.0)
  {
    v12 = v14 * 0.5;
    v13 = v14 * 0.5;
  }
  else if (v12 + v13 <= v14)
  {
    if (v12 + v13 < v14)
    {
      v24 = (v14 - (v12 + v13)) * 0.5;
      v13 = v13 + v24;
      v12 = v12 + v24;
    }
  }
  else
  {
    v14 = v12 + v13;
  }
  if (v14 == v12 + v13)
    v25 = v14;
  else
    v25 = v12 + v13;
  v26 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v27 = 0;
  v28 = 0;
  v29 = v9 + (v11 - v9) * 0.5;
  for (i = 56; ; i += 280)
  {
    v31 = a1[8];
    v32 = a1[9] == v31 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v31 + 64) - *(_QWORD *)(v31 + 56)) >> 3);
    if (v28 >= v32)
      break;
    v33 = (void *)objc_msgSend(a2, "objectAtIndex:", v28, v53);
    v34 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v33, (uint64_t)(a1 + 2), a1[8] + 80 * a3, *(_QWORD *)(a1[8] + 80 * a3 + 56) + i - 56, a3);
    objc_msgSend(v33, "layoutDepth");
    v36 = v35;
    objc_msgSend(v33, "layoutVSize");
    v38 = v13 + v36 + 0.0;
    switch(v34)
    {
      case 1:
        v38 = v38 - v37;
        break;
      case 2:
        v39 = *(double *)(*(_QWORD *)(a1[8] + 80 * a3 + 56) + i);
        v40 = v29 + v38 - v13 - v36;
        goto LABEL_46;
      case 3:
        v40 = v38 - v25 * 0.5;
        v39 = v37 * -0.5;
LABEL_46:
        v38 = v40 + v39;
        break;
      case 4:
        v38 = v38 - v13 - v36;
        break;
      case 5:
        v38 = v38 - v25;
        break;
      default:
        break;
    }
    if (v38 == 0.0)
      v41 = v33;
    else
      v41 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v33, v38);
    v42 = v41;
    objc_msgSend(v26, "addObject:", v41);

    v43 = v28 + 1;
    v44 = a1[8];
    if (a1[9] != v44 && v43 < 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v44 + 64) - *(_QWORD *)(v44 + 56)) >> 3))
    {
      EQKitLayoutManager::lengthForMetric(a1[1], 15);
      v46 = v45;
      v48 = *a4;
      v47 = a4[1];
      if (v28 < (v47 - *a4) >> 4)
      {
        v49 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1[1]);
        v50 = (double *)(v48 + v27);
        goto LABEL_58;
      }
      if (v47 != v48)
      {
        v49 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1[1]);
        v50 = (double *)(v47 - 16);
LABEL_58:
        v46 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v50, v49, v46);
      }
      v51 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v46);
      objc_msgSend(v26, "addObject:", v51);

    }
    v27 += 16;
    v28 = v43;
  }
  if (objc_msgSend(v26, "count"))
  {
    v52 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v26);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v56, &v52->super.super);
    EQKit::ILayout::operator=(v53, (uint64_t)v56);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v56);

  }
}

void sub_2411C452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::ILayout *a9, uint64_t a10, uint64_t a11, char a12)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  EQKit::ILayout::~ILayout(a9);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::generateTableBox(EQKitLayoutTable *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  const __CTFont *v8;
  double XHeight;
  __n128 v10;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *i;
  int v19;
  EQKitLayoutManager *v20;
  uint64_t v21;
  unint64_t v22;
  EQKitHSpace *v23;
  EQKitHSpace *v24;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  EQKitBox *p_super;
  uint64_t v31;
  int v32;
  double v33;
  EQKitVSpace *v34;
  EQKitOffsetVBox *v35;
  EQKitLayoutManager *v36;
  uint64_t v37;
  EQKitVBox *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  EQKit::ILayout *v44;
  id v45;
  id v46;
  _DWORD v47[14];
  id v48;
  int v49;
  void *__p;
  _QWORD *v51;
  char *v52;

  v46 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v45 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v4 = EQKitLayoutManager::layoutContext(*((EQKitLayoutManager **)this + 1));
  v5 = v4;
  v44 = a2;
  if ((*(_BYTE *)(v4 + 120) & 2) != 0)
    v6 = *(double *)(v4 + 136);
  else
    v6 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v4);
  v7 = EQKitLayoutManager::fontCollection(*((id **)this + 1));
  v8 = (const __CTFont *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 72))(v7, v5 + 8);
  XHeight = CTFontGetXHeight(v8);
  CFRelease(v8);
  v11 = *(_QWORD *)(v5 + 88);
  if ((*(_BYTE *)(v5 + 120) & 1) != 0)
    v10.n128_u64[0] = *(_QWORD *)(v5 + 128);
  else
    v10.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v5);
  v12 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v11 + 56))(v11, 15, v5 + 8, v10);
  if (XHeight < v12)
    XHeight = v12;
  __p = 0;
  v51 = 0;
  v52 = 0;
  v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)&v52, 1uLL);
  v15 = &v13[16 * v14];
  *(_DWORD *)v13 = 3;
  *((_QWORD *)v13 + 1) = 0x3FE999999999999ALL;
  v16 = v13 + 16;
  v17 = __p;
  for (i = v51; i != v17; *((_QWORD *)v13 + 1) = i[1])
  {
    v19 = *((_DWORD *)i - 4);
    i -= 2;
    *((_DWORD *)v13 - 4) = v19;
    v13 -= 16;
  }
  __p = v13;
  v51 = v16;
  v52 = v15;
  if (v17)
    operator delete(v17);
  v51 = v16;
  v20 = (EQKitLayoutManager *)*((_QWORD *)this + 1);
  v21 = *((_QWORD *)v20 + 77);
  v48 = (id)EQKitLayoutManager::currentNode(v20);
  v49 = 46;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(v21, v21 + 56, (uint64_t)&v48, &__p);
  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 8))
  {
    v22 = 0;
    do
    {
      v23 = (EQKitHSpace *)objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v24 = v23;
      v25 = 0;
      for (j = 0; ; ++j)
      {
        v27 = *((_QWORD *)this + 8);
        v28 = *((_QWORD *)this + 9) == v27
            ? 0
            : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v27 + 64) - *(_QWORD *)(v27 + 56)) >> 3);
        if (j >= v28)
          break;
        v29 = *(_QWORD *)(v27 + 80 * v22 + 56);
        p_super = *(EQKitBox **)(v29 + v25 + 224);
        if (!p_super)
        {
          v23 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", 0.0);
          p_super = &v23->super;
          v27 = *((_QWORD *)this + 8);
          v29 = *(_QWORD *)(v27 + 80 * v22 + 56);
        }
        v31 = v29 + v25;
        v32 = EQKitLayoutTable::resolveColumnAlignment((uint64_t)v23, (uint64_t *)this + 2, (uint64_t *)(v27 + 80 * v22), (char **)(v29 + v25), j);
        v33 = *(double *)(v31 + 48);
        EQKit::ILayout::ILayout((EQKit::ILayout *)v47, p_super);
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v47, v32, 0, (EQKit::ILayout *)&v48, v33, 0.0);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v47);
        -[EQKitHSpace addObject:](v24, "addObject:", v48);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v48);
        v25 += 280;
      }
      if (-[EQKitHSpace count](v24, "count"))
      {
        EQKitLayoutTable::generateRowBox((uint64_t *)this, v24, v22, (uint64_t *)&__p, (EQKit::ILayout *)&v48);
        if (v48)
        {
          objc_msgSend(v46, "addObject:");
          objc_msgSend(v45, "addObject:", v48);
          if (v22 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4))
          {
            v34 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", XHeight, 0.0);
            objc_msgSend(v46, "addObject:", v34);

          }
        }
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v48);
      }

      ++v22;
    }
    while (v22 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4));
  }
  v35 = (EQKitOffsetVBox *)objc_msgSend(v46, "count");
  v36 = (EQKitLayoutManager *)*((_QWORD *)this + 1);
  v37 = *((_QWORD *)v36 + 77);
  v47[0] = 0;
  v48 = (id)EQKitLayoutManager::currentNode(v36);
  v49 = 2;
  if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v37, v37 + 152, (uint64_t)&v48, v47) & 1) == 0)v47[0] = 2;
  if (v35)
  {
    v38 = -[EQKitVBox initWithChildBoxes:]([EQKitVBox alloc], "initWithChildBoxes:", v46);
    -[EQKitBox layoutVSize](v38, "layoutVSize");
    v40 = v39;
    -[EQKitBox layoutDepth](v38, "layoutDepth");
    v42 = v41;

    if (v47[0] == 2)
    {
      v43 = v6 + v42 + v40 * -0.5;
    }
    else if (v47[0] == 1)
    {
      v43 = v42 - v40;
    }
    else if ((v47[0] - 3) > 1)
    {
      if (v47[0] == 5)
        v43 = v42;
      else
        v43 = 0.0;
    }
    else
    {
      v43 = v42 + v40 * -0.5;
    }
    v35 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v46, 0, v43);
  }
  EQKit::ILayout::ILayout(v44, &v35->super.super.super);
  EQKitLayoutTable::relationalOperatorOffset(this, (EQKitBox **)v44, (EQKit::ILayoutOffset *)&v48);
  if (v48)
    EQKit::ILayout::setOffsetOfKind((uint64_t)v44, 1, (uint64_t)&v48);

  EQKit::ILayoutOffset::~ILayoutOffset(&v48);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
}

void sub_2411C4A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::layoutTable(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  NSArray *v6;
  EQKitLayoutManager *v7;
  uint64_t v8;
  EQKitLayoutManager *v9;
  uint64_t v10;
  EQKitLayoutManager *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15[2];
  void *__p[2];
  __int128 v17;

  EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    v6 = (NSArray *)objc_msgSend(a2, "schemataChildren");
    *(_BYTE *)(a1 + 88) = 0;
    LODWORD(v15[0]) = 0;
    v7 = *(EQKitLayoutManager **)(a1 + 8);
    v8 = *((_QWORD *)v7 + 77);
    v13 = EQKitLayoutManager::currentNode(v7);
    v14 = 8;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v8, v8 + 8, (uint64_t)&v13, v15))*(_BYTE *)(a1 + 88) = LODWORD(v15[0]) == 2;
    EQKitLayoutTable::generateTableLayout((EQKitLayoutTable *)a1, v6);
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v9 = *(EQKitLayoutManager **)(a1 + 8);
    v10 = *((_QWORD *)v9 + 77);
    v13 = EQKitLayoutManager::currentNode(v9);
    v14 = 3;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 248, (uint64_t)&v13, (char *)&__p[1]);
    v11 = *(EQKitLayoutManager **)(a1 + 8);
    v12 = *((_QWORD *)v11 + 77);
    v13 = EQKitLayoutManager::currentNode(v11);
    v14 = 4;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v12, v12 + 272, (uint64_t)&v13, (char *)v15);
    if ((void **)(a1 + 16) != v15)
    {
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 16), (char *)v15[0], (uint64_t)v15[1], ((char *)v15[1] - (char *)v15[0]) >> 2);
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 40), (char *)__p[1], v17, (uint64_t)(v17 - (unint64_t)__p[1]) >> 2);
    }
    EQKitLayoutTable::generateTableBox((EQKitLayoutTable *)a1, (EQKit::ILayout *)&v13);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)&v13);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v13);
    if (__p[1])
    {
      *(void **)&v17 = __p[1];
      operator delete(__p[1]);
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
}

void sub_2411C4C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>(uint64_t *a1, const EQKitLayoutTable::LayoutCell *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  EQKitLayoutTable::LayoutCell *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xEA0EA0EA0EA0EALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x75075075075075)
    v9 = 0xEA0EA0EA0EA0EALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (EQKitLayoutTable::LayoutCell *)&v10[280 * v4];
  v16 = &v10[280 * v9];
  EQKitLayoutTable::LayoutCell::LayoutCell(v14, a2);
  v15 = (char *)v14 + 280;
  std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2411C4DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this, const EQKitLayoutTable::LayoutCell *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 64));
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 224));
  return this;
}

void sub_2411C4E48(_Unwind_Exception *a1)
{
  EQKitLayoutTable::Properties *v1;
  EQKitLayoutRow *v2;

  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2411C4EE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2411C4F58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(280 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>,std::reverse_iterator<EQKitLayoutTable::LayoutCell*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  EQKitLayoutTable::LayoutCell *v12;

  v10 = 0;
  v11 = a7 - 280;
  while (a3 + v10 != a5)
  {
    v12 = (EQKitLayoutTable::LayoutCell *)(v11 + v10);
    v10 -= 280;
    EQKitLayoutTable::LayoutCell::LayoutCell(v12, (const EQKitLayoutTable::LayoutCell *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(i - 280);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), 0);
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), 0);
  return this;
}

void sub_2411C515C(_Unwind_Exception *a1)
{
  EQKitLayoutTable::Properties *v1;
  EQKitLayoutRow *v2;

  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>(uint64_t *a1, const EQKitLayoutTable::LayoutRow *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  EQKitLayoutTable::LayoutRow *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutRow>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (EQKitLayoutTable::LayoutRow *)&v10[80 * v4];
  v16 = &v10[80 * v9];
  EQKitLayoutTable::LayoutRow::LayoutRow(v14, a2);
  v15 = (char *)v14 + 80;
  std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2411C5270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutRow *EQKitLayoutTable::LayoutRow::LayoutRow(EQKitLayoutTable::LayoutRow *this, const EQKitLayoutTable::LayoutRow *a2)
{
  uint64_t v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<EQKitTypes::Align::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::Align::Enum*,EQKitTypes::Align::Enum*>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<EQKitTypes::VAlign::Enum>::__init_with_size[abi:ne180100]<EQKitTypes::VAlign::Enum*,EQKitTypes::VAlign::Enum*>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  v4 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = v4;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:ne180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>((_QWORD *)this + 7, *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  return this;
}

void sub_2411C5324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:ne180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2411C53BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)(a4 + v7), (const EQKitLayoutTable::LayoutCell *)(a2 + v7));
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2411C548C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 280;
    do
    {
      std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutCell,0>(v4 + v2);
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v6 -= 10;
    v4 -= 80;
    std::construct_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutRow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

__n128 std::construct_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow*>(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 7) = result;
  a1[9] = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<EQKitLayoutTable::LayoutRow,0>(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__append(uint64_t *a1, unint64_t a2)
{
  EQKitLayoutTable::LayoutCell *result;
  uint64_t v5;
  uint64_t v6;
  EQKitLayoutTable::LayoutCell *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  EQKitLayoutTable::LayoutCell *v13;
  uint64_t v14;
  EQKitLayoutTable::LayoutCell *v15;
  uint64_t v16;
  EQKitLayoutTable::LayoutCell *v17;
  _QWORD v18[2];
  EQKitLayoutTable::LayoutCell *v19;
  char *v20;
  EQKitLayoutTable::LayoutCell *v21;

  v6 = a1[2];
  result = (EQKitLayoutTable::LayoutCell *)(a1 + 2);
  v5 = v6;
  v7 = (EQKitLayoutTable::LayoutCell *)*((_QWORD *)result - 1);
  if (0xAF8AF8AF8AF8AF8BLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280 * a2);
      v14 = 280 * a2;
      do
      {
        result = EQKitLayoutTable::LayoutCell::LayoutCell(v7);
        v7 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280);
        v14 -= 280;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xEA0EA0EA0EA0EALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x75075075075075)
      v11 = 0xEA0EA0EA0EA0EALL;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (EQKitLayoutTable::LayoutCell *)&v12[280 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[280 * v11];
    v16 = 280 * a2;
    v17 = (EQKitLayoutTable::LayoutCell *)((char *)v15 + 280 * a2);
    do
    {
      EQKitLayoutTable::LayoutCell::LayoutCell(v15);
      v15 = (EQKitLayoutTable::LayoutCell *)((char *)v15 + 280);
      v16 -= 280;
    }
    while (v16);
    v19 = v17;
    std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(a1, v18);
    return (EQKitLayoutTable::LayoutCell *)std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_2411C579C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (uint64_t *)a3);
  v8 = v7;
  if (a2 + 8 != v7)
  {
    if ((_QWORD *)(v7 + 48) == a4)
      return 1;
    v9 = *(_QWORD *)(v7 + 48);
    v10 = *(_QWORD *)(v7 + 56);
LABEL_4:
    std::vector<EQKitLength>::__assign_with_size[abi:ne180100]<EQKitLength*,EQKitLength*>(a4, v9, v10, (v10 - v9) >> 4);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, &v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      if ((_QWORD *)(v14 + 48) == a4)
        return 1;
      v9 = *(_QWORD *)(v14 + 48);
      v10 = *(_QWORD *)(v14 + 56);
      goto LABEL_4;
    }
  }
  return result;
}

char *std::vector<EQKitLength>::__assign_with_size[abi:ne180100]<EQKitLength*,EQKitLength*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v17 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v17;
    v18 = (v17 - result) >> 4;
    if (v18 >= a4)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_DWORD *)v23 = *(_DWORD *)v6;
          *((_QWORD *)v23 + 1) = *(_QWORD *)(v6 + 8);
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      v16 = v22 - result;
      v12 = result;
    }
    else
    {
      v19 = a2 + 16 * v18;
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_QWORD *)result + 1) = *(_QWORD *)(v6 + 8);
          v6 += 16;
          result += 16;
        }
        while (v6 != v19);
      }
      v20 = v12;
      if (v19 != a3)
      {
        v21 = v12;
        do
        {
          *(_DWORD *)v21 = *(_DWORD *)v19;
          *((_QWORD *)v21 + 1) = *(_QWORD *)(v19 + 8);
          v20 += 16;
          v19 += 16;
          v21 += 16;
        }
        while (v19 != a3);
      }
      v16 = v20 - v12;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        *(_DWORD *)v15 = *(_DWORD *)v6;
        *((_QWORD *)v15 + 1) = *(_QWORD *)(v6 + 8);
        v15 += 16;
        v6 += 16;
      }
      while (v6 != a3);
    }
    v16 = v15 - v12;
  }
  *v13 = &v12[v16];
  return result;
}

id EQKitLayoutFilterOutSpaceLike(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if ((objc_msgSend(v7, "isSpaceLike") & 1) == 0)
          objc_msgSend(v2, "addObject:", v7);
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return (id)objc_msgSend(v2, "copy");
}

uint64_t EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t result, int a2)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

double EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

double EQKitAlignmentGroup::increaseWidth(EQKitAlignmentGroup *this, double a2)
{
  double result;

  result = *(double *)this + a2;
  *(double *)this = result;
  return result;
}

BOOL EQKitAlignmentGroup::needsDecimalAlignmentPoint(EQKitAlignmentGroup *this)
{
  return *((_DWORD *)this + 2) == 4 && *((double *)this + 2) == 1.79769313e308;
}

double EQKitAlignmentGroup::saveAlignmentPoint(EQKitAlignmentGroup *this, double a2)
{
  double result;

  result = *(double *)this + a2;
  *((double *)this + 2) = result;
  return result;
}

double EQKitAlignmentGroup::leftWidth(EQKitAlignmentGroup *this)
{
  double result;
  int v2;

  result = *((double *)this + 2);
  if (result == 1.79769313e308)
  {
    v2 = *((_DWORD *)this + 2);
    if ((v2 - 3) >= 2)
    {
      result = 0.0;
      if (v2 == 2)
        return *(double *)this * 0.5;
    }
    else
    {
      return *(double *)this;
    }
  }
  return result;
}

double EQKitAlignmentGroup::rightWidth(EQKitAlignmentGroup *this)
{
  double v1;
  double v2;
  int v3;

  v1 = *(double *)this;
  v2 = *((double *)this + 2);
  if (v2 == 1.79769313e308)
  {
    v3 = *((_DWORD *)this + 2);
    v2 = *(double *)this;
    if ((v3 - 3) >= 2)
    {
      v2 = 0.0;
      if (v3 == 2)
        v2 = v1 * 0.5;
    }
  }
  return v1 - v2;
}

void EQKitGroupAlignmentContext::addRow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  EQKitAlignmentGroup *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  v5 = *a2;
  v4 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v6 > (a1[1] - *a1) >> 3)
  {
    v15 = 0;
    std::vector<double>::resize((uint64_t)a1, v6, &v15);
    v15 = 0;
    std::vector<double>::resize((uint64_t)(a1 + 3), v6, &v15);
  }
  if (v4 != v5)
  {
    v7 = 0;
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = v6;
    do
    {
      v10 = (EQKitAlignmentGroup *)(*a2 + v7);
      v11 = *a1;
      v12 = EQKitAlignmentGroup::leftWidth(v10);
      if (*(double *)(v11 + 8 * v8) >= v12)
        v12 = *(double *)(v11 + 8 * v8);
      *(double *)(*a1 + 8 * v8) = v12;
      v13 = a1[3];
      v14 = EQKitAlignmentGroup::rightWidth(v10);
      if (*(double *)(v13 + 8 * v8) >= v14)
        v14 = *(double *)(v13 + 8 * v8);
      *(double *)(a1[3] + 8 * v8++) = v14;
      v7 += 24;
    }
    while (v9 != v8);
  }
}

void EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  if (a3 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
    EQKitAlignmentGroup::leftWidth(a2);
}

void EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  if (a3 < (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3)
    EQKitAlignmentGroup::rightWidth(a2);
}

double EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(EQKitGroupAlignmentContext *this, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double result;
  double *v5;
  double v6;
  float v7;
  double v8;
  double *v9;
  double *v10;
  float v11;
  double v12;

  v2 = a2 + 1;
  v3 = (double *)*((_QWORD *)this + 1);
  result = 0.0;
  if (a2 + 1 < (unint64_t)(((uint64_t)v3 - *(_QWORD *)this) >> 3))
  {
    v5 = (double *)(*(_QWORD *)this + 8 * v2);
    v6 = 0.0;
    if (v5 != v3)
    {
      v7 = 0.0;
      do
      {
        v8 = *v5++;
        v7 = v8 + v7;
      }
      while (v5 != v3);
      v6 = v7 + 0.0;
    }
    v9 = (double *)*((_QWORD *)this + 4);
    v10 = (double *)(*((_QWORD *)this + 3) + 8 * v2);
    if (v10 != v9)
    {
      v11 = 0.0;
      do
      {
        v12 = *v10++;
        v11 = v12 + v11;
      }
      while (v10 != v9);
      result = v11;
    }
    return v6 + result;
  }
  return result;
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, EQKitBox *a2, double a3)
{
  *(_QWORD *)this = a2;
  *((double *)this + 1) = a3;
  return this;
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, id *a2)
{
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[1];
  return this;
}

void EQKit::ILayoutOffset::~ILayoutOffset(id *this)
{

}

uint64_t EQKit::ILayoutOffset::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  return a1;
}

double EQKit::ILayoutOffset::offsetInBox(EQKit::ILayoutOffset *this, EQKitBox *a2)
{
  double v3;

  if (!*(_QWORD *)this)
    return 1.79769313e308;
  if (a2)
  {
    -[EQKitBox transformFromDescendant:](a2, "transformFromDescendant:");
    v3 = 0.0 * 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return v3 + 0.0 * *((double *)this + 1) + 0.0;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, EQKitBox *a2)
{
  EQKitBox *v3;

  v3 = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  *(_QWORD *)this = *(id *)a2;
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:ne180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  return this;
}

void EQKit::ILayout::~ILayout(EQKit::ILayout *this)
{

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 8, *((id **)this + 2));
}

uint64_t EQKit::ILayout::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

EQKitBox *EQKit::ILayout::setBox(EQKitBox *this, EQKitBox *a2)
{
  EQKitBox *v3;

  if ((EQKitBox *)this->super.isa != a2)
  {
    v3 = this;

    this = a2;
    v3->super.isa = (Class)this;
  }
  return this;
}

uint64_t EQKit::ILayout::setIsOverAccentTokenWithBaseToken(uint64_t this, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFEFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setIsUserSpace(uint64_t this, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFDFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setVerticalContentClassification(uint64_t result, char a2)
{
  *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0xE3FF | ((a2 & 7) << 10);
  return result;
}

BOOL EQKit::ILayout::getOffsetOfKind(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;

  v5 = *(_QWORD *)(a1 + 16);
  v3 = a1 + 16;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3 || *(_DWORD *)(v7 + 32) > a2)
    return 0;
  EQKit::ILayoutOffset::operator=((uint64_t)a3, v7 + 40);
  return *a3 != 0;
}

void EQKit::ILayout::setOffsetOfKind(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  id v6;
  uint64_t v7;

  v4 = a1 + 8;
  v5 = a2;
  v6 = *(id *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(v4, &v5, (uint64_t)&v5);

}

void sub_2411C6264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t *EQKit::ILayout::removeOffsetOfKind(uint64_t *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = result + 2;
  v3 = result[2];
  if (v3)
  {
    ++result;
    v4 = (uint64_t)v2;
    do
    {
      v5 = *(_DWORD *)(v3 + 32);
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = (uint64_t *)v3;
      else
        v7 = (uint64_t *)(v3 + 8);
      if (!v6)
        v4 = v3;
      v3 = *v7;
    }
    while (*v7);
    if ((uint64_t *)v4 != v2 && *(_DWORD *)(v4 + 32) <= a2)
      return std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase((uint64_t **)result, v4);
  }
  return result;
}

void EQKit::ILayout::takeMissingOffsetsFromLayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  char *v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  BOOL v14;
  int v15;
  id v16;
  uint64_t v17;

  v2 = (char *)*((_QWORD *)a2 + 1);
  v3 = (char *)a2 + 16;
  if (v2 != (char *)a2 + 16)
  {
    v4 = (char *)this + 8;
    v5 = (_QWORD *)((char *)this + 16);
    do
    {
      v6 = *v5;
      v7 = *((_DWORD *)v2 + 8);
      if (!*v5)
        goto LABEL_13;
      v8 = v5;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < v7;
        if (v9 >= v7)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (_QWORD *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 8))
      {
LABEL_13:
        v15 = *((_DWORD *)v2 + 8);
        v16 = *((id *)v2 + 5);
        v17 = *((_QWORD *)v2 + 6);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)v4, &v15, (uint64_t)&v15);

      }
      v12 = (char *)*((_QWORD *)v2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v2 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
    }
    while (v13 != v3);
  }
}

void sub_2411C63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t EQKit::Layout::Config::newConfigFromDictionary(EQKit::Layout::Config *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  unsigned int v10;
  int v11;
  void *__p[2];
  char v14;

  v5 = operator new();
  *(_DWORD *)v5 = 2;
  v6 = *(_QWORD *)this;
  *(_BYTE *)(v5 + 6) = *(_QWORD *)this > 2uLL;
  *(_BYTE *)(v5 + 7) = v6 > 3;
  v7 = objc_opt_class();
  v8 = (void *)EQKitUtilDynamicCast(v7, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("radicalIndexAlign")));
  if (v8)
    v9 = (char *)objc_msgSend(v8, "UTF8String");
  else
    v9 = "";
  std::string::basic_string[abi:ne180100]<0>(__p, v9);
  v10 = EQKitTypes::Align::alignFromMathMLString((uint64_t *)__p, 2);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v10 <= 2)
    v11 = 2;
  else
    v11 = v10;
  *(_DWORD *)v5 = v11;
  *(_BYTE *)(v5 + 4) = _BOOL(a2, CFSTR("useBaseFontForLineHeight"));
  *(_BYTE *)(v5 + 5) = _BOOL(a2, CFSTR("allowSingleLineHeight"));
  return v5;
}

void sub_2411C6524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _BOOL(NSDictionary *a1, NSString *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return objc_msgSend((id)EQKitUtilDynamicCast(v4, (uint64_t)-[NSDictionary objectForKey:](a1, "objectForKey:", a2)), "BOOLValue");
}

EQKit::Font::Manager *EQKit::Font::Manager::Manager(EQKit::Font::Manager *this, EQKitEnvironment *a2, NSDictionary *a3, const EQKit::Environment::Version *a4)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25112A968;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  v7 = -[NSDictionary copy](a3, "copy");
  v8 = *(_QWORD *)a4;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 4) = v8;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void EQKit::Font::Manager::~Manager(EQKit::Font::Manager *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25112A968;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

}

{
  EQKit::Font::Manager::~Manager(this);
  JUMPOUT(0x242690740);
}

uint64_t EQKit::Font::Manager::fontCollection(EQKit::Font::Manager *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    EQKit::Font::Manager::reloadFonts(this);
    return *((_QWORD *)this + 2);
  }
  return result;
}

uint64_t EQKit::Font::Manager::reloadFonts(EQKit::Font::Manager *this)
{
  const void *v2;
  _QWORD *v3;
  void *v4;
  const __CFString *v5;
  const void *v6;
  void *v7;
  const __CFString *v8;
  EQKit::Font::OpenTypeFontCollection *v9;
  uint64_t result;
  char *v11;
  char v12;
  uint64_t v13;
  NSDictionary *v14;
  EQKit::Font::STIXCollection *v15;

  if ((objc_msgSend(*((id *)this + 1), "usesLegacySTIXFonts") & 1) != 0)
  {
    v3 = (_QWORD *)((char *)this + 16);
    v2 = (const void *)*((_QWORD *)this + 2);
    if (v2)
    {
      goto LABEL_12;
    }
  }
  else
  {
    v5 = (const __CFString *)objc_msgSend(*((id *)this + 1), "mathFontName");
    v3 = (_QWORD *)((char *)this + 16);
    v6 = (const void *)*((_QWORD *)this + 2);
    if (v6)
    {
      v4 = v7;
      if (v5)
      {
        if (!v7
          || !(*(unsigned int (**)(void *))(*(_QWORD *)v7 + 16))(v7)
          || (v8 = (const __CFString *)*((_QWORD *)v4 + 1)) != 0 && CFStringCompare(v5, v8, 0))
        {
          if (*v3)
            (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
          goto LABEL_16;
        }
        v12 = 0;
        goto LABEL_23;
      }
LABEL_12:
      if (v4)
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        goto LABEL_26;
      }
      v5 = 0;
      v12 = 1;
LABEL_23:
      if (*v3)
        return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
      if ((v12 & 1) != 0)
        goto LABEL_26;
LABEL_16:
      v9 = (EQKit::Font::OpenTypeFontCollection *)operator new();
      EQKit::Font::OpenTypeFontCollection::OpenTypeFontCollection(v9, v5);
      result = (*(uint64_t (**)(EQKit::Font::OpenTypeFontCollection *))(*(_QWORD *)v9 + 16))(v9);
      if ((result & 1) == 0)
      {
        result = -[NSString isEqualToString:](+[EQKitEnvironment defaultMathFontName](EQKitEnvironment, "defaultMathFontName"), "isEqualToString:", v5);
        if ((result & 1) == 0)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            EQKit::Font::Manager::reloadFonts((uint64_t)v5);
          (*(void (**)(EQKit::Font::OpenTypeFontCollection *))(*(_QWORD *)v9 + 8))(v9);
          v9 = (EQKit::Font::OpenTypeFontCollection *)operator new();
          result = (uint64_t)EQKit::Font::OpenTypeFontCollection::OpenTypeFontCollection(v9, (const __CFString *)+[EQKitEnvironment defaultMathFontName](EQKitEnvironment, "defaultMathFontName"));
        }
      }
      v11 = (char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 208);
      goto LABEL_27;
    }
    if (v5)
      goto LABEL_16;
  }
LABEL_26:
  v13 = objc_opt_class();
  v14 = (NSDictionary *)EQKitUtilDynamicCast(v13, objc_msgSend(*((id *)this + 3), "objectForKeyedSubscript:", CFSTR("STIX")));
  v15 = (EQKit::Font::STIXCollection *)operator new();
  result = (uint64_t)EQKit::Font::STIXCollection::STIXCollection(v15, v14, (NSDictionary *)this + 4, (const EQKitCacheLRUCounter *)this + 5);
  v11 = (char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 208);
LABEL_27:
  *v3 = v11;
  return result;
}

void sub_2411C68F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x10E1C40DA3C5C2ALL);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::Manager::beginLayout(uint64_t this)
{
  ++*(_QWORD *)(this + 40);
  return this;
}

uint64_t EQKit::Font::Manager::endLayout(EQKit::Font::Manager *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

void EQKit::Font::Manager::reloadFonts(uint64_t a1)
{
  int v1;
  uint64_t v2;
  __int16 v3;
  NSString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = 138412546;
  v2 = a1;
  v3 = 2112;
  v4 = +[EQKitEnvironment defaultMathFontName](EQKitEnvironment, "defaultMathFontName");
  _os_log_error_impl(&dword_241190000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to load math font \"%@\". Falling back to \"%@\"", (uint8_t *)&v1, 0x16u);
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, NSString *a2, const __CTFont *a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  if (!a2 || !a3)
    return 0;
  v5 = objc_alloc(MEMORY[0x24BDBCE70]);
  v6 = (void *)objc_msgSend(v5, "initWithObjectsAndKeys:", a3, *MEMORY[0x24BDC4C28], *MEMORY[0x24BDBD270], *MEMORY[0x24BDC4EE8], &unk_2511558F0, *MEMORY[0x24BDC5010], 0);
  v7 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", a2, v6);

  return v7;
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, int a2, const __CTFont *a3)
{
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _WORD v10[2];

  if ((a2 - 0x10000) >> 20)
  {
    v6 = 1;
    LOWORD(v5) = a2;
  }
  else
  {
    v5 = ((a2 + 67043328) >> 10) - 10240;
    v10[1] = a2 & 0x3FF | 0xDC00;
    v6 = 2;
  }
  v10[0] = v5;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", v10, v6);
  v8 = (*(uint64_t (**)(EQKit::Font::Collection *, void *, const __CTFont *))(*(_QWORD *)this + 144))(this, v7, a3);

  return v8;
}

_QWORD *EQKit::Font::CompositeStretch::CompositeStretch(_QWORD *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

uint64_t EQKit::Font::CompositeStretch::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  return a1;
}

void EQKit::Font::CompositeStretch::~CompositeStretch(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void EQKit::Font::CompositeStretch::defineCompositeStretch(const __CFString *this@<X0>, const __CFString *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  UniChar *v12;
  uint64_t v13;
  UniChar *v14;
  UniChar *v15;
  UniChar *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  UniChar *v22;
  char *v23;
  UniChar v24;
  UniChar *v25;
  UniChar *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  UniChar *v32;
  char *v33;
  UniChar v34;
  UniChar *v35;
  UniChar *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  UniChar *v42;
  char *v43;
  UniChar v44;
  CTFontRef v45;
  const __CTFont *v46;
  uint64_t v47;
  CGGlyph *v48;
  CFIndex v49;
  CGGlyph v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  const __CFString *v55;
  CGGlyph v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  UniChar *v60;
  UniChar *v61;
  _QWORD v62[2];

  v9 = (int)a2;
  v62[1] = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = -1;
  v60 = 0;
  v61 = 0;
  v62[0] = 0;
  if ((_DWORD)a2)
  {
    v12 = (UniChar *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, 1);
    *v12 = v9;
    v14 = v12 + 1;
    v60 = v12;
    v62[0] = &v12[v13];
    v61 = v12 + 1;
    if (!a3)
      goto LABEL_3;
  }
  else
  {
    v14 = 0;
    if (!a3)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  if ((unint64_t)v14 >= v62[0])
  {
    v16 = v60;
    v17 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v18 = v17 >> 1;
    if (v62[0] - (_QWORD)v60 <= (unint64_t)((v17 >> 1) + 1))
      v19 = v18 + 1;
    else
      v19 = v62[0] - (_QWORD)v60;
    if (v62[0] - (_QWORD)v60 >= 0x7FFFFFFFFFFFFFFEuLL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, v20);
      v16 = v60;
      v14 = v61;
    }
    else
    {
      v21 = 0;
    }
    v22 = (UniChar *)&v21[2 * v18];
    v23 = &v21[2 * v20];
    *v22 = a3;
    v15 = v22 + 1;
    while (v14 != v16)
    {
      v24 = *--v14;
      *--v22 = v24;
    }
    v60 = v22;
    v61 = v15;
    v62[0] = v23;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v14 = a3;
    v15 = v14 + 1;
  }
  v61 = v15;
  v14 = v15;
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_5;
LABEL_44:
    if ((unint64_t)v14 >= v62[0])
    {
      v36 = v60;
      v37 = (char *)v14 - (char *)v60;
      if ((char *)v14 - (char *)v60 <= -3)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v38 = v37 >> 1;
      if (v62[0] - (_QWORD)v60 <= (unint64_t)((v37 >> 1) + 1))
        v39 = v38 + 1;
      else
        v39 = v62[0] - (_QWORD)v60;
      if (v62[0] - (_QWORD)v60 >= 0x7FFFFFFFFFFFFFFEuLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
      {
        v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, v40);
        v36 = v60;
        v14 = v61;
      }
      else
      {
        v41 = 0;
      }
      v42 = (UniChar *)&v41[2 * v38];
      v43 = &v41[2 * v40];
      *v42 = a5;
      v35 = v42 + 1;
      while (v14 != v36)
      {
        v44 = *--v14;
        *--v42 = v44;
      }
      v60 = v42;
      v61 = v35;
      v62[0] = v43;
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v14 = a5;
      v35 = v14 + 1;
    }
    v61 = v35;
    v14 = v35;
    if (!this)
      goto LABEL_78;
    goto LABEL_62;
  }
LABEL_26:
  if ((unint64_t)v14 >= v62[0])
  {
    v26 = v60;
    v27 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v28 = v27 >> 1;
    if (v62[0] - (_QWORD)v60 <= (unint64_t)((v27 >> 1) + 1))
      v29 = v28 + 1;
    else
      v29 = v62[0] - (_QWORD)v60;
    if (v62[0] - (_QWORD)v60 >= 0x7FFFFFFFFFFFFFFEuLL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v62, v30);
      v26 = v60;
      v14 = v61;
    }
    else
    {
      v31 = 0;
    }
    v32 = (UniChar *)&v31[2 * v28];
    v33 = &v31[2 * v30];
    *v32 = a4;
    v25 = v32 + 1;
    while (v14 != v26)
    {
      v34 = *--v14;
      *--v32 = v34;
    }
    v60 = v32;
    v61 = v25;
    v62[0] = v33;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v14 = a4;
    v25 = v14 + 1;
  }
  v61 = v25;
  v14 = v25;
  if (a5)
    goto LABEL_44;
LABEL_5:
  if (!this)
    goto LABEL_78;
LABEL_62:
  v45 = CTFontCreateWithName(this, 12.0, 0);
  v46 = v45;
  if (v14 != v60 && v45)
  {
    MEMORY[0x24BDAC7A8]((_QWORD *)(2 * (v14 - v60)), v45);
    v48 = (CGGlyph *)((char *)&v55 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (CTFontGetGlyphsForCharacters(v46, v60, v48, v49))
    {
      if (v9)
      {
        v50 = *v48;
        v51 = 1;
        if (a3)
          goto LABEL_67;
      }
      else
      {
        v51 = 0;
        v50 = -1;
        if (a3)
        {
LABEL_67:
          v52 = v48[v51++];
          if (a4)
            goto LABEL_68;
          goto LABEL_74;
        }
      }
      v52 = -1;
      if (a4)
      {
LABEL_68:
        v53 = v48[v51++];
        if (a5)
        {
LABEL_69:
          v54 = v48[v51];
LABEL_76:
          v56 = v50;
          v57 = v52;
          v58 = v53;
          v59 = v54;
          v55 = this;
          CFRetain(this);
          EQKit::Font::CompositeStretch::operator=((uint64_t)a6, (uint64_t)&v55);
          EQKit::Font::CompositeStretch::~CompositeStretch((const void **)&v55);
          goto LABEL_77;
        }
LABEL_75:
        v54 = -1;
        goto LABEL_76;
      }
LABEL_74:
      v53 = -1;
      if (a5)
        goto LABEL_69;
      goto LABEL_75;
    }
LABEL_77:
    CFRelease(v46);
    goto LABEL_78;
  }
  if (v45)
    goto LABEL_77;
LABEL_78:
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
}

void sub_2411C7020(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;
  void *v4;

  EQKit::Font::CompositeStretch::~CompositeStretch((const void **)(v2 - 128));
  v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(_QWORD *)(v2 - 104) = v4;
    operator delete(v4);
  }
  EQKit::Font::CompositeStretch::~CompositeStretch(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::Collection::supportsOpenTypeMATHTables(EQKit::Font::Collection *this)
{
  return 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(uint64_t **a1@<X0>, const EQKit::StemStretch::Key *a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_rwlock_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  const EQKit::StemStretch::Key *v18;

  v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v7 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(a3, v7 + 6);
  }
  pthread_rwlock_unlock(v6);
  if (!v8)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    if (((unsigned int (*)(void))a1[34][2])())
    {
      pthread_rwlock_wrlock(v6);
      v9 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
      if (v9)
      {
        v10 = v9 + 6;
        v9[8] = **a1;
      }
      else
      {
        v17 = **a1;
        v18 = a2;
        v11 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v18);
        v10 = &v15;
        std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(v11 + 6, &v15);
        v11[8] = v17;
        if (a1[4] > a1[7])
        {
          *((_BYTE *)a1 + 48) = 1;
          v10 = &v15;
        }
      }
      std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(a3, v10);
      pthread_rwlock_unlock(v6);
    }
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_2411C7228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

BOOL EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(EQKit::Font::STIXCollection *this, const unsigned __int16 *a2, const __CTFont **a3, double *a4, double *a5)
{
  EQKitPath *v8;
  CGFloat SlantAngle;
  double v10;
  _BOOL8 v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  BOOL v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  if (!*a3)
    return 0;
  v8 = EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*a2, *a3, (const __CTFont *)a3);
  if (!*a3)
  {
    v10 = 0.0;
    if (v8)
      goto LABEL_4;
    return 0;
  }
  SlantAngle = CTFontGetSlantAngle(*a3);
  v10 = fabs(tan(SlantAngle * 3.14159265 / 180.0));
  if (!v8)
    return 0;
LABEL_4:
  v11 = *(_QWORD *)v8 != 0;
  if (*(_QWORD *)v8)
  {
    if (v10 == 0.0)
    {
      *a4 = 0.0;
      *a5 = 0.0;
    }
    else
    {
      EQKitPath::extractPath(v8);
      v12 = (double *)*((_QWORD *)v8 + 1);
      v13 = (double *)*((_QWORD *)v8 + 2);
      v14 = 0.0;
      if (v12 == v13)
      {
        v15 = 2.22507386e-308;
        v16 = 1.79769313e308;
        v17 = 1.79769313e308;
        v19 = 2.22507386e-308;
        v25 = 1.79769313e308;
      }
      else
      {
        v15 = 2.22507386e-308;
        v16 = 1.79769313e308;
        v17 = 1.79769313e308;
        v18 = 0.0;
        v19 = 2.22507386e-308;
        v20 = (double *)*((_QWORD *)v8 + 1);
        do
        {
          v22 = *v20;
          v21 = v20[1];
          if (v21 > v19)
            v19 = v20[1];
          if (v21 < v16)
            v16 = v20[1];
          if (v22 < v17 || (v22 == v17 ? (v23 = v21 < v18) : (v23 = 0), v23))
          {
            v18 = v20[1];
            v17 = *v20;
          }
          if (v22 > v15 || (v22 == v15 ? (v24 = v21 < v14) : (v24 = 0), v24))
          {
            v14 = v20[1];
            v15 = *v20;
          }
          v20 += 2;
        }
        while (v20 != v13);
        if (v12 == v13)
        {
          v25 = 1.79769313e308;
        }
        else
        {
          v25 = 1.79769313e308;
          do
          {
            v26 = v12[1];
            if (v26 <= v18)
            {
              v27 = *v12 + (v26 - v16) * v10;
              if (v27 < v25)
                v25 = v27;
            }
            v12 += 2;
          }
          while (v12 != v13);
        }
      }
      v28 = v15 + (v14 - v16) * v10;
      v29 = (v17 + v15) * 0.5;
      *a5 = (v28 + v25) * 0.5 - v29;
      *a4 = (v28 - (v19 - v16) * v10 + v25 - (v19 - v16) * v10) * 0.5 - v29;
    }
  }
  EQKitPath::~EQKitPath(v8);
  MEMORY[0x242690740]();
  return v11;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v7;
  if (*(_QWORD *)(a1 + 32) > a2)
    *(_BYTE *)(a1 + 48) = 1;
  pthread_rwlock_unlock(v6);
  return EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune((uint64_t **)a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v7;
  if (*(_QWORD *)(a1 + 32) > a2)
    *(_BYTE *)(a1 + 48) = 1;
  pthread_rwlock_unlock(v6);
  return EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune((uint64_t **)a1);
}

EQKit::Font::STIXCollection *EQKit::Font::STIXCollection::STIXCollection(EQKit::Font::STIXCollection *this, NSDictionary *a2, NSDictionary *a3, const EQKitCacheLRUCounter *a4)
{
  EQKit::Font::STIXCollection::SizeVariant *v8;
  uint64_t v9;
  EQKit::Font::CharacterProperty::Map *v10;
  const EQKit::Environment::Version *v11;
  uint64_t v12;
  EQKit::Font::Metric::Map *v13;
  NSDictionary *v14;
  uint64_t v15;
  EQKit::Font::CharacterMapping *v16;
  NSDictionary *v17;
  uint64_t v18;
  EQKit::Font::CharacterMapping *v19;
  NSDictionary *v20;
  uint64_t v21;
  EQKit::Font::CharacterArray *v22;
  NSArray *v23;
  uint64_t v24;
  EQKit::Font::CharacterArray *v25;
  NSArray *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  char *v39;
  unsigned int v40;
  _QWORD v41[2];
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  _DWORD *v45[2];

  *(_QWORD *)this = &off_25112AAC8;
  v8 = (EQKit::Font::STIXCollection *)((char *)this + 224);
  v39 = (char *)this + 168;
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168), a4);
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant(v8, a4);
  *((_QWORD *)this + 35) = (char *)this + 288;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  v9 = objc_opt_class();
  v10 = (EQKit::Font::CharacterProperty::Map *)EQKitUtilDynamicCast(v9, (uint64_t)-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("charProps"), v39));
  *((_QWORD *)this + 41) = EQKit::Font::CharacterProperty::Map::newMapFromDictionary(v10, a3, v11);
  v12 = objc_opt_class();
  v13 = (EQKit::Font::Metric::Map *)EQKitUtilDynamicCast(v12, (uint64_t)-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("metrics")));
  *((_QWORD *)this + 42) = EQKit::Font::Metric::Map::newMapFromDictionary(v13, v14);
  v15 = objc_opt_class();
  v16 = (EQKit::Font::CharacterMapping *)EQKitUtilDynamicCast(v15, (uint64_t)-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("charMap")));
  *((_QWORD *)this + 43) = EQKit::Font::CharacterMapping::newMapFromDictionary(v16, v17);
  v18 = objc_opt_class();
  v19 = (EQKit::Font::CharacterMapping *)EQKitUtilDynamicCast(v18, (uint64_t)-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("stretchCharMap")));
  *((_QWORD *)this + 44) = EQKit::Font::CharacterMapping::newMapFromDictionary(v19, v20);
  v21 = objc_opt_class();
  v22 = (EQKit::Font::CharacterArray *)EQKitUtilDynamicCast(v21, (uint64_t)-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("specialVariantsCharacterArray")));
  *((_QWORD *)this + 45) = EQKit::Font::CharacterArray::newArrayFromArray(v22, v23);
  v24 = objc_opt_class();
  v25 = (EQKit::Font::CharacterArray *)EQKitUtilDynamicCast(v24, (uint64_t)-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("largeScriptChars")));
  *((_QWORD *)this + 46) = EQKit::Font::CharacterArray::newArrayFromArray(v25, v26);
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  (*(void (**)(EQKit::Font::STIXCollection *))(*(_QWORD *)this + 24))(this);
  v27 = operator new();
  v28 = MEMORY[0x24BDAC760];
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 3221225472;
  v44[2] = ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke;
  v44[3] = &__block_descriptor_40_e36_B24__0r__Key_____CFString_dSId_8_v16l;
  v44[4] = this;
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(v27, (uint64_t)a4, v44);
  *((_QWORD *)this + 48) = v27;
  v29 = operator new();
  v43[0] = v28;
  v43[1] = 3221225472;
  v43[2] = ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2;
  v43[3] = &__block_descriptor_40_e36_B24__0r__Key_____CFString_dSId_8_i16l;
  v43[4] = this;
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(v29, (uint64_t)a4, v43);
  *((_QWORD *)this + 47) = v29;
  v30 = operator new();
  v42[0] = v28;
  v42[1] = 3221225472;
  v42[2] = ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3;
  v42[3] = &__block_descriptor_40_e53_B24__0r__SlantKey_____CFString_dSI_8__SlantInfo_dd_16l;
  v42[4] = this;
  EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(v30, (uint64_t)a4, v42);
  *((_QWORD *)this + 49) = v30;
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(*((_QWORD *)this + 48), 0xC8uLL, 0x96uLL);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(*((_QWORD *)this + 47), 0x7D0uLL, 0x5DCuLL);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A7, 9129, 9128, 9130, v41);
  v40 = 123;
  v45[0] = &v40;
  v31 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v31 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23AB, 9133, 9132, 9130, v41);
  v40 = 125;
  v45[0] = &v40;
  v32 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v32 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x239B, 9117, 0, 9116, v41);
  v40 = 40;
  v45[0] = &v40;
  v33 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v33 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x239E, 9120, 0, 9119, v41);
  v40 = 41;
  v45[0] = &v40;
  v34 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v34 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A1, 9123, 0, 9122, v41);
  v40 = 91;
  v45[0] = &v40;
  v35 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v35 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A4, 9126, 0, 9125, v41);
  v40 = 93;
  v45[0] = &v40;
  v36 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v36 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), 0, 9143, 0, 0, v41);
  v45[0] = &EQKit::Unicode::SQUARE_ROOT;
  v37 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 280, &EQKit::Unicode::SQUARE_ROOT, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v37 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)v41);
  return this;
}

void sub_2411C7AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::Font::STIXCollection::SizeVariant *a9, uint64_t a10, char a11)
{
  EQKit::Font::STIXCollection::SizeVariant *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;

  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v12 + 304, *v15);
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v13, *v14);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(v11);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(a9);
  _Unwind_Resume(a1);
}

BOOL ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const EQKit::StemStretch::Config::Entry *v5;
  unsigned int v6;
  char *v7;
  _QWORD *v8;
  EQKit::StemStretch::Glyph *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string v15;
  int *v16;
  std::string __p;

  v5 = *(const EQKit::StemStretch::Config::Entry **)(*(_QWORD *)(a1 + 32) + 328);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 20);
    if (*(_QWORD *)a2)
      v7 = (char *)objc_msgSend(*(id *)a2, "UTF8String");
    else
      v7 = "";
    std::string::basic_string[abi:ne180100]<0>(&v15, v7);
    v16 = (int *)(v6 | 0xD00000000);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __p = v15;
    v8 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)v5 + 48, (uint64_t)&v16);
    if ((_QWORD *)((char *)v5 + 56) == v8)
      v5 = 0;
    else
      v5 = (const EQKit::StemStretch::Config::Entry *)(v8 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  v9 = (EQKit::StemStretch::Glyph *)operator new();
  EQKit::StemStretch::Glyph::Glyph(v9, (const EQKit::StemStretch::Key *)a2, v5);
  std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:ne180100]<EQKit::StemStretch::Glyph,void>(&v16, (uint64_t)v9);
  v10 = *v16;
  if (*v16)
    std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::operator=[abi:ne180100]<EQKit::OpticalKern::Edge::Path,void>(a3, (uint64_t *)&v16);
  v11 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10 != 0;
}

void sub_2411C7CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2(uint64_t a1, const EQKit::StemStretch::Key *a2, _DWORD *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(*(uint64_t ***)(*(_QWORD *)(a1 + 32) + 384), a2, &v9);
  v4 = (int)v9;
  if (v9)
    v4 = *v9;
  *a3 = v4;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 1;
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3(uint64_t a1, uint64_t a2, double *a3)
{
  __CTFont *v5;
  __CTFont *v6;
  _BOOL4 v7;
  double v8;
  double v9;
  unsigned __int16 v11;
  double v12;
  double v13;
  __CTFont *v14;

  if (*(_QWORD *)a2)
  {
    v5 = CTFontCreateWithName(*(CFStringRef *)a2, *(CGFloat *)(a2 + 8), 0);
    v14 = v5;
    if (v5)
    {
      v6 = v5;
      v12 = 0.0;
      v13 = 0.0;
      v11 = *(_WORD *)(a2 + 16);
      v7 = EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(v5, &v11, &v14, &v13, &v12);
      v9 = v12;
      v8 = v13;
      if (!v7)
      {
        v9 = 0.0;
        v8 = 0.0;
      }
      *a3 = v8;
      a3[1] = v9;
      CFRelease(v6);
    }
  }
  return 1;
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this, uint64_t *a2)
{
  uint64_t v3;
  EQKit::Font::STIXCollection::FontInfo *v4;
  EQKit::Font::STIXCollection::FontInfo *v5;
  EQKit::Font::STIXCollection::FontInfo *v6;
  EQKit::Font::STIXCollection::FontInfo *v7;
  EQKit::Font::STIXCollection::FontInfo *v8;
  EQKit::Font::STIXCollection::FontInfo *v9;
  EQKit::Font::STIXCollection::FontInfo *v10;
  EQKit::Font::STIXCollection::FontInfo *v11;
  EQKit::Font::STIXCollection::FontInfo *v12;
  EQKit::Font::STIXCollection::FontInfo *v13;
  EQKit::Font::STIXCollection::FontInfo *v14;
  EQKit::Font::STIXCollection::FontInfo *v15;
  EQKit::Font::STIXCollection::FontInfo *v16;
  EQKit::Font::STIXCollection::FontInfo *v17;
  EQKit::Font::STIXCollection::FontInfo *v18;
  EQKit::Font::STIXCollection::FontInfo *v19;
  EQKit::Font::STIXCollection::FontInfo *v20;
  EQKit::Font::STIXCollection::FontInfo *v21;
  EQKit::Font::STIXCollection::FontInfo *v22;
  EQKit::Font::STIXCollection::FontInfo *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 208)) = a2[1];
  v4 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 1);
  if (v4)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v4);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 1) = 0;
  }
  v5 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 3);
  if (v5)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v5);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 3) = 0;
  }
  v6 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 2);
  if (v6)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v6);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 2) = 0;
  }
  v7 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 4);
  if (v7)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v7);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 4) = 0;
  }
  v8 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 7);
  if (v8)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v8);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 7) = 0;
  }
  v9 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 9);
  if (v9)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v9);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 9) = 0;
  }
  v10 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 8);
  if (v10)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v10);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 8) = 0;
  }
  v11 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 10);
  if (v11)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v11);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 10) = 0;
  }
  v12 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 11);
  if (v12)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v12);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 11) = 0;
  }
  v13 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 12);
  if (v13)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v13);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 12) = 0;
  }
  v14 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 13);
  if (v14)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v14);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 13) = 0;
  }
  v15 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 14);
  if (v15)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v15);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 14) = 0;
  }
  v16 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 15);
  if (v16)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v16);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 15) = 0;
  }
  v17 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 16);
  if (v17)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v17);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 16) = 0;
  }
  v18 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 17);
  if (v18)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v18);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 17) = 0;
  }
  v19 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 18);
  if (v19)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v19);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 18) = 0;
  }
  v20 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 19);
  if (v20)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v20);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 19) = 0;
  }
  v21 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 20);
  if (v21)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v21);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 20) = 0;
  }
  v22 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 5);
  if (v22)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v22);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 5) = 0;
  }
  v23 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 6);
  if (v23)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v23);
    MEMORY[0x242690740]();
    *((_QWORD *)this + 6) = 0;
  }
  v24 = (char **)*((_QWORD *)this + 41);
  if (v24)
  {
    EQKit::Font::CharacterProperty::Map::~Map(v24);
    MEMORY[0x242690740]();
  }
  v25 = *((_QWORD *)this + 42);
  if (v25)
    MEMORY[0x242690740](v25, 0x1000C40E670F890);
  v26 = *((_QWORD *)this + 43);
  if (v26)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((_QWORD *)this + 43), *(_QWORD **)(v26 + 8));
    MEMORY[0x242690740](v26, 0x1020C4062D53EE8);
  }
  v27 = *((_QWORD *)this + 44);
  if (v27)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((_QWORD *)this + 44), *(_QWORD **)(v27 + 8));
    MEMORY[0x242690740](v27, 0x1020C4062D53EE8);
  }
  v28 = *((_QWORD *)this + 45);
  if (v28)
  {
    v29 = *(void **)v28;
    if (*(_QWORD *)v28)
    {
      *(_QWORD *)(v28 + 8) = v29;
      operator delete(v29);
    }
    MEMORY[0x242690740](v28, 0x10C402FEFCB83);
  }
  v30 = *((_QWORD *)this + 46);
  if (v30)
  {
    v31 = *(void **)v30;
    if (*(_QWORD *)v30)
    {
      *(_QWORD *)(v30 + 8) = v31;
      operator delete(v31);
    }
    MEMORY[0x242690740](v30, 0x10C402FEFCB83);
  }
  v32 = *((_QWORD *)this + 48);
  if (v32)
  {
    v33 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(v32);
    MEMORY[0x242690740](v33, 0x10E0C40B27302BALL);
  }
  v34 = *((_QWORD *)this + 47);
  if (v34)
  {
    v35 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(v34);
    MEMORY[0x242690740](v35, 0x10E0C40B27302BALL);
  }
  v36 = *((_QWORD *)this + 49);
  if (v36)
  {
    v37 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(v36);
    MEMORY[0x242690740](v37, 0x10E0C40B27302BALL);
  }
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 280, *((_QWORD **)this + 36));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 224));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168));
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this)
{
}

{
  JUMPOUT(0x242690740);
}

uint64_t EQKit::Font::STIXCollection::pruneCaches(uint64_t ***this)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(this[48]);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(this[47]);
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[27]);
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[34]);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  EQKit::StemStretch::Key *v8;
  EQKit::StemStretch::Key *v9;
  EQKit::StemStretch::Key *v10;
  const EQKit::StemStretch::Key *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18[4];
  uint64_t v19;
  EQKit::StemStretch::Key *v20;
  EQKit::StemStretch::Key *v21;
  unint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = a1[3];
      if (v6)
      {
        do
        {
          v7 = v6[8];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          v19 = v5 - v7;
          v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((_QWORD *)v8 + 4) = v19;
            v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          v21 = v9;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v18);
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v10 = v20;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      v23 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      v15 = a1[8];
      v16 = v14 - (_QWORD)v15;
      if (v14 > (unint64_t)v15)
      {
        v17 = 40 * (_QWORD)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((_BYTE *)a1 + 48) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_2411C84E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  EQKit::StemStretch::Key *v8;
  EQKit::StemStretch::Key *v9;
  EQKit::StemStretch::Key *v10;
  const EQKit::StemStretch::Key *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18[4];
  uint64_t v19;
  EQKit::StemStretch::Key *v20;
  EQKit::StemStretch::Key *v21;
  unint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = a1[3];
      if (v6)
      {
        do
        {
          v7 = v6[7];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          v19 = v5 - v7;
          v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((_QWORD *)v8 + 4) = v19;
            v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          v21 = v9;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v18);
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v10 = v20;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      v23 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      v15 = a1[8];
      v16 = v14 - (_QWORD)v15;
      if (v14 > (unint64_t)v15)
      {
        v17 = 40 * (_QWORD)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((_BYTE *)a1 + 48) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_2411C86C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

EQKit::Font::STIXCollection::FontInfo *EQKit::Font::STIXCollection::reloadFonts(EQKit::Font::STIXCollection::FontInfo **this)
{
  EQKit::Font::STIXCollection::FontInfo **v2;

  v2 = this + 1;
  _fontInfoWithName(this + 2, CFSTR("STIXGeneral-Italic"));
  _fontInfoWithName(this + 3, CFSTR("STIXGeneral-Bold"));
  _fontInfoWithName(this + 4, CFSTR("STIXGeneral-BoldItalic"));
  _fontInfoWithName(v2, CFSTR("STIXGeneral-Regular"));
  _fontInfoWithName(this + 6, CFSTR("STIXVariants-Bold"));
  _fontInfoWithName(this + 5, CFSTR("STIXVariants-Regular"));
  _fontInfoWithName(this + 17, CFSTR("STIXIntegralsUp-Regular"));
  _fontInfoWithName(this + 18, CFSTR("STIXIntegralsUp-Bold"));
  _fontInfoWithName(this + 15, CFSTR("STIXIntegralsUpD-Regular"));
  _fontInfoWithName(this + 16, CFSTR("STIXIntegralsUpD-Bold"));
  _fontInfoWithName(this + 19, CFSTR("STIXIntegralsUpSm-Regular"));
  _fontInfoWithName(this + 20, CFSTR("STIXIntegralsUpSm-Bold"));
  _fontInfoWithName(this + 11, CFSTR("STIXIntegralsD-Regular"));
  _fontInfoWithName(this + 12, CFSTR("STIXIntegralsD-Bold"));
  _fontInfoWithName(this + 13, CFSTR("STIXIntegralsSm-Regular"));
  _fontInfoWithName(this + 14, CFSTR("STIXIntegralsSm-Bold"));
  _fontInfoWithName(this + 8, CFSTR("STIXNonUnicode-Italic"));
  _fontInfoWithName(this + 9, CFSTR("STIXNonUnicode-Bold"));
  _fontInfoWithName(this + 10, CFSTR("STIXNonUnicode-BoldItalic"));
  _fontInfoWithName(this + 7, CFSTR("STIXNonUnicode-Regular"));
  _fontInfoWithName(this + 21, CFSTR("STIXGeneral-Regular"));
  _fontInfoWithName(this + 22, CFSTR("STIXSizeOneSym-Regular"));
  _fontInfoWithName(this + 23, CFSTR("STIXSizeTwoSym-Regular"));
  _fontInfoWithName(this + 24, CFSTR("STIXSizeThreeSym-Regular"));
  _fontInfoWithName(this + 25, CFSTR("STIXSizeFourSym-Regular"));
  _fontInfoWithName(this + 26, CFSTR("STIXSizeFiveSym-Regular"));
  _fontInfoWithName(this + 28, CFSTR("STIXGeneral-Bold"));
  _fontInfoWithName(this + 29, CFSTR("STIXSizeOneSym-Bold"));
  _fontInfoWithName(this + 30, CFSTR("STIXSizeTwoSym-Bold"));
  _fontInfoWithName(this + 31, CFSTR("STIXSizeThreeSym-Bold"));
  return _fontInfoWithName(this + 32, CFSTR("STIXSizeFourSym-Bold"));
}

EQKit::Font::STIXCollection::FontInfo *_fontInfoWithName(EQKit::Font::STIXCollection::FontInfo **a1, const __CFString *a2)
{
  EQKit::Font::STIXCollection::FontInfo *v4;
  EQKit::Font::STIXCollection::FontInfo *v5;
  EQKit::Font::STIXCollection::FontInfo *result;

  v4 = *a1;
  if (v4)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v4);
    MEMORY[0x242690740]();
    *a1 = 0;
  }
  v5 = (EQKit::Font::STIXCollection::FontInfo *)operator new();
  result = EQKit::Font::STIXCollection::FontInfo::FontInfo(v5, a2);
  *a1 = v5;
  return result;
}

void sub_2411C8994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1072C40BE800170);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::STIXCollection::fontsLoadedCorrectly(EQKit::Font::STIXCollection *this)
{
  char v1;
  BOOL v2;
  unint64_t i;
  uint64_t v4;
  unint64_t j;
  uint64_t v6;

  v1 = *(_BYTE *)(*((_QWORD *)this + 1) + 40);
  if (v1)
  {
    v1 = *(_BYTE *)(*((_QWORD *)this + 3) + 40);
    if (v1)
    {
      v1 = *(_BYTE *)(*((_QWORD *)this + 2) + 40);
      if (v1)
      {
        v1 = *(_BYTE *)(*((_QWORD *)this + 4) + 40);
        if (v1)
        {
          v1 = *(_BYTE *)(*((_QWORD *)this + 5) + 40);
          if (v1)
          {
            v1 = *(_BYTE *)(*((_QWORD *)this + 6) + 40);
            if (v1)
            {
              v1 = *(_BYTE *)(*((_QWORD *)this + 17) + 40);
              if (v1)
              {
                v1 = *(_BYTE *)(*((_QWORD *)this + 18) + 40);
                if (v1)
                {
                  v1 = *(_BYTE *)(*((_QWORD *)this + 15) + 40);
                  if (v1)
                  {
                    v1 = *(_BYTE *)(*((_QWORD *)this + 16) + 40);
                    if (v1)
                    {
                      v1 = *(_BYTE *)(*((_QWORD *)this + 19) + 40);
                      if (v1)
                      {
                        v1 = *(_BYTE *)(*((_QWORD *)this + 20) + 40);
                        if (v1)
                        {
                          v1 = *(_BYTE *)(*((_QWORD *)this + 11) + 40);
                          if (v1)
                          {
                            v1 = *(_BYTE *)(*((_QWORD *)this + 12) + 40);
                            if (v1)
                            {
                              v1 = *(_BYTE *)(*((_QWORD *)this + 13) + 40);
                              if (v1)
                              {
                                v1 = *(_BYTE *)(*((_QWORD *)this + 14) + 40);
                                if (v1)
                                {
                                  v1 = *(_BYTE *)(*((_QWORD *)this + 8) + 40);
                                  if (v1)
                                  {
                                    v1 = *(_BYTE *)(*((_QWORD *)this + 9) + 40);
                                    if (v1)
                                    {
                                      v1 = *(_BYTE *)(*((_QWORD *)this + 10) + 40);
                                      if (v1)
                                      {
                                        v1 = *(_BYTE *)(*((_QWORD *)this + 7) + 40);
                                        if (v1)
                                        {
                                          v2 = 0;
                                          for (i = 0; i != 6; ++i)
                                          {
                                            v4 = *((_QWORD *)this + i + 21);
                                            if (v4 && !*(_BYTE *)(v4 + 40))
                                              break;
                                            v2 = i > 4;
                                          }
                                          v1 = 0;
                                          if (v2)
                                          {
                                            for (j = 0; j != 6; ++j)
                                            {
                                              v6 = *((_QWORD *)this + j + 28);
                                              if (v6 && !*(_BYTE *)(v6 + 40))
                                                break;
                                              v1 = j > 4;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v1 & 1;
}

void EQKit::Font::STIXCollection::characterPropertyLengthForScript(EQKit::Font::STIXCollection *a1@<X0>, int a2@<W1>, const EQKit::Script::Info *a3@<X2>, EQKit::Unicode *a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  std::string __p;
  std::string __s;

  v5 = (int)a4;
  EQKit::Font::STIXCollection::fontNameForCharacterWithScript(a1, a3, a4, &__s);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
    {
      __p = __s;
      goto LABEL_6;
    }
LABEL_8:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    goto LABEL_9;
  }
  if (!__s.__r_.__value_.__l.__size_)
    goto LABEL_8;
  std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
LABEL_6:
  EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)a1, a2, (uint64_t)&__p, v5, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_2411C8BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::fontNameForCharacterWithScript(EQKit::Font::STIXCollection *this@<X0>, const EQKit::Script::Info *a2@<X2>, EQKit::Unicode *a3@<X1>, std::string *a4@<X8>)
{
  UTF32Char v5;
  UTF32Char v8;
  const __CFCharacterSet *v9;
  std::string __p;

  v5 = a3;
  v8 = EQKit::Font::STIXCollection::lookupChar(this, a3, a2, 0);
  v9 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v8, 0, a2, 0);
  if (v9
    || v8 != v5
    && (v9 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v5, 0, a2, 0)) != 0)
  {
    if (*((char *)v9 + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v9 + 2), *((_QWORD *)v9 + 3));
    else
      __p = *(std::string *)((char *)v9 + 16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a4 = __p;
  }
}

void sub_2411C8D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::characterPropertyLengthForFont(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD v9[2];
  std::string __p;

  v6 = *(_QWORD *)(a1 + 328);
  if (!v6)
    goto LABEL_9;
  v9[0] = a4;
  v9[1] = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v7 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v6 + 24, (uint64_t)v9);
  v8 = (_QWORD *)(v6 + 32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 == v7)
  {
LABEL_9:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
  else
  {
    *(_DWORD *)a5 = *((_DWORD *)v7 + 16);
    *(_QWORD *)(a5 + 8) = v7[9];
  }
}

void sub_2411C8DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double EQKit::Font::STIXCollection::lengthMetricWithScriptAndRule(uint64_t a1, unsigned int a2, EQKit::Script::Info *a3, double a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 336);
  if (v4)
    return EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v4 + 384 * a2), a3, a4);
  else
    return 0.0;
}

double EQKit::Font::STIXCollection::floatMetric(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 336);
  if (v2)
    return *(double *)(v2 + 8 * a2 + 21504);
  else
    return 0.0;
}

CTFontRef EQKit::Font::STIXCollection::newFontWithScript(EQKit::Font::STIXCollection *this, CGFloat *a2)
{
  int v4;
  CTFontRef **v5;
  CTFontRef **v6;
  CTFontRef **v7;
  CTFontRef *v8;

  v4 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)a2) & 3;
  v5 = (CTFontRef **)((char *)this + 24);
  v6 = (CTFontRef **)((char *)this + 8);
  if (v4 == 1)
    v6 = (CTFontRef **)((char *)this + 16);
  if (v4 != 2)
    v5 = v6;
  if (v4 == 3)
    v7 = (CTFontRef **)((char *)this + 32);
  else
    v7 = v5;
  v8 = *v7;
  if (v8 && *v8)
    return CTFontCreateCopyWithAttributes(*v8, a2[2], 0, 0);
  else
    return 0;
}

uint64_t EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  const __CFCharacterSet *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t *v20;
  const __CFCharacterSet *v21;

  v5 = EQKit::Script::Info::symbolicFontTraits(a3) & 3;
  v6 = (uint64_t *)((char *)this + 32);
  v7 = (char *)this + 24;
  v8 = (char *)this + 8;
  if ((_DWORD)v5 == 1)
    v8 = (char *)this + 16;
  if ((_DWORD)v5 != 2)
    v7 = v8;
  if ((_DWORD)v5 != 3)
    v6 = (uint64_t *)v7;
  v9 = *v6;
  if (!*v6 || (v10 = *(const __CFCharacterSet **)(v9 + 8)) == 0 || !CFCharacterSetIsLongCharacterMember(v10, a2))
  {
    v11 = v5 - 1;
    if ((v5 - 1) <= 2)
    {
      v12 = 0;
      v13 = qword_241212470[v11];
      v14 = (uint64_t)*(&off_25112AC58 + (int)v11);
      v15 = (char *)this + 32;
      v16 = (char *)this + 8;
      v17 = (char *)this + 24;
      v18 = (char *)this + 16;
      while (1)
      {
        v19 = *(_DWORD *)(v14 + 4 * v12) & 3;
        v20 = (uint64_t *)v18;
        if (v19 != 1)
        {
          v20 = (uint64_t *)v15;
          if (v19 != 3)
          {
            if (v19 == 2)
              v20 = (uint64_t *)v17;
            else
              v20 = (uint64_t *)v16;
          }
        }
        v9 = *v20;
        if (!*v20)
          goto LABEL_21;
        v21 = *(const __CFCharacterSet **)(v9 + 8);
        if (v21)
          break;
        v9 = 0;
LABEL_22:
        if (++v12 >= v13)
          return v9;
      }
      if (!CFCharacterSetIsLongCharacterMember(v21, a2))
        v9 = 0;
LABEL_21:
      if (v9)
        return v9;
      goto LABEL_22;
    }
    return 0;
  }
  return v9;
}

uint64_t EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  const __CFCharacterSet *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t *v20;
  const __CFCharacterSet *v21;

  v5 = EQKit::Script::Info::symbolicFontTraits(a3) & 3;
  v6 = (uint64_t *)((char *)this + 80);
  v7 = (char *)this + 72;
  v8 = (char *)this + 56;
  if ((_DWORD)v5 == 1)
    v8 = (char *)this + 64;
  if ((_DWORD)v5 != 2)
    v7 = v8;
  if ((_DWORD)v5 != 3)
    v6 = (uint64_t *)v7;
  v9 = *v6;
  if (!*v6 || (v10 = *(const __CFCharacterSet **)(v9 + 8)) == 0 || !CFCharacterSetIsLongCharacterMember(v10, a2))
  {
    v11 = v5 - 1;
    if ((v5 - 1) <= 2)
    {
      v12 = 0;
      v13 = qword_241212470[v11];
      v14 = (uint64_t)*(&off_25112AC58 + (int)v11);
      v15 = (char *)this + 80;
      v16 = (char *)this + 56;
      v17 = (char *)this + 72;
      v18 = (char *)this + 64;
      while (1)
      {
        v19 = *(_DWORD *)(v14 + 4 * v12) & 3;
        v20 = (uint64_t *)v18;
        if (v19 != 1)
        {
          v20 = (uint64_t *)v15;
          if (v19 != 3)
          {
            if (v19 == 2)
              v20 = (uint64_t *)v17;
            else
              v20 = (uint64_t *)v16;
          }
        }
        v9 = *v20;
        if (!*v20)
          goto LABEL_21;
        v21 = *(const __CFCharacterSet **)(v9 + 8);
        if (v21)
          break;
        v9 = 0;
LABEL_22:
        if (++v12 >= v13)
          return v9;
      }
      if (!CFCharacterSetIsLongCharacterMember(v21, a2))
        v9 = 0;
LABEL_21:
      if (v9)
        return v9;
      goto LABEL_22;
    }
    return 0;
  }
  return v9;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v3;
  char *v4;
  const __CFCharacterSet *result;
  char v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v4 = (char *)this + 136;
  v3 = *((_QWORD *)this + 17);
  if (!v3)
    return 0;
  result = *(const __CFCharacterSet **)(v3 + 8);
  if (!result)
    return result;
  if (!CFCharacterSetIsLongCharacterMember(result, a2))
    return 0;
  v9 = EQKit::Script::Info::symbolicFontTraits(a3);
  if (*(_QWORD *)a3)
  {
    v10 = (char *)this + 152;
    if ((v9 & 2) != 0)
      v10 = (char *)this + 160;
    v11 = (char *)this + 104;
    v12 = (char *)this + 112;
LABEL_18:
    if ((v9 & 2) != 0)
      v11 = v12;
    if ((v9 & 1) != 0)
      v10 = v11;
    goto LABEL_22;
  }
  if (!*((_BYTE *)a3 + 8) || !*((_BYTE *)a3 + 10))
  {
    v10 = (char *)this + 144;
    if ((v9 & 2) == 0)
      v10 = v4;
    v11 = (char *)this + 8;
    v12 = (char *)this + 24;
    goto LABEL_18;
  }
  v10 = v4 - 48;
  v13 = (char *)this + 120;
  if ((v9 & 2) != 0)
  {
    v13 = (char *)this + 128;
    v10 = (char *)this + 96;
  }
  if ((v9 & 1) == 0)
    v10 = v13;
LABEL_22:
  v14 = *(_QWORD *)v10;
  if (!*(_QWORD *)v10)
    return 0;
  result = *(const __CFCharacterSet **)(v14 + 8);
  if (result)
  {
    if (CFCharacterSetIsLongCharacterMember(result, a2))
      return (const __CFCharacterSet *)v14;
    else
      return 0;
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, uint64_t a3, const EQKit::Script::Info *a4)
{
  int v6;
  uint64_t v8;
  char *v9;
  const __CFCharacterSet *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const __CFCharacterSet *result;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  UTF32Char *v20;
  _DWORD *v21;
  UTF32Char v22;

  if (a3 == 1)
    goto LABEL_29;
  if (!*((_DWORD *)a4 + 6))
  {
    v15 = *((_QWORD *)this + 45);
    if (v15)
    {
      v16 = *(_DWORD **)v15;
      v17 = *(_DWORD **)(v15 + 8);
      if (v17 != v16)
      {
        v18 = v17 - v16;
        do
        {
          v19 = v18 >> 1;
          v20 = &v16[v18 >> 1];
          v22 = *v20;
          v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          if (v22 < theChar)
            v16 = v21;
          else
            v18 = v19;
        }
        while (v18);
      }
      if (v16 != v17 && *v16 == theChar)
      {
LABEL_29:
        v6 = *((_DWORD *)a4 + 3);
        if (v6 == 4 || v6 == 2)
        {
          v9 = (char *)this + 48;
          v8 = *((_QWORD *)this + 6);
          if (v8)
          {
            v10 = *(const __CFCharacterSet **)(v8 + 8);
            if (v10)
            {
              if (CFCharacterSetIsLongCharacterMember(v10, theChar))
                return *(const __CFCharacterSet **)v9;
            }
          }
        }
        v13 = *((_QWORD *)this + 5);
        v12 = (char *)this + 40;
        v11 = v13;
        if (v13)
        {
          result = *(const __CFCharacterSet **)(v11 + 8);
          if (!result)
            return result;
          v9 = v12;
          if (CFCharacterSetIsLongCharacterMember(result, theChar))
            return *(const __CFCharacterSet **)v9;
        }
      }
    }
  }
  return 0;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  BOOL v3;
  char v6;
  char *v7;
  const __CFCharacterSet *v8;
  const __CFCharacterSet *v9;
  int IsLongCharacterMember;
  const __CFCharacterSet *result;
  uint64_t v12;

  if (*((_BYTE *)a3 + 10))
    v3 = *((_BYTE *)a3 + 8) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v6 = EQKit::Script::Info::symbolicFontTraits(a3);
  v7 = (char *)this + 224;
  if ((v6 & 2) == 0)
    v7 = (char *)this + 168;
  v8 = (const __CFCharacterSet *)*((_QWORD *)v7 + 1);
  if (!v8 || (v9 = (const __CFCharacterSet *)*((_QWORD *)v8 + 1)) == 0)
  {
    if ((v6 & 2) == 0)
      return 0;
    goto LABEL_16;
  }
  IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v9, a2);
  if (IsLongCharacterMember)
    result = v8;
  else
    result = 0;
  if ((v6 & 2) != 0 && !IsLongCharacterMember)
  {
LABEL_16:
    v12 = *((_QWORD *)this + 22);
    if (v12)
    {
      result = *(const __CFCharacterSet **)(v12 + 8);
      if (result)
      {
        if (CFCharacterSetIsLongCharacterMember(result, a2))
          return (const __CFCharacterSet *)v12;
        else
          return 0;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::lookupChar(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3, int a4)
{
  BOOL v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;

  v5 = (a2 & 0xFFFFFFDF) - 65 > 0x19 || (*((_DWORD *)a3 + 3) - 2) >= 3;
  if (!v5 || ((_DWORD)a2 - 945) < 0x19 || ((_DWORD)a2 - 913) < 0x19)
    return (uint64_t)a2;
  result = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  if (!(_DWORD)result)
  {
    v9 = *((_QWORD *)this + 43);
    result = (uint64_t)a2;
    if (v9)
    {
      v12 = *(_QWORD *)(v9 + 8);
      v10 = v9 + 8;
      v11 = v12;
      result = (uint64_t)a2;
      if (v12)
      {
        v13 = v10;
        do
        {
          v14 = *(_DWORD *)(v11 + 28);
          v15 = v14 >= a2;
          if (v14 >= a2)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (v15)
            v13 = v11;
          v11 = *v16;
        }
        while (*v16);
        result = (uint64_t)a2;
        if (v13 != v10)
        {
          result = (uint64_t)a2;
          if (*(_DWORD *)(v13 + 28) <= a2)
            result = *(unsigned int *)(v13 + 32);
        }
      }
    }
    if (a4)
    {
      v17 = *((_QWORD *)this + 44);
      if (v17)
      {
        if ((_DWORD)result == (_DWORD)a2)
        {
          v20 = *(_QWORD *)(v17 + 8);
          v18 = v17 + 8;
          v19 = v20;
          if (v20)
          {
            v21 = v18;
            do
            {
              v22 = *(_DWORD *)(v19 + 28);
              v23 = v22 >= a2;
              if (v22 >= a2)
                v24 = (uint64_t *)v19;
              else
                v24 = (uint64_t *)(v19 + 8);
              if (v23)
                v21 = v19;
              v19 = *v24;
            }
            while (*v24);
            if (v21 != v18)
            {
              result = (uint64_t)a2;
              if (*(_DWORD *)(v21 + 28) <= a2)
                return *(unsigned int *)(v21 + 32);
              return result;
            }
          }
          return (uint64_t)a2;
        }
      }
    }
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::lookupFontForCh(const __CFCharacterSet **this, UTF32Char a2, uint64_t a3, const EQKit::Script::Info *a4, const FontInfo *a5)
{
  const __CFCharacterSet *result;
  const __CFCharacterSet *v11;
  int IsLongCharacterMember;
  const __CFCharacterSet *v13;

  result = EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result)
    return result;
  result = EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result)
    return result;
  result = EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript((EQKit::Font::STIXCollection *)this, a2, a3, a4);
  if (!a5 || result)
  {
    if (result)
      return result;
  }
  else
  {
    v11 = (const __CFCharacterSet *)a5[1];
    if (v11)
    {
      IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v11, a2);
      result = (const __CFCharacterSet *)a5;
      if (IsLongCharacterMember)
        return result;
    }
  }
  result = (const __CFCharacterSet *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result)
    return result;
  v13 = this[22];
  if (!v13)
    goto LABEL_15;
  result = (const __CFCharacterSet *)*((_QWORD *)v13 + 1);
  if (!result)
    goto LABEL_16;
  if (CFCharacterSetIsLongCharacterMember(result, a2))
    result = this[22];
  else
LABEL_15:
    result = 0;
LABEL_16:
  if ((a2 - 57344) >> 11 <= 2 && !result)
    return (const __CFCharacterSet *)EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  return result;
}

uint64_t EQKit::Font::STIXCollection::newAttributedStringWithScript(EQKit::Font::STIXCollection *this, NSString *a2, const EQKit::Script::Info *a3)
{
  NSUInteger v4;
  NSUInteger v5;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  const FontInfo **v11;
  const FontInfo **v12;
  const FontInfo **v13;
  CTFontRef *v14;
  NSUInteger v15;
  CTFontRef CopyWithAttributes;
  CTFontRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CTFontRef *v22;
  NSUInteger v23;
  NSUInteger v24;
  EQKit::Unicode *v25;
  NSUInteger v26;
  uint64_t v27;
  UTF32Char v28;
  const __CFCharacterSet *v29;
  BOOL v30;
  double v31;
  NSUInteger v32;
  double v33;
  NSMutableAttributedString *v34;
  unint64_t v36;
  EQKit::Font::STIXCollection::FontInfo *v38;
  char v39;
  unint64_t v40;
  const FontInfo *v41;
  NSMutableAttributedString *v43;
  unint64_t v44;
  _QWORD v45[3];
  _QWORD v46[3];
  _BYTE v47[256];
  uint64_t v48;
  _NSRange v49;
  _NSRange v50;
  _NSRange v51;
  _NSRange v52;
  _NSRange v53;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = -[NSString length](a2, "length");
  v5 = v4;
  v6 = 4 * v4;
  if (v4 >= 0x40)
  {
    v7 = (unsigned int *)malloc_type_malloc(4 * v4, 0x100004052888210uLL);
    if (!v7)
      return 0;
  }
  else
  {
    v7 = (unsigned int *)v47;
  }
  v44 = 0;
  if (-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, v6, &v44, 2617245952, 0, 0, v5, 0))
  {
    v8 = v44;
    v9 = v44 >> 2;
    v43 = 0;
    v10 = EQKit::Script::Info::symbolicFontTraits(a3) & 3;
    v11 = (const FontInfo **)((char *)this + 24);
    v12 = (const FontInfo **)((char *)this + 8);
    if (v10 == 1)
      v12 = (const FontInfo **)((char *)this + 16);
    if (v10 != 2)
      v11 = v12;
    if (v10 == 3)
      v13 = (const FontInfo **)((char *)this + 32);
    else
      v13 = v11;
    v36 = v8;
    if (v8 < 4)
    {
      v14 = 0;
      v38 = 0;
      v39 = 0;
      v15 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
      if (v15 || v36 < 4 || !v14 || (v39 & 1) != 0)
      {
        v21 = 0;
        if (v15 == 0x7FFFFFFFFFFFFFFFLL || v9 <= v15 || !v14)
          goto LABEL_81;
        v53.location = v15;
        v53.length = v9 - v15;
        _updateAttributedString((id *)&v43, v7, v53, v14, *((CGFloat *)a3 + 2));
      }
      else if (*v14)
      {
        CopyWithAttributes = CTFontCreateCopyWithAttributes(*v14, *((CGFloat *)a3 + 2), 0, 0);
        v17 = CopyWithAttributes;
        if (CopyWithAttributes)
        {
          v18 = *MEMORY[0x24BDC4EE8];
          v45[0] = *MEMORY[0x24BDC4C28];
          v45[1] = v18;
          v19 = *MEMORY[0x24BDBD270];
          v46[0] = CopyWithAttributes;
          v46[1] = v19;
          v45[2] = *MEMORY[0x24BDC5010];
          v46[2] = &unk_251155908;
          v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v46, v45, 3);
          v21 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", a2, v20);
          CFRelease(v17);
          goto LABEL_81;
        }
      }
      v21 = 0;
LABEL_81:
      v34 = v43;
      if (!v21 && v43)
        v21 = -[NSMutableAttributedString copy](v43, "copy");

      goto LABEL_85;
    }
    v39 = 0;
    v38 = 0;
    v22 = 0;
    v23 = 0;
    v41 = *v13;
    v24 = 0x7FFFFFFFFFFFFFFFLL;
    v40 = v9;
    while (1)
    {
      v25 = (EQKit::Unicode *)v7[v23];
      v26 = v23 + 1;
      if (v23 + 1 >= v9)
        v27 = 0;
      else
        v27 = EQKit::Unicode::variationSelector((EQKit::Unicode *)v7[v26]);
      v28 = EQKit::Font::STIXCollection::lookupChar(this, v25, a3, 0);
      v29 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v28, v27, a3, v41);
      v14 = (CTFontRef *)v29;
      if (v29)
        v30 = (_DWORD)v25 == v28;
      else
        v30 = 1;
      if (v30)
      {
        if (!v29)
        {
          v14 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)v25, 0, a3, v41);
          if (!v14)
          {
            v31 = EQKit::Unicode::emSize(v25);
            if (v31 > 0.0)
            {
              if (!v43)
                v43 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x24BDD1688]);
              +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v31 * *((double *)a3 + 2));
              if (!v23)
              {
LABEL_73:
                v14 = 0;
                if (!v27)
                  v26 = v23;
                goto LABEL_64;
              }
LABEL_37:
              if (v24 == 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_73;
              v14 = 0;
              v32 = v23 - v24;
              goto LABEL_55;
            }
            v14 = (CTFontRef *)v38;
            if (!v38)
            {
              if (!*((_QWORD *)a3 + 4))
              {
                v38 = 0;
                if (!v23)
                  goto LABEL_73;
                goto LABEL_37;
              }
              v14 = (CTFontRef *)operator new();
              EQKit::Font::STIXCollection::FontInfo::FontInfo((EQKit::Font::STIXCollection::FontInfo *)v14, *((CFStringRef *)a3 + 4));
              v38 = (EQKit::Font::STIXCollection::FontInfo *)v14;
            }
          }
        }
      }
      else
      {
        v7[v23] = v28;
        v39 = 1;
      }
      if (v28 == 8242)
      {
        v33 = *((double *)a3 + 2);
        if (v24 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v22 = 0;
          goto LABEL_47;
        }
        v32 = v23 - v24;
        if (v22)
        {
          v49.location = v24;
          v49.length = v23 - v24;
          _updateAttributedString((id *)&v43, v7, v49, v22, *((CGFloat *)a3 + 2));
LABEL_47:
          v32 = 0;
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (!v43)
          v43 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x24BDD1688]);
        if (v33 * 0.0 != 0.0)
          +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v33 * 0.0);
        v50.location = v23;
        v50.length = 1;
        _updateAttributedString((id *)&v43, v7, v50, v14, *((CGFloat *)a3 + 2));
        if (v33 * -0.111111111 != 0.0)
          +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", v43, 0.0, 0.0, v33 * -0.111111111);
        v14 = 0;
LABEL_55:
        v15 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_58:
        if (v24 != 0x7FFFFFFFFFFFFFFFLL && v22)
        {
          v51.location = v24;
          v51.length = v32;
          _updateAttributedString((id *)&v43, v7, v51, v22, *((CGFloat *)a3 + 2));
        }
        if (!v27)
        {
LABEL_66:
          v26 = v23;
          goto LABEL_67;
        }
        goto LABEL_62;
      }
      if (v24 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v15 = v23;
        if (!v27)
          goto LABEL_66;
      }
      else
      {
        if (v22 != v14)
        {
          v32 = v23 - v24;
          v15 = v23;
          goto LABEL_58;
        }
        v15 = v24;
        v14 = v22;
        if (!v27)
          goto LABEL_66;
      }
LABEL_62:
      if (v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v52.length = v26 - v15;
        v52.location = v15;
        _updateAttributedString((id *)&v43, v7, v52, v14, *((CGFloat *)a3 + 2));
        v14 = 0;
      }
LABEL_64:
      v15 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_67:
      v23 = v26 + 1;
      v24 = v15;
      v22 = v14;
      v9 = v40;
      if (v26 + 1 >= v40)
        goto LABEL_14;
    }
  }
  v38 = 0;
  v21 = 0;
LABEL_85:
  if (v7 != (unsigned int *)v47)
    free(v7);
  if (v38)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v38);
    MEMORY[0x242690740]();
  }
  return v21;
}

void sub_2411C9BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1072C40BE800170);
  _Unwind_Resume(a1);
}

void _updateAttributedString(id *a1, const unsigned int *a2, _NSRange a3, CTFontRef *a4, CGFloat a5)
{
  NSUInteger length;
  NSUInteger location;
  CTFontRef CopyWithAttributes;
  CTFontRef v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[3];
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  if (a3.length)
  {
    length = a3.length;
    location = a3.location;
    if (!*a1)
      *a1 = objc_alloc_init(MEMORY[0x24BDD1688]);
    if (*a4)
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(*a4, a5, 0, 0);
      if (CopyWithAttributes)
      {
        v12 = CopyWithAttributes;
        v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", &a2[location], 4 * length, 2617245952);
        v14 = *MEMORY[0x24BDC4EE8];
        v18[0] = *MEMORY[0x24BDC4C28];
        v18[1] = v14;
        v15 = *MEMORY[0x24BDBD270];
        v19[0] = v12;
        v19[1] = v15;
        v18[2] = *MEMORY[0x24BDC5010];
        v19[2] = &unk_251155920;
        v16 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v19, v18, 3);
        v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", v13, v16);
        objc_msgSend(*a1, "appendAttributedString:", v17);

        CFRelease(v12);
      }
    }
  }
}

CTFontRef EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript(EQKit::Font::STIXCollection *a1, unsigned int *a2, int a3, EQKit::Script::Info *this, double a5)
{
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  const __CTFont *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t **v26;
  _BOOL4 v27;
  CTFontRef result;
  _BYTE v29[32];

  v10 = EQKit::Script::Info::symbolicFontTraits(this);
  v11 = v10;
  if ((v10 & 2) != 0)
    v12 = (uint64_t)a1 + 224;
  else
    v12 = (uint64_t)a1 + 168;
  if ((v10 & 2) != 0)
    v13 = (uint64_t)a1 + 168;
  else
    v13 = 0;
  v14 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar(a1, (EQKit::Unicode *)*a2, this, 1);
  v15 = v14;
  *a2 = v14;
  if (a3 == 1)
  {
    v22 = *((_QWORD *)a1 + 39);
    if (!v22)
    {
LABEL_30:
      v26 = (uint64_t **)*((_QWORD *)a1 + 47);
      EQKit::Font::STIXCollection::stemStretchKey((CGFloat *)this, (const __CFCharacterSet **)a1, v14, a3, (uint64_t)v29);
      v27 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v26, (const EQKit::StemStretch::Key *)v29) != a3;
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v29);
      v15 = *a2;
      goto LABEL_31;
    }
    v17 = (_QWORD *)((char *)a1 + 312);
    v18 = (_QWORD *)((char *)a1 + 312);
    do
    {
      v23 = *(_DWORD *)(v22 + 32);
      v24 = v23 >= v14;
      if (v23 >= v14)
        v25 = (uint64_t *)v22;
      else
        v25 = (uint64_t *)(v22 + 8);
      if (v24)
        v18 = (_QWORD *)v22;
      v22 = *v25;
    }
    while (*v25);
  }
  else
  {
    if (a3 != 2)
      goto LABEL_30;
    v16 = *((_QWORD *)a1 + 36);
    if (!v16)
      goto LABEL_30;
    v17 = (_QWORD *)((char *)a1 + 288);
    v18 = (_QWORD *)((char *)a1 + 288);
    do
    {
      v19 = *(_DWORD *)(v16 + 32);
      v20 = v19 >= v14;
      if (v19 >= v14)
        v21 = (uint64_t *)v16;
      else
        v21 = (uint64_t *)(v16 + 8);
      if (v20)
        v18 = (_QWORD *)v16;
      v16 = *v21;
    }
    while (*v21);
  }
  if (v18 == v17 || v14 < *((_DWORD *)v18 + 8))
    goto LABEL_30;
  v27 = 0;
LABEL_31:
  result = EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v12, v15, a3, (uint64_t)this, v27, a5);
  if (!result && (v11 & 2) != 0)
    return EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v13, *a2, a3, (uint64_t)this, v27, a5);
  return result;
}

void sub_2411C9EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)&a9);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(uint64_t **a1, const EQKit::StemStretch::Key *a2)
{
  pthread_rwlock_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  const EQKit::StemStretch::Key *v11;

  v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5)
    goto LABEL_2;
  pthread_rwlock_unlock(v4);
  v9 = 0;
  v10 = 0;
  v6 = 0;
  if (!((unsigned int (*)(void))a1[34][2])())
    return v6;
  pthread_rwlock_wrlock(v4);
  v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5)
  {
LABEL_2:
    v5[7] = **a1;
    v6 = *((unsigned int *)v5 + 12);
  }
  else
  {
    v10 = **a1;
    v11 = a2;
    v8 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
    v6 = v9;
    *((_DWORD *)v8 + 12) = v9;
    v8[7] = v10;
    if (a1[4] > a1[7])
      *((_BYTE *)a1 + 48) = 1;
  }
  pthread_rwlock_unlock(v4);
  return v6;
}

void EQKit::Font::STIXCollection::stemStretchKey(CGFloat *this@<X2>, const __CFCharacterSet **a2@<X0>, const __CTFont *a3@<X1>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t v11;
  CTFontRef *v12;
  BOOL v13;
  EQKit::StemStretch::Key *CopyWithAttributes;
  double v15;
  _BYTE v16[32];

  v10 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)this) & 2;
  if (v10)
    v11 = (uint64_t)(a2 + 28);
  else
    v11 = (uint64_t)(a2 + 21);
  v12 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v11, a3, a4, (uint64_t)this, 1, 1.79769313e308);
  if (v12)
    v13 = 1;
  else
    v13 = v10 == 0;
  if (!v13)
    v12 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript((uint64_t)(a2 + 21), a3, a4, (uint64_t)this, 1, 1.79769313e308);
  if (v12)
  {
    EQKit::StemStretch::Key::Key(a5);
  }
  else
  {
    v12 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh(a2, (UTF32Char)a3, 0, (const EQKit::Script::Info *)this, 0);
    EQKit::StemStretch::Key::Key(a5);
    if (!v12)
      return;
  }
  if (*v12)
  {
    CopyWithAttributes = CTFontCreateCopyWithAttributes(*v12, this[2], 0, 0);
    if (CopyWithAttributes)
    {
      v15 = EQKit::Font::STIXCollection::ruleThicknessWithScript(a2, this);
      EQKit::StemStretch::Key::keyForFontAndCharacter(CopyWithAttributes, a3, v15, (uint64_t)v16);
      EQKit::StemStretch::Key::operator=(a5, (uint64_t)v16);
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v16);
      CFRelease(CopyWithAttributes);
    }
  }
}

void sub_2411CA14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::StemStretch::Key *v9;

  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)&a9);
  EQKit::StemStretch::Key::~Key(v9);
  _Unwind_Resume(a1);
}

CTFontRef EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  const __CTFont **v7;
  const __CTFont *v8;

  v7 = (const __CTFont **)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(a1, a2, a3, a4, a5, a6);
  if (v7 && (v8 = *v7) != 0)
    return CTFontCreateCopyWithAttributes(v8, *(CGFloat *)(a4 + 16), 0, 0);
  else
    return 0;
}

uint64_t EQKit::Font::STIXCollection::compositeStretchForCharacter(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;

  if (a3 == 1)
  {
    v9 = *(_QWORD *)(a1 + 312);
    if (!v9)
      return 0;
    v4 = a1 + 312;
    v5 = a1 + 312;
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (v11)
        v5 = v9;
      v9 = *v12;
    }
    while (*v12);
  }
  else
  {
    if (a3 != 2)
      return 0;
    v3 = *(_QWORD *)(a1 + 288);
    if (!v3)
      return 0;
    v4 = a1 + 288;
    v5 = a1 + 288;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
  }
  if (v5 == v4)
    return 0;
  v13 = *(_DWORD *)(v5 + 32);
  v14 = v5 + 40;
  if (v13 <= a2)
    return v14;
  else
    return 0;
}

double EQKit::Font::STIXCollection::accentUnderHAdjustment(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  unsigned int v3;
  double result;
  double v5;
  double v6;

  v6 = 0.0;
  v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  result = v6;
  if (!v3)
    return 0.0;
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::accentHAdjustment(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3, double *a4, double *a5)
{
  __int16 v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  const __CFCharacterSet *result;
  const __CTFont *v16;
  double v17;
  double v18;
  double v19;
  char *v20;
  double v21;
  char *v22;
  double v23;
  void *v24[2];
  char v25;
  int v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  int v30;
  uint64_t v31;
  const void *v32[3];
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  CGFloat size;
  int v38;
  uint64_t v39;

  v10 = *((_WORD *)a3 + 4);
  v11 = *((_BYTE *)a3 + 10);
  v12 = *((_DWORD *)a3 + 3);
  v13 = *((_DWORD *)a3 + 6);
  v14 = *((_QWORD *)a3 + 4);
  v33 = *(_QWORD *)a3;
  v34 = v10;
  v35 = v11;
  v36 = v12;
  size = 12.0;
  v38 = v13;
  v39 = v14;
  result = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, (const EQKit::Script::Info *)&v33, 0);
  if (result)
  {
    result = *(const __CFCharacterSet **)result;
    if (result)
    {
      result = CTFontCreateCopyWithAttributes(result, size, 0, 0);
      if (result)
      {
        v16 = result;
        EQKit::Font::SlantKey::SlantKey((EQKit::Font::SlantKey *)v32, result, a2);
        v17 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(*((uint64_t ***)this + 49), (uint64_t)v32);
        v19 = v18;
        if (v32[0])
          v20 = (char *)objc_msgSend((id)v32[0], "UTF8String");
        else
          v20 = "";
        std::string::basic_string[abi:ne180100]<0>(__p, v20);
        EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)this, 2, (uint64_t)__p, a2, (uint64_t)&v30);
        if (v29 < 0)
          operator delete(__p[0]);
        if (v30)
        {
          v21 = CTFontGetSize(v16);
          v17 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)&v30, v21);
        }
        *a4 = v17;
        *a4 = v17 * (*((double *)a3 + 2) / size);
        if (v32[0])
          v22 = (char *)objc_msgSend((id)v32[0], "UTF8String");
        else
          v22 = "";
        std::string::basic_string[abi:ne180100]<0>(v24, v22);
        EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)this, 1, (uint64_t)v24, a2, (uint64_t)&v26);
        v30 = v26;
        v31 = v27;
        if (v25 < 0)
        {
          operator delete(v24[0]);
          if (!v30)
          {
LABEL_19:
            *a5 = v19;
            *a5 = v19 * (*((double *)a3 + 2) / size);
            CFRelease(v16);
            EQKit::Font::SlantKey::~SlantKey(v32);
            return (const __CFCharacterSet *)1;
          }
        }
        else if (!v26)
        {
          goto LABEL_19;
        }
        v23 = CTFontGetSize(v16);
        v19 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)&v30, v23);
        goto LABEL_19;
      }
    }
  }
  return result;
}

void sub_2411CA48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,const void *a25)
{
  if (a14 < 0)
    operator delete(__p);
  EQKit::Font::SlantKey::~SlantKey(&a25);
  _Unwind_Resume(a1);
}

double EQKit::Font::STIXCollection::accentOverHAdjustment(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  unsigned int v3;
  double result;
  double v5;
  double v6;

  v5 = 0.0;
  v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  result = v5;
  if (!v3)
    return 0.0;
  return result;
}

double EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(uint64_t **a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  double *v5;
  double v6;
  _QWORD *v7;
  double *v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v5 = (double *)std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
  if (v5)
  {
    *((_QWORD *)v5 + 7) = **a1;
    v6 = v5[5];
LABEL_10:
    pthread_rwlock_unlock(v4);
    return v6;
  }
  pthread_rwlock_unlock(v4);
  v12 = 0;
  v11 = 0uLL;
  v6 = 0.0;
  if (((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v4);
    v7 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
    if (v7)
    {
      v8 = (double *)(v7 + 5);
      v7[7] = **a1;
    }
    else
    {
      v12 = **a1;
      v13 = a2;
      v9 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v13);
      *(_OWORD *)(v9 + 5) = v11;
      v9[7] = v12;
      if (a1[4] > a1[7])
        *((_BYTE *)a1 + 48) = 1;
      v8 = (double *)&v11;
    }
    v6 = *v8;
    goto LABEL_10;
  }
  return v6;
}

BOOL EQKit::Font::STIXCollection::isCharacterStretchableInAxis(uint64_t a1, EQKit::Unicode *a2, int a3, uint64_t *a4)
{
  __int16 v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  const __CTFont *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t **v23;
  unsigned int v26[13];
  unsigned __int8 v27;
  _BYTE v28[48];
  int v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;

  v6 = *((_WORD *)a4 + 4);
  v7 = *((_BYTE *)a4 + 10);
  v8 = *((_DWORD *)a4 + 3);
  v9 = *((_DWORD *)a4 + 6);
  v10 = a4[4];
  v31 = *a4;
  v32 = v6;
  v33 = v7;
  v34 = v8;
  v35 = 0x4028000000000000;
  v36 = v9;
  v37 = v10;
  v11 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar((EQKit::Font::STIXCollection *)a1, a2, (const EQKit::Script::Info *)&v31, 1);
  v12 = v11;
  if (a3 == 1)
  {
    v19 = *(_QWORD *)(a1 + 312);
    if (!v19)
      goto LABEL_24;
    v14 = a1 + 312;
    v15 = a1 + 312;
    do
    {
      v20 = *(_DWORD *)(v19 + 32);
      v21 = v20 >= v11;
      if (v20 >= v11)
        v22 = (uint64_t *)v19;
      else
        v22 = (uint64_t *)(v19 + 8);
      if (v21)
        v15 = v19;
      v19 = *v22;
    }
    while (*v22);
  }
  else
  {
    if (a3 != 2)
      goto LABEL_24;
    v13 = *(_QWORD *)(a1 + 288);
    if (!v13)
      goto LABEL_24;
    v14 = a1 + 288;
    v15 = a1 + 288;
    do
    {
      v16 = *(_DWORD *)(v13 + 32);
      v17 = v16 >= v11;
      if (v16 >= v11)
        v18 = (uint64_t *)v13;
      else
        v18 = (uint64_t *)(v13 + 8);
      if (v17)
        v15 = v13;
      v13 = *v18;
    }
    while (*v18);
  }
  if (v15 != v14 && v11 >= *(_DWORD *)(v15 + 32))
    return 1;
LABEL_24:
  v23 = *(uint64_t ***)(a1 + 376);
  EQKit::Font::STIXCollection::stemStretchKey((CGFloat *)&v31, (const __CFCharacterSet **)a1, v11, a3, (uint64_t)v28);
  LODWORD(v23) = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v23, (const EQKit::StemStretch::Key *)v28);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v28);
  if ((_DWORD)v23 == a3)
    return 1;
  v26[0] = v12;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 216), v26, (uint64_t)v28);
  if (v30 - 1 > 0xFD)
  {
    v38 = v12;
    EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 272), &v38, (uint64_t)v26);
    return v27 - 1 < 0xFE && v26[12] == a3;
  }
  else
  {
    return v29 == a3;
  }
}

void sub_2411CA7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

BOOL EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  const FontInfo *v6;
  UTF32Char v7;
  const __CFCharacterSet *v8;

  v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, (UTF32Char)a2, a3);
  v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == (_DWORD)a2)
      v8 = 0;
    else
      v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)a2, 0, a3, 0);
  }
  if (v8 == *((const __CFCharacterSet **)this + 14)
    || v8 == *((const __CFCharacterSet **)this + 13)
    || v8 == *((const __CFCharacterSet **)this + 18)
    || v8 == *((const __CFCharacterSet **)this + 17)
    || v8 == *((const __CFCharacterSet **)this + 20)
    || v8 == *((const __CFCharacterSet **)this + 19))
  {
    v6 = (const FontInfo *)v8;
  }
  return v6 == (const FontInfo *)v8;
}

BOOL EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  const FontInfo *v6;
  UTF32Char v7;
  const __CFCharacterSet *v8;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;

  v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, (UTF32Char)a2, a3);
  v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == (_DWORD)a2)
      v8 = 0;
    else
      v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)a2, 0, a3, 0);
  }
  if (v6 != (const FontInfo *)v8)
    return 0;
  v10 = *((_QWORD *)this + 46);
  if (!v10)
    return 1;
  v11 = *(_DWORD **)v10;
  v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    v13 = v12 - v11;
    do
    {
      v14 = v13 >> 1;
      v15 = &v11[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v11 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  return v11 == v12 || *v11 != (_DWORD)a2;
}

BOOL EQKit::Font::STIXCollection::isCharacterSymmetricWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  const FontInfo *v6;
  UTF32Char v7;
  const __CFCharacterSet *v8;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;

  v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, (UTF32Char)a2, a3);
  v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == (_DWORD)a2)
      v8 = 0;
    else
      v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, (UTF32Char)a2, 0, a3, 0);
  }
  if (v6 != (const FontInfo *)v8)
    return 0;
  v10 = *((_QWORD *)this + 46);
  if (!v10)
    return 1;
  v11 = *(_DWORD **)v10;
  v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    v13 = v12 - v11;
    do
    {
      v14 = v13 >> 1;
      v15 = &v11[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v11 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  return v11 == v12 || *v11 != (_DWORD)a2;
}

CGFloat EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript(EQKit::Font::STIXCollection *this, EQKit::Unicode *a2, CGFloat *a3)
{
  int v4;
  UTF32Char v6;
  const __CFCharacterSet *v7;
  CGSize v8;
  const __CTFont *v9;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v11;
  unsigned int v12;
  CFIndex v13;
  CGGlyph glyphs[2];
  UniChar characters[2];
  CGGlyph v17;
  CGRect boundingRects;

  v4 = (int)a2;
  v6 = EQKit::Font::STIXCollection::lookupChar(this, a2, (const EQKit::Script::Info *)a3, 0);
  v7 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v6, 0, (const EQKit::Script::Info *)a3, 0);
  v8 = *(CGSize *)(MEMORY[0x24BDBF090] + 16);
  boundingRects.origin = (CGPoint)*MEMORY[0x24BDBF090];
  boundingRects.size = v8;
  if (v7)
  {
    v9 = *(const __CTFont **)v7;
    if (v9)
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(v9, a3[2], 0, 0);
      v17 = -1;
      if (CopyWithAttributes)
      {
        v11 = CopyWithAttributes;
        if ((v4 - 0x10000) >> 20)
        {
          v13 = 1;
          LOWORD(v12) = v4;
        }
        else
        {
          v12 = ((v4 + 67043328) >> 10) - 10240;
          characters[1] = v4 & 0x3FF | 0xDC00;
          v13 = 2;
        }
        characters[0] = v12;
        if (CTFontGetGlyphsForCharacters(CopyWithAttributes, characters, glyphs, v13))
        {
          v17 = glyphs[0];
          if (glyphs[0] != 0xFFFF)
          {
            CTFontGetBoundingRectsForGlyphs(v11, kCTFontOrientationHorizontal, &v17, &boundingRects, 1);
            boundingRects.origin.y = -CGRectGetMaxY(boundingRects);
          }
        }
        CFRelease(v11);
      }
    }
  }
  return boundingRects.origin.x;
}

double EQKit::Font::STIXCollection::ruleThicknessWithScript(const __CFCharacterSet **this, CGFloat *a2)
{
  const __CFCharacterSet *v3;
  double v4;
  const __CTFont *v5;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v7;
  const __CTFont *v8;
  EQKitPath *v9;
  EQKitPath *v10;
  CGFloat *v11;

  v3 = EQKit::Font::STIXCollection::lookupFontForCh(this, 0x2212u, 0, (const EQKit::Script::Info *)a2, 0);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(const __CTFont **)v3;
    if (v5)
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(v5, a2[2], 0, 0);
      if (CopyWithAttributes)
      {
        v8 = CopyWithAttributes;
        v9 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)0x2212, CopyWithAttributes, v7);
        if (v9)
        {
          v10 = v9;
          if (*((_BYTE *)v9 + 120))
            v11 = (CGFloat *)((char *)v9 + 88);
          else
            v11 = EQKitPath::computePathBounds((CGFloat *)v9);
          v4 = v11[3];
          EQKitPath::~EQKitPath(v10);
          MEMORY[0x242690740]();
        }
        CFRelease(v8);
      }
    }
  }
  return v4;
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  double v11;
  unint64_t v12;
  _QWORD *v13;
  _DWORD v15[15];
  unsigned int v16;

  v16 = a2;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 48), &v16, (uint64_t)v15);
  if (v15[12] != a3)
    return 0;
  v11 = *(double *)(a4 + 16);
  if (v11 == 0.0)
    return 0;
  v12 = EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength((EQKit::Font::STIXCollection::StretchInfo *)v15, a6 * 12.0 / v11, 0.0, a5);
  if (v12 > 5)
    return 0;
  v13 = *(_QWORD **)(a1 + 8 * v12);
  if (!v13)
    return 0;
  if (*v13)
    return *(_QWORD *)(a1 + 8 * v12);
  return 0;
}

uint64_t EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript(EQKit::Font::STIXCollection *a1, EQKit::Unicode *a2, uint64_t a3, CGFloat *this, CGSize *a5, double a6)
{
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v23;
  unsigned int v24;
  CFIndex v25;
  double v26;
  double MinX;
  double width;
  char v29;
  uint64_t **v30;
  CGFloat height;
  unint64_t *v32;
  unint64_t v33;
  CGRect characters[3];
  CGSize glyphs;
  CGGlyph width_low;
  CGSize v38;

  v12 = EQKit::Script::Info::symbolicFontTraits((EQKit::Script::Info *)this);
  v13 = v12;
  if ((v12 & 2) != 0)
    v14 = (uint64_t)a1 + 224;
  else
    v14 = (uint64_t)a1 + 168;
  if ((v12 & 2) != 0)
    v15 = (uint64_t)a1 + 168;
  else
    v15 = 0;
  v38 = (CGSize)*MEMORY[0x24BDBF148];
  if ((_DWORD)a3 == 2)
  {
    v16 = *((_QWORD *)a1 + 42);
    if (v16)
      v17 = EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v16 + 10752), (const EQKit::Script::Info *)this, 0.0);
    else
      v17 = 0.0;
    a6 = v17 + a6;
  }
  v18 = EQKit::Font::STIXCollection::lookupChar(a1, a2, (const EQKit::Script::Info *)this, 1);
  v19 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v14, v18, a3, (uint64_t)this, 1, a6);
  if (!v19 && (v13 & 2) != 0)
    v19 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v15, v18, a3, (uint64_t)this, 1, a6);
  if (v19)
  {
    v20 = EQKit::Font::STIXCollection::compositeStretchForCharacter((uint64_t)a1, v18, a3);
    width_low = -1;
  }
  else
  {
    v19 = (uint64_t)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)a1, v18, 0, (const EQKit::Script::Info *)this, 0);
    v20 = EQKit::Font::STIXCollection::compositeStretchForCharacter((uint64_t)a1, v18, a3);
    width_low = -1;
    if (!v19)
    {
      v23 = 0;
      v21 = 0.0;
LABEL_36:
      v26 = 0.0;
      MinX = 0.0;
      if (!v20)
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  v21 = 0.0;
  if (!*(_QWORD *)v19)
  {
    LODWORD(v19) = 0;
    v23 = 0;
    goto LABEL_36;
  }
  CopyWithAttributes = CTFontCreateCopyWithAttributes(*(CTFontRef *)v19, this[2], 0, 0);
  v23 = CopyWithAttributes;
  if ((v18 - 1114112) >= 0xFFF00000)
  {
    v24 = ((v18 + 67043328) >> 10) - 10240;
    WORD1(characters[0].origin.x) = v18 & 0x3FF | 0xDC00;
  }
  else
  {
    LOWORD(v24) = v18;
  }
  LOWORD(characters[0].origin.x) = v24;
  if (!CopyWithAttributes)
  {
    LODWORD(v19) = 0;
    goto LABEL_36;
  }
  if ((v18 - 1114112) < 0xFFF00000)
    v25 = 1;
  else
    v25 = 2;
  if (!CTFontGetGlyphsForCharacters(CopyWithAttributes, (const UniChar *)characters, (CGGlyph *)&glyphs, v25)
    || (width_low = LOWORD(glyphs.width), LOWORD(glyphs.width) == 0xFFFF))
  {
    LODWORD(v19) = 1;
    goto LABEL_36;
  }
  CTFontGetBoundingRectsForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, characters, 1);
  CTFontGetAdvancesForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, &glyphs, 1);
  v26 = 0.0;
  MinX = 0.0;
  if ((_DWORD)a3 == 2)
  {
    MinX = CGRectGetMinX(characters[0]);
    width = glyphs.width;
    v26 = width - CGRectGetWidth(characters[0]) - MinX;
    v21 = -CGRectGetMinY(characters[0]);
  }
  LODWORD(v19) = 1;
  if (v20)
  {
LABEL_37:
    EQKitCompositeGlyph::EQKitCompositeGlyph(characters, this, a3, v20);
    v20 = (uint64_t)EQKitCompositeGlyph::createPathWithLength((EQKitCompositeGlyph *)characters, a6, &v38);
    EQKitCompositeGlyph::~EQKitCompositeGlyph((EQKitCompositeGlyph *)characters);
  }
LABEL_38:
  v29 = v19 ^ 1;
  if (v20)
    v29 = 1;
  if ((v29 & 1) == 0)
  {
    v30 = (uint64_t **)*((_QWORD *)a1 + 48);
    EQKit::Font::STIXCollection::stemStretchKey(this, (const __CFCharacterSet **)a1, (const __CTFont *)v18, a3, (uint64_t)characters);
    EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(v30, (const EQKit::StemStretch::Key *)characters, &glyphs);
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)characters);
    if (*(_QWORD *)&glyphs.width && **(_DWORD **)&glyphs.width == (_DWORD)a3)
      v20 = (uint64_t)EQKit::StemStretch::Glyph::newPathWithLength(*(EQKit::StemStretch::Glyph **)&glyphs.width, a6, &v38);
    else
      v20 = 0;
    height = glyphs.height;
    if (*(_QWORD *)&glyphs.height)
    {
      v32 = (unint64_t *)(*(_QWORD *)&glyphs.height + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&height + 16))(COERCE_CGFLOAT(*(_QWORD *)&height));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&height);
      }
    }
  }
  if (v20)
  {
    *a5 = v38;
    a5[1].width = MinX;
    a5[1].height = v26;
    a5[2].width = v21;
  }
  if ((_DWORD)v19)
    CFRelease(v23);
  return v20;
}

void sub_2411CB154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::Font::STIXCollection::SizeVariant *EQKit::Font::STIXCollection::SizeVariant::SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this, const EQKitCacheLRUCounter *a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v4 = operator new();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZN5EQKit4Font14STIXCollection11SizeVariantC2ERK20EQKitCacheLRUCounter_block_invoke;
  v6[3] = &__block_descriptor_40_e33_B24__0r_I8__StretchInfo__6d_iC_16l;
  v6[4] = this;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::EQKitCache(v4, (uint64_t)a2, v6);
  *((_QWORD *)this + 6) = v4;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::setThreshold(v4, 0x3E8uLL, 0x2EEuLL);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return this;
}

void sub_2411CB234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit4Font14STIXCollection11SizeVariantC2ERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, UTF32Char *a2, uint64_t a3)
{
  EQKit::Font::STIXCollection::StretchInfo::setupForCharacterWithVariant(a3, *a2, *(_QWORD *)(a1 + 32));
  return 1;
}

double EQKit::Font::STIXCollection::StretchInfo::setupForCharacterWithVariant(uint64_t a1, UTF32Char theChar, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  double *v10;
  __int128 v11;
  CTFontRef *v12;
  const __CFCharacterSet *v13;
  const __CTFont *v14;
  EQKitPath *v15;
  EQKitPath *v16;
  CGFloat *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  char v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v35;
  _QWORD v36[12];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v36[11] = *MEMORY[0x24BDAC8D0];
  v9 = &v35;
  v10 = (double *)MEMORY[0x24BDBF148];
  do
  {
    v11 = *(_OWORD *)v10;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v12 = *(CTFontRef **)(a3 + 8 * v6);
    if (v12)
    {
      v13 = v12[1];
      if (v13)
      {
        if (CFCharacterSetIsLongCharacterMember(v13, theChar))
        {
          if (*v12)
          {
            v15 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)(unsigned __int16)theChar, *v12, v14);
            if (v15)
            {
              v16 = v15;
              if (*((_BYTE *)v15 + 120))
                v17 = (CGFloat *)((char *)v15 + 88);
              else
                v17 = EQKitPath::computePathBounds((CGFloat *)v15);
              *(_OWORD *)v9 = *((_OWORD *)v17 + 1);
              v7 |= 1 << v6;
              ++v8;
              EQKitPath::~EQKitPath(v16);
              MEMORY[0x242690740](v18, 0x1070C40036CD406, v19, v20);
            }
          }
        }
      }
    }
    ++v6;
    v9 += 16;
  }
  while (v6 != 6);
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (v8 > 1)
  {
    v21 = 0;
    v22 = *v10;
    v23 = v10[1];
    v24 = (double *)v36;
    v25 = 1;
    v26 = *v10;
    v27 = v23;
    do
    {
      if (((v7 >> v21) & 1) != 0)
      {
        v22 = *(v24 - 1);
        v23 = *v24;
        if ((v25 & 1) != 0)
        {
          v27 = *v24;
          v26 = *(v24 - 1);
        }
        v25 = 0;
      }
      ++v21;
      v24 += 2;
    }
    while (v21 != 6);
    *(double *)&v11 = v22 - v26;
    v28 = v23 - v27;
    if (*(double *)&v11 <= 0.0 || v28 <= 0.0)
    {
      if (*(double *)&v11 <= 0.0 && v28 > 0.0)
        v30 = 2;
      else
        v30 = *(double *)&v11 > 0.0;
      v29 = *(double *)&v11 > 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0);
      if (*(double *)&v11 <= 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0))
        return *(double *)&v11;
    }
    else
    {
      v29 = *(double *)&v11 > v28;
      if (*(double *)&v11 > v28)
        v30 = 1;
      else
        v30 = 2;
    }
    v31 = 0;
    *(_DWORD *)(a1 + 48) = v30;
    *(_BYTE *)(a1 + 52) = v7;
    v32 = &v35;
    do
    {
      v33 = v32 + 8;
      if (v29)
        v33 = v32;
      *(_QWORD *)&v11 = *(_QWORD *)v33;
      *(_QWORD *)(a1 + v31) = *(_QWORD *)v33;
      v31 += 8;
      v32 += 16;
    }
    while (v31 != 48);
  }
  return *(double *)&v11;
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v7;
  if (*(_QWORD *)(a1 + 32) > a2)
    *(_BYTE *)(a1 + 48) = 1;
  pthread_rwlock_unlock(v6);
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune((uint64_t **)a1);
}

void EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this)
{
  uint64_t i;
  EQKit::Font::STIXCollection::FontInfo *v3;

  for (i = 0; i != 48; i += 8)
  {
    v3 = *(EQKit::Font::STIXCollection::FontInfo **)((char *)this + i);
    if (v3)
    {
      EQKit::Font::STIXCollection::FontInfo::~FontInfo(v3);
      MEMORY[0x242690740]();
      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char *__p;
  char *v27;
  char *v28;
  BOOL (*v29)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      __p = 0;
      v27 = 0;
      v28 = 0;
      v6 = a1[3];
      if (v6)
      {
        v7 = 0;
        do
        {
          v8 = v5 - v6[10];
          v9 = *((_DWORD *)v6 + 4);
          if (v7 >= v28)
          {
            v10 = __p;
            v11 = (v7 - __p) >> 4;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 60)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v13 = v28 - __p;
            if ((v28 - __p) >> 3 > v12)
              v12 = v13 >> 3;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
              v14 = 0xFFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKitLength>>((uint64_t)&v28, v14);
              v10 = __p;
              v7 = v27;
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[16 * v11];
            *(_DWORD *)v16 = v9;
            *((_QWORD *)v16 + 1) = v8;
            v17 = v16;
            if (v7 != v10)
            {
              do
              {
                *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
                v17 -= 16;
                v7 -= 16;
              }
              while (v7 != v10);
              v10 = __p;
            }
            v7 = v16 + 16;
            __p = v17;
            v28 = &v15[16 * v14];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *(_DWORD *)v7 = v9;
            *((_QWORD *)v7 + 1) = v8;
            v7 += 16;
          }
          v27 = v7;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v18 = (uint64_t)__p;
      }
      else
      {
        v7 = 0;
        v18 = 0;
      }
      v19 = 126 - 2 * __clz((uint64_t)&v7[-v18] >> 4);
      v29 = EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU;
      if (v7 == (char *)v18)
        v20 = 0;
      else
        v20 = v19;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v18, (int *)v7, (uint64_t (**)(int *, int *))&v29, v20, 1);
      v21 = __p;
      v22 = (v27 - __p) >> 4;
      v23 = a1[8];
      v24 = v22 - (_QWORD)v23;
      if (v22 > (unint64_t)v23)
      {
        v25 = 16 * (_QWORD)v23;
        do
        {
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]))
          {
            std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]);
          }
          v25 += 16;
          --v24;
        }
        while (v24);
        v21 = __p;
      }
      *((_BYTE *)a1 + 48) = 0;
      if (v21)
        operator delete(v21);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_2411CB78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength(EQKit::Font::STIXCollection::StretchInfo *this, double a2, double a3, int a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  v5 = 0.0;
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  v7 = 0x7FFFFFFFFFFFFFFFLL;
  while (((*((unsigned __int8 *)this + 52) >> v4) & 1) == 0)
  {
    v9 = v7;
    v8 = v5;
LABEL_10:
    ++v4;
    v5 = v8;
    v7 = v9;
    if (v4 == 6)
      goto LABEL_11;
  }
  v8 = *((double *)this + v4);
  if (v8 + a3 <= a2)
  {
    v9 = v7;
    v8 = v5;
    goto LABEL_8;
  }
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = v4;
LABEL_8:
    v6 = v4;
    goto LABEL_10;
  }
  v9 = v4;
  v6 = v4;
  if (vabdd_f64(v5, a2) >= vabdd_f64(v8, a2))
    goto LABEL_10;
  v9 = v7;
  v6 = v4;
LABEL_11:
  if (a4)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    return v10;
  else
    return v9;
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup@<X0>(uint64_t **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  pthread_rwlock_t *v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t *v11;
  __int128 *v12;
  char *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];
  int v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;

  *(_DWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 52) = -1;
  v6 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
  if (!v7)
  {
    pthread_rwlock_unlock(v6);
    v20 = 0;
    v21 = -1;
    v22 = 0;
    result = ((uint64_t (*)(void))a1[34][2])();
    if (!(_DWORD)result)
      return result;
    pthread_rwlock_wrlock(v6);
    v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
    if (v11)
    {
      v12 = (__int128 *)(v11 + 3);
      v11[10] = **a1;
      if (v11 + 3 == (uint64_t *)a3)
        return pthread_rwlock_unlock(v6);
      *(_DWORD *)(a3 + 48) = *((_DWORD *)v11 + 18);
      v13 = (char *)v11 + 76;
    }
    else
    {
      v22 = **a1;
      v23 = a2;
      v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v23);
      if (v14 + 3 != (_QWORD *)v19)
      {
        *((_DWORD *)v14 + 18) = v20;
        *((_BYTE *)v14 + 76) = v21;
        v16 = v19[1];
        v15 = v19[2];
        *(_OWORD *)(v14 + 3) = v19[0];
        *(_OWORD *)(v14 + 5) = v16;
        *(_OWORD *)(v14 + 7) = v15;
      }
      v14[10] = v22;
      if (a1[4] > a1[7])
        *((_BYTE *)a1 + 48) = 1;
      if (v19 == (_OWORD *)a3)
        return pthread_rwlock_unlock(v6);
      v13 = &v21;
      *(_DWORD *)(a3 + 48) = v20;
      v12 = v19;
    }
    *(_BYTE *)(a3 + 52) = *v13;
    v17 = *v12;
    v18 = v12[2];
    *(_OWORD *)(a3 + 16) = v12[1];
    *(_OWORD *)(a3 + 32) = v18;
    *(_OWORD *)a3 = v17;
    return pthread_rwlock_unlock(v6);
  }
  v7[10] = **a1;
  if (v7 + 3 != (uint64_t *)a3)
  {
    *(_DWORD *)(a3 + 48) = *((_DWORD *)v7 + 18);
    *(_BYTE *)(a3 + 52) = *((_BYTE *)v7 + 76);
    v8 = *(_OWORD *)(v7 + 3);
    v9 = *(_OWORD *)(v7 + 7);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v7 + 5);
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)a3 = v8;
  }
  return pthread_rwlock_unlock(v6);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  const __CTFont *v14;
  __CFString *v15;
  CGFloat *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat MaxY;
  std::string *v20;
  CGFloat *v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  double Size;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  CGPath *Mutable;
  CGAffineTransform v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  _BYTE v54[16];
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  unint64_t *v58;
  uint64_t v59;
  _BYTE v60[32];
  char v61;
  unsigned int v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v62 = 8730;
  EQKitPath::EQKitPath((EQKitPath *)&v58, 0);
  memset(&v57, 0, sizeof(v57));
  v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 88))(a1, &v62, 2, a2, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14, v62);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    if (v58)
    {
      v15 = (__CFString *)CTFontCopyPostScriptName(v14);
      std::string::__assign_external(&v57, (const std::string::value_type *)-[__CFString UTF8String](v15, "UTF8String"));
      CFRelease(v15);
      v16 = v61 ? (CGFloat *)v60 : EQKitPath::computePathBounds((CGFloat *)&v58);
      v63.origin.x = *v16;
      v63.origin.y = v16[1];
      v17 = v16[2];
      v18 = v16[3];
      v63.size.width = v17;
      v63.size.height = v18;
      MaxY = CGRectGetMaxY(v63);
      *(CGFloat *)a4 = v17;
      *(CGFloat *)(a4 + 8) = v18;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(CGFloat *)(a4 + 32) = MaxY;
      if (v58)
        goto LABEL_15;
    }
    CFRelease(v14);
  }
  else if (v58)
  {
    v14 = 0;
    goto LABEL_15;
  }
  v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v62, 2, a2, a4, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    CFRelease(v14);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      v57.__r_.__value_.__l.__size_ = 22;
      v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v57.__r_.__value_.__s + 23) = 22;
      v20 = &v57;
    }
    strcpy((char *)v20, "STIXSizeOneSym-Regular");
    v62 = 9143;
    v14 = CTFontCreateWithName(CFSTR("STIXSizeOneSym-Regular"), *(CGFloat *)(a2 + 16), 0);
  }
LABEL_15:
  if (v61)
    v21 = (CGFloat *)v60;
  else
    v21 = EQKitPath::computePathBounds((CGFloat *)&v58);
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  v25 = v21[3];
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v53, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v53 = v57;
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 4, (uint64_t)&v53, v62, (uint64_t)v54);
  if (v14)
  {
    Size = CTFontGetSize(v14);
    v27 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, Size);
  }
  else
  {
    v27 = 0.0;
  }
  *a3 = v27;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v52 = v57;
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 5, (uint64_t)&v52, v62, (uint64_t)v54);
  if (v14)
  {
    v28 = CTFontGetSize(v14);
    v29 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v28);
  }
  else
  {
    v29 = 0.0;
  }
  a3[1] = v29;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v51, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v51 = v57;
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 6, (uint64_t)&v51, v62, (uint64_t)v54);
  if (v14)
  {
    v30 = CTFontGetSize(v14);
    v31 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v30);
  }
  else
  {
    v31 = 0.0;
  }
  a3[2] = v31;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v50 = v57;
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 7, (uint64_t)&v50, v62, (uint64_t)v54);
  if (v14)
  {
    v32 = CTFontGetSize(v14);
    v33 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v32);
  }
  else
  {
    v33 = 0.0;
  }
  a3[3] = v33;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    v49 = v57;
  EQKit::Font::STIXCollection::characterPropertyLengthForFont(a1, 8, (uint64_t)&v49, v62, (uint64_t)v54);
  if (v14)
  {
    v34 = CTFontGetSize(v14);
    v35 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v54, v34);
  }
  else
  {
    v35 = 0.0;
  }
  a3[4] = v35;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  *a3 = *(double *)(a4 + 32) + *a3;
  v64.origin.x = v22;
  v64.origin.y = v23;
  v64.size.width = v24;
  v64.size.height = v25;
  a3[1] = a3[1] - CGRectGetMinX(v64);
  v65.origin.x = v22;
  v65.origin.y = v23;
  v65.size.width = v24;
  v65.size.height = v25;
  a3[2] = a3[2] - CGRectGetMinX(v65);
  if (v14)
    CFRelease(v14);
  v36 = a3[3];
  v37 = a3[4];
  EQKitPath::findStemForEdge(&v58, 1, (uint64_t)v54);
  if (v54[0])
  {
    EQKitPath::extractPath((EQKitPath *)&v58);
    v38 = v59 + 16 * v55;
    v40 = *(double *)v38;
    v39 = *(_QWORD *)(v38 + 8);
    EQKitPath::extractPath((EQKitPath *)&v58);
    v41 = *(double *)(v59 + 16 * v56);
    if (v40 >= v41)
      v42 = *(double *)(v59 + 16 * v56);
    else
      v42 = v40;
    if (v40 >= v41)
      v41 = v40;
    v43 = v36 + v37 + a6 + v41 - v42;
    v44 = v39;
    v45 = a7;
    EQKitPath::appendSubpathRect((EQKitPath *)&v58, *(CGRect *)&v42);
  }
  Mutable = CGPathCreateMutable();
  memset(&v48, 0, sizeof(v48));
  CGAffineTransformMakeTranslation(&v48, -v22, -v23);
  EQKitPath::appendToCGPath((uint64_t *)&v58, Mutable, &v48, 0);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  EQKitPath::~EQKitPath((EQKitPath *)&v58);
  return Mutable;
}

void sub_2411CBFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a60 < 0)
    operator delete(__p);
  EQKitPath::~EQKitPath((EQKitPath *)&a61);
  _Unwind_Resume(a1);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2, double a3, double a4, double *a5)
{
  CGFloat MaxY;
  const CGPath *v10;
  CGPath *Mutable;
  __int128 v13;
  _BYTE v14[64];
  unint64_t *v15[20];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  CGRect v19;

  v19.origin.x = (*(double (**)(EQKit::Font::STIXCollection *, uint64_t, const EQKit::Script::Info *))(*(_QWORD *)this + 136))(this, 10188, a2);
  MaxY = CGRectGetMaxY(v19);
  v16 = *MEMORY[0x24BDBF148];
  v17 = 0;
  v18 = 0;
  v10 = (const CGPath *)(*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, uint64_t, const EQKit::Script::Info *, __int128 *, double))(*(_QWORD *)this + 96))(this, 10188, 2, a2, &v16, a3 - MaxY);
  EQKitPath::EQKitPath((EQKitPath *)v15, v10);
  CGPathRelease(v10);
  EQKitPath::findStemForEdge(v15, 2, (uint64_t)v14);
  if (v14[0])
  {
    Mutable = CGPathCreateMutable();
    v13 = *MEMORY[0x24BDBEFB0];
    EQKitPath::appendToCGPathWithModifiedStem((uint64_t)v15, Mutable, (double *)&v13, 0, (uint64_t)v14, a4);
  }
  else
  {
    Mutable = 0;
  }
  EQKitPath::~EQKitPath((EQKitPath *)v15);
  return Mutable;
}

void sub_2411CC1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

EQKit::Font::SlantKey *EQKit::Font::SlantKey::SlantKey(EQKit::Font::SlantKey *this, CTFontRef font, int a3)
{
  unsigned int v5;
  CFIndex v6;
  CGGlyph glyphs[2];
  UniChar characters[2];

  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = -1;
  *((_DWORD *)this + 5) = a3;
  if (font)
  {
    if ((a3 - 0x10000) >> 20)
    {
      v6 = 1;
      LOWORD(v5) = a3;
    }
    else
    {
      v5 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      v6 = 2;
    }
    characters[0] = v5;
    if (CTFontGetGlyphsForCharacters(font, characters, glyphs, v6))
      *((_WORD *)this + 8) = glyphs[0];
    *(_QWORD *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

void EQKit::Font::SlantKey::~SlantKey(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

BOOL EQKit::Font::SlantKey::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  v2 = *(const __CFString **)a1;
  v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3)
    return 1;
  result = 0;
  if (v2 && v3)
    return CFStringCompare(v2, v3, 0) == kCFCompareEqualTo;
  return result;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = EQKit::Font::CharacterProperty::Map::Key::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || EQKit::Font::CharacterProperty::Map::Key::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

BOOL EQKit::Font::CharacterProperty::Map::Key::operator<(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4)
    return 1;
  return v3 == v4
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 8), (void **)(a2 + 8)) & 0x80u) != 0;
}

void EQKit::Font::CharacterProperty::Map::~Map(char **this)
{
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)this, this[1]);
}

void std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

EQKit::Font::STIXCollection::FontInfo *EQKit::Font::STIXCollection::FontInfo::FontInfo(EQKit::Font::STIXCollection::FontInfo *this, CFStringRef name)
{
  CFCharacterSetRef *v4;
  std::string *v5;
  const __CTFont *v6;
  __CFString *v7;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (CFCharacterSetRef *)((char *)this + 8);
  v5 = (std::string *)((char *)this + 16);
  *((_BYTE *)this + 40) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = CTFontCreateWithName(name, 12.0, 0);
  *(_QWORD *)this = v6;
  if (v6)
  {
    v7 = (__CFString *)CTFontCopyPostScriptName(v6);
    if (v7)
    {
      *((_BYTE *)this + 40) = CFStringCompare(name, v7, 0) == kCFCompareEqualTo;
      std::string::__assign_external(v5, (const std::string::value_type *)-[__CFString UTF8String](v7, "UTF8String"));
      CFRelease(v7);
    }
    *v4 = CTFontCopyCharacterSet(*(CTFontRef *)this);
  }
  return this;
}

void sub_2411CC57C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::FontInfo::~FontInfo(EQKit::Font::STIXCollection::FontInfo *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, a2[1]);
    EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:ne180100]<EQKit::StemStretch::Glyph,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_25112ABF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2411CC698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:ne180100]((EQKit::StemStretch::Glyph **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x242690740);
}

EQKit::StemStretch::Glyph *std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::__on_zero_shared(uint64_t a1)
{
  EQKit::StemStretch::Glyph *result;

  result = *(EQKit::StemStretch::Glyph **)(a1 + 24);
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x242690740);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

EQKit::StemStretch::Glyph *std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:ne180100](EQKit::StemStretch::Glyph **a1, EQKit::StemStretch::Glyph *a2)
{
  EQKit::StemStretch::Glyph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x242690740);
  }
  return result;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_241212010;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2411CC7F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 6));
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = CFHash((CFTypeRef)v4);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v6;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::StemStretch::Key::operator==((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v4;
  CFHashCode v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v8 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v24 = *(_QWORD *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  v15 = v26;
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2411CCBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2411CCC8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<std::vector<unsigned long> const>::~shared_ptr[abi:ne180100]((uint64_t)(__p + 48));
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(__p + 16));
  }
  if (__p)
    operator delete(__p);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_241212010;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2411CCD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_241212010;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2411CCE5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  const void **v2;
  const void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (const void **)*v2;
      EQKit::Font::SlantKey::~SlantKey(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100]((uint64_t *)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  result = EQKit::Font::CompositeStretch::CompositeStretch((_QWORD *)v6 + 5);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2411CD004(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      EQKit::Font::CompositeStretch::~CompositeStretch((EQKit::Font::CompositeStretch *)(v2 + 40));
    operator delete((void *)v2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100]((uint64_t *)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  result = EQKit::Font::CompositeStretch::CompositeStretch((_QWORD *)v6 + 5);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2411CD180(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

BOOL EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>(uint64_t *a1, const EQKit::StemStretch::Key *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  EQKit::StemStretch::Key *v14;
  EQKit::StemStretch::Key *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::StemStretch::FeatureRange::Span>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (EQKit::StemStretch::Key *)&v10[40 * v4];
  v15 = v14;
  v16 = &v10[40 * v9];
  EQKit::StemStretch::Key::Key(v14, a2);
  *((_QWORD *)v14 + 4) = *((_QWORD *)a2 + 4);
  v15 = (EQKit::StemStretch::Key *)((char *)v15 + 40);
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2411CD360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>,std::reverse_iterator<std::pair<EQKit::StemStretch::Key,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(a7 + v11 - 40), (const EQKit::StemStretch::Key *)(a3 + v11 - 40));
      *(_QWORD *)(a7 + v11 - 8) = *(_QWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2411CD46C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 40)
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(EQKit::StemStretch::Key *a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *), uint64_t a4, char a5)
{
  EQKit::StemStretch::Key *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  EQKit::StemStretch::Key *v15;
  uint64_t v16;
  EQKit::StemStretch::Key *v17;
  EQKit::StemStretch::Key *v18;
  EQKit::StemStretch::Key *v19;
  EQKit::StemStretch::Key *v20;
  char v21;
  char v22;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const EQKit::StemStretch::Key *, uint64_t))
{
  const EQKit::StemStretch::Key *v5;
  uint64_t v7;
  const EQKit::StemStretch::Key *v8;
  const EQKit::StemStretch::Key *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;

  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      v7 = 0;
      v8 = (const EQKit::StemStretch::Key *)a1;
      do
      {
        v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v13, v9);
          v14 = *((_QWORD *)v8 + 9);
          v10 = v7;
          while (1)
          {
            EQKit::StemStretch::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(_QWORD *)(a1 + v10 + 72) = *(_QWORD *)(a1 + v10 + 32);
            if (!v10)
              break;
            v11 = (*a3)((const EQKit::StemStretch::Key *)v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          EQKit::StemStretch::Key::operator=(v12, (uint64_t)v13);
          *(_QWORD *)(v12 + 32) = v14;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v13);
        }
        v5 = (const EQKit::StemStretch::Key *)((char *)v9 + 40);
        v7 += 40;
        v8 = v9;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_2411CD958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const EQKit::StemStretch::Key *, uint64_t))
{
  uint64_t v4;
  const EQKit::StemStretch::Key *v5;
  const EQKit::StemStretch::Key *v7;
  _BYTE v8[32];
  uint64_t v9;

  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    v4 = a1;
    v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)(v5, v4))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v8, v7);
          v9 = *(_QWORD *)(v4 + 72);
          do
          {
            EQKit::StemStretch::Key::operator=(v4 + 40, v4);
            *(_QWORD *)(v4 + 72) = *(_QWORD *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)((const EQKit::StemStretch::Key *)v8, v4) & 1) != 0);
          EQKit::StemStretch::Key::operator=(v4 + 40, (uint64_t)v8);
          *(_QWORD *)(v4 + 72) = v9;
          EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v8);
        }
        v5 = (const EQKit::StemStretch::Key *)((char *)v7 + 40);
        v4 = (uint64_t)v7;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v7 + 40) != a2);
    }
  }
}

void sub_2411CDA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, uint64_t a3, uint64_t (**a4)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  char v8;
  uint64_t result;
  EQKit::StemStretch::Key *v10;
  uint64_t v11;

  v8 = (*a4)(a2, a1);
  result = (*a4)((EQKit::StemStretch::Key *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a2, a3);
    if (!(*a4)(a2, a1))
      return 1;
    v10 = a1;
    v11 = (uint64_t)a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)a2);
    if (!(*a4)((EQKit::StemStretch::Key *)a3, a2))
      return 1;
    v10 = a2;
    v11 = a3;
LABEL_9:
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, a3);
  return 1;
}

EQKit::StemStretch::Key *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(_BYTE *, EQKit::StemStretch::Key *))
{
  EQKit::StemStretch::Key *v6;
  EQKit::StemStretch::Key *v7;
  int v8;
  _BYTE v10[32];
  uint64_t v11;

  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
  v11 = *((_QWORD *)a1 + 4);
  if (((*a3)(v10, (EQKit::StemStretch::Key *)(a2 - 40)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    v7 = (EQKit::StemStretch::Key *)((char *)a1 + 40);
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = (*a3)(v10, v7);
      v7 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v6, a2);
    do
      v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  if ((EQKit::StemStretch::Key *)((char *)v6 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v6 - 40);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v6 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v6 - 40, (uint64_t)v10);
  *((_QWORD *)v6 - 1) = v11;
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v10);
  return v6;
}

void sub_2411CDC7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(char *, _BYTE *))
{
  uint64_t v6;
  char v7;
  char *v8;
  EQKit::StemStretch::Key *v9;
  unint64_t v10;
  _BYTE v12[32];
  uint64_t v13;

  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, a1);
  v6 = 0;
  v13 = *((_QWORD *)a1 + 4);
  do
  {
    v7 = (*a3)((char *)a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  v8 = (char *)a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if ((unint64_t)v8 >= a2)
        break;
      a2 -= 40;
    }
    while (((*a3)((char *)a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)((char *)a2, v12));
  }
  v9 = (EQKit::StemStretch::Key *)((char *)a1 + v6);
  if ((unint64_t)v8 < a2)
  {
    v10 = a2;
    do
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v9, v10);
      do
        v9 = (EQKit::StemStretch::Key *)((char *)v9 + 40);
      while (((*a3)((char *)v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)((char *)v10, v12));
    }
    while ((unint64_t)v9 < v10);
  }
  if ((EQKit::StemStretch::Key *)((char *)v9 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v9 - 40);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v9 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v9 - 40, (uint64_t)v12);
  *((_QWORD *)v9 - 1) = v13;
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v12);
  return (uint64_t)v9 - 40;
}

void sub_2411CDE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  _BOOL8 v6;
  EQKit::StemStretch::Key *v7;
  EQKit::StemStretch::Key *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v15[32];
  uint64_t v16;

  v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((EQKit::StemStretch::Key *)((char *)a2 - 40), (EQKit::StemStretch::Key *)a1))
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100]((EQKit::StemStretch::Key *)a1, (uint64_t)a2 - 40);
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (uint64_t)a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (EQKit::StemStretch::Key *)(a1 + 120), (uint64_t)a2 - 40, a3);
      return v6;
    default:
      v7 = (EQKit::StemStretch::Key *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), a1 + 80, a3);
      v8 = (EQKit::StemStretch::Key *)(a1 + 120);
      if ((EQKit::StemStretch::Key *)(a1 + 120) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    v7 = v8;
    v9 += 40;
    v8 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
    if (v8 == a2)
      return 1;
  }
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v8);
  v16 = *((_QWORD *)v8 + 4);
  v11 = v9;
  while (1)
  {
    EQKit::StemStretch::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(_QWORD *)(a1 + v11 + 152) = *(_QWORD *)(a1 + v11 + 112);
    if (v11 == -80)
      break;
    v12 = (*a3)((EQKit::StemStretch::Key *)v15, (EQKit::StemStretch::Key *)(a1 + v11 + 40));
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
  *(_QWORD *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v15);
    goto LABEL_14;
  }
  v6 = (EQKit::StemStretch::Key *)((char *)v8 + 40) == a2;
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v15);
  return v6;
}

void sub_2411CE02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](EQKit::StemStretch::Key *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[32];

  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v5, a1);
  EQKit::StemStretch::Key::operator=((uint64_t)a1, a2);
  EQKit::StemStretch::Key::operator=(a2, (uint64_t)v5);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v5);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
}

void sub_2411CE0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)&a9);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t a4, uint64_t (**a5)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((EQKit::StemStretch::Key *)a4, a3))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, EQKit::StemStretch::Key *a4, uint64_t a5, uint64_t (**a6)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((EQKit::StemStretch::Key *)a5, a4))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](a1, (uint64_t)a2);
      }
    }
  }
}

EQKit::StemStretch::Key *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const EQKit::StemStretch::Key *v12;
  uint64_t v13;
  EQKit::StemStretch::Key *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (EQKit::StemStretch::Key *)((char *)a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, v12);
        v12 = (const EQKit::StemStretch::Key *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((EQKit::StemStretch::Key *)v6 != a3)
    {
      v14 = (EQKit::StemStretch::Key *)v6;
      do
      {
        if ((*a4)((uint64_t)v14, (uint64_t)a1))
        {
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:ne180100](v14, (uint64_t)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 = (EQKit::StemStretch::Key *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 41)
    {
      v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return (EQKit::StemStretch::Key *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, const EQKit::StemStretch::Key *a4)
{
  unint64_t v4;
  const EQKit::StemStretch::Key *v5;
  int64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v11 = a1 + 40 * v10;
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        v10 = v12;
      }
      if (((*a2)(v11, (uint64_t)v5) & 1) == 0)
      {
        EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v5);
        v16 = *((_QWORD *)v5 + 4);
        do
        {
          v13 = v11;
          EQKit::StemStretch::Key::operator=((uint64_t)v5, v11);
          *((_QWORD *)v5 + 4) = *(_QWORD *)(v11 + 32);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = a1 + 40 * v14;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            v10 = v14;
          }
          v5 = (const EQKit::StemStretch::Key *)v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
        *(_QWORD *)(v13 + 32) = v16;
        EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v15);
      }
    }
  }
}

void sub_2411CE4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  uint64_t v11;

  if (a4 >= 2)
  {
    EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
    v11 = *((_QWORD *)a1 + 4);
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a3, a4);
    v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::StemStretch::Key::operator=(v8, (uint64_t)v10);
      *(_QWORD *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::StemStretch::Key::operator=(v8, a2 - 40);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 - 8);
      EQKit::StemStretch::Key::operator=(a2 - 40, (uint64_t)v10);
      *(_QWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v9 + 40, (uint64_t (**)(uint64_t, uint64_t))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - (uint64_t)a1) >> 3));
    }
    EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v10);
  }
}

void sub_2411CE5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      v10 = v11;
    }
    EQKit::StemStretch::Key::operator=(a1, v9);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  const EQKit::StemStretch::Key *v10;
  uint64_t v11;
  _BYTE v12[32];
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 40 * (v4 >> 1);
    v10 = (const EQKit::StemStretch::Key *)(a2 - 40);
    if ((*a3)(v9, a2 - 40))
    {
      EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, v10);
      v13 = *(_QWORD *)(a2 - 8);
      do
      {
        v11 = v9;
        EQKit::StemStretch::Key::operator=((uint64_t)v10, v9);
        *((_QWORD *)v10 + 4) = *(_QWORD *)(v9 + 32);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 40 * v8;
        v10 = (const EQKit::StemStretch::Key *)v11;
      }
      while (((*a3)(v9, (uint64_t)v12) & 1) != 0);
      EQKit::StemStretch::Key::operator=(v11, (uint64_t)v12);
      *(_QWORD *)(v11 + 32) = v13;
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)v12);
    }
  }
}

void sub_2411CE7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (char *)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

void std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v4 - 40));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4[3];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](v4, 0);
    return 1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      EQKit::StemStretch::Key::~Key((EQKit::StemStretch::Key *)(v2 + 16));
    operator delete((void *)v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v4;
  CFHashCode v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26[3];

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v8 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](v26, 0);
  return v15;
}

void sub_2411CEBD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  *((_DWORD *)v8 + 12) = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2411CEC54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = CFHash((CFTypeRef)v4);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v6;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::Font::SlantKey::operator==((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFHashCode v4;
  CFHashCode v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v8 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::Font::SlantKey::operator==((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v15;
}

void sub_2411CEFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:ne180100]<EQKit::Font::SlantKey const&>((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2411CF04C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:ne180100]<EQKit::Font::SlantKey const&>(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (v3)
    CFRetain(v3);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      EQKit::Font::SlantKey::~SlantKey(v2 + 2);
    operator delete(v2);
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_241212010;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2411CF168(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  char v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 4, (int *)v9);
        if ((_DWORD)result)
        {
          v21 = *(_DWORD *)v9;
          *(_DWORD *)v9 = *(a2 - 4);
          *(a2 - 4) = v21;
          v22 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v9, (int *)(v9 + 16), a2 - 4, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4), a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 4), a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v9 + 16 * (v13 >> 1)), (int *)v9, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v9, (int *)(v9 + 16 * (v13 >> 1)), a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v9 + 16), (int *)(v15 - 16), a2 - 8, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v9 + 32), (int *)(v9 + 16 + 16 * v14), a2 - 12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v15 - 16), (int *)v15, (int *)(v9 + 16 + 16 * v14), a3);
            v16 = *(_DWORD *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(_DWORD *)v15 = v16;
            v17 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)((int *)(v9 - 16), (int *)v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v9, (unint64_t)a2, (uint64_t (**)(__int128 *, int *))a3);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v9, (unint64_t)a2, (uint64_t (**)(int *, __int128 *))a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, v18, a3);
          v9 = (uint64_t)(v18 + 4);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((uint64_t)(v18 + 4), a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v18 + 4);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if ((int *)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(v9, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if ((_OWORD *)result != a2)
  {
    v16 = v3;
    v17 = v4;
    v6 = result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *v10;
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 24) = *(_QWORD *)(v6 + v12 + 8);
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_DWORD *)v14 = v15;
          *(_QWORD *)(v14 + 8) = *((_QWORD *)&v15 + 1);
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 16);
            *(_QWORD *)(v11 + 40) = *(_QWORD *)(v11 + 24);
            result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_DWORD *)(v11 + 32) = v12;
          *(_QWORD *)(v11 + 40) = *((_QWORD *)&v12 + 1);
        }
        v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(int *a1, int *a2, int *a3, uint64_t (**a4)(int *, int *))
{
  char v8;
  uint64_t result;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = (uint64_t *)(a3 + 2);
      result = 1;
      v12 = (uint64_t *)(a1 + 2);
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v17 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v17;
    if ((*a4)(a3, a2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = (uint64_t *)(a3 + 2);
      result = 2;
      v12 = (uint64_t *)(a2 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = (uint64_t *)(a2 + 2);
    v14 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v14;
    if ((*a4)(a2, a1))
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = (uint64_t *)(a1 + 2);
      *a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(__int128 *, int *))
{
  unint64_t v4;
  int *v6;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v12;

  v4 = a2;
  v12 = *(_OWORD *)a1;
  if (((*a3)(&v12, (int *)(a2 - 16)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 4;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 4;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = (*a3)(&v12, v7);
      v7 = v6 + 4;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *v6;
    *v6 = *(_DWORD *)v4;
    *(_DWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v10;
    do
      v6 += 4;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  if (v6 - 4 != a1)
  {
    *a1 = *(v6 - 4);
    *((_QWORD *)a1 + 1) = *((_QWORD *)v6 - 1);
  }
  *(v6 - 4) = v12;
  *((_QWORD *)v6 - 1) = *((_QWORD *)&v12 + 1);
  return v6;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(int *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int *result;
  __int128 v13;

  v6 = 0;
  v13 = *(_OWORD *)a1;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 16;
    }
    while (((*a3)((int *)a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((int *)a2, &v13));
  }
  v8 = (__int128 *)&a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_DWORD *)v8;
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_DWORD *)v9 = v10;
      v11 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v11;
      do
        ++v8;
      while (((*a3)((int *)v8, &v13) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((int *)v9, &v13));
    }
    while ((unint64_t)v8 < v9);
  }
  result = (int *)(v8 - 1);
  if (v8 - 1 != (__int128 *)a1)
  {
    *a1 = *((_DWORD *)v8 - 4);
    *((_QWORD *)a1 + 1) = *((_QWORD *)v8 - 1);
  }
  *((_DWORD *)v8 - 4) = v13;
  *((_QWORD *)v8 - 1) = *((_QWORD *)&v13 + 1);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 4, (int *)a1))
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), a2 - 4, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 4), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 4), a3);
      return 1;
    default:
      v10 = (int *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a3);
      v11 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        *(_DWORD *)(v15 + 48) = *(_DWORD *)(a1 + v14 + 32);
        *(_QWORD *)(v15 + 56) = *(_QWORD *)(a1 + v14 + 40);
        if (v14 == -32)
          break;
        v14 -= 16;
        if (((*a3)((int *)&v17, (int *)(v15 + 16)) & 1) == 0)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_DWORD *)v16 = v17;
      *(_QWORD *)(v16 + 8) = *((_QWORD *)&v17 + 1);
      if (++v13 == 8)
        return v11 + 4 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 4;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(int *, int *))
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)a2, (int *)a3, a5);
  result = (*a5)((int *)a4, (int *)a3);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    result = (*a5)((int *)a3, (int *)a2);
    if ((_DWORD)result)
    {
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      result = (*a5)((int *)a2, (int *)a1);
      if ((_DWORD)result)
      {
        v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(int *, int *))
{
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a2, a3, a4, a6);
  result = (*a6)((int *)a5, (int *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    result = (*a6)((int *)a4, (int *)a3);
    if ((_DWORD)result)
    {
      v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      result = (*a6)((int *)a3, (int *)a2);
      if ((_DWORD)result)
      {
        v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v18;
        result = (*a6)((int *)a2, (int *)a1);
        if ((_DWORD)result)
        {
          v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          v20 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          v15 = *(_DWORD *)v14;
          *(_DWORD *)v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          v16 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, (__int128 *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      v18 = a2 - 16;
      do
      {
        v19 = *(_DWORD *)a1;
        v20 = *(_QWORD *)(a1 + 8);
        v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)v21 = v19;
          *(_QWORD *)(v21 + 8) = v20;
        }
        else
        {
          *(_DWORD *)v21 = *(_DWORD *)v18;
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(v18 + 8);
          *(_DWORD *)v18 = v19;
          *(_QWORD *)(v18 + 8) = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, v21 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v21 + 16 - a1) >> 4);
        }
        v18 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = result + 16 * (v12 + 1);
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        v13 = v15;
      }
      result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_DWORD *)v7 = *(_DWORD *)v14;
          *((_QWORD *)v7 + 1) = *(_QWORD *)(v14 + 8);
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = v8 + 16 * v17;
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, &v19);
          v7 = (__int128 *)v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *(_DWORD *)v16 = v19;
        *(_QWORD *)(v16 + 8) = *((_QWORD *)&v19 + 1);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      v10 = v11;
    }
    *(_DWORD *)a1 = *(_DWORD *)v9;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v9 + 8);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v14 = v4;
    v15 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 16 * (v6 >> 1);
    v11 = (__int128 *)(a2 - 16);
    result = (*a3)(v10, a2 - 16);
    if ((_DWORD)result)
    {
      v13 = *v11;
      do
      {
        v12 = v10;
        *(_DWORD *)v11 = *(_DWORD *)v10;
        *((_QWORD *)v11 + 1) = *(_QWORD *)(v10 + 8);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 16 * v9;
        result = (*a3)(v10, (uint64_t)&v13);
        v11 = (__int128 *)v12;
      }
      while ((result & 1) != 0);
      *(_DWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = *((_QWORD *)&v13 + 1);
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}*,EQKitLayoutStretchedOperator>,std::__unordered_map_hasher<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::hash<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,std::equal_to<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator}>,true>,std::__unordered_map_equal<objc_object  {objcproto15EQKitLayoutNode13EQKitOperator},EQKitLayoutStretchedOperator,std::equal_to,std::hash,true>,std::allocator<EQKitLayoutStretchedOperator>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x58uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 18) = 0;
  *((_BYTE *)v11 + 76) = -1;
  v11[10] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2411D0548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

EQKit::Font::OpenTypeFontCollection *EQKit::Font::OpenTypeFontCollection::OpenTypeFontCollection(EQKit::Font::OpenTypeFontCollection *this, const __CFString *a2)
{
  *(_QWORD *)this = &off_25112AD40;
  *((_QWORD *)this + 1) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  (*(void (**)(EQKit::Font::OpenTypeFontCollection *))(*(_QWORD *)this + 24))(this);
  return this;
}

void sub_2411D05C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  const void **v3;

  EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)(v1 + 24));
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType(v3);
  EQKit::AutoCFType<__CFString const*>::~AutoCFType(v2);
  _Unwind_Resume(a1);
}

void EQKit::Font::OpenTypeFontCollection::~OpenTypeFontCollection(const void **this, const void **a2)
{
  _QWORD *v3;

  v3 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v3 - 26)) = a2[1];
  EQKit::AutoCFType<__CFData const*>::~AutoCFType(this + 3);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType(this + 2);
  EQKit::AutoCFType<__CFString const*>::~AutoCFType(this + 1);
}

void EQKit::Font::OpenTypeFontCollection::~OpenTypeFontCollection(const void **this)
{
}

{
  JUMPOUT(0x242690740);
}

BOOL EQKit::Font::OpenTypeFontCollection::supportsOpenTypeMATHTables(EQKit::Font::OpenTypeFontCollection *this)
{
  return *((_QWORD *)this + 3) != 0;
}

uint64_t EQKit::Font::OpenTypeFontCollection::reloadFonts(EQKit::Font::OpenTypeFontCollection *this)
{
  const void *v2;
  CTFontRef v3;
  CTFontRef v4;
  uint64_t result;
  CFDataRef v6;
  CTFontRef v7;

  v7 = 0;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    v3 = v7;
  }
  else
  {
    v3 = 0;
  }
  v7 = 0;
  *((_QWORD *)this + 3) = v3;
  EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)&v7);
  *((_QWORD *)this + 4) = 0;
  v4 = CTFontCreateWithName(*((CFStringRef *)this + 1), 12.0, 0);
  v7 = v4;
  if (*((_QWORD *)this + 2))
  {
    CFRelease(*((CFTypeRef *)this + 2));
    v4 = v7;
  }
  v7 = 0;
  *((_QWORD *)this + 2) = v4;
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v7);
  result = (*(uint64_t (**)(EQKit::Font::OpenTypeFontCollection *))(*(_QWORD *)this + 32))(this);
  if ((result & 1) != 0)
  {
    *((double *)this + 5) = (double)CTFontGetUnitsPerEm(*((CTFontRef *)this + 2));
    v6 = CTFontCopyTable(*((CTFontRef *)this + 2), 0x4D415448u, 0);
    v7 = v6;
    if (*((_QWORD *)this + 3))
    {
      CFRelease(*((CFTypeRef *)this + 3));
      v6 = v7;
    }
    v7 = 0;
    *((_QWORD *)this + 3) = v6;
    EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)&v7);
    result = *((_QWORD *)this + 3);
    if (result)
    {
      result = (uint64_t)MathHeaderFromTableData((CFDataRef)result);
      *((_QWORD *)this + 4) = result;
    }
  }
  return result;
}

void sub_2411D0778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::AutoCFType<__CFData const*>::~AutoCFType((const void **)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::Font::OpenTypeFontCollection::fontsLoadedCorrectly(EQKit::Font::OpenTypeFontCollection *this)
{
  const __CTFont *v2;
  CFStringRef v3;
  uint64_t v4;
  _BOOL8 v5;
  const __CFString *v7;

  v2 = (const __CTFont *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = CTFontCopyPostScriptName(v2);
    v4 = *((_QWORD *)this + 2);
    v7 = v3;
    if (v4)
      v5 = CFStringCompare(v3, *((CFStringRef *)this + 1), 0) == kCFCompareEqualTo;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
    v7 = &stru_25114C368;
  }
  EQKit::AutoCFType<__CFString const*>::~AutoCFType((const void **)&v7);
  return v5;
}

void sub_2411D0818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::AutoCFType<__CFString const*>::~AutoCFType((const void **)va);
  _Unwind_Resume(a1);
}

unsigned __int16 *EQKit::Font::OpenTypeFontCollection::characterPropertyLengthForScript@<X0>(EQKit::Unicode *a1@<X3>, uint64_t a2@<X0>, int a3@<W1>, const EQKit::Script::Info *a4@<X2>, uint64_t a5@<X8>)
{
  unsigned int v8;
  unsigned __int16 *result;
  unsigned __int16 *TopAttachment;
  unsigned __int16 *v11;
  unsigned __int16 *ItalicsCorrectionInfo;
  unsigned __int16 *v13;
  double v14;
  int v15;

  v8 = EQKit::Font::OpenTypeFontCollection::glyphForCharacterInScript((EQKit::Font::OpenTypeFontCollection *)a2, a1, a4);
  result = (unsigned __int16 *)MathHeaderGetMathGlyphInfo(*(_QWORD *)(a2 + 32));
  if (a3 == 14)
  {
    ItalicsCorrectionInfo = (unsigned __int16 *)MathGlyphInfoGetItalicsCorrectionInfo(result);
    v13 = (unsigned __int16 *)MathGlyphInfoGetItalicsCorrectionInfo(ItalicsCorrectionInfo);
    result = (unsigned __int16 *)CoverageTableGetIndexOfGlyphID(v13, v8);
    if (result == (unsigned __int16 *)-1)
      goto LABEL_10;
    result = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex((uint64_t)ItalicsCorrectionInfo, (unsigned __int16)result);
    if (!result)
      goto LABEL_10;
  }
  else
  {
    if (a3 != 1)
      goto LABEL_10;
    TopAttachment = (unsigned __int16 *)MathGlyphInfoGetTopAttachment((uint64_t)result);
    v11 = (unsigned __int16 *)MathGlyphInfoGetItalicsCorrectionInfo(TopAttachment);
    result = (unsigned __int16 *)CoverageTableGetIndexOfGlyphID(v11, v8);
    if (result == (unsigned __int16 *)-1)
      goto LABEL_10;
    result = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex((uint64_t)TopAttachment, (unsigned __int16)result);
    if (!result)
      goto LABEL_10;
  }
  result = (unsigned __int16 *)MathValueRecordGetValue(result);
  v14 = (double)(int)result / *(double *)(a2 + 40);
  if (v14 == 1.79769313e308)
  {
LABEL_10:
    v15 = 0;
    v14 = 0.0;
    goto LABEL_11;
  }
  v15 = 3;
LABEL_11:
  *(_DWORD *)a5 = v15;
  *(double *)(a5 + 8) = v14;
  return result;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphForCharacterInScript(EQKit::Font::OpenTypeFontCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  int v4;
  int v6;
  int v7;
  BOOL v8;

  v4 = (int)a2;
  v6 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  if (v6)
    v7 = v6;
  else
    v7 = v4;
  if (*((_BYTE *)a3 + 8))
    v8 = *((_BYTE *)a3 + 10) == 0;
  else
    v8 = 1;
  if (v8)
    return EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, v7);
  else
    return EQKit::Font::OpenTypeFontCollection::glyphDisplayVariantForCharacter(this, v7);
}

double EQKit::Font::OpenTypeFontCollection::lengthMetricWithScriptAndRule(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t HorizGlyphCoverageTable;
  double v7;
  unsigned __int16 *v8;

  HorizGlyphCoverageTable = MathVariantsGetHorizGlyphCoverageTable(*(_QWORD *)(a1 + 32));
  v7 = 0.0;
  switch(a2)
  {
    case 0:
      v8 = (unsigned __int16 *)MathConstantsSubscriptShiftDown(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 1:
      if (*(_BYTE *)(a3 + 9))
        v8 = (unsigned __int16 *)MathConstantsSuperscriptShiftUpCramped(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsSuperscriptShiftUp(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 3:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsFractionNumeratorDisplayStyleShiftUp(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsFractionNumeratorShiftUp(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 4:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsFractionDenominatorDisplayStyleShiftDown(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsFractionDenominatorShiftDown(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 5:
      v8 = (unsigned __int16 *)MathConstantsSuperscriptBaselineDropMax(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 6:
      v8 = (unsigned __int16 *)MathConstantsSubscriptBaselineDropMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 7:
      v8 = (unsigned __int16 *)MathConstantsSuperscriptBottomMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 8:
      v8 = (unsigned __int16 *)MathConstantsSubscriptTopMax(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 9:
      v8 = (unsigned __int16 *)MathConstantsSubSuperscriptGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 10:
      v8 = (unsigned __int16 *)MathConstantsSuperscriptBottomMaxWithSubscript(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 11:
    case 47:
      v8 = (unsigned __int16 *)MathConstantsUpperLimitGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 12:
    case 46:
      v8 = (unsigned __int16 *)MathConstantsUpperLimitBaselineRiseMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 13:
      v8 = (unsigned __int16 *)MathConstantsLowerLimitGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 14:
      v8 = (unsigned __int16 *)MathConstantsLowerLimitBaselineDropMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 15:
      v8 = (unsigned __int16 *)MathConstantsMathLeading(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 16:
    case 41:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsStackDisplayStyleGapMin(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsStackGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 18:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsRadicalDisplayStyleVerticalGap(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsRadicalVerticalGap(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 33:
      v8 = (unsigned __int16 *)MathConstantsAxisHeight(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 34:
      v8 = (unsigned __int16 *)MathConstantsAccentBaseHeight(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 35:
      v8 = (unsigned __int16 *)MathConstantsFractionRuleThickness(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 36:
      v8 = (unsigned __int16 *)MathConstantsSpaceAfterScript(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 37:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsFractionNumDisplayStyleGapMin(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsFractionNumeratorGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 38:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsFractionDenomDisplayStyleGapMin(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsFractionDenominatorGapMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 39:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsStackTopDisplayStyleShiftUp(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsStackTopShiftUp(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 40:
      if (*(_BYTE *)(a3 + 8))
        v8 = (unsigned __int16 *)MathConstantsStackBottomDisplayStyleShiftDown(HorizGlyphCoverageTable);
      else
        v8 = (unsigned __int16 *)MathConstantsStackBottomShiftDown(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 42:
      v8 = (unsigned __int16 *)MathConstantsStretchStackBottomShiftDown(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 43:
      v8 = (unsigned __int16 *)MathConstantsStretchStackGapAboveMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 44:
      v8 = (unsigned __int16 *)MathConstantsStretchStackTopShiftUp(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 45:
      v8 = (unsigned __int16 *)MathConstantsStretchStackGapBelowMin(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 48:
      v8 = (unsigned __int16 *)MathConstantsUnderbarVerticalGap(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 49:
      v8 = (unsigned __int16 *)MathConstantsUnderbarExtraDescender(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 50:
      v8 = (unsigned __int16 *)MathConstantsOverbarVerticalGap(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 51:
      v8 = (unsigned __int16 *)MathConstantsOverbarExtraAscender(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 52:
      v8 = (unsigned __int16 *)MathConstantsRadicalExtraAscender(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 53:
      v8 = (unsigned __int16 *)MathConstantsRadicalRuleThickness(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 54:
      v8 = (unsigned __int16 *)MathConstantsRadicalKernBeforeDegree(HorizGlyphCoverageTable);
      goto LABEL_57;
    case 55:
      v8 = (unsigned __int16 *)MathConstantsRadicalKernAfterDegree(HorizGlyphCoverageTable);
LABEL_57:
      if (v8)
        v7 = (double)(int)MathValueRecordGetValue(v8) / *(double *)(a1 + 40) * *(double *)(a3 + 16);
      break;
    default:
      return v7;
  }
  return v7;
}

unsigned __int16 *EQKit::Font::OpenTypeFontCollection::floatMetric(uint64_t a1, int a2)
{
  unsigned __int16 *result;

  result = (unsigned __int16 *)MathVariantsGetHorizGlyphCoverageTable(*(_QWORD *)(a1 + 32));
  switch(a2)
  {
    case 2:
    case 4:
      result = (unsigned __int16 *)MathConstantsScriptScriptPercentScaleDown((uint64_t)result);
      break;
    case 3:
      result = (unsigned __int16 *)MathValueRecordGetValue(result);
      break;
    case 5:
      MathConstantsRadicalDegreeBottomRaisePercent((uint64_t)result);
      result = (unsigned __int16 *)CFStringCompare(CFSTR("STIXTwoMath-Regular"), *(CFStringRef *)(a1 + 8), 0);
      break;
    default:
      return result;
  }
  return result;
}

const __CTFont *EQKit::Font::OpenTypeFontCollection::newFontWithScript(EQKit::Font::OpenTypeFontCollection *this, CGFloat *a2)
{
  const __CTFont *result;

  result = (const __CTFont *)*((_QWORD *)this + 2);
  if (result)
    return CTFontCreateCopyWithAttributes(result, a2[2], 0, 0);
  return result;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphForCharacter(EQKit::Font::OpenTypeFontCollection *this, int a2)
{
  const __CTFont *v2;
  unsigned int v3;
  CFIndex v4;
  _BOOL4 GlyphsForCharacters;
  CGGlyph v6;
  CGGlyph glyphs[2];
  UniChar characters[2];

  v2 = (const __CTFont *)*((_QWORD *)this + 2);
  *(_DWORD *)characters = 0;
  *(_DWORD *)glyphs = -1;
  if ((a2 - 0x10000) >> 20)
  {
    v4 = 1;
    LOWORD(v3) = a2;
  }
  else
  {
    v3 = ((a2 + 67043328) >> 10) - 10240;
    characters[1] = a2 & 0x3FF | 0xDC00;
    v4 = 2;
  }
  characters[0] = v3;
  GlyphsForCharacters = CTFontGetGlyphsForCharacters(v2, characters, glyphs, v4);
  v6 = glyphs[0];
  if (!GlyphsForCharacters)
    return (CGGlyph)-1;
  return v6;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphDisplayVariantForCharacter(EQKit::Font::OpenTypeFontCollection *this, int a2)
{
  uint64_t HorizGlyphCoverageTable;
  unsigned int FullAdvance;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  HorizGlyphCoverageTable = MathVariantsGetHorizGlyphCoverageTable(*((_QWORD *)this + 4));
  FullAdvance = GlyphPartRecordGetFullAdvance(HorizGlyphCoverageTable);
  v6 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, a2);
  v7 = EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)this, v6, 2);
  if (!v7)
    return 0xFFFFLL;
  v8 = v7;
  result = glyphVariantForMinAdvance(FullAdvance, v7);
  if ((_DWORD)result == 0xFFFF)
    return largestGlyphVariantInConstruction(v8);
  return result;
}

uint64_t EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t MathVariants;
  uint64_t v6;
  unsigned __int16 *TopAttachment;
  uint64_t IndexOfGlyphID;
  unsigned __int16 *HorizGlyphCoverageTable;
  uint64_t v11;

  if (a2 != 0xFFFF)
  {
    MathVariants = MathHeaderGetMathVariants(*(_QWORD *)(a1 + 32));
    v6 = MathVariants;
    if (a3 == 2)
    {
      TopAttachment = (unsigned __int16 *)MathGlyphInfoGetTopAttachment(MathVariants);
      IndexOfGlyphID = CoverageTableGetIndexOfGlyphID(TopAttachment, a2);
      if (IndexOfGlyphID != -1)
        return MathVariantsGetVertGlyphConstructionAtIndex(v6, (unsigned __int16)IndexOfGlyphID);
    }
    else
    {
      HorizGlyphCoverageTable = (unsigned __int16 *)MathVariantsGetHorizGlyphCoverageTable(MathVariants);
      v11 = CoverageTableGetIndexOfGlyphID(HorizGlyphCoverageTable, a2);
      if (v11 != -1)
        return MathVariantsGetHorizGlyphConstructionAtIndex(v6, (unsigned __int16)v11);
    }
  }
  return 0;
}

uint64_t glyphVariantForMinAdvance(unsigned int a1, uint64_t a2)
{
  unsigned int StartConnectorLength;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned __int16 *GlyphVariantAtIndex;

  StartConnectorLength = GlyphPartRecordGetStartConnectorLength(a2);
  if (!StartConnectorLength)
    return 0xFFFFLL;
  v5 = StartConnectorLength;
  v6 = 0;
  while (1)
  {
    GlyphVariantAtIndex = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex(a2, v6);
    if (GlyphPartRecordGetStartConnectorLength((uint64_t)GlyphVariantAtIndex) >= a1)
      break;
    if (v5 <= ++v6)
      return 0xFFFFLL;
  }
  return GlyphPartRecordGetGlyphID(GlyphVariantAtIndex);
}

uint64_t largestGlyphVariantInConstruction(uint64_t a1)
{
  __int16 StartConnectorLength;
  unsigned __int16 *GlyphVariantAtIndex;

  StartConnectorLength = GlyphPartRecordGetStartConnectorLength(a1);
  GlyphVariantAtIndex = (unsigned __int16 *)MathGlyphConstructionGetGlyphVariantAtIndex(a1, (unsigned __int16)(StartConnectorLength - 1));
  return GlyphPartRecordGetGlyphID(GlyphVariantAtIndex);
}

uint64_t EQKit::Font::OpenTypeFontCollection::newAttributedStringWithScript(EQKit::Font::OpenTypeFontCollection *this, NSString *a2, CGFloat *a3)
{
  NSUInteger v6;
  unsigned int *v7;
  const EQKit::Script::Info *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  const __CTFont *v16;
  CTFontRef CopyWithAttributes;
  uint64_t v18;
  id v19;
  void *v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  CGGlyph v32;
  __CFString *v33;
  CTGlyphInfoRef v34;
  int *v36;
  unint64_t v37;
  uint64_t v38;
  CFTypeRef v39;
  _QWORD v40[3];
  _QWORD v41[4];

  v41[3] = *MEMORY[0x24BDAC8D0];
  v6 = -[NSString length](a2, "length");
  v7 = (unsigned int *)malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  v37 = 0;
  if (-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, 4 * v6, &v37, 2617245952, 0, 0, v6, 0))
  {
    v9 = v37;
    v10 = v37 >> 2;
    if (v37 >= 4)
    {
      if (v10 <= 1)
        v11 = 1;
      else
        v11 = v37 >> 2;
      v12 = v7;
      do
      {
        v13 = *v12;
        v14 = EQKit::Unicode::lookupChar(*v12, (uint64_t)a3, v8);
        if (v14)
          v15 = v14 == v13;
        else
          v15 = 1;
        if (!v15)
          *v12 = v14;
        ++v12;
        --v11;
      }
      while (v11);
    }
    v16 = (const __CTFont *)*((_QWORD *)this + 2);
    if (v16)
      CopyWithAttributes = CTFontCreateCopyWithAttributes(v16, a3[2], 0, 0);
    else
      CopyWithAttributes = 0;
    v19 = objc_alloc(MEMORY[0x24BDD17C8]);
    v36 = (int *)v7;
    v20 = (void *)objc_msgSend(v19, "initWithBytes:length:encoding:", v7, v37, 2617245952);
    v40[0] = *MEMORY[0x24BDC4C28];
    v21 = (id)CFMakeCollectable(CopyWithAttributes);
    v22 = *MEMORY[0x24BDC4EE8];
    v23 = *MEMORY[0x24BDBD270];
    v41[0] = v21;
    v41[1] = v23;
    v24 = *MEMORY[0x24BDC5010];
    v40[1] = v22;
    v40[2] = v24;
    v41[2] = &unk_251155938;
    v25 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v41, v40, 3);
    v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1688]), "initWithString:attributes:", v20, v25);

    if (*((_BYTE *)a3 + 8) && *((_BYTE *)a3 + 10) && v9 >= 4)
    {
      v27 = 0;
      v28 = *MEMORY[0x24BDC4EF8];
      if (v10 <= 1)
        v29 = 1;
      else
        v29 = v10;
      v30 = v36;
      do
      {
        v31 = EQKit::Font::OpenTypeFontCollection::glyphDisplayVariantForCharacter(this, *v30);
        if (v31 != 0xFFFF)
        {
          v32 = v31;
          v33 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", v30, 4, 2617245952);
          v34 = CTGlyphInfoCreateWithGlyph(v32, CopyWithAttributes, v33);

          v38 = v28;
          v39 = (id)CFMakeCollectable(v34);
          objc_msgSend(v26, "addAttributes:range:", objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1), v27, 1);
        }
        ++v27;
        ++v30;
      }
      while (v29 != v27);
    }
    free(v36);
    v18 = objc_msgSend(v26, "copy");

  }
  else
  {
    free(v7);
    return 0;
  }
  return v18;
}

CTFontRef EQKit::Font::OpenTypeFontCollection::newFontForStretchedCharacterWithScript(EQKit::Font::OpenTypeFontCollection *a1, int *a2, const EQKit::Script::Info *a3, uint64_t a4)
{
  int v5;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  const __CTFont *v12;

  v5 = (int)a3;
  v7 = *a2;
  v8 = EQKit::Unicode::lookupChar(*a2, a4, a3);
  if (v8)
    v9 = v8;
  else
    v9 = v7;
  v10 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(a1, v9);
  if (v10 == 0xFFFF)
    return 0;
  if (EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)a1, v10, v5))
    return 0;
  v12 = (const __CTFont *)*((_QWORD *)a1 + 2);
  if (!v12)
    return 0;
  else
    return CTFontCreateCopyWithAttributes(v12, *(CGFloat *)(a4 + 16), 0, 0);
}

CGMutablePathRef EQKit::Font::OpenTypeFontCollection::newCGPathForStretchedCharacterWithScript(uint64_t a1, EQKit::Unicode *this, const EQKit::Script::Info *a3, uint64_t a4, uint64_t a5, double a6)
{
  int v9;
  int v10;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _WORD *v16;
  const __CTFont *CopyWithAttributes;
  double v18;
  unsigned int v19;
  int v20;
  CGPathRef PathForGlyph;
  CGMutablePathRef v22;
  char *GlyphAssembly;
  unsigned __int16 *MathVariants;
  unsigned __int16 Value;
  int EndConnectorLength;
  uint64_t v27;
  unsigned int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  double v36;
  double v37;
  CGFloat a;
  CGSize *MutableCopy;
  const CGPath *v40;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MaxY;
  CGFloat v46;
  double AdvancesForGlyphs;
  double v48;
  CGFloat MinY;
  CGFloat MinX;
  CGSize *v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  double v55;
  CGSize *v56;
  double v57;
  double v58;
  CGFloat v59;
  CGSize *advances[3];
  _QWORD v62[5];
  CGAffineTransform v63;
  CGAffineTransform cf;
  _QWORD v65[5];
  const void *v66[2];
  __int16 v67;
  double v68;
  CGFloat v69;
  int v70;
  CGGlyph glyphs;
  const __CTFont *v72;
  CGFloat v73;
  CGAffineTransform v74;
  _OWORD v75[2];
  CGRect PathBoundingBox;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  v9 = (int)a3;
  v10 = (int)this;
  v12 = EQKit::Unicode::lookupChar((uint64_t)this, a4, a3);
  if (v12)
    v13 = v12;
  else
    v13 = v10;
  v14 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter((EQKit::Font::OpenTypeFontCollection *)a1, v13);
  v15 = EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph(a1, v14, v9);
  if (!v15)
    return 0;
  v16 = (_WORD *)v15;
  if (v9 == 2)
    a6 = (*(double (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 56))(a1, 15, a4, 0.0) + a6;
  v73 = 0.0;
  CopyWithAttributes = *(const __CTFont **)(a1 + 16);
  if (CopyWithAttributes)
    CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, *(CGFloat *)(a4 + 16), 0, 0);
  v72 = CopyWithAttributes;
  v18 = CTFontGetSize(CopyWithAttributes) / *(double *)(a1 + 40);
  v19 = llround(a6 / v18);
  v20 = glyphVariantForMinAdvance(v19, (uint64_t)v16);
  glyphs = v20;
  if (v20 == 0xFFFF)
  {
    GlyphAssembly = MathGlyphConstructionGetGlyphAssembly(v16);
    if (GlyphAssembly)
    {
      MathVariants = (unsigned __int16 *)MathHeaderGetMathVariants(*(_QWORD *)(a1 + 32));
      Value = MathValueRecordGetValue(MathVariants);
      v74.a = 0.0;
      *(_QWORD *)&v74.b = &v74;
      *(_QWORD *)&v74.c = 0x5012000000;
      *(_QWORD *)&v74.d = __Block_byref_object_copy__9;
      *(_QWORD *)&v74.tx = __Block_byref_object_dispose__10;
      *(_QWORD *)&v74.ty = &unk_24124964B;
      v75[0] = xmmword_2412124F0;
      v75[1] = unk_241212500;
      EndConnectorLength = GlyphPartRecordGetEndConnectorLength((uint64_t)GlyphAssembly);
      v27 = MEMORY[0x24BDAC760];
      *(_QWORD *)&cf.a = MEMORY[0x24BDAC760];
      *(_QWORD *)&cf.b = 3221225472;
      *(_QWORD *)&cf.c = ___ZL26getGlyphAssemblyParametersPK14_GlyphAssemblyddP23GlyphAssemblyParameters_block_invoke;
      *(_QWORD *)&cf.d = &unk_25112AEA0;
      *(_QWORD *)&cf.tx = &v74;
      LOWORD(cf.ty) = EndConnectorLength;
      enumerateGlyphAssembly((uint64_t)GlyphAssembly, 1u, (uint64_t)&cf);
      v28 = *(unsigned __int16 *)(*(_QWORD *)&v74.b + 72);
      v29 = *(unsigned __int16 *)(*(_QWORD *)&v74.b + 74);
      if (EndConnectorLength != (unsigned __int16)(v29 + v28))
        __assert_rtn("getGlyphAssemblyParameters", "EQKitOpenTypeFontCollection.mm", 869, "glyphAssemblyPartsCount(metrics, 1) == basePartsCount");
      v30 = (double)v19;
      v31 = *(double *)(*(_QWORD *)&v74.b + 48);
      v32 = *(double *)(*(_QWORD *)&v74.b + 56);
      v33 = vcvtpd_s64_f64(((double)v19 - (v32 + v31 * 0.0 - (double)Value * (double)(v29 - 1)))/ (v31 - (double)Value * (double)v28));
      v34 = v33 & ~(v33 >> 63);
      v35 = (unsigned __int16)(v29 + v28 * (v33 & ~(unsigned __int16)(v33 >> 63)));
      v36 = (v32
           + (double)(unsigned __int16)(v33 & ~(unsigned __int16)(v33 >> 63)) * v31
           + (double)(int)(v35 - 1) * -0.0
           - v30)
          / (double)v35;
      if (v36 >= *(double *)(*(_QWORD *)&v74.b + 64))
        v37 = *(double *)(*(_QWORD *)&v74.b + 64);
      else
        v37 = v36;
      _Block_object_dispose(&v74, 8);
      v74.a = 0.0;
      *(_QWORD *)&v74.b = &v74;
      *(_QWORD *)&v74.c = 0x2020000000;
      v74.d = 0.0;
      a = COERCE_DOUBLE(CGPathCreateMutable());
      cf.a = a;
      v65[0] = v27;
      v65[1] = 3321888768;
      v65[2] = ___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke;
      v65[3] = &unk_25112AE18;
      v66[0] = v72;
      if (v72)
      {
        CFRetain(v72);
        a = cf.a;
      }
      v65[4] = &v74;
      v66[1] = *(const void **)&v37;
      v67 = v34;
      v70 = v9;
      v68 = v18;
      v69 = a;
      if (a != 0.0)
        CFRetain(*(CFTypeRef *)&a);
      enumerateGlyphAssembly((uint64_t)GlyphAssembly, (unsigned __int16)v34, (uint64_t)v65);
      MutableCopy = (CGSize *)CGPathCreateMutableCopy(*(CGPathRef *)&cf.a);
      advances[0] = MutableCopy;
      if (v73 != 0.0)
      {
        CFRelease(*(CFTypeRef *)&v73);
        MutableCopy = advances[0];
      }
      advances[0] = 0;
      v73 = *(double *)&MutableCopy;
      EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)advances);
      EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)&v69);
      EQKit::AutoCFType<__CTFont const*>::~AutoCFType(v66);
      EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)&cf);
      _Block_object_dispose(&v74, 8);
      v20 = 0xFFFF;
      goto LABEL_25;
    }
    v20 = largestGlyphVariantInConstruction((uint64_t)v16);
    glyphs = v20;
    PathForGlyph = CTFontCreatePathForGlyph(v72, v20, 0);
    *(_QWORD *)&v74.a = PathForGlyph;
  }
  else
  {
    PathForGlyph = CTFontCreatePathForGlyph(v72, v20, 0);
    *(_QWORD *)&v74.a = PathForGlyph;
  }
  v73 = *(double *)&PathForGlyph;
  v74.a = 0.0;
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v74);
LABEL_25:
  v40 = *(const CGPath **)&v73;
  if (v73 != 0.0)
  {
    PathBoundingBox = CGPathGetPathBoundingBox(*(CGPathRef *)&v73);
    x = PathBoundingBox.origin.x;
    y = PathBoundingBox.origin.y;
    width = PathBoundingBox.size.width;
    height = PathBoundingBox.size.height;
    memset(&cf, 0, sizeof(cf));
    MaxY = CGRectGetMaxY(PathBoundingBox);
    CGAffineTransformMakeTranslation(&v63, 0.0, MaxY);
    CGAffineTransformScale(&cf, &v63, 1.0, -1.0);
    v46 = COERCE_DOUBLE(MEMORY[0x2426901E8](*(_QWORD *)&v73, &cf));
    v74.a = v46;
    if (v73 != 0.0)
    {
      CFRelease(*(CFTypeRef *)&v73);
      v46 = v74.a;
    }
    v73 = v46;
    v74.a = 0.0;
    EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v74);
    if (v20 == 0xFFFF)
    {
      v52 = MathGlyphConstructionGetGlyphAssembly(v16);
      v53 = GlyphPartRecordGetEndConnectorLength((uint64_t)v52);
      v74.a = 0.0;
      *(_QWORD *)&v74.b = &v74;
      *(_QWORD *)&v74.c = 0x4812000000;
      *(_QWORD *)&v74.d = __Block_byref_object_copy__0;
      *(_QWORD *)&v74.tx = __Block_byref_object_dispose__0;
      *(_QWORD *)&v74.ty = &unk_24124964B;
      v54 = v53;
      LOWORD(advances[0]) = 0;
      std::vector<unsigned short>::vector(v75, v53, advances);
      v62[0] = MEMORY[0x24BDAC760];
      v62[1] = 3221225472;
      v62[2] = ___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke_7;
      v62[3] = &unk_25112AE50;
      v62[4] = &v74;
      enumerateGlyphAssembly((uint64_t)v52, 1u, (uint64_t)v62);
      std::vector<CGSize>::vector(advances, v53, MEMORY[0x24BDBF148]);
      CTFontGetAdvancesForGlyphs(v72, kCTFontOrientationHorizontal, *(const CGGlyph **)(*(_QWORD *)&v74.b + 48), advances[0], v53);
      v55 = 0.0;
      if (v53)
      {
        v56 = advances[0];
        do
        {
          v57 = v56->width;
          ++v56;
          v58 = v57;
          if (v55 < v57)
            v55 = v58;
          --v54;
        }
        while (v54);
      }
      v80.origin.x = x;
      v80.origin.y = y;
      v80.size.width = width;
      v80.size.height = height;
      v59 = CGRectGetWidth(v80);
      *(CGFloat *)a5 = width;
      *(CGFloat *)(a5 + 8) = height;
      *(_QWORD *)(a5 + 16) = 0;
      *(double *)(a5 + 24) = fmax(v55 - v59, 0.0);
      *(_QWORD *)(a5 + 32) = 0;
      if (advances[0])
      {
        advances[1] = advances[0];
        operator delete(advances[0]);
      }
      _Block_object_dispose(&v74, 8);
      if (*(_QWORD *)&v75[0])
      {
        *((_QWORD *)&v75[0] + 1) = *(_QWORD *)&v75[0];
        operator delete(*(void **)&v75[0]);
      }
    }
    else
    {
      AdvancesForGlyphs = CTFontGetAdvancesForGlyphs(v72, kCTFontOrientationHorizontal, &glyphs, 0, 1);
      v77.origin.x = x;
      v77.origin.y = y;
      v77.size.width = width;
      v77.size.height = height;
      v48 = CGRectGetWidth(v77);
      v78.origin.x = x;
      v78.origin.y = y;
      v78.size.width = width;
      v78.size.height = height;
      MinY = CGRectGetMinY(v78);
      *(CGFloat *)a5 = width;
      *(CGFloat *)(a5 + 8) = height;
      *(_QWORD *)(a5 + 16) = 0;
      *(double *)(a5 + 24) = fmax(AdvancesForGlyphs - v48, 0.0);
      *(CGFloat *)(a5 + 32) = -MinY;
      if (AdvancesForGlyphs == 0.0)
      {
        memset(&v74, 0, sizeof(v74));
        v79.origin.x = x;
        v79.origin.y = y;
        v79.size.width = width;
        v79.size.height = height;
        MinX = CGRectGetMinX(v79);
        CGAffineTransformMakeTranslation(&v74, -MinX, 0.0);
        v51 = (CGSize *)MEMORY[0x2426901E8](*(_QWORD *)&v73, &v74);
        advances[0] = v51;
        if (v73 != 0.0)
        {
          CFRelease(*(CFTypeRef *)&v73);
          v51 = advances[0];
        }
        advances[0] = 0;
        v73 = *(double *)&v51;
        EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)advances);
      }
    }
    v40 = *(const CGPath **)&v73;
  }
  v22 = CGPathCreateMutableCopy(v40);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v72);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&v73);
  return v22;
}

void sub_2411D1964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v23 - 208));
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)(v23 - 224));
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v23 - 216));
  _Unwind_Resume(a1);
}

uint64_t enumerateGlyphAssembly(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned __int16 v8;
  uint64_t PartAtIndex;
  int v10;
  char v11;
  char v12;

  result = GlyphPartRecordGetEndConnectorLength(a1);
  if (!(_DWORD)result)
    return result;
  v7 = result;
  v8 = 0;
  while (1)
  {
    PartAtIndex = GlyphAssemblyGetPartAtIndex(a1, v8);
    result = GlyphPartRecordGetPartFlags(PartAtIndex);
    if ((result & 1) == 0)
    {
      v11 = 0;
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))(a3 + 16))(a3, v8, PartAtIndex, &v11);
      if (v11)
        return result;
      goto LABEL_10;
    }
    if (a2)
      break;
LABEL_10:
    if (v7 <= ++v8)
      return result;
  }
  v10 = 0;
  while (1)
  {
    v12 = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))(a3 + 16))(a3, v8, PartAtIndex, &v12);
    if (v12)
      return result;
    if (++v10 >= a2)
      goto LABEL_10;
  }
}

void sub_2411D1C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_40c38_ZTSKN5EQKit10AutoCFTypeIPK8__CTFontEE72c35_ZTSKN5EQKit10AutoCFTypeIP6CGPathEE(uint64_t a1, uint64_t a2)
{
  EQKit::AutoCFType<__CTFont const*>::AutoCFType((const void **)(a1 + 40), (const void **)(a2 + 40));
  return EQKit::AutoCFType<CGPath *>::AutoCFType((const void **)(a1 + 72), (const void **)(a2 + 72));
}

const void **__destroy_helper_block_e8_40c38_ZTSKN5EQKit10AutoCFTypeIPK8__CTFontEE72c35_ZTSKN5EQKit10AutoCFTypeIP6CGPathEE(uint64_t a1)
{
  const void **v1;

  v1 = (const void **)(a1 + 40);
  EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)(a1 + 72));
  return EQKit::AutoCFType<__CTFont const*>::~AutoCFType(v1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK5EQKit4Font22OpenTypeFontCollection40newCGPathForStretchedCharacterWithScriptEjN10EQKitTypes4Axis4EnumEdRKNS_6Script4InfoERN9EQKitPath4InfoE_block_invoke_7(uint64_t a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;

  result = GlyphPartRecordGetGlyphID(a3);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 2 * a2) = result;
  return result;
}

BOOL EQKit::Font::OpenTypeFontCollection::isCharacterStretchableInAxis(EQKit::Font::OpenTypeFontCollection *a1, EQKit::Unicode *this, const EQKit::Script::Info *a3, uint64_t a4)
{
  int v4;
  int v5;
  int v7;
  int v8;
  unsigned int v9;

  v4 = (int)a3;
  v5 = (int)this;
  v7 = EQKit::Unicode::lookupChar((uint64_t)this, a4, a3);
  if (v7)
    v8 = v7;
  else
    v8 = v5;
  v9 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(a1, v8);
  return v9 != 0xFFFF && EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)a1, v9, v4) != 0;
}

BOOL EQKit::Font::OpenTypeFontCollection::isCharacterNaturalSizeWithScript(EQKit::Font::OpenTypeFontCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  BOOL v3;
  int v4;
  int v6;
  int v7;
  unsigned int v8;

  if (*((_BYTE *)a3 + 8))
    v3 = *((_BYTE *)a3 + 10) == 0;
  else
    v3 = 1;
  if (v3)
    return 1;
  v4 = (int)a2;
  v6 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  v7 = v6 ? v6 : v4;
  v8 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, v7);
  return v8 == 0xFFFF || EQKit::Font::OpenTypeFontCollection::glyphConstructionForGlyph((uint64_t)this, v8, 2) != 0;
}

BOOL EQKit::Font::OpenTypeFontCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::OpenTypeFontCollection *this, EQKit::Unicode *a2, const EQKit::Script::Info *a3)
{
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t MathGlyphInfo;
  unsigned __int16 *ExtendedShapesCoverageTable;

  v3 = (int)a2;
  v5 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, a3);
  if (v5)
    v6 = v5;
  else
    v6 = v3;
  v7 = EQKit::Font::OpenTypeFontCollection::glyphForCharacter(this, v6);
  if (v7 == 0xFFFF)
    return 0;
  v8 = v7;
  MathGlyphInfo = MathHeaderGetMathGlyphInfo(*((_QWORD *)this + 4));
  ExtendedShapesCoverageTable = (unsigned __int16 *)MathGlyphInfoGetExtendedShapesCoverageTable(MathGlyphInfo);
  return CoverageTableGetIndexOfGlyphID(ExtendedShapesCoverageTable, v8) == -1;
}

uint64_t EQKit::Font::OpenTypeFontCollection::isCharacterSymmetricWithScript(EQKit::Font::OpenTypeFontCollection *this, unsigned int a2, const EQKit::Script::Info *a3)
{
  return 1;
}

CGFloat EQKit::Font::OpenTypeFontCollection::naturalBoundsOfCharacterWithScript(const __CTFont **this, EQKit::Unicode *a2, CGFloat *a3)
{
  int v4;
  int v6;
  int v7;
  const __CTFont *CopyWithAttributes;
  CGSize v9;
  const __CTFont *v11;
  CGGlyph glyphs;
  CGRect boundingRects;

  v4 = (int)a2;
  v6 = EQKit::Unicode::lookupChar((uint64_t)a2, (uint64_t)a3, (const EQKit::Script::Info *)a3);
  if (v6)
    v7 = v6;
  else
    v7 = v4;
  glyphs = EQKit::Font::OpenTypeFontCollection::glyphForCharacter((EQKit::Font::OpenTypeFontCollection *)this, v7);
  CopyWithAttributes = this[2];
  if (CopyWithAttributes)
    CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, a3[2], 0, 0);
  v11 = CopyWithAttributes;
  v9 = *(CGSize *)(MEMORY[0x24BDBF090] + 16);
  boundingRects.origin = (CGPoint)*MEMORY[0x24BDBF090];
  boundingRects.size = v9;
  CTFontGetBoundingRectsForGlyphs(CopyWithAttributes, kCTFontOrientationHorizontal, &glyphs, &boundingRects, 1);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v11);
  return boundingRects.origin.x;
}

void sub_2411D1F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType(&a9);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::OpenTypeFontCollection::newCGPathForRadicalWithOverbar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  double x;
  double y;
  CGFloat width;
  CGFloat height;
  double MaxX;
  double MinY;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  uint64_t v22;
  double v24;
  CGAffineTransform v25;
  CGMutablePathRef MutableCopy;
  CGPathRef path;
  CGRect PathBoundingBox;
  CGRect v29;
  CGRect v30;

  path = (CGPathRef)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 8730, 2, a2, a4);
  PathBoundingBox = CGPathGetPathBoundingBox(path);
  x = PathBoundingBox.origin.x;
  y = PathBoundingBox.origin.y;
  width = PathBoundingBox.size.width;
  height = PathBoundingBox.size.height;
  v24 = a6;
  MutableCopy = CGPathCreateMutableCopy(path);
  v29.origin.x = x;
  v29.origin.y = y;
  v29.size.width = width;
  v29.size.height = height;
  MaxX = CGRectGetMaxX(v29);
  v30.origin.x = x;
  v30.origin.y = y;
  v30.size.width = width;
  v30.size.height = height;
  MinY = CGRectGetMinY(v30);
  v16 = a7 * 0.5;
  v17 = MaxX - a7 * 0.5;
  v19 = *(double *)(a3 + 24);
  v18 = *(double *)(a3 + 32);
  CGPathMoveToPoint(MutableCopy, 0, v17, MinY);
  v20 = MinY + a7;
  CGPathAddLineToPoint(MutableCopy, 0, v17, v20);
  v21 = v17 + v16 + v19 + v18 + v24;
  CGPathAddLineToPoint(MutableCopy, 0, v21, v20);
  CGPathAddLineToPoint(MutableCopy, 0, v21, MinY);
  CGPathCloseSubpath(MutableCopy);
  memset(&v25, 0, sizeof(v25));
  CGAffineTransformMakeTranslation(&v25, -x, -y);
  v22 = MEMORY[0x2426901E8](MutableCopy, &v25);
  EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)&MutableCopy);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&path);
  return v22;
}

void sub_2411D20DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void *v10;
  va_list va;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, const void *);
  EQKit::AutoCFType<CGPath *>::~AutoCFType((const void **)va);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)va1);
  _Unwind_Resume(a1);
}

CGPath *EQKit::Font::OpenTypeFontCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::OpenTypeFontCollection *this, CGFloat *a2, double a3, double a4, double *a5)
{
  const __CTFont *v8;
  CGGlyph v9;
  const __CTFont *CopyWithAttributes;
  const CGPath *v11;
  CGPath *Mutable;
  __int128 v14;
  CGGlyph glyphs[32];
  UniChar characters[4];
  CGAffineTransform v17;
  CGAffineTransform v18;
  const CGPath *PathForGlyph;
  const __CTFont *v20;
  CGRect PathBoundingBox;

  v8 = (const __CTFont *)*((_QWORD *)this + 2);
  *(_DWORD *)characters = 10188;
  *(_DWORD *)glyphs = -1;
  if (CTFontGetGlyphsForCharacters(v8, characters, glyphs, 1))
    v9 = glyphs[0];
  else
    v9 = -1;
  CopyWithAttributes = (const __CTFont *)*((_QWORD *)this + 2);
  if (CopyWithAttributes)
    CopyWithAttributes = CTFontCreateCopyWithAttributes(CopyWithAttributes, a2[2], 0, 0);
  v20 = CopyWithAttributes;
  PathForGlyph = CTFontCreatePathForGlyph(CopyWithAttributes, v9, 0);
  PathBoundingBox = CGPathGetPathBoundingBox(PathForGlyph);
  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeTranslation(&v17, 0.0, PathBoundingBox.size.height);
  CGAffineTransformScale(&v18, &v17, 1.0, -1.0);
  v11 = (const CGPath *)MEMORY[0x2426901E8](PathForGlyph, &v18);
  *(_QWORD *)characters = v11;
  if (PathForGlyph)
  {
    CFRelease(PathForGlyph);
    v11 = *(const CGPath **)characters;
  }
  *(_QWORD *)characters = 0;
  PathForGlyph = v11;
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)characters);
  EQKitPath::EQKitPath((EQKitPath *)characters, PathForGlyph);
  EQKitPath::findStemForEdge((unint64_t **)characters, 2, (uint64_t)glyphs);
  if (LOBYTE(glyphs[0]))
  {
    Mutable = CGPathCreateMutable();
    v14 = *MEMORY[0x24BDBEFB0];
    EQKitPath::appendToCGPathWithModifiedStem((uint64_t)characters, Mutable, (double *)&v14, 0, (uint64_t)glyphs, a4);
  }
  else
  {
    Mutable = 0;
  }
  EQKitPath::~EQKitPath((EQKitPath *)characters);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)&PathForGlyph);
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)&v20);
  return Mutable;
}

void sub_2411D2284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  EQKit::AutoCFType<CGPath const*>::~AutoCFType((const void **)(v11 - 64));
  EQKit::AutoCFType<__CTFont const*>::~AutoCFType((const void **)(v11 - 56));
  _Unwind_Resume(a1);
}

void sub_2411D22D0()
{
  JUMPOUT(0x2411D22C0);
}

double EQKit::Font::OpenTypeFontCollection::accentOverHAdjustment(EQKit::Font::OpenTypeFontCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  _QWORD v5[2];

  (*(void (**)(_QWORD *__return_ptr, EQKit::Font::OpenTypeFontCollection *, uint64_t, const EQKit::Script::Info *, uint64_t))(*(_QWORD *)this + 48))(v5, this, 1, a3, a2);
  return EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v5, *((double *)a3 + 2)) * 0.5;
}

double EQKit::Font::OpenTypeFontCollection::accentUnderHAdjustment(EQKit::Font::OpenTypeFontCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  _QWORD v5[2];

  (*(void (**)(_QWORD *__return_ptr, EQKit::Font::OpenTypeFontCollection *, uint64_t, const EQKit::Script::Info *, uint64_t))(*(_QWORD *)this + 48))(v5, this, 2, a3, a2);
  return EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v5, *((double *)a3 + 2)) * 0.5;
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2411D23DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

_QWORD *std::vector<CGSize>::vector(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2411D2498(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t ___ZL26getGlyphAssemblyParametersPK14_GlyphAssemblyddP23GlyphAssemblyParameters_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t result;
  double *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = GlyphPartRecordGetPartFlags(a3) & 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v6)
  {
    ++*(_WORD *)(v7 + 72);
    result = GlyphPartRecordGetFullAdvance(a3);
    v9 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  }
  else
  {
    ++*(_WORD *)(v7 + 74);
    result = GlyphPartRecordGetFullAdvance(a3);
    v9 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
  }
  *v9 = *v9 + (double)result;
  if (v6 | a2)
  {
    result = GlyphPartRecordGetStartConnectorLength(a3);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(double *)(v10 + 64) > (double)result)
      *(double *)(v10 + 64) = (double)result;
  }
  if (v6 || *(unsigned __int16 *)(a1 + 40) - 1 > a2)
  {
    result = GlyphPartRecordGetEndConnectorLength(a3);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(double *)(v11 + 64) > (double)result)
      *(double *)(v11 + 64) = (double)result;
  }
  return result;
}

const void **EQKit::AutoCFType<__CFString const*>::~AutoCFType(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **EQKit::AutoCFType<__CFData const*>::~AutoCFType(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **EQKit::AutoCFType<CGPath *>::~AutoCFType(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **EQKit::AutoCFType<__CTFont const*>::AutoCFType(const void **a1, const void **a2)
{
  const void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    CFRetain(v3);
  return a1;
}

const void **EQKit::AutoCFType<CGPath *>::AutoCFType(const void **a1, const void **a2)
{
  const void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    CFRetain(v3);
  return a1;
}

_QWORD *EQKit::Font::CharacterProperty::Map::newMapFromDictionary(EQKit::Font::CharacterProperty::Map *this, NSDictionary *a2, const EQKit::Environment::Version *a3)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  std::string::size_type v22;
  void **v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  EQKit::StemStretch::Config::Entry *v31;
  EQKit::StemStretch::Config::Entry *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  EQKit::Font::CharacterProperty::Map *obj;
  uint64_t v39;
  uint64_t i;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t **v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48[2];
  void *__p[2];
  char v50;
  char v51;
  unint64_t v52;
  std::string v53;
  void *v54[2];
  unsigned __int8 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  std::string v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t *v69;
  _BYTE v70[128];
  _BYTE v71[128];
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)operator new();
  v4[2] = 0;
  v4[1] = 0;
  *v4 = v4 + 1;
  v4[4] = 0;
  v4[3] = v4 + 4;
  v47 = (uint64_t **)(v4 + 3);
  v4[5] = 0;
  v4[7] = 0;
  v4[6] = v4 + 7;
  v45 = (uint64_t **)(v4 + 6);
  v36 = v4;
  v4[8] = 0;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  obj = this;
  v39 = -[EQKit::Font::CharacterProperty::Map countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v65, v72, 16);
  if (v39)
  {
    v37 = *(_QWORD *)v66;
    do
    {
      for (i = 0; i != v39; ++i)
      {
        if (*(_QWORD *)v66 != v37)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v64, (char *)objc_msgSend(v5, "UTF8String"));
          v6 = objc_opt_class();
          v7 = (void *)EQKitUtilDynamicCast(v6, -[EQKit::Font::CharacterProperty::Map objectForKey:](obj, "objectForKey:", v5));
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v60, v71, 16);
          if (v8)
          {
            v42 = *(_QWORD *)v61;
            v44 = v7;
            do
            {
              v9 = 0;
              v43 = v8;
              do
              {
                if (*(_QWORD *)v61 != v42)
                  objc_enumerationMutation(v7);
                v46 = v9;
                v10 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v9);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v11 = EQKitUtilUTF32CharFromString(v10);
                  if (v11)
                  {
                    v12 = objc_opt_class();
                    v13 = (void *)EQKitUtilDynamicCast(v12, objc_msgSend(v44, "objectForKey:", v10));
                    v14 = v13;
                    if (!a2->super.isa
                      && (objc_msgSend(v13, "objectForKey:", CFSTR("analyzeMethod"))
                       || objc_msgSend(v14, "objectForKey:", CFSTR("minStemLength"))))
                    {
                      v15 = (id)objc_msgSend(v14, "mutableCopy");
                      v16 = objc_alloc_init(MEMORY[0x24BDBCED8]);
                      if (objc_msgSend(v14, "objectForKey:", CFSTR("analyzeMethod")))
                        objc_msgSend(v16, "setObject:forKey:", objc_msgSend(v14, "objectForKey:", CFSTR("analyzeMethod")), CFSTR("analyzeMethod"));
                      if (objc_msgSend(v14, "objectForKey:", CFSTR("minStemLength")))
                        objc_msgSend(v16, "setObject:forKey:", objc_msgSend(v14, "objectForKey:", CFSTR("minStemLength")), CFSTR("minStemLength"));
                      objc_msgSend(v15, "removeObjectForKey:", CFSTR("analyzeMethod"));
                      objc_msgSend(v15, "removeObjectForKey:", CFSTR("minStemLength"));
                      objc_msgSend(v15, "setObject:forKey:", v16, CFSTR("stemStretch"));

                    }
                    else
                    {
                      v15 = v14;
                    }
                    v58 = 0u;
                    v59 = 0u;
                    v56 = 0u;
                    v57 = 0u;
                    v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v56, v70, 16);
                    if (v17)
                    {
                      v18 = *(_QWORD *)v57;
                      do
                      {
                        v19 = 0;
                        do
                        {
                          if (*(_QWORD *)v57 != v18)
                            objc_enumerationMutation(v15);
                          v20 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * v19);
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) != 0)
                          {
                            std::string::basic_string[abi:ne180100]<0>(v54, (char *)objc_msgSend(v20, "UTF8String"));
                            if ((v21 & 1) == 0
                            {
                              std::map<std::string_view const,EQKit::Font::CharacterProperty::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Font::CharacterProperty::Enum> const*>((uint64_t)&_enumFromString(std::string const&)::sMap, (uint64_t)&sData, (uint64_t)sLengthMetricNames);
                            }
                            v22 = v55;
                            v23 = v54;
                            if ((v55 & 0x80u) != 0)
                            {
                              v23 = (void **)v54[0];
                              v22 = (std::string::size_type)v54[1];
                            }
                            v52 = (unint64_t)v23;
                            v53.__r_.__value_.__r.__words[0] = v22;
                            v24 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&_enumFromString(std::string const&)::sMap, (uint64_t)&v52);
                            if ((_UNKNOWN *)v24 == &unk_257103498)
                              v25 = 0;
                            else
                              v25 = *(_DWORD *)(v24 + 48);
                            v52 = __PAIR64__(v25, v11);
                            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                              std::string::__init_copy_ctor_external(&v53, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
                            else
                              v53 = v64;
                            v26 = objc_msgSend(v15, "objectForKey:", v20);
                            if (v25 - 1 >= 0xC)
                            {
                              switch(v25)
                              {
                                case 0u:
                                  goto LABEL_46;
                                case 0xDu:
                                  v30 = objc_opt_class();
                                  v31 = (EQKit::StemStretch::Config::Entry *)EQKitUtilDynamicCast(v30, v26);
                                  if (v31)
                                  {
                                    EQKit::StemStretch::Config::Entry::Entry((uint64_t)__p);
                                    if (EQKit::StemStretch::Config::Entry::fromDictionary(v31, (NSDictionary *)__p, v32))
                                    {
                                      v48[0] = (uint64_t)&v52;
                                      v33 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(v45, (uint64_t)&v52, (uint64_t)&std::piecewise_construct, v48);
                                      *((_DWORD *)v33 + 16) = __p[0];
                                      v33[9] = (uint64_t)__p[1];
                                      *((_BYTE *)v33 + 80) = v50;
                                    }
                                  }
                                  break;
                                case 0xEu:
LABEL_46:
                                  NSLog(CFSTR("character property '%@' not recognized"), v20);
                                  break;
                              }
                            }
                            else
                            {
                              v27 = objc_opt_class();
                              v28 = (void *)EQKitUtilDynamicCast(v27, objc_msgSend(v15, "objectForKey:", v20));
                              if (v28)
                              {
                                std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v28, "UTF8String"));
                                EQKitLength::EQKitLength(v48, __p, 1);
                                if (LODWORD(v48[0]) == 3)
                                {
                                  v69 = &v52;
                                  v29 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(v47, (uint64_t)&v52, (uint64_t)&std::piecewise_construct, (uint64_t *)&v69);
                                  *((_DWORD *)v29 + 16) = v48[0];
                                  v29[9] = v48[1];
                                }
                                else
                                {
                                  NSLog(CFSTR("character property '%@' expected an em length - %@"), v20, v26);
                                }
                                if (v51 < 0)
                                  operator delete(__p[0]);
                              }
                              else
                              {
                                NSLog(CFSTR("character property '%@' expected a NSString - %@"), v20, v26);
                              }
                            }
                            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v53.__r_.__value_.__l.__data_);
                            if ((char)v55 < 0)
                              operator delete(v54[0]);
                          }
                          ++v19;
                        }
                        while (v17 != v19);
                        v34 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v56, v70, 16);
                        v17 = v34;
                      }
                      while (v34);
                    }
                  }
                }
                v9 = v46 + 1;
                v7 = v44;
              }
              while (v46 + 1 != v43);
              v8 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v60, v71, 16);
            }
            while (v8);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
        }
      }
      v39 = -[EQKit::Font::CharacterProperty::Map countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v65, v72, 16);
    }
    while (v39);
  }
  return v36;
}

void sub_2411D2D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKit::Font::CharacterProperty::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Font::CharacterProperty::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411D2EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!EQKit::Font::CharacterProperty::Map::Key::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!EQKit::Font::CharacterProperty::Map::Key::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = EQKit::Font::CharacterProperty::Map::Key::Key(v6 + 4, *a2);
  *((_DWORD *)v6 + 16) = 1;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2411D3060(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *EQKit::Font::CharacterProperty::Map::Key::Key(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = *(_QWORD *)a2;
  v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:ne180100]<EQKit::Font::CharacterProperty::Map::Key const&>(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2411D3214(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:ne180100]<EQKit::Font::CharacterProperty::Map::Key const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = EQKit::Font::CharacterProperty::Map::Key::Key(a1, a2);
  EQKit::StemStretch::Config::Entry::Entry((uint64_t)(v3 + 4));
  return a1;
}

void sub_2411D325C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::Metric::LengthEntry::LengthEntry(uint64_t this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;

  for (i = 0; i != 128; i += 16)
  {
    v2 = this + i;
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 8) = 0;
  }
  v3 = 128;
  do
  {
    v4 = this + v3;
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = 0;
    v3 += 16;
  }
  while (v4 + 16 != this + 256);
  v5 = 256;
  do
  {
    v6 = this + v5;
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0;
    v5 += 16;
  }
  while (v6 + 16 != this + 384);
  for (j = 0; j != 128; j += 16)
  {
    v8 = this + j;
    *(_DWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 128) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    *(_DWORD *)(v8 + 256) = 0;
    *(_QWORD *)(v8 + 264) = 0;
  }
  return this;
}

double EQKit::Font::Metric::LengthEntry::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  double result;

  if (a1 != a2)
  {
    for (i = 0; i != 128; i += 16)
    {
      v3 = a1 + i;
      *(_DWORD *)v3 = *(_DWORD *)(a2 + i);
      *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + i + 8);
      *(_DWORD *)(v3 + 128) = *(_DWORD *)(a2 + i + 128);
      *(_QWORD *)(v3 + 136) = *(_QWORD *)(a2 + i + 136);
      *(_DWORD *)(v3 + 256) = *(_DWORD *)(a2 + i + 256);
      result = *(double *)(a2 + i + 264);
      *(double *)(v3 + 264) = result;
    }
  }
  return result;
}

double EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule(EQKit::Font::Metric::LengthEntry *this, const EQKit::Script::Info *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  double v10;
  EQKitLength *v11;
  int v12;
  double v13;
  double v14;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 2uLL)
    v6 = 2;
  if (v6)
    v7 = 2 * v6 + 2;
  else
    v7 = 2 * (*((_BYTE *)a2 + 8) == 0);
  v8 = v7 + *((unsigned __int8 *)a2 + 9);
  v9 = (_DWORD *)((char *)this + 16 * v8);
  if ((*v9 & 0xFFFFFFFD) != 0)
    v10 = EQKitLength::resolveToAbsoluteWithSizeAndRule((EQKit::Font::Metric::LengthEntry *)((char *)this + 16 * v8), *((double *)a2 + 2), a3);
  else
    v10 = 0.0;
  v12 = v9[32];
  v11 = (EQKitLength *)(v9 + 32);
  if ((v12 & 0xFFFFFFFD) != 0)
  {
    v13 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v11, *((double *)a2 + 2), a3);
    if (v10 < v13)
      v10 = v13;
  }
  if ((*((_DWORD *)this + 4 * v8 + 64) & 0xFFFFFFFD) != 0)
  {
    v14 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v11, *((double *)a2 + 2), a3);
    if (v10 > v14)
      return v14;
  }
  return v10;
}

uint64_t EQKit::Font::Metric::LengthEntry::fromString(const std::string *a1, uint64_t a2)
{
  int v4;
  const std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  const std::string *v19;
  unint64_t v20;
  std::string::size_type v21;
  std::string *p_str;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v32;
  int v33;
  char v34;
  std::string::size_type v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  int v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int v55;
  uint64_t v56;
  std::string v57;
  std::string __str;
  _DWORD v59[2];
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;

  EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)v59);
  v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  if (v4 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  v7 = 0;
  while (memchr(" \t\n", v5->__r_.__value_.__s.__data_[v7], 3uLL))
  {
    if (size == ++v7)
      return 0;
  }
  if (v7 == -1)
    return 0;
  v54 = a2;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v9 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = (std::string::size_type)a1;
    else
      v11 = a1->__r_.__value_.__r.__words[0];
    if (v10)
      v12 = a1->__r_.__value_.__l.__size_;
    else
      v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v12 <= v7)
    {
LABEL_31:
      v16 = -1;
    }
    else
    {
      v13 = (unsigned __int8 *)(v11 + v7);
      v14 = (unsigned __int8 *)(v11 + v12);
LABEL_22:
      v15 = 0;
      while (*v13 != asc_2412366F7[v15])
      {
        if (++v15 == 3)
        {
          if (++v13 != v14)
            goto LABEL_22;
          goto LABEL_31;
        }
      }
      if (v13 == v14)
        goto LABEL_31;
      v16 = (unint64_t)&v13[-v11];
      v17 = &v13[-v11 - v7];
      if (v16 != -1)
        v12 = (std::string::size_type)v17;
    }
    std::string::basic_string(&__str, a1, v7, v12, (std::allocator<char> *)&v57);
    v18 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = a1;
    else
      v19 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      v20 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v20 = a1->__r_.__value_.__l.__size_;
    if (v20 <= v16)
    {
LABEL_41:
      v7 = -1;
    }
    else
    {
      while (memchr(" \t\n", v19->__r_.__value_.__s.__data_[v16], 3uLL))
      {
        if (v20 == ++v16)
          goto LABEL_41;
      }
      v7 = v16;
    }
    v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (!v21)
      goto LABEL_54;
    v23 = 0;
    while (p_str->__r_.__value_.__s.__data_[v23] != 61)
    {
      if (v21 == ++v23)
        goto LABEL_54;
    }
    if (v21 == v23)
    {
LABEL_54:
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v23 = -1;
      goto LABEL_55;
    }
    if (v23)
    {
      if (v23 == -1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        goto LABEL_55;
      }
      v24 = p_str->__r_.__value_.__s.__data_[v23 - 1] == 39;
    }
    else
    {
      v24 = 0;
    }
    std::string::basic_string(&v57, &__str, 0, v23 - v24, (std::allocator<char> *)&v55);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      v35 = v57.__r_.__value_.__l.__size_;
    switch(v35)
    {
      case 4uLL:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v57;
        else
          v37 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if (!memcmp(v37, "Dmin", 4uLL))
        {
LABEL_109:
          v27 = 0;
          v25 = 0;
          v26 = 1;
          goto LABEL_127;
        }
        if (LODWORD(v37->__r_.__value_.__l.__data_) == 2019650884)
          goto LABEL_108;
        if (!memcmp(v37, "Tmin", 4uLL))
        {
          v25 = 0;
          v26 = 1;
LABEL_124:
          v27 = 2;
          goto LABEL_127;
        }
        if (LODWORD(v37->__r_.__value_.__l.__data_) == 2019650900)
        {
          v26 = 0;
          v25 = 1;
          goto LABEL_124;
        }
        if (!memcmp(v37, "Smin", 4uLL))
        {
          v25 = 0;
          v26 = 1;
          goto LABEL_126;
        }
        if (LODWORD(v37->__r_.__value_.__l.__data_) == 2019650899)
        {
          v26 = 0;
          v25 = 1;
LABEL_126:
          v27 = 4;
          goto LABEL_127;
        }
        break;
      case 3uLL:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v57;
        else
          v38 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if (!memcmp(v38, "min", 3uLL))
          goto LABEL_109;
        if (LOWORD(v38->__r_.__value_.__l.__data_) == 24941 && v38->__r_.__value_.__s.__data_[2] == 120)
        {
LABEL_108:
          v27 = 0;
          v26 = 0;
          v25 = 1;
          goto LABEL_127;
        }
        break;
      case 1uLL:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v57;
        else
          v36 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if (v36->__r_.__value_.__s.__data_[0] == 68)
        {
          v27 = 0;
          v26 = 0;
          v25 = 0;
LABEL_127:
          v40 = 1;
          goto LABEL_128;
        }
        if (!memcmp(v36, "T", 1uLL))
        {
          v26 = 0;
          v25 = 0;
          v40 = 1;
          v27 = 2;
          goto LABEL_128;
        }
        if (!memcmp(v36, "S", 1uLL))
        {
          v26 = 0;
          v25 = 0;
          v40 = 1;
          v27 = 4;
          goto LABEL_128;
        }
        break;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v57.__r_.__value_.__l.__data_, "SS"))
    {
      v26 = 0;
      v25 = 0;
      v40 = 1;
      v27 = 6;
      goto LABEL_128;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v57.__r_.__value_.__l.__data_, "SSmin"))
    {
      v25 = 0;
      v26 = 1;
      v27 = 6;
      goto LABEL_127;
    }
    v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v57.__r_.__value_.__l.__data_, "SSmax");
    v25 = v41;
    v26 = 0;
    if (v41)
      v27 = 6;
    else
      v27 = 0;
    v40 = v41;
LABEL_128:
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v57.__r_.__value_.__l.__data_);
      if (!v40)
      {
LABEL_132:
        v33 = 0;
        goto LABEL_69;
      }
    }
    else if (!v40)
    {
      goto LABEL_132;
    }
LABEL_55:
    std::string::basic_string(&v57, &__str, v23 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    EQKitLength::EQKitLength(&v55, &v57, 1);
    if ((v55 & 0xFFFFFFFD) != 0)
    {
      v28 = v27 + v24;
      if (v26)
      {
        v29 = &v59[4 * v28];
        v29[32] = v55;
        *((_QWORD *)v29 + 17) = v56;
      }
      else if (v25)
      {
        v30 = &v59[4 * v28];
        v30[64] = v55;
        *((_QWORD *)v30 + 33) = v56;
      }
      else
      {
        if (v28 < v8 || v8 == 0x7FFFFFFFFFFFFFFFLL)
          v8 = v27 + v24;
        v32 = &v59[4 * v28];
        *v32 = v55;
        *((_QWORD *)v32 + 1) = v56;
      }
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v33 = 1;
LABEL_69:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v7 == -1)
      v34 = 0;
    else
      v34 = v33;
  }
  while ((v34 & 1) != 0);
  if (v8)
    v42 = 0;
  else
    v42 = v33;
  if (v42 != 1)
    return 0;
  if (!v61)
  {
    v61 = v59[0];
    v62 = v60;
  }
  v43 = 0;
  v44 = 0;
  v45 = &v63;
  v46 = 2;
  v47 = 1;
  do
  {
    v48 = *(_DWORD *)v45;
    v49 = v47;
    if (!*(_DWORD *)v45)
    {
      v50 = &v59[8 * v44];
      v48 = *v50;
      *(_DWORD *)v45 = *v50;
      v45[1] = *((_QWORD *)v50 + 1);
      v49 = v44;
    }
    v51 = v47;
    if (!*((_DWORD *)v45 + 4))
    {
      v52 = v46;
      v51 = v47;
      if (v47 != v49)
      {
        v52 = (2 * v43) | 1;
        v48 = v59[4 * v52];
        v51 = v43;
      }
      *((_DWORD *)v45 + 4) = v48;
      v45[3] = *(&v60 + 2 * v52);
    }
    ++v47;
    v46 += 2;
    v45 += 4;
    v43 = v51;
    v44 = v49;
  }
  while (v47 != 4);
  EQKit::Font::Metric::LengthEntry::operator=(v54, (uint64_t)v59);
  return 1;
}

void sub_2411D3AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *EQKit::Font::Metric::Map::defaultForLengthMetric(int a1)
{
  if ((a1 - 11) > 0x15)
    return 0;
  else
    return off_25112B1E8[a1 - 11];
}

_OWORD *EQKit::Font::Metric::Map::newMapFromDictionary(EQKit::Font::Metric::Map *this, NSDictionary *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  void **v12;
  __CFString **v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _OWORD *v22;
  std::string::size_type v23;
  std::string __p[3];
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;

  v3 = operator new();
  v4 = 56;
  v22 = (_OWORD *)v3;
  do
  {
    v3 = EQKit::Font::Metric::LengthEntry::LengthEntry(v3) + 384;
    --v4;
  }
  while (v4);
  v5 = 0;
  v6 = (uint64_t)v22;
  v22[1346] = 0u;
  v22[1345] = 0u;
  v22[1344] = 0u;
  do
  {
    v7 = sLengthMetricNames[v5];
    v8 = -[EQKit::Font::Metric::Map objectForKey:](this, "objectForKey:", v7);
    v9 = objc_opt_class();
    v10 = EQKitUtilDynamicCast(v9, v8);
    if (!(v10 | v8))
      v10 = (uint64_t)EQKit::Font::Metric::Map::defaultForLengthMetric(v5);
    if (v10)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)v10, "UTF8String"));
      if ((EQKit::Font::Metric::LengthEntry::fromString(__p, v6) & 1) == 0)
        NSLog(CFSTR("invalid format for '%@' - %@'"), v7, v10);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    else
    {
      NSLog(CFSTR("missing value for key '%@'"), v7);
    }
    ++v5;
    v6 += 384;
  }
  while (v5 != 56);
  v11 = *MEMORY[0x24BEDB7F8];
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v12 = (void **)off_25112B298;
  v13 = sFloatMetricNames;
  v14 = 2688;
  v15 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v16 = *v13;
    v17 = -[EQKit::Font::Metric::Map objectForKey:](this, "objectForKey:", *v13);
    v18 = objc_opt_class();
    v19 = EQKitUtilDynamicCast(v18, v17);
    if (v19 | v17)
    {
      v20 = (void *)v19;
      if (!v19)
        goto LABEL_21;
    }
    else
    {
      if ((v14 - 2688) >= 3)
      {
LABEL_21:
        NSLog(CFSTR("missing value for key '%@'"), v16);
        goto LABEL_27;
      }
      v20 = *v12;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, (char *)objc_msgSend(v20, "UTF8String"));
    v28 = 0;
    std::istringstream::basic_istringstream[abi:ne180100](__p, &v29, 8);
    MEMORY[0x2426905E4](__p, &v28);
    if ((*(_DWORD *)((_BYTE *)&__p[1].__r_.__value_.__r.__words[1]
                    + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) & 7) == 2)
      *((_QWORD *)v22 + v14) = v28;
    else
      NSLog(CFSTR("invalid format for '%@' - %@'"), v16, v20);
    __p[0].__r_.__value_.__r.__words[0] = v11;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v11 - 24)) = v23;
    __p[0].__r_.__value_.__r.__words[2] = v15;
    if (v26 < 0)
      operator delete(v25);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x242690704](&v27);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_27:
    ++v12;
    ++v14;
    ++v13;
  }
  while (v14 != 2694);
  return v22;
}

void sub_2411D3DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::CharacterMapping::newMapFromDictionary(EQKit::Font::CharacterMapping *this, NSDictionary *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int *v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)v3 = v3 + 8;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = -[EQKit::Font::CharacterMapping countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(this);
        v7 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
        v8 = -[EQKit::Font::CharacterMapping objectForKey:](this, "objectForKey:", v7);
        v9 = objc_opt_class();
        v10 = (void *)EQKitUtilDynamicCast(v9, v7);
        v11 = objc_opt_class();
        v12 = (void *)EQKitUtilDynamicCast(v11, v8);
        v15 = 0;
        v15 = EQKitUtilUTF32CharFromString(v10);
        v13 = EQKitUtilUTF32CharFromString(v12);
        if (v15 && v13)
        {
          v20 = &v15;
          *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v3, &v15, (uint64_t)&std::piecewise_construct, &v20)+ 8) = v13;
        }
        else
        {
          NSLog(CFSTR("invalid character mapping entry: %@ => %@"), v7, v8);
        }
      }
      v4 = -[EQKit::Font::CharacterMapping countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *EQKit::Font::CharacterArray::newArrayFromArray(EQKit::Font::CharacterArray *this, NSArray *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)operator new();
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v4 = -[EQKit::Font::CharacterArray countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v25 != v5)
          objc_enumerationMutation(this);
        v7 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i);
        v8 = objc_opt_class();
        v9 = (void *)EQKitUtilDynamicCast(v8, v7);
        v10 = EQKitUtilUTF32CharFromString(v9);
        v11 = v10;
        if (v10)
        {
          v13 = (_DWORD *)v3[1];
          v12 = v3[2];
          if ((unint64_t)v13 >= v12)
          {
            v15 = (_DWORD *)*v3;
            v16 = ((uint64_t)v13 - *v3) >> 2;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v18 = v12 - (_QWORD)v15;
            if (v18 >> 1 > v17)
              v17 = v18 >> 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
              v19 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(v3 + 2), v19);
              v15 = (_DWORD *)*v3;
              v13 = (_DWORD *)v3[1];
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[4 * v16];
            *(_DWORD *)v21 = v11;
            v14 = v21 + 4;
            while (v13 != v15)
            {
              v22 = *--v13;
              *((_DWORD *)v21 - 1) = v22;
              v21 -= 4;
            }
            *v3 = v21;
            v3[1] = v14;
            v3[2] = &v20[4 * v19];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v13 = v10;
            v14 = v13 + 1;
          }
          v3[1] = v14;
        }
      }
      v4 = -[EQKit::Font::CharacterArray countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v4);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  return v3;
}

void _appendFromWideString(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  id v6;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", (char *)v5 + 4 * a3, 4 * a4, 2617245952);
  objc_msgSend(a1, "appendString:", v6);

}

void sub_2411D578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 145) < 0)
    operator delete(*(void **)(v20 - 168));
  _Unwind_Resume(exception_object);
}

std::string *EQKit::AttributeCollection::setValueForKey(uint64_t a1, const std::string *a2, int a3, uint64_t a4)
{
  std::string *v5;
  uint64_t v7;
  int v8;
  uint64_t *v9;

  v7 = a4;
  v8 = a3;
  v9 = &v7;
  v5 = (std::string *)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 80), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return std::string::operator=(v5 + 2, a2);
}

CGColorRef EQKitMathMLParserCreateCGColorFromString(uint64_t a1)
{
  unsigned int v1;
  std::string::size_type v2;
  CGColorRef v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *p_p;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  int v12;
  CGColorSpace *DeviceRGB;
  std::string __p;
  CGFloat components[2];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)components = xmmword_2412125B0;
  v17 = unk_2412125C0;
  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 <= 1)
      return 0;
    if (**(_BYTE **)a1 != 35)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, v2);
      goto LABEL_10;
    }
LABEL_7:
    if ((EQKitMathMLParserConvertHexColorStringToRGBFloatValues((std::string *)a1, components, &components[1], (double *)&v17) & 1) != 0)goto LABEL_31;
    return 0;
  }
  if (v1 < 2)
    return 0;
  if (*(_BYTE *)a1 == 35)
    goto LABEL_7;
  __p = *(std::string *)a1;
LABEL_10:
  v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v6 = __p.__r_.__value_.__l.__size_;
  if (!v6)
  {
LABEL_28:
    v12 = EQKitMathMLParserConvertNamedColorStringToRGBFloatValues((std::string::size_type)&__p, components, &components[1], (double *)&v17);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_29;
    goto LABEL_30;
  }
  v7 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  while (1)
  {
    v9 = p_p->__r_.__value_.__s.__data_[0];
    if (p_p->__r_.__value_.__s.__data_[0] > 90)
      break;
    if ((char)v9 < 65)
      goto LABEL_33;
    p_p->__r_.__value_.__s.__data_[0] = v9 + 32;
    v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v7 = __p.__r_.__value_.__r.__words[0];
LABEL_21:
    p_p = (std::string *)((char *)p_p + 1);
    if ((v4 & 0x80u) == 0)
      v10 = &__p;
    else
      v10 = (std::string *)v7;
    if ((v4 & 0x80u) == 0)
      v11 = v4;
    else
      v11 = size;
    if (p_p == (std::string *)((char *)v10 + v11))
      goto LABEL_28;
  }
  if ((v9 - 97) <= 0x19)
    goto LABEL_21;
LABEL_33:
  v12 = 0;
  if ((v4 & 0x80) != 0)
LABEL_29:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  if (v12)
  {
LABEL_31:
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v3 = CGColorCreate(DeviceRGB, components);
    CGColorSpaceRelease(DeviceRGB);
    return v3;
  }
  return 0;
}

void sub_2411D5AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **EQKit::AttributeCollection::setValueForKey(uint64_t a1, CFTypeRef *a2, int a3, uint64_t a4)
{
  const void **v5;
  uint64_t v7;
  int v8;
  uint64_t *v9;

  v7 = a4;
  v8 = a3;
  v9 = &v7;
  v5 = (const void **)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 536), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return EQKitTypes::CFRetainRelease::operator=(v5 + 6, a2);
}

void sub_2411D5CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void _contentAppendStringIfNeeded(id *a1, std::string *a2, _BYTE *a3, _BYTE *a4, int a5)
{
  std::string *v8;
  int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v20;
  std::string::size_type v21;
  id v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  std::string v27;
  char v28;

  if (!*a3)
    return;
  v8 = a2;
  if (*a4)
  {
    v10 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      size = a2->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_41;
    v13 = 0;
    while (memchr(" \t\n", v11->__r_.__value_.__s.__data_[v13], 3uLL))
    {
      if (size == ++v13)
        goto LABEL_41;
    }
    if (v13 == -1)
      goto LABEL_41;
  }
  else
  {
    v13 = 0;
  }
  v14 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  if (a5)
  {
    v15 = v8->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0)
      v16 = v8;
    else
      v16 = (std::string *)v8->__r_.__value_.__r.__words[0];
    if ((v14 & 0x80u) == 0)
      v17 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    else
      v17 = v8->__r_.__value_.__l.__size_;
    v18 = (uint64_t)&v16[-1].__r_.__value_.__r.__words[2] + 7;
    while (v17)
    {
      if (!memchr(" \t\n", *(char *)(v18 + v17--), 3uLL))
        goto LABEL_31;
    }
    v17 = -1;
    if (v13)
      goto LABEL_38;
  }
  else
  {
    v15 = v8->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0)
      v20 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    else
      v20 = v8->__r_.__value_.__l.__size_;
    v17 = v20 - 1;
LABEL_31:
    if (v13)
      goto LABEL_38;
  }
  if ((v14 & 0x80u) == 0)
    v21 = v14;
  else
    v21 = v15;
  if (v17 != v21 - 1)
  {
LABEL_38:
    std::string::basic_string(&v27, v8, v13, v17 - v13 + 1, (std::allocator<char> *)&v28);
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8->__r_.__value_.__l.__data_);
    *v8 = v27;
  }
LABEL_41:
  v22 = objc_alloc(MEMORY[0x24BDD17C8]);
  if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = (uint64_t *)v8;
  else
    v23 = (uint64_t *)v8->__r_.__value_.__r.__words[0];
  v24 = objc_msgSend(v22, "initWithUTF8String:", v23);
  if (v24)
  {
    v25 = (void *)v24;
    v26 = *a1;
    if (!*a1)
    {
      v26 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      *a1 = v26;
    }
    objc_msgSend(v26, "addObject:", v25);

  }
  if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
  {
    v8->__r_.__value_.__l.__size_ = 0;
    v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v8->__r_.__value_.__s + 23) = 0;
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  *a3 = 0;
  *a4 = 0;
}

void sub_2411D6208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

xmlEntityPtr EQKitMathMLParserGetEntity(void *a1, char *__s)
{
  uint64_t v4;
  void **v5;
  xmlEntityPtr result;
  void *__p[2];
  char v8;

  if (_entityMap(void)::onceToken != -1)
    dispatch_once(&_entityMap(void)::onceToken, &__block_literal_global_130);
  v4 = _entityMap(void)::sMap;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v5 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(v4, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(v4 + 8) == v5)
    return xmlSAX2GetEntity(a1, (const xmlChar *)__s);
  result = (xmlEntityPtr)v5[7];
  if (!result)
    return xmlSAX2GetEntity(a1, (const xmlChar *)__s);
  return result;
}

void sub_2411D6410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string::size_type a1, double *a2, double *a3, double *a4)
{
  std::string::size_type v8;
  std::string::size_type v9;
  uint64_t v10;
  std::string::size_type v11;
  const void *v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;

  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken != -1)
    dispatch_once(&EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken, &__block_literal_global_0);
  if (!EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap)
    return 1;
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = a1;
  else
    v9 = *(_QWORD *)a1;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  __dst.__r_.__value_.__r.__words[0] = v9;
  __dst.__r_.__value_.__l.__size_ = v8;
  v10 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>(EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap, (uint64_t)&__dst);
  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap + 8 == v10)
    return 0;
  v11 = *(_QWORD *)(v10 + 56);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = *(const void **)(v10 + 48);
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_19;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v10 + 56);
  p_dst = &__dst;
  if (v11)
LABEL_19:
    memmove(p_dst, v12, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  v14 = EQKitMathMLParserConvertHexColorStringToRGBFloatValues(&__dst, a2, a3, a4);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_2411D6590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserConvertHexColorStringToRGBFloatValues(std::string *__str, double *a2, double *a3, double *a4)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  int v7;
  std::string::size_type v8;
  uint64_t v14;
  unint64_t v16;
  char v17;
  std::string::size_type v18;
  double v19;
  std::string __p;
  std::string v21;
  std::string v22;
  char v23;

  v4 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v4 >= 0)
    v6 = __str;
  else
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v7 = v6->__r_.__value_.__s.__data_[0];
  v8 = size - (v7 == 35);
  if (v8 != 6 && v8 != 3)
    return 0;
  if (size)
  {
    v14 = 0;
    while (memchr("#0123456789abcdefABCDEF", v6->__r_.__value_.__s.__data_[v14], 0x17uLL))
    {
      if (size == ++v14)
        goto LABEL_19;
    }
    if (v14 != -1)
      return 0;
  }
LABEL_19:
  v16 = 3;
  if (v7 == 35)
    v16 = 4;
  v17 = size > v16;
  if (v17)
    v18 = 2;
  else
    v18 = 1;
  if (v17)
    v19 = 255.0;
  else
    v19 = 15.0;
  std::string::basic_string(&v22, __str, (-3 << v17) + size, v18, (std::allocator<char> *)&v21);
  std::string::basic_string(&v21, __str, size - 2 * v18, v18, (std::allocator<char> *)&__p);
  std::string::basic_string(&__p, __str, size - v18, v18, (std::allocator<char> *)&v23);
  *a2 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v22) / v19;
  *a3 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v21) / v19;
  *a4 = (double)(unint64_t)EQKitMathMLParserHexToDec(&__p) / v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return 1;
}

void sub_2411D6804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserHexToDec(const std::string *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[12];
  char v5;
  uint64_t v6;

  std::istringstream::basic_istringstream[abi:ne180100](v4, a1, 8);
  v3 = 0;
  *(_DWORD *)((char *)&v4[1] + *(_QWORD *)(v4[0] - 24)) = *(_DWORD *)((_BYTE *)&v4[1] + *(_QWORD *)(v4[0] - 24)) & 0xFFFFFFB5 | 8;
  MEMORY[0x242690608](v4, &v3);
  v1 = v3;
  v4[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v4[2] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x242690704](&v6);
  return v1;
}

void sub_2411D6924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_DWORD *)a3 + 2);
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        v10 = v6 < v9;
        v11 = *((_DWORD *)v8 + 10);
        if (v9 == v6)
          v10 = v7 < v11;
        if (!v10)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_14;
      }
      v12 = v11 < v7;
      v13 = v9 == v6;
      v14 = v9 < v6;
      if (v13)
        v14 = v12;
      if (!v14)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_14:
  *a2 = v8;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKit::ScriptLevel,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKit::ScriptLevel>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    *((_BYTE *)v7 + 56) = 1;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 1;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitLength>>(uint64_t a1, uint64_t **a2, uint64_t *a3, _OWORD *a4)
{
  char *result;
  _OWORD *v6;

  v6 = a4;
  result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (uint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3)
    return std::vector<EQKitLength>::__assign_with_size[abi:ne180100]<EQKitLength*,EQKitLength*>(result, *a3, a3[1], (a3[1] - *a3) >> 4);
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitTypes::VAlign::Enum>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  char *result;
  _OWORD *v6;

  v6 = a4;
  result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (uint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3)
    return std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:ne180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(result, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return result;
}

void EQKit::AttributeCollection::setValueForKey<std::vector<std::string>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  std::vector<std::wstring> *v5;
  _OWORD *v6;

  v6 = a4;
  v5 = (std::vector<std::wstring> *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (uint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (v5 != (std::vector<std::wstring> *)a3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitPseudoUnitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitPseudoUnitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 1;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_WORD *)v7 + 24) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v12, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v10[1] = a1 + 1;
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,void *>,std::__tree_node_destructor<std::allocator<void *>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      EQKitTypes::CFRetainRelease::~CFRetainRelease(v2 + 6);
    operator delete(v2);
  }
}

uint64_t std::deque<EQKitMathMLParserState>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

void ___ZL10_entityMapv_block_invoke()
{
  uint64_t v0;
  const xmlChar **v1;
  uint64_t v2;
  xmlChar *v3;
  xmlEntityPtr v4;
  void *__p[2];
  char v6;
  void **v7;

  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v1 = (const xmlChar **)off_25112C558;
  v2 = 2089;
  do
  {
    v3 = (xmlChar *)*(v1 - 1);
    v4 = xmlNewEntity(0, v3, 1, 0, 0, *v1);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)v3);
    v7 = __p;
    *((_QWORD *)std::__tree<std::__value_type<std::string,_xmlEntity *>,std::__map_value_compare<std::string,std::__value_type<std::string,_xmlEntity *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_xmlEntity *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v0, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7)+ 7) = v4;
    if (v6 < 0)
      operator delete(__p[0]);
    v1 += 2;
    --v2;
  }
  while (v2);
  _entityMap(void)::sMap = v0;
}

void sub_2411D713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,_xmlEntity *>,std::__map_value_compare<std::string,std::__value_type<std::string,_xmlEntity *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_xmlEntity *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::deque<EQKitMathMLParserState>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<EQKitMathMLParserState>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<EQKitMathMLParserState>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2411D753C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitMathMLParserState>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_OWORD *std::__tree<std::__value_type<std::string_view,std::string_view>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,std::string_view>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,std::string_view>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__find_equal<std::string_view>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_2411D7BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::set<EQKitTypes::Attributes::Enum>::set[abi:ne180100]<EQKitTypes::Attributes::Enum const*>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411D7C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_2411D7FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D8130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *EQKit::AttributeCollection::AttributeCollection(_QWORD *this)
{
  this[2] = 0;
  *this = &off_251134828;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  this[8] = 0;
  this[6] = 0;
  this[7] = this + 8;
  this[11] = 0;
  this[9] = 0;
  this[10] = this + 11;
  this[14] = 0;
  this[12] = 0;
  this[13] = this + 14;
  this[17] = 0;
  this[20] = 0;
  this[15] = 0;
  this[16] = this + 17;
  this[18] = 0;
  this[19] = this + 20;
  this[23] = 0;
  this[21] = 0;
  this[22] = this + 23;
  this[26] = 0;
  this[24] = 0;
  this[25] = this + 26;
  this[29] = 0;
  this[27] = 0;
  this[28] = this + 29;
  this[32] = 0;
  this[33] = 0;
  this[30] = 0;
  this[31] = this + 32;
  this[34] = this + 35;
  this[35] = 0;
  this[38] = 0;
  this[39] = 0;
  this[36] = 0;
  this[37] = this + 38;
  this[40] = this + 41;
  this[41] = 0;
  this[44] = 0;
  this[45] = 0;
  this[42] = 0;
  this[43] = this + 44;
  this[46] = this + 47;
  this[47] = 0;
  this[50] = 0;
  this[51] = 0;
  this[48] = 0;
  this[49] = this + 50;
  this[52] = this + 53;
  this[53] = 0;
  this[56] = 0;
  this[57] = 0;
  this[54] = 0;
  this[55] = this + 56;
  this[58] = this + 59;
  this[59] = 0;
  this[62] = 0;
  this[63] = 0;
  this[60] = 0;
  this[61] = this + 62;
  this[66] = 0;
  this[65] = 0;
  this[64] = this + 65;
  this[69] = 0;
  this[68] = 0;
  this[67] = this + 68;
  return this;
}

void EQKit::AttributeCollection::~AttributeCollection(EQKit::AttributeCollection *this)
{
  EQKit::AttributeCollection::~AttributeCollection(this);
  JUMPOUT(0x242690740);
}

{
  *(_QWORD *)this = &off_251134828;
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy((uint64_t)this + 536, *((const void ***)this + 68));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 512, *((_QWORD **)this + 65));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 488, *((_QWORD **)this + 62));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 464, *((_QWORD **)this + 59));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 440, *((_QWORD **)this + 56));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 416, *((_QWORD **)this + 53));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 344, *((_QWORD **)this + 44));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 176, *((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(uint64_t a1, const void **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, a2[1]);
    EQKitTypes::CFRetainRelease::~CFRetainRelease(a2 + 6);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

void sub_2411D87B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D8A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D8C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D8E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D8FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2411D90A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D9194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D927C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D98EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D99F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411D9FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DA230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DA4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DA994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DAA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DADA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DB0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DB508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DB9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DBD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DBFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2411DC050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DC360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DC47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411DC7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitMathMLElement::fromString(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  int v7;
  _QWORD v8[2];

  if ((v1 & 1) == 0)
  {
    v6 = a1;
    a1 = v6;
    if (v7)
    {
      std::map<std::string_view const,EQKitMathMLElement::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitMathMLElement::Enum> const*>((uint64_t)&EQKitMathMLElement::fromString(std::string const&)::sMap, (uint64_t)&EQKitMathMLElement::sData, (uint64_t)(&EQKitMathMLElement::sData + 525));
      a1 = v6;
    }
  }
  v2 = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  v8[0] = v3;
  v8[1] = v2;
  v4 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitMathMLElement::fromString(std::string const&)::sMap, (uint64_t)v8);
  if ((_UNKNOWN *)v4 == &unk_257103818)
    return 0;
  else
    return *(unsigned int *)(v4 + 48);
}

void sub_2411DCE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Display::displayFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Display::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Display::Enum> const*>((uint64_t)&EQKitTypes::Display::displayFromMathMLString(std::string const&,EQKitTypes::Display::Enum)::sMap, (uint64_t)&EQKitTypes::Display::sData, (uint64_t)&EQKit::Script::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Display::displayFromMathMLString(std::string const&,EQKitTypes::Display::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103838)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DCF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKit::Script::variantFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKit::Script::Variant>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Script::Variant> const*>((uint64_t)&EQKit::Script::variantFromMathMLString(std::string const&,EQKit::Script::Variant)::sMap, (uint64_t)&EQKit::Script::sData, (uint64_t)&EQKit::Config::Operator::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKit::Script::variantFromMathMLString(std::string const&,EQKit::Script::Variant)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103858)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DCFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKit::Config::Operator::formFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKit::Config::Operator::Form>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Config::Operator::Form> const*>((uint64_t)&EQKit::Config::Operator::formFromMathMLString(std::string const&,EQKit::Config::Operator::Form)::sMap, (uint64_t)&EQKit::Config::Operator::sData, (uint64_t)&EQKitTypes::Align::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKit::Config::Operator::formFromMathMLString(std::string const&,EQKit::Config::Operator::Form)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103878)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DD0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Align::alignFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Align::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Align::Enum> const*>((uint64_t)&EQKitTypes::Align::alignFromMathMLString(std::string const&,EQKitTypes::Align::Enum)::sMap, (uint64_t)&EQKitTypes::Align::sData, (uint64_t)&EQKitTypes::VAlign::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Align::alignFromMathMLString(std::string const&,EQKitTypes::Align::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103898)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DD19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::VAlign::vAlignFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::VAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::VAlign::Enum> const*>((uint64_t)&EQKitTypes::VAlign::vAlignFromMathMLString(std::string const&,EQKitTypes::VAlign::Enum)::sMap, (uint64_t)&EQKitTypes::VAlign::sData, (uint64_t)&EQKitTypes::Boolean::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::VAlign::vAlignFromMathMLString(std::string const&,EQKitTypes::VAlign::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_2571038B8)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DD26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Boolean::BOOLeanFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Boolean::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Boolean::Enum> const*>((uint64_t)&EQKitTypes::Boolean::BOOLeanFromMathMLString(std::string const&,EQKitTypes::Boolean::Enum)::sMap, (uint64_t)&EQKitTypes::Boolean::sData, (uint64_t)&EQKitTypes::Attributes::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Boolean::BOOLeanFromMathMLString(std::string const&,EQKitTypes::Boolean::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_2571038D8)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DD33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Attributes::attributeFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Attributes::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Attributes::Enum> const*>((uint64_t)&EQKitTypes::Attributes::attributeFromMathMLString(std::string const&,EQKitTypes::Attributes::Enum)::sMap, (uint64_t)&EQKitTypes::Attributes::sData, (uint64_t)&EQKitTypes::Crossout::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Attributes::attributeFromMathMLString(std::string const&,EQKitTypes::Attributes::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_2571038F8)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DD40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EQKitTypes::Align::alignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_2412366F7[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::Align::alignFromMathMLString((uint64_t *)&__p, 0);
    v13 = v12;
    if (v12)
    {
      v15 = a2[1];
      v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = *a2;
        v18 = (v15 - *a2) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
          v17 = *a2;
          v15 = a2[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v13;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v15 = v12;
        v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_44:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_44;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_2411DD630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::VAlign::vAlignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_2412366F7[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::VAlign::vAlignFromMathMLString((uint64_t *)&__p, 0);
    v13 = v12;
    if (v12)
    {
      v15 = a2[1];
      v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = *a2;
        v18 = (v15 - *a2) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
          v17 = *a2;
          v15 = a2[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v13;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v15 = v12;
        v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_44:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_44;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_2411DD874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::Strings::separatorsFromString(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  void *v31;
  void *__p[2];
  std::string::size_type v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__split_buffer<std::string> __v;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  v6 = (void *)objc_msgSend(v4, "initWithUTF8String:", v5);
  if (v6)
  {
    objc_msgSend(v6, "rangeOfCharacterFromSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet"));
    if (v7)
    {
      v8 = (id)objc_msgSend(v6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet"));
    }
    else
    {
      v9 = objc_msgSend(v6, "length");
      if (v9)
      {
        v10 = 0;
        v8 = 0;
        do
        {
          v11 = objc_msgSend(v6, "rangeOfComposedCharacterSequenceAtIndex:", v10);
          v13 = v12;
          if (v12)
          {
            v14 = objc_msgSend(v6, "substringWithRange:", v11, v12);
            if (!v8)
              v8 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
            objc_msgSend(v8, "addObject:", v14);
          }
          else
          {
            v13 = 1;
          }
          v10 += v13;
        }
        while (v10 < v9);
      }
      else
      {
        v8 = 0;
      }
    }
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v15 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v34, v39, 16, v6);
    if (v15)
    {
      v16 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v35 != v16)
            objc_enumerationMutation(v8);
          v18 = (char *)objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * i), "UTF8String");
          if (v18)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, v18);
            v20 = *(_QWORD *)(a2 + 8);
            v19 = *(_QWORD *)(a2 + 16);
            if (v20 >= v19)
            {
              v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a2) >> 3);
              v23 = v22 + 1;
              if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)a2) >> 3);
              if (2 * v24 > v23)
                v23 = 2 * v24;
              if (v24 >= 0x555555555555555)
                v25 = 0xAAAAAAAAAAAAAAALL;
              else
                v25 = v23;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
              if (v25)
                v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v25);
              else
                v26 = 0;
              v27 = v26 + v22;
              __v.__first_ = v26;
              __v.__begin_ = v27;
              __v.__end_cap_.__value_ = &v26[v25];
              v28 = *(_OWORD *)__p;
              v27->__r_.__value_.__r.__words[2] = v33;
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
              __p[1] = 0;
              v33 = 0;
              __p[0] = 0;
              __v.__end_ = v27 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
              v29 = *(_QWORD *)(a2 + 8);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
              v30 = SHIBYTE(v33);
              *(_QWORD *)(a2 + 8) = v29;
              if (v30 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v21 = *(_OWORD *)__p;
              *(_QWORD *)(v20 + 16) = v33;
              *(_OWORD *)v20 = v21;
              *(_QWORD *)(a2 + 8) = v20 + 24;
            }
          }
        }
        v15 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      }
      while (v15);
    }

  }
}

void sub_2411DDBA8(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::wstring> *a17)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Integer::integerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v3;
  _QWORD v5[12];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v5, a1, 8);
  MEMORY[0x2426905FC](v5, &v8);
  *a2 = (*(_DWORD *)((_BYTE *)&v5[4] + *(_QWORD *)(v5[0] - 24)) & 7) == 2;
  v3 = v8;
  v5[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v5[2] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x242690704](&v7);
  return v3;
}

void sub_2411DDCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::UInteger::uIntegerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v3;
  _QWORD v5[12];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](v5, a1, 8);
  MEMORY[0x242690608](v5, &v8);
  *a2 = (*(_DWORD *)((_BYTE *)&v5[4] + *(_QWORD *)(v5[0] - 24)) & 7) == 2;
  v3 = v8;
  v5[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v5[2] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x242690704](&v7);
  return v3;
}

void sub_2411DDDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Crossout::crossoutFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Crossout::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Crossout::Enum> const*>((uint64_t)&EQKitTypes::Crossout::crossoutFromMathMLString(std::string const&,EQKitTypes::Crossout::Enum)::sMap, (uint64_t)&EQKitTypes::Crossout::sData, (uint64_t)&EQKitTypes::Notation::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Crossout::crossoutFromMathMLString(std::string const&,EQKitTypes::Crossout::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103918)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DDEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EQKitTypes::Crossout::crossoutVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_2412366F7[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::Crossout::crossoutFromMathMLString((uint64_t *)&__p, 0);
    v13 = v12;
    v15 = a2[1];
    v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a2;
      v18 = (v15 - *a2) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
        v17 = *a2;
        v15 = a2[1];
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      *(_DWORD *)v23 = v13;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v15 = v12;
      v16 = v15 + 4;
    }
    a2[1] = v16;
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_42:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_42;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_2411DE0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::Notation::notationFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Notation::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Notation::Enum> const*>((uint64_t)&EQKitTypes::Notation::notationFromMathMLString(std::string const&,EQKitTypes::Notation::Enum)::sMap, (uint64_t)&EQKitTypes::Notation::sData, (uint64_t)&EQKitTypes::GroupAlign::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Notation::notationFromMathMLString(std::string const&,EQKitTypes::Notation::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103938)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DE1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EQKitTypes::Notation::notationVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_2412366F7[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::Notation::notationFromMathMLString((uint64_t *)&__p, 0);
    v13 = v12;
    v15 = a2[1];
    v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a2;
      v18 = (v15 - *a2) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v5, v21);
        v17 = *a2;
        v15 = a2[1];
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      *(_DWORD *)v23 = v13;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v15 = v12;
      v16 = v15 + 4;
    }
    a2[1] = v16;
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_42:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_42;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_2411DE3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::GroupAlign::groupAlignFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::GroupAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::GroupAlign::Enum> const*>((uint64_t)&EQKitTypes::GroupAlign::groupAlignFromMathMLString(std::string const&,EQKitTypes::GroupAlign::Enum)::sMap, (uint64_t)&EQKitTypes::GroupAlign::sData, (uint64_t)&EQKitTypes::Edge::sData);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::GroupAlign::groupAlignFromMathMLString(std::string const&,EQKitTypes::GroupAlign::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103958)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DE4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Edge::edgeFromMathMLString(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((v4 & 1) == 0
  {
    std::map<std::string_view const,EQKitTypes::Edge::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Edge::Enum> const*>((uint64_t)&EQKitTypes::Edge::edgeFromMathMLString(std::string const&,EQKitTypes::Edge::Enum)::sMap, (uint64_t)&EQKitTypes::Edge::sData, (uint64_t)&__block_descriptor_40_e5_v8__0l);
  }
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  v9[0] = v6;
  v9[1] = v5;
  v7 = std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::find<std::string_view>((uint64_t)&EQKitTypes::Edge::edgeFromMathMLString(std::string const&,EQKitTypes::Edge::Enum)::sMap, (uint64_t)v9);
  if ((_UNKNOWN *)v7 != &unk_257103978)
    return *(unsigned int *)(v7 + 48);
  return a2;
}

void sub_2411DE594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitMathMLElement::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitMathMLElement::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE614(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Display::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Display::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE694(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKit::Script::Variant>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Script::Variant> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE714(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKit::Config::Operator::Form>::map[abi:ne180100]<std::pair<std::string_view const,EQKit::Config::Operator::Form> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE794(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Align::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Align::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE814(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::VAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::VAlign::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE894(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Boolean::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Boolean::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Attributes::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Attributes::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DE994(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Crossout::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Crossout::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DEA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Notation::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Notation::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DEA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::GroupAlign::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::GroupAlign::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DEB14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view const,EQKitTypes::Edge::Enum>::map[abi:ne180100]<std::pair<std::string_view const,EQKitTypes::Edge::Enum> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string_view const,float>,std::__map_value_compare<std::string_view const,std::__value_type<std::string_view const,float>,std::less<std::string_view const>,true>,std::allocator<std::__value_type<std::string_view const,float>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2411DEB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_2411DEE4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2411DEF18()
{
  JUMPOUT(0x2411DEF08);
}

void sub_2411DEF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DF0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411DF1C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DF30C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411DF450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DF508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2411DF660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_2411DF76C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DF820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_2411DF89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2411DF950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DF9CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411DFA50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DFAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411DFCAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CGFloat EQKitBox_ContextScale(CGContext *a1)
{
  CGAffineTransform v2;
  CGAffineTransformComponents v3;
  CGAffineTransform v4;

  memset(&v4, 0, sizeof(v4));
  CGContextGetCTM(&v4, a1);
  v2 = v4;
  memset(&v3, 0, sizeof(v3));
  CGAffineTransformDecompose(&v3, &v2);
  return v3.scale.height;
}

void sub_2411E031C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E0554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E07B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E0948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E09A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)EQKitRule;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2411E0B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E0D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2411E0F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E0F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EQKitStringBox;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2411E102C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E112C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2411E12A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E13EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E1480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E16E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E1990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E1A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EQKitPathBox;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2411E1C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E1F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E2298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E230C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E23E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2411E2614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E27C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E2A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E2BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E2D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E2F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E3100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E31B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E3240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E32E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E347C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E3624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E37C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E3990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E3A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E3C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2411E3E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E3F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E4124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E41D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E426C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E43DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E44E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2411E4734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E48F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2411E4EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E4FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E5074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E5160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E51F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E527C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E5390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_2411E54B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2411E55F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E56B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E5824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E58B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2411E5940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2411E5A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_2411E5B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void blahtex::translateToken(blahtex *this@<X0>, blahtex::Token *a2@<X8>)
{
  unsigned __int8 v5;
  int v6;
  int *v7;
  uint64_t *v8;
  unint64_t v9;
  const void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst[2];
  unint64_t v15;

  if ((v5 & 1) == 0
  {
    std::unordered_map<wchar_t,std::wstring_view>::unordered_map<std::pair<wchar_t,std::wstring_view> const*>((uint64_t)blahtex::translateToken(blahtex::Token const&)::equivalentInputSymbolsTable, (int *)&blahtex::equivalentInputSymbolsArray, (int *)&blahtex::equivalentInputSymbolsArray + 2442);
  }
  v6 = *((char *)this + 23);
  if (v6 < 0)
  {
    if (*((_QWORD *)this + 1) != 1)
    {
LABEL_12:
      blahtex::Token::Token(a2, this);
      return;
    }
    v7 = *(int **)this;
  }
  else
  {
    v7 = (int *)this;
    if (v6 != 1)
      goto LABEL_12;
  }
  v8 = std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(blahtex::translateToken(blahtex::Token const&)::equivalentInputSymbolsTable, v7);
  if (!v8)
    goto LABEL_12;
  v9 = v8[4];
  if (v9 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (const void *)v8[3];
  if (v9 >= 5)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v9 | 1) != 5)
      v12 = v9 | 1;
    v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v12 + 1);
    __dst[1] = (void *)v9;
    v15 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v15) = v8[4];
  v11 = __dst;
  if (v9)
LABEL_16:
    memmove(v11, v10, 4 * v9);
  *((_DWORD *)v11 + v9) = 0;
  blahtex::Token::Token(a2, __dst, *((_QWORD *)this + 3));
  if (SHIBYTE(v15) < 0)
    operator delete(__dst[0]);
}

void sub_2411E5D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<wchar_t,std::wstring_view>::unordered_map<std::pair<wchar_t,std::wstring_view> const*>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t,std::wstring_view> const&>(a1, v5, (uint64_t)v5);
      v5 += 6;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2411E5DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::__emplace_unique_key_args<wchar_t,std::pair<wchar_t,std::wstring_view> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x28uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2411E6010(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void blahtex::Interface::ProcessInput(uint64_t a1, std::wstring::size_type a2, int a3)
{
  blahtex::Manager *v6;
  uint64_t *v7;

  v6 = (blahtex::Manager *)operator new();
  blahtex::Manager::Manager(v6);
  v7 = *(uint64_t **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
  {
    std::default_delete<blahtex::Manager>::operator()[abi:ne180100](a1, v7);
    v6 = *(blahtex::Manager **)a1;
  }
  blahtex::Manager::ProcessInput((std::wstring **)v6, a2, *(unsigned __int8 *)(a1 + 120), a3);
}

void sub_2411E614C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1032C408BA9FD94);
  _Unwind_Resume(a1);
}

uint64_t blahtex::Interface::GetMathml@<X0>(blahtex::Interface *this@<X0>, std::wstringbuf::string_type *a2@<X8>)
{
  uint64_t v4;
  blahtex::MathmlNode *v6;
  void (__cdecl **v7)(std::wostringstream *__hidden);
  std::wstringbuf v8;
  void (__cdecl **v9)(std::wostringstream *__hidden);

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  blahtex::Manager::GenerateMathml(*(_QWORD *)this, (__int128 *)((char *)this + 8));
  blahtex::MathmlNode::Print((uint64_t)v6, &v7, (uint64_t)this + 32, *((unsigned __int8 *)this + 121), 0);
  std::wstringbuf::str(a2, &v8);
  if (v6)
  {
    blahtex::MathmlNode::~MathmlNode(v6);
    MEMORY[0x242690740](v4);
  }
  if (SHIBYTE(v8.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x242690710](&v9);
}

void sub_2411E6268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &unk_251138888;
  *(_QWORD *)a1 = &unk_251138860;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)(a1 + 8));
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::wstreambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2411E6334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::wostream::~wostream();
  MEMORY[0x242690710](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 112;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x242690710](v2);
  return a1;
}

void `virtual thunk to'std::wostringstream::~wostringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  JUMPOUT(0x242690710);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x242690710](v1 + 112);
  JUMPOUT(0x242690740);
}

void std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 112;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x242690710](v1);
  JUMPOUT(0x242690740);
}

uint64_t std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::wstreambuf::~wstreambuf();
}

void std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::wstreambuf::~wstreambuf();
  JUMPOUT(0x242690740);
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekoff(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf::pos_type *this, std::wstringbuf::off_type a3, std::ios_base::seekdir __way, std::ios_base::openmode __wch)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::streamoff v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(&this->__st_._mbstateL + 11);
  v6 = *(&this->__st_._mbstateL + 6);
  if (v5 < v6)
  {
    *(&this->__st_._mbstateL + 11) = v6;
    v5 = v6;
  }
  if ((__wch & 0x18) == 0 || __way == cur && (__wch & 0x18) == 0x18)
    goto LABEL_14;
  if (!v5)
  {
    v8 = 0;
    if (__way)
      goto LABEL_10;
LABEL_17:
    v11 = __way;
    goto LABEL_21;
  }
  v7 = &this->__st_._mbstateL + 8;
  if (this->__st_.__mbstate8[87] < 0)
    v7 = (uint64_t *)*v7;
  v8 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
  if (__way == beg)
    goto LABEL_17;
LABEL_10:
  if (__way == end)
  {
    v11 = v8;
    goto LABEL_21;
  }
  if (__way != cur)
  {
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  if ((__wch & 8) != 0)
    v9 = *(&this->__st_._mbstateL + 3) - *(&this->__st_._mbstateL + 2);
  else
    v9 = v6 - *(&this->__st_._mbstateL + 5);
  v11 = v9 >> 2;
LABEL_21:
  v10 = -1;
  v12 = v11 + a3;
  if (v12 >= 0
    && v8 >= v12
    && (!v12 || ((__wch & 8) == 0 || *(&this->__st_._mbstateL + 3)) && ((__wch & 0x10) == 0 || v6)))
  {
    if ((__wch & 8) != 0)
    {
      *(&this->__st_._mbstateL + 3) = *(&this->__st_._mbstateL + 2) + 4 * v12;
      *(&this->__st_._mbstateL + 4) = v5;
    }
    if ((__wch & 0x10) != 0)
      *(&this->__st_._mbstateL + 6) = *(&this->__st_._mbstateL + 5) + 4 * v12;
    v10 = v12;
  }
LABEL_15:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = v10;
  return this;
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekpos(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf *this, std::wstringbuf::pos_type *__sp, std::ios_base::openmode __wch)
{
  return (std::wstringbuf::pos_type *)((std::wstringbuf::pos_type *(*)(std::wstringbuf::pos_type *__return_ptr))this->seekoff)(retstr);
}

std::wstringbuf::int_type std::wstringbuf::underflow(std::wstringbuf *this)
{
  std::wstreambuf::char_type *hm;
  std::wstreambuf::char_type *nout;
  std::wstreambuf::char_type *einp;
  std::wstreambuf::char_type *ninp;

  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  if ((this->__mode_ & 8) == 0)
    return -1;
  einp = this->__einp_;
  if (einp < hm)
  {
    this->__einp_ = hm;
    einp = hm;
  }
  ninp = this->__ninp_;
  if (ninp < einp)
    return *ninp;
  else
    return -1;
}

std::wstringbuf::int_type std::wstringbuf::pbackfail(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  std::wstreambuf::char_type *hm;
  std::wstreambuf::char_type *nout;
  std::wstreambuf::char_type *ninp;
  std::wstreambuf::char_type *v5;

  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  ninp = this->__ninp_;
  if (this->__binp_ < ninp)
  {
    if (__c == -1)
    {
      __c = 0;
      v5 = ninp - 1;
      goto LABEL_10;
    }
    if ((this->__mode_ & 0x10) != 0 || *(ninp - 1) == __c)
    {
      *(ninp - 1) = __c;
      v5 = ninp - 1;
LABEL_10:
      this->__ninp_ = v5;
      this->__einp_ = hm;
      return __c;
    }
  }
  return -1;
}

std::wstringbuf::int_type std::wstringbuf::overflow(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  uint64_t v2;
  std::wstreambuf::char_type *ninp;
  std::wstreambuf::char_type *binp;
  std::wstreambuf::char_type *eout;
  std::wstreambuf::char_type *nout;
  std::wstringbuf::char_type *hm;
  std::wstreambuf::char_type *bout;
  std::wstringbuf::char_type *v10;
  std::wstringbuf::string_type *p_str;
  std::wstring::size_type v12;
  std::wstring::size_type size;
  std::wstringbuf::string_type *v14;

  if (__c == -1)
  {
    LODWORD(v2) = 0;
    return v2;
  }
  v2 = *(_QWORD *)&__c;
  binp = this->__binp_;
  ninp = this->__ninp_;
  nout = this->__nout_;
  eout = this->__eout_;
  if (nout != eout)
  {
    hm = this->__hm_;
    goto LABEL_14;
  }
  if ((this->__mode_ & 0x10) == 0)
  {
    LODWORD(v2) = -1;
    return v2;
  }
  bout = this->__bout_;
  v10 = this->__hm_;
  p_str = &this->__str_;
  std::wstring::push_back(&this->__str_, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
    v12 = (this->__str_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  else
    v12 = 4;
  std::wstring::resize(&this->__str_, v12, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::wstringbuf::string_type *)this->__str_.__r_.__value_.__l.__data_;
    size = this->__str_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__str_.__r_.__value_.__r.__words[2]);
  }
  eout = (std::wstreambuf::char_type *)((char *)p_str + 4 * size);
  nout = (std::wstreambuf::char_type *)((char *)p_str + 4 * (nout - bout));
  this->__bout_ = (std::wstreambuf::char_type *)p_str;
  this->__nout_ = nout;
  this->__eout_ = eout;
  hm = (std::wstringbuf::char_type *)((char *)p_str + 4 * (v10 - bout));
LABEL_14:
  if (nout + 1 >= hm)
    hm = nout + 1;
  this->__hm_ = hm;
  if ((this->__mode_ & 8) != 0)
  {
    v14 = &this->__str_;
    if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
      v14 = (std::wstringbuf::string_type *)v14->__r_.__value_.__r.__words[0];
    this->__binp_ = (std::wstreambuf::char_type *)v14;
    this->__ninp_ = (std::wstreambuf::char_type *)((char *)v14 + 4 * (ninp - binp));
    this->__einp_ = hm;
  }
  if (nout != eout)
  {
    this->__nout_ = nout + 1;
    *nout = v2;
    return v2;
  }
  return ((uint64_t (*)(std::wstringbuf *, uint64_t))this->overflow)(this, v2);
}

void sub_2411E6984(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2411E6874);
}

blahtex::MathmlNode *std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](blahtex::MathmlNode **a1, blahtex::MathmlNode *a2)
{
  blahtex::MathmlNode *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    JUMPOUT(0x242690740);
  }
  return result;
}

std::wstringbuf::string_type *__cdecl std::wstringbuf::str(std::wstringbuf::string_type *__return_ptr retstr, std::wstringbuf::string_type *this)
{
  std::wstring::value_type v2;
  int *size;
  std::wstring::pointer data;
  int *v5;

  v2 = this[4].__r_.__value_.__s.__data_[0];
  if ((v2 & 0x10) != 0)
  {
    size = (int *)this[3].__r_.__value_.__r.__words[2];
    data = this[2].__r_.__value_.__l.__data_;
    if (size < data)
    {
      this[3].__r_.__value_.__r.__words[2] = (std::wstring::size_type)data;
      size = data;
    }
    v5 = (int *)this[1].__r_.__value_.__r.__words[2];
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = 0uLL;
      retstr->__r_.__value_.__r.__words[2] = 0;
      return this;
    }
    v5 = (int *)this->__r_.__value_.__r.__words[2];
    size = (int *)this[1].__r_.__value_.__l.__size_;
  }
  return (std::wstringbuf::string_type *)std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(retstr, v5, size, size - v5);
}

_QWORD *std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

uint64_t blahtex::MathmlEnvironment::MathmlEnvironment(uint64_t this, unsigned int a2, int a3)
{
  std::logic_error *exception;

  *(_DWORD *)(this + 8) = a3;
  *(_BYTE *)this = a2 == 0;
  if (a2 >= 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected style value in MathmlEnvironment::MathmlEnvironment");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  *(_DWORD *)(this + 4) = dword_2412170D0[a2];
  return this;
}

void sub_2411E6B28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Row::~Row(blahtex::LayoutTree::Row *this)
{
  _QWORD *v1;
  _QWORD *i;
  uint64_t v3;

  *(_QWORD *)this = &off_251138958;
  v1 = (_QWORD *)((char *)this + 24);
  for (i = (_QWORD *)*((_QWORD *)this + 4); i != v1; i = (_QWORD *)i[1])
  {
    v3 = i[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v1);
}

{
  blahtex::LayoutTree::Row::~Row(this);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Table::~Table(blahtex::LayoutTree::Table *this)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;

  *(_QWORD *)this = &off_251138990;
  v2 = (void **)((char *)this + 24);
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  while (v3 != v4)
  {
    v6 = *(_QWORD **)v3;
    v5 = *(_QWORD **)(v3 + 8);
    if (*(_QWORD **)v3 != v5)
    {
      do
      {
        if (*v6)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
          v5 = *(_QWORD **)(v3 + 8);
        }
        ++v6;
      }
      while (v6 != v5);
      v4 = *((_QWORD *)this + 4);
    }
    v3 += 24;
  }
  v7 = v2;
  std::vector<std::vector<blahtex::LayoutTree::Node *>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

{
  blahtex::LayoutTree::Table::~Table(this);
  JUMPOUT(0x242690740);
}

unsigned int *blahtex::LayoutTree::IncrementNodeCount(unsigned int *this, unsigned int *a2)
{
  unsigned int v2;
  std::wstring *exception;
  _BYTE v4[24];
  _BYTE v5[24];
  _BYTE v6[24];
  __int128 v7;

  v2 = *this + 1;
  *this = v2;
  if (v2 >= 0x9C4)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v7, dword_241216250);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v6, &dword_24121629C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v5, &dword_24121629C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v4, &dword_24121629C);
    blahtex::Exception::Exception(exception, &v7, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
  }
  return this;
}

void sub_2411E6D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v28 - 33) < 0)
  {
    operator delete(*(void **)(v28 - 56));
    if ((v27 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v26);
  goto LABEL_12;
}

void blahtex::Exception::~Exception(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t blahtex::LayoutTree::FormatColour@<X0>(std::wstringbuf::string_type *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  int v6;
  void (__cdecl **v7)(std::wostringstream *__hidden);
  std::wstringbuf v8;
  void (__cdecl **v9)(std::wostringstream *__hidden);

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  v3 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v7, (uint64_t)"#", 1);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  v6 = 48;
  v4 = std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(v3, &v6);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 6;
  std::wostream::operator<<();
  std::wstringbuf::str(a1, &v8);
  if (SHIBYTE(v8.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x242690710](&v9);
}

void sub_2411E6F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(_QWORD *a1, int *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x24BEDB360]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[3].__on_zero_shared)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_2411E6FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

unsigned int **blahtex::LayoutTree::AdjustMathmlEnvironment@<X0>(unsigned int **result@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unsigned int **v8;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  const char *v18;
  uint64_t **v19;
  uint64_t **v20;
  __int128 v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t **v24;
  void **v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  std::wstringbuf::string_type v29;
  std::wstringbuf::string_type __p[3];
  void *v31;
  char v32;
  void (__cdecl **v33)(std::wostringstream *__hidden);
  void *v34[2];
  char v35;
  uint64_t v36;
  _DWORD *v37[2];

  v8 = result;
  v10 = HIDWORD(a2);
  v11 = HIDWORD(a4);
  v12 = a2 & 1;
  v13 = a4 & 1;
  if (v12 == (a4 & 1) && HIDWORD(a2) == HIDWORD(a4) && a3 == a5)
  {
    v14 = *result;
    if (**result != 18)
    {
      *result = 0;
      *a6 = (uint64_t)v14;
      return result;
    }
  }
  v15 = operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v34, &dword_24121629C);
  blahtex::Token::Token(__p, v34, 0);
  blahtex::MathmlNode::MathmlNode(v15, 6, (blahtex::Token *)__p);
  v36 = v15;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v12 != (_DWORD)v13)
  {
    if (**v8 == 18)
    {
      v16 = (uint64_t **)(*v8 + 2);
      v29.__r_.__value_.__s.__data_[0] = 0;
      __p[0].__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v29;
      v17 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v16, (int *)&v29, (uint64_t)&std::piecewise_construct, &__p[0].__r_.__value_.__l.__data_)+ 5;
      if (v13)
        v18 = "t";
      else
        v18 = "f";
    }
    else
    {
      v29.__r_.__value_.__s.__data_[0] = 0;
      __p[0].__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v29;
      v17 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v15 + 8), (int *)&v29, (uint64_t)&std::piecewise_construct, &__p[0].__r_.__value_.__l.__data_)+ 5;
      if (v13)
        v18 = "t";
      else
        v18 = "f";
    }
    MEMORY[0x242690560](v17, v18);
  }
  if ((_DWORD)v10 != (_DWORD)v11 || **v8 == 18)
  {
    std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::wostream::operator<<();
    std::wstringbuf::str(&v29, (const std::wstringbuf *)&__p[0].__r_.__value_.__r.__words[1]);
    v28 = 1;
    v37[0] = &v28;
    v19 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v15 + 8), &v28, (uint64_t)&std::piecewise_construct, v37);
    v20 = v19 + 5;
    if (*((char *)v19 + 63) < 0)
      operator delete(*v20);
    v21 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
    v20[2] = (uint64_t *)v29.__r_.__value_.__r.__words[2];
    *(_OWORD *)v20 = v21;
    if (v32 < 0)
      operator delete(v31);
    std::wstreambuf::~wstreambuf();
    std::wostream::~wostream();
    MEMORY[0x242690710](&v33);
  }
  if (a3 != a5)
  {
    v22 = **v8;
    if (v22 > 4 || v22 == 3)
    {
      if (a5 != -1)
      {
        blahtex::LayoutTree::FormatColour(__p);
        LODWORD(v37[0]) = 3;
        v29.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v37;
        v24 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v15 + 8), (int *)v37, (uint64_t)&std::piecewise_construct, &v29.__r_.__value_.__l.__data_);
        goto LABEL_31;
      }
    }
    else if (a5 != -1)
    {
      blahtex::LayoutTree::FormatColour(__p);
      v23 = (uint64_t **)(*v8 + 2);
      LODWORD(v37[0]) = 3;
      v29.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v37;
      v24 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v23, (int *)v37, (uint64_t)&std::piecewise_construct, &v29.__r_.__value_.__l.__data_);
LABEL_31:
      v25 = (void **)(v24 + 5);
      if (*((char *)v24 + 63) < 0)
        operator delete(*v25);
      *(std::wstringbuf::string_type *)v25 = __p[0];
    }
  }
  v26 = *v8;
  if (*(_QWORD *)(v15 + 24))
  {
    if (*v26 == 5)
    {
      result = (unsigned int **)std::__list_imp<blahtex::MathmlNode *>::swap((__int128 *)(v15 + 64), (uint64_t *)v26 + 8);
    }
    else
    {
      *v8 = 0;
      result = (unsigned int **)operator new(0x18uLL);
      v27 = *(_QWORD *)(v15 + 64);
      result[1] = (unsigned int *)(v15 + 64);
      result[2] = v26;
      *result = (unsigned int *)v27;
      *(_QWORD *)(v27 + 8) = result;
      *(_QWORD *)(v15 + 64) = result;
      ++*(_QWORD *)(v15 + 80);
    }
    *a6 = v15;
  }
  else
  {
    *v8 = 0;
    *a6 = (uint64_t)v26;
    blahtex::MathmlNode::~MathmlNode((blahtex::MathmlNode *)v15);
    return (unsigned int **)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E73EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v21 - 112), 0);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Row::BuildMathmlTree(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, blahtex::MathmlNode **a5@<X8>)
{
  uint64_t v7;
  unsigned int *v8;
  blahtex::MathmlNode *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  void *v20;
  unsigned __int8 *v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  int v42;
  BOOL v43;
  uint64_t **v44;
  char v45;
  void *v46;
  std::wstringbuf_vtbl *v47;
  int v48;
  BOOL v49;
  uint64_t **v50;
  std::wstring::size_type v51;
  std::wstring::size_type v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t **v59;
  _BOOL4 v60;
  _BOOL4 v61;
  std::wstring::size_type v62;
  unsigned int *v63;
  uint64_t **v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  void *v68;
  unsigned __int8 *v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v84;
  void *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  _QWORD *v94;
  int v95;
  uint64_t **v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  blahtex::MathmlNode *v100;
  blahtex::MathmlNode *v101;
  blahtex::MathmlNode *v102;
  uint64_t v103;
  uint64_t *v104;
  blahtex::MathmlNode *v105;
  uint64_t v106;
  blahtex::MathmlNode **v107;
  uint64_t v108;
  unint64_t v111;
  char v112;
  uint64_t v113;
  int v115;
  unint64_t v116;
  blahtex::MathmlNode *v117;
  blahtex::MathmlNode *v118;
  void *v119[2];
  char v120;
  int v121;
  void *v122[2];
  char v123;
  std::wstringbuf::string_type v124;
  void *__p;
  std::wstringbuf v126;
  void (__cdecl **v127)(std::wostringstream *__hidden);
  std::wstring __str;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  char *v131;
  void *v132[2];
  char v133;

  v7 = operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v132, &dword_24121629C);
  blahtex::Token::Token(&__p, v132, 0);
  blahtex::MathmlNode::MathmlNode(v7, 5, (blahtex::Token *)&__p);
  *a5 = (blahtex::MathmlNode *)v7;
  if (SHIBYTE(v126.__loc_.__locale_) < 0)
    operator delete(__p);
  if (v133 < 0)
    operator delete(v132[0]);
  v9 = *a5;
  v10 = blahtex::LayoutTree::IncrementNodeCount(a4, v8);
  if (!*(_QWORD *)(a1 + 40))
    return;
  v107 = a5;
  v108 = a1;
  v11 = 0;
  v113 = (uint64_t)v9 + 64;
  v12 = a1 + 24;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v13 = (unint64_t *)(a1 + 32);
  v14 = a1 + 24;
  v15 = a1 + 24;
  v111 = a1 + 24;
  do
  {
    v16 = v11;
    v116 = v15;
    if (*((_QWORD *)v9 + 10))
      v11 = *(_QWORD *)(*(_QWORD *)v113 + 16);
    else
      v11 = 0;
    v15 = *v13;
    if (*v13 == v12)
    {
      v17 = 0;
      v18 = 0;
      v22 = 0;
      v115 = 1;
      v15 = v12;
      goto LABEL_40;
    }
    v10 = *(_QWORD **)(v15 + 16);
    if (v10
    {
      v17 = *((_DWORD *)v10 + 6);
      v18 = *((_BYTE *)v10 + 28) != 0;
      v15 = *(_QWORD *)(v15 + 8);
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    if (v15 == v12)
    {
      v22 = 0;
      v115 = 1;
      goto LABEL_40;
    }
    blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)(v15 + 16) + 8), *(_DWORD *)(*(_QWORD *)(v15 + 16) + 20));
    v19 = v130;
    if (v130 >= (unsigned __int8 *)v131)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v130 - v129) >> 2);
      v24 = v23 + 1;
      if (v23 + 1 > 0x1555555555555555)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v131 - (char *)v129) >> 2) > v24)
        v24 = 0x5555555555555556 * ((v131 - (char *)v129) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v131 - (char *)v129) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v25 = 0x1555555555555555;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<blahtex::MathmlEnvironment>>((uint64_t)&v131, v25);
      else
        v26 = 0;
      v27 = &v26[12 * v23];
      v28 = __p;
      *((_DWORD *)v27 + 2) = v126.__vftable;
      *(_QWORD *)v27 = v28;
      v30 = v129;
      v29 = v130;
      v31 = (unsigned __int8 *)v27;
      if (v130 != v129)
      {
        do
        {
          v32 = *(_QWORD *)(v29 - 12);
          v29 -= 12;
          v33 = *((_DWORD *)v29 + 2);
          *(_QWORD *)(v31 - 12) = v32;
          v31 -= 12;
          *((_DWORD *)v31 + 2) = v33;
        }
        while (v29 != v30);
        v29 = v129;
      }
      v21 = (unsigned __int8 *)(v27 + 12);
      v129 = v31;
      v130 = (unsigned __int8 *)(v27 + 12);
      v131 = &v26[12 * v25];
      if (v29)
        operator delete(v29);
    }
    else
    {
      v20 = __p;
      *((_DWORD *)v130 + 2) = v126.__vftable;
      *(_QWORD *)v19 = v20;
      v21 = v19 + 12;
    }
    v130 = v21;
    (*(void (**)(void **__return_ptr, _QWORD, _DWORD *, _DWORD *, unsigned int *))(**(_QWORD **)(v15 + 16)
                                                                                            + 24))(&__p, *(_QWORD *)(v15 + 16), a2, (_DWORD *)v21 - 3, a4);
    v34 = __p;
    __p = 0;
    v10 = operator new(0x18uLL);
    v10[1] = v113;
    v10[2] = v34;
    v35 = *((_QWORD *)v9 + 8);
    *v10 = v35;
    *(_QWORD *)(v35 + 8) = v10;
    *((_QWORD *)v9 + 8) = v10;
    ++*((_QWORD *)v9 + 10);
    v22 = (int *)v10[2];
    if (!v22)
    {
      v115 = 0;
LABEL_40:
      v112 = 1;
      if (!v11)
        goto LABEL_38;
      goto LABEL_41;
    }
    do
    {
      if ((*v22 - 7) > 5)
        break;
      v22 = *(int **)(*((_QWORD *)v22 + 9) + 16);
    }
    while (v22);
    v115 = 0;
    v112 = 0;
    if (!v11)
    {
LABEL_38:
      v36 = 0;
      goto LABEL_44;
    }
LABEL_41:
    v36 = v11;
    do
    {
      if ((*(_DWORD *)v36 - 7) > 5)
        break;
      v36 = *(_QWORD *)(*(_QWORD *)(v36 + 72) + 16);
    }
    while (v36);
LABEL_44:
    if (v16)
    {
      while ((*(_DWORD *)v16 - 7) <= 5)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v16 + 72) + 16);
        if (!v16)
          goto LABEL_47;
      }
      v38 = *(_DWORD *)v16 == 1;
      v37 = v38;
      if (v36)
      {
LABEL_48:
        v39 = *(_DWORD *)v36 == 1;
        if (!v22)
          goto LABEL_61;
        goto LABEL_52;
      }
    }
    else
    {
LABEL_47:
      v37 = 0;
      v38 = 1;
      if (v36)
        goto LABEL_48;
    }
    v39 = 0;
    if (!v22)
      goto LABEL_61;
LABEL_52:
    v40 = *v22;
    v41 = *v22 == 1;
    if (v37 && v39 && v40 != 1)
    {
      v42 = *(_DWORD *)(*(_QWORD *)(v14 + 16) + 12);
      v43 = v42 == 4 || v42 == 2;
      if (v43 && (*(_DWORD *)(*(_QWORD *)(v116 + 16) + 12) & 0xFFFFFFFD) == 0)
      {
        __str.__r_.__value_.__s.__data_[0] = 21;
        __p = &__str;
        v44 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v36 + 8), (int *)&__str, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
        v10 = (_QWORD *)MEMORY[0x242690560](v44 + 5, "p");
      }
LABEL_61:
      v41 = 0;
      goto LABEL_62;
    }
    if (!v38 && v39 && v40 == 1)
    {
      v48 = *(_DWORD *)(*(_QWORD *)(v15 + 16) + 12);
      v49 = v48 == 5 || v48 == 2;
      if (v49 && (*(_DWORD *)(*(_QWORD *)(v116 + 16) + 12) & 0xFFFFFFFD) == 0)
      {
        __str.__r_.__value_.__s.__data_[0] = 21;
        __p = &__str;
        v50 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v36 + 8), (int *)&__str, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
        v10 = (_QWORD *)MEMORY[0x242690560](v50 + 5, "p");
      }
    }
LABEL_62:
    blahtex::ForcedSpaceOpsTable((blahtex *)v10);
    if (*a2)
      v45 = v18;
    else
      v45 = 1;
    if ((v45 & 1) == 0)
    {
      if (!v39
        || (*(char *)(v36 + 55) < 0
          ? (v46 = *(void **)(v36 + 32), v47 = *(std::wstringbuf_vtbl **)(v36 + 40))
          : (v46 = (void *)(v36 + 32), v47 = (std::wstringbuf_vtbl *)*(unsigned __int8 *)(v36 + 55)),
            __p = v46,
            v126.__vftable = v47,
            (v10 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ForcedSpaceOpsTable(void)::forcedSpaceOpsTable, (uint64_t)&__p)) == 0))
      {
        if (!v41)
        {
          v53 = *a2 != 1 || v39;
          if ((v53 & 1) != 0 || !v17)
            goto LABEL_147;
          memset(&__str, 0, sizeof(__str));
          goto LABEL_92;
        }
        if (*((char *)v22 + 55) < 0)
        {
          v51 = *((_QWORD *)v22 + 4);
          v52 = *((_QWORD *)v22 + 5);
        }
        else
        {
          v51 = (std::wstring::size_type)(v22 + 8);
          v52 = *((unsigned __int8 *)v22 + 55);
        }
        __str.__r_.__value_.__r.__words[0] = v51;
        __str.__r_.__value_.__l.__size_ = v52;
        v10 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ForcedSpaceOpsTable(void)::forcedSpaceOpsTable, (uint64_t)&__str);
        if (!v10)
          goto LABEL_147;
      }
    }
    memset(&__str, 0, sizeof(__str));
    if (!v17)
    {
      v10 = (_QWORD *)MEMORY[0x242690560](&__str, "0");
      v56 = 0;
      if (v39)
        goto LABEL_97;
      goto LABEL_100;
    }
LABEL_92:
    std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    v54 = __p;
    *(_DWORD *)((char *)&v126.__vftable + *((_QWORD *)__p - 3)) = *(_DWORD *)((_BYTE *)&v126.__vftable
                                                                            + *((_QWORD *)__p - 3)) & 0xFFFFFEFB | 4;
    *(std::locale::__imp **)((char *)&v126.__loc_.__locale_ + *(v54 - 3)) = (std::locale::__imp *)3;
    v55 = (_QWORD *)std::wostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v55, (uint64_t)"e", 2);
    std::wstringbuf::str(&v124, &v126);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v124;
    if (SHIBYTE(v126.__str_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__str_.__r_.__value_.__l.__data_);
    std::wstreambuf::~wstreambuf();
    std::wostream::~wostream();
    v10 = (_QWORD *)MEMORY[0x242690710](&v127);
    v56 = 1;
    if (v39)
    {
LABEL_97:
      v124.__r_.__value_.__s.__data_[0] = 5;
      __p = &v124;
      v57 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v36 + 8), (int *)&v124, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      v10 = std::wstring::operator=((std::wstring *)(v57 + 5), &__str);
      if (v41)
      {
        v124.__r_.__value_.__s.__data_[0] = 4;
        __p = &v124;
        v58 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)v22 + 1, (int *)&v124, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
        v10 = (_QWORD *)MEMORY[0x242690560](v58 + 5, "0");
      }
      goto LABEL_145;
    }
LABEL_100:
    if (v41)
    {
      v124.__r_.__value_.__s.__data_[0] = 4;
      __p = &v124;
      v59 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)v22 + 1, (int *)&v124, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      v10 = std::wstring::operator=((std::wstring *)(v59 + 5), &__str);
      goto LABEL_145;
    }
    if (v36)
      v60 = *(_DWORD *)v36 == 0;
    else
      v60 = 0;
    if (v22)
      v61 = *v22 == 0;
    else
      v61 = 0;
    if ((v56 | (v60 && v61)) == 1)
    {
      v62 = operator new();
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v122, &dword_24121629C);
      blahtex::Token::Token(&__p, v122, 0);
      blahtex::MathmlNode::MathmlNode(v62, 3, (blahtex::Token *)&__p);
      v124.__r_.__value_.__r.__words[0] = v62;
      if (SHIBYTE(v126.__loc_.__locale_) < 0)
        operator delete(__p);
      if (v123 < 0)
        operator delete(v122[0]);
      blahtex::LayoutTree::IncrementNodeCount(a4, v63);
      v121 = 6;
      __p = &v121;
      v64 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v62 + 8), &v121, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      std::wstring::operator=((std::wstring *)(v64 + 5), &__str);
      if ((v112 & 1) != 0)
      {
        v124.__r_.__value_.__r.__words[0] = 0;
        v65 = operator new(0x18uLL);
        v65[1] = v113;
        v65[2] = v62;
        v66 = *((_QWORD *)v9 + 8);
        *v65 = v66;
        *(_QWORD *)(v66 + 8) = v65;
        *((_QWORD *)v9 + 8) = v65;
        ++*((_QWORD *)v9 + 10);
        v10 = (_QWORD *)blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&__p, *(_DWORD *)(v108 + 8), *(_DWORD *)(v108 + 20));
        v67 = v130;
        if (v130 < (unsigned __int8 *)v131)
        {
          v68 = __p;
          *((_DWORD *)v130 + 2) = v126.__vftable;
          *(_QWORD *)v67 = v68;
          v69 = v67 + 12;
LABEL_144:
          v130 = v69;
          goto LABEL_145;
        }
        v76 = 0xAAAAAAAAAAAAAAABLL * ((v130 - v129) >> 2);
        v77 = v76 + 1;
        if (v76 + 1 > 0x1555555555555555)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v131 - (char *)v129) >> 2) > v77)
          v77 = 0x5555555555555556 * ((v131 - (char *)v129) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v131 - (char *)v129) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v75 = 0x1555555555555555;
        else
          v75 = v77;
        if (v75)
          v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<blahtex::MathmlEnvironment>>((uint64_t)&v131, v75);
        else
          v10 = 0;
        v78 = (unsigned __int8 *)v10 + 12 * v76;
        v85 = __p;
        *((_DWORD *)v78 + 2) = v126.__vftable;
        *(_QWORD *)v78 = v85;
        v86 = v129;
        v80 = v130;
        v82 = v78;
        if (v130 != v129)
        {
          do
          {
            v87 = *(_QWORD *)(v80 - 12);
            v80 -= 12;
            v88 = *((_DWORD *)v80 + 2);
            *(_QWORD *)(v82 - 12) = v87;
            v82 -= 12;
            *((_DWORD *)v82 + 2) = v88;
          }
          while (v80 != v86);
          goto LABEL_141;
        }
      }
      else
      {
        v70 = *(uint64_t **)v113;
        v124.__r_.__value_.__r.__words[0] = 0;
        v10 = operator new(0x18uLL);
        v10[2] = v62;
        v71 = *v70;
        *(_QWORD *)(v71 + 8) = v10;
        *v10 = v71;
        *v70 = (uint64_t)v10;
        v10[1] = v70;
        ++*((_QWORD *)v9 + 10);
        v72 = v130;
        v73 = v130 - 12;
        if (v130 < (unsigned __int8 *)v131)
        {
          *(_QWORD *)v130 = *(_QWORD *)v73;
          *((_DWORD *)v72 + 2) = *((_DWORD *)v72 - 1);
          v69 = v72 + 12;
          goto LABEL_144;
        }
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v130 - v129) >> 2);
        v74 = v18 + 1;
        if (v18 + 1 > 0x1555555555555555)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v131 - (char *)v129) >> 2) > v74)
          v74 = 0x5555555555555556 * ((v131 - (char *)v129) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v131 - (char *)v129) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v75 = 0x1555555555555555;
        else
          v75 = v74;
        if (v75)
          v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<blahtex::MathmlEnvironment>>((uint64_t)&v131, v75);
        else
          v10 = 0;
        v78 = (unsigned __int8 *)v10 + 12 * v18;
        v79 = *(_QWORD *)v73;
        *((_DWORD *)v78 + 2) = *((_DWORD *)v73 + 2);
        *(_QWORD *)v78 = v79;
        v81 = v129;
        v80 = v130;
        v82 = v78;
        if (v130 != v129)
        {
          do
          {
            v83 = *(_QWORD *)(v80 - 12);
            v80 -= 12;
            v84 = *((_DWORD *)v80 + 2);
            *(_QWORD *)(v82 - 12) = v83;
            v82 -= 12;
            *((_DWORD *)v82 + 2) = v84;
          }
          while (v80 != v81);
LABEL_141:
          v80 = v129;
        }
      }
      v69 = v78 + 12;
      v129 = v82;
      v130 = v78 + 12;
      v131 = (char *)v10 + 12 * v75;
      if (v80)
        operator delete(v80);
      goto LABEL_144;
    }
LABEL_145:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_147:
    v13 = (unint64_t *)(v15 + 8);
    v14 = v116;
    v12 = v111;
    v89 = 0x1555555555555555;
  }
  while (!v115);
  v91 = v129;
  v90 = v130;
  if (v129 != v130)
  {
    v92 = (_QWORD *)*((_QWORD *)v9 + 9);
    do
    {
      v93 = v91 + 12;
      v94 = (_QWORD *)v92[1];
      if (v91 + 12 == v90)
      {
        v93 = v90;
LABEL_169:
        v117 = (blahtex::MathmlNode *)v92[2];
        v89 = v89 & 0xFFFFFFFF00000000 | *(unsigned int *)(a3 + 8);
        v18 = v18 & 0xFFFFFFFF00000000 | *((unsigned int *)v91 + 2);
        blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v117, *(_QWORD *)a3, v89, *(_QWORD *)v91, v18, (uint64_t *)&__p);
        v92[2] = __p;
        v101 = v117;
        v117 = 0;
        if (!v101)
          goto LABEL_171;
      }
      else
      {
        v95 = 0;
        while (*v91 == *v93
             && *((_DWORD *)v91 + 1) == *((_DWORD *)v93 + 1)
             && *((_DWORD *)v91 + 2) == *((_DWORD *)v93 + 2))
        {
          v93 += 12;
          v94 = (_QWORD *)v94[1];
          --v95;
          if (v93 == v90)
          {
            v93 = v90;
            goto LABEL_158;
          }
        }
        if (!v95)
          goto LABEL_169;
LABEL_158:
        v96 = (uint64_t **)operator new();
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v119, &dword_24121629C);
        blahtex::Token::Token(&__p, v119, 0);
        blahtex::MathmlNode::MathmlNode((uint64_t)v96, 5, (blahtex::Token *)&__p);
        __str.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v96;
        if (SHIBYTE(v126.__loc_.__locale_) < 0)
          operator delete(__p);
        if (v120 < 0)
          operator delete(v119[0]);
        std::list<blahtex::MathmlNode *>::splice((uint64_t)(v96 + 8), v96[9], v113, v92, v94);
        __str.__r_.__value_.__r.__words[0] = 0;
        v118 = (blahtex::MathmlNode *)v96;
        v12 = v12 & 0xFFFFFFFF00000000 | *(unsigned int *)(a3 + 8);
        v14 = v14 & 0xFFFFFFFF00000000 | *((unsigned int *)v91 + 2);
        blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v118, *(_QWORD *)a3, v12, *(_QWORD *)v91, v14, (uint64_t *)&__p);
        v97 = __p;
        __p = 0;
        v98 = operator new(0x18uLL);
        v98[2] = v97;
        v99 = *v94;
        *(_QWORD *)(v99 + 8) = v98;
        *v98 = v99;
        *v94 = v98;
        v98[1] = v94;
        ++*((_QWORD *)v9 + 10);
        if (__p)
        {
          blahtex::MathmlNode::~MathmlNode((blahtex::MathmlNode *)__p);
          MEMORY[0x242690740]();
        }
        v100 = v118;
        v118 = 0;
        if (v100)
        {
          blahtex::MathmlNode::~MathmlNode(v100);
          MEMORY[0x242690740]();
        }
        v101 = (blahtex::MathmlNode *)__str.__r_.__value_.__r.__words[0];
        if (!__str.__r_.__value_.__r.__words[0])
          goto LABEL_171;
      }
      blahtex::MathmlNode::~MathmlNode(v101);
      MEMORY[0x242690740]();
LABEL_171:
      v90 = v130;
      v92 = v94;
      v91 = v93;
    }
    while (v93 != v130);
  }
  v102 = *v107;
  v103 = *((_QWORD *)*v107 + 10);
  if (v103)
  {
    v104 = (uint64_t *)*((_QWORD *)v102 + 8);
    v105 = *(blahtex::MathmlNode **)(*((_QWORD *)v102 + 9) + 16);
    if (v105 == (blahtex::MathmlNode *)v104[2])
    {
      v106 = *v104;
      *(_QWORD *)(v106 + 8) = v104[1];
      *(_QWORD *)v104[1] = v106;
      *((_QWORD *)v102 + 10) = v103 - 1;
      operator delete(v104);
      std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](v107, v105);
    }
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
}

void sub_2411E823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, blahtex::MathmlNode **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,blahtex::MathmlNode *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  void *v54;

  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a44, 0);
  if (*(char *)(v52 - 169) < 0)
    operator delete(*(void **)(v52 - 192));
  v54 = *(void **)(v52 - 160);
  if (v54)
  {
    *(_QWORD *)(v52 - 152) = v54;
    operator delete(v54);
  }
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](a10, 0);
  _Unwind_Resume(a1);
}

void blahtex::ForcedSpaceOpsTable(blahtex *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
    }
  }
}

void sub_2411E849C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::list<blahtex::MathmlNode *>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t blahtex::LayoutTree::FixOutOfSequenceMathmlCharacter(uint64_t a1)
{
  uint64_t result;

  if ((int)a1 > 120075)
  {
    if ((int)a1 <= 120121)
    {
      switch((_DWORD)a1)
      {
        case 0x1D50C:
          return 8465;
        case 0x1D515:
          return 8476;
        case 0x1D51D:
          return 8488;
        default:
          return a1;
      }
    }
    else
    {
      switch((int)a1)
      {
        case 120127:
          return 8461;
        case 120128:
        case 120129:
        case 120130:
        case 120131:
        case 120132:
        case 120134:
          return a1;
        case 120133:
          return 8469;
        case 120135:
          return 8473;
        case 120136:
          return 8474;
        case 120137:
          return 8477;
        default:
          if ((_DWORD)a1 == 120122)
          {
            result = 8450;
          }
          else
          {
            if ((_DWORD)a1 != 120145)
              return a1;
            result = 8484;
          }
          break;
      }
    }
  }
  else
  {
    result = 8492;
    switch((int)a1)
    {
      case 119965:
        return result;
      case 119966:
      case 119967:
      case 119970:
      case 119973:
      case 119974:
      case 119977:
      case 119978:
      case 119979:
      case 119980:
        return a1;
      case 119968:
        return 8496;
      case 119969:
        return 8497;
      case 119971:
        return 8459;
      case 119972:
        return 8464;
      case 119975:
        return 8466;
      case 119976:
        return 8499;
      case 119981:
        return 8475;
      default:
        if ((_DWORD)a1 == 120070)
        {
          result = 8493;
        }
        else
        {
          if ((_DWORD)a1 != 120075)
            return a1;
          result = 8460;
        }
        break;
    }
  }
  return result;
}

blahtex::MathmlNode *blahtex::LayoutTree::SymbolIdentifier::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int **v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  blahtex::MathmlNode *result;
  int v18;
  char v19;
  int v20;
  uint64_t **v21;
  uint64_t **v22;
  int v23;
  int *v24;
  int v25;
  uint64_t v26;
  unsigned int fixed;
  unint64_t v28;
  int v29;
  std::logic_error *v30;
  std::logic_error *exception;
  unint64_t v32;
  int v33;
  blahtex::MathmlNode *v34;
  unint64_t v35;
  int v36;
  blahtex::MathmlNode *v37;
  std::wstring __p;
  int v39;
  uint64_t v40;

  v10 = operator new();
  v11 = (int **)(a1 + 24);
  blahtex::MathmlNode::MathmlNode(v10, 0, (blahtex::Token *)(a1 + 24));
  v40 = v10;
  blahtex::LayoutTree::IncrementNodeCount(a4, v12);
  v13 = *(_DWORD *)(a1 + 56);
  if (!*(_BYTE *)(a2 + 5) || v13 - 4 > 4)
  {
    blahtex::MathmlNode::AddFontAttributes(v10, v13, a2);
    v40 = 0;
    v34 = (blahtex::MathmlNode *)v10;
    v15 = *(_QWORD *)a3;
    v16 = *(_DWORD *)(a3 + 8);
    blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v32, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
    blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v34, v15, v16, v32, v33, a5);
    result = v34;
    if (!v34)
      return result;
    goto LABEL_6;
  }
  if (*(char *)(a1 + 47) < 0)
    v14 = *(_QWORD *)(a1 + 32);
  else
    v14 = *(unsigned __int8 *)(a1 + 47);
  if (v14 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected string length in SymbolIdentifier::BuildMathmlTree()");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v18 = -97;
  v19 = 1;
  v20 = 119899;
  switch(v13)
  {
    case 4u:
      v20 = 120055;
      goto LABEL_19;
    case 5u:
      if (*(_BYTE *)(a2 + 6))
      {
        v19 = 0;
        v18 = 120101;
        v20 = 120107;
      }
      else
      {
        v39 = 18;
        __p.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v39;
        v22 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v10 + 8), &v39, (uint64_t)&std::piecewise_construct, &__p.__r_.__value_.__l.__data_);
        MEMORY[0x242690560](v22 + 5, "b");
LABEL_18:
        v19 = 0;
        v18 = 119997;
        v20 = 120003;
      }
LABEL_19:
      v23 = *(char *)(a1 + 47);
      if (v23 < 0)
      {
        v24 = *v11;
        v25 = **v11;
        if ((v25 - 65) < 0x1A)
        {
LABEL_21:
          v26 = (v20 + v25);
          if ((v19 & 1) != 0)
            goto LABEL_26;
          if ((v23 & 0x80000000) == 0)
            goto LABEL_23;
          goto LABEL_33;
        }
      }
      else
      {
        LODWORD(v24) = *(_DWORD *)v11;
        v25 = *(_DWORD *)v11;
        if ((*(_DWORD *)v11 - 65) <= 0x19)
          goto LABEL_21;
      }
      if ((v19 & 1) != 0)
      {
LABEL_35:
        v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v30, "Unexpected character/font combination in SymbolIdentifier::BuildMathmlTree()");
        __cxa_throw(v30, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
      }
      v26 = 0;
      if ((v23 & 0x80000000) == 0)
      {
LABEL_23:
        if (((_DWORD)v24 - 97) > 0x19)
          goto LABEL_25;
        goto LABEL_24;
      }
LABEL_33:
      LODWORD(v24) = **v11;
      if (((_DWORD)v24 - 97) < 0x1A)
LABEL_24:
        v26 = (v18 + (_DWORD)v24);
LABEL_25:
      if (!(_DWORD)v26)
        goto LABEL_35;
LABEL_26:
      fixed = blahtex::LayoutTree::FixOutOfSequenceMathmlCharacter(v26);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
      __p.__r_.__value_.__r.__words[0] = fixed;
      blahtex::Token::operator=((std::wstring *)(v10 + 32), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v40 = 0;
      v37 = (blahtex::MathmlNode *)v10;
      v28 = *(_QWORD *)a3;
      v29 = *(_DWORD *)(a3 + 8);
      blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v35, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
      blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v37, v28, v29, v35, v36, a5);
      result = v37;
      if (v37)
      {
LABEL_6:
        blahtex::MathmlNode::~MathmlNode(result);
        return (blahtex::MathmlNode *)MEMORY[0x242690740]();
      }
      return result;
    case 6u:
      goto LABEL_19;
    case 7u:
      if (*(_BYTE *)(a2 + 6))
      {
        v20 = 119951;
        v18 = -97;
      }
      else
      {
        v39 = 18;
        __p.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v39;
        v21 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v10 + 8), &v39, (uint64_t)&std::piecewise_construct, &__p.__r_.__value_.__l.__data_);
        MEMORY[0x242690560](v21 + 5, "b");
        v18 = -97;
        v19 = 1;
      }
      goto LABEL_19;
    case 8u:
      goto LABEL_18;
    default:
      goto LABEL_35;
  }
}

void sub_2411E8A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,blahtex::MathmlNode *a22)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a22, 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::SymbolOperator::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t **v23;
  blahtex::MathmlNode *result;
  unsigned __int8 v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  int *v29;
  uint64_t **v30;
  std::wstring *v31;
  uint64_t **v32;
  int v33;
  int *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t **v37;
  int v38;
  uint64_t **v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  blahtex::MathmlNode *v44;
  int v45;
  void *v46[2];
  char v47;
  int v48;
  void *v49[2];
  char v50;
  uint64_t v51;
  void *v52[2];
  char v53;
  void *__p[2];
  char v55;

  if ((v8 & 1) == 0
  {
    std::unordered_set<wchar_t>::unordered_set<wchar_t const*>((uint64_t)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::_stretchyByDefaultTable, (int *)"(", blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::symmetricOpsArray);
  }
  if ((v9 & 1) == 0
  {
    std::unordered_set<wchar_t>::unordered_set<wchar_t const*>((uint64_t)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::_symmetricOpsTable, blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::symmetricOpsArray, dword_241216418);
  }
  if (*(_QWORD *)(a2 + 8))
    v10 = *(_QWORD **)(a2 + 8);
  else
    v10 = &blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::_stretchyByDefaultTable;
  if (*(_QWORD *)(a2 + 16))
    v11 = *(_QWORD **)(a2 + 16);
  else
    v11 = &blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::_symmetricOpsTable;
  v12 = (int *)(a1 + 24);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_241216418);
  v13 = blahtex::Token::operator==((const __int32 *)(a1 + 24), (const __int32 *)__p);
  v14 = v13;
  if (v55 < 0)
  {
    operator delete(__p[0]);
    if (v14)
      goto LABEL_11;
  }
  else if (v13)
  {
LABEL_11:
    v15 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v52, &dword_24121629C);
    blahtex::Token::Token(__p, v52, 0);
    blahtex::MathmlNode::MathmlNode(v15, 21, (blahtex::Token *)__p);
    *a4 = v15;
    if (v55 < 0)
      operator delete(__p[0]);
    if (v53 < 0)
      operator delete(v52[0]);
    v16 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v49, &dword_24121629C);
    blahtex::Token::Token(__p, v49, 0);
    blahtex::MathmlNode::MathmlNode(v16, 3, (blahtex::Token *)__p);
    v51 = v16;
    if (v55 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    v48 = 6;
    __p[0] = &v48;
    v17 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v16 + 8), &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    MEMORY[0x242690560](v17 + 5, &unk_241216428);
    v51 = 0;
    v18 = operator new(0x18uLL);
    v19 = *(_QWORD *)(v15 + 64);
    v18[1] = v15 + 64;
    v18[2] = v16;
    *v18 = v19;
    *(_QWORD *)(v19 + 8) = v18;
    *(_QWORD *)(v15 + 64) = v18;
    ++*(_QWORD *)(v15 + 80);
    v20 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, (__int32 *)&unk_241216444);
    blahtex::Token::Token(__p, v46, *(_QWORD *)(a1 + 48));
    blahtex::MathmlNode::MathmlNode(v20, 1, (blahtex::Token *)__p);
    v21 = operator new(0x18uLL);
    v21[1] = v15 + 64;
    v21[2] = v20;
    v22 = *(_QWORD *)(v15 + 64);
    *v21 = v22;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v15 + 64) = v21;
    ++*(_QWORD *)(v15 + 80);
    if (v55 < 0)
      operator delete(__p[0]);
    if (v47 < 0)
      operator delete(v46[0]);
    v48 = 6;
    __p[0] = &v48;
    v23 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v15 + 8), &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    return (blahtex::MathmlNode *)MEMORY[0x242690560](v23 + 5, "0");
  }
  if ((v25 & 1) == 0
  {
    std::unordered_set<wchar_t>::unordered_set<wchar_t const*>((uint64_t)blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::accentByDefaultTable, (int *)&blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::accentByDefaultArray, dword_241216454);
  }
  v26 = (uint64_t **)operator new();
  blahtex::MathmlNode::MathmlNode((uint64_t)v26, 1, (blahtex::Token *)(a1 + 24));
  v51 = (uint64_t)v26;
  if (!*(_BYTE *)(a1 + 60))
  {
    v28 = *(char *)(a1 + 47);
    if (v28 < 0)
    {
      if (*(_QWORD *)(a1 + 32) != 1)
        goto LABEL_46;
      v29 = *(int **)v12;
    }
    else
    {
      v29 = (int *)(a1 + 24);
      if (v28 != 1)
        goto LABEL_46;
    }
    if (std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(v10, v29))
    {
      v48 = 7;
      __p[0] = &v48;
      v36 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      MEMORY[0x242690560](v36 + 5, "f");
    }
    goto LABEL_46;
  }
  v48 = 7;
  __p[0] = &v48;
  v27 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
  MEMORY[0x242690560](v27 + 5, "t");
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 87))
      goto LABEL_35;
    goto LABEL_34;
  }
  if (*(_QWORD *)(a1 + 72))
  {
LABEL_34:
    v48 = 9;
    __p[0] = &v48;
    v30 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    v31 = std::wstring::operator=((std::wstring *)(v30 + 5), (const std::wstring *)(a1 + 64));
    v45 = 8;
    __p[0] = &v45;
    v32 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v45, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    std::wstring::operator=((std::wstring *)(v32 + 5), v31);
  }
LABEL_35:
  v33 = *(char *)(a1 + 47);
  if (v33 < 0)
  {
    if (*(_QWORD *)(a1 + 32) != 1)
      goto LABEL_46;
    v34 = *(int **)v12;
  }
  else
  {
    v34 = (int *)(a1 + 24);
    if (v33 != 1)
      goto LABEL_46;
  }
  if (std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(v11, v34))
  {
    v48 = 19;
    __p[0] = &v48;
    v35 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    MEMORY[0x242690560](v35 + 5, "t");
  }
LABEL_46:
  blahtex::MathmlNode::AddFontAttributes((uint64_t)v26, *(_DWORD *)(a1 + 56), a2);
  if (*(_BYTE *)(a1 + 88))
  {
    v48 = 10;
    __p[0] = &v48;
    v37 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    result = (blahtex::MathmlNode *)MEMORY[0x242690560](v37 + 5, "t");
    *a4 = (uint64_t)v26;
    return result;
  }
  v38 = *(char *)(a1 + 47);
  if (v38 < 0)
  {
    if (*(_QWORD *)(a1 + 32) != 1)
      goto LABEL_55;
    v12 = *(int **)v12;
LABEL_53:
    if (std::__hash_table<std::__hash_value_type<wchar_t,std::wstring_view>,std::__unordered_map_hasher<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::hash<wchar_t>,std::equal_to<wchar_t>,true>,std::__unordered_map_equal<wchar_t,std::__hash_value_type<wchar_t,std::wstring_view>,std::equal_to<wchar_t>,std::hash<wchar_t>,true>,std::allocator<std::__hash_value_type<wchar_t,std::wstring_view>>>::find<wchar_t>(blahtex::LayoutTree::SymbolOperator::BuildMathmlTree(blahtex::MathmlOptions const&,blahtex::MathmlEnvironment const&,unsigned int &)const::accentByDefaultTable, v12))
    {
      v48 = 10;
      __p[0] = &v48;
      v39 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v26 + 1, &v48, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      MEMORY[0x242690560](v39 + 5, "f");
    }
    goto LABEL_55;
  }
  if (v38 == 1)
    goto LABEL_53;
LABEL_55:
  v51 = 0;
  v44 = (blahtex::MathmlNode *)v26;
  v40 = *(_QWORD *)a3;
  v41 = *(_DWORD *)(a3 + 8);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v42, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v44, v40, v41, v42, v43, a4);
  result = v44;
  if (v44)
  {
    blahtex::MathmlNode::~MathmlNode(v44);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  _Unwind_Resume(a1);
}

void sub_2411E932C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  JUMPOUT(0x2411E9324);
}

blahtex::MathmlNode *blahtex::LayoutTree::SymbolNumber::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  blahtex::MathmlNode *v10;
  unsigned int *v11;
  unint64_t v12;
  blahtex::MathmlNode *result;
  unint64_t v14;
  int v15;
  blahtex::MathmlNode *v16;
  blahtex::MathmlNode *v17;

  v10 = (blahtex::MathmlNode *)operator new();
  blahtex::MathmlNode::MathmlNode((uint64_t)v10, 2, (blahtex::Token *)(a1 + 24));
  v17 = v10;
  blahtex::LayoutTree::IncrementNodeCount(a4, v11);
  blahtex::MathmlNode::AddFontAttributes((uint64_t)v10, *(_DWORD *)(a1 + 56), a2);
  v16 = v10;
  v17 = 0;
  v12 = *(_QWORD *)a3;
  LODWORD(a3) = *(_DWORD *)(a3 + 8);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v14, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v16, v12, a3, v14, v15, a5);
  result = v16;
  if (v16)
  {
    blahtex::MathmlNode::~MathmlNode(v16);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E9424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1032C40C8D585AALL);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::SymbolText::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  blahtex::MathmlNode *v10;
  unsigned int *v11;
  unint64_t v12;
  blahtex::MathmlNode *result;
  unint64_t v14;
  int v15;
  blahtex::MathmlNode *v16;
  blahtex::MathmlNode *v17;

  v10 = (blahtex::MathmlNode *)operator new();
  blahtex::MathmlNode::MathmlNode((uint64_t)v10, 4, (blahtex::Token *)(a1 + 24));
  v17 = v10;
  blahtex::LayoutTree::IncrementNodeCount(a4, v11);
  blahtex::MathmlNode::AddFontAttributes((uint64_t)v10, *(_DWORD *)(a1 + 56), a2);
  v16 = v10;
  v17 = 0;
  v12 = *(_QWORD *)a3;
  LODWORD(a3) = *(_DWORD *)(a3 + 8);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v14, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v16, v12, a3, v14, v15, a5);
  result = v16;
  if (v16)
  {
    blahtex::MathmlNode::~MathmlNode(v16);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E9550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242690740](v1, 0x1032C40C8D585AALL);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Phantom::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  blahtex::MathmlNode *v10;
  unsigned int *v11;
  blahtex::MathmlNode *v12;
  _QWORD *v13;
  uint64_t v14;
  blahtex::MathmlNode *result;
  blahtex::MathmlNode *v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  blahtex::MathmlNode *v21;
  blahtex::MathmlNode *v22;
  unint64_t v23;
  int v24;

  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v23, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(blahtex::MathmlNode **__return_ptr, _QWORD, uint64_t, unint64_t *, unsigned int *))(**(_QWORD **)(a1 + 56) + 24))(&v22, *(_QWORD *)(a1 + 56), a2, &v23, a4);
  v21 = 0;
  v10 = v22;
  if (*(_DWORD *)v22 == 5)
  {
    v22 = 0;
    *(_DWORD *)v10 = 14;
  }
  else
  {
    v10 = (blahtex::MathmlNode *)operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121629C);
    blahtex::Token::Token(__p, v17, 0);
    blahtex::MathmlNode::MathmlNode((uint64_t)v10, 14, (blahtex::Token *)__p);
    v21 = v10;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(v17[0]);
    blahtex::LayoutTree::IncrementNodeCount(a4, v11);
    v12 = v22;
    v22 = 0;
    v13 = operator new(0x18uLL);
    v14 = *((_QWORD *)v10 + 8);
    v13[1] = (char *)v10 + 64;
    v13[2] = v12;
    *v13 = v14;
    *(_QWORD *)(v14 + 8) = v13;
    *((_QWORD *)v10 + 8) = v13;
    ++*((_QWORD *)v10 + 10);
  }
  v21 = 0;
  v16 = v10;
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v16, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), v23, v24, a5);
  if (v16)
  {
    blahtex::MathmlNode::~MathmlNode(v16);
    MEMORY[0x242690740]();
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E9748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,blahtex::MathmlNode *a23,blahtex::MathmlNode *a24)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a23, 0);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a24, 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Cancel::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t **v11;
  unsigned int *v12;
  uint64_t **v13;
  blahtex::MathmlNode *v14;
  _QWORD *v15;
  uint64_t v16;
  blahtex::MathmlNode *result;
  blahtex::MathmlNode *v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  int v23;
  uint64_t v24;
  blahtex::MathmlNode *v25;
  unint64_t v26;
  int v27;

  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v26, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(blahtex::MathmlNode **__return_ptr, _QWORD, uint64_t, unint64_t *, unsigned int *))(**(_QWORD **)(a1 + 56) + 24))(&v25, *(_QWORD *)(a1 + 56), a2, &v26, a4);
  v24 = 0;
  v10 = (uint64_t)v25;
  if (*(_DWORD *)v25 == 5)
  {
    v25 = 0;
    v24 = v10;
    *(_DWORD *)v10 = 15;
    v23 = 20;
    __p[0] = &v23;
    v11 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v10 + 8), &v23, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    MEMORY[0x242690560](v11 + 5, dword_241216454);
  }
  else
  {
    v10 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_24121629C);
    blahtex::Token::Token(__p, v19, 0);
    blahtex::MathmlNode::MathmlNode(v10, 15, (blahtex::Token *)__p);
    v24 = v10;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    blahtex::LayoutTree::IncrementNodeCount(a4, v12);
    v23 = 20;
    __p[0] = &v23;
    v13 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v10 + 8), &v23, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    MEMORY[0x242690560](v13 + 5, dword_241216454);
    v14 = v25;
    v25 = 0;
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v10 + 64);
    v15[1] = v10 + 64;
    v15[2] = v14;
    *v15 = v16;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v10 + 64) = v15;
    ++*(_QWORD *)(v10 + 80);
  }
  v24 = 0;
  v18 = (blahtex::MathmlNode *)v10;
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v18, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), v26, v27, a5);
  if (v18)
  {
    blahtex::MathmlNode::~MathmlNode(v18);
    MEMORY[0x242690740]();
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,blahtex::MathmlNode *a25)
{
  uint64_t v25;

  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v25 - 72), 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Sqrt::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unsigned int *v11;
  blahtex::MathmlNode *v12;
  _QWORD *v13;
  uint64_t v14;
  blahtex::MathmlNode *result;
  blahtex::MathmlNode *v16;
  std::wstring v17;
  blahtex::MathmlNode *v18;
  blahtex::MathmlNode *v19;
  unint64_t v20;
  int v21;
  void *__p[2];
  char v23;

  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v20, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(blahtex::MathmlNode **__return_ptr, _QWORD, uint64_t, unint64_t *, unsigned int *))(**(_QWORD **)(a1 + 56) + 24))(&v19, *(_QWORD *)(a1 + 56), a2, &v20, a4);
  v18 = 0;
  v10 = (uint64_t)v19;
  if (*(_DWORD *)v19 == 5)
  {
    v18 = v19;
    v19 = 0;
    *(_DWORD *)v10 = 16;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121629C);
    blahtex::Token::Token(&v17, __p, *(_QWORD *)(a1 + 48));
    if (v23 < 0)
      operator delete(__p[0]);
    blahtex::Token::operator=((std::wstring *)(v10 + 32), &v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121629C);
    blahtex::Token::Token(&v17, __p, *(_QWORD *)(a1 + 48));
    if (v23 < 0)
      operator delete(__p[0]);
    blahtex::MathmlNode::MathmlNode(v10, 16, (blahtex::Token *)&v17);
    v18 = (blahtex::MathmlNode *)v10;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    blahtex::LayoutTree::IncrementNodeCount(a4, v11);
    v12 = v19;
    v19 = 0;
    v13 = operator new(0x18uLL);
    v14 = *(_QWORD *)(v10 + 64);
    v13[1] = v10 + 64;
    v13[2] = v12;
    *v13 = v14;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v10 + 64) = v13;
    ++*(_QWORD *)(v10 + 80);
  }
  v18 = 0;
  v16 = (blahtex::MathmlNode *)v10;
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v16, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), v20, v21, a5);
  if (v16)
  {
    blahtex::MathmlNode::~MathmlNode(v16);
    MEMORY[0x242690740]();
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E9C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, blahtex::MathmlNode *a17, blahtex::MathmlNode *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a17, 0);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a18, 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Root::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  blahtex::MathmlNode *v10;
  unsigned int *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  blahtex::MathmlNode *result;
  blahtex::MathmlNode *v20;
  uint64_t v21;
  void *v22;
  int v23;
  char v24;
  blahtex::MathmlNode *v25;
  void *__p;
  int v27;
  char v28;

  v10 = (blahtex::MathmlNode *)operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_24121629C);
  blahtex::Token::Token(&v22, &__p, *(_QWORD *)(a1 + 48));
  if (v28 < 0)
    operator delete(__p);
  blahtex::MathmlNode::MathmlNode((uint64_t)v10, 17, (blahtex::Token *)&v22);
  v25 = v10;
  if (v24 < 0)
    operator delete(v22);
  blahtex::LayoutTree::IncrementNodeCount(a4, v11);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v22, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, void **, unsigned int *))(**(_QWORD **)(a1 + 56) + 24))(&__p, *(_QWORD *)(a1 + 56), a2, &v22, a4);
  v12 = __p;
  __p = 0;
  v13 = operator new(0x18uLL);
  v14 = *((_QWORD *)v10 + 8);
  v13[1] = (char *)v10 + 64;
  v13[2] = v12;
  *v13 = v14;
  *(_QWORD *)(v14 + 8) = v13;
  *((_QWORD *)v10 + 8) = v13;
  ++*((_QWORD *)v10 + 10);
  v15 = *(_QWORD *)(a1 + 64);
  LODWORD(v14) = *(_DWORD *)(a1 + 20);
  LOBYTE(__p) = 0;
  HIDWORD(__p) = 2;
  v27 = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void **, unsigned int *))(*(_QWORD *)v15 + 24))(&v21, v15, a2, &__p, a4);
  v16 = v21;
  v21 = 0;
  v17 = operator new(0x18uLL);
  v17[1] = (char *)v10 + 64;
  v17[2] = v16;
  v18 = *((_QWORD *)v10 + 8);
  *v17 = v18;
  *(_QWORD *)(v18 + 8) = v17;
  *((_QWORD *)v10 + 8) = v17;
  ++*((_QWORD *)v10 + 10);
  v25 = 0;
  v20 = v10;
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v20, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), (unint64_t)v22, v23, a5);
  result = v20;
  if (v20)
  {
    blahtex::MathmlNode::~MathmlNode(v20);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411E9F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, blahtex::MathmlNode *a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)&a9, 0);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a18, 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Scripts::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  blahtex::MathmlNode *v11;
  unsigned int *v12;
  int v13;
  int v14;
  int v15;
  blahtex::MathmlNode *v16;
  unsigned int *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  blahtex::MathmlNode *result;
  int *v30;
  int v31;
  uint64_t **v32;
  blahtex::MathmlNode *v33;
  int v34;
  void *v35[2];
  char v36;
  blahtex::MathmlNode *v37;
  void *v38[2];
  char v39;
  void *__p[2];
  char v41;
  blahtex::MathmlNode *v42;
  _DWORD v43[4];
  unint64_t v44;
  int v45;

  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v44, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  v43[0] = v44;
  LOBYTE(v43[0]) = 0;
  v43[1] = HIDWORD(v44) + 1;
  v43[2] = v45;
  v42 = 0;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, unint64_t *, unsigned int *))(*(_QWORD *)v10 + 24))(__p, v10, a2, &v44, a4);
    v11 = (blahtex::MathmlNode *)__p[0];
    v42 = (blahtex::MathmlNode *)__p[0];
  }
  else
  {
    v11 = (blahtex::MathmlNode *)operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_24121629C);
    blahtex::Token::Token(__p, v38, 0);
    blahtex::MathmlNode::MathmlNode((uint64_t)v11, 5, (blahtex::Token *)__p);
    v42 = v11;
    if (v41 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    blahtex::LayoutTree::IncrementNodeCount(a4, v12);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 24))
      v13 = 8;
    else
      v13 = 11;
    if (*(_BYTE *)(a1 + 24))
      v14 = 9;
    else
      v14 = 12;
    if (*(_QWORD *)(a1 + 48))
      v15 = v14;
    else
      v15 = v13;
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v15 = 7;
  }
  else
  {
    v15 = 10;
  }
  v16 = (blahtex::MathmlNode *)operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, &dword_24121629C);
  blahtex::Token::Token(__p, v35, 0);
  blahtex::MathmlNode::MathmlNode((uint64_t)v16, v15, (blahtex::Token *)__p);
  v37 = v16;
  if (v41 < 0)
    operator delete(__p[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  blahtex::LayoutTree::IncrementNodeCount(a4, v17);
  v42 = 0;
  v18 = operator new(0x18uLL);
  v19 = (_QWORD *)((char *)v16 + 64);
  v18[1] = (char *)v16 + 64;
  v18[2] = v11;
  v20 = *((_QWORD *)v16 + 8);
  *v18 = v20;
  *(_QWORD *)(v20 + 8) = v18;
  *((_QWORD *)v16 + 8) = v18;
  ++*((_QWORD *)v16 + 10);
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 48);
    if (v22)
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _DWORD *, unsigned int *))(*(_QWORD *)v22 + 24))(__p, *(_QWORD *)(a1 + 48), a2, v43, a4);
      v23 = __p[0];
      __p[0] = 0;
      v24 = operator new(0x18uLL);
      v24[1] = v19;
      v24[2] = v23;
      v25 = *((_QWORD *)v16 + 8);
      *v24 = v25;
      *(_QWORD *)(v25 + 8) = v24;
      *((_QWORD *)v16 + 8) = v24;
      ++*((_QWORD *)v16 + 10);
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _DWORD *, unsigned int *))(**(_QWORD **)(a1 + 40)
                                                                                             + 24))(__p, *(_QWORD *)(a1 + 40), a2, v43, a4);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _DWORD *, unsigned int *))(*(_QWORD *)v21 + 24))(__p, v21, a2, v43, a4);
    }
    v26 = __p[0];
    __p[0] = 0;
    v27 = operator new(0x18uLL);
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _DWORD *, unsigned int *))(**(_QWORD **)(a1 + 48)
                                                                                           + 24))(__p, *(_QWORD *)(a1 + 48), a2, v43, a4);
    v26 = __p[0];
    __p[0] = 0;
    v27 = operator new(0x18uLL);
  }
  v27[1] = v19;
  v27[2] = v26;
  v28 = *((_QWORD *)v16 + 8);
  *v27 = v28;
  *(_QWORD *)(v28 + 8) = v27;
  *((_QWORD *)v16 + 8) = v27;
  ++*((_QWORD *)v16 + 10);
  if (!*(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 8))
  {
    v30 = *(int **)(*((_QWORD *)v16 + 9) + 16);
    v31 = *v30;
    if ((*v30 - 7) <= 5)
    {
      do
      {
        v30 = *(int **)(*((_QWORD *)v30 + 9) + 16);
        v31 = *v30;
      }
      while ((*v30 - 7) < 6);
    }
    if (v31 == 1)
    {
      v34 = 11;
      __p[0] = &v34;
      v32 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)v30 + 1, &v34, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      MEMORY[0x242690560](v32 + 5, "f");
      v16 = v37;
    }
  }
  v37 = 0;
  v33 = v16;
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v33, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), v44, v45, a5);
  if (v33)
  {
    blahtex::MathmlNode::~MathmlNode(v33);
    MEMORY[0x242690740]();
  }
  result = v42;
  if (v42)
  {
    blahtex::MathmlNode::~MathmlNode(v42);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411EA3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, blahtex::MathmlNode *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,blahtex::MathmlNode *a31)
{
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a17, 0);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100](&a31, 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Fraction::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unsigned int *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t **v18;
  blahtex::MathmlNode *result;
  blahtex::MathmlNode *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  int *v27;

  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v25, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  v23 = v25;
  v24 = v26;
  if ((_BYTE)v25)
    LOBYTE(v23) = 0;
  else
    ++HIDWORD(v23);
  v10 = operator new();
  blahtex::MathmlNode::MathmlNode(v10, 13, (blahtex::Token *)(a1 + 24));
  v22 = v10;
  blahtex::LayoutTree::IncrementNodeCount(a4, v11);
  (*(void (**)(int **__return_ptr, _QWORD, uint64_t, unint64_t *, unsigned int *))(**(_QWORD **)(a1 + 56)
                                                                                                  + 24))(&v27, *(_QWORD *)(a1 + 56), a2, &v23, a4);
  v12 = v27;
  v27 = 0;
  v13 = operator new(0x18uLL);
  v14 = *(_QWORD *)(v10 + 64);
  v13[1] = v10 + 64;
  v13[2] = v12;
  *v13 = v14;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v10 + 64) = v13;
  ++*(_QWORD *)(v10 + 80);
  (*(void (**)(int **__return_ptr, _QWORD, uint64_t, unint64_t *, unsigned int *))(**(_QWORD **)(a1 + 64)
                                                                                                  + 24))(&v27, *(_QWORD *)(a1 + 64), a2, &v23, a4);
  v15 = v27;
  v27 = 0;
  v16 = operator new(0x18uLL);
  v16[1] = v10 + 64;
  v16[2] = v15;
  v17 = *(_QWORD *)(v10 + 64);
  *v16 = v17;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v10 + 64) = v16;
  ++*(_QWORD *)(v10 + 80);
  if (!*(_BYTE *)(a1 + 72))
  {
    v21 = 12;
    v27 = &v21;
    v18 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v10 + 8), &v21, (uint64_t)&std::piecewise_construct, &v27);
    MEMORY[0x242690560](v18 + 5, "0");
  }
  v22 = 0;
  v20 = (blahtex::MathmlNode *)v10;
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v20, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), v25, v26, a5);
  result = v20;
  if (v20)
  {
    blahtex::MathmlNode::~MathmlNode(v20);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411EA6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)va, 0);
  _Unwind_Resume(a1);
}

void sub_2411EA6F8()
{
  uint64_t v0;

  MEMORY[0x242690740](v0, 0x1032C40C8D585AALL);
  JUMPOUT(0x2411EA6F0);
}

uint64_t blahtex::LayoutTree::Space::BuildMathmlTree@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  __int128 v11;
  std::logic_error *exception;
  int v14;
  std::wstringbuf::string_type v15;
  void *__p;
  std::wstringbuf v17;
  void (__cdecl **v18)(std::wostringstream *__hidden);
  void *v19[2];
  char v20;
  int *v21;

  if (!*(_BYTE *)(a1 + 28))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected lonely automatic space in Space::BuildMathmlTree");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v5 = operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_24121629C);
  blahtex::Token::Token(&__p, v19, 0);
  blahtex::MathmlNode::MathmlNode(v5, 3, (blahtex::Token *)&__p);
  *a3 = v5;
  if (SHIBYTE(v17.__loc_.__locale_) < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19[0]);
  blahtex::LayoutTree::IncrementNodeCount(a2, v6);
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  v7 = __p;
  *(_DWORD *)((char *)&__p + *((_QWORD *)__p - 3) + 8) = *(_DWORD *)((_BYTE *)&__p + *((_QWORD *)__p - 3) + 8) & 0xFFFFFEFB | 4;
  *(std::locale::__imp **)((char *)&v17.__loc_.__locale_ + *(v7 - 3)) = (std::locale::__imp *)3;
  v8 = (_QWORD *)std::wostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)"e", 2);
  std::wstringbuf::str(&v15, &v17);
  v14 = 6;
  v21 = &v14;
  v9 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v5 + 8), &v14, (uint64_t)&std::piecewise_construct, &v21);
  v10 = v9 + 5;
  if (*((char *)v9 + 63) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  v10[2] = (uint64_t *)v15.__r_.__value_.__r.__words[2];
  *(_OWORD *)v10 = v11;
  if (SHIBYTE(v17.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x242690710](&v18);
}

void sub_2411EA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

blahtex *blahtex::LayoutTree::Fenced::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  blahtex *result;
  void *v12;
  void *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  blahtex::MathmlNode *v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t **v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  blahtex::MathmlNode *v40;
  int v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *__p[2];
  char v48;
  blahtex::MathmlNode *v49;
  uint64_t v50;

  v10 = *(_QWORD *)(a1 + 88);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)__p, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  result = (blahtex *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, void **, unsigned int *))(*(_QWORD *)v10 + 24))(&v50, v10, a2, __p, a4);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_7;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_7;
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_7;
LABEL_15:
    *a5 = v50;
    return result;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_15;
LABEL_7:
  if (*(_DWORD *)v50 == 5)
    goto LABEL_24;
  if ((*(char *)(v50 + 55) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v50 + 55))
      goto LABEL_19;
LABEL_12:
    blahtex::ForcedSpaceOpsTable(result);
    if (*(char *)(v50 + 55) < 0)
    {
      v12 = *(void **)(v50 + 32);
      v13 = *(void **)(v50 + 40);
    }
    else
    {
      v12 = (void *)(v50 + 32);
      v13 = (void *)*(unsigned __int8 *)(v50 + 55);
    }
    __p[0] = v12;
    __p[1] = v13;
    if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ForcedSpaceOpsTable(void)::forcedSpaceOpsTable, (uint64_t)__p))
    {
      LODWORD(v49) = 4;
      __p[0] = &v49;
      v14 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v50 + 8), (int *)&v49, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      MEMORY[0x242690560](v14 + 5, "0");
      LODWORD(v49) = 5;
      __p[0] = &v49;
      v15 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v50 + 8), (int *)&v49, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      MEMORY[0x242690560](v15 + 5, "0");
    }
    goto LABEL_19;
  }
  if (*(_QWORD *)(v50 + 40))
    goto LABEL_12;
LABEL_19:
  v16 = operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_24121629C);
  blahtex::Token::Token(__p, v45, 0);
  blahtex::MathmlNode::MathmlNode(v16, 5, (blahtex::Token *)__p);
  v49 = (blahtex::MathmlNode *)v16;
  if (v48 < 0)
    operator delete(__p[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  blahtex::LayoutTree::IncrementNodeCount(a4, v17);
  v18 = v50;
  v50 = 0;
  v19 = operator new(0x18uLL);
  v20 = *(_QWORD *)(v16 + 64);
  v19[1] = v16 + 64;
  v19[2] = v18;
  *v19 = v20;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v16 + 64) = v19;
  ++*(_QWORD *)(v16 + 80);
  v50 = v16;
LABEL_24:
  v21 = (blahtex::MathmlNode *)operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v43, &dword_24121629C);
  blahtex::Token::Token(__p, v43, 0);
  blahtex::MathmlNode::MathmlNode((uint64_t)v21, 5, (blahtex::Token *)__p);
  v49 = v21;
  if (v48 < 0)
    operator delete(__p[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  blahtex::LayoutTree::IncrementNodeCount(a4, v22);
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_33;
    goto LABEL_32;
  }
  if (*(_BYTE *)(a1 + 47))
  {
LABEL_32:
    v23 = operator new();
    blahtex::MathmlNode::MathmlNode(v23, 1, (blahtex::Token *)(a1 + 24));
    v42 = v23;
    blahtex::LayoutTree::IncrementNodeCount(a4, v24);
    v41 = 7;
    __p[0] = &v41;
    v25 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v23 + 8), &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    MEMORY[0x242690560](v25 + 5, "t");
    v42 = 0;
    v26 = operator new(0x18uLL);
    v27 = *((_QWORD *)v21 + 8);
    v26[1] = (char *)v21 + 64;
    v26[2] = v23;
    *v26 = v27;
    *(_QWORD *)(v27 + 8) = v26;
    *((_QWORD *)v21 + 8) = v26;
    ++*((_QWORD *)v21 + 10);
  }
LABEL_33:
  v28 = v50;
  v50 = 0;
  v29 = operator new(0x18uLL);
  v30 = *((_QWORD *)v21 + 8);
  v29[1] = (char *)v21 + 64;
  v29[2] = v28;
  *v29 = v30;
  *(_QWORD *)(v30 + 8) = v29;
  *((_QWORD *)v21 + 8) = v29;
  ++*((_QWORD *)v21 + 10);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 79))
      goto LABEL_38;
    goto LABEL_37;
  }
  if (*(_QWORD *)(a1 + 64))
  {
LABEL_37:
    v31 = operator new();
    blahtex::MathmlNode::MathmlNode(v31, 1, (blahtex::Token *)(a1 + 56));
    v42 = v31;
    blahtex::LayoutTree::IncrementNodeCount(a4, v32);
    v41 = 7;
    __p[0] = &v41;
    v33 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v31 + 8), &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    MEMORY[0x242690560](v33 + 5, "t");
    v42 = 0;
    v34 = operator new(0x18uLL);
    v34[1] = (char *)v21 + 64;
    v34[2] = v31;
    v35 = *((_QWORD *)v21 + 8);
    *v34 = v35;
    *(_QWORD *)(v35 + 8) = v34;
    *((_QWORD *)v21 + 8) = v34;
    ++*((_QWORD *)v21 + 10);
  }
LABEL_38:
  v49 = 0;
  v40 = v21;
  v36 = *(_QWORD *)a3;
  v37 = *(_DWORD *)(a3 + 8);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v38, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v40, v36, v37, v38, v39, a5);
  if (v40)
  {
    blahtex::MathmlNode::~MathmlNode(v40);
    MEMORY[0x242690740]();
  }
  result = (blahtex *)v50;
  v50 = 0;
  if (result)
  {
    blahtex::MathmlNode::~MathmlNode(result);
    return (blahtex *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411EAEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v31 - 80), 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Stretchy::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned int *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t **v8;
  unsigned int *v9;
  uint64_t **v10;
  unint64_t v11;
  blahtex::MathmlNode *result;
  unint64_t v13;
  int v14;
  blahtex::MathmlNode *v15;
  int v16;
  uint64_t **v17;
  int *v18;

  v8 = (uint64_t **)operator new();
  blahtex::MathmlNode::MathmlNode((uint64_t)v8, 1, (blahtex::Token *)(a1 + 24));
  v17 = v8;
  blahtex::LayoutTree::IncrementNodeCount(a3, v9);
  v16 = 7;
  v18 = &v16;
  v10 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(v8 + 1, &v16, (uint64_t)&std::piecewise_construct, &v18);
  MEMORY[0x242690560](v10 + 5, "t");
  v17 = 0;
  v15 = (blahtex::MathmlNode *)v8;
  v11 = *(_QWORD *)a2;
  LODWORD(a2) = *(_DWORD *)(a2 + 8);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v13, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v15, v11, a2, v13, v14, a4);
  result = v15;
  if (v15)
  {
    blahtex::MathmlNode::~MathmlNode(v15);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411EB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)va, 0);
  _Unwind_Resume(a1);
}

blahtex::MathmlNode *blahtex::LayoutTree::Table::BuildMathmlTree@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  const std::wstring::value_type *v17;
  uint64_t **v18;
  __int32 *v19;
  int j;
  std::wstring *v21;
  std::wstring::size_type size;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **k;
  std::wstring::size_type v28;
  unsigned int *v29;
  uint64_t *v30;
  int v31;
  blahtex::MathmlNode *v32;
  unsigned int *v33;
  uint64_t v34;
  std::wstring::size_type v35;
  blahtex::MathmlNode *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  blahtex::MathmlNode *result;
  int v54;
  unint64_t v56;
  int v57;
  blahtex::MathmlNode *v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  int v65;
  std::wstring v66;
  std::wstring __p;
  std::wstring v68;
  void *v69[2];
  char v70;
  std::wstring __str;
  uint64_t v72;

  v7 = operator new();
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_24121629C);
  blahtex::Token::Token(&__str, v69, 0);
  blahtex::MathmlNode::MathmlNode(v7, 18, (blahtex::Token *)&__str);
  v72 = v7;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69[0]);
  blahtex::LayoutTree::IncrementNodeCount(a4, v8);
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *(uint64_t **)(a1 + 32);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v13 = *v9;
      v12 = v9[1];
      v9 += 3;
      v14 = (unint64_t)(v12 - v13) >> 3;
      if (v11 <= (int)v14)
        v11 = v14;
    }
    while (v9 != v10);
  }
  v15 = *(_DWORD *)(a1 + 48);
  if ((v15 - 2) >= 2)
  {
    if (!v15)
    {
      v68.__r_.__value_.__s.__data_[0] = 13;
      __str.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v68;
      v25 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v7 + 8), (int *)&v68, (uint64_t)&std::piecewise_construct, &__str.__r_.__value_.__l.__data_);
      MEMORY[0x242690560](v25 + 5, &unk_241216498);
    }
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__str, dword_2412164AC);
    if (v11 >= 2)
    {
      for (i = 1; i != v11; ++i)
      {
        if ((i & 1) != 0)
          v17 = (const std::wstring::value_type *)&unk_2412164C4;
        else
          v17 = (const std::wstring::value_type *)&unk_2412164DC;
        std::wstring::append(&__str, v17);
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 13;
    v68.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&__p;
    v18 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v7 + 8), (int *)&__p, (uint64_t)&std::piecewise_construct, &v68.__r_.__value_.__l.__data_);
    std::wstring::operator=((std::wstring *)(v18 + 5), &__str);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v68, dword_2412164F8);
    if (*(_DWORD *)(a1 + 48) == 2)
      v19 = (__int32 *)&unk_241216508;
    else
      v19 = dword_24121651C;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, v19);
    if (v11 >= 3)
    {
      for (j = 2; j != v11; ++j)
      {
        if ((j & 1) != 0)
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v66, dword_24121651C);
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::wstring::__init_copy_ctor_external(&v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v66 = __p;
        }
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v66;
        else
          v21 = (std::wstring *)v66.__r_.__value_.__r.__words[0];
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        else
          size = v66.__r_.__value_.__l.__size_;
        std::wstring::append(&v68, (const std::wstring::value_type *)v21, size);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
    v65 = 14;
    v66.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v65;
    v23 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v7 + 8), &v65, (uint64_t)&std::piecewise_construct, &v66.__r_.__value_.__l.__data_);
    std::wstring::operator=((std::wstring *)(v23 + 5), &v68);
    v65 = 0;
    v66.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v65;
    v24 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v7 + 8), &v65, (uint64_t)&std::piecewise_construct, &v66.__r_.__value_.__l.__data_);
    MEMORY[0x242690560](v24 + 5, "t");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v68.__r_.__value_.__s.__data_[0] = 15;
    __str.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v68;
    v26 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v7 + 8), (int *)&v68, (uint64_t)&std::piecewise_construct, &__str.__r_.__value_.__l.__data_);
    MEMORY[0x242690560](v26 + 5, &unk_241216530);
  }
  v54 = v11;
  for (k = *(uint64_t ***)(a1 + 24); k != *(uint64_t ***)(a1 + 32); k += 3)
  {
    v28 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v63, &dword_24121629C);
    blahtex::Token::Token(&__str, v63, 0);
    blahtex::MathmlNode::MathmlNode(v28, 19, (blahtex::Token *)&__str);
    v68.__r_.__value_.__r.__words[0] = v28;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v64 < 0)
      operator delete(v63[0]);
    blahtex::LayoutTree::IncrementNodeCount(a4, v29);
    v30 = *k;
    if (*k == k[1])
    {
      v31 = 0;
    }
    else
    {
      v31 = 0;
      do
      {
        v32 = (blahtex::MathmlNode *)operator new();
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v61, &dword_24121629C);
        blahtex::Token::Token(&__str, v61, 0);
        blahtex::MathmlNode::MathmlNode((uint64_t)v32, 20, (blahtex::Token *)&__str);
        __p.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v32;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v62 < 0)
          operator delete(v61[0]);
        blahtex::LayoutTree::IncrementNodeCount(a4, v33);
        v34 = *v30;
        blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&__str, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
        (*(void (**)(std::wstring *__return_ptr, uint64_t, uint64_t, std::wstring *, unsigned int *))(*(_QWORD *)v34 + 24))(&v66, v34, a2, &__str, a4);
        v35 = v66.__r_.__value_.__r.__words[0];
        if (*v66.__r_.__value_.__l.__data_ == 5)
        {
          *v66.__r_.__value_.__l.__data_ = 20;
          v66.__r_.__value_.__r.__words[0] = 0;
          blahtex::MathmlNode::~MathmlNode(v32);
          MEMORY[0x242690740]();
          v36 = (blahtex::MathmlNode *)v66.__r_.__value_.__r.__words[0];
          v66.__r_.__value_.__r.__words[0] = 0;
          if (v36)
          {
            blahtex::MathmlNode::~MathmlNode(v36);
            MEMORY[0x242690740]();
          }
          v32 = (blahtex::MathmlNode *)v35;
        }
        else
        {
          v66.__r_.__value_.__r.__words[0] = 0;
          v37 = operator new(0x18uLL);
          v38 = *((_QWORD *)v32 + 8);
          v37[1] = (char *)v32 + 64;
          v37[2] = v35;
          *v37 = v38;
          *(_QWORD *)(v38 + 8) = v37;
          *((_QWORD *)v32 + 8) = v37;
          ++*((_QWORD *)v32 + 10);
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        v39 = operator new(0x18uLL);
        v39[1] = v28 + 64;
        v39[2] = v32;
        v40 = *(_QWORD *)(v28 + 64);
        *v39 = v40;
        *(_QWORD *)(v40 + 8) = v39;
        *(_QWORD *)(v28 + 64) = v39;
        ++*(_QWORD *)(v28 + 80);
        ++v30;
        ++v31;
      }
      while (v30 != k[1]);
    }
    v41 = __OFSUB__(v54, v31);
    v42 = v54 - v31;
    if (!((v42 < 0) ^ v41 | (v42 == 0)))
    {
      do
      {
        v43 = operator new();
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v59, &dword_24121629C);
        blahtex::Token::Token(&__str, v59, 0);
        blahtex::MathmlNode::MathmlNode(v43, 20, (blahtex::Token *)&__str);
        v44 = operator new(0x18uLL);
        v44[1] = v28 + 64;
        v44[2] = v43;
        v46 = *(_QWORD *)(v28 + 64);
        *v44 = v46;
        *(_QWORD *)(v46 + 8) = v44;
        *(_QWORD *)(v28 + 64) = v44;
        ++*(_QWORD *)(v28 + 80);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v60 < 0)
          operator delete(v59[0]);
        blahtex::LayoutTree::IncrementNodeCount(a4, v45);
        --v42;
      }
      while (v42);
    }
    v68.__r_.__value_.__r.__words[0] = 0;
    v47 = operator new(0x18uLL);
    v48 = *(_QWORD *)(v7 + 64);
    v47[1] = v7 + 64;
    v47[2] = v28;
    *v47 = v48;
    *(_QWORD *)(v48 + 8) = v47;
    *(_QWORD *)(v7 + 64) = v47;
    ++*(_QWORD *)(v7 + 80);
  }
  v72 = 0;
  v58 = (blahtex::MathmlNode *)v7;
  v49 = *(_QWORD *)a3;
  v50 = *(_DWORD *)(a3 + 8);
  blahtex::MathmlEnvironment::MathmlEnvironment((uint64_t)&v56, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  blahtex::LayoutTree::AdjustMathmlEnvironment((unsigned int **)&v58, v49, v50, v56, v57, a5);
  result = v58;
  if (v58)
  {
    blahtex::MathmlNode::~MathmlNode(v58);
    return (blahtex::MathmlNode *)MEMORY[0x242690740]();
  }
  return result;
}

void sub_2411EB86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  std::unique_ptr<blahtex::MathmlNode>::reset[abi:ne180100]((blahtex::MathmlNode **)(v50 - 104), 0);
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::onlyPlainLatinLetters(uint64_t a1)
{
  int v1;
  BOOL v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v1 = *(char *)(a1 + 23);
  v2 = v1 < 0;
  v3 = *(unsigned int **)a1;
  if (v1 >= 0)
    v3 = (unsigned int *)a1;
  v4 = *(unsigned __int8 *)(a1 + 23);
  if (v2)
    v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 1;
  v5 = 4 * v4;
  while (1)
  {
    v6 = *v3;
    if ((int)*v3 >= 97)
      break;
    if (v6 - 91 < 0xFFFFFFE6)
      return 0;
LABEL_11:
    ++v3;
    v5 -= 4;
    if (!v5)
      return 1;
  }
  if (v6 <= 0x7A)
    goto LABEL_11;
  return 0;
}

void blahtex::LayoutTree::Row::Optimise(blahtex::LayoutTree::Row *this)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  const void *v12;
  const __int32 *v13;
  const void *v14;
  _QWORD *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char v25;
  const void *v26;
  std::wstring *v27;
  void *v28;
  void *v29;
  void *v30;
  BOOL v31;
  char v32;
  const __int32 *v33;
  _BOOL4 v34;
  uint64_t v35;
  const blahtex::Token *v36;
  std::wstring *v37;
  const void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t v43;
  void *v44;
  const __int32 *v45;
  std::wstring *v46;
  std::wstring *v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  std::wstring __p;

  v1 = (char *)this + 24;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 != (char *)this + 24)
  {
    v4 = (char *)this + 24;
    v5 = (char *)this + 24;
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v2 + 2) + 16))(*((_QWORD *)v2 + 2));
      v6 = (const void *)*((_QWORD *)v2 + 2);
      if (v6)
      {
        if (v7)
        {
          if (v4 != v1)
          {
            v8 = v7;
            v9 = (void *)*((_QWORD *)v4 + 2);
            if (v9)
            if (*((_BYTE *)v9 + 28))
              v8[28] = 1;
            *((_DWORD *)v8 + 6) += *((_DWORD *)v9 + 6);
            v10 = *(_QWORD *)v4;
            *(_QWORD *)(v10 + 8) = *((_QWORD *)v4 + 1);
            **((_QWORD **)v4 + 1) = v10;
            --*((_QWORD *)this + 5);
            operator delete(v4);
          }
          v4 = v2;
          goto LABEL_56;
        }
      }
      if (v5 == v1
        || v4 != v1
      {
        goto LABEL_15;
      }
      if ((v11 & 1) == 0
      {
      }
      v12 = (const void *)*((_QWORD *)v5 + 2);
      if (v12)
      else
        v13 = 0;
      v14 = (const void *)*((_QWORD *)v2 + 2);
      if (v14)
      {
        if (!v13)
          goto LABEL_41;
      }
      else
      {
        v15 = 0;
        if (!v13)
          goto LABEL_41;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241216418);
      v16 = blahtex::Token::operator==(v13 + 6, (const __int32 *)&__p);
      if (v15)
        v17 = v16;
      else
        v17 = 0;
      if (v17)
      {
        if (*((char *)v15 + 47) < 0)
        {
          v18 = (void *)v15[3];
          v19 = (void *)v15[4];
        }
        else
        {
          v18 = v15 + 3;
          v19 = (void *)*((unsigned __int8 *)v15 + 47);
        }
        v48[0] = v18;
        v48[1] = v19;
        v20 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::LayoutTree::Row::Optimise(void)::negationTable, (uint64_t)v48);
        v21 = v20 != 0;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v21)
        {
LABEL_36:
          if (v4 != v1)
          {
            v22 = *(_QWORD *)v4;
            *(_QWORD *)(v22 + 8) = *((_QWORD *)v4 + 1);
            **((_QWORD **)v4 + 1) = v22;
            --*((_QWORD *)this + 5);
            operator delete(v4);
          }
          MEMORY[0x24269056C](v15 + 3, v20[4], v20[5]);
          v23 = *(_QWORD *)v5;
          *(_QWORD *)(v23 + 8) = *((_QWORD *)v5 + 1);
          **((_QWORD **)v5 + 1) = v23;
          --*((_QWORD *)this + 5);
          operator delete(v5);
          goto LABEL_55;
        }
      }
      else if (v21)
      {
        goto LABEL_36;
      }
      v14 = (const void *)*((_QWORD *)v2 + 2);
LABEL_41:
      if (v14)
      {
        while (1)
        {
          if (!v24 || !v24[24])
            break;
          v14 = (const void *)*((_QWORD *)v24 + 4);
          if (!v14)
            goto LABEL_45;
        }
        v25 = 0;
      }
      else
      {
LABEL_45:
        v47 = 0;
        v25 = 1;
      }
      v26 = (const void *)*((_QWORD *)v5 + 2);
      if (!v26)
        goto LABEL_55;
      if (!v47)
        goto LABEL_55;
      if (!v27)
        goto LABEL_55;
      if (v47[2].__r_.__value_.__s.__data_[2] != v27[2].__r_.__value_.__s.__data_[2])
        goto LABEL_55;
      if (v47->__r_.__value_.__s.__data_[2] != v27->__r_.__value_.__s.__data_[2])
        goto LABEL_55;
      v46 = v27;
      if (HIDWORD(v47->__r_.__value_.__r.__words[2]) != HIDWORD(v27->__r_.__value_.__r.__words[2]))
        goto LABEL_55;
      if ((v25 & 1) != 0)
      {
LABEL_55:
        v5 = v2;
        v4 = v1;
        goto LABEL_56;
      }
      v30 = v29;
      v44 = v28;
      if (v13)
        v31 = v28 == 0;
      else
        v31 = 1;
      v32 = !v31;
      if (v31)
      {
        if (!v29 || !v45)
          goto LABEL_88;
LABEL_69:
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, (__int32 *)".");
        if (blahtex::Token::operator==(v45 + 6, (const __int32 *)&__p))
        {
          v34 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v48, (__int32 *)",");
          v34 = blahtex::Token::operator==(v45 + 6, (const __int32 *)v48);
          if (v49 < 0)
            operator delete(v48[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v32 & 1) == 0)
        {
          if (v34)
            goto LABEL_83;
          goto LABEL_88;
        }
        goto LABEL_78;
      }
      v33 = v13 + 6;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v52, (__int32 *)".");
      if (blahtex::Token::operator==(v33, (const __int32 *)v52))
      {
        LOBYTE(v34) = 1;
        goto LABEL_80;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v50, (__int32 *)",");
      if (blahtex::Token::operator==(v33, (const __int32 *)v50))
      {
        LOBYTE(v34) = 1;
      }
      else
      {
        LOBYTE(v34) = 0;
        if (v30 && v45)
          goto LABEL_69;
      }
LABEL_78:
      if (v51 < 0)
        operator delete(v50[0]);
LABEL_80:
      if (v53 < 0)
        operator delete(v52[0]);
      if (v34)
      {
LABEL_83:
        if (v4 != v1)
        {
          v35 = *(_QWORD *)v4;
          *(_QWORD *)(v35 + 8) = *((_QWORD *)v4 + 1);
          **((_QWORD **)v4 + 1) = v35;
          --*((_QWORD *)this + 5);
          operator delete(v4);
        }
        v36 = (const blahtex::Token *)&v46[1];
        v37 = v47 + 1;
        blahtex::Token::append(v46 + 1, (std::wstring::size_type *)&v47[1]);
        if (!v44)
        {
          v43 = *(_QWORD *)v2;
          *(_QWORD *)(v43 + 8) = *((_QWORD *)v2 + 1);
          **((_QWORD **)v2 + 1) = v43;
          --*((_QWORD *)this + 5);
          operator delete(v2);
          v2 = v5;
          goto LABEL_16;
        }
        blahtex::Token::Token((blahtex::Token *)&__p, v36);
        blahtex::Token::operator=((std::wstring *)v36, v37);
        blahtex::Token::operator=(v37, &__p);
        goto LABEL_97;
      }
LABEL_88:
             0)
      {
        if (v4 != v1)
        {
          v40 = *(_QWORD *)v4;
          *(_QWORD *)(v40 + 8) = *((_QWORD *)v4 + 1);
          **((_QWORD **)v4 + 1) = v40;
          --*((_QWORD *)this + 5);
          operator delete(v4);
        }
        blahtex::Token::append(v46 + 1, (std::wstring::size_type *)&v47[1]);
        blahtex::Token::Token((blahtex::Token *)&__p, (const blahtex::Token *)&v46[1]);
        blahtex::Token::operator=(v46 + 1, v47 + 1);
        blahtex::Token::operator=(v47 + 1, &__p);
LABEL_97:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v41 = *(_QWORD *)v5;
        *(_QWORD *)(v41 + 8) = *((_QWORD *)v5 + 1);
        **((_QWORD **)v5 + 1) = v41;
        --*((_QWORD *)this + 5);
        operator delete(v5);
      }
LABEL_15:
      v5 = v2;
LABEL_16:
      v4 = v1;
LABEL_56:
      v2 = (char *)*((_QWORD *)v2 + 1);
    }
    while (v2 != v1);
  }
}

void sub_2411EC288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::Scripts::Optimise(blahtex::LayoutTree::Scripts *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t blahtex::LayoutTree::Fraction::Optimise(blahtex::LayoutTree::Fraction *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
}

uint64_t blahtex::LayoutTree::Fenced::Optimise(blahtex::LayoutTree::Fenced *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
}

uint64_t blahtex::LayoutTree::Phantom::Optimise(blahtex::LayoutTree::Phantom *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
}

uint64_t blahtex::LayoutTree::Cancel::Optimise(blahtex::LayoutTree::Cancel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
}

uint64_t blahtex::LayoutTree::Sqrt::Optimise(blahtex::LayoutTree::Sqrt *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
}

uint64_t blahtex::LayoutTree::Root::Optimise(blahtex::LayoutTree::Root *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
}

uint64_t blahtex::LayoutTree::Table::Optimise(uint64_t this)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(uint64_t ***)(this + 24);
  v1 = *(uint64_t ***)(this + 32);
  if (v2 != v1)
  {
    v3 = this;
    do
    {
      v4 = *v2;
      if (*v2 != v2[1])
      {
        do
        {
          v5 = *v4++;
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        }
        while (v4 != v2[1]);
        v1 = *(uint64_t ***)(v3 + 32);
      }
      v2 += 3;
    }
    while (v2 != v1);
  }
  return this;
}

uint64_t blahtex::LayoutTree::Node::PrintFields@<X0>(blahtex::LayoutTree::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char **v4;
  unint64_t v5;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const std::wstring::value_type **v11;
  const std::wstring::value_type **v12;
  void (__cdecl **v13)(std::wostringstream *__hidden);
  std::wstring *v14;
  __int128 v15;
  void **v16;
  std::wstring::size_type v17;
  std::wstringbuf::string_type v19;
  void *__p[2];
  int64_t v21;
  void (__cdecl **v22)(std::wostringstream *__hidden);
  std::wstringbuf v23;
  void (__cdecl **v24)(std::wostringstream *__hidden);

  v3 = *((unsigned int *)this + 3);
  v4 = &(&blahtex::LayoutTree::Node::PrintFields(void)const::gFlavourStrings)[2 * v3];
  v5 = (unint64_t)v4[1];
  if (v5 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = *v4;
  if (v5 >= 5)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v5 | 1) != 5)
      v9 = v5 | 1;
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a2, v9 + 1);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a2 = v8;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v5;
    v8 = (void *)a2;
    if (!v5)
    {
      v8 = (void *)a2;
      goto LABEL_9;
    }
  }
  memmove(v8, v7, 4 * v5);
  LODWORD(v3) = *((_DWORD *)this + 3);
LABEL_9:
  *((_DWORD *)v8 + v5) = 0;
  if ((_DWORD)v3 == 1)
  {
    std::wstring::append((std::wstring *)a2, dword_2412167F8);
    v11 = (const std::wstring::value_type **)(&blahtex::LayoutTree::Node::PrintFields(void)const::gLimitsStrings
                                            + 2 * *((unsigned int *)this + 4));
    std::wstring::append((std::wstring *)a2, *v11, (std::wstring::size_type)v11[1]);
  }
  std::wstring::append((std::wstring *)a2, dword_2412167F8);
  v12 = (const std::wstring::value_type **)(&blahtex::LayoutTree::Node::PrintFields(void)const::gStyleStrings
                                          + 2 * *((unsigned int *)this + 2));
  std::wstring::append((std::wstring *)a2, *v12, (std::wstring::size_type)v12[1]);
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  v13 = v22;
  *(_DWORD *)((char *)&v22 + (_QWORD)*(v22 - 3) + 8) = *(_DWORD *)((_BYTE *)&v22 + (_QWORD)*(v22 - 3) + 8) & 0xFFFFFFB5 | 8;
  *(std::wstreambuf::char_type **)((char *)&v23.__binp_ + (_QWORD)*(v13 - 3)) = (std::wstreambuf::char_type *)6;
  LODWORD(__p[0]) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(&v22, (int *)__p);
  std::wostream::operator<<();
  std::wstringbuf::str(&v19, &v23);
  v14 = std::wstring::insert(&v19, 0, dword_241216800);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v21 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v21 >= 0)
    v17 = HIBYTE(v21);
  else
    v17 = (std::wstring::size_type)__p[1];
  std::wstring::append((std::wstring *)a2, (const std::wstring::value_type *)v16, v17);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x242690710](&v24);
}

void sub_2411EC71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::wostringstream::~wostringstream((uint64_t)&a22);
  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Row::Print(blahtex::LayoutTree::Node *a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::locale v21;

  std::wstring::basic_string[abi:ne180100](v19, 2 * a3, 32);
  if ((v20 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (uint64_t)v19[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216810, 4);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v18 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v11 = v18;
  else
    v11 = (uint64_t)__p[1];
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v21, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v21);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  v14 = (_QWORD *)((char *)a1 + 24);
  v15 = *((_QWORD *)a1 + 4);
  if ((_QWORD *)v15 != v14)
  {
    v16 = (a3 + 1);
    do
    {
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v15 + 16) + 32))(*(_QWORD *)(v15 + 16), a2, v16);
      v15 = *(_QWORD *)(v15 + 8);
    }
    while ((_QWORD *)v15 != v14);
  }
}

void sub_2411EC8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolIdentifier::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::locale v25;

  std::wstring::basic_string[abi:ne180100](v23, 2 * a3, 32);
  if ((v24 & 0x80u) == 0)
    v5 = v23;
  else
    v5 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v6 = v24;
  else
    v6 = (uint64_t)v23[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_241216824, 18);
  v9 = *(char *)(a1 + 47);
  if (v9 >= 0)
    v10 = a1 + 24;
  else
    v10 = *(_QWORD *)(a1 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_241216870, 2);
  v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)dword_2412167F8, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v22 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v18 = v22;
  else
    v18 = (uint64_t)__p[1];
  v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v25, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v22 < 0)
    operator delete(__p[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
}

void sub_2411ECAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolNumber::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::locale v25;

  std::wstring::basic_string[abi:ne180100](v23, 2 * a3, 32);
  if ((v24 & 0x80u) == 0)
    v5 = v23;
  else
    v5 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v6 = v24;
  else
    v6 = (uint64_t)v23[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24121687C, 14);
  v9 = *(char *)(a1 + 47);
  if (v9 >= 0)
    v10 = a1 + 24;
  else
    v10 = *(_QWORD *)(a1 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_241216870, 2);
  v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)dword_2412167F8, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v22 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v18 = v22;
  else
    v18 = (uint64_t)__p[1];
  v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v25, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v22 < 0)
    operator delete(__p[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
}

void sub_2411ECC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolText::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::locale v25;

  std::wstring::basic_string[abi:ne180100](v23, 2 * a3, 32);
  if ((v24 & 0x80u) == 0)
    v5 = v23;
  else
    v5 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v6 = v24;
  else
    v6 = (uint64_t)v23[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2412168B8, 12);
  v9 = *(char *)(a1 + 47);
  if (v9 >= 0)
    v10 = a1 + 24;
  else
    v10 = *(_QWORD *)(a1 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_241216870, 2);
  v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)dword_2412167F8, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v22 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v18 = v22;
  else
    v18 = (uint64_t)__p[1];
  v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v17, v18);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v25, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v22 < 0)
    operator delete(__p[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
}

void sub_2411ECE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolOperator::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  __int32 *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *__p;
  uint64_t v32;
  unsigned __int8 v33;
  std::locale v34;

  std::wstring::basic_string[abi:ne180100](&__p, 2 * a3, 32);
  if ((v33 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v33 & 0x80u) == 0)
    v6 = v33;
  else
    v6 = v32;
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2412168EC, 16);
  v9 = *(char *)(a1 + 47);
  if (v9 >= 0)
    v10 = a1 + 24;
  else
    v10 = *(_QWORD *)(a1 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_241216870, 2);
  v14 = (uint64_t *)blahtex::MathmlFontString(*(_DWORD *)(a1 + 56));
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, *v14, v14[1]);
  if (*(_BYTE *)(a1 + 60))
    v16 = &unk_241216930;
  else
    v16 = &unk_241216958;
  if (*(_BYTE *)(a1 + 60))
    v17 = 9;
  else
    v17 = 13;
  v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)v16, v17);
  if (*(_BYTE *)(a1 + 88))
    v19 = (__int32 *)&unk_241216990;
  else
    v19 = &dword_24121629C;
  if (*(_BYTE *)(a1 + 88))
    v20 = 7;
  else
    v20 = 0;
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)v19, v20);
  if ((char)v33 < 0)
    operator delete(__p);
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_36;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
    goto LABEL_36;
  }
  v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2412169B0, 7);
  v22 = *(char *)(a1 + 87);
  if (v22 >= 0)
    v23 = a1 + 64;
  else
    v23 = *(_QWORD *)(a1 + 64);
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a1 + 87);
  else
    v24 = *(_QWORD *)(a1 + 72);
  v25 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v21, v23, v24);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v25, (uint64_t)&unk_2412169D0, 1);
LABEL_36:
  v26 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_2412167F8, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)&__p);
  if ((v33 & 0x80u) == 0)
    v27 = &__p;
  else
    v27 = __p;
  if ((v33 & 0x80u) == 0)
    v28 = v33;
  else
    v28 = v32;
  v29 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v26, (uint64_t)v27, v28);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
  v30 = std::locale::use_facet(&v34, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[3].__on_zero_shared)(v30, 10);
  std::locale::~locale(&v34);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v33 < 0)
    operator delete(__p);
}

void sub_2411ED0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::Space::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  void *__p[2];
  unsigned __int8 v11;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v11 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v6 = v11;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_2412169D8, 6);
  std::wostream::operator<<();
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 28))
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_2412169F4, 17);
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[3].__on_zero_shared)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::wostream::put();
  return std::wostream::flush();
}

void sub_2411ED1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void blahtex::LayoutTree::Scripts::Print(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  void *__p[2];
  unsigned __int8 v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  std::locale v39;

  v6 = 2 * a3;
  std::wstring::basic_string[abi:ne180100](&v36, 2 * a3, 32);
  if ((v38 & 0x80u) == 0)
    v7 = &v36;
  else
    v7 = v36;
  if ((v38 & 0x80u) == 0)
    v8 = v38;
  else
    v8 = v37;
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_241216A3C, 8);
  if (*(_BYTE *)(a1 + 24))
    v11 = &unk_241216A60;
  else
    v11 = &unk_241216A80;
  if (*(_BYTE *)(a1 + 24))
    v12 = 7;
  else
    v12 = 9;
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)dword_2412167F8, 1);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v35 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v35 & 0x80u) == 0)
    v16 = v35;
  else
    v16 = (uint64_t)__p[1];
  v17 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v39, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[3].__on_zero_shared)(v18, 10);
  std::locale::~locale(&v39);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v35 < 0)
    operator delete(__p[0]);
  if ((char)v38 < 0)
    operator delete(v36);
  if (*(_QWORD *)(a1 + 32))
  {
    std::wstring::basic_string[abi:ne180100](&v36, v6 + 2, 32);
    if ((v38 & 0x80u) == 0)
      v19 = &v36;
    else
      v19 = v36;
    if ((v38 & 0x80u) == 0)
      v20 = v38;
    else
      v20 = v37;
    v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v21, (uint64_t)&unk_241216AA8, 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[3].__on_zero_shared)(v23, 10);
    std::locale::~locale((std::locale *)__p);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v38 < 0)
      operator delete(v36);
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), a2, (a3 + 2));
  }
  if (*(_QWORD *)(a1 + 40))
  {
    std::wstring::basic_string[abi:ne180100](&v36, v6 + 2, 32);
    if ((v38 & 0x80u) == 0)
      v24 = &v36;
    else
      v24 = v36;
    if ((v38 & 0x80u) == 0)
      v25 = v38;
    else
      v25 = v37;
    v26 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v26, (uint64_t)&unk_241216ABC, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
    v28 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[3].__on_zero_shared)(v28, 10);
    std::locale::~locale((std::locale *)__p);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v38 < 0)
      operator delete(v36);
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, (a3 + 2));
  }
  if (*(_QWORD *)(a1 + 48))
  {
    std::wstring::basic_string[abi:ne180100](&v36, v6 + 2, 32);
    if ((v38 & 0x80u) == 0)
      v29 = &v36;
    else
      v29 = v36;
    if ((v38 & 0x80u) == 0)
      v30 = v38;
    else
      v30 = v37;
    v31 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v29, v30);
    v32 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v31, (uint64_t)&unk_241216AD4, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
    v33 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[3].__on_zero_shared)(v33, 10);
    std::locale::~locale((std::locale *)__p);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v38 < 0)
      operator delete(v36);
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), a2, (a3 + 2));
  }
}

void sub_2411ED5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Fraction::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  std::locale v18;

  std::wstring::basic_string[abi:ne180100](&__p, 2 * a3, 32);
  if ((v17 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = v16;
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, v7);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216AEC, 9);
  if ((char)v17 < 0)
    operator delete(__p);
  if (!*(_BYTE *)(a1 + 72))
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_241216B14, 18);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)&__p);
  if ((v17 & 0x80u) == 0)
    v9 = &__p;
  else
    v9 = __p;
  if ((v17 & 0x80u) == 0)
    v10 = v17;
  else
    v10 = v16;
  v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v18, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 10);
  std::locale::~locale(&v18);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v17 < 0)
    operator delete(__p);
  v13 = (a3 + 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), a2, v13);
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), a2, v13);
}

void sub_2411ED7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::LayoutTree::Fenced::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::locale v29;

  std::wstring::basic_string[abi:ne180100](v27, 2 * a3, 32);
  if ((v28 & 0x80u) == 0)
    v6 = v27;
  else
    v6 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v7 = v28;
  else
    v7 = (uint64_t)v27[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216B60, 8);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_241216B84, 3);
  v15 = *(char *)(a1 + 79);
  if (v15 >= 0)
    v16 = a1 + 56;
  else
    v16 = *(_QWORD *)(a1 + 56);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 79);
  else
    v17 = *(_QWORD *)(a1 + 64);
  v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)&unk_241216870, 2);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v26 & 0x80u) == 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v21 = v26;
  else
    v21 = (uint64_t)__p[1];
  v22 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet(&v29, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[3].__on_zero_shared)(v23, 10);
  std::locale::~locale(&v29);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v26 < 0)
    operator delete(__p[0]);
  if ((char)v28 < 0)
    operator delete(v27[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88), a2, (a3 + 1));
}

void sub_2411ED9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::Stretchy::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  std::locale v22;

  std::wstring::basic_string[abi:ne180100](v20, 2 * a3, 32);
  if ((v21 & 0x80u) == 0)
    v5 = v20;
  else
    v5 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v6 = v21;
  else
    v6 = (uint64_t)v20[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_241216B60, 8);
  v9 = *(char *)(a1 + 47);
  if (v9 >= 0)
    v10 = a1 + 24;
  else
    v10 = *(_QWORD *)(a1 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_241216B84, 3);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v19 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v15 = v19;
  else
    v15 = (uint64_t)__p[1];
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v22, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v22);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
}

void sub_2411EDB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Phantom::Print(blahtex::LayoutTree::Node *a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](v17, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)v17[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216B94, 8);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (uint64_t)__p[1];
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD **)a1 + 7), a2, (a3 + 1));
}

void sub_2411EDCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Cancel::Print(blahtex::LayoutTree::Node *a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](v17, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)v17[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216BB8, 7);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (uint64_t)__p[1];
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD **)a1 + 7), a2, (a3 + 1));
}

void sub_2411EDE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Sqrt::Print(blahtex::LayoutTree::Node *a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](v17, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)v17[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216BD8, 5);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v16 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v11 = v16;
  else
    v11 = (uint64_t)__p[1];
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD **)a1 + 7), a2, (a3 + 1));
}

void sub_2411EE010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Root::Print(blahtex::LayoutTree::Node *a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](v18, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v6 = v18;
  else
    v6 = (void **)v18[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)v18[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_241216BF0, 5);
  blahtex::LayoutTree::Node::PrintFields(a1, (uint64_t)__p);
  if ((v17 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v11 = v17;
  else
    v11 = (uint64_t)__p[1];
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v18[0]);
  v14 = (a3 + 1);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(**((_QWORD **)a1 + 7) + 32))(*((_QWORD **)a1 + 7), a2, v14);
  return (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(**((_QWORD **)a1 + 8) + 32))(*((_QWORD **)a1 + 8), a2, v14);
}

void sub_2411EE1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::Table::Print(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t v20;
  std::locale::id *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t *i;
  uint64_t v28;
  void *__p[2];
  unsigned __int8 v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  std::locale v34;

  v6 = 2 * a3;
  std::wstring::basic_string[abi:ne180100](&v31, 2 * a3, 32);
  if ((v33 & 0x80u) == 0)
    v7 = &v31;
  else
    v7 = v31;
  if ((v33 & 0x80u) == 0)
    v8 = v33;
  else
    v8 = v32;
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_241216C4C, 6);
  blahtex::LayoutTree::Node::PrintFields((blahtex::LayoutTree::Node *)a1, (uint64_t)__p);
  if ((v30 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v12 = v30;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)dword_2412167F8, 1);
  v15 = (uint64_t *)(&blahtex::LayoutTree::Table::Print(std::wostream &,int)const::gAlignStrings
                  + 2 * *(unsigned int *)(a1 + 48));
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, *v15, v15[1]);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v34, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v34);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v30 < 0)
    operator delete(__p[0]);
  if ((char)v33 < 0)
    operator delete(v31);
  v18 = *(uint64_t ***)(a1 + 24);
  if (v18 != *(uint64_t ***)(a1 + 32))
  {
    v19 = v6 + 2;
    v20 = (a3 + 2);
    v21 = (std::locale::id *)MEMORY[0x24BEDB360];
    do
    {
      std::wstring::basic_string[abi:ne180100](&v31, v19, 32);
      if ((v33 & 0x80u) == 0)
        v22 = &v31;
      else
        v22 = v31;
      if ((v33 & 0x80u) == 0)
        v23 = v33;
      else
        v23 = v32;
      v24 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v22, v23);
      v25 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v24, (uint64_t)&unk_241216C68, 9);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet((const std::locale *)__p, v21);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[3].__on_zero_shared)(v26, 10);
      std::locale::~locale((std::locale *)__p);
      std::wostream::put();
      std::wostream::flush();
      if ((char)v33 < 0)
        operator delete(v31);
      for (i = *v18; i != v18[1]; ++i)
      {
        v28 = *i;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v28 + 32))(v28, a2, v20);
      }
      v18 += 3;
    }
    while (v18 != *(uint64_t ***)(a1 + 32));
  }
}

void sub_2411EE474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void blahtex::LayoutTree::SymbolIdentifier::~SymbolIdentifier(void **this)
{
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::SymbolNumber::~SymbolNumber(void **this)
{
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::SymbolText::~SymbolText(void **this)
{
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::SymbolOperator::~SymbolOperator(void **this)
{
  *this = off_2511390C0;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_2511390C0;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  *this = off_251139490;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Space::~Space(blahtex::LayoutTree::Space *this)
{
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Scripts::~Scripts(blahtex::LayoutTree::Scripts *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251139130;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251139130;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Fraction::~Fraction(blahtex::LayoutTree::Fraction *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_251139168;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_251139168;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Fenced::~Fenced(blahtex::LayoutTree::Fenced *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_2511391B8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_2511391B8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Stretchy::~Stretchy(void **this)
{
  *this = off_251139208;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_251139208;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Phantom::~Phantom(blahtex::LayoutTree::Phantom *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_251139258;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_251139258;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Cancel::~Cancel(blahtex::LayoutTree::Cancel *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_2511392A8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_2511392A8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Sqrt::~Sqrt(blahtex::LayoutTree::Sqrt *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_2511392F8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_2511392F8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x242690740);
}

void blahtex::LayoutTree::Root::~Root(blahtex::LayoutTree::Root *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_251139348;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_251139348;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x242690740);
}

std::wstring *blahtex::Exception::Exception(std::wstring *this, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  uint64_t v10;
  std::wstring::size_type v11;
  uint64_t v12;
  uint64_t v13;
  std::wstring::size_type v14;

  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    v11 = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>((uint64_t *)&this[1], (__int128 *)a3);
    this[1].__r_.__value_.__l.__size_ = v11;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(unsigned __int8 *)(a4 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a4 + 8);
  if (v12)
  {
    if (v11 >= this[1].__r_.__value_.__r.__words[2])
    {
      v11 = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>((uint64_t *)&this[1], (__int128 *)a4);
    }
    else
    {
      std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>((uint64_t)&this[1], (__int128 *)a4);
      v11 += 24;
    }
    this[1].__r_.__value_.__l.__size_ = v11;
  }
  v13 = *(unsigned __int8 *)(a5 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a5 + 8);
  if (v13)
  {
    if (v11 >= this[1].__r_.__value_.__r.__words[2])
    {
      v14 = std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>((uint64_t *)&this[1], (__int128 *)a5);
    }
    else
    {
      std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>((uint64_t)&this[1], (__int128 *)a5);
      v14 = v11 + 24;
    }
    this[1].__r_.__value_.__l.__size_ = v14;
  }
  return this;
}

void sub_2411EEED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::__construct_one_at_end[abi:ne180100]<std::wstring const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(*(std::wstring **)(a1 + 8), *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_2411EEF54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::wstring>::__push_back_slow_path<std::wstring const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::wstring *v10;
  std::__split_buffer<std::wstring>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::wstring> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a1 + 2);
  if (v9)
    v10 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(end, *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::wstring>::__swap_out_circular_buffer((std::vector<std::wstring> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2411EF068(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v)
{
  std::wstring *v4;
  std::wstring *begin;
  std::wstring *end;
  std::wstring *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t blahtex::MathmlNode::MathmlNode(uint64_t a1, int a2, blahtex::Token *a3)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  blahtex::Token::Token((blahtex::Token *)(a1 + 32), a3);
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_2411EF218(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::wstring_view>::unordered_set<std::wstring_view const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::__emplace_unique_key_args<std::wstring_view,std::wstring_view const&>(a1, (uint64_t)v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2411EF294(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::__emplace_unique_key_args<std::wstring_view,std::wstring_view const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *a3;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2411EF4F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<wchar_t>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, 4 * a3);
}

BOOL std::equal_to<std::wstring_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const std::wstring_view::value_type *v4;
  std::wstring_view v5;
  uint64_t v6;
  std::wstring_view v8;

  v4 = *(const std::wstring_view::value_type **)a2;
  v5.__size_ = *(_QWORD *)(a2 + 8);
  v5.__data_ = *(const std::wstring_view::value_type **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8.__data_ = v4;
  v8.__size_ = v5.__size_;
  return v5.__size_ == v6 && std::wstring_view::compare(&v8, v5) == 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

int std::wstring_view::compare(const std::wstring_view *this, std::wstring_view __sv)
{
  std::basic_string_view<_CharT, _Traits>::size_type size;
  std::basic_string_view<_CharT, _Traits>::size_type v3;
  int result;
  BOOL v6;
  int v7;

  size = __sv.__size_;
  v3 = this->__size_;
  if (__sv.__size_ >= v3)
    __sv.__size_ = this->__size_;
  if (__sv.__size_)
  {
    result = wmemcmp(this->__data_, __sv.__data_, __sv.__size_);
    if (result)
      return result;
    v3 = this->__size_;
  }
  v6 = v3 == size;
  if (v3 < size)
    v7 = -1;
  else
    v7 = 1;
  if (v6)
    return 0;
  else
    return v7;
}

uint64_t std::wstring::basic_string[abi:ne180100]<0>(uint64_t a1, __int32 *a2)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 5)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v7 = v4 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a1, v7 + 1);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v4;
    v6 = (void *)a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

void std::vector<std::vector<blahtex::LayoutTree::Node *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<blahtex::LayoutTree::Node *>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<blahtex::LayoutTree::Node *>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x24269062C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + 4 * a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, a2, v11, a2 + 4 * a3, v6, v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x242690638](v13);
  return a1;
}

void sub_2411EFD04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x242690638](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2411EFCE4);
}

void sub_2411EFD4C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= (a4 - a2) >> 2)
      v12 = 0;
    else
      v12 = v11 - ((a4 - a2) >> 2);
    if (a3 - a2 >= 1
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != (unint64_t)(a3 - a2) >> 2)
    {
      return 0;
    }
    if (v12 >= 1)
    {
      std::wstring::basic_string[abi:ne180100](__p, v12, a6);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v6 + 96))(v6, a3, (unint64_t)v15 >> 2) == (unint64_t)v15 >> 2)
    {
      *(_QWORD *)(a5 + 24) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2411EFE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

__int128 *std::__list_imp<blahtex::MathmlNode *>::swap(__int128 *result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 *v4;
  uint64_t *v5;

  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = a2[2];
  a2[2] = v2;
  v3 = *result;
  *result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((_QWORD *)result + 2))
  {
    **((_QWORD **)result + 1) = result;
    v4 = *(__int128 **)result;
  }
  else
  {
    *(_QWORD *)result = result;
    v4 = result;
  }
  *((_QWORD *)v4 + 1) = result;
  if (a2[2])
  {
    *(_QWORD *)a2[1] = a2;
    v5 = (uint64_t *)*a2;
  }
  else
  {
    *a2 = (uint64_t)a2;
    v5 = a2;
  }
  v5[1] = (uint64_t)a2;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<blahtex::MathmlEnvironment>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

_QWORD *std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v6 == v13)
      {
        if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::wstring::basic_string[abi:ne180100](_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 5)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5)
      v6 = a2 | 1;
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

uint64_t std::unordered_set<wchar_t>::unordered_set<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2411F0224(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__emplace_unique_key_args<wchar_t,wchar_t const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2411F043C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,std::wstring_view>::unordered_map<std::pair<std::wstring_view,std::wstring_view> const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,std::wstring_view> const&>(a1, (uint64_t)v5, v5);
      v5 += 2;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2411F04B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,std::wstring_view> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2411F0710(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void blahtex::StripReservedSuffix(std::wstring *__str@<X0>, std::wstring *a2@<X8>)
{
  std::wstring::size_type size;
  std::wstring *p_p;
  int v6;
  std::wstring::size_type v7;
  std::wstring __p;
  char v9;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size <= 7)
    {
LABEL_16:
      std::wstring::__init_copy_ctor_external(a2, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      return;
    }
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size <= 7)
      goto LABEL_13;
  }
  std::wstring::basic_string(&__p, __str, size - 8, 8uLL, (std::allocator<wchar_t> *)&v9);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 8)
    {
      p_p = &__p;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_ != 8)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
    if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_16;
  }
LABEL_9:
  v6 = wmemcmp((const __int32 *)p_p, dword_2412170E0, 8uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v6)
  {
    if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_13:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      return;
    }
    goto LABEL_16;
  }
  v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) != 0)
    v7 = __str->__r_.__value_.__l.__size_;
  std::wstring::basic_string(a2, __str, 0, v7 - 8, (std::allocator<wchar_t> *)&__p);
}

uint64_t blahtex::MacroProcessor::MacroProcessor(uint64_t a1, blahtex::Token **a2)
{
  std::wstring *v3;
  blahtex::Token *v4;
  blahtex::Token *v5;
  blahtex::Token *v7;
  blahtex::Token *v8;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (std::wstring *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = *a2;
  v4 = a2[1];
  if (v4 == *a2)
  {
    v8 = a2[1];
  }
  else
  {
    v7 = 0;
    do
    {
      v4 = (blahtex::Token *)((char *)v4 - 32);
      v7 = (const blahtex::Token *)((char *)std::vector<blahtex::Token>::insert(v3, v7, v4) + 32);
    }
    while (v4 != v5);
    v4 = *a2;
    v8 = a2[1];
  }
  *(_DWORD *)(a1 + 68) = (unint64_t)(v8 - v4) >> 5;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

void sub_2411F08E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void blahtex::MacroProcessor::Advance(blahtex::MacroProcessor *this)
{
  uint64_t v1;
  void **v3;

  v1 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 5) != v1)
  {
    v3 = (void **)(v1 - 32);
    if (*(char *)(v1 - 9) < 0)
      operator delete(*v3);
    *((_QWORD *)this + 6) = v3;
    ++*((_DWORD *)this + 17);
    *((_BYTE *)this + 64) = 0;
  }
}

void blahtex::MacroProcessor::SkipWhitespace(blahtex::MacroProcessor *this)
{
  _BOOL4 v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  while (1)
  {
    blahtex::MacroProcessor::Peek(this, (uint64_t)v5);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_241217104);
    v2 = blahtex::Token::operator==((const __int32 *)v5, (const __int32 *)__p);
    if (v4 < 0)
      operator delete(__p[0]);
    if (v6 < 0)
      operator delete(v5[0]);
    if (!v2)
      break;
    blahtex::MacroProcessor::Advance(this);
  }
}

void sub_2411F09E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void blahtex::MacroProcessor::Peek(blahtex::MacroProcessor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  const __int32 *v8;
  _BOOL4 v9;
  int *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int **v18;
  int v19;
  int *v20;
  int v21;
  unsigned int v22;
  char *v23;
  blahtex::Token *v24;
  blahtex::Token *v25;
  char *v26;
  uint64_t v27;
  std::wstring::size_type v28;
  blahtex::Token *size;
  std::wstring::size_type v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  const __int32 *v36;
  int v37;
  std::wstring *v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  std::wstring *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  uint64_t v47;
  BOOL v48;
  __int32 *v49;
  __int32 *v50;
  __int32 *v51;
  std::wstring::size_type v52;
  __int32 *v53;
  __int32 *v54;
  uint64_t v55;
  std::wstring *v56;
  std::wstring *v57;
  std::wstring *v58;
  std::wstring *exception;
  std::wstring *v60;
  std::wstring *v61;
  void *v62[2];
  char v63;
  std::wstring v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE v67[24];
  std::wstring __p;
  void *v69[2];
  char v70;

  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  v5 = (uint64_t *)((char *)this + 40);
  if (v4 == v3)
  {
LABEL_53:
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v62, &dword_241217168);
    blahtex::Token::Token(a2, v62, 0);
    if (v63 < 0)
      operator delete(v62[0]);
    return;
  }
  while (1)
  {
    v7 = (*((_DWORD *)this + 17) + 1);
    *((_DWORD *)this + 17) = v7;
    if ((unint64_t)(v7 + ((v3 - v4) >> 5)) >> 5 >= 0x271)
    {
      exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241217398);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_241217168);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_241217168);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
      blahtex::Exception::Exception(exception, (__int128 *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
    }
    v8 = (const __int32 *)(v3 - 32);
    if (*((_BYTE *)this + 64))
    {
      blahtex::Token::Token((blahtex::Token *)a2, (const blahtex::Token *)(v3 - 32));
      return;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2412173D0);
    if (blahtex::Token::operator==(v8, (const __int32 *)&v64))
    {
      v9 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, dword_241217408);
      if (blahtex::Token::operator==(v8, (const __int32 *)v69))
      {
        v9 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241217458);
        v9 = blahtex::Token::operator==(v8, (const __int32 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    blahtex::Token::Token((blahtex::Token *)a2, (const blahtex::Token *)(*((_QWORD *)this + 6) - 32));
    if (v9)
      break;
    v10 = (int *)std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::find<std::wstring>(this, a2);
    if (!v10)
      goto LABEL_105;
    v11 = *((_QWORD *)this + 6);
    v12 = (void **)(v11 - 32);
    if (*(char *)(v11 - 9) < 0)
      operator delete(*v12);
    *((_QWORD *)this + 6) = v12;
    std::vector<std::vector<blahtex::Token>>::vector(v69, v10[10]);
    if (v10[10] >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        if (!blahtex::MacroProcessor::ReadArgument((uint64_t)this, (uint64_t *)((char *)v69[0] + v13)))
        {
          v56 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_24121734C);
          blahtex::StripReservedSuffix((std::wstring *)a2, &__p);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v66, &dword_241217168);
          blahtex::Exception::Exception(v56, (__int128 *)&v64, (uint64_t)&__p, (uint64_t)v67, (uint64_t)v66);
        }
        ++v14;
        v13 += 24;
      }
      while (v14 < v10[10]);
    }
    memset(&__p, 0, sizeof(__p));
    v15 = (_QWORD *)*((_QWORD *)v10 + 6);
    if (v15 != *((_QWORD **)v10 + 7))
    {
      while (1)
      {
        ++*((_DWORD *)this + 17);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_24121754C);
        v16 = blahtex::Token::operator==((const __int32 *)v15, (const __int32 *)&v64);
        v17 = v16;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v64.__r_.__value_.__l.__data_);
          if (v17)
          {
LABEL_25:
            v18 = (int **)(v15 + 4);
            if (v15 + 4 == *((_QWORD **)v10 + 7))
              goto LABEL_115;
            v19 = *((char *)v15 + 55);
            if (v19 < 0)
            {
              if (v15[5] != 1)
              {
LABEL_115:
                v58 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241217554);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v66, &dword_241217168);
                blahtex::Exception::Exception(v58, (__int128 *)&v64, a2, (uint64_t)v67, (uint64_t)v66);
              }
              v20 = *v18;
            }
            else
            {
              v20 = (int *)(v15 + 4);
              if (v19 != 1)
                goto LABEL_115;
            }
            v21 = *v20;
            v22 = v21 - 49;
            if (v21 < 49 || (int)v22 >= v10[10])
            {
              v57 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241217554);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v66, &dword_241217168);
              blahtex::Exception::Exception(v57, (__int128 *)&v64, a2, (uint64_t)v67, (uint64_t)v66);
            }
            v23 = (char *)v69[0] + 24 * v22;
            v25 = *(blahtex::Token **)v23;
            v24 = (blahtex::Token *)*((_QWORD *)v23 + 1);
            if (*(blahtex::Token **)v23 == v24)
            {
              v27 = *(_QWORD *)v23;
            }
            else
            {
              do
              {
                std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&__p, v25);
                v25 = (blahtex::Token *)((char *)v25 + 32);
              }
              while (v25 != v24);
              v26 = (char *)v69[0] + 24 * v22;
              v25 = *(blahtex::Token **)v26;
              v27 = *((_QWORD *)v26 + 1);
            }
            *((_DWORD *)this + 17) += (unint64_t)(v27 - (_QWORD)v25) >> 5;
            goto LABEL_44;
          }
        }
        else if (v16)
        {
          goto LABEL_25;
        }
        blahtex::Token::Token((blahtex::Token *)&v64, (const blahtex::Token *)v15);
        if (!v65)
          v65 = *(_QWORD *)(a2 + 24);
        std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&__p, (blahtex::Token *)&v64);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        v18 = (int **)v15;
LABEL_44:
        v15 = v18 + 4;
        if (v18 + 4 == *((int ***)v10 + 7))
        {
          size = (blahtex::Token *)__p.__r_.__value_.__l.__size_;
          v28 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
          {
            v30 = __p.__r_.__value_.__r.__words[0];
          }
          else
          {
            do
            {
              size = (blahtex::Token *)((char *)size - 32);
              std::vector<blahtex::Token>::push_back[abi:ne180100](v5, size);
            }
            while (size != (blahtex::Token *)v28);
            v30 = __p.__r_.__value_.__l.__size_;
            v28 = __p.__r_.__value_.__r.__words[0];
          }
          goto LABEL_50;
        }
      }
    }
    v28 = 0;
    v30 = 0;
LABEL_50:
    *((_DWORD *)this + 17) += (v30 - v28) >> 5;
    v64.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&__p;
    std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    v64.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v69;
    std::vector<std::vector<blahtex::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v4 = *((_QWORD *)this + 5);
    v3 = *((_QWORD *)this + 6);
    if (v4 == v3)
      goto LABEL_53;
  }
  v31 = *((_QWORD *)this + 6);
  v32 = (void **)(v31 - 32);
  if (*(char *)(v31 - 9) < 0)
    operator delete(*v32);
  *((_QWORD *)this + 6) = v32;
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  v33 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 5) == v33)
    goto LABEL_93;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_24121726C);
  v34 = blahtex::Token::operator==((const __int32 *)(v33 - 32), (const __int32 *)&v64);
  v35 = v34;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (v35)
      goto LABEL_61;
LABEL_93:
    v47 = *(unsigned __int8 *)(a2 + 23);
    v48 = (v47 & 0x80u) != 0;
    if ((v47 & 0x80u) != 0)
      v47 = *(_QWORD *)(a2 + 8);
    if (v48)
      v49 = *(__int32 **)a2;
    else
      v49 = (__int32 *)a2;
    v50 = &v49[v47];
    if (v47 >= 8)
    {
      v53 = v49;
      do
      {
        if (v47 == 7)
          break;
        v54 = wmemchr(v53, 82, v47 - 7);
        if (!v54)
          break;
        v51 = v54;
        if (!wmemcmp(v54, dword_2412170E0, 8uLL))
          goto LABEL_100;
        v53 = v51 + 1;
        v55 = (char *)v50 - (char *)(v51 + 1);
        v47 = (unint64_t)v55 >> 2;
      }
      while (v55 > 31);
    }
    v51 = v50;
LABEL_100:
    if (v51 == v50)
      v52 = -1;
    else
      v52 = v51 - v49;
    std::wstring::erase((std::wstring *)a2, v52, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_104;
  }
  if (!v34)
    goto LABEL_93;
LABEL_61:
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_241217114);
  blahtex::Token::operator=((std::wstring *)(*((_QWORD *)this + 6) - 32), &v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v36 = (const __int32 *)(*((_QWORD *)this + 6) - 32);
  if (v36 == *((const __int32 **)this + 5))
    goto LABEL_80;
  v37 = 0;
  while (1)
  {
    if (v37 <= 0)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2412172F0);
      v38 = (std::wstring *)(v36 - 8);
      v39 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v36 - 8, (const __int32 *)&v64);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (!v39)
        break;
    }
    ++*((_DWORD *)this + 17);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_241217114);
    v36 -= 8;
    v40 = blahtex::Token::operator==(v36, (const __int32 *)&v64);
    v41 = v40;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if (v41)
      {
LABEL_71:
        ++v37;
        goto LABEL_79;
      }
    }
    else if (v40)
    {
      goto LABEL_71;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_24121710C);
    v42 = blahtex::Token::operator==(v36, (const __int32 *)&v64);
    v43 = v42;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if (v43)
      {
LABEL_77:
        if (v37 <= 0)
        {
          v60 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2412174AC);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_241217168);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_241217168);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
          blahtex::Exception::Exception(v60, (__int128 *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
        }
        --v37;
      }
    }
    else if (v42)
    {
      goto LABEL_77;
    }
LABEL_79:
    if (v36 == (const __int32 *)*v5)
      goto LABEL_80;
  }
  if (v36 == (const __int32 *)*v5)
  {
LABEL_80:
    v44 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2412172F8);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
    blahtex::Exception::Exception(v44, (__int128 *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_2412172F0);
  v45 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v36 - 8, (const __int32 *)&v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v45)
  {
    v61 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_24121734C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v69, dword_2412174FC);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v67, &dword_241217168);
    blahtex::Exception::Exception(v61, (__int128 *)&v64, (uint64_t)v69, (uint64_t)&__p, (uint64_t)v67);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, (__int32 *)&unk_24121710C);
  blahtex::Token::operator=(v38, &v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2412173D0);
  v46 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v46)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241217514);
    blahtex::Token::operator=((std::wstring *)a2, &v64);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
  }
LABEL_104:
  std::vector<blahtex::Token>::push_back[abi:ne180100](v5, (blahtex::Token *)a2);
LABEL_105:
  *((_BYTE *)this + 64) = 1;
}

void sub_2411F148C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;

  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v39 + 23) < 0)
        operator delete(*(void **)v39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v40);
  goto LABEL_12;
}

void blahtex::MacroProcessor::SkipWhitespaceRaw(blahtex::MacroProcessor *this)
{
  uint64_t i;
  const __int32 *v3;
  _BOOL4 v4;
  void *__p[2];
  char v6;

  for (i = *((_QWORD *)this + 6); *((_QWORD *)this + 5) != i; i = *((_QWORD *)this + 6))
  {
    v3 = (const __int32 *)(i - 32);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_241217104);
    v4 = blahtex::Token::operator==(v3, (const __int32 *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    if (!v4)
      break;
    blahtex::MacroProcessor::Advance(this);
  }
}

void sub_2411F18B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL blahtex::MacroProcessor::ReadArgument(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL8 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  std::wstring *exception;
  _BYTE v21[24];
  _BYTE v22[24];
  void *v23[2];
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;

  blahtex::MacroProcessor::SkipWhitespaceRaw((blahtex::MacroProcessor *)a1);
  v4 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 40) == v4)
    return 0;
  blahtex::Token::Token((blahtex::Token *)v27, (const blahtex::Token *)(v4 - 32));
  v5 = *(_QWORD *)(a1 + 48);
  v6 = (void **)(v5 - 32);
  if (*(char *)(v5 - 9) < 0)
    operator delete(*v6);
  *(_QWORD *)(a1 + 48) = v6;
  ++*(_DWORD *)(a1 + 68);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121710C);
  v7 = blahtex::Token::operator==((const __int32 *)v27, (const __int32 *)__p);
  v8 = v7;
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v8)
      goto LABEL_36;
  }
  else if (v7)
  {
    goto LABEL_36;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_241217114);
  v10 = blahtex::Token::operator==((const __int32 *)v27, (const __int32 *)__p);
  v11 = v10;
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_11;
LABEL_34:
    std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)v27);
    goto LABEL_35;
  }
  if (!v10)
    goto LABEL_34;
LABEL_11:
  v12 = 1;
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 40) == v13)
      break;
    ++*(_DWORD *)(a1 + 68);
    blahtex::Token::Token((blahtex::Token *)__p, (const blahtex::Token *)(v13 - 32));
    v14 = *(_QWORD *)(a1 + 48);
    v15 = (void **)(v14 - 32);
    if (*(char *)(v14 - 9) < 0)
      operator delete(*v15);
    *(_QWORD *)(a1 + 48) = v15;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, (__int32 *)&unk_241217114);
    v16 = blahtex::Token::operator==((const __int32 *)__p, (const __int32 *)v23);
    v17 = v16;
    if (v24 < 0)
    {
      operator delete(v23[0]);
      if (v17)
      {
LABEL_17:
        ++v12;
LABEL_26:
        std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)__p);
        v18 = 1;
        goto LABEL_27;
      }
    }
    else if (v16)
    {
      goto LABEL_17;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, (__int32 *)&unk_24121710C);
    if (!blahtex::Token::operator==((const __int32 *)__p, (const __int32 *)v23))
    {
      if (v24 < 0)
        operator delete(v23[0]);
      goto LABEL_26;
    }
    if (v24 < 0)
      operator delete(v23[0]);
    if (--v12)
      goto LABEL_26;
    v18 = 0;
LABEL_27:
    if (v26 < 0)
    {
      operator delete(__p[0]);
      if ((v18 & 1) == 0)
        break;
    }
    else if ((v18 & 1) == 0)
    {
      break;
    }
  }
  if (v12 >= 1)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121711C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v21, &dword_241217168);
    blahtex::Exception::Exception(exception, (__int128 *)__p, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21);
  }
LABEL_35:
  *(_BYTE *)(a1 + 64) = 0;
LABEL_36:
  v9 = !v8;
  if (v28 < 0)
    operator delete(v27[0]);
  return v9;
}

void sub_2411F1B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v35 - 73) < 0)
        operator delete(*(void **)(v35 - 96));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

uint64_t std::vector<blahtex::Token>::push_back[abi:ne180100](uint64_t *a1, blahtex::Token *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  blahtex::Token *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (blahtex::Token *)&v14[32 * v10];
    v18 = &v14[32 * v13];
    blahtex::Token::Token(v16, a2);
    v17 = (char *)v16 + 32;
    std::vector<blahtex::Token>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = blahtex::Token::Token(*(blahtex::Token **)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  blahtex::Token *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (blahtex::Token *)&v14[32 * v10];
    v18 = &v14[32 * v13];
    blahtex::Token::Token(v16, a2);
    v17 = (char *)v16 + 32;
    std::vector<blahtex::Token>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = blahtex::Token::Token(*(blahtex::Token **)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_2411F1D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void blahtex::MacroProcessor::Get(blahtex::MacroProcessor *this@<X0>, uint64_t a2@<X8>)
{
  blahtex::MacroProcessor::Peek(this, a2);
  blahtex::MacroProcessor::Advance(this);
}

void blahtex::MacroProcessor::HandleNewcommand(blahtex::MacroProcessor *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  const __int32 *v5;
  _BOOL4 v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  const blahtex::Token *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void **v26;
  int v27;
  int *v28;
  int v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  void **v33;
  std::wstring *v34;
  std::wstring *exception;
  std::wstring *v36;
  std::wstring *v37;
  std::wstring *v38;
  std::wstring *v39;
  std::wstring *v40;
  std::wstring *v41;
  _BYTE v42[24];
  void *__p[2];
  char v44;
  _BYTE v45[24];
  _BYTE v46[24];
  __int128 v47;
  char v48;

  v2 = *((_QWORD *)this + 6);
  v3 = (void **)(v2 - 32);
  if (*(char *)(v2 - 9) < 0)
    operator delete(*v3);
  *((_QWORD *)this + 6) = v3;
  ++*((_DWORD *)this + 17);
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  v4 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 5) == v4)
    goto LABEL_52;
  v5 = (const __int32 *)(v4 - 32);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_241217114);
  v6 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v5, (const __int32 *)__p);
  if (v44 < 0)
    operator delete(__p[0]);
  if (v6)
  {
LABEL_52:
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121716C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2412171C4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
    blahtex::Exception::Exception(exception, (__int128 *)__p, (uint64_t)&v47, (uint64_t)v46, (uint64_t)v45);
  }
  v7 = *((_QWORD *)this + 6);
  v8 = (void **)(v7 - 32);
  if (*(char *)(v7 - 9) < 0)
    operator delete(*v8);
  *((_QWORD *)this + 6) = v8;
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  v9 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 5) == v9)
  {
LABEL_51:
    v34 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2412171F4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
    blahtex::Exception::Exception(v34, (__int128 *)__p, (uint64_t)&v47, (uint64_t)v46, (uint64_t)v45);
  }
  v10 = (const blahtex::Token *)(v9 - 32);
  v11 = *(char *)(v9 - 9);
  if (v11 < 0)
  {
    if (!*(_QWORD *)(v9 - 24))
      goto LABEL_51;
    v12 = *(_DWORD **)v10;
  }
  else
  {
    v12 = (_DWORD *)(v9 - 32);
    if (!v11)
      goto LABEL_51;
  }
  if (*v12 != 92)
    goto LABEL_51;
  blahtex::Token::Token((blahtex::Token *)__p, v10);
  v13 = *((_QWORD *)this + 6);
  v14 = (void **)(v13 - 32);
  if (*(char *)(v13 - 9) < 0)
    operator delete(*v14);
  *((_QWORD *)this + 6) = v14;
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  v15 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 5) == v15)
  {
    v36 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_24121711C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_241217168);
    blahtex::Exception::Exception(v36, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, (__int32 *)&unk_24121710C);
  v16 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)(v15 - 32), (const __int32 *)&v47);
  if (v48 < 0)
    operator delete((void *)v47);
  if (v16)
  {
    v37 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2412171F4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_241217168);
    blahtex::Exception::Exception(v37, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
  }
  v17 = *((_QWORD *)this + 6);
  v18 = (void **)(v17 - 32);
  if (*(char *)(v17 - 9) < 0)
    operator delete(*v18);
  *((_QWORD *)this + 6) = v18;
  *(_QWORD *)&v47 = __p;
  v19 = std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>((uint64_t)this, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
  blahtex::MacroProcessor::SkipWhitespaceRaw(this);
  v20 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 5) != v20)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, (__int32 *)&unk_24121726C);
    v21 = blahtex::Token::operator==((const __int32 *)(v20 - 32), (const __int32 *)&v47);
    v22 = v21;
    if (v48 < 0)
    {
      operator delete((void *)v47);
      if (!v22)
        goto LABEL_47;
    }
    else if (!v21)
    {
      goto LABEL_47;
    }
    v23 = *((_QWORD *)this + 6);
    v24 = (void **)(v23 - 32);
    if (*(char *)(v23 - 9) < 0)
      operator delete(*v24);
    *((_QWORD *)this + 6) = v24;
    blahtex::MacroProcessor::SkipWhitespaceRaw(this);
    v25 = *((_QWORD *)this + 6);
    if (*((_QWORD *)this + 5) == v25)
    {
LABEL_56:
      v39 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_241217274);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
      blahtex::Exception::Exception(v39, &v47, (uint64_t)__p, (uint64_t)v46, (uint64_t)v45);
    }
    v26 = (void **)(v25 - 32);
    v27 = *(char *)(v25 - 9);
    if (v27 < 0)
    {
      if (*(_QWORD *)(v25 - 24) != 1)
        goto LABEL_56;
      v28 = (int *)*v26;
    }
    else
    {
      v28 = (int *)(v25 - 32);
      if (v27 != 1)
        goto LABEL_56;
    }
    v29 = *v28;
    *((_DWORD *)v19 + 10) = v29 - 48;
    if ((v29 - 58) <= 0xFFFFFFF6)
    {
      v41 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_241217274);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
      blahtex::Exception::Exception(v41, &v47, (uint64_t)__p, (uint64_t)v46, (uint64_t)v45);
    }
    if (*(char *)(v25 - 9) < 0)
      operator delete(*v26);
    *((_QWORD *)this + 6) = v26;
    blahtex::MacroProcessor::SkipWhitespaceRaw(this);
    v30 = *((_QWORD *)this + 6);
    if (*((_QWORD *)this + 5) == v30)
      goto LABEL_57;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, (__int32 *)&unk_2412172F0);
    v31 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)(v30 - 32), (const __int32 *)&v47);
    if (v48 < 0)
      operator delete((void *)v47);
    if (v31)
    {
LABEL_57:
      v40 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_2412172F8);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, &dword_241217168);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_241217168);
      blahtex::Exception::Exception(v40, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
    }
    v32 = *((_QWORD *)this + 6);
    v33 = (void **)(v32 - 32);
    if (*(char *)(v32 - 9) < 0)
      operator delete(*v33);
    *((_QWORD *)this + 6) = v33;
  }
LABEL_47:
  if (!blahtex::MacroProcessor::ReadArgument((uint64_t)this, v19 + 6))
  {
    v38 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v47, dword_24121734C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v46, dword_2412171C4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, &dword_241217168);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, &dword_241217168);
    blahtex::Exception::Exception(v38, &v47, (uint64_t)v46, (uint64_t)v45, (uint64_t)v42);
  }
  if (v44 < 0)
    operator delete(__p[0]);
}

void sub_2411F24F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v35 - 33) < 0)
  {
    operator delete(*(void **)(v35 - 56));
    if ((v34 & 1) == 0)
    {
LABEL_12:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

void sub_2411F27D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<blahtex::Token>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<blahtex::Token>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::wstring const,blahtex::MacroProcessor::Macro>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::wstring const,blahtex::MacroProcessor::Macro>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

const blahtex::Token *std::vector<blahtex::Token>::insert(std::wstring *a1, blahtex::Token *this, blahtex::Token *a3)
{
  const blahtex::Token *v4;
  blahtex::Token *size;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::wstring::size_type v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  blahtex::Token *v16;
  blahtex::Token *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = this;
  size = (blahtex::Token *)a1->__r_.__value_.__l.__size_;
  v9 = a1->__r_.__value_.__r.__words[2];
  v7 = (uint64_t)&a1->__r_.__value_.__r.__words[2];
  v8 = v9;
  if ((unint64_t)size >= v9)
  {
    v10 = a1->__r_.__value_.__r.__words[0];
    v11 = ((uint64_t)((uint64_t)size - a1->__r_.__value_.__r.__words[0]) >> 5) + 1;
    if (v11 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = (uint64_t)((uint64_t)this - v10) >> 5;
    v13 = v8 - v10;
    v14 = v13 >> 4;
    if (v13 >> 4 <= v11)
      v14 = ((uint64_t)((uint64_t)size - a1->__r_.__value_.__r.__words[0]) >> 5) + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (blahtex::Token *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = (char *)v16 + 32 * v12;
    v20 = v19;
    v21 = (char *)v16 + 32 * v15;
    std::__split_buffer<blahtex::Token>::push_back[abi:ne180100](&v18, a3);
    v4 = (const blahtex::Token *)std::vector<blahtex::Token>::__swap_out_circular_buffer((uint64_t)a1, (uint64_t)&v18, v4);
    std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v18);
  }
  else if (this == size)
  {
    blahtex::Token::Token(this, a3);
    a1->__r_.__value_.__l.__size_ = (std::wstring::size_type)v4 + 32;
  }
  else
  {
    std::vector<blahtex::Token>::__move_range(a1, (uint64_t)this, (unint64_t)size, (uint64_t)this + 32);
    if (v4 <= a3)
      a3 = (blahtex::Token *)((char *)a3 + 32 * (a1->__r_.__value_.__l.__size_ > (unint64_t)a3));
    blahtex::Token::operator=((std::wstring *)v4, (std::wstring *)a3);
  }
  return v4;
}

void sub_2411F2A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

std::wstring *std::vector<blahtex::Token>::__move_range(std::wstring *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  std::wstring *v6;
  std::wstring::size_type size;
  uint64_t v8;
  const blahtex::Token *v9;
  blahtex::Token *v11;
  std::wstring *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  size = result->__r_.__value_.__l.__size_;
  v8 = size - a4;
  v9 = (const blahtex::Token *)(a2 + size - a4);
  if ((unint64_t)v9 >= a3)
  {
    v11 = (blahtex::Token *)result->__r_.__value_.__l.__size_;
  }
  else
  {
    v11 = (blahtex::Token *)result->__r_.__value_.__l.__size_;
    do
    {
      result = (std::wstring *)blahtex::Token::Token(v11, v9);
      v9 = (const blahtex::Token *)((char *)v9 + 32);
      v11 = (blahtex::Token *)((char *)v11 + 32);
    }
    while ((unint64_t)v9 < a3);
  }
  v6->__r_.__value_.__l.__size_ = (std::wstring::size_type)v11;
  if (size != a4)
  {
    v12 = (std::wstring *)(size - 32);
    v13 = 32 * (v8 >> 5);
    v14 = a2 - 32;
    do
    {
      result = blahtex::Token::operator=(v12, (std::wstring *)(v14 + v13));
      v12 = (std::wstring *)((char *)v12 - 32);
      v13 -= 32;
    }
    while (v13);
  }
  return result;
}

void sub_2411F2B38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<blahtex::Token>::push_back[abi:ne180100](blahtex::Token **a1, blahtex::Token *a2)
{
  blahtex::Token *v4;
  std::wstring *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  blahtex::Token *v12;
  unint64_t v13;
  uint64_t v14;
  blahtex::Token *v15;
  blahtex::Token *v16;
  uint64_t v17;
  char *v18;
  const blahtex::Token *v19;
  uint64_t v20;
  blahtex::Token *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t result;
  blahtex::Token *v26;
  int64x2_t v27;
  char *v28;
  blahtex::Token *v29;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (std::wstring *)a1[1];
    v6 = (char *)v5 - (char *)*a1;
    if (v5 <= (std::wstring *)*a1)
    {
      if (v4 == *a1)
        v13 = 1;
      else
        v13 = (v4 - *a1) >> 4;
      v14 = (uint64_t)a1[4];
      v29 = a1[4];
      v15 = (blahtex::Token *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v14, v13);
      v16 = (blahtex::Token *)((char *)v15 + 32 * (v13 >> 2));
      v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      v18 = (char *)v15 + 32 * v17;
      v27.i64[1] = (uint64_t)v16;
      v28 = v18;
      v19 = a1[1];
      v20 = a1[2] - v19;
      if (v20)
      {
        v21 = (blahtex::Token *)((char *)v16 + (v20 & 0xFFFFFFFFFFFFFFE0));
        v22 = 32 * (v20 >> 5);
        do
        {
          blahtex::Token::Token(v16, v19);
          v16 = (blahtex::Token *)((char *)v16 + 32);
          v19 = (const blahtex::Token *)((char *)v19 + 32);
          v22 -= 32;
        }
        while (v22);
        v15 = v26;
        v16 = (blahtex::Token *)v27.i64[0];
        v23 = *(int64x2_t *)(a1 + 1);
        v18 = v28;
      }
      else
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = v16;
      }
      v26 = *a1;
      *a1 = v15;
      a1[1] = v16;
      v27 = v23;
      v24 = (char *)a1[3];
      a1[2] = v21;
      a1[3] = (blahtex::Token *)v18;
      v28 = v24;
      std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)&v26);
      v4 = a1[2];
    }
    else
    {
      v7 = v6 >> 5;
      v8 = v6 >> 5 < -1;
      v9 = (v6 >> 5) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if (v5 == (std::wstring *)v4)
      {
        v12 = (blahtex::Token *)((char *)v5 - 32 * (v10 >> 1));
      }
      else
      {
        do
        {
          blahtex::Token::operator=((std::wstring *)((char *)v5 + 32 * v11), v5);
          v5 = (std::wstring *)((char *)v5 + 32);
        }
        while (v5 != (std::wstring *)v4);
        v4 = a1[1];
        v12 = (blahtex::Token *)((char *)v5 + 32 * v11);
      }
      a1[1] = (blahtex::Token *)((char *)v4 + 32 * v11);
      a1[2] = v12;
      v4 = v12;
    }
  }
  result = blahtex::Token::Token(v4, a2);
  a1[2] = (blahtex::Token *)((char *)a1[2] + 32);
  return result;
}

void sub_2411F2CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<blahtex::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<blahtex::Token>::__swap_out_circular_buffer(uint64_t a1, uint64_t a2, const blahtex::Token *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>>(a1 + 16, (uint64_t)a3, a3, *(_QWORD *)a1, *(const blahtex::Token **)a1, v6, v6);
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(v7, a3, *(blahtex::Token **)(a1 + 8), *(blahtex::Token **)(a2 + 16));
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>>(uint64_t a1, uint64_t a2, const blahtex::Token *a3, uint64_t a4, const blahtex::Token *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const blahtex::Token *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const blahtex::Token *)((char *)v9 - 32);
      blahtex::Token::Token((blahtex::Token *)(v7 - 32), v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2411F2E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

blahtex::Token *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(uint64_t a1, blahtex::Token *a2, blahtex::Token *a3, blahtex::Token *this)
{
  blahtex::Token *v4;
  const blahtex::Token *v6;
  _QWORD v8[3];
  char v9;
  blahtex::Token *v10;
  blahtex::Token *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      blahtex::Token::Token(v4, v6);
      v6 = (const blahtex::Token *)((char *)v6 + 32);
      v4 = (blahtex::Token *)((char *)v11 + 32);
      v11 = (blahtex::Token *)((char *)v11 + 32);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2411F2EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

uint64_t std::__split_buffer<blahtex::Token>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<blahtex::Token>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<blahtex::Token>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<blahtex::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<blahtex::Token>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>,std::reverse_iterator<blahtex::Token*>>((uint64_t)(a1 + 2), a1[1], (const blahtex::Token *)a1[1], *a1, (const blahtex::Token *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (std::equal_to<std::wstring>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v15;
}

void sub_2411F3338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::wstring const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::wstring *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::wstring *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(v9, *(const std::wstring::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_2411F33DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<wchar_t>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v2 = v3;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, 4 * v2);
}

BOOL std::equal_to<std::wstring>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const __int32 *v7;
  const __int32 *v8;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a3 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (v3 != v5)
    return 0;
  if (!v3)
    return 1;
  if (v6 >= 0)
    v7 = (const __int32 *)a3;
  else
    v7 = *(const __int32 **)a3;
  if (v4 >= 0)
    v8 = (const __int32 *)a2;
  else
    v8 = *(const __int32 **)a2;
  return wmemcmp(v8, v7, v3) == 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::wstring const,blahtex::MacroProcessor::Macro>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::find<std::wstring>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::wstring>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::vector<std::vector<blahtex::Token>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2411F3684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<blahtex::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<blahtex::Token>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void blahtex::Tokenise(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  std::wstring *v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  std::wstring::size_type size;
  std::wstring *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::wstring::value_type *i;
  std::wstring::value_type v28;
  uint64_t v29;
  std::wstring *v30;
  std::wstring *v31;
  std::wstring *exception;
  std::wstring *v33;
  std::wstring v34;
  _BYTE v35[24];
  void *v36;
  char v37;
  _BYTE v38[24];
  _BYTE v39[24];
  std::wstring v40;
  void *__p[2];
  char v42;
  __int128 v43;
  char v44;

  if (a1[1])
  {
    v6 = MEMORY[0x24BDAC740];
    v7 = (unsigned int *)*a1;
    do
    {
      v8 = *v7;
      if (v8 <= 0x7F)
      {
        if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
        {
LABEL_17:
          v13 = *v7;
          if (*v7 != 92)
          {
            if (v13 < 32 || v13 == 127)
            {
              exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_2412175D8);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v40, &dword_24121761C);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_24121761C);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_24121761C);
              blahtex::Exception::Exception(exception, &v43, (uint64_t)&v40, (uint64_t)v39, (uint64_t)v38);
            }
            v37 = 1;
            v36 = (void *)v13;
            blahtex::Token::Token(&v43, &v36, 0);
            std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)&v43);
            if (v44 < 0)
              operator delete((void *)v43);
            if (v37 < 0)
              operator delete(v36);
            v10 = v7 + 1;
            goto LABEL_78;
          }
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v40, (__int32 *)&unk_241217620);
          if (v7 + 1 == (unsigned int *)(*a1 + 4 * a1[1]))
          {
            v31 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_241217628);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_24121761C);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_24121761C);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, &dword_24121761C);
            blahtex::Exception::Exception(v31, &v43, (uint64_t)v39, (uint64_t)v38, (uint64_t)v35);
          }
          v14 = v7[1];
          if ((v14 & 0xFFFFFFDF) - 65 <= 0x19)
          {
            v15 = v7 + 2;
            do
            {
              v10 = v15;
              std::wstring::push_back(&v40, v14);
              if (v10 == (unsigned int *)(*a1 + 4 * a1[1]))
                break;
              v15 = v10 + 1;
              LODWORD(v14) = *v10;
            }
            while ((*v10 & 0xFFFFFFDF) - 65 < 0x1A);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
              if (HIBYTE(v40.__r_.__value_.__r.__words[2]) == 6)
              {
                v17 = &v40;
                goto LABEL_46;
              }
LABEL_49:
              if (v16 == 4)
              {
                v22 = &v40;
                goto LABEL_54;
              }
              goto LABEL_69;
            }
            size = v40.__r_.__value_.__l.__size_;
            if (v40.__r_.__value_.__l.__size_ == 6)
            {
              v17 = (std::wstring *)v40.__r_.__value_.__r.__words[0];
LABEL_46:
              if (wmemcmp((const __int32 *)v17, dword_241217680, 6uLL))
              {
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
                  goto LABEL_49;
                }
                size = v40.__r_.__value_.__l.__size_;
                goto LABEL_52;
              }
            }
            else
            {
LABEL_52:
              if (size != 4)
                goto LABEL_69;
              v22 = (std::wstring *)v40.__r_.__value_.__r.__words[0];
LABEL_54:
              if (wmemcmp((const __int32 *)v22, dword_24121769C, 4uLL))
              {
LABEL_69:
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                  std::wstring::__init_copy_ctor_external(&v34, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
                else
                  v34 = v40;
                blahtex::Token::Token(&v43, &v34, 0);
                std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)&v43);
                if (v44 < 0)
                  operator delete((void *)v43);
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v34.__r_.__value_.__l.__data_);
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v40.__r_.__value_.__l.__data_);
                goto LABEL_78;
              }
            }
            v23 = *a1;
            v24 = a1[1];
            while (v10 != (unsigned int *)(v23 + 4 * v24))
            {
              v25 = *v10;
              if (v25 <= 0x7F)
              {
                if ((*(_DWORD *)(v6 + 4 * v25 + 60) & 0x4000) == 0)
                  break;
              }
              else
              {
                v26 = __maskrune(v25, 0x4000uLL);
                v23 = *a1;
                v24 = a1[1];
                if (!v26)
                  break;
              }
              ++v10;
            }
            if (v10 == (unsigned int *)(v23 + 4 * v24) || *v10 != 123)
            {
              v33 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_2412176B0);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_24121761C);
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_24121761C);
              blahtex::Exception::Exception(v33, &v43, (uint64_t)&v40, (uint64_t)v39, (uint64_t)v38);
            }
            std::wstring::push_back(&v40, 123);
            for (i = (std::wstring::value_type *)(v10 + 1); ; ++i)
            {
              if (i == (std::wstring::value_type *)(*a1 + 4 * a1[1]))
              {
                v30 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v43, dword_241217708);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v39, &dword_24121761C);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, &dword_24121761C);
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v35, &dword_24121761C);
                blahtex::Exception::Exception(v30, &v43, (uint64_t)v39, (uint64_t)v38, (uint64_t)v35);
              }
              v28 = *i;
              if (*i == 125)
                break;
              std::wstring::push_back(&v40, v28);
            }
            std::wstring::push_back(&v40, 125);
            v10 = (unsigned int *)(i + 1);
            goto LABEL_69;
          }
          if (v14 <= 0x7F)
          {
            if ((*(_DWORD *)(v6 + 4 * v14 + 60) & 0x4000) != 0)
            {
LABEL_35:
              std::wstring::append(&v40, dword_2412175D0);
              v18 = v7 + 2;
              do
              {
                v10 = v18;
                if (v18 == (unsigned int *)(*a1 + 4 * a1[1]))
                  break;
                v19 = *v18;
                v20 = v19 <= 0x7F ? *(_DWORD *)(v6 + 4 * v19 + 60) & 0x4000 : __maskrune(v19, 0x4000uLL);
                v18 = v10 + 1;
              }
              while (v20);
              goto LABEL_69;
            }
          }
          else if (__maskrune(v14, 0x4000uLL))
          {
            goto LABEL_35;
          }
          std::wstring::push_back(&v40, v7[1]);
          v10 = v7 + 2;
          goto LABEL_69;
        }
      }
      else if (!__maskrune(v8, 0x4000uLL))
      {
        goto LABEL_17;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2412175D0);
      blahtex::Token::Token(&v43, __p, 0);
      std::vector<blahtex::Token>::push_back[abi:ne180100](a2, (blahtex::Token *)&v43);
      if (v44 < 0)
        operator delete((void *)v43);
      if (v42 < 0)
        operator delete(__p[0]);
      v9 = v7 + 1;
      do
      {
        v10 = v9;
        if (v9 == (unsigned int *)(*a1 + 4 * a1[1]))
          break;
        v11 = *v9;
        v12 = v11 <= 0x7F ? *(_DWORD *)(v6 + 4 * v11 + 60) & 0x4000 : __maskrune(v11, 0x4000uLL);
        v9 = v10 + 1;
      }
      while (v12);
LABEL_78:
      v29 = *a1;
      if (a3)
      {
        blahtex::Token::setSource(a2[1] - 32, v29, (uint64_t)v7, (uint64_t)v10);
        v29 = *a1;
      }
      v7 = v10;
    }
    while (v10 != (unsigned int *)(v29 + 4 * a1[1]));
  }
}

void sub_2411F3D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  int v51;
  uint64_t v52;

  if (a32 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v52 - 97) < 0)
  {
    operator delete(*(void **)(v52 - 120));
    if ((v51 & 1) == 0)
    {
LABEL_10:
      if (a44 < 0)
        operator delete(a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v50);
  goto LABEL_10;
}

BOOL std::operator==[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(const __int32 *a1, __int32 *a2)
{
  size_t v4;
  int v5;

  v4 = wcslen(a2);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == *((_QWORD *)a1 + 1))
    {
      if (v4 != -1)
      {
        a1 = *(const __int32 **)a1;
        if (!v4)
          goto LABEL_10;
        goto LABEL_9;
      }
LABEL_13:
      std::wstring::__throw_out_of_range[abi:ne180100]();
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 != -1)
    {
      if (!v4)
        goto LABEL_10;
LABEL_9:
      v5 = wmemcmp(a1, a2, v4);
      if (v5)
        return v5 == 0;
LABEL_10:
      v5 = 0;
      return v5 == 0;
    }
    goto LABEL_13;
  }
  return 0;
}

double blahtex::Manager::Manager(blahtex::Manager *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  return result;
}

void blahtex::Manager::ProcessInput(std::wstring **a1, std::wstring::size_type a2, int a3, int a4)
{
  unsigned __int8 v8;
  std::wstring::size_type v9;
  std::wstring::size_type v10;
  uint64_t i;
  unsigned int v12;
  uint64_t v13;
  std::wstring *v14;
  int v15;
  const __int32 *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  blahtex::Token *v19;
  blahtex::Token *v20;
  blahtex::Token *v21;
  blahtex::Token *v22;
  std::wstring *v23;
  std::wstring *v24;
  std::wstring *v25;
  std::wstring *v26;
  std::wstring *v27;
  std::wstring *v28;
  uint64_t v29;
  std::wstring *exception;
  std::wstring *v31;
  _QWORD v32[3];
  std::wstring *v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  std::wstring v38;
  blahtex::Token *v39;
  blahtex::Token *v40;
  uint64_t v41;

  if ((v8 & 1) == 0
  {
    std::unordered_set<std::wstring>::unordered_set<std::wstring_view const*>((uint64_t)blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::reservedCommandTable, (uint64_t)&blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::reservedCommandArray, (uint64_t)&__block_descriptor_tmp_0);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  v38.__r_.__value_.__r.__words[0] = v10;
  v38.__r_.__value_.__l.__size_ = v9;
  blahtex::Tokenise((uint64_t *)&v38, (uint64_t *)&v39, 1);
  *((_BYTE *)a1 + 16) = 0;
  for (i = (uint64_t)v39; (blahtex::Token *)i != v40; i += 32)
  {
    if (std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::reservedCommandTable, i))
    {
      std::wstring::append((std::wstring *)i, dword_24121BD4C);
      continue;
    }
    v12 = *(unsigned __int8 *)(i + 23);
    if (*(char *)(i + 23) < 0)
    {
      if (*(_QWORD *)(i + 8) <= 7uLL)
        goto LABEL_27;
      v13 = *(_QWORD *)(i + 8);
    }
    else
    {
      if (v12 <= 7)
        goto LABEL_28;
      v13 = *(unsigned __int8 *)(i + 23);
    }
    std::wstring::basic_string(&v38, (const std::wstring *)i, v13 - 8, 8uLL, (std::allocator<wchar_t> *)&v33);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (std::wstring *)v38.__r_.__value_.__r.__words[0];
      if (v38.__r_.__value_.__l.__size_ == 8)
        goto LABEL_21;
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) == 8)
    {
      v14 = &v38;
LABEL_21:
      v15 = wmemcmp((const __int32 *)v14, dword_24121BD4C, 8uLL);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (!v15)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v38, dword_24121BD70);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v33, &dword_24121761C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v32, &dword_24121761C);
        blahtex::Exception::Exception(exception, (__int128 *)&v38, i, (uint64_t)&v33, (uint64_t)v32);
      }
    }
    v12 = *(unsigned __int8 *)(i + 23);
LABEL_27:
    if ((v12 & 0x80) == 0)
    {
LABEL_28:
      v16 = (const __int32 *)i;
      if (v12 == 14)
        goto LABEL_32;
      continue;
    }
    if (*(_QWORD *)(i + 8) == 14)
    {
      v16 = *(const __int32 **)i;
LABEL_32:
      if (!wmemcmp(v16, dword_24121BDB0, 0xEuLL))
      {
        *((_BYTE *)a1 + 16) = 1;
        MEMORY[0x242690560](i, dword_2412175D0);
      }
    }
  }
  memset(&v38, 0, sizeof(v38));
  if ((v17 & 1) == 0
  {
    blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gStandardMacrosTokenised = 0;
    *(_QWORD *)algn_257103B18 = 0;
    qword_257103B20 = 0;
  }
  if ((v18 & 1) == 0
  {
    blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised = 0;
    *(_QWORD *)algn_257103B38 = 0;
    qword_257103B40 = 0;
  }
  if (blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::onceToken != -1)
  {
    dispatch_once(&blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::onceToken, &__block_literal_global_2);
    if (!a3)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (a3)
LABEL_38:
    std::vector<blahtex::Token>::__assign_with_size[abi:ne180100]<blahtex::Token*,blahtex::Token*>((uint64_t)&v38, (blahtex::Token *)blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised, *(blahtex::Token **)algn_257103B38, (*(_QWORD *)algn_257103B38- blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised) >> 5);
LABEL_39:
  v19 = (blahtex::Token *)blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gStandardMacrosTokenised;
  v20 = *(blahtex::Token **)algn_257103B18;
  while (v19 != v20)
  {
    std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&v38, v19);
    v19 = (blahtex::Token *)((char *)v19 + 32);
  }
  v21 = v39;
  v22 = v40;
  while (v21 != v22)
  {
    std::vector<blahtex::Token>::push_back[abi:ne180100]((uint64_t *)&v38, v21);
    v21 = (blahtex::Token *)((char *)v21 + 32);
  }
  v32[0] = 0;
  blahtex::Parser::DoParse((blahtex::Parser *)v32, (uint64_t)&v38, (uint64_t *)&v33);
  v23 = v33;
  v33 = 0;
  v24 = *a1;
  *a1 = v23;
  if (v24)
  {
    (*(void (**)(std::wstring *))(v24->__r_.__value_.__r.__words[0] + 8))(v24);
    v25 = v33;
    v33 = 0;
    if (v25)
      (*(void (**)(std::wstring *))(v25->__r_.__value_.__r.__words[0] + 8))(v25);
  }
  *((_BYTE *)a1 + 17) = 0;
  LODWORD(v33) = 0;
  BYTE4(v33) = 0;
  v34 = 0;
  v35 = 0;
  v36 = a4 ^ 1;
  v37 = -1;
  (*(void (**)(std::wstring **__return_ptr, std::wstring *, std::wstring **))((*a1)->__r_.__value_.__r.__words[0]
                                                                                       + 16))(&v31, *a1, &v33);
  v26 = v31;
  v31 = 0;
  v27 = a1[1];
  a1[1] = v26;
  if (v27)
  {
    (*(void (**)(std::wstring *))(v27->__r_.__value_.__r.__words[0] + 8))(v27);
    v28 = v31;
    v31 = 0;
    if (v28)
      (*(void (**)(std::wstring *))(v28->__r_.__value_.__r.__words[0] + 8))(v28);
  }
  (*(void (**)(std::wstring *))(a1[1]->__r_.__value_.__r.__words[0] + 16))(a1[1]);
  v29 = v32[0];
  v32[0] = 0;
  if (v29)
    std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100]((uint64_t)v32, v29);
  v33 = &v38;
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v38.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v39;
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_2411F44DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2411F44F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v30 & 1) == 0)
      goto LABEL_10;
  }
  else if (!v30)
  {
LABEL_10:
    a23 = &a29;
    std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
    JUMPOUT(0x2411F4674);
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

void sub_2411F456C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  const __int32 *v12;
  uint64_t v13;
  std::wstring *exception;
  uint64_t v15;

  if (a2 == 1)
  {
    v12 = (const __int32 *)__cxa_begin_catch(a1);
    if (std::operator==[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(v12, dword_24121BDEC))
    {
      *(_BYTE *)(v11 + 17) = 1;
      blahtex::Exception::operator=(v11 + 24, (uint64_t)v12);
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      __cxa_end_catch();
      JUMPOUT(0x2411F4364);
    }
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    blahtex::Exception::Exception(exception, (const blahtex::Exception *)v12);
  }
  v15 = a11;
  a11 = 0;
  if (v15)
    std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100]((uint64_t)&a11, v15);
  JUMPOUT(0x2411F4654);
}

void sub_2411F45FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  __cxa_free_exception(v11);
  __cxa_end_catch();
  v12 = a11;
  a11 = 0;
  if (v12)
    std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  JUMPOUT(0x2411F4654);
}

void sub_2411F463C()
{
  JUMPOUT(0x2411F4664);
}

void sub_2411F464C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t **a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a14 = &a17;
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&a14);
  a17 = &a20;
  std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&a17);
  JUMPOUT(0x2411F4674);
}

void ___ZN7blahtex7Manager12ProcessInputERKNSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEbb_block_invoke()
{
  blahtex::Tokenise((uint64_t *)&blahtex::Manager::gTexvcCompatibilityMacros, &blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gTexvcCompatibilityMacrosTokenised, 0);
  blahtex::Tokenise((uint64_t *)&blahtex::Manager::gStandardMacros, &blahtex::Manager::ProcessInput(std::wstring const&,BOOL,BOOL)::gStandardMacrosTokenised, 0);
}

uint64_t blahtex::Exception::operator=(uint64_t a1, uint64_t a2)
{
  std::wstring::operator=((std::wstring *)a1, (const std::wstring *)a2);
  if (a1 != a2)
    std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 24), *(std::wstring **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

std::wstring *blahtex::Exception::Exception(std::wstring *this, const blahtex::Exception *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_2411F477C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::Manager::GenerateMathml(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::wstring *exception;
  struct type_info *v6;
  void (*v7)(void *);
  _BYTE v8[12];
  int v9;
  __int128 v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 17))
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    blahtex::Exception::Exception(exception, (const blahtex::Exception *)(a1 + 24));
    v7 = (void (*)(void *))blahtex::Exception::~Exception;
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)exception, "Layout tree not yet built in Manager::GenerateMathml");
    v6 = (struct type_info *)MEMORY[0x24BEDB720];
    v7 = (void (*)(void *))MEMORY[0x24BEDAAC0];
LABEL_8:
    __cxa_throw(exception, v6, v7);
  }
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(a1 + 16))
    LODWORD(v10) = 0;
  v9 = 0;
  blahtex::MathmlEnvironment::MathmlEnvironment((blahtex::MathmlEnvironment *)v8, BYTE4(v10) == 0, 0xFFFFFFFF);
  return (*(uint64_t (**)(uint64_t, __int128 *, _BYTE *, int *))(*(_QWORD *)v2 + 24))(v2, &v10, v8, &v9);
}

void sub_2411F4880(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(_QWORD *a1, const char *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  char *v7;
  char v8;
  unsigned __int8 *v9;
  std::locale::id *v10;
  char *v11;
  const std::locale::facet *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const std::locale::facet *v19;
  uint64_t v20;
  _BYTE v22[16];
  std::locale v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24269062C](v22, a1);
  if (v22[0])
  {
    v4 = strlen(a2);
    v5 = v4;
    if (v4 < 0x65)
    {
      v7 = 0;
      v6 = &v24;
    }
    else
    {
      v6 = (char *)malloc_type_malloc(4 * v4, 0x100004052888210uLL);
      v7 = v6;
      if (!v6)
        std::__throw_bad_alloc();
    }
    v8 = *a2;
    if (*a2)
    {
      v9 = (unsigned __int8 *)(a2 + 1);
      v10 = (std::locale::id *)MEMORY[0x24BEDB360];
      v11 = v6;
      do
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v12 = std::locale::use_facet(&v23, v10);
        v13 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v12->__vftable[3].__on_zero_shared)(v12, v8);
        std::locale::~locale(&v23);
        *(_DWORD *)v11 = v13;
        v11 += 4;
        v14 = *v9++;
        v8 = v14;
      }
      while (v14);
    }
    v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v16 = *(_QWORD *)(v15 + 40);
    v17 = *(_DWORD *)(v15 + 8);
    v18 = *(_DWORD *)(v15 + 144);
    if (v18 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v19 = std::locale::use_facet(&v23, MEMORY[0x24BEDB360]);
      v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[3].__on_zero_shared)(v19, 32);
      std::locale::~locale(&v23);
      *(_DWORD *)(v15 + 144) = v18;
    }
    if ((v17 & 0xB0) == 0x20)
      v20 = (uint64_t)&v6[4 * v5];
    else
      v20 = (uint64_t)v6;
    if (!std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v6, v20, (uint64_t)&v6[4 * v5], v15, v18))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    if (v7)
      free(v7);
  }
  MEMORY[0x242690638](v22);
  return a1;
}

void sub_2411F4A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  _QWORD *v11;
  void *v12;

  if (a2)
  {
    std::locale::~locale(&a11);
    if (v12)
      free(v12);
    MEMORY[0x242690638](&a9);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x2411F4A48);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::vector<std::wstring> *this, std::wstring *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::wstring *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_2411F4C80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2411F4C88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, __int128 *a2, __int128 *a3, std::wstring *this)
{
  std::wstring *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::wstring *v11;
  std::wstring *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2411F4D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

std::wstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(std::wstring *__str, std::wstring *a2, std::wstring *this)
{
  const std::wstring *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::wstring::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::wstring *)v4;
}

std::wstring *std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::wstring *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::wstring *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::wstring *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::wstring::size_type)result;
  }
  return result;
}

void sub_2411F4E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 40);
    std::vector<blahtex::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
    v3 = std::__hash_table<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::MacroProcessor::Macro>>>::~__hash_table(a2);
    MEMORY[0x242690740](v3, 0x10A0C40106B2905);
  }
}

void std::wstring::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2511295C0, MEMORY[0x24BEDAB00]);
}

void sub_2411F4F04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::unordered_set<std::wstring>::unordered_set<std::wstring_view const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__emplace_unique_impl<std::wstring_view const&>((_QWORD *)a1, v5);
      v5 += 16;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2411F4F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__emplace_unique_impl<std::wstring_view const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__construct_node<std::wstring_view const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_2411F5014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__construct_node<std::wstring_view const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x28uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::allocator<std::__hash_node<std::wstring,void *>>::construct[abi:ne180100]<std::wstring,std::wstring_view const&>(v6, (_BYTE *)v7 + 16, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2411F50C4(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = a2;
  v4 = (uint64_t)(a2 + 2);
  v5 = std::__string_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  v2[1] = v5;
  v6 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void std::allocator<std::__hash_node<std::wstring,void *>>::construct[abi:ne180100]<std::wstring,std::wstring_view const&>(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *(const void **)a3;
  if (v4 >= 5)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v6 = v4 | 1;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v6 + 1);
    v3[1] = v4;
    v3[2] = v8 | 0x8000000000000000;
    *v3 = v7;
    v3 = v7;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, 4 * v4);
LABEL_9:
  *((_DWORD *)v3 + v4) = 0;
}

_QWORD *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == a2)
          {
            if (std::equal_to<std::wstring>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v11 + 2), a3))
              return v11;
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= v4)
                v12 %= v4;
            }
            else
            {
              v12 &= v4 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v6 == v13)
      {
        if (std::equal_to<std::wstring>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::vector<blahtex::Token>::__assign_with_size[abi:ne180100]<blahtex::Token*,blahtex::Token*>(uint64_t a1, blahtex::Token *a2, blahtex::Token *a3, unint64_t a4)
{
  blahtex::Token *v6;
  uint64_t v8;
  std::wstring *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  blahtex::Token *v13;
  std::wstring *v14;
  unint64_t v15;
  blahtex::Token *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2;
  v8 = a1 + 16;
  v9 = *(std::wstring **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<blahtex::Token>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<blahtex::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(v8, v6, a3, *(blahtex::Token **)(a1 + 8));
LABEL_15:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  v14 = *(std::wstring **)(a1 + 8);
  v15 = ((char *)v14 - (char *)v9) >> 5;
  if (v15 < a4)
  {
    v16 = (blahtex::Token *)((char *)a2 + 32 * v15);
    if (v14 != v9)
    {
      v17 = 32 * v15;
      do
      {
        blahtex::Token::operator=(v9, (std::wstring *)v6);
        v6 = (blahtex::Token *)((char *)v6 + 32);
        v9 = (std::wstring *)((char *)v9 + 32);
        v17 -= 32;
      }
      while (v17);
      v9 = *(std::wstring **)(a1 + 8);
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(v8, v16, a3, (blahtex::Token *)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = *(_QWORD *)a1;
  }
  else
  {
    v18 = *(_QWORD *)a1;
    do
    {
      blahtex::Token::operator=(v9, (std::wstring *)v6);
      v6 = (blahtex::Token *)((char *)v6 + 32);
      v9 = (std::wstring *)((char *)v9 + 32);
      v18 += 32;
    }
    while (v6 != a3);
    v14 = *(std::wstring **)(a1 + 8);
  }
  while (v14 != (std::wstring *)v18)
  {
    if (SHIBYTE(v14[-1].__r_.__value_.__r.__words[1]) < 0)
      operator delete((void *)v14[-2].__r_.__value_.__r.__words[2]);
    v14 = (std::wstring *)((char *)v14 - 32);
  }
  *(_QWORD *)(a1 + 8) = v18;
}

void sub_2411F5734(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<blahtex::Token>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<blahtex::Token>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<blahtex::Token>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

blahtex::Token *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<blahtex::Token>,blahtex::Token*,blahtex::Token*,blahtex::Token*>(uint64_t a1, blahtex::Token *a2, blahtex::Token *a3, blahtex::Token *this)
{
  blahtex::Token *v4;
  const blahtex::Token *v6;
  _QWORD v8[3];
  char v9;
  blahtex::Token *v10;
  blahtex::Token *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      blahtex::Token::Token(v4, v6);
      v6 = (const blahtex::Token *)((char *)v6 + 32);
      v4 = (blahtex::Token *)((char *)v11 + 32);
      v11 = (blahtex::Token *)((char *)v11 + 32);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2411F5844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<blahtex::Token>,blahtex::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char **blahtex::MathmlFontString(unsigned int a1)
{
  return &(&blahtex::gMathmlFontStrings)[2 * a1];
}

void blahtex::MathmlNode::~MathmlNode(blahtex::MathmlNode *this)
{
  _QWORD *v2;
  uint64_t i;
  blahtex::MathmlNode *v4;

  v2 = (_QWORD *)((char *)this + 64);
  for (i = *((_QWORD *)this + 9); (_QWORD *)i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(blahtex::MathmlNode **)(i + 16);
    if (v4)
    {
      blahtex::MathmlNode::~MathmlNode(v4);
      MEMORY[0x242690740]();
    }
  }
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v2);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

uint64_t blahtex::MathmlNode::AddFontAttributes(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t **v6;
  const char *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t **v13;
  unsigned int v14;
  const char *v15;
  uint64_t **v16;
  uint64_t **v17;
  std::logic_error *exception;
  int v19;
  int *v20;

  v4 = result;
  if (*(_BYTE *)(a3 + 5))
  {
    v5 = *(_DWORD *)result;
    if (a2 - 4 > 4)
    {
      if (v5)
      {
        v9 = 0;
      }
      else
      {
        if (*(char *)(result + 55) < 0)
          v11 = *(_QWORD *)(result + 40);
        else
          v11 = *(unsigned __int8 *)(result + 55);
        v9 = v11 == 1;
      }
      v14 = (a2 < 0xD) & (0x180Cu >> a2);
      if (v9 != v14)
      {
        if (v14)
          v15 = "i";
        else
          v15 = "n";
        v19 = 17;
        v20 = &v19;
        v16 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(result + 8), &v19, (uint64_t)&std::piecewise_construct, &v20);
        result = MEMORY[0x242690560](v16 + 5, v15);
      }
      if (a2 <= 0xC && ((1 << a2) & 0x140A) != 0)
      {
        v19 = 18;
        v20 = &v19;
        v17 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v4 + 8), &v19, (uint64_t)&std::piecewise_construct, &v20);
        result = MEMORY[0x242690560](v17 + 5, "b");
      }
      if (a2 - 9 > 3)
      {
        if (a2 != 13)
          return result;
        v19 = 16;
        v20 = &v19;
        v6 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v4 + 8), &v19, (uint64_t)&std::piecewise_construct, &v20)+ 5;
        v7 = "m";
      }
      else
      {
        v19 = 16;
        v20 = &v19;
        v6 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(v4 + 8), &v19, (uint64_t)&std::piecewise_construct, &v20)+ 5;
        v7 = "s";
      }
    }
    else
    {
      if (v5 != 2 || a2 != 8 && a2 != 5)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unexpected font/symbol combination in MathmlNode::AddFontAttributes");
        __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
      }
      v19 = 18;
      v20 = &v19;
      v6 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(result + 8), &v19, (uint64_t)&std::piecewise_construct, &v20)+ 5;
      v7 = "b";
    }
    return MEMORY[0x242690560](v6, v7);
  }
  else
  {
    if (*(_DWORD *)result)
    {
      v8 = 0;
    }
    else
    {
      if (*(char *)(result + 55) < 0)
        v10 = *(_QWORD *)(result + 40);
      else
        v10 = *(unsigned __int8 *)(result + 55);
      v8 = 2 * (v10 == 1);
    }
    if (v8 != a2)
    {
      v12 = &(&blahtex::gMathmlFontStrings)[2 * a2];
      v19 = 2;
      v20 = &v19;
      v13 = std::__tree<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::__map_value_compare<blahtex::MathmlNode::Attribute,std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>,std::less<blahtex::MathmlNode::Attribute>,true>,std::allocator<std::__value_type<blahtex::MathmlNode::Attribute,std::wstring>>>::__emplace_unique_key_args<blahtex::MathmlNode::Attribute,std::piecewise_construct_t const&,std::tuple<blahtex::MathmlNode::Attribute&&>,std::tuple<>>((uint64_t **)(result + 8), &v19, (uint64_t)&std::piecewise_construct, &v20);
      return MEMORY[0x24269056C](v13 + 5, *v12, v12[1]);
    }
  }
  return result;
}

void sub_2411F5BB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *blahtex::MathmlNode::PrintType(unsigned int *a1, _QWORD *a2)
{
  uint64_t v2;
  std::logic_error *exception;

  v2 = *a1;
  if (v2 >= 0x16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Illegal node type in MathmlNode::PrintType");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)*(&blahtex::gTypeArray + 2 * v2), (uint64_t)*(&blahtex::gTypeArray + 2 * v2 + 1));
}

void sub_2411F5C34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *blahtex::MathmlNode::PrintAttributes(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  std::logic_error *exception;

  v2 = (_QWORD *)result[1];
  v3 = result + 2;
  if (v2 != result + 2)
  {
    do
    {
      if (*((_DWORD *)v2 + 8) >= 0x16u)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Illegal attribute in MathmlNode::PrintAttributes");
        __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
      }
      v5 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 1);
      v6 = (uint64_t *)(&blahtex::gAttributeArray + 2 * *((unsigned int *)v2 + 8));
      v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v5, *v6, v6[1]);
      v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)"=", 2);
      v9 = *((char *)v2 + 63);
      if (v9 >= 0)
        v10 = (uint64_t)(v2 + 5);
      else
        v10 = v2[5];
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v2 + 63);
      else
        v11 = v2[6];
      v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
      result = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)"\"", 1);
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
  return result;
}

void sub_2411F5D7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *blahtex::MathmlNode::Print(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::wstringbuf::string_type *p_p;
  std::wstring::size_type size;
  const std::locale::facet *v19;
  uint64_t i;
  const char *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *result;
  const std::locale::facet *v25;
  std::wstringbuf::string_type __p;

  v5 = a5;
  if (a5 > 0)
    v10 = a4;
  else
    v10 = 0;
  if (v10 == 1)
  {
    v11 = a5;
    do
    {
      std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 2);
      --v11;
    }
    while (v11);
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)"<", 1);
  blahtex::MathmlNode::PrintType((unsigned int *)a1, a2);
  blahtex::MathmlNode::PrintAttributes((_QWORD *)a1, a2);
  if (*(_BYTE *)(a3 + 6) && *(_QWORD *)(a1 + 56))
  {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 7);
    v12 = (_QWORD *)std::wostream::operator<<();
    std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, ",");
    v13 = (_QWORD *)std::wostream::operator<<();
    std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, "'");
  }
  v14 = *(unsigned __int8 *)(a1 + 55);
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(_QWORD *)(a1 + 40))
      goto LABEL_15;
  }
  else if (*(_BYTE *)(a1 + 55))
  {
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    v21 = "/";
    v22 = a2;
    v23 = 2;
    goto LABEL_33;
  }
LABEL_15:
  if ((v14 & 0x80) != 0)
    v14 = *(_QWORD *)(a1 + 40);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)">", 1);
  if (v14)
  {
    v16 = v15;
    blahtex::XmlEncode((uint64_t *)(a1 + 32), a3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((_DWORD)a4)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v19 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB360]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[3].__on_zero_shared)(v19, 10);
      std::locale::~locale((std::locale *)&__p);
      std::wostream::put();
      std::wostream::flush();
    }
    for (i = *(_QWORD *)(a1 + 72); i != a1 + 64; i = *(_QWORD *)(i + 8))
      blahtex::MathmlNode::Print(*(_QWORD *)(i + 16), a2, a3, a4, (v5 + 1));
    if (v10)
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)" ", 2);
        --v5;
      }
      while (v5);
    }
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)"<", 2);
  blahtex::MathmlNode::PrintType((unsigned int *)a1, a2);
  v21 = ">";
  v22 = a2;
  v23 = 1;
LABEL_33:
  result = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v22, (uint64_t)v21, v23);
  if ((_DWORD)a4)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v25 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[3].__on_zero_shared)(v25, 10);
    std::locale::~locale((std::locale *)&__p);
    std::wostream::put();
    return (_QWORD *)std::wostream::flush();
  }
  return result;
}

void sub_2411F6080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void *blahtex::MathTokenTable(blahtex *this)
{
  unsigned __int8 v1;

  {
    std::unordered_map<std::wstring,blahtex::Parser::TokenCode>::unordered_map<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const*>((uint64_t)&blahtex::MathTokenTable(void)::gMathTokenTable, (uint64_t)&blahtex::gMathTokenArray, (uint64_t)(&blahtex::gMathTokenArray + 2127));
  }
  return &blahtex::MathTokenTable(void)::gMathTokenTable;
}

void sub_2411F611C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *blahtex::TextTokenTable(blahtex *this)
{
  unsigned __int8 v1;

  {
    std::unordered_map<std::wstring,blahtex::Parser::TokenCode>::unordered_map<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const*>((uint64_t)&blahtex::TextTokenTable(void)::gTextTokenTable, (uint64_t)&blahtex::gTextTokenArray, (uint64_t)&blahtex::gDelimiterArray);
  }
  return &blahtex::TextTokenTable(void)::gTextTokenTable;
}

void sub_2411F619C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::Parser::GetMathTokenCode(blahtex::Parser *this, const blahtex::Token *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _BOOL4 v8;
  std::wstring *exception;
  std::wstring *v10;
  _QWORD *v11;
  std::wstring *v12;
  std::wstring *v13;
  _BOOL4 v14;
  std::wstring *v15;
  std::logic_error *v16;
  _BYTE v17[24];
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *__p[2];
  char v23;
  const void *v24[2];
  char v25;

  blahtex::MathTokenTable(this);
  blahtex::translateToken(a2, (blahtex::Token *)v24);
  v3 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::MathTokenTable(void)::gMathTokenTable, (uint64_t)v24);
  if (v3)
  {
    v4 = *((unsigned int *)v3 + 10);
    if ((_DWORD)v4 == 3)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121C7E8);
      if (blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)__p))
      {
        v8 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, (__int32 *)&unk_24121C7F0);
        if (blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)v20))
        {
          v8 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, (__int32 *)&unk_24121C7F8);
          v8 = blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)v18);
          if (v19 < 0)
            operator delete(v18[0]);
        }
        if (v21 < 0)
          operator delete(v20[0]);
      }
      if (v23 < 0)
        operator delete(__p[0]);
      if (v8)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121C800);
        std::operator+<wchar_t>((const __int32 *)&unk_24121C884, v24, v20);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
        blahtex::Exception::Exception(exception, (__int128 *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121C890);
      if (blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)__p))
      {
        v14 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, (__int32 *)&unk_24121C898);
        v14 = blahtex::Token::operator==((const __int32 *)v24, (const __int32 *)v20);
        if (v21 < 0)
          operator delete(v20[0]);
      }
      if (v23 < 0)
        operator delete(__p[0]);
      if (v14)
      {
        v15 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121C8A0);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
        blahtex::Exception::Exception(v15, (__int128 *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
      }
      v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "Unexpected illegal character in Parser::GetMathTokenCode");
      __cxa_throw(v16, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
    }
    if (v25 < 0)
      goto LABEL_24;
    return v4;
  }
  if ((v25 & 0x80000000) == 0)
  {
    v5 = v24[0];
    if (LODWORD(v24[0]) != 92)
    {
      if (SLODWORD(v24[0]) < 128)
      {
        if (SLODWORD(v24[0]) > 96)
        {
          if (LODWORD(v24[0]) >= 0x7B)
            goto LABEL_32;
          return 26;
        }
        if (SLODWORD(v24[0]) > 64)
        {
          if (LODWORD(v24[0]) >= 0x5B)
            goto LABEL_32;
          return 26;
        }
        if (SLODWORD(v24[0]) < 48)
          goto LABEL_32;
        goto LABEL_22;
      }
LABEL_35:
      v13 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121C954);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121C88C);
      blahtex::Exception::Exception(v13, (__int128 *)__p, (uint64_t)v20, (uint64_t)v18, (uint64_t)v17);
    }
LABEL_33:
    blahtex::TextTokenTable(0);
    v11 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::TextTokenTable(void)::gTextTokenTable, (uint64_t)v24);
    v12 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    if (!v11)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121C904);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
      blahtex::Exception::Exception(v12, (__int128 *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121C8A0);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
    blahtex::Exception::Exception(v12, (__int128 *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
  }
  v6 = *(_DWORD *)v24[0];
  if (*(_DWORD *)v24[0] == 92)
    goto LABEL_33;
  if (v6 > 127)
    goto LABEL_35;
  if ((v6 - 97) < 0x1A || v6 > 64 && *(int *)v24[0] < 91)
    goto LABEL_23;
  v5 = *(_DWORD *)v24[0];
  if (*(int *)v24[0] <= 47)
  {
LABEL_32:
    v10 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121C904);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
    blahtex::Exception::Exception(v10, (__int128 *)__p, (uint64_t)a2, (uint64_t)v20, (uint64_t)v18);
  }
LABEL_22:
  if (v5 >= 0x3A)
    goto LABEL_32;
LABEL_23:
  v4 = 26;
  if (v25 < 0)
LABEL_24:
    operator delete((void *)v24[0]);
  return v4;
}

void sub_2411F670C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v33 & 1) == 0)
    {
LABEL_10:
      if (*(char *)(v34 - 41) < 0)
        operator delete(*(void **)(v34 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v32);
  goto LABEL_10;
}

uint64_t std::operator+<wchar_t>@<X0>(const __int32 *a1@<X0>, const void **a2@<X1>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t result;
  const void *v10;

  v6 = wcslen(a1);
  v7 = v6;
  if (*((char *)a2 + 23) >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (unint64_t)a2[1];
  result = std::wstring::basic_string[abi:ne180100]((uint64_t)a3, v8 + v6);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v7)
    result = (uint64_t)memmove(a3, a1, 4 * v7);
  if (v8)
  {
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *a2;
    result = (uint64_t)memmove((char *)a3 + 4 * v7, v10, 4 * v8);
  }
  *((_DWORD *)a3 + v7 + v8) = 0;
  return result;
}

void blahtex::Token::~Token(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t blahtex::Parser::GetTextTokenCode(blahtex::Parser *this, int **a2)
{
  _QWORD *v3;
  uint64_t result;
  _BOOL4 v5;
  std::wstring *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int *v12;
  _QWORD *v13;
  std::wstring *v14;
  std::wstring *exception;
  _BOOL4 v16;
  std::wstring *v17;
  _BOOL4 v18;
  std::wstring *v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *__p[2];
  char v27;
  __int128 v28;
  char v29;

  blahtex::TextTokenTable(this);
  v3 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::TextTokenTable(void)::gTextTokenTable, (uint64_t)a2);
  if (!v3)
  {
    v7 = *((char *)a2 + 23);
    if (v7 < 0)
    {
      v9 = **a2;
      if (v9 != 92)
      {
        if ((v9 - 97) < 0x1A)
          return 26;
        v10 = *a2;
        v11 = **a2;
        if (v11 >= 65 && v11 < 0x5B)
          return 26;
        if (v11 <= 47)
          goto LABEL_26;
        v8 = *v10;
        goto LABEL_24;
      }
    }
    else
    {
      v8 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 != 92)
      {
        if (v8 >= 97)
        {
          if (v8 < 0x7B)
            return 26;
          goto LABEL_25;
        }
        if (v8 > 64)
        {
          if (v8 < 0x5B)
            return 26;
LABEL_25:
          v10 = *a2;
LABEL_26:
          if (v7 >= 0)
            v12 = (int *)a2;
          else
            v12 = v10;
          if (*v12 > 127)
            return 26;
LABEL_34:
          exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121C904);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_24121C88C);
          blahtex::Exception::Exception(exception, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
        }
        if (v8 <= 47)
          goto LABEL_34;
LABEL_24:
        if (v8 < 58)
          return 26;
        goto LABEL_25;
      }
    }
    blahtex::MathTokenTable(0);
    v13 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::MathTokenTable(void)::gMathTokenTable, (uint64_t)a2);
    v14 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    if (!v13)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121C904);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_24121C88C);
      blahtex::Exception::Exception(v14, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121CAC8);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_24121C88C);
    blahtex::Exception::Exception(v14, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
  }
  result = *((unsigned int *)v3 + 10);
  if ((_DWORD)result == 3)
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, (__int32 *)&unk_24121C9A0);
    if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v28))
    {
      v5 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121C9A8);
      if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)__p))
      {
        v5 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, (__int32 *)&unk_24121C7E8);
        if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)v24))
        {
          v5 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, (__int32 *)&unk_24121C7F0);
          if (blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)v22))
          {
            v5 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, (__int32 *)&unk_24121C7F8);
            v5 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)v20);
            if (v21 < 0)
              operator delete(v20[0]);
          }
          if (v23 < 0)
            operator delete(v22[0]);
        }
        if (v25 < 0)
          operator delete(v24[0]);
      }
      if (v27 < 0)
        operator delete(__p[0]);
    }
    if (v29 < 0)
      operator delete((void *)v28);
    if (v5)
    {
      v6 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121C9B0);
      std::operator+<wchar_t>((const __int32 *)&unk_24121C884, (const void **)a2, __p);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_24121C88C);
      blahtex::Exception::Exception(v6, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121CA34);
    v16 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v28);
    if (v29 < 0)
      operator delete((void *)v28);
    if (v16)
    {
      v17 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121C9B0);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121CA34);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, dword_24121CA40);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, &dword_24121C88C);
      blahtex::Exception::Exception(v17, &v28, (uint64_t)__p, (uint64_t)v24, (uint64_t)v22);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, (__int32 *)&unk_24121CA7C);
    v18 = blahtex::Token::operator==((const __int32 *)a2, (const __int32 *)&v28);
    if (v29 < 0)
      operator delete((void *)v28);
    v19 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    if (v18)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121C9B0);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121CA7C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, dword_24121CA84);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v22, &dword_24121C88C);
      blahtex::Exception::Exception(v19, &v28, (uint64_t)__p, (uint64_t)v24, (uint64_t)v22);
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v28, dword_24121CAC8);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v24, &dword_24121C88C);
    blahtex::Exception::Exception(v19, &v28, (uint64_t)a2, (uint64_t)__p, (uint64_t)v24);
  }
  return result;
}

void sub_2411F6F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

void blahtex::Parser::DoParse(blahtex::Parser *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  blahtex::Parser *v8;
  int MathTokenCode;
  std::wstring *v10;
  std::wstring *v11;
  std::wstring *v12;
  std::wstring *v13;
  std::wstring *exception;
  std::logic_error *v15;
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  __int128 v19;
  char v20;

  v6 = operator new();
  blahtex::MacroProcessor::MacroProcessor(v6, a2);
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    std::default_delete<blahtex::MacroProcessor>::operator()[abi:ne180100]((uint64_t)a1, v7);
  blahtex::Parser::ParseMathList(a3, a1);
  blahtex::MacroProcessor::Peek(*(blahtex::MacroProcessor **)a1, (uint64_t)&v19);
  MathTokenCode = blahtex::Parser::GetMathTokenCode(v8, (const blahtex::Token *)&v19);
  if (v20 < 0)
    operator delete((void *)v19);
  if (MathTokenCode)
  {
    if (MathTokenCode <= 8)
    {
      if (MathTokenCode == 5)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_24121CB2C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v16, &dword_24121C88C);
        blahtex::Exception::Exception(exception, &v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16);
      }
      if (MathTokenCode == 8)
      {
        v11 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_24121CBB8);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v16, &dword_24121C88C);
        blahtex::Exception::Exception(v11, &v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16);
      }
    }
    else
    {
      switch(MathTokenCode)
      {
        case 9:
          v12 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_24121CC04);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v16, &dword_24121C88C);
          blahtex::Exception::Exception(v12, &v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16);
        case 18:
          v13 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_24121CB7C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v16, &dword_24121C88C);
          blahtex::Exception::Exception(v13, &v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16);
        case 22:
          v10 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v19, dword_24121CC4C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v16, &dword_24121C88C);
          blahtex::Exception::Exception(v10, &v19, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16);
      }
    }
    v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Unexpected token code in Parser::DoParse");
    __cxa_throw(v15, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
}

void sub_2411F748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t *v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v32;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((v29 & 1) == 0)
    {
LABEL_12:
      v32 = *v27;
      *v27 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t *blahtex::Parser::ParseMathList@<X0>(uint64_t *__return_ptr a1@<X8>, blahtex::Parser *this@<X0>)
{
  blahtex::Parser *v2;
  uint64_t v3;
  _QWORD *v4;
  blahtex::Parser *v5;
  _QWORD *v6;
  blahtex *v7;
  blahtex::MacroProcessor *v8;
  blahtex::Parser *v9;
  int MathTokenCode;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  blahtex::MacroProcessor *v16;
  blahtex::MacroProcessor *v17;
  void **v18;
  blahtex::ParseTree::MathSymbol *v19;
  blahtex::MacroProcessor *v20;
  blahtex::MacroProcessor *v21;
  void **v22;
  uint64_t v23;
  blahtex::MacroProcessor *v24;
  void *exception;
  blahtex::MacroProcessor *v26;
  uint64_t v27;
  blahtex::MacroProcessor *v28;
  blahtex::Parser *v29;
  void *v30;
  uint64_t v31;
  BOOL v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void **v38;
  uint64_t v39;
  blahtex::MacroProcessor *v40;
  uint64_t v41;
  blahtex::MacroProcessor *v42;
  blahtex::MacroProcessor *v43;
  BOOL v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  blahtex::MacroProcessor *v50;
  BOOL v51;
  void *v52;
  void **v53;
  uint64_t v54;
  blahtex::MacroProcessor *v55;
  blahtex::MacroProcessor *v56;
  blahtex::MacroProcessor *v57;
  BOOL v58;
  void *v59;
  void **v60;
  _QWORD *v61;
  blahtex::MacroProcessor *v62;
  blahtex::MacroProcessor *v63;
  blahtex::MacroProcessor *v64;
  BOOL v65;
  void *v66;
  void **v67;
  _QWORD *v68;
  blahtex::MacroProcessor *v69;
  blahtex::MacroProcessor *v70;
  blahtex::MacroProcessor *v71;
  BOOL v72;
  void *v73;
  void **v74;
  _QWORD *v75;
  blahtex::MacroProcessor *v76;
  blahtex::MacroProcessor *v77;
  blahtex::MacroProcessor *v78;
  const blahtex::Token *v79;
  void *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  void *v84;
  blahtex::MacroProcessor *v85;
  BOOL v86;
  void *v87;
  blahtex::MacroProcessor *v88;
  blahtex::MacroProcessor *v89;
  blahtex::MacroProcessor *v90;
  const blahtex::Token *v91;
  void *v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  void *v96;
  void **v97;
  uint64_t v98;
  blahtex::MacroProcessor *v99;
  blahtex::MacroProcessor *v100;
  blahtex::MacroProcessor *v101;
  const blahtex::Token *v102;
  void *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  void **v108;
  blahtex::ParseTree::MathMiddle *v109;
  blahtex::MacroProcessor *v110;
  blahtex::MacroProcessor *v111;
  blahtex::MacroProcessor *v112;
  const blahtex::Token *v113;
  void *v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  void *v118;
  void **v119;
  blahtex::ParseTree::MathBig *v120;
  blahtex::MacroProcessor *v121;
  blahtex::Parser *v122;
  void *v123;
  blahtex::MacroProcessor *v124;
  blahtex::Parser *v125;
  void *v126;
  _QWORD *v127;
  blahtex::MacroProcessor *v128;
  BOOL v129;
  blahtex::MacroProcessor *v130;
  void **v131;
  blahtex::ParseTree::MathSymbol *v132;
  blahtex::MacroProcessor *v133;
  blahtex::Parser *v134;
  void *v135;
  blahtex::MacroProcessor *v136;
  BOOL v137;
  blahtex::MacroProcessor *v138;
  void **v139;
  uint64_t *v140;
  _QWORD *v141;
  blahtex::MacroProcessor *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  const void *v146;
  uint64_t *v147;
  uint64_t *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  blahtex::MacroProcessor *v154;
  BOOL v155;
  void **v156;
  blahtex::ParseTree::MathColour *v157;
  void **v158;
  blahtex::ParseTree::MathStateChange *v159;
  blahtex::MacroProcessor *v160;
  void **v161;
  _QWORD *v162;
  blahtex::MacroProcessor *v163;
  void **v164;
  uint64_t v165;
  void *v166;
  blahtex::MacroProcessor *v167;
  blahtex::MacroProcessor *v168;
  _QWORD *v169;
  std::logic_error *v170;
  uint64_t *result;
  void *v172[4];
  std::wstring v173;
  char v174;
  std::wstring v175;
  std::wstring v176;
  _BYTE v177[32];
  std::wstring v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185[4];
  void *v186[4];
  char v187;
  uint64_t v188;
  _QWORD *v189;
  void *v190[4];
  void *v191[4];
  blahtex::ParseTree::MathStateChange *v192;
  char v193;
  std::wstring v194;
  void *v195[4];
  blahtex::ParseTree::MathColour *v196;
  std::wstring v197;
  void *v198[4];
  char v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t *v203;
  char v204;
  std::wstring v205;
  std::wstring v206;
  std::wstring v207;
  void *v208[4];
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::wstring v213;
  void *v214[4];
  char v215;
  std::wstring v216;
  std::wstring v217;
  std::wstring v218;
  std::wstring v219;
  _QWORD *v220;
  char v221;
  std::wstring v222;
  void *v223[4];
  blahtex::ParseTree::MathSymbol *v224;
  void *v225[4];
  std::wstring v226;
  void *v227[4];
  uint64_t v228;
  uint64_t v229;
  char v230;
  std::wstring v231;
  std::wstring v232;
  std::wstring v233;
  std::wstring v234;
  _QWORD *v235;
  uint64_t v236;
  char v237;
  std::wstring v238;
  std::wstring v239;
  std::wstring v240;
  std::wstring v241;
  _QWORD *v242;
  blahtex::ParseTree::MathBig *v243;
  char v244;
  std::wstring v245;
  std::wstring v246;
  std::wstring v247;
  _QWORD v248[2];
  char v249;
  std::wstring v250;
  std::wstring v251;
  std::wstring v252;
  void *v253[4];
  void *v254[4];
  void *v255[4];
  void *v256[4];
  blahtex::ParseTree::MathMiddle *v257;
  char v258;
  std::wstring v259;
  std::wstring v260;
  std::wstring v261;
  _QWORD v262[2];
  char v263;
  std::wstring v264;
  std::wstring v265;
  std::wstring v266;
  void *v267[4];
  void *v268[4];
  void *v269[4];
  void *v270[4];
  char v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  std::wstring v275;
  std::wstring v276;
  std::wstring v277;
  std::wstring v278;
  _QWORD v279[2];
  char v280;
  std::wstring v281;
  std::wstring v282;
  std::wstring v283;
  std::wstring v284;
  void *v285[4];
  void *v286[4];
  std::wstring v287;
  char v288;
  std::wstring v289;
  std::wstring v290;
  std::wstring v291;
  std::wstring v292;
  std::wstring v293;
  void *v294[4];
  uint64_t v295;
  char v296;
  std::wstring v297;
  std::wstring v298;
  std::wstring v299;
  std::wstring v300;
  _QWORD v301[2];
  char v302;
  std::wstring v303;
  std::wstring v304;
  std::wstring v305;
  std::wstring v306;
  void *v307[4];
  void *v308[4];
  std::wstring v309;
  char v310;
  uint64_t v311;
  _QWORD *v312;
  char v313;
  std::wstring v314;
  std::wstring v315;
  std::wstring v316;
  std::wstring v317;
  void *v318[4];
  void *v319[4];
  char v320;
  uint64_t v321;
  _QWORD *v322;
  char v323;
  std::wstring v324;
  std::wstring v325;
  std::wstring v326;
  std::wstring v327;
  void *v328[4];
  void *v329[4];
  char v330;
  uint64_t v331;
  _QWORD *v332;
  char v333;
  std::wstring v334;
  std::wstring v335;
  std::wstring v336;
  std::wstring v337;
  void *v338[4];
  void *v339[4];
  char v340;
  uint64_t v341;
  std::wstring v342;
  void *v343[4];
  uint64_t v344;
  char v345;
  std::wstring v346;
  std::wstring v347;
  std::wstring v348;
  std::wstring v349;
  std::wstring v350;
  void *v351[5];
  char v352;
  std::wstring v353;
  std::wstring v354;
  std::wstring v355;
  std::wstring v356;
  uint64_t v357;
  uint64_t j;
  uint64_t v359;
  char v360;
  std::wstring v361;
  std::wstring v362;
  std::wstring v363;
  std::wstring v364;
  void *v365[4];
  std::wstring __str;
  void *v367[4];
  std::wstring v368;
  char v369;
  uint64_t v370;
  std::wstring v371;
  void *v372[4];
  _QWORD v373[2];
  char v374;
  std::wstring v375;
  std::wstring v376;
  std::wstring v377;
  std::wstring v378;
  uint64_t v379;
  uint64_t i;
  char v381;
  _BYTE v382[24];
  _BYTE v383[24];
  std::wstring v384;
  char v385;
  _BYTE v386[24];
  _BYTE v387[24];
  _BYTE v388[24];
  std::wstring v389;
  uint64_t v390;
  std::wstring v391;
  std::wstring v392;
  char v393;
  _BYTE v394[24];
  _BYTE v395[24];
  _BYTE v396[24];
  _BYTE v397[24];
  std::wstring v398;
  void *v399[4];
  char v400;
  uint64_t v401;
  uint64_t v402;
  char v403;
  void *v404[4];
  void *v405[4];
  blahtex::ParseTree::MathSymbol *v406;
  char v407;
  int v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  void *v412[4];
  _QWORD *v413;
  std::wstring v414;
  uint64_t v415;
  uint64_t v416[3];

  v2 = (blahtex::Parser *)MEMORY[0x24BDAC7A8](a1, this);
  v4 = (_QWORD *)v3;
  v416[2] = v3;
  v416[1] = (uint64_t)v2;
  v5 = v2;
  v6 = (_QWORD *)operator new();
  blahtex::ParseTree::MathList::MathList(v6);
  std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(v416, (uint64_t)v6);
  std::unique_ptr<blahtex::ParseTree::MathList>::unique_ptr[abi:ne180100]<true,void>(&v415);
  v7 = (blahtex *)blahtex::Token::Token((blahtex::Token *)&v414);
  v413 = blahtex::DelimiterTable(v7);
  while (1)
  {
    v8 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
    blahtex::MacroProcessor::Peek(v8, (uint64_t)v412);
    MathTokenCode = blahtex::Parser::GetMathTokenCode(v9, (const blahtex::Token *)v412);
    blahtex::Token::~Token(v412);
    switch(MathTokenCode)
    {
      case 0:
      case 5:
      case 8:
      case 9:
      case 18:
      case 22:
        if (std::wstring::empty[abi:ne180100]((uint64_t)&v414))
        {
          v12 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
          if (std::vector<blahtex::ParseTree::MathNode *>::size[abi:ne180100]((_QWORD *)(v12 + 8)) == 1)
          {
            v407 = 0;
            v13 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
            v14 = (uint64_t *)std::vector<blahtex::ParseTree::MathNode *>::back[abi:ne180100](v13 + 8);
            std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(v4, *v14);
            v15 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
            std::vector<blahtex::ParseTree::MathNode *>::clear[abi:ne180100]((_QWORD *)(v15 + 8));
            v407 = 1;
          }
          else
          {
            std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(v4, v416);
          }
          v408 = 1;
        }
        else
        {
          v11 = operator new();
          v409 = 1;
          std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v411, &v415);
          std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v410, v416);
          blahtex::ParseTree::MathCommand2Args::MathCommand2Args(v11, (const blahtex::Token *)&v414, &v411, &v410, 1);
          v409 = 0;
          std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(v4, v11);
          std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v410);
          std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v411);
          v408 = 1;
        }
        blahtex::Token::~Token((void **)&v414.__r_.__value_.__l.__data_);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v415);
        return std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](v416);
      case 1:
        v17 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Advance(v17);
        break;
      case 2:
        v16 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::HandleNewcommand(v16);
        break;
      case 4:
        v21 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Advance(v21);
        v22 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v23 = operator new();
        v400 = 1;
        blahtex::Parser::ParseMathList(&v401, v5);
        blahtex::ParseTree::MathGroup::MathGroup((_QWORD *)v23, &v401);
        v400 = 0;
        v402 = v23;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v22, &v402);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v401);
        v24 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v24, (uint64_t)v399);
        std::wstring::basic_string[abi:ne180100]<0>(&v398, &unk_24121CC80);
        LOBYTE(v23) = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v399, (const __int32 *)&v398);
        std::wstring::~wstring(&v398);
        blahtex::Token::~Token(v399);
        if ((v23 & 1) != 0)
        {
          v393 = 1;
          exception = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(v397, dword_24121CC88);
          std::wstring::basic_string[abi:ne180100]<0>(v396, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(v395, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(v394, &dword_24121C88C);
          blahtex::Exception::Exception(exception, v397, v396, v395, v394);
          v393 = 0;
        }
        return result;
      case 6:
        v62 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v62, (uint64_t)v329);
        v63 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v63);
        v64 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Peek(v64, (uint64_t)v328);
        std::wstring::basic_string[abi:ne180100]<0>(&v327, "{");
        v65 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v328, (const __int32 *)&v327);
        std::wstring::~wstring(&v327);
        blahtex::Token::~Token(v328);
        if (v65)
        {
          v323 = 1;
          v66 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v326, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v325, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v324, &dword_24121C88C);
          blahtex::Exception::Exception(v66, &v326, v329, &v325, &v324);
          v323 = 0;
        }
        v67 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v68 = (_QWORD *)operator new();
        v320 = 1;
        blahtex::Parser::ParseMathList(&v321, v5);
        blahtex::ParseTree::MathPhantom::MathPhantom(v68, &v321);
        v320 = 0;
        v322 = v68;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v67, &v322);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v321);
        v408 = 4;
        blahtex::Token::~Token(v329);
        break;
      case 7:
        v69 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v69, (uint64_t)v319);
        v70 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v70);
        v71 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Peek(v71, (uint64_t)v318);
        std::wstring::basic_string[abi:ne180100]<0>(&v317, "{");
        v72 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v318, (const __int32 *)&v317);
        std::wstring::~wstring(&v317);
        blahtex::Token::~Token(v318);
        if (v72)
        {
          v313 = 1;
          v73 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v316, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v315, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v314, &dword_24121C88C);
          blahtex::Exception::Exception(v73, &v316, v319, &v315, &v314);
          v313 = 0;
        }
        v74 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v75 = (_QWORD *)operator new();
        v310 = 1;
        blahtex::Parser::ParseMathList(&v311, v5);
        blahtex::ParseTree::MathCancel::MathCancel(v75, &v311);
        v310 = 0;
        v312 = v75;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v74, &v312);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v311);
        v408 = 4;
        blahtex::Token::~Token(v319);
        break;
      case 10:
        v121 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Advance(v121);
        v242 = 0;
        v122 = (blahtex::Parser *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
        v242 = blahtex::Parser::PrepareScripts(v122, v122);
        if (std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)(v242 + 2)))
        {
          v237 = 1;
          v123 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v241, "D");
          std::wstring::basic_string[abi:ne180100]<0>(&v240, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v239, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v238, &dword_24121C88C);
          blahtex::Exception::Exception(v123, &v241, &v240, &v239, &v238);
          v237 = 0;
        }
        blahtex::Parser::ParseMathField((blahtex::MacroProcessor **)v5, &v236);
        std::unique_ptr<blahtex::ParseTree::MathNode>::operator=[abi:ne180100](v242 + 2, &v236);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v236);
        v408 = 4;
        break;
      case 11:
        v124 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Advance(v124);
        v235 = 0;
        v125 = (blahtex::Parser *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
        v235 = blahtex::Parser::PrepareScripts(v125, v125);
        if (std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)(v235 + 3)))
        {
          v230 = 1;
          v126 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v234, "D");
          std::wstring::basic_string[abi:ne180100]<0>(&v233, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v232, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v231, &dword_24121C88C);
          blahtex::Exception::Exception(v126, &v234, &v233, &v232, &v231);
          v230 = 0;
        }
        blahtex::Parser::ParseMathField((blahtex::MacroProcessor **)v5, &v229);
        std::unique_ptr<blahtex::ParseTree::MathNode>::operator=[abi:ne180100](v235 + 3, &v229);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v229);
        v408 = 4;
        break;
      case 12:
        v127 = (_QWORD *)operator new();
        blahtex::ParseTree::MathList::MathList(v127);
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(&v228, (uint64_t)v127);
        while (1)
        {
          v128 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
          blahtex::MacroProcessor::Peek(v128, (uint64_t)v227);
          std::wstring::basic_string[abi:ne180100]<0>(&v226, "'");
          v129 = blahtex::Token::operator==((const __int32 *)v227, (const __int32 *)&v226);
          std::wstring::~wstring(&v226);
          blahtex::Token::~Token(v227);
          if (!v129)
            break;
          v130 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
          blahtex::MacroProcessor::Peek(v130, (uint64_t)v225);
          v131 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&v228) + 8);
          v132 = (blahtex::ParseTree::MathSymbol *)operator new();
          v221 = 1;
          std::wstring::basic_string[abi:ne180100]<0>(&v222, "\\");
          blahtex::Token::Token(v223, &v222, v225[3]);
          blahtex::ParseTree::MathSymbol::MathSymbol(v132, (const blahtex::Token *)v223);
          v221 = 0;
          v224 = v132;
          std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v131, &v224);
          blahtex::Token::~Token(v223);
          std::wstring::~wstring(&v222);
          v133 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
          blahtex::MacroProcessor::Advance(v133);
          blahtex::Token::~Token(v225);
        }
        v220 = 0;
        v134 = (blahtex::Parser *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
        v220 = blahtex::Parser::PrepareScripts(v134, v134);
        if (std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)(v220 + 2)))
        {
          v215 = 1;
          v135 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v219, "D");
          std::wstring::basic_string[abi:ne180100]<0>(&v218, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v217, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v216, &dword_24121C88C);
          blahtex::Exception::Exception(v135, &v219, &v218, &v217, &v216);
          v215 = 0;
        }
        v136 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Peek(v136, (uint64_t)v214);
        std::wstring::basic_string[abi:ne180100]<0>(&v213, &unk_24121CA7C);
        v137 = blahtex::Token::operator==((const __int32 *)v214, (const __int32 *)&v213);
        std::wstring::~wstring(&v213);
        blahtex::Token::~Token(v214);
        if (v137)
        {
          v138 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
          blahtex::MacroProcessor::Advance(v138);
          v139 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&v228) + 8);
          blahtex::Parser::ParseMathField((blahtex::MacroProcessor **)v5, &v211);
          v212 = std::unique_ptr<blahtex::ParseTree::MathNode>::release[abi:ne180100](&v211);
          std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v139, &v212);
          std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v211);
        }
        v140 = v220 + 2;
        v141 = (_QWORD *)operator new();
        v209 = 1;
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v210, &v228);
        blahtex::ParseTree::MathGroup::MathGroup(v141, &v210);
        v209 = 0;
        std::unique_ptr<blahtex::ParseTree::MathNode>::reset[abi:ne180100](v140, (uint64_t)v141);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v210);
        v408 = 4;
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v228);
        break;
      case 13:
        v160 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v160, (uint64_t)v190);
        blahtex::translateToken((blahtex *)v190, (blahtex::Token *)v191);
        blahtex::Token::~Token(v190);
        v161 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v162 = (_QWORD *)operator new();
        v187 = 1;
        blahtex::Parser::ParseMathField((blahtex::MacroProcessor **)v5, &v188);
        blahtex::ParseTree::MathCommand1Arg::MathCommand1Arg(v162, (const blahtex::Token *)v191, &v188);
        v187 = 0;
        v189 = v162;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v161, &v189);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v188);
        v408 = 4;
        blahtex::Token::~Token(v191);
        break;
      case 14:
        v163 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v163, (uint64_t)v185);
        blahtex::translateToken((blahtex *)v185, (blahtex::Token *)v186);
        blahtex::Token::~Token(v185);
        blahtex::Parser::ParseMathField((blahtex::MacroProcessor **)v5, &v184);
        blahtex::Parser::ParseMathField((blahtex::MacroProcessor **)v5, &v183);
        v164 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v165 = operator new();
        v179 = 1;
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v181, &v184);
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v180, &v183);
        blahtex::ParseTree::MathCommand2Args::MathCommand2Args(v165, (const blahtex::Token *)v186, &v181, &v180, 0);
        v179 = 0;
        v182 = v165;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v164, &v182);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v180);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v181);
        v408 = 4;
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v183);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v184);
        blahtex::Token::~Token(v186);
        break;
      case 15:
        if (!std::wstring::empty[abi:ne180100]((uint64_t)&v414))
        {
          v174 = 1;
          v166 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v178, "A");
          v167 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
          blahtex::MacroProcessor::Peek(v167, (uint64_t)v177);
          std::wstring::basic_string[abi:ne180100]<0>(&v176, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v175, &dword_24121C88C);
          blahtex::Exception::Exception(v166, &v178, v177, &v176, &v175);
          v174 = 0;
        }
        std::unique_ptr<blahtex::ParseTree::MathNode>::operator=[abi:ne180100](&v415, v416);
        v168 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v168, (uint64_t)v172);
        blahtex::translateToken((blahtex *)v172, (blahtex::Token *)&v173);
        blahtex::Token::operator=(&v414, &v173);
        blahtex::Token::~Token((void **)&v173.__r_.__value_.__l.__data_);
        blahtex::Token::~Token(v172);
        v169 = (_QWORD *)operator new();
        blahtex::ParseTree::MathList::MathList(v169);
        std::unique_ptr<blahtex::ParseTree::MathNode>::reset[abi:ne180100](v416, (uint64_t)v169);
        break;
      case 16:
        v76 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v76, (uint64_t)&v309);
        v77 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v77);
        v78 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v78, (uint64_t)v307);
        blahtex::translateToken((blahtex *)v307, (blahtex::Token *)v308);
        blahtex::Token::~Token(v307);
        blahtex::Token::sourcePrefixedBy((blahtex::Token *)v308, (const blahtex::Token *)&v309, v79);
        if (std::wstring::empty[abi:ne180100]((uint64_t)v308))
        {
          v302 = 1;
          v80 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v306, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v305, "\\");
          std::wstring::basic_string[abi:ne180100]<0>(&v304, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v303, &dword_24121C88C);
          blahtex::Exception::Exception(v80, &v306, &v305, &v304, &v303);
          v302 = 0;
        }
        v81 = v413;
        v82 = std::wstring::operator std::wstring_view[abi:ne180100]((char *)v308);
        v301[1] = v83;
        v301[0] = v82;
        if (!std::unordered_map<std::wstring_view,std::wstring_view>::count[abi:ne180100](v81, (uint64_t)v301))
        {
          v296 = 1;
          v84 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v300, "I");
          std::wstring::basic_string[abi:ne180100]<0>(&v299, "\\");
          std::wstring::basic_string[abi:ne180100]<0>(&v298, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v297, &dword_24121C88C);
          blahtex::Exception::Exception(v84, &v300, &v299, &v298, &v297);
          v296 = 0;
        }
        blahtex::Parser::ParseMathList(&v295, v5);
        v85 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Peek(v85, (uint64_t)v294);
        std::wstring::basic_string[abi:ne180100]<0>(&v293, "\\");
        v86 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v294, (const __int32 *)&v293);
        std::wstring::~wstring(&v293);
        blahtex::Token::~Token(v294);
        if (v86)
        {
          v288 = 1;
          v87 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v292, "U");
          std::wstring::basic_string[abi:ne180100]<0>(&v291, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v290, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v289, &dword_24121C88C);
          blahtex::Exception::Exception(v87, &v292, &v291, &v290, &v289);
          v288 = 0;
        }
        v88 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v88, (uint64_t)&v287);
        blahtex::Token::operator=(&v309, &v287);
        blahtex::Token::~Token((void **)&v287.__r_.__value_.__l.__data_);
        v89 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v89);
        v90 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v90, (uint64_t)v285);
        blahtex::translateToken((blahtex *)v285, (blahtex::Token *)v286);
        blahtex::Token::~Token(v285);
        blahtex::Token::sourcePrefixedBy((blahtex::Token *)v286, (const blahtex::Token *)&v309, v91);
        if (std::wstring::empty[abi:ne180100]((uint64_t)v286))
        {
          v280 = 1;
          v92 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v284, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v283, "\\");
          std::wstring::basic_string[abi:ne180100]<0>(&v282, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v281, &dword_24121C88C);
          blahtex::Exception::Exception(v92, &v284, &v283, &v282, &v281);
          v280 = 0;
        }
        v93 = v413;
        v94 = std::wstring::operator std::wstring_view[abi:ne180100]((char *)v286);
        v279[1] = v95;
        v279[0] = v94;
        if (!std::unordered_map<std::wstring_view,std::wstring_view>::count[abi:ne180100](v93, (uint64_t)v279))
        {
          v274 = 1;
          v96 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v278, "I");
          std::wstring::basic_string[abi:ne180100]<0>(&v277, "\\");
          std::wstring::basic_string[abi:ne180100]<0>(&v276, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v275, &dword_24121C88C);
          blahtex::Exception::Exception(v96, &v278, &v277, &v276, &v275);
          v274 = 0;
        }
        v97 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v98 = operator new();
        v271 = 1;
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v272, &v295);
        blahtex::ParseTree::MathDelimited::MathDelimited(v98, &v272, v308, v286);
        v271 = 0;
        v273 = v98;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v97, &v273);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v272);
        v408 = 4;
        blahtex::Token::~Token(v286);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v295);
        blahtex::Token::~Token(v308);
        blahtex::Token::~Token((void **)&v309.__r_.__value_.__l.__data_);
        break;
      case 17:
        v99 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v99, (uint64_t)v269);
        blahtex::translateToken((blahtex *)v269, (blahtex::Token *)v270);
        blahtex::Token::~Token(v269);
        v100 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v100);
        v101 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v101, (uint64_t)v267);
        blahtex::translateToken((blahtex *)v267, (blahtex::Token *)v268);
        blahtex::Token::~Token(v267);
        blahtex::Token::sourcePrefixedBy((blahtex::Token *)v268, (const blahtex::Token *)v270, v102);
        if (std::wstring::empty[abi:ne180100]((uint64_t)v268))
        {
          v263 = 1;
          v103 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v266, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v265, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v264, &dword_24121C88C);
          blahtex::Exception::Exception(v103, &v266, v270, &v265, &v264);
          v263 = 0;
        }
        v104 = v413;
        v105 = std::wstring::operator std::wstring_view[abi:ne180100]((char *)v268);
        v262[1] = v106;
        v262[0] = v105;
        if (!std::unordered_map<std::wstring_view,std::wstring_view>::count[abi:ne180100](v104, (uint64_t)v262))
        {
          v258 = 1;
          v107 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v261, "I");
          std::wstring::basic_string[abi:ne180100]<0>(&v260, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v259, &dword_24121C88C);
          blahtex::Exception::Exception(v107, &v261, v270, &v260, &v259);
          v258 = 0;
        }
        v108 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v109 = (blahtex::ParseTree::MathMiddle *)operator new();
        blahtex::ParseTree::MathMiddle::MathMiddle(v109, (const blahtex::Token *)v268);
        v257 = v109;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v108, &v257);
        v408 = 4;
        blahtex::Token::~Token(v268);
        blahtex::Token::~Token(v270);
        break;
      case 19:
        v110 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v110, (uint64_t)v255);
        blahtex::translateToken((blahtex *)v255, (blahtex::Token *)v256);
        blahtex::Token::~Token(v255);
        v111 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v111);
        v112 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v112, (uint64_t)v253);
        blahtex::translateToken((blahtex *)v253, (blahtex::Token *)v254);
        blahtex::Token::~Token(v253);
        blahtex::Token::sourcePrefixedBy((blahtex::Token *)v254, (const blahtex::Token *)v256, v113);
        if (std::wstring::empty[abi:ne180100]((uint64_t)v254))
        {
          v249 = 1;
          v114 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v252, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v251, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v250, &dword_24121C88C);
          blahtex::Exception::Exception(v114, &v252, v256, &v251, &v250);
          v249 = 0;
        }
        v115 = v413;
        v116 = std::wstring::operator std::wstring_view[abi:ne180100]((char *)v254);
        v248[1] = v117;
        v248[0] = v116;
        if (!std::unordered_map<std::wstring_view,std::wstring_view>::count[abi:ne180100](v115, (uint64_t)v248))
        {
          v244 = 1;
          v118 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v247, "I");
          std::wstring::basic_string[abi:ne180100]<0>(&v246, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v245, &dword_24121C88C);
          blahtex::Exception::Exception(v118, &v247, v256, &v246, &v245);
          v244 = 0;
        }
        v119 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v120 = (blahtex::ParseTree::MathBig *)operator new();
        blahtex::ParseTree::MathBig::MathBig(v120, (const blahtex::Token *)v256, (const blahtex::Token *)v254);
        v243 = v120;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v119, &v243);
        v408 = 4;
        blahtex::Token::~Token(v254);
        blahtex::Token::~Token(v256);
        break;
      case 20:
        v142 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v142, (uint64_t)v208);
        v143 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
        if (std::vector<blahtex::ParseTree::MathNode *>::empty[abi:ne180100]((_QWORD *)(v143 + 8)))
        {
          v204 = 1;
          v144 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v207, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v206, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v205, &dword_24121C88C);
          blahtex::Exception::Exception(v144, &v207, v208, &v206, &v205);
          v204 = 0;
        }
        v203 = 0;
        v145 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
        v146 = *(const void **)std::vector<blahtex::ParseTree::MathNode *>::back[abi:ne180100](v145 + 8);
        if (v146)
        else
          v147 = 0;
        v203 = v147;
        if (v147)
        {
          v148 = v203 + 1;
          v149 = (_QWORD *)operator new();
          v201 = 1;
          std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v202, v203 + 1);
          blahtex::ParseTree::MathLimits::MathLimits(v149, (const blahtex::Token *)v208, &v202);
          v201 = 0;
          std::unique_ptr<blahtex::ParseTree::MathNode>::reset[abi:ne180100](v148, (uint64_t)v149);
          std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v202);
        }
        else
        {
          v150 = (_QWORD *)operator new();
          v199 = 1;
          v151 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
          v152 = (uint64_t *)std::vector<blahtex::ParseTree::MathNode *>::back[abi:ne180100](v151 + 8);
          std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(&v200, *v152);
          blahtex::ParseTree::MathLimits::MathLimits(v150, (const blahtex::Token *)v208, &v200);
          v199 = 0;
          v153 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416);
          *(_QWORD *)std::vector<blahtex::ParseTree::MathNode *>::back[abi:ne180100](v153 + 8) = v150;
          std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v200);
        }
        v408 = 4;
        blahtex::Token::~Token(v208);
        break;
      case 21:
        v26 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v26, (uint64_t)&v392);
        v27 = std::wstring::size[abi:ne180100]((uint64_t)&v392);
        std::wstring::substr[abi:ne180100](&v392, 7uLL, v27 - 8, &v391);
        blahtex::Parser::ParseMathTable(v5, (uint64_t)&v390);
        v28 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v28, (uint64_t)&v389);
        if (blahtex::Parser::GetMathTokenCode(v29, (const blahtex::Token *)&v389) != 22)
        {
          v385 = 1;
          v30 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(v388, "U");
          std::wstring::basic_string[abi:ne180100]<0>(v387, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(v386, &dword_24121C88C);
          blahtex::Exception::Exception(v30, v388, &v392, v387, v386);
          v385 = 0;
        }
        v31 = std::wstring::size[abi:ne180100]((uint64_t)&v389);
        std::wstring::substr[abi:ne180100](&v389, 5uLL, v31 - 6, &v384);
        v32 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)&v391, (const __int32 *)&v384);
        std::wstring::~wstring(&v384);
        if (v32)
        {
          v381 = 1;
          v33 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(v383, "M");
          std::wstring::basic_string[abi:ne180100]<0>(v382, &dword_24121C88C);
          blahtex::Exception::Exception(v33, v383, &v392, &v389, v382);
          v381 = 0;
        }
        if (std::operator==[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)&v391, (__int32 *)"c"))
        {
          v34 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&v390);
          for (i = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100](v34 + 8);
                ;
                v373[1] = std::__wrap_iter<blahtex::ParseTree::MathTableRow **>::operator++[abi:ne180100](&i))
          {
            v35 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&v390);
            v379 = std::vector<blahtex::ParseTree::MathTableRow *>::end[abi:ne180100](v35 + 8);
            if (!std::operator!=[abi:ne180100]<blahtex::ParseTree::MathTableRow **>(&i, &v379))
              break;
            v36 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&i);
            if ((unint64_t)std::vector<blahtex::ParseTree::MathNode *>::size[abi:ne180100]((_QWORD *)(*(_QWORD *)v36 + 8)) > 2)
            {
              v374 = 1;
              v37 = __cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>(&v378, "C");
              std::wstring::basic_string[abi:ne180100]<0>(&v377, &dword_24121C88C);
              std::wstring::basic_string[abi:ne180100]<0>(&v376, &dword_24121C88C);
              std::wstring::basic_string[abi:ne180100]<0>(&v375, &dword_24121C88C);
              blahtex::Exception::Exception(v37, &v378, &v377, &v376, &v375);
              v374 = 0;
            }
          }
          v408 = 5;
        }
        v38 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v39 = operator new();
        v369 = 1;
        std::wstring::basic_string(&v371, &v391);
        blahtex::Token::Token(v372, &v371, 0);
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v370, &v390);
        blahtex::ParseTree::MathEnvironment::MathEnvironment(v39, (const blahtex::Token *)v372, &v370, 0);
        v369 = 0;
        v373[0] = v39;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v38, v373);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v370);
        blahtex::Token::~Token(v372);
        std::wstring::~wstring(&v371);
        v408 = 4;
        blahtex::Token::~Token((void **)&v389.__r_.__value_.__l.__data_);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v390);
        std::wstring::~wstring(&v391);
        blahtex::Token::~Token((void **)&v392.__r_.__value_.__l.__data_);
        break;
      case 23:
        v40 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v40, (uint64_t)v367);
        blahtex::translateToken((blahtex *)v367, (blahtex::Token *)&v368);
        blahtex::Token::~Token(v367);
        v41 = std::wstring::size[abi:ne180100]((uint64_t)&v368);
        std::wstring::substr[abi:ne180100](&v368, 1uLL, v41 - 1, &__str);
        v42 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v42);
        v43 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v43, (uint64_t)v365);
        std::wstring::basic_string[abi:ne180100]<0>(&v364, "{");
        v44 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v365, (const __int32 *)&v364);
        std::wstring::~wstring(&v364);
        blahtex::Token::~Token(v365);
        if (v44)
        {
          v360 = 1;
          v45 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v363, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v362, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v361, &dword_24121C88C);
          blahtex::Exception::Exception(v45, &v363, &v368, &v362, &v361);
          v360 = 0;
        }
        blahtex::Parser::ParseMathTable(v5, (uint64_t)&v359);
        if (std::operator==[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)&__str, (__int32 *)"s"))
        {
          v46 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&v359);
          for (j = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100](v46 + 8);
                ;
                v351[4] = (void *)std::__wrap_iter<blahtex::ParseTree::MathTableRow **>::operator++[abi:ne180100](&j))
          {
            v47 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&v359);
            v357 = std::vector<blahtex::ParseTree::MathTableRow *>::end[abi:ne180100](v47 + 8);
            if (!std::operator!=[abi:ne180100]<blahtex::ParseTree::MathTableRow **>(&j, &v357))
              break;
            v48 = std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)&j);
            if ((unint64_t)std::vector<blahtex::ParseTree::MathNode *>::size[abi:ne180100]((_QWORD *)(*(_QWORD *)v48 + 8)) > 1)
            {
              v352 = 1;
              v49 = __cxa_allocate_exception(0x30uLL);
              std::wstring::basic_string[abi:ne180100]<0>(&v356, "S");
              std::wstring::basic_string[abi:ne180100]<0>(&v355, &dword_24121C88C);
              std::wstring::basic_string[abi:ne180100]<0>(&v354, &dword_24121C88C);
              std::wstring::basic_string[abi:ne180100]<0>(&v353, &dword_24121C88C);
              blahtex::Exception::Exception(v49, &v356, &v355, &v354, &v353);
              v352 = 0;
            }
          }
          v408 = 8;
        }
        v50 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v50, (uint64_t)v351);
        std::wstring::basic_string[abi:ne180100]<0>(&v350, &unk_24121CC80);
        v51 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v351, (const __int32 *)&v350);
        std::wstring::~wstring(&v350);
        blahtex::Token::~Token(v351);
        if (v51)
        {
          v345 = 1;
          v52 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v349, dword_24121CC88);
          std::wstring::basic_string[abi:ne180100]<0>(&v348, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v347, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v346, &dword_24121C88C);
          blahtex::Exception::Exception(v52, &v349, &v348, &v347, &v346);
          v345 = 0;
        }
        v53 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v54 = operator new();
        v340 = 1;
        std::wstring::basic_string(&v342, &__str);
        blahtex::Token::Token(v343, &v342, 0);
        std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(&v341, &v359);
        blahtex::ParseTree::MathEnvironment::MathEnvironment(v54, (const blahtex::Token *)v343, &v341, 1);
        v340 = 0;
        v344 = v54;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v53, &v344);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v341);
        blahtex::Token::~Token(v343);
        std::wstring::~wstring(&v342);
        v408 = 4;
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v359);
        std::wstring::~wstring(&__str);
        blahtex::Token::~Token((void **)&v368.__r_.__value_.__l.__data_);
        break;
      case 24:
        v55 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v55, (uint64_t)v339);
        v56 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::SkipWhitespace(v56);
        v57 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Peek(v57, (uint64_t)v338);
        std::wstring::basic_string[abi:ne180100]<0>(&v337, "{");
        v58 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v338, (const __int32 *)&v337);
        std::wstring::~wstring(&v337);
        blahtex::Token::~Token(v338);
        if (v58)
        {
          v333 = 1;
          v59 = __cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>(&v336, "M");
          std::wstring::basic_string[abi:ne180100]<0>(&v335, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>(&v334, &dword_24121C88C);
          blahtex::Exception::Exception(v59, &v336, v339, &v335, &v334);
          v333 = 0;
        }
        v60 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v61 = (_QWORD *)operator new();
        v330 = 1;
        blahtex::Parser::ParseTextField(&v331, (blahtex::MacroProcessor **)v5);
        blahtex::ParseTree::EnterTextMode::EnterTextMode(v61, (const blahtex::Token *)v339, &v331);
        v330 = 0;
        v332 = v61;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v60, &v332);
        std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](&v331);
        v408 = 4;
        blahtex::Token::~Token(v339);
        break;
      case 25:
        v154 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v154, (uint64_t)v198);
        std::wstring::basic_string[abi:ne180100]<0>(&v197, "\\");
        v155 = blahtex::Token::operator==((const __int32 *)v198, (const __int32 *)&v197);
        std::wstring::~wstring(&v197);
        if (v155)
        {
          v156 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
          v157 = (blahtex::ParseTree::MathColour *)operator new();
          v193 = 1;
          blahtex::Parser::ParseColourName((blahtex::MacroProcessor **)v5, (uint64_t)&v194);
          blahtex::Token::Token(v195, &v194, 0);
          blahtex::ParseTree::MathColour::MathColour(v157, (const blahtex::Token *)v195);
          v193 = 0;
          v196 = v157;
          std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v156, &v196);
          blahtex::Token::~Token(v195);
          std::wstring::~wstring(&v194);
        }
        else
        {
          v158 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
          v159 = (blahtex::ParseTree::MathStateChange *)operator new();
          blahtex::ParseTree::MathStateChange::MathStateChange(v159, (const blahtex::Token *)v198);
          v192 = v159;
          std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v158, &v192);
        }
        v408 = 4;
        blahtex::Token::~Token(v198);
        break;
      case 26:
      case 27:
        v18 = (void **)(std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v416) + 8);
        v19 = (blahtex::ParseTree::MathSymbol *)operator new();
        v403 = 1;
        v20 = (blahtex::MacroProcessor *)std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100]((uint64_t)v5);
        blahtex::MacroProcessor::Get(v20, (uint64_t)v404);
        blahtex::translateToken((blahtex *)v404, (blahtex::Token *)v405);
        blahtex::ParseTree::MathSymbol::MathSymbol(v19, (const blahtex::Token *)v405);
        v403 = 0;
        v406 = v19;
        std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](v18, &v406);
        blahtex::Token::~Token(v405);
        blahtex::Token::~Token(v404);
        break;
      default:
        v170 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v170, "Unexpected token code in Parser::ParseMathList");
        __cxa_throw(v170, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
    }
  }
}

uint64_t std::unique_ptr<blahtex::MacroProcessor>::operator->[abi:ne180100](uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *std::unique_ptr<blahtex::ParseTree::MathNode>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void blahtex::Parser::ParseMathField(blahtex::MacroProcessor **this@<X0>, _QWORD *a2@<X8>)
{
  blahtex::Parser *v4;
  int MathTokenCode;
  _QWORD *v6;
  _BOOL4 v7;
  std::wstring *v8;
  std::wstring *v9;
  std::wstring *exception;
  _BYTE v11[24];
  _BYTE v12[24];
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  blahtex::MacroProcessor::SkipWhitespace(*this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)__p);
  blahtex::translateToken((blahtex *)__p, (blahtex::Token *)v17);
  if (v16 < 0)
    operator delete(__p[0]);
  MathTokenCode = blahtex::Parser::GetMathTokenCode(v4, (const blahtex::Token *)v17);
  switch(MathTokenCode)
  {
    case 4:
      blahtex::Parser::ParseMathList((blahtex::Parser *)this);
      blahtex::MacroProcessor::Get(*this, (uint64_t)__p);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, (__int32 *)&unk_24121CC80);
      v7 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)__p, (const __int32 *)v13);
      if (v14 < 0)
        operator delete(v13[0]);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v7)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121CC88);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v12, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v11, &dword_24121C88C);
        blahtex::Exception::Exception(exception, (__int128 *)__p, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11);
      }
      break;
    case 26:
      v6 = (_QWORD *)operator new();
      *v6 = off_2511441B8;
      blahtex::Token::Token((blahtex::Token *)(v6 + 1), (const blahtex::Token *)v17);
      *a2 = v6;
      break;
    case 0:
      v8 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121CCD4);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v12, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v11, &dword_24121C88C);
      blahtex::Exception::Exception(v8, (__int128 *)__p, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11);
    default:
      v9 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121CD2C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v12, &dword_24121C88C);
      blahtex::Exception::Exception(v9, (__int128 *)__p, (uint64_t)v17, (uint64_t)v13, (uint64_t)v12);
  }
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_2411FB6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t *v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v38;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v35 & 1) == 0)
    {
LABEL_12:
      v38 = *v33;
      *v33 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      if (*(char *)(v36 - 41) < 0)
        operator delete(*(void **)(v36 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v34);
  goto LABEL_12;
}

blahtex::ParseTree::MathSymbol *blahtex::ParseTree::MathSymbol::MathSymbol(blahtex::ParseTree::MathSymbol *this, const blahtex::Token *a2)
{
  *(_QWORD *)this = off_2511441B8;
  blahtex::Token::Token((blahtex::ParseTree::MathSymbol *)((char *)this + 8), a2);
  return this;
}

_QWORD *std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<true,void>(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void *blahtex::Parser::ParseMathTable@<X0>(blahtex::Parser *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  blahtex::Parser *v7;
  int MathTokenCode;
  unint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  void *result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  std::logic_error *exception;
  void *__p[2];
  char v85;
  void *lpsrc;

  v4 = (_QWORD *)operator new();
  *v4 = &off_251145178;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  *(_QWORD *)a2 = v4;
  v5 = (_QWORD *)operator new();
  v6 = 0;
  *v5 = &off_251145140;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = 0;
  while (2)
  {
    blahtex::Parser::ParseMathList((uint64_t *)&lpsrc, this);
    blahtex::MacroProcessor::Peek(*(blahtex::MacroProcessor **)this, (uint64_t)__p);
    MathTokenCode = blahtex::Parser::GetMathTokenCode(v7, (const blahtex::Token *)__p);
    if (v85 < 0)
      operator delete(__p[0]);
    switch(MathTokenCode)
    {
      case 0:
      case 5:
        goto LABEL_9;
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 7:
        goto LABEL_108;
      case 8:
        blahtex::MacroProcessor::Advance(*(blahtex::MacroProcessor **)this);
        v9 = v5[3];
        v10 = lpsrc;
        lpsrc = 0;
        v11 = (_QWORD *)v5[2];
        if ((unint64_t)v11 >= v9)
        {
          v48 = v5[1];
          v49 = ((uint64_t)v11 - v48) >> 3;
          if ((unint64_t)(v49 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v50 = v9 - v48;
          v51 = v50 >> 2;
          if (v50 >> 2 <= (unint64_t)(v49 + 1))
            v51 = v49 + 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v5 + 3), v52);
          else
            v53 = 0;
          v60 = &v53[8 * v49];
          *(_QWORD *)v60 = v10;
          v12 = v60 + 8;
          v62 = (char *)v5[1];
          v61 = (char *)v5[2];
          if (v61 != v62)
          {
            do
            {
              v63 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              *((_QWORD *)v60 - 1) = v63;
              v60 -= 8;
            }
            while (v61 != v62);
            v61 = (char *)v5[1];
          }
          v5[1] = v60;
          v5[2] = v12;
          v5[3] = &v53[8 * v52];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *v11 = v10;
          v12 = v11 + 1;
        }
        v5[2] = v12;
        v46 = 1;
        goto LABEL_49;
      case 9:
        blahtex::MacroProcessor::Advance(*(blahtex::MacroProcessor **)this);
        v24 = v5[3];
        v25 = lpsrc;
        lpsrc = 0;
        v26 = (_QWORD *)v5[2];
        if ((unint64_t)v26 >= v24)
        {
          v54 = v5[1];
          v55 = ((uint64_t)v26 - v54) >> 3;
          if ((unint64_t)(v55 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v56 = v24 - v54;
          v57 = v56 >> 2;
          if (v56 >> 2 <= (unint64_t)(v55 + 1))
            v57 = v55 + 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v5 + 3), v58);
          else
            v59 = 0;
          v64 = &v59[8 * v55];
          *(_QWORD *)v64 = v25;
          v27 = v64 + 8;
          v66 = (char *)v5[1];
          v65 = (char *)v5[2];
          if (v65 != v66)
          {
            do
            {
              v67 = *((_QWORD *)v65 - 1);
              v65 -= 8;
              *((_QWORD *)v64 - 1) = v67;
              v64 -= 8;
            }
            while (v65 != v66);
            v65 = (char *)v5[1];
          }
          v5[1] = v64;
          v5[2] = v27;
          v5[3] = &v59[8 * v58];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *v26 = v25;
          v27 = v26 + 1;
        }
        v5[2] = v27;
        v68 = *(_QWORD **)a2;
        v69 = *(_QWORD **)(*(_QWORD *)a2 + 16);
        v70 = *(_QWORD *)(*(_QWORD *)a2 + 24);
        if ((unint64_t)v69 >= v70)
        {
          v72 = v68[1];
          v73 = ((uint64_t)v69 - v72) >> 3;
          if ((unint64_t)(v73 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v74 = v70 - v72;
          v75 = v74 >> 2;
          if (v74 >> 2 <= (unint64_t)(v73 + 1))
            v75 = v73 + 1;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          if (v76)
            v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)a2 + 24, v76);
          else
            v77 = 0;
          v78 = &v77[8 * v73];
          *(_QWORD *)v78 = v5;
          v71 = v78 + 8;
          v80 = (char *)v68[1];
          v79 = (char *)v68[2];
          if (v79 != v80)
          {
            do
            {
              v81 = *((_QWORD *)v79 - 1);
              v79 -= 8;
              *((_QWORD *)v78 - 1) = v81;
              v78 -= 8;
            }
            while (v79 != v80);
            v79 = (char *)v68[1];
          }
          v68[1] = v78;
          v68[2] = v71;
          v68[3] = &v77[8 * v76];
          if (v79)
            operator delete(v79);
        }
        else
        {
          *v69 = v5;
          v71 = v69 + 1;
        }
        v68[2] = v71;
        v82 = (_QWORD *)operator new();
        *v82 = &off_251145140;
        v82[1] = 0;
        v82[2] = 0;
        v82[3] = 0;
        v46 = 1;
        v5 = v82;
        goto LABEL_49;
      default:
        if (MathTokenCode != 18 && MathTokenCode != 22)
        {
LABEL_108:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Unexpected token code in Parser::ParseMathTable");
          __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
        }
LABEL_9:
        v13 = lpsrc;
        if (lpsrc
        {
          v46 = 0;
        }
        else
        {
          v15 = v5[3];
          lpsrc = 0;
          v16 = (_QWORD *)v5[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = v5[1];
            v19 = ((uint64_t)v16 - v18) >> 3;
            if ((unint64_t)(v19 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v20 = v15 - v18;
            v21 = v20 >> 2;
            if (v20 >> 2 <= (unint64_t)(v19 + 1))
              v21 = v19 + 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v22 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v22 = v21;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v5 + 3), v22);
            else
              v23 = 0;
            v28 = &v23[8 * v19];
            *(_QWORD *)v28 = v13;
            v17 = v28 + 8;
            v30 = (char *)v5[1];
            v29 = (char *)v5[2];
            if (v29 != v30)
            {
              do
              {
                v31 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v28 - 1) = v31;
                v28 -= 8;
              }
              while (v29 != v30);
              v29 = (char *)v5[1];
            }
            v5[1] = v28;
            v5[2] = v17;
            v5[3] = &v23[8 * v22];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v16 = v13;
            v17 = v16 + 1;
          }
          v5[2] = v17;
          v32 = *(_QWORD **)a2;
          v33 = *(_QWORD **)(*(_QWORD *)a2 + 16);
          v34 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          if ((unint64_t)v33 >= v34)
          {
            v36 = v32[1];
            v37 = ((uint64_t)v33 - v36) >> 3;
            if ((unint64_t)(v37 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v38 = v34 - v36;
            v39 = v38 >> 2;
            if (v38 >> 2 <= (unint64_t)(v37 + 1))
              v39 = v37 + 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v39;
            if (v40)
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)a2 + 24, v40);
            else
              v41 = 0;
            v42 = &v41[8 * v37];
            *(_QWORD *)v42 = v5;
            v35 = v42 + 8;
            v44 = (char *)v32[1];
            v43 = (char *)v32[2];
            if (v43 != v44)
            {
              do
              {
                v45 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v42 - 1) = v45;
                v42 -= 8;
              }
              while (v43 != v44);
              v43 = (char *)v32[1];
            }
            v32[1] = v42;
            v32[2] = v35;
            v32[3] = &v41[8 * v40];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *v33 = v5;
            v35 = v33 + 1;
          }
          v5 = 0;
          v46 = 0;
          v32[2] = v35;
        }
        v6 = 1;
LABEL_49:
        result = lpsrc;
        lpsrc = 0;
        if (result)
          result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
        if ((v46 & 1) != 0)
          continue;
        if (v5)
          result = (void *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
        if ((v6 & 1) == 0)
        {
          result = *(void **)a2;
          *(_QWORD *)a2 = 0;
          if (result)
            return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
        }
        return result;
    }
  }
}

void sub_2411FBEE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_2411FBF90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x2411FBF40);
}

void std::vector<blahtex::ParseTree::MathNode *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t std::unique_ptr<blahtex::ParseTree::MathNode>::release[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  return v1;
}

BOOL std::vector<blahtex::ParseTree::MathNode *>::empty[abi:ne180100](_QWORD *a1)
{
  return *a1 == a1[1];
}

_QWORD *blahtex::Parser::PrepareScripts(blahtex::Parser *this, blahtex::ParseTree::MathList *a2)
{
  uint64_t v3;
  char **v4;
  const void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v3 = *((_QWORD *)a2 + 2);
  v4 = (char **)((char *)a2 + 8);
  if (*((_QWORD *)a2 + 1) == v3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_25113FC58;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v9 = *((_QWORD *)a2 + 3);
    v10 = (_QWORD *)*((_QWORD *)a2 + 2);
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((char *)v10 - *v4) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*v4;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)a2 + 24, v15);
      else
        v16 = 0;
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *(_QWORD *)v17 = v6;
      v11 = v17 + 8;
      v20 = (char *)*((_QWORD *)a2 + 1);
      v19 = (char *)*((_QWORD *)a2 + 2);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = *v4;
      }
      *((_QWORD *)a2 + 1) = v17;
      *((_QWORD *)a2 + 2) = v11;
      *((_QWORD *)a2 + 3) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v10 = v6;
      v11 = v10 + 1;
    }
    *((_QWORD *)a2 + 2) = v11;
  }
  else
  {
    v5 = *(const void **)(v3 - 8);
    if (!v5
    {
      v6 = (_QWORD *)operator new();
      v6[2] = 0;
      v6[3] = 0;
      v7 = *((_QWORD *)a2 + 2);
      v8 = *(_QWORD *)(v7 - 8);
      *v6 = &off_25113FC58;
      v6[1] = v8;
      *(_QWORD *)(v7 - 8) = v6;
    }
  }
  return v6;
}

uint64_t std::vector<blahtex::ParseTree::MathNode *>::back[abi:ne180100](uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 8;
}

uint64_t std::unique_ptr<blahtex::ParseTree::MathNode>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void blahtex::Parser::ParseColourName(blahtex::MacroProcessor **this@<X0>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  char v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unsigned __int8 v8;
  _BOOL4 v9;
  const std::wstring::value_type *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  std::wstring *v14;
  std::wstring *v15;
  std::wstring *v16;
  std::wstring *exception;
  _BYTE v18[24];
  _BYTE v19[24];
  void *v20[3];
  void *__p[2];
  char v22;
  void *v23[2];
  unsigned __int8 v24;

  blahtex::MacroProcessor::SkipWhitespace(*this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)v23);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"{");
  v4 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v23, (const __int32 *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (v4)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v23, (__int32 *)"M");
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"\\");
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_24121C88C);
    blahtex::Exception::Exception(exception, (__int128 *)v23, (uint64_t)__p, (uint64_t)v20, (uint64_t)v19);
  }
  v5 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  do
  {
    while (1)
    {
      blahtex::MacroProcessor::Get(*this, (uint64_t)v23);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121CC80);
      v6 = blahtex::Token::operator==((const __int32 *)v23, (const __int32 *)__p);
      v7 = v6;
      if (v22 < 0)
      {
        operator delete(__p[0]);
        if (v7)
        {
LABEL_9:
          if (blahtex::lookupColour(a2) == 0x10000000)
          {
            v15 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"I");
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_24121C88C);
            blahtex::Exception::Exception(v15, (__int128 *)__p, a2, (uint64_t)v20, (uint64_t)v19);
          }
          v5 = 1;
          v8 = v24;
          goto LABEL_36;
        }
      }
      else if (v6)
      {
        goto LABEL_9;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
      v9 = blahtex::Token::operator==((const __int32 *)v23, (const __int32 *)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v9)
      {
        v16 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24121CC88);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v20, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
        blahtex::Exception::Exception(v16, (__int128 *)__p, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18);
      }
      v10 = (v24 & 0x80u) == 0 ? (const std::wstring::value_type *)v23 : (const std::wstring::value_type *)v23[0];
      v11 = (v24 & 0x80u) == 0 ? (void *)v24 : v23[1];
      std::wstring::append((std::wstring *)a2, v10, (std::wstring::size_type)v11);
      v8 = v24;
      if ((char)v24 < 0)
        break;
      if (v24 != 1)
        goto LABEL_43;
      v12 = v23[0];
      if (SLODWORD(v23[0]) <= 64)
        goto LABEL_28;
      if (LODWORD(v23[0]) >= 0x5B)
      {
        if (SLODWORD(v23[0]) >= 97)
        {
          if (LODWORD(v23[0]) >= 0x7B)
            goto LABEL_43;
          goto LABEL_37;
        }
LABEL_28:
        if (SLODWORD(v23[0]) < 48)
          goto LABEL_43;
        goto LABEL_35;
      }
LABEL_37:
      if (v7)
        goto LABEL_40;
    }
    if (v23[1] != (void *)1)
      goto LABEL_43;
    v13 = *(_DWORD *)v23[0];
    if (*(int *)v23[0] >= 65 && (v13 < 0x5B || v13 - 97 < 0x1A))
      goto LABEL_36;
    v12 = *(_DWORD *)v23[0];
    if (*(int *)v23[0] <= 47)
      goto LABEL_43;
LABEL_35:
    if (v12 >= 0x3A)
    {
LABEL_43:
      v14 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"I");
      std::operator+[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((__int32 *)".", (const void **)a2, v20);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v19, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v18, &dword_24121C88C);
      blahtex::Exception::Exception(v14, (__int128 *)__p, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18);
    }
LABEL_36:
    if ((v8 & 0x80) == 0)
      goto LABEL_37;
    operator delete(v23[0]);
  }
  while (!v7);
LABEL_40:
  if (!(v5 & 1 | (*(char *)(a2 + 23) >= 0)))
    operator delete(*(void **)a2);
}

void sub_2411FC69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  int v39;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
  {
    operator delete(a33);
    if ((v39 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v39)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v38);
  goto LABEL_12;
}

uint64_t std::wstring::size[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    return *(_QWORD *)(a1 + 8);
  else
    return *(unsigned __int8 *)(a1 + 23);
}

uint64_t std::operator+[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>@<X0>(__int32 *a1@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  unint64_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (unint64_t)a2[1];
  v7 = wcslen(a1);
  result = std::wstring::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, 4 * v6);
  }
  if (v7)
    result = (uint64_t)memmove((char *)a3 + 4 * v6, a1, 4 * v7);
  *((_DWORD *)a3 + v6 + v7) = 0;
  return result;
}

_QWORD *blahtex::ParseTree::MathList::MathList(_QWORD *this)
{
  *this = &off_251145108;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *std::unique_ptr<blahtex::ParseTree::MathList>::unique_ptr[abi:ne180100]<true,void>(_QWORD *result)
{
  *result = 0;
  return result;
}

BOOL std::wstring::empty[abi:ne180100](uint64_t a1)
{
  uint64_t v1;

  if (*(char *)(a1 + 23) < 0)
    v1 = *(_QWORD *)(a1 + 8);
  else
    v1 = *(unsigned __int8 *)(a1 + 23);
  return v1 == 0;
}

_QWORD *std::unique_ptr<blahtex::ParseTree::MathNode>::unique_ptr[abi:ne180100]<blahtex::ParseTree::MathList,std::default_delete<blahtex::ParseTree::MathList>,void,void>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t blahtex::ParseTree::MathCommand2Args::MathCommand2Args(uint64_t a1, const blahtex::Token *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_25113F7A8;
  blahtex::Token::Token((blahtex::Token *)(a1 + 8), a2);
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = a5;
  return a1;
}

uint64_t std::vector<blahtex::ParseTree::MathNode *>::size[abi:ne180100](_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 3;
}

_QWORD *std::vector<blahtex::ParseTree::MathNode *>::clear[abi:ne180100](_QWORD *result)
{
  result[1] = *result;
  return result;
}

_QWORD *blahtex::ParseTree::MathGroup::MathGroup(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_25113F898;
  result[1] = v2;
  return result;
}

std::wstring *std::wstring::substr[abi:ne180100]@<X0>(std::wstring *__str@<X0>, std::wstring::size_type __pos@<X1>, std::wstring::size_type __n@<X2>, std::wstring *a4@<X8>)
{
  char v5;

  return std::wstring::basic_string(a4, __str, __pos, __n, (std::allocator<wchar_t> *)&v5);
}

BOOL std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(const __int32 *a1, const __int32 *a2)
{
  int v2;
  size_t v3;
  uint64_t v4;
  int v5;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (!v3)
    return 0;
  if (v5 < 0)
    a2 = *(const __int32 **)a2;
  if (v2 < 0)
    a1 = *(const __int32 **)a1;
  return wmemcmp(a1, a2, v3) != 0;
}

BOOL std::operator!=[abi:ne180100]<blahtex::ParseTree::MathTableRow **>(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

uint64_t std::vector<blahtex::ParseTree::MathTableRow *>::end[abi:ne180100](uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t std::__wrap_iter<blahtex::ParseTree::MathTableRow **>::operator++[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 += 8;
  return v1;
}

uint64_t blahtex::ParseTree::MathEnvironment::MathEnvironment(uint64_t a1, const blahtex::Token *a2, uint64_t *a3, char a4)
{
  uint64_t v7;

  *(_QWORD *)a1 = off_25113FA28;
  blahtex::Token::Token((blahtex::Token *)(a1 + 8), a2);
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = a4;
  return a1;
}

void blahtex::Parser::ParseTextField(uint64_t *__return_ptr a1@<X8>, blahtex::MacroProcessor **this@<X0>)
{
  blahtex::Parser *v4;
  int TextTokenCode;
  _QWORD *v6;
  _QWORD *v7;
  char **v8;
  _BOOL4 v9;
  std::wstring *v10;
  std::wstring *v11;
  std::wstring *exception;
  _BYTE v13[24];
  _BYTE v14[24];
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  char **v19;
  int *v20[2];
  char v21;

  blahtex::MacroProcessor::SkipWhitespace(*this);
  blahtex::MacroProcessor::Get(*this, (uint64_t)v20);
  TextTokenCode = blahtex::Parser::GetTextTokenCode(v4, v20);
  switch(TextTokenCode)
  {
    case 4:
      v7 = (_QWORD *)operator new();
      blahtex::Parser::ParseTextList(this, &v19);
      v8 = v19;
      *v7 = &off_25113FAC8;
      v7[1] = v8;
      *a1 = (uint64_t)v7;
      blahtex::MacroProcessor::Peek(*this, (uint64_t)v17);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24121CC80);
      v9 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v17, (const __int32 *)__p);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
      if (v9)
      {
        exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, dword_24121CC88);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v14, &dword_24121C88C);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_24121C88C);
        blahtex::Exception::Exception(exception, (__int128 *)v17, (uint64_t)__p, (uint64_t)v14, (uint64_t)v13);
      }
      blahtex::MacroProcessor::Advance(*this);
      break;
    case 26:
      v6 = (_QWORD *)operator new();
      *v6 = off_25113FBB8;
      blahtex::Token::Token((blahtex::Token *)(v6 + 1), (const blahtex::Token *)v20);
      *a1 = (uint64_t)v6;
      break;
    case 0:
      v10 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, dword_24121CCD4);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v14, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_24121C88C);
      blahtex::Exception::Exception(v10, (__int128 *)v17, (uint64_t)__p, (uint64_t)v14, (uint64_t)v13);
    default:
      v11 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v17, dword_24121CD2C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v14, &dword_24121C88C);
      blahtex::Exception::Exception(v11, (__int128 *)v17, (uint64_t)v20, (uint64_t)__p, (uint64_t)v14);
  }
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_2411FCE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v35 & 1) == 0)
    {
LABEL_12:
      *v32 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      if (*(char *)(v36 - 57) < 0)
        operator delete(*(void **)(v36 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v34);
  goto LABEL_12;
}

_QWORD *blahtex::ParseTree::EnterTextMode::EnterTextMode(_QWORD *a1, const blahtex::Token *a2, uint64_t *a3)
{
  uint64_t v5;

  *a1 = off_25113FA78;
  blahtex::Token::Token((blahtex::Token *)(a1 + 1), a2);
  v5 = *a3;
  *a3 = 0;
  a1[5] = v5;
  return a1;
}

_QWORD *blahtex::ParseTree::MathPhantom::MathPhantom(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_25113F8E8;
  result[1] = v2;
  return result;
}

_QWORD *blahtex::ParseTree::MathCancel::MathCancel(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_25113F938;
  result[1] = v2;
  return result;
}

BOOL std::unordered_map<std::wstring_view,std::wstring_view>::count[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  return std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(a1, a2) != 0;
}

char *std::wstring::operator std::wstring_view[abi:ne180100](char *result)
{
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

blahtex::ParseTree::MathMiddle *blahtex::ParseTree::MathMiddle::MathMiddle(blahtex::ParseTree::MathMiddle *this, const blahtex::Token *a2)
{
  *(_QWORD *)this = off_25113F7F8;
  blahtex::Token::Token((blahtex::ParseTree::MathMiddle *)((char *)this + 8), a2);
  return this;
}

uint64_t *std::unique_ptr<blahtex::ParseTree::MathNode>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

_QWORD *blahtex::ParseTree::MathLimits::MathLimits(_QWORD *a1, const blahtex::Token *a2, uint64_t *a3)
{
  uint64_t v5;

  *a1 = off_25113F988;
  blahtex::Token::Token((blahtex::Token *)(a1 + 1), a2);
  v5 = *a3;
  *a3 = 0;
  a1[5] = v5;
  return a1;
}

blahtex::ParseTree::MathStateChange *blahtex::ParseTree::MathStateChange::MathStateChange(blahtex::ParseTree::MathStateChange *this, const blahtex::Token *a2)
{
  *(_QWORD *)this = off_251146490;
  blahtex::Token::Token((blahtex::ParseTree::MathStateChange *)((char *)this + 8), a2);
  return this;
}

_QWORD *blahtex::ParseTree::MathCommand1Arg::MathCommand1Arg(_QWORD *a1, const blahtex::Token *a2, uint64_t *a3)
{
  uint64_t v5;

  *a1 = off_25113F758;
  blahtex::Token::Token((blahtex::Token *)(a1 + 1), a2);
  v5 = *a3;
  *a3 = 0;
  a1[5] = v5;
  return a1;
}

void blahtex::Parser::ParseTextList(blahtex::MacroProcessor **this@<X0>, char ***a2@<X8>)
{
  char **v3;
  char **v4;
  uint64_t v5;
  blahtex::Parser *v6;
  int TextTokenCode;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  blahtex::ParseTree::TextColour *v19;
  unint64_t v20;
  blahtex::ParseTree::TextColour **v21;
  char *v22;
  _BOOL4 v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  _BOOL4 v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  blahtex::ParseTree::TextColour **v99;
  char *v100;
  char *v101;
  blahtex::ParseTree::TextColour *v102;
  char *v103;
  char **v104;
  std::logic_error *v105;
  std::wstring *v106;
  std::wstring *v107;
  std::wstring *exception;
  void *v110[2];
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115[2];
  char v116;
  _BYTE v117[24];
  void *__p[2];
  char v119;
  uint64_t v120;
  __int128 v121;
  char v122;

  v3 = (char **)operator new();
  v3[1] = 0;
  v4 = v3 + 1;
  *v3 = (char *)&off_2511451B0;
  v3[2] = 0;
  v3[3] = 0;
  v5 = (uint64_t)(v3 + 3);
  while (1)
  {
    blahtex::MacroProcessor::Peek(*this, (uint64_t)&v121);
    TextTokenCode = blahtex::Parser::GetTextTokenCode(v6, (int **)&v121);
    if (v122 < 0)
      operator delete((void *)v121);
    switch(TextTokenCode)
    {
      case 0:
      case 5:
        v103 = v3[2];
        if (v103 - v3[1] == 8)
        {
          v104 = (char **)*((_QWORD *)v103 - 1);
          v3[2] = v103 - 8;
          (*((void (**)(char **))*v3 + 1))(v3);
          v3 = v104;
        }
        *a2 = v3;
        return;
      case 1:
        goto LABEL_7;
      case 2:
        blahtex::MacroProcessor::HandleNewcommand(*this);
        continue;
      case 3:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        goto LABEL_155;
      case 4:
        blahtex::MacroProcessor::Advance(*this);
        v29 = (_QWORD *)operator new();
        blahtex::Parser::ParseTextList(&v120, (blahtex::Parser *)this);
        v30 = v120;
        v120 = 0;
        *v29 = &off_25113FAC8;
        v29[1] = v30;
        v32 = v3[2];
        v31 = (unint64_t)v3[3];
        if ((unint64_t)v32 >= v31)
        {
          v49 = (v32 - *v4) >> 3;
          if ((unint64_t)(v49 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v50 = v31 - (_QWORD)*v4;
          v51 = v50 >> 2;
          if (v50 >> 2 <= (unint64_t)(v49 + 1))
            v51 = v49 + 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v52);
          else
            v53 = 0;
          v78 = &v53[8 * v49];
          *(_QWORD *)v78 = v29;
          v33 = v78 + 8;
          v80 = v3[1];
          v79 = v3[2];
          if (v79 != v80)
          {
            do
            {
              v81 = *((_QWORD *)v79 - 1);
              v79 -= 8;
              *((_QWORD *)v78 - 1) = v81;
              v78 -= 8;
            }
            while (v79 != v80);
            v79 = *v4;
          }
          v3[1] = v78;
          v3[2] = v33;
          v3[3] = &v53[8 * v52];
          if (v79)
            operator delete(v79);
        }
        else
        {
          *(_QWORD *)v32 = v29;
          v33 = v32 + 8;
        }
        v3[2] = v33;
        v82 = v120;
        v120 = 0;
        if (v82)
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
        blahtex::MacroProcessor::Peek(*this, (uint64_t)&v121);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v115, (__int32 *)&unk_24121CC80);
        v83 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)&v121, (const __int32 *)v115);
        if (v116 < 0)
          operator delete(v115[0]);
        if (v122 < 0)
          operator delete((void *)v121);
        if (v83)
        {
          exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v121, dword_24121CC88);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v115, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v117, &dword_24121C88C);
          blahtex::Exception::Exception(exception, &v121, (uint64_t)v115, (uint64_t)__p, (uint64_t)v117);
        }
        blahtex::MacroProcessor::Advance(*this);
        continue;
      case 6:
        blahtex::MacroProcessor::Get(*this, (uint64_t)&v121);
        blahtex::MacroProcessor::SkipWhitespace(*this);
        blahtex::MacroProcessor::Peek(*this, (uint64_t)v115);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"{");
        v34 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v115, (const __int32 *)__p);
        if (v119 < 0)
          operator delete(__p[0]);
        if (v116 < 0)
          operator delete(v115[0]);
        if (v34)
        {
          v107 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v115, (__int32 *)"M");
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v117, &dword_24121C88C);
          blahtex::Exception::Exception(v107, (__int128 *)v115, (uint64_t)&v121, (uint64_t)__p, (uint64_t)v117);
        }
        v35 = (_QWORD *)operator new();
        blahtex::Parser::ParseTextList(&v114, (blahtex::Parser *)this);
        v36 = v114;
        v114 = 0;
        *v35 = &off_25113FB18;
        v35[1] = v36;
        v38 = v3[2];
        v37 = (unint64_t)v3[3];
        if ((unint64_t)v38 >= v37)
        {
          v64 = (v38 - *v4) >> 3;
          if ((unint64_t)(v64 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v65 = v37 - (_QWORD)*v4;
          v66 = v65 >> 2;
          if (v65 >> 2 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          if (v67)
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v67);
          else
            v68 = 0;
          v93 = &v68[8 * v64];
          *(_QWORD *)v93 = v35;
          v39 = v93 + 8;
          v95 = v3[1];
          v94 = v3[2];
          if (v94 != v95)
          {
            do
            {
              v96 = *((_QWORD *)v94 - 1);
              v94 -= 8;
              *((_QWORD *)v93 - 1) = v96;
              v93 -= 8;
            }
            while (v94 != v95);
            v94 = *v4;
          }
          v3[1] = v93;
          v3[2] = v39;
          v3[3] = &v68[8 * v67];
          if (v94)
            operator delete(v94);
        }
        else
        {
          *(_QWORD *)v38 = v35;
          v39 = v38 + 8;
        }
        v3[2] = v39;
        v88 = v114;
        v114 = 0;
        if (v88)
          goto LABEL_134;
        goto LABEL_135;
      case 7:
        blahtex::MacroProcessor::Get(*this, (uint64_t)&v121);
        blahtex::MacroProcessor::SkipWhitespace(*this);
        blahtex::MacroProcessor::Peek(*this, (uint64_t)v115);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)"{");
        v23 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)v115, (const __int32 *)__p);
        if (v119 < 0)
          operator delete(__p[0]);
        if (v116 < 0)
          operator delete(v115[0]);
        if (v23)
        {
          v106 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v115, (__int32 *)"M");
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, &dword_24121C88C);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v117, &dword_24121C88C);
          blahtex::Exception::Exception(v106, (__int128 *)v115, (uint64_t)&v121, (uint64_t)__p, (uint64_t)v117);
        }
        v24 = (_QWORD *)operator new();
        blahtex::Parser::ParseTextList(&v113, (blahtex::Parser *)this);
        v25 = v113;
        v113 = 0;
        *v24 = &off_25113FB68;
        v24[1] = v25;
        v27 = v3[2];
        v26 = (unint64_t)v3[3];
        if ((unint64_t)v27 >= v26)
        {
          v59 = (v27 - *v4) >> 3;
          if ((unint64_t)(v59 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v60 = v26 - (_QWORD)*v4;
          v61 = v60 >> 2;
          if (v60 >> 2 <= (unint64_t)(v59 + 1))
            v61 = v59 + 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v62);
          else
            v63 = 0;
          v89 = &v63[8 * v59];
          *(_QWORD *)v89 = v24;
          v28 = v89 + 8;
          v91 = v3[1];
          v90 = v3[2];
          if (v90 != v91)
          {
            do
            {
              v92 = *((_QWORD *)v90 - 1);
              v90 -= 8;
              *((_QWORD *)v89 - 1) = v92;
              v89 -= 8;
            }
            while (v90 != v91);
            v90 = *v4;
          }
          v3[1] = v89;
          v3[2] = v28;
          v3[3] = &v63[8 * v62];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *(_QWORD *)v27 = v24;
          v28 = v27 + 8;
        }
        v3[2] = v28;
        v88 = v113;
        v113 = 0;
        if (!v88)
          goto LABEL_135;
        goto LABEL_134;
      case 13:
        blahtex::MacroProcessor::Get(*this, (uint64_t)&v121);
        v40 = (_QWORD *)operator new();
        blahtex::Parser::ParseTextField(&v112, (blahtex::Parser *)this);
        *v40 = off_25113FC08;
        blahtex::Token::Token((blahtex::Token *)(v40 + 1), (const blahtex::Token *)&v121);
        v41 = v112;
        v112 = 0;
        v40[5] = v41;
        v43 = v3[2];
        v42 = (unint64_t)v3[3];
        if ((unint64_t)v43 >= v42)
        {
          v54 = (v43 - *v4) >> 3;
          if ((unint64_t)(v54 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v55 = v42 - (_QWORD)*v4;
          v56 = v55 >> 2;
          if (v55 >> 2 <= (unint64_t)(v54 + 1))
            v56 = v54 + 1;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v57);
          else
            v58 = 0;
          v84 = &v58[8 * v54];
          *(_QWORD *)v84 = v40;
          v44 = v84 + 8;
          v86 = v3[1];
          v85 = v3[2];
          if (v85 != v86)
          {
            do
            {
              v87 = *((_QWORD *)v85 - 1);
              v85 -= 8;
              *((_QWORD *)v84 - 1) = v87;
              v84 -= 8;
            }
            while (v85 != v86);
            v85 = *v4;
          }
          v3[1] = v84;
          v3[2] = v44;
          v3[3] = &v58[8 * v57];
          if (v85)
            operator delete(v85);
        }
        else
        {
          *(_QWORD *)v43 = v40;
          v44 = v43 + 8;
        }
        v3[2] = v44;
        v88 = v112;
        v112 = 0;
        if (!v88)
          goto LABEL_135;
LABEL_134:
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
        goto LABEL_135;
      default:
        if ((TextTokenCode - 26) < 2)
        {
LABEL_7:
          v8 = (_QWORD *)operator new();
          blahtex::MacroProcessor::Get(*this, (uint64_t)&v121);
          *v8 = off_25113FBB8;
          blahtex::Token::Token((blahtex::Token *)(v8 + 1), (const blahtex::Token *)&v121);
          v10 = v3[2];
          v9 = (unint64_t)v3[3];
          if ((unint64_t)v10 >= v9)
          {
            v12 = (v10 - *v4) >> 3;
            if ((unint64_t)(v12 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v13 = v9 - (_QWORD)*v4;
            v14 = v13 >> 2;
            if (v13 >> 2 <= (unint64_t)(v12 + 1))
              v14 = v12 + 1;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v15);
            else
              v16 = 0;
            v45 = &v16[8 * v12];
            *(_QWORD *)v45 = v8;
            v11 = v45 + 8;
            v47 = v3[1];
            v46 = v3[2];
            if (v46 != v47)
            {
              do
              {
                v48 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *((_QWORD *)v45 - 1) = v48;
                v45 -= 8;
              }
              while (v46 != v47);
              goto LABEL_43;
            }
            goto LABEL_44;
          }
          goto LABEL_8;
        }
        if (TextTokenCode != 25)
        {
LABEL_155:
          v105 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v105, "Unexpected token code in Parser::ParseTextList");
          __cxa_throw(v105, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
        }
        blahtex::MacroProcessor::Get(*this, (uint64_t)&v121);
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v115, (__int32 *)"\\");
        v17 = blahtex::Token::operator==((const __int32 *)&v121, (const __int32 *)v115);
        v18 = v17;
        if (v116 < 0)
        {
          operator delete(v115[0]);
          if (!v18)
          {
LABEL_80:
            v8 = (_QWORD *)operator new();
            *v8 = off_251146540;
            blahtex::Token::Token((blahtex::Token *)(v8 + 1), (const blahtex::Token *)&v121);
            v10 = v3[2];
            v69 = (unint64_t)v3[3];
            if ((unint64_t)v10 >= v69)
            {
              v70 = (v10 - *v4) >> 3;
              if ((unint64_t)(v70 + 1) >> 61)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v71 = v69 - (_QWORD)*v4;
              v72 = v71 >> 2;
              if (v71 >> 2 <= (unint64_t)(v70 + 1))
                v72 = v70 + 1;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                v15 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v15 = v72;
              if (v15)
                v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v15);
              else
                v16 = 0;
              v45 = &v16[8 * v70];
              *(_QWORD *)v45 = v8;
              v11 = v45 + 8;
              v97 = v3[1];
              v46 = v3[2];
              if (v46 != v97)
              {
                do
                {
                  v98 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *((_QWORD *)v45 - 1) = v98;
                  v45 -= 8;
                }
                while (v46 != v97);
LABEL_43:
                v46 = *v4;
              }
LABEL_44:
              v3[1] = v45;
              v3[2] = v11;
              v3[3] = &v16[8 * v15];
              if (v46)
                operator delete(v46);
LABEL_46:
              v3[2] = v11;
              goto LABEL_135;
            }
LABEL_8:
            *(_QWORD *)v10 = v8;
            v11 = v10 + 8;
            goto LABEL_46;
          }
        }
        else if (!v17)
        {
          goto LABEL_80;
        }
        v19 = (blahtex::ParseTree::TextColour *)operator new();
        blahtex::Parser::ParseColourName(this, (uint64_t)v110);
        blahtex::Token::Token(v115, v110, 0);
        blahtex::ParseTree::TextColour::TextColour(v19, (const blahtex::Token *)v115);
        v21 = (blahtex::ParseTree::TextColour **)v3[2];
        v20 = (unint64_t)v3[3];
        if ((unint64_t)v21 >= v20)
        {
          v73 = ((char *)v21 - *v4) >> 3;
          if ((unint64_t)(v73 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v74 = v20 - (_QWORD)*v4;
          v75 = v74 >> 2;
          if (v74 >> 2 <= (unint64_t)(v73 + 1))
            v75 = v73 + 1;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          if (v76)
            v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v76);
          else
            v77 = 0;
          v99 = (blahtex::ParseTree::TextColour **)&v77[8 * v73];
          *v99 = v19;
          v22 = (char *)(v99 + 1);
          v101 = v3[1];
          v100 = v3[2];
          if (v100 != v101)
          {
            do
            {
              v102 = (blahtex::ParseTree::TextColour *)*((_QWORD *)v100 - 1);
              v100 -= 8;
              *--v99 = v102;
            }
            while (v100 != v101);
            v100 = *v4;
          }
          v3[1] = (char *)v99;
          v3[2] = v22;
          v3[3] = &v77[8 * v76];
          if (v100)
            operator delete(v100);
        }
        else
        {
          *v21 = v19;
          v22 = (char *)(v21 + 1);
        }
        v3[2] = v22;
        if (v116 < 0)
          operator delete(v115[0]);
        if (v111 < 0)
          operator delete(v110[0]);
LABEL_135:
        if (v122 < 0)
          operator delete((void *)v121);
        break;
    }
  }
}

void sub_2411FDD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v43;
  int v44;
  uint64_t v45;

  if (a36 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v45 - 97) < 0)
  {
    operator delete(*(void **)(v45 - 120));
    if ((v44 & 1) == 0)
    {
LABEL_12:
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v43);
  goto LABEL_12;
}

_QWORD *blahtex::ParseTree::MathDelimited::MathDelimited(_QWORD *a1, uint64_t *a2, blahtex::Token *a3, const blahtex::Token *a4)
{
  uint64_t v6;

  v6 = *a2;
  *a2 = 0;
  *a1 = off_25113F9D8;
  a1[1] = v6;
  blahtex::Token::Token((blahtex::Token *)(a1 + 2), a3);
  blahtex::Token::Token((blahtex::Token *)(a1 + 6), a4);
  return a1;
}

void sub_2411FE150(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

blahtex::ParseTree::MathBig *blahtex::ParseTree::MathBig::MathBig(blahtex::ParseTree::MathBig *this, const blahtex::Token *a2, const blahtex::Token *a3)
{
  blahtex::Token *v5;

  *(_QWORD *)this = off_25113F848;
  v5 = (blahtex::ParseTree::MathBig *)((char *)this + 40);
  blahtex::Token::Token((blahtex::ParseTree::MathBig *)((char *)this + 8), a2);
  blahtex::Token::Token(v5, a3);
  return this;
}

void sub_2411FE1E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

blahtex::ParseTree::MathColour *blahtex::ParseTree::MathColour::MathColour(blahtex::ParseTree::MathColour *this, const blahtex::Token *a2)
{
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v5, (__int32 *)"\\");
  blahtex::Token::Token(__p, v5, 0);
  *(_QWORD *)this = off_251146490;
  blahtex::Token::Token((blahtex::ParseTree::MathColour *)((char *)this + 8), (const blahtex::Token *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  *(_QWORD *)this = off_2511464E8;
  blahtex::Token::Token((blahtex::ParseTree::MathColour *)((char *)this + 40), a2);
  return this;
}

void sub_2411FE2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;

  *(_QWORD *)v21 = v23 + 16;
  if (*(char *)(v21 + 31) < 0)
    operator delete(*v22);
  _Unwind_Resume(exception_object);
}

blahtex::ParseTree::TextColour *blahtex::ParseTree::TextColour::TextColour(blahtex::ParseTree::TextColour *this, const blahtex::Token *a2)
{
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v5, (__int32 *)"\\");
  blahtex::Token::Token(__p, v5, 0);
  *(_QWORD *)this = off_251146540;
  blahtex::Token::Token((blahtex::ParseTree::TextColour *)((char *)this + 8), (const blahtex::Token *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  *(_QWORD *)this = off_251146598;
  blahtex::Token::Token((blahtex::ParseTree::TextColour *)((char *)this + 40), a2);
  return this;
}

void sub_2411FE3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;

  *(_QWORD *)v21 = v23 + 16;
  if (*(char *)(v21 + 31) < 0)
    operator delete(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::wstring,blahtex::Parser::TokenCode>::unordered_map<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>((_QWORD *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2411FE460(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__construct_node<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_2411FE4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::Parser::TokenCode>>>::__construct_node<std::pair<std::wstring_view,blahtex::Parser::TokenCode> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2411FE57C(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(_QWORD *__dst, uint64_t a2)
{
  unint64_t v3;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *(const void **)a2;
  if (v3 >= 5)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v3 | 1) != 5)
      v7 = v3 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v7 + 1);
    __dst[1] = v3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v6 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v6, v5, 4 * v3);
LABEL_9:
  *((_DWORD *)v6 + v3) = 0;
  *((_DWORD *)__dst + 6) = *(_DWORD *)(a2 + 16);
  return __dst;
}

uint64_t std::wstring::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;

  if (a2 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 4)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5)
      v4 = a2 | 1;
    if (v4 >= 0x3FFFFFFFFFFFFFFFLL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v5 = v4 + 1;
    v6 = operator new(4 * (v4 + 1));
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

blahtex::Token *blahtex::Token::Token(blahtex::Token *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  MEMORY[0x242690560]();
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_2411FE718(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::wstring *blahtex::Token::Token(std::wstring *a1, const std::wstring *a2, std::wstring::size_type a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::wstring::operator=(a1, a2);
  a1[1].__r_.__value_.__r.__words[0] = a3;
  return a1;
}

void sub_2411FE76C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::wstring *blahtex::Token::Token(std::wstring *this, const std::wstring *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::wstring::operator=(this, a2);
  this[1].__r_.__value_.__r.__words[0] = a2[1].__r_.__value_.__r.__words[0];
  return this;
}

void sub_2411FE7C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::wstring *blahtex::Token::operator=(std::wstring *this, std::wstring *a2)
{
  if (this != a2)
  {
    std::wstring::operator=(this, a2);
    this[1].__r_.__value_.__r.__words[0] = a2[1].__r_.__value_.__r.__words[0];
  }
  return this;
}

uint64_t blahtex::Token::setSource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  unint64_t v5;

  v4 = (unint64_t)(a4 - a3) >= 0x800 || a4 == a3;
  v5 = ((unint64_t)(a4 - a3) >> 2) | ((a3 - a2) << 7);
  if (v4)
    v5 = 0;
  *(_QWORD *)(result + 24) = v5;
  return result;
}

unint64_t blahtex::Token::append(std::wstring *this, std::wstring::size_type *a2)
{
  const blahtex::Token *v2;
  std::wstring::size_type v4;
  std::wstring::size_type v5;
  const blahtex::Token *v6;
  unint64_t result;

  v2 = (const blahtex::Token *)a2;
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (std::wstring::size_type *)*a2;
    v5 = v4;
  }
  std::wstring::append(this, (const std::wstring::value_type *)a2, v5);
  result = blahtex::_combineTokenSource((blahtex *)this, v2, v6);
  if (result)
    this[1].__r_.__value_.__r.__words[0] = result;
  return result;
}

unint64_t blahtex::_combineTokenSource(blahtex *this, const blahtex::Token *a2, const blahtex::Token *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = *((_QWORD *)a2 + 3);
  if (!v4 || (*((_QWORD *)this + 3) & 0x1FFLL) + (*((_QWORD *)this + 3) >> 9) != v4 >> 9)
    return 0;
  v5 = (*((_QWORD *)a2 + 3) & 0x1FFLL) + (*((_QWORD *)this + 3) & 0x1FFLL);
  v6 = v5 | v3 & 0xFFFFFFFFFFFFFE00;
  if (v5 <= 0x1FE)
    return v6;
  else
    return 0;
}

unint64_t blahtex::Token::sourcePrefixedBy(blahtex::Token *this, const blahtex::Token *a2, const blahtex::Token *a3)
{
  unint64_t result;

  result = blahtex::_combineTokenSource(a2, this, a3);
  if (result)
    *((_QWORD *)this + 3) = result;
  return result;
}

std::wstring *blahtex::Token::operator=(std::wstring *a1, const std::wstring *a2)
{
  std::wstring::operator=(a1, a2);
  return a1;
}

BOOL blahtex::Token::operator==(const __int32 *a1, const __int32 *a2)
{
  int v2;
  size_t v3;
  uint64_t v4;
  int v5;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (!v3)
    return 1;
  if (v5 < 0)
    a2 = *(const __int32 **)a2;
  if (v2 < 0)
    a1 = *(const __int32 **)a1;
  return wmemcmp(a1, a2, v3) == 0;
}

void *blahtex::DelimiterTable(blahtex *this)
{
  unsigned __int8 v1;

  {
    std::unordered_map<std::wstring_view,std::wstring_view>::unordered_map<std::pair<std::wstring_view,std::wstring_view> const*>((uint64_t)&blahtex::DelimiterTable(void)::gDelimiterTable, &blahtex::gDelimiterArray, &blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandArray);
  }
  return &blahtex::DelimiterTable(void)::gDelimiterTable;
}

void sub_2411FEA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathList::BuildLayoutTree(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  const void **v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *i;
  const void *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v6 = operator new();
  v7 = *((_DWORD *)a2 + 5);
  *(_DWORD *)(v6 + 8) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 20) = v7;
  *(_QWORD *)v6 = &off_251138958;
  v8 = v6 + 24;
  *(_QWORD *)(v6 + 24) = v6 + 24;
  *(_QWORD *)(v6 + 32) = v6 + 24;
  *(_QWORD *)(v6 + 40) = 0;
  v44 = *a2;
  v45 = *((_QWORD *)a2 + 2);
  v9 = (_QWORD *)(v6 + 24);
  v10 = *(const void ***)(a1 + 8);
  if (v10 != *(const void ***)(a1 + 16))
  {
    do
    {
      v11 = *v10;
      if (*v10
      {
        (*(void (**)(void *, __int128 *))(*(_QWORD *)v12 + 40))(v12, &v44);
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, const void *, __int128 *))(*(_QWORD *)v11 + 16))(&v43, v11, &v44);
        v13 = v43;
        v14 = operator new(0x18uLL);
        v14[1] = v8;
        v14[2] = v13;
        v15 = *(_QWORD *)(v6 + 24);
        *v14 = v15;
        *(_QWORD *)(v15 + 8) = v14;
        *(_QWORD *)(v6 + 24) = v14;
        ++*(_QWORD *)(v6 + 40);
      }
      ++v10;
    }
    while (v10 != *(const void ***)(a1 + 16));
    v9 = *(_QWORD **)(v6 + 32);
    if (v9 != (_QWORD *)v8)
    {
      v16 = *(_QWORD **)(v6 + 32);
      do
      {
        v17 = v16[2];
        v20 = *(_DWORD *)(v17 + 12);
        v18 = (_DWORD *)(v17 + 12);
        v19 = v20;
        if ((v20 - 5) < 2 || v19 == 3)
        {
          if (v16 == v9)
            goto LABEL_25;
          v22 = *(_QWORD *)(*v16 + 16);
          v23 = *(_DWORD *)(v22 + 12);
          v18 = (_DWORD *)(v22 + 12);
          if (v23 != 2)
            goto LABEL_25;
        }
        else
        {
          if (v19 != 2)
            goto LABEL_25;
          if (v16 != v9)
          {
            v24 = *(_DWORD *)(*(_QWORD *)(*v16 + 16) + 12);
            if ((v24 - 1) >= 4 && v24 != 6)
              goto LABEL_25;
          }
        }
        *v18 = 0;
LABEL_25:
        v16 = (_QWORD *)v16[1];
      }
      while (v16 != (_QWORD *)v8);
    }
  }
  if (*(_QWORD *)(v6 + 40))
  {
    v26 = *(_QWORD *)(*(_QWORD *)v8 + 16);
    if (*(_DWORD *)(v26 + 12) == 2)
      *(_DWORD *)(v26 + 12) = 0;
  }
  if (v9 != (_QWORD *)v8)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = v28;
      v28 = v9;
      while (1)
      {
        v30 = (const void *)v28[2];
        if (!v30
        {
          break;
        }
        v28 = (_QWORD *)v28[1];
        if (v28 == (_QWORD *)v8)
          goto LABEL_44;
      }
      if (v28 == (_QWORD *)v8)
        break;
      if ((v27 & 1) != 0)
      {
        v31 = *(unsigned int *)(v29[2] + 12);
        v32 = *(unsigned int *)(v28[2] + 12);
        if (blahtex::ParseTree::MathList::BuildLayoutTree(blahtex::TexProcessingState const&)const::ignoreSpaceTable[8 * v31 + v32]
          && (a2[1] & 0xFFFFFFFE) == 2)
        {
          v33 = 0;
        }
        else
        {
          v33 = blahtex::ParseTree::MathList::BuildLayoutTree(blahtex::TexProcessingState const&)const::spaceTable[8 * v31 + v32];
        }
        v34 = operator new();
        *(_QWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = 0;
        *(_QWORD *)v34 = &unk_2511390F8;
        *(_DWORD *)(v34 + 24) = v33;
        *(_BYTE *)(v34 + 28) = 0;
        v35 = operator new(0x18uLL);
        v35[2] = v34;
        v36 = *v28;
        *(_QWORD *)(v36 + 8) = v35;
        *v35 = v36;
        *v28 = v35;
        v35[1] = v28;
        ++*(_QWORD *)(v6 + 40);
      }
      v9 = (_QWORD *)v28[1];
      v27 = 1;
    }
    while (v9 != (_QWORD *)v8);
  }
LABEL_44:
  for (i = *(uint64_t **)(v6 + 32); i != (uint64_t *)v8; i = (uint64_t *)i[1])
  {
    v38 = (const void *)i[2];
    if (v38)
    {
      if (v39)
      {
        v40 = v39;
        std::list<blahtex::LayoutTree::Node *>::splice(v8, i, v39 + 3);
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
        v41 = *i;
        v42 = (uint64_t *)i[1];
        *(_QWORD *)(v41 + 8) = v42;
        *(_QWORD *)i[1] = v41;
        --*(_QWORD *)(v6 + 40);
        operator delete(i);
        i = v42;
      }
    }
  }
  *a3 = v6;
}

void sub_2411FEDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::list<blahtex::LayoutTree::Node *>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  const std::wstring *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  __int32 *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  __int32 *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::wstring::size_type v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BOOL4 v57;
  int v58;
  unsigned __int8 v59;
  std::wstring::size_type v60;
  std::wstring::size_type v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  unsigned __int8 v66;
  std::wstring::size_type v67;
  std::wstring::size_type v68;
  _QWORD *v69;
  _BOOL4 v70;
  unsigned __int8 v71;
  std::wstring::size_type v72;
  std::wstring::size_type v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  std::logic_error *exception;
  void *v85[2];
  char v86;
  std::wstring __dst;
  uint64_t v88;
  std::wstring v89;
  std::wstring v90;
  std::wstring v91;
  uint64_t v92;
  std::wstring v93;
  uint64_t v94;
  void *v95[2];
  char v96;
  std::wstring __p;
  std::wstring v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];

  v6 = (const std::wstring *)(a1 + 8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_241223774);
  v7 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98);
  v8 = v7;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v98.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_3;
  }
  else if (v7)
  {
LABEL_3:
    v9 = operator new();
    (*(void (**)(_QWORD *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(v103, *(_QWORD *)(a1 + 40), a2);
    v10 = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v9 + 8) = *(unsigned int *)(v103[0] + 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 20) = v10;
    *(_QWORD *)v9 = off_2511392F8;
    blahtex::Token::Token((std::wstring *)(v9 + 24), v6);
    v11 = v103[0];
LABEL_12:
    *(_QWORD *)(v9 + 56) = v11;
    *a3 = v9;
    return;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_24122378C);
  v12 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98);
  v13 = v12;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v98.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_7;
  }
  else if (v12)
  {
LABEL_7:
    v9 = operator new();
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v102, *(_QWORD *)(a1 + 40), a2);
    v14 = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v9 + 8) = *(unsigned int *)(v102 + 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 20) = v14;
    *(_QWORD *)v9 = off_251139258;
    blahtex::Token::Token((std::wstring *)(v9 + 24), v6);
    v11 = v102;
    goto LABEL_12;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_2412237B0);
  v15 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98);
  v16 = v15;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v98.__r_.__value_.__l.__data_);
    if (v16)
      goto LABEL_11;
  }
  else if (v15)
  {
LABEL_11:
    v9 = operator new();
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v101, *(_QWORD *)(a1 + 40), a2);
    v17 = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v9 + 8) = *(unsigned int *)(v101 + 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 20) = v17;
    *(_QWORD *)v9 = off_2511392A8;
    blahtex::Token::Token((std::wstring *)(v9 + 24), v6);
    v11 = v101;
    goto LABEL_12;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_2412237D0);
  if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98))
  {
    v18 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_241223800);
    v18 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99);
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v18)
  {
    v99 = *a2;
    v100 = *((_QWORD *)a2 + 2);
    v19 = *((int *)a2 + 4);
    if (v19 < 4)
      LODWORD(v100) = dword_241225210[v19];
    v20 = operator new();
    v85[0] = &unk_241223570;
    v85[1] = 0;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v95, dword_2412237D0);
    if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v95))
      v21 = (__int32 *)&unk_241223834;
    else
      v21 = (__int32 *)&unk_24122383C;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, v21);
    blahtex::Token::Token(&v98, &__p, *(_QWORD *)(a1 + 32));
    blahtex::LayoutTree::SymbolOperator::SymbolOperator(v20, 1, (uint64_t)v85, 0, &v98, *((unsigned __int8 *)a2 + 4), *((_DWORD *)a2 + 4), 3, 0, *((_DWORD *)a2 + 5));
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v96 < 0)
      operator delete(v95[0]);
    v22 = operator new();
    v24 = *((_DWORD *)a2 + 4);
    v23 = *((_DWORD *)a2 + 5);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v94, *(_QWORD *)(a1 + 40), &v99);
    *(_DWORD *)(v22 + 8) = v24;
    *(_QWORD *)(v22 + 12) = 0x200000001;
    *(_DWORD *)(v22 + 20) = v23;
    *(_QWORD *)v22 = &off_251139130;
    *(_BYTE *)(v22 + 24) = 0;
    v25 = v94;
    *(_QWORD *)(v22 + 32) = v20;
    *(_QWORD *)(v22 + 40) = v25;
    *(_QWORD *)(v22 + 48) = 0;
LABEL_34:
    *a3 = v22;
    return;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_241223844);
  if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98))
  {
    v26 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_241223870);
    v26 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99);
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v26)
  {
    v27 = operator new();
    v95[0] = &unk_241223570;
    v95[1] = 0;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_241223844);
    if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99))
      v28 = (__int32 *)&unk_2412238A0;
    else
      v28 = (__int32 *)&unk_2412238A8;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v93, v28);
    blahtex::Token::Token(&v98, &v93, *(_QWORD *)(a1 + 32));
    blahtex::LayoutTree::SymbolOperator::SymbolOperator(v27, 1, (uint64_t)v95, 1, &v98, 0, 2, 0, 0, *((_DWORD *)a2 + 5));
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
    v98 = *(std::wstring *)a2;
    v29 = *((_DWORD *)a2 + 4) != 0;
    v98.__r_.__value_.__s.__data_[4] = v29;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_241223870);
    v30 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99);
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
    if (v30)
      v31 = v27;
    else
      v31 = 0;
    if (v30)
      v32 = 0;
    else
      v32 = v27;
    v33 = operator new();
    v34 = *((_DWORD *)a2 + 5);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(&v92, *(_QWORD *)(a1 + 40), &v98);
    *(_DWORD *)(v33 + 8) = v29;
    *(_QWORD *)(v33 + 12) = 0x100000001;
    *(_DWORD *)(v33 + 20) = v34;
    *(_QWORD *)v33 = &off_251139130;
    *(_BYTE *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = v92;
    *(_QWORD *)(v33 + 40) = v32;
    *(_QWORD *)(v33 + 48) = v31;
    *a3 = v33;
    return;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_2412238B0);
  v35 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v35)
  {
    v22 = operator new();
    v36 = *((_DWORD *)a2 + 5);
    *(_DWORD *)(v22 + 8) = *((_DWORD *)a2 + 4);
    *(_DWORD *)(v22 + 12) = 0;
    *(_DWORD *)(v22 + 16) = 0;
    *(_DWORD *)(v22 + 20) = v36;
    *(_QWORD *)v22 = &off_251138958;
    v37 = v22 + 24;
    *(_QWORD *)(v22 + 24) = v22 + 24;
    *(_QWORD *)(v22 + 32) = v22 + 24;
    *(_QWORD *)(v22 + 40) = 0;
    v38 = *((unsigned __int8 *)a2 + 4);
    v39 = operator new();
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)v39 = &unk_2511390F8;
    *(_QWORD *)(v39 + 8) = 0;
    *(_DWORD *)(v39 + 24) = 12;
    *(_BYTE *)(v39 + 28) = 1;
    v40 = operator new(0x18uLL);
    v40[1] = v22 + 24;
    v40[2] = v39;
    v41 = *(_QWORD *)(v22 + 24);
    *v40 = v41;
    *(_QWORD *)(v41 + 8) = v40;
    *(_QWORD *)(v22 + 24) = v40;
    ++*(_QWORD *)(v22 + 40);
    v42 = operator new();
    *(_QWORD *)&v99 = &unk_241223570;
    *((_QWORD *)&v99 + 1) = 0;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v91, (__int32 *)&unk_2412238C8);
    blahtex::Token::Token(&v98, &v91, 0);
    blahtex::LayoutTree::SymbolOperator::SymbolOperator(v42, 0, (uint64_t)&v99, 0, &v98, v38, *((_DWORD *)a2 + 4), 4, 0, *((_DWORD *)a2 + 5));
    v43 = operator new(0x18uLL);
    v43[1] = v22 + 24;
    v43[2] = v42;
    v44 = *(_QWORD *)(v22 + 24);
    *v43 = v44;
    *(_QWORD *)(v44 + 8) = v43;
    *(_QWORD *)(v22 + 24) = v43;
    ++*(_QWORD *)(v22 + 40);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    v45 = operator new();
    *(_QWORD *)&v99 = &unk_241223570;
    *((_QWORD *)&v99 + 1) = 0;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v90, dword_2412238D0);
    blahtex::Token::Token(&v98, &v90, *(_QWORD *)(a1 + 32));
    blahtex::LayoutTree::SymbolOperator::SymbolOperator(v45, 0, (uint64_t)&v99, 0, &v98, v38, *((_DWORD *)a2 + 4), 0, 0, *((_DWORD *)a2 + 5));
    v46 = operator new(0x18uLL);
    v46[1] = v37;
    v46[2] = v45;
    v47 = *(_QWORD *)(v22 + 24);
    *v46 = v47;
    *(_QWORD *)(v47 + 8) = v46;
    *(_QWORD *)(v22 + 24) = v46;
    ++*(_QWORD *)(v22 + 40);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v48 = operator new();
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)v48 = &unk_2511390F8;
    *(_DWORD *)(v48 + 24) = 6;
    *(_BYTE *)(v48 + 28) = 1;
    v49 = operator new(0x18uLL);
    v49[1] = v37;
    v49[2] = v48;
    v50 = *(_QWORD *)(v22 + 24);
    *v49 = v50;
    *(_QWORD *)(v50 + 8) = v49;
    *(_QWORD *)(v22 + 24) = v49;
    ++*(_QWORD *)(v22 + 40);
    (*(void (**)(std::wstring *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v98, *(_QWORD *)(a1 + 40), a2);
    v51 = v98.__r_.__value_.__r.__words[0];
    v52 = operator new(0x18uLL);
    v52[1] = v37;
    v52[2] = v51;
    v53 = *(_QWORD *)(v22 + 24);
    *v52 = v53;
    *(_QWORD *)(v53 + 8) = v52;
    *(_QWORD *)(v22 + 24) = v52;
    ++*(_QWORD *)(v22 + 40);
    v54 = operator new();
    *(_QWORD *)&v99 = &unk_241223570;
    *((_QWORD *)&v99 + 1) = 0;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v89, (__int32 *)&unk_2412238E0);
    blahtex::Token::Token(&v98, &v89, 0);
    blahtex::LayoutTree::SymbolOperator::SymbolOperator(v54, 0, (uint64_t)&v99, 0, &v98, v38, *((_DWORD *)a2 + 4), 5, 0, *((_DWORD *)a2 + 5));
    v55 = operator new(0x18uLL);
    v55[1] = v37;
    v55[2] = v54;
    v56 = *(_QWORD *)(v22 + 24);
    *v55 = v56;
    *(_QWORD *)(v56 + 8) = v55;
    *(_QWORD *)(v22 + 24) = v55;
    ++*(_QWORD *)(v22 + 40);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_2412238E8);
  if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98))
  {
    v57 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_241223920);
    v57 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99);
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v57)
  {
    v98 = *(std::wstring *)a2;
    v98.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(_QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v98);
    *(_DWORD *)(*a3 + 12) = 1;
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_2412238E8);
    if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99))
      v58 = 2;
    else
      v58 = 0;
    *(_DWORD *)(*a3 + 16) = v58;
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
    return;
  }
  if ((v59 & 1) == 0
  {
    std::unordered_map<std::wstring_view,blahtex::LayoutTree::Node::Flavour>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const*>((uint64_t)blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandTable, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandArray, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v61 = *(_QWORD *)(a1 + 8);
    v60 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v60 = *(unsigned __int8 *)(a1 + 31);
    v61 = (std::wstring::size_type)v6;
  }
  v98.__r_.__value_.__r.__words[0] = v61;
  v98.__r_.__value_.__l.__size_ = v60;
  v62 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::flavourCommandTable, (uint64_t)&v98);
  if (v62)
  {
    v63 = v62;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2);
    v64 = *((_DWORD *)v63 + 8);
    v65 = *a3;
    *(_DWORD *)(*a3 + 12) = v64;
    if (v64 == 1)
      *(_DWORD *)(v65 + 16) = 0;
    return;
  }
  if ((v66 & 1) == 0
  {
    std::unordered_map<std::wstring_view,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>((uint64_t)blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandTable, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandArray, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v68 = *(_QWORD *)(a1 + 8);
    v67 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v67 = *(unsigned __int8 *)(a1 + 31);
    v68 = (std::wstring::size_type)v6;
  }
  v98.__r_.__value_.__r.__words[0] = v68;
  v98.__r_.__value_.__l.__size_ = v67;
  v69 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::fontCommandTable, (uint64_t)&v98);
  if (v69)
  {
    v98 = *(std::wstring *)a2;
    v98.__r_.__value_.__s.__data_[0] = *((_DWORD *)v69 + 8);
LABEL_104:
    (*(void (**)(_QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v98);
    return;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_241223BC4);
  v70 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v70)
  {
    v98 = *(std::wstring *)a2;
    BYTE4(v98.__r_.__value_.__r.__words[0]) = 1;
    v98.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_104;
  }
  if ((v71 & 1) == 0
  {
    std::unordered_map<std::wstring_view,blahtex::ParseTree::AccentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const*>((uint64_t)blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandTable, (uint64_t)&blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandArray, (uint64_t)&blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v73 = *(_QWORD *)(a1 + 8);
    v72 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v72 = *(unsigned __int8 *)(a1 + 31);
    v73 = (std::wstring::size_type)v6;
  }
  v98.__r_.__value_.__r.__words[0] = v73;
  v98.__r_.__value_.__l.__size_ = v72;
  v74 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathCommand1Arg::BuildLayoutTree(blahtex::TexProcessingState const&)const::accentCommandTable, (uint64_t)&v98);
  if (!v74)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected command in MathCommand1Arg::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v75 = v74;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v88, *(_QWORD *)(a1 + 40), a2);
  v76 = operator new();
  v77 = (uint64_t)(v75 + 4);
  LODWORD(v75) = *((unsigned __int8 *)v75 + 48);
  *(_QWORD *)&v99 = &unk_241223570;
  *((_QWORD *)&v99 + 1) = 0;
  std::wstring::basic_string<std::wstring_view,0>(&__dst, v77);
  blahtex::Token::Token(&v98, &__dst, *(_QWORD *)(a1 + 32));
  blahtex::LayoutTree::SymbolOperator::SymbolOperator(v76, (_DWORD)v75 != 0, (uint64_t)&v99, 1, &v98, *((unsigned __int8 *)a2 + 4), *((_DWORD *)a2 + 4), 0, 0, *((_DWORD *)a2 + 5));
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v98, dword_241223C80);
  if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v98))
  {
    v78 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v99, dword_241223DF4);
    if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v99))
    {
      v78 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v95, dword_241223E34);
      if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v95))
      {
        v78 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v85, dword_241223E78);
        v78 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v85);
        if (v86 < 0)
          operator delete(v85[0]);
      }
      if (v96 < 0)
        operator delete(v95[0]);
    }
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  v79 = operator new();
  if (v78)
    v80 = 0;
  else
    v80 = v76;
  if (v78)
    v81 = v76;
  else
    v81 = 0;
  v82 = *((_DWORD *)a2 + 5);
  v83 = v88;
  *(_DWORD *)(v79 + 8) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(v79 + 12) = 0;
  *(_DWORD *)(v79 + 16) = 0;
  *(_DWORD *)(v79 + 20) = v82;
  *(_QWORD *)v79 = &off_251139130;
  *(_BYTE *)(v79 + 24) = 0;
  *(_QWORD *)(v79 + 32) = v83;
  *(_QWORD *)(v79 + 40) = v80;
  *(_QWORD *)(v79 + 48) = v81;
  *a3 = v79;
}

void sub_2411FFD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  _Unwind_Resume(a1);
}

_QWORD *std::wstring::basic_string<std::wstring_view,0>(_QWORD *__dst, uint64_t a2)
{
  unint64_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = *(const void **)a2;
  if (v3 >= 5)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v3 | 1) != 5)
      v6 = v3 | 1;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, 4 * v3);
LABEL_9:
  *((_DWORD *)v5 + v3) = 0;
  return __dst;
}

uint64_t blahtex::ParseTree::MathStateChange::BuildLayoutTree@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = operator new();
  v5 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_QWORD *)result = &off_251138958;
  *(_QWORD *)(result + 24) = result + 24;
  *(_QWORD *)(result + 32) = result + 24;
  *(_QWORD *)(result + 40) = 0;
  *a2 = result;
  return result;
}

uint64_t blahtex::ParseTree::MathColour::BuildLayoutTree@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = operator new();
  v5 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_QWORD *)result = &off_251138958;
  *(_QWORD *)(result + 24) = result + 24;
  *(_QWORD *)(result + 32) = result + 24;
  *(_QWORD *)(result + 40) = 0;
  *a2 = result;
  return result;
}

uint64_t blahtex::ParseTree::TextStateChange::BuildLayoutTree@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = operator new();
  v5 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_QWORD *)result = &off_251138958;
  *(_QWORD *)(result + 24) = result + 24;
  *(_QWORD *)(result + 32) = result + 24;
  *(_QWORD *)(result + 40) = 0;
  *a2 = result;
  return result;
}

uint64_t blahtex::ParseTree::TextColour::BuildLayoutTree@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = operator new();
  v5 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_QWORD *)result = &off_251138958;
  *(_QWORD *)(result + 24) = result + 24;
  *(_QWORD *)(result + 32) = result + 24;
  *(_QWORD *)(result + 40) = 0;
  *a2 = result;
  return result;
}

void blahtex::ParseTree::MathCommand2Args::BuildLayoutTree(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  BOOL v8;
  int v9;
  _BOOL4 v10;
  void *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  std::wstring::size_type v44;
  std::wstring::size_type v45;
  uint64_t v46;
  std::wstring::size_type v47;
  int v48;
  int v49;
  std::logic_error *exception;
  uint64_t v51;
  uint64_t v52;
  std::wstring v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  std::wstring v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::wstring v61;
  std::wstring __p;
  std::wstring v63;
  std::wstring v64;
  uint64_t v65;
  uint64_t v66;
  std::wstring v67;
  __int128 v68;
  uint64_t v69;
  std::wstring v70;
  std::wstring v71;

  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v71, &dword_241223570);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v70, &dword_241223570);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_24122402C);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64))
  {
    v6 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241224044);
    v6 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_11:
      v9 = 0;
      goto LABEL_30;
    }
  }
  else if (v6)
  {
    goto LABEL_11;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_24122405C);
  v7 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64);
  v8 = v7;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_11;
  }
  else if (v7)
  {
    goto LABEL_11;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241224074);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64))
  {
    v10 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241224090);
    v10 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_19;
  }
  else if (v10)
  {
LABEL_19:
    MEMORY[0x242690560](&v71, &unk_2412238C8);
    v11 = &unk_2412238E0;
LABEL_29:
    MEMORY[0x242690560](&v70, v11);
    v9 = 1;
LABEL_30:
    v68 = *a2;
    v69 = *((_QWORD *)a2 + 2);
    v15 = *((_DWORD *)a2 + 4);
    if (v15 <= 2)
      LODWORD(v69) = v15 + 1;
    v16 = operator new();
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, &dword_241223570);
    blahtex::Token::Token(&v67, &v64, *(_QWORD *)(a1 + 32));
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    v18 = *((_DWORD *)a2 + 4);
    v17 = *((_DWORD *)a2 + 5);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v66, *(_QWORD *)(a1 + 40), &v68);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 48) + 16))(&v65, *(_QWORD *)(a1 + 48), &v68);
    *(_DWORD *)(v16 + 8) = v18;
    *(_DWORD *)(v16 + 12) = 0;
    *(_DWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 20) = v17;
    *(_QWORD *)v16 = off_251139168;
    blahtex::Token::Token((std::wstring *)(v16 + 24), &v67);
    v19 = v65;
    *(_QWORD *)(v16 + 56) = v66;
    *(_QWORD *)(v16 + 64) = v19;
    *(_BYTE *)(v16 + 72) = v6;
    v65 = 0;
    v66 = 0;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v67.__r_.__value_.__l.__data_);
      if (v9)
      {
LABEL_36:
        v20 = operator new();
        v22 = *((_DWORD *)a2 + 4);
        v21 = *((_DWORD *)a2 + 5);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          std::wstring::__init_copy_ctor_external(&v63, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
        else
          v63 = v71;
        blahtex::Token::Token(&v64, &v63, 0);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          std::wstring::__init_copy_ctor_external(&v61, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
        else
          v61 = v70;
        blahtex::Token::Token(&__p, &v61, 0);
        v60 = v16;
        blahtex::LayoutTree::Fenced::Fenced(v20, v22, v21, &v64, &__p, &v60);
        *a3 = v20;
        v23 = v60;
        v60 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        {
          v24 = (void *)v63.__r_.__value_.__r.__words[0];
LABEL_54:
          operator delete(v24);
          goto LABEL_55;
        }
        goto LABEL_55;
      }
    }
    else if (v9)
    {
      goto LABEL_36;
    }
    *a3 = v16;
    goto LABEL_55;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2412240B0);
  v12 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64);
  v13 = v12;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_23;
  }
  else if (v12)
  {
LABEL_23:
    MEMORY[0x242690560](&v71, &unk_2412240CC);
    v11 = &unk_2412240D4;
    goto LABEL_29;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_2412240DC);
  v14 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v14)
  {
    MEMORY[0x242690560](&v71, &unk_2412240F8);
    v11 = &unk_241224100;
    goto LABEL_29;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241224108);
  v25 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (v25)
  {
    v64 = *(std::wstring *)a2;
    v64.__r_.__value_.__s.__data_[4] = 3;
    v26 = operator new();
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 48) + 16))(&v59, *(_QWORD *)(a1 + 48), a2);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(&v58, *(_QWORD *)(a1 + 40), &v64);
    v27 = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v26 + 8) = *(unsigned int *)(v59 + 8);
    *(_DWORD *)(v26 + 16) = 0;
    *(_DWORD *)(v26 + 20) = v27;
    *(_QWORD *)v26 = off_251139348;
    blahtex::Token::Token((std::wstring *)(v26 + 24), (const std::wstring *)(a1 + 8));
    v28 = v58;
    *(_QWORD *)(v26 + 56) = v59;
    *(_QWORD *)(v26 + 64) = v28;
    *a3 = v26;
    v58 = 0;
    v59 = 0;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241224140);
    v29 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (v29)
    {
      v64 = *(std::wstring *)a2;
      v64.__r_.__value_.__s.__data_[4] = 1;
      v30 = operator new();
      blahtex::Token::Token(&v57, (const std::wstring *)(a1 + 8));
      v31 = *((_DWORD *)a2 + 5);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(&v56, *(_QWORD *)(a1 + 40), &v64);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 48) + 16))(&v55, *(_QWORD *)(a1 + 48), &v64);
      *(_QWORD *)(v30 + 8) = 0;
      *(_DWORD *)(v30 + 16) = 0;
      *(_DWORD *)(v30 + 20) = v31;
      *(_QWORD *)v30 = off_251139168;
      blahtex::Token::Token((std::wstring *)(v30 + 24), &v57);
      v32 = v55;
      *(_QWORD *)(v30 + 56) = v56;
      *(_QWORD *)(v30 + 64) = v32;
      *(_BYTE *)(v30 + 72) = 1;
      *a3 = v30;
      v55 = 0;
      v56 = 0;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        v24 = (void *)v57.__r_.__value_.__r.__words[0];
        goto LABEL_54;
      }
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_24122415C);
      if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64))
      {
        v33 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_2412241AC);
        v33 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (v33)
      {
        __p = *(std::wstring *)a2;
        v34 = *((int *)a2 + 4);
        if (v34 < 4)
          __p.__r_.__value_.__s.__data_[4] = dword_241225210[v34];
        v35 = operator new();
        v54[0] = &dword_241223570;
        v54[1] = 0;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v68, dword_24122415C);
        if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v68))
          v36 = (__int32 *)&unk_241223834;
        else
          v36 = (__int32 *)&unk_24122383C;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v53, v36);
        blahtex::Token::Token(&v64, &v53, *(_QWORD *)(a1 + 32));
        blahtex::LayoutTree::SymbolOperator::SymbolOperator(v35, 1, (uint64_t)v54, 0, &v64, *((unsigned __int8 *)a2 + 4), *((_DWORD *)a2 + 4), 3, 0, *((_DWORD *)a2 + 5));
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69) < 0)
          operator delete((void *)v68);
        v37 = operator new();
        v39 = *((_DWORD *)a2 + 4);
        v38 = *((_DWORD *)a2 + 5);
        (*(void (**)(uint64_t *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 48) + 16))(&v52, *(_QWORD *)(a1 + 48), &__p);
        (*(void (**)(uint64_t *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(&v51, *(_QWORD *)(a1 + 40), &__p);
        *(_DWORD *)(v37 + 8) = v39;
        *(_QWORD *)(v37 + 12) = 0x200000001;
        *(_DWORD *)(v37 + 20) = v38;
        *(_QWORD *)v37 = &off_251139130;
        *(_BYTE *)(v37 + 24) = 0;
        v40 = v52;
        *(_QWORD *)(v37 + 32) = v35;
        *(_QWORD *)(v37 + 40) = v40;
        *(_QWORD *)(v37 + 48) = v51;
        *a3 = v37;
        v51 = 0;
        v52 = 0;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v64, dword_241224200);
        if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v64))
        {
          v41 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241224224);
          v41 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (!v41)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Unexpected command in MathCommand2Args::BuildLayoutTree");
          __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
        }
        v64 = *(std::wstring *)a2;
        v42 = *((int *)a2 + 4);
        if (v42 < 4)
          v64.__r_.__value_.__s.__data_[4] = dword_241225210[v42];
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241224200);
        v43 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::wstring *__return_ptr, _QWORD, std::wstring *))(**(_QWORD **)(a1 + 40) + 16))(&__p, *(_QWORD *)(a1 + 40), &v64);
        if (v43)
        {
          v44 = 0;
          v45 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v45 = 0;
          v44 = __p.__r_.__value_.__r.__words[0];
        }
        (*(void (**)(std::wstring *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 48) + 16))(&__p, *(_QWORD *)(a1 + 48), a2);
        v46 = operator new();
        v47 = __p.__r_.__value_.__r.__words[0];
        v48 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 12);
        v49 = *((_DWORD *)a2 + 5);
        *(_DWORD *)(v46 + 8) = *((_DWORD *)a2 + 4);
        *(_DWORD *)(v46 + 12) = v48;
        *(_DWORD *)(v46 + 16) = 2;
        *(_DWORD *)(v46 + 20) = v49;
        *(_QWORD *)v46 = &off_251139130;
        *(_BYTE *)(v46 + 24) = 0;
        *(_QWORD *)(v46 + 32) = v47;
        *(_QWORD *)(v46 + 40) = v45;
        *(_QWORD *)(v46 + 48) = v44;
        *a3 = v46;
      }
    }
  }
LABEL_55:
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
}

void sub_241200D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (*(char *)(v59 - 81) < 0)
    operator delete(*(void **)(v59 - 104));
  _Unwind_Resume(exception_object);
}

void sub_241201108()
{
  JUMPOUT(0x2412010F0);
}

uint64_t blahtex::ParseTree::MathScripts::BuildLayoutTree@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = a1[1];
  if (v6)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v6 + 16))(&v19, v6, a2);
    v7 = v19;
    v8 = *(_DWORD *)(v19 + 12);
    v9 = *(_DWORD *)(v19 + 16);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  v10 = *((int *)a2 + 4);
  if (v10 <= 3)
    LODWORD(v20) = dword_241225210[v10];
  v11 = a1[2];
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(&v18, v11, &v19);
    v12 = v18;
  }
  else
  {
    v12 = 0;
  }
  v13 = a1[3];
  if (v13)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v13 + 16))(&v18, v13, &v19);
    v14 = v18;
  }
  else
  {
    v14 = 0;
  }
  if (v8 != 1)
    goto LABEL_16;
  if (v9 == 1)
  {
    v15 = 0;
    goto LABEL_17;
  }
  if (v9)
LABEL_16:
    v15 = 1;
  else
    v15 = *((_DWORD *)a2 + 4) != 0;
LABEL_17:
  result = operator new();
  v17 = *((_DWORD *)a2 + 5);
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(result + 12) = v8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v17;
  *(_QWORD *)result = &off_251139130;
  *(_BYTE *)(result + 24) = v15;
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v12;
  *(_QWORD *)(result + 48) = v14;
  *a3 = result;
  return result;
}

void sub_241201278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (!v1)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  goto LABEL_4;
}

void blahtex::ParseTree::MathLimits::BuildLayoutTree(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __int32 *v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  std::wstring *exception;
  std::logic_error *v12;
  _BYTE v13[24];
  _BYTE v14[24];
  void *__p[2];
  char v16;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(a2);
  if (*(_DWORD *)(*a2 + 12) != 1)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122424C);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v14, &dword_241223570);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, &dword_241223570);
    blahtex::Exception::Exception(exception, (__int128 *)__p, a1 + 8, (uint64_t)v14, (uint64_t)v13);
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122428C);
  v4 = (const __int32 *)(a1 + 8);
  v5 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
  v6 = v5;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_4;
  }
  else if (v5)
  {
LABEL_4:
    v7 = 1;
    goto LABEL_14;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2412242AC);
  v8 = blahtex::Token::operator==(v4, (const __int32 *)__p);
  v9 = v8;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_8;
  }
  else if (v8)
  {
LABEL_8:
    v7 = 2;
    goto LABEL_14;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2412242D4);
  v10 = blahtex::Token::operator==(v4, (const __int32 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (!v10)
  {
    v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Unexpected command in MathLimits::BuildLayoutTree.");
    __cxa_throw(v12, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v7 = 0;
LABEL_14:
  *(_DWORD *)(*a2 + 16) = v7;
}

void sub_2412014AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t *v27;
  uint64_t v29;

  v29 = *v27;
  *v27 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Unwind_Resume(exception_object);
}

_QWORD *blahtex::ParseTree::MathGroup::BuildLayoutTree@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(a2);
  *(_DWORD *)(*a2 + 12) = 0;
  return result;
}

_QWORD *blahtex::ParseTree::MathPhantom::BuildLayoutTree@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(a2);
  *(_DWORD *)(*a2 + 12) = 0;
  return result;
}

_QWORD *blahtex::ParseTree::MathCancel::BuildLayoutTree@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(a2);
  *(_DWORD *)(*a2 + 12) = 0;
  return result;
}

void blahtex::ParseTree::MathDelimited::BuildLayoutTree(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  std::wstring::size_type v12;
  const void *v13;
  std::wstring *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::wstring::size_type v20;
  const void *v21;
  std::wstring *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  std::wstring v28;
  std::wstring __p;
  _QWORD v30[2];
  std::wstring __dst;
  std::wstring v32;
  _OWORD *v33;

  blahtex::DelimiterTable((blahtex *)a1);
  v6 = operator new();
  if (*(char *)(a1 + 39) < 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v7 = a1 + 16;
    v8 = *(unsigned __int8 *)(a1 + 39);
  }
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 20);
  v30[0] = v7;
  v30[1] = v8;
  __p.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v30;
  v11 = std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::piecewise_construct_t const&,std::tuple<std::wstring_view&&>,std::tuple<>>((uint64_t)&blahtex::DelimiterTable(void)::gDelimiterTable, (uint64_t)v30, (uint64_t)&std::piecewise_construct, &__p);
  v12 = v11[5];
  if (v12 > 0x3FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (const void *)v11[4];
  if (v12 >= 5)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v12 | 1) != 5)
      v15 = v12 | 1;
    p_dst = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&__dst, v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::wstring::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11[5];
  p_dst = &__dst;
  if (v12)
LABEL_11:
    memmove(p_dst, v13, 4 * v12);
  p_dst->__r_.__value_.__s.__data_[v12] = 0;
  blahtex::Token::Token(&v32, &__dst, *(_QWORD *)(a1 + 40));
  if (*(char *)(a1 + 71) < 0)
  {
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v17 = a1 + 48;
    v18 = *(unsigned __int8 *)(a1 + 71);
  }
  v27[0] = v17;
  v27[1] = v18;
  v33 = v27;
  v19 = std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::piecewise_construct_t const&,std::tuple<std::wstring_view&&>,std::tuple<>>((uint64_t)&blahtex::DelimiterTable(void)::gDelimiterTable, (uint64_t)v27, (uint64_t)&std::piecewise_construct, &v33);
  v20 = v19[5];
  if (v20 > 0x3FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (const void *)v19[4];
  if (v20 >= 5)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v20 | 1) != 5)
      v23 = v20 | 1;
    v22 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v28, v23 + 1);
    v28.__r_.__value_.__l.__size_ = v20;
    v28.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    v28.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v22;
    goto LABEL_22;
  }
  *((_BYTE *)&v28.__r_.__value_.__s + 23) = v19[5];
  v22 = &v28;
  if (v20)
LABEL_22:
    memmove(v22, v21, 4 * v20);
  v22->__r_.__value_.__s.__data_[v20] = 0;
  blahtex::Token::Token(&__p, &v28, *(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(&v26, *(_QWORD *)(a1 + 8), a2);
  blahtex::LayoutTree::Fenced::Fenced(v6, v9, v10, &v32, &__p, &v26);
  *a3 = v6;
  v25 = v26;
  v26 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_2412018A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  MEMORY[0x242690740](v38, 0x10B3C4046C60783);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathMiddle::BuildLayoutTree(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  std::wstring::size_type v12;
  const void *v13;
  std::wstring *p_dst;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  std::wstring __dst;
  std::wstring __p;
  _OWORD *v20;

  blahtex::DelimiterTable((blahtex *)a1);
  v6 = operator new();
  if (*(char *)(a1 + 31) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v7 = a1 + 8;
    v8 = *(unsigned __int8 *)(a1 + 31);
  }
  v10 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v17[0] = v7;
  v17[1] = v8;
  v20 = v17;
  v11 = std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::piecewise_construct_t const&,std::tuple<std::wstring_view&&>,std::tuple<>>((uint64_t)&blahtex::DelimiterTable(void)::gDelimiterTable, (uint64_t)v17, (uint64_t)&std::piecewise_construct, &v20);
  v12 = v11[5];
  if (v12 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (const void *)v11[4];
  if (v12 >= 5)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v12 | 1) != 5)
      v15 = v12 | 1;
    p_dst = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&__dst, v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::wstring::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11[5];
  p_dst = &__dst;
  if (v12)
LABEL_11:
    memmove(p_dst, v13, 4 * v12);
  p_dst->__r_.__value_.__s.__data_[v12] = 0;
  blahtex::Token::Token(&__p, &__dst, *(_QWORD *)(a1 + 32));
  *(_DWORD *)(v6 + 8) = v10;
  *(_QWORD *)(v6 + 12) = 7;
  *(_DWORD *)(v6 + 20) = v9;
  *(_QWORD *)v6 = off_251139208;
  blahtex::Token::Token((std::wstring *)(v6 + 24), &__p);
  *a3 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_241201AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  MEMORY[0x242690740](v23, 0x1093C40C1F8B455);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathBig::BuildLayoutTree(uint64_t a1@<X0>, uint64_t a2@<X1>, blahtex **a3@<X8>)
{
  unsigned __int8 v6;
  std::wstring::size_type v7;
  std::wstring::size_type v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  blahtex *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::wstring::size_type v16;
  const void *v17;
  std::wstring *p_dst;
  uint64_t v19;
  uint64_t v20;
  std::logic_error *exception;
  _QWORD v22[2];
  std::wstring __dst;
  std::wstring __p;
  _OWORD *v25;

  if ((v6 & 1) == 0
  {
    std::unordered_map<std::wstring_view,blahtex::ParseTree::BigInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const*>((uint64_t)blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandTable, (uint64_t)&blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandArray, (uint64_t)&blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v7 = a1 + 8;
    v8 = *(unsigned __int8 *)(a1 + 31);
  }
  __p.__r_.__value_.__r.__words[0] = v7;
  __p.__r_.__value_.__l.__size_ = v8;
  v9 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathBig::BuildLayoutTree(blahtex::TexProcessingState const&)const::bigCommandTable, (uint64_t)&__p);
  if (!v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown command in MathBig::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v10 = v9;
  v11 = *(_DWORD *)(a2 + 16) != 0;
  v12 = (blahtex *)operator new();
  blahtex::DelimiterTable(v12);
  if (*(char *)(a1 + 63) < 0)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v13 = a1 + 40;
    v14 = *(unsigned __int8 *)(a1 + 63);
  }
  v22[0] = v13;
  v22[1] = v14;
  v25 = v22;
  v15 = std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::piecewise_construct_t const&,std::tuple<std::wstring_view&&>,std::tuple<>>((uint64_t)&blahtex::DelimiterTable(void)::gDelimiterTable, (uint64_t)v22, (uint64_t)&std::piecewise_construct, &v25);
  v16 = v15[5];
  if (v16 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (const void *)v15[4];
  if (v16 >= 5)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v16 | 1) != 5)
      v19 = v16 | 1;
    p_dst = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&__dst, v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::wstring::size_type)p_dst;
    goto LABEL_16;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15[5];
  p_dst = &__dst;
  if (v16)
LABEL_16:
    memmove(p_dst, v17, 4 * v16);
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  blahtex::Token::Token(&__p, &__dst, *(_QWORD *)(a1 + 64));
  blahtex::LayoutTree::SymbolOperator::SymbolOperator((uint64_t)v12, 1, (uint64_t)(v10 + 5), 0, &__p, 0, v11, *((_DWORD *)v10 + 8), 0, *(_DWORD *)(a2 + 20));
  *a3 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_241201D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTableRow::BuildLayoutTree()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Arrived unexpectedly in MathTableRow::BuildLayoutTree");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_241201E20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTable::BuildLayoutTree(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char **v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  void *__p;
  void *v31;
  uint64_t v32;

  v5 = operator new();
  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v5 + 12) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 20) = v6;
  *(_QWORD *)v5 = &off_251138990;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v7 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v27 = v5;
  *(_QWORD *)(v5 + 48) = 1;
  v29 = (uint64_t *)(v5 + 24);
  std::vector<std::vector<blahtex::LayoutTree::Node *>>::reserve((uint64_t *)(v5 + 24), v7);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 != *(_QWORD *)(a1 + 16))
  {
    v28 = a1;
    do
    {
      __p = 0;
      v31 = 0;
      v32 = 0;
      std::vector<std::vector<blahtex::LayoutTree::Node *>>::push_back[abi:ne180100](v29, (uint64_t)&__p);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v9 = *(_QWORD **)(*(_QWORD *)v8 + 8);
      if (v9 != *(_QWORD **)(*(_QWORD *)v8 + 16))
      {
        v10 = *(_QWORD *)(v27 + 32);
        v11 = (char **)(v10 - 24);
        do
        {
          (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v9 + 16))(&__p, *v9, a2);
          v12 = __p;
          __p = 0;
          v14 = *(_QWORD **)(v10 - 16);
          v13 = *(_QWORD *)(v10 - 8);
          if ((unint64_t)v14 >= v13)
          {
            v16 = ((char *)v14 - *v11) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v17 = v13 - (_QWORD)*v11;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10 - 8, v19);
            else
              v20 = 0;
            v21 = &v20[8 * v16];
            *(_QWORD *)v21 = v12;
            v15 = v21 + 8;
            v23 = *(char **)(v10 - 24);
            v22 = *(char **)(v10 - 16);
            if (v22 != v23)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v21 - 1) = v24;
                v21 -= 8;
              }
              while (v22 != v23);
              v22 = *v11;
            }
            *(_QWORD *)(v10 - 24) = v21;
            *(_QWORD *)(v10 - 16) = v15;
            *(_QWORD *)(v10 - 8) = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          *(_QWORD *)(v10 - 16) = v15;
          v25 = __p;
          __p = 0;
          if (v25)
            (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
          ++v9;
        }
        while (v9 != *(_QWORD **)(*(_QWORD *)v8 + 16));
      }
      v8 += 8;
    }
    while (v8 != *(_QWORD *)(v28 + 16));
  }
  *a3 = v27;
}

void sub_241202058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<blahtex::LayoutTree::Node *>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<blahtex::LayoutTree::Node *>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_241202150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<blahtex::LayoutTree::Node *>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<blahtex::LayoutTree::Node *>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_24120228C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathEnvironment::BuildLayoutTree(uint64_t a1@<X0>, __int128 *a2@<X1>, void **a3@<X8>)
{
  unsigned __int8 v6;
  const __int32 *v7;
  std::wstring::size_type v8;
  std::wstring::size_type v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  BOOL v19;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  std::wstring::size_type v24;
  int v25;
  const void *v26;
  std::wstring *p_dst;
  uint64_t v28;
  uint64_t v29;
  std::wstring::size_type v30;
  const void *v31;
  std::wstring *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  std::logic_error *v38;
  std::logic_error *exception;
  uint64_t v40;
  std::wstring v41;
  std::wstring __p;
  std::wstring __dst;
  std::wstring v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *lpsrc[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  __int128 v55;
  uint64_t v56;

  if ((v6 & 1) == 0
  {
    std::unordered_map<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const*>((uint64_t)blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentTable, &blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentArray, &blahtex::ParseTree::EnterTextMode::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandArray);
  }
  v7 = (const __int32 *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 31);
    v9 = a1 + 8;
  }
  v44.__r_.__value_.__r.__words[0] = v9;
  v44.__r_.__value_.__l.__size_ = v8;
  v10 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathEnvironment::BuildLayoutTree(blahtex::TexProcessingState const&)const::environmentTable, (uint64_t)&v44);
  if (!v10)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected environment name in MathEnvironment::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v11 = v10;
  v55 = *a2;
  v56 = *((_QWORD *)a2 + 2);
  LODWORD(v55) = 0;
  BYTE4(v55) = *((_BYTE *)a2 + 4);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v44, dword_2412245BC);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v44))
  {
    v12 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_2412245EC);
    v12 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v12)
      goto LABEL_12;
LABEL_14:
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v44, dword_241224574);
    if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&v44))
    {
      v14 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241224610);
      if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)&__p))
      {
        v14 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v53, dword_241224628);
        if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v53))
        {
          v14 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v51, dword_241224644);
          if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v51))
          {
            v14 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)lpsrc, dword_24122465C);
            if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)lpsrc))
            {
              v14 = 1;
            }
            else
            {
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v47, dword_24122467C);
              if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v47))
              {
                v14 = 1;
              }
              else
              {
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v45, dword_241224594);
                v14 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v45);
                if (v46 < 0)
                  operator delete(v45[0]);
              }
              if (v48 < 0)
                operator delete(v47[0]);
            }
            if (v50 < 0)
              operator delete(lpsrc[0]);
          }
          if (v52 < 0)
            operator delete(v51[0]);
        }
        if (v54 < 0)
          operator delete(v53[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if (v14)
        goto LABEL_40;
    }
    else if (v14)
    {
LABEL_40:
      v13 = 0;
      LODWORD(v56) = 0;
      goto LABEL_43;
    }
    LODWORD(v56) = 1;
    v13 = *((_DWORD *)a2 + 4) != 0;
    goto LABEL_43;
  }
  if (!v12)
    goto LABEL_14;
LABEL_12:
  v13 = 0;
  LODWORD(v56) = 2;
LABEL_43:
  (*(void (**)(void **__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(lpsrc, *(_QWORD *)(a1 + 40), &v55);
  if (!lpsrc[0]
  {
    v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v38, "Unexpected node type in MathEnvironment::BuildLayoutTree");
    __cxa_throw(v38, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v16 = v15;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v44, dword_2412245EC);
  v17 = blahtex::Token::operator==(v7, (const __int32 *)&v44);
  v18 = v17;
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v17)
      goto LABEL_48;
    goto LABEL_47;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  if (v18)
LABEL_47:
    v16[13] = 1;
LABEL_48:
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v44, dword_241224574);
  if (blahtex::Token::operator==(v7, (const __int32 *)&v44))
  {
    v19 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_241224610);
    if (blahtex::Token::operator==(v7, (const __int32 *)&__p))
    {
      v19 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v53, dword_241224628);
      if (blahtex::Token::operator==(v7, (const __int32 *)v53))
      {
        v19 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v51, dword_241224644);
        v19 = blahtex::Token::operator==(v7, (const __int32 *)v51);
        if (v52 < 0)
          operator delete(v51[0]);
      }
      if (v54 < 0)
        operator delete(v53[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v19)
      goto LABEL_64;
  }
  else if (v19)
  {
LABEL_64:
    v20 = 2;
LABEL_82:
    v16[12] = v20;
    goto LABEL_83;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v44, dword_24122465C);
  if (blahtex::Token::operator==(v7, (const __int32 *)&v44))
  {
    v21 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, dword_24122467C);
    if (blahtex::Token::operator==(v7, (const __int32 *)&__p))
    {
      v21 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v53, dword_241224594);
      v21 = blahtex::Token::operator==(v7, (const __int32 *)v53);
      if (v54 < 0)
        operator delete(v53[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v21)
      goto LABEL_76;
  }
  else if (v21)
  {
LABEL_76:
    v20 = 3;
    goto LABEL_82;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v44, dword_24122455C);
  v22 = blahtex::Token::operator==(v7, (const __int32 *)&v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v22)
  {
    v20 = 0;
    goto LABEL_82;
  }
LABEL_83:
  if (!v11[5] && !v11[7])
  {
    *a3 = lpsrc[0];
    return;
  }
  v23 = operator new();
  v24 = v11[5];
  if (v24 > 0x3FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = *((_DWORD *)a2 + 5);
  v26 = (const void *)v11[4];
  if (v24 >= 5)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v24 | 1) != 5)
      v28 = v24 | 1;
    p_dst = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&__dst, v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::wstring::size_type)p_dst;
    goto LABEL_92;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11[5];
  p_dst = &__dst;
  if (v24)
LABEL_92:
    memmove(p_dst, v26, 4 * v24);
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  blahtex::Token::Token(&v44, &__dst, 0);
  v30 = v11[7];
  if (v30 > 0x3FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = (const void *)v11[6];
  if (v30 >= 5)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v30 | 1) != 5)
      v33 = v30 | 1;
    v32 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&v41, v33 + 1);
    v41.__r_.__value_.__l.__size_ = v30;
    v41.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    v41.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v32;
  }
  else
  {
    *((_BYTE *)&v41.__r_.__value_.__s + 23) = v30;
    v32 = &v41;
    if (!v30)
      goto LABEL_101;
  }
  memmove(v32, v31, 4 * v30);
LABEL_101:
  v32->__r_.__value_.__s.__data_[v30] = 0;
  blahtex::Token::Token(&__p, &v41, 0);
  v35 = lpsrc[0];
  lpsrc[0] = 0;
  v40 = (uint64_t)v35;
  blahtex::LayoutTree::Fenced::Fenced(v23, v13, v25, &v44, &__p, &v40);
  *a3 = (void *)v23;
  v36 = v40;
  v40 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v37 = lpsrc[0];
  lpsrc[0] = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
}

void sub_241202A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::EnterTextMode::BuildLayoutTree(uint64_t a1, __int128 *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL4 v8;
  std::logic_error *exception;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;

  if ((v4 & 1) == 0
  {
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 31);
    v6 = a1 + 8;
  }
  *(_QWORD *)&v15 = v6;
  *((_QWORD *)&v15 + 1) = v5;
  v7 = std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(blahtex::ParseTree::EnterTextMode::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandTable, (uint64_t)&v15);
  if (!v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected command in EnterTextMode::BuildLayoutTree");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  DWORD2(v15) = *((_DWORD *)v7 + 8);
  WORD6(v15) = *((_WORD *)v7 + 18);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, dword_2412246B8);
  if (blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)v13))
  {
    v8 = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2412246A0);
    v8 = blahtex::Token::operator==((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if (!v8)
      return (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v15);
    goto LABEL_12;
  }
  if (v8)
LABEL_12:
    LODWORD(v16) = 1;
  return (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v15);
}

void sub_241202DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextList::BuildLayoutTree@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  const void **i;
  const void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *lpsrc;
  __int128 v17;
  uint64_t v18;

  result = operator new();
  v7 = result;
  v8 = *((_DWORD *)a2 + 5);
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v8;
  *(_QWORD *)result = &off_251138958;
  v9 = (uint64_t *)(result + 24);
  *(_QWORD *)(result + 24) = result + 24;
  *(_QWORD *)(result + 32) = result + 24;
  *(_QWORD *)(result + 40) = 0;
  v17 = *a2;
  v18 = *((_QWORD *)a2 + 2);
  for (i = *(const void ***)(a1 + 8); i != *(const void ***)(a1 + 16); ++i)
  {
    v11 = *i;
    if (*i
    {
      result = (*(uint64_t (**)(void *, __int128 *))(*(_QWORD *)v12 + 40))(v12, &v17);
    }
    else
    {
      (*(void (**)(void **__return_ptr, const void *, __int128 *))(*(_QWORD *)v11 + 16))(&lpsrc, v11, &v17);
      v13 = lpsrc;
      if (lpsrc
      {
        std::list<blahtex::LayoutTree::Node *>::splice((uint64_t)v9, v9, v14 + 3);
        result = (uint64_t)lpsrc;
        lpsrc = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        result = (uint64_t)operator new(0x18uLL);
        *(_QWORD *)(result + 8) = v9;
        *(_QWORD *)(result + 16) = v13;
        v15 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)result = v15;
        *(_QWORD *)(v15 + 8) = result;
        *(_QWORD *)(v7 + 24) = result;
        ++*(_QWORD *)(v7 + 40);
      }
    }
  }
  *a3 = v7;
  return result;
}

void sub_241202FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextSymbol::BuildLayoutTree(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v6;
  const std::wstring *v7;
  std::wstring::size_type v8;
  std::wstring::size_type v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  std::wstring::size_type v13;
  const void *v14;
  std::wstring *p_dst;
  uint64_t v16;
  int MathmlApproximation;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  std::wstring __dst;
  std::wstring __p;

  if ((v6 & 1) == 0
  {
  }
  v7 = (const std::wstring *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 31);
    v9 = a1 + 8;
  }
  __p.__r_.__value_.__r.__words[0] = v9;
  __p.__r_.__value_.__l.__size_ = v8;
  v10 = std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(blahtex::ParseTree::TextSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::textCommandTable, (uint64_t)&__p);
  if (!v10)
  {
    v16 = operator new();
    MathmlApproximation = blahtex::TexTextFont::GetMathmlApproximation((blahtex::TexTextFont *)(a2 + 2));
    v18 = a2[5];
    *(_DWORD *)(v16 + 8) = a2[4];
    *(_DWORD *)(v16 + 12) = 0;
    *(_DWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 20) = v18;
    *(_QWORD *)v16 = off_251139490;
    blahtex::Token::Token((std::wstring *)(v16 + 24), v7);
    *(_DWORD *)(v16 + 56) = MathmlApproximation;
    *(_QWORD *)v16 = &unk_251139088;
    *a3 = v16;
    return;
  }
  v11 = v10;
  v12 = operator new();
  v13 = v11[5];
  if (v13 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = (const void *)v11[4];
  if (v13 >= 5)
  {
    v19 = (v13 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v13 | 1) != 5)
      v19 = v13 | 1;
    p_dst = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)&__dst, v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::wstring::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
    p_dst = &__dst;
    if (!v13)
      goto LABEL_15;
  }
  memmove(p_dst, v14, 4 * v13);
LABEL_15:
  p_dst->__r_.__value_.__s.__data_[v13] = 0;
  blahtex::Token::Token(&__p, &__dst, 0);
  v21 = blahtex::TexTextFont::GetMathmlApproximation((blahtex::TexTextFont *)(a2 + 2));
  v22 = a2[5];
  *(_DWORD *)(v12 + 8) = a2[4];
  *(_DWORD *)(v12 + 12) = 0;
  *(_DWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 20) = v22;
  *(_QWORD *)v12 = off_251139490;
  blahtex::Token::Token((std::wstring *)(v12 + 24), &__p);
  *(_DWORD *)(v12 + 56) = v21;
  *(_QWORD *)v12 = &unk_251139088;
  *a3 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_24120320C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextGroup::BuildLayoutTree(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *blahtex::ParseTree::TextPhantom::BuildLayoutTree@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(a2);
  *(_DWORD *)(*a2 + 12) = 0;
  return result;
}

_QWORD *blahtex::ParseTree::TextCancel::BuildLayoutTree@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(a2);
  *(_DWORD *)(*a2 + 12) = 0;
  return result;
}

std::wstring *blahtex::ParseTree::TextCommand1Arg::BuildLayoutTree@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  const std::wstring *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  std::wstring *result;
  uint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  char v25;
  _BOOL4 v26;
  _BOOL4 v27;
  BOOL v28;
  std::logic_error *exception;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  __int128 v46;
  uint64_t v47;

  v46 = *a2;
  v47 = *((_QWORD *)a2 + 2);
  v6 = (const std::wstring *)(a1 + 8);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_2412246E8);
  v7 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  v8 = v7;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (v8)
      goto LABEL_3;
  }
  else if (v7)
  {
LABEL_3:
    DWORD2(v46) = 0;
    goto LABEL_13;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_241224780);
  v9 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  v10 = v9;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (v10)
      goto LABEL_7;
  }
  else if (v9)
  {
LABEL_7:
    v11 = 2;
LABEL_12:
    DWORD2(v46) = v11;
    goto LABEL_13;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_241224760);
  v12 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  v13 = v12;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (v13)
      goto LABEL_11;
  }
  else if (v12)
  {
LABEL_11:
    v11 = 1;
    goto LABEL_12;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_241224740);
  v23 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  v24 = v23;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (v24)
      goto LABEL_27;
  }
  else if (v23)
  {
LABEL_27:
    v25 = 1;
LABEL_33:
    BYTE13(v46) = v25;
    goto LABEL_13;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_241224728);
  v26 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v26)
  {
    v25 = BYTE13(v46) ^ 1;
    goto LABEL_33;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_241224708);
  v27 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v27)
  {
    BYTE12(v46) = 1;
  }
  else
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_2412246D0);
    if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44))
    {
      v28 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v42, dword_2412246B8);
      if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v42))
      {
        v28 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v40, dword_2412246A0);
        if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v40))
        {
          v28 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v38, dword_2412247A0);
          if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v38))
          {
            v28 = 1;
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v36, dword_2412247B4);
            if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v36))
            {
              v28 = 1;
            }
            else
            {
              std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v34, dword_24122378C);
              if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v34))
              {
                v28 = 1;
              }
              else
              {
                std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_2412237B0);
                v28 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)__p);
                if (v33 < 0)
                  operator delete(__p[0]);
              }
              if (v35 < 0)
                operator delete(v34[0]);
            }
            if (v37 < 0)
              operator delete(v36[0]);
          }
          if (v39 < 0)
            operator delete(v38[0]);
        }
        if (v41 < 0)
          operator delete(v40[0]);
      }
      if (v43 < 0)
        operator delete(v42[0]);
    }
    if (v45 < 0)
      operator delete(v44[0]);
    if (!v28)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected command in TextCommand1Arg::BuildLayoutTree");
      __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
    }
  }
LABEL_13:
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_24122378C);
  v14 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  v15 = v14;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (v15)
      goto LABEL_15;
  }
  else if (v14)
  {
LABEL_15:
    v16 = operator new();
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v31, *(_QWORD *)(a1 + 40), a2);
    v17 = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v16 + 8) = *(unsigned int *)(v31 + 8);
    *(_DWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 20) = v17;
    *(_QWORD *)v16 = off_251139258;
    result = blahtex::Token::Token((std::wstring *)(v16 + 24), v6);
    v19 = v31;
LABEL_20:
    *(_QWORD *)(v16 + 56) = v19;
    *a3 = v16;
    return result;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v44, dword_2412237B0);
  v20 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v44);
  v21 = v20;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    if (v21)
      goto LABEL_19;
  }
  else if (v20)
  {
LABEL_19:
    v16 = operator new();
    (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(&v30, *(_QWORD *)(a1 + 40), a2);
    v22 = *((_DWORD *)a2 + 5);
    *(_QWORD *)(v16 + 8) = *(unsigned int *)(v30 + 8);
    *(_DWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 20) = v22;
    *(_QWORD *)v16 = off_2511392A8;
    result = blahtex::Token::Token((std::wstring *)(v16 + 24), v6);
    v19 = v30;
    goto LABEL_20;
  }
  return (std::wstring *)(*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v46);
}

void sub_2412037F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  if (*(char *)(v38 - 81) < 0)
    operator delete(*(void **)(v38 - 104));
  _Unwind_Resume(exception_object);
}

void blahtex::ParseTree::MathCommand1Arg::~MathCommand1Arg(blahtex::ParseTree::MathCommand1Arg *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_25113F758;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_25113F758;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathCommand2Args::~MathCommand2Args(blahtex::ParseTree::MathCommand2Args *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_25113F7A8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_25113F7A8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathMiddle::~MathMiddle(void **this)
{
  *this = off_25113F7F8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_25113F7F8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathBig::~MathBig(void **this)
{
  *this = off_25113F848;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_25113F848;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathGroup::~MathGroup(blahtex::ParseTree::MathGroup *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113F898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113F898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathPhantom::~MathPhantom(blahtex::ParseTree::MathPhantom *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113F8E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113F8E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathCancel::~MathCancel(blahtex::ParseTree::MathCancel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113F938;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113F938;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathLimits::~MathLimits(blahtex::ParseTree::MathLimits *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_25113F988;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_25113F988;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathDelimited::~MathDelimited(void **this)
{
  void *v2;

  *this = off_25113F9D8;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  v2 = this[1];
  this[1] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;

  *this = off_25113F9D8;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  v2 = this[1];
  this[1] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathEnvironment::~MathEnvironment(blahtex::ParseTree::MathEnvironment *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_25113FA28;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_25113FA28;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::EnterTextMode::~EnterTextMode(blahtex::ParseTree::EnterTextMode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_25113FA78;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_25113FA78;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextGroup::~TextGroup(blahtex::ParseTree::TextGroup *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113FAC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113FAC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextPhantom::~TextPhantom(blahtex::ParseTree::TextPhantom *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113FB18;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113FB18;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextCancel::~TextCancel(blahtex::ParseTree::TextCancel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113FB68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25113FB68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextSymbol::~TextSymbol(void **this)
{
  *this = off_25113FBB8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_25113FBB8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextCommand1Arg::~TextCommand1Arg(blahtex::ParseTree::TextCommand1Arg *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_25113FC08;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_25113FC08;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathScripts::~MathScripts(blahtex::ParseTree::MathScripts *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25113FC58;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25113FC58;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x242690740);
}

uint64_t blahtex::LayoutTree::SymbolOperator::SymbolOperator(uint64_t a1, char a2, uint64_t a3, char a4, const std::wstring *a5, int a6, int a7, int a8, int a9, int a10)
{
  void *v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 12) = a8;
  *(_DWORD *)(a1 + 16) = a9;
  *(_DWORD *)(a1 + 20) = a10;
  *(_QWORD *)a1 = off_251139490;
  blahtex::Token::Token((std::wstring *)(a1 + 24), a5);
  *(_DWORD *)(a1 + 56) = a6;
  *(_QWORD *)a1 = off_2511390C0;
  *(_BYTE *)(a1 + 60) = a2;
  v15 = (void *)(a1 + 64);
  v16 = *(_QWORD *)(a3 + 8);
  if (v16 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = *(const void **)a3;
  if (v16 >= 5)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v16 | 1) != 5)
      v18 = v16 | 1;
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(a1 + 64, v18 + 1);
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v19 | 0x8000000000000000;
    *(_QWORD *)(a1 + 64) = v15;
  }
  else
  {
    *(_BYTE *)(a1 + 87) = v16;
    if (!v16)
      goto LABEL_9;
  }
  memmove(v15, v17, 4 * v16);
LABEL_9:
  *((_DWORD *)v15 + v16) = 0;
  *(_BYTE *)(a1 + 88) = a4;
  return a1;
}

void sub_24120455C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::LayoutTree::Fenced::Fenced(uint64_t a1, int a2, int a3, const std::wstring *a4, const std::wstring *a5, uint64_t *a6)
{
  uint64_t v9;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = 7;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = off_2511391B8;
  blahtex::Token::Token((std::wstring *)(a1 + 24), a4);
  blahtex::Token::Token((std::wstring *)(a1 + 56), a5);
  v9 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 88) = v9;
  return a1;
}

void sub_2412045F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::LayoutTree::Node::Flavour>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241204678(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::LayoutTree::Node::Flavour>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::LayoutTree::Node::Flavour> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + 8) = *(_DWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2412048DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241204954(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexMathFont::Family>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + 8) = *(_DWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_241204BB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::ParseTree::AccentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241204C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::AccentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::AccentInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v16;
  v14[6] = *(_QWORD *)(a3 + 32);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_241204E94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,std::wstring_view>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,std::wstring_view>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,std::wstring_view>>>::__emplace_unique_key_args<std::wstring_view,std::piecewise_construct_t const&,std::tuple<std::wstring_view&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v10;
  *((_OWORD *)v15 + 1) = **a4;
  v15[4] = 0;
  v15[5] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v15 = *v24;
LABEL_38:
    *v24 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return v15;
}

void sub_2412050F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::ParseTree::BigInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241205170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::BigInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::BigInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v16;
  v14[6] = *(_QWORD *)(a3 + 32);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2412053D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<blahtex::LayoutTree::Node *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<blahtex::LayoutTree::Node *>>,std::reverse_iterator<std::vector<blahtex::LayoutTree::Node *>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<blahtex::LayoutTree::Node *>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::unordered_map<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>::unordered_map<std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const&>(a1, (uint64_t)v5, v5);
      v5 += 3;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241205664(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::ParseTree::EnvironmentInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::ParseTree::EnvironmentInfo> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x40uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = a3[2];
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_2412058C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::TexTextFont>::unordered_map<std::pair<std::wstring_view,blahtex::TexTextFont> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexTextFont> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241205940(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::TexTextFont> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v14[4] = *(_QWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_241205BA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void blahtex::ParseTree::MathSymbol::BuildLayoutTree(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const blahtex::Token *v6;
  int v7;
  __int32 *v8;
  uint64_t v9;
  int v10;
  int v12;
  int v13;
  char v14;
  char v15;
  std::wstring *v16;
  int v17;
  uint64_t v18;
  int MathmlApproximation;
  int v20;
  char *v21;
  unsigned __int8 v22;
  std::wstring::size_type v23;
  std::wstring::size_type v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  void *v32;
  unsigned __int8 v33;
  std::wstring::size_type v34;
  std::wstring::size_type v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned __int8 v43;
  std::wstring::size_type v44;
  std::wstring::size_type v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  unsigned __int8 v50;
  std::wstring::size_type v51;
  std::wstring::size_type v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  const void *v57;
  _QWORD *v58;
  unsigned __int8 v59;
  std::wstring::size_type v60;
  std::wstring::size_type v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  const void *v69;
  _QWORD *v70;
  _BOOL4 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  _BOOL4 v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _BOOL4 v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _BOOL4 v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _BOOL4 v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  _BOOL4 v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL4 v137;
  uint64_t v138;
  uint64_t v139;
  std::logic_error *v140;
  std::wstring *exception;
  std::wstring *v142;
  std::wstring *v143;
  std::wstring *v144;
  void *v145[2];
  char v146;
  _QWORD v147[2];
  char v148;
  _QWORD v149[2];
  char v150;
  _QWORD v151[2];
  char v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  void *__p[2];
  char v166;
  _QWORD v167[2];
  unint64_t v168;
  _QWORD __dst[2];
  unint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  char v174;
  std::wstring v175;
  void *v176[2];
  char v177;
  __int32 *v178;
  uint64_t v179;
  char v180;

  v6 = (const blahtex::Token *)(a1 + 8);
  v7 = *(char *)(a1 + 31);
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 != 1)
      goto LABEL_35;
    v8 = *(__int32 **)a2;
    v155[0] = *(void **)a2;
    LODWORD(v9) = *(_DWORD *)v6;
    if (*(int *)v6 > 64)
    {
      if (v9 < 0x5B)
        goto LABEL_14;
      if ((int)v9 >= 97)
      {
        if (v9 >= 0x7B)
          goto LABEL_34;
LABEL_14:
        v12 = 0;
        v13 = 3;
        if ((_DWORD)v8)
        {
LABEL_15:
          if ((_DWORD)v8 == 7)
            v14 = v12 ^ 1;
          else
            v14 = 1;
          if ((v14 & 1) == 0)
          {
            exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225244);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v178, dword_2412252C8);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v176, &dword_2412252D8);
            blahtex::Exception::Exception(exception, (__int128 *)&v175, (uint64_t)v6, (uint64_t)&v178, (uint64_t)v176);
          }
          if ((_DWORD)v8 == 6)
            v15 = v12 ^ 1;
          else
            v15 = 1;
          if ((v15 & 1) == 0)
          {
            v16 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225244);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v178, dword_2412252DC);
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v176, &dword_2412252D8);
            blahtex::Exception::Exception(v16, (__int128 *)&v175, (uint64_t)v6, (uint64_t)&v178, (uint64_t)v176);
          }
          goto LABEL_30;
        }
LABEL_29:
        LODWORD(v155[0]) = v13;
LABEL_30:
        v18 = operator new();
        if (v12)
        {
          MathmlApproximation = blahtex::TexMathFont::GetMathmlApproximation((blahtex::TexMathFont *)v155);
          v20 = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(v18 + 12) = 0;
          *(_DWORD *)(v18 + 16) = 0;
          *(_DWORD *)(v18 + 20) = v20;
          *(_QWORD *)v18 = off_251139490;
          blahtex::Token::Token((blahtex::Token *)(v18 + 24), v6);
        }
        else
        {
          MathmlApproximation = blahtex::TexMathFont::GetMathmlApproximation((blahtex::TexMathFont *)v155);
          v36 = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(v18 + 12) = 0;
          *(_DWORD *)(v18 + 16) = 0;
          *(_DWORD *)(v18 + 20) = v36;
          *(_QWORD *)v18 = off_251139490;
          blahtex::Token::Token((blahtex::Token *)(v18 + 24), v6);
        }
        *(_DWORD *)(v18 + 56) = MathmlApproximation;
        *(_QWORD *)v18 = v21 + 16;
        *a3 = v18;
        return;
      }
    }
    v17 = *(_DWORD *)v6;
    if ((int)v9 < 48)
      goto LABEL_35;
    goto LABEL_27;
  }
  if (*(_QWORD *)(a1 + 16) != 1)
    goto LABEL_35;
  v8 = *(__int32 **)a2;
  v155[0] = *(void **)a2;
  v10 = **(_DWORD **)v6;
  if (v10 >= 65 && (v10 < 0x5B || (v10 - 97) < 0x1A))
    goto LABEL_14;
  v9 = *(_QWORD *)v6;
  v17 = **(_DWORD **)v6;
  if (v17 > 47)
  {
LABEL_27:
    if (v17 <= 0x39)
    {
      v12 = 1;
      v13 = 1;
      if ((_DWORD)v8)
        goto LABEL_15;
      goto LABEL_29;
    }
  }
  if (v7 < 0)
    LODWORD(v9) = **(_DWORD **)v6;
LABEL_34:
  if ((int)v9 >= 128)
  {
    v140 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v140, "Unexpected non-ASCII character in MathSymbol::BuildLayoutTree");
    goto LABEL_208;
  }
LABEL_35:
  if ((v22 & 1) == 0
  {
    std::unordered_map<std::wstring_view,wchar_t>::unordered_map<std::pair<std::wstring_view,wchar_t> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::lowercaseGreekTable, (uint64_t)&blahtex::lowercaseGreekArray, (uint64_t)&blahtex::uppercaseGreekArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v24 = *(_QWORD *)(a1 + 8);
    v23 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v23 = *(unsigned __int8 *)(a1 + 31);
    v24 = (std::wstring::size_type)v6;
  }
  v175.__r_.__value_.__r.__words[0] = v24;
  v175.__r_.__value_.__l.__size_ = v23;
  v25 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::lowercaseGreekTable, (uint64_t)&v175);
  if (v25)
  {
    v26 = v25;
    v27 = operator new();
    v28 = *((_DWORD *)v26 + 8);
    v174 = 1;
    v173 = v28;
    blahtex::Token::Token(&v175, &v173, *(_QWORD *)(a1 + 32));
    v29 = *(unsigned __int8 *)(a2 + 4);
    v30 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(v27 + 8) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v27 + 12) = 0;
    *(_DWORD *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 20) = v30;
    *(_QWORD *)v27 = off_251139490;
    blahtex::Token::Token((blahtex::Token *)(v27 + 24), (const blahtex::Token *)&v175);
    if (v29)
      v31 = 3;
    else
      v31 = 2;
    *(_DWORD *)(v27 + 56) = v31;
    *(_QWORD *)v27 = &unk_251139018;
    *a3 = v27;
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v174 < 0)
    {
      v32 = (void *)v173;
LABEL_60:
      operator delete(v32);
      return;
    }
    return;
  }
  if ((v33 & 1) == 0
  {
    std::unordered_map<std::wstring_view,wchar_t>::unordered_map<std::pair<std::wstring_view,wchar_t> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::uppercaseGreekTable, (uint64_t)&blahtex::uppercaseGreekArray, (uint64_t)&blahtex::spaceArray);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v35 = *(_QWORD *)(a1 + 8);
    v34 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v34 = *(unsigned __int8 *)(a1 + 31);
    v35 = (std::wstring::size_type)v6;
  }
  v175.__r_.__value_.__r.__words[0] = v35;
  v175.__r_.__value_.__l.__size_ = v34;
  v37 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::uppercaseGreekTable, (uint64_t)&v175);
  if (!v37)
  {
    if ((v43 & 1) == 0
    {
      std::unordered_map<std::wstring_view,int>::unordered_map<std::pair<std::wstring_view,int> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::spaceTable, (uint64_t)&blahtex::spaceArray, (uint64_t)&blahtex::identifierArray);
    }
    if (*(char *)(a1 + 31) < 0)
    {
      v45 = *(_QWORD *)(a1 + 8);
      v44 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v44 = *(unsigned __int8 *)(a1 + 31);
      v45 = (std::wstring::size_type)v6;
    }
    v175.__r_.__value_.__r.__words[0] = v45;
    v175.__r_.__value_.__l.__size_ = v44;
    v46 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::spaceTable, (uint64_t)&v175);
    if (v46)
    {
      v47 = v46;
      v48 = operator new();
      v49 = *((_DWORD *)v47 + 8);
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)v48 = &unk_2511390F8;
      *(_QWORD *)(v48 + 8) = 0;
      *(_DWORD *)(v48 + 24) = v49;
      *(_BYTE *)(v48 + 28) = 1;
      *a3 = v48;
      return;
    }
    if ((v50 & 1) == 0
    {
      std::unordered_map<std::wstring_view,blahtex::OperatorInfo>::unordered_map<std::pair<std::wstring_view,blahtex::OperatorInfo> const*>((uint64_t)blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::operatorTable, (uint64_t)&blahtex::operatorArray, (uint64_t)(&blahtex::operatorArray + 2210));
    }
    if (*(char *)(a1 + 31) < 0)
    {
      v52 = *(_QWORD *)(a1 + 8);
      v51 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v51 = *(unsigned __int8 *)(a1 + 31);
      v52 = (std::wstring::size_type)v6;
    }
    v175.__r_.__value_.__r.__words[0] = v52;
    v175.__r_.__value_.__l.__size_ = v51;
    v53 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::operatorTable, (uint64_t)&v175);
    if (v53)
    {
      v54 = v53;
      v55 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      v56 = v54[5];
      if (v56 > 0x3FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v57 = (const void *)v54[4];
      if (v56 >= 5)
      {
        v62 = (v56 & 0xFFFFFFFFFFFFFFFELL) + 2;
        if ((v56 | 1) != 5)
          v62 = v56 | 1;
        v58 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)__dst, v62 + 1);
        __dst[1] = v56;
        v170 = v63 | 0x8000000000000000;
        __dst[0] = v58;
      }
      else
      {
        HIBYTE(v170) = v54[5];
        v58 = __dst;
        if (!v56)
        {
LABEL_84:
          *((_DWORD *)v58 + v56) = 0;
          blahtex::Token::Token(&v175, __dst, *(_QWORD *)(a1 + 32));
          blahtex::LayoutTree::SymbolOperator::SymbolOperator(v55, 0, (uint64_t)&v178, 0, &v175, *(unsigned __int8 *)(a2 + 4), *(_DWORD *)(a2 + 16), *((_DWORD *)v54 + 12), *((_DWORD *)v54 + 13), *(_DWORD *)(a2 + 20));
          *a3 = v55;
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v175.__r_.__value_.__l.__data_);
          if (SHIBYTE(v170) < 0)
          {
            v32 = (void *)__dst[0];
            goto LABEL_60;
          }
          return;
        }
      }
      memmove(v58, v57, 4 * v56);
      goto LABEL_84;
    }
    if ((v59 & 1) == 0
    {
    }
    if (*(char *)(a1 + 31) < 0)
    {
      v61 = *(_QWORD *)(a1 + 8);
      v60 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v60 = *(unsigned __int8 *)(a1 + 31);
      v61 = (std::wstring::size_type)v6;
    }
    v175.__r_.__value_.__r.__words[0] = v61;
    v175.__r_.__value_.__l.__size_ = v60;
    v64 = std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::ParseTree::MathSymbol::BuildLayoutTree(blahtex::TexProcessingState const&)const::identifierTable, (uint64_t)&v175);
    if (v64)
    {
      v65 = v64;
      v178 = *(__int32 **)a2;
      if (*((_BYTE *)v64 + 32))
        v66 = 3;
      else
        v66 = 1;
      LODWORD(v178) = v66;
      v67 = operator new();
      v68 = v65[6];
      if (v68 > 0x3FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v69 = (const void *)v65[5];
      if (v68 >= 5)
      {
        v83 = (v68 & 0xFFFFFFFFFFFFFFFELL) + 2;
        if ((v68 | 1) != 5)
          v83 = v68 | 1;
        v70 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)v167, v83 + 1);
        v167[1] = v68;
        v168 = v84 | 0x8000000000000000;
        v167[0] = v70;
      }
      else
      {
        HIBYTE(v168) = v65[6];
        v70 = v167;
        if (!v68)
        {
LABEL_109:
          *((_DWORD *)v70 + v68) = 0;
          blahtex::Token::Token(&v175, v167, *(_QWORD *)(a1 + 32));
          v85 = blahtex::TexMathFont::GetMathmlApproximation((blahtex::TexMathFont *)&v178);
          v86 = *((_DWORD *)v65 + 14);
          v87 = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(v67 + 8) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(v67 + 12) = v86;
          *(_DWORD *)(v67 + 16) = 2 * (v86 == 1);
          *(_DWORD *)(v67 + 20) = v87;
          *(_QWORD *)v67 = off_251139490;
          blahtex::Token::Token((blahtex::Token *)(v67 + 24), (const blahtex::Token *)&v175);
          *(_DWORD *)(v67 + 56) = v85;
          *(_QWORD *)v67 = &unk_251139018;
          *a3 = v67;
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v175.__r_.__value_.__l.__data_);
          if (SHIBYTE(v168) < 0)
          {
            v32 = (void *)v167[0];
            goto LABEL_60;
          }
          return;
        }
      }
      memmove(v70, v69, 4 * v68);
      goto LABEL_109;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_2412252FC);
    v71 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v71)
    {
      v72 = operator new();
      v73 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v72 + 20) = v73;
      *(_QWORD *)v72 = &off_251138958;
      v74 = v72 + 24;
      *(_QWORD *)(v72 + 24) = v72 + 24;
      *(_QWORD *)(v72 + 32) = v72 + 24;
      *(_QWORD *)(v72 + 40) = 0;
      *(_QWORD *)(v72 + 12) = 3;
      v75 = operator new();
      *(_QWORD *)(v75 + 16) = 0;
      *(_QWORD *)v75 = &unk_2511390F8;
      *(_QWORD *)(v75 + 8) = 0;
      *(_DWORD *)(v75 + 24) = 5;
      *(_BYTE *)(v75 + 28) = 1;
      v76 = operator new(0x18uLL);
      v76[1] = v72 + 24;
      v76[2] = v75;
      v77 = *(_QWORD *)(v72 + 24);
      *v76 = v77;
      *(_QWORD *)(v77 + 8) = v76;
      *(_QWORD *)(v72 + 24) = v76;
      ++*(_QWORD *)(v72 + 40);
      v78 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_241225310);
      blahtex::Token::Token(&v175, __p, *(_QWORD *)(a1 + 32));
      blahtex::LayoutTree::SymbolOperator::SymbolOperator(v78, 0, (uint64_t)&v178, 0, &v175, *(unsigned __int8 *)(a2 + 4), *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
      v79 = operator new(0x18uLL);
      v79[1] = v72 + 24;
      v79[2] = v78;
      v80 = *(_QWORD *)(v72 + 24);
      *v79 = v80;
      *(_QWORD *)(v80 + 8) = v79;
      *(_QWORD *)(v72 + 24) = v79;
      ++*(_QWORD *)(v72 + 40);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v166 < 0)
        operator delete(__p[0]);
      v81 = operator new();
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      *(_QWORD *)v81 = &unk_2511390F8;
      *(_DWORD *)(v81 + 24) = 5;
      *(_BYTE *)(v81 + 28) = 1;
      v82 = operator new(0x18uLL);
LABEL_145:
      v82[2] = v81;
      v120 = *(_QWORD *)(v72 + 24);
      *v82 = v120;
      v82[1] = v74;
      *(_QWORD *)(v120 + 8) = v82;
      *(_QWORD *)(v72 + 24) = v82;
      ++*(_QWORD *)(v72 + 40);
      *a3 = v72;
      return;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225318);
    v88 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v88)
    {
      v72 = operator new();
      v89 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v72 + 20) = v89;
      *(_QWORD *)v72 = &off_251138958;
      v74 = v72 + 24;
      *(_QWORD *)(v72 + 24) = v72 + 24;
      *(_QWORD *)(v72 + 32) = v72 + 24;
      *(_QWORD *)(v72 + 40) = 0;
      *(_QWORD *)(v72 + 12) = 3;
      v90 = operator new();
      *(_QWORD *)(v90 + 16) = 0;
      *(_QWORD *)v90 = &unk_2511390F8;
      *(_QWORD *)(v90 + 8) = 0;
      *(_DWORD *)(v90 + 24) = 5;
      *(_BYTE *)(v90 + 28) = 1;
      v91 = operator new(0x18uLL);
      v91[1] = v72 + 24;
      v91[2] = v90;
      v92 = *(_QWORD *)(v72 + 24);
      *v91 = v92;
      *(_QWORD *)(v92 + 8) = v91;
      *(_QWORD *)(v72 + 24) = v91;
      ++*(_QWORD *)(v72 + 40);
      v93 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v163, (__int32 *)&unk_24122532C);
      blahtex::Token::Token(&v175, v163, *(_QWORD *)(a1 + 32));
      blahtex::LayoutTree::SymbolOperator::SymbolOperator(v93, 0, (uint64_t)&v178, 0, &v175, *(unsigned __int8 *)(a2 + 4), *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
      v94 = operator new(0x18uLL);
      v94[1] = v72 + 24;
      v94[2] = v93;
      v95 = *(_QWORD *)(v72 + 24);
      *v94 = v95;
      *(_QWORD *)(v95 + 8) = v94;
      *(_QWORD *)(v72 + 24) = v94;
      ++*(_QWORD *)(v72 + 40);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v164 < 0)
        operator delete(v163[0]);
      v81 = operator new();
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      *(_QWORD *)v81 = &unk_2511390F8;
      *(_DWORD *)(v81 + 24) = 5;
      *(_BYTE *)(v81 + 28) = 1;
      v82 = operator new(0x18uLL);
      goto LABEL_145;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225334);
    v96 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v96)
    {
      v72 = operator new();
      v97 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v72 + 12) = 0;
      *(_DWORD *)(v72 + 16) = 0;
      *(_DWORD *)(v72 + 20) = v97;
      *(_QWORD *)v72 = &off_251138958;
      v74 = v72 + 24;
      *(_QWORD *)(v72 + 24) = v72 + 24;
      *(_QWORD *)(v72 + 32) = v72 + 24;
      *(_QWORD *)(v72 + 40) = 0;
      v98 = operator new();
      *(_QWORD *)(v98 + 16) = 0;
      *(_QWORD *)v98 = &unk_2511390F8;
      *(_QWORD *)(v98 + 8) = 0;
      *(_DWORD *)(v98 + 24) = 2;
      *(_BYTE *)(v98 + 28) = 1;
      v99 = operator new(0x18uLL);
      v99[1] = v72 + 24;
      v99[2] = v98;
      v100 = *(_QWORD *)(v72 + 24);
      *v99 = v100;
      *(_QWORD *)(v100 + 8) = v99;
      *(_QWORD *)(v72 + 24) = v99;
      ++*(_QWORD *)(v72 + 40);
      v101 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v161, (__int32 *)&unk_241225350);
      blahtex::Token::Token(&v175, v161, *(_QWORD *)(a1 + 32));
      blahtex::LayoutTree::SymbolOperator::SymbolOperator(v101, 0, (uint64_t)&v178, 0, &v175, *(unsigned __int8 *)(a2 + 4), *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
      v102 = operator new(0x18uLL);
      v102[1] = v72 + 24;
      v102[2] = v101;
      v103 = *(_QWORD *)(v72 + 24);
      *v102 = v103;
      *(_QWORD *)(v103 + 8) = v102;
      *(_QWORD *)(v72 + 24) = v102;
      ++*(_QWORD *)(v72 + 40);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v162 < 0)
        operator delete(v161[0]);
      v81 = operator new();
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      *(_QWORD *)v81 = &unk_2511390F8;
      *(_DWORD *)(v81 + 24) = 6;
      *(_BYTE *)(v81 + 28) = 1;
      v82 = operator new(0x18uLL);
      goto LABEL_145;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225358);
    v104 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v104)
    {
      v72 = operator new();
      v105 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v72 + 20) = v105;
      *(_QWORD *)v72 = &off_251138958;
      v74 = v72 + 24;
      *(_QWORD *)(v72 + 24) = v72 + 24;
      *(_QWORD *)(v72 + 32) = v72 + 24;
      *(_QWORD *)(v72 + 40) = 0;
      *(_QWORD *)(v72 + 12) = 2;
      v106 = operator new();
      *(_QWORD *)(v106 + 16) = 0;
      *(_QWORD *)v106 = &unk_2511390F8;
      *(_QWORD *)(v106 + 8) = 0;
      *(_DWORD *)(v106 + 24) = 1;
      *(_BYTE *)(v106 + 28) = 1;
      v107 = operator new(0x18uLL);
      v107[1] = v72 + 24;
      v107[2] = v106;
      v108 = *(_QWORD *)(v72 + 24);
      *v107 = v108;
      *(_QWORD *)(v108 + 8) = v107;
      *(_QWORD *)(v72 + 24) = v107;
      ++*(_QWORD *)(v72 + 40);
      v109 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v159, dword_241225370);
      blahtex::Token::Token(&v175, v159, *(_QWORD *)(a1 + 32));
      blahtex::LayoutTree::SymbolOperator::SymbolOperator(v109, 0, (uint64_t)&v178, 0, &v175, *(unsigned __int8 *)(a2 + 4), *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
      v110 = operator new(0x18uLL);
      v110[1] = v72 + 24;
      v110[2] = v109;
      v111 = *(_QWORD *)(v72 + 24);
      *v110 = v111;
      *(_QWORD *)(v111 + 8) = v110;
      *(_QWORD *)(v72 + 24) = v110;
      ++*(_QWORD *)(v72 + 40);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v160 < 0)
        operator delete(v159[0]);
      v81 = operator new();
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      *(_QWORD *)v81 = &unk_2511390F8;
      *(_DWORD *)(v81 + 24) = 1;
      *(_BYTE *)(v81 + 28) = 1;
      v82 = operator new(0x18uLL);
      goto LABEL_145;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225380);
    v112 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v112)
    {
      v72 = operator new();
      v113 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v72 + 12) = 0;
      *(_DWORD *)(v72 + 16) = 0;
      *(_DWORD *)(v72 + 20) = v113;
      *(_QWORD *)v72 = &off_251138958;
      v74 = v72 + 24;
      *(_QWORD *)(v72 + 24) = v72 + 24;
      *(_QWORD *)(v72 + 32) = v72 + 24;
      *(_QWORD *)(v72 + 40) = 0;
      v114 = operator new();
      *(_QWORD *)(v114 + 16) = 0;
      *(_QWORD *)v114 = &unk_2511390F8;
      *(_QWORD *)(v114 + 8) = 0;
      *(_DWORD *)(v114 + 24) = 12;
      *(_BYTE *)(v114 + 28) = 1;
      v115 = operator new(0x18uLL);
      v115[1] = v72 + 24;
      v115[2] = v114;
      v116 = *(_QWORD *)(v72 + 24);
      *v115 = v116;
      *(_QWORD *)(v116 + 8) = v115;
      *(_QWORD *)(v72 + 24) = v115;
      ++*(_QWORD *)(v72 + 40);
      v117 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v157, dword_241225370);
      blahtex::Token::Token(&v175, v157, *(_QWORD *)(a1 + 32));
      blahtex::LayoutTree::SymbolOperator::SymbolOperator(v117, 0, (uint64_t)&v178, 0, &v175, *(unsigned __int8 *)(a2 + 4), *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
      v118 = operator new(0x18uLL);
      v118[1] = v72 + 24;
      v118[2] = v117;
      v119 = *(_QWORD *)(v72 + 24);
      *v118 = v119;
      *(_QWORD *)(v119 + 8) = v118;
      *(_QWORD *)(v72 + 24) = v118;
      ++*(_QWORD *)(v72 + 40);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v158 < 0)
        operator delete(v157[0]);
      v81 = operator new();
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      *(_QWORD *)v81 = &unk_2511390F8;
      *(_DWORD *)(v81 + 24) = 6;
      *(_BYTE *)(v81 + 28) = 1;
      v82 = operator new(0x18uLL);
      goto LABEL_145;
    }
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225394);
    if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175))
    {
      v121 = 1;
    }
    else
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v178, dword_2412253C0);
      if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v178))
      {
        v121 = 1;
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v176, dword_2412253F0);
        if (blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v176))
        {
          v121 = 1;
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v155, dword_24122541C);
          v121 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)v155);
          if (v156 < 0)
            operator delete(v155[0]);
        }
        if (v177 < 0)
          operator delete(v176[0]);
      }
      if (v180 < 0)
        operator delete(v178);
    }
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (v121)
    {
      v122 = *(unsigned __int8 *)(a2 + 4);
      v123 = operator new();
      v178 = &dword_2412252D8;
      v179 = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v153, dword_241225448);
      blahtex::Token::Token(&v175, v153, *(_QWORD *)(a1 + 32));
      blahtex::LayoutTree::SymbolOperator::SymbolOperator(v123, 0, (uint64_t)&v178, 0, &v175, v122, *(_DWORD *)(a2 + 16), 1, 1, *(_DWORD *)(a2 + 20));
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v154 < 0)
        operator delete(v153[0]);
      v124 = operator new();
      v125 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v124 + 8) = *(_DWORD *)(a2 + 16);
      *(_QWORD *)(v124 + 12) = 1;
      *(_DWORD *)(v124 + 20) = v125;
      *(_QWORD *)v124 = &off_251139130;
      *(_BYTE *)(v124 + 24) = 0;
      *(_QWORD *)(v124 + 32) = v123;
      *(_QWORD *)(v124 + 40) = 0;
      v126 = (uint64_t *)(v124 + 40);
      *(_QWORD *)(v124 + 48) = 0;
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225394);
      v127 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (v127)
      {
        v128 = operator new();
        v178 = &dword_2412252D8;
        v179 = 0;
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v151, (__int32 *)&unk_241225458);
        blahtex::Token::Token(&v175, v151, *(_QWORD *)(a1 + 32));
        blahtex::LayoutTree::SymbolOperator::SymbolOperator(v128, 0, (uint64_t)&v178, 1, &v175, v122, *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
        v129 = *(_QWORD *)(v124 + 48);
        *(_QWORD *)(v124 + 48) = v128;
        if (v129)
          (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v175.__r_.__value_.__l.__data_);
        if ((v152 & 0x80000000) == 0)
          goto LABEL_202;
        v130 = (void *)v151[0];
      }
      else
      {
        std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_2412253C0);
        v131 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v175.__r_.__value_.__l.__data_);
        if (v131)
        {
          v132 = operator new();
          v178 = &dword_2412252D8;
          v179 = 0;
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v149, (__int32 *)&unk_241225460);
          blahtex::Token::Token(&v175, v149, *(_QWORD *)(a1 + 32));
          blahtex::LayoutTree::SymbolOperator::SymbolOperator(v132, 0, (uint64_t)&v178, 1, &v175, v122, *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
          v133 = *(_QWORD *)(v124 + 48);
          *(_QWORD *)(v124 + 48) = v132;
          if (v133)
            (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v175.__r_.__value_.__l.__data_);
          if ((v150 & 0x80000000) == 0)
            goto LABEL_202;
          v130 = (void *)v149[0];
        }
        else
        {
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_24122541C);
          v134 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v175.__r_.__value_.__l.__data_);
          if (v134)
          {
            v135 = operator new();
            v178 = &dword_2412252D8;
            v179 = 0;
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v147, (__int32 *)&unk_241225468);
            blahtex::Token::Token(&v175, v147, *(_QWORD *)(a1 + 32));
            blahtex::LayoutTree::SymbolOperator::SymbolOperator(v135, 1, (uint64_t)&v178, 1, &v175, v122, *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
            v136 = *(_QWORD *)(v124 + 48);
            *(_QWORD *)(v124 + 48) = v135;
            if (v136)
              (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__r_.__value_.__l.__data_);
            if ((v148 & 0x80000000) == 0)
              goto LABEL_202;
            v130 = (void *)v147[0];
          }
          else
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_2412253F0);
            v137 = blahtex::Token::operator==((const __int32 *)v6, (const __int32 *)&v175);
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__r_.__value_.__l.__data_);
            if (!v137)
              goto LABEL_202;
            v138 = operator new();
            v178 = &dword_2412252D8;
            v179 = 0;
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v145, (__int32 *)&unk_241225468);
            blahtex::Token::Token(&v175, v145, *(_QWORD *)(a1 + 32));
            blahtex::LayoutTree::SymbolOperator::SymbolOperator(v138, 1, (uint64_t)&v178, 1, &v175, v122, *(_DWORD *)(a2 + 16), 0, 0, *(_DWORD *)(a2 + 20));
            v139 = *v126;
            *v126 = v138;
            if (v139)
              (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__r_.__value_.__l.__data_);
            if ((v146 & 0x80000000) == 0)
              goto LABEL_202;
            v130 = v145[0];
          }
        }
      }
      operator delete(v130);
LABEL_202:
      *a3 = v124;
      return;
    }
    v140 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v140, "Unexpected command in MathSymbol::BuildLayoutTree");
LABEL_208:
    __cxa_throw(v140, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v38 = v37;
  v155[0] = *(void **)a2;
  switch(LODWORD(v155[0]))
  {
    case 0:
      LODWORD(v155[0]) = 1;
      break;
    case 6:
      v144 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225244);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v178, dword_2412252DC);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v176, &dword_2412252D8);
      blahtex::Exception::Exception(v144, (__int128 *)&v175, (uint64_t)v6, (uint64_t)&v178, (uint64_t)v176);
    case 7:
      v143 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225244);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v178, dword_2412252C8);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v176, &dword_2412252D8);
      blahtex::Exception::Exception(v143, (__int128 *)&v175, (uint64_t)v6, (uint64_t)&v178, (uint64_t)v176);
    case 8:
      v142 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v175, dword_241225244);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v178, dword_2412252E8);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v176, &dword_2412252D8);
      blahtex::Exception::Exception(v142, (__int128 *)&v175, (uint64_t)v6, (uint64_t)&v178, (uint64_t)v176);
    default:
      break;
  }
  v39 = operator new();
  v40 = *((_DWORD *)v38 + 8);
  v172 = 1;
  v171 = v40;
  blahtex::Token::Token(&v175, &v171, *(_QWORD *)(a1 + 32));
  v41 = blahtex::TexMathFont::GetMathmlApproximation((blahtex::TexMathFont *)v155);
  v42 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v39 + 8) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v39 + 12) = 0;
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 20) = v42;
  *(_QWORD *)v39 = off_251139490;
  blahtex::Token::Token((blahtex::Token *)(v39 + 24), (const blahtex::Token *)&v175);
  *(_DWORD *)(v39 + 56) = v41;
  *(_QWORD *)v39 = &unk_251139018;
  *a3 = v39;
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  if (v172 < 0)
  {
    v32 = (void *)v171;
    goto LABEL_60;
  }
}

void sub_241207694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathSymbol::~MathSymbol(void **this)
{
  *this = off_2511441B8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511441B8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

uint64_t std::unordered_map<std::wstring_view,wchar_t>::unordered_map<std::pair<std::wstring_view,wchar_t> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,wchar_t>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,wchar_t>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,wchar_t> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241207D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,wchar_t>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,wchar_t>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,wchar_t>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,wchar_t> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + 8) = *(_DWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_241207FA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,int>::unordered_map<std::pair<std::wstring_view,int> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,int>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,int>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,int> const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_241208020(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,int>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,int>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,int>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v9;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + 8) = *(_DWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_241208284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::OperatorInfo>::unordered_map<std::pair<std::wstring_view,blahtex::OperatorInfo> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::OperatorInfo> const&>(a1, v5, v5);
      v5 += 40;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2412082FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::OperatorInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::OperatorInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x38uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v16;
  v14[6] = *(_QWORD *)(a3 + 32);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_241208560(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring_view,blahtex::IdentifierInfo>::unordered_map<std::pair<std::wstring_view,blahtex::IdentifierInfo> const*>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::IdentifierInfo> const&>(a1, (uint64_t)v5, v5);
      v5 += 3;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_2412085D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::IdentifierInfo>>>::__emplace_unique_key_args<std::wstring_view,std::pair<std::wstring_view,blahtex::IdentifierInfo> const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::wstring_view>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x40uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = a3[1];
  *((_OWORD *)v14 + 1) = *a3;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = a3[2];
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<wchar_t,std::hash<wchar_t>,std::equal_to<wchar_t>,std::allocator<wchar_t>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return v14;
}

void sub_24120883C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t blahtex::lookupColour(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0x10000000;
  if ((v3 & 1) == 0
  {
    std::unordered_map<std::wstring,unsigned int>::unordered_map<std::pair<std::wstring_view,unsigned int> const*>((uint64_t)blahtex::lookupColour(std::wstring const&)::gColourTable, (uint64_t)&blahtex::gColourArray, (uint64_t)&blahtex::gUnicodeNameArray);
  }
  v4 = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::lookupColour(std::wstring const&)::gColourTable, a1);
  if (v4)
    return *((unsigned int *)v4 + 10);
  v6 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != 6)
    {
LABEL_21:
      if (v7 == 3)
      {
        v12 = 0;
        LODWORD(result) = 0;
        if ((v6 & 0x80u) == 0)
          v13 = a1;
        else
          v13 = *(_QWORD *)a1;
        do
        {
          v14 = *(_DWORD *)(v13 + v12);
          v15 = v14 - 48;
          if ((v14 - 48) >= 0xA)
          {
            if ((v14 - 65) > 5)
            {
              if ((v14 - 103) < 0xFFFFFFFA)
                return 0x10000000;
              v15 = v14 - 87;
            }
            else
            {
              v15 = v14 - 55;
            }
          }
          v12 += 4;
          result = (17 * v15 + ((_DWORD)result << 8));
        }
        while (v12 != 12);
        return result;
      }
      return 0x10000000;
    }
  }
  else if (v6 != 6)
  {
    v7 = *(unsigned __int8 *)(a1 + 23);
    goto LABEL_21;
  }
  v8 = 0;
  LODWORD(result) = 0;
  if ((v6 & 0x80u) == 0)
    v9 = a1;
  else
    v9 = *(_QWORD *)a1;
  do
  {
    v10 = *(_DWORD *)(v9 + v8);
    v11 = v10 - 48;
    if ((v10 - 48) >= 0xA)
    {
      if ((v10 - 65) > 5)
      {
        if ((v10 - 103) < 0xFFFFFFFA)
          return 0x10000000;
        v11 = v10 - 87;
      }
      else
      {
        v11 = v10 - 55;
      }
    }
    v8 += 4;
    result = (v11 + 16 * result);
  }
  while (v8 != 24);
  return result;
}

void sub_2412089E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::TexMathFont::GetMathmlApproximation(blahtex::TexMathFont *this)
{
  int v1;
  unsigned int *v2;
  std::logic_error *exception;

  v1 = *(_DWORD *)this - 1;
  if (v1 >= 8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected TexMathFont data");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v2 = (unsigned int *)&unk_24122F8B0;
  if (!*((_BYTE *)this + 4))
    v2 = (unsigned int *)&unk_24122F8D0;
  return v2[v1];
}

void sub_241208A70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t blahtex::TexTextFont::GetMathmlApproximation(blahtex::TexTextFont *this)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  std::logic_error *exception;

  v1 = *(_DWORD *)this;
  if (*(_DWORD *)this == 2)
    return 13;
  if (v1 == 1)
  {
    v2 = *((unsigned __int8 *)this + 4);
    if (*((_BYTE *)this + 5))
      v3 = 11;
    else
      v3 = 9;
    if (*((_BYTE *)this + 5))
      v4 = 12;
    else
      v4 = 10;
  }
  else
  {
    if (v1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected TexTextFont data");
      __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
    }
    v2 = *((unsigned __int8 *)this + 4);
    v3 = 2 * (*((_BYTE *)this + 5) != 0);
    if (*((_BYTE *)this + 5))
      v4 = 3;
    else
      v4 = 1;
  }
  if (v2)
    return v4;
  else
    return v3;
}

void sub_241208B38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathList::~MathList(blahtex::ParseTree::MathList *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_251145108;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  blahtex::ParseTree::MathList::~MathList(this);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathTableRow::~MathTableRow(blahtex::ParseTree::MathTableRow *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_251145140;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  blahtex::ParseTree::MathTableRow::~MathTableRow(this);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathTable::~MathTable(blahtex::ParseTree::MathTable *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_251145178;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  blahtex::ParseTree::MathTable::~MathTable(this);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextList::~TextList(blahtex::ParseTree::TextList *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_2511451B0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  blahtex::ParseTree::TextList::~TextList(this);
  JUMPOUT(0x242690740);
}

_QWORD *blahtex::ParseTree::MathStateChange::Apply(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *result;
  unsigned __int8 v7;
  std::logic_error *exception;

  if ((v4 & 1) == 0
  {
    std::unordered_map<std::wstring,blahtex::LayoutTree::Node::Style>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const*>((uint64_t)blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandTable, (uint64_t)&blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandArray, (uint64_t)&blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandArray);
  }
  v5 = a1 + 8;
  result = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::styleCommandTable, v5);
  if (result)
  {
    a2[4] = *((_DWORD *)result + 10);
  }
  else
  {
    if ((v7 & 1) == 0
    {
      std::unordered_map<std::wstring,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>((uint64_t)blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandTable, (uint64_t)&blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandArray, (uint64_t)&blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandArray);
    }
    result = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::find<std::wstring>(blahtex::ParseTree::MathStateChange::Apply(blahtex::TexProcessingState &)const::fontCommandTable, v5);
    if (!result)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unexpected command in MathStateChange::Apply");
      __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
    }
    *a2 = *((_DWORD *)result + 10);
  }
  return result;
}

void sub_241208ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *blahtex::ParseTree::TextStateChange::Apply(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  int v8;
  std::logic_error *exception;
  _QWORD v10[2];

  if ((v4 & 1) == 0
  {
    std::unordered_map<std::wstring_view,blahtex::TexTextFont>::unordered_map<std::pair<std::wstring_view,blahtex::TexTextFont> const*>((uint64_t)blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandTable, (uint64_t)&blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandArray, (uint64_t)&blahtex::ParseTree::FontEncodingName);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v5 = a1 + 8;
    v6 = *(unsigned __int8 *)(a1 + 31);
  }
  v10[0] = v5;
  v10[1] = v6;
  result = std::__hash_table<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::__unordered_map_hasher<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,true>,std::__unordered_map_equal<std::wstring_view,std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>,std::equal_to<std::wstring_view>,std::hash<std::wstring_view>,true>,std::allocator<std::__hash_value_type<std::wstring_view,blahtex::TexTextFont>>>::find<std::wstring_view>(blahtex::ParseTree::TextStateChange::Apply(blahtex::TexProcessingState &)const::textCommandTable, (uint64_t)v10);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unexpected command in TextStateChange::Apply");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v8 = *((_DWORD *)result + 8);
  *(_WORD *)(a2 + 12) = *((_WORD *)result + 18);
  *(_DWORD *)(a2 + 8) = v8;
  return result;
}

void sub_241208FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathColour::Apply(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  std::logic_error *exception;

  result = blahtex::lookupColour(a1 + 40);
  if ((_DWORD)result == 0x10000000)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot find colour name in MathColour::Apply");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

void sub_241209070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextColour::Apply(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  std::logic_error *exception;

  result = blahtex::lookupColour(a1 + 40);
  if ((_DWORD)result == 0x10000000)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot find colour name in TextColour::Apply");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

void sub_2412090E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *blahtex::ParseTree::MathSymbol::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B198, 1);
  v7 = *(char *)(a1 + 31);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 31);
  else
    v9 = *(_QWORD *)(a1 + 16);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v6, v8, v9);
}

void blahtex::LatexFeatures::Update(uint64_t a1, const __int32 *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v6;
  const __int32 *v7;
  int v8;
  const __int32 *v9;
  uint64_t v10;
  const __int32 *v11;
  uint64_t v12;
  const __int32 *v13;
  int v14;
  const __int32 *v15;
  const __int32 *v16;
  const __int32 *v17;
  uint64_t v18;

  if ((v4 & 1) == 0
  {
    std::unordered_set<std::wstring_view>::unordered_set<std::wstring_view const*>((uint64_t)blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmsmathTable, &blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmsmathArray, &blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmssymbArray);
  }
  if ((v5 & 1) == 0
  {
  }
  v6 = *((char *)a2 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    if (*a2 != 92)
      return;
    v7 = a2;
    if (v6 != 4)
      goto LABEL_11;
LABEL_9:
    if (!wmemcmp(v7, dword_24122B788, 4uLL))
    {
      *(_BYTE *)(a1 + 3) = 1;
      *(_BYTE *)(a1 + 5) = 1;
    }
    goto LABEL_11;
  }
  v7 = *(const __int32 **)a2;
  if (**(_DWORD **)a2 != 92)
    return;
  if (*((_QWORD *)a2 + 1) == 4)
    goto LABEL_9;
LABEL_11:
  v8 = *((char *)a2 + 23);
  if (v8 < 0)
  {
    if (*((_QWORD *)a2 + 1) != 4)
      goto LABEL_18;
    v9 = *(const __int32 **)a2;
  }
  else
  {
    v9 = a2;
    if (v8 != 4)
      goto LABEL_18;
  }
  if (!wmemcmp(v9, dword_24122B79C, 4uLL))
    *(_WORD *)(a1 + 6) = 257;
LABEL_18:
  if (!*(_BYTE *)(a1 + 1))
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (*((_QWORD *)a2 + 1) != 7)
        goto LABEL_46;
      v15 = *(const __int32 **)a2;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 23);
      v15 = a2;
      if (v14 != 7)
      {
LABEL_44:
        v16 = a2;
        if (v14 != 9)
          goto LABEL_19;
        goto LABEL_48;
      }
    }
    if (!wmemcmp(v15, dword_24122EC60, 7uLL))
      goto LABEL_49;
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      v14 = *((unsigned __int8 *)a2 + 23);
      goto LABEL_44;
    }
LABEL_46:
    if (*((_QWORD *)a2 + 1) != 9)
      goto LABEL_19;
    v16 = *(const __int32 **)a2;
LABEL_48:
    if (wmemcmp(v16, dword_24122EC80, 9uLL))
      goto LABEL_19;
LABEL_49:
    *(_BYTE *)(a1 + 1) = 1;
  }
LABEL_19:
  if (!*(_BYTE *)a1)
  {
    v10 = *((unsigned __int8 *)a2 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a2;
    else
      v11 = *(const __int32 **)a2;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a2 + 1);
    v17 = v11;
    v18 = v10;
    if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmsmathTable, (uint64_t)&v17))
    {
      *(_BYTE *)a1 = 1;
    }
  }
  if (!*(_BYTE *)(a1 + 2))
  {
    v12 = *((unsigned __int8 *)a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = a2;
    else
      v13 = *(const __int32 **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a2 + 1);
    v17 = v13;
    v18 = v12;
    if (std::__hash_table<std::wstring_view,std::hash<std::wstring_view>,std::equal_to<std::wstring_view>,std::allocator<std::wstring_view>>::find<std::wstring_view>(blahtex::LatexFeatures::Update(std::wstring const&)::gNeedsAmssymbTable, (uint64_t)&v17))
    {
      *(_BYTE *)(a1 + 2) = 1;
    }
  }
}

void sub_2412093D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *blahtex::ParseTree::MathCommand1Arg::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  v9 = *(char *)(a1 + 31);
  if (v9 >= 0)
    v10 = v8;
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 31);
  else
    v11 = *(_QWORD *)(a1 + 16);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v10, v11);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::MathStateChange::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  v6 = *(char *)(a1 + 31);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a1 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 31);
  else
    v8 = *(_QWORD *)(a1 + 16);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v7, v8);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_24122B198, 1);
}

_QWORD *blahtex::ParseTree::MathColour::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  *(_BYTE *)(a3 + 4) = 1;
  v4 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1B0, 7);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = a1 + 40;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v4, v9, v10);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)&unk_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::MathCommand2Args::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const __int32 *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BOOL4 v15;
  _BOOL4 v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *__p[2];
  char v25;

  v8 = (const __int32 *)(a1 + 8);
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  if (!*(_BYTE *)(a1 + 56))
  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122B1D0);
    v15 = blahtex::Token::operator==(v8, (const __int32 *)__p);
    v16 = v15;
    if (v25 < 0)
    {
      operator delete(__p[0]);
      if (v16)
        goto LABEL_11;
    }
    else if (v15)
    {
LABEL_11:
      std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B208, 7);
      (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, a4);
      v17 = &unk_24122B228;
      v18 = a2;
      v19 = 3;
LABEL_20:
      std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)v17, v19);
      (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2, a3, a4);
      return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
    }
    v20 = *(char *)(a1 + 31);
    if (v20 >= 0)
      v21 = (uint64_t)v8;
    else
      v21 = *(_QWORD *)(a1 + 8);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 31);
    else
      v22 = *(_QWORD *)(a1 + 16);
    v23 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v21, v22);
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v23, (uint64_t)&unk_24122B1A0, 1);
    (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, a4);
    v17 = &unk_24122B238;
    v18 = a2;
    v19 = 2;
    goto LABEL_20;
  }
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, a4);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = (uint64_t)v8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
}

void sub_24120978C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *blahtex::ParseTree::MathGroup::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::MathPhantom::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B244, 9);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::MathCancel::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B26C, 8);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
}

uint64_t blahtex::ParseTree::MathList::GetPurifiedTex(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    v8 = result;
    do
    {
      v9 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

_QWORD *blahtex::ParseTree::MathScripts::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 8);
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(*result + 24))(result, a2, a3, a4);
  if (*(_QWORD *)(a1 + 16))
  {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B290, 2);
    (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
    result = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B29C, 2);
    (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), a2, a3, a4);
    return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1A8, 1);
  }
  return result;
}

_QWORD *blahtex::ParseTree::MathLimits::GetPurifiedTex(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 8);
  v5 = a1 + 8;
  v4 = v6;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v8, v9);
}

_QWORD *blahtex::ParseTree::MathDelimited::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 16));
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 48));
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B2A8, 5);
  v10 = *(char *)(a1 + 39);
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = *(_QWORD *)(a1 + 16);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 39);
  else
    v12 = *(_QWORD *)(a1 + 24);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B2C0, 6);
  v14 = *(char *)(a1 + 71);
  if (v14 >= 0)
    v15 = a1 + 48;
  else
    v15 = *(_QWORD *)(a1 + 48);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a1 + 71);
  else
    v16 = *(_QWORD *)(a1 + 56);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, v15, v16);
}

_QWORD *blahtex::ParseTree::MathMiddle::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  v6 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B2DC, 7);
  v7 = *(char *)(a1 + 31);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 31);
  else
    v9 = *(_QWORD *)(a1 + 16);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v6, v8, v9);
}

_QWORD *blahtex::ParseTree::MathBig::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 40));
  v7 = *(char *)(a1 + 31);
  if (v7 >= 0)
    v8 = v6;
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 31);
  else
    v9 = *(_QWORD *)(a1 + 16);
  v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v8, v9);
  v11 = *(char *)(a1 + 63);
  if (v11 >= 0)
    v12 = a1 + 40;
  else
    v12 = *(_QWORD *)(a1 + 40);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 63);
  else
    v13 = *(_QWORD *)(a1 + 48);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v10, v12, v13);
}

uint64_t blahtex::ParseTree::MathTableRow::GetPurifiedTex(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    v8 = result;
    do
    {
      if (v4 != *(uint64_t **)(v8 + 8))
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B2FC, 2);
      v9 = *v4++;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

uint64_t blahtex::ParseTree::MathTable::GetPurifiedTex(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    v8 = result;
    do
    {
      if (v4 != *(uint64_t **)(v8 + 8))
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B308, 3);
      v9 = *v4++;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

void blahtex::ParseTree::MathEnvironment::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::wstring *v8;
  std::wstring::size_type v9;
  char v10;
  std::wstring *v11;
  void *v12;
  char v13;
  std::wstring *p_p;
  std::wstring::size_type size;
  void *v16;
  uint64_t v17;
  std::wstring v18;
  void *v19;
  __int128 v20;
  std::wstring __p;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  v19 = 0;
  v20 = 0uLL;
  if (*(_BYTE *)(a1 + 48))
  {
    std::operator+<wchar_t>((const __int32 *)&unk_24122B318, (const void **)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v18;
    blahtex::LatexFeatures::Update(a3, (const __int32 *)&__p);
    std::wstring::append(&__p, dword_24122B1A0);
    MEMORY[0x242690560](&v19, dword_24122B1A8);
  }
  else
  {
    std::operator+<wchar_t>(dword_24122B320, (const void **)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_);
    v8 = std::wstring::append(&v18, dword_24122B1A8);
    v9 = v8->__r_.__value_.__r.__words[0];
    v22[0] = v8->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v22 + 7) = *(std::wstring::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
    v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v9;
    __p.__r_.__value_.__l.__size_ = v22[0];
    *(std::wstring::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v22 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v10;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    blahtex::LatexFeatures::Update(a3, (const __int32 *)&__p);
    std::operator+<wchar_t>(dword_24122B340, (const void **)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_);
    v11 = std::wstring::append(&v18, dword_24122B1A8);
    v12 = (void *)v11->__r_.__value_.__r.__words[0];
    v22[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v22 + 7) = *(std::wstring::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    v19 = v12;
    *(_QWORD *)&v20 = v22[0];
    *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)((char *)v22 + 7);
    HIBYTE(v20) = v13;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, size);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, a4);
  if (v20 >= 0)
    v16 = &v19;
  else
    v16 = v19;
  if (v20 >= 0)
    v17 = HIBYTE(v20);
  else
    v17 = v20;
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v16, v17);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_241209FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t blahtex::ParseTree::TextList::GetPurifiedTex(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 8);
  if (v4 != *(uint64_t **)(result + 16))
  {
    v8 = result;
    do
    {
      v9 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 16));
  }
  return result;
}

_QWORD *blahtex::ParseTree::TextGroup::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::TextPhantom::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B244, 9);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::TextCancel::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B26C, 8);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_24122B1A8, 1);
}

uint64_t blahtex::ParseTree::FormatCodePoint@<X0>(std::wstringbuf::string_type *a1@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  void (__cdecl **v8)(std::wostringstream *__hidden);
  std::wstringbuf v9;
  void (__cdecl **v10)(std::wostringstream *__hidden);

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  v3 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(&v8, (uint64_t)&unk_24122B358, 2);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  v7 = 48;
  v4 = std::operator<<[abi:ne180100]<std::char_traits<wchar_t>>(v3, &v7);
  v5 = *v4;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 8) |= 0x4000u;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v5 - 24) + 24) = 8;
  std::wostream::operator<<();
  std::wstringbuf::str(a1, &v9);
  if (SHIBYTE(v9.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x242690710](&v10);
}

void sub_24120A320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wostringstream::~wostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *blahtex::ParseTree::TextSymbol::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unsigned __int8 v8;
  int *v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  int v18;
  std::wstring *exception;
  std::wstring *v21;
  std::wstring *v22;
  std::wstring *v23;
  std::wstring *v24;
  _BYTE v25[24];
  _QWORD v26[3];
  std::wstringbuf::string_type __dst;
  void *__p[2];
  char v29;

  if ((v8 & 1) == 0
  {
    std::set<wchar_t>::set[abi:ne180100]<wchar_t const*>((uint64_t)&blahtex::ParseTree::TextSymbol::GetPurifiedTex(std::wostream &,blahtex::LatexFeatures &,blahtex::FontEncoding)const::gSimpleUnicodeTable, blahtex::ParseTree::TextSymbol::GetPurifiedTex(std::wostream &,blahtex::LatexFeatures &,blahtex::FontEncoding)const::gSimpleUnicodeArray, dword_24122B6AC);
  }
  v9 = (int *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(_QWORD *)(a1 + 16) <= 1uLL)
    {
      v10 = **(_DWORD **)v9;
      if (v10 > 127)
        goto LABEL_21;
    }
LABEL_8:
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, (__int32 *)&unk_24122B198);
    v11 = std::operator!=[abi:ne180100]<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>((const __int32 *)(a1 + 8), (const __int32 *)__p);
    if (a4)
      v12 = v11;
    else
      v12 = 0;
    if (v29 < 0)
      operator delete(__p[0]);
    if (v12)
    {
      exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122B6AC);
      std::wstring::basic_string<std::wstring_view,0>(&__dst, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v26, &dword_24122B6F4);
      blahtex::Exception::Exception(exception, (__int128 *)__p, a1 + 8, (uint64_t)&__dst, (uint64_t)v26);
    }
    blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
    v13 = *(char *)(a1 + 31);
    if (v13 >= 0)
      v14 = (void **)(a1 + 8);
    else
      v14 = *(void ***)(a1 + 8);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 31);
    else
      v15 = *(_QWORD *)(a1 + 16);
    v16 = a2;
    return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v14, v15);
  }
  if (*(unsigned __int8 *)(a1 + 31) > 1u)
    goto LABEL_8;
  v10 = *v9;
  if (*v9 < 128)
    goto LABEL_8;
LABEL_21:
  for (i = qword_257103EF0; i; i = *(_QWORD *)i)
  {
    v18 = *(_DWORD *)(i + 28);
    if (v10 >= v18)
    {
      if (v18 >= v10)
      {
        if (a4)
        {
          v24 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122B6AC);
          blahtex::ParseTree::FormatCodePoint(&__dst);
          std::wstring::basic_string<std::wstring_view,0>(v26, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
          std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, &dword_24122B6F4);
          blahtex::Exception::Exception(v24, (__int128 *)__p, (uint64_t)&__dst, (uint64_t)v26, (uint64_t)v25);
        }
        *(_BYTE *)(a3 + 3) = 1;
LABEL_38:
        std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B6F8, 9);
        v16 = (_QWORD *)std::wostream::operator<<();
        v14 = (void **)dword_24122B1A8;
        goto LABEL_39;
      }
      i += 8;
    }
  }
  if ((v10 - 1024) <= 0x5F)
  {
    if (a4 != 1)
    {
      v22 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122B720);
      blahtex::ParseTree::FormatCodePoint(&__dst);
      std::wstring::basic_string<std::wstring_view,0>(v26, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_24122B788);
      blahtex::Exception::Exception(v22, (__int128 *)__p, (uint64_t)&__dst, (uint64_t)v26, (uint64_t)v25);
    }
    *(_BYTE *)(a3 + 3) = 1;
    *(_BYTE *)(a3 + 5) = 1;
    goto LABEL_38;
  }
  if ((v10 - 12352) >= 0xC0
    && (v10 - 13312) >> 10 >= 0x1B
    && (v10 - 63744) > 0x1E0)
  {
    v21 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122B7B0);
    blahtex::ParseTree::FormatCodePoint(&__dst);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v26, &dword_24122B6F4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, &dword_24122B6F4);
    blahtex::Exception::Exception(v21, (__int128 *)__p, (uint64_t)&__dst, (uint64_t)v26, (uint64_t)v25);
  }
  if (a4 != 2)
  {
    v23 = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, dword_24122B720);
    blahtex::ParseTree::FormatCodePoint(&__dst);
    std::wstring::basic_string<std::wstring_view,0>(v26, (uint64_t)(&blahtex::ParseTree::FontEncodingName + 2 * a4));
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v25, dword_24122B79C);
    blahtex::Exception::Exception(v23, (__int128 *)__p, (uint64_t)&__dst, (uint64_t)v26, (uint64_t)v25);
  }
  *(_WORD *)(a3 + 6) = 257;
  if (*(char *)(a1 + 31) < 0)
    v9 = *(int **)v9;
  LODWORD(__p[0]) = *v9;
  v14 = __p;
  v16 = a2;
LABEL_39:
  v15 = 1;
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v16, (uint64_t)v14, v15);
}

void sub_24120A7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

_QWORD *blahtex::ParseTree::TextStateChange::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  v6 = *(char *)(a1 + 31);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a1 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 31);
  else
    v8 = *(_QWORD *)(a1 + 16);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v7, v8);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_24122B814, 2);
}

_QWORD *blahtex::ParseTree::TextColour::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  *(_BYTE *)(a3 + 4) = 1;
  v4 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)&unk_24122B1B0, 7);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = a1 + 40;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v4, v9, v10);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)dword_24122B1A8, 1);
}

uint64_t blahtex::ParseTree::HandleFontEncodingCommand(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  std::wstring *exception;
  _BYTE v7[24];
  _BYTE v8[24];
  _BYTE v9[24];
  __int128 v10;

  v3 = result;
  if (*(char *)(result + 23) < 0)
  {
    if (*(_QWORD *)(result + 8) != 4)
      goto LABEL_11;
    result = *(_QWORD *)result;
LABEL_6:
    result = wmemcmp((const __int32 *)result, dword_24122B788, 4uLL);
    if (!(_DWORD)result)
    {
      v5 = 1;
      goto LABEL_16;
    }
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      v4 = *(unsigned __int8 *)(v3 + 23);
      goto LABEL_9;
    }
LABEL_11:
    if (*(_QWORD *)(v3 + 8) != 4)
      return result;
    v3 = *(_QWORD *)v3;
    goto LABEL_13;
  }
  v4 = *(unsigned __int8 *)(result + 23);
  if (v4 == 4)
    goto LABEL_6;
LABEL_9:
  if (v4 != 4)
    return result;
LABEL_13:
  result = wmemcmp((const __int32 *)v3, dword_24122B79C, 4uLL);
  if ((_DWORD)result)
    return result;
  v5 = 2;
LABEL_16:
  if (*a2)
  {
    exception = (std::wstring *)__cxa_allocate_exception(0x30uLL);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v10, dword_24122B820);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v9, &dword_24122B6F4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v8, &dword_24122B6F4);
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v7, &dword_24122B6F4);
    blahtex::Exception::Exception(exception, &v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7);
  }
  *a2 = v5;
  return result;
}

void sub_24120AB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v28 - 33) < 0)
  {
    operator delete(*(void **)(v28 - 56));
    if ((v27 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v26);
  goto LABEL_12;
}

_QWORD *blahtex::ParseTree::TextCommand1Arg::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v13;

  v13 = a4;
  v7 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  blahtex::ParseTree::HandleFontEncodingCommand(v7, (int *)&v13);
  v8 = *(char *)(a1 + 31);
  if (v8 >= 0)
    v9 = v7;
  else
    v9 = *(_QWORD *)(a1 + 8);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 31);
  else
    v10 = *(_QWORD *)(a1 + 16);
  v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v9, v10);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)dword_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, v13);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_24122B1A8, 1);
}

_QWORD *blahtex::ParseTree::EnterTextMode::GetPurifiedTex(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v13;

  v13 = a4;
  v7 = a1 + 8;
  blahtex::LatexFeatures::Update(a3, (const __int32 *)(a1 + 8));
  blahtex::ParseTree::HandleFontEncodingCommand(v7, (int *)&v13);
  v8 = *(char *)(a1 + 31);
  if (v8 >= 0)
    v9 = v7;
  else
    v9 = *(_QWORD *)(a1 + 8);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 31);
  else
    v10 = *(_QWORD *)(a1 + 16);
  v11 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, v9, v10);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v11, (uint64_t)dword_24122B1A0, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, a3, v13);
  return std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)dword_24122B1A8, 1);
}

void blahtex::ParseTree::MathSymbol::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122B88C, 12);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120AE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathCommand1Arg::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  void *__p[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122B8C8, 17);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = a1 + 8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, (a3 + 1));
}

void sub_24120AF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathCommand2Args::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122B910, 18);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = a1 + 8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v16 = (a3 + 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, v16);
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), a2, v16);
}

void sub_24120B110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathGroup::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::locale v14;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122B95C, 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathPhantom::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::locale v14;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122B984, 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathCancel::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::locale v14;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122B9B4, 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120B4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathList::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  std::locale v16;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = v15;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122B9E0, 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v16, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    v12 = (a3 + 1);
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_24120B5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathScripts::Print(_QWORD **a1, _QWORD *a2, int a3)
{
  int v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  std::locale v30;

  v6 = 2 * a3;
  std::wstring::basic_string[abi:ne180100](&__p, 2 * a3, 32);
  if ((v29 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v29 & 0x80u) == 0)
    v8 = v29;
  else
    v8 = v28;
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)p_p, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, (uint64_t)&unk_24122BA04, 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v30, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 10);
  std::locale::~locale(&v30);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v29 < 0)
    operator delete(__p);
  if (a1[1])
  {
    std::wstring::basic_string[abi:ne180100](&__p, v6 + 2, 32);
    if ((v29 & 0x80u) == 0)
      v12 = &__p;
    else
      v12 = __p;
    if ((v29 & 0x80u) == 0)
      v13 = v29;
    else
      v13 = v28;
    v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, (uint64_t)&unk_24122BA34, 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v30, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[3].__on_zero_shared)(v16, 10);
    std::locale::~locale(&v30);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v29 < 0)
      operator delete(__p);
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1[1] + 32))(a1[1], a2, (a3 + 2));
  }
  if (a1[2])
  {
    std::wstring::basic_string[abi:ne180100](&__p, v6 + 2, 32);
    if ((v29 & 0x80u) == 0)
      v17 = &__p;
    else
      v17 = __p;
    if ((v29 & 0x80u) == 0)
      v18 = v29;
    else
      v18 = v28;
    v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v17, v18);
    v20 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v19, (uint64_t)&unk_24122BA48, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v21 = std::locale::use_facet(&v30, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[3].__on_zero_shared)(v21, 10);
    std::locale::~locale(&v30);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v29 < 0)
      operator delete(__p);
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1[2] + 32))(a1[2], a2, (a3 + 2));
  }
  if (a1[3])
  {
    std::wstring::basic_string[abi:ne180100](&__p, v6 + 2, 32);
    if ((v29 & 0x80u) == 0)
      v22 = &__p;
    else
      v22 = __p;
    if ((v29 & 0x80u) == 0)
      v23 = v29;
    else
      v23 = v28;
    v24 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v24, (uint64_t)&unk_24122BA60, 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
    v26 = std::locale::use_facet(&v30, MEMORY[0x24BEDB360]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[3].__on_zero_shared)(v26, 10);
    std::locale::~locale(&v30);
    std::wostream::put();
    std::wostream::flush();
    if ((char)v29 < 0)
      operator delete(__p);
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1[3] + 32))(a1[3], a2, (a3 + 2));
  }
}

void sub_24120B974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathLimits::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  void *__p[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BA78, 12);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = a1 + 8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, (a3 + 1));
}

void sub_24120BAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathStateChange::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BAAC, 17);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathColour::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BAF4, 12);
  v11 = *(_QWORD *)(a1 + 40);
  v10 = a1 + 40;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathDelimited::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  void *__p[2];
  unsigned __int8 v23;
  std::locale v24;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v23 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v7 = v23;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BB28, 15);
  v10 = *(char *)(a1 + 39);
  if (v10 >= 0)
    v11 = a1 + 16;
  else
    v11 = *(_QWORD *)(a1 + 16);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 39);
  else
    v12 = *(_QWORD *)(a1 + 24);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122BB68, 3);
  v15 = *(char *)(a1 + 71);
  if (v15 >= 0)
    v16 = a1 + 48;
  else
    v16 = *(_QWORD *)(a1 + 48);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 71);
  else
    v17 = *(_QWORD *)(a1 + 56);
  v18 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v14, v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v18, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v20 = std::locale::use_facet(&v24, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[3].__on_zero_shared)(v20, 10);
  std::locale::~locale(&v24);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v23 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120BF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathMiddle::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BB78, 12);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathBig::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  void *__p[2];
  unsigned __int8 v24;
  std::locale v25;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v24 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v6 = v24;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BBAC, 9);
  v9 = *(char *)(a1 + 31);
  if (v9 >= 0)
    v10 = a1 + 8;
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 31);
  else
    v11 = *(_QWORD *)(a1 + 16);
  v12 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v12, (uint64_t)&unk_24122BB68, 3);
  v16 = *(_QWORD *)(a1 + 40);
  v15 = a1 + 40;
  v14 = v16;
  v17 = *(char *)(v15 + 23);
  if (v17 >= 0)
    v18 = v15;
  else
    v18 = v14;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v15 + 23);
  else
    v19 = *(_QWORD *)(v15 + 8);
  v20 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v20, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&v25, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[3].__on_zero_shared)(v22, 10);
  std::locale::~locale(&v25);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v24 < 0)
    operator delete(__p[0]);
}

void sub_24120C1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTableRow::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  std::locale v16;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = v15;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BBD4, 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v16, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    v12 = (a3 + 1);
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_24120C2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathTable::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  std::locale v16;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = v15;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BC08, 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v16, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    v12 = (a3 + 1);
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_24120C444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::MathEnvironment::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BC30, 17);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = a1 + 8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B8C0, 1);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 48))
    std::operator<<[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, " (short)");
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[3].__on_zero_shared)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::wostream::put();
  std::wostream::flush();
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, (a3 + 1));
}

void sub_24120C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::EnterTextMode::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  void *__p[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BC78, 15);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = a1 + 8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, (a3 + 1));
}

void sub_24120C718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextList::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  std::locale v16;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v15 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = v15;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BCB8, 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v16, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v16);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v11 = *(uint64_t **)(a1 + 8);
  if (v11 != *(uint64_t **)(a1 + 16))
  {
    v12 = (a3 + 1);
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, v12);
    }
    while (v11 != *(uint64_t **)(a1 + 16));
  }
}

void sub_24120C864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextSymbol::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BCDC, 12);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120C9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextCommand1Arg::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  void *__p[2];
  unsigned __int8 v18;
  std::locale v19;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BD10, 17);
  v10 = *(char *)(a1 + 31);
  if (v10 >= 0)
    v11 = a1 + 8;
  else
    v11 = *(_QWORD *)(a1 + 8);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 31);
  else
    v12 = *(_QWORD *)(a1 + 16);
  v13 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v13, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v19, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[3].__on_zero_shared)(v15, 10);
  std::locale::~locale(&v19);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, (a3 + 1));
}

void sub_24120CB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextStateChange::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BD58, 17);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::TextColour::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::locale v20;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v19 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (uint64_t)__p[1];
  v7 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v7, (uint64_t)&unk_24122BDA0, 12);
  v11 = *(_QWORD *)(a1 + 40);
  v10 = a1 + 40;
  v9 = v11;
  v12 = *(char *)(v10 + 23);
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v15, (uint64_t)&unk_24122B8C0, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v20, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[3].__on_zero_shared)(v17, 10);
  std::locale::~locale(&v20);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_24120CD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextGroup::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::locale v14;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BDD4, 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120CEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextPhantom::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::locale v14;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BDFC, 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120CFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t blahtex::ParseTree::TextCancel::Print(uint64_t a1, _QWORD *a2, int a3)
{
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::locale v14;

  std::wstring::basic_string[abi:ne180100](__p, 2 * a3, 32);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(v8, (uint64_t)&unk_24122BE2C, 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB360]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[3].__on_zero_shared)(v10, 10);
  std::locale::~locale(&v14);
  std::wostream::put();
  std::wostream::flush();
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, (a3 + 1));
}

void sub_24120D10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void blahtex::ParseTree::MathStateChange::~MathStateChange(void **this)
{
  *this = off_251146490;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251146490;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::MathColour::~MathColour(void **this)
{
  *this = off_2511464E8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_251146490;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_2511464E8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_251146490;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextStateChange::~TextStateChange(void **this)
{
  *this = off_251146540;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251146540;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

void blahtex::ParseTree::TextColour::~TextColour(void **this)
{
  *this = off_251146598;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_251146540;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251146598;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_251146540;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x242690740);
}

uint64_t std::unordered_map<std::wstring,unsigned int>::unordered_map<std::pair<std::wstring_view,unsigned int> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__emplace_unique_impl<std::pair<std::wstring_view,unsigned int> const&>((_QWORD *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_24120D428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__emplace_unique_impl<std::pair<std::wstring_view,unsigned int> const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__construct_node<std::pair<std::wstring_view,unsigned int> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_24120D4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,unsigned int>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,unsigned int>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,unsigned int>>>::__construct_node<std::pair<std::wstring_view,unsigned int> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_24120D544(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring,blahtex::LayoutTree::Node::Style>::unordered_map<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>((_QWORD *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_24120D5C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__construct_node<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_24120D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::LayoutTree::Node::Style>>>::__construct_node<std::pair<std::wstring_view,blahtex::LayoutTree::Node::Style> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_24120D6DC(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::wstring,blahtex::TexMathFont::Family>::unordered_map<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>((_QWORD *)a1, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_24120D758(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__emplace_unique_impl<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__construct_node<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::wstring,std::hash<std::wstring>,std::equal_to<std::wstring>,std::allocator<std::wstring>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_24120D7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::__unordered_map_hasher<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::hash<std::wstring>,std::equal_to<std::wstring>,true>,std::__unordered_map_equal<std::wstring,std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>,std::equal_to<std::wstring>,std::hash<std::wstring>,true>,std::allocator<std::__hash_value_type<std::wstring,blahtex::TexMathFont::Family>>>::__construct_node<std::pair<std::wstring_view,blahtex::TexMathFont::Family> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::pair<std::wstring const,blahtex::Parser::TokenCode>::pair[abi:ne180100]<std::wstring_view,blahtex::Parser::TokenCode,0>(v7 + 2, a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<wchar_t>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_24120D874(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::wstring,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<wchar_t>::set[abi:ne180100]<wchar_t const*>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

