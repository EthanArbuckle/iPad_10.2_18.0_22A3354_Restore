void sub_1BDEBD61C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _UNKNOWN **v94;
  uint64_t v95;

  v90 = a2;
  v91 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v68 = sub_1BE1B2EE8();
  v71 = *(_QWORD *)(v68 - 8);
  v3 = MEMORY[0x1E0C80A78](v68);
  v73 = (char *)v45 - v4;
  v74 = AssociatedTypeWitness;
  v72 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v69 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v70 = (char *)v45 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v66 = sub_1BE1B2EE8();
  v65 = *(_QWORD *)(v66 - 8);
  v9 = MEMORY[0x1E0C80A78](v66);
  v88 = (char *)v45 - v10;
  v89 = v8;
  v86 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v67 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v64 = (char *)v45 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v62 = sub_1BE1B2EE8();
  v61 = *(_QWORD *)(v62 - 8);
  v15 = MEMORY[0x1E0C80A78](v62);
  v85 = (char *)v45 - v16;
  v87 = v14;
  v83 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v63 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v60 = (char *)v45 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v58 = sub_1BE1B2EE8();
  v57 = *(_QWORD *)(v58 - 8);
  v21 = MEMORY[0x1E0C80A78](v58);
  v82 = (char *)v45 - v22;
  v84 = v20;
  v80 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v59 = (char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v56 = (char *)v45 - v25;
  v26 = swift_getAssociatedTypeWitness();
  v54 = sub_1BE1B2EE8();
  v53 = *(_QWORD *)(v54 - 8);
  v27 = MEMORY[0x1E0C80A78](v54);
  v79 = (char *)v45 - v28;
  v81 = v26;
  v78 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v55 = (char *)v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v52 = (char *)v45 - v31;
  v32 = swift_getAssociatedTypeWitness();
  v50 = sub_1BE1B2EE8();
  v49 = *(_QWORD *)(v50 - 8);
  v33 = MEMORY[0x1E0C80A78](v50);
  v77 = (char *)v45 - v34;
  v76 = *(_QWORD *)(v32 - 8);
  v35 = MEMORY[0x1E0C80A78](v33);
  v51 = (char *)v45 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v48 = (char *)v45 - v37;
  v38 = swift_getAssociatedTypeWitness();
  v46 = sub_1BE1B2EE8();
  v45[1] = *(_QWORD *)(v46 - 8);
  v39 = MEMORY[0x1E0C80A78](v46);
  v75 = *(_QWORD *)(v38 - 8);
  v40 = MEMORY[0x1E0C80A78](v39);
  v47 = (char *)v45 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v45[0] = (char *)v45 - v42;
  v43 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v92 = v43;
  v93 = AssociatedConformanceWitness;
  v94 = &protocol witness table for Int;
  v95 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBDC44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t AssociatedTypeWitness;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);

  CRExtensible.rawValue.getter(a1, v5 - 96);
  switch(*(_QWORD *)(v5 - 96))
  {
    case 0:
      v6 = *v2;
      v7 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v9 = *(_QWORD *)(v5 - 128);
      v10 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v9;
      *(_QWORD *)(v5 - 136) = v10;
      sub_1BDDB6CA4(v6, v7);
      v12 = type metadata accessor for WeakRef(0, v3, AssociatedConformanceWitness, v11);
      sub_1BE1966E8(v12, v1);
      sub_1BDDB796C(v9, v10);
      v13 = *(_QWORD *)(v5 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v1, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 520) + 8))(v1, *(_QWORD *)(v5 - 512));
        v14 = *(_QWORD *)(v5 - 160);
        goto LABEL_15;
      }
      v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v77 = *(_QWORD *)(v5 - 528);
      v76(v77, v1, v3);
      v76(*(_QWORD *)(v5 - 504), v77, v3);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(v5 - 160);
      goto LABEL_26;
    case 1:
      v15 = *v2;
      v16 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v16;
      v17 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v18 = *(_QWORD *)(v5 - 128);
      v19 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v18;
      *(_QWORD *)(v5 - 136) = v19;
      sub_1BDDB6CA4(v15, v16);
      v21 = type metadata accessor for WeakRef(0, v4, v17, v20);
      v22 = *(_QWORD *)(v5 - 264);
      sub_1BE1966E8(v21, v22);
      sub_1BDDB796C(v18, v19);
      v23 = *(_QWORD *)(v5 - 272);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 488) + 8))(v22, *(_QWORD *)(v5 - 480));
        goto LABEL_14;
      }
      v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
      v80 = *(_QWORD *)(v5 - 496);
      v79(v80, v22, v4);
      v79(*(_QWORD *)(v5 - 472), v80, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(v5 - 160);
      goto LABEL_26;
    case 2:
      v24 = *v2;
      v25 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v25;
      v26 = *(_QWORD *)(v5 - 232);
      v27 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v28 = *(_QWORD *)(v5 - 128);
      v29 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v28;
      *(_QWORD *)(v5 - 136) = v29;
      sub_1BDDB6CA4(v24, v25);
      v31 = type metadata accessor for WeakRef(0, v26, v27, v30);
      v32 = *(_QWORD *)(v5 - 248);
      sub_1BE1966E8(v31, v32);
      sub_1BDDB796C(v28, v29);
      v33 = *(_QWORD *)(v5 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v26) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 456) + 8))(v32, *(_QWORD *)(v5 - 448));
        goto LABEL_14;
      }
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
      v82 = *(_QWORD *)(v5 - 464);
      v81(v82, v32, v26);
      v83 = v5 - 184;
      goto LABEL_24;
    case 3:
      v34 = *v2;
      v35 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v35;
      v26 = *(_QWORD *)(v5 - 208);
      v36 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v37 = *(_QWORD *)(v5 - 128);
      v38 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v37;
      *(_QWORD *)(v5 - 136) = v38;
      sub_1BDDB6CA4(v34, v35);
      v40 = type metadata accessor for WeakRef(0, v26, v36, v39);
      v41 = *(_QWORD *)(v5 - 224);
      sub_1BE1966E8(v40, v41);
      sub_1BDDB796C(v37, v38);
      v42 = *(_QWORD *)(v5 - 240);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v26) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 424) + 8))(v41, *(_QWORD *)(v5 - 416));
        goto LABEL_14;
      }
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
      v82 = *(_QWORD *)(v5 - 432);
      v81(v82, v41, v26);
      v83 = v5 - 152;
      goto LABEL_24;
    case 4:
      v43 = *v2;
      v44 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v44;
      v26 = *(_QWORD *)(v5 - 184);
      v45 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v46 = *(_QWORD *)(v5 - 128);
      v47 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v46;
      *(_QWORD *)(v5 - 136) = v47;
      sub_1BDDB6CA4(v43, v44);
      v49 = type metadata accessor for WeakRef(0, v26, v45, v48);
      v50 = *(_QWORD *)(v5 - 200);
      sub_1BE1966E8(v49, v50);
      sub_1BDDB796C(v46, v47);
      v51 = *(_QWORD *)(v5 - 216);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v50, 1, v26) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 392) + 8))(v50, *(_QWORD *)(v5 - 384));
        goto LABEL_14;
      }
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
      v82 = *(_QWORD *)(v5 - 400);
      v81(v82, v50, v26);
      v83 = v5 - 120;
      goto LABEL_24;
    case 5:
      v52 = *v2;
      v53 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v53;
      v26 = *(_QWORD *)(v5 - 168);
      v54 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v55 = *(_QWORD *)(v5 - 128);
      v56 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v55;
      *(_QWORD *)(v5 - 136) = v56;
      sub_1BDDB6CA4(v52, v53);
      v58 = type metadata accessor for WeakRef(0, v26, v54, v57);
      v59 = *(_QWORD *)(v5 - 176);
      sub_1BE1966E8(v58, v59);
      sub_1BDDB796C(v55, v56);
      v60 = *(_QWORD *)(v5 - 192);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v59, 1, v26) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 360) + 8))(v59, *(_QWORD *)(v5 - 352));
LABEL_14:
        v14 = *(_QWORD *)(v5 - 160);
        goto LABEL_15;
      }
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32);
      v82 = *(_QWORD *)(v5 - 368);
      v81(v82, v59, v26);
      v83 = v5 - 88;
LABEL_24:
      v81(*(_QWORD *)(v83 - 256), v82, v26);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(v5 - 160);
      goto LABEL_26;
    default:
      v63 = *(_QWORD *)(v5 - 320);
      v64 = *(_QWORD *)(v5 - 312);
      v65 = *v2;
      v66 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v66;
      v67 = *(_QWORD *)(v5 - 288);
      v68 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v69 = *(_QWORD *)(v5 - 128);
      v70 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v69;
      *(_QWORD *)(v5 - 136) = v70;
      sub_1BDDB6CA4(v65, v66);
      v72 = type metadata accessor for WeakRef(0, v67, v68, v71);
      v73 = *(_QWORD *)(v5 - 296);
      sub_1BE1966E8(v72, v73);
      sub_1BDDB796C(v69, v70);
      v74 = *(_QWORD *)(v5 - 304);
      v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v73, 1, v67);
      v14 = *(_QWORD *)(v5 - 160);
      if (v75 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v64 + 8))(v73, *(_QWORD *)(v5 - 336));
LABEL_15:
        v61 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v14, 1, 1, v61);
      }
      else
      {
        v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
        v84(v63, v73, v67);
        v84(*(_QWORD *)(v5 - 328), v63, v67);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_26:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v14, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEBE4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v28[30];

  v28[20] = a2;
  v28[21] = a1;
  v28[17] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v28[16] = (char *)v28 - v3;
  v28[15] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v28[14] = (char *)v28 - v5;
  v28[13] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v28[12] = (char *)v28 - v7;
  v28[11] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v28[10] = (char *)v28 - v9;
  v28[9] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v28[8] = (char *)v28 - v11;
  v28[7] = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v12);
  v28[6] = (char *)v28 - v13;
  v28[5] = swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v14);
  v28[4] = (char *)v28 - v15;
  swift_getAssociatedTypeWitness();
  v16 = sub_1BE1B2EE8();
  v28[18] = *(_QWORD *)(v16 - 8);
  v28[19] = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v28[3] = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v28[2] = (char *)v28 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v28[1] = (char *)v28 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v24 = MEMORY[0x1E0C80A78](v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28[24] = AssociatedTypeWitness;
  v28[25] = AssociatedConformanceWitness;
  v28[26] = &protocol witness table for Int;
  v28[27] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBE8D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  __n128 v73;
  int v74;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v4;
      v8 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v8;
      v9 = *(_QWORD *)(v6 - 280);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v11 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v3, v16, v14, v11);
      sub_1BDDB6CA4(v7, v8);
      v17 = *(_QWORD *)(v6 - 288);
      v18 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v17, v18 ^ 1u, 1, v9);
      *(_QWORD *)(v6 - 144) = v12;
      *(_QWORD *)(v6 - 136) = v13;
      sub_1BDE56E90(v17, v6 - 144, v9, AssociatedConformanceWitness);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    case 1:
      v31 = *v4;
      v32 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v32;
      v22 = *(_QWORD *)(v6 - 264);
      v23 = swift_getAssociatedConformanceWitness();
      v33 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v25 = *(_QWORD *)(v6 - 128);
      v26 = *(_QWORD *)(v6 - 120);
      v28 = *(_QWORD *)(v6 - 176);
      v27 = *(_QWORD *)(v6 - 168);
      v29 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v28 + 16))(v5, v29, v27, v33);
      sub_1BDDB6CA4(v31, v32);
      v30 = *(_QWORD *)(v6 - 272);
      goto LABEL_10;
    case 2:
      v34 = *v4;
      v35 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v35;
      v36 = *(_QWORD *)(v6 - 248);
      v37 = swift_getAssociatedConformanceWitness();
      v38 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v39 = *(_QWORD *)(v6 - 128);
      v40 = *(_QWORD *)(v6 - 120);
      v42 = *(_QWORD *)(v6 - 176);
      v41 = *(_QWORD *)(v6 - 168);
      v43 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v42 + 16))(v1, v43, v41, v38);
      sub_1BDDB6CA4(v34, v35);
      v44 = *(_QWORD *)(v6 - 256);
      v45 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v44, v45 ^ 1u, 1, v36);
      *(_QWORD *)(v6 - 144) = v39;
      *(_QWORD *)(v6 - 136) = v40;
      v46 = v6 - 144;
      v47 = v44;
      v48 = v36;
      v49 = v37;
      goto LABEL_7;
    case 3:
      v50 = *v4;
      v51 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v51;
      v52 = *(_QWORD *)(v6 - 232);
      v53 = swift_getAssociatedConformanceWitness();
      v54 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v55 = *(_QWORD *)(v6 - 128);
      v56 = *(_QWORD *)(v6 - 120);
      v42 = *(_QWORD *)(v6 - 176);
      v41 = *(_QWORD *)(v6 - 168);
      v43 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v42 + 16))(v2, v43, v41, v54);
      sub_1BDDB6CA4(v50, v51);
      v57 = *(_QWORD *)(v6 - 240);
      v58 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v57, v58 ^ 1u, 1, v52);
      *(_QWORD *)(v6 - 144) = v55;
      *(_QWORD *)(v6 - 136) = v56;
      v46 = v6 - 144;
      v47 = v57;
      v48 = v52;
      v49 = v53;
LABEL_7:
      sub_1BDE56E90(v47, v46, v48, v49);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
    case 4:
      v59 = *v4;
      v60 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v60;
      v61 = *(_QWORD *)(v6 - 216);
      v62 = swift_getAssociatedConformanceWitness();
      v63 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v64 = *(_QWORD *)(v6 - 128);
      v65 = *(_QWORD *)(v6 - 120);
      v67 = *(_QWORD *)(v6 - 176);
      v66 = *(_QWORD *)(v6 - 168);
      v68 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v67 + 16))(*(_QWORD *)(v6 - 312), v68, v66, v63);
      sub_1BDDB6CA4(v59, v60);
      v69 = *(_QWORD *)(v6 - 224);
      v70 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v69, v70 ^ 1u, 1, v61);
      *(_QWORD *)(v6 - 144) = v64;
      *(_QWORD *)(v6 - 136) = v65;
      sub_1BDE56E90(v69, v6 - 144, v61, v62);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v68, v66);
    case 5:
      v71 = *v4;
      v72 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v72;
      v22 = *(_QWORD *)(v6 - 200);
      v23 = swift_getAssociatedConformanceWitness();
      v73 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v25 = *(_QWORD *)(v6 - 128);
      v26 = *(_QWORD *)(v6 - 120);
      v28 = *(_QWORD *)(v6 - 176);
      v27 = *(_QWORD *)(v6 - 168);
      v29 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v28 + 16))(*(_QWORD *)(v6 - 304), v29, v27, v73);
      sub_1BDDB6CA4(v71, v72);
      v30 = *(_QWORD *)(v6 - 208);
      goto LABEL_10;
    default:
      v20 = *v4;
      v21 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v21;
      v22 = *(_QWORD *)(v6 - 184);
      v23 = swift_getAssociatedConformanceWitness();
      v24 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v25 = *(_QWORD *)(v6 - 128);
      v26 = *(_QWORD *)(v6 - 120);
      v28 = *(_QWORD *)(v6 - 176);
      v27 = *(_QWORD *)(v6 - 168);
      v29 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v28 + 16))(*(_QWORD *)(v6 - 296), v29, v27, v24);
      sub_1BDDB6CA4(v20, v21);
      v30 = *(_QWORD *)(v6 - 192);
LABEL_10:
      v74 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v30, v74 ^ 1u, 1, v22);
      *(_QWORD *)(v6 - 144) = v25;
      *(_QWORD *)(v6 - 136) = v26;
      sub_1BDE56E90(v30, v6 - 144, v22, v23);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
  }
}

void WeakTagged_6.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEBD61C);
}

uint64_t sub_1BDEBEE6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_6(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEBE4A4);
  return swift_release();
}

uint64_t WeakTagged_6.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEBE4A4);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_6.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_6.subscript.getter(a2, a3);
}

void (*sub_1BDEBF004())(uint64_t **a1, char a2)
{
  return sub_1BDEBF024;
}

void sub_1BDEBF024(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t)sub_1BDEBE4A4, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_6.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEBD61C);
}

void WeakTagged_6.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_6.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_6.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_6);
}

void WeakTagged_6.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_6.hash(into:));
}

void sub_1BDEBF0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_6.hash(into:));
}

uint64_t sub_1BDEBF0BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_6.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_6.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEBF0E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_6.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_6.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEBF11C(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_6, 1, a4);
}

uint64_t sub_1BDEBF11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v57[2];
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t (*v74)(_QWORD, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD v82[10];

  v57[1] = a5;
  v74 = a4;
  v75 = a3;
  v76 = a2;
  v77 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v69 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v66 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  MEMORY[0x1E0C80A78](v9);
  v70 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v78);
  v68 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v65 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)v57 - v16;
  MEMORY[0x1E0C80A78](v15);
  v71 = (uint64_t)v57 - v17;
  v81 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v81);
  v63 = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v72 = (char *)v57 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v64 = (char *)v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v79 = (char *)v57 - v26;
  MEMORY[0x1E0C80A78](v25);
  v80 = (char *)v57 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v62 = (char *)v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v73 = (char *)v57 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v57 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v57 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v60 = v38;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEBFF98);
    }
    v43 = (uint64_t)v80;
    sub_1BDDA2E8C((uint64_t)v35, (uint64_t)v80, type metadata accessor for Proto_Value);
    v44 = *(_QWORD *)(v43 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v45 = v44;
    v46 = v71;
    sub_1BDD86DEC(v45, v71, &qword_1ED6F26F0);
    v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48);
    v48 = v58(v46, 1, v47);
    v49 = (uint64_t)v72;
    if (v48 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v46, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1BDDA2E8C(v46, v49, type metadata accessor for Proto_TaggedValue);
        v50 = v77;
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v51 = *(int *)(v81 + 20);
    v50 = v77;
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v49 + v51) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v80, type metadata accessor for Proto_Value);
    v52 = *(_QWORD *)(v49 + *(int *)(v81 + 20));
    swift_beginAccess();
    v53 = *(_QWORD *)(v52 + 16);
    sub_1BDD9C3E0(v49, type metadata accessor for Proto_TaggedValue);
    v82[0] = v53;
    v54 = (char *)(v50 + *(int *)(v74(0, v76, v75) + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v80 = v54;
    v74 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))AssociatedConformanceWitness;
    CRExtensible.init(rawValue:)((uint64_t)v82, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v54);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEBFFD0(uint64_t a1, uint64_t a2)
{
  return WeakTagged_6.encode(to:)(a1, a2);
}

uint64_t WeakTagged_6.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.Enum, (uint64_t)&associated conformance descriptor for Tagged_6.Tagged_6.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_7.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_7.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_7.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_7.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_7.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_7.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_7.init(_:id:));
}

void WeakTagged_7.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_7, a4);
}

void WeakTagged_7.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_7);
}

void WeakTagged_7.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_7(0, a2, a3, a4);
  type metadata accessor for WeakTagged_7(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC0160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_7.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC0220(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_7.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC034C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC047C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC05AC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC06DC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC080C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC093C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC0A6C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_7.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t AssociatedConformanceWitness;
  _QWORD v53[3];
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _UNKNOWN **v111;
  uint64_t v112;

  v106 = a2;
  v107 = a3;
  v105 = a1;
  v108 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v82 = sub_1BE1B2EE8();
  v81 = *(_QWORD *)(v82 - 8);
  v5 = MEMORY[0x1E0C80A78](v82);
  v103 = AssociatedTypeWitness;
  v104 = (char *)v53 - v6;
  v101 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v83 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v80 = (char *)v53 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v78 = sub_1BE1B2EE8();
  v77 = *(_QWORD *)(v78 - 8);
  v11 = MEMORY[0x1E0C80A78](v78);
  v100 = (char *)v53 - v12;
  v102 = v10;
  v98 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v79 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v76 = (char *)v53 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v74 = sub_1BE1B2EE8();
  v73 = *(_QWORD *)(v74 - 8);
  v17 = MEMORY[0x1E0C80A78](v74);
  v97 = (char *)v53 - v18;
  v99 = v16;
  v95 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v75 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v72 = (char *)v53 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v70 = sub_1BE1B2EE8();
  v69 = *(_QWORD *)(v70 - 8);
  v23 = MEMORY[0x1E0C80A78](v70);
  v94 = (char *)v53 - v24;
  v96 = v22;
  v92 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v71 = (char *)v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v68 = (char *)v53 - v27;
  v28 = swift_getAssociatedTypeWitness();
  v66 = sub_1BE1B2EE8();
  v65 = *(_QWORD *)(v66 - 8);
  v29 = MEMORY[0x1E0C80A78](v66);
  v91 = (char *)v53 - v30;
  v93 = v28;
  v89 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v67 = (char *)v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v64 = (char *)v53 - v33;
  v34 = swift_getAssociatedTypeWitness();
  v62 = sub_1BE1B2EE8();
  v61 = *(_QWORD *)(v62 - 8);
  v35 = MEMORY[0x1E0C80A78](v62);
  v88 = (char *)v53 - v36;
  v90 = v34;
  v87 = *(_QWORD *)(v34 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v63 = (char *)v53 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v60 = (char *)v53 - v39;
  v40 = swift_getAssociatedTypeWitness();
  v58 = sub_1BE1B2EE8();
  v57 = *(_QWORD *)(v58 - 8);
  v41 = MEMORY[0x1E0C80A78](v58);
  v86 = (char *)v53 - v42;
  v85 = *(_QWORD *)(v40 - 8);
  v43 = MEMORY[0x1E0C80A78](v41);
  v59 = (char *)v53 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43);
  v56 = (char *)v53 - v45;
  v46 = swift_getAssociatedTypeWitness();
  v54 = sub_1BE1B2EE8();
  v53[2] = *(_QWORD *)(v54 - 8);
  v47 = MEMORY[0x1E0C80A78](v54);
  v84 = *(_QWORD *)(v46 - 8);
  v48 = MEMORY[0x1E0C80A78](v47);
  v55 = (char *)v53 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v48);
  v53[1] = (char *)v53 - v50;
  v51 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v109 = v51;
  v110 = AssociatedConformanceWitness;
  v111 = &protocol witness table for Int;
  v112 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC11F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t AssociatedTypeWitness;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  switch(*(_QWORD *)(v7 - 96))
  {
    case 0:
      v8 = *v5;
      v9 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v9;
      v10 = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v13 = *(_QWORD *)(v7 - 128);
      v12 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v13;
      *(_QWORD *)(v7 - 136) = v12;
      v14 = *(_QWORD *)(v7 - 160);
      *(_QWORD *)(v7 - 184) = *(_QWORD *)(v14 + 16);
      sub_1BDDB6CA4(v10, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 184))(v7 - 144, v6, AssociatedConformanceWitness, *(_QWORD *)(v7 - 168), v14);
      sub_1BDDB796C(v13, v12);
      v15 = *(_QWORD *)(v7 - 344);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v2, 1, v6) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 592) + 8))(v2, *(_QWORD *)(v7 - 584));
        goto LABEL_18;
      }
      v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v84 = *(_QWORD *)(v7 - 600);
      v83(v84, v2, v6);
      v83(*(_QWORD *)(v7 - 576), v84, v6);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v86 = *(_QWORD *)(v7 - 152);
      goto LABEL_28;
    case 1:
      v26 = *v5;
      v27 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v27;
      *(_QWORD *)(v7 - 184) = v3;
      v28 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v29 = *(_QWORD *)(v7 - 128);
      v30 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v29;
      *(_QWORD *)(v7 - 136) = v30;
      v31 = *(_QWORD *)(v7 - 160);
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v31 + 16);
      sub_1BDDB6CA4(v26, v27);
      v33 = *(_QWORD *)(v7 - 328);
      v32(v7 - 144, v1, v28, *(_QWORD *)(v7 - 168), v31);
      sub_1BDDB796C(v29, v30);
      v34 = *(_QWORD *)(v7 - 336);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v1) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 560) + 8))(v33, *(_QWORD *)(v7 - 552));
        goto LABEL_18;
      }
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
      v91 = *(_QWORD *)(v7 - 568);
      v90(v91, v33, v1);
      v90(*(_QWORD *)(v7 - 544), v91, v1);
      v92 = swift_getAssociatedTypeWitness();
      v93 = *(_QWORD *)(v7 - 152);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v93, 0, 1, v92);
    case 2:
      v35 = *v5;
      v36 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v36;
      *(_QWORD *)(v7 - 184) = v3;
      v37 = *(_QWORD *)(v7 - 296);
      v38 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v39 = *(_QWORD *)(v7 - 128);
      v40 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v39;
      *(_QWORD *)(v7 - 136) = v40;
      v41 = *(_QWORD *)(v7 - 160);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v41 + 16);
      sub_1BDDB6CA4(v35, v36);
      v43 = *(_QWORD *)(v7 - 312);
      v42(v7 - 144, v37, v38, *(_QWORD *)(v7 - 168), v41);
      sub_1BDDB796C(v39, v40);
      v44 = *(_QWORD *)(v7 - 320);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 528) + 8))(v43, *(_QWORD *)(v7 - 520));
        goto LABEL_18;
      }
      v94 = v43;
      v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v88 = *(_QWORD *)(v7 - 536);
      v87(v88, v94, v37);
      v89 = v7 - 256;
      goto LABEL_27;
    case 3:
      v45 = *v5;
      v46 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v46;
      *(_QWORD *)(v7 - 200) = v4;
      v37 = *(_QWORD *)(v7 - 272);
      v47 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v48 = *(_QWORD *)(v7 - 128);
      v49 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v48;
      *(_QWORD *)(v7 - 136) = v49;
      v50 = *(_QWORD *)(v7 - 160);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v50 + 16);
      sub_1BDDB6CA4(v45, v46);
      v52 = *(_QWORD *)(v7 - 288);
      v51(v7 - 144, v37, v47, *(_QWORD *)(v7 - 168), v50);
      sub_1BDDB796C(v48, v49);
      v53 = *(_QWORD *)(v7 - 304);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 496) + 8))(v52, *(_QWORD *)(v7 - 488));
        goto LABEL_18;
      }
      v95 = v52;
      v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
      v88 = *(_QWORD *)(v7 - 504);
      v87(v88, v95, v37);
      v89 = v7 - 224;
      goto LABEL_27;
    case 4:
      v54 = *v5;
      v55 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v55;
      *(_QWORD *)(v7 - 184) = v3;
      v37 = *(_QWORD *)(v7 - 248);
      v56 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v57 = *(_QWORD *)(v7 - 128);
      v58 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v57;
      *(_QWORD *)(v7 - 136) = v58;
      v59 = *(_QWORD *)(v7 - 160);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v59 + 16);
      sub_1BDDB6CA4(v54, v55);
      v61 = *(_QWORD *)(v7 - 264);
      v60(v7 - 144, v37, v56, *(_QWORD *)(v7 - 168), v59);
      sub_1BDDB796C(v57, v58);
      v62 = *(_QWORD *)(v7 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v61, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 464) + 8))(v61, *(_QWORD *)(v7 - 456));
        goto LABEL_18;
      }
      v96 = v61;
      v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32);
      v88 = *(_QWORD *)(v7 - 472);
      v87(v88, v96, v37);
      v89 = v7 - 192;
      goto LABEL_27;
    case 5:
      v63 = *v5;
      v64 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v64;
      *(_QWORD *)(v7 - 200) = v4;
      v37 = *(_QWORD *)(v7 - 224);
      v65 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v66 = *(_QWORD *)(v7 - 128);
      v67 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v66;
      *(_QWORD *)(v7 - 136) = v67;
      v68 = *(_QWORD *)(v7 - 160);
      v69 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v68 + 16);
      sub_1BDDB6CA4(v63, v64);
      v70 = *(_QWORD *)(v7 - 240);
      v69(v7 - 144, v37, v65, *(_QWORD *)(v7 - 168), v68);
      sub_1BDDB796C(v66, v67);
      v71 = *(_QWORD *)(v7 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 432) + 8))(v70, *(_QWORD *)(v7 - 424));
        goto LABEL_18;
      }
      v97 = v70;
      v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
      v88 = *(_QWORD *)(v7 - 440);
      v87(v88, v97, v37);
      v89 = v7 - 160;
      goto LABEL_27;
    case 6:
      v72 = *v5;
      v73 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v73;
      *(_QWORD *)(v7 - 184) = v3;
      v37 = *(_QWORD *)(v7 - 200);
      v74 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v75 = *(_QWORD *)(v7 - 128);
      v76 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v75;
      *(_QWORD *)(v7 - 136) = v76;
      v77 = *(_QWORD *)(v7 - 160);
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v77 + 16);
      sub_1BDDB6CA4(v72, v73);
      v79 = *(_QWORD *)(v7 - 216);
      v78(v7 - 144, v37, v74, *(_QWORD *)(v7 - 168), v77);
      sub_1BDDB796C(v75, v76);
      v80 = *(_QWORD *)(v7 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v79, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 400) + 8))(v79, *(_QWORD *)(v7 - 392));
        goto LABEL_18;
      }
      v98 = v79;
      v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32);
      v88 = *(_QWORD *)(v7 - 408);
      v87(v88, v98, v37);
      v89 = v7 - 128;
      goto LABEL_27;
    default:
      v16 = *v5;
      v17 = v5[1];
      *(_QWORD *)(v7 - 144) = *v5;
      *(_QWORD *)(v7 - 136) = v17;
      *(_QWORD *)(v7 - 200) = v4;
      v18 = *(_QWORD *)(v7 - 192);
      v19 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v20 = *(_QWORD *)(v7 - 128);
      v21 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v20;
      *(_QWORD *)(v7 - 136) = v21;
      v22 = *(_QWORD *)(v7 - 160);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16);
      sub_1BDDB6CA4(v16, v17);
      v24 = *(_QWORD *)(v7 - 184);
      v23(v7 - 144, v18, v19, *(_QWORD *)(v7 - 168), v22);
      sub_1BDDB796C(v20, v21);
      v25 = *(_QWORD *)(v7 - 208);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v18) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 368) + 8))(*(_QWORD *)(v7 - 184), *(_QWORD *)(v7 - 360));
LABEL_18:
        v81 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(*(_QWORD *)(v7 - 152), 1, 1, v81);
      }
      else
      {
        v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
        v88 = *(_QWORD *)(v7 - 376);
        v37 = *(_QWORD *)(v7 - 192);
        v87(v88, *(_QWORD *)(v7 - 184), v37);
        v89 = v7 - 96;
LABEL_27:
        v87(*(_QWORD *)(v89 - 256), v88, v37);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v86 = *(_QWORD *)(v7 - 152);
LABEL_28:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v86, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEC1B70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  _QWORD v51[3];
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _UNKNOWN **v107;
  uint64_t v108;

  v103 = a1;
  v104 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v78 = sub_1BE1B2EE8();
  v95 = *(_QWORD *)(v78 - 8);
  v3 = MEMORY[0x1E0C80A78](v78);
  v101 = (char *)v51 - v4;
  v102 = AssociatedTypeWitness;
  v99 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v79 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v91 = (char *)v51 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v76 = sub_1BE1B2EE8();
  v75 = *(_QWORD *)(v76 - 8);
  v9 = MEMORY[0x1E0C80A78](v76);
  v98 = (char *)v51 - v10;
  v100 = v8;
  v96 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v77 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v74 = (char *)v51 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v72 = sub_1BE1B2EE8();
  v71 = *(_QWORD *)(v72 - 8);
  v15 = MEMORY[0x1E0C80A78](v72);
  v94 = (char *)v51 - v16;
  v97 = v14;
  v92 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v73 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v70 = (char *)v51 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v68 = sub_1BE1B2EE8();
  v67 = *(_QWORD *)(v68 - 8);
  v21 = MEMORY[0x1E0C80A78](v68);
  v90 = (char *)v51 - v22;
  v93 = v20;
  v88 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v69 = (char *)v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v66 = (char *)v51 - v25;
  v26 = swift_getAssociatedTypeWitness();
  v64 = sub_1BE1B2EE8();
  v63 = *(_QWORD *)(v64 - 8);
  v27 = MEMORY[0x1E0C80A78](v64);
  v87 = (char *)v51 - v28;
  v89 = v26;
  v85 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v65 = (char *)v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v62 = (char *)v51 - v31;
  v32 = swift_getAssociatedTypeWitness();
  v60 = sub_1BE1B2EE8();
  v59 = *(_QWORD *)(v60 - 8);
  v33 = MEMORY[0x1E0C80A78](v60);
  v84 = (char *)v51 - v34;
  v86 = v32;
  v83 = *(_QWORD *)(v32 - 8);
  v35 = MEMORY[0x1E0C80A78](v33);
  v61 = (char *)v51 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v58 = (char *)v51 - v37;
  v38 = swift_getAssociatedTypeWitness();
  v56 = sub_1BE1B2EE8();
  v55 = *(_QWORD *)(v56 - 8);
  v39 = MEMORY[0x1E0C80A78](v56);
  v82 = (char *)v51 - v40;
  v81 = *(_QWORD *)(v38 - 8);
  v41 = MEMORY[0x1E0C80A78](v39);
  v57 = (char *)v51 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v54 = (char *)v51 - v43;
  v44 = swift_getAssociatedTypeWitness();
  v52 = sub_1BE1B2EE8();
  v51[2] = *(_QWORD *)(v52 - 8);
  v45 = MEMORY[0x1E0C80A78](v52);
  v80 = *(_QWORD *)(v44 - 8);
  v46 = MEMORY[0x1E0C80A78](v45);
  v53 = (char *)v51 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46);
  v51[1] = (char *)v51 - v48;
  v49 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v105 = v49;
  v106 = AssociatedConformanceWitness;
  v107 = &protocol witness table for Int;
  v108 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC226C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t AssociatedTypeWitness;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  CRExtensible.rawValue.getter(a1, v5 - 96);
  switch(*(_QWORD *)(v5 - 96))
  {
    case 0:
      v6 = *v2;
      v7 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v9 = *(_QWORD *)(v5 - 128);
      v10 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v9;
      *(_QWORD *)(v5 - 136) = v10;
      sub_1BDDB6CA4(v6, v7);
      v12 = type metadata accessor for WeakRef(0, v3, AssociatedConformanceWitness, v11);
      sub_1BE1966E8(v12, v1);
      sub_1BDDB796C(v9, v10);
      v13 = *(_QWORD *)(v5 - 344);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v1, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 576) + 8))(v1, *(_QWORD *)(v5 - 568));
        goto LABEL_18;
      }
      v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v83 = *(_QWORD *)(v5 - 584);
      v82(v83, v1, v3);
      v82(*(_QWORD *)(v5 - 560), v83, v3);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v85 = *(_QWORD *)(v5 - 152);
      goto LABEL_29;
    case 1:
      v26 = *v2;
      v27 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v27;
      v28 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v29 = *(_QWORD *)(v5 - 128);
      v30 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v29;
      *(_QWORD *)(v5 - 136) = v30;
      sub_1BDDB6CA4(v26, v27);
      v32 = type metadata accessor for WeakRef(0, v4, v28, v31);
      v33 = *(_QWORD *)(v5 - 328);
      sub_1BE1966E8(v32, v33);
      sub_1BDDB796C(v29, v30);
      v34 = *(_QWORD *)(v5 - 336);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 544) + 8))(v33, *(_QWORD *)(v5 - 536));
        goto LABEL_18;
      }
      v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
      v90 = *(_QWORD *)(v5 - 552);
      v89(v90, v33, v4);
      v89(*(_QWORD *)(v5 - 528), v90, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v85 = *(_QWORD *)(v5 - 152);
      goto LABEL_29;
    case 2:
      v35 = *v2;
      v36 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v36;
      v18 = *(_QWORD *)(v5 - 296);
      v37 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v38 = *(_QWORD *)(v5 - 128);
      v39 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v38;
      *(_QWORD *)(v5 - 136) = v39;
      sub_1BDDB6CA4(v35, v36);
      v41 = type metadata accessor for WeakRef(0, v18, v37, v40);
      v42 = *(_QWORD *)(v5 - 312);
      sub_1BE1966E8(v41, v42);
      sub_1BDDB796C(v38, v39);
      v43 = *(_QWORD *)(v5 - 320);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v42, 1, v18) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 512) + 8))(v42, *(_QWORD *)(v5 - 504));
        goto LABEL_18;
      }
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
      v91 = *(_QWORD *)(v5 - 520);
      v86(v91, v42, v18);
      v92 = v5 - 240;
      goto LABEL_27;
    case 3:
      v44 = *v2;
      v45 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v45;
      v18 = *(_QWORD *)(v5 - 272);
      v46 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v47 = *(_QWORD *)(v5 - 128);
      v48 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v47;
      *(_QWORD *)(v5 - 136) = v48;
      sub_1BDDB6CA4(v44, v45);
      v50 = type metadata accessor for WeakRef(0, v18, v46, v49);
      v51 = *(_QWORD *)(v5 - 288);
      sub_1BE1966E8(v50, v51);
      sub_1BDDB796C(v47, v48);
      v52 = *(_QWORD *)(v5 - 304);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v51, 1, v18) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 480) + 8))(v51, *(_QWORD *)(v5 - 472));
        goto LABEL_18;
      }
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
      v91 = *(_QWORD *)(v5 - 488);
      v86(v91, v51, v18);
      v92 = v5 - 208;
      goto LABEL_27;
    case 4:
      v53 = *v2;
      v54 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v54;
      v18 = *(_QWORD *)(v5 - 240);
      v55 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v56 = *(_QWORD *)(v5 - 128);
      v57 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v56;
      *(_QWORD *)(v5 - 136) = v57;
      sub_1BDDB6CA4(v53, v54);
      v59 = type metadata accessor for WeakRef(0, v18, v55, v58);
      v60 = *(_QWORD *)(v5 - 264);
      sub_1BE1966E8(v59, v60);
      sub_1BDDB796C(v56, v57);
      v61 = *(_QWORD *)(v5 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v60, 1, v18) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 448) + 8))(v60, *(_QWORD *)(v5 - 440));
        goto LABEL_18;
      }
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
      v91 = *(_QWORD *)(v5 - 456);
      v86(v91, v60, v18);
      v92 = v5 - 176;
      goto LABEL_27;
    case 5:
      v62 = *v2;
      v63 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v63;
      v18 = *(_QWORD *)(v5 - 208);
      v64 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v65 = *(_QWORD *)(v5 - 128);
      v66 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v65;
      *(_QWORD *)(v5 - 136) = v66;
      sub_1BDDB6CA4(v62, v63);
      v68 = type metadata accessor for WeakRef(0, v18, v64, v67);
      v69 = *(_QWORD *)(v5 - 232);
      sub_1BE1966E8(v68, v69);
      sub_1BDDB796C(v65, v66);
      v70 = *(_QWORD *)(v5 - 248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v69, 1, v18) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 416) + 8))(v69, *(_QWORD *)(v5 - 408));
        goto LABEL_18;
      }
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32);
      v91 = *(_QWORD *)(v5 - 424);
      v86(v91, v69, v18);
      v92 = v5 - 144;
      goto LABEL_27;
    case 6:
      v71 = *v2;
      v72 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v72;
      v18 = *(_QWORD *)(v5 - 184);
      v73 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v74 = *(_QWORD *)(v5 - 128);
      v75 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v74;
      *(_QWORD *)(v5 - 136) = v75;
      sub_1BDDB6CA4(v71, v72);
      v77 = type metadata accessor for WeakRef(0, v18, v73, v76);
      v78 = *(_QWORD *)(v5 - 200);
      sub_1BE1966E8(v77, v78);
      sub_1BDDB796C(v74, v75);
      v79 = *(_QWORD *)(v5 - 216);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v78, 1, v18) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 384) + 8))(v78, *(_QWORD *)(v5 - 376));
        goto LABEL_18;
      }
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32);
      v91 = *(_QWORD *)(v5 - 392);
      v86(v91, v78, v18);
      v92 = v5 - 112;
LABEL_27:
      v87 = *(_QWORD *)(v92 - 256);
      v88 = v91;
      goto LABEL_28;
    default:
      v14 = *(_QWORD *)(v5 - 256);
      v15 = *(_QWORD *)(v5 - 224);
      v16 = *v2;
      v17 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v17;
      v18 = *(_QWORD *)(v5 - 168);
      v19 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v20 = *(_QWORD *)(v5 - 128);
      v21 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v20;
      *(_QWORD *)(v5 - 136) = v21;
      sub_1BDDB6CA4(v16, v17);
      v23 = type metadata accessor for WeakRef(0, v18, v19, v22);
      v24 = *(_QWORD *)(v5 - 176);
      sub_1BE1966E8(v23, v24);
      sub_1BDDB796C(v20, v21);
      v25 = *(_QWORD *)(v5 - 192);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v18) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v15 + 8))(v24, *(_QWORD *)(v5 - 360));
LABEL_18:
        v80 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(*(_QWORD *)(v5 - 152), 1, 1, v80);
      }
      else
      {
        v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
        v86(v14, v24, v18);
        v87 = *(_QWORD *)(v5 - 352);
        v88 = v14;
LABEL_28:
        v86(v87, v88, v18);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v85 = *(_QWORD *)(v5 - 152);
LABEL_29:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v85, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEC2B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v32[32];

  v32[22] = a2;
  v32[23] = a1;
  v32[19] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v32[18] = (char *)v32 - v3;
  v32[17] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v32[16] = (char *)v32 - v5;
  v32[15] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v32[14] = (char *)v32 - v7;
  v32[13] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v32[12] = (char *)v32 - v9;
  v32[11] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v32[10] = (char *)v32 - v11;
  v32[9] = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v12);
  v32[8] = (char *)v32 - v13;
  v32[7] = swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v14);
  v32[6] = (char *)v32 - v15;
  v32[5] = swift_getAssociatedTypeWitness();
  v16 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v16);
  v32[4] = (char *)v32 - v17;
  swift_getAssociatedTypeWitness();
  v18 = sub_1BE1B2EE8();
  v32[20] = *(_QWORD *)(v18 - 8);
  v32[21] = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v32[3] = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v32[2] = (char *)v32 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v32[1] = (char *)v32 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v32[0] = (char *)v32 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v28 = MEMORY[0x1E0C80A78](v27);
  v29 = MEMORY[0x1E0C80A78](v28);
  MEMORY[0x1E0C80A78](v29);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32[26] = AssociatedTypeWitness;
  v32[27] = AssociatedConformanceWitness;
  v32[28] = &protocol witness table for Int;
  v32[29] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC3040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  int v76;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v5;
      v8 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v8;
      v9 = *(_QWORD *)(v6 - 296);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v11 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v2, v16, v14, v11);
      sub_1BDDB6CA4(v7, v8);
      v17 = *(_QWORD *)(v6 - 304);
      v18 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v17, v18 ^ 1u, 1, v9);
      *(_QWORD *)(v6 - 144) = v12;
      *(_QWORD *)(v6 - 136) = v13;
      v19 = v6 - 144;
      v20 = v17;
      v21 = v9;
      v22 = AssociatedConformanceWitness;
      goto LABEL_6;
    case 1:
      v34 = *v5;
      v35 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v35;
      v36 = *(_QWORD *)(v6 - 280);
      v37 = swift_getAssociatedConformanceWitness();
      v38 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v39 = *(_QWORD *)(v6 - 128);
      v40 = *(_QWORD *)(v6 - 120);
      v42 = *(_QWORD *)(v6 - 176);
      v41 = *(_QWORD *)(v6 - 168);
      v43 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v42 + 16))(v3, v43, v41, v38);
      sub_1BDDB6CA4(v34, v35);
      v44 = *(_QWORD *)(v6 - 288);
      v45 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v44, v45 ^ 1u, 1, v36);
      *(_QWORD *)(v6 - 144) = v39;
      *(_QWORD *)(v6 - 136) = v40;
      sub_1BDE56E90(v44, v6 - 144, v36, v37);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
    case 2:
      v47 = *v5;
      v48 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v48;
      v49 = *(_QWORD *)(v6 - 264);
      v50 = swift_getAssociatedConformanceWitness();
      v51 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v52 = *(_QWORD *)(v6 - 128);
      v53 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v1, v16, v14, v51);
      sub_1BDDB6CA4(v47, v48);
      v54 = *(_QWORD *)(v6 - 272);
      v55 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v54, v55 ^ 1u, 1, v49);
      *(_QWORD *)(v6 - 144) = v52;
      *(_QWORD *)(v6 - 136) = v53;
      v19 = v6 - 144;
      v20 = v54;
      v21 = v49;
      v22 = v50;
LABEL_6:
      sub_1BDE56E90(v20, v19, v21, v22);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    case 3:
      v56 = *v5;
      v57 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v57;
      v58 = *(_QWORD *)(v6 - 248);
      v26 = swift_getAssociatedConformanceWitness();
      v59 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v60 = *(_QWORD *)(v6 - 128);
      v61 = *(_QWORD *)(v6 - 120);
      v31 = *(_QWORD *)(v6 - 176);
      v30 = *(_QWORD *)(v6 - 168);
      v32 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v31 + 16))(v4, v32, v30, v59);
      sub_1BDDB6CA4(v56, v57);
      v62 = *(_QWORD *)(v6 - 256);
      v63 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v62, v63 ^ 1u, 1, v58);
      *(_QWORD *)(v6 - 144) = v60;
      *(_QWORD *)(v6 - 136) = v61;
      v64 = v6 - 144;
      v65 = v62;
      v66 = v58;
      goto LABEL_12;
    case 4:
      v67 = *v5;
      v68 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v68;
      v25 = *(_QWORD *)(v6 - 232);
      v26 = swift_getAssociatedConformanceWitness();
      v69 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v28 = *(_QWORD *)(v6 - 128);
      v29 = *(_QWORD *)(v6 - 120);
      v31 = *(_QWORD *)(v6 - 176);
      v30 = *(_QWORD *)(v6 - 168);
      v32 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v31 + 16))(*(_QWORD *)(v6 - 336), v32, v30, v69);
      sub_1BDDB6CA4(v67, v68);
      v33 = *(_QWORD *)(v6 - 240);
      goto LABEL_11;
    case 5:
      v70 = *v5;
      v71 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v71;
      v25 = *(_QWORD *)(v6 - 216);
      v26 = swift_getAssociatedConformanceWitness();
      v72 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v28 = *(_QWORD *)(v6 - 128);
      v29 = *(_QWORD *)(v6 - 120);
      v31 = *(_QWORD *)(v6 - 176);
      v30 = *(_QWORD *)(v6 - 168);
      v32 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v31 + 16))(*(_QWORD *)(v6 - 328), v32, v30, v72);
      sub_1BDDB6CA4(v70, v71);
      v33 = *(_QWORD *)(v6 - 224);
      goto LABEL_11;
    case 6:
      v73 = *v5;
      v74 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v74;
      v25 = *(_QWORD *)(v6 - 200);
      v26 = swift_getAssociatedConformanceWitness();
      v75 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v28 = *(_QWORD *)(v6 - 128);
      v29 = *(_QWORD *)(v6 - 120);
      v31 = *(_QWORD *)(v6 - 176);
      v30 = *(_QWORD *)(v6 - 168);
      v32 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v31 + 16))(*(_QWORD *)(v6 - 320), v32, v30, v75);
      sub_1BDDB6CA4(v73, v74);
      v33 = *(_QWORD *)(v6 - 208);
      goto LABEL_11;
    default:
      v23 = *v5;
      v24 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v24;
      v25 = *(_QWORD *)(v6 - 184);
      v26 = swift_getAssociatedConformanceWitness();
      v27 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v28 = *(_QWORD *)(v6 - 128);
      v29 = *(_QWORD *)(v6 - 120);
      v31 = *(_QWORD *)(v6 - 176);
      v30 = *(_QWORD *)(v6 - 168);
      v32 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v31 + 16))(*(_QWORD *)(v6 - 312), v32, v30, v27);
      sub_1BDDB6CA4(v23, v24);
      v33 = *(_QWORD *)(v6 - 192);
LABEL_11:
      v76 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v33, v76 ^ 1u, 1, v25);
      *(_QWORD *)(v6 - 144) = v28;
      *(_QWORD *)(v6 - 136) = v29;
      v64 = v6 - 144;
      v65 = v33;
      v66 = v25;
LABEL_12:
      sub_1BDE56E90(v65, v64, v66, v26);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v32, v30);
  }
}

void WeakTagged_7.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEC1B70);
}

uint64_t sub_1BDEC3648(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_7(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEC2B8C);
  return swift_release();
}

uint64_t WeakTagged_7.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEC2B8C);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_7.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_7.subscript.getter(a2, a3);
}

void (*sub_1BDEC37E0())(uint64_t **a1, char a2)
{
  return sub_1BDEC3800;
}

void sub_1BDEC3800(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t)sub_1BDEC2B8C, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_7.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEC1B70);
}

void WeakTagged_7.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_7.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_7.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_7);
}

void WeakTagged_7.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_7.hash(into:));
}

void sub_1BDEC388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_7.hash(into:));
}

uint64_t sub_1BDEC3898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_7.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_7.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEC38BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_7.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_7.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEC38F8(a1, a2, a3, (char *)type metadata accessor for WeakTagged_7, 1, a4);
}

uint64_t sub_1BDEC38F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int EnumCaseMultiPayload;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v58[4];
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84[10];

  v58[3] = a5;
  v73 = a4;
  v74 = a3;
  v75 = a2;
  v77 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v67 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x1E0C80A78](v9);
  v68 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v79);
  v66 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v63 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v62 = (char *)v58 - v16;
  MEMORY[0x1E0C80A78](v15);
  v70 = (uint64_t)v58 - v17;
  v83 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v83);
  v81 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v71 = (uint64_t)v58 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v82 = (char *)v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v80 = (char *)v58 - v26;
  MEMORY[0x1E0C80A78](v25);
  v69 = (uint64_t)v58 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v78 = (char *)v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v72 = (char *)v58 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v58 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v58 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v60 = v38;
    v61 = inited;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEC47ECLL);
    }
    v44 = v69;
    sub_1BDDA2E8C((uint64_t)v35, v69, type metadata accessor for Proto_Value);
    v76 = v21;
    v45 = *(_QWORD *)(v44 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v46 = v45;
    v47 = v70;
    sub_1BDD86DEC(v46, v70, &qword_1ED6F26F0);
    v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48);
    if (v59(v47, 1, v48) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v47, &qword_1ED6F26F0);
      v49 = v71;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v49 = v71;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v47, v71, type metadata accessor for Proto_TaggedValue);
        v51 = v77;
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v52 = *(int *)(v83 + 20);
    v51 = v77;
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v49 + v52) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value);
    v53 = *(_QWORD *)(v49 + *(int *)(v83 + 20));
    swift_beginAccess();
    v54 = *(_QWORD *)(v53 + 16);
    sub_1BDD9C3E0(v49, type metadata accessor for Proto_TaggedValue);
    v84[0] = v54;
    v55 = (char *)(v51 + *(int *)(((uint64_t (*)(_QWORD, uint64_t, uint64_t))v73)(0, v75, v74) + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v73 = v55;
    v71 = AssociatedTypeWitness;
    CRExtensible.init(rawValue:)((uint64_t)v84, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v55);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEC482C(uint64_t a1, uint64_t a2)
{
  return WeakTagged_7.encode(to:)(a1, a2);
}

uint64_t WeakTagged_7.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.Enum, (uint64_t)&associated conformance descriptor for Tagged_7.Tagged_7.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_8.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_8.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_8.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_8.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_8.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_8.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_8.init(_:id:));
}

void WeakTagged_8.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_8, a4);
}

void WeakTagged_8.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_8);
}

void WeakTagged_8.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_8(0, a2, a3, a4);
  type metadata accessor for WeakTagged_8(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC49BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_8.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC4A7C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_8.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC4BA8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC4CD8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC4E08(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC4F38(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC5068(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC5198(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.tagged8.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC52C8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 7)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC53F8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_8.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t AssociatedConformanceWitness;
  _QWORD v60[2];
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _UNKNOWN **v126;
  uint64_t v127;

  v120 = a3;
  v121 = a4;
  v119 = a1;
  v122 = a5;
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v93 = sub_1BE1B2EE8();
  v92 = *(_QWORD *)(v93 - 8);
  v7 = MEMORY[0x1E0C80A78](v93);
  v96 = (char *)v60 - v8;
  v118 = AssociatedTypeWitness;
  v95 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v94 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v91 = (char *)v60 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v89 = sub_1BE1B2EE8();
  v88 = *(_QWORD *)(v89 - 8);
  v13 = MEMORY[0x1E0C80A78](v89);
  v116 = (char *)v60 - v14;
  v117 = v12;
  v114 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v90 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v87 = (char *)v60 - v17;
  v18 = swift_getAssociatedTypeWitness();
  v85 = sub_1BE1B2EE8();
  v84 = *(_QWORD *)(v85 - 8);
  v19 = MEMORY[0x1E0C80A78](v85);
  v113 = (char *)v60 - v20;
  v115 = v18;
  v111 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v86 = (char *)v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v83 = (char *)v60 - v23;
  v24 = swift_getAssociatedTypeWitness();
  v81 = sub_1BE1B2EE8();
  v80 = *(_QWORD *)(v81 - 8);
  v25 = MEMORY[0x1E0C80A78](v81);
  v110 = (char *)v60 - v26;
  v112 = v24;
  v108 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v82 = (char *)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v79 = (char *)v60 - v29;
  v30 = swift_getAssociatedTypeWitness();
  v77 = sub_1BE1B2EE8();
  v76 = *(_QWORD *)(v77 - 8);
  v31 = MEMORY[0x1E0C80A78](v77);
  v107 = (char *)v60 - v32;
  v109 = v30;
  v105 = *(_QWORD *)(v30 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v78 = (char *)v60 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v75 = (char *)v60 - v35;
  v36 = swift_getAssociatedTypeWitness();
  v73 = sub_1BE1B2EE8();
  v72 = *(_QWORD *)(v73 - 8);
  v37 = MEMORY[0x1E0C80A78](v73);
  v104 = (char *)v60 - v38;
  v106 = v36;
  v102 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v37);
  v74 = (char *)v60 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v71 = (char *)v60 - v41;
  v42 = swift_getAssociatedTypeWitness();
  v69 = sub_1BE1B2EE8();
  v68 = *(_QWORD *)(v69 - 8);
  v43 = MEMORY[0x1E0C80A78](v69);
  v101 = (char *)v60 - v44;
  v103 = v42;
  v100 = *(_QWORD *)(v42 - 8);
  v45 = MEMORY[0x1E0C80A78](v43);
  v70 = (char *)v60 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45);
  v67 = (char *)v60 - v47;
  v48 = swift_getAssociatedTypeWitness();
  v65 = sub_1BE1B2EE8();
  v64 = *(_QWORD *)(v65 - 8);
  v49 = MEMORY[0x1E0C80A78](v65);
  v99 = (char *)v60 - v50;
  v98 = *(_QWORD *)(v48 - 8);
  v51 = MEMORY[0x1E0C80A78](v49);
  v66 = (char *)v60 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v63 = (char *)v60 - v53;
  v54 = swift_getAssociatedTypeWitness();
  v61 = sub_1BE1B2EE8();
  v60[1] = *(_QWORD *)(v61 - 8);
  v55 = MEMORY[0x1E0C80A78](v61);
  v97 = *(_QWORD *)(v54 - 8);
  v56 = MEMORY[0x1E0C80A78](v55);
  v62 = (char *)v60 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56);
  v58 = swift_getAssociatedTypeWitness();
  v123 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v124 = v58;
  v125 = AssociatedConformanceWitness;
  v126 = &protocol witness table for Int;
  v127 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC5C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  v8 = *(_QWORD *)(v7 - 96);
  *(_QWORD *)(v7 - 192) = v4;
  switch(v8)
  {
    case 0:
      v10 = *v2;
      v9 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v9;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v12 = *(_QWORD *)(v7 - 128);
      v13 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v12;
      *(_QWORD *)(v7 - 136) = v13;
      v14 = *(_QWORD *)(v7 - 168);
      *(_QWORD *)(v7 - 200) = *(_QWORD *)(v14 + 16);
      sub_1BDDB6CA4(v10, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 200))(v7 - 144, v5, AssociatedConformanceWitness, *(_QWORD *)(v7 - 176), v14);
      sub_1BDDB796C(v12, v13);
      v15 = *(_QWORD *)(v7 - 368);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v3, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 664) + 8))(v3, *(_QWORD *)(v7 - 656));
        v16 = *(_QWORD *)(v7 - 160);
        goto LABEL_19;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v96(v6, v3, v5);
      v96(*(_QWORD *)(v7 - 648), v6, v5);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v16 = *(_QWORD *)(v7 - 160);
      goto LABEL_32;
    case 1:
      v17 = *v2;
      v18 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v18;
      v19 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v20 = *(_QWORD *)(v7 - 128);
      v21 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v20;
      *(_QWORD *)(v7 - 136) = v21;
      v22 = *(_QWORD *)(v7 - 168);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16);
      sub_1BDDB6CA4(v17, v18);
      v24 = *(_QWORD *)(v7 - 352);
      v23(v7 - 144, v1, v19, *(_QWORD *)(v7 - 176), v22);
      sub_1BDDB796C(v20, v21);
      v25 = *(_QWORD *)(v7 - 360);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v1) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 632) + 8))(v24, *(_QWORD *)(v7 - 624));
        v16 = *(_QWORD *)(v7 - 160);
        goto LABEL_19;
      }
      v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
      v99 = *(_QWORD *)(v7 - 640);
      v98(v99, v24, v1);
      v98(*(_QWORD *)(v7 - 616), v99, v1);
      v100 = swift_getAssociatedTypeWitness();
      v101 = *(_QWORD *)(v7 - 160);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v101, 0, 1, v100);
    case 2:
      v26 = *v2;
      v27 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v27;
      v28 = *(_QWORD *)(v7 - 320);
      v29 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v30 = *(_QWORD *)(v7 - 128);
      v31 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v30;
      *(_QWORD *)(v7 - 136) = v31;
      v32 = *(_QWORD *)(v7 - 168);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16);
      sub_1BDDB6CA4(v26, v27);
      v34 = *(_QWORD *)(v7 - 336);
      v33(v7 - 144, v28, v29, *(_QWORD *)(v7 - 176), v32);
      sub_1BDDB796C(v30, v31);
      v35 = *(_QWORD *)(v7 - 344);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 600) + 8))(v34, *(_QWORD *)(v7 - 592));
        goto LABEL_18;
      }
      v102 = v34;
      v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
      v104 = *(_QWORD *)(v7 - 608);
      v103(v104, v102, v28);
      v105 = v7 - 328;
      goto LABEL_29;
    case 3:
      v36 = *v2;
      v37 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v37;
      v28 = *(_QWORD *)(v7 - 296);
      v38 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v39 = *(_QWORD *)(v7 - 128);
      v40 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v39;
      *(_QWORD *)(v7 - 136) = v40;
      v41 = *(_QWORD *)(v7 - 168);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v41 + 16);
      sub_1BDDB6CA4(v36, v37);
      v43 = *(_QWORD *)(v7 - 312);
      v42(v7 - 144, v28, v38, *(_QWORD *)(v7 - 176), v41);
      sub_1BDDB796C(v39, v40);
      v44 = *(_QWORD *)(v7 - 328);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 568) + 8))(v43, *(_QWORD *)(v7 - 560));
        goto LABEL_18;
      }
      v106 = v43;
      v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v104 = *(_QWORD *)(v7 - 576);
      v103(v104, v106, v28);
      v105 = v7 - 296;
      goto LABEL_29;
    case 4:
      v45 = *v2;
      v46 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v46;
      v28 = *(_QWORD *)(v7 - 272);
      v47 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v48 = *(_QWORD *)(v7 - 128);
      v49 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v48;
      *(_QWORD *)(v7 - 136) = v49;
      v50 = *(_QWORD *)(v7 - 168);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v50 + 16);
      sub_1BDDB6CA4(v45, v46);
      v52 = *(_QWORD *)(v7 - 288);
      v51(v7 - 144, v28, v47, *(_QWORD *)(v7 - 176), v50);
      sub_1BDDB796C(v48, v49);
      v53 = *(_QWORD *)(v7 - 304);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 536) + 8))(v52, *(_QWORD *)(v7 - 528));
        goto LABEL_18;
      }
      v107 = v52;
      v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
      v104 = *(_QWORD *)(v7 - 544);
      v103(v104, v107, v28);
      v105 = v7 - 264;
      goto LABEL_29;
    case 5:
      v54 = *v2;
      v55 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v55;
      v28 = *(_QWORD *)(v7 - 248);
      v56 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v57 = *(_QWORD *)(v7 - 128);
      v58 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v57;
      *(_QWORD *)(v7 - 136) = v58;
      v59 = *(_QWORD *)(v7 - 168);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v59 + 16);
      sub_1BDDB6CA4(v54, v55);
      v61 = *(_QWORD *)(v7 - 264);
      v60(v7 - 144, v28, v56, *(_QWORD *)(v7 - 176), v59);
      sub_1BDDB796C(v57, v58);
      v62 = *(_QWORD *)(v7 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v61, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 504) + 8))(v61, *(_QWORD *)(v7 - 496));
        goto LABEL_18;
      }
      v108 = v61;
      v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32);
      v104 = *(_QWORD *)(v7 - 512);
      v103(v104, v108, v28);
      v105 = v7 - 232;
      goto LABEL_29;
    case 6:
      v63 = *v2;
      v64 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v64;
      v28 = *(_QWORD *)(v7 - 224);
      v65 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v66 = *(_QWORD *)(v7 - 128);
      v67 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v66;
      *(_QWORD *)(v7 - 136) = v67;
      v68 = *(_QWORD *)(v7 - 168);
      v69 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v68 + 16);
      sub_1BDDB6CA4(v63, v64);
      v70 = *(_QWORD *)(v7 - 240);
      v69(v7 - 144, v28, v65, *(_QWORD *)(v7 - 176), v68);
      sub_1BDDB796C(v66, v67);
      v71 = *(_QWORD *)(v7 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 472) + 8))(v70, *(_QWORD *)(v7 - 464));
        goto LABEL_18;
      }
      v109 = v70;
      v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
      v104 = *(_QWORD *)(v7 - 480);
      v103(v104, v109, v28);
      v105 = v7 - 200;
LABEL_29:
      v103(*(_QWORD *)(v105 - 256), v104, v28);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v16 = *(_QWORD *)(v7 - 160);
      goto LABEL_32;
    case 7:
      v72 = *v2;
      v73 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v73;
      v74 = *(_QWORD *)(v7 - 208);
      v75 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v76 = *(_QWORD *)(v7 - 128);
      v77 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v76;
      *(_QWORD *)(v7 - 136) = v77;
      v78 = *(_QWORD *)(v7 - 168);
      v79 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v78 + 16);
      sub_1BDDB6CA4(v72, v73);
      v80 = *(_QWORD *)(v7 - 216);
      v79(v7 - 144, v74, v75, *(_QWORD *)(v7 - 176), v78);
      sub_1BDDB796C(v76, v77);
      v81 = *(_QWORD *)(v7 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v80, 1, v74) != 1)
      {
        v110 = v80;
        v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
        v112 = *(_QWORD *)(v7 - 448);
        v111(v112, v110, v74);
        v111(*(_QWORD *)(v7 - 424), v112, v74);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v16 = *(_QWORD *)(v7 - 160);
        goto LABEL_32;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 440) + 8))(v80, *(_QWORD *)(v7 - 432));
LABEL_18:
      v16 = *(_QWORD *)(v7 - 160);
      goto LABEL_19;
    default:
      v84 = *v2;
      v85 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v85;
      v86 = *(_QWORD *)(v7 - 200);
      v87 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v88 = *(_QWORD *)(v7 - 128);
      v89 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v88;
      *(_QWORD *)(v7 - 136) = v89;
      v90 = *(_QWORD *)(v7 - 168);
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v90 + 16);
      sub_1BDDB6CA4(v84, v85);
      v92 = v87;
      v93 = *(_QWORD *)(v7 - 376);
      v91(v7 - 144, v86, v92, *(_QWORD *)(v7 - 176), v90);
      sub_1BDDB796C(v88, v89);
      v94 = *(_QWORD *)(v7 - 384);
      v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v93, 1, v86);
      v16 = *(_QWORD *)(v7 - 160);
      if (v95 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 408) + 8))(v93, *(_QWORD *)(v7 - 400));
LABEL_19:
        v82 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v16, 1, 1, v82);
      }
      else
      {
        v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 32);
        v114 = *(_QWORD *)(v7 - 416);
        v115 = v93;
        v116 = *(_QWORD *)(v7 - 200);
        v113(v114, v115, v116);
        v113(*(_QWORD *)(v7 - 392), v114, v116);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_32:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v16, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEC66FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _UNKNOWN **v122;
  uint64_t v123;

  v117 = a1;
  v119 = a3;
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v90 = sub_1BE1B2EE8();
  v92 = *(_QWORD *)(v90 - 8);
  v5 = MEMORY[0x1E0C80A78](v90);
  v94 = (char *)&v58 - v6;
  v95 = AssociatedTypeWitness;
  v93 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v91 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v89 = (char *)&v58 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v87 = sub_1BE1B2EE8();
  v86 = *(_QWORD *)(v87 - 8);
  v11 = MEMORY[0x1E0C80A78](v87);
  v115 = (char *)&v58 - v12;
  v116 = v10;
  v113 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v88 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v85 = (char *)&v58 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v83 = sub_1BE1B2EE8();
  v82 = *(_QWORD *)(v83 - 8);
  v17 = MEMORY[0x1E0C80A78](v83);
  v112 = (char *)&v58 - v18;
  v114 = v16;
  v110 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v84 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v81 = (char *)&v58 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v79 = sub_1BE1B2EE8();
  v78 = *(_QWORD *)(v79 - 8);
  v23 = MEMORY[0x1E0C80A78](v79);
  v109 = (char *)&v58 - v24;
  v111 = v22;
  v107 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v80 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v77 = (char *)&v58 - v27;
  v28 = swift_getAssociatedTypeWitness();
  v75 = sub_1BE1B2EE8();
  v74 = *(_QWORD *)(v75 - 8);
  v29 = MEMORY[0x1E0C80A78](v75);
  v106 = (char *)&v58 - v30;
  v108 = v28;
  v104 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v76 = (char *)&v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v73 = (char *)&v58 - v33;
  v34 = swift_getAssociatedTypeWitness();
  v71 = sub_1BE1B2EE8();
  v70 = *(_QWORD *)(v71 - 8);
  v35 = MEMORY[0x1E0C80A78](v71);
  v103 = (char *)&v58 - v36;
  v105 = v34;
  v101 = *(_QWORD *)(v34 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v72 = (char *)&v58 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v69 = (char *)&v58 - v39;
  v40 = swift_getAssociatedTypeWitness();
  v67 = sub_1BE1B2EE8();
  v66 = *(_QWORD *)(v67 - 8);
  v41 = MEMORY[0x1E0C80A78](v67);
  v100 = (char *)&v58 - v42;
  v102 = v40;
  v99 = *(_QWORD *)(v40 - 8);
  v43 = MEMORY[0x1E0C80A78](v41);
  v68 = (char *)&v58 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43);
  v65 = (char *)&v58 - v45;
  v46 = swift_getAssociatedTypeWitness();
  v63 = sub_1BE1B2EE8();
  v62 = *(_QWORD *)(v63 - 8);
  v47 = MEMORY[0x1E0C80A78](v63);
  v98 = (char *)&v58 - v48;
  v97 = *(_QWORD *)(v46 - 8);
  v49 = MEMORY[0x1E0C80A78](v47);
  v64 = (char *)&v58 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v49);
  v61 = (char *)&v58 - v51;
  v52 = swift_getAssociatedTypeWitness();
  v59 = sub_1BE1B2EE8();
  v58 = *(_QWORD *)(v59 - 8);
  v53 = MEMORY[0x1E0C80A78](v59);
  v96 = *(_QWORD *)(v52 - 8);
  v54 = MEMORY[0x1E0C80A78](v53);
  v60 = (char *)&v58 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54);
  v56 = swift_getAssociatedTypeWitness();
  v118 = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v120 = v56;
  v121 = AssociatedConformanceWitness;
  v122 = &protocol witness table for Int;
  v123 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC6ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v2;
      v8 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v10 = *(_QWORD *)(v6 - 128);
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v10;
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDDB6CA4(v7, v8);
      v13 = type metadata accessor for WeakRef(0, v1, AssociatedConformanceWitness, v12);
      sub_1BE1966E8(v13, v3);
      sub_1BDDB796C(v10, v11);
      v14 = *(_QWORD *)(v6 - 336);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v3, 1, v1) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 640) + 8))(v3, *(_QWORD *)(v6 - 632));
        v15 = *(_QWORD *)(v6 - 152);
        goto LABEL_19;
      }
      v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v93(v4, v3, v1);
      v93(*(_QWORD *)(v6 - 624), v4, v1);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v95 = *(_QWORD *)(v6 - 152);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v95, 0, 1, AssociatedTypeWitness);
    case 1:
      v16 = *v2;
      v17 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v17;
      v18 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v19 = *(_QWORD *)(v6 - 128);
      v20 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v19;
      *(_QWORD *)(v6 - 136) = v20;
      sub_1BDDB6CA4(v16, v17);
      v22 = type metadata accessor for WeakRef(0, v5, v18, v21);
      v23 = *(_QWORD *)(v6 - 320);
      sub_1BE1966E8(v22, v23);
      sub_1BDDB796C(v19, v20);
      v24 = *(_QWORD *)(v6 - 328);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 608) + 8))(v23, *(_QWORD *)(v6 - 600));
        goto LABEL_18;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
      v97 = *(_QWORD *)(v6 - 616);
      v96(v97, v23, v5);
      v98 = v6 - 336;
      goto LABEL_30;
    case 2:
      v25 = *v2;
      v26 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v26;
      v5 = *(_QWORD *)(v6 - 288);
      v27 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v28 = *(_QWORD *)(v6 - 128);
      v29 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v28;
      *(_QWORD *)(v6 - 136) = v29;
      sub_1BDDB6CA4(v25, v26);
      v31 = type metadata accessor for WeakRef(0, v5, v27, v30);
      v32 = *(_QWORD *)(v6 - 304);
      sub_1BE1966E8(v31, v32);
      sub_1BDDB796C(v28, v29);
      v33 = *(_QWORD *)(v6 - 312);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 576) + 8))(v32, *(_QWORD *)(v6 - 568));
        goto LABEL_18;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
      v97 = *(_QWORD *)(v6 - 584);
      v96(v97, v32, v5);
      v98 = v6 - 304;
      goto LABEL_30;
    case 3:
      v34 = *v2;
      v35 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v35;
      v5 = *(_QWORD *)(v6 - 264);
      v36 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v37 = *(_QWORD *)(v6 - 128);
      v38 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v37;
      *(_QWORD *)(v6 - 136) = v38;
      sub_1BDDB6CA4(v34, v35);
      v40 = type metadata accessor for WeakRef(0, v5, v36, v39);
      v41 = *(_QWORD *)(v6 - 280);
      sub_1BE1966E8(v40, v41);
      sub_1BDDB796C(v37, v38);
      v42 = *(_QWORD *)(v6 - 296);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 544) + 8))(v41, *(_QWORD *)(v6 - 536));
        goto LABEL_18;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
      v97 = *(_QWORD *)(v6 - 552);
      v96(v97, v41, v5);
      v98 = v6 - 272;
      goto LABEL_30;
    case 4:
      v43 = *v2;
      v44 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v44;
      v5 = *(_QWORD *)(v6 - 240);
      v45 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v46 = *(_QWORD *)(v6 - 128);
      v47 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v46;
      *(_QWORD *)(v6 - 136) = v47;
      sub_1BDDB6CA4(v43, v44);
      v49 = type metadata accessor for WeakRef(0, v5, v45, v48);
      v50 = *(_QWORD *)(v6 - 256);
      sub_1BE1966E8(v49, v50);
      sub_1BDDB796C(v46, v47);
      v51 = *(_QWORD *)(v6 - 272);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v50, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 512) + 8))(v50, *(_QWORD *)(v6 - 504));
        goto LABEL_18;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
      v97 = *(_QWORD *)(v6 - 520);
      v96(v97, v50, v5);
      v98 = v6 - 240;
      goto LABEL_30;
    case 5:
      v52 = *v2;
      v53 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v53;
      v5 = *(_QWORD *)(v6 - 216);
      v54 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v55 = *(_QWORD *)(v6 - 128);
      v56 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v55;
      *(_QWORD *)(v6 - 136) = v56;
      sub_1BDDB6CA4(v52, v53);
      v58 = type metadata accessor for WeakRef(0, v5, v54, v57);
      v59 = *(_QWORD *)(v6 - 232);
      sub_1BE1966E8(v58, v59);
      sub_1BDDB796C(v55, v56);
      v60 = *(_QWORD *)(v6 - 248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v59, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 480) + 8))(v59, *(_QWORD *)(v6 - 472));
        goto LABEL_18;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32);
      v97 = *(_QWORD *)(v6 - 488);
      v96(v97, v59, v5);
      v98 = v6 - 208;
      goto LABEL_30;
    case 6:
      v61 = *v2;
      v62 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v62;
      v5 = *(_QWORD *)(v6 - 192);
      v63 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v64 = *(_QWORD *)(v6 - 128);
      v65 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v64;
      *(_QWORD *)(v6 - 136) = v65;
      sub_1BDDB6CA4(v61, v62);
      v67 = type metadata accessor for WeakRef(0, v5, v63, v66);
      v68 = *(_QWORD *)(v6 - 208);
      sub_1BE1966E8(v67, v68);
      sub_1BDDB796C(v64, v65);
      v69 = *(_QWORD *)(v6 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v68, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 448) + 8))(v68, *(_QWORD *)(v6 - 440));
        goto LABEL_18;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
      v97 = *(_QWORD *)(v6 - 456);
      v96(v97, v68, v5);
      v98 = v6 - 176;
      goto LABEL_30;
    case 7:
      v70 = *v2;
      v71 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v71;
      v5 = *(_QWORD *)(v6 - 176);
      v72 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v73 = *(_QWORD *)(v6 - 128);
      v74 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v73;
      *(_QWORD *)(v6 - 136) = v74;
      sub_1BDDB6CA4(v70, v71);
      v76 = type metadata accessor for WeakRef(0, v5, v72, v75);
      v77 = *(_QWORD *)(v6 - 184);
      sub_1BE1966E8(v76, v77);
      sub_1BDDB796C(v73, v74);
      v78 = *(_QWORD *)(v6 - 200);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v77, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 416) + 8))(v77, *(_QWORD *)(v6 - 408));
LABEL_18:
        v15 = *(_QWORD *)(v6 - 152);
        goto LABEL_19;
      }
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32);
      v97 = *(_QWORD *)(v6 - 424);
      v96(v97, v77, v5);
      v98 = v6 - 144;
LABEL_30:
      v96(*(_QWORD *)(v98 - 256), v97, v5);
      v99 = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 152);
      goto LABEL_31;
    default:
      v81 = *(_QWORD *)(v6 - 368);
      v82 = *v2;
      v83 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v83;
      v84 = *(_QWORD *)(v6 - 344);
      v85 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v86 = *(_QWORD *)(v6 - 128);
      v87 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v86;
      *(_QWORD *)(v6 - 136) = v87;
      sub_1BDDB6CA4(v82, v83);
      v89 = type metadata accessor for WeakRef(0, v84, v85, v88);
      v90 = *(_QWORD *)(v6 - 352);
      sub_1BE1966E8(v89, v90);
      sub_1BDDB796C(v86, v87);
      v91 = *(_QWORD *)(v6 - 360);
      v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v90, 1, v84);
      v15 = *(_QWORD *)(v6 - 152);
      if (v92 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v81 + 8))(v90, *(_QWORD *)(v6 - 384));
LABEL_19:
        v79 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v15, 1, 1, v79);
      }
      else
      {
        v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32);
        v101 = *(_QWORD *)(v6 - 392);
        v100(v101, v90, v84);
        v100(*(_QWORD *)(v6 - 376), v101, v84);
        v99 = swift_getAssociatedTypeWitness();
LABEL_31:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v15, 0, 1, v99);
      }
  }
}

void sub_1BDEC78FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v36[34];

  v36[26] = a2;
  v36[27] = a1;
  v36[23] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v36[22] = (char *)v36 - v3;
  v36[21] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v36[20] = (char *)v36 - v5;
  v36[19] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v36[18] = (char *)v36 - v7;
  v36[17] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v36[16] = (char *)v36 - v9;
  v36[15] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v36[14] = (char *)v36 - v11;
  v36[13] = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v12);
  v36[12] = (char *)v36 - v13;
  v36[11] = swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v14);
  v36[10] = (char *)v36 - v15;
  v36[9] = swift_getAssociatedTypeWitness();
  v16 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v16);
  v36[8] = (char *)v36 - v17;
  v36[7] = swift_getAssociatedTypeWitness();
  v18 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v18);
  v36[6] = (char *)v36 - v19;
  swift_getAssociatedTypeWitness();
  v20 = sub_1BE1B2EE8();
  v36[24] = *(_QWORD *)(v20 - 8);
  v36[25] = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v36[5] = (char *)v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v36[4] = (char *)v36 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v36[3] = (char *)v36 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v36[2] = (char *)v36 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v36[1] = (char *)v36 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = MEMORY[0x1E0C80A78](v32);
  MEMORY[0x1E0C80A78](v33);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v36[30] = AssociatedTypeWitness;
  v36[31] = AssociatedConformanceWitness;
  v36[32] = &protocol witness table for Int;
  v36[33] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC7E34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  __n128 v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  __n128 v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  __n128 v87;
  int v88;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = v1;
      v8 = *v1;
      v9 = v7[1];
      *(_QWORD *)(v6 - 144) = v8;
      *(_QWORD *)(v6 - 136) = v9;
      v10 = *(_QWORD *)(v6 - 312);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v12 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v13 = *(_QWORD *)(v6 - 128);
      v14 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16))(v5, v17, v15, v12);
      sub_1BDDB6CA4(v8, v9);
      v18 = *(_QWORD *)(v6 - 320);
      goto LABEL_12;
    case 1:
      v23 = v1;
      v24 = *v1;
      v25 = v23[1];
      *(_QWORD *)(v6 - 144) = v24;
      *(_QWORD *)(v6 - 136) = v25;
      v26 = *(_QWORD *)(v6 - 296);
      v27 = swift_getAssociatedConformanceWitness();
      v28 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v29 = *(_QWORD *)(v6 - 128);
      v30 = *(_QWORD *)(v6 - 120);
      v32 = *(_QWORD *)(v6 - 176);
      v31 = *(_QWORD *)(v6 - 168);
      v33 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v32 + 16))(v3, v33, v31, v28);
      sub_1BDDB6CA4(v24, v25);
      v34 = *(_QWORD *)(v6 - 304);
      v35 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v34, v35 ^ 1u, 1, v26);
      *(_QWORD *)(v6 - 144) = v29;
      *(_QWORD *)(v6 - 136) = v30;
      sub_1BDE56E90(v34, v6 - 144, v26, v27);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
    case 2:
      v37 = v1;
      v38 = *v1;
      v39 = v37[1];
      *(_QWORD *)(v6 - 144) = v38;
      *(_QWORD *)(v6 - 136) = v39;
      v40 = *(_QWORD *)(v6 - 280);
      v41 = swift_getAssociatedConformanceWitness();
      v42 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v43 = *(_QWORD *)(v6 - 128);
      v44 = *(_QWORD *)(v6 - 120);
      v46 = *(_QWORD *)(v6 - 176);
      v45 = *(_QWORD *)(v6 - 168);
      v47 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 16))(v4, v47, v45, v42);
      sub_1BDDB6CA4(v38, v39);
      v48 = *(_QWORD *)(v6 - 288);
      v49 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v48, v49 ^ 1u, 1, v40);
      *(_QWORD *)(v6 - 144) = v43;
      *(_QWORD *)(v6 - 136) = v44;
      sub_1BDE56E90(v48, v6 - 144, v40, v41);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v47, v45);
    case 3:
      v50 = v1;
      v51 = *v1;
      v52 = v50[1];
      *(_QWORD *)(v6 - 144) = v51;
      *(_QWORD *)(v6 - 136) = v52;
      v53 = *(_QWORD *)(v6 - 264);
      v54 = swift_getAssociatedConformanceWitness();
      v55 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v56 = *(_QWORD *)(v6 - 128);
      v57 = *(_QWORD *)(v6 - 120);
      v59 = *(_QWORD *)(v6 - 176);
      v58 = *(_QWORD *)(v6 - 168);
      v60 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v59 + 16))(v2, v60, v58, v55);
      sub_1BDDB6CA4(v51, v52);
      v61 = *(_QWORD *)(v6 - 272);
      v62 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v61, v62 ^ 1u, 1, v53);
      *(_QWORD *)(v6 - 144) = v56;
      *(_QWORD *)(v6 - 136) = v57;
      v63 = v6 - 144;
      v64 = v61;
      v65 = v53;
      v66 = v54;
      goto LABEL_8;
    case 4:
      v67 = *v1;
      v68 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v68;
      v69 = *(_QWORD *)(v6 - 248);
      v70 = swift_getAssociatedConformanceWitness();
      v71 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v72 = *(_QWORD *)(v6 - 128);
      v73 = *(_QWORD *)(v6 - 120);
      v59 = *(_QWORD *)(v6 - 176);
      v58 = *(_QWORD *)(v6 - 168);
      v60 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v59 + 16))(*(_QWORD *)(v6 - 360), v60, v58, v71);
      sub_1BDDB6CA4(v67, v68);
      v74 = *(_QWORD *)(v6 - 256);
      v75 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v74, v75 ^ 1u, 1, v69);
      *(_QWORD *)(v6 - 144) = v72;
      *(_QWORD *)(v6 - 136) = v73;
      v63 = v6 - 144;
      v64 = v74;
      v65 = v69;
      v66 = v70;
LABEL_8:
      sub_1BDE56E90(v64, v63, v65, v66);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v60, v58);
    case 5:
      v76 = v1;
      v77 = *v1;
      v78 = v76[1];
      *(_QWORD *)(v6 - 144) = v77;
      *(_QWORD *)(v6 - 136) = v78;
      v10 = *(_QWORD *)(v6 - 232);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v79 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v13 = *(_QWORD *)(v6 - 128);
      v14 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v16 + 16))(*(_QWORD *)(v6 - 352), v17, v15, v79);
      sub_1BDDB6CA4(v77, v78);
      v18 = *(_QWORD *)(v6 - 240);
      goto LABEL_12;
    case 6:
      v80 = v1;
      v81 = *v1;
      v82 = v80[1];
      *(_QWORD *)(v6 - 144) = v81;
      *(_QWORD *)(v6 - 136) = v82;
      v10 = *(_QWORD *)(v6 - 216);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v83 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v13 = *(_QWORD *)(v6 - 128);
      v14 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v16 + 16))(*(_QWORD *)(v6 - 344), v17, v15, v83);
      sub_1BDDB6CA4(v81, v82);
      v18 = *(_QWORD *)(v6 - 224);
      goto LABEL_12;
    case 7:
      v84 = v1;
      v85 = *v1;
      v86 = v84[1];
      *(_QWORD *)(v6 - 144) = v85;
      *(_QWORD *)(v6 - 136) = v86;
      v10 = *(_QWORD *)(v6 - 200);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v87 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v13 = *(_QWORD *)(v6 - 128);
      v14 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v16 + 16))(*(_QWORD *)(v6 - 336), v17, v15, v87);
      sub_1BDDB6CA4(v85, v86);
      v18 = *(_QWORD *)(v6 - 208);
      goto LABEL_12;
    default:
      v19 = v1;
      v20 = *v1;
      v21 = v19[1];
      *(_QWORD *)(v6 - 144) = v20;
      *(_QWORD *)(v6 - 136) = v21;
      v10 = *(_QWORD *)(v6 - 184);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v22 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v13 = *(_QWORD *)(v6 - 128);
      v14 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v16 + 16))(*(_QWORD *)(v6 - 328), v17, v15, v22);
      sub_1BDDB6CA4(v20, v21);
      v18 = *(_QWORD *)(v6 - 192);
LABEL_12:
      v88 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v18, v88 ^ 1u, 1, v10);
      *(_QWORD *)(v6 - 144) = v13;
      *(_QWORD *)(v6 - 136) = v14;
      sub_1BDE56E90(v18, v6 - 144, v10, AssociatedConformanceWitness);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v17, v15);
  }
}

void WeakTagged_8.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEC66FC);
}

uint64_t sub_1BDEC851C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_8(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEC78FC);
  return swift_release();
}

uint64_t WeakTagged_8.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEC78FC);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_8.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_8.subscript.getter(a2, a3);
}

void (*sub_1BDEC86B4())(uint64_t **a1, char a2)
{
  return sub_1BDEC86D4;
}

void sub_1BDEC86D4(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t)sub_1BDEC78FC, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_8.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEC66FC);
}

void WeakTagged_8.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_8.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_8.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_8);
}

void WeakTagged_8.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_8.hash(into:));
}

void sub_1BDEC8760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_8.hash(into:));
}

uint64_t sub_1BDEC876C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_8.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_8.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEC8790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_8.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_8.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEC87CC(a1, a2, a3, (char *)type metadata accessor for WeakTagged_8, 1, a4);
}

uint64_t sub_1BDEC87CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v56[2];
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81[10];

  v56[1] = a5;
  v72 = a4;
  v73 = a3;
  v74 = a2;
  v76 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v66 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v62);
  v65 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v61 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v60 = (char *)v56 - v16;
  MEMORY[0x1E0C80A78](v15);
  v69 = (uint64_t)v56 - v17;
  v80 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v80);
  v78 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v70 = (uint64_t)v56 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v77 = (char *)v56 - v26;
  MEMORY[0x1E0C80A78](v25);
  v68 = (uint64_t)v56 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v75 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v71 = (char *)v56 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v56 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v56 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v59 = v38;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEC96F4);
    }
    v43 = v68;
    sub_1BDDA2E8C((uint64_t)v35, v68, type metadata accessor for Proto_Value);
    v44 = *(_QWORD *)(v43 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v45 = v69;
    sub_1BDD86DEC(v44, v69, &qword_1ED6F26F0);
    v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
    if (v57(v45, 1, v46) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v45, &qword_1ED6F26F0);
      v47 = v70;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v47 = v70;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v45, v70, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v49 = *(int *)(v80 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v47 + v49) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    v50 = *(_QWORD *)(v47 + *(int *)(v80 + 20));
    swift_beginAccess();
    v51 = *(_QWORD *)(v50 + 16);
    sub_1BDD9C3E0(v47, type metadata accessor for Proto_TaggedValue);
    v81[0] = v51;
    v52 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v72)(0, v74, v73);
    v53 = (char *)(v76 + *(int *)(v52 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v72 = v53;
    v69 = AssociatedConformanceWitness;
    v70 = AssociatedTypeWitness;
    CRExtensible.init(rawValue:)((uint64_t)v81, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v53);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEC973C(uint64_t a1, uint64_t a2)
{
  return WeakTagged_8.encode(to:)(a1, a2);
}

uint64_t WeakTagged_8.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.Enum, (uint64_t)&associated conformance descriptor for Tagged_8.Tagged_8.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_9.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_9.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_9.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_9.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_9.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_9.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_9.init(_:id:));
}

void WeakTagged_9.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_9, a4);
}

void WeakTagged_9.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_9);
}

void WeakTagged_9.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_9(0, a2, a3, a4);
  type metadata accessor for WeakTagged_9(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC98CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_9.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC998C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_9.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC9AB8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC9BE8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC9D18(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC9E48(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEC9F78(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECA0A8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged8.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECA1D8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 7)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.tagged9.getter()
{
  sub_1BDECA284();
}

void sub_1BDECA284()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECA318(uint64_t a1)
{
  _QWORD *v1;
  void (*v2)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  _QWORD v12[14];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v12);
  if (v12[0] == 8)
  {
    v5 = *v3;
    v6 = v3[1];
    v11[0] = v5;
    v11[1] = v6;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v2(v12, v11, AssociatedTypeWitness, AssociatedConformanceWitness);
    v9 = v12[0];
    v10 = v12[1];
    result = sub_1BDDB6CA4(v5, v6);
  }
  else
  {
    v9 = 0;
    v10 = 0xF000000000000000;
  }
  *v1 = v9;
  v1[1] = v10;
  return result;
}

void WeakTagged_9.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECA448(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_9.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t AssociatedConformanceWitness;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _UNKNOWN **v139;
  uint64_t v140;

  v134 = a3;
  v135 = a4;
  v132 = a5;
  v133 = a1;
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v103 = sub_1BE1B2EE8();
  v102 = *(_QWORD *)(v103 - 8);
  v7 = MEMORY[0x1E0C80A78](v103);
  v106 = (char *)&v66 - v8;
  v131 = AssociatedTypeWitness;
  v105 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v104 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v101 = (char *)&v66 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v99 = sub_1BE1B2EE8();
  v98 = *(_QWORD *)(v99 - 8);
  v13 = MEMORY[0x1E0C80A78](v99);
  v129 = (char *)&v66 - v14;
  v130 = v12;
  v127 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v100 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v97 = (char *)&v66 - v17;
  v18 = swift_getAssociatedTypeWitness();
  v95 = sub_1BE1B2EE8();
  v94 = *(_QWORD *)(v95 - 8);
  v19 = MEMORY[0x1E0C80A78](v95);
  v126 = (char *)&v66 - v20;
  v128 = v18;
  v124 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v96 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v93 = (char *)&v66 - v23;
  v24 = swift_getAssociatedTypeWitness();
  v91 = sub_1BE1B2EE8();
  v90 = *(_QWORD *)(v91 - 8);
  v25 = MEMORY[0x1E0C80A78](v91);
  v123 = (char *)&v66 - v26;
  v125 = v24;
  v121 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v92 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v89 = (char *)&v66 - v29;
  v30 = swift_getAssociatedTypeWitness();
  v87 = sub_1BE1B2EE8();
  v86 = *(_QWORD *)(v87 - 8);
  v31 = MEMORY[0x1E0C80A78](v87);
  v120 = (char *)&v66 - v32;
  v122 = v30;
  v118 = *(_QWORD *)(v30 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v88 = (char *)&v66 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v85 = (char *)&v66 - v35;
  v36 = swift_getAssociatedTypeWitness();
  v83 = sub_1BE1B2EE8();
  v82 = *(_QWORD *)(v83 - 8);
  v37 = MEMORY[0x1E0C80A78](v83);
  v117 = (char *)&v66 - v38;
  v119 = v36;
  v115 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v37);
  v84 = (char *)&v66 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v81 = (char *)&v66 - v41;
  v42 = swift_getAssociatedTypeWitness();
  v79 = sub_1BE1B2EE8();
  v78 = *(_QWORD *)(v79 - 8);
  v43 = MEMORY[0x1E0C80A78](v79);
  v114 = (char *)&v66 - v44;
  v116 = v42;
  v112 = *(_QWORD *)(v42 - 8);
  v45 = MEMORY[0x1E0C80A78](v43);
  v80 = (char *)&v66 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45);
  v77 = (char *)&v66 - v47;
  v48 = swift_getAssociatedTypeWitness();
  v75 = sub_1BE1B2EE8();
  v74 = *(_QWORD *)(v75 - 8);
  v49 = MEMORY[0x1E0C80A78](v75);
  v111 = (char *)&v66 - v50;
  v113 = v48;
  v110 = *(_QWORD *)(v48 - 8);
  v51 = MEMORY[0x1E0C80A78](v49);
  v76 = (char *)&v66 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v73 = (char *)&v66 - v53;
  v54 = swift_getAssociatedTypeWitness();
  v71 = sub_1BE1B2EE8();
  v70 = *(_QWORD *)(v71 - 8);
  v55 = MEMORY[0x1E0C80A78](v71);
  v109 = (char *)&v66 - v56;
  v108 = *(_QWORD *)(v54 - 8);
  v57 = MEMORY[0x1E0C80A78](v55);
  v72 = (char *)&v66 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v57);
  v69 = (char *)&v66 - v59;
  v60 = swift_getAssociatedTypeWitness();
  v67 = sub_1BE1B2EE8();
  v66 = *(_QWORD *)(v67 - 8);
  v61 = MEMORY[0x1E0C80A78](v67);
  v107 = *(_QWORD *)(v60 - 8);
  v62 = MEMORY[0x1E0C80A78](v61);
  v68 = (char *)&v66 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v62);
  v64 = swift_getAssociatedTypeWitness();
  v136 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v137 = v64;
  v138 = AssociatedConformanceWitness;
  v139 = &protocol witness table for Int;
  v140 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECAD68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v103;
  uint64_t v104;
  int v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  v8 = *(_QWORD *)(v7 - 96);
  *(_QWORD *)(v7 - 192) = v5;
  switch(v8)
  {
    case 0:
      v9 = *v1;
      v10 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v10;
      v11 = v9;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v14 = *(_QWORD *)(v7 - 128);
      v13 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v14;
      *(_QWORD *)(v7 - 136) = v13;
      v15 = *(_QWORD *)(v7 - 160);
      *(_QWORD *)(v7 - 200) = *(_QWORD *)(v15 + 16);
      sub_1BDDB6CA4(v11, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 200))(v7 - 144, v6, AssociatedConformanceWitness, *(_QWORD *)(v7 - 168), v15);
      sub_1BDDB796C(v14, v13);
      v16 = *(_QWORD *)(v7 - 392);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v2, 1, v6) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 720) + 8))(v2, *(_QWORD *)(v7 - 712));
        v17 = *(_QWORD *)(v7 - 184);
        goto LABEL_21;
      }
      v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
      v106(v3, v2, v6);
      v106(*(_QWORD *)(v7 - 704), v3, v6);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v17 = *(_QWORD *)(v7 - 184);
      goto LABEL_35;
    case 1:
      v19 = *v1;
      v18 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v18;
      v20 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v21 = *(_QWORD *)(v7 - 128);
      v22 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v21;
      *(_QWORD *)(v7 - 136) = v22;
      v23 = *(_QWORD *)(v7 - 160);
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v23 + 16);
      sub_1BDDB6CA4(v19, v18);
      v25 = *(_QWORD *)(v7 - 376);
      v24(v7 - 144, v4, v20, *(_QWORD *)(v7 - 168), v23);
      sub_1BDDB796C(v21, v22);
      v26 = *(_QWORD *)(v7 - 384);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v25, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 688) + 8))(v25, *(_QWORD *)(v7 - 680));
        v17 = *(_QWORD *)(v7 - 184);
        goto LABEL_21;
      }
      v108 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
      v109 = *(_QWORD *)(v7 - 696);
      v108(v109, v25, v4);
      v108(*(_QWORD *)(v7 - 672), v109, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v17 = *(_QWORD *)(v7 - 184);
      goto LABEL_35;
    case 2:
      v27 = *v1;
      v28 = v1[1];
      *(_QWORD *)(v7 - 144) = v27;
      *(_QWORD *)(v7 - 136) = v28;
      v29 = *(_QWORD *)(v7 - 344);
      v30 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v31 = *(_QWORD *)(v7 - 128);
      v32 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v31;
      *(_QWORD *)(v7 - 136) = v32;
      v33 = *(_QWORD *)(v7 - 160);
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v33 + 16);
      sub_1BDDB6CA4(v27, v28);
      v35 = *(_QWORD *)(v7 - 360);
      v34(v7 - 144, v29, v30, *(_QWORD *)(v7 - 168), v33);
      sub_1BDDB796C(v31, v32);
      v36 = *(_QWORD *)(v7 - 368);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v29) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 656) + 8))(v35, *(_QWORD *)(v7 - 648));
        goto LABEL_20;
      }
      v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
      v111 = *(_QWORD *)(v7 - 664);
      v110(v111, v35, v29);
      v110(*(_QWORD *)(v7 - 640), v111, v29);
      v112 = swift_getAssociatedTypeWitness();
      v113 = *(_QWORD *)(v7 - 184);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v113, 0, 1, v112);
    case 3:
      v38 = *v1;
      v37 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v37;
      v39 = *(_QWORD *)(v7 - 320);
      v40 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v41 = *(_QWORD *)(v7 - 128);
      v42 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v41;
      *(_QWORD *)(v7 - 136) = v42;
      v43 = *(_QWORD *)(v7 - 160);
      v44 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v43 + 16);
      sub_1BDDB6CA4(v38, v37);
      v45 = *(_QWORD *)(v7 - 336);
      v44(v7 - 144, v39, v40, *(_QWORD *)(v7 - 168), v43);
      sub_1BDDB796C(v41, v42);
      v46 = *(_QWORD *)(v7 - 352);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v45, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 624) + 8))(v45, *(_QWORD *)(v7 - 616));
        goto LABEL_20;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32);
      v115 = *(_QWORD *)(v7 - 632);
      v114(v115, v45, v39);
      v116 = v7 - 352;
      goto LABEL_32;
    case 4:
      v48 = *v1;
      v47 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v47;
      v39 = *(_QWORD *)(v7 - 296);
      v49 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v50 = *(_QWORD *)(v7 - 128);
      v51 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v50;
      *(_QWORD *)(v7 - 136) = v51;
      v52 = *(_QWORD *)(v7 - 160);
      v53 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v52 + 16);
      sub_1BDDB6CA4(v48, v47);
      v54 = *(_QWORD *)(v7 - 312);
      v53(v7 - 144, v39, v49, *(_QWORD *)(v7 - 168), v52);
      sub_1BDDB796C(v50, v51);
      v55 = *(_QWORD *)(v7 - 328);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v54, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 592) + 8))(v54, *(_QWORD *)(v7 - 584));
        goto LABEL_20;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
      v115 = *(_QWORD *)(v7 - 600);
      v114(v115, v54, v39);
      v116 = v7 - 320;
      goto LABEL_32;
    case 5:
      v57 = *v1;
      v56 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v56;
      v39 = *(_QWORD *)(v7 - 272);
      v58 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v59 = *(_QWORD *)(v7 - 128);
      v60 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v59;
      *(_QWORD *)(v7 - 136) = v60;
      v61 = *(_QWORD *)(v7 - 160);
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v61 + 16);
      sub_1BDDB6CA4(v57, v56);
      v63 = *(_QWORD *)(v7 - 288);
      v62(v7 - 144, v39, v58, *(_QWORD *)(v7 - 168), v61);
      sub_1BDDB796C(v59, v60);
      v64 = *(_QWORD *)(v7 - 304);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 560) + 8))(v63, *(_QWORD *)(v7 - 552));
        goto LABEL_20;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32);
      v115 = *(_QWORD *)(v7 - 568);
      v114(v115, v63, v39);
      v116 = v7 - 288;
      goto LABEL_32;
    case 6:
      v66 = *v1;
      v65 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v65;
      v39 = *(_QWORD *)(v7 - 248);
      v67 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v68 = *(_QWORD *)(v7 - 128);
      v69 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v68;
      *(_QWORD *)(v7 - 136) = v69;
      v70 = *(_QWORD *)(v7 - 160);
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v70 + 16);
      sub_1BDDB6CA4(v66, v65);
      v72 = *(_QWORD *)(v7 - 264);
      v71(v7 - 144, v39, v67, *(_QWORD *)(v7 - 168), v70);
      sub_1BDDB796C(v68, v69);
      v73 = *(_QWORD *)(v7 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v72, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 528) + 8))(v72, *(_QWORD *)(v7 - 520));
        goto LABEL_20;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
      v115 = *(_QWORD *)(v7 - 536);
      v114(v115, v72, v39);
      v116 = v7 - 256;
      goto LABEL_32;
    case 7:
      v75 = *v1;
      v74 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v74;
      v39 = *(_QWORD *)(v7 - 224);
      v76 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v77 = *(_QWORD *)(v7 - 128);
      v78 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v77;
      *(_QWORD *)(v7 - 136) = v78;
      v79 = *(_QWORD *)(v7 - 160);
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v79 + 16);
      sub_1BDDB6CA4(v75, v74);
      v81 = *(_QWORD *)(v7 - 240);
      v80(v7 - 144, v39, v76, *(_QWORD *)(v7 - 168), v79);
      sub_1BDDB796C(v77, v78);
      v82 = *(_QWORD *)(v7 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v81, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 496) + 8))(v81, *(_QWORD *)(v7 - 488));
        goto LABEL_20;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32);
      v115 = *(_QWORD *)(v7 - 504);
      v114(v115, v81, v39);
      v116 = v7 - 224;
LABEL_32:
      v114(*(_QWORD *)(v116 - 256), v115, v39);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v17 = *(_QWORD *)(v7 - 184);
      goto LABEL_35;
    case 8:
      v84 = *v1;
      v83 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v83;
      v85 = *(_QWORD *)(v7 - 208);
      v86 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v87 = *(_QWORD *)(v7 - 128);
      v88 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v87;
      *(_QWORD *)(v7 - 136) = v88;
      v89 = *(_QWORD *)(v7 - 160);
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v89 + 16);
      sub_1BDDB6CA4(v84, v83);
      v91 = *(_QWORD *)(v7 - 216);
      v90(v7 - 144, v85, v86, *(_QWORD *)(v7 - 168), v89);
      sub_1BDDB796C(v87, v88);
      v92 = *(_QWORD *)(v7 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v91, 1, v85) != 1)
      {
        v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32);
        v118 = *(_QWORD *)(v7 - 472);
        v117(v118, v91, v85);
        v117(*(_QWORD *)(v7 - 448), v118, v85);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v17 = *(_QWORD *)(v7 - 184);
        goto LABEL_35;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 464) + 8))(v91, *(_QWORD *)(v7 - 456));
LABEL_20:
      v17 = *(_QWORD *)(v7 - 184);
      goto LABEL_21;
    default:
      v96 = *v1;
      v95 = v1[1];
      *(_QWORD *)(v7 - 144) = *v1;
      *(_QWORD *)(v7 - 136) = v95;
      v97 = *(_QWORD *)(v7 - 200);
      v98 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v99 = *(_QWORD *)(v7 - 128);
      v100 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v99;
      *(_QWORD *)(v7 - 136) = v100;
      v101 = *(_QWORD *)(v7 - 160);
      v102 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v101 + 16);
      sub_1BDDB6CA4(v96, v95);
      v103 = *(_QWORD *)(v7 - 400);
      v102(v7 - 144, v97, v98, *(_QWORD *)(v7 - 168), v101);
      sub_1BDDB796C(v99, v100);
      v104 = *(_QWORD *)(v7 - 408);
      v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v103, 1, v97);
      v17 = *(_QWORD *)(v7 - 184);
      if (v105 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 432) + 8))(v103, *(_QWORD *)(v7 - 424));
LABEL_21:
        v93 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v17, 1, 1, v93);
      }
      else
      {
        v119 = *(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32);
        v120 = *(_QWORD *)(v7 - 440);
        v121 = *(_QWORD *)(v7 - 200);
        v119(v120, v103, v121);
        v119(*(_QWORD *)(v7 - 416), v120, v121);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_35:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v17, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDECB960(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t AssociatedConformanceWitness;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _UNKNOWN **v137;
  uint64_t v138;

  v131 = a3;
  v132 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v100 = sub_1BE1B2EE8();
  v103 = *(_QWORD *)(v100 - 8);
  v6 = MEMORY[0x1E0C80A78](v100);
  v105 = (char *)&v65 - v7;
  v106 = AssociatedTypeWitness;
  v104 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v101 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v102 = (char *)&v65 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v98 = sub_1BE1B2EE8();
  v97 = *(_QWORD *)(v98 - 8);
  v12 = MEMORY[0x1E0C80A78](v98);
  v129 = (char *)&v65 - v13;
  v130 = v11;
  v127 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v99 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v96 = (char *)&v65 - v16;
  v17 = swift_getAssociatedTypeWitness();
  v94 = sub_1BE1B2EE8();
  v93 = *(_QWORD *)(v94 - 8);
  v18 = MEMORY[0x1E0C80A78](v94);
  v126 = (char *)&v65 - v19;
  v128 = v17;
  v124 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v95 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v92 = (char *)&v65 - v22;
  v23 = swift_getAssociatedTypeWitness();
  v90 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v90 - 8);
  v24 = MEMORY[0x1E0C80A78](v90);
  v123 = (char *)&v65 - v25;
  v125 = v23;
  v121 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  v91 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v88 = (char *)&v65 - v28;
  v29 = swift_getAssociatedTypeWitness();
  v86 = sub_1BE1B2EE8();
  v85 = *(_QWORD *)(v86 - 8);
  v30 = MEMORY[0x1E0C80A78](v86);
  v120 = (char *)&v65 - v31;
  v122 = v29;
  v118 = *(_QWORD *)(v29 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v87 = (char *)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v84 = (char *)&v65 - v34;
  v35 = swift_getAssociatedTypeWitness();
  v82 = sub_1BE1B2EE8();
  v81 = *(_QWORD *)(v82 - 8);
  v36 = MEMORY[0x1E0C80A78](v82);
  v117 = (char *)&v65 - v37;
  v119 = v35;
  v115 = *(_QWORD *)(v35 - 8);
  v38 = MEMORY[0x1E0C80A78](v36);
  v83 = (char *)&v65 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v80 = (char *)&v65 - v40;
  v41 = swift_getAssociatedTypeWitness();
  v78 = sub_1BE1B2EE8();
  v77 = *(_QWORD *)(v78 - 8);
  v42 = MEMORY[0x1E0C80A78](v78);
  v114 = (char *)&v65 - v43;
  v116 = v41;
  v112 = *(_QWORD *)(v41 - 8);
  v44 = MEMORY[0x1E0C80A78](v42);
  v79 = (char *)&v65 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44);
  v76 = (char *)&v65 - v46;
  v47 = swift_getAssociatedTypeWitness();
  v74 = sub_1BE1B2EE8();
  v73 = *(_QWORD *)(v74 - 8);
  v48 = MEMORY[0x1E0C80A78](v74);
  v111 = (char *)&v65 - v49;
  v113 = v47;
  v110 = *(_QWORD *)(v47 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v75 = (char *)&v65 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50);
  v72 = (char *)&v65 - v52;
  v53 = swift_getAssociatedTypeWitness();
  v70 = sub_1BE1B2EE8();
  v69 = *(_QWORD *)(v70 - 8);
  v54 = MEMORY[0x1E0C80A78](v70);
  v109 = (char *)&v65 - v55;
  v108 = *(_QWORD *)(v53 - 8);
  v56 = MEMORY[0x1E0C80A78](v54);
  v71 = (char *)&v65 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56);
  v68 = (char *)&v65 - v58;
  v59 = swift_getAssociatedTypeWitness();
  v66 = sub_1BE1B2EE8();
  v65 = *(_QWORD *)(v66 - 8);
  v60 = MEMORY[0x1E0C80A78](v66);
  v107 = *(_QWORD *)(v59 - 8);
  v61 = MEMORY[0x1E0C80A78](v60);
  v67 = (char *)&v65 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61);
  v63 = swift_getAssociatedTypeWitness();
  v133 = v3;
  v134 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v135 = v63;
  v136 = AssociatedConformanceWitness;
  v137 = &protocol witness table for Int;
  v138 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECC200(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t AssociatedTypeWitness;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t);

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v2;
      v8 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v10 = *(_QWORD *)(v6 - 128);
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v10;
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDDB6CA4(v7, v8);
      v13 = type metadata accessor for WeakRef(0, v5, AssociatedConformanceWitness, v12);
      sub_1BE1966E8(v13, v3);
      sub_1BDDB796C(v10, v11);
      v14 = *(_QWORD *)(v6 - 368);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v3, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 704) + 8))(v3, *(_QWORD *)(v6 - 696));
        v15 = *(_QWORD *)(v6 - 176);
        goto LABEL_21;
      }
      v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v110(v1, v3, v5);
      v110(*(_QWORD *)(v6 - 688), v1, v5);
      goto LABEL_34;
    case 1:
      v16 = *v2;
      v17 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v17;
      v18 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v19 = *(_QWORD *)(v6 - 128);
      v20 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v19;
      *(_QWORD *)(v6 - 136) = v20;
      sub_1BDDB6CA4(v16, v17);
      v22 = type metadata accessor for WeakRef(0, v4, v18, v21);
      v23 = *(_QWORD *)(v6 - 352);
      sub_1BE1966E8(v22, v23);
      sub_1BDDB796C(v19, v20);
      v24 = *(_QWORD *)(v6 - 360);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 672) + 8))(v23, *(_QWORD *)(v6 - 664));
        goto LABEL_20;
      }
      v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
      v112 = *(_QWORD *)(v6 - 680);
      v111(v112, v23, v4);
      v111(*(_QWORD *)(v6 - 656), v112, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 176);
      goto LABEL_35;
    case 2:
      v25 = *v2;
      v26 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v26;
      v27 = *(_QWORD *)(v6 - 320);
      v28 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v29 = *(_QWORD *)(v6 - 128);
      v30 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v29;
      *(_QWORD *)(v6 - 136) = v30;
      sub_1BDDB6CA4(v25, v26);
      v32 = type metadata accessor for WeakRef(0, v27, v28, v31);
      v33 = *(_QWORD *)(v6 - 336);
      sub_1BE1966E8(v32, v33);
      sub_1BDDB796C(v29, v30);
      v34 = *(_QWORD *)(v6 - 344);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v27) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 640) + 8))(v33, *(_QWORD *)(v6 - 632));
        goto LABEL_20;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
      v115 = *(_QWORD *)(v6 - 648);
      v114(v115, v33, v27);
      v114(*(_QWORD *)(v6 - 624), v115, v27);
      goto LABEL_34;
    case 3:
      v35 = *v2;
      v36 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v36;
      v37 = *(_QWORD *)(v6 - 296);
      v38 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v39 = *(_QWORD *)(v6 - 128);
      v40 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v39;
      *(_QWORD *)(v6 - 136) = v40;
      sub_1BDDB6CA4(v35, v36);
      v42 = type metadata accessor for WeakRef(0, v37, v38, v41);
      v43 = *(_QWORD *)(v6 - 312);
      sub_1BE1966E8(v42, v43);
      sub_1BDDB796C(v39, v40);
      v44 = *(_QWORD *)(v6 - 328);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 608) + 8))(v43, *(_QWORD *)(v6 - 600));
        goto LABEL_20;
      }
      v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v117 = *(_QWORD *)(v6 - 616);
      v116(v117, v43, v37);
      v116(*(_QWORD *)(v6 - 592), v117, v37);
      goto LABEL_34;
    case 4:
      v45 = *v2;
      v46 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v46;
      v47 = *(_QWORD *)(v6 - 272);
      v48 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v49 = *(_QWORD *)(v6 - 128);
      v50 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v49;
      *(_QWORD *)(v6 - 136) = v50;
      sub_1BDDB6CA4(v45, v46);
      v52 = type metadata accessor for WeakRef(0, v47, v48, v51);
      v53 = *(_QWORD *)(v6 - 288);
      sub_1BE1966E8(v52, v53);
      sub_1BDDB796C(v49, v50);
      v54 = *(_QWORD *)(v6 - 304);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v53, 1, v47) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 576) + 8))(v53, *(_QWORD *)(v6 - 568));
        goto LABEL_20;
      }
      v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
      v119 = *(_QWORD *)(v6 - 584);
      v118(v119, v53, v47);
      v118(*(_QWORD *)(v6 - 560), v119, v47);
      goto LABEL_34;
    case 5:
      v55 = *v2;
      v56 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v56;
      v57 = *(_QWORD *)(v6 - 248);
      v58 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v59 = *(_QWORD *)(v6 - 128);
      v60 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v59;
      *(_QWORD *)(v6 - 136) = v60;
      sub_1BDDB6CA4(v55, v56);
      v62 = type metadata accessor for WeakRef(0, v57, v58, v61);
      v63 = *(_QWORD *)(v6 - 264);
      sub_1BE1966E8(v62, v63);
      sub_1BDDB796C(v59, v60);
      v64 = *(_QWORD *)(v6 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, v57) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 544) + 8))(v63, *(_QWORD *)(v6 - 536));
        goto LABEL_20;
      }
      v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32);
      v121 = *(_QWORD *)(v6 - 552);
      v120(v121, v63, v57);
      v120(*(_QWORD *)(v6 - 528), v121, v57);
      goto LABEL_34;
    case 6:
      v65 = *v2;
      v66 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v66;
      v67 = *(_QWORD *)(v6 - 224);
      v68 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v69 = *(_QWORD *)(v6 - 128);
      v70 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v69;
      *(_QWORD *)(v6 - 136) = v70;
      sub_1BDDB6CA4(v65, v66);
      v72 = type metadata accessor for WeakRef(0, v67, v68, v71);
      v73 = *(_QWORD *)(v6 - 240);
      sub_1BE1966E8(v72, v73);
      sub_1BDDB796C(v69, v70);
      v74 = *(_QWORD *)(v6 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v73, 1, v67) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 512) + 8))(v73, *(_QWORD *)(v6 - 504));
        goto LABEL_20;
      }
      v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
      v123 = *(_QWORD *)(v6 - 520);
      v122(v123, v73, v67);
      v122(*(_QWORD *)(v6 - 496), v123, v67);
      goto LABEL_34;
    case 7:
      v75 = *v2;
      v76 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v76;
      v77 = *(_QWORD *)(v6 - 200);
      v78 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v79 = *(_QWORD *)(v6 - 128);
      v80 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v79;
      *(_QWORD *)(v6 - 136) = v80;
      sub_1BDDB6CA4(v75, v76);
      v82 = type metadata accessor for WeakRef(0, v77, v78, v81);
      v83 = *(_QWORD *)(v6 - 216);
      sub_1BE1966E8(v82, v83);
      sub_1BDDB796C(v79, v80);
      v84 = *(_QWORD *)(v6 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v83, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 480) + 8))(v83, *(_QWORD *)(v6 - 472));
        goto LABEL_20;
      }
      v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 32);
      v125 = *(_QWORD *)(v6 - 488);
      v124(v125, v83, v77);
      v124(*(_QWORD *)(v6 - 464), v125, v77);
      goto LABEL_34;
    case 8:
      v85 = *v2;
      v86 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v86;
      v87 = *(_QWORD *)(v6 - 184);
      v88 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v89 = *(_QWORD *)(v6 - 128);
      v90 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v89;
      *(_QWORD *)(v6 - 136) = v90;
      sub_1BDDB6CA4(v85, v86);
      v92 = type metadata accessor for WeakRef(0, v87, v88, v91);
      v93 = *(_QWORD *)(v6 - 192);
      sub_1BE1966E8(v92, v93);
      sub_1BDDB796C(v89, v90);
      v94 = *(_QWORD *)(v6 - 208);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v93, 1, v87) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 448) + 8))(v93, *(_QWORD *)(v6 - 440));
LABEL_20:
        v15 = *(_QWORD *)(v6 - 176);
        goto LABEL_21;
      }
      v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 32);
      v127 = *(_QWORD *)(v6 - 456);
      v126(v127, v93, v87);
      v126(*(_QWORD *)(v6 - 432), v127, v87);
LABEL_34:
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 176);
      goto LABEL_35;
    default:
      v97 = *(_QWORD *)(v6 - 408);
      v98 = *(_QWORD *)(v6 - 400);
      v99 = *v2;
      v100 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v100;
      v101 = *(_QWORD *)(v6 - 376);
      v102 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v103 = *(_QWORD *)(v6 - 128);
      v104 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v103;
      *(_QWORD *)(v6 - 136) = v104;
      sub_1BDDB6CA4(v99, v100);
      v106 = type metadata accessor for WeakRef(0, v101, v102, v105);
      v107 = *(_QWORD *)(v6 - 384);
      sub_1BE1966E8(v106, v107);
      sub_1BDDB796C(v103, v104);
      v108 = *(_QWORD *)(v6 - 392);
      v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v107, 1, v101);
      v15 = *(_QWORD *)(v6 - 176);
      if (v109 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v98 + 8))(v107, *(_QWORD *)(v6 - 424));
LABEL_21:
        v95 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v15, 1, 1, v95);
      }
      else
      {
        v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32);
        v128(v97, v107, v101);
        v128(*(_QWORD *)(v6 - 416), v97, v101);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_35:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v15, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDECCD38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v40[36];

  v40[28] = a2;
  v40[29] = a1;
  v40[25] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v40[24] = (char *)v40 - v3;
  v40[23] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v40[22] = (char *)v40 - v5;
  v40[21] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v40[20] = (char *)v40 - v7;
  v40[19] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v40[18] = (char *)v40 - v9;
  v40[17] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v40[16] = (char *)v40 - v11;
  v40[15] = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v12);
  v40[14] = (char *)v40 - v13;
  v40[13] = swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v14);
  v40[12] = (char *)v40 - v15;
  v40[11] = swift_getAssociatedTypeWitness();
  v16 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v16);
  v40[10] = (char *)v40 - v17;
  v40[9] = swift_getAssociatedTypeWitness();
  v18 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v18);
  v40[8] = (char *)v40 - v19;
  v40[7] = swift_getAssociatedTypeWitness();
  v20 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v20);
  v40[6] = (char *)v40 - v21;
  swift_getAssociatedTypeWitness();
  v22 = sub_1BE1B2EE8();
  v40[26] = *(_QWORD *)(v22 - 8);
  v40[27] = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v40[5] = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v40[4] = (char *)v40 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v40[3] = (char *)v40 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v40[2] = (char *)v40 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v40[1] = (char *)v40 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v40[0] = (char *)v40 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v36 = MEMORY[0x1E0C80A78](v35);
  v37 = MEMORY[0x1E0C80A78](v36);
  MEMORY[0x1E0C80A78](v37);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v40[32] = AssociatedTypeWitness;
  v40[33] = AssociatedConformanceWitness;
  v40[34] = &protocol witness table for Int;
  v40[35] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECD2F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  unint64_t v77;
  __n128 v78;
  int v79;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v4;
      v8 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v8;
      v9 = *(_QWORD *)(v6 - 328);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v11 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v1, v16, v14, v11);
      sub_1BDDB6CA4(v7, v8);
      v17 = *(_QWORD *)(v6 - 336);
      v18 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v17, v18 ^ 1u, 1, v9);
      *(_QWORD *)(v6 - 144) = v12;
      *(_QWORD *)(v6 - 136) = v13;
      v19 = v6 - 144;
      v20 = v17;
      goto LABEL_5;
    case 1:
      v32 = *v4;
      v33 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v33;
      v9 = *(_QWORD *)(v6 - 312);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v34 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v35 = *(_QWORD *)(v6 - 128);
      v36 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v2, v16, v14, v34);
      sub_1BDDB6CA4(v32, v33);
      v37 = *(_QWORD *)(v6 - 320);
      v38 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v37, v38 ^ 1u, 1, v9);
      *(_QWORD *)(v6 - 144) = v35;
      *(_QWORD *)(v6 - 136) = v36;
      v19 = v6 - 144;
      v20 = v37;
LABEL_5:
      sub_1BDE56E90(v20, v19, v9, AssociatedConformanceWitness);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    case 2:
      v40 = *v4;
      v41 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v41;
      v42 = *(_QWORD *)(v6 - 296);
      v43 = swift_getAssociatedConformanceWitness();
      v44 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v45 = *(_QWORD *)(v6 - 128);
      v46 = *(_QWORD *)(v6 - 120);
      v48 = *(_QWORD *)(v6 - 176);
      v47 = *(_QWORD *)(v6 - 168);
      v49 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v48 + 16))(v3, v49, v47, v44);
      sub_1BDDB6CA4(v40, v41);
      v50 = *(_QWORD *)(v6 - 304);
      v51 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v50, v51 ^ 1u, 1, v42);
      *(_QWORD *)(v6 - 144) = v45;
      *(_QWORD *)(v6 - 136) = v46;
      sub_1BDE56E90(v50, v6 - 144, v42, v43);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v49, v47);
    case 3:
      v52 = *v4;
      v53 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v53;
      v23 = *(_QWORD *)(v6 - 280);
      v24 = swift_getAssociatedConformanceWitness();
      v54 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v29 = *(_QWORD *)(v6 - 176);
      v28 = *(_QWORD *)(v6 - 168);
      v30 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v29 + 16))(v5, v30, v28, v54);
      sub_1BDDB6CA4(v52, v53);
      v31 = *(_QWORD *)(v6 - 288);
      goto LABEL_13;
    case 4:
      v55 = *v4;
      v56 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v56;
      v57 = *(_QWORD *)(v6 - 264);
      v58 = swift_getAssociatedConformanceWitness();
      v59 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v60 = *(_QWORD *)(v6 - 128);
      v61 = *(_QWORD *)(v6 - 120);
      v63 = *(_QWORD *)(v6 - 176);
      v62 = *(_QWORD *)(v6 - 168);
      v64 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v63 + 16))(*(_QWORD *)(v6 - 384), v64, v62, v59);
      sub_1BDDB6CA4(v55, v56);
      v65 = *(_QWORD *)(v6 - 272);
      v66 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v65, v66 ^ 1u, 1, v57);
      *(_QWORD *)(v6 - 144) = v60;
      *(_QWORD *)(v6 - 136) = v61;
      sub_1BDE56E90(v65, v6 - 144, v57, v58);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v64, v62);
    case 5:
      v67 = *v4;
      v68 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v68;
      v23 = *(_QWORD *)(v6 - 248);
      v24 = swift_getAssociatedConformanceWitness();
      v69 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v29 = *(_QWORD *)(v6 - 176);
      v28 = *(_QWORD *)(v6 - 168);
      v30 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v29 + 16))(*(_QWORD *)(v6 - 376), v30, v28, v69);
      sub_1BDDB6CA4(v67, v68);
      v31 = *(_QWORD *)(v6 - 256);
      goto LABEL_13;
    case 6:
      v70 = *v4;
      v71 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v71;
      v23 = *(_QWORD *)(v6 - 232);
      v24 = swift_getAssociatedConformanceWitness();
      v72 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v29 = *(_QWORD *)(v6 - 176);
      v28 = *(_QWORD *)(v6 - 168);
      v30 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v29 + 16))(*(_QWORD *)(v6 - 368), v30, v28, v72);
      sub_1BDDB6CA4(v70, v71);
      v31 = *(_QWORD *)(v6 - 240);
      goto LABEL_13;
    case 7:
      v73 = *v4;
      v74 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v74;
      v23 = *(_QWORD *)(v6 - 216);
      v24 = swift_getAssociatedConformanceWitness();
      v75 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v29 = *(_QWORD *)(v6 - 176);
      v28 = *(_QWORD *)(v6 - 168);
      v30 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v29 + 16))(*(_QWORD *)(v6 - 360), v30, v28, v75);
      sub_1BDDB6CA4(v73, v74);
      v31 = *(_QWORD *)(v6 - 224);
      goto LABEL_13;
    case 8:
      v76 = *v4;
      v77 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v77;
      v23 = *(_QWORD *)(v6 - 200);
      v24 = swift_getAssociatedConformanceWitness();
      v78 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v29 = *(_QWORD *)(v6 - 176);
      v28 = *(_QWORD *)(v6 - 168);
      v30 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v29 + 16))(*(_QWORD *)(v6 - 352), v30, v28, v78);
      sub_1BDDB6CA4(v76, v77);
      v31 = *(_QWORD *)(v6 - 208);
      goto LABEL_13;
    default:
      v21 = *v4;
      v22 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v22;
      v23 = *(_QWORD *)(v6 - 184);
      v24 = swift_getAssociatedConformanceWitness();
      v25 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v29 = *(_QWORD *)(v6 - 176);
      v28 = *(_QWORD *)(v6 - 168);
      v30 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v29 + 16))(*(_QWORD *)(v6 - 344), v30, v28, v25);
      sub_1BDDB6CA4(v21, v22);
      v31 = *(_QWORD *)(v6 - 192);
LABEL_13:
      v79 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v31, v79 ^ 1u, 1, v23);
      *(_QWORD *)(v6 - 144) = v26;
      *(_QWORD *)(v6 - 136) = v27;
      sub_1BDE56E90(v31, v6 - 144, v23, v24);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
  }
}

void WeakTagged_9.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDECB960);
}

uint64_t sub_1BDECDA1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_9(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDECCD38);
  return swift_release();
}

uint64_t WeakTagged_9.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDECCD38);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_9.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_9.subscript.getter(a2, a3);
}

void (*sub_1BDECDBB4())(uint64_t **a1, char a2)
{
  return sub_1BDECDBD4;
}

void sub_1BDECDBD4(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t)sub_1BDECCD38, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_9.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDECB960);
}

void WeakTagged_9.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_9.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_9.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_9);
}

void WeakTagged_9.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_9.hash(into:));
}

void sub_1BDECDC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_9.hash(into:));
}

uint64_t sub_1BDECDC6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_9.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_9.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDECDC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_9.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_9.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDECDCCC(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_9, 1, a4);
}

uint64_t sub_1BDECDCCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t AssociatedTypeWitness;
  _DWORD v55[2];
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t (*AssociatedConformanceWitness)(_QWORD, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD v80[10];

  v55[1] = a5;
  AssociatedConformanceWitness = a4;
  v72 = a3;
  v73 = a2;
  v74 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v65 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  MEMORY[0x1E0C80A78](v9);
  v66 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v75);
  v64 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v61 = (char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v59 = (char *)v55 - v16;
  MEMORY[0x1E0C80A78](v15);
  v68 = (uint64_t)v55 - v17;
  v79 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v79);
  v77 = (char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v69 = (char *)v55 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v78 = (char *)v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v76 = (char *)v55 - v26;
  MEMORY[0x1E0C80A78](v25);
  v67 = (uint64_t)v55 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v60 = (char *)v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v70 = (char *)v55 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v55 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v55 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v58 = v38;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDECEC40);
    }
    v43 = v67;
    sub_1BDDA2E8C((uint64_t)v35, v67, type metadata accessor for Proto_Value);
    v44 = *(_QWORD *)(v43 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v45 = v68;
    sub_1BDD86DEC(v44, v68, &qword_1ED6F26F0);
    v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
    v47 = v56(v45, 1, v46);
    v48 = (uint64_t)v69;
    if (v47 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v45, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1BDDA2E8C(v45, v48, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v49 = *(int *)(v79 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v48 + v49) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    v50 = *(_QWORD *)(v48 + *(int *)(v79 + 20));
    swift_beginAccess();
    v51 = *(_QWORD *)(v50 + 16);
    sub_1BDD9C3E0(v48, type metadata accessor for Proto_TaggedValue);
    v80[0] = v51;
    v52 = AssociatedConformanceWitness(0, v73, v72);
    v53 = (char *)(v74 + *(int *)(v52 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = (uint64_t (*)(_QWORD, uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
    CRExtensible.init(rawValue:)((uint64_t)v80, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v53);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDECEC90(uint64_t a1, uint64_t a2)
{
  return WeakTagged_9.encode(to:)(a1, a2);
}

uint64_t WeakTagged_9.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.Enum, (uint64_t)&associated conformance descriptor for Tagged_9.Tagged_9.Enum: RawRepresentable);
}

uint64_t _s9Coherence14SharedTagged_1V2idAA9CRKeyPathVvs_0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_1BDDB796C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*WeakTagged_10.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_10.tag.getter()
{
  sub_1BDECED20();
}

void sub_1BDECED20()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECEDAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

void WeakTagged_10.tag.setter()
{
  sub_1BDECEDF4();
}

void sub_1BDECEDF4()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECEE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v1, v2, a1);
}

uint64_t (*WeakTagged_10.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_10.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_10.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_10.init(_:id:));
}

void WeakTagged_10.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_10, a4);
}

void sub_1BDECEEF0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v6 = a5 + *(int *)(a4(0, a2, a3) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v6, a1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECEFB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = swift_storeEnumTagMultiPayload();
  *v0 = v1;
  v0[1] = v2;
  return result;
}

void WeakTagged_10.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_10);
}

void sub_1BDECF014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t, uint64_t))
{
  a5(0, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF0C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v3, v1, a1);
  *v2 = v4;
  v2[1] = v5;
  return result;
}

void WeakTagged_10.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_10(0, a2, a3, a4);
  type metadata accessor for WeakTagged_10(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF1B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_10.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF278(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_10.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF3A4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF4D4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF604(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF734(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF864(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECF994(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged8.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECFAC4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 7)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.tagged9.getter()
{
  sub_1BDEA93D0();
}

void WeakTagged_10.tagged10.getter()
{
  sub_1BDECFB7C();
}

void sub_1BDECFB7C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECFC10(uint64_t a1)
{
  _QWORD *v1;
  void (*v2)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  _QWORD v12[14];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v12);
  if (v12[0] == 9)
  {
    v5 = *v3;
    v6 = v3[1];
    v11[0] = v5;
    v11[1] = v6;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v2(v12, v11, AssociatedTypeWitness, AssociatedConformanceWitness);
    v9 = v12[0];
    v10 = v12[1];
    result = sub_1BDDB6CA4(v5, v6);
  }
  else
  {
    v9 = 0;
    v10 = 0xF000000000000000;
  }
  *v1 = v9;
  v1[1] = v10;
  return result;
}

void WeakTagged_10.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDECFD40(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_10.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t AssociatedConformanceWitness;
  _QWORD v73[2];
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _UNKNOWN **v154;
  uint64_t v155;

  v148 = a3;
  v149 = a4;
  v146 = a5;
  v147 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v114 = sub_1BE1B2EE8();
  v113 = *(_QWORD *)(v114 - 8);
  v8 = MEMORY[0x1E0C80A78](v114);
  v144 = AssociatedTypeWitness;
  v145 = (char *)v73 - v9;
  v142 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v115 = (char *)v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v112 = (char *)v73 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v110 = sub_1BE1B2EE8();
  v109 = *(_QWORD *)(v110 - 8);
  v14 = MEMORY[0x1E0C80A78](v110);
  v141 = (char *)v73 - v15;
  v143 = v13;
  v140 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v111 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v108 = (char *)v73 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v106 = sub_1BE1B2EE8();
  v105 = *(_QWORD *)(v106 - 8);
  v20 = MEMORY[0x1E0C80A78](v106);
  v117 = (char *)v73 - v21;
  v118 = v19;
  v116 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v107 = (char *)v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v104 = (char *)v73 - v24;
  v25 = swift_getAssociatedTypeWitness();
  v102 = sub_1BE1B2EE8();
  v101 = *(_QWORD *)(v102 - 8);
  v26 = MEMORY[0x1E0C80A78](v102);
  v138 = (char *)v73 - v27;
  v139 = v25;
  v136 = *(_QWORD *)(v25 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v103 = (char *)v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v100 = (char *)v73 - v30;
  v31 = swift_getAssociatedTypeWitness();
  v98 = sub_1BE1B2EE8();
  v97 = *(_QWORD *)(v98 - 8);
  v32 = MEMORY[0x1E0C80A78](v98);
  v135 = (char *)v73 - v33;
  v137 = v31;
  v133 = *(_QWORD *)(v31 - 8);
  v34 = MEMORY[0x1E0C80A78](v32);
  v99 = (char *)v73 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v96 = (char *)v73 - v36;
  v37 = swift_getAssociatedTypeWitness();
  v94 = sub_1BE1B2EE8();
  v93 = *(_QWORD *)(v94 - 8);
  v38 = MEMORY[0x1E0C80A78](v94);
  v132 = (char *)v73 - v39;
  v134 = v37;
  v130 = *(_QWORD *)(v37 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v95 = (char *)v73 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v92 = (char *)v73 - v42;
  v43 = swift_getAssociatedTypeWitness();
  v90 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v90 - 8);
  v44 = MEMORY[0x1E0C80A78](v90);
  v129 = (char *)v73 - v45;
  v131 = v43;
  v127 = *(_QWORD *)(v43 - 8);
  v46 = MEMORY[0x1E0C80A78](v44);
  v91 = (char *)v73 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46);
  v88 = (char *)v73 - v48;
  v49 = swift_getAssociatedTypeWitness();
  v86 = sub_1BE1B2EE8();
  v85 = *(_QWORD *)(v86 - 8);
  v50 = MEMORY[0x1E0C80A78](v86);
  v126 = (char *)v73 - v51;
  v128 = v49;
  v124 = *(_QWORD *)(v49 - 8);
  v52 = MEMORY[0x1E0C80A78](v50);
  v87 = (char *)v73 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52);
  v84 = (char *)v73 - v54;
  v55 = swift_getAssociatedTypeWitness();
  v82 = sub_1BE1B2EE8();
  v81 = *(_QWORD *)(v82 - 8);
  v56 = MEMORY[0x1E0C80A78](v82);
  v123 = (char *)v73 - v57;
  v125 = v55;
  v122 = *(_QWORD *)(v55 - 8);
  v58 = MEMORY[0x1E0C80A78](v56);
  v83 = (char *)v73 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58);
  v80 = (char *)v73 - v60;
  v61 = swift_getAssociatedTypeWitness();
  v78 = sub_1BE1B2EE8();
  v77 = *(_QWORD *)(v78 - 8);
  v62 = MEMORY[0x1E0C80A78](v78);
  v121 = (char *)v73 - v63;
  v120 = *(_QWORD *)(v61 - 8);
  v64 = MEMORY[0x1E0C80A78](v62);
  v79 = (char *)v73 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v64);
  v76 = (char *)v73 - v66;
  v67 = swift_getAssociatedTypeWitness();
  v74 = sub_1BE1B2EE8();
  v73[1] = *(_QWORD *)(v74 - 8);
  v68 = MEMORY[0x1E0C80A78](v74);
  v119 = *(_QWORD *)(v67 - 8);
  v69 = MEMORY[0x1E0C80A78](v68);
  v75 = (char *)v73 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v69);
  v71 = swift_getAssociatedTypeWitness();
  v150 = v6;
  v151 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v152 = v71;
  v153 = AssociatedConformanceWitness;
  v154 = &protocol witness table for Int;
  v155 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDED0728(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v1;
      v8 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v8;
      v9 = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 128);
      v12 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v11;
      *(_QWORD *)(v6 - 136) = v12;
      v13 = *(_QWORD *)(v6 - 168);
      *(_QWORD *)(v6 - 200) = *(_QWORD *)(v13 + 16);
      sub_1BDDB6CA4(v9, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v6 - 200))(v6 - 144, v4, AssociatedConformanceWitness, *(_QWORD *)(v6 - 176), v13);
      sub_1BDDB796C(v11, v12);
      v14 = *(_QWORD *)(v6 - 408);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v2, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 776) + 8))(v2, *(_QWORD *)(v6 - 768));
        v15 = *(_QWORD *)(v6 - 192);
        goto LABEL_21;
      }
      v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v116(v5, v2, v4);
      v116(*(_QWORD *)(v6 - 760), v5, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 192);
      goto LABEL_40;
    case 1:
      v26 = *v1;
      v27 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v27;
      v28 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v29 = *(_QWORD *)(v6 - 128);
      v30 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v29;
      *(_QWORD *)(v6 - 136) = v30;
      v31 = *(_QWORD *)(v6 - 168);
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v31 + 16);
      sub_1BDDB6CA4(v26, v27);
      v33 = *(_QWORD *)(v6 - 392);
      v32(v6 - 144, v3, v28, *(_QWORD *)(v6 - 176), v31);
      sub_1BDDB796C(v29, v30);
      v34 = *(_QWORD *)(v6 - 400);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 744) + 8))(v33, *(_QWORD *)(v6 - 736));
        v15 = *(_QWORD *)(v6 - 192);
        goto LABEL_21;
      }
      v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
      v122 = *(_QWORD *)(v6 - 752);
      v121(v122, v33, v3);
      v121(*(_QWORD *)(v6 - 728), v122, v3);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 192);
      goto LABEL_40;
    case 2:
      v35 = *v1;
      v36 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v36;
      v37 = *(_QWORD *)(v6 - 360);
      v38 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v39 = *(_QWORD *)(v6 - 128);
      v40 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v39;
      *(_QWORD *)(v6 - 136) = v40;
      v41 = *(_QWORD *)(v6 - 168);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v41 + 16);
      sub_1BDDB6CA4(v35, v36);
      v43 = *(_QWORD *)(v6 - 376);
      v42(v6 - 144, v37, v38, *(_QWORD *)(v6 - 176), v41);
      sub_1BDDB796C(v39, v40);
      v44 = *(_QWORD *)(v6 - 384);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 712) + 8))(v43, *(_QWORD *)(v6 - 704));
        goto LABEL_20;
      }
      v123 = v43;
      v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v125 = *(_QWORD *)(v6 - 720);
      v124(v125, v123, v37);
      v126 = v6 - 440;
      goto LABEL_34;
    case 3:
      v45 = *v1;
      v46 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v46;
      v37 = *(_QWORD *)(v6 - 336);
      v47 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v48 = *(_QWORD *)(v6 - 128);
      v49 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v48;
      *(_QWORD *)(v6 - 136) = v49;
      v50 = *(_QWORD *)(v6 - 168);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v50 + 16);
      sub_1BDDB6CA4(v45, v46);
      v52 = *(_QWORD *)(v6 - 352);
      v51(v6 - 144, v37, v47, *(_QWORD *)(v6 - 176), v50);
      sub_1BDDB796C(v48, v49);
      v53 = *(_QWORD *)(v6 - 368);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 680) + 8))(v52, *(_QWORD *)(v6 - 672));
        goto LABEL_20;
      }
      v127 = v52;
      v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
      v125 = *(_QWORD *)(v6 - 688);
      v124(v125, v127, v37);
      v126 = v6 - 408;
      goto LABEL_34;
    case 4:
      v54 = *v1;
      v55 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v55;
      v37 = *(_QWORD *)(v6 - 312);
      v56 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v57 = *(_QWORD *)(v6 - 128);
      v58 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v57;
      *(_QWORD *)(v6 - 136) = v58;
      v59 = *(_QWORD *)(v6 - 168);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v59 + 16);
      sub_1BDDB6CA4(v54, v55);
      v61 = *(_QWORD *)(v6 - 328);
      v60(v6 - 144, v37, v56, *(_QWORD *)(v6 - 176), v59);
      sub_1BDDB796C(v57, v58);
      v62 = *(_QWORD *)(v6 - 344);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v61, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 648) + 8))(v61, *(_QWORD *)(v6 - 640));
        goto LABEL_20;
      }
      v128 = v61;
      v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32);
      v125 = *(_QWORD *)(v6 - 656);
      v124(v125, v128, v37);
      v126 = v6 - 376;
      goto LABEL_34;
    case 5:
      v63 = *v1;
      v64 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v64;
      v37 = *(_QWORD *)(v6 - 288);
      v65 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v66 = *(_QWORD *)(v6 - 128);
      v67 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v66;
      *(_QWORD *)(v6 - 136) = v67;
      v68 = *(_QWORD *)(v6 - 168);
      v69 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v68 + 16);
      sub_1BDDB6CA4(v63, v64);
      v70 = *(_QWORD *)(v6 - 304);
      v69(v6 - 144, v37, v65, *(_QWORD *)(v6 - 176), v68);
      sub_1BDDB796C(v66, v67);
      v71 = *(_QWORD *)(v6 - 320);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 616) + 8))(v70, *(_QWORD *)(v6 - 608));
        goto LABEL_20;
      }
      v129 = v70;
      v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
      v125 = *(_QWORD *)(v6 - 624);
      v124(v125, v129, v37);
      v126 = v6 - 344;
      goto LABEL_34;
    case 6:
      v72 = *v1;
      v73 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v73;
      v37 = *(_QWORD *)(v6 - 264);
      v74 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v75 = *(_QWORD *)(v6 - 128);
      v76 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v75;
      *(_QWORD *)(v6 - 136) = v76;
      v77 = *(_QWORD *)(v6 - 168);
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v77 + 16);
      sub_1BDDB6CA4(v72, v73);
      v79 = *(_QWORD *)(v6 - 280);
      v78(v6 - 144, v37, v74, *(_QWORD *)(v6 - 176), v77);
      sub_1BDDB796C(v75, v76);
      v80 = *(_QWORD *)(v6 - 296);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v79, 1, v37) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 584) + 8))(v79, *(_QWORD *)(v6 - 576));
        goto LABEL_20;
      }
      v130 = v79;
      v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32);
      v125 = *(_QWORD *)(v6 - 592);
      v124(v125, v130, v37);
      v126 = v6 - 312;
LABEL_34:
      v124(*(_QWORD *)(v126 - 256), v125, v37);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 192);
      goto LABEL_40;
    case 7:
      v81 = *v1;
      v82 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v82;
      v83 = *(_QWORD *)(v6 - 248);
      v84 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v85 = *(_QWORD *)(v6 - 128);
      v86 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v85;
      *(_QWORD *)(v6 - 136) = v86;
      v87 = *(_QWORD *)(v6 - 168);
      v88 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v87 + 16);
      sub_1BDDB6CA4(v81, v82);
      v89 = *(_QWORD *)(v6 - 256);
      v88(v6 - 144, v83, v84, *(_QWORD *)(v6 - 176), v87);
      sub_1BDDB796C(v85, v86);
      v90 = *(_QWORD *)(v6 - 272);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v89, 1, v83) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 552) + 8))(v89, *(_QWORD *)(v6 - 544));
        goto LABEL_20;
      }
      v131 = v89;
      v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 32);
      v119 = *(_QWORD *)(v6 - 560);
      v118(v119, v131, v83);
      v120 = v6 - 280;
      goto LABEL_36;
    case 8:
      v103 = *v1;
      v104 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v104;
      v105 = *(_QWORD *)(v6 - 416);
      v106 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v107 = *(_QWORD *)(v6 - 128);
      v108 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v107;
      *(_QWORD *)(v6 - 136) = v108;
      v109 = *(_QWORD *)(v6 - 168);
      v110 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v109 + 16);
      sub_1BDDB6CA4(v103, v104);
      v111 = *(_QWORD *)(v6 - 424);
      v110(v6 - 144, v105, v106, *(_QWORD *)(v6 - 176), v109);
      v112 = v107;
      v113 = v111;
      sub_1BDDB796C(v112, v108);
      v114 = *(_QWORD *)(v6 - 432);
      v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v113, 1, v105);
      v15 = *(_QWORD *)(v6 - 192);
      if (v115 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 520) + 8))(v113, *(_QWORD *)(v6 - 512));
        goto LABEL_21;
      }
      v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 32);
      v136 = *(_QWORD *)(v6 - 528);
      v135(v136, v113, v105);
      v135(*(_QWORD *)(v6 - 504), v136, v105);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      goto LABEL_40;
    case 9:
      v93 = *v1;
      v94 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v94;
      v95 = *(_QWORD *)(v6 - 216);
      v96 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v97 = *(_QWORD *)(v6 - 128);
      v98 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v97;
      *(_QWORD *)(v6 - 136) = v98;
      v99 = *(_QWORD *)(v6 - 168);
      v100 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v99 + 16);
      sub_1BDDB6CA4(v93, v94);
      v101 = *(_QWORD *)(v6 - 232);
      v100(v6 - 144, v95, v96, *(_QWORD *)(v6 - 176), v99);
      sub_1BDDB796C(v97, v98);
      v102 = *(_QWORD *)(v6 - 240);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v101, 1, v95) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 488) + 8))(v101, *(_QWORD *)(v6 - 480));
        v15 = *(_QWORD *)(v6 - 192);
        goto LABEL_21;
      }
      v132 = v101;
      v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 32);
      v134 = *(_QWORD *)(v6 - 496);
      v133(v134, v132, v95);
      v133(*(_QWORD *)(v6 - 472), v134, v95);
      goto LABEL_38;
    default:
      v16 = *v1;
      v17 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v17;
      v18 = *(_QWORD *)(v6 - 208);
      v19 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v20 = *(_QWORD *)(v6 - 128);
      v21 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v20;
      *(_QWORD *)(v6 - 136) = v21;
      v22 = *(_QWORD *)(v6 - 168);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16);
      sub_1BDDB6CA4(v16, v17);
      v24 = *(_QWORD *)(v6 - 200);
      v23(v6 - 144, v18, v19, *(_QWORD *)(v6 - 176), v22);
      sub_1BDDB796C(v20, v21);
      v25 = *(_QWORD *)(v6 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v18) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 456) + 8))(*(_QWORD *)(v6 - 200), *(_QWORD *)(v6 - 448));
LABEL_20:
        v15 = *(_QWORD *)(v6 - 192);
LABEL_21:
        v91 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v15, 1, 1, v91);
      }
      else
      {
        v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
        v119 = *(_QWORD *)(v6 - 464);
        v83 = *(_QWORD *)(v6 - 208);
        v118(v119, *(_QWORD *)(v6 - 200), v83);
        v120 = v6 - 184;
LABEL_36:
        v118(*(_QWORD *)(v120 - 256), v119, v83);
LABEL_38:
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v15 = *(_QWORD *)(v6 - 192);
LABEL_40:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v15, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDED13B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t AssociatedConformanceWitness;
  _QWORD v71[2];
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _UNKNOWN **v150;
  uint64_t v151;

  v144 = a3;
  v145 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v110 = sub_1BE1B2EE8();
  v137 = *(_QWORD *)(v110 - 8);
  v6 = MEMORY[0x1E0C80A78](v110);
  v142 = (char *)v71 - v7;
  v143 = AssociatedTypeWitness;
  v140 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v111 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v135 = (char *)v71 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v108 = sub_1BE1B2EE8();
  v107 = *(_QWORD *)(v108 - 8);
  v12 = MEMORY[0x1E0C80A78](v108);
  v139 = (char *)v71 - v13;
  v141 = v11;
  v138 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v109 = (char *)v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v106 = (char *)v71 - v16;
  v17 = swift_getAssociatedTypeWitness();
  v104 = sub_1BE1B2EE8();
  v103 = *(_QWORD *)(v104 - 8);
  v18 = MEMORY[0x1E0C80A78](v104);
  v113 = (char *)v71 - v19;
  v114 = v17;
  v112 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v105 = (char *)v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v102 = (char *)v71 - v22;
  v23 = swift_getAssociatedTypeWitness();
  v100 = sub_1BE1B2EE8();
  v99 = *(_QWORD *)(v100 - 8);
  v24 = MEMORY[0x1E0C80A78](v100);
  v134 = (char *)v71 - v25;
  v136 = v23;
  v132 = *(_QWORD *)(v23 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  v101 = (char *)v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v98 = (char *)v71 - v28;
  v29 = swift_getAssociatedTypeWitness();
  v96 = sub_1BE1B2EE8();
  v95 = *(_QWORD *)(v96 - 8);
  v30 = MEMORY[0x1E0C80A78](v96);
  v131 = (char *)v71 - v31;
  v133 = v29;
  v129 = *(_QWORD *)(v29 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v97 = (char *)v71 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v94 = (char *)v71 - v34;
  v35 = swift_getAssociatedTypeWitness();
  v92 = sub_1BE1B2EE8();
  v91 = *(_QWORD *)(v92 - 8);
  v36 = MEMORY[0x1E0C80A78](v92);
  v128 = (char *)v71 - v37;
  v130 = v35;
  v126 = *(_QWORD *)(v35 - 8);
  v38 = MEMORY[0x1E0C80A78](v36);
  v93 = (char *)v71 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v90 = (char *)v71 - v40;
  v41 = swift_getAssociatedTypeWitness();
  v88 = sub_1BE1B2EE8();
  v87 = *(_QWORD *)(v88 - 8);
  v42 = MEMORY[0x1E0C80A78](v88);
  v125 = (char *)v71 - v43;
  v127 = v41;
  v123 = *(_QWORD *)(v41 - 8);
  v44 = MEMORY[0x1E0C80A78](v42);
  v89 = (char *)v71 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44);
  v86 = (char *)v71 - v46;
  v47 = swift_getAssociatedTypeWitness();
  v84 = sub_1BE1B2EE8();
  v83 = *(_QWORD *)(v84 - 8);
  v48 = MEMORY[0x1E0C80A78](v84);
  v122 = (char *)v71 - v49;
  v124 = v47;
  v120 = *(_QWORD *)(v47 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v85 = (char *)v71 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50);
  v82 = (char *)v71 - v52;
  v53 = swift_getAssociatedTypeWitness();
  v80 = sub_1BE1B2EE8();
  v79 = *(_QWORD *)(v80 - 8);
  v54 = MEMORY[0x1E0C80A78](v80);
  v119 = (char *)v71 - v55;
  v121 = v53;
  v118 = *(_QWORD *)(v53 - 8);
  v56 = MEMORY[0x1E0C80A78](v54);
  v81 = (char *)v71 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56);
  v78 = (char *)v71 - v58;
  v59 = swift_getAssociatedTypeWitness();
  v76 = sub_1BE1B2EE8();
  v75 = *(_QWORD *)(v76 - 8);
  v60 = MEMORY[0x1E0C80A78](v76);
  v117 = (char *)v71 - v61;
  v116 = *(_QWORD *)(v59 - 8);
  v62 = MEMORY[0x1E0C80A78](v60);
  v77 = (char *)v71 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v62);
  v74 = (char *)v71 - v64;
  v65 = swift_getAssociatedTypeWitness();
  v72 = sub_1BE1B2EE8();
  v71[1] = *(_QWORD *)(v72 - 8);
  v66 = MEMORY[0x1E0C80A78](v72);
  v115 = *(_QWORD *)(v65 - 8);
  v67 = MEMORY[0x1E0C80A78](v66);
  v73 = (char *)v71 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v67);
  v69 = swift_getAssociatedTypeWitness();
  v146 = v3;
  v147 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v148 = v69;
  v149 = AssociatedConformanceWitness;
  v150 = &protocol witness table for Int;
  v151 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDED1D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v2;
      v8 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v10 = *(_QWORD *)(v6 - 128);
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v10;
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDDB6CA4(v7, v8);
      v13 = type metadata accessor for WeakRef(0, v1, AssociatedConformanceWitness, v12);
      sub_1BE1966E8(v13, v3);
      sub_1BDDB796C(v10, v11);
      v14 = *(_QWORD *)(v6 - 408);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v3, 1, v1) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 760) + 8))(v3, *(_QWORD *)(v6 - 752));
        v15 = *(_QWORD *)(v6 - 176);
        goto LABEL_23;
      }
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v114(v4, v3, v1);
      v114(*(_QWORD *)(v6 - 744), v4, v1);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v116 = *(_QWORD *)(v6 - 176);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v116, 0, 1, AssociatedTypeWitness);
    case 1:
      v28 = *v2;
      v29 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v29;
      v30 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v31 = *(_QWORD *)(v6 - 128);
      v32 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v31;
      *(_QWORD *)(v6 - 136) = v32;
      sub_1BDDB6CA4(v28, v29);
      v34 = type metadata accessor for WeakRef(0, v5, v30, v33);
      v35 = *(_QWORD *)(v6 - 392);
      sub_1BE1966E8(v34, v35);
      sub_1BDDB796C(v31, v32);
      v36 = *(_QWORD *)(v6 - 400);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 728) + 8))(v35, *(_QWORD *)(v6 - 720));
        goto LABEL_22;
      }
      v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
      v121 = *(_QWORD *)(v6 - 736);
      v120(v121, v35, v5);
      v120(*(_QWORD *)(v6 - 712), v121, v5);
      v122 = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 176);
      goto LABEL_38;
    case 2:
      v37 = *v2;
      v38 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v38;
      v39 = *(_QWORD *)(v6 - 360);
      v40 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v41 = *(_QWORD *)(v6 - 128);
      v42 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v41;
      *(_QWORD *)(v6 - 136) = v42;
      sub_1BDDB6CA4(v37, v38);
      v44 = type metadata accessor for WeakRef(0, v39, v40, v43);
      v45 = *(_QWORD *)(v6 - 376);
      sub_1BE1966E8(v44, v45);
      sub_1BDDB796C(v41, v42);
      v46 = *(_QWORD *)(v6 - 384);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v45, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 696) + 8))(v45, *(_QWORD *)(v6 - 688));
        goto LABEL_22;
      }
      v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32);
      v124 = *(_QWORD *)(v6 - 704);
      v123(v124, v45, v39);
      v123(*(_QWORD *)(v6 - 680), v124, v39);
      v122 = swift_getAssociatedTypeWitness();
      v15 = *(_QWORD *)(v6 - 176);
      goto LABEL_38;
    case 3:
      v47 = *v2;
      v48 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v48;
      v20 = *(_QWORD *)(v6 - 336);
      v49 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v50 = *(_QWORD *)(v6 - 128);
      v51 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v50;
      *(_QWORD *)(v6 - 136) = v51;
      sub_1BDDB6CA4(v47, v48);
      v53 = type metadata accessor for WeakRef(0, v20, v49, v52);
      v54 = *(_QWORD *)(v6 - 352);
      sub_1BE1966E8(v53, v54);
      sub_1BDDB796C(v50, v51);
      v55 = *(_QWORD *)(v6 - 368);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v54, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 664) + 8))(v54, *(_QWORD *)(v6 - 656));
        goto LABEL_22;
      }
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
      v125 = *(_QWORD *)(v6 - 672);
      v117(v125, v54, v20);
      v126 = v6 - 392;
      goto LABEL_36;
    case 4:
      v56 = *v2;
      v57 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v57;
      v20 = *(_QWORD *)(v6 - 312);
      v58 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v59 = *(_QWORD *)(v6 - 128);
      v60 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v59;
      *(_QWORD *)(v6 - 136) = v60;
      sub_1BDDB6CA4(v56, v57);
      v62 = type metadata accessor for WeakRef(0, v20, v58, v61);
      v63 = *(_QWORD *)(v6 - 328);
      sub_1BE1966E8(v62, v63);
      sub_1BDDB796C(v59, v60);
      v64 = *(_QWORD *)(v6 - 344);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 632) + 8))(v63, *(_QWORD *)(v6 - 624));
        goto LABEL_22;
      }
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32);
      v125 = *(_QWORD *)(v6 - 640);
      v117(v125, v63, v20);
      v126 = v6 - 360;
      goto LABEL_36;
    case 5:
      v65 = *v2;
      v66 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v66;
      v20 = *(_QWORD *)(v6 - 288);
      v67 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v68 = *(_QWORD *)(v6 - 128);
      v69 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v68;
      *(_QWORD *)(v6 - 136) = v69;
      sub_1BDDB6CA4(v65, v66);
      v71 = type metadata accessor for WeakRef(0, v20, v67, v70);
      v72 = *(_QWORD *)(v6 - 304);
      sub_1BE1966E8(v71, v72);
      sub_1BDDB796C(v68, v69);
      v73 = *(_QWORD *)(v6 - 320);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v72, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 600) + 8))(v72, *(_QWORD *)(v6 - 592));
        goto LABEL_22;
      }
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
      v125 = *(_QWORD *)(v6 - 608);
      v117(v125, v72, v20);
      v126 = v6 - 328;
      goto LABEL_36;
    case 6:
      v74 = *v2;
      v75 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v75;
      v20 = *(_QWORD *)(v6 - 264);
      v76 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v77 = *(_QWORD *)(v6 - 128);
      v78 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v77;
      *(_QWORD *)(v6 - 136) = v78;
      sub_1BDDB6CA4(v74, v75);
      v80 = type metadata accessor for WeakRef(0, v20, v76, v79);
      v81 = *(_QWORD *)(v6 - 280);
      sub_1BE1966E8(v80, v81);
      sub_1BDDB796C(v77, v78);
      v82 = *(_QWORD *)(v6 - 296);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v81, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 568) + 8))(v81, *(_QWORD *)(v6 - 560));
        goto LABEL_22;
      }
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32);
      v125 = *(_QWORD *)(v6 - 576);
      v117(v125, v81, v20);
      v126 = v6 - 296;
      goto LABEL_36;
    case 7:
      v83 = *v2;
      v84 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v84;
      v20 = *(_QWORD *)(v6 - 240);
      v85 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v86 = *(_QWORD *)(v6 - 128);
      v87 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v86;
      *(_QWORD *)(v6 - 136) = v87;
      sub_1BDDB6CA4(v83, v84);
      v89 = type metadata accessor for WeakRef(0, v20, v85, v88);
      v90 = *(_QWORD *)(v6 - 256);
      sub_1BE1966E8(v89, v90);
      sub_1BDDB796C(v86, v87);
      v91 = *(_QWORD *)(v6 - 272);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v90, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 536) + 8))(v90, *(_QWORD *)(v6 - 528));
        goto LABEL_22;
      }
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32);
      v125 = *(_QWORD *)(v6 - 544);
      v117(v125, v90, v20);
      v126 = v6 - 264;
      goto LABEL_36;
    case 8:
      v103 = *v2;
      v104 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v104;
      v105 = *(_QWORD *)(v6 - 416);
      v106 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v107 = *(_QWORD *)(v6 - 128);
      v108 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v107;
      *(_QWORD *)(v6 - 136) = v108;
      sub_1BDDB6CA4(v103, v104);
      v110 = type metadata accessor for WeakRef(0, v105, v106, v109);
      v111 = *(_QWORD *)(v6 - 424);
      sub_1BE1966E8(v110, v111);
      sub_1BDDB796C(v107, v108);
      v112 = *(_QWORD *)(v6 - 432);
      v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v111, 1, v105);
      v15 = *(_QWORD *)(v6 - 176);
      if (v113 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 504) + 8))(v111, *(_QWORD *)(v6 - 496));
        goto LABEL_23;
      }
      v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32);
      v128 = *(_QWORD *)(v6 - 512);
      v127(v128, v111, v105);
      v127(*(_QWORD *)(v6 - 488), v128, v105);
      v122 = swift_getAssociatedTypeWitness();
      goto LABEL_38;
    case 9:
      v92 = *v2;
      v93 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v93;
      v20 = *(_QWORD *)(v6 - 200);
      v94 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v95 = *(_QWORD *)(v6 - 128);
      v96 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v95;
      *(_QWORD *)(v6 - 136) = v96;
      sub_1BDDB6CA4(v92, v93);
      v98 = type metadata accessor for WeakRef(0, v20, v94, v97);
      v99 = *(_QWORD *)(v6 - 216);
      sub_1BE1966E8(v98, v99);
      sub_1BDDB796C(v95, v96);
      v100 = *(_QWORD *)(v6 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v99, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 472) + 8))(v99, *(_QWORD *)(v6 - 464));
        goto LABEL_22;
      }
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32);
      v125 = *(_QWORD *)(v6 - 480);
      v117(v125, v99, v20);
      v126 = v6 - 200;
LABEL_36:
      v118 = *(_QWORD *)(v126 - 256);
      v119 = v125;
      goto LABEL_37;
    default:
      v16 = *(_QWORD *)(v6 - 248);
      v17 = *(_QWORD *)(v6 - 232);
      v18 = *v2;
      v19 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v19;
      v20 = *(_QWORD *)(v6 - 184);
      v21 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v22 = *(_QWORD *)(v6 - 128);
      v23 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 144) = v22;
      *(_QWORD *)(v6 - 136) = v23;
      sub_1BDDB6CA4(v18, v19);
      v25 = type metadata accessor for WeakRef(0, v20, v21, v24);
      v26 = *(_QWORD *)(v6 - 192);
      sub_1BE1966E8(v25, v26);
      sub_1BDDB796C(v22, v23);
      v27 = *(_QWORD *)(v6 - 208);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v20) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v17 + 8))(v26, *(_QWORD *)(v6 - 448));
LABEL_22:
        v15 = *(_QWORD *)(v6 - 176);
LABEL_23:
        v101 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v15, 1, 1, v101);
      }
      else
      {
        v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
        v117(v16, v26, v20);
        v118 = *(_QWORD *)(v6 - 440);
        v119 = v16;
LABEL_37:
        v117(v118, v119, v20);
        v122 = swift_getAssociatedTypeWitness();
        v15 = *(_QWORD *)(v6 - 176);
LABEL_38:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v15, 0, 1, v122);
      }
  }
}

void sub_1BDED29E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v44[40];

  v44[32] = a2;
  v44[33] = a1;
  v44[29] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v44[28] = (char *)v44 - v3;
  v44[27] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v44[26] = (char *)v44 - v5;
  v44[3] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v44[2] = (char *)v44 - v7;
  v44[25] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v44[24] = (char *)v44 - v9;
  v44[23] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v44[22] = (char *)v44 - v11;
  v44[21] = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v12);
  v44[20] = (char *)v44 - v13;
  v44[19] = swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v14);
  v44[18] = (char *)v44 - v15;
  v44[17] = swift_getAssociatedTypeWitness();
  v16 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v16);
  v44[16] = (char *)v44 - v17;
  v44[15] = swift_getAssociatedTypeWitness();
  v18 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v18);
  v44[14] = (char *)v44 - v19;
  v44[13] = swift_getAssociatedTypeWitness();
  v20 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v20);
  v44[12] = (char *)v44 - v21;
  v44[11] = swift_getAssociatedTypeWitness();
  v22 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v22);
  v44[10] = (char *)v44 - v23;
  swift_getAssociatedTypeWitness();
  v24 = sub_1BE1B2EE8();
  v44[30] = *(_QWORD *)(v24 - 8);
  v44[31] = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v44[9] = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v44[8] = (char *)v44 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v44[1] = (char *)v44 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v44[7] = (char *)v44 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v44[6] = (char *)v44 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v44[5] = (char *)v44 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v44[4] = (char *)v44 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v40 = MEMORY[0x1E0C80A78](v39);
  v41 = MEMORY[0x1E0C80A78](v40);
  MEMORY[0x1E0C80A78](v41);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v44[36] = AssociatedTypeWitness;
  v44[37] = AssociatedConformanceWitness;
  v44[38] = &protocol witness table for Int;
  v44[39] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDED3024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  unint64_t v77;
  __n128 v78;
  uint64_t v79;
  unint64_t v80;
  __n128 v81;
  int v82;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v3;
      v8 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v8;
      v9 = *(_QWORD *)(v6 - 328);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v11 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v5, v16, v14, v11);
      sub_1BDDB6CA4(v7, v8);
      v17 = v6 - 80;
      goto LABEL_14;
    case 1:
      v22 = *v3;
      v23 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v23;
      v24 = *(_QWORD *)(v6 - 312);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v25 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v26 = *(_QWORD *)(v6 - 128);
      v27 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v4, v16, v14, v25);
      sub_1BDDB6CA4(v22, v23);
      v28 = *(_QWORD *)(v6 - 320);
      v29 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v28, v29 ^ 1u, 1, v24);
      *(_QWORD *)(v6 - 144) = v26;
      *(_QWORD *)(v6 - 136) = v27;
      v30 = v6 - 144;
      v31 = v28;
      v32 = v24;
      goto LABEL_16;
    case 2:
      v33 = *v3;
      v34 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v34;
      v35 = *(_QWORD *)(v6 - 296);
      v36 = swift_getAssociatedConformanceWitness();
      v37 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v38 = *(_QWORD *)(v6 - 128);
      v39 = *(_QWORD *)(v6 - 120);
      v41 = *(_QWORD *)(v6 - 176);
      v40 = *(_QWORD *)(v6 - 168);
      v42 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v41 + 16))(v1, v42, v40, v37);
      sub_1BDDB6CA4(v33, v34);
      v43 = *(_QWORD *)(v6 - 304);
      v44 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v43, v44 ^ 1u, 1, v35);
      *(_QWORD *)(v6 - 144) = v38;
      *(_QWORD *)(v6 - 136) = v39;
      v45 = v6 - 144;
      v46 = v43;
      goto LABEL_7;
    case 3:
      v47 = *v3;
      v48 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v48;
      v35 = *(_QWORD *)(v6 - 280);
      v36 = swift_getAssociatedConformanceWitness();
      v49 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v50 = *(_QWORD *)(v6 - 128);
      v51 = *(_QWORD *)(v6 - 120);
      v41 = *(_QWORD *)(v6 - 176);
      v40 = *(_QWORD *)(v6 - 168);
      v42 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v41 + 16))(v2, v42, v40, v49);
      sub_1BDDB6CA4(v47, v48);
      v52 = *(_QWORD *)(v6 - 288);
      v53 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v52, v53 ^ 1u, 1, v35);
      *(_QWORD *)(v6 - 144) = v50;
      *(_QWORD *)(v6 - 136) = v51;
      v45 = v6 - 144;
      v46 = v52;
LABEL_7:
      sub_1BDE56E90(v46, v45, v35, v36);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v42, v40);
    case 4:
      v55 = *v3;
      v56 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v56;
      v57 = *(_QWORD *)(v6 - 264);
      v58 = swift_getAssociatedConformanceWitness();
      v59 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v60 = *(_QWORD *)(v6 - 128);
      v61 = *(_QWORD *)(v6 - 120);
      v63 = *(_QWORD *)(v6 - 176);
      v62 = *(_QWORD *)(v6 - 168);
      v64 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v63 + 16))(*(_QWORD *)(v6 - 384), v64, v62, v59);
      sub_1BDDB6CA4(v55, v56);
      v65 = *(_QWORD *)(v6 - 272);
      v66 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v65, v66 ^ 1u, 1, v57);
      *(_QWORD *)(v6 - 144) = v60;
      *(_QWORD *)(v6 - 136) = v61;
      sub_1BDE56E90(v65, v6 - 144, v57, v58);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v64, v62);
    case 5:
      v67 = *v3;
      v68 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v68;
      v9 = *(_QWORD *)(v6 - 248);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v69 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v15 + 16))(*(_QWORD *)(v6 - 376), v16, v14, v69);
      sub_1BDDB6CA4(v67, v68);
      v21 = *(_QWORD *)(v6 - 256);
      goto LABEL_15;
    case 6:
      v70 = *v3;
      v71 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v71;
      v9 = *(_QWORD *)(v6 - 232);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v72 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v15 + 16))(*(_QWORD *)(v6 - 368), v16, v14, v72);
      sub_1BDDB6CA4(v70, v71);
      v21 = *(_QWORD *)(v6 - 240);
      goto LABEL_15;
    case 7:
      v73 = *v3;
      v74 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v74;
      v9 = *(_QWORD *)(v6 - 216);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v75 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v15 + 16))(*(_QWORD *)(v6 - 360), v16, v14, v75);
      sub_1BDDB6CA4(v73, v74);
      v21 = *(_QWORD *)(v6 - 224);
      goto LABEL_15;
    case 8:
      v79 = *v3;
      v80 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v80;
      v9 = *(_QWORD *)(v6 - 392);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v81 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v15 + 16))(*(_QWORD *)(v6 - 408), v16, v14, v81);
      sub_1BDDB6CA4(v79, v80);
      v17 = v6 - 144;
LABEL_14:
      v21 = *(_QWORD *)(v17 - 256);
      goto LABEL_15;
    case 9:
      v76 = *v3;
      v77 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v77;
      v9 = *(_QWORD *)(v6 - 200);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v78 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v15 + 16))(*(_QWORD *)(v6 - 352), v16, v14, v78);
      sub_1BDDB6CA4(v76, v77);
      v21 = *(_QWORD *)(v6 - 208);
      goto LABEL_15;
    default:
      v18 = *v3;
      v19 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v19;
      v9 = *(_QWORD *)(v6 - 184);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v20 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v15 + 16))(*(_QWORD *)(v6 - 344), v16, v14, v20);
      sub_1BDDB6CA4(v18, v19);
      v21 = *(_QWORD *)(v6 - 192);
LABEL_15:
      v82 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v21, v82 ^ 1u, 1, v9);
      *(_QWORD *)(v6 - 144) = v12;
      *(_QWORD *)(v6 - 136) = v13;
      v30 = v6 - 144;
      v31 = v21;
      v32 = v9;
LABEL_16:
      sub_1BDE56E90(v31, v30, v32, AssociatedConformanceWitness);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
  }
}

void WeakTagged_10.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDED13B4);
}

void sub_1BDED37B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;

  v5 = swift_retain();
  a3(v5, a2);
  JUMPOUT(0x1BDED37F8);
}

uint64_t sub_1BDED3810(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_10(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDED29E4);
  return swift_release();
}

uint64_t WeakTagged_10.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDED29E4);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_10.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_10.subscript.getter(a2, a3);
}

void (*sub_1BDED39A8())(uint64_t **a1, char a2)
{
  return sub_1BDED39C8;
}

void sub_1BDED39C8(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t)sub_1BDED29E4, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_10.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDED13B4);
}

uint64_t sub_1BDED39F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result;

  result = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Capsule(0, a3, a4, a4) + 40));
  if (result)
    return a5(result, a2);
  __break(1u);
  return result;
}

void WeakTagged_10.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_10.hash(into:)()
{
  sub_1BDED3A8C();
}

void sub_1BDED3A8C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_1BDDB6CA4(*v0, v2);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v1, v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDED3B4C(uint64_t a1)
{
  uint64_t v1;

  return CRExtensible.hash(into:)(v1, a1);
}

uint64_t static WeakTagged_10.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_10);
}

uint64_t sub_1BDED3B90(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;

  v7 = *a1;
  v8 = a1[1];
  v9 = *a2;
  v10 = a2[1];
  sub_1BDDB6CA4(*a1, v8);
  sub_1BDDB6CA4(v9, v10);
  sub_1BDDD6F30(v7, v8);
  v12 = v11;
  sub_1BDDB796C(v9, v10);
  sub_1BDDB796C(v7, v8);
  if ((v12 & 1) != 0)
  {
    a5(0, a3, a4);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    static CRExtensible.== infix(_:_:)();
  }
  return 0;
}

void WeakTagged_10.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_10.hash(into:));
}

void sub_1BDED3CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_10.hash(into:));
}

uint64_t sub_1BDED3CF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_10.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_10.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDED3D14(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[24];
  uint64_t v6;

  v2 = *v1;
  v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B3770();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_1BDE0B580();
  sub_1BE1B34F4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return sub_1BDDB796C(v2, v3);
}

uint64_t sub_1BDED3DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_10.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_10.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDED3E10(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_10, 1, a4);
}

uint64_t sub_1BDED3E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v56[4];
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t (*v72)(_QWORD, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD v82[10];

  v56[3] = a5;
  v72 = a4;
  v73 = a3;
  v74 = a2;
  v77 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v66 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v63);
  v60 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v62 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)v56 - v16;
  MEMORY[0x1E0C80A78](v15);
  v69 = (uint64_t)v56 - v17;
  v81 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v81);
  v80 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v70 = (char *)v56 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v78 = (char *)v56 - v26;
  MEMORY[0x1E0C80A78](v25);
  v68 = (uint64_t)v56 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v76 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v71 = (char *)v56 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v56 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v56 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v59 = v38;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDED4E48);
    }
    v43 = v68;
    sub_1BDDA2E8C((uint64_t)v35, v68, type metadata accessor for Proto_Value);
    v75 = v21;
    v44 = *(_QWORD *)(v43 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v45 = v69;
    sub_1BDD86DEC(v44, v69, &qword_1ED6F26F0);
    v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
    v47 = v57(v45, 1, v46);
    v48 = (uint64_t)v70;
    if (v47 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v45, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1BDDA2E8C(v45, v48, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v49 = *(int *)(v81 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v48 + v49) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    v50 = *(_QWORD *)(v48 + *(int *)(v81 + 20));
    swift_beginAccess();
    v51 = *(_QWORD *)(v50 + 16);
    sub_1BDD9C3E0(v48, type metadata accessor for Proto_TaggedValue);
    v82[0] = v51;
    v52 = v72(0, v74, v73);
    v53 = (char *)(v77 + *(int *)(v52 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    CRExtensible.init(rawValue:)((uint64_t)v82, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v53);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDED4EA0(uint64_t a1, uint64_t a2)
{
  return WeakTagged_10.encode(to:)(a1, a2);
}

uint64_t WeakTagged_10.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.Enum, (uint64_t)&associated conformance descriptor for Tagged_10.Tagged_10.Enum: RawRepresentable);
}

uint64_t type metadata accessor for SharedTagged_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_2);
}

uint64_t type metadata accessor for WeakTagged_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_2);
}

uint64_t type metadata accessor for SharedTagged_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_3);
}

uint64_t type metadata accessor for WeakTagged_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_3);
}

uint64_t type metadata accessor for SharedTagged_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_4);
}

uint64_t type metadata accessor for WeakTagged_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_4);
}

uint64_t type metadata accessor for SharedTagged_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_5);
}

uint64_t type metadata accessor for WeakTagged_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_5);
}

uint64_t type metadata accessor for SharedTagged_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_6);
}

uint64_t type metadata accessor for WeakTagged_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_6);
}

uint64_t type metadata accessor for SharedTagged_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_7);
}

uint64_t type metadata accessor for WeakTagged_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_7);
}

uint64_t type metadata accessor for SharedTagged_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_8);
}

uint64_t type metadata accessor for WeakTagged_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_8);
}

uint64_t type metadata accessor for SharedTagged_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_9);
}

uint64_t type metadata accessor for WeakTagged_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_9);
}

uint64_t type metadata accessor for SharedTagged_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_10);
}

uint64_t type metadata accessor for WeakTagged_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_10);
}

uint64_t sub_1BDED4FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v11, a1);
  swift_retain();
  return a6(v12, v13, a3);
}

uint64_t sub_1BDED5058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v16 - v11;
  v13 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v11, a1);
  swift_retain();
  return a6(v12, v13, a3);
}

void sub_1BDED510C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5120()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5130()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5140()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5150()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5160()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5170()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5180()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5190()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED51A0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED51B0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED51C0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED51D0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED51E0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED51F0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5200()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5210()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5220()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5230()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5240()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDED5250(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_1, (void (*)(uint64_t, uint64_t))SharedTagged_1.subscript.getter);
}

uint64_t sub_1BDED5268()
{
  return 32;
}

__n128 sub_1BDED5274(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5280(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_2, (void (*)(uint64_t, uint64_t))SharedTagged_2.subscript.getter);
}

void keypath_getTm(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a2;
  v7 = a4(0, *(uint64_t *)((char *)a2 + a3 - 32), *(uint64_t *)((char *)a2 + a3 - 16));
  a5(v6, v7);
  JUMPOUT(0x1BDED52DCLL);
}

uint64_t sub_1BDED52F0()
{
  return 32;
}

__n128 sub_1BDED52FC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5308(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_3, (void (*)(uint64_t, uint64_t))SharedTagged_3.subscript.getter);
}

uint64_t sub_1BDED5320()
{
  return 32;
}

__n128 sub_1BDED532C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5338(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_4, (void (*)(uint64_t, uint64_t))SharedTagged_4.subscript.getter);
}

uint64_t sub_1BDED5350()
{
  return 32;
}

__n128 sub_1BDED535C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5368(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_5, (void (*)(uint64_t, uint64_t))SharedTagged_5.subscript.getter);
}

uint64_t sub_1BDED5380()
{
  return 32;
}

__n128 sub_1BDED538C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5398(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_6, (void (*)(uint64_t, uint64_t))SharedTagged_6.subscript.getter);
}

uint64_t sub_1BDED53B0()
{
  return 32;
}

__n128 sub_1BDED53BC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED53C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_7, (void (*)(uint64_t, uint64_t))SharedTagged_7.subscript.getter);
}

uint64_t sub_1BDED53E0()
{
  return 32;
}

__n128 sub_1BDED53EC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED53F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_8, (void (*)(uint64_t, uint64_t))SharedTagged_8.subscript.getter);
}

uint64_t sub_1BDED5410()
{
  return 32;
}

__n128 sub_1BDED541C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5428(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_9, (void (*)(uint64_t, uint64_t))SharedTagged_9.subscript.getter);
}

uint64_t sub_1BDED5440()
{
  return 32;
}

__n128 sub_1BDED544C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5458(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SharedTagged_10, (void (*)(uint64_t, uint64_t))SharedTagged_10.subscript.getter);
}

uint64_t sub_1BDED5470()
{
  return 32;
}

__n128 sub_1BDED547C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5488(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_1, (void (*)(uint64_t, uint64_t))WeakTagged_1.subscript.getter);
}

uint64_t sub_1BDED54A0()
{
  return 32;
}

__n128 sub_1BDED54AC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED54B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_2, (void (*)(uint64_t, uint64_t))WeakTagged_2.subscript.getter);
}

uint64_t sub_1BDED54D0()
{
  return 32;
}

__n128 sub_1BDED54DC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED54E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_3, (void (*)(uint64_t, uint64_t))WeakTagged_3.subscript.getter);
}

uint64_t sub_1BDED5500()
{
  return 32;
}

__n128 sub_1BDED550C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5518(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_4, (void (*)(uint64_t, uint64_t))WeakTagged_4.subscript.getter);
}

uint64_t sub_1BDED5530()
{
  return 32;
}

__n128 sub_1BDED553C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5548(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_5, (void (*)(uint64_t, uint64_t))WeakTagged_5.subscript.getter);
}

uint64_t sub_1BDED5560()
{
  return 32;
}

__n128 sub_1BDED556C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5578(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_6, (void (*)(uint64_t, uint64_t))WeakTagged_6.subscript.getter);
}

uint64_t sub_1BDED5590()
{
  return 32;
}

__n128 sub_1BDED559C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED55A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_7, (void (*)(uint64_t, uint64_t))WeakTagged_7.subscript.getter);
}

uint64_t sub_1BDED55C0()
{
  return 32;
}

__n128 sub_1BDED55CC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED55D8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_8, (void (*)(uint64_t, uint64_t))WeakTagged_8.subscript.getter);
}

uint64_t sub_1BDED55F0()
{
  return 32;
}

__n128 sub_1BDED55FC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5608(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_9, (void (*)(uint64_t, uint64_t))WeakTagged_9.subscript.getter);
}

uint64_t sub_1BDED5620()
{
  return 32;
}

__n128 sub_1BDED562C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1BDED5638(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  keypath_getTm(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for WeakTagged_10, (void (*)(uint64_t, uint64_t))WeakTagged_10.subscript.getter);
}

uint64_t sub_1BDED5650()
{
  return 32;
}

__n128 sub_1BDED565C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

_UNKNOWN **sub_1BDED5668()
{
  return &protocol witness table for AnyCRDT;
}

void sub_1BDED5674()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5690(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED56A4(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED56B8(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED56CC(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED56E0(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED56F4(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5708(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED571C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5730()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED574C(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5760(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5774(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5788(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED579C(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED57B0(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED57C4(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED57D8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED57EC()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5808(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED581C(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5830(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5844(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5858(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED586C(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5880(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5894(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED58A8()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED58C4(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED58D8(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED58EC(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5900(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5914(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED5928(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED593C(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5950(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5964()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5980(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5994(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED59A8(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED59BC(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED59D0(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED59E4(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED59F8(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5A0C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5A20()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5A3C(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5A50(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5A64(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5A78(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5A8C(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED5AA0(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5AB4(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5AC8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5ADC()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5AF8(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5B0C(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5B20(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5B34(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5B48(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED5B5C(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5B70(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5B84(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5B98()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5BB4(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5BC8(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5BDC(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5BF0(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5C04(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED5C18(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5C2C(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5C40(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5C54()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5C70(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5C84(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5C98(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5CAC(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5CC0(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED5CD4(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5CE8(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5CFC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5D10()
{
  sub_1BDED5DCC();
}

uint64_t *sub_1BDED5D2C(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED5EA4(a1, a2);
}

uint64_t sub_1BDED5D40(uint64_t a1)
{
  return sub_1BDED6010(a1);
}

uint64_t *sub_1BDED5D54(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED611C(a1, a2);
}

uint64_t *sub_1BDED5D68(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDED6264(a1, a2);
}

_OWORD *sub_1BDED5D7C(_OWORD *a1, _OWORD *a2)
{
  return sub_1BDED644C(a1, a2);
}

uint64_t *sub_1BDED5D90(uint64_t *a1, _OWORD *a2)
{
  return sub_1BDED6564(a1, a2);
}

uint64_t sub_1BDED5DA4(uint64_t a1, unsigned int a2)
{
  return sub_1BDED673C(a1, a2);
}

void sub_1BDED5DB8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_1BDED68A0(a1, a2, a3);
}

void sub_1BDED5DCC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t *sub_1BDED5EA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~(unint64_t)(v5 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((v5 & 0xF8) + 23) & v6;
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v4 + 64);
  if ((v5 & 0x1000F8) != 0 || (unint64_t)(v8 + v7 + 1) > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + v7);
    swift_retain();
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    sub_1BDDB6CA4(*a2, v12);
    *a1 = v11;
    a1[1] = v12;
    v13 = (_QWORD *)(((unint64_t)a1 + 23) & v6);
    v14 = (_QWORD *)(((unint64_t)a2 + 23) & v6);
    v15 = *((unsigned __int8 *)v14 + v8);
    if (v15 >= 2)
    {
      if (v8 <= 3)
        v16 = v8;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      *v13 = *v14;
      *((_BYTE *)v13 + v8) = 1;
    }
    else
    {
      (*(void (**)(unint64_t))(v4 + 16))(((unint64_t)a1 + 23) & v6);
      *((_BYTE *)v13 + v8) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BDED6010(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  result = (a1 + v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = *(unsigned __int8 *)(result + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X14 }
  }
  if (v6 != 1)
    return (*(uint64_t (**)(void))(v2 + 8))();
  return result;
}

uint64_t *sub_1BDED611C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = v7 + 23;
  v9 = (unint64_t)a1 + v7 + 23;
  v10 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)(v9 & v10);
  v12 = (_QWORD *)(((unint64_t)a2 + v8) & v10);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v6 + 64);
  v14 = *((unsigned __int8 *)v12 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
  {
    *v11 = *v12;
    v16 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v6 + 16))(v11);
    v16 = 0;
  }
  *((_BYTE *)v11 + v13) = v16;
  return a1;
}

uint64_t *sub_1BDED6264(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;

  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1BDDB796C(v6, v7);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80) & 0xF8;
  v11 = v10 + 23;
  v12 = (unint64_t)a1 + v10 + 23;
  v13 = ~v10 & 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)(v12 & v13);
  v15 = (unint64_t)a2 + v11;
  v16 = (_QWORD *)(v15 & v13);
  if ((v12 & v13) != (v15 & v13))
  {
    v17 = AssociatedTypeWitness;
    if (*(_QWORD *)(v9 + 64) <= 8uLL)
      v18 = 8;
    else
      v18 = *(_QWORD *)(v9 + 64);
    v19 = *((unsigned __int8 *)v14 + v18);
    if (v19 >= 2)
    {
      if (v18 <= 3)
        v20 = v18;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 != 1)
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    v21 = *((unsigned __int8 *)v16 + v18);
    if (v21 >= 2)
    {
      if (v18 <= 3)
        v22 = v18;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 1)
    {
      *v14 = *v16;
      v23 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(v14, v16, v17);
      v23 = 0;
    }
    *((_BYTE *)v14 + v18) = v23;
  }
  return a1;
}

_OWORD *sub_1BDED644C(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  *a1 = *a2;
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = v5 + 23;
  v7 = (unint64_t)a1 + v5 + 23;
  v8 = ~v5 & 0xFFFFFFFFFFFFFFF8;
  v9 = (_QWORD *)(v7 & v8);
  v10 = (_QWORD *)(((unint64_t)a2 + v6) & v8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v4 + 64);
  v12 = *((unsigned __int8 *)v10 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X13 }
  }
  if (v12 == 1)
  {
    *v9 = *v10;
    v14 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(v9);
    v14 = 0;
  }
  *((_BYTE *)v9 + v11) = v14;
  return a1;
}

uint64_t *sub_1BDED6564(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1BDDB796C(v4, v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 + 23;
  v10 = (unint64_t)a1 + v8 + 23;
  v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)(v10 & v11);
  v13 = (unint64_t)a2 + v9;
  v14 = (_QWORD *)(v13 & v11);
  if ((v10 & v11) != (v13 & v11))
  {
    v15 = AssociatedTypeWitness;
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v16 = 8;
    else
      v16 = *(_QWORD *)(v7 + 64);
    v17 = *((unsigned __int8 *)v12 + v16);
    if (v17 >= 2)
    {
      if (v16 <= 3)
        v18 = v16;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 != 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
    v19 = *((unsigned __int8 *)v14 + v16);
    if (v19 >= 2)
    {
      if (v16 <= 3)
        v20 = v16;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 1)
    {
      *v12 = *v14;
      v21 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v12, v14, v15);
      v21 = 0;
    }
    *((_BYTE *)v12 + v16) = v21;
  }
  return a1;
}

uint64_t sub_1BDED673C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  v7 = v6 | 7;
  if (a2 < 0xFF)
    goto LABEL_23;
  v8 = v5 + ((v6 + 23) & ~v7) + 1;
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_23:
      v15 = *(unsigned __int8 *)(((a1 + v7 + 16) & ~v7) + v5);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_23;
LABEL_14:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = v8;
    else
      v14 = 4;
    __asm { BR              X11 }
  }
  return (v13 + 255);
}

void sub_1BDED68A0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 8)
    v7 = 8;
  v8 = *(_DWORD *)(v6 + 80) & 0xF8;
  v9 = v7 + ((v8 + 23) & ~(v8 | 7)) + 1;
  if (a3 < 0xFF)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X13 }
  v11 = a2 - 255;
  if (v9 < 4)
  {
    if ((_DWORD)v9)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v9);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

void CRCodableValue.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1D00();
  swift_allocObject();
  sub_1BE1B1CF4();
  v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v11, (uint64_t)v10);
  v12 = type metadata accessor for Proto_Value(0);
  LODWORD(v11) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1BDE29118((uint64_t)v10);
  if ((_DWORD)v11 == 1)
  {
    sub_1BDDFCAFC();
    v4 = (void *)swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000017;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
LABEL_4:
    swift_release();
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v16 = 0xD00000000000001FLL;
    *(_QWORD *)(v16 + 8) = 0x80000001BE1CE730;
    *(_BYTE *)(v16 + 16) = 0;
    swift_willThrow();
    swift_release();

    return;
  }
  v20 = a3;
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  v14 = sub_1BDDCA244();
  if (v3)
    goto LABEL_4;
  v17 = v14;
  v18 = v15;
  v19 = sub_1BE1B2A5C();
  v21 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF40], v19, &v21);
  sub_1BE1B1CE8();
  sub_1BDDB796C(v17, v18);
  swift_release();
  sub_1BE1B2A8C();
  swift_bridgeObjectRelease();
  swift_release();
}

void CRCodableValue.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  sub_1BDE25870();
  if (v4)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD00000000000001FLL;
    *(_QWORD *)(v10 + 8) = 0x80000001BE1CE750;
    *(_BYTE *)(v10 + 16) = 0;
    swift_willThrow();

  }
  else
  {
    sub_1BE1B1D24();
    swift_allocObject();
    swift_retain();
    sub_1BE1B1D18();
    sub_1BDE7A054(a2, a2);
    v7 = *(_QWORD *)(a2 - 8);
    swift_allocObject();
    sub_1BE1B299C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v3, a2);
    sub_1BDE79568();
    v9 = sub_1BE1B2A5C();
    v14 = *(_QWORD *)(a3 + 24);
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF10], v9, &v14);
    v11 = sub_1BE1B1D0C();
    v13 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_1BDDB6CA4(v11, v13);
    sub_1BE1297E0(v11, v13);
    sub_1BDDB796C(v11, v13);
    swift_release();
  }
}

uint64_t CRUnsafeCastableValue.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[3];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v10, (uint64_t)v9);
  v11 = type metadata accessor for Proto_Value(0);
  LODWORD(v10) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11);
  sub_1BDE29118((uint64_t)v9);
  if ((_DWORD)v10 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000017;
    *(_QWORD *)(v12 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v12 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  v13 = sub_1BDDCA244();
  if (v3)
    return swift_release();
  v16 = v13;
  v17 = v14;
  MEMORY[0x1E0C80A78](v13);
  v18[-2] = a2;
  v18[-1] = a3;
  sub_1BE1B1E68();
  swift_release();
  return sub_1BDDB796C(v16, v17);
}

uint64_t CRUnsafeCastableValue.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;

  sub_1BDED7394(v8, (uint64_t)sub_1BDED72CC, 0, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CB0338], MEMORY[0x1E0DEDD18], a8);
  sub_1BDE25870();
  if (!v9)
  {
    swift_beginAccess();
    swift_retain();
    sub_1BDDB6CA4(v11, v12);
    sub_1BE1297E0(v11, v12);
    swift_release();
  }
  return sub_1BDDB796C(v11, v12);
}

uint64_t sub_1BDED72CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_1BDDC439C(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1BDED742C((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_1BDED74A4((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_1BDED7394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_1BDED742C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1BE1B1CAC();
  swift_allocObject();
  result = sub_1BE1B1C64();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1BE1B1E2C();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1BDED74A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1BE1B1CAC();
  swift_allocObject();
  result = sub_1BE1B1C64();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1BDED7524()
{
  return sub_1BE1B2924();
}

uint64_t sub_1BDED755C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
  type metadata accessor for Capsule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 88) + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v6 = sub_1BE1B242C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_weakDestroy();
  return v4;
}

uint64_t sub_1BDED75E8()
{
  return sub_1BDD93094((void (*)(void))sub_1BDED755C);
}

uint64_t sub_1BDED75F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1BE1B248C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B24BC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(v3 + 48);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_1BDEE1D84;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_43;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BE1B24A4();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_1BDED77F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v6 = (_QWORD *)(a1 + 32);
  swift_beginAccess();
  v7 = *(_QWORD **)(a1 + 32);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_1BDDA8B2C(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = sub_1BDDA8B2C((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = a2;
  v11[5] = a3;
  return swift_endAccess();
}

uint64_t sub_1BDED78CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void sub_1BDED7900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  MEMORY[0x1E0C80A78](v1);
  sub_1BDD9C318(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1BDED79A8 + 4 * byte_1BE1BAFC0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BDED79A8()
{
  uint64_t v0;

  sub_1BDD9C3E0(v0, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
  return 0x426F5473746E6177;
}

uint64_t sub_1BDED7B04()
{
  uint64_t v0;

  v0 = sub_1BE1B2480();
  __swift_allocate_value_buffer(v0, qword_1EF549330);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)qword_1EF549330) = 1;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t sub_1BDED7B64()
{
  uint64_t v0;

  v0 = sub_1BE1B23C0();
  __swift_allocate_value_buffer(v0, qword_1EF549348);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549348);
  return sub_1BE1B23B4();
}

uint64_t sub_1BDED7BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = sub_1BDDC49A0(1668117091, 0xE400000000000000);
  v1 = sub_1BDDC4278(v0);
  v3 = v2;
  result = swift_release();
  qword_1EF549360 = v1;
  *(_QWORD *)algn_1EF549368 = v3;
  return result;
}

uint64_t sub_1BDED7C30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  _QWORD v8[2];

  if (a4 >> 60 != 15)
    __asm { BR              X11 }
  v8[0] = sub_1BDEE0EA4(8);
  v8[1] = v6;
  sub_1BDD9C9A0(a3, a4);
  sub_1BDEE07A0((uint64_t)v8);
  return v8[0];
}

void sub_1BDED7D78()
{
  if (qword_1EF52BE98 != -1)
    swift_once();
  __asm { BR              X10 }
}

void sub_1BDED7FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

uint64_t sub_1BDED8080()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (BYTE6(v1) >= 8uLL)
  {
    *(_QWORD *)(v5 - 136) = v4;
    if (qword_1EF52BE98 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  v6 = type metadata accessor for Peer_Message(0);
  *(_QWORD *)(v5 - 96) = 0;
  *(_OWORD *)(v5 - 128) = 0u;
  *(_OWORD *)(v5 - 112) = 0u;
  sub_1BDDB6CA4(v3, v1);
  sub_1BE1B20FC();
  sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
  result = sub_1BE1B2270();
  if (!v2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v0, 0, 1, v6);
  return result;
}

void sub_1BDED82AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v7 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v7);
  sub_1BDED84EC(a1, a2);
  if (!v3)
  {
    if ((v8 & 1) != 0)
      __asm { BR              X10 }
    v9 = type metadata accessor for Peer_Message(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9);
  }
}

void sub_1BDED84EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1BDED8540()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  if (BYTE6(v0) >= 8uLL)
  {
    if (qword_1EF52BE98 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 4;
  swift_willThrow();
  return v2 & 1;
}

uint64_t static CRMulticastSyncManagerCatchupBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 1)
    return (v4 & 1) == 0 && v2 == v3;
  v5 = *(_QWORD *)&v3 == 0;
  if (v3 == 0.0)
    v6 = *(unsigned __int8 *)(a2 + 8);
  else
    v6 = 0;
  if (v5)
    v4 = 0;
  if (v2 == 0.0)
    return v6;
  else
    return v4;
}

uint64_t sub_1BDED88EC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 1)
    return (v4 & 1) == 0 && v2 == v3;
  v5 = *(_QWORD *)&v3 == 0;
  if (v3 == 0.0)
    v6 = *(unsigned __int8 *)(a2 + 8);
  else
    v6 = 0;
  if (v5)
    v4 = 0;
  if (v2 == 0.0)
    return v6;
  else
    return v4;
}

uint64_t sub_1BDED8940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  int v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)();
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  unint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;

  v81 = a6;
  v82 = a2;
  v83 = a1;
  v79 = a3;
  v80 = a5;
  v7 = type metadata accessor for Capsule(255, a3, *(_QWORD *)(a5 + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v76 = v7;
  v8 = sub_1BE1B242C();
  v72 = (void (*)(char *, char *, uint64_t))sub_1BE1B2EE8();
  v71 = *((_QWORD *)v72 - 1);
  v9 = MEMORY[0x1E0C80A78](v72);
  v11 = (char *)&v68 - v10;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v13 = MEMORY[0x1E0C80A78](v9);
  v70 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v75 = (char *)&v68 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v74 = (char *)&v68 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v73 = (char *)&v68 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v68 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v68 - v24;
  v26 = *(_QWORD *)(v8 - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v29 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (uint64_t *)((char *)&v68 - v31);
  MEMORY[0x1E0C80A78](v30);
  v77 = (char *)&v68 - v33;
  v78 = v34;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v35(v25, v83, a4);
  v35(v22, (uint64_t)v25, a4);
  swift_retain();
  v36 = v8;
  v37 = swift_dynamicCast();
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v37)
  {
    v38(v11, 0, 1, v8);
    v39 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v39(v29, v11, v8);
    v39((char *)v32, v29, v8);
    v41 = v78;
    v42 = v26;
    v43 = v32;
    v44 = a4;
  }
  else
  {
    v69 = v26;
    v38(v11, 1, 1, v8);
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v71 + 8))(v11, v72);
    sub_1BE1B23CC();
    sub_1BE1B2450();
    v45 = v73;
    v35(v73, (uint64_t)v25, a4);
    *v32 = sub_1BE1B245C();
    v72 = (void (*)(char *, char *, uint64_t))v35;
    v35(v74, (uint64_t)v25, a4);
    v74 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF500);
    v43 = v32;
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1BDD85B8C(&v84, (uint64_t)&v87);
      sub_1BDD85B8C(&v87, (uint64_t)&v84);
      v46 = swift_allocObject();
      sub_1BDD85B8C(&v84, v46 + 16);
      v47 = sub_1BDEE1D50;
    }
    else
    {
      v86 = 0;
      v84 = 0u;
      v85 = 0u;
      sub_1BDD86E30((uint64_t)&v84, (uint64_t *)&unk_1EF52D8C8);
      swift_getDynamicType();
      v48 = sub_1BE1B37AC();
      v49 = v45;
      v50 = v36;
      v52 = v51;
      v46 = swift_allocObject();
      *(_QWORD *)(v46 + 16) = v48;
      *(_QWORD *)(v46 + 24) = v52;
      v36 = v50;
      v45 = v49;
      v47 = sub_1BDEE1C48;
    }
    v41 = v78;
    v44 = a4;
    v43[1] = (uint64_t)v47;
    v43[2] = v46;
    v53 = a4;
    v54 = v72;
    v72(v45, v25, v53);
    v55 = (*(unsigned __int8 *)(v41 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    v56 = (char *)swift_allocObject();
    *((_QWORD *)v56 + 2) = v76;
    *((_QWORD *)v56 + 3) = v44;
    *((_QWORD *)v56 + 4) = v81;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v56[v55], v45, v44);
    v43[3] = (uint64_t)sub_1BDEE1CA8;
    v43[4] = (uint64_t)v56;
    v54(v75, v25, v44);
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED6EF510);
    if (swift_dynamicCast())
    {
      sub_1BDD85B8C(&v84, (uint64_t)&v87);
      sub_1BDD85B8C(&v87, (uint64_t)&v84);
      v57 = swift_allocObject();
      sub_1BDD85B8C(&v84, v57 + 16);
      v43[5] = (uint64_t)sub_1BDEE1D48;
      v43[6] = v57;
      v42 = v69;
    }
    else
    {
      v86 = 0;
      v84 = 0u;
      v85 = 0u;
      sub_1BDD86E30((uint64_t)&v84, (uint64_t *)&unk_1EF52D8D8);
      v54(v70, v25, v44);
      v58 = swift_dynamicCast();
      v42 = v69;
      if (v58)
      {
        sub_1BDD85B8C(&v84, (uint64_t)&v87);
        sub_1BDD85B8C(&v87, (uint64_t)&v84);
        v59 = swift_allocObject();
        sub_1BDD85B8C(&v84, v59 + 16);
        v43[5] = (uint64_t)sub_1BDEE1D40;
        v43[6] = v59;
      }
      else
      {
        v86 = 0;
        v84 = 0u;
        v85 = 0u;
        sub_1BDD86E30((uint64_t)&v84, (uint64_t *)&unk_1EF52D8C8);
        swift_getDynamicType();
        v60 = sub_1BE1B37AC();
        v62 = v61;
        v63 = swift_allocObject();
        *(_QWORD *)(v63 + 16) = v60;
        *(_QWORD *)(v63 + 24) = v62;
        v43[5] = (uint64_t)sub_1BDEE1D14;
        v43[6] = v63;
      }
    }
  }
  v64 = type metadata accessor for CRMulticastSyncManagerSubscription(0, v79, v80, v40);
  v65 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t *, uint64_t))(v42 + 32))(v77, v43, v36);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v44);
  swift_allocObject();
  v66 = sub_1BDDCEEA8(v82, v65);
  swift_release();
  *(_QWORD *)&v84 = v66;
  swift_beginAccess();
  sub_1BE1B2A5C();
  swift_retain();
  sub_1BE1B2A20();
  swift_endAccess();
  v88 = v64;
  v89 = MEMORY[0x1C3B7DF54](&unk_1BE1BB320, v64);
  *(_QWORD *)&v87 = v66;
  sub_1BE1B23E4();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
}

uint64_t sub_1BDED9078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BDED8940(a1, *v4, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
}

uint64_t CRMulticastSyncManager.publisher.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  type metadata accessor for Capsule(0, v5, *(_QWORD *)(v6 + 16), a4);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  v8 = type metadata accessor for CRMulticastSyncManager.CRMulticastPublisher(0, v5, v6, v7);
  MEMORY[0x1C3B7DF54](&unk_1BE1BB358, v8);
  return sub_1BE1B2414();
}

uint64_t type metadata accessor for CRMulticastSyncManager.CRMulticastPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRMulticastSyncManager.CRMulticastPublisher);
}

uint64_t sub_1BDED9138()
{
  __int128 *v0;
  uint64_t v2;
  __int128 v3;

  v3 = *v0;
  v2 = v3;
  sub_1BDEE1E90((uint64_t)&v3);
  sub_1BE1B32E4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BDED91A0()
{
  __int128 *v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;

  v2 = *v0;
  v3 = *v0;
  if (__OFADD__(*((_QWORD *)v0 + 6), 1))
  {
    __break(1u);
  }
  else
  {
    sub_1BDEE1E90((uint64_t)&v3);
    sub_1BE1B32E4();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    return v2;
  }
  return result;
}

uint64_t CRMulticastSyncManager.setLink(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];
  __int128 v21[2];

  v2 = v1;
  v4 = (_QWORD *)*v1;
  v5 = sub_1BE1B248C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B24BC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)((char *)v2 + v4[16]);
  v13 = swift_allocObject();
  swift_weakInit();
  sub_1BDED9AB0(a1, (uint64_t)v21);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v4[10];
  v14[3] = v4[11];
  v14[4] = v13;
  sub_1BDD85B8C(v21, (uint64_t)(v14 + 5));
  aBlock[4] = sub_1BDED9B20;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_4;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v19 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v6, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v12, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  return swift_release();
}

uint64_t sub_1BDED9464()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BDED9488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v5 = type metadata accessor for Capsule(255, a3, *(_QWORD *)(a4 + 16), a4);
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v39 - v11;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v14 = result;
  v54 = v7;
  v15 = (uint64_t *)(result + *(_QWORD *)(*(_QWORD *)result + 184));
  v16 = v15[1];
  if (v16)
  {
    v47 = a2;
    v51 = v6;
    v40 = v10;
    v52 = v5;
    v53 = &v39;
    v19 = v15[2];
    v18 = (void (*)(_QWORD))v15[3];
    v21 = v15[4];
    v20 = v15[5];
    v22 = v15[6];
    v23 = v15[7];
    v58 = *v15;
    v17 = v58;
    v59 = v16;
    v60 = v19;
    v61 = v18;
    v45 = (void (*)(char *))v18;
    v62 = v21;
    v63 = v20;
    v49 = v22;
    v64 = v22;
    v65 = v23;
    v48 = v23;
    MEMORY[0x1E0C80A78](result);
    *(&v39 - 2) = v20;
    *(&v39 - 1) = 0xBFF0000000000000;
    swift_bridgeObjectRetain();
    v44 = v21;
    swift_retain();
    v50 = v20;
    swift_retain();
    sub_1BE1B2E40();
    v24 = v56;
    v56 = 0;
    v57 = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56 = v17;
    v57 = v16;
    sub_1BE1B284C();
    swift_bridgeObjectRetain();
    v46 = v17;
    sub_1BE1B284C();
    v53 = (uint64_t *)v16;
    swift_bridgeObjectRelease();
    result = sub_1BE1B284C();
    if ((unsigned __int128)(v19 * (__int128)3) >> 64 == (3 * v19) >> 63)
    {
      v41 = v15;
      v42 = v19;
      v43 = 3 * v19;
      v55 = 3 * v19;
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BDED75F8(v56, v57);
      swift_bridgeObjectRelease();
      v56 = 0;
      v57 = 0xE000000000000000;
      sub_1BE1B305C();
      sub_1BDED9138();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v25 = v14 + *(_QWORD *)(*(_QWORD *)v14 + 112);
      swift_beginAccess();
      v26 = v54;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
      v28 = v51;
      v27(v12, v25, v51);
      v29 = v52;
      v30 = *(_QWORD *)(v52 - 8);
      v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
      v32 = v31(v12, 1, v52);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v28);
      if (v32 == 1)
      {
        v33 = v47;
        v34 = v46;
        goto LABEL_8;
      }
      v35 = v40;
      v27(v40, v25, v28);
      result = v31(v35, 1, v29);
      if ((_DWORD)result != 1)
      {
        v45(v35);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v35, v29);
        v33 = v47;
        v34 = v46;
LABEL_8:
        v36 = v41;
        sub_1BE1B284C();
        swift_bridgeObjectRelease();
        sub_1BE1B284C();
        v55 = v43;
        sub_1BE1B32E4();
        sub_1BE1B284C();
        swift_bridgeObjectRelease();
        sub_1BE1B284C();
        sub_1BE1B2B4C();
        sub_1BE1B284C();
        sub_1BDED75F8(v56, v57);
        sub_1BDEE1750(v34, (uint64_t)v53);
        swift_bridgeObjectRelease();
        a2 = v33;
        if (v36[1])
          v36[7] = v24;
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_10:
  sub_1BDED9AB0(a2, (uint64_t)&v56);
  v37 = v14 + *(_QWORD *)(*(_QWORD *)v14 + 136);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)&v56, v37, qword_1EF52D6B8);
  swift_endAccess();
  v38 = v14 + *(_QWORD *)(*(_QWORD *)v14 + 144);
  if (*(_BYTE *)(v38 + 8) != 1 || *(_QWORD *)v38)
  {
    sub_1BDED9B30(1);
    sub_1BDEDA9A4();
  }
  return swift_release();
}

uint64_t sub_1BDED9AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1BDED9AF4()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

uint64_t sub_1BDED9B20()
{
  uint64_t *v0;

  return sub_1BDED9488(v0[4], (uint64_t)(v0 + 5), v0[2], v0[3]);
}

uint64_t sub_1BDED9B30(int a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t **v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int EnumCaseMultiPayload;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v123 = a1;
  v2 = *v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D920);
  v4 = MEMORY[0x1E0C80A78](v3);
  v116 = (uint64_t)v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v125 = (uint64_t)v108 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D8F8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v121 = (uint64_t)v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v115 = (uint64_t)v108 - v10;
  v11 = type metadata accessor for Peer_Heartbeat(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v122 = (char *)v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v118 = (uint64_t)v108 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v114 = (uint64_t)v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v113 = (uint64_t)v108 - v18;
  v19 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v19);
  v111 = (_QWORD *)((char *)v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for Proto_Value(0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v112 = (uint64_t)v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v119 = (uint64_t)v108 - v24;
  v126 = type metadata accessor for Proto_Document(0);
  v124 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126);
  v117 = (char *)v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Capsule(0, v2[10], *(_QWORD *)(v2[11] + 16), v26);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)v108 - v29;
  v31 = type metadata accessor for Peer_Message(0);
  result = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v2[18];
  v127 = v1;
  v36 = (char *)v1 + v35;
  if (v36[8] == 1 && !*(_QWORD *)v36)
    return result;
  v120 = v11;
  sub_1BE1B20E4();
  v37 = *(int *)(v31 + 20);
  if (qword_1EF52BEB8 != -1)
    swift_once();
  *(_QWORD *)&v34[v37] = qword_1EF530418;
  v38 = v127;
  v39 = (char *)v127 + (*v127)[14];
  swift_beginAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v39, 1, v27))
  {
    swift_retain();
    v40 = (uint64_t)v34;
    v41 = (uint64_t)v122;
    v42 = v120;
    goto LABEL_24;
  }
  v110 = v37;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v30, v39, v27);
  Capsule.version.getter(v27, &v128);
  v43 = *(void (**)(char *, uint64_t))(v28 + 8);
  swift_retain();
  v43(v30, v27);
  v44 = v128;
  v109 = v129;
  v45 = *(uint64_t **)((char *)v38 + (*v38)[15]);
  type metadata accessor for CREncoder();
  inited = swift_initStackObject();
  v47 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v47;
  *(_QWORD *)(inited + 48) = v47;
  *(_QWORD *)(inited + 56) = v48;
  *(_QWORD *)(inited + 64) = v47;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = v45;
  *(_QWORD *)(inited + 24) = v47;
  *(_BYTE *)(inited + 72) = 2;
  v49 = v45;
  v50 = (uint64_t)v117;
  sub_1BE1B20E4();
  v51 = *(int *)(v126 + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  *(_QWORD *)(v50 + v51) = qword_1ED6F37F0;
  swift_retain();
  v52 = v119;
  sub_1BE1B20E4();
  v53 = *(int *)(v21 + 20);
  v40 = (uint64_t)v34;
  if (qword_1ED6F2718 != -1)
    swift_once();
  *(_QWORD *)(v52 + v53) = qword_1ED6F2708;
  v108[1] = v44;
  v128 = v44;
  v129 = v109;
  swift_retain();
  v54 = v111;
  sub_1BDDAD780(inited, v111);
  sub_1BE128B60((uint64_t)v54);
  v55 = v52;
  v56 = v112;
  sub_1BDD9C318(v55, v112, type metadata accessor for Proto_Value);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = (uint64_t)v122;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v58 = swift_retain();
    *(_QWORD *)(v50 + v51) = sub_1BDDA0F18(v58);
    swift_release();
  }
  v59 = *(_QWORD *)(v50 + v51);
  v60 = v56;
  v61 = v113;
  sub_1BDDA2E8C(v60, v113, type metadata accessor for Proto_Value);
  v62 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
  v63 = v114;
  sub_1BDDA2EF0(v61, v114, &qword_1ED6F37C8);
  v64 = v59 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v63, v64, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  sub_1BDD8C8A8(v50);
  sub_1BDD9C3E0(v119, type metadata accessor for Proto_Value);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v65 = *(_QWORD *)(v40 + v110)
      + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
  swift_beginAccess();
  v66 = v115;
  sub_1BDD86DEC(v65, v115, &qword_1EF52D8F8);
  v67 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 48))(v66, 1, v67) == 1)
  {
    sub_1BDD86E30(v66, &qword_1EF52D8F8);
    v42 = v120;
    v68 = v118;
LABEL_18:
    sub_1BE1B20E4();
    v70 = *(int *)(v42 + 20);
    if (qword_1EF52BEC8 != -1)
      swift_once();
    *(_QWORD *)(v68 + v70) = qword_1EF530420;
    swift_retain();
    goto LABEL_21;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v42 = v120;
  v68 = v118;
  if (EnumCaseMultiPayload != 5)
  {
    sub_1BDD9C3E0(v66, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
    goto LABEL_18;
  }
  sub_1BDDA2E8C(v66, v118, type metadata accessor for Peer_Heartbeat);
LABEL_21:
  v71 = *(int *)(v42 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v72 = *(_QWORD *)(v68 + v71);
    type metadata accessor for Peer_Heartbeat._StorageClass(0);
    v73 = swift_allocObject();
    v74 = v73 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v73 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version, 1, 1, v126);
    v75 = (_BYTE *)(v73
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    *(_BYTE *)(v73
             + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat) = 0;
    v76 = v72 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    swift_beginAccess();
    v77 = v76;
    v78 = v125;
    sub_1BDD86DEC(v77, v125, &qword_1EF52D920);
    swift_beginAccess();
    swift_retain();
    v79 = v78;
    v68 = v118;
    v42 = v120;
    sub_1BDDA1AF4(v79, v74, &qword_1EF52D920);
    swift_endAccess();
    v80 = (_BYTE *)(v72
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    swift_beginAccess();
    LOBYTE(v80) = *v80;
    swift_beginAccess();
    *v75 = (_BYTE)v80;
    v50 = (uint64_t)v117;
    swift_release();
    *(_QWORD *)(v68 + v71) = v73;
    swift_release();
  }
  v81 = *(_QWORD *)(v68 + v71);
  v82 = v125;
  sub_1BDDA2E8C(v50, v125, type metadata accessor for Proto_Document);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56))(v82, 0, 1, v126);
  v83 = v116;
  sub_1BDDA2EF0(v82, v116, &qword_1EF52D920);
  v84 = v81 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v83, v84, &qword_1EF52D920);
  swift_endAccess();
  swift_release();
  sub_1BE116F44(v68);
  v37 = v110;
LABEL_24:
  v85 = *(_QWORD *)(v40 + v37)
      + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
  swift_beginAccess();
  v86 = v121;
  sub_1BDD86DEC(v85, v121, &qword_1EF52D8F8);
  v87 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48))(v86, 1, v87) == 1)
  {
    sub_1BDD86E30(v86, &qword_1EF52D8F8);
LABEL_29:
    sub_1BE1B20E4();
    v88 = *(int *)(v42 + 20);
    if (qword_1EF52BEC8 != -1)
      swift_once();
    *(_QWORD *)(v41 + v88) = qword_1EF530420;
    swift_retain();
    goto LABEL_32;
  }
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    sub_1BDD9C3E0(v86, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
    goto LABEL_29;
  }
  sub_1BDDA2E8C(v86, v41, type metadata accessor for Peer_Heartbeat);
LABEL_32:
  v89 = *(int *)(v42 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v90 = *(_QWORD *)(v41 + v89);
    type metadata accessor for Peer_Heartbeat._StorageClass(0);
    v91 = swift_allocObject();
    v92 = v91 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v91 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version, 1, 1, v126);
    v93 = (_BYTE *)(v91
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    *(_BYTE *)(v91
             + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat) = 0;
    v94 = v90 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    swift_beginAccess();
    v95 = v94;
    v96 = v125;
    sub_1BDD86DEC(v95, v125, &qword_1EF52D920);
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v96, v92, &qword_1EF52D920);
    swift_endAccess();
    v97 = (_BYTE *)(v90
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    swift_beginAccess();
    LOBYTE(v97) = *v97;
    swift_beginAccess();
    *v93 = (_BYTE)v97;
    swift_release();
    *(_QWORD *)(v41 + v89) = v91;
    swift_release();
  }
  v98 = (_BYTE *)(*(_QWORD *)(v41 + v89)
                + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
  swift_beginAccess();
  *v98 = v123 & 1;
  sub_1BE116F44(v41);
  if (qword_1EF52BE90 != -1)
    swift_once();
  v99 = sub_1BE1B23C0();
  __swift_project_value_buffer(v99, (uint64_t)qword_1EF549348);
  v100 = sub_1BE1B23A8();
  v101 = sub_1BE1B2DC8();
  if (os_log_type_enabled(v100, v101))
  {
    v102 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v102 = 0;
    _os_log_impl(&dword_1BDD82000, v100, v101, "Send heatbeat", v102, 2u);
    MEMORY[0x1C3B7E068](v102, -1, -1);
  }

  v103 = (uint64_t)v127 + (*v127)[17];
  swift_beginAccess();
  if (!*(_QWORD *)(v103 + 24))
    return sub_1BDD9C3E0(v40, type metadata accessor for Peer_Message);
  sub_1BDED9AB0(v103, (uint64_t)&v128);
  v104 = v131;
  __swift_project_boxed_opaque_existential_1(&v128, v130);
  v105 = sub_1BDEDDF1C();
  v107 = v106;
  (*(void (**)(void))(v104 + 8))();
  sub_1BDD9C3E0(v40, type metadata accessor for Peer_Message);
  sub_1BDDB796C(v105, v107);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v128);
}

uint64_t sub_1BDEDA9A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  double *v19;
  _QWORD *v20;
  double v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[6];

  v1 = *v0;
  v2 = sub_1BE1B248C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BE1B24BC();
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  MEMORY[0x1E0C80A78](v6);
  v41 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B24D4();
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v14 = sub_1BE1B2E70();
  v15 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v1;
  v19 = (double *)((char *)v0 + *(_QWORD *)(v1 + 144));
  if (((_BYTE)v19[1] & 1) == 0)
  {
    v20 = v0;
    v35 = v5;
    v36 = v3;
    v37 = v2;
    v21 = *v19;
    sub_1BDDC6C38(0, &qword_1EF52D928);
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C(&qword_1EF52D930, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D938);
    sub_1BDD87364(qword_1EF52D940, &qword_1EF52D938);
    sub_1BE1B2F78();
    v22 = sub_1BE1B2E7C();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    ObjectType = swift_getObjectType();
    sub_1BE1B24C8();
    MEMORY[0x1C3B7C3E8](v11, v21);
    v24 = v39;
    v25 = *(void (**)(char *, uint64_t))(v38 + 8);
    v25(v11, v39);
    if (qword_1EF52BE88 != -1)
      swift_once();
    v26 = sub_1BE1B2480();
    v27 = __swift_project_value_buffer(v26, (uint64_t)qword_1EF549330);
    MEMORY[0x1C3B7CD9C](v13, v27, ObjectType, v21);
    v25(v13, v24);
    v28 = swift_allocObject();
    swift_weakInit();
    v29 = (_QWORD *)swift_allocObject();
    v30 = v40;
    v29[2] = *(_QWORD *)(v40 + 80);
    v29[3] = *(_QWORD *)(v30 + 88);
    v29[4] = v28;
    aBlock[4] = sub_1BDEE20CC;
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = &block_descriptor_69;
    v31 = _Block_copy(aBlock);
    swift_retain();
    v32 = v41;
    sub_1BE1B24A4();
    v33 = v35;
    sub_1BDEDB590();
    sub_1BE1B2E88();
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v37);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v43);
    swift_release();
    swift_release();
    sub_1BE1B2E94();
    *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 + 152)) = v22;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1BDEDAD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v4 = type metadata accessor for Capsule(0, a2, *(_QWORD *)(a3 + 16), a4);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - v6;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = result;
    v10 = (_QWORD *)result;
    sub_1BDEDAFF4(0, 0, 0x6573756F68766E69, 0xE800000000000000, 0, 0xE000000000000000);
    sub_1BDED9B30(0);
    v11 = v9 + *(_QWORD *)(*(_QWORD *)v9 + 160);
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v11 + 16) >= 2uLL)
    {
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        __break(1u);
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDF114EC(0, 1);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v12 = v9 + *(_QWORD *)(*(_QWORD *)v9 + 112);
    swift_beginAccess();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
      return swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
    Capsule.version.getter(v4, &v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = v17;
    swift_beginAccess();
    v10 = *(_QWORD **)v11;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_7:
      v15 = v10[2];
      v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        v10 = sub_1BDE07078((_QWORD *)(v14 > 1), v15 + 1, 1, v10);
        *(_QWORD *)v11 = v10;
      }
      v10[2] = v15 + 1;
      *(_OWORD *)&v10[2 * v15 + 4] = v16;
      swift_endAccess();
      return swift_release();
    }
LABEL_13:
    v10 = sub_1BDE07078(0, v10[2] + 1, 1, v10);
    *(_QWORD *)v11 = v10;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1BDEDAFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v7 = v6;
  v67 = a1;
  v13 = *v6;
  v53 = type metadata accessor for Capsule(255, v13[10], *(_QWORD *)(v13[11] + 16), a4);
  v14 = sub_1BE1B2EE8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  result = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v50 - v19;
  v21 = (uint64_t *)((char *)v7 + v13[23]);
  v22 = v21[1];
  if (v22)
  {
    v52 = result;
    v51 = v18;
    v60 = a3;
    v62 = a4;
    v63 = a5;
    v64 = a6;
    v23 = v21[2];
    v24 = (void (*)(_QWORD))v21[3];
    v25 = v21[4];
    v26 = v21[5];
    v27 = v21[6];
    v28 = v21[7];
    v61 = *v21;
    v73 = v61;
    v74 = v22;
    v68 = v23;
    v75 = v23;
    v76 = v24;
    v65 = v24;
    v77 = v25;
    v78 = v26;
    v59 = v27;
    v79 = v27;
    v80 = v28;
    MEMORY[0x1E0C80A78](result);
    *(&v50 - 2) = v26;
    *(&v50 - 1) = v29;
    v58 = v29;
    v57 = v30;
    swift_bridgeObjectRetain();
    v66 = v25;
    swift_retain();
    swift_retain();
    v31 = MEMORY[0x1E0DEB070];
    result = sub_1BE1B2E40();
    v32 = v71;
    if (v21[1])
      v21[7] = v71;
    v71 = 34;
    v72 = 0xE100000000000000;
    if ((unsigned __int128)(v68 * (__int128)3) >> 64 == (3 * v68) >> 63)
    {
      v69 = 3 * v68;
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
      v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1BE1B61B0;
      v34 = MEMORY[0x1E0DEB100];
      *(_QWORD *)(v33 + 56) = v31;
      *(_QWORD *)(v33 + 64) = v34;
      *(_QWORD *)(v33 + 32) = v32;
      sub_1BE1B27EC();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v54 = v71;
      v56 = v72;
      v71 = sub_1BDED9138();
      v72 = v35;
      sub_1BE1B284C();
      sub_1BDED91A0();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BDED75F8(v71, v72);
      swift_bridgeObjectRelease();
      v55 = v26;
      if (!a2)
      {
        v67 = 0;
        v36 = (char *)v7 + (*v7)[14];
        swift_beginAccess();
        v37 = v15;
        v38 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
        v39 = v52;
        v38(v20, v36, v52);
        v40 = v53;
        v50 = *(_QWORD *)(v53 - 8);
        v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
        v42 = v41(v20, 1, v53);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v39);
        if (v42 != 1)
        {
          v43 = v51;
          v38(v51, v36, v39);
          result = v41(v43, 1, v40);
          if ((_DWORD)result == 1)
          {
LABEL_15:
            __break(1u);
            return result;
          }
          v65((uint64_t)v43);
          (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v40);
        }
      }
      v69 = 0;
      v70 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_1BE1B305C();
      v44 = sub_1BDED91A0();
      v46 = v45;
      swift_bridgeObjectRelease();
      v69 = v44;
      v70 = v46;
      sub_1BE1B284C();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BE1B284C();
      sub_1BE1B284C();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BE1B284C();
      sub_1BDED75F8(v69, v70);
      swift_bridgeObjectRelease();
      result = sub_1BDEE1750(v61, v57);
      if (!v21[1])
        return result;
      v47 = v21[6];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (!v48)
      {
        v21[6] = v49;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1BDEDB590()
{
  sub_1BE1B248C();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  return sub_1BE1B2F78();
}

uint64_t CRMulticastSyncManager.isValidMessage(_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_1BDED84EC(a1, a2);
  return v2 & 1;
}

uint64_t CRMulticastSyncManager.receive(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1BDEDB6A8(a1, a2, 0, 0);
}

uint64_t sub_1BDEDB6A8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = (_QWORD *)*v5;
  v11 = sub_1BE1B248C();
  v24 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1BE1B24BC();
  v22 = *(_QWORD *)(v14 - 8);
  v23 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)((char *)v5 + v10[16]);
  v17 = swift_allocObject();
  swift_weakInit();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v10[10];
  v18[3] = v10[11];
  v18[4] = v17;
  v18[5] = a1;
  v18[6] = a2;
  v18[7] = a3;
  v18[8] = a4;
  aBlock[4] = sub_1BDEE1EEC;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_50;
  v19 = _Block_copy(aBlock);
  swift_retain();
  sub_1BDDB6CA4(a1, a2);
  swift_bridgeObjectRetain();
  sub_1BE1B24A4();
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v16, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
  swift_release();
  return swift_release();
}

void sub_1BDEDB900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  int EnumCaseMultiPayload;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[9];

  v6 = v5;
  v53 = a2;
  v54 = a4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D8F8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v55 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v57 = (uint64_t)&v49 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v49 - v15;
  v17 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF52BE90 != -1)
    swift_once();
  v20 = sub_1BE1B23C0();
  v21 = __swift_project_value_buffer(v20, (uint64_t)qword_1EF549348);
  sub_1BDD9C318(a1, (uint64_t)v19, type metadata accessor for Peer_Message);
  v56 = v21;
  v22 = sub_1BE1B23A8();
  v23 = sub_1BE1B2DC8();
  if (!os_log_type_enabled(v22, v23))
  {
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Peer_Message);

    if (!a3)
      return;
LABEL_10:
    v32 = (uint64_t *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 184));
    v33 = v32[1];
    if (!v33)
      return;
    v35 = v32[2];
    v34 = v32[3];
    v37 = v32[4];
    v36 = v32[5];
    v38 = v32[6];
    v39 = v32[7];
    v49 = *v32;
    v61[0] = v49;
    v61[1] = v33;
    v50 = v35;
    v61[2] = v35;
    v61[3] = v34;
    v51 = v34;
    v61[4] = v37;
    v61[5] = v36;
    v52 = v38;
    v61[6] = v38;
    v61[7] = v39;
    v40 = *(_QWORD *)(a1 + *(int *)(v17 + 20))
        + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
    swift_beginAccess();
    v41 = v57;
    sub_1BDD86DEC(v40, v57, &qword_1EF52D8F8);
    v42 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v41, 1, v42) == 1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
LABEL_13:
      v43 = sub_1BE1B23A8();
      v44 = sub_1BE1B2DD4();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_1BDD82000, v43, v44, "Unexpected multicast message.", v45, 2u);
        MEMORY[0x1C3B7E068](v45, -1, -1);
      }
      sub_1BDEE1750(v49, v33);

      sub_1BDD86E30(v41, &qword_1EF52D8F8);
      return;
    }
    v46 = v55;
    sub_1BDD86DEC(v41, v55, &qword_1EF52D8F8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v56 = v39;
        v48 = a3;
        break;
      case 5:
        v56 = v39;
        v48 = a3;
        break;
      case 4:
        v56 = v39;
        v48 = a3;
        break;
      default:
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_1BDD9C3E0(v46, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
        goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1BDD9C3E0(v46, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
    sub_1BDD86E30(v41, &qword_1EF52D8F8);
    v58 = 0;
    v59 = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v58 = v53;
    v59 = v48;
    sub_1BE1B284C();
    sub_1BDED91A0();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    sub_1BE1B284C();
    sub_1BE1B284C();
    sub_1BDED75F8(v58, v59);
    sub_1BDEE1750(v49, v33);
    swift_bridgeObjectRelease();
    return;
  }
  v50 = v6;
  v51 = a3;
  v52 = a5;
  v24 = (uint8_t *)swift_slowAlloc();
  v25 = swift_slowAlloc();
  v61[0] = v25;
  *(_DWORD *)v24 = 136315138;
  v26 = *(_QWORD *)&v19[*(int *)(v17 + 20)]
      + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v26, (uint64_t)v16, &qword_1EF52D8F8);
  v27 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v16, 1, v27) == 1)
  {
    sub_1BDD86E30((uint64_t)v16, &qword_1EF52D8F8);
    v28 = 0xE100000000000000;
    v29 = 63;
  }
  else
  {
    sub_1BDED7900();
    v29 = v30;
    v28 = v31;
    sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
  }
  v60 = sub_1BDDC1468(v29, v28, v61);
  sub_1BE1B2F0C();
  swift_bridgeObjectRelease();
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Peer_Message);
  _os_log_impl(&dword_1BDD82000, v22, v23, "Receive %s", v24, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3B7E068](v25, -1, -1);
  MEMORY[0x1C3B7E068](v24, -1, -1);

  a3 = v51;
  v6 = v50;
  if (v51)
    goto LABEL_10;
}

uint64_t sub_1BDEDBFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  int EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a4;
  v58 = a5;
  v7 = type metadata accessor for Peer_Heartbeat(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_Document(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v55 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v54 = (uint64_t)&v50 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D8F8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v56 = (uint64_t)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v50 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF52D900);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Peer_Message(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v51 = v9;
    v52 = v25;
    v53 = v18;
    v27 = (uint64_t *)(result + *(_QWORD *)(*(_QWORD *)result + 176));
    v29 = *v27;
    v28 = v27[1];
    sub_1BDD9C9A0(*v27, v28);
    sub_1BDED7FF4(a2, a3);
    sub_1BDD9CC0C(v29, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
    {
      swift_release();
      v30 = (uint64_t *)&unk_1EF52D900;
      v31 = (uint64_t)v21;
      return sub_1BDD86E30(v31, v30);
    }
    v32 = (uint64_t)v52;
    sub_1BDDA2E8C((uint64_t)v21, (uint64_t)v52, type metadata accessor for Peer_Message);
    sub_1BDEDB900(v32, v57, v58, 0x6C616D726F6ELL, 0xE600000000000000);
    v33 = *(_QWORD *)(v32 + *(int *)(v22 + 20))
        + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
    swift_beginAccess();
    v34 = (uint64_t)v53;
    sub_1BDD86DEC(v33, (uint64_t)v53, &qword_1EF52D8F8);
    v35 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35) == 1)
      goto LABEL_5;
    v40 = v56;
    sub_1BDD86DEC(v34, v56, &qword_1EF52D8F8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      v42 = (uint64_t)v51;
      sub_1BDDA2E8C(v40, (uint64_t)v51, type metadata accessor for Peer_Heartbeat);
      sub_1BDEDD018(v42);
      swift_release();
      v46 = type metadata accessor for Peer_Heartbeat;
    }
    else
    {
      if (EnumCaseMultiPayload == 4)
      {
        v42 = v55;
        sub_1BDDA2E8C(v40, v55, type metadata accessor for Proto_Document);
        sub_1BDEDCC98(v42, v47, v48, v49);
      }
      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_1BDD9C3E0(v40, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
LABEL_5:
          if (qword_1EF52BE90 != -1)
            swift_once();
          v36 = sub_1BE1B23C0();
          __swift_project_value_buffer(v36, (uint64_t)qword_1EF549348);
          v37 = sub_1BE1B23A8();
          v38 = sub_1BE1B2DD4();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v39 = 0;
            _os_log_impl(&dword_1BDD82000, v37, v38, "Unexpected multicast message.", v39, 2u);
            MEMORY[0x1C3B7E068](v39, -1, -1);
          }
          swift_release();

          goto LABEL_10;
        }
        v42 = v54;
        sub_1BDDA2E8C(v40, v54, type metadata accessor for Proto_Document);
        sub_1BDEDC6A4(v42, v43, v44, v45);
      }
      swift_release();
      v46 = type metadata accessor for Proto_Document;
    }
    sub_1BDD9C3E0(v42, v46);
LABEL_10:
    sub_1BDD9C3E0(v32, type metadata accessor for Peer_Message);
    v30 = &qword_1EF52D8F8;
    v31 = v34;
    return sub_1BDD86E30(v31, v30);
  }
  return result;
}

uint64_t sub_1BDEDC6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  unsigned int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v49 = a1;
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 80);
  v46 = *(_QWORD *)(*v4 + 88);
  v7 = *(_QWORD *)(v46 + 16);
  v50 = v6;
  v48 = v7;
  v8 = type metadata accessor for Capsule(255, v6, v7, a4);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v45 - v14;
  v16 = *(_QWORD *)(v5 + 112);
  v51 = v4;
  v17 = (uint64_t)v4 + v16;
  swift_beginAccess();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, v17, v9);
  v47 = *(_QWORD *)(v8 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v20 = v19(v15, 1, v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  if (v20 != 1)
  {
    type metadata accessor for CRDecoder(0);
    v22 = swift_allocObject();
    v23 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = v23;
    v24 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v24;
    *(_BYTE *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 56) = 0;
    v25 = v22 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v26 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
    v27 = v22 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v28 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
    *(_QWORD *)(v22 + 16) = 0;
    swift_release();
    *(_WORD *)(v22 + 48) = 513;
    v18(v13, v17, v9);
    v29 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v19;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v13, 1, v8);
    if ((_DWORD)result != 1)
    {
      v30 = *(_QWORD *)(*(uint64_t *)((char *)v51 + *(_QWORD *)(*v51 + 120)) + OBJC_IVAR___CRContext_assetManager);
      swift_retain();
      v31 = v59;
      sub_1BDE0FE60(v49, (uint64_t)v13, v30, v50, v48, &v52);
      if (v31)
      {
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v13, v8);
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v8);
      v59 = v53;
      v32 = v55;
      v49 = v52;
      v50 = v54;
      v33 = v56;
      v34 = v57;
      v35 = v58;
      swift_beginAccess();
      if (v29(v17, 1, v8))
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDEDAFF4(0, 0, 7892834, 0xE300000000000000, 0, 0xE000000000000000);
      }
      else
      {
        v52 = v49;
        v53 = v59;
        v54 = v50;
        v55 = v32;
        v48 = v32;
        v56 = v33;
        v57 = v34;
        v58 = v35;
        v36 = Capsule<>.merge(delta:)(&v52, v8);
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDEDAFF4(0, 0, 7892834, 0xE300000000000000, 0, 0xE000000000000000);
        if ((v36 & 1) != 0)
        {
          if (qword_1EF52BE90 != -1)
            swift_once();
          v37 = sub_1BE1B23C0();
          __swift_project_value_buffer(v37, (uint64_t)qword_1EF549348);
          v38 = sub_1BE1B23A8();
          v39 = sub_1BE1B2DC8();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v40 = 0;
            _os_log_impl(&dword_1BDD82000, v38, v39, "Delta merge succeed", v40, 2u);
            MEMORY[0x1C3B7E068](v40, -1, -1);
          }

          sub_1BDEDE994();
          goto LABEL_18;
        }
      }
      if (qword_1EF52BE90 != -1)
        swift_once();
      v41 = sub_1BE1B23C0();
      __swift_project_value_buffer(v41, (uint64_t)qword_1EF549348);
      v42 = sub_1BE1B23A8();
      v43 = sub_1BE1B2DC8();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v44 = 0;
        _os_log_impl(&dword_1BDD82000, v42, v43, "Delta merge fail", v44, 2u);
        MEMORY[0x1C3B7E068](v44, -1, -1);
      }

      sub_1BDED9B30(0);
LABEL_18:
      swift_setDeallocating();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDD86E30(v22 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
      sub_1BDD86E30(v22 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
      return swift_deallocClassInstance();
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDEDCC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49[24];
  uint64_t v50;

  v5 = v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v45 = *(_QWORD *)(v7 + 16);
  v9 = type metadata accessor for Capsule(255, v8, v45, a4);
  v10 = sub_1BE1B2EE8();
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v46 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for Proto_Document(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (uint64_t *)((char *)&v39 - v20);
  v49[0] = 2;
  sub_1BDD9C318(a1, (uint64_t)v18, v22);
  v23 = *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 120));
  v24 = *(_QWORD *)(v23 + OBJC_IVAR___CRContext_assetManager);
  swift_retain();
  v25 = v24;
  v26 = v50;
  result = sub_1BDD975F4(v49, 0, (uint64_t)v18, 0, v25, v8, v7, (uint64_t)v21);
  if (!v26)
  {
    v43 = v14;
    v44 = 0;
    v40 = v8;
    v41 = v23;
    v28 = v47;
    v50 = v19;
    v29 = *(_QWORD *)(*(_QWORD *)v5 + 192);
    if (*(_QWORD *)(v5 + v29))
    {
      swift_retain();
      sub_1BE1B24EC();
      swift_release();
    }
    *(_QWORD *)(v5 + v29) = 0;
    swift_release();
    v30 = *(_QWORD *)(*(_QWORD *)v5 + 112);
    v42 = v5;
    v31 = (char *)(v5 + v30);
    swift_beginAccess();
    v32 = v43;
    v33 = v48;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v43, v31, v48);
    v34 = v50;
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
    v36 = v35(v32, 1, v9);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v33);
    if (v36 == 1)
    {
      v37 = v46;
      (*(void (**)(char *, _QWORD *, uint64_t))(v34 + 16))(v46, v21, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v9);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v31, v37, v33);
    }
    else
    {
      swift_beginAccess();
      if (!v35(v31, 1, v9))
        Capsule.merge<A>(_:)((uint64_t)v21, v9, v40, v45);
      swift_endAccess();
      swift_beginAccess();
      v38 = v35(v31, 1, v9);
      v34 = v50;
      if (!v38)
        Capsule.finalizeTimestamps(_:)(v41, v9);
    }
    swift_endAccess();
    sub_1BDEDE994();
    sub_1BDEDAFF4(0, 0, 7892834, 0xE300000000000000, 0, 0xE000000000000000);
    sub_1BDEDE064(v21);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v34 + 8))(v21, v9);
  }
  return result;
}

uint64_t sub_1BDEDD018(uint64_t a1)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t **v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[8];

  v2 = v1;
  v43 = a1;
  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D920);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_Document(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Capsule(0, v3[10], *(_QWORD *)(v3[11] + 16), v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v40 - v14;
  v16 = (char *)v2 + v3[14];
  swift_beginAccess();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12);
  if (!(_DWORD)result)
  {
    v41 = v6;
    v42 = v8;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v16, v12);
    Capsule.version.getter(v12, v45);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v19 = v45[0];
    v18 = v45[1];
    v20 = *(_QWORD *)(v43 + *(int *)(type metadata accessor for Peer_Heartbeat(0) + 20));
    v21 = (unsigned __int8 *)(v20
                            + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    swift_beginAccess();
    v22 = *v21;
    v40 = v2;
    if (v22 != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = (char *)v2 + (*v2)[20];
      swift_beginAccess();
      v24 = *(_QWORD *)v23;
      if (*(_QWORD *)(*(_QWORD *)v23 + 16))
      {
        v19 = *(_QWORD *)(v24 + 32);
        v25 = *(_QWORD *)(v24 + 40);
        swift_bridgeObjectRetain();
        v18 = v25;
        swift_bridgeObjectRetain();
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
    }
    v26 = v42;
    type metadata accessor for CRDecoder(0);
    v27 = swift_allocObject();
    v28 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v27 + 24) = v28;
    v29 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 0;
    *(_QWORD *)(v27 + 56) = 0;
    v30 = v27 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v31 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
    v32 = v27 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v33 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
    *(_QWORD *)(v27 + 16) = 0;
    swift_release();
    *(_BYTE *)(v27 + 49) = 2;
    v34 = v20 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    swift_beginAccess();
    v35 = (uint64_t)v41;
    sub_1BDD86DEC(v34, (uint64_t)v41, &qword_1EF52D920);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v35, 1, v7) == 1)
    {
      sub_1BE1B20E4();
      v36 = *(int *)(v7 + 20);
      if (qword_1ED6F3268 != -1)
        swift_once();
      *(_QWORD *)&v10[v36] = qword_1ED6F37F0;
      swift_retain();
      sub_1BDD86E30(v35, &qword_1EF52D920);
    }
    else
    {
      sub_1BDDA2E8C(v35, (uint64_t)v10, type metadata accessor for Proto_Document);
    }
    v37 = v45[7];
    sub_1BDE0F688((uint64_t)v10, &v44);
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
    if (v37)
    {
      swift_release();
      return sub_1BDDC8EA0(v19);
    }
    swift_setDeallocating();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD86E30(v27 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
    sub_1BDD86E30(v27 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
    swift_deallocClassInstance();
    v38 = v44;
    if (v19)
    {
      if ((sub_1BDDB04C0(v18, *((uint64_t *)&v44 + 1)) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDDC8EA0(v19);
        return sub_1BDEDD50C();
      }
      v39 = sub_1BDDB04C0(v19, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDC8EA0(v19);
      if ((v39 & 1) != 0)
        return sub_1BDEDD50C();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return sub_1BDEDAFF4(0, 0, 0x746E696F70, 0xE500000000000000, 0, 0xE000000000000000);
  }
  return result;
}

uint64_t sub_1BDEDD50C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t (*v21)(char *, uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = (_QWORD *)*v0;
  v3 = sub_1BE1B24D4();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v22 - v8;
  v10 = sub_1BE1B248C();
  MEMORY[0x1E0C80A78](v10);
  v11 = v2[24];
  if (*(_QWORD *)((char *)v1 + v11))
    return sub_1BDEDAFF4(0, 0, 0x746E696F70, 0xE500000000000000, 0, 0xE000000000000000);
  v23 = v4;
  sub_1BDEDAFF4(0, 0, 0x6570617274766E69, 0xEC0000006D75697ALL, 0, 0xE000000000000000);
  v13 = swift_allocObject();
  v24 = v3;
  v14 = v13;
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v2[10];
  v15[3] = v2[11];
  v15[4] = v14;
  aBlock[4] = sub_1BDEE208C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_61;
  v22 = _Block_copy(aBlock);
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  sub_1BE1B24F8();
  swift_allocObject();
  v16 = sub_1BE1B24E0();
  v17 = v24;
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v1 + v11) = v16;
  v18 = swift_release();
  sub_1BDEE0DFC(v18, 0.01, 0.05);
  v20 = v19;
  sub_1BE1B24C8();
  MEMORY[0x1C3B7C3E8](v7, v20);
  v21 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
  result = v21(v7, v17);
  if (*(_QWORD *)((char *)v1 + v11))
  {
    swift_retain();
    sub_1BE1B2E10();
    swift_release();
    return v21(v9, v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDEDD848()
{
  uint64_t result;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1BDEDDA90();
    swift_release();
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    *(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 192)) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDEDDA90()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  _QWORD v45[5];
  uint64_t v46;

  v1 = v0;
  v2 = (_QWORD *)*v0;
  v3 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v3);
  v43 = (uint64_t *)((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2[10];
  v41 = v2[11];
  v42 = v7;
  v9 = type metadata accessor for Capsule(255, v7, *(_QWORD *)(v41 + 16), v8);
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v40 - v16;
  v18 = (char *)v1 + v2[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
  v20 = (uint64_t)v17;
  if (qword_1EF52BE90 != -1)
    swift_once();
  v21 = sub_1BE1B23C0();
  __swift_project_value_buffer(v21, (uint64_t)qword_1EF549348);
  v22 = sub_1BE1B23A8();
  v23 = sub_1BE1B2DC8();
  v24 = os_log_type_enabled(v22, v23);
  v25 = (uint64_t)v44;
  if (v24)
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1BDD82000, v22, v23, "Send fullModel", v26, 2u);
    MEMORY[0x1C3B7E068](v26, -1, -1);
  }

  sub_1BDEDAFF4(0, 0, 0x75697A6570617274, 0xE90000000000006DLL, 0, 0xE000000000000000);
  sub_1BE1B20E4();
  v27 = *(int *)(v5 + 20);
  if (qword_1EF52BEB8 != -1)
    swift_once();
  *(_QWORD *)(v25 + v27) = qword_1EF530418;
  v28 = *(void **)((char *)v1 + *(_QWORD *)(*v1 + 120));
  type metadata accessor for CREncoder();
  v29 = swift_allocObject();
  v30 = MEMORY[0x1E0DEE9D8];
  v31 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v29 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v29 + 40) = v30;
  *(_QWORD *)(v29 + 48) = v30;
  *(_QWORD *)(v29 + 56) = v31;
  *(_QWORD *)(v29 + 64) = v30;
  *(_QWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 16) = v28;
  *(_QWORD *)(v29 + 24) = v30;
  *(_BYTE *)(v29 + 72) = 2;
  swift_retain();
  v32 = v28;
  v33 = v43;
  v34 = v46;
  sub_1BDDC99EC(v20, 0, 0, 0, v42, v41, (uint64_t)v43);
  if (v34)
  {
    swift_release();
    sub_1BDD9C3E0(v25, type metadata accessor for Peer_Message);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v20, v9);
  }
  else
  {
    swift_release();
    sub_1BE116B1C((uint64_t)v33);
    v35 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
    swift_beginAccess();
    if (*(_QWORD *)(v35 + 24))
    {
      v46 = v20;
      sub_1BDED9AB0(v35, (uint64_t)v45);
      swift_endAccess();
      v36 = v45[4];
      v43 = __swift_project_boxed_opaque_existential_1(v45, v45[3]);
      v37 = sub_1BDEDDF1C();
      v39 = v38;
      (*(void (**)(void))(v36 + 8))();
      sub_1BDDB796C(v37, v39);
      sub_1BDD9C3E0(v25, type metadata accessor for Peer_Message);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v46, v9);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    }
    else
    {
      sub_1BDD9C3E0(v25, type metadata accessor for Peer_Message);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v9);
      return swift_endAccess();
    }
  }
}

uint64_t sub_1BDEDDF1C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v2 = (unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168));
  v3 = v2[1];
  v4 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  v5 = v4[1];
  if (v3 == 1 && v5 >> 60 == 15)
  {
    type metadata accessor for Peer_Message(0);
    sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
    return sub_1BE1B227C();
  }
  else
  {
    v7 = sub_1BDED7C30(6, *v2 | (v3 << 8), *v4, v5);
    v9 = v8;
    type metadata accessor for Peer_Message(0);
    sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
    v10 = sub_1BE1B227C();
    if (v1)
    {
      return sub_1BDDB796C(v7, v9);
    }
    else
    {
      v13 = v10;
      v14 = v11;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v13, v14);
      return v7;
    }
  }
}

uint64_t sub_1BDEDE064(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84[3];
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;

  v82 = a1;
  v2 = v1;
  v3 = (_QWORD *)*v1;
  v4 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v4);
  v79 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v78);
  v80 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v3[10];
  v81 = v3[11];
  v9 = type metadata accessor for Capsule(255, v7, *(_QWORD *)(v81 + 16), v8);
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v69 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v69 - v16;
  v18 = (char *)v2 + v3[14];
  swift_beginAccess();
  v19 = v18;
  v20 = v9;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v19, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
  v22 = *(_QWORD *)(*v2 + 192);
  v23 = v17;
  if (*(_QWORD *)((char *)v2 + v22))
  {
    swift_retain();
    sub_1BE1B24EC();
    swift_release();
    *(_QWORD *)((char *)v2 + v22) = 0;
    swift_release();
    sub_1BDEDDA90();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v9);
  }
  v24 = *(_QWORD *)(*v2 + 120);
  v73 = v2;
  v25 = *(_QWORD *)((char *)v2 + v24);
  Capsule<>.delta(_:from:)(v25, (uint64_t)v82, v9, (uint64_t *)&v85);
  v26 = v85;
  if (!v85)
  {
    if (qword_1EF52BE90 != -1)
      goto LABEL_49;
    goto LABEL_14;
  }
  v75 = v17;
  v71 = v86;
  v72 = v87;
  v77 = v88;
  v27 = v91;
  v81 = v90;
  v82 = v89;
  if (qword_1EF52BE90 != -1)
    goto LABEL_47;
LABEL_7:
  v69 = v20;
  v28 = sub_1BE1B23C0();
  __swift_project_value_buffer(v28, (uint64_t)qword_1EF549348);
  v29 = sub_1BE1B23A8();
  v30 = sub_1BE1B2DC8();
  v31 = os_log_type_enabled(v29, v30);
  v33 = (uint64_t)v79;
  v32 = v80;
  if (v31)
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1BDD82000, v29, v30, "Send delta", v34, 2u);
    MEMORY[0x1C3B7E068](v34, -1, -1);
  }

  sub_1BE1B20E4();
  v35 = (uint64_t)v32;
  v36 = *(int *)(v78 + 20);
  if (qword_1EF52BEB8 != -1)
    swift_once();
  *(_QWORD *)(v35 + v36) = qword_1EF530418;
  type metadata accessor for CREncoder();
  v37 = swift_allocObject();
  v38 = MEMORY[0x1E0DEE9D8];
  v39 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v37 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v37 + 40) = v38;
  *(_QWORD *)(v37 + 48) = v38;
  *(_QWORD *)(v37 + 56) = v39;
  *(_QWORD *)(v37 + 64) = v38;
  *(_QWORD *)(v37 + 80) = 0;
  *(_QWORD *)(v37 + 88) = 0;
  *(_QWORD *)(v37 + 16) = v25;
  *(_QWORD *)(v37 + 24) = v38;
  v40 = (void *)v25;
  *(_BYTE *)(v37 + 72) = 2;
  v85 = v26;
  v86 = v71;
  v25 = v72;
  v87 = v72;
  v88 = v77;
  v89 = v82;
  v90 = v81;
  v91 = v27;
  swift_retain();
  v41 = v40;
  v70 = (uint64_t)v26;
  v26 = v41;
  v42 = v83;
  sub_1BDE18088(v41, (uint64_t)&v85, v33);
  v20 = v42;
  if (v42)
  {
    swift_release();
    sub_1BDD9C3E0(v35, type metadata accessor for Peer_Message);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v75, v69);
    return sub_1BDEE1E04(v70);
  }
  v78 = (uint64_t)v26;
  v74 = v15;
  swift_release();
  sub_1BE116D30(v33);
  v48 = *(_QWORD *)(v27 + 56);
  v79 = (char *)(v27 + 56);
  v15 = 1 << *(_BYTE *)(v27 + 32);
  swift_bridgeObjectRetain();
  sub_1BDEE1E04(v70);
  v49 = -1;
  if (v15 < 64)
    v49 = ~(-1 << v15);
  v50 = v49 & v48;
  v51 = (uint64_t)v73 + *(_QWORD *)(*v73 + 136);
  v77 = OBJC_IVAR___CRContext_assetManager;
  swift_beginAccess();
  v52 = 0;
  v81 = (unint64_t)(v15 + 63) >> 6;
  v76 = v27;
  while (1)
  {
    while (v50)
    {
      v53 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      v54 = v53 | (v52 << 6);
      if (*(_QWORD *)(v51 + 24))
        goto LABEL_33;
    }
    if (__OFADD__(v52++, 1))
    {
      __break(1u);
LABEL_47:
      swift_once();
      goto LABEL_7;
    }
    if (v52 >= v81)
    {
      v23 = v75;
      v57 = v74;
LABEL_42:
      v64 = (uint64_t)v80;
      swift_release();
      swift_beginAccess();
      if (!*(_QWORD *)(v51 + 24))
      {
        sub_1BDD9C3E0(v64, type metadata accessor for Peer_Message);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v23, v69);
        return swift_endAccess();
      }
      sub_1BDED9AB0(v51, (uint64_t)&v85);
      swift_endAccess();
      v65 = v89;
      __swift_project_boxed_opaque_existential_1(&v85, v88);
      v66 = sub_1BDEDDF1C();
      v68 = v67;
      ((void (*)(void))v65[1])();
      sub_1BDDB796C(v66, v68);
      v63 = v64;
LABEL_44:
      sub_1BDD9C3E0(v63, type metadata accessor for Peer_Message);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v69);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    }
    v56 = *(_QWORD *)&v79[8 * v52];
    v23 = v75;
    v57 = v74;
    if (!v56)
      break;
LABEL_32:
    v50 = (v56 - 1) & v56;
    v54 = __clz(__rbit64(v56)) + (v52 << 6);
    if (*(_QWORD *)(v51 + 24))
    {
LABEL_33:
      v59 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v54);
      v25 = *v59;
      v26 = (id)v59[1];
      v15 = v51;
      sub_1BDED9AB0(v51, (uint64_t)&v85);
      v83 = 0;
      v60 = v88;
      v61 = v89;
      v82 = __swift_project_boxed_opaque_existential_1(&v85, v88);
      sub_1BDDB6CA4(v25, (unint64_t)v26);
      swift_retain();
      sub_1BE108BC8(v25, (unint64_t)v26, v84);
      swift_release();
      v62 = v83;
      v92 = v84[0];
      ((void (*)(uint64_t *, uint64_t, _QWORD *))v61[2])(&v92, v60, v61);
      v20 = v62;
      if (v62)
      {
        sub_1BDDB796C(v25, (unint64_t)v26);
        swift_release();
        swift_release();
        v63 = (uint64_t)v80;
        goto LABEL_44;
      }
      swift_release();
      sub_1BDDB796C(v25, (unint64_t)v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      v27 = v76;
    }
  }
  v58 = v52 + 1;
  if (v52 + 1 >= v81)
    goto LABEL_42;
  v56 = *(_QWORD *)&v79[8 * v58];
  if (v56)
    goto LABEL_31;
  v58 = v52 + 2;
  if (v52 + 2 >= v81)
    goto LABEL_42;
  v56 = *(_QWORD *)&v79[8 * v58];
  if (v56)
    goto LABEL_31;
  v58 = v52 + 3;
  if (v52 + 3 >= v81)
    goto LABEL_42;
  v56 = *(_QWORD *)&v79[8 * v58];
  if (v56)
  {
LABEL_31:
    v52 = v58;
    goto LABEL_32;
  }
  while (1)
  {
    v52 = v58 + 1;
    if (__OFADD__(v58, 1))
      break;
    if (v52 >= v81)
      goto LABEL_42;
    v56 = *(_QWORD *)&v79[8 * v52];
    ++v58;
    if (v56)
      goto LABEL_32;
  }
  __break(1u);
LABEL_49:
  swift_once();
LABEL_14:
  v43 = sub_1BE1B23C0();
  __swift_project_value_buffer(v43, (uint64_t)qword_1EF549348);
  v44 = sub_1BE1B23A8();
  v45 = sub_1BE1B2DC8();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = v20;
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_1BDD82000, v44, v45, "No delta to send", v47, 2u);
    MEMORY[0x1C3B7E068](v47, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v23, v46);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v23, v20);
  }
}

uint64_t sub_1BDEDE994()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  v2 = (_QWORD *)*v0;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v2[10];
  v43 = v2[11];
  v44 = v6;
  v8 = type metadata accessor for Capsule(255, v6, *(_QWORD *)(v43 + 16), v7);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v39 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v11);
  v42 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v39 - v17;
  v19 = (char *)v1 + v2[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v19, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v39 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v39(v18, v13, v8);
  if (qword_1EF52BE90 != -1)
    swift_once();
  v40 = v5;
  v21 = sub_1BE1B23C0();
  __swift_project_value_buffer(v21, (uint64_t)qword_1EF549348);
  v22 = sub_1BE1B23A8();
  v23 = sub_1BE1B2DC8();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1BDD82000, v22, v23, "Publish changes", v24, 2u);
    MEMORY[0x1C3B7E068](v24, -1, -1);
  }

  swift_beginAccess();
  v41 = v1;
  v25 = v1[2];
  v27 = type metadata accessor for CRMulticastSyncManagerSubscription(0, v44, v43, v26);
  v28 = swift_bridgeObjectRetain();
  if (MEMORY[0x1C3B7C928](v28, v27))
  {
    v29 = 4;
    do
    {
      v30 = v29 - 4;
      v31 = sub_1BE1B29FC();
      sub_1BE1B29A8();
      if ((v31 & 1) != 0)
      {
        swift_retain();
        v32 = v29 - 3;
        if (__OFADD__(v30, 1))
          goto LABEL_15;
      }
      else
      {
        sub_1BE1B30BC();
        v32 = v29 - 3;
        if (__OFADD__(v30, 1))
        {
LABEL_15:
          __break(1u);
          break;
        }
      }
      sub_1BE1B2474();
      swift_release();
      ++v29;
    }
    while (v32 != MEMORY[0x1C3B7C928](v25, v27));
  }
  swift_bridgeObjectRelease();
  v33 = sub_1BE1B2ABC();
  v34 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v40, 1, 1, v33);
  v35 = v42;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v42, v18, v8);
  v36 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v37 = (char *)swift_allocObject();
  *((_QWORD *)v37 + 2) = 0;
  *((_QWORD *)v37 + 3) = 0;
  v38 = v43;
  *((_QWORD *)v37 + 4) = v44;
  *((_QWORD *)v37 + 5) = v38;
  *((_QWORD *)v37 + 6) = v41;
  v39(&v37[v36], v35, v8);
  swift_retain();
  sub_1BE193A0C(v34, (uint64_t)&unk_1EF52D918, (uint64_t)v37);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v8);
}

uint64_t sub_1BDEDED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1BDEDED90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 200));
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDEDEDE8()
{
  uint64_t v0;

  sub_1BDDCFC00(*(_QWORD *)(v0 + 24));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CRMulticastSyncManager.getModel()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Capsule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 88) + 16), a4);
  sub_1BE1B2EE8();
  return sub_1BE1B2E40();
}

uint64_t sub_1BDEDEE9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = (uint64_t)a1 + *(_QWORD *)(*a1 + 112);
  swift_beginAccess();
  v8 = type metadata accessor for Capsule(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16), v7);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    Capsule.finalizeTimestamps(_:)(a2, v8);
  swift_endAccess();
  v9 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a3, v6, v9);
}

uint64_t sub_1BDEDEF64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDEDEE9C(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t CRMulticastSyncManager.sync(_:sendDelta:)(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE v26[4];
  int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v3 = v2;
  v27 = a2;
  v5 = (_QWORD *)*v2;
  v30 = sub_1BE1B248C();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v29 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1BE1B24BC();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v5[10];
  v11 = v5[11];
  v13 = type metadata accessor for Capsule(0, v10, *(_QWORD *)(v11 + 16), v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v17 = &v26[-v16];
  v28 = *(_QWORD *)((char *)v3 + v5[16]);
  v18 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  v19 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v20 = v19 + v15;
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = v10;
  *((_QWORD *)v21 + 3) = v11;
  *((_QWORD *)v21 + 4) = v18;
  (*(void (**)(char *, _BYTE *, uint64_t))(v14 + 32))(&v21[v19], v17, v13);
  v21[v20] = v27;
  aBlock[4] = sub_1BDEDF570;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_10;
  v22 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v34 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v24 = v29;
  v23 = v30;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v9, v24, v22);
  _Block_release(v22);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v24, v23);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v9, v32);
  swift_release();
  return swift_release();
}

uint64_t sub_1BDEDF238(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  int v34;

  v31 = *(_QWORD *)(a5 + 16);
  v8 = type metadata accessor for Capsule(255, a4, v31, a4);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v28 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v28 - v17;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v29 = a4;
    v30 = a2;
    v34 = a3;
    v20 = result + *(_QWORD *)(*(_QWORD *)result + 112);
    swift_beginAccess();
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v33 = v18;
    v21(v18, v20, v9);
    v21(v16, v20, v9);
    v22 = *(_QWORD *)(v8 - 8);
    v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
    v24 = v23(v16, 1, v8);
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v16, v9);
    if (v24 == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v13, v30, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v8);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v20, v13, v9);
    }
    else
    {
      swift_beginAccess();
      if (!v23((char *)v20, 1, v8))
        Capsule.merge<A>(_:)(v30, v8, v29, v31);
    }
    swift_endAccess();
    v25 = (uint64_t)v33;
    sub_1BDEDF5D0((uint64_t)v33, v34 & 1, v26, v27);
    swift_release();
    return ((uint64_t (*)(uint64_t, uint64_t))v32)(v25, v9);
  }
  return result;
}

uint64_t sub_1BDEDF490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_release();
  v8 = (uint64_t *)(v4 + ((v7 + 40) & ~v7));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1BDDB796C(*v8, v9);
  v10 = (char *)v8 + *(int *)(v6 + 36);
  v11 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDEDF570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = v4[2];
  v6 = v4[3];
  v7 = *(_QWORD *)(type metadata accessor for Capsule(0, v5, *(_QWORD *)(v6 + 16), a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_1BDEDF238(v4[4], (uint64_t)v4 + v8, *((unsigned __int8 *)v4 + v8 + *(_QWORD *)(v7 + 64)), v5, v6);
}

uint64_t sub_1BDEDF5D0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);

  v5 = v4;
  v8 = *v4;
  v9 = type metadata accessor for Capsule(255, v8[10], *(_QWORD *)(v8[11] + 16), a4);
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v32 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12);
  v34 = (char *)&v32 - v16;
  v17 = (char *)v5 + v8[14];
  swift_beginAccess();
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (!v36(v17, 1, v9))
    Capsule.finalizeTimestamps(_:)(*(uint64_t *)((char *)v5 + (*v5)[15]), v9);
  swift_endAccess();
  if (qword_1EF52BE90 != -1)
    swift_once();
  v18 = sub_1BE1B23C0();
  v35 = __swift_project_value_buffer(v18, (uint64_t)qword_1EF549348);
  v19 = sub_1BE1B23A8();
  v20 = sub_1BE1B2DC8();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v33 = v9;
    v22 = v14;
    v23 = v15;
    v24 = a2;
    v25 = v11;
    v26 = v10;
    v27 = a1;
    v28 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1BDD82000, v19, v20, "New state", v21, 2u);
    v29 = v28;
    a1 = v27;
    v10 = v26;
    v11 = v25;
    a2 = v24;
    v15 = v23;
    v14 = v22;
    v9 = v33;
    MEMORY[0x1C3B7E068](v29, -1, -1);
  }

  result = sub_1BDEDAFF4(0, 0, 1818326639, 0xE400000000000000, 0x663D656C7974732CLL, 0xED000064656C6C69);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
    if (v36(v14, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      return sub_1BDEDDA90();
    }
    else
    {
      v31 = v34;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v34, v14, v9);
      sub_1BDEDE064(v31);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v31, v9);
    }
  }
  return result;
}

uint64_t CRMulticastSyncManager.merge<A>(_:sendDelta:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v27 = a3;
  v28 = a4;
  v30 = a2;
  v29 = a1;
  v7 = (_QWORD *)*v4;
  v32 = sub_1BE1B248C();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B24BC();
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Capsule(0, a3, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v27 - v17;
  v31 = *(_QWORD *)((char *)v4 + v7[16]);
  v19 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v29, v14);
  v20 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v21 = (char *)swift_allocObject();
  v22 = v27;
  *((_QWORD *)v21 + 2) = v7[10];
  *((_QWORD *)v21 + 3) = v22;
  v23 = v28;
  *((_QWORD *)v21 + 4) = v7[11];
  *((_QWORD *)v21 + 5) = v23;
  *((_QWORD *)v21 + 6) = v19;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v21[v20], v18, v14);
  v21[v20 + v16] = v30;
  aBlock[4] = sub_1BDEDFFAC;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_19_0;
  v24 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v36 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v25 = v32;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v12, v9, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  swift_release();
  return swift_release();
}

uint64_t sub_1BDEDFCE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v11 = type metadata accessor for Capsule(255, a4, *(_QWORD *)(a6 + 16), a4);
  v12 = sub_1BE1B2EE8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v27 - v17;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v27 = a2;
    v28 = a5;
    v29 = a7;
    v20 = result + *(_QWORD *)(*(_QWORD *)result + 112);
    swift_beginAccess();
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v21(v18, v20, v12);
    v21(v16, v20, v12);
    v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    if (v22((uint64_t)v16, 1, v11) == 1)
    {
      swift_release();
      v23 = *(void (**)(char *, uint64_t))(v13 + 8);
      v23(v16, v12);
      return ((uint64_t (*)(char *, uint64_t))v23)(v18, v12);
    }
    else
    {
      v24 = *(void (**)(char *, uint64_t))(v13 + 8);
      v24(v16, v12);
      swift_beginAccess();
      if (!v22(v20, 1, v11))
        Capsule.merge<A>(_:)(v27, v11, v28, v29);
      swift_endAccess();
      sub_1BDEDF5D0((uint64_t)v18, a3 & 1, v25, v26);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v24)(v18, v12);
    }
  }
  return result;
}

uint64_t sub_1BDEDFECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 24);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(v4 + 40), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_release();
  v8 = (uint64_t *)(v4 + ((v7 + 56) & ~v7));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1BDDB796C(*v8, v9);
  v10 = (char *)v8 + *(int *)(v6 + 36);
  v11 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDEDFFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for Capsule(0, v6, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_1BDEDFCE4(v4[6], (uint64_t)v4 + v10, *((_BYTE *)v4 + v10 + *(_QWORD *)(v9 + 64)), v5, v6, v7, v8);
}

uint64_t CRMulticastSyncManager.sync(_:)(uint64_t a1)
{
  return CRMulticastSyncManager.sync(_:sendDelta:)(a1, 1);
}

uint64_t *CRMulticastSyncManager.__allocating_init(_:sendHeartbeats:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v7 = type metadata accessor for Capsule(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16), a4);
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - v10;
  *(_QWORD *)&v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v12 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)&v20);
  sub_1BDD86E30((uint64_t)&v20, qword_1ED6F3DD0);
  v13 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  v14 = 0x3FF0000000000000;
  if ((a2 & 1) == 0)
    v14 = 0;
  v18 = v14;
  v19 = (a2 & 1) == 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v15 = sub_1BDEE16C8(v12, (uint64_t)v11, &v18, 256, 0, 0xF000000000000000, (uint64_t *)&v20);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v7);
  return v15;
}

uint64_t *CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:catchup:)(void *a1, uint64_t a2, __int16 a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  _OWORD v18[4];

  v11 = *(_BYTE *)(a6 + 8);
  v16 = *(_QWORD *)a6;
  v17 = v11;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1BDEE16C8(a1, a2, &v16, a3 & 0x1FF, a4, a5, (uint64_t *)v18);
  sub_1BDD9CC0C(a4, a5);

  type metadata accessor for Capsule(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 16), v13);
  v14 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
  return v12;
}

uint64_t *CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:sendHeartbeats:)(void *a1, _BYTE *a2, __int16 a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t *v18;
  void (*v19)(_BYTE *, uint64_t);
  _BYTE v21[16];
  uint64_t v22;
  BOOL v23;
  _OWORD v24[4];

  type metadata accessor for Capsule(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 16), a4);
  v13 = sub_1BE1B2EE8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = &v21[-v15];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(&v21[-v15], a2, v13);
  v17 = 0x3FF0000000000000;
  if ((a6 & 1) == 0)
    v17 = 0;
  v22 = v17;
  v23 = (a6 & 1) == 0;
  memset(v24, 0, sizeof(v24));
  v18 = sub_1BDEE16C8(a1, (uint64_t)v16, &v22, a3 & 0x1FF, a4, a5, (uint64_t *)v24);
  sub_1BDD9CC0C(a4, a5);
  v19 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v19(v16, v13);

  v19(a2, v13);
  return v18;
}

uint64_t *CRMulticastSyncManager.__allocating_init(_:model:sendHeartbeats:)(void *a1, _BYTE *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  void (*v14)(_BYTE *, uint64_t);
  _BYTE v16[16];
  uint64_t v17;
  BOOL v18;
  _OWORD v19[4];

  type metadata accessor for Capsule(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16), a4);
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v16[-v10];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(&v16[-v10], a2, v8);
  v12 = 0x3FF0000000000000;
  if ((a3 & 1) == 0)
    v12 = 0;
  v17 = v12;
  v18 = (a3 & 1) == 0;
  memset(v19, 0, sizeof(v19));
  v13 = sub_1BDEE16C8(a1, (uint64_t)v11, &v17, 256, 0, 0xF000000000000000, (uint64_t *)v19);
  v14 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v14(v11, v8);

  v14(a2, v8);
  return v13;
}

uint64_t *CRMulticastSyncManager.__allocating_init(_:model:sendHeartbeats:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BYTE v17[16];
  uint64_t v18;
  BOOL v19;
  _OWORD v20[4];

  v8 = type metadata accessor for Capsule(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16), a4);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v17[-v11];
  v13 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v17[-v11], a2, v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v8);
  v14 = 0x3FF0000000000000;
  if ((a3 & 1) == 0)
    v14 = 0;
  v18 = v14;
  v19 = (a3 & 1) == 0;
  memset(v20, 0, sizeof(v20));
  v15 = sub_1BDEE16C8(a1, (uint64_t)v12, &v18, 256, 0, 0xF000000000000000, (uint64_t *)v20);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v8);
  return v15;
}

uint64_t CRMulticastSyncManager.updates.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200)))
  {
    swift_retain();
    sub_1BDFAC7A8();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *CRMulticastSyncManager.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + qword_1EF549370;
  v3 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  type metadata accessor for Capsule(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(*(_QWORD *)(v1 + 88) + 16), v5);
  v6 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);

  sub_1BDD86E30((uint64_t)v0 + *(_QWORD *)(*v0 + 136), qword_1EF52D6B8);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD9CC0C(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176)), *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 176) + 8));
  sub_1BDEE1750(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 184)), *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 184) + 8));
  swift_release();
  swift_release();
  return v0;
}

uint64_t CRMulticastSyncManager.__deallocating_deinit()
{
  return sub_1BDD93094((void (*)(void))CRMulticastSyncManager.deinit);
}

uint64_t CRMulticastSyncManager.receive(subscription:)(_QWORD *a1)
{
  return sub_1BDE345E0(a1);
}

uint64_t CRMulticastSyncManager.receive(_:)(uint64_t a1)
{
  CRMulticastSyncManager.sync(_:sendDelta:)(a1, 1);
  return sub_1BE1B23FC();
}

uint64_t sub_1BDEE0780(uint64_t a1)
{
  return CRMulticastSyncManager.receive(_:)(a1);
}

void sub_1BDEE07A0(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1BDEE080C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  sub_1BDED7D78();
  result = sub_1BDD9CC0C(v3, v2);
  *v4 = v6;
  v4[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

uint64_t sub_1BDEE0A74(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BE1B1E14();
  v9 = *a1;
  if (a1[1] < (int)v9)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = sub_1BE1B1C70();
  if (result)
  {
    result = sub_1BE1B1C94();
    if (!__OFSUB__(v9, result))
    {
      sub_1BE1B1C88();
      sub_1BDED7D78();
      return sub_1BDD9CC0C(a4, a5);
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1BDEE0B5C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDEE0BC4()
{
  return sub_1BE1B1E44();
}

uint64_t sub_1BDEE0D58(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1BE1B1C70();
  if (!result || (result = sub_1BE1B1C94(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1BE1B1C88();
      return sub_1BE1B1E44();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDEE0DFC(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x1C3B7E080](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_1BDEE0DFC(v6, a2, a3);
  return result;
}

uint64_t sub_1BDEE0EA4(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_1BE1B1CAC();
      swift_allocObject();
      sub_1BE1B1C7C();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1BE1B1E2C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t *sub_1BDEE0F40(id a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  _BYTE *v47;
  char v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD **v57;
  _QWORD *v58;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v60;
  char *v61;
  _QWORD *v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;

  v8 = v7;
  v83 = a2;
  v84 = a7;
  v86 = a5;
  v87 = a6;
  v85 = a4;
  v82 = a1;
  v10 = *(_QWORD *)(*v8 + 80);
  v11 = *(_QWORD *)(*v8 + 88);
  v88 = *v8;
  *(_QWORD *)&v89 = v10;
  v12 = *(_QWORD *)(v11 + 16);
  v78 = v11;
  v13 = type metadata accessor for Capsule(0, v10, v12, a4);
  v14 = *(_QWORD *)(v13 - 8);
  v73 = v13;
  v15 = v14;
  v79 = v14;
  MEMORY[0x1E0C80A78](v13);
  v68 = (char *)&v67 - v16;
  v17 = sub_1BE1B2E28();
  v76 = *(_QWORD *)(v17 - 8);
  v77 = v17;
  MEMORY[0x1E0C80A78](v17);
  v75 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v74);
  v71 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v20);
  v21 = sub_1BE1B1F58();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = *a3;
  v80 = *((unsigned __int8 *)a3 + 8);
  type metadata accessor for CRMulticastSyncManagerSubscription(0, v10, v11, v25);
  v8[2] = sub_1BE1B2588();
  sub_1BE1B1F4C();
  v72 = (char *)v8 + *(_QWORD *)(*v8 + 112);
  (*(void (**)(void))(v15 + 56))();
  v70 = *(_QWORD *)(*v8 + 128);
  v69 = sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
  *(_QWORD *)&v90 = 0;
  *((_QWORD *)&v90 + 1) = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v90 = 0xD000000000000010;
  *((_QWORD *)&v90 + 1) = 0x80000001BE1CE870;
  sub_1BE1B1F4C();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1BE1B61C0;
  v27 = sub_1BE1B1F40();
  v28 = MEMORY[0x1E0DEDE70];
  v29 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v26 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v26 + 64) = v29;
  *(_BYTE *)(v26 + 32) = v27;
  v30 = sub_1BE1B1F40();
  *(_QWORD *)(v26 + 96) = v28;
  *(_QWORD *)(v26 + 104) = v29;
  *(_BYTE *)(v26 + 72) = BYTE1(v30);
  sub_1BE1B27EC();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B24B0();
  v31 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v90 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C(qword_1ED6F4480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, *MEMORY[0x1E0DEF8D0], v77);
  *(uint64_t *)((char *)v8 + v70) = sub_1BE1B2E58();
  v32 = (char *)v8 + *(_QWORD *)(*v8 + 136);
  *((_QWORD *)v32 + 4) = 0;
  *(_OWORD *)v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 152)) = 0;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 160)) = v31;
  v33 = (char *)v8 + *(_QWORD *)(*v8 + 184);
  *(_OWORD *)v33 = 0u;
  *((_OWORD *)v33 + 1) = 0u;
  *((_OWORD *)v33 + 2) = 0u;
  *((_OWORD *)v33 + 3) = 0u;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 192)) = 0;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 200)) = 0;
  v34 = v82;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 120)) = (uint64_t)v82;
  v35 = v72;
  swift_beginAccess();
  v36 = v73;
  v37 = sub_1BE1B2EE8();
  v38 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 24);
  v82 = v34;
  v38(v35, v83, v37);
  swift_endAccess();
  v39 = *(_QWORD *)v33;
  v40 = *((_QWORD *)v33 + 1);
  v83 = *((_QWORD *)v33 + 2);
  type metadata accessor for CRMulticastSyncManager.DebugInfo(255, v89, v78, v41);
  v42 = sub_1BE1B2EE8();
  v43 = v33;
  v44 = v84;
  (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v43, v84, v42);
  sub_1BDEE1D90(v44);
  v45 = v79;
  sub_1BDEE1750(v39, v40);
  v46 = (char *)v8 + *(_QWORD *)(*v8 + 144);
  *(_QWORD *)v46 = v81;
  v46[8] = v80;
  v47 = (char *)v8 + *(_QWORD *)(*v8 + 168);
  v48 = BYTE1(v85);
  *v47 = v85;
  v47[1] = v48 & 1;
  v49 = (uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 176));
  v51 = v86;
  v50 = v87;
  *v49 = v86;
  v49[1] = v50;
  v52 = (char *)v8 + *(_QWORD *)(*v8 + 112);
  swift_beginAccess();
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v38) = v53(v52, 1, v36);
  sub_1BDD9C9A0(v51, v50);
  if (!(_DWORD)v38)
    Capsule.finalizeTimestamps(_:)((uint64_t)v82, v36);
  swift_endAccess();
  v54 = v88;
  v55 = MEMORY[0x1C3B7DF54](&unk_1BE1BAFF4, v88);
  type metadata accessor for AsyncUpdatesActor(0, v89, v54, v55);
  swift_retain();
  v56 = sub_1BDDCFB58();
  swift_release();
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 200)) = (uint64_t)v56;
  swift_release();
  v57 = (_QWORD **)((char *)v8 + *(_QWORD *)(*v8 + 160));
  swift_beginAccess();
  v58 = *v57;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v57 = v58;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v58[3] <= 3uLL)
  {
    if (v58[2] <= 2uLL)
      v60 = 2;
    else
      v60 = v58[2];
    v58 = sub_1BDE07078(isUniquelyReferenced_nonNull_native, v60, 0, v58);
  }
  *v57 = v58;
  swift_endAccess();
  if (!v53(v52, 1, v36))
  {
    v61 = v68;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v68, v52, v36);
    Capsule.version.getter(v36, &v90);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v61, v36);
    v89 = v90;
    swift_beginAccess();
    v62 = *v57;
    v63 = swift_isUniquelyReferenced_nonNull_native();
    *v57 = v62;
    if ((v63 & 1) == 0)
    {
      v62 = sub_1BDE07078(0, v62[2] + 1, 1, v62);
      *v57 = v62;
    }
    v65 = v62[2];
    v64 = v62[3];
    if (v65 >= v64 >> 1)
    {
      v62 = sub_1BDE07078((_QWORD *)(v64 > 1), v65 + 1, 1, v62);
      *v57 = v62;
    }
    v62[2] = v65 + 1;
    *(_OWORD *)&v62[2 * v65 + 4] = v89;
    swift_endAccess();
  }
  return v8;
}

uint64_t *sub_1BDEE16C8(void *a1, uint64_t a2, uint64_t *a3, __int16 a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  swift_allocObject();
  return sub_1BDEE0F40(a1, a2, a3, a4 & 0x1FF, a5, a6, a7);
}

uint64_t sub_1BDEE1750(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1BDEE178C()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDEE179C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Capsule(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  result = sub_1BE1B242C();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRMulticastSyncManagerSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRMulticastSyncManagerSubscription);
}

uint64_t dispatch thunk of CRMulticastLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CRMulticastLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for MulticastLogger()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for CRMulticastSyncManagerCatchupBehavior()
{
  return &type metadata for CRMulticastSyncManagerCatchupBehavior;
}

uint64_t sub_1BDEE18AC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = sub_1BE1B1F58();
  if (v4 <= 0x3F)
  {
    type metadata accessor for Capsule(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16), v3);
    result = sub_1BE1B2EE8();
    if (v5 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for CRMulticastSyncManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRMulticastSyncManager);
}

uint64_t method lookup function for CRMulticastSyncManager()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BDEE19C0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1BDEE19F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_1BDEE1A4C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1BDEE1AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_1BDEE1B60(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BDEE1BA8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CRMulticastSyncManager.DebugInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRMulticastSyncManager.DebugInfo);
}

void sub_1BDEE1C04()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDEE1C14()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDEE1C24()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BDEE1C48()
{
  uint64_t v0;

  return sub_1BE15E43C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1BDEE1C50()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_1BDEE1CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = v0 + ((v3 + 40) & ~v3);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  return sub_1BE15E4F8(v4, v1, v5, v2);
}

uint64_t sub_1BDEE1D14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1BE15E758(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BDEE1D1C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1BDEE1D40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BE15E794((_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1BDEE1D48()
{
  uint64_t v0;

  return sub_1BE15E838((_QWORD *)(v0 + 16));
}

uint64_t sub_1BDEE1D50()
{
  uint64_t v0;

  return sub_1BE15E4BC((_QWORD *)(v0 + 16));
}

uint64_t sub_1BDEE1D58()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BDEE1D84()
{
  uint64_t *v0;

  return sub_1BDED77F0(v0[2], v0[3], v0[4]);
}

uint64_t *sub_1BDEE1D90(uint64_t *a1)
{
  sub_1BDEE1DC8(*a1, a1[1]);
  return a1;
}

uint64_t sub_1BDEE1DC8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1BDEE1E04(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BDEE1E7C(double *a1@<X8>)
{
  sub_1BDEE2098(a1);
}

uint64_t sub_1BDEE1E90(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDEE1EB8()
{
  uint64_t v0;

  swift_release();
  sub_1BDDB796C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BDEE1EEC()
{
  uint64_t *v0;

  return sub_1BDEDBFE0(v0[4], v0[5], v0[6], v0[7], v0[8]);
}

uint64_t sub_1BDEE1F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 16), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  v8 = (uint64_t *)(v4 + ((v7 + 56) & ~v7));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1BDDB796C(*v8, v9);
  v10 = (char *)v8 + *(int *)(v6 + 36);
  v11 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDEE1FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule(0, v4[4], *(_QWORD *)(v4[5] + 16), a4) - 8)
                          + 80);
  v7 = v4[6];
  v8 = (char *)v4 + ((v6 + 56) & ~v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_1BDE28004;
  v9[2] = v7;
  v9[3] = v8;
  return swift_task_switch();
}

uint64_t sub_1BDEE2068()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDEE208C()
{
  return sub_1BDEDD848();
}

void sub_1BDEE2098(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(double *)(v1 + 24) + 1.0;
  if (v3 <= *(double *)(v2 + 40) + 0.1)
    v3 = *(double *)(v2 + 40) + 0.1;
  *(double *)(v2 + 40) = v3;
  *a1 = v3;
}

uint64_t sub_1BDEE20CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BDEDAD80(v4[4], v4[2], v4[3], a4);
}

uint64_t *sub_1BDEE2120(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  const void *v14;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v13 = (void *)(((unint64_t)a1 + v7 + 16) & ~v7);
    v14 = (const void *)(((unint64_t)a2 + v7 + 16) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_1BDEE2228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_OWORD *sub_1BDEE2294(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_QWORD *sub_1BDEE2350(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
  return a1;
}

_OWORD *sub_1BDEE2460(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_OWORD *sub_1BDEE251C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
  return a1;
}

uint64_t sub_1BDEE2624(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v7 + ((v8 + 16) & ~v8);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_7;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_14;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_21;
LABEL_7:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_21;
LABEL_14:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_14;
    }
  }
LABEL_21:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v8 + 16) & ~v8);
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void sub_1BDEE277C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_16:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X13 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_16;
  goto LABEL_23;
}

void sub_1BDEE2940()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BDEE2948()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for RLE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RLE);
}

uint64_t sub_1BDEE2978(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_1BE1B2EE8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - v7;
  v9 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, &v1[*(int *)(a1 + 36)], v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v12 = *((_QWORD *)v1 + 1);
    v16[0] = *(_QWORD *)v1;
    v17 = v12;
    v18 = 0;
    v19 = 0xE000000000000000;
    sub_1BE1B3164();
    sub_1BE1B284C();
    sub_1BE1B3164();
    sub_1BE1B284C();
    return v18;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
    v18 = 0;
    v19 = 0xE000000000000000;
    v14 = *(_QWORD *)v1;
    v16[2] = *((_QWORD *)v1 + 1);
    v17 = v14;
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    sub_1BE1B3164();
    sub_1BE1B284C();
    sub_1BE1B3164();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    sub_1BE1B347C();
    v13 = v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v3);
  }
  return v13;
}

BOOL sub_1BDEE2BBC(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _BOOL8 result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v47 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B2EE8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v14 = (char *)&v42 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v42 - v18;
  MEMORY[0x1E0C80A78](v17);
  v25 = (char *)&v42 - v24;
  result = 0;
  if (*a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1))
  {
    v46 = v23;
    v43 = v9;
    v44 = v22;
    v27 = v21;
    v28 = type metadata accessor for Run(0, a3, a4, v20);
    v42 = a4;
    v29 = v28;
    v30 = (char *)a1 + *(int *)(v28 + 36);
    v31 = v15;
    v32 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v32(v25, v30, v10);
    v32(v19, &a2[*(int *)(v29 + 36)], v10);
    v45 = v27;
    v33 = &v14[*(int *)(v27 + 48)];
    v32(v14, v25, v10);
    v32(v33, v19, v10);
    v34 = v47;
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    if (v35(v14, 1, a3) == 1)
    {
      v36 = *(void (**)(char *, uint64_t))(v31 + 8);
      v36(v19, v10);
      v36(v25, v10);
      if (v35(v33, 1, a3) == 1)
      {
        v36(v14, v10);
        return 1;
      }
    }
    else
    {
      v32(v46, v14, v10);
      if (v35(v33, 1, a3) != 1)
      {
        v38 = v43;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v43, v33, a3);
        v39 = v46;
        LODWORD(v45) = sub_1BE1B2798();
        v40 = *(void (**)(char *, uint64_t))(v34 + 8);
        v40(v38, a3);
        v41 = *(void (**)(char *, uint64_t))(v31 + 8);
        v41(v19, v10);
        v41(v25, v10);
        v40(v39, a3);
        v41(v14, v10);
        return (v45 & 1) != 0;
      }
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v37(v19, v10);
      v37(v25, v10);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v46, a3);
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v45);
    return 0;
  }
  return result;
}

BOOL sub_1BDEE2EF4(_QWORD *a1, char *a2, uint64_t a3)
{
  return sub_1BDEE2BBC(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1BDEE2F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[2];

  v13 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDEE7C24(a1, (uint64_t)v15);
  v16 = sub_1BE1B1F58();
  v17 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1BDFADD64((uint64_t)v15, a2, v16, a3, (uint64_t)&protocol witness table for UUID, v17, a4, a5, v20);
  result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_OrderedSet);
  if (!v6)
  {
    v19 = v20[1];
    *a6 = v20[0];
    a6[1] = v19;
  }
  return result;
}

void sub_1BDEE301C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v2);
  sub_1BE1B20E4();
  v3 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1ED6F2E18 != -1)
    swift_once();
  *(_QWORD *)(a1 + v3) = qword_1ED6F2E08;
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  swift_retain();
  swift_retain();
  swift_retain();
  type metadata accessor for CROrderedDictionary();
}

void CRArray.copy(renamingReferences:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t v10;

  v4 = *v2;
  v5 = v2[1];
  if (a1)
  {
    v9 = v4;
    v10 = v5;
    v6 = MEMORY[0x1E0C80A78](a1);
    v7 = a2[3];
    v8[2] = a2[2];
    v8[3] = v7;
    v8[4] = a2[4];
    v8[5] = v6;
    CRArray.map<A>(_:)((uint64_t)sub_1BDEE38E8, (uint64_t)v8);
  }
  v9 = v4;
  v10 = v5;
  swift_retain();
  swift_retain();
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a2);
  CRArray.init<A>(_:)();
}

void CRArray.map<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[24];

  v9[3] = a1;
  v9[4] = a2;
  MEMORY[0x1E0C80A78](a1);
  v9[1] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1F58();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9[9] = v5;
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v8 = *v2;
  v7 = v2[1];
  v9[6] = v7;
  v9[7] = v8;
  v9[23] = sub_1BE1B2588();
  v9[10] = v8;
  v9[11] = v7;
  CRArray.count.getter();
}

void sub_1BDEE33E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 - 240) = sub_1BE1B2A5C();
  sub_1BE1B29C0();
  v4 = *(_QWORD *)(v3 - 208);
  *(_QWORD *)(v3 - 128) = *(_QWORD *)(v3 - 200);
  *(_QWORD *)(v3 - 120) = v4;
  v5 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v3 - 176) = v0;
  *(_QWORD *)(v3 - 168) = v1;
  *(_QWORD *)(v3 - 160) = &protocol witness table for UUID;
  *(_QWORD *)(v3 - 152) = v5;
  *(_QWORD *)(v3 - 208) = v6;
  *(_QWORD *)(v3 - 200) = v5;
  *(_QWORD *)(v3 - 144) = v6;
  *(_QWORD *)(v3 - 136) = v7;
  *(_QWORD *)(v3 - 216) = v7;
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE3464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  CROrderedDictionary.makeIterator()(a1, a4, (uint64_t *)(v6 - 112));
  *(_QWORD *)(v6 - 176) = v4;
  *(_QWORD *)(v6 - 168) = v5;
  v7 = *(_QWORD *)(v6 - 200);
  *(_QWORD *)(v6 - 160) = &protocol witness table for UUID;
  *(_QWORD *)(v6 - 152) = v7;
  v8 = *(_QWORD *)(v6 - 216);
  *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 208);
  *(_QWORD *)(v6 - 136) = v8;
  type metadata accessor for CROrderedDictionary.Iterator();
}

uint64_t sub_1BDEE349C(_QWORD *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  CROrderedDictionary.Iterator.next()(a1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(v3 + 48))(v2, 1, *(_QWORD *)(v6 - 184)) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return *(_QWORD *)(v6 - 72);
  }
  else
  {
    v7 = v3;
    v8 = *(int *)(*(_QWORD *)(v6 - 184) + 48);
    v9 = &v2[v8];
    v10 = v1 + v8;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v1, v2, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v10, v9, v5);
    v11 = *(_QWORD *)(v6 - 192);
    (*(void (**)(uint64_t))(v6 - 232))(v10);
    if (!v11)
    {
      *(_QWORD *)(v6 - 192) = 0;
      sub_1BE1B2A20();
      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v1, *(_QWORD *)(v6 - 184));
      JUMPOUT(0x1BDEE3470);
    }
    (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v1, *(_QWORD *)(v6 - 184));
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void CRArray.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v0 = sub_1BE1B1F58();
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  v2 = sub_1BE1B2EE8();
  v3 = MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  CROrderedDictionary.init()();
}

uint64_t sub_1BDEE375C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v10 = *(_QWORD *)(v9 - 144);
  *(_QWORD *)(v9 - 104) = *(_QWORD *)(v9 - 152);
  *(_QWORD *)(v9 - 96) = v10;
  *(_QWORD *)(v9 - 232) = v2;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v9 - 208), v5);
  sub_1BE1B2888();
  *(_QWORD *)(v9 - 224) = v5;
  swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 184) = v4;
  *(_QWORD *)(v9 - 176) = v3;
  sub_1BE1B2F00();
  v11 = *(_QWORD *)(v9 - 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v0, 1, v6) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v8, v0, v6);
    sub_1BE1B1F4C();
    *(_QWORD *)(v9 - 152) = v7;
    *(_QWORD *)(v9 - 144) = v6;
    v12 = *(_QWORD *)(v9 - 200);
    *(_QWORD *)(v9 - 136) = &protocol witness table for UUID;
    *(_QWORD *)(v9 - 128) = v12;
    v13 = *(_QWORD *)(v9 - 160);
    *(_QWORD *)(v9 - 120) = *(_QWORD *)(v9 - 168);
    *(_QWORD *)(v9 - 112) = v13;
    type metadata accessor for CROrderedDictionary();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 232) + 8))(*(_QWORD *)(v9 - 208), *(_QWORD *)(v9 - 224));
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 240) + 8))(*(_QWORD *)(v9 - 184), *(_QWORD *)(v9 - 176));
  v15 = *(_QWORD *)(v9 - 96);
  v16 = *(_QWORD **)(v9 - 216);
  *v16 = *(_QWORD *)(v9 - 104);
  v16[1] = v15;
  return result;
}

uint64_t sub_1BDEE38E8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0[3] + 8) + 24))(v0[5], v0[2]);
}

void CRArray.init(_:)()
{
  CRArray.init()();
}

void sub_1BDEE3950()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v2;
  v1[1] = v3;
}

void CRArray.init()()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  CROrderedDictionary.init()();
}

void sub_1BDEE39E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = v1;
  v0[1] = v2;
}

void CRArray.init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[16];

  v4 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(_BYTE *))(v4 + 16))(&v6[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  CRArray.init<A>(_:)();
}

uint64_t sub_1BDEE3A9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  v7 = *(_QWORD *)(v5 - 88);
  *v3 = *(_QWORD *)(v5 - 96);
  v3[1] = v7;
  return result;
}

void CRArray.append(_:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = sub_1BE1B1F58();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  MEMORY[0x1E0C80A78](v0);
  sub_1BE1B1F4C();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, v1, MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE3B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  CROrderedDictionary.append(value:forKey:)(v1, v2, a1);
}

uint64_t sub_1BDEE3B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

Swift::Void __swiftcall CRArray.remove(at:)(Swift::Int at)
{
  sub_1BDEE4350();
}

void CRArray.merge(_:)()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE3C3C(uint64_t a1)
{
  uint64_t v1;

  CROrderedDictionary.merge(_:)(&v1, a1);
}

void CRArray.visitReferences(_:)()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE3CD0()
{
  CROrderedDictionary.visitReferences(_:)();
}

void CRArray.count.getter()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

id sub_1BDEE3D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CROrderedDictionary.count.getter(a1, a2, a3, a4);
}

void CRArray.array.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[1];
  v5 = *v1;
  v6 = v2;
  v3[1] = *(_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  CRArray.map<A>(_:)((uint64_t)sub_1BDEE3DE0, (uint64_t)v3);
}

uint64_t sub_1BDEE3DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

void CRArray.insert(_:at:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = sub_1BE1B1F58();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  MEMORY[0x1E0C80A78](v0);
  sub_1BE1B1F4C();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, v1, MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE3ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  CROrderedDictionary.insert(value:forKey:at:)(v2, v3, v1, a1);
}

uint64_t sub_1BDEE3EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

Swift::Void __swiftcall CRArray.move(from:to:)(Swift::Int from, Swift::Int to)
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE3F84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  Swift::Int v22;
  Swift::Int v23;

  CROrderedDictionary.move(from:to:)(v23, v22);
}

uint64_t CRArray.index(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v24 = a1;
  v25 = a2;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = sub_1BE1B2EE8();
  v28 = *(_QWORD *)(v33 - 8);
  v10 = MEMORY[0x1E0C80A78](v33);
  v27 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v21 - v12;
  v14 = v3[1];
  v29 = *v3;
  v30 = v14;
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  sub_1BE1B28B8();
  v29 = v31;
  v30 = v32;
  sub_1BE1B3230();
  sub_1BE1B320C();
  v26 = sub_1BE1B3224();
  v16 = v22;
  v15 = v23;
  while (1)
  {
    v17 = v27;
    sub_1BE1B3218();
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v13, v17, v33);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)break;
    v18 = *(_QWORD *)v13;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v7, &v13[*(int *)(TupleTypeMetadata2 + 48)], v15);
    v19 = v24(v7);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
    if (v4 || (v19 & 1) != 0)
      goto LABEL_7;
  }
  v18 = 0;
LABEL_7:
  swift_release();
  swift_bridgeObjectRelease();
  return v18;
}

void CRArray.first.getter()
{
  CRArray.count.getter();
}

void CRArray.subscript.getter()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE430C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  CROrderedDictionary.subscript.getter(v1, a1, v2);
}

Swift::Bool __swiftcall CRArray.needToFinalizeTimestamps()()
{
  sub_1BDEE4BCC();
}

void CRArray.finalizeTimestamps(_:)()
{
  sub_1BDEE4350();
}

void sub_1BDEE4350()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDEE43C4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, a1);
}

void CRArray.actionUndoingDifference(from:)()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE4468()
{
  CROrderedDictionary.actionUndoingDifference(from:)();
}

void CRArray.apply(_:)()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE4548(uint64_t a1)
{
  uint64_t v1;

  CROrderedDictionary.apply(_:)(&v1, a1);
}

void CRArray.hasDelta(from:)()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDEE45E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  return CROrderedDictionary.hasDelta(from:)(&v5, a1, a3, a4) & 1;
}

uint64_t CRArray.delta(_:from:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t CRArray.canMerge(delta:)()
{
  return 1;
}

void sub_1BDEE4640()
{
  CRArray.merge(delta:)();
}

uint64_t sub_1BDEE464C()
{
  return 1;
}

void CRArray.merge(delta:)()
{
  CRArray.merge(_:)();
}

uint64_t sub_1BDEE4674()
{
  return 1;
}

void CRArray.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v16 = a1;
  v15 = a2;
  v17 = a4;
  v14 = sub_1BE1B206C();
  v13[1] = *(_QWORD *)(v14 - 8);
  v5 = MEMORY[0x1E0C80A78](v14);
  v13[3] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v13[2] = (char *)v13 - v7;
  v8 = sub_1BE1B1F58();
  v9 = a3[2];
  v10 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v11 = a3[3];
  v12 = a3[4];
  v18 = v8;
  v19 = v9;
  v20 = &protocol witness table for UUID;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  type metadata accessor for CROrderedDictionary.ObservableDifference();
}

void sub_1BDEE4770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1BE1B2EE8();
  *(_QWORD *)(v5 - 240) = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v8 = *(uint64_t **)(v5 - 192);
  v9 = *(uint64_t **)(v5 - 184);
  v10 = *v8;
  v11 = v8[1];
  v12 = *v9;
  v13 = v9[1];
  *(_QWORD *)(v5 - 152) = v12;
  *(_QWORD *)(v5 - 144) = v13;
  *(_QWORD *)(v5 - 168) = v10;
  *(_QWORD *)(v5 - 160) = v11;
  *(_QWORD *)(v5 - 136) = v0;
  *(_QWORD *)(v5 - 128) = v4;
  *(_QWORD *)(v5 - 120) = &protocol witness table for UUID;
  *(_QWORD *)(v5 - 112) = v2;
  *(_QWORD *)(v5 - 192) = v3;
  *(_QWORD *)(v5 - 184) = v1;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 96) = v3;
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDEE480C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  CROrderedDictionary.observableDifference(from:with:)((uint64_t *)(v7 - 168), *(_QWORD *)(v7 - 200), a1, v5);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v3 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD *, _QWORD))(v2 + 8))(v5, *(_QWORD *)(v7 - 240));
    v8 = type metadata accessor for CRArray.ObservableDifference(0, v4, *(_QWORD *)(v7 - 184), *(_QWORD *)(v7 - 192));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(*(_QWORD *)(v7 - 176), 1, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, _QWORD *, int *))(v3 + 32))(v1, v5, v6);
    v10 = *v1;
    v11 = *(_QWORD *)(v7 - 224);
    v12 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 232) + 32);
    v13 = *(_QWORD *)(v7 - 208);
    v12(v11, (char *)v1 + v6[17], v13);
    v14 = *(uint64_t *)((char *)v1 + v6[18]);
    v15 = (char *)v1 + v6[19];
    v16 = *(_QWORD *)(v7 - 216);
    v12(v16, v15, v13);
    v17 = *(_QWORD **)(v7 - 176);
    v18 = v10;
    v19 = v14;
    v21 = *(_QWORD *)(v7 - 192);
    v20 = *(_QWORD *)(v7 - 184);
    sub_1BDEE66C0(v18, v11, v19, v16, v4, v20, v21, v17);
    v22 = type metadata accessor for CRArray.ObservableDifference(0, v4, v20, v21);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v17, 0, 1, v22);
  }
}

uint64_t sub_1BDEE4958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CRArray.init(from:)(a1, *(_QWORD *)(a2 + 16), *(uint64_t **)(a2 + 24), *(_QWORD **)(a2 + 32), a3);
}

uint64_t CRArray.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t inited;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[40];
  _QWORD v21[2];
  _QWORD *v22;

  v22 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDEE6A58(v13, (uint64_t)v12);
  v14 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v13) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v12, 1, v14);
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3728);
  if ((_DWORD)v13 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000014;
    *(_QWORD *)(v15 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v15 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    sub_1BDE128C8(a2, a3, a4, v21);
    result = swift_release();
    if (!v5)
    {
      v18 = v21[1];
      v19 = v22;
      *v22 = v21[0];
      v19[1] = v18;
    }
  }
  return result;
}

uint64_t sub_1BDEE4B24(uint64_t a1, _QWORD *a2)
{
  return CRArray.encode(to:)(a1, a2);
}

uint64_t CRArray.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v5 = *v2;
  v6 = v2[1];
  result = sub_1BDDA8D6C();
  if (!v3)
  {
    v11[0] = v5;
    v11[1] = v6;
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    swift_retain();
    sub_1BDE1DA1C(v11, v8, v9, v10);
  }
  return result;
}

void CRArray.hasEncodedData.getter()
{
  sub_1BDEE4BCC();
}

void sub_1BDEE4BCC()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDEE4C40()
{
  uint64_t (*v0)(void);

  return v0() & 1;
}

void sub_1BDEE4C60(_BYTE *a1@<X8>)
{
  CRArray.minEncodingVersion.getter(a1);
}

void CRArray.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRArray.index(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = sub_1BE1B2EE8();
  v22 = *(_QWORD *)(v8 - 8);
  v23 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v19 - v12;
  v14 = v2[1];
  v28 = *v2;
  v29 = v14;
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a2);
  sub_1BE1B28B8();
  v24 = v26;
  v25 = v27;
  sub_1BE1B3230();
  sub_1BE1B320C();
  v19[1] = a2;
  sub_1BE1B3224();
  v15 = v20;
  while (1)
  {
    sub_1BE1B3218();
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v13, v11, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)break;
    v16 = *(_QWORD *)v13;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v6, &v13[*(int *)(TupleTypeMetadata2 + 48)], v4);
    v17 = sub_1BE1B2798();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v4);
    if ((v17 & 1) != 0)
      goto LABEL_6;
  }
  v16 = 0;
LABEL_6:
  swift_release();
  swift_bridgeObjectRelease();
  return v16;
}

void CRArray.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BE1B1F58();
  swift_getTupleTypeMetadata2();
  v0 = sub_1BE1B2EE8();
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary.Iterator();
}

uint64_t sub_1BDEE4F94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  CROrderedDictionary.Iterator.next()(a1, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v4, v8, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  }
  else
  {
    v10 = *(_QWORD *)(v2 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v1, v4 + *(int *)(v5 + 48), v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v1, 0, 1, v2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4, v3);
  }
}

void CRArray.makeIterator()()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

double sub_1BDEE50E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  CROrderedDictionary.makeIterator()(a1, a4, (uint64_t *)&v7);
  result = *(double *)&v7;
  v6 = v8;
  *(_OWORD *)v4 = v7;
  *(_QWORD *)(v4 + 16) = v6;
  return result;
}

void sub_1BDEE5110()
{
  CRArray.makeIterator()();
}

uint64_t sub_1BDEE5120()
{
  swift_release();
  return swift_release();
}

uint64_t sub_1BDEE5138(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a1);
  return sub_1BE1B2CA8();
}

uint64_t sub_1BDEE516C()
{
  return 2;
}

uint64_t sub_1BDEE5174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a1);
  v4 = sub_1BE1AE084(v1, a1, v3);
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_1BDEE51D4()
{
  return sub_1BE1B28D0();
}

uint64_t CRArray.startIndex.getter()
{
  return 0;
}

void CRArray.endIndex.getter()
{
  CRArray.count.getter();
}

void sub_1BDEE522C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CRArray(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  CRArray.subscript.getter();
}

void sub_1BDEE5290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CRArray(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  sub_1BDEE6BF8();
}

void CRArray.subscript.setter()
{
  sub_1BDEE6BF8();
}

uint64_t sub_1BDEE5300()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
}

void CRArray.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  CRArray.subscript.getter();
}

void (*sub_1BDEE53A4())(uint64_t a1, char a2)
{
  return sub_1BDEE53C8;
}

void sub_1BDEE53C8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_QWORD *)(*(_QWORD *)a1 + 48), *(_QWORD *)(*(_QWORD *)a1 + 24));
    sub_1BDEE6BF8();
  }
  sub_1BDEE6BF8();
}

Swift::Int __swiftcall CRArray.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t CRArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;

  v26 = a2;
  v25 = a4;
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B206C();
  MEMORY[0x1E0C80A78](v11);
  if ((sub_1BE1B2C84() & 1) != 0)
  {
    sub_1BE1B1F70();
    v12 = v25;
    v13 = *(_QWORD *)(v25 + 16);
    v14 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v27 = v7;
    v28 = v13;
    v29 = &protocol witness table for UUID;
    v30 = v14;
    v31 = *(_OWORD *)(v12 + 24);
    type metadata accessor for CROrderedDictionary();
  }
  v24[1] = a1;
  v15 = sub_1BE1B2C78();
  v16 = sub_1BDDAEBE8(0, v15 & ~(v15 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  result = sub_1BE1B2C78();
  if ((result & 0x8000000000000000) == 0)
  {
    v18 = result;
    v24[0] = a5;
    if (result)
    {
      v19 = v25;
      do
      {
        sub_1BE1B1F4C();
        v21 = *(_QWORD *)(v16 + 16);
        v20 = *(_QWORD *)(v16 + 24);
        if (v21 >= v20 >> 1)
          v16 = sub_1BDDAEBE8(v20 > 1, v21 + 1, 1, v16);
        *(_QWORD *)(v16 + 16) = v21 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v21, v10, v7);
        --v18;
      }
      while (v18);
    }
    else
    {
      v19 = v25;
    }
    v32 = v16;
    v22 = *(_QWORD *)(v19 + 16);
    v23 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v27 = v7;
    v28 = v22;
    v29 = &protocol witness table for UUID;
    v30 = v23;
    v31 = *(_OWORD *)(v19 + 24);
    type metadata accessor for CROrderedDictionary();
  }
  __break(1u);
  return result;
}

uint64_t CRArray.filter(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t (*v58)(char *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  _QWORD v69[2];
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD v74[2];
  uint64_t v75;

  v59 = a2;
  v58 = a1;
  v54 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF768);
  MEMORY[0x1E0C80A78](v7);
  v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF760);
  v9 = MEMORY[0x1E0C80A78](v51);
  v49 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v49 - v12;
  v62 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v49 - v19;
  v56 = sub_1BE1B206C();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v23 = *v4;
  v22 = v4[1];
  v57 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B2060();
  v66 = v23;
  v67 = v22;
  v52 = v23;
  v71 = v23;
  v72 = v22;
  v53 = v22;
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  v24 = MEMORY[0x1E0DEB458];
  sub_1BE1B2C48();
  v70 = v63;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D9E0);
  v26 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  v27 = sub_1BDEE6CE0();
  v69[0] = v24;
  v69[1] = v27;
  v28 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB8A0], v25, v69);
  sub_1BE1B3668();
  v66 = v71;
  v67 = v72;
  v68 = v73;
  *(_QWORD *)&v63 = a3;
  v61 = v25;
  *((_QWORD *)&v63 + 1) = v25;
  v60 = v26;
  v64 = v26;
  v65 = v28;
  sub_1BE1B30B0();
  sub_1BE1B308C();
  while (1)
  {
    v71 = a3;
    v72 = v61;
    *(_QWORD *)&v73 = v60;
    *((_QWORD *)&v73 + 1) = v28;
    sub_1BE1B30A4();
    sub_1BE1B3098();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)break;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v15, v20, v75);
    v29 = v58(v15);
    if (v5)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v75);
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v57, v56);
    }
    if ((v29 & 1) == 0)
      sub_1BE1B1FF4();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v15, v75);
  }
  swift_release();
  swift_bridgeObjectRelease();
  v30 = v57;
  if ((sub_1BE1B200C() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v56);
    v31 = v54;
    v32 = v53;
    *v54 = v52;
    v31[1] = v32;
    swift_retain();
    return swift_retain();
  }
  else
  {
    v75 = v5;
    v71 = v52;
    v72 = v53;
    swift_retain();
    swift_retain();
    v34 = v50;
    sub_1BE1B2054();
    v35 = sub_1BE1B203C();
    v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
    v37 = *(_QWORD *)(v35 - 8);
    v38 = (uint64_t)v49;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v49, v34, v35);
    sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v36, MEMORY[0x1E0CB1378]);
    sub_1BE1B2C90();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v35);
    v39 = v51;
    *(_QWORD *)(v38 + *(int *)(v51 + 36)) = v74[0];
    sub_1BDEE6D24(v38, (uint64_t)v13);
    v40 = &v13[*(int *)(v39 + 36)];
    v41 = *(_QWORD *)v40;
    sub_1BE1B2C60();
    if (v41 != v74[0])
    {
      sub_1BDD8422C(qword_1EF52D9E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1368]);
      do
      {
        sub_1BE1B26F0();
        v42 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
        v45 = *v43;
        v44 = v43[1];
        v42(v74, 0);
        v74[0] = v45;
        v74[1] = v44;
        MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
        sub_1BE1B2D38();
        v46 = *(_QWORD *)v40;
        sub_1BE1B2C60();
      }
      while (v46 != v74[0]);
    }
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6EF760);
    result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v57, v56);
    v47 = v72;
    v48 = v54;
    *v54 = v71;
    v48[1] = v47;
  }
  return result;
}

void sub_1BDEE5D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDEE6064(a1, a2, a3, a4, (void (*)(void))sub_1BDEE6BF8);
}

void sub_1BDEE5DA4(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  CRArray.subscript.modify(v6, *a2, a3);
}

uint64_t (*sub_1BDEE5DE0(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_1BDE5DFF8;
}

uint64_t sub_1BDEE5E00()
{
  sub_1BE16E2A0();
  swift_release();
  return swift_release();
}

uint64_t (*sub_1BDEE5E44(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_1BE161728(v8, a2, a3, a4);
  return sub_1BDE5DFF8;
}

uint64_t sub_1BDEE5EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  return sub_1BE1B2774();
}

uint64_t sub_1BDEE5F1C()
{
  return sub_1BE1B275C();
}

uint64_t sub_1BDEE5F3C()
{
  return sub_1BE1B2750();
}

uint64_t sub_1BDEE5F5C()
{
  return sub_1BE1B2C3C();
}

uint64_t sub_1BDEE5F6C()
{
  return sub_1BE1B2C54();
}

void sub_1BDEE5F78()
{
  CRArray.init()();
}

uint64_t sub_1BDEE5F88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CRArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t sub_1BDEE5FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a2, a3);
}

void sub_1BDEE5FEC()
{
  CRArray.init<A>(_:)();
}

void sub_1BDEE6004()
{
  CRArray.append(_:)();
}

uint64_t sub_1BDEE6020()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
}

uint64_t sub_1BDEE6040()
{
  return sub_1BE1B2D50();
}

void sub_1BDEE6058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDEE6064(a1, a2, a3, a4, (void (*)(void))CRArray.insert(_:at:));
}

void sub_1BDEE6064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  JUMPOUT(0x1BDEE6084);
}

uint64_t sub_1BDEE60A4()
{
  return sub_1BE1B2D5C();
}

uint64_t sub_1BDEE60C8()
{
  return sub_1BDDCD1A4();
}

uint64_t sub_1BDEE60E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  return sub_1BE1B2D8C();
}

void sub_1BDEE6148(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1BDEE6150()
{
  CRArray.endIndex.getter();
}

uint64_t sub_1BDEE6164(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void sub_1BDEE6174(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  sub_1BDEE61D0(v6, *a2, a3);
}

uint64_t (*sub_1BDEE61B0(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_1BDE5DFF8;
}

void sub_1BDEE61D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  CRArray.subscript.getter();
}

void (*sub_1BDEE621C())(_QWORD *a1)
{
  return sub_1BDEE623C;
}

void sub_1BDEE623C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1BDEE626C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  return sub_1BE16199C(a1, a2, v6, a3);
}

uint64_t sub_1BDEE62B4(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a1);
  return sub_1BE1B2C48();
}

void sub_1BDEE6308(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_1BDEE6324@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_1BDEE633C(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t sub_1BDEE6354()
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  return sub_1BE1B2C30();
}

uint64_t sub_1BDEE63A4(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  result = sub_1BE1B2C30();
  *a1 = v3;
  return result;
}

uint64_t sub_1BDEE6404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  return sub_1BE1B2C3C();
}

uint64_t sub_1BDEE6468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a4);
  return sub_1BE1B2C24();
}

uint64_t sub_1BDEE64CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  return sub_1BE1B2C54();
}

uint64_t Move.from.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Move.from.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Move.from.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Move.fromInSequence.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Move.fromInSequence.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Move.fromInSequence.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Move.toInSequence.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Move.toInSequence.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Move.toInSequence.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Move.toInSequencePostMove.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) - (*(_QWORD *)(v0 + 8) < *(_QWORD *)(v0 + 16));
}

uint64_t Move.to.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Move.to.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*Move.to.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRArray.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRArray.ObservableDifference.removed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CRArray.ObservableDifference.moved.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRArray.ObservableDifference.added.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CRArray.ObservableDifference.subscript.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v2 = *v1;
  v5 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return MEMORY[0x1C3B7C58C](&v5, v2, MEMORY[0x1E0DEB418], AssociatedTypeWitness, MEMORY[0x1E0DEB428]);
}

uint64_t sub_1BDEE66C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int *v12;
  char *v13;
  uint64_t v14;
  void (*v16)(char *, uint64_t, uint64_t);

  *a8 = a1;
  v12 = (int *)type metadata accessor for CRArray.ObservableDifference(0, a5, a6, a7);
  v13 = (char *)a8 + v12[11];
  v14 = sub_1BE1B206C();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v16(v13, a2, v14);
  *(_QWORD *)((char *)a8 + v12[12]) = a3;
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v16)((char *)a8 + v12[13], a4, v14);
}

void CRArray<>.encode(to:)(_QWORD *a1)
{
  uint64_t v2;

  MEMORY[0x1E0C80A78](a1);
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3764();
  CRArray.makeIterator()();
}

void sub_1BDEE685C()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for CRArray.Iterator(0, v0, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  CRArray.Iterator.next()();
}

uint64_t sub_1BDEE687C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, 1, v2) != 1)
  {
    *(_QWORD *)(v6 - 176) = *(_QWORD *)(v1 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 176))(v4, v5, v2);
    __swift_mutable_project_boxed_opaque_existential_1(v6 - 120, *(_QWORD *)(v6 - 96));
    v7 = *(_QWORD *)(v6 - 72);
    sub_1BE1B3380();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
    if (!v7)
    {
      *(_QWORD *)(v6 - 72) = 0;
      CRArray.Iterator.next()();
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v6 - 120);
}

void sub_1BDEE6998(_QWORD *a1)
{
  CRArray<>.encode(to:)(a1);
}

void CRArray.Partial.merge(delta:)(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for CRArray(0, a2[2], a2[3], a2[4]);
  CRArray.merge(_:)();
}

uint64_t sub_1BDEE69E4()
{
  return 1;
}

uint64_t CRArray.Partial.canMerge(delta:)()
{
  return 1;
}

void CRArray.Partial.visitReferences(_:)(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for CRArray(0, a2[2], a2[3], a2[4]);
  CRArray.visitReferences(_:)();
}

uint64_t type metadata accessor for CRArray.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRArray.ObservableDifference);
}

uint64_t sub_1BDEE6A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CRArray.Partial.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = CRArray.init(from:)(a1, a2, a3, a4, v9);
  if (!v5)
  {
    v8 = v9[1];
    *a5 = v9[0];
    a5[1] = v8;
  }
  return result;
}

uint64_t CRArray.Partial.encode(to:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)type metadata accessor for CRArray(0, a2[2], a2[3], a2[4]);
  swift_retain();
  swift_retain();
  CRArray.encode(to:)(a1, v3);
  swift_release();
  return swift_release();
}

void sub_1BDEE6B6C(uint64_t a1, uint64_t *a2)
{
  CRArray.Partial.merge(delta:)(a1, a2);
}

uint64_t sub_1BDEE6B78()
{
  return 1;
}

uint64_t sub_1BDEE6B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CRArray.Partial.init(from:)(a1, *(_QWORD *)(a2 + 16), *(uint64_t **)(a2 + 24), *(_QWORD **)(a2 + 32), a3);
}

uint64_t sub_1BDEE6BA8(uint64_t a1, uint64_t *a2)
{
  return CRArray.Partial.encode(to:)(a1, a2);
}

BOOL _s9Coherence4MoveV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

void sub_1BDEE6BF8()
{
  sub_1BE1B1F58();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDEE6C6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1BDFB631C(v2, v1, a1);
}

unint64_t sub_1BDEE6C94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52D9D8;
  if (!qword_1EF52D9D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF52D9D0);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF52D9D8);
  }
  return result;
}

unint64_t sub_1BDEE6CE0()
{
  unint64_t result;

  result = qword_1EF52B698;
  if (!qword_1EF52B698)
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF52B698);
  }
  return result;
}

uint64_t sub_1BDEE6D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CRArray.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRArray.Iterator);
}

uint64_t type metadata accessor for CRArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRArray);
}

_UNKNOWN **sub_1BDEE6D84()
{
  return &protocol witness table for CRArray<A>.Partial;
}

uint64_t sub_1BDEE6D90(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_1BDEE6DBC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDEE6DCC()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDEE6DDC(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1BDEE6E24()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDEE6E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDEE6F14(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1BDEE6E40(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_1BDEE6E88(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE50], a1, &v3);
}

void sub_1BDEE6ED0()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDEE6EE0()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1BDEE6EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDEE6F14(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

void sub_1BDEE6EF8()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDEE6F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDEE6F14(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1BDEE6F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_1BDEE6CE0();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x1C3B7DF54](a4, a1, v8);
}

uint64_t sub_1BDEE6F5C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1BDEE6FAC()
{
  return 24;
}

__n128 sub_1BDEE6FB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1BDEE6FE4()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_1BDEE700C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_1BDEE7048(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_1BDEE70AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetActor.Item(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetActor.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Move(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Move(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Move()
{
  return &type metadata for Move;
}

uint64_t sub_1BDEE71D4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B206C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDEE7250(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[11];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BE1B206C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[13];
    *(uint64_t *)((char *)v7 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    swift_bridgeObjectRetain();
    v12(v14, v15, v11);
  }
  return v7;
}

uint64_t sub_1BDEE7320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = sub_1BE1B206C();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 52), v5);
}

_QWORD *sub_1BDEE73A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[11];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  swift_bridgeObjectRetain();
  v10(v12, v13, v9);
  return a1;
}

char *sub_1BDEE744C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10(&a1[a3[13]], &a2[a3[13]], v9);
  return a1;
}

char *sub_1BDEE7504(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[11];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  v10(&a1[v11], &a2[v11], v9);
  return a1;
}

char *sub_1BDEE7598(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  v10(&a1[a3[13]], &a2[a3[13]], v9);
  return a1;
}

uint64_t sub_1BDEE7640()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDEE764C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE1B206C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 44)], a2, v8);
  }
}

uint64_t sub_1BDEE76C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BDEE76D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1BE1B206C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 44)], a2, a2, v7);
  }
  return result;
}

void sub_1BDEE774C(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

_QWORD *sub_1BDEE7780(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  id v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;
  return a1;
}

uint64_t *sub_1BDEE77E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a1;
  v5 = *a2;
  if (v4)
  {
    if (!v5)
    {
      sub_1BE1B1F58();
      sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      type metadata accessor for CRDictionary.MutatingAction();
    }
    *a1 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else if (v5)
  {
    *a1 = v5;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v6 = (void *)a1[2];
  v7 = (void *)a2[2];
  a1[2] = (uint64_t)v7;
  v8 = v7;

  return a1;
}

_QWORD *sub_1BDEE78FC(_QWORD *a1, _QWORD *a2)
{
  void *v4;

  if (*a1)
  {
    if (!*a2)
    {
      sub_1BE1B1F58();
      sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      type metadata accessor for CRDictionary.MutatingAction();
    }
    *a1 = *a2;
    swift_bridgeObjectRelease();
    a1[1] = a2[1];
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v4 = (void *)a1[2];
  a1[2] = a2[2];

  return a1;
}

uint64_t sub_1BDEE79E4(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1BDEE7A40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for CRArray.MutatingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRArray.MutatingAction);
}

uint64_t sub_1BDEE7AA0()
{
  swift_release();
  return swift_release();
}

_QWORD *sub_1BDEE7AC8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_1BDEE7AFC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1BDEE7B58(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CRStructCodingKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRStructCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CRArray.Partial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRArray.Partial);
}

uint64_t sub_1BDEE7C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_OrderedSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDEE7C7C()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t __src;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __src = sub_1BE1B1F40();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  sub_1BE1B1F40();
  return sub_1BDDD6E84(&__src, 16);
}

uint64_t sub_1BDEE7D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t *, _QWORD);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v0 = sub_1BE1B203C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B2054();
  sub_1BDD84E80();
  v4 = sub_1BE1B2C78();
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v6 = v4;
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1BDE224EC(0, v4 & ~(v4 >> 63), 0);
    v5 = v26;
    result = sub_1BE1B2C60();
    if ((v6 & 0x8000000000000000) == 0)
    {
      v22 = v1;
      while (1)
      {
        v8 = (uint64_t (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
        v10 = *v9;
        v11 = v9[1];
        result = v8(&v24, 0);
        v12 = __OFSUB__(v11, 1);
        v13 = v11 - 1;
        if (v12)
          break;
        if (v10 == v13)
        {
          v24 = v10;
          v14 = sub_1BE1B32E4();
          v16 = v15;
        }
        else
        {
          v23 = v10;
          v24 = sub_1BE1B32E4();
          v25 = v17;
          sub_1BE1B284C();
          v23 = v13;
          sub_1BE1B32E4();
          sub_1BE1B284C();
          swift_bridgeObjectRelease();
          v14 = v24;
          v16 = v25;
        }
        v26 = v5;
        v19 = *(_QWORD *)(v5 + 16);
        v18 = *(_QWORD *)(v5 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1BDE224EC(v18 > 1, v19 + 1, 1);
          v5 = v26;
        }
        *(_QWORD *)(v5 + 16) = v19 + 1;
        v20 = v5 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v14;
        *(_QWORD *)(v20 + 40) = v16;
        sub_1BE1B2C9C();
        if (!--v6)
        {
          v1 = v22;
          goto LABEL_12;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v24 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
    sub_1BDEE881C();
    v21 = sub_1BE1B2708();
    swift_bridgeObjectRelease();
    return v21;
  }
  return result;
}

void sub_1BDEE7FC8(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v35 = a4;
  v36 = a8;
  v34 = a3;
  v13 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1C3B7C8EC](v16, v17);
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3898]), sel_init);
  v20 = (uint64_t)objc_msgSend(v19, sel_activeProcessorCount);

  v21 = 3 * v20;
  if ((unsigned __int128)(v20 * (__int128)3) >> 64 != (3 * v20) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v21)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (v18 == 0x8000000000000000 && v21 == -1)
    goto LABEL_11;
  v22 = v18 / v21;
  if (v22 <= 0)
  {
    a1();
    sub_1BDE7A054(a7, a7);
    swift_allocObject();
    v26 = sub_1BE1B299C();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v27, v15, a7);
    sub_1BDE79568();
    v37 = a5;
    MEMORY[0x1E0C80A78](v26);
    *(&v33 - 6) = a6;
    *(&v33 - 5) = a7;
    v28 = v36;
    v29 = v34;
    *(&v33 - 4) = (uint64_t)v36;
    *(&v33 - 3) = v29;
    *(&v33 - 2) = v35;
    *(&v33 - 1) = (uint64_t)v15;
    v30 = sub_1BE1B2A5C();
    v31 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v30);
    sub_1BDF016D0((void (*)(char *, char *))sub_1BDEE8868, (uint64_t)(&v33 - 8), v30, v28, MEMORY[0x1E0DEDCE8], v31, MEMORY[0x1E0DEDD18], v32);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a7);
    return;
  }
  v37 = 0;
  v23 = MEMORY[0x1E0C80A78](v18 / v22);
  *(&v33 - 12) = a6;
  *(&v33 - 11) = a7;
  *(&v33 - 10) = (uint64_t)v36;
  *(&v33 - 9) = v23;
  *(&v33 - 8) = (uint64_t)&v37;
  *(&v33 - 7) = v18;
  *(&v33 - 6) = v24;
  *(&v33 - 5) = (uint64_t)a1;
  *(&v33 - 4) = a2;
  *(&v33 - 3) = a5;
  v25 = v35;
  *(&v33 - 2) = v34;
  *(&v33 - 1) = v25;
  sub_1BE1B29F0();
  if (!v37)
    goto LABEL_12;
}

uint64_t sub_1BDEE8268(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  *a2 = a3;
  result = sub_1BE1B2EF4();
  if (result)
  {
    MEMORY[0x1E0C80A78](result);
    *a4 = sub_1BE1B29F0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDEE8354(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v4;

  *a2 = a3;
  result = sub_1BE1B2EF4();
  if (result)
  {
    v4 = sub_1BDD88A30();
    MEMORY[0x1E0C80A78](v4);
    return sub_1BE1B2E1C();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDEE843C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, char *), uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD v61[4];
  _QWORD v62[2];
  __int128 v63;
  uint64_t v64;
  __int128 v65;

  v55 = *(_QWORD *)(a11 - 8);
  v56 = a7;
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v18;
  v50 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v19);
  v60 = (char *)&v49 - v28;
  v29 = result * v23;
  if ((unsigned __int128)(result * (__int128)v23) >> 64 != (result * v23) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v30 = v29 + v23;
  if (__OFADD__(v29, v23))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!__OFADD__(v30, v23))
  {
    if (v30 + v23 > v24)
      v30 = v24;
    v57 = v30;
    v31 = v60;
    v53 = v27;
    v32 = v26;
    v33 = result;
    v25();
    v34 = v50;
    v35 = v32 + *(_QWORD *)(v50 + 72) * v33;
    v36 = v31;
    v37 = v51;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v21, v36, v51);
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v35, v21, v37);
    v38 = *(_QWORD *)(v58 + 72);
    v39 = v53 + v38 * v29;
    v54 = v38;
    v40 = v53 + v38 * v57;
    *(_QWORD *)&v65 = v39;
    *(_QWORD *)&v63 = v40;
    v41 = sub_1BE1B2EDC();
    v42 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB920], v41);
    result = sub_1BE1B2744();
    if ((result & 1) == 0)
      goto LABEL_18;
    v53 = a10;
    v52 = a9;
    *(_QWORD *)&v63 = v39;
    *((_QWORD *)&v63 + 1) = v40;
    v57 = v42;
    v43 = sub_1BE1B2D98();
    v49 = v40;
    v44 = v43;
    v45 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB928], v41);
    v46 = sub_1BDEE6CE0();
    sub_1BE1B2DA4();
    *(_QWORD *)&v65 = v39;
    *((_QWORD *)&v65 + 1) = v49;
    while (1)
    {
      v47 = v64;
      sub_1BE1B2DB0();
      if (v47 == (_QWORD)v63)
        return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v60, v51);
      v63 = v65;
      sub_1BE1B2DA4();
      sub_1BE1B2DB0();
      result = sub_1BE1B2744();
      if ((result & 1) == 0)
        break;
      v62[0] = v61[3];
      v62[1] = v61[2];
      v61[0] = v45;
      v61[1] = v46;
      MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB8C0], v44, v61);
      sub_1BDEE8960((uint64_t)&v64, (uint64_t)v62);
      v64 = v47 + v54;
      sub_1BE1B2A8C();
      v52(v60, v13);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v13, a11);
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v47, v17, v59);
      if (__OFADD__(v29++, 1))
      {
        __break(1u);
        return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v60, v51);
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1BDEE87F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BDD849C4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

unint64_t sub_1BDEE881C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF525508;
  if (!qword_1EF525508)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF525500);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF525508);
  }
  return result;
}

uint64_t sub_1BDEE8868(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 40))(*(_QWORD *)(v1 + 56), a1);
}

uint64_t sub_1BDEE889C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1BDEE8268(a1, a2, *(_QWORD *)(v2 + 40), *(uint64_t **)(v2 + 48));
}

uint64_t sub_1BDEE88E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1BDEE8354(a1, a2, *(_QWORD *)(v2 + 40));
}

uint64_t sub_1BDEE8924(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDEE843C(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(void (**)(char *, char *))(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BDEE8960(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = sub_1BE1B2D98();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v16 - v11;
  v13 = sub_1BE1B2720();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v14 = sub_1BE1B2714();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

_QWORD *sub_1BDEE8AFC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BE1B203C();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
    *(_QWORD *)((char *)a1 + *(int *)(v9 + 36)) = *(_QWORD *)((char *)a2 + *(int *)(v9 + 36));
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v8((_QWORD *)((char *)a1 + v10), (_QWORD *)((char *)a2 + v10), v7);
    *(_QWORD *)&v11[*(int *)(v9 + 36)] = *(_QWORD *)&v12[*(int *)(v9 + 36)];
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    v15[16] = v16[16];
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v17 = (char *)a1 + v14;
    v18 = (char *)a2 + v14;
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[16] = v18[16];
    v19 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
  }
  return a1;
}

uint64_t sub_1BDEE8C18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_1BE1B203C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  *(_QWORD *)(a1 + *(int *)(v8 + 36)) = *(_QWORD *)(a2 + *(int *)(v8 + 36));
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(_QWORD *)(v10 + *(int *)(v8 + 36)) = *(_QWORD *)(v11 + *(int *)(v8 + 36));
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t sub_1BDEE8D08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = sub_1BE1B203C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  *(_QWORD *)(a1 + *(int *)(v8 + 36)) = *(_QWORD *)(a2 + *(int *)(v8 + 36));
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(_QWORD *)(v10 + *(int *)(v8 + 36)) = *(_QWORD *)(v11 + *(int *)(v8 + 36));
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_BYTE *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = v15;
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_BYTE *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = v19;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1BDEE8E00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_1BE1B203C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  *(_QWORD *)(a1 + *(int *)(v8 + 36)) = *(_QWORD *)(a2 + *(int *)(v8 + 36));
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(_QWORD *)(v10 + *(int *)(v8 + 36)) = *(_QWORD *)(v11 + *(int *)(v8 + 36));
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t sub_1BDEE8EF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_1BE1B203C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  *(_QWORD *)(a1 + *(int *)(v8 + 36)) = *(_QWORD *)(a2 + *(int *)(v8 + 36));
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(_QWORD *)(v10 + *(int *)(v8 + 36)) = *(_QWORD *)(v11 + *(int *)(v8 + 36));
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t sub_1BDEE8FE0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDEE8FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1BDEE907C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDEE9088(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 1;
  return result;
}

void CRVersion.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9E0];
  *a1 = MEMORY[0x1E0DEE9E0];
  a1[1] = v1;
}

uint64_t CRVersion.hasDelta(from:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *v1;
  if ((sub_1BDDB04C0(v1[1], a1[1]) & 1) != 0)
    return 1;
  else
    return sub_1BDDB04C0(v3, v2);
}

uint64_t sub_1BDEE9160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t result;
  _QWORD v24[3];
  uint64_t v25;

  v5 = v3;
  v24[1] = a2;
  v24[2] = a3;
  v7 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B206C();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v3;
  v25 = v14;
  *v5 = 0x8000000000000000;
  v16 = sub_1BDDB3EC0(a1);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v15;
  if (*(_QWORD *)(v14 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_10:
    sub_1BDDB4348();
    v14 = v25;
    goto LABEL_6;
  }
  sub_1BDDB46CC(v19, isUniquelyReferenced_nonNull_native);
  v14 = v25;
  v20 = sub_1BDDB3EC0(a1);
  if ((v4 & 1) != (v21 & 1))
  {
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v16 = v20;
LABEL_6:
  *v5 = v14;
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)*v5;
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0)
  {
    sub_1BE1B2060();
    sub_1BDD9C318(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDDB4614(v16, (uint64_t)v9, (uint64_t)v12, v22);
  }
  swift_bridgeObjectRelease();
  return sub_1BE1B1FDC();
}

uint64_t sub_1BDEE932C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  _QWORD v23[4];

  v4 = sub_1BE1B206C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v23 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v23 - v12;
  v14 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(a1, (uint64_t)v16, v17);
  v18 = sub_1BDE52510(v23, (uint64_t)v16);
  v20 = v19;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v19, 1, v4))
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v21(v11, v20, v4);
    v21(v8, a2, v4);
    sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
    sub_1BE1B2F6C();
    sub_1BE1B2F60();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
  ((void (*)(_QWORD *, _QWORD))v18)(v23, 0);
  return sub_1BDD9C3E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
}

uint64_t sub_1BDEE94F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  char *v16;
  int v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t *v21;
  char *v22;
  char *v23;
  char v24;
  void (*v25)(_BYTE *, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  _DWORD v30[2];
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  char *v37;
  _BYTE v38[32];

  v1 = sub_1BE1B1F64();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v30 - v6;
  v8 = sub_1BE1B206C();
  v9 = *(char **)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26A8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v9;
  v35 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v9 + 2);
  v35(v11, v0, v8);
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0];
  sub_1BDD8422C(&qword_1ED6EF218, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13D0]);
  sub_1BE1B2888();
  v16 = &v14[*(int *)(v12 + 36)];
  v34 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v34(v7, v16, v1);
  sub_1BDD8422C(qword_1ED6EF220, v15, MEMORY[0x1E0CB13E0]);
  sub_1BE1B2C90();
  v33 = sub_1BDD8422C(&qword_1ED6EF208, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
  v17 = sub_1BE1B2798();
  v18 = *(void (**)(char *, uint64_t))(v2 + 8);
  v37 = v5;
  v18(v5, v1);
  v36 = v7;
  v18(v7, v1);
  v19 = 0;
  if ((v17 & 1) == 0)
  {
    v30[1] = v17;
    v20 = (void (*)(_BYTE *, _QWORD))sub_1BE1B2D14();
    v19 = *v21;
    v20(v38, 0);
    v35(v11, (uint64_t)v14, v8);
    sub_1BE1B2C9C();
    v31 = (void (*)(char *, uint64_t))*((_QWORD *)v32 + 1);
    v32 = v11;
    v31(v11, v8);
    v22 = v36;
    while (1)
    {
      v34(v22, v16, v1);
      v23 = v37;
      sub_1BE1B2C90();
      v24 = sub_1BE1B2798();
      v18(v23, v1);
      v18(v22, v1);
      if ((v24 & 1) != 0)
        break;
      v25 = (void (*)(_BYTE *, _QWORD))sub_1BE1B2D14();
      v27 = *v26;
      v25(v38, 0);
      v28 = v32;
      v35(v32, (uint64_t)v14, v8);
      sub_1BE1B2C9C();
      v31(v28, v8);
      if (v19 <= v27)
        v19 = v27;
    }
  }
  sub_1BDD86E30((uint64_t)v14, &qword_1ED6F26A8);
  return v19;
}

uint64_t sub_1BDEE9868(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  unint64_t v60;
  char v61;
  uint64_t v62;
  void (*v63)(char *, unint64_t, uint64_t);
  char *v64;
  char *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  void (*v90)(char *, uint64_t);
  int64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  int64_t v103;
  char *v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  char *v107;
  int64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v91 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v94 = (char *)&v91 - v12;
  MEMORY[0x1E0C80A78](v11);
  v114 = (char *)&v91 - v13;
  v14 = sub_1BE1B206C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v99 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v98 = (char *)&v91 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v97 = (char *)&v91 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v100 = (char *)&v91 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v107 = (char *)&v91 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v104 = (char *)&v91 - v27;
  MEMORY[0x1E0C80A78](v26);
  v118 = (char *)&v91 - v28;
  v29 = type metadata accessor for Replica();
  v111 = *(_QWORD *)(v29 - 8);
  v30 = MEMORY[0x1E0C80A78](v29);
  v95 = (uint64_t)&v91 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v115 = (uint64_t)&v91 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v34 = MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v91 - v37;
  v39 = *v2;
  v40 = *(_QWORD *)(*v2 + 64);
  v101 = *v2 + 64;
  v41 = 1 << *(_BYTE *)(v39 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v117 = v42 & v40;
  v108 = (unint64_t)(v41 + 63) >> 6;
  v91 = v108 - 1;
  v110 = v39;
  result = swift_bridgeObjectRetain();
  v44 = 0;
  v112 = a1;
  v116 = v38;
  v92 = v10;
  v96 = v15;
  v93 = v7;
  v113 = v36;
  while (1)
  {
    if (v117)
    {
      v46 = __clz(__rbit64(v117));
      v117 &= v117 - 1;
      v47 = v46 | (v44 << 6);
LABEL_8:
      v48 = v110;
      sub_1BDD9C318(*(_QWORD *)(v110 + 48) + *(_QWORD *)(v111 + 72) * v47, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v49 = *(_QWORD *)(v48 + 56) + *(_QWORD *)(v15 + 72) * v47;
      v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(&v36[*(int *)(v50 + 48)], v49, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v36, 0, 1, v50);
      a1 = v112;
      v38 = v116;
      goto LABEL_27;
    }
    v51 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v51 < v108)
    {
      v52 = *(_QWORD *)(v101 + 8 * v51);
      if (v52)
        goto LABEL_12;
      v53 = v44 + 2;
      ++v44;
      if (v51 + 1 < v108)
      {
        v52 = *(_QWORD *)(v101 + 8 * v53);
        if (v52)
          goto LABEL_15;
        v44 = v51 + 1;
        if (v51 + 2 < v108)
        {
          v52 = *(_QWORD *)(v101 + 8 * (v51 + 2));
          if (v52)
          {
            v51 += 2;
            goto LABEL_12;
          }
          v53 = v51 + 3;
          v44 = v51 + 2;
          if (v51 + 3 < v108)
            break;
        }
      }
    }
LABEL_26:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v36, 1, 1, v54);
    v117 = 0;
LABEL_27:
    sub_1BDDA2EF0((uint64_t)v36, (uint64_t)v38, &qword_1ED6F3CC0);
    v55 = (uint64_t)v38;
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v55, 1, v56) == 1)
      return swift_release();
    v57 = v55 + *(int *)(v56 + 48);
    v58 = v115;
    sub_1BDDA2E8C(v55, v115, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    v59(v118, v57, v14);
    if (!*(_QWORD *)(a1 + 16) || (v60 = sub_1BDDB3EC0(v58), (v61 & 1) == 0))
    {
      v45 = (uint64_t)v114;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v114, 1, 1, v14);
      goto LABEL_5;
    }
    v62 = *(_QWORD *)(a1 + 56);
    v105 = *(_QWORD *)(v15 + 72);
    v63 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    v45 = (uint64_t)v114;
    v63(v114, v62 + v105 * v60, v14);
    v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v109(v45, 0, 1, v14);
    v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (v106(v45, 1, v14) == 1)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v15 + 8))(v118, v14);
      sub_1BDD9C3E0(v58, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      result = sub_1BDD86E30(v45, &qword_1ED6F3C78);
      v36 = v113;
      v38 = v116;
    }
    else
    {
      v103 = v44;
      v64 = v104;
      v59(v104, v45, v14);
      v65 = v118;
      v63(v100, (unint64_t)v118, v14);
      v63(v98, (unint64_t)v65, v14);
      v63(v99, (unint64_t)v64, v14);
      sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
      v66 = v97;
      v15 = v96;
      sub_1BE1B2F6C();
      sub_1BE1B2F54();
      v67 = *(void (**)(char *, uint64_t))(v15 + 8);
      v67(v66, v14);
      v68 = sub_1BE1B1FB8();
      v102 = v67;
      if (v68 < 1)
      {
        swift_bridgeObjectRetain();
        v78 = sub_1BDDB3EC0(v115);
        v80 = v79;
        swift_bridgeObjectRelease();
        v81 = (uint64_t)v93;
        if ((v80 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v83 = *v2;
          v119 = *v2;
          *v2 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1BDDB4348();
            v83 = v119;
          }
          sub_1BDD9C3E0(*(_QWORD *)(v83 + 48) + *(_QWORD *)(v111 + 72) * v78, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v59((char *)v81, *(_QWORD *)(v83 + 56) + v78 * v105, v14);
          sub_1BDDB4BD4(v78, v83);
          *v2 = v83;
          swift_bridgeObjectRelease();
          v84 = 0;
          a1 = v112;
          v38 = v116;
          v85 = v104;
        }
        else
        {
          v84 = 1;
          a1 = v112;
          v85 = v104;
          v38 = v116;
        }
        v109(v81, v84, 1, v14);
        sub_1BDD86E30(v81, &qword_1ED6F3C78);
        v89 = v102;
        v102(v107, v14);
        v89(v85, v14);
        v89(v118, v14);
        result = sub_1BDD9C3E0(v115, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v36 = v113;
        v44 = v103;
      }
      else
      {
        v69 = v95;
        sub_1BDD9C318(v115, v95, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v70 = (uint64_t)v94;
        v63(v94, (unint64_t)v107, v14);
        v109(v70, 0, 1, v14);
        if (v106(v70, 1, v14) == 1)
        {
          sub_1BDD86E30(v70, &qword_1ED6F3C78);
          swift_bridgeObjectRetain();
          v71 = sub_1BDDB3EC0(v69);
          v73 = v72;
          swift_bridgeObjectRelease();
          v74 = (uint64_t)v92;
          if ((v73 & 1) != 0)
          {
            v75 = swift_isUniquelyReferenced_nonNull_native();
            v76 = *v2;
            v119 = *v2;
            *v2 = 0x8000000000000000;
            if (!v75)
            {
              sub_1BDDB4348();
              v76 = v119;
            }
            sub_1BDD9C3E0(*(_QWORD *)(v76 + 48) + *(_QWORD *)(v111 + 72) * v71, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v59((char *)v74, *(_QWORD *)(v76 + 56) + v71 * v105, v14);
            sub_1BDDB4BD4(v71, v76);
            *v2 = v76;
            swift_bridgeObjectRelease();
            v77 = 0;
          }
          else
          {
            v77 = 1;
          }
          a1 = v112;
          v88 = v104;
          v38 = v116;
          v109(v74, v77, 1, v14);
          sub_1BDD9C3E0(v95, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD86E30(v74, &qword_1ED6F3C78);
          v36 = v113;
        }
        else
        {
          v86 = (uint64_t)v100;
          v59(v100, v70, v14);
          v87 = swift_isUniquelyReferenced_nonNull_native();
          v119 = *v2;
          *v2 = 0x8000000000000000;
          sub_1BE154038(v86, v69, v87);
          *v2 = v119;
          swift_bridgeObjectRelease();
          sub_1BDD9C3E0(v69, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          a1 = v112;
          v36 = v113;
          v88 = v104;
          v38 = v116;
        }
        v90 = v102;
        v102(v107, v14);
        v90(v88, v14);
        v90(v118, v14);
        result = sub_1BDD9C3E0(v115, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v44 = v103;
      }
    }
  }
  v52 = *(_QWORD *)(v101 + 8 * v53);
  if (v52)
  {
LABEL_15:
    v51 = v53;
LABEL_12:
    v117 = (v52 - 1) & v52;
    v47 = __clz(__rbit64(v52)) + (v51 << 6);
    v44 = v51;
    goto LABEL_8;
  }
  while (1)
  {
    v51 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v51 >= v108)
    {
      v44 = v91;
      goto LABEL_26;
    }
    v52 = *(_QWORD *)(v101 + 8 * v51);
    ++v53;
    if (v52)
      goto LABEL_12;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1BDEEA2F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  unint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(char *, unint64_t, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  unint64_t v62;
  char v63;
  char v64;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _QWORD *v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  char v94;
  int v95;
  int v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  char v102;
  uint64_t result;
  uint64_t v104;
  int64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  _QWORD *v128;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v5 = MEMORY[0x1E0C80A78](v4);
  v118 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v104 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v106 = (char *)&v104 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v109 = (char *)&v104 - v13;
  MEMORY[0x1E0C80A78](v12);
  v120 = (char *)&v104 - v14;
  v15 = sub_1BE1B206C();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v108 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v104 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v112 = (char *)&v104 - v23;
  MEMORY[0x1E0C80A78](v22);
  v126 = (char *)&v104 - v24;
  v104 = type metadata accessor for Replica();
  v124 = *(_QWORD *)(v104 - 8);
  v25 = MEMORY[0x1E0C80A78](v104);
  v110 = (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v104 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v104 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v121 = (uint64_t)&v104 - v33;
  v34 = *v2;
  v35 = *(_QWORD *)(*v2 + 64);
  v111 = *v2 + 64;
  v36 = 1 << *(_BYTE *)(v34 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v116 = (unint64_t)(v36 + 63) >> 6;
  v105 = v116 - 1;
  v117 = v34;
  swift_bridgeObjectRetain();
  v123 = 0;
  v119 = a1;
  v107 = v9;
  v122 = v28;
  v127 = v32;
  v113 = v21;
  v114 = v2;
  while (1)
  {
    if (v38)
    {
      v125 = (v38 - 1) & v38;
      v42 = __clz(__rbit64(v38)) | (v123 << 6);
LABEL_10:
      v43 = v117;
      sub_1BDD9C318(*(_QWORD *)(v117 + 48) + *(_QWORD *)(v124 + 72) * v42, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v44 = *(_QWORD *)(v43 + 56) + *(_QWORD *)(v16 + 72) * v42;
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v46 = v44;
      v32 = v127;
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(&v127[*(int *)(v45 + 48)], v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v32, 0, 1, v45);
      goto LABEL_29;
    }
    v47 = v123 + 1;
    if (__OFADD__(v123, 1))
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v47 < v116)
    {
      v48 = *(_QWORD *)(v111 + 8 * v47);
      if (v48)
        goto LABEL_14;
      v49 = v123 + 2;
      ++v123;
      if (v47 + 1 < v116)
      {
        v48 = *(_QWORD *)(v111 + 8 * v49);
        if (v48)
          goto LABEL_17;
        v123 = v47 + 1;
        if (v47 + 2 < v116)
        {
          v48 = *(_QWORD *)(v111 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
            goto LABEL_14;
          }
          v49 = v47 + 3;
          v123 = v47 + 2;
          if (v47 + 3 < v116)
            break;
        }
      }
    }
LABEL_28:
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v32, 1, 1, v50);
    v125 = 0;
LABEL_29:
    v51 = v121;
    sub_1BDDA2EF0((uint64_t)v32, v121, &qword_1ED6F3CC0);
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52) == 1)
      return swift_release();
    v53 = v51 + *(int *)(v52 + 48);
    sub_1BDDA2E8C(v51, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
    v54(v126, v53, v15);
    if (!*(_QWORD *)(a1 + 16) || (v55 = sub_1BDDB3EC0((uint64_t)v28), (v56 & 1) == 0))
    {
      v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v59 = (uint64_t)v120;
      v60(v120, 1, 1, v15);
LABEL_35:
      sub_1BDD86E30(v59, &qword_1ED6F3C78);
      swift_bridgeObjectRetain();
      v62 = sub_1BDDB3EC0((uint64_t)v28);
      v64 = v63;
      swift_bridgeObjectRelease();
      if ((v64 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v66 = *v2;
        v128 = (_QWORD *)*v2;
        *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1BDDB4348();
          v66 = (uint64_t)v128;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v66 + 48) + *(_QWORD *)(v124 + 72) * v62, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v40 = (uint64_t)v118;
        v54(v118, *(_QWORD *)(v66 + 56) + *(_QWORD *)(v16 + 72) * v62, v15);
        sub_1BDDB4BD4(v62, v66);
        *v2 = v66;
        swift_bridgeObjectRelease();
        v39 = 0;
        a1 = v119;
      }
      else
      {
        v39 = 1;
        v40 = (uint64_t)v118;
        a1 = v119;
      }
      v60((char *)v40, v39, 1, v15);
      sub_1BDD86E30(v40, &qword_1ED6F3C78);
      v41 = *(void (**)(char *, uint64_t))(v16 + 8);
      v28 = v122;
LABEL_6:
      v32 = v127;
      goto LABEL_7;
    }
    v57 = *(_QWORD *)(a1 + 56);
    v115 = *(_QWORD *)(v16 + 72);
    v58 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v59 = (uint64_t)v120;
    v58(v120, v57 + v115 * v55, v15);
    v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v60((char *)v59, 0, 1, v15);
    v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v61(v59, 1, v15) == 1)
    {
      v2 = v114;
      goto LABEL_35;
    }
    v54(v112, v59, v15);
    v67 = v113;
    sub_1BE1B1F88();
    if (sub_1BE1B1FB8() < 1)
    {
      v2 = v114;
      swift_bridgeObjectRetain();
      v28 = v122;
      v77 = sub_1BDDB3EC0((uint64_t)v122);
      v79 = v78;
      swift_bridgeObjectRelease();
      if ((v79 & 1) != 0)
      {
        v80 = swift_isUniquelyReferenced_nonNull_native();
        v81 = *v2;
        v128 = (_QWORD *)*v2;
        *v2 = 0x8000000000000000;
        a1 = v119;
        if (!v80)
        {
          sub_1BDDB4348();
          v81 = (uint64_t)v128;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v81 + 48) + *(_QWORD *)(v124 + 72) * v77, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v82 = (uint64_t)v107;
        v54(v107, *(_QWORD *)(v81 + 56) + v77 * v115, v15);
        sub_1BDDB4BD4(v77, v81);
        *v2 = v81;
        swift_bridgeObjectRelease();
        v83 = 0;
      }
      else
      {
        v83 = 1;
        a1 = v119;
        v82 = (uint64_t)v107;
      }
      v60((char *)v82, v83, 1, v15);
      sub_1BDD86E30(v82, &qword_1ED6F3C78);
      v41 = *(void (**)(char *, uint64_t))(v16 + 8);
      v41(v113, v15);
      v41(v112, v15);
      goto LABEL_6;
    }
    v68 = v110;
    sub_1BDD9C318((uint64_t)v122, v110, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v69 = (uint64_t)v109;
    v58(v109, (unint64_t)v67, v15);
    v60((char *)v69, 0, 1, v15);
    if (v61(v69, 1, v15) == 1)
    {
      sub_1BDD86E30(v69, &qword_1ED6F3C78);
      v2 = v114;
      swift_bridgeObjectRetain();
      v70 = sub_1BDDB3EC0(v68);
      v72 = v71;
      swift_bridgeObjectRelease();
      a1 = v119;
      if ((v72 & 1) != 0)
      {
        v73 = swift_isUniquelyReferenced_nonNull_native();
        v74 = *v2;
        v128 = (_QWORD *)*v2;
        *v2 = 0x8000000000000000;
        v28 = v122;
        if (!v73)
        {
          sub_1BDDB4348();
          v74 = (uint64_t)v128;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v74 + 48) + *(_QWORD *)(v124 + 72) * v70, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v75 = (uint64_t)v106;
        v54(v106, *(_QWORD *)(v74 + 56) + v70 * v115, v15);
        sub_1BDDB4BD4(v70, v74);
        *v2 = v74;
        swift_bridgeObjectRelease();
        v76 = 0;
      }
      else
      {
        v76 = 1;
        v75 = (uint64_t)v106;
        v28 = v122;
      }
      v60((char *)v75, v76, 1, v15);
      sub_1BDD9C3E0(v110, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDD86E30(v75, &qword_1ED6F3C78);
      v97 = v113;
    }
    else
    {
      v54(v108, v69, v15);
      v84 = v114;
      v85 = swift_isUniquelyReferenced_nonNull_native();
      v128 = (_QWORD *)*v84;
      v86 = v128;
      *v84 = 0x8000000000000000;
      v88 = sub_1BDDB3EC0(v68);
      v89 = v86[2];
      v90 = (v87 & 1) == 0;
      v91 = v89 + v90;
      a1 = v119;
      if (__OFADD__(v89, v90))
        goto LABEL_67;
      if (v86[3] >= v91)
      {
        v97 = v113;
        v28 = v122;
        if ((v85 & 1) == 0)
        {
          v102 = v87;
          sub_1BDDB4348();
          v87 = v102;
        }
      }
      else
      {
        v92 = v87;
        sub_1BDDB46CC(v91, v85);
        v93 = sub_1BDDB3EC0(v110);
        v95 = v94 & 1;
        v87 = v92;
        v96 = v92 & 1;
        v97 = v113;
        v28 = v122;
        if (v96 != v95)
          goto LABEL_70;
        v88 = v93;
      }
      v2 = v114;
      v98 = v128;
      if ((v87 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v16 + 40))(v128[7] + v88 * v115, v108, v15);
      }
      else
      {
        v128[(v88 >> 6) + 8] |= 1 << v88;
        sub_1BDD9C318(v110, v98[6] + *(_QWORD *)(v124 + 72) * v88, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v54((char *)(v98[7] + v88 * v115), (uint64_t)v108, v15);
        v99 = v98[2];
        v100 = __OFADD__(v99, 1);
        v101 = v99 + 1;
        if (v100)
          goto LABEL_68;
        v98[2] = v101;
      }
      *v2 = (uint64_t)v128;
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0(v110, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    }
    v32 = v127;
    v41 = *(void (**)(char *, uint64_t))(v16 + 8);
    v41(v97, v15);
    v41(v112, v15);
LABEL_7:
    v41(v126, v15);
    sub_1BDD9C3E0((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v38 = v125;
  }
  v48 = *(_QWORD *)(v111 + 8 * v49);
  if (v48)
  {
LABEL_17:
    v47 = v49;
LABEL_14:
    v125 = (v48 - 1) & v48;
    v42 = __clz(__rbit64(v48)) + (v47 << 6);
    v123 = v47;
    goto LABEL_10;
  }
  while (1)
  {
    v47 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v47 >= v116)
    {
      v123 = v105;
      goto LABEL_28;
    }
    v48 = *(_QWORD *)(v111 + 8 * v47);
    ++v49;
    if (v48)
      goto LABEL_14;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDEEAE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  void (*v120)(uint64_t, unint64_t, uint64_t);
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t *v130;
  unint64_t v131;
  char v132;
  char v133;
  int v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  char *v140;
  char *v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t);
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  void (*v156)(char *, uint64_t);
  char *v157;
  char *v158;
  void (*v159)(char *, char *, uint64_t);
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t *v165;
  unint64_t v166;
  char v167;
  char v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  char v177;
  uint64_t v178;
  void (*v179)(char *, uint64_t);
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  void (*v184)(char *, uint64_t);
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(char *, uint64_t);
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  void (*v214)(char *, unint64_t, uint64_t);
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  void (*v219)(char *, uint64_t);
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  char v226;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  uint64_t *v231;
  int v232;
  _QWORD *v233;
  char v234;
  unint64_t v235;
  uint64_t v236;
  _BOOL8 v237;
  uint64_t v238;
  char v239;
  unint64_t v240;
  char v241;
  _QWORD *v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  uint64_t result;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  void (*v270)(char *, uint64_t);
  char *v271;
  int64_t v272;
  char *v273;
  char *v274;
  char *v275;
  void (*v276)(char *, uint64_t, uint64_t);
  void (*v277)(char *, unint64_t, uint64_t);
  _QWORD *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  char *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  int64_t v294;
  unsigned int (*v295)(uint64_t, uint64_t, uint64_t);
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  unint64_t v300;
  _QWORD *v301;

  v286 = a3;
  v282 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v6 = MEMORY[0x1E0C80A78](v5);
  v265 = (char *)&v247 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v275 = (char *)&v247 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v281 = (char *)&v247 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v283 = (char *)&v247 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v257 = (char *)&v247 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v256 = (char *)&v247 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v258 = (char *)&v247 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v285 = (char *)&v247 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v254 = (char *)&v247 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v261 = (char *)&v247 - v25;
  MEMORY[0x1E0C80A78](v24);
  v284 = (char *)&v247 - v26;
  v27 = sub_1BE1B206C();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v274 = (char *)&v247 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v259 = (char *)&v247 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v279 = (char *)&v247 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v299 = (char *)&v247 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v260 = (char *)&v247 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v253 = (char *)&v247 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v267 = (char *)&v247 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v266 = (char *)&v247 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v268 = (char *)&v247 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v273 = (char *)&v247 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v252 = (char *)&v247 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v255 = (char *)&v247 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v269 = (char *)&v247 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v271 = (char *)&v247 - v56;
  MEMORY[0x1E0C80A78](v55);
  v296 = (char *)&v247 - v57;
  v248 = type metadata accessor for Replica();
  v58 = *(_QWORD *)(v248 - 8);
  v59 = MEMORY[0x1E0C80A78](v248);
  v290 = (uint64_t)&v247 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = MEMORY[0x1E0C80A78](v59);
  v63 = (char *)&v247 - v62;
  v64 = MEMORY[0x1E0C80A78](v61);
  v263 = (uint64_t)&v247 - v65;
  MEMORY[0x1E0C80A78](v64);
  v300 = (unint64_t)&v247 - v66;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v68 = MEMORY[0x1E0C80A78](v67);
  v288 = (uint64_t)&v247 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = MEMORY[0x1E0C80A78](v68);
  v287 = (uint64_t)&v247 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v298 = (char *)&v247 - v73;
  MEMORY[0x1E0C80A78](v72);
  v289 = (uint64_t)&v247 - v74;
  v291 = v3;
  v75 = *v3;
  v76 = *(_QWORD *)(*v3 + 64);
  v264 = *v3 + 64;
  v77 = 1 << *(_BYTE *)(v75 + 32);
  v78 = -1;
  if (v77 < 64)
    v78 = ~(-1 << v77);
  v79 = v78 & v76;
  v80 = (unint64_t)(v77 + 63) >> 6;
  v249 = v80 - 1;
  v81 = swift_bridgeObjectRetain();
  v82 = 0;
  v272 = v80;
  v251 = v80 - 5;
  v280 = v81;
  v250 = v81 + 104;
  v292 = a2;
  v293 = v58;
  v297 = v63;
  if (!v79)
    goto LABEL_9;
LABEL_7:
  v83 = __clz(__rbit64(v79));
  v84 = (v79 - 1) & v79;
  v295 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v82;
  v85 = v83 | ((_QWORD)v82 << 6);
  v86 = (uint64_t)v298;
LABEL_8:
  v87 = v280;
  sub_1BDD9C318(*(_QWORD *)(v280 + 48) + *(_QWORD *)(v293 + 72) * v85, v86, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v88 = *(_QWORD *)(v87 + 56) + *(_QWORD *)(v28 + 72) * v85;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v90 = v88;
  v86 = (uint64_t)v298;
  (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(&v298[*(int *)(v89 + 48)], v90, v27);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v86, 0, 1, v89);
  while (1)
  {
    v95 = v86;
    v96 = v289;
    sub_1BDDA2EF0(v95, v289, &qword_1ED6F3CC0);
    v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    v98 = *(_QWORD **)(v97 - 8);
    v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98[6];
    v100 = v99(v96, 1, v97);
    v101 = v300;
    if (v100 == 1)
    {
      v295 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v99;
      swift_release();
      v187 = *(_QWORD *)(a2 + 64);
      v289 = a2 + 64;
      v188 = 1 << *(_BYTE *)(a2 + 32);
      v189 = -1;
      if (v188 < 64)
        v189 = ~(-1 << v188);
      v300 = v189 & v187;
      v190 = (unint64_t)(v188 + 63) >> 6;
      v284 = (char *)(v190 - 1);
      swift_bridgeObjectRetain();
      v191 = 0;
      v294 = v190;
      v285 = (char *)(v190 - 5);
      v286 = a2 + 104;
      v192 = v291;
      v193 = v279;
      v278 = v98;
      while (2)
      {
        if (v300)
        {
          v197 = __clz(__rbit64(v300));
          v300 &= v300 - 1;
          v298 = v191;
          v198 = v197 | ((_QWORD)v191 << 6);
          goto LABEL_76;
        }
        v229 = v191 + 1;
        if (__OFADD__(v191, 1))
          goto LABEL_131;
        if ((uint64_t)v229 >= v294)
        {
          v298 = v191;
          v300 = 0;
          v200 = 1;
          v199 = v288;
          goto LABEL_77;
        }
        v230 = *(_QWORD *)(v289 + 8 * (_QWORD)v229);
        if (!v230)
        {
          if ((uint64_t)(v191 + 2) >= v294)
          {
            v300 = 0;
            v200 = 1;
          }
          else
          {
            v230 = *(_QWORD *)(v289 + 8 * (_QWORD)(v191 + 2));
            if (v230)
            {
              v229 = v191 + 2;
              goto LABEL_98;
            }
            if ((uint64_t)(v191 + 3) >= v294)
            {
              v300 = 0;
              v200 = 1;
              v298 = v191 + 2;
              v199 = v288;
              goto LABEL_77;
            }
            v230 = *(_QWORD *)(v289 + 8 * (_QWORD)(v191 + 3));
            if (v230)
            {
              v229 = v191 + 3;
              goto LABEL_98;
            }
            v229 = v191 + 4;
            if ((uint64_t)(v191 + 4) >= v294)
            {
              v300 = 0;
              v200 = 1;
              v298 = v191 + 3;
              v199 = v288;
              goto LABEL_77;
            }
            v230 = *(_QWORD *)(v289 + 8 * (_QWORD)v229);
            if (v230)
              goto LABEL_98;
            while (v285 != v191)
            {
              v230 = *(_QWORD *)(v286 + 8 * (_QWORD)v191++);
              if (v230)
              {
                v229 = v191 + 4;
                goto LABEL_98;
              }
            }
            v300 = 0;
            v200 = 1;
            v229 = v284;
          }
          v298 = v229;
          v199 = v288;
          goto LABEL_77;
        }
LABEL_98:
        v300 = (v230 - 1) & v230;
        v198 = __clz(__rbit64(v230)) + ((_QWORD)v229 << 6);
        v298 = v229;
LABEL_76:
        v199 = v288;
        sub_1BDD9C318(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v293 + 72) * v198, v288, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16))(v199 + *(int *)(v97 + 48), *(_QWORD *)(a2 + 56) + *(_QWORD *)(v28 + 72) * v198, v27);
        v200 = 0;
LABEL_77:
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v98[7])(v199, v200, 1, v97);
        v201 = v199;
        v202 = v287;
        sub_1BDDA2EF0(v201, v287, &qword_1ED6F3CC0);
        if (v295(v202, 1, v97) == 1)
          return swift_release();
        v203 = v202 + *(int *)(v97 + 48);
        sub_1BDDA2E8C(v202, (uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v296 = *(char **)(v28 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v296)(v299, v203, v27);
        v204 = *v192;
        if (*(_QWORD *)(*v192 + 16) && (v205 = sub_1BDDB3EC0((uint64_t)v63), (v206 & 1) != 0))
        {
          v207 = *(_QWORD *)(v204 + 56) + *(_QWORD *)(v28 + 72) * v205;
          v208 = (uint64_t)v283;
          (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v283, v207, v27);
          v209 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
          v209(v208, 0, 1, v27);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v208, 1, v27) != 1)
          {
            sub_1BDD86E30(v208, &qword_1ED6F3C78);
            v196 = *(void (**)(char *, uint64_t))(v28 + 8);
            goto LABEL_100;
          }
        }
        else
        {
          v209 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
          v208 = (uint64_t)v283;
          v209((uint64_t)v283, 1, 1, v27);
        }
        sub_1BDD86E30(v208, &qword_1ED6F3C78);
        v210 = v282;
        if (*(_QWORD *)(v282 + 16) && (v211 = sub_1BDDB3EC0((uint64_t)v297), (v212 & 1) != 0))
        {
          v213 = *(_QWORD *)(v210 + 56) + *(_QWORD *)(v28 + 72) * v211;
          v214 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
          v215 = (uint64_t)v281;
          v214(v281, v213, v27);
          v209(v215, 0, 1, v27);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v215, 1, v27) != 1)
          {
            v216 = v259;
            ((void (*)(char *, uint64_t, uint64_t))v296)(v259, v215, v27);
            v217 = v299;
            v214(v273, (unint64_t)v299, v27);
            v214(v266, (unint64_t)v217, v27);
            v214(v267, (unint64_t)v216, v27);
            sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
            v218 = v268;
            sub_1BE1B2F6C();
            a2 = v292;
            sub_1BE1B2F54();
            v219 = *(void (**)(char *, uint64_t))(v28 + 8);
            v220 = v218;
            v98 = v278;
            v219(v220, v27);
            v221 = v216;
            v193 = v279;
            v219(v221, v27);
            goto LABEL_89;
          }
        }
        else
        {
          v215 = (uint64_t)v281;
          v209((uint64_t)v281, 1, 1, v27);
        }
        sub_1BDD86E30(v215, &qword_1ED6F3C78);
        v214 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        v214(v193, (unint64_t)v299, v27);
LABEL_89:
        if (sub_1BE1B1FB8() < 1)
        {
          v196 = *(void (**)(char *, uint64_t))(v28 + 8);
          v196(v193, v27);
          v192 = v291;
LABEL_100:
          v63 = v297;
        }
        else
        {
          v222 = v290;
          sub_1BDD9C318((uint64_t)v297, v290, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v223 = (uint64_t)v275;
          v214(v275, (unint64_t)v193, v27);
          v209(v223, 0, 1, v27);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v223, 1, v27) == 1)
          {
            sub_1BDD86E30(v223, &qword_1ED6F3C78);
            v192 = v291;
            swift_bridgeObjectRetain();
            v224 = sub_1BDDB3EC0(v222);
            v226 = v225;
            swift_bridgeObjectRelease();
            if ((v226 & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v228 = *v192;
              v301 = (_QWORD *)*v192;
              *v192 = 0x8000000000000000;
              if (!isUniquelyReferenced_nonNull_native)
              {
                sub_1BDDB4348();
                v228 = (uint64_t)v301;
              }
              sub_1BDD9C3E0(*(_QWORD *)(v228 + 48) + *(_QWORD *)(v293 + 72) * v224, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
              v195 = (uint64_t)v265;
              ((void (*)(char *, unint64_t, uint64_t))v296)(v265, *(_QWORD *)(v228 + 56) + *(_QWORD *)(v28 + 72) * v224, v27);
              sub_1BDDB4BD4(v224, v228);
              *v192 = v228;
              swift_bridgeObjectRelease();
              v194 = 0;
              a2 = v292;
            }
            else
            {
              v194 = 1;
              a2 = v292;
              v195 = (uint64_t)v265;
            }
            v209(v195, v194, 1, v27);
            sub_1BDD9C3E0(v290, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDD86E30(v195, &qword_1ED6F3C78);
            v193 = v279;
            v63 = v297;
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t))v296)(v274, v223, v27);
            v231 = v291;
            v232 = swift_isUniquelyReferenced_nonNull_native();
            v301 = (_QWORD *)*v231;
            v233 = v301;
            *v231 = 0x8000000000000000;
            v235 = sub_1BDDB3EC0(v222);
            v236 = v233[2];
            v237 = (v234 & 1) == 0;
            v238 = v236 + v237;
            if (__OFADD__(v236, v237))
              goto LABEL_132;
            v239 = v234;
            if (v233[3] >= v238)
            {
              v193 = v279;
              if ((v232 & 1) == 0)
                sub_1BDDB4348();
            }
            else
            {
              sub_1BDDB46CC(v238, v232);
              v240 = sub_1BDDB3EC0(v290);
              v193 = v279;
              if ((v239 & 1) != (v241 & 1))
                goto LABEL_134;
              v235 = v240;
            }
            v63 = v297;
            v242 = v301;
            if ((v239 & 1) != 0)
            {
              (*(void (**)(unint64_t, char *, uint64_t))(v28 + 40))(v301[7] + *(_QWORD *)(v28 + 72) * v235, v274, v27);
            }
            else
            {
              v301[(v235 >> 6) + 8] |= 1 << v235;
              sub_1BDD9C318(v290, v242[6] + *(_QWORD *)(v293 + 72) * v235, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
              ((void (*)(unint64_t, char *, uint64_t))v296)(v242[7] + *(_QWORD *)(v28 + 72) * v235, v274, v27);
              v243 = v242[2];
              v244 = __OFADD__(v243, 1);
              v245 = v243 + 1;
              if (v244)
                goto LABEL_133;
              v242[2] = v245;
            }
            v192 = v291;
            *v291 = (uint64_t)v301;
            swift_bridgeObjectRelease();
            sub_1BDD9C3E0(v290, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            a2 = v292;
          }
          v196 = *(void (**)(char *, uint64_t))(v28 + 8);
          v196(v193, v27);
        }
        v196(v299, v27);
        sub_1BDD9C3E0((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v191 = v298;
        continue;
      }
    }
    v102 = v96;
    v103 = v96 + *(int *)(v97 + 48);
    sub_1BDDA2E8C(v102, v300, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v104 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
    v104(v296, v103, v27);
    v105 = *(_QWORD *)(a2 + 16);
    v294 = v84;
    if (!v105 || (v106 = sub_1BDDB3EC0(v101), (v107 & 1) == 0))
    {
      v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
      v115 = v284;
      v111(v284, 1, 1, v27);
      v114 = (uint64_t)v115;
      v113 = (uint64_t)v285;
      goto LABEL_21;
    }
    v108 = *(_QWORD *)(a2 + 56);
    v109 = *(_QWORD *)(v28 + 72);
    v110 = v284;
    v277 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
    v277(v284, v108 + v109 * v106, v27);
    v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v111(v110, 0, 1, v27);
    v278 = *(_QWORD **)(v28 + 48);
    v112 = ((uint64_t (*)(char *, uint64_t, uint64_t))v278)(v110, 1, v27);
    v113 = (uint64_t)v285;
    if (v112 == 1)
    {
      v114 = (uint64_t)v110;
LABEL_21:
      v116 = v286;
      goto LABEL_22;
    }
    v276 = v104;
    v104(v269, (uint64_t)v110, v27);
    v116 = v286;
    if (!*(_QWORD *)(v286 + 16) || (v138 = sub_1BDDB3EC0(v300), (v139 & 1) == 0))
    {
      v140 = v261;
      v111(v261, 1, 1, v27);
LABEL_40:
      (*(void (**)(char *, uint64_t))(v28 + 8))(v269, v27);
      v114 = (uint64_t)v140;
      v104 = v276;
LABEL_22:
      sub_1BDD86E30(v114, &qword_1ED6F3C78);
      if (!*(_QWORD *)(v116 + 16) || (v117 = sub_1BDDB3EC0(v300), (v118 & 1) == 0))
      {
        v111((char *)v113, 1, 1, v27);
LABEL_6:
        (*(void (**)(char *, uint64_t))(v28 + 8))(v296, v27);
        sub_1BDD9C3E0(v300, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD86E30(v113, &qword_1ED6F3C78);
        a2 = v292;
        v79 = v294;
        v82 = (char *)v295;
        if (v294)
          goto LABEL_7;
        goto LABEL_9;
      }
      v119 = *(_QWORD *)(v28 + 72);
      v120 = *(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16);
      v120(v113, *(_QWORD *)(v116 + 56) + v119 * v117, v27);
      v111((char *)v113, 0, 1, v27);
      v278 = *(_QWORD **)(v28 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v278)(v113, 1, v27) == 1)
        goto LABEL_6;
      v262 = v119;
      v121 = v260;
      v276 = v104;
      v104(v260, v113, v27);
      v122 = v296;
      v120((uint64_t)v273, (unint64_t)v296, v27);
      v120((uint64_t)v266, (unint64_t)v122, v27);
      v277 = (void (*)(char *, unint64_t, uint64_t))v120;
      v120((uint64_t)v267, (unint64_t)v121, v27);
      sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
      v123 = v268;
      sub_1BE1B2F6C();
      v124 = v271;
      sub_1BE1B2F54();
      v125 = *(void (**)(char *, uint64_t))(v28 + 8);
      v125(v123, v27);
      v270 = v125;
      v125(v121, v27);
      goto LABEL_26;
    }
    v140 = v261;
    v277(v261, *(_QWORD *)(v116 + 56) + v138 * v109, v27);
    v111(v140, 0, 1, v27);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v278)(v140, 1, v27) == 1)
      goto LABEL_40;
    v141 = v140;
    v142 = v276;
    v276(v255, (uint64_t)v141, v27);
    v143 = v282;
    v144 = *(_QWORD *)(v282 + 16);
    v262 = v109;
    if (v144 && (v145 = sub_1BDDB3EC0(v300), (v146 & 1) != 0))
    {
      v147 = *(_QWORD *)(v143 + 56) + v145 * v109;
      v148 = (uint64_t)v254;
      v149 = (void (*)(char *, char *, uint64_t))v277;
      v277(v254, v147, v27);
      v111((char *)v148, 0, 1, v27);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v278)(v148, 1, v27) != 1)
      {
        v142(v252, v148, v27);
        v150 = v255;
        v149(v268, v255, v27);
        v151 = v267;
        v149(v267, v150, v27);
        v152 = v253;
        v149(v253, v269, v27);
        v270 = (void (*)(char *, uint64_t))sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
        v153 = v266;
        sub_1BE1B2F6C();
        v154 = v273;
        v155 = v268;
        sub_1BE1B2F54();
        v156 = *(void (**)(char *, uint64_t))(v28 + 8);
        v156(v153, v27);
        v157 = v155;
        v158 = v296;
        v149(v157, v296, v27);
        v149(v151, v158, v27);
        v149(v152, v154, v27);
        sub_1BE1B2F6C();
        v159 = v149;
        v160 = v268;
        sub_1BE1B2F54();
        v156(v153, v27);
        v156(v154, v27);
        v161 = v160;
        v162 = v269;
        v149(v161, v269, v27);
        v149(v267, v162, v27);
        v163 = v252;
        v159(v253, v252, v27);
        sub_1BE1B2F6C();
        v164 = v273;
        v124 = v271;
        sub_1BE1B2F54();
        v156(v153, v27);
        sub_1BE1B2048();
        v156(v164, v27);
        v156(v163, v27);
        v156(v255, v27);
        v270 = v156;
        v156(v269, v27);
        goto LABEL_26;
      }
    }
    else
    {
      v148 = (uint64_t)v254;
      v111(v254, 1, 1, v27);
      v149 = (void (*)(char *, char *, uint64_t))v277;
    }
    sub_1BDD86E30(v148, &qword_1ED6F3C78);
    v180 = v296;
    v149(v273, v296, v27);
    v149(v266, v180, v27);
    v181 = v255;
    v149(v267, v255, v27);
    sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
    v182 = v268;
    sub_1BE1B2F6C();
    v183 = v271;
    sub_1BE1B2F54();
    v184 = *(void (**)(char *, uint64_t))(v28 + 8);
    v185 = v182;
    v124 = v183;
    v184(v185, v27);
    v186 = v269;
    sub_1BE1B2048();
    v184(v181, v27);
    v270 = v184;
    v184(v186, v27);
LABEL_26:
    v126 = sub_1BE1B1FB8();
    v127 = v263;
    if (v126 < 1)
    {
      v165 = v291;
      swift_bridgeObjectRetain();
      v166 = sub_1BDDB3EC0(v300);
      v168 = v167;
      swift_bridgeObjectRelease();
      v169 = v293;
      v79 = v294;
      v63 = v297;
      if ((v168 & 1) != 0)
      {
        v170 = swift_isUniquelyReferenced_nonNull_native();
        v171 = *v165;
        v301 = (_QWORD *)*v165;
        *v165 = 0x8000000000000000;
        if (!v170)
        {
          sub_1BDDB4348();
          v171 = (uint64_t)v301;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v171 + 48) + *(_QWORD *)(v169 + 72) * v166, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v172 = v257;
        v276(v257, *(_QWORD *)(v171 + 56) + v262 * v166, v27);
        sub_1BDDB4BD4(v166, v171);
        *v165 = v171;
        swift_bridgeObjectRelease();
        v173 = 0;
        a2 = v292;
      }
      else
      {
        v173 = 1;
        a2 = v292;
        v172 = v257;
      }
      v111(v172, v173, 1, v27);
      v178 = (uint64_t)v172;
    }
    else
    {
      sub_1BDD9C318(v300, v263, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v128 = (uint64_t)v258;
      v277(v258, (unint64_t)v124, v27);
      v111((char *)v128, 0, 1, v27);
      v129 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v278)(v128, 1, v27);
      v63 = v297;
      v79 = v294;
      if (v129 != 1)
      {
        v174 = v127;
        v175 = (uint64_t)v273;
        v276(v273, v128, v27);
        v176 = v291;
        v177 = swift_isUniquelyReferenced_nonNull_native();
        v301 = (_QWORD *)*v176;
        *v176 = 0x8000000000000000;
        sub_1BE154038(v175, v174, v177);
        *v176 = (uint64_t)v301;
        swift_bridgeObjectRelease();
        sub_1BDD9C3E0(v174, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        a2 = v292;
        goto LABEL_54;
      }
      sub_1BDD86E30(v128, &qword_1ED6F3C78);
      v130 = v291;
      swift_bridgeObjectRetain();
      v131 = sub_1BDDB3EC0(v127);
      v133 = v132;
      swift_bridgeObjectRelease();
      if ((v133 & 1) != 0)
      {
        v134 = swift_isUniquelyReferenced_nonNull_native();
        v135 = *v130;
        v301 = (_QWORD *)*v130;
        *v130 = 0x8000000000000000;
        if (!v134)
        {
          sub_1BDDB4348();
          v135 = (uint64_t)v301;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v135 + 48) + *(_QWORD *)(v293 + 72) * v131, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v136 = v256;
        v276(v256, *(_QWORD *)(v135 + 56) + v262 * v131, v27);
        sub_1BDDB4BD4(v131, v135);
        *v130 = v135;
        swift_bridgeObjectRelease();
        v137 = 0;
        a2 = v292;
      }
      else
      {
        v137 = 1;
        a2 = v292;
        v136 = v256;
      }
      v111(v136, v137, 1, v27);
      sub_1BDD9C3E0(v263, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v178 = (uint64_t)v136;
    }
    sub_1BDD86E30(v178, &qword_1ED6F3C78);
LABEL_54:
    v179 = v270;
    v270(v271, v27);
    v179(v296, v27);
    sub_1BDD9C3E0(v300, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v82 = (char *)v295;
    if (v79)
      goto LABEL_7;
LABEL_9:
    v91 = (int64_t)(v82 + 1);
    if (__OFADD__(v82, 1))
      break;
    v86 = (uint64_t)v298;
    if (v91 >= v272)
    {
      v93 = v82;
    }
    else
    {
      v92 = *(_QWORD *)(v264 + 8 * v91);
      if (v92)
        goto LABEL_12;
      v93 = v82 + 1;
      if ((uint64_t)(v82 + 2) < v272)
      {
        v92 = *(_QWORD *)(v264 + 8 * (_QWORD)(v82 + 2));
        if (v92)
        {
          v91 = (int64_t)(v82 + 2);
          goto LABEL_12;
        }
        v93 = v82 + 2;
        if ((uint64_t)(v82 + 3) < v272)
        {
          v92 = *(_QWORD *)(v264 + 8 * (_QWORD)(v82 + 3));
          if (v92)
          {
            v91 = (int64_t)(v82 + 3);
LABEL_12:
            v84 = (v92 - 1) & v92;
            v85 = __clz(__rbit64(v92)) + (v91 << 6);
            v295 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v91;
            goto LABEL_8;
          }
          v91 = (int64_t)(v82 + 4);
          v93 = v82 + 3;
          if ((uint64_t)(v82 + 4) < v272)
          {
            v92 = *(_QWORD *)(v264 + 8 * v91);
            if (v92)
              goto LABEL_12;
            while ((char *)v251 != v82)
            {
              v92 = *(_QWORD *)(v250 + 8 * (_QWORD)v82++);
              if (v92)
              {
                v91 = (int64_t)(v82 + 4);
                goto LABEL_12;
              }
            }
            v93 = (char *)v249;
          }
        }
      }
    }
    v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v86, 1, 1, v94);
    v84 = 0;
    v295 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v93;
  }
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDEEC99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  __int16 v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  _BOOL4 v107;
  unsigned int v108;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF740);
  MEMORY[0x1E0C80A78](v126);
  v139 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF738);
  v6 = MEMORY[0x1E0C80A78](v5);
  v131 = (uint64_t)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v121 = (uint64_t)&v110 - v9;
  MEMORY[0x1E0C80A78](v8);
  v132 = (uint64_t)&v110 - v10;
  v119 = type metadata accessor for Replica();
  v122 = *(_QWORD *)(v119 - 8);
  v11 = MEMORY[0x1E0C80A78](v119);
  v113 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v112 = (uint64_t)&v110 - v14;
  MEMORY[0x1E0C80A78](v13);
  v128 = (uint64_t)&v110 - v15;
  v16 = type metadata accessor for Timestamp(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v136 = (uint64_t)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v116 = (uint64_t)&v110 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v115 = (uint64_t)&v110 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v117 = (uint64_t)&v110 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v110 - v26;
  v28 = sub_1BE1B206C();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v137 = (char *)&v110 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v110 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v129 = (char *)&v110 - v35;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v138 = a2;
  v133 = v36;
  v134 = v16;
  v36(a2, 1, 1, v16);
  v37 = *(_QWORD *)(a1 + 64);
  v114 = a1 + 64;
  v38 = 1 << *(_BYTE *)(a1 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  v118 = (unint64_t)(v38 + 63) >> 6;
  v111 = v118 - 1;
  v123 = a1;
  swift_bridgeObjectRetain();
  v130 = 0;
  v120 = v17;
  v124 = v34;
  v125 = v27;
  v127 = v29;
  if (!v40)
    goto LABEL_10;
LABEL_8:
  v42 = __clz(__rbit64(v40));
  v43 = (v40 - 1) & v40;
  v44 = (uint64_t)v129;
  v45 = v42 | (v130 << 6);
LABEL_9:
  v46 = v123;
  sub_1BDD9C318(*(_QWORD *)(v123 + 48) + *(_QWORD *)(v122 + 72) * v45, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v47 = *(_QWORD *)(v46 + 56) + *(_QWORD *)(v29 + 72) * v45;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(&v34[*(int *)(v48 + 48)], v47, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v34, 0, 1, v48);
  while (1)
  {
    sub_1BDDA2EF0((uint64_t)v34, v44, &qword_1ED6F3CC0);
    v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v44, 1, v53) == 1)
      return swift_release();
    v135 = v43;
    v54 = v17;
    v55 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v137, v44 + *(int *)(v53 + 48), v28);
    v56 = v128;
    sub_1BDDA2E8C(v44, v128, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v57 = sub_1BE1B1FAC();
    if ((v58 & 1) != 0)
      goto LABEL_61;
    v59 = v57;
    sub_1BDDA2E8C(v56, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v60 = v134;
    *(_QWORD *)&v27[*(int *)(v134 + 20)] = v59;
    v61 = v132;
    v133(v132, 1, 1, v60);
    v62 = v139;
    v63 = v139 + *(int *)(v126 + 48);
    sub_1BDD86DEC(v138, v139, &qword_1ED6EF738);
    sub_1BDD86DEC(v61, v63, &qword_1ED6EF738);
    v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    if (v64(v62, 1, v60) == 1)
    {
      sub_1BDD86E30(v61, &qword_1ED6EF738);
      v65 = &qword_1ED6EF740;
      if (v64(v63, 1, v60) == 1)
      {
        sub_1BDD86E30(v139, &qword_1ED6EF738);
        v27 = v125;
        sub_1BDD9C318((uint64_t)v125, v136, type metadata accessor for Timestamp);
LABEL_6:
        sub_1BDD9C3E0(v136, type metadata accessor for Timestamp);
        v29 = v127;
        v28 = v55;
        (*(void (**)(char *, uint64_t))(v127 + 8))(v137, v55);
        v34 = v124;
        v17 = v54;
        v40 = v135;
LABEL_7:
        v41 = v138;
        sub_1BDD86E30(v138, &qword_1ED6EF738);
        sub_1BDDA2E8C((uint64_t)v27, v41, type metadata accessor for Timestamp);
        v133(v41, 0, 1, v134);
        if (v40)
          goto LABEL_8;
        goto LABEL_10;
      }
      goto LABEL_41;
    }
    v66 = v121;
    sub_1BDD86DEC(v139, v121, &qword_1ED6EF738);
    v65 = &qword_1ED6EF740;
    if (v64(v63, 1, v60) == 1)
      goto LABEL_40;
    v67 = v117;
    sub_1BDDA2E8C(v63, v117, type metadata accessor for Timestamp);
    v68 = *(int *)(v60 + 20);
    v69 = *(_QWORD *)(v66 + v68);
    v70 = *(_QWORD *)(v67 + v68);
    v71 = v115;
    sub_1BDD9C318(v66, v115, type metadata accessor for Timestamp);
    v72 = v116;
    sub_1BDD9C318(v67, v116, type metadata accessor for Timestamp);
    if (v69 != v70)
      goto LABEL_39;
    v73 = *(int *)(v119 + 20);
    v74 = *(_QWORD *)(v71 + v73);
    v75 = v71;
    v76 = *(_QWORD *)(v72 + v73);
    v77 = v112;
    sub_1BDD9C318(v75, v112, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v78 = v113;
    sub_1BDD9C318(v72, v113, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v74 != v76)
    {
      sub_1BDD9C3E0(v78, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDD9C3E0(v77, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v71 = v75;
      v67 = v117;
LABEL_39:
      sub_1BDD9C3E0(v72, type metadata accessor for Timestamp);
      sub_1BDD9C3E0(v71, type metadata accessor for Timestamp);
      sub_1BDD9C3E0(v67, type metadata accessor for Timestamp);
      v65 = &qword_1ED6EF738;
      v66 = v121;
      v60 = v134;
LABEL_40:
      sub_1BDD86E30(v132, &qword_1ED6EF738);
      sub_1BDD9C3E0(v66, type metadata accessor for Timestamp);
      v54 = v120;
LABEL_41:
      sub_1BDD86E30(v139, v65);
      v27 = v125;
      sub_1BDD9C318((uint64_t)v125, v136, type metadata accessor for Timestamp);
      goto LABEL_42;
    }
    v79 = sub_1BE1B1F10();
    sub_1BDD9C3E0(v78, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v77, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v72, type metadata accessor for Timestamp);
    sub_1BDD9C3E0(v75, type metadata accessor for Timestamp);
    sub_1BDD9C3E0(v117, type metadata accessor for Timestamp);
    sub_1BDD86E30(v132, &qword_1ED6EF738);
    sub_1BDD9C3E0(v121, type metadata accessor for Timestamp);
    sub_1BDD86E30(v139, &qword_1ED6EF738);
    v80 = (uint64_t)v125;
    sub_1BDD9C318((uint64_t)v125, v136, type metadata accessor for Timestamp);
    v27 = (char *)v80;
    v54 = v120;
    v60 = v134;
    if ((v79 & 1) != 0)
      goto LABEL_6;
LABEL_42:
    v81 = v131;
    sub_1BDD86DEC(v138, v131, &qword_1ED6EF738);
    v82 = v64(v81, 1, v60);
    v29 = v127;
    if (v82 == 1)
      goto LABEL_62;
    v83 = v60;
    v28 = v55;
    v84 = *(int *)(v83 + 20);
    v85 = *(_QWORD *)(v81 + v84);
    v86 = v136;
    v87 = *(_QWORD *)(v136 + v84);
    v34 = v124;
    if (v85 != v87)
    {
      v107 = v85 < v87;
      v17 = v54;
LABEL_50:
      v40 = v135;
      goto LABEL_55;
    }
    v88 = *(int *)(v119 + 20);
    v89 = *(_QWORD *)(v81 + v88);
    v90 = *(_QWORD *)(v136 + v88);
    v17 = v54;
    if (v89 != v90)
    {
      v107 = v89 < v90;
      goto LABEL_50;
    }
    v142 = sub_1BE1B1F40();
    LOWORD(v143) = v91;
    BYTE2(v143) = v92;
    BYTE3(v143) = v93;
    BYTE4(v143) = v94;
    BYTE5(v143) = v95;
    BYTE6(v143) = v96;
    HIBYTE(v143) = v97;
    v140 = sub_1BE1B1F40();
    LOWORD(v141) = v98;
    BYTE2(v141) = v99;
    BYTE3(v141) = v100;
    BYTE4(v141) = v101;
    BYTE5(v141) = v102;
    BYTE6(v141) = v103;
    HIBYTE(v141) = v104;
    v105 = bswap64(v142);
    v106 = bswap64(v140);
    v40 = v135;
    if (v105 == v106 && (v105 = bswap64(v143), v106 = bswap64(v141), v105 == v106))
    {
      v107 = 0;
    }
    else
    {
      if (v105 < v106)
        v108 = -1;
      else
        v108 = 1;
      v107 = v108 >> 31;
    }
LABEL_55:
    sub_1BDD9C3E0(v86, type metadata accessor for Timestamp);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v137, v28);
    sub_1BDD9C3E0(v131, type metadata accessor for Timestamp);
    if (v107)
      goto LABEL_7;
    sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Timestamp);
    if (v40)
      goto LABEL_8;
LABEL_10:
    v44 = (uint64_t)v129;
    v49 = v130 + 1;
    if (__OFADD__(v130, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
    }
    if (v49 < v118)
    {
      v50 = *(_QWORD *)(v114 + 8 * v49);
      if (v50)
        goto LABEL_13;
      v51 = v130 + 2;
      ++v130;
      if (v49 + 1 < v118)
      {
        v50 = *(_QWORD *)(v114 + 8 * v51);
        if (v50)
          goto LABEL_16;
        v130 = v49 + 1;
        if (v49 + 2 < v118)
        {
          v50 = *(_QWORD *)(v114 + 8 * (v49 + 2));
          if (v50)
          {
            v49 += 2;
            goto LABEL_13;
          }
          v51 = v49 + 3;
          v130 = v49 + 2;
          if (v49 + 3 < v118)
          {
            v50 = *(_QWORD *)(v114 + 8 * v51);
            if (v50)
            {
LABEL_16:
              v49 = v51;
LABEL_13:
              v43 = (v50 - 1) & v50;
              v45 = __clz(__rbit64(v50)) + (v49 << 6);
              v130 = v49;
              goto LABEL_9;
            }
            while (1)
            {
              v49 = v51 + 1;
              if (__OFADD__(v51, 1))
                goto LABEL_60;
              if (v49 >= v118)
                break;
              v50 = *(_QWORD *)(v114 + 8 * v49);
              ++v51;
              if (v50)
                goto LABEL_13;
            }
            v130 = v111;
          }
        }
      }
    }
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v34, 1, 1, v52);
    v43 = 0;
  }
}

uint64_t sub_1BDEED578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Replica();
  v61 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B206C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v55 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v65 = (uint64_t)&v55 - v20;
  v21 = *(_QWORD *)(a1 + 64);
  v58 = a1 + 64;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v66 = v23 & v21;
  v24 = (unint64_t)(v22 + 63) >> 6;
  v55 = v24 - 1;
  result = swift_bridgeObjectRetain();
  v63 = v19;
  v64 = 0;
  v59 = v24;
  v62 = a1;
  v56 = a1 + 104;
  v57 = v24 - 5;
  while (1)
  {
    if (v66)
    {
      v26 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      v27 = v26 | (v64 << 6);
      goto LABEL_7;
    }
    v31 = v64;
    v32 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v32 >= v59)
    {
      v34 = v64;
    }
    else
    {
      v33 = *(_QWORD *)(v58 + 8 * v32);
      if (v33)
        goto LABEL_11;
      v34 = v64 + 1;
      if ((uint64_t)(v64 + 2) < v59)
      {
        v33 = *(_QWORD *)(v58 + 8 * (v64 + 2));
        if (v33)
        {
          v32 = v64 + 2;
          goto LABEL_11;
        }
        v34 = v64 + 2;
        if ((uint64_t)(v64 + 3) < v59)
        {
          v33 = *(_QWORD *)(v58 + 8 * (v64 + 3));
          if (v33)
          {
            v32 = v64 + 3;
LABEL_11:
            v66 = (v33 - 1) & v33;
            v27 = __clz(__rbit64(v33)) + (v32 << 6);
            v64 = v32;
LABEL_7:
            v28 = v62;
            sub_1BDD9C318(*(_QWORD *)(v62 + 48) + *(_QWORD *)(v61 + 72) * v27, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v29 = *(_QWORD *)(v28 + 56) + *(_QWORD *)(v11 + 72) * v27;
            v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
            (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(&v19[*(int *)(v30 + 48)], v29, v10);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v19, 0, 1, v30);
            goto LABEL_14;
          }
          v32 = v64 + 4;
          v34 = v64 + 3;
          if ((uint64_t)(v64 + 4) < v59)
          {
            v33 = *(_QWORD *)(v58 + 8 * v32);
            if (v33)
              goto LABEL_11;
            while (v57 != v31)
            {
              v33 = *(_QWORD *)(v56 + 8 * v31++);
              if (v33)
              {
                v32 = v31 + 4;
                goto LABEL_11;
              }
            }
            v34 = v55;
          }
        }
      }
    }
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v19, 1, 1, v35);
    v66 = 0;
    v64 = v34;
LABEL_14:
    v36 = v65;
    sub_1BDDA2EF0((uint64_t)v19, v65, &qword_1ED6F3CC0);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37);
    if (v38 == 1)
      goto LABEL_36;
    v39 = v65;
    v40 = v65 + *(int *)(v37 + 48);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    v41(v15, v40, v10);
    sub_1BDDA2E8C(v39, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (*(_QWORD *)(a2 + 16))
    {
      v42 = sub_1BDDB3EC0((uint64_t)v9);
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v6, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v11 + 72) * v42, v10);
        v44 = 0;
      }
      else
      {
        v44 = 1;
      }
      v19 = v63;
    }
    else
    {
      v44 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v44, 1, v10);
    sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      result = sub_1BDD86E30((uint64_t)v6, &qword_1ED6F3C78);
    }
    else
    {
      v45 = v11;
      v46 = v10;
      v47 = v15;
      v48 = (uint64_t)v60;
      v41(v60, (uint64_t)v6, v46);
      v49 = sub_1BDEF5E94(v48);
      v50 = a2;
      v51 = v6;
      v52 = v9;
      v53 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v54 = v48;
      v15 = v47;
      v10 = v46;
      v11 = v45;
      v53(v54, v10);
      result = ((uint64_t (*)(char *, uint64_t))v53)(v15, v10);
      v9 = v52;
      v6 = v51;
      a2 = v50;
      v19 = v63;
      if (v49)
      {
LABEL_36:
        swift_release();
        return v38 != 1;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDEEDAB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;

  v72 = a3;
  v74 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Replica();
  v67 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v75 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B206C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v64 = (char *)&v59 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v59 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v59 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v59 - v24;
  v26 = *(_QWORD *)(a1 + 64);
  v61 = a1 + 64;
  v27 = 1 << *(_BYTE *)(a1 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v76 = v28 & v26;
  v66 = (unint64_t)(v27 + 63) >> 6;
  v60 = v66 - 1;
  v68 = a1;
  result = swift_bridgeObjectRetain();
  v70 = v25;
  v71 = 0;
  v73 = 0;
  v69 = v6;
  v62 = v19;
  v63 = v17;
  while (1)
  {
    if (v76)
    {
      v32 = __clz(__rbit64(v76));
      v76 &= v76 - 1;
      v33 = v32 | (v73 << 6);
LABEL_8:
      v34 = v68;
      sub_1BDD9C318(*(_QWORD *)(v68 + 48) + *(_QWORD *)(v67 + 72) * v33, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v35 = *(_QWORD *)(v34 + 56) + *(_QWORD *)(v10 + 72) * v33;
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(&v23[*(int *)(v36 + 48)], v35, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v23, 0, 1, v36);
      goto LABEL_27;
    }
    v37 = v73 + 1;
    if (__OFADD__(v73, 1))
      goto LABEL_48;
    if (v37 < v66)
    {
      v38 = *(_QWORD *)(v61 + 8 * v37);
      if (v38)
        goto LABEL_12;
      v39 = v73 + 2;
      ++v73;
      if (v37 + 1 < v66)
      {
        v38 = *(_QWORD *)(v61 + 8 * v39);
        if (v38)
          goto LABEL_15;
        v73 = v37 + 1;
        if (v37 + 2 < v66)
        {
          v38 = *(_QWORD *)(v61 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
LABEL_12:
            v76 = (v38 - 1) & v38;
            v33 = __clz(__rbit64(v38)) + (v37 << 6);
            v73 = v37;
            goto LABEL_8;
          }
          v39 = v37 + 3;
          v73 = v37 + 2;
          if (v37 + 3 < v66)
          {
            v38 = *(_QWORD *)(v61 + 8 * v39);
            if (!v38)
            {
              while (1)
              {
                v37 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_49;
                if (v37 >= v66)
                {
                  v73 = v60;
                  goto LABEL_26;
                }
                v38 = *(_QWORD *)(v61 + 8 * v37);
                ++v39;
                if (v38)
                  goto LABEL_12;
              }
            }
LABEL_15:
            v37 = v39;
            goto LABEL_12;
          }
        }
      }
    }
LABEL_26:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v23, 1, 1, v40);
    v76 = 0;
LABEL_27:
    sub_1BDDA2EF0((uint64_t)v23, (uint64_t)v25, &qword_1ED6F3CC0);
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v25, 1, v41) == 1)
      break;
    v42 = v23;
    v43 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v43(v19, &v25[*(int *)(v41 + 48)], v9);
    v44 = v75;
    sub_1BDDA2E8C((uint64_t)v25, v75, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v45 = v72;
    if (*(_QWORD *)(v72 + 16))
    {
      v46 = sub_1BDDB3EC0(v44);
      if ((v47 & 1) != 0)
      {
        v6 = v69;
        (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v69, *(_QWORD *)(v45 + 56) + *(_QWORD *)(v10 + 72) * v46, v9);
        v48 = 0;
      }
      else
      {
        v48 = 1;
        v6 = v69;
      }
    }
    else
    {
      v48 = 1;
    }
    v23 = v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, v48, 1, v9);
    sub_1BDD9C3E0(v75, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
    {
      sub_1BDD86E30((uint64_t)v6, &qword_1ED6F3C78);
      v30 = *v74 | 1;
      *v74 = v30;
      v31 = *(void (**)(char *, uint64_t))(v10 + 8);
      v25 = v70;
      goto LABEL_5;
    }
    v43(v17, v6, v9);
    if ((sub_1BE1B2018() & 1) != 0)
    {
      v49 = sub_1BE1B1FB8();
      v50 = 2 * (v49 != sub_1BE1B1FB8());
      v31 = *(void (**)(char *, uint64_t))(v10 + 8);
    }
    else
    {
      v51 = sub_1BE1B1FB8();
      v52 = sub_1BE1B1FB8();
      v53 = v19;
      v54 = v52;
      v55 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v56 = v64;
      v55(v64, v53, v9);
      v57 = v65;
      v55(v65, v17, v9);
      if (v54 >= v51)
      {
        v31 = *(void (**)(char *, uint64_t))(v10 + 8);
        v31(v57, v9);
        v31(v56, v9);
LABEL_40:
        v6 = v69;
        v19 = v62;
        v17 = v63;
        v23 = v42;
        v50 = 3;
        goto LABEL_41;
      }
      v58 = sub_1BE1B2018();
      v31 = *(void (**)(char *, uint64_t))(v10 + 8);
      v31(v57, v9);
      v31(v56, v9);
      if ((v58 & 1) == 0)
        goto LABEL_40;
      v50 = 1;
      v6 = v69;
      v19 = v62;
      v17 = v63;
      v23 = v42;
    }
LABEL_41:
    v25 = v70;
    *v74 |= v50;
    result = ((uint64_t (*)(char *, uint64_t))v31)(v17, v9);
    if (__OFADD__(v71, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    ++v71;
    v30 = *v74;
LABEL_5:
    result = ((uint64_t (*)(char *, uint64_t))v31)(v19, v9);
    if (v30 == 3)
      return swift_release();
  }
  result = swift_release();
  if (v71 != *(_QWORD *)(v72 + 16))
    *v74 |= 2uLL;
  return result;
}

uint64_t sub_1BDEEE13C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t (*v19)(uint64_t);

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    v17 = sub_1BDE5E0FC(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v18 & 1) != 0)
    {
      v19 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v17) + 96);
      swift_retain();
      swift_retain();
      LOBYTE(v19) = v19(v16);
      swift_release();
      result = swift_release();
      if ((v19 & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BDEEE2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  _QWORD *v28[12];

  v28[11] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v4 = sub_1BE1B203C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v27 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v19);
  v10 = type metadata accessor for Replica();
  v20 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v25 = (uint64_t)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_bridgeObjectRetain();
  v28[0] = (_QWORD *)sub_1BDEF80D8(v12);
  sub_1BDEF247C(v28);
  v18 = 0;
  swift_bridgeObjectRelease();
  if (v28[0][2])
  {
    v16 = (uint64_t)v28[0]
        + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v26 = xmmword_1BE1B61B0;
    v21 = a2;
    v24 = a1;
    v23 = v5;
    v15[1] = v9;
    v15[0] = v28[0];
    if (v28[0][2])
    {
      v22 = 1;
      sub_1BDD9C318(v16, v25, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDEE7C7C();
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x1BDEEECA4);
  }
  return swift_release();
}

uint64_t sub_1BDEEECF8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(_QWORD **, _QWORD);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t result;
  _QWORD v54[2];
  int64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;

  v0 = sub_1BE1B203C();
  v62 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1BE1B206C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v65);
  v68 = (uint64_t)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v8 = *(_QWORD *)(v64 - 8);
  v9 = MEMORY[0x1E0C80A78](v64);
  v63 = (uint64_t)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v67 = (uint64_t)v54 - v11;
  v12 = swift_bridgeObjectRetain();
  v70 = (_QWORD *)sub_1BDEF7CF8(v12);
  sub_1BDEF23F8(&v70);
  swift_bridgeObjectRelease();
  v13 = v70;
  v14 = v70[2];
  if (v14)
  {
    v75 = MEMORY[0x1E0DEE9D8];
    sub_1BDE224EC(0, v14, 0);
    v15 = 0;
    v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v54[1] = v13;
    v61 = (char *)v13 + v16;
    v60 = *(_QWORD *)(v8 + 72);
    v59 = xmmword_1BE1B61C0;
    v58 = v3;
    v57 = v4;
    v56 = v6;
    v55 = v14;
    while (1)
    {
      v66 = v15;
      v17 = v67;
      sub_1BDD86DEC((uint64_t)&v61[v60 * v15], v67, &qword_1ED6F3CB8);
      v18 = v63;
      v19 = *(int *)(v64 + 48);
      v20 = v63 + v19;
      v21 = v17 + v19;
      sub_1BDD9C318(v17, v63, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v20, v21, v3);
      v22 = v18;
      v23 = v68;
      sub_1BDDA2E8C(v22, v68, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v20, v3);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v59;
      v25 = sub_1BE1B1F40();
      v26 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEDE70];
      v27 = MEMORY[0x1E0DEDEC8];
      *(_QWORD *)(v24 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v24 + 32) = v25;
      v28 = sub_1BE1B1F40();
      *(_QWORD *)(v24 + 96) = v26;
      *(_QWORD *)(v24 + 104) = v27;
      *(_BYTE *)(v24 + 72) = BYTE1(v28);
      v70 = (_QWORD *)sub_1BE1B27EC();
      v71 = v29;
      sub_1BE1B284C();
      v73 = *(_QWORD **)(v23 + *(int *)(v65 + 20));
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      v73 = v70;
      v74 = v71;
      sub_1BE1B284C();
      sub_1BE1B2054();
      sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
      v30 = sub_1BE1B2C78();
      if (v30)
        break;
      v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_14:
      (*(void (**)(char *, uint64_t))(v62 + 8))(v2, v0);
      v70 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
      sub_1BDDA9D60((unint64_t *)&qword_1EF525508, &qword_1EF525500, MEMORY[0x1E0DEAF20]);
      sub_1BE1B2708();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v46 = v73;
      v47 = v74;
      v4 = v57;
      v6 = v56;
      v3 = v58;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
      sub_1BDD9C3E0(v68, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDD86E30(v67, &qword_1ED6F3CB8);
      v48 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE224EC(0, *(_QWORD *)(v48 + 16) + 1, 1);
        v48 = v75;
      }
      v49 = v66;
      v51 = *(_QWORD *)(v48 + 16);
      v50 = *(_QWORD *)(v48 + 24);
      if (v51 >= v50 >> 1)
      {
        sub_1BDE224EC(v50 > 1, v51 + 1, 1);
        v49 = v66;
        v48 = v75;
      }
      v15 = v49 + 1;
      *(_QWORD *)(v48 + 16) = v51 + 1;
      v52 = v48 + 16 * v51;
      *(_QWORD *)(v52 + 32) = v46;
      *(_QWORD *)(v52 + 40) = v47;
      if (v15 == v55)
      {
        swift_release();
        return v48;
      }
    }
    v31 = v30;
    v72 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1BDE224EC(0, v30 & ~(v30 >> 63), 0);
    v32 = v72;
    sub_1BE1B2C60();
    if ((v31 & 0x8000000000000000) == 0)
    {
      while (1)
      {
        v33 = (void (*)(_QWORD **, _QWORD))sub_1BE1B2D14();
        v35 = *(_QWORD **)v34;
        v36 = *(_QWORD *)(v34 + 8);
        v33(&v70, 0);
        v37 = __OFSUB__(v36, 1);
        v38 = (_QWORD *)(v36 - 1);
        if (v37)
          break;
        if (v35 == v38)
        {
          v70 = v35;
          v39 = (_QWORD *)sub_1BE1B32E4();
          v41 = v40;
        }
        else
        {
          v69 = v35;
          v70 = (_QWORD *)sub_1BE1B32E4();
          v71 = v42;
          sub_1BE1B284C();
          v69 = v38;
          sub_1BE1B32E4();
          sub_1BE1B284C();
          swift_bridgeObjectRelease();
          v39 = v70;
          v41 = v71;
        }
        v72 = v32;
        v44 = v32[2];
        v43 = v32[3];
        if (v44 >= v43 >> 1)
        {
          sub_1BDE224EC(v43 > 1, v44 + 1, 1);
          v32 = v72;
        }
        v32[2] = v44 + 1;
        v45 = &v32[2 * v44];
        v45[4] = v39;
        v45[5] = v41;
        sub_1BE1B2C9C();
        if (!--v31)
          goto LABEL_14;
      }
      __break(1u);
    }
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1BDEEF3A8()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_1BE1B36F8();
  sub_1BDEF5748(v3, v1);
  return sub_1BE1B371C();
}

uint64_t sub_1BDEEF3EC(__int128 *a1)
{
  uint64_t *v1;

  return sub_1BDEF5748(a1, *v1);
}

uint64_t sub_1BDEEF3F4()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  sub_1BE1B36F8();
  sub_1BDEF5748(v3, v1);
  return sub_1BE1B371C();
}

uint64_t sub_1BDEEF434(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDDBDDBC(*a1, *a2);
}

uint64_t CRVersion.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, a1, v9);
  *(_QWORD *)&v7[*(int *)(v5 + 20)] = 0;
  if (*(_QWORD *)(v8 + 16) && (v10 = sub_1BDDB3EC0((uint64_t)v7), (v11 & 1) != 0))
  {
    v12 = v10;
    v13 = *(_QWORD *)(v8 + 56);
    v14 = sub_1BE1B206C();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(a2, v13 + *(_QWORD *)(v15 + 72) * v12, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v16 = sub_1BE1B206C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
  return sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
}

uint64_t sub_1BDEEF568(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Replica();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v41 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v41 - v15;
  v17 = sub_1BE1B1F58();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v20;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v19, a3, v17);
  v43 = v17;
  v21(v16, (uint64_t)v19, v17);
  v41 = v8;
  *(_QWORD *)&v16[*(int *)(v8 + 20)] = 0;
  sub_1BDD9C318((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v44 = v14;
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v46 = *a2;
  v23 = v46;
  *a2 = 0x8000000000000000;
  v25 = sub_1BDDB3EC0((uint64_t)v11);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
    goto LABEL_10;
  }
  LOBYTE(v21) = v24;
  if (*(_QWORD *)(v23 + 24) >= v28)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v36 = sub_1BE1B206C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v7, 1, 1, v36);
      goto LABEL_12;
    }
LABEL_10:
    sub_1BDDB4348();
    if ((v21 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  sub_1BDDB46CC(v28, isUniquelyReferenced_nonNull_native);
  v29 = sub_1BDDB3EC0((uint64_t)v11);
  if ((v21 & 1) == (v30 & 1))
  {
    v25 = v29;
    if ((v21 & 1) == 0)
      goto LABEL_11;
LABEL_8:
    v31 = *(_QWORD *)(v46 + 56);
    v32 = sub_1BE1B206C();
    v33 = a2;
    v34 = *(_QWORD *)(v32 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v34 + 32))(v7, v31 + *(_QWORD *)(v34 + 72) * v25, v32);
    v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
    a2 = v33;
    v35(v7, 0, 1, v32);
LABEL_12:
    v38 = v43;
    v37 = (uint64_t)v44;
    v39 = v42;
    sub_1BDEF230C(v45, (uint64_t)v7);
    sub_1BDE67C0C((uint64_t)v7, v21 & 1, &v46, v25, (uint64_t)v11);
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3C78);
    sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    *a2 = v46;
    sub_1BDD9C3E0(v37, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v19, v38);
  }
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

void (*CRVersion.subscript.modify(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for Replica();
  v6 = (char *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  v7 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a2, v7);
  *(_QWORD *)&v6[*(int *)(v5 + 20)] = 0;
  v4[5] = sub_1BDE52510(v4, (uint64_t)v6);
  return sub_1BDD935D0;
}

uint64_t CRVersion.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v42 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Replica();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v38 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t)&v38 - v15;
  v17 = sub_1BE1B1F58();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a2;
  v41 = v20;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v19, a2, v17);
  v43 = v19;
  v21((char *)v16, (uint64_t)v19, v17);
  *(_QWORD *)(v16 + *(int *)(v8 + 20)) = 0;
  v44 = v16;
  sub_1BDD9C318(v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v45 = *v3;
  v23 = v45;
  *v3 = 0x8000000000000000;
  v25 = sub_1BDDB3EC0((uint64_t)v11);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
    goto LABEL_10;
  }
  LOBYTE(v16) = v24;
  if (*(_QWORD *)(v23 + 24) >= v28)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v34 = sub_1BE1B206C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v7, 1, 1, v34);
      goto LABEL_12;
    }
LABEL_10:
    sub_1BDDB4348();
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  sub_1BDDB46CC(v28, isUniquelyReferenced_nonNull_native);
  v29 = sub_1BDDB3EC0((uint64_t)v11);
  if ((v16 & 1) == (v30 & 1))
  {
    v25 = v29;
    if ((v16 & 1) == 0)
      goto LABEL_11;
LABEL_8:
    v31 = *(_QWORD *)(v45 + 56);
    v32 = sub_1BE1B206C();
    v39 = v14;
    v33 = *(_QWORD *)(v32 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v33 + 32))(v7, v31 + *(_QWORD *)(v33 + 72) * v25, v32);
    v14 = v39;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v7, 0, 1, v32);
LABEL_12:
    v35 = v42;
    sub_1BDEF230C(v42, (uint64_t)v7);
    sub_1BDE67C0C((uint64_t)v7, v16 & 1, &v45, v25, (uint64_t)v11);
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3C78);
    sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    *v3 = v45;
    sub_1BDD9C3E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v44, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v36 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v36(v40, v17);
    sub_1BDD86E30(v35, &qword_1ED6F3C78);
    return ((uint64_t (*)(char *, uint64_t))v36)(v43, v17);
  }
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CRVersion.needToFinalizeTimestamps()()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) != 0;
}

uint64_t CRVersion.finalizeTimestamps(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
  {
    v2 = qword_1ED6F4510;
    swift_bridgeObjectRetain();
    v3 = swift_bridgeObjectRetain();
    if (v2 != -1)
      v3 = swift_once();
    MEMORY[0x1E0C80A78](v3);
    swift_retain();
    sub_1BE1B2E40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = swift_release();
    sub_1BDDB2D90(v4, 0, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CRVersion.finalized(_:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = v1[1];
  v4 = *(_QWORD *)(v3 + 16);
  *a1 = *v1;
  a1[1] = v3;
  if (v4)
  {
    v5 = qword_1ED6F4510;
    swift_bridgeObjectRetain();
    v6 = swift_bridgeObjectRetain();
    if (v5 != -1)
      v6 = swift_once();
    MEMORY[0x1E0C80A78](v6);
    swift_retain();
    sub_1BE1B2E40();
    v7 = swift_release();
    sub_1BDDB2D90(v7, 0, v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t CRVersion.__hasDelta(from:)()
{
  return 0;
}

uint64_t CRVersion.description.getter()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5254F8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BE1B61C0;
  *(_QWORD *)(v0 + 32) = sub_1BDEEECF8();
  *(_QWORD *)(v0 + 40) = sub_1BDEEECF8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525528);
  sub_1BDEF2354();
  sub_1BE1B2708();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t CRVersion.init(from:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];
  __int128 v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRelease_n();
  v8 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v8, (uint64_t)v7, &qword_1ED6F3770);
  v9 = type metadata accessor for Proto_Value(0);
  LODWORD(v8) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9);
  sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3770);
  if ((_DWORD)v8 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000017;
    *(_QWORD *)(v10 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v10 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDE14CF8(&v13);
    result = swift_release();
    if (!v2)
      *a2 = v13;
  }
  return result;
}

uint64_t CRVersion.encode(to:)()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[3];

  v2 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (_QWORD *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7[0] = *v0;
  result = sub_1BDE25870();
  if (!v1)
  {
    v7[1] = v7[0];
    v6 = *(_QWORD *)(result + 16);
    swift_retain();
    sub_1BDDAD780(v6, v4);
    swift_beginAccess();
    sub_1BE128B60((uint64_t)v4);
    return swift_release();
  }
  return result;
}

void CRVersion.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CRVersion.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1BDEF5748(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t CRVersion.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[1];
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v4, v2);
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

uint64_t sub_1BDEF0314()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[1];
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v4, v2);
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

uint64_t sub_1BDEF0384(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1BDEF5748(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDEF03E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[1];
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v4, v2);
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

BOOL sub_1BDEF0450()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) != 0;
}

uint64_t sub_1BDEF0468(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if ((sub_1BDDBDDBC(a1[1], a2[1]) & 1) != 0)
    return sub_1BDDBDDBC(v2, v3);
  else
    return 0;
}

uint64_t sub_1BDEF04A8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return CRVersion.init(from:)(a1, a2);
}

uint64_t sub_1BDEF04BC()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[3];

  v2 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (_QWORD *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7[0] = *v0;
  result = sub_1BDE25870();
  if (!v1)
  {
    v7[1] = v7[0];
    v6 = *(_QWORD *)(result + 16);
    swift_retain();
    sub_1BDDAD780(v6, v4);
    swift_beginAccess();
    sub_1BE128B60((uint64_t)v4);
    return swift_release();
  }
  return result;
}

_QWORD *sub_1BDEF0598@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  _QWORD *result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BDDB3EC0(a1);
  LOBYTE(a1) = v7;
  result = (_QWORD *)swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDE63924();
      v10 = v13;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for Replica();
    sub_1BDD9C3E0(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDDB4F58((_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v6), v14);
    sub_1BDEF0D00(v6, v10);
    *v3 = v10;
    swift_bridgeObjectRelease();
    return sub_1BDDB4F58(v14, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_1BDEF068C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BDD901B8(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDE63B68();
      v11 = v14;
    }
    v12 = *(_QWORD *)(v11 + 48);
    v13 = sub_1BE1B1DF0();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v6, v13);
    sub_1BDDF32F4();
    sub_1BDEF0F84(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

double sub_1BDEF0780@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BDDC4B9C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDE6461C();
      v9 = v11;
    }

    sub_1BDE77688((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1BDEF125C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1BDEF0864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1BDE5E12C(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v16 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDE65630();
      v12 = v16;
    }
    sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v8 + 8));
    v13 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v8);
    v15 = *v13;
    v14 = v13[1];
    *a3 = v15;
    a3[1] = v14;
    sub_1BDEF1620(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

double sub_1BDEF0954@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  double result;
  uint64_t v15;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1BDDB7F0C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDDB7F70();
      v11 = v15;
    }
    sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8 + 8));
    v12 = (_OWORD *)(*(_QWORD *)(v11 + 56) + 48 * v8);
    v13 = v12[1];
    *a3 = *v12;
    a3[1] = v13;
    a3[2] = v12[2];
    sub_1BDEF1804(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

double sub_1BDEF0A54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1BDDB7F0C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDE66538();
      v11 = v13;
    }
    sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8 + 8));
    sub_1BDE77688((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_1BDEF19F8(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1BDEF0B44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_1BDDAE974(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1BDE668C0();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = sub_1BE1B1F58();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_1BDEF1DCC(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1BDEF0C1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BDE5E12C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1BDE66AF0();
    v9 = v12;
  }
  sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v6), *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v6 + 8));
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
  sub_1BDEF1620(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1BDEF0D00(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = type metadata accessor for Replica();
  v4 = *(_QWORD *)(v27 - 8);
  result = MEMORY[0x1E0C80A78](v27);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v26 = a2 + 64;
    result = sub_1BE1B2F84();
    v11 = v26;
    if ((*(_QWORD *)(v26 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v4 + 72);
      while (1)
      {
        v14 = v13 * v9;
        sub_1BDD9C318(*(_QWORD *)(a2 + 48) + v13 * v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BE1B36F8();
        sub_1BE1B1F28();
        sub_1BE1B3704();
        v15 = sub_1BE1B371C();
        result = sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v16 = v15 & v10;
        if (a1 >= (uint64_t)v12)
          break;
        if (v16 < v12)
          goto LABEL_11;
LABEL_12:
        if (v13 * a1 < v14 || *(_QWORD *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v14 + v13))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 * a1 != v14)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v17 = *(_QWORD *)(a2 + 56);
        result = v17 + 16 * a1;
        if (a1 < (uint64_t)v9 || result >= v17 + 16 * v9 + 16)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v18 = a1 == v9;
          a1 = v9;
          if (v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
        v11 = v26;
        if (((*(_QWORD *)(v26 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_21;
      }
      if (v16 < v12)
        goto LABEL_6;
LABEL_11:
      if (a1 < (uint64_t)v16)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v19 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v20 = *v19;
    v21 = (-1 << a1) - 1;
  }
  else
  {
    v19 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v21 = *v19;
    v20 = (-1 << a1) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF0F84(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;

  v4 = sub_1BE1B1DF0();
  v33 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v32 = (result + 1) & v11;
      v12 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v31(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
        v18 = sub_1BE1B26D8();
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (v15 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            result = v22 + 8 * a1;
            if (a1 < (uint64_t)v10 || result >= v22 + 8 * v10 + 8)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v12 = v15;
              v13 = v17;
            }
            else
            {
              v23 = a1 == v10;
              a1 = v10;
              v12 = v15;
              v13 = v17;
              if (!v23)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                v12 = v15;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v24;
    v26 = (-1 << a1) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF125C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        sub_1BE1B27C8();
        sub_1BE1B36F8();
        v11 = v10;
        sub_1BE1B2834();
        v12 = sub_1BE1B371C();

        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF144C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1BE1B36F8();
        swift_bridgeObjectRetain();
        sub_1BE1B2834();
        v9 = sub_1BE1B371C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF1620(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        sub_1BE1B36F8();
        sub_1BDDB6CA4(v10, v11);
        sub_1BE1B1E8C();
        v12 = sub_1BE1B371C();
        result = sub_1BDDB796C(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF1804(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        sub_1BE1B36F8();
        sub_1BDDB6CA4(v12, v13);
        sub_1BE1B1E8C();
        v14 = sub_1BE1B371C();
        result = sub_1BDDB796C(v12, v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = (__int128 *)(v19 + 48 * v3);
          v21 = (__int128 *)(v19 + 48 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= v21 + 3))
          {
            v9 = *v21;
            v10 = v21[2];
            v20[1] = v21[1];
            v20[2] = v10;
            *v20 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF19F8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        sub_1BE1B36F8();
        sub_1BDDB6CA4(v11, v12);
        sub_1BE1B1E8C();
        v13 = sub_1BE1B371C();
        result = sub_1BDDB796C(v11, v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF1BDC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        sub_1BE1B36F8();
        sub_1BDDB6CA4(v11, v12);
        sub_1BE1B1E8C();
        v13 = sub_1BE1B371C();
        result = sub_1BDDB796C(v11, v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 + 24 * v3;
          v20 = (__int128 *)(v18 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= (unint64_t)v20 + 24))
          {
            v9 = *v20;
            *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v19 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF1DCC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1BE1B1F58();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1BE1B26D8();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BDEF206C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1BE1B1DF0();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
        v18 = sub_1BE1B26D8();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1BDEF230C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BDEF2354()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF525520;
  if (!qword_1EF525520)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF525528);
    v2 = MEMORY[0x1E0DEAF20];
    v3[0] = sub_1BDDA9D60(&qword_1EF525518, &qword_1EF525510, MEMORY[0x1E0DEAF20]);
    v3[1] = sub_1BDDA9D60((unint64_t *)&qword_1EF525508, &qword_1EF525500, v2);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEC7A8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF525520);
  }
  return result;
}

uint64_t sub_1BDEF23F8(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1BDEF9800(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1BDEF24FC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1BDEF247C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for Replica() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1BDEF9850(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1BDEF334C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1BDEF24FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  __int16 v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  __int16 v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  __int16 v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  _BOOL4 v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  char v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;

  v2 = v1;
  v210 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v197 = *(_QWORD *)(v4 - 8);
  v198 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v192 = (uint64_t)&v184 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v202 = (uint64_t)&v184 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v184 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v184 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v184 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v184 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v184 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v184 - v24;
  v205 = a1;
  v26 = a1[1];
  result = sub_1BE1B32CC();
  if (result >= v26)
  {
    if (v26 < 0)
      goto LABEL_168;
    if (v26)
      return sub_1BDEF4174(0, v26, 1, v205);
  }
  else
  {
    if (v26 >= 0)
      v28 = v26;
    else
      v28 = v26 + 1;
    if (v26 < -1)
    {
      result = sub_1BE1B31F4();
      __break(1u);
    }
    else
    {
      v203 = v14;
      v195 = v20;
      v190 = v25;
      v187 = result;
      if (v26 >= 2)
      {
        v29 = v28 >> 1;
        v30 = sub_1BE1B29E4();
        *(_QWORD *)(v30 + 16) = v29;
        v31 = *(unsigned __int8 *)(v197 + 80);
        v186 = v30;
        v196 = v30 + ((v31 + 32) & ~v31);
LABEL_12:
        v33 = 0;
        v32 = (char *)MEMORY[0x1E0DEE9D8];
        v201 = v11;
        v194 = v17;
        v188 = v23;
        while (1)
        {
          v35 = v33 + 1;
          v193 = v33;
          if (v33 + 1 >= v26)
            goto LABEL_56;
          v200 = v26;
          v189 = v32;
          v36 = *v205;
          v37 = *(_QWORD *)(v197 + 72);
          v185 = v33 + 1;
          v38 = v36 + v37 * v35;
          v39 = (uint64_t)v190;
          sub_1BDD86DEC(v38, (uint64_t)v190, &qword_1ED6F3CB8);
          v204 = v37;
          sub_1BDD86DEC(v36 + v37 * v33, (uint64_t)v23, &qword_1ED6F3CB8);
          v191 = type metadata accessor for Replica();
          v40 = *(int *)(v191 + 20);
          v41 = *(_QWORD *)(v39 + v40);
          v42 = *(_QWORD *)&v23[v40];
          if (v41 != v42)
          {
            LODWORD(v199) = v41 < v42;
            v26 = v200;
            goto LABEL_26;
          }
          v208 = sub_1BE1B1F40();
          LOWORD(v209) = v43;
          BYTE2(v209) = v44;
          BYTE3(v209) = v45;
          BYTE4(v209) = v46;
          BYTE5(v209) = v47;
          BYTE6(v209) = v48;
          HIBYTE(v209) = v49;
          v206 = sub_1BE1B1F40();
          LOWORD(v207) = v50;
          BYTE2(v207) = v51;
          BYTE3(v207) = v52;
          BYTE4(v207) = v53;
          BYTE5(v207) = v54;
          BYTE6(v207) = v55;
          HIBYTE(v207) = v56;
          v57 = bswap64(v208);
          v58 = bswap64(v206);
          if (v57 != v58)
            break;
          v57 = bswap64(v209);
          v58 = bswap64(v207);
          v26 = v200;
          if (v57 != v58)
            goto LABEL_22;
          v59 = 0;
LABEL_25:
          LODWORD(v199) = v59 >> 31;
LABEL_26:
          sub_1BDD86E30((uint64_t)v23, &qword_1ED6F3CB8);
          sub_1BDD86E30((uint64_t)v190, &qword_1ED6F3CB8);
          v35 = v33 + 2;
          if (v33 + 2 >= v26)
          {
LABEL_40:
            if ((_DWORD)v199)
              goto LABEL_43;
          }
          else
          {
            v60 = v204 * v185;
            v61 = v36;
            v62 = v204 * v35;
            while (1)
            {
              v63 = v35;
              v64 = (uint64_t)v195;
              sub_1BDD86DEC(v61 + v62, (uint64_t)v195, &qword_1ED6F3CB8);
              sub_1BDD86DEC(v61 + v60, (uint64_t)v17, &qword_1ED6F3CB8);
              v65 = *(int *)(v191 + 20);
              v66 = *(_QWORD *)(v64 + v65);
              v67 = *(_QWORD *)&v17[v65];
              if (v66 == v67)
              {
                v208 = sub_1BE1B1F40();
                LOWORD(v209) = v68;
                BYTE2(v209) = v69;
                BYTE3(v209) = v70;
                BYTE4(v209) = v71;
                BYTE5(v209) = v72;
                BYTE6(v209) = v73;
                HIBYTE(v209) = v74;
                v206 = sub_1BE1B1F40();
                LOWORD(v207) = v75;
                BYTE2(v207) = v76;
                BYTE3(v207) = v77;
                BYTE4(v207) = v78;
                BYTE5(v207) = v79;
                BYTE6(v207) = v80;
                HIBYTE(v207) = v81;
                v82 = bswap64(v208);
                v83 = bswap64(v206);
                if (v82 != v83)
                  goto LABEL_33;
                v82 = bswap64(v209);
                v83 = bswap64(v207);
                if (v82 == v83)
                {
                  v84 = 0;
                }
                else
                {
LABEL_33:
                  v85 = v82 < v83 ? -1 : 1;
                  v84 = v85 >> 31;
                }
              }
              else
              {
                v84 = v66 < v67;
              }
              sub_1BDD86E30((uint64_t)v17, &qword_1ED6F3CB8);
              sub_1BDD86E30((uint64_t)v195, &qword_1ED6F3CB8);
              if ((_DWORD)v199 != v84)
                break;
              v35 = v63 + 1;
              v61 += v204;
              v26 = v200;
              if (v200 == v63 + 1)
              {
                v35 = v200;
                v33 = v193;
                goto LABEL_40;
              }
            }
            v35 = v63;
            v33 = v193;
            v26 = v200;
            if ((_DWORD)v199)
            {
LABEL_43:
              if (v35 < v33)
                goto LABEL_169;
              if (v33 < v35)
              {
                v86 = 0;
                v87 = v204 * (v35 - 1);
                v88 = v35 * v204;
                v89 = v33 * v204;
                v11 = v201;
                v191 = v36;
                do
                {
                  if (v33 != v35 + v86 - 1)
                  {
                    if (!v36)
                      goto LABEL_174;
                    v199 = v36 + v87;
                    sub_1BDDA2EF0(v36 + v89, v192, &qword_1ED6F3CB8);
                    if (v89 < v87 || v36 + v89 >= (unint64_t)(v36 + v88))
                    {
                      v90 = v199;
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    else
                    {
                      v90 = v199;
                      if (v89 != v87)
                        swift_arrayInitWithTakeBackToFront();
                    }
                    sub_1BDDA2EF0(v192, v90, &qword_1ED6F3CB8);
                    v11 = v201;
                    v36 = v191;
                  }
                  ++v33;
                  --v86;
                  v87 -= v204;
                  v88 -= v204;
                  v89 += v204;
                }
                while (v33 < v35 + v86);
                v32 = v189;
                v33 = v193;
                v17 = v194;
                v26 = v200;
                if (v35 >= v200)
                  goto LABEL_86;
                goto LABEL_57;
              }
            }
          }
          v32 = v189;
          v11 = v201;
LABEL_56:
          if (v35 >= v26)
            goto LABEL_86;
LABEL_57:
          if (__OFSUB__(v35, v33))
            goto LABEL_167;
          if (v35 - v33 >= v187)
            goto LABEL_86;
          if (__OFADD__(v33, v187))
            goto LABEL_170;
          if (v33 + v187 >= v26)
            v91 = v26;
          else
            v91 = v33 + v187;
          if (v91 < v33)
          {
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
          }
          if (v35 == v91)
            goto LABEL_86;
          v189 = v32;
          v185 = v2;
          v92 = *(_QWORD *)(v197 + 72);
          v204 = v92 * (v35 - 1);
          v199 = v92;
          v93 = v35 * v92;
          v191 = v91;
          while (2)
          {
            v95 = 0;
            v200 = v35;
            while (1)
            {
              v96 = *v205;
              v97 = v93;
              v98 = v93 + v95 + *v205;
              v99 = (uint64_t)v11;
              v100 = (uint64_t)v203;
              sub_1BDD86DEC(v98, (uint64_t)v203, &qword_1ED6F3CB8);
              sub_1BDD86DEC(v204 + v95 + v96, v99, &qword_1ED6F3CB8);
              v101 = *(int *)(type metadata accessor for Replica() + 20);
              v102 = *(_QWORD *)(v100 + v101);
              v103 = *(_QWORD *)(v99 + v101);
              if (v102 == v103)
              {
                v208 = sub_1BE1B1F40();
                LOWORD(v209) = v104;
                BYTE2(v209) = v105;
                BYTE3(v209) = v106;
                BYTE4(v209) = v107;
                BYTE5(v209) = v108;
                BYTE6(v209) = v109;
                HIBYTE(v209) = v110;
                v206 = sub_1BE1B1F40();
                LOWORD(v207) = v111;
                BYTE2(v207) = v112;
                BYTE3(v207) = v113;
                BYTE4(v207) = v114;
                BYTE5(v207) = v115;
                BYTE6(v207) = v116;
                HIBYTE(v207) = v117;
                v118 = bswap64(v208);
                v119 = bswap64(v206);
                v11 = (char *)v99;
                if (v118 == v119)
                {
                  v118 = bswap64(v209);
                  v119 = bswap64(v207);
                  v93 = v97;
                  if (v118 == v119)
                  {
                    v120 = 0;
                    goto LABEL_80;
                  }
                }
                else
                {
                  v93 = v97;
                }
                v121 = v118 < v119 ? -1 : 1;
                v120 = v121 >> 31;
              }
              else
              {
                v120 = v102 < v103;
                v11 = (char *)v99;
                v93 = v97;
              }
LABEL_80:
              sub_1BDD86E30((uint64_t)v11, &qword_1ED6F3CB8);
              sub_1BDD86E30((uint64_t)v203, &qword_1ED6F3CB8);
              if (!v120)
                break;
              v122 = *v205;
              if (!*v205)
                goto LABEL_172;
              v123 = v122 + v204 + v95;
              sub_1BDDA2EF0(v122 + v93 + v95, v202, &qword_1ED6F3CB8);
              swift_arrayInitWithTakeFrontToBack();
              sub_1BDDA2EF0(v202, v123, &qword_1ED6F3CB8);
              v94 = v200;
              v95 -= v199;
              ++v33;
              v11 = v201;
              if (v200 == v33)
                goto LABEL_67;
            }
            v94 = v200;
LABEL_67:
            v35 = v94 + 1;
            v204 += v199;
            v93 += v199;
            v33 = v193;
            if (v35 != v191)
              continue;
            break;
          }
          v35 = v191;
          v2 = v185;
          v32 = v189;
          v17 = v194;
LABEL_86:
          if (v35 < v33)
            goto LABEL_162;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v200 = v35;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v32 = sub_1BDEF9288(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
          v126 = *((_QWORD *)v32 + 2);
          v125 = *((_QWORD *)v32 + 3);
          v34 = v126 + 1;
          if (v126 >= v125 >> 1)
            v32 = sub_1BDEF9288((char *)(v125 > 1), v126 + 1, 1, v32);
          *((_QWORD *)v32 + 2) = v34;
          v127 = v32 + 32;
          v128 = &v32[16 * v126 + 32];
          v129 = v200;
          *(_QWORD *)v128 = v33;
          *((_QWORD *)v128 + 1) = v129;
          if (v126)
          {
            while (2)
            {
              v130 = v34 - 1;
              if (v34 >= 4)
              {
                v135 = &v127[16 * v34];
                v136 = *((_QWORD *)v135 - 8);
                v137 = *((_QWORD *)v135 - 7);
                v141 = __OFSUB__(v137, v136);
                v138 = v137 - v136;
                if (v141)
                  goto LABEL_151;
                v140 = *((_QWORD *)v135 - 6);
                v139 = *((_QWORD *)v135 - 5);
                v141 = __OFSUB__(v139, v140);
                v133 = v139 - v140;
                v134 = v141;
                if (v141)
                  goto LABEL_152;
                v142 = v34 - 2;
                v143 = &v127[16 * v34 - 32];
                v145 = *(_QWORD *)v143;
                v144 = *((_QWORD *)v143 + 1);
                v141 = __OFSUB__(v144, v145);
                v146 = v144 - v145;
                if (v141)
                  goto LABEL_154;
                v141 = __OFADD__(v133, v146);
                v147 = v133 + v146;
                if (v141)
                  goto LABEL_157;
                if (v147 >= v138)
                {
                  v165 = &v127[16 * v130];
                  v167 = *(_QWORD *)v165;
                  v166 = *((_QWORD *)v165 + 1);
                  v141 = __OFSUB__(v166, v167);
                  v168 = v166 - v167;
                  if (v141)
                    goto LABEL_161;
                  v158 = v133 < v168;
                }
                else
                {
LABEL_105:
                  if ((v134 & 1) != 0)
                    goto LABEL_153;
                  v142 = v34 - 2;
                  v148 = &v127[16 * v34 - 32];
                  v150 = *(_QWORD *)v148;
                  v149 = *((_QWORD *)v148 + 1);
                  v151 = __OFSUB__(v149, v150);
                  v152 = v149 - v150;
                  v153 = v151;
                  if (v151)
                    goto LABEL_156;
                  v154 = &v127[16 * v130];
                  v156 = *(_QWORD *)v154;
                  v155 = *((_QWORD *)v154 + 1);
                  v141 = __OFSUB__(v155, v156);
                  v157 = v155 - v156;
                  if (v141)
                    goto LABEL_159;
                  if (__OFADD__(v152, v157))
                    goto LABEL_160;
                  if (v152 + v157 < v133)
                    goto LABEL_117;
                  v158 = v133 < v157;
                }
                if (v158)
                  v130 = v142;
              }
              else
              {
                if (v34 == 3)
                {
                  v132 = *((_QWORD *)v32 + 4);
                  v131 = *((_QWORD *)v32 + 5);
                  v141 = __OFSUB__(v131, v132);
                  v133 = v131 - v132;
                  v134 = v141;
                  goto LABEL_105;
                }
                v159 = *((_QWORD *)v32 + 4);
                v160 = *((_QWORD *)v32 + 5);
                v141 = __OFSUB__(v160, v159);
                v152 = v160 - v159;
                v153 = v141;
LABEL_117:
                if ((v153 & 1) != 0)
                  goto LABEL_155;
                v161 = &v127[16 * v130];
                v163 = *(_QWORD *)v161;
                v162 = *((_QWORD *)v161 + 1);
                v141 = __OFSUB__(v162, v163);
                v164 = v162 - v163;
                if (v141)
                  goto LABEL_158;
                if (v164 < v152)
                  goto LABEL_14;
              }
              v169 = v130 - 1;
              if (v130 - 1 >= v34)
              {
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
                goto LABEL_171;
              }
              if (!*v205)
                goto LABEL_173;
              v170 = v32;
              v171 = &v127[16 * v169];
              v172 = *(_QWORD *)v171;
              v173 = &v127[16 * v130];
              v174 = *((_QWORD *)v173 + 1);
              sub_1BDEF48A4(*v205 + *(_QWORD *)(v197 + 72) * *(_QWORD *)v171, *v205 + *(_QWORD *)(v197 + 72) * *(_QWORD *)v173, *v205 + *(_QWORD *)(v197 + 72) * v174, v196);
              if (v2)
                goto LABEL_145;
              if (v174 < v172)
                goto LABEL_148;
              if (v130 > *((_QWORD *)v170 + 2))
                goto LABEL_149;
              *(_QWORD *)v171 = v172;
              *(_QWORD *)&v127[16 * v169 + 8] = v174;
              v175 = *((_QWORD *)v170 + 2);
              if (v130 >= v175)
                goto LABEL_150;
              v32 = v170;
              v34 = v175 - 1;
              memmove(&v127[16 * v130], v173 + 16, 16 * (v175 - 1 - v130));
              *((_QWORD *)v170 + 2) = v175 - 1;
              v11 = v201;
              v17 = v194;
              if (v175 <= 2)
                goto LABEL_14;
              continue;
            }
          }
          v34 = 1;
LABEL_14:
          v26 = v205[1];
          v33 = v200;
          v23 = v188;
          if (v200 >= v26)
            goto LABEL_134;
        }
        v26 = v200;
LABEL_22:
        if (v57 < v58)
          v59 = -1;
        else
          v59 = 1;
        goto LABEL_25;
      }
      v32 = (char *)MEMORY[0x1E0DEE9D8];
      v196 = MEMORY[0x1E0DEE9D8]
           + ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80));
      v186 = MEMORY[0x1E0DEE9D8];
      if (v26 == 1)
        goto LABEL_12;
      v34 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_134:
      if (v34 >= 2)
      {
        v176 = *v205;
        do
        {
          v177 = v34 - 2;
          if (v34 < 2)
            goto LABEL_163;
          if (!v176)
            goto LABEL_175;
          v178 = v32;
          v179 = v32 + 32;
          v180 = *(_QWORD *)&v32[16 * v177 + 32];
          v181 = *(_QWORD *)&v32[16 * v34 + 24];
          sub_1BDEF48A4(v176 + *(_QWORD *)(v197 + 72) * v180, v176 + *(_QWORD *)(v197 + 72) * *(_QWORD *)&v179[16 * v34 - 16], v176 + *(_QWORD *)(v197 + 72) * v181, v196);
          if (v2)
            break;
          if (v181 < v180)
            goto LABEL_164;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v178 = sub_1BDEF9798((uint64_t)v178);
          if (v177 >= *((_QWORD *)v178 + 2))
            goto LABEL_165;
          v182 = &v178[16 * v177 + 32];
          *(_QWORD *)v182 = v180;
          *((_QWORD *)v182 + 1) = v181;
          v183 = *((_QWORD *)v178 + 2);
          if (v34 > v183)
            goto LABEL_166;
          v32 = v178;
          memmove(&v178[16 * v34 + 16], &v178[16 * v34 + 32], 16 * (v183 - v34));
          *((_QWORD *)v178 + 2) = v183 - 1;
          v34 = v183 - 1;
        }
        while (v183 > 2);
      }
LABEL_145:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v186 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1BDEF334C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  __int16 v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  __int16 v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  _BOOL4 v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  char v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;

  v2 = v1;
  v207 = *MEMORY[0x1E0C80C00];
  v199 = type metadata accessor for Replica();
  v195 = *(_QWORD *)(v199 - 8);
  v4 = MEMORY[0x1E0C80A78](v199);
  v191 = (uint64_t)&v183 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v200 = (uint64_t)&v183 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v201 = (uint64_t)&v183 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v183 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v183 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v193 = (uint64_t)&v183 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v183 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v183 - v21;
  v202 = a1;
  v23 = a1[1];
  result = sub_1BE1B32CC();
  if (result >= v23)
  {
    if (v23 < 0)
      goto LABEL_167;
    if (v23)
      return sub_1BDEF4510(0, v23, 1, v202);
  }
  else
  {
    if (v23 >= 0)
      v25 = v23;
    else
      v25 = v23 + 1;
    if (v23 < -1)
    {
      result = sub_1BE1B31F4();
      __break(1u);
    }
    else
    {
      v198 = v12;
      v185 = result;
      if (v23 >= 2)
      {
        v26 = v25 >> 1;
        v27 = sub_1BE1B29E4();
        *(_QWORD *)(v27 + 16) = v26;
        v28 = *(unsigned __int8 *)(v195 + 80);
        v184 = v27;
        v194 = v27 + ((v28 + 32) & ~v28);
LABEL_12:
        v30 = 0;
        v29 = (char *)MEMORY[0x1E0DEE9D8];
        v190 = v15;
        v187 = v20;
        v186 = v22;
        while (1)
        {
          v32 = v30;
          v33 = v30 + 1;
          if (v30 + 1 >= v23)
          {
            v55 = (uint64_t)v198;
            goto LABEL_57;
          }
          v34 = *v202;
          v35 = *(_QWORD *)(v195 + 72);
          v189 = v30 + 1;
          sub_1BDD9C318(v34 + v35 * v33, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v188 = v34;
          v197 = v35;
          sub_1BDD9C318(v34 + v35 * v32, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v36 = *(int *)(v199 + 20);
          v37 = *(_QWORD *)&v22[v36];
          v38 = *(_QWORD *)&v20[v36];
          if (v37 != v38)
          {
            LODWORD(v192) = v37 < v38;
            v55 = (uint64_t)v198;
            goto LABEL_27;
          }
          v205 = sub_1BE1B1F40();
          LOWORD(v206) = v39;
          BYTE2(v206) = v40;
          BYTE3(v206) = v41;
          BYTE4(v206) = v42;
          BYTE5(v206) = v43;
          BYTE6(v206) = v44;
          HIBYTE(v206) = v45;
          v203 = sub_1BE1B1F40();
          LOWORD(v204) = v46;
          BYTE2(v204) = v47;
          BYTE3(v204) = v48;
          BYTE4(v204) = v49;
          BYTE5(v204) = v50;
          BYTE6(v204) = v51;
          HIBYTE(v204) = v52;
          v53 = bswap64(v205);
          v54 = bswap64(v203);
          if (v53 != v54)
            break;
          v53 = bswap64(v206);
          v54 = bswap64(v204);
          v55 = (uint64_t)v198;
          if (v53 != v54)
            goto LABEL_23;
          v56 = 0;
LABEL_26:
          LODWORD(v192) = v56 >> 31;
LABEL_27:
          sub_1BDD9C3E0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD9C3E0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v33 = v32 + 2;
          v196 = v23;
          if (v32 + 2 >= v23)
          {
LABEL_41:
            if (!(_DWORD)v192)
              goto LABEL_57;
LABEL_44:
            if (v33 < v32)
              goto LABEL_168;
            if (v32 < v33)
            {
              v183 = v29;
              v84 = 0;
              v85 = v197 * (v33 - 1);
              v86 = v33 * v197;
              v192 = v32;
              v87 = v32 * v197;
              do
              {
                if (v32 != v33 + v84 - 1)
                {
                  v89 = v2;
                  v90 = v33;
                  v91 = v188;
                  if (!v188)
                    goto LABEL_173;
                  v92 = v188 + v87;
                  v189 = v188 + v85;
                  sub_1BDDA2E8C(v188 + v87, v191, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                  if (v87 < v85 || v92 >= v91 + v86)
                  {
                    v88 = v189;
                    swift_arrayInitWithTakeFrontToBack();
                  }
                  else
                  {
                    v88 = v189;
                    if (v87 != v85)
                      swift_arrayInitWithTakeBackToFront();
                  }
                  sub_1BDDA2E8C(v191, v88, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                  v55 = (uint64_t)v198;
                  v33 = v90;
                  v2 = v89;
                  v23 = v196;
                }
                ++v32;
                --v84;
                v85 -= v197;
                v86 -= v197;
                v87 += v197;
              }
              while (v32 < v33 + v84);
              v29 = v183;
              v32 = v192;
            }
            goto LABEL_57;
          }
          v57 = v32;
          v58 = v188;
          v59 = v197 * v189;
          v60 = v197 * v33;
          while (1)
          {
            v61 = v193;
            sub_1BDD9C318(v58 + v60, v193, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v62 = (uint64_t)v190;
            sub_1BDD9C318(v58 + v59, (uint64_t)v190, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v63 = *(int *)(v199 + 20);
            v64 = *(_QWORD *)(v61 + v63);
            v65 = *(_QWORD *)(v62 + v63);
            if (v64 == v65)
            {
              v205 = sub_1BE1B1F40();
              LOWORD(v206) = v66;
              BYTE2(v206) = v67;
              BYTE3(v206) = v68;
              BYTE4(v206) = v69;
              BYTE5(v206) = v70;
              BYTE6(v206) = v71;
              HIBYTE(v206) = v72;
              v203 = sub_1BE1B1F40();
              LOWORD(v204) = v73;
              BYTE2(v204) = v74;
              BYTE3(v204) = v75;
              BYTE4(v204) = v76;
              BYTE5(v204) = v77;
              BYTE6(v204) = v78;
              HIBYTE(v204) = v79;
              v80 = bswap64(v205);
              v81 = bswap64(v203);
              if (v80 != v81)
                goto LABEL_34;
              v80 = bswap64(v206);
              v81 = bswap64(v204);
              if (v80 == v81)
              {
                v82 = 0;
              }
              else
              {
LABEL_34:
                v83 = v80 < v81 ? -1 : 1;
                v82 = v83 >> 31;
              }
            }
            else
            {
              v82 = v64 < v65;
            }
            sub_1BDD9C3E0(v62, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDD9C3E0(v193, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            if ((_DWORD)v192 != v82)
              break;
            ++v33;
            v55 = (uint64_t)v198;
            v58 += v197;
            if (v196 == v33)
            {
              v33 = v196;
              v32 = v57;
              v23 = v196;
              goto LABEL_41;
            }
          }
          v55 = (uint64_t)v198;
          v32 = v57;
          v23 = v196;
          if ((_DWORD)v192)
            goto LABEL_44;
LABEL_57:
          if (v33 < v23)
          {
            if (__OFSUB__(v33, v32))
              goto LABEL_166;
            if (v33 - v32 < v185)
            {
              if (__OFADD__(v32, v185))
                goto LABEL_169;
              if (v32 + v185 >= v23)
                v93 = v23;
              else
                v93 = v32 + v185;
              if (v93 < v32)
              {
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
              }
              if (v33 != v93)
              {
                v192 = v32;
                v183 = v29;
                v188 = v2;
                v94 = *(_QWORD *)(v195 + 72);
                v95 = v94 * (v33 - 1);
                v196 = v94;
                v96 = v33 * v94;
                v189 = v93;
                do
                {
                  v97 = 0;
                  v98 = v192;
                  v197 = v95;
                  while (1)
                  {
                    v99 = v33;
                    v100 = *v202;
                    sub_1BDD9C318(v96 + v97 + *v202, v55, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                    v101 = v95 + v97 + v100;
                    v102 = v201;
                    sub_1BDD9C318(v101, v201, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                    v103 = *(int *)(v199 + 20);
                    v104 = *(_QWORD *)(v55 + v103);
                    v105 = *(_QWORD *)(v102 + v103);
                    if (v104 == v105)
                    {
                      v205 = sub_1BE1B1F40();
                      LOWORD(v206) = v106;
                      BYTE2(v206) = v107;
                      BYTE3(v206) = v108;
                      BYTE4(v206) = v109;
                      BYTE5(v206) = v110;
                      BYTE6(v206) = v111;
                      HIBYTE(v206) = v112;
                      v203 = sub_1BE1B1F40();
                      LOWORD(v204) = v113;
                      BYTE2(v204) = v114;
                      BYTE3(v204) = v115;
                      BYTE4(v204) = v116;
                      BYTE5(v204) = v117;
                      BYTE6(v204) = v118;
                      HIBYTE(v204) = v119;
                      v120 = bswap64(v205);
                      v121 = bswap64(v203);
                      if (v120 != v121)
                        goto LABEL_76;
                      v120 = bswap64(v206);
                      v121 = bswap64(v204);
                      if (v120 == v121)
                      {
                        v55 = (uint64_t)v198;
                        v122 = 0;
                      }
                      else
                      {
LABEL_76:
                        v55 = (uint64_t)v198;
                        v123 = v120 < v121 ? -1 : 1;
                        v122 = v123 >> 31;
                      }
                    }
                    else
                    {
                      v122 = v104 < v105;
                    }
                    sub_1BDD9C3E0(v201, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                    sub_1BDD9C3E0(v55, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                    if (!v122)
                      break;
                    v124 = *v202;
                    v95 = v197;
                    if (!*v202)
                      goto LABEL_171;
                    v125 = v124 + v197 + v97;
                    sub_1BDDA2E8C(v124 + v96 + v97, v200, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                    swift_arrayInitWithTakeFrontToBack();
                    sub_1BDDA2E8C(v200, v125, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                    v97 -= v196;
                    ++v98;
                    v33 = v99;
                    v55 = (uint64_t)v198;
                    if (v99 == v98)
                      goto LABEL_68;
                  }
                  v33 = v99;
                  v95 = v197;
LABEL_68:
                  ++v33;
                  v95 += v196;
                  v96 += v196;
                }
                while (v33 != v189);
                v33 = v189;
                v2 = v188;
                v29 = v183;
                v32 = v192;
              }
            }
          }
          if (v33 < v32)
            goto LABEL_161;
          v197 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v29 = sub_1BDEF9288(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
          v127 = *((_QWORD *)v29 + 2);
          v126 = *((_QWORD *)v29 + 3);
          v31 = v127 + 1;
          v30 = v197;
          if (v127 >= v126 >> 1)
          {
            v176 = sub_1BDEF9288((char *)(v126 > 1), v127 + 1, 1, v29);
            v30 = v197;
            v29 = v176;
          }
          *((_QWORD *)v29 + 2) = v31;
          v128 = v29 + 32;
          v129 = &v29[16 * v127 + 32];
          *(_QWORD *)v129 = v32;
          *((_QWORD *)v129 + 1) = v30;
          if (v127)
          {
            while (1)
            {
              v130 = v31 - 1;
              if (v31 >= 4)
              {
                v135 = &v128[16 * v31];
                v136 = *((_QWORD *)v135 - 8);
                v137 = *((_QWORD *)v135 - 7);
                v141 = __OFSUB__(v137, v136);
                v138 = v137 - v136;
                if (v141)
                  goto LABEL_150;
                v140 = *((_QWORD *)v135 - 6);
                v139 = *((_QWORD *)v135 - 5);
                v141 = __OFSUB__(v139, v140);
                v133 = v139 - v140;
                v134 = v141;
                if (v141)
                  goto LABEL_151;
                v142 = v31 - 2;
                v143 = &v128[16 * v31 - 32];
                v145 = *(_QWORD *)v143;
                v144 = *((_QWORD *)v143 + 1);
                v141 = __OFSUB__(v144, v145);
                v146 = v144 - v145;
                if (v141)
                  goto LABEL_153;
                v141 = __OFADD__(v133, v146);
                v147 = v133 + v146;
                if (v141)
                  goto LABEL_156;
                if (v147 >= v138)
                {
                  v165 = &v128[16 * v130];
                  v167 = *(_QWORD *)v165;
                  v166 = *((_QWORD *)v165 + 1);
                  v141 = __OFSUB__(v166, v167);
                  v168 = v166 - v167;
                  if (v141)
                    goto LABEL_160;
                  v158 = v133 < v168;
                  goto LABEL_121;
                }
              }
              else
              {
                if (v31 != 3)
                {
                  v159 = *((_QWORD *)v29 + 4);
                  v160 = *((_QWORD *)v29 + 5);
                  v141 = __OFSUB__(v160, v159);
                  v152 = v160 - v159;
                  v153 = v141;
                  goto LABEL_115;
                }
                v132 = *((_QWORD *)v29 + 4);
                v131 = *((_QWORD *)v29 + 5);
                v141 = __OFSUB__(v131, v132);
                v133 = v131 - v132;
                v134 = v141;
              }
              if ((v134 & 1) != 0)
                goto LABEL_152;
              v142 = v31 - 2;
              v148 = &v128[16 * v31 - 32];
              v150 = *(_QWORD *)v148;
              v149 = *((_QWORD *)v148 + 1);
              v151 = __OFSUB__(v149, v150);
              v152 = v149 - v150;
              v153 = v151;
              if (v151)
                goto LABEL_155;
              v154 = &v128[16 * v130];
              v156 = *(_QWORD *)v154;
              v155 = *((_QWORD *)v154 + 1);
              v141 = __OFSUB__(v155, v156);
              v157 = v155 - v156;
              if (v141)
                goto LABEL_158;
              if (__OFADD__(v152, v157))
                goto LABEL_159;
              if (v152 + v157 >= v133)
              {
                v158 = v133 < v157;
LABEL_121:
                if (v158)
                  v130 = v142;
                goto LABEL_123;
              }
LABEL_115:
              if ((v153 & 1) != 0)
                goto LABEL_154;
              v161 = &v128[16 * v130];
              v163 = *(_QWORD *)v161;
              v162 = *((_QWORD *)v161 + 1);
              v141 = __OFSUB__(v162, v163);
              v164 = v162 - v163;
              if (v141)
                goto LABEL_157;
              if (v164 < v152)
                goto LABEL_14;
LABEL_123:
              v169 = v130 - 1;
              if (v130 - 1 >= v31)
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
                goto LABEL_170;
              }
              if (!*v202)
                goto LABEL_172;
              v170 = v29;
              v171 = &v128[16 * v169];
              v172 = *(_QWORD *)v171;
              v173 = &v128[16 * v130];
              v174 = *((_QWORD *)v173 + 1);
              sub_1BDEF5010(*v202 + *(_QWORD *)(v195 + 72) * *(_QWORD *)v171, *v202 + *(_QWORD *)(v195 + 72) * *(_QWORD *)v173, *v202 + *(_QWORD *)(v195 + 72) * v174, v194);
              if (v2)
                goto LABEL_144;
              if (v174 < v172)
                goto LABEL_147;
              if (v130 > *((_QWORD *)v170 + 2))
                goto LABEL_148;
              *(_QWORD *)v171 = v172;
              *(_QWORD *)&v128[16 * v169 + 8] = v174;
              v175 = *((_QWORD *)v170 + 2);
              if (v130 >= v175)
                goto LABEL_149;
              v29 = v170;
              v31 = v175 - 1;
              memmove(&v128[16 * v130], v173 + 16, 16 * (v175 - 1 - v130));
              *((_QWORD *)v170 + 2) = v175 - 1;
              v30 = v197;
              if (v175 <= 2)
                goto LABEL_14;
            }
          }
          v31 = 1;
LABEL_14:
          v23 = v202[1];
          v20 = v187;
          v22 = v186;
          if (v30 >= v23)
            goto LABEL_133;
        }
        v55 = (uint64_t)v198;
LABEL_23:
        if (v53 < v54)
          v56 = -1;
        else
          v56 = 1;
        goto LABEL_26;
      }
      v29 = (char *)MEMORY[0x1E0DEE9D8];
      v194 = MEMORY[0x1E0DEE9D8]
           + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
      v184 = MEMORY[0x1E0DEE9D8];
      if (v23 == 1)
        goto LABEL_12;
      v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_133:
      if (v31 >= 2)
      {
        v177 = *v202;
        do
        {
          v178 = v31 - 2;
          if (v31 < 2)
            goto LABEL_162;
          if (!v177)
            goto LABEL_174;
          v179 = *(_QWORD *)&v29[16 * v178 + 32];
          v180 = *(_QWORD *)&v29[16 * v31 + 24];
          sub_1BDEF5010(v177 + *(_QWORD *)(v195 + 72) * v179, v177 + *(_QWORD *)(v195 + 72) * *(_QWORD *)&v29[16 * v31 + 16], v177 + *(_QWORD *)(v195 + 72) * v180, v194);
          if (v2)
            break;
          if (v180 < v179)
            goto LABEL_163;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v29 = sub_1BDEF9798((uint64_t)v29);
          if (v178 >= *((_QWORD *)v29 + 2))
            goto LABEL_164;
          v181 = &v29[16 * v178 + 32];
          *(_QWORD *)v181 = v179;
          *((_QWORD *)v181 + 1) = v180;
          v182 = *((_QWORD *)v29 + 2);
          if (v31 > v182)
            goto LABEL_165;
          memmove(&v29[16 * v31 + 16], &v29[16 * v31 + 32], 16 * (v182 - v31));
          *((_QWORD *)v29 + 2) = v182 - 1;
          v31 = v182 - 1;
        }
        while (v182 > 2);
      }
LABEL_144:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v184 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1BDEF4174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v43 = a1;
  v55 = *MEMORY[0x1E0C80C00];
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v7 = MEMORY[0x1E0C80A78](v44);
  v47 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v41 - v10;
  result = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v41 - v14;
  v46 = a3;
  v42 = a2;
  if (a3 != a2)
  {
    v45 = *(_QWORD *)(v13 + 72);
    v49 = v45 * v46;
    v50 = v45 * (v46 - 1);
    do
    {
      v16 = 0;
      v48 = v43;
      do
      {
        v17 = *a4;
        sub_1BDD86DEC(v49 + v16 + *a4, (uint64_t)v15, &qword_1ED6F3CB8);
        sub_1BDD86DEC(v50 + v16 + v17, (uint64_t)v11, &qword_1ED6F3CB8);
        v18 = *(int *)(type metadata accessor for Replica() + 20);
        v19 = *(_QWORD *)&v15[v18];
        v20 = *(_QWORD *)&v11[v18];
        if (v19 == v20)
        {
          v53 = sub_1BE1B1F40();
          LOWORD(v54) = v21;
          BYTE2(v54) = v22;
          BYTE3(v54) = v23;
          BYTE4(v54) = v24;
          BYTE5(v54) = v25;
          BYTE6(v54) = v26;
          HIBYTE(v54) = v27;
          v51 = sub_1BE1B1F40();
          LOWORD(v52) = v28;
          BYTE2(v52) = v29;
          BYTE3(v52) = v30;
          BYTE4(v52) = v31;
          BYTE5(v52) = v32;
          BYTE6(v52) = v33;
          HIBYTE(v52) = v34;
          v35 = bswap64(v53);
          v36 = bswap64(v51);
          if (v35 == v36 && (v35 = bswap64(v54), v36 = bswap64(v52), v35 == v36))
          {
            v37 = 0;
          }
          else
          {
            if (v35 < v36)
              v38 = -1;
            else
              v38 = 1;
            v37 = v38 >> 31;
          }
        }
        else
        {
          v37 = v19 < v20;
        }
        sub_1BDD86E30((uint64_t)v11, &qword_1ED6F3CB8);
        result = sub_1BDD86E30((uint64_t)v15, &qword_1ED6F3CB8);
        if (!v37)
          break;
        v39 = *a4;
        if (!*a4)
          __break(1u);
        v40 = v39 + v50 + v16;
        sub_1BDDA2EF0(v39 + v49 + v16, v47, &qword_1ED6F3CB8);
        swift_arrayInitWithTakeFrontToBack();
        result = sub_1BDDA2EF0(v47, v40, &qword_1ED6F3CB8);
        v16 -= v45;
        ++v48;
      }
      while (v46 != v48);
      v50 += v45;
      v49 += v45;
      ++v46;
    }
    while (v46 != v42);
  }
  return result;
}

uint64_t sub_1BDEF4510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v43 = a1;
  v55 = *MEMORY[0x1E0C80C00];
  v46 = type metadata accessor for Replica();
  v7 = MEMORY[0x1E0C80A78](v46);
  v47 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v41 - v10;
  result = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v41 - v14;
  v45 = a3;
  v42 = a2;
  if (a3 != a2)
  {
    v44 = *(_QWORD *)(v13 + 72);
    v49 = v44 * v45;
    v50 = v44 * (v45 - 1);
    do
    {
      v16 = 0;
      v48 = v43;
      do
      {
        v17 = *a4;
        sub_1BDD9C318(v49 + v16 + *a4, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C318(v50 + v16 + v17, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v18 = *(int *)(v46 + 20);
        v19 = *(_QWORD *)&v15[v18];
        v20 = *(_QWORD *)&v11[v18];
        if (v19 == v20)
        {
          v53 = sub_1BE1B1F40();
          LOWORD(v54) = v21;
          BYTE2(v54) = v22;
          BYTE3(v54) = v23;
          BYTE4(v54) = v24;
          BYTE5(v54) = v25;
          BYTE6(v54) = v26;
          HIBYTE(v54) = v27;
          v51 = sub_1BE1B1F40();
          LOWORD(v52) = v28;
          BYTE2(v52) = v29;
          BYTE3(v52) = v30;
          BYTE4(v52) = v31;
          BYTE5(v52) = v32;
          BYTE6(v52) = v33;
          HIBYTE(v52) = v34;
          v35 = bswap64(v53);
          v36 = bswap64(v51);
          if (v35 == v36 && (v35 = bswap64(v54), v36 = bswap64(v52), v35 == v36))
          {
            v37 = 0;
          }
          else
          {
            if (v35 < v36)
              v38 = -1;
            else
              v38 = 1;
            v37 = v38 >> 31;
          }
        }
        else
        {
          v37 = v19 < v20;
        }
        sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        result = sub_1BDD9C3E0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        if (!v37)
          break;
        v39 = *a4;
        if (!*a4)
          __break(1u);
        v40 = v39 + v50 + v16;
        sub_1BDDA2E8C(v39 + v49 + v16, v47, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        swift_arrayInitWithTakeFrontToBack();
        result = sub_1BDDA2E8C(v47, v40, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v16 -= v44;
        ++v48;
      }
      while (v45 != v48);
      v50 += v44;
      v49 += v44;
      ++v45;
    }
    while (v45 != v42);
  }
  return result;
}

uint64_t sub_1BDEF48A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  __int16 v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  _BOOL4 v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t result;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89[2];

  v89[1] = *MEMORY[0x1E0C80C00];
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v8 = MEMORY[0x1E0C80A78](v81);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v79 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v79 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v79 - v17;
  v82 = *(char **)(v19 + 72);
  if (!v82)
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (a2 - a1 == 0x8000000000000000 && v82 == (char *)-1)
    goto LABEL_79;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v82 == (char *)-1)
LABEL_80:
    __break(1u);
  v21 = (uint64_t)(a2 - a1) / (uint64_t)v82;
  v88 = a4;
  v89[0] = a1;
  v22 = v20 / (uint64_t)v82;
  if (v21 >= v20 / (uint64_t)v82)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * (_QWORD)v82;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v51 = a4 + v24;
      v87 = a4 + v24;
      v89[0] = a2;
      v80 = a1;
      if (v24 >= 1 && a1 < a2)
      {
        v53 = -(uint64_t)v82;
        v82 = v13;
        do
        {
          sub_1BDD86DEC(v51 + v53, (uint64_t)v13, &qword_1ED6F3CB8);
          v54 = a2 + v53;
          sub_1BDD86DEC(a2 + v53, (uint64_t)v10, &qword_1ED6F3CB8);
          v55 = *(int *)(type metadata accessor for Replica() + 20);
          v56 = *(_QWORD *)&v13[v55];
          v57 = *(_QWORD *)&v10[v55];
          if (v56 == v57)
          {
            v85 = sub_1BE1B1F40();
            LOWORD(v86) = v58;
            BYTE2(v86) = v59;
            BYTE3(v86) = v60;
            BYTE4(v86) = v61;
            BYTE5(v86) = v62;
            BYTE6(v86) = v63;
            HIBYTE(v86) = v64;
            v83 = sub_1BE1B1F40();
            LOWORD(v84) = v65;
            BYTE2(v84) = v66;
            BYTE3(v84) = v67;
            BYTE4(v84) = v68;
            BYTE5(v84) = v69;
            BYTE6(v84) = v70;
            HIBYTE(v84) = v71;
            v72 = bswap64(v85);
            v73 = bswap64(v83);
            if (v72 == v73 && (v72 = bswap64(v86), v73 = bswap64(v84), v72 == v73))
            {
              v74 = 0;
            }
            else
            {
              if (v72 < v73)
                v75 = -1;
              else
                v75 = 1;
              v74 = v75 >> 31;
            }
          }
          else
          {
            v74 = v56 < v57;
          }
          v76 = a3 + v53;
          sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3CB8);
          sub_1BDD86E30((uint64_t)v82, &qword_1ED6F3CB8);
          if (v74)
          {
            if (a3 < a2 || v76 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v89[0] += v53;
          }
          else
          {
            v77 = v87;
            v87 += v53;
            if (a3 < v77 || v76 >= v77)
            {
              swift_arrayInitWithTakeFrontToBack();
              v54 = a2;
            }
            else
            {
              if (a3 != v77)
                swift_arrayInitWithTakeBackToFront();
              v54 = a2;
            }
          }
          v13 = v82;
          v51 = v87;
          if (v87 <= a4)
            break;
          a2 = v54;
          a3 += v53;
        }
        while (v54 > v80);
      }
      goto LABEL_77;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * (_QWORD)v82;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v25 = a4 + v23;
    v87 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      do
      {
        sub_1BDD86DEC(a2, (uint64_t)v18, &qword_1ED6F3CB8);
        sub_1BDD86DEC(a4, (uint64_t)v16, &qword_1ED6F3CB8);
        v27 = *(int *)(type metadata accessor for Replica() + 20);
        v28 = *(_QWORD *)&v18[v27];
        v29 = *(_QWORD *)&v16[v27];
        if (v28 == v29)
        {
          v85 = sub_1BE1B1F40();
          LOWORD(v86) = v30;
          BYTE2(v86) = v31;
          BYTE3(v86) = v32;
          BYTE4(v86) = v33;
          BYTE5(v86) = v34;
          BYTE6(v86) = v35;
          HIBYTE(v86) = v36;
          v83 = sub_1BE1B1F40();
          LOWORD(v84) = v37;
          BYTE2(v84) = v38;
          BYTE3(v84) = v39;
          BYTE4(v84) = v40;
          BYTE5(v84) = v41;
          BYTE6(v84) = v42;
          HIBYTE(v84) = v43;
          v44 = bswap64(v85);
          v45 = bswap64(v83);
          if (v44 == v45 && (v44 = bswap64(v86), v45 = bswap64(v84), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
            if (v44 < v45)
              v47 = -1;
            else
              v47 = 1;
            v46 = v47 >> 31;
          }
        }
        else
        {
          v46 = v28 < v29;
        }
        sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3CB8);
        sub_1BDD86E30((uint64_t)v18, &qword_1ED6F3CB8);
        v48 = v89[0];
        if (v46)
        {
          v49 = (unint64_t)&v82[a2];
          if (v89[0] < a2 || v89[0] >= v49)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v89[0] == a2)
          {
            v48 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v50 = (unint64_t)&v82[v88];
          if (v89[0] < v88 || v89[0] >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v89[0] != v88)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v88 = v50;
          v49 = a2;
        }
        v89[0] = (unint64_t)&v82[v48];
        a4 = v88;
        if (v88 >= v25)
          break;
        a2 = v49;
      }
      while (v49 < a3);
    }
LABEL_77:
    sub_1BDEF9380(v89, &v88, (uint64_t *)&v87);
    return 1;
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDEF5010(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int16 v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  __int16 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  _BOOL4 v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t result;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90[2];

  v90[1] = *MEMORY[0x1E0C80C00];
  v83 = type metadata accessor for Replica();
  v8 = MEMORY[0x1E0C80A78](v83);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v80 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v80 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v80 - v17;
  v20 = *(_QWORD *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v21 = a1;
  if (a2 - a1 == 0x8000000000000000 && v20 == -1)
    goto LABEL_79;
  v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v20 == -1)
LABEL_80:
    __break(1u);
  v23 = (uint64_t)(a2 - a1) / v20;
  v89 = a4;
  v90[0] = a1;
  v24 = v22 / v20;
  if (v23 >= v22 / v20)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      v81 = a1;
      v26 = v24 * v20;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v52 = a4 + v26;
      v88 = a4 + v26;
      v90[0] = a2;
      if (v26 >= 1 && v81 < a2)
      {
        v54 = -v20;
        v82 = (unint64_t)v13;
        do
        {
          sub_1BDD9C318(v52 + v54, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v55 = a2 + v54;
          sub_1BDD9C318(a2 + v54, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v56 = *(int *)(v83 + 20);
          v57 = *(_QWORD *)&v13[v56];
          v58 = *(_QWORD *)&v10[v56];
          if (v57 == v58)
          {
            v86 = sub_1BE1B1F40();
            LOWORD(v87) = v59;
            BYTE2(v87) = v60;
            BYTE3(v87) = v61;
            BYTE4(v87) = v62;
            BYTE5(v87) = v63;
            BYTE6(v87) = v64;
            HIBYTE(v87) = v65;
            v84 = sub_1BE1B1F40();
            LOWORD(v85) = v66;
            BYTE2(v85) = v67;
            BYTE3(v85) = v68;
            BYTE4(v85) = v69;
            BYTE5(v85) = v70;
            BYTE6(v85) = v71;
            HIBYTE(v85) = v72;
            v73 = bswap64(v86);
            v74 = bswap64(v84);
            if (v73 == v74 && (v73 = bswap64(v87), v74 = bswap64(v85), v73 == v74))
            {
              v75 = 0;
            }
            else
            {
              if (v73 < v74)
                v76 = -1;
              else
                v76 = 1;
              v75 = v76 >> 31;
            }
          }
          else
          {
            v75 = v57 < v58;
          }
          v77 = a3 + v54;
          sub_1BDD9C3E0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD9C3E0(v82, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          if (v75)
          {
            if (a3 < a2 || v77 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v90[0] += v54;
          }
          else
          {
            v78 = v88;
            v88 += v54;
            if (a3 < v78 || v77 >= v78)
            {
              swift_arrayInitWithTakeFrontToBack();
              v55 = a2;
            }
            else
            {
              if (a3 != v78)
                swift_arrayInitWithTakeBackToFront();
              v55 = a2;
            }
          }
          v13 = (char *)v82;
          v52 = v88;
          if (v88 <= a4)
            break;
          a2 = v55;
          a3 += v54;
        }
        while (v55 > v81);
      }
      goto LABEL_77;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = v23 * v20;
    if (a4 < v21 || v21 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v21)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v82 = a4 + v25;
    v88 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      do
      {
        sub_1BDD9C318(a2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C318(a4, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v28 = *(int *)(v83 + 20);
        v29 = *(_QWORD *)&v18[v28];
        v30 = *(_QWORD *)&v16[v28];
        if (v29 == v30)
        {
          v86 = sub_1BE1B1F40();
          LOWORD(v87) = v31;
          BYTE2(v87) = v32;
          BYTE3(v87) = v33;
          BYTE4(v87) = v34;
          BYTE5(v87) = v35;
          BYTE6(v87) = v36;
          HIBYTE(v87) = v37;
          v84 = sub_1BE1B1F40();
          LOWORD(v85) = v38;
          BYTE2(v85) = v39;
          BYTE3(v85) = v40;
          BYTE4(v85) = v41;
          BYTE5(v85) = v42;
          BYTE6(v85) = v43;
          HIBYTE(v85) = v44;
          v45 = bswap64(v86);
          v46 = bswap64(v84);
          if (v45 == v46 && (v45 = bswap64(v87), v46 = bswap64(v85), v45 == v46))
          {
            v47 = 0;
          }
          else
          {
            if (v45 < v46)
              v48 = -1;
            else
              v48 = 1;
            v47 = v48 >> 31;
          }
        }
        else
        {
          v47 = v29 < v30;
        }
        sub_1BDD9C3E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v49 = v90[0];
        if (v47)
        {
          v50 = a2 + v20;
          if (v90[0] < a2 || v90[0] >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v90[0] == a2)
          {
            v49 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v51 = v89 + v20;
          if (v90[0] < v89 || v90[0] >= v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v90[0] != v89)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v89 = v51;
          v50 = a2;
        }
        v90[0] = v49 + v20;
        a4 = v89;
        if (v89 >= v82)
          break;
        a2 = v50;
      }
      while (v50 < a3);
    }
LABEL_77:
    sub_1BDEF95CC(v90, &v89, (uint64_t *)&v88);
    return 1;
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDEF5748(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v4 = sub_1BE1B206C();
  v51 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Replica();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v49 = (char *)&v40 - v11;
  v12 = *(_QWORD *)(a2 + 64);
  v41 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v40 = v42 - 1;
  v45 = a2;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  v50 = 0;
  v43 = v4;
  v18 = (uint64_t)v46;
  if (!v15)
    goto LABEL_6;
LABEL_4:
  v19 = v17;
  v20 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  v21 = (uint64_t)v49;
  v22 = v20 | (v50 << 6);
LABEL_5:
  v23 = v45;
  sub_1BDD9C318(*(_QWORD *)(v45 + 48) + *(_QWORD *)(v44 + 72) * v22, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v24 = v51;
  v25 = *(_QWORD *)(v23 + 56) + *(_QWORD *)(v51 + 72) * v22;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v27 = v25;
  v4 = v43;
  (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(&v10[*(int *)(v26 + 48)], v27, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v10, 0, 1, v26);
  v17 = v19;
  while (1)
  {
    sub_1BDDA2EF0((uint64_t)v10, v21, &qword_1ED6F3CC0);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v21, 1, v33) == 1)
    {
      swift_release();
      return sub_1BE1B3704();
    }
    v34 = v21 + *(int *)(v33 + 48);
    sub_1BDDA2E8C(v21, v18, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v35 = v51;
    v36 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v47, v34, v4);
    v37 = *((_QWORD *)a1 + 8);
    v38 = a1[1];
    v52 = *a1;
    v53 = v38;
    v39 = a1[3];
    v54 = a1[2];
    v55 = v39;
    v56 = v37;
    sub_1BE1B1F28();
    sub_1BE1B3704();
    sub_1BDD9C3E0(v18, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD8422C(&qword_1EF52DC80, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13B8]);
    sub_1BE1B26E4();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v4);
    result = sub_1BE1B371C();
    v17 ^= result;
    if (v15)
      goto LABEL_4;
LABEL_6:
    v21 = (uint64_t)v49;
    v28 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 < v42)
    {
      v29 = *(_QWORD *)(v41 + 8 * v28);
      if (v29)
        goto LABEL_9;
      v30 = v50 + 2;
      ++v50;
      if (v28 + 1 < v42)
      {
        v29 = *(_QWORD *)(v41 + 8 * v30);
        if (v29)
        {
          ++v28;
LABEL_9:
          v19 = v17;
          v15 = (v29 - 1) & v29;
          v22 = __clz(__rbit64(v29)) + (v28 << 6);
          v50 = v28;
          goto LABEL_5;
        }
        v31 = v28 + 2;
        v50 = v28 + 1;
        if (v28 + 2 < v42)
          break;
      }
    }
LABEL_21:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v10, 1, 1, v32);
    v15 = 0;
  }
  v29 = *(_QWORD *)(v41 + 8 * v31);
  if (v29)
  {
    v28 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v28 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v28 >= v42)
    {
      v50 = v40;
      goto LABEL_21;
    }
    v29 = *(_QWORD *)(v41 + 8 * v28);
    ++v31;
    if (v29)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BDEF5B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void (*v18)(_OWORD *);
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v19 >= v8)
      goto LABEL_19;
    v20 = *(_QWORD *)(v4 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v8)
        goto LABEL_19;
      v20 = *(_QWORD *)(v4 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_18:
    v7 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v13);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(_OWORD *)(a1 + 16);
    v22[0] = *(_OWORD *)a1;
    v22[1] = v16;
    v17 = *(_OWORD *)(a1 + 48);
    v22[2] = *(_OWORD *)(a1 + 32);
    v22[3] = v17;
    v23 = v15;
    sub_1BE1B3704();
    v18 = *(void (**)(_OWORD *))(*(_QWORD *)v14 + 88);
    swift_retain();
    v18(v22);
    swift_release();
    result = sub_1BE1B371C();
    v10 ^= result;
  }
  v21 = v19 + 2;
  if (v21 >= v8)
  {
LABEL_19:
    swift_release();
    return sub_1BE1B3704();
  }
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v8)
      goto LABEL_19;
    v20 = *(_QWORD *)(v4 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

unint64_t sub_1BDEF5D38()
{
  unint64_t result;

  result = qword_1EF52DC70;
  if (!qword_1EF52DC70)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRVersion, &type metadata for CRVersion);
    atomic_store(result, (unint64_t *)&qword_1EF52DC70);
  }
  return result;
}

uint64_t sub_1BDEF5D7C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return CRVersion.subscript.getter(a1, a2);
}

uint64_t sub_1BDEF5DB4()
{
  return 0;
}

_OWORD *assignWithTake for CRVersion(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for CRVersion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Seen()
{
  return &type metadata for Seen;
}

unint64_t sub_1BDEF5E50()
{
  unint64_t result;

  result = qword_1EF52DC78;
  if (!qword_1EF52DC78)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBAF8, &type metadata for Seen);
    atomic_store(result, (unint64_t *)&qword_1EF52DC78);
  }
  return result;
}

BOOL sub_1BDEF5E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v17 = a1;
  v1 = sub_1BE1B203C();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B2054();
  sub_1BE1B2030();
  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16 = v3;
  v15(v5, v1);
  v9 = &v8[*(int *)(v6 + 36)];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v2, MEMORY[0x1E0CB1378]);
  do
  {
    v10 = *(_QWORD *)v9;
    sub_1BE1B2C90();
    v11 = v18[0];
    if (v10 == v18[0])
      break;
    v12 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
    v12(v18, 0);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v5, v8, v1);
    sub_1BE1B2C9C();
    v15(v5, v1);
  }
  while ((sub_1BE1B1F7C() & 1) == 0);
  sub_1BDD86E30((uint64_t)v8, &qword_1ED6EFF58);
  return v10 != v11;
}

uint64_t sub_1BDEF6060@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDDD11B0(a1);
}

void sub_1BDEF6074(uint64_t a1, uint64_t (*a2)(id *))
{
  void *v4;
  int64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  id v18;
  id v19[2];

  type metadata accessor for Key(0);
  sub_1BDD8422C((unint64_t *)&qword_1EF52B6D0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BE1B5A58);
  v4 = (void *)sub_1BE1B2B7C();
  i = 0;
  v7 = a1 + 64;
  v6 = *(_QWORD *)(a1 + 64);
  v19[1] = v4;
  v8 = -1 << *(_BYTE *)(a1 + 32);
  if (-v8 < 64)
    v9 = ~(-1 << -(char)v8);
  else
    v9 = -1;
  v10 = v9 & v6;
  v11 = (unint64_t)(63 - v8) >> 6;
  if ((v9 & v6) != 0)
    goto LABEL_7;
LABEL_8:
  v14 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v14 < v11)
    {
      v15 = *(_QWORD *)(v7 + 8 * v14);
      v16 = i + 1;
      if (v15)
        goto LABEL_25;
      v16 = i + 2;
      if (i + 2 >= v11)
        goto LABEL_29;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_25;
      v16 = i + 3;
      if (i + 3 >= v11)
        goto LABEL_29;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_25;
      v16 = i + 4;
      if (i + 4 >= v11)
        goto LABEL_29;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_25;
      v16 = i + 5;
      if (i + 5 >= v11)
        goto LABEL_29;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
      {
LABEL_25:
        v10 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v16 << 6);
        for (i = v16; ; v13 = v12 | (i << 6))
        {
          v19[0] = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v13);
          v18 = v19[0];
          if ((a2(v19) & 1) != 0)
          {
            sub_1BDE68058(v19, v18);

            if (!v10)
              goto LABEL_8;
          }
          else
          {

            if (!v10)
              goto LABEL_8;
          }
LABEL_7:
          v12 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      v17 = i + 6;
      if (i + 6 < v11)
      {
        v15 = *(_QWORD *)(v7 + 8 * v17);
        if (v15)
        {
          v16 = i + 6;
          goto LABEL_25;
        }
        while (1)
        {
          v16 = v17 + 1;
          if (__OFADD__(v17, 1))
            goto LABEL_31;
          if (v16 >= v11)
            break;
          v15 = *(_QWORD *)(v7 + 8 * v16);
          ++v17;
          if (v15)
            goto LABEL_25;
        }
      }
    }
LABEL_29:
    sub_1BDE27FD0();
    swift_release();
    return;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_1BDEF6288(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  sub_1BDEFA874();
  result = sub_1BE1B2B7C();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    sub_1BDDB6CA4(*v11, v13);
    sub_1BDE69CC8(v17, v12, v13);
    result = sub_1BDDB796C(v17[0], v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t CRValueStruct.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = sub_1BDE25870();
  if (!v4)
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    swift_retain();
    sub_1BDF1AC18(v3, a2, v8, v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDEF649C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  BOOL v50;
  _QWORD v51[4];
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  _QWORD v62[6];
  uint64_t v63;

  v57 = (char *)a1;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v54 = *(_QWORD *)(v63 - 8);
  v2 = MEMORY[0x1E0C80A78](v63);
  v60 = (_QWORD *)((char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v51 - v4);
  v6 = type metadata accessor for Proto_Value(0);
  v58 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v1;
  v12 = *(_QWORD *)(v1 + 16);
  v13 = type metadata accessor for CRStructEncoder();
  v14 = swift_allocObject();
  v15 = (_QWORD *)(v14 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  v16 = MEMORY[0x1E0DEE9D8];
  *v15 = MEMORY[0x1E0DEE9D8];
  v15[1] = v16;
  swift_retain();
  sub_1BE1B20E4();
  *(_QWORD *)(v14 + 16) = v12;
  v62[3] = v13;
  v62[4] = sub_1BDD8422C((unint64_t *)&qword_1ED6EFC48, (uint64_t (*)(uint64_t))type metadata accessor for CRStructEncoder, (uint64_t)&unk_1BE1BCFE4);
  v62[0] = v14;
  sub_1BE1B1DF0();
  sub_1BDD8422C(&qword_1EF52DD40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  swift_retain();
  v17 = v59;
  sub_1BE1B26CC();
  if (v17)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  }
  else
  {
    v19 = v54;
    v57 = v8;
    v53 = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    v20 = (_QWORD *)(v14 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
    swift_beginAccess();
    v21 = (_QWORD *)*v20;
    if (*(_QWORD *)(*v20 + 16))
    {
      v52 = v20;
      v22 = v20[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v23 = (_QWORD *)sub_1BDFCF900((uint64_t)v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 = v23;
      sub_1BDEF7C74(&v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v61;
      v25 = v61[2];
      v26 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v25)
      {
        v27 = v19;
        v51[2] = 0;
        v51[3] = v14;
        v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        sub_1BDE22534(0, v25, 0);
        v28 = *(unsigned __int8 *)(v19 + 80);
        v51[1] = v24;
        v29 = (uint64_t)v24 + ((v28 + 32) & ~v28);
        v59 = *(_QWORD *)(v27 + 72);
        v30 = v61;
        v31 = v29;
        v32 = v25;
        v56 = v25;
        do
        {
          sub_1BDD86DEC(v31, (uint64_t)v5, &qword_1ED6EFC80);
          v33 = *(int *)(v63 + 48);
          v34 = v60;
          v35 = (uint64_t)v60 + v33;
          v36 = *v5;
          *v60 = *v5;
          sub_1BDD9C318((uint64_t)v5 + v33, (uint64_t)v34 + v33, type metadata accessor for Proto_Value);
          sub_1BDD9C3E0(v35, type metadata accessor for Proto_Value);
          sub_1BDD86E30((uint64_t)v5, &qword_1ED6EFC80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BDE22534(0, v30[2] + 1, 1);
            v30 = v61;
          }
          v38 = v30[2];
          v37 = v30[3];
          v39 = v56;
          if (v38 >= v37 >> 1)
          {
            sub_1BDE22534(v37 > 1, v38 + 1, 1);
            v30 = v61;
          }
          v30[2] = v38 + 1;
          v30[v38 + 4] = v36;
          v31 += v59;
          --v32;
        }
        while (v32);
        *v52 = v30;
        swift_bridgeObjectRelease();
        v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        sub_1BDE225DC(0, v39, 0);
        v26 = v61;
        v40 = (uint64_t)v57;
        do
        {
          sub_1BDD86DEC(v29, (uint64_t)v5, &qword_1ED6EFC80);
          v41 = *(int *)(v63 + 48);
          v42 = (uint64_t)v60 + v41;
          sub_1BDD9C318((uint64_t)v5 + v41, (uint64_t)v60 + v41, type metadata accessor for Proto_Value);
          sub_1BDDA2E8C(v42, v40, type metadata accessor for Proto_Value);
          sub_1BDD86E30((uint64_t)v5, &qword_1ED6EFC80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BDE225DC(0, v26[2] + 1, 1);
            v26 = v61;
          }
          v43 = v58;
          v45 = v26[2];
          v44 = v26[3];
          if (v45 >= v44 >> 1)
          {
            sub_1BDE225DC(v44 > 1, v45 + 1, 1);
            v43 = v58;
            v26 = v61;
          }
          v26[2] = v45 + 1;
          v46 = (uint64_t)v26
              + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
              + *(_QWORD *)(v43 + 72) * v45;
          v40 = (uint64_t)v57;
          sub_1BDDA2E8C((uint64_t)v57, v46, type metadata accessor for Proto_Value);
          v29 += v59;
          --v39;
        }
        while (v39);
        swift_release();
        v20 = v52;
      }
      else
      {
        v20 = v52;
        *v52 = MEMORY[0x1E0DEE9D8];
        swift_release();
        swift_bridgeObjectRelease();
      }
      v20[1] = v26;
      swift_bridgeObjectRelease();
      v21 = (_QWORD *)*v20;
      v47 = *(_QWORD *)(*v20 + 16);
    }
    else
    {
      v47 = 0;
    }
    v48 = (uint64_t)v53;
    v49 = sub_1BDDC47E0(0, v47);
    v50 = sub_1BDDFED94(v21, v49);
    swift_release();
    if (v50)
    {
      *v20 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
    }
    sub_1BDD9C318((uint64_t)v20, v48, type metadata accessor for Proto_CustomCRValue);
    swift_beginAccess();
    sub_1BE128730(v48);
    return swift_release();
  }
}

uint64_t sub_1BDEF6AAC(int64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  BOOL v51;
  _QWORD v52[2];
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;

  v58 = a1;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v56 = *(_QWORD *)(v65 - 8);
  v2 = MEMORY[0x1E0C80A78](v65);
  v62 = (_QWORD *)((char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v52 - v4);
  v6 = type metadata accessor for Proto_Value(0);
  v59 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v60 = (uint64_t)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DCF8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v1;
  v15 = *(_QWORD *)(v1 + 16);
  type metadata accessor for CRStructEncoder();
  v16 = swift_allocObject();
  v17 = (_QWORD *)(v16 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  v18 = MEMORY[0x1E0DEE9D8];
  *v17 = MEMORY[0x1E0DEE9D8];
  v17[1] = v18;
  swift_retain();
  sub_1BE1B20E4();
  *(_QWORD *)(v16 + 16) = v15;
  v64 = v16;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DD10);
  sub_1BDDA9D60(&qword_1EF52DD18, &qword_1EF52DD10, (uint64_t)&unk_1BE1BD074);
  sub_1BE1B32C0();
  v64 = v58;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF0E8);
  sub_1BDEFA6A8(&qword_1EF52DD00, (uint64_t (*)(void))sub_1BDEFA71C, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
  v19 = v61;
  sub_1BE1B32B4();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v19)
    return swift_release();
  v21 = v56;
  v55 = v10;
  v22 = (_QWORD *)(v16 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  swift_beginAccess();
  v23 = (_QWORD *)*v22;
  if (*(_QWORD *)(*v22 + 16))
  {
    v24 = v22[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v25 = (_QWORD *)sub_1BDFCF900((uint64_t)v23, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = v25;
    sub_1BDEF7C74(&v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v63;
    v27 = v63[2];
    v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v54 = 0;
    if (v27)
    {
      v52[1] = v16;
      v53 = v22;
      v63 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      sub_1BDE22534(0, v27, 0);
      v29 = *(unsigned __int8 *)(v21 + 80);
      v52[0] = v26;
      v30 = (uint64_t)v26 + ((v29 + 32) & ~v29);
      v61 = *(_QWORD *)(v21 + 72);
      v31 = v63;
      v32 = v30;
      v33 = v27;
      v58 = v27;
      do
      {
        sub_1BDD86DEC(v32, (uint64_t)v5, &qword_1ED6EFC80);
        v34 = *(int *)(v65 + 48);
        v35 = v62;
        v36 = (uint64_t)v62 + v34;
        v37 = *v5;
        *v62 = *v5;
        sub_1BDD9C318((uint64_t)v5 + v34, (uint64_t)v35 + v34, type metadata accessor for Proto_Value);
        sub_1BDD9C3E0(v36, type metadata accessor for Proto_Value);
        sub_1BDD86E30((uint64_t)v5, &qword_1ED6EFC80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1BDE22534(0, v31[2] + 1, 1);
          v31 = v63;
        }
        v39 = v31[2];
        v38 = v31[3];
        v40 = v58;
        if (v39 >= v38 >> 1)
        {
          sub_1BDE22534(v38 > 1, v39 + 1, 1);
          v31 = v63;
        }
        v31[2] = v39 + 1;
        v31[v39 + 4] = v37;
        v32 += v61;
        --v33;
      }
      while (v33);
      *v53 = v31;
      swift_bridgeObjectRelease();
      v63 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      sub_1BDE225DC(0, v40, 0);
      v28 = v63;
      v41 = v60;
      do
      {
        sub_1BDD86DEC(v30, (uint64_t)v5, &qword_1ED6EFC80);
        v42 = *(int *)(v65 + 48);
        v43 = (uint64_t)v62 + v42;
        sub_1BDD9C318((uint64_t)v5 + v42, (uint64_t)v62 + v42, type metadata accessor for Proto_Value);
        sub_1BDDA2E8C(v43, v41, type metadata accessor for Proto_Value);
        sub_1BDD86E30((uint64_t)v5, &qword_1ED6EFC80);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1BDE225DC(0, v28[2] + 1, 1);
          v28 = v63;
        }
        v44 = v59;
        v46 = v28[2];
        v45 = v28[3];
        if (v46 >= v45 >> 1)
        {
          sub_1BDE225DC(v45 > 1, v46 + 1, 1);
          v44 = v59;
          v28 = v63;
        }
        v28[2] = v46 + 1;
        v47 = (uint64_t)v28
            + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))
            + *(_QWORD *)(v44 + 72) * v46;
        v41 = v60;
        sub_1BDDA2E8C(v60, v47, type metadata accessor for Proto_Value);
        v30 += v61;
        --v40;
      }
      while (v40);
      swift_release();
      v22 = v53;
    }
    else
    {
      *v22 = MEMORY[0x1E0DEE9D8];
      swift_release();
      swift_bridgeObjectRelease();
    }
    v22[1] = v28;
    swift_bridgeObjectRelease();
    v23 = (_QWORD *)*v22;
    v48 = *(_QWORD *)(*v22 + 16);
  }
  else
  {
    v54 = 0;
    v48 = 0;
  }
  v49 = (uint64_t)v55;
  v50 = sub_1BDDC47E0(0, v48);
  v51 = sub_1BDDFED94(v23, v50);
  swift_release();
  if (v51)
  {
    *v22 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
  }
  sub_1BDD9C318((uint64_t)v22, v49, type metadata accessor for Proto_CustomCRValue);
  swift_beginAccess();
  sub_1BE128730(v49);
  return swift_release();
}

void CRValueStruct.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BDEF7134()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDEF7174()
{
  return sub_1BE1B3704();
}

uint64_t sub_1BDEF7198()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

_QWORD *sub_1BDEF71D4@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != -1;
  return result;
}

void sub_1BDEF71E8(_QWORD *a1@<X8>)
{
  *a1 = -1;
}

unint64_t sub_1BDEF71F4()
{
  return 0xD000000000000010;
}

uint64_t sub_1BDEF7210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BDEFA5E0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BDEF7238()
{
  return -1;
}

uint64_t sub_1BDEF7244@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != -1;
  return result;
}

void sub_1BDEF7254(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7757E20;
}

uint64_t sub_1BDEF7268()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v0 = sub_1BDE06F60(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = sub_1BDE06F60((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v0[v2 + 4] = -1;
  v3 = sub_1BDEFA0EC((uint64_t)v0);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1BDEF72FC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;

  v0 = sub_1BDE06F60(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v2 = v0[2];
  v1 = v0[3];
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    v0 = sub_1BDE06F60((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
    v1 = v0[3];
    v3 = v1 >> 1;
  }
  v0[2] = v4;
  v0[v2 + 4] = 0;
  if (v3 < (uint64_t)(v2 + 2))
    v0 = sub_1BDE06F60((_QWORD *)(v1 > 1), v2 + 2, 1, v0);
  v0[2] = v2 + 2;
  v0[v4 + 4] = 1;
  v5 = sub_1BDEFA0EC((uint64_t)v0);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BDEF73E8()
{
  sub_1BDEFA2F8();
  return sub_1BE1B3794();
}

uint64_t sub_1BDEF7410()
{
  sub_1BDEFA2F8();
  return sub_1BE1B37A0();
}

uint64_t sub_1BDEF7438(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DCF8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDEFA2F8();
  sub_1BE1B377C();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF0E8);
  sub_1BDEFA6A8(&qword_1EF52DD00, (uint64_t (*)(void))sub_1BDEFA71C, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
  sub_1BE1B32B4();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BDEF755C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BDEF5B94((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

uint64_t sub_1BDEF75B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1BDEF5B94(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDEF75E8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BDEF5B94((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

uint64_t sub_1BDEF7638()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDEF7640(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t sub_1BDEF7668(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDEEE13C(*a1, *a2);
}

_QWORD *sub_1BDEF7674@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1BDEF9A98(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDEF769C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1BDEF7438(a1, *v1);
}

uint64_t sub_1BDEF76B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1BDEF9CAC(v4, a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t CRExtendableValueStruct.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  swift_bridgeObjectRetain();
  v9 = sub_1BDEF9CAC(v8, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(v9, a2, a3);
}

uint64_t sub_1BDEF77C8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDEF77D0(a1, *v1);
}

uint64_t sub_1BDEF77D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t);
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      return swift_release();
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v8)
        return swift_release();
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v8)
          return swift_release();
        v15 = *(_QWORD *)(v4 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v8)
            return swift_release();
          v15 = *(_QWORD *)(v4 + 8 * v10);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    v13 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v12) + 120);
    swift_retain();
    v13(a1);
    result = swift_release();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t CRExtendableValueStruct.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t);
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v5 = result;
  v6 = 0;
  v7 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v15 >= v11)
      return swift_release();
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v11)
        return swift_release();
      v16 = *(_QWORD *)(v7 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v11)
          return swift_release();
        v16 = *(_QWORD *)(v7 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v10 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v14 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * v13) + 120);
    swift_retain();
    v14(a1);
    result = swift_release();
  }
  v17 = v15 + 3;
  if (v17 >= v11)
    return swift_release();
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return swift_release();
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1BDEF7A9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BE183468(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDEF7AC4()
{
  int64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t result;

  v2 = *v0;
  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    sub_1BDEF6AAC(v2);
    return swift_release();
  }
  return result;
}

uint64_t AnyCRValue.init(from:)(uint64_t a1)
{
  uint64_t v2;

  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v2 = 0xD000000000000027;
  *(_QWORD *)(v2 + 8) = 0x80000001BE1CE920;
  *(_BYTE *)(v2 + 16) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BDEF7B90(uint64_t a1)
{
  uint64_t v2;

  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v2 = 0xD000000000000027;
  *(_QWORD *)(v2 + 8) = 0x80000001BE1CE920;
  *(_BYTE *)(v2 + 16) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BDEF7C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BE183924(a1, a2);
}

uint64_t sub_1BDEF7C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    sub_1BDEF649C(v0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDEF7C74(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1BDEF9814(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1BDEF81F0(v6);
  *a1 = v3;
  return result;
}

size_t sub_1BDEF7CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE778);
  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8) - 8) + 80);
      v10 = sub_1BDFCEBC8(&v11, (uint64_t)v6 + ((v9 + 32) & ~v9), v1, a1);
      swift_bridgeObjectRetain();
      sub_1BDE27FD0();
      if (v10 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDEF7E30(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B738);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1BDEF988C((unint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = sub_1BE1B323C();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BDEF7F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 31;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v5 & 0xFFFFFFFFFFFFFFFELL;
  v6 = sub_1BDFCEED8(&v8, (_WORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1BDE27FD0();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BDEF8004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B730);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_1BDFCF06C(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1BDE27FD0();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

size_t sub_1BDEF80D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C4F8);
  v3 = *(_QWORD *)(type metadata accessor for Replica() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = sub_1BDFCF3FC(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1BDE27FD0();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDEF81F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  int v34;
  unint64_t *v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;

  v2 = v1;
  v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v4 = *(_QWORD *)(v129 - 8);
  v5 = MEMORY[0x1E0C80A78](v129);
  v125 = (uint64_t)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v135 = (uint64_t)&v119 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v132 = (unint64_t *)((char *)&v119 - v10);
  MEMORY[0x1E0C80A78](v9);
  v131 = (unint64_t *)((char *)&v119 - v11);
  v12 = a1[1];
  result = sub_1BE1B32CC();
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      return sub_1BDEF8BAC(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v121 = result;
  v128 = v4;
  if (v12 < 2)
  {
    v18 = (char *)MEMORY[0x1E0DEE9D8];
    v127 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v120 = MEMORY[0x1E0DEE9D8];
    if (v12 != 1)
    {
      v20 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_104:
      if (v20 >= 2)
      {
        v113 = *a1;
        do
        {
          v114 = v20 - 2;
          if (v20 < 2)
            goto LABEL_133;
          if (!v113)
            goto LABEL_145;
          v115 = *(_QWORD *)&v18[16 * v114 + 32];
          v116 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_1BDEF8DF0(v113 + *(_QWORD *)(v4 + 72) * v115, v113 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v113 + *(_QWORD *)(v4 + 72) * v116, v127);
          if (v2)
            break;
          if (v116 < v115)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v18 = sub_1BDEF9798((uint64_t)v18);
          if (v114 >= *((_QWORD *)v18 + 2))
            goto LABEL_135;
          v117 = &v18[16 * v114 + 32];
          *(_QWORD *)v117 = v115;
          *((_QWORD *)v117 + 1) = v116;
          v118 = *((_QWORD *)v18 + 2);
          if (v20 > v118)
            goto LABEL_136;
          memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v118 - v20));
          *((_QWORD *)v18 + 2) = v118 - 1;
          v20 = v118 - 1;
          v4 = v128;
        }
        while (v118 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v120 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = sub_1BE1B29E4();
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v4 + 80);
    v120 = v16;
    v127 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)MEMORY[0x1E0DEE9D8];
  v133 = a1;
  while (1)
  {
    v122 = v18;
    v21 = v19 + 1;
    v126 = v19;
    if ((uint64_t)(v19 + 1) >= v12)
    {
      v27 = v19;
      v28 = v19 + 1;
      v18 = v122;
    }
    else
    {
      v22 = *a1;
      v23 = *(_QWORD *)(v4 + 72);
      v24 = v131;
      sub_1BDD86DEC(*a1 + v23 * v21, (uint64_t)v131, &qword_1ED6EFC80);
      v136 = v12;
      v25 = v132;
      sub_1BDD86DEC(v22 + v23 * v126, (uint64_t)v132, &qword_1ED6EFC80);
      v134 = *v24;
      v130 = *v25;
      v26 = (uint64_t)v25;
      v12 = v136;
      sub_1BDD86E30(v26, &qword_1ED6EFC80);
      v27 = v126;
      sub_1BDD86E30((uint64_t)v24, &qword_1ED6EFC80);
      v28 = v27 + 2;
      v123 = v22;
      v137 = v23;
      if (v27 + 2 >= v12)
      {
        v37 = v23;
        v4 = v128;
      }
      else
      {
        v124 = v2;
        v29 = v23 * v21;
        v30 = v22;
        v31 = v23 * v28;
        while (1)
        {
          v32 = v28;
          v33 = v131;
          v34 = v134 < v130;
          sub_1BDD86DEC(v30 + v31, (uint64_t)v131, &qword_1ED6EFC80);
          v35 = v132;
          sub_1BDD86DEC(v30 + v29, (uint64_t)v132, &qword_1ED6EFC80);
          v36 = *v33 >= *v35;
          sub_1BDD86E30((uint64_t)v35, &qword_1ED6EFC80);
          sub_1BDD86E30((uint64_t)v33, &qword_1ED6EFC80);
          if (v34 == v36)
            break;
          ++v28;
          v37 = v137;
          v30 += v137;
          if (v136 == v32 + 1)
          {
            v12 = v136;
            v28 = v136;
            v4 = v128;
            a1 = v133;
            v2 = v124;
            v27 = v126;
            goto LABEL_24;
          }
        }
        v4 = v128;
        a1 = v133;
        v2 = v124;
        v27 = v126;
        v12 = v136;
        v37 = v137;
      }
LABEL_24:
      v18 = v122;
      if (v134 < v130)
      {
        if (v28 < v27)
          goto LABEL_139;
        if (v27 < v28)
        {
          v38 = 0;
          v39 = v37 * (v28 - 1);
          v40 = v28 * v37;
          v41 = v27 * v37;
          do
          {
            if (v27 != v28 + v38 - 1)
            {
              v124 = v2;
              v43 = v123;
              if (!v123)
                goto LABEL_144;
              v44 = v123 + v41;
              v134 = v123 + v39;
              sub_1BDEFA760(v123 + v41, v125);
              if (v41 < v39 || v44 >= v43 + v40)
              {
                v42 = v134;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v42 = v134;
                if (v41 != v39)
                  swift_arrayInitWithTakeBackToFront();
              }
              sub_1BDEFA760(v125, v42);
              v2 = v124;
              v37 = v137;
            }
            ++v27;
            --v38;
            v39 -= v37;
            v40 -= v37;
            v41 += v37;
          }
          while (v27 < v28 + v38);
          v4 = v128;
          v18 = v122;
          v27 = v126;
          v12 = v136;
        }
      }
    }
    if (v28 < v12)
    {
      if (__OFSUB__(v28, v27))
        goto LABEL_137;
      if (v28 - v27 < v121)
        break;
    }
LABEL_56:
    if (v28 < v27)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v134 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_1BDEF9288(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v63 = *((_QWORD *)v18 + 2);
    v62 = *((_QWORD *)v18 + 3);
    v20 = v63 + 1;
    if (v63 >= v62 >> 1)
      v18 = sub_1BDEF9288((char *)(v62 > 1), v63 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v64 = v18 + 32;
    v65 = &v18[16 * v63 + 32];
    v66 = v134;
    *(_QWORD *)v65 = v126;
    *((_QWORD *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        v67 = v20 - 1;
        if (v20 >= 4)
        {
          v72 = &v64[16 * v20];
          v73 = *((_QWORD *)v72 - 8);
          v74 = *((_QWORD *)v72 - 7);
          v78 = __OFSUB__(v74, v73);
          v75 = v74 - v73;
          if (v78)
            goto LABEL_121;
          v77 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 5);
          v78 = __OFSUB__(v76, v77);
          v70 = v76 - v77;
          v71 = v78;
          if (v78)
            goto LABEL_122;
          v79 = v20 - 2;
          v80 = &v64[16 * v20 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v78 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v78)
            goto LABEL_124;
          v78 = __OFADD__(v70, v83);
          v84 = v70 + v83;
          if (v78)
            goto LABEL_127;
          if (v84 >= v75)
          {
            v102 = &v64[16 * v67];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78)
              goto LABEL_131;
            v95 = v70 < v105;
            goto LABEL_93;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v96 = *((_QWORD *)v18 + 4);
            v97 = *((_QWORD *)v18 + 5);
            v78 = __OFSUB__(v97, v96);
            v89 = v97 - v96;
            v90 = v78;
            goto LABEL_87;
          }
          v69 = *((_QWORD *)v18 + 4);
          v68 = *((_QWORD *)v18 + 5);
          v78 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          v71 = v78;
        }
        if ((v71 & 1) != 0)
          goto LABEL_123;
        v79 = v20 - 2;
        v85 = &v64[16 * v20 - 32];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v88 = __OFSUB__(v86, v87);
        v89 = v86 - v87;
        v90 = v88;
        if (v88)
          goto LABEL_126;
        v91 = &v64[16 * v67];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v78 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v78)
          goto LABEL_129;
        if (__OFADD__(v89, v94))
          goto LABEL_130;
        if (v89 + v94 >= v70)
        {
          v95 = v70 < v94;
LABEL_93:
          if (v95)
            v67 = v79;
          goto LABEL_95;
        }
LABEL_87:
        if ((v90 & 1) != 0)
          goto LABEL_125;
        v98 = &v64[16 * v67];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v78 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v78)
          goto LABEL_128;
        if (v101 < v89)
          goto LABEL_14;
LABEL_95:
        v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v107 = *a1;
        if (!*a1)
          goto LABEL_143;
        v108 = &v64[16 * v106];
        v109 = *(_QWORD *)v108;
        v110 = &v64[16 * v67];
        v111 = *((_QWORD *)v110 + 1);
        sub_1BDEF8DF0(v107 + *(_QWORD *)(v128 + 72) * *(_QWORD *)v108, v107 + *(_QWORD *)(v128 + 72) * *(_QWORD *)v110, v107 + *(_QWORD *)(v128 + 72) * v111, v127);
        if (v2)
          goto LABEL_115;
        if (v111 < v109)
          goto LABEL_118;
        if (v67 > *((_QWORD *)v18 + 2))
          goto LABEL_119;
        *(_QWORD *)v108 = v109;
        *(_QWORD *)&v64[16 * v106 + 8] = v111;
        v112 = *((_QWORD *)v18 + 2);
        if (v67 >= v112)
          goto LABEL_120;
        v20 = v112 - 1;
        memmove(&v64[16 * v67], v110 + 16, 16 * (v112 - 1 - v67));
        *((_QWORD *)v18 + 2) = v112 - 1;
        a1 = v133;
        if (v112 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v134;
    v4 = v128;
    if ((uint64_t)v134 >= v12)
      goto LABEL_104;
  }
  if (__OFADD__(v27, v121))
    goto LABEL_140;
  if (v27 + v121 >= v12)
    v45 = v12;
  else
    v45 = v27 + v121;
  if (v45 >= v27)
  {
    if (v28 != v45)
    {
      v123 = v45;
      v124 = v2;
      v46 = *(_QWORD *)(v4 + 72);
      v47 = v46 * (v28 - 1);
      v130 = v46;
      v48 = v28 * v46;
      do
      {
        v50 = 0;
        v134 = v28;
        while (1)
        {
          v136 = v27;
          v51 = *a1;
          v52 = v48;
          v53 = v48 + v50 + *a1;
          v54 = v131;
          sub_1BDD86DEC(v53, (uint64_t)v131, &qword_1ED6EFC80);
          v55 = v47;
          v56 = v47 + v50 + v51;
          v57 = v132;
          sub_1BDD86DEC(v56, (uint64_t)v132, &qword_1ED6EFC80);
          v137 = *v54;
          v58 = *v57;
          sub_1BDD86E30((uint64_t)v57, &qword_1ED6EFC80);
          sub_1BDD86E30((uint64_t)v54, &qword_1ED6EFC80);
          if (v137 >= v58)
            break;
          v59 = *a1;
          if (!*a1)
            goto LABEL_142;
          v48 = v52;
          v47 = v55;
          v60 = v59 + v55 + v50;
          sub_1BDEFA760(v59 + v52 + v50, v135);
          swift_arrayInitWithTakeFrontToBack();
          sub_1BDEFA760(v135, v60);
          v50 -= v130;
          v27 = v136 + 1;
          a1 = v133;
          v49 = v134;
          if (v134 == v136 + 1)
            goto LABEL_49;
        }
        v49 = v134;
        v47 = v55;
        v48 = v52;
LABEL_49:
        v28 = v49 + 1;
        v47 += v130;
        v48 += v130;
        v27 = v126;
      }
      while (v28 != v123);
      v28 = v123;
      v2 = v124;
      v18 = v122;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

uint64_t sub_1BDEF8BAC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v27 = a1;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v7 = MEMORY[0x1E0C80A78](v28);
  v33 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v30 = (char *)&v25 - v10;
  result = MEMORY[0x1E0C80A78](v9);
  v29 = (unint64_t *)((char *)&v25 - v13);
  v32 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v36 = v14 * (v32 - 1);
    v31 = v14;
    v35 = v14 * v32;
    v15 = (unint64_t *)v30;
LABEL_5:
    v16 = 0;
    v17 = v27;
    while (1)
    {
      v18 = a4;
      v19 = *a4;
      v20 = v29;
      sub_1BDD86DEC(v35 + v16 + v19, (uint64_t)v29, &qword_1ED6EFC80);
      sub_1BDD86DEC(v36 + v16 + v19, (uint64_t)v15, &qword_1ED6EFC80);
      v34 = *v20;
      v21 = *v15;
      sub_1BDD86E30((uint64_t)v15, &qword_1ED6EFC80);
      result = sub_1BDD86E30((uint64_t)v20, &qword_1ED6EFC80);
      v22 = v34 >= v21;
      a4 = v18;
      if (v22)
      {
LABEL_4:
        v36 += v31;
        v35 += v31;
        if (++v32 == v26)
          return result;
        goto LABEL_5;
      }
      v23 = *v18;
      if (!*v18)
        break;
      v24 = v23 + v36 + v16;
      sub_1BDEFA760(v23 + v35 + v16, v33);
      swift_arrayInitWithTakeFrontToBack();
      result = sub_1BDEFA760(v33, v24);
      v16 -= v31;
      ++v17;
      a4 = v18;
      if (v32 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDEF8DF0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v8 = MEMORY[0x1E0C80A78](v48);
  v50 = (unint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v11 = (unint64_t *)((char *)&v45 - v10);
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_70;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_71;
  v15 = (uint64_t)(a2 - a1) / v13;
  v53 = a1;
  v52 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v29 = a4 + v18;
      v51 = a4 + v18;
      v53 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v31 = -v13;
        v46 = a1;
        v47 = a4;
        do
        {
          v49 = a3 + v31;
          sub_1BDD86DEC(v29 + v31, (uint64_t)v11, &qword_1ED6EFC80);
          v32 = a2 + v31;
          v33 = a3;
          v34 = v11;
          v35 = v50;
          sub_1BDD86DEC(a2 + v31, (uint64_t)v50, &qword_1ED6EFC80);
          v36 = *v34;
          v37 = *v35;
          v38 = (uint64_t)v35;
          v11 = v34;
          sub_1BDD86E30(v38, &qword_1ED6EFC80);
          sub_1BDD86E30((uint64_t)v34, &qword_1ED6EFC80);
          if (v36 >= v37)
          {
            v42 = v51;
            v51 += v31;
            a3 = v49;
            if (v33 < v42 || v49 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v33 != v42)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v32 = a2;
            v41 = v46;
            v40 = v47;
          }
          else
          {
            a3 = v49;
            if (v33 < a2 || v49 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v41 = v46;
              v40 = v47;
            }
            else
            {
              v39 = v33 == a2;
              v41 = v46;
              v40 = v47;
              if (!v39)
                swift_arrayInitWithTakeBackToFront();
            }
            v53 += v31;
          }
          v29 = v51;
          if (v51 <= v40)
            break;
          a2 = v32;
        }
        while (v32 > v41);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v49 = a4 + v17;
    v51 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1BDD86DEC(a2, (uint64_t)v11, &qword_1ED6EFC80);
        v20 = a4;
        v21 = v50;
        sub_1BDD86DEC(v20, (uint64_t)v50, &qword_1ED6EFC80);
        v22 = *v11;
        v23 = *v21;
        sub_1BDD86E30((uint64_t)v21, &qword_1ED6EFC80);
        sub_1BDD86E30((uint64_t)v11, &qword_1ED6EFC80);
        v24 = v53;
        if (v22 >= v23)
        {
          v27 = v52 + v13;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 != v52)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v52 = v27;
          v25 = a2;
        }
        else
        {
          v25 = a2 + v13;
          if (v53 < a2 || v53 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v53 = v24 + v13;
        a4 = v52;
        if (v52 >= v49)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    sub_1BDEF938C(&v53, &v52, (uint64_t *)&v51, &qword_1ED6EFC80);
    return 1;
  }
LABEL_72:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDEF9288(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3B8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1BDEF9380(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1BDEF938C(a1, a2, a3, &qword_1ED6F3CB8);
}

uint64_t sub_1BDEF938C(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = sub_1BE1B326C();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_1BDEF9498(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  else
    v5 = v4 + 1;
  if (v4 <= -2)
  {
    result = (char *)sub_1BE1B326C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 1;
    if (result != v3 || result >= &v3[2 * v7])
      return (char *)memmove(result, v3, 2 * v7);
  }
  return result;
}

char *sub_1BDEF953C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    result = (char *)sub_1BE1B326C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

uint64_t sub_1BDEF95CC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1BDEF968C(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
}

char *sub_1BDEF95D8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1BE1B326C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_1BDEF9680(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1BDEF968C(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t sub_1BDEF968C(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = sub_1BE1B326C();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_1BDEF9798(uint64_t a1)
{
  return sub_1BDEF9288(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void (*sub_1BDEF97AC(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1BE155518(v6, a2, a3);
  return sub_1BDE5E0D0;
}

uint64_t sub_1BDEF9800(_QWORD *a1)
{
  return sub_1BDE22B90(0, a1[2], 0, a1);
}

uint64_t sub_1BDEF9814(_QWORD *a1)
{
  return sub_1BDE231DC(0, a1[2], 0, a1);
}

uint64_t sub_1BDEF9828(uint64_t a1)
{
  return sub_1BDE23978(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BDEF983C(uint64_t a1)
{
  return sub_1BDE23AD0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BDEF9850(_QWORD *a1)
{
  return sub_1BDE23C1C(0, a1[2], 0, a1);
}

uint64_t sub_1BDEF9864(uint64_t a1)
{
  return sub_1BDD93E54(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BDEF9878(_QWORD *a1)
{
  return sub_1BDE24284(0, a1[2], 0, a1);
}

uint64_t sub_1BDEF988C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BE1B323C();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BE1B323C();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BDDA9D60(&qword_1EF52DD38, &qword_1EF52DD30, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DD30);
          v12 = sub_1BDEF97AC(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CRDecodeContext.AnyDecodingReference();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

_QWORD *sub_1BDEF9A98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DCE0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDEFA2F8();
  sub_1BE1B3758();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF0E8);
    sub_1BDEFA6A8(&qword_1EF52DCE8, (uint64_t (*)(void))sub_1BDEFA664, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEA0D8]);
    sub_1BE1B329C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1BDEF9BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11[4];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1BDEFA7EC();
  result = sub_1BE1B2B7C();
  v12 = result;
  if (v2)
  {
    v4 = (unint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      sub_1BDDC8E74(v5);
      sub_1BDDB6CA4(v7, v8);
      sub_1BDE68320(v11, v5, v6, v7, v8);
      v9 = v11[2];
      v10 = v11[3];
      sub_1BDDC8EA0(v11[0]);
      sub_1BDDB796C(v9, v10);
      v4 += 4;
      --v2;
    }
    while (v2);
    return v12;
  }
  return result;
}

uint64_t sub_1BDEF9CAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFC0);
  result = sub_1BE1B3248();
  v4 = (_QWORD *)result;
  v5 = 0;
  v26 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v24 = v7;
  v25 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v26 + 48) + 8 * i);
    v19 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v26 + 56) + 8 * i) + 104);
    swift_retain();
    v20 = v19(a2);
    result = swift_release();
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v4[6] + 8 * i) = v18;
    *(_QWORD *)(v4[7] + 8 * i) = v20;
    v21 = v4[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v4[2] = v23;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_24;
    if (v15 >= v25)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v24 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v25)
        return (uint64_t)v4;
      v16 = *(_QWORD *)(v24 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v25)
          return (uint64_t)v4;
        v16 = *(_QWORD *)(v24 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v11 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v25)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v24 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v25)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v24 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1BDEF9EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int16 *v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1BE1B2B7C();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int16 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1BDE69AAC(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1BDEF9F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1BDEFA830();
  result = sub_1BE1B2B7C();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1BDE69BAC(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1BDEF9F90(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1BE1B323C();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyReference();
  sub_1BDD8422C((unint64_t *)&qword_1EF52CFD8, (uint64_t (*)(uint64_t))type metadata accessor for AnyReference, (uint64_t)&unk_1BE1BCF30);
  result = sub_1BE1B2B7C();
  v4 = result;
  v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1BE1B323C();
    result = swift_bridgeObjectRelease();
    if (!v5)
      return v4;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      return v4;
  }
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1C3B7CFAC](i, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1BDE6806C(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDEFA0EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1BE1B2B7C();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1BDDC6E74(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t dispatch thunk of CRExtendableValueStruct.additionalFields.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CRExtendableValueStruct.additionalFields.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CRExtendableValueStruct.additionalFields.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static IntCaseIterable.intCases.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for AnyCRValueStruct()
{
  return &type metadata for AnyCRValueStruct;
}

unint64_t sub_1BDEFA190()
{
  unint64_t result;

  result = qword_1EF52DC88;
  if (!qword_1EF52DC88)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBCB0, &type metadata for AnyCRValueStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DC88);
  }
  return result;
}

uint64_t sub_1BDEFA1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDEFA284(a1, a2, a3, (uint64_t (*)(void))sub_1BDEFA1E8, (uint64_t (*)(void))sub_1BDEFA22C);
}

unint64_t sub_1BDEFA1E8()
{
  unint64_t result;

  result = qword_1EF52DC90;
  if (!qword_1EF52DC90)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBC5C, &type metadata for AnyCRValueStruct);
    atomic_store(result, (unint64_t *)&qword_1EF52DC90);
  }
  return result;
}

unint64_t sub_1BDEFA22C()
{
  unint64_t result;

  result = qword_1EF52DC98;
  if (!qword_1EF52DC98)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBC34, &type metadata for AnyCRValueStruct);
    atomic_store(result, (unint64_t *)&qword_1EF52DC98);
  }
  return result;
}

uint64_t sub_1BDEFA270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDEFA284(a1, a2, a3, (uint64_t (*)(void))sub_1BDEFA2B4, (uint64_t (*)(void))sub_1BDEFA2F8);
}

uint64_t sub_1BDEFA284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = a4();
  result = a5();
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

unint64_t sub_1BDEFA2B4()
{
  unint64_t result;

  result = qword_1EF52DCA0;
  if (!qword_1EF52DCA0)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBD6C, &type metadata for AnyCRValueStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DCA0);
  }
  return result;
}

unint64_t sub_1BDEFA2F8()
{
  unint64_t result;

  result = qword_1EF52DCA8;
  if (!qword_1EF52DCA8)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBCCC, &type metadata for AnyCRValueStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DCA8);
  }
  return result;
}

unint64_t sub_1BDEFA340()
{
  unint64_t result;

  result = qword_1EF52DCB0;
  if (!qword_1EF52DCB0)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBD44, &type metadata for AnyCRValueStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DCB0);
  }
  return result;
}

unint64_t sub_1BDEFA388()
{
  unint64_t result;

  result = qword_1EF52DCB8;
  if (!qword_1EF52DCB8)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBD1C, &type metadata for AnyCRValueStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DCB8);
  }
  return result;
}

uint64_t sub_1BDEFA3CC()
{
  return sub_1BDDA9D60(&qword_1EF52DCC0, &qword_1EF52DCC8, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1BDEFA3F8(uint64_t a1)
{
  unint64_t result;

  result = sub_1BDEFA41C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1BDEFA41C()
{
  unint64_t result;

  result = qword_1EF52DCD0;
  if (!qword_1EF52DCD0)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBC94, &type metadata for AnyCRValueStruct);
    atomic_store(result, (unint64_t *)&qword_1EF52DCD0);
  }
  return result;
}

unint64_t sub_1BDEFA464()
{
  unint64_t result;

  result = qword_1EF52DCD8;
  if (!qword_1EF52DCD8)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBDB4, &type metadata for AnyCRValueStruct);
    atomic_store(result, (unint64_t *)&qword_1EF52DCD8);
  }
  return result;
}

uint64_t sub_1BDEFA4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1BDEFA7A8();
  result = sub_1BE1B2B7C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDE6A6F4((uint64_t)&v7, v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1BDEFA54C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1BE1B2B7C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1BDE6A8FC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1BDEFA5E0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001BE1CE950)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BE1B34AC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1BDEFA664()
{
  unint64_t result;

  result = qword_1EF52DCF0;
  if (!qword_1EF52DCF0)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for AnyCRValue, &type metadata for AnyCRValue);
    atomic_store(result, (unint64_t *)&qword_1EF52DCF0);
  }
  return result;
}

uint64_t sub_1BDEFA6A8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED6EF0E8);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1C3B7DF54](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BDEFA71C()
{
  unint64_t result;

  result = qword_1EF52DD08;
  if (!qword_1EF52DD08)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for AnyCRValue, &type metadata for AnyCRValue);
    atomic_store(result, (unint64_t *)&qword_1EF52DD08);
  }
  return result;
}

uint64_t sub_1BDEFA760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BDEFA7A8()
{
  unint64_t result;

  result = qword_1EF52DD20;
  if (!qword_1EF52DD20)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRVersion, &type metadata for CRVersion);
    atomic_store(result, (unint64_t *)&qword_1EF52DD20);
  }
  return result;
}

unint64_t sub_1BDEFA7EC()
{
  unint64_t result;

  result = qword_1EF52DD28;
  if (!qword_1EF52DD28)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BDE08, &type metadata for CRUnknownCRDT.Sibling);
    atomic_store(result, (unint64_t *)&qword_1EF52DD28);
  }
  return result;
}

unint64_t sub_1BDEFA830()
{
  unint64_t result;

  result = qword_1EF52B430;
  if (!qword_1EF52B430)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRCodableVersion, &type metadata for CRCodableVersion);
    atomic_store(result, (unint64_t *)&qword_1EF52B430);
  }
  return result;
}

unint64_t sub_1BDEFA874()
{
  unint64_t result;

  result = qword_1EF52DD48;
  if (!qword_1EF52DD48)
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB0358], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF52DD48);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnyCRValueStruct.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BDEFA8F8 + 4 * byte_1BE1BBB60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BDEFA918 + 4 * byte_1BE1BBB65[v4]))();
}

_BYTE *sub_1BDEFA8F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BDEFA918(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BDEFA920(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BDEFA928(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BDEFA930(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BDEFA938(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AnyCRValueStruct.CodingKeys()
{
  return &type metadata for AnyCRValueStruct.CodingKeys;
}

unint64_t sub_1BDEFA958()
{
  unint64_t result;

  result = qword_1EF52DD50;
  if (!qword_1EF52DD50)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BBEB0, &type metadata for AnyCRValueStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DD50);
  }
  return result;
}

uint64_t sub_1BDEFA99C()
{
  return swift_initClassMetadata2();
}

_QWORD *sub_1BDEFA9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v11;

  result = (_QWORD *)swift_allocObject();
  result[6] = a2;
  result[7] = a5;
  v11 = MEMORY[0x1E0DEE9E0];
  result[8] = a4;
  result[2] = v11;
  result[3] = v11;
  result[4] = a3;
  result[5] = a1;
  return result;
}

uint64_t sub_1BDEFAA5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD **v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  uint64_t v109;
  char v110;
  _QWORD *v111;
  uint64_t v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  int64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _OWORD *v142;
  int64_t v143;
  unint64_t v144;
  int64_t v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  void *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned __int8 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v177;
  char v178;
  unint64_t v179;
  uint64_t v180;
  _BOOL8 v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  _QWORD *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  int64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  _QWORD *v214;
  uint64_t v215;
  int64_t v216;
  int64_t v217;
  _QWORD *v218;
  int64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _QWORD *v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unsigned __int8 v235;
  _QWORD *v236;
  _QWORD *v237;

  v2 = (uint64_t)v0;
  v3 = *v0;
  result = sub_1BDFB8000();
  v5 = v1;
  if (v1)
    return result;
  v199 = v3;
  v201 = result;
  v213 = v0 + 2;
  swift_beginAccess();
  v6 = v0[2];
  if (!*(_QWORD *)(v6 + 16))
    return swift_bridgeObjectRelease();
  v214 = v0 + 3;
  v200 = v0;
  while (1)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BDEFC124((uint64_t)sub_1BDEFC9AC, v2, v6);
    v197 = v5;
    if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
    {
      v8 = (uint64_t)sub_1BDEF7E30(v7);
      v7 = swift_bridgeObjectRelease();
    }
    else
    {
      v8 = v7 & 0xFFFFFFFFFFFFFF8;
    }
    MEMORY[0x1E0C80A78](v7);
    v11 = *(_QWORD *)(v9 + 216);
    v192 = *(_QWORD *)(v9 + 208);
    v10 = v192;
    v193 = v11;
    v194 = v201;
    v12 = type metadata accessor for CRDecodeContext.AnyDecodingReference();
    v14 = type metadata accessor for CRDataStoreBundleDecodeContext(0, v10, v11, v13);
    v15 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF52B740);
    v16 = (uint64_t)v200;
    v205 = v8;
    v17 = v8;
    v18 = v14;
    sub_1BDEE7FC8((void (*)(void))sub_1BDEFC9C8, (uint64_t)v200, (uint64_t)sub_1BDEFC9D0, (uint64_t)&v191, v17, v12, v14, v15);
    v20 = v19;
    v198 = v21;
    *(_QWORD *)(v16 + 16) = sub_1BE1267C4(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    v22 = swift_bridgeObjectRetain();
    if (MEMORY[0x1C3B7C928](v22, v18))
      break;
LABEL_145:
    swift_bridgeObjectRelease();
    v237 = v198;
    v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B6A8);
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v146);
    sub_1BE1B28B8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v237 = (_QWORD *)v228;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B700);
    sub_1BE1B320C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B6F8);
    sub_1BE1B3218();
    v147 = v235;
    if (v235 != 255)
    {
      v148 = v228;
      v149 = v229;
      v151 = v230;
      v150 = v231;
      v152 = v232;
      v153 = v233;
      v154 = v205;
      v220 = v205 & 0xC000000000000001;
      v219 = v205 + 32;
      v155 = v234;
      do
      {
        if ((v147 & 1) != 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_willThrow();
        }
        LODWORD(v226) = v147;
        *(_QWORD *)&v225 = v148;
        v227 = v153;
        if (v220)
        {
          sub_1BDEFC9DC(v149, v151, v150, v152, (uint64_t)v153, v155, 0);
          v164 = MEMORY[0x1C3B7CFAC](v148, v154);
        }
        else
        {
          if ((v148 & 0x8000000000000000) != 0)
            goto LABEL_176;
          if (v148 >= *(_QWORD *)(v154 + 16))
          {
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          v164 = *(_QWORD *)(v219 + 8 * v148);
          sub_1BDEFCAD4(v148, v149, v151, v150, v152, (uint64_t)v153, v155, v147);
          swift_retain();
        }
        v165 = v155;
        v166 = v152;
        v167 = *(_QWORD *)(v164 + 16);
        v168 = *(_QWORD *)(v164 + 24);
        sub_1BDDB6CA4(v167, v168);
        swift_release();
        v169 = v214;
        swift_beginAccess();
        v222 = (uint64_t)v149;
        *(_QWORD *)&v224 = v151;
        v223 = v150;
        v170 = v150;
        v171 = v166;
        v172 = v166;
        v173 = v168;
        v174 = v167;
        v175 = v227;
        sub_1BDEFC9DC(v149, v151, v170, v172, (uint64_t)v227, v165, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v237 = (_QWORD *)*v169;
        v177 = v237;
        *v169 = 0x8000000000000000;
        v179 = sub_1BDDB7F0C(v174, v173);
        v180 = v177[2];
        v181 = (v178 & 1) == 0;
        v182 = v180 + v181;
        if (__OFADD__(v180, v181))
          goto LABEL_178;
        v183 = v178;
        if (v177[3] >= v182)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1BDDB7F70();
        }
        else
        {
          sub_1BDDC50C4(v182, isUniquelyReferenced_nonNull_native);
          v184 = sub_1BDDB7F0C(v174, v173);
          if ((v183 & 1) != (v185 & 1))
            goto LABEL_184;
          v179 = v184;
        }
        v186 = v237;
        v221 = v237;
        if ((v183 & 1) != 0)
        {
          v156 = (uint64_t *)(v237[7] + 48 * v179);
          v218 = (_QWORD *)v156[2];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v157 = (void *)v222;
          v158 = v224;
          *v156 = v222;
          v156[1] = v158;
          v159 = v173;
          v160 = v223;
          v156[2] = v223;
          v156[3] = v171;
          v156[4] = (uint64_t)v175;
          v156[5] = v165;
          v161 = v171;
        }
        else
        {
          v237[(v179 >> 6) + 8] |= 1 << v179;
          v187 = (uint64_t *)(v186[6] + 16 * v179);
          *v187 = v174;
          v187[1] = v173;
          v188 = (uint64_t *)(v186[7] + 48 * v179);
          v157 = (void *)v222;
          v158 = v224;
          *v188 = v222;
          v188[1] = v158;
          v159 = v173;
          v160 = v223;
          v188[2] = v223;
          v188[3] = v171;
          v188[4] = (uint64_t)v175;
          v188[5] = v165;
          v189 = v186[2];
          v26 = __OFADD__(v189, 1);
          v190 = v189 + 1;
          if (v26)
            goto LABEL_179;
          v161 = v171;
          v186[2] = v190;
          sub_1BDDB6CA4(v174, v159);
        }
        *v214 = v221;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v174, v159);
        swift_endAccess();
        v162 = v225;
        v163 = v226;
        sub_1BDEFCA34(v225, v157, v158, v160, v161, (uint64_t)v175, v165, v226);
        sub_1BDEFCA34(v162, v157, v158, v160, v161, (uint64_t)v175, v165, v163);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B6F8);
        sub_1BE1B3218();
        v148 = v228;
        v149 = v229;
        v151 = v230;
        v150 = v231;
        v152 = v232;
        v153 = v233;
        v155 = v234;
        v147 = v235;
        v154 = v205;
      }
      while (v235 != 255);
    }
    swift_release();
    swift_bridgeObjectRelease();
    v6 = *v213;
    v5 = v197;
    v2 = (uint64_t)v200;
    if (!*(_QWORD *)(*v213 + 16))
      return swift_bridgeObjectRelease();
  }
  v23 = 0;
  v208 = v20 + 32;
  v207 = v20;
  v206 = v18;
LABEL_10:
  v25 = sub_1BE1B29FC();
  sub_1BE1B29A8();
  if ((v25 & 1) != 0)
  {
    v215 = *(_QWORD *)(v208 + 8 * v23);
    swift_retain();
    v26 = __OFADD__(v23, 1);
    v27 = v23 + 1;
    if (v26)
      goto LABEL_175;
  }
  else
  {
    v215 = sub_1BE1B30BC();
    v26 = __OFADD__(v23, 1);
    v27 = v23 + 1;
    if (v26)
      goto LABEL_175;
  }
  v212 = v27;
  v28 = v215;
  swift_beginAccess();
  v29 = *(_QWORD *)(v28 + 16);
  v30 = v213;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v31 = swift_isUniquelyReferenced_nonNull_native();
  v32 = (_QWORD *)*v30;
  v236 = (_QWORD *)*v30;
  *v30 = 0x8000000000000000;
  v33 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)&v225 = v29 + 64;
  v34 = -1 << *(_BYTE *)(v29 + 32);
  v223 = ~v34;
  if (-v34 < 64)
    v35 = ~(-1 << -(char)v34);
  else
    v35 = -1;
  v36 = v35 & v33;
  v37 = (unint64_t)(63 - v34) >> 6;
  swift_bridgeObjectRetain();
  v38 = 0;
  *(_QWORD *)&v224 = v37;
  v222 = v37 - 7;
  *(_QWORD *)&v226 = v29;
  v221 = (_QWORD *)(v29 + 120);
  while (1)
  {
    if (v36)
    {
      v40 = (v36 - 1) & v36;
      v41 = __clz(__rbit64(v36)) | (v38 << 6);
      v42 = v38;
    }
    else
    {
      v42 = v38 + 1;
      if (__OFADD__(v38, 1))
        goto LABEL_173;
      if (v42 >= (uint64_t)v224)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        sub_1BDE27FD0();
        *v213 = (uint64_t)v32;
        swift_bridgeObjectRelease();
        swift_endAccess();
        v78 = v215;
        swift_beginAccess();
        v79 = *(_QWORD *)(v78 + 24);
        v80 = (_QWORD **)v214;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        v81 = swift_isUniquelyReferenced_nonNull_native();
        v227 = *v80;
        v236 = v227;
        *v80 = (_QWORD *)0x8000000000000000;
        v82 = *(_QWORD *)(v79 + 64);
        v217 = v79 + 64;
        v83 = -1 << *(_BYTE *)(v79 + 32);
        v211 = ~v83;
        if (-v83 < 64)
          v84 = ~(-1 << -(char)v83);
        else
          v84 = -1;
        v85 = v84 & v82;
        v86 = (unint64_t)(63 - v83) >> 6;
        swift_bridgeObjectRetain();
        v87 = 0;
        v216 = v86;
        v210 = v86 - 7;
        v218 = (_QWORD *)v79;
        v209 = v79 + 120;
LABEL_82:
        LODWORD(v224) = v81;
        v221 = (_QWORD *)v87;
        if (v85)
        {
          v222 = (v85 - 1) & v85;
          v91 = __clz(__rbit64(v85)) | (v87 << 6);
          v92 = v87;
LABEL_97:
          v95 = (uint64_t *)(v218[6] + 16 * v91);
          v97 = *v95;
          v96 = v95[1];
          v98 = v218[7] + 48 * v91;
          v99 = *(_QWORD *)v98;
          v223 = *(_QWORD *)(v98 + 8);
          v226 = *(_OWORD *)(v98 + 16);
          v225 = *(_OWORD *)(v98 + 32);
          sub_1BDDB6CA4(v97, v96);
          swift_retain();
          v100 = v226;
          swift_bridgeObjectRetain();
          v101 = *((_QWORD *)&v226 + 1);
          swift_bridgeObjectRetain();
          v102 = v225;
          swift_bridgeObjectRetain();
          v103 = *((_QWORD *)&v225 + 1);
          swift_bridgeObjectRetain();
          sub_1BDDB6CA4(v97, v96);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1BDDB796C(v97, v96);
          swift_bridgeObjectRelease();
          v220 = v102;
          swift_bridgeObjectRelease();
          v219 = v101;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if (v100)
          {
            v221 = (_QWORD *)v92;
            v104 = v227;
            v106 = sub_1BDDB7F0C(v97, v96);
            v107 = v104[2];
            v108 = (v105 & 1) == 0;
            v109 = v107 + v108;
            if (!__OFADD__(v107, v108))
            {
              v110 = v105;
              if (v227[3] < v109)
              {
                sub_1BDDC50C4(v109, v224 & 1);
                v111 = v236;
                v112 = sub_1BDDB7F0C(v97, v96);
                if ((v110 & 1) != (v113 & 1))
                  goto LABEL_184;
                v106 = v112;
                if ((v110 & 1) != 0)
                  goto LABEL_81;
                goto LABEL_105;
              }
              if ((v224 & 1) != 0)
              {
                v111 = v227;
                if ((v105 & 1) != 0)
                  goto LABEL_81;
                goto LABEL_105;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B8);
              v121 = v227;
              v122 = sub_1BE1B3248();
              v111 = (_QWORD *)v122;
              if (!v121[2])
                goto LABEL_139;
              v123 = (char *)(v122 + 64);
              v124 = (char *)(v227 + 8);
              v125 = (unint64_t)((1 << *((_BYTE *)v111 + 32)) + 63) >> 6;
              v195 = v227 + 8;
              if (v111 != v227 || v123 >= &v124[8 * v125])
                memmove(v123, v124, 8 * v125);
              v126 = 0;
              v127 = v227;
              v111[2] = v227[2];
              v128 = 1 << *((_BYTE *)v127 + 32);
              v129 = v127[8];
              if (v128 < 64)
                v130 = ~(-1 << v128);
              else
                v130 = -1;
              v131 = v130 & v129;
              v196 = (unint64_t)(v128 + 63) >> 6;
              while (1)
              {
                if (v131)
                {
                  v203 = (v131 - 1) & v131;
                  v132 = v126;
                  v133 = __clz(__rbit64(v131)) | (v126 << 6);
                }
                else
                {
                  v26 = __OFADD__(v126, 1);
                  v143 = v126 + 1;
                  if (v26)
                    goto LABEL_181;
                  if (v143 >= v196)
                    goto LABEL_139;
                  v144 = v195[v143];
                  if (!v144)
                  {
                    v145 = v143 + 1;
                    if (v143 + 1 >= v196)
                      goto LABEL_139;
                    v144 = v195[v145];
                    if (!v144)
                    {
                      v145 = v143 + 2;
                      if (v143 + 2 >= v196)
                        goto LABEL_139;
                      v144 = v195[v145];
                      if (!v144)
                      {
                        v145 = v143 + 3;
                        if (v143 + 3 >= v196)
                          goto LABEL_139;
                        v144 = v195[v145];
                        if (!v144)
                        {
                          while (1)
                          {
                            v143 = v145 + 1;
                            if (__OFADD__(v145, 1))
                              goto LABEL_183;
                            if (v143 >= v196)
                              break;
                            v144 = v195[v143];
                            ++v145;
                            if (v144)
                              goto LABEL_134;
                          }
LABEL_139:
                          swift_release();
                          v236 = v111;
                          if ((v110 & 1) != 0)
                          {
LABEL_81:
                            sub_1BDDB796C(v97, v96);
                            v88 = (_QWORD *)(v111[7] + 48 * v106);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_release();
                            v89 = v223;
                            *v88 = v99;
                            v88[1] = v89;
                            v90 = v219;
                            v88[2] = v100;
                            v88[3] = v90;
                            v81 = 1;
                            v87 = (int64_t)v221;
                            v85 = v222;
                            v227 = v111;
                            v88[4] = v220;
                            v88[5] = v103;
                            goto LABEL_82;
                          }
LABEL_105:
                          v111[(v106 >> 6) + 8] |= 1 << v106;
                          v114 = (uint64_t *)(v111[6] + 16 * v106);
                          *v114 = v97;
                          v114[1] = v96;
                          v115 = v111[7] + 48 * v106;
                          v116 = v223;
                          *(_QWORD *)v115 = v99;
                          *(_QWORD *)(v115 + 8) = v116;
                          v117 = v225;
                          *(_OWORD *)(v115 + 16) = v226;
                          *(_OWORD *)(v115 + 32) = v117;
                          v118 = v111[2];
                          v26 = __OFADD__(v118, 1);
                          v119 = v118 + 1;
                          if (!v26)
                          {
                            v111[2] = v119;
                            v81 = 1;
                            v87 = (int64_t)v221;
                            v85 = v222;
                            v227 = v111;
                            goto LABEL_82;
                          }
LABEL_172:
                          __break(1u);
LABEL_173:
                          __break(1u);
LABEL_174:
                          __break(1u);
LABEL_175:
                          __break(1u);
LABEL_176:
                          __break(1u);
                          goto LABEL_177;
                        }
                      }
                    }
                    v143 = v145;
                  }
LABEL_134:
                  v203 = (v144 - 1) & v144;
                  v132 = v143;
                  v133 = __clz(__rbit64(v144)) + (v143 << 6);
                }
                v134 = 16 * v133;
                v135 = 48 * v133;
                v136 = (__int128 *)(v227[7] + v135);
                v137 = v111[6];
                v138 = *(_OWORD *)(v227[6] + v134);
                v140 = v136[1];
                v224 = v136[2];
                v139 = v224;
                v204 = v140;
                v202 = *v136;
                v141 = v202;
                *(_OWORD *)(v137 + v134) = v138;
                v142 = (_OWORD *)(v111[7] + v135);
                *v142 = v141;
                v142[1] = v140;
                v142[2] = v139;
                sub_1BDDB6CA4(v138, *((unint64_t *)&v138 + 1));
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v126 = v132;
                v131 = v203;
              }
            }
            goto LABEL_170;
          }
        }
        else
        {
          v92 = v87 + 1;
          if (__OFADD__(v87, 1))
            goto LABEL_174;
          if (v92 < v216)
          {
            v93 = *(_QWORD *)(v217 + 8 * v92);
            if (!v93)
            {
              v94 = v87 + 2;
              if (v87 + 2 >= v216)
                goto LABEL_9;
              v93 = *(_QWORD *)(v217 + 8 * v94);
              if (v93)
                goto LABEL_95;
              v94 = v87 + 3;
              if (v87 + 3 >= v216)
                goto LABEL_9;
              v93 = *(_QWORD *)(v217 + 8 * v94);
              if (v93)
                goto LABEL_95;
              v94 = v87 + 4;
              if (v87 + 4 >= v216)
                goto LABEL_9;
              v93 = *(_QWORD *)(v217 + 8 * v94);
              if (v93)
                goto LABEL_95;
              v94 = v87 + 5;
              if (v87 + 5 >= v216)
                goto LABEL_9;
              v93 = *(_QWORD *)(v217 + 8 * v94);
              if (v93)
              {
LABEL_95:
                v92 = v94;
              }
              else
              {
                v92 = v87 + 6;
                if (v87 + 6 >= v216)
                  goto LABEL_9;
                v93 = *(_QWORD *)(v217 + 8 * v92);
                if (!v93)
                {
                  v120 = v87;
                  do
                  {
                    if (v210 == v120)
                      goto LABEL_9;
                    v93 = *(_QWORD *)(v209 + 8 * v120++);
                  }
                  while (!v93);
                  v92 = v120 + 6;
                }
              }
            }
            v222 = (v93 - 1) & v93;
            v91 = __clz(__rbit64(v93)) + (v92 << 6);
            goto LABEL_97;
          }
        }
LABEL_9:
        swift_bridgeObjectRelease();
        sub_1BDE27FD0();
        *v214 = v227;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        v24 = MEMORY[0x1C3B7C928](v207, v206);
        v23 = v212;
        if (v212 == v24)
          goto LABEL_145;
        goto LABEL_10;
      }
      v43 = *(_QWORD *)(v225 + 8 * v42);
      if (!v43)
      {
        v44 = v38 + 2;
        if (v38 + 2 >= (uint64_t)v224)
          goto LABEL_77;
        v43 = *(_QWORD *)(v225 + 8 * v44);
        if (v43)
          goto LABEL_31;
        v44 = v38 + 3;
        if (v38 + 3 >= (uint64_t)v224)
          goto LABEL_77;
        v43 = *(_QWORD *)(v225 + 8 * v44);
        if (v43)
          goto LABEL_31;
        v44 = v38 + 4;
        if (v38 + 4 >= (uint64_t)v224)
          goto LABEL_77;
        v43 = *(_QWORD *)(v225 + 8 * v44);
        if (v43)
          goto LABEL_31;
        v44 = v38 + 5;
        if (v38 + 5 >= (uint64_t)v224)
          goto LABEL_77;
        v43 = *(_QWORD *)(v225 + 8 * v44);
        if (v43)
        {
LABEL_31:
          v42 = v44;
        }
        else
        {
          v42 = v38 + 6;
          if (v38 + 6 >= (uint64_t)v224)
            goto LABEL_77;
          v43 = *(_QWORD *)(v225 + 8 * v42);
          if (!v43)
          {
            v61 = v38;
            do
            {
              if (v222 == v61)
                goto LABEL_77;
              v43 = v221[v61++];
            }
            while (!v43);
            v42 = v61 + 6;
          }
        }
      }
      v40 = (v43 - 1) & v43;
      v41 = __clz(__rbit64(v43)) + (v42 << 6);
    }
    v45 = (uint64_t *)(*(_QWORD *)(v226 + 48) + 16 * v41);
    v47 = *v45;
    v46 = v45[1];
    v48 = *(_QWORD *)(*(_QWORD *)(v226 + 56) + 8 * v41);
    sub_1BDDB6CA4(*v45, v46);
    swift_retain();
    sub_1BDDB6CA4(v47, v46);
    swift_retain();
    sub_1BDDB796C(v47, v46);
    swift_release();
    if (!v48)
      goto LABEL_77;
    v227 = (_QWORD *)v42;
    v49 = v32;
    v51 = sub_1BDDB7F0C(v47, v46);
    v52 = v32[2];
    v53 = (v50 & 1) == 0;
    v54 = v52 + v53;
    if (__OFADD__(v52, v53))
    {
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }
    v55 = v50;
    if (v32[3] >= v54)
      break;
    sub_1BDDC5428(v54, v31 & 1);
    v49 = v236;
    v56 = sub_1BDDB7F0C(v47, v46);
    if ((v55 & 1) != (v57 & 1))
      goto LABEL_184;
    v51 = v56;
    if ((v55 & 1) != 0)
    {
LABEL_16:
      sub_1BDDB796C(v47, v46);
      v39 = v49[7];
      swift_release();
      *(_QWORD *)(v39 + 8 * v51) = v48;
      goto LABEL_17;
    }
LABEL_41:
    v49[(v51 >> 6) + 8] |= 1 << v51;
    v58 = (uint64_t *)(v49[6] + 16 * v51);
    *v58 = v47;
    v58[1] = v46;
    *(_QWORD *)(v49[7] + 8 * v51) = v48;
    v59 = v49[2];
    v26 = __OFADD__(v59, 1);
    v60 = v59 + 1;
    if (v26)
      goto LABEL_171;
    v49[2] = v60;
LABEL_17:
    v31 = 1;
    v38 = (uint64_t)v227;
    v36 = v40;
    v32 = v49;
  }
  if ((v31 & 1) != 0)
  {
    if ((v50 & 1) != 0)
      goto LABEL_16;
    goto LABEL_41;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFDB8);
  v62 = sub_1BE1B3248();
  v49 = (_QWORD *)v62;
  if (!v32[2])
  {
LABEL_75:
    swift_release();
    v236 = v49;
    if ((v55 & 1) != 0)
      goto LABEL_16;
    goto LABEL_41;
  }
  v63 = (_QWORD *)(v62 + 64);
  v64 = 1 << *((_BYTE *)v49 + 32);
  v218 = v32 + 8;
  v65 = (unint64_t)(v64 + 63) >> 6;
  if (v49 != v32 || v63 >= &v218[v65])
    memmove(v63, v218, 8 * v65);
  v66 = 0;
  v49[2] = v32[2];
  v67 = 1 << *((_BYTE *)v32 + 32);
  if (v67 < 64)
    v68 = ~(-1 << v67);
  else
    v68 = -1;
  v69 = v68 & v32[8];
  v217 = (unint64_t)(v67 + 63) >> 6;
  while (2)
  {
    if (v69)
    {
      v220 = (v69 - 1) & v69;
      v219 = v66;
      v70 = __clz(__rbit64(v69)) | (v66 << 6);
LABEL_58:
      v71 = 8 * v70;
      v72 = *(_QWORD *)(v32[7] + 8 * v70);
      v73 = 16 * v70;
      v74 = *(_OWORD *)(v32[6] + v73);
      *(_OWORD *)(v49[6] + v73) = v74;
      *(_QWORD *)(v49[7] + v71) = v72;
      sub_1BDDB6CA4(v74, *((unint64_t *)&v74 + 1));
      swift_retain();
      v66 = v219;
      v69 = v220;
      continue;
    }
    break;
  }
  v26 = __OFADD__(v66, 1);
  v75 = v66 + 1;
  if (v26)
    goto LABEL_180;
  if (v75 >= v217)
    goto LABEL_75;
  v76 = v218[v75];
  if (v76)
  {
LABEL_70:
    v220 = (v76 - 1) & v76;
    v219 = v75;
    v70 = __clz(__rbit64(v76)) + (v75 << 6);
    goto LABEL_58;
  }
  v77 = v75 + 1;
  if (v75 + 1 >= v217)
    goto LABEL_75;
  v76 = v218[v77];
  if (v76)
    goto LABEL_69;
  v77 = v75 + 2;
  if (v75 + 2 >= v217)
    goto LABEL_75;
  v76 = v218[v77];
  if (v76)
    goto LABEL_69;
  v77 = v75 + 3;
  if (v75 + 3 >= v217)
    goto LABEL_75;
  v76 = v218[v77];
  if (v76)
  {
LABEL_69:
    v75 = v77;
    goto LABEL_70;
  }
  while (1)
  {
    v75 = v77 + 1;
    if (__OFADD__(v77, 1))
      break;
    if (v75 >= v217)
      goto LABEL_75;
    v76 = v218[v75];
    ++v77;
    if (v76)
      goto LABEL_70;
  }
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDEFBFF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16))
  {
    sub_1BDDB6CA4(v4, v3);
    swift_bridgeObjectRetain();
    sub_1BDDB7F0C(v4, v3);
    if ((v5 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v4, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v4, v3);
  }
  return 1;
}

uint64_t sub_1BDEFC124(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t *);
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t (*)(uint64_t *))result;
  v6 = 0;
  v20 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(a3 + 64);
  v17 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v18 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v6 >= v18)
    goto LABEL_29;
  v14 = *(_QWORD *)(v17 + 8 * v6);
  if (v14)
    goto LABEL_19;
  v15 = v6 + 1;
  if (v6 + 1 >= v18)
  {
LABEL_29:
    swift_release();
    return v20;
  }
  v14 = *(_QWORD *)(v17 + 8 * v15);
  if (!v14)
  {
    v15 = v6 + 2;
    if (v6 + 2 >= v18)
      goto LABEL_29;
    v14 = *(_QWORD *)(v17 + 8 * v15);
    if (!v14)
    {
      v15 = v6 + 3;
      if (v6 + 3 >= v18)
        goto LABEL_29;
      v14 = *(_QWORD *)(v17 + 8 * v15);
      if (!v14)
      {
        v15 = v6 + 4;
        if (v6 + 4 < v18)
        {
          v14 = *(_QWORD *)(v17 + 8 * v15);
          if (v14)
            goto LABEL_18;
          while (1)
          {
            v6 = v15 + 1;
            if (__OFADD__(v15, 1))
              break;
            if (v6 >= v18)
              goto LABEL_29;
            v14 = *(_QWORD *)(v17 + 8 * v6);
            ++v15;
            if (v14)
              goto LABEL_19;
          }
LABEL_31:
          __break(1u);
          return result;
        }
        goto LABEL_29;
      }
    }
  }
LABEL_18:
  v6 = v15;
LABEL_19:
  v10 = (v14 - 1) & v14;
  for (i = __clz(__rbit64(v14)) + (v6 << 6); ; i = v11 | (v6 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    swift_retain();
    v16 = v5(&v19);
    if (v3)
      break;
    if ((v16 & 1) != 0)
    {
      sub_1BE1B30E0();
      sub_1BE1B3110();
      sub_1BE1B311C();
      result = sub_1BE1B30EC();
      if (!v10)
        goto LABEL_7;
    }
    else
    {
      result = swift_release();
      if (!v10)
        goto LABEL_7;
    }
LABEL_6:
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1BDEFC358@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  id v14;

  type metadata accessor for CRDataStoreBundleDecodeContext(0, *(_QWORD *)(*a1 + 208), *(_QWORD *)(*a1 + 216), a2);
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v10 = a1 + 7;
  v8 = (void *)a1[7];
  v9 = (void *)v10[1];
  v11 = (_QWORD *)swift_allocObject();
  v11[6] = v7;
  v11[7] = v8;
  v12 = MEMORY[0x1E0DEE9E0];
  v11[8] = v9;
  v11[2] = v12;
  v11[3] = v12;
  v11[4] = v6;
  v11[5] = v5;
  *a3 = v11;
  v13 = v9;
  v14 = v8;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t sub_1BDEFC3E8@<X0>(uint64_t *a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  result = sub_1BDEFC464(a3, *a2, *a1, &v8);
  v6 = v10;
  v7 = v11;
  *(_OWORD *)a4 = v9;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v7;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

uint64_t sub_1BDEFC464(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_6;
  v10 = a2[2];
  v9 = a2[3];
  sub_1BDDB6CA4(v10, v9);
  v11 = sub_1BDDB7F0C(v10, v9);
  if ((v12 & 1) == 0)
  {
    sub_1BDDB796C(v10, v9);
LABEL_6:
    sub_1BDDFCAFC();
    v20 = swift_allocError();
    *(_QWORD *)v23 = 0xD00000000000001BLL;
    *(_QWORD *)(v23 + 8) = 0x80000001BE1CEA30;
    *(_BYTE *)(v23 + 16) = 0;
    result = swift_willThrow();
    goto LABEL_7;
  }
  v13 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 32 * v11);
  v24 = a4;
  v14 = *v13;
  v15 = v13[1];
  v16 = a3;
  v17 = v13[2];
  v18 = v13[3];
  sub_1BDDB6CA4(*v13, v15);
  sub_1BDDB6CA4(v17, v18);
  sub_1BDDB796C(v10, v9);
  v19 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*a2 + 104);
  sub_1BDDB6CA4(v14, v15);
  sub_1BDDB6CA4(v17, v18);
  v19(v14, v15, v17, v18, v16);
  v20 = v4;
  sub_1BDDB796C(v17, v18);
  sub_1BDDB796C(v14, v15);
  v21 = v14;
  a4 = v24;
  sub_1BDDB796C(v21, v15);
  result = sub_1BDDB796C(v17, v18);
  if (v4)
LABEL_7:
    *a4 = v20;
  return result;
}

void sub_1BDEFC608(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  v32 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v30 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v27 - v15;
  v31 = v14;
  v17 = (uint64_t *)((char *)&v27 + *(int *)(v14 + 48) - v15);
  v33 = *a2;
  v18 = v34;
  sub_1BDFB8020((uint64_t)&v27 - v15, (uint64_t)v17, a1, (uint64_t)&v33, v5, a3, a4);
  if (!v18)
  {
    v34 = *(_QWORD *)(a3 - 8);
    v19 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v19(v13, v16, a3);
    v20 = *v17;
    v21 = v17[1];
    sub_1BDD85BB4((uint64_t)v13, a3, (uint64_t **)&v33);
    v29 = v33;
    v22 = v31;
    v23 = &v13[*(int *)(v31 + 48)];
    v19(v13, v16, a3);
    *(_QWORD *)v23 = v20;
    *((_QWORD *)v23 + 1) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = MEMORY[0x1E0DEE9D8];
    v28 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v27 = sub_1BDDB6CE8(v24);
    sub_1BDDB6E0C(v24);
    sub_1BDDB6CE8(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v22);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, a3);
    v25 = v32;
    *v32 = v29;
    v25[1] = 0;
    v25[2] = v20;
    v25[3] = v21;
    v26 = v27;
    v25[4] = v28;
    v25[5] = v26;
  }
}

uint64_t sub_1BDEFC818@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1BDFB86F0(a1, a2, *(uint64_t (**)(uint64_t))(v3 + 64), *(_QWORD *)(v3 + 32), a3);
}

void sub_1BDEFC84C()
{
  uint64_t v0;

  swift_release();
  swift_release();

}

uint64_t sub_1BDEFC878()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_1BDEFC8C4()
{
  sub_1BDEFC878();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRDataStoreBundleDecodeContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundleDecodeContext);
}

double sub_1BDEFC8F0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_1BDEFC900()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BDEFC958()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRDataStorePartialDecodeContext()
{
  return objc_opt_self();
}

uint64_t sub_1BDEFC9AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDEFBFF0(a1, v1) & 1;
}

uint64_t sub_1BDEFC9C8@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  return sub_1BDEFC358(v2, a1, a2);
}

uint64_t sub_1BDEFC9D0@<X0>(uint64_t *a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1BDEFC3E8(a1, a2, *(_QWORD *)(v3 + 32), a3);
}

id sub_1BDEFC9DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
    return a1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (id)swift_bridgeObjectRetain();
}

void sub_1BDEFCA34(int a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 255)
    sub_1BDEFCA68(a2, a3, a4, a5, a6, a7, a8 & 1);
}

void sub_1BDEFCA68(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

id sub_1BDEFCAD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  id result;

  if (a8 != 255)
    return sub_1BDEFC9DC(a2, a3, a4, a5, a6, a7, a8 & 1);
  return result;
}

uint64_t sub_1BDEFCB08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE758);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE760);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v36 - v12;
  v15 = *v1;
  v14 = v1[1];
  v17 = v1[2];
  v16 = v1[3];
  v18 = v1[4];
  v36 = v6;
  if (v18)
  {
    v37 = v14;
    v38 = v17;
    v19 = v4;
    v20 = a1;
    v21 = (v18 - 1) & v18;
    v39 = v16;
    v22 = __clz(__rbit64(v18)) | (v16 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v15 + 48);
    v24 = type metadata accessor for Replica();
    sub_1BDEFCE38(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, (uint64_t)v13);
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v22), &v13[*(int *)(v3 + 48)]);
    v25 = 0;
    a1 = v20;
    v4 = v19;
    v14 = v37;
    v17 = v38;
    goto LABEL_4;
  }
  v31 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return result;
  }
  v32 = (unint64_t)(v17 + 64) >> 6;
  if (v31 >= v32)
  {
    v39 = v16;
    v21 = 0;
    v25 = 1;
    goto LABEL_4;
  }
  v33 = *(_QWORD *)(v14 + 8 * v31);
  if (v33)
  {
LABEL_11:
    v37 = v14;
    v38 = v17;
    v19 = v4;
    v20 = a1;
    v21 = (v33 - 1) & v33;
    v22 = __clz(__rbit64(v33)) + (v31 << 6);
    v39 = v31;
    goto LABEL_3;
  }
  v34 = v16 + 2;
  if (v16 + 2 >= v32)
    goto LABEL_27;
  v33 = *(_QWORD *)(v14 + 8 * v34);
  if (v33)
  {
LABEL_15:
    v31 = v34;
    goto LABEL_11;
  }
  if (v16 + 3 >= v32)
    goto LABEL_28;
  v33 = *(_QWORD *)(v14 + 8 * (v16 + 3));
  if (v33)
  {
    v31 = v16 + 3;
    goto LABEL_11;
  }
  v34 = v16 + 4;
  if (v16 + 4 < v32)
  {
    v33 = *(_QWORD *)(v14 + 8 * v34);
    if (v33)
      goto LABEL_15;
    v31 = v16 + 5;
    if (v16 + 5 < v32)
    {
      v33 = *(_QWORD *)(v14 + 8 * v31);
      if (v33)
        goto LABEL_11;
      v31 = v32 - 1;
      v35 = v16 + 6;
      while (v32 != v35)
      {
        v33 = *(_QWORD *)(v14 + 8 * v35++);
        if (v33)
        {
          v31 = v35 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v21 = 0;
      v25 = 1;
      v39 = v31;
      goto LABEL_4;
    }
LABEL_28:
    v21 = 0;
    v25 = 1;
    v39 = v34;
    goto LABEL_4;
  }
  v21 = 0;
  v25 = 1;
  v39 = v16 + 3;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, v25, 1, v3);
  *v1 = v15;
  v1[1] = v14;
  v26 = v39;
  v1[2] = v17;
  v1[3] = v26;
  v1[4] = v21;
  v27 = (void (*)(uint64_t))v1[5];
  sub_1BDDA2EF0((uint64_t)v13, (uint64_t)v10, &qword_1ED6EE760);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a1, 1, 1, v28);
  }
  else
  {
    v29 = (uint64_t)v36;
    sub_1BDDA2EF0((uint64_t)v10, (uint64_t)v36, &qword_1ED6EE758);
    v27(v29);
    sub_1BDEFCE7C(v29);
    v30 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a1, 0, 1, v30);
  }
}

uint64_t sub_1BDEFCE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Replica();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDEFCE7C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE758);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDEFCEBC(__int128 *a1)
{
  _OWORD *v1;
  __int128 v2;
  char v3;
  _OWORD v5[2];

  v2 = *a1;
  v5[0] = *v1;
  v5[1] = v2;
  _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0((uint64_t)v5);
  return v3 & 1;
}

uint64_t CRBuiltInComparable<>._crIsLessThan(_:)()
{
  return sub_1BE1B2714() & 1;
}

uint64_t sub_1BDEFCF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v61 = a4;
  v70 = a2;
  v66 = a5;
  v7 = sub_1BE1B2EE8();
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v58 - v8;
  v62 = type metadata accessor for Proto_Value(0);
  v10 = *(_QWORD *)(v62 - 8);
  v11 = MEMORY[0x1E0C80A78](v62);
  v59 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v63 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v67 = (char *)&v58 - v16;
  MEMORY[0x1E0C80A78](v15);
  v60 = (char *)&v58 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v19 = MEMORY[0x1E0C80A78](v18);
  v58 = (uint64_t)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v58 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  v74 = a1;
  v30 = *(_QWORD *)(a1 + v29)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v30, (uint64_t)v25, &qword_1ED6F2DF0);
  v31 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v25, 1, v31) == 1)
  {
    sub_1BDD86E30((uint64_t)v25, &qword_1ED6F2DF0);
LABEL_8:
    v38 = swift_conformsToProtocol2();
    if (v38)
      v39 = v38;
    else
      v39 = 0;
    if (v38)
      v40 = a3;
    else
      v40 = 0;
    if (v40)
    {
      v41 = *(void (**)(uint64_t, uint64_t))(v39 + 16);
      *((_QWORD *)&v72 + 1) = v40;
      v73 = v39;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v71);
      v41(v40, v39);
    }
    else
    {
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF4E0);
    v42 = swift_dynamicCast();
    v43 = v69;
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
    if ((v42 & 1) != 0)
    {
      v44(v9, 0, 1, a3);
      swift_release();
      sub_1BDD9C3E0(v74, type metadata accessor for Proto_CRDT);
      v45 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v46 = v63;
      v45(v63, v9, a3);
      v47 = v67;
      v45(v67, v46, a3);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v45)(v66, v47, a3);
    }
    v44(v9, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v9, v65);
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v49 = 0xD000000000000020;
    *(_QWORD *)(v49 + 8) = 0x80000001BE1CEA90;
    *(_BYTE *)(v49 + 16) = 0;
    swift_willThrow();
    swift_release();
    return sub_1BDD9C3E0(v74, type metadata accessor for Proto_CRDT);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    v32 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf;
    v33 = (uint64_t)v25;
LABEL_7:
    sub_1BDD9C3E0(v33, v32);
    goto LABEL_8;
  }
  sub_1BDDA2E8C((uint64_t)v25, (uint64_t)v28, type metadata accessor for Proto_Register);
  v34 = *(int *)(v26 + 20);
  v35 = *(_QWORD *)&v28[v34]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v35, (uint64_t)v22, &qword_1ED6F3770);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v37 = v62;
  LODWORD(v35) = v36(v22, 1, v62);
  sub_1BDD86E30((uint64_t)v22, &qword_1ED6F3770);
  if ((_DWORD)v35 == 1)
  {
    v32 = type metadata accessor for Proto_Register;
    v33 = (uint64_t)v28;
    goto LABEL_7;
  }
  v50 = *(_QWORD *)&v28[v34]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v51 = v58;
  sub_1BDD86DEC(v50, v58, &qword_1ED6F3770);
  if (v36((char *)v51, 1, v37) == 1)
  {
    v52 = v59;
    sub_1BE1B20E4();
    v53 = *(int *)(v37 + 20);
    v47 = v67;
    v54 = v68;
    v55 = v60;
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v52 + v53) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v51, &qword_1ED6F3770);
  }
  else
  {
    v52 = v59;
    sub_1BDDA2E8C(v51, v59, type metadata accessor for Proto_Value);
    v47 = v67;
    v54 = v68;
    v55 = v60;
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  v56 = v70;
  swift_retain();
  v57 = sub_1BDDB4FC0(v52, v56);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 8) + 8))(v57, a3);
  swift_release();
  sub_1BDD9C3E0(v74, type metadata accessor for Proto_CRDT);
  result = sub_1BDD9C3E0((uint64_t)v28, type metadata accessor for Proto_Register);
  if (!v54)
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v45(v47, v55, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v45)(v66, v47, a3);
  }
  return result;
}

uint64_t sub_1BDEFD58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  v37 = type metadata accessor for Proto_Value(0);
  v12 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Proto_Register(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v34 - v18;
  if (*(unsigned __int8 *)(a1 + 72) >= 2u)
  {
    v34 = v17;
    v35 = v9;
    sub_1BE1B20E4();
    v22 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    v36 = a3;
    *(_QWORD *)(a3 + v22) = qword_1ED6F2E08;
    swift_retain();
    sub_1BE1B20E4();
    v23 = *(int *)(v15 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    v24 = qword_1ED6EF780;
    *(_QWORD *)&v19[v23] = qword_1ED6EF780;
    MEMORY[0x1E0C80A78](v24);
    *((_OWORD *)&v34 - 3) = *(_OWORD *)(a2 + 16);
    v25 = v38;
    *(&v34 - 4) = *(_QWORD *)(a2 + 32);
    *(&v34 - 3) = v25;
    *(&v34 - 2) = a1;
    swift_retain();
    v26 = v39;
    sub_1BDE1CC84((void (*)(uint64_t))sub_1BDEFF348, (uint64_t)v14);
    v27 = (uint64_t)v35;
    if (v26)
    {
      sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Register);
      v28 = type metadata accessor for Proto_CRDT;
      v29 = v36;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        v30 = swift_retain();
        *(_QWORD *)&v19[v23] = sub_1BE131250(v30);
        swift_release();
      }
      v31 = *(_QWORD *)&v19[v23];
      sub_1BDDA2E8C((uint64_t)v14, (uint64_t)v11, type metadata accessor for Proto_Value);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v37);
      sub_1BDEFF368((uint64_t)v11, v27);
      v32 = v31 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
      swift_beginAccess();
      swift_retain();
      sub_1BDEFF3B0(v27, v32);
      swift_endAccess();
      swift_release();
      v33 = v34;
      sub_1BDEFF3F8((uint64_t)v19, v34);
      sub_1BE12AA70(v33);
      v28 = type metadata accessor for Proto_Register;
      v29 = (uint64_t)v19;
    }
    return sub_1BDD9C3E0(v29, v28);
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v20 = 0xD00000000000003ALL;
    *(_QWORD *)(v20 + 8) = 0x80000001BE1CEA50;
    *(_BYTE *)(v20 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t CRMaxRegister.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_1BDEFD948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v9;

  v5 = type metadata accessor for CRMaxRegister(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  v6 = (uint64_t (*)(uint64_t *, _QWORD))CRMaxRegister.projectedValue.modify();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v7, a1, v5);
  return v6(&v9, 0);
}

uint64_t (*CRMaxRegister.projectedValue.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRMaxRegister.projectedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 40))(v2, a1);
}

uint64_t sub_1BDEFD9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v12 - v7;
  (*(void (**)(char *))(v9 + 16))((char *)&v12 - v7);
  v10 = type metadata accessor for CRMaxRegister(0, v4, v5, v6);
  return CRMaxRegister.value.setter((uint64_t)v8, v10);
}

uint64_t CRMaxRegister.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 8))(a1, v4);
  v6 = *(_QWORD *)(v4 - 8);
  if ((v5 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v2, a1, v4);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

void (*CRMaxRegister.value.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  void (*v10)(void);

  v5 = malloc(0x38uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v10 = *(void (**)(void))(v7 + 16);
  v5[5] = v9;
  v5[6] = v10;
  v10();
  return sub_1BDEFDB78;
}

void sub_1BDEFDB78(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 24);
    v4 = *(void **)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(_QWORD *)v2;
    (*(void (**)(void *, void *, uint64_t))(v2 + 48))(v4, v3, v6);
    CRMaxRegister.value.setter((uint64_t)v4, v7);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    v4 = *(void **)(v2 + 32);
    v3 = *(void **)(v2 + 40);
    CRMaxRegister.value.setter((uint64_t)v3, *(_QWORD *)v2);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t CRMaxRegister.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CRMaxRegister.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_1BDEFED18(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*CRMaxRegister.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  void (*v10)(void);

  v5 = malloc(0x38uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v10 = *(void (**)(void))(v7 + 16);
  v5[5] = v9;
  v5[6] = v10;
  v10();
  return sub_1BDEFDCF8;
}

void sub_1BDEFDCF8(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 24);
    v4 = *(void **)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(_QWORD *)v2;
    (*(void (**)(void *, void *, uint64_t))(v2 + 48))(v4, v3, v6);
    sub_1BDEFED18((uint64_t)v4, v7);
    v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v4, v6);
    v8(v3, v6);
  }
  else
  {
    v4 = *(void **)(v2 + 32);
    v3 = *(void **)(v2 + 40);
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 24);
    sub_1BDEFED18((uint64_t)v3, *(_QWORD *)v2);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v3, v9);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t CRMaxRegister.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v17 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  if (v11)
  {
    v15(v10, v12, v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 24))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    v15((char *)&v17 - v13, v12, v6);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v14, v6);
}

uint64_t CRMaxRegister.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t CRMaxRegister.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t CRMaxRegister.merge(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v17 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v17 - v11, v3, v6);
  v13(v10, a1, v6);
  LOBYTE(v13) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a2 + 24) + 8))(v10, v6);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v12, v6);
  if ((v13 & 1) != 0)
  {
    v16 = *(_QWORD *)(a2 - 8);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v3, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v3, a1, a2);
  }
  return result;
}

uint64_t CRMaxRegister.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 40))(a1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Bool __swiftcall CRMaxRegister.needToFinalizeTimestamps()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 8) + 48))(*(_QWORD *)(v0 + 16));
}

uint64_t CRMaxRegister.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v4 = *(_QWORD *)(a2 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v4, v3);
  if ((result & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v4, v3);
  return result;
}

uint64_t CRMaxRegister.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "CRMaxRegister[");
  HIBYTE(v7[1]) = -18;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  sub_1BE1B2810();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return v7[0];
}

uint64_t sub_1BDEFE1F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return CRMaxRegister.actionUndoingDifference(from:)(a1, a2);
}

uint64_t CRMaxRegister.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t sub_1BDEFE224(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2, a2);
}

uint64_t CRMaxRegister.apply(_:)(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2, a2);
}

uint64_t CRMaxRegister.hasDelta(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *);
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v3 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  v11 = *(void (**)(char *))(v5 + 16);
  v11((char *)&v14 - v9);
  ((void (*)(char *, uint64_t, uint64_t))v11)(v8, v2, v4);
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 + 24) + 8))(v8, v4);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return v3 & 1;
}

uint64_t CRMaxRegister.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *);
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  v14 = *(void (**)(char *))(v8 + 16);
  v14((char *)&v19 - v12);
  ((void (*)(char *, uint64_t, uint64_t))v14)(v11, v4, v7);
  LOBYTE(v14) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a2 + 24) + 8))(v11, v7);
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  v15(v13, v7);
  v16 = *(_QWORD *)(a2 - 8);
  if ((v14 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a3, v4, a2);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v17, 1, a2);
}

uint64_t CRMaxRegister.canMerge(delta:)()
{
  return 1;
}

uint64_t sub_1BDEFE444(uint64_t a1, uint64_t a2)
{
  CRMaxRegister.merge(delta:)(a1, a2);
  return 1;
}

uint64_t CRMaxRegister.merge(delta:)(uint64_t a1, uint64_t a2)
{
  CRMaxRegister.merge(_:)(a1, a2);
  return 1;
}

uint64_t CRMaxRegister.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a3;
  v31 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v30 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v27 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v27 - v18;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
  v32 = a4;
  v20(a4, 1, 1, AssociatedTypeWitness);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v21(v19, v4, v8);
  v27 = a1;
  v21(v17, a1, v8);
  LOBYTE(v5) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 + 24) + 8))(v17, v8);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v8);
  result = ((uint64_t (*)(char *, uint64_t))v22)(v19, v8);
  if ((v5 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v27, v31, v8);
    v25 = v28;
    v24 = v29;
    v26 = v32;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v29);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v26, v13, v24);
  }
  return result;
}

uint64_t sub_1BDEFE660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CRMaxRegister.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a3);
}

uint64_t CRMaxRegister.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  _BYTE v16[40];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v11, (uint64_t)v10, &qword_1ED6F3728);
  v12 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v11) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3728);
  if ((_DWORD)v11 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000014;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    sub_1BDE126B8(a2, a3, a4);
  }
  return swift_release();
}

uint64_t sub_1BDEFE818(uint64_t a1, _QWORD *a2)
{
  return CRMaxRegister.encode(to:)(a1, a2);
}

uint64_t CRMaxRegister.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1BDDA8D6C();
  if (!v3)
  {
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    swift_retain();
    sub_1BDE1D6D4(v2, v6, v7, v8);
    return swift_release();
  }
  return result;
}

uint64_t CRMaxRegister.hasEncodedData.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFBA8);
  if (swift_dynamicCast())
  {
    v3 = *((_QWORD *)&v8 + 1);
    v4 = v9;
    __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
    LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
    v5 = v3 ^ 1;
  }
  else
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    sub_1BDD86E30((uint64_t)&v7, (uint64_t *)&unk_1ED6EF4E0);
    v5 = 1;
  }
  return v5 & 1;
}

void sub_1BDEFE998(_BYTE *a1@<X8>)
{
  CRMaxRegister.minEncodingVersion.getter(a1);
}

void CRMaxRegister.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static CRMaxRegister<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v15 = *(_QWORD *)(type metadata accessor for CRMaxRegister(0, v12, v13, v14) + 16);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v11, a1, v15);
  v16(v9, a2, v15);
  v17 = sub_1BE1B2798();
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, a3);
  v18(v11, a3);
  return v17 & 1;
}

uint64_t sub_1BDEFEAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CRMaxRegister<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_1BDEFEAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRMaxRegister(0, v12, v13, v14);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 16) - 8) + 16))(v11, a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 16))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t CRMaxRegister<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v10[24];
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  sub_1BE1B3770();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  sub_1BE1B34F4();
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t sub_1BDEFECB0(uint64_t a1, uint64_t a2)
{
  return CRMaxRegister<>.encode(to:)(a1, a2);
}

BOOL sub_1BDEFECC8(_QWORD *a1)
{
  _QWORD *v1;

  return *v1 < *a1;
}

BOOL sub_1BDEFECDC(_QWORD *a1)
{
  _QWORD *v1;

  return *v1 < *a1;
}

BOOL sub_1BDEFECF0(float *a1)
{
  float *v1;

  return *v1 < *a1;
}

BOOL sub_1BDEFED04(double *a1)
{
  double *v1;

  return *v1 < *a1;
}

uint64_t sub_1BDEFED18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  return CRMaxRegister.value.setter((uint64_t)v4, a2);
}

uint64_t type metadata accessor for CRMaxRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRMaxRegister);
}

_UNKNOWN **sub_1BDEFED98()
{
  return &protocol witness table for CRMaxRegister<A>;
}

uint64_t sub_1BDEFEDA4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRMaxRegister<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDEFEDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(uint64_t))CRMaxRegister.projectedValue.getter);
}

uint64_t sub_1BDEFEDE0()
{
  return 24;
}

__n128 sub_1BDEFEDEC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1BDEFEE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(uint64_t))CRMaxRegister.value.getter);
}

uint64_t sub_1BDEFEE10()
{
  return 24;
}

__n128 sub_1BDEFEE1C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1BDEFEE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(uint64_t))CRMaxRegister.wrappedValue.getter);
}

uint64_t keypath_getTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = type metadata accessor for CRMaxRegister(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  return a4(v5);
}

uint64_t sub_1BDEFEE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for CRMaxRegister(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return sub_1BDEFED18(a1, v5);
}

uint64_t sub_1BDEFEEC4()
{
  return 24;
}

__n128 sub_1BDEFEED0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of CRBuiltInComparable._crIsLessThan(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1BDEFEEEC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDEFEF58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1BDEFEFC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1BDEFEFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1BDEFF008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1BDEFF038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1BDEFF068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1BDEFF098(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDEFF148 + 4 * byte_1BE1BBF80[(v7 - 1)]))();
}

void sub_1BDEFF198(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1BDEFF348()
{
  uint64_t *v0;

  return sub_1BDEFEAD8(v0[5], v0[6], v0[2], v0[3], v0[4]);
}

uint64_t sub_1BDEFF368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDEFF3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDEFF3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Register(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDEFF448@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  _QWORD v20[2];

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
    v16 = v13 >= v15;
  else
    v16 = 1;
  if (v16)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v17 = xmmword_1BE1BB990;
    *(_BYTE *)(v17 + 16) = 0;
    swift_willThrow();
    swift_release();
    return sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Timestamp);
  }
  else
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13, v6);
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
    *(_QWORD *)&v12[*(int *)(v10 + 20)] = 0;
    sub_1BDDA2E8C((uint64_t)v12, a3, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v18 = a1[1];
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Timestamp);
    result = type metadata accessor for Timestamp(0);
    *(_QWORD *)(a3 + *(int *)(result + 20)) = v18;
  }
  return result;
}

uint64_t Timestamp.hash(into:)()
{
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  type metadata accessor for Timestamp(0);
  return sub_1BE1B3704();
}

uint64_t static Timestamp.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(int *)(type metadata accessor for Timestamp(0) + 20);
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a2 + v4);
  v7 = v5 < v6;
  if (v5 == v6)
  {
    v8 = *(int *)(type metadata accessor for Replica() + 20);
    v9 = *(_QWORD *)(a1 + v8);
    v10 = *(_QWORD *)(a2 + v8);
    v7 = v9 < v10;
    if (v9 == v10)
      return sub_1BDDB2BF8();
  }
  return v7;
}

uint64_t static Timestamp.< infix(_:_:)()
{
  type metadata accessor for Timestamp(0);
  return sub_1BE1B2024() & 1;
}

uint64_t sub_1BDEFF6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];

  v4 = v3;
  v6 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for FinalizedTimestamp(0);
  v11 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Timestamp(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v31 - v18;
  sub_1BDD9C318(v4, (uint64_t)&v31 - v18, v20);
  v21 = *(_QWORD *)&v19[*(int *)(v6 + 20)];
  result = sub_1BDD9C3E0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  if (v21)
  {
    sub_1BDD9C318(v4, (uint64_t)v17, type metadata accessor for Timestamp);
    if (*(_QWORD *)(a3 + 16) && (v23 = sub_1BDDB3EC0((uint64_t)v17), (v24 & 1) != 0))
    {
      sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v23), v33);
    }
    else
    {
      v33[0] = 0;
      v33[1] = 0;
    }
    sub_1BDD9C3E0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v33[0])
    {
      sub_1BDDB4F58(v33, v34);
      v25 = *(int *)(v14 + 20);
      sub_1BE199E98(*(_QWORD *)(v4 + v25), (uint64_t)v10);
      sub_1BDDB4E78((uint64_t)v34);
      v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      v27 = v32;
      if (v26(v10, 1, v32) == 1)
      {
        return sub_1BDD86E30((uint64_t)v10, (uint64_t *)&unk_1ED6F2DC0);
      }
      else
      {
        sub_1BDD9C3E0(v4, type metadata accessor for Timestamp);
        sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v13, type metadata accessor for FinalizedTimestamp);
        v28 = sub_1BE1B1F58();
        v29 = (uint64_t)v31;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v31, v13, v28);
        *(_QWORD *)(v29 + *(int *)(v6 + 20)) = 0;
        v30 = *(_QWORD *)&v13[*(int *)(v27 + 20)];
        sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for FinalizedTimestamp);
        result = sub_1BDDA2E8C(v29, v4, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        *(_QWORD *)(v4 + v25) = v30;
      }
    }
    else
    {
      return sub_1BDD86E30((uint64_t)v33, qword_1ED6F23F0);
    }
  }
  return result;
}

BOOL Timestamp.needToFinalize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Replica() + 20)) > 0;
}

uint64_t Timestamp.description.getter()
{
  uint64_t v1;

  v1 = sub_1BE128350();
  sub_1BE1B284C();
  type metadata accessor for Timestamp(0);
  sub_1BE1B32E4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return v1;
}

uint64_t Timestamp.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t *v33;
  uint64_t v34;

  v29 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (unint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v31 = (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v10);
  v32 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v28 - v16;
  v18 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v17, &qword_1ED6F3770);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v8) = v19(v17, 1, v7);
  sub_1BDD86E30((uint64_t)v17, &qword_1ED6F3770);
  if ((_DWORD)v8 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v20 = 0xD000000000000017;
    *(_QWORD *)(v20 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v20 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  sub_1BDD86DEC(v18, (uint64_t)v15, &qword_1ED6F3770);
  result = v19(v15, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v22 = v31;
  sub_1BDDA2E8C((uint64_t)v15, v31, type metadata accessor for Proto_Value);
  v23 = *(_QWORD *)(v22 + *(int *)(v7 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v5, &qword_1ED6F26F0);
  v24 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v5, 1, v24) == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      v25 = v33;
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v33, type metadata accessor for Proto_Timestamp);
      swift_retain();
      v26 = v34;
      v27 = (uint64_t)v32;
      goto LABEL_10;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v26 = v34;
  v27 = (uint64_t)v32;
  v25 = v33;
  *v33 = 0;
  v25[1] = 0;
  sub_1BE1B20E4();
LABEL_10:
  sub_1BDD9C3E0(v22, type metadata accessor for Proto_Value);
  sub_1BDEFF448(v25, a1, v27);
  result = swift_release();
  if (!v26)
    return sub_1BDDA2E8C(v27, v29, type metadata accessor for Timestamp);
  return result;
}

uint64_t Timestamp.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v0;
  v3 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Timestamp(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  result = sub_1BDE25870();
  if (!v1)
  {
    *v9 = 0;
    v9[1] = 0;
    swift_retain();
    sub_1BE1B20E4();
    sub_1BDD9C318(v0, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v13 = sub_1BDDAE244((uint64_t)v5);
    v14 = sub_1BE1B1F58();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v5, v14);
    *v9 = v13;
    v9[1] = *(_QWORD *)(v2 + *(int *)(type metadata accessor for Timestamp(0) + 20));
    sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v11, type metadata accessor for Proto_Timestamp);
    swift_beginAccess();
    sub_1BE12851C((uint64_t)v11);
    return swift_release();
  }
  return result;
}

uint64_t Timestamp.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  type metadata accessor for Timestamp(0);
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDF00048()
{
  sub_1BE1B36F8();
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDF000BC()
{
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  return sub_1BE1B3704();
}

uint64_t sub_1BDF00110()
{
  sub_1BE1B36F8();
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDF00180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(int *)(a3 + 20);
  v4 = *(_QWORD *)(a1 + v3);
  v5 = *(_QWORD *)(a2 + v3);
  v6 = v4 < v5;
  if (v4 == v5)
  {
    v9 = *(int *)(type metadata accessor for Replica() + 20);
    v10 = *(_QWORD *)(a1 + v9);
    v11 = *(_QWORD *)(a2 + v9);
    v6 = v10 < v11;
    if (v10 == v11)
      return sub_1BDDB2BF8();
  }
  return v6;
}

BOOL sub_1BDF001E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(int *)(a3 + 20);
  v4 = *(_QWORD *)(a2 + v3);
  v5 = *(_QWORD *)(a1 + v3);
  v6 = v4 < v5;
  if (v4 == v5
    && (v9 = *(int *)(type metadata accessor for Replica() + 20),
        v10 = *(_QWORD *)(a2 + v9),
        v11 = *(_QWORD *)(a1 + v9),
        v6 = v10 < v11,
        v10 == v11))
  {
    v12 = sub_1BDDB2BF8();
  }
  else
  {
    v12 = v6;
  }
  return (v12 & 1) == 0;
}

BOOL sub_1BDF00254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(int *)(a3 + 20);
  v4 = *(_QWORD *)(a1 + v3);
  v5 = *(_QWORD *)(a2 + v3);
  v6 = v4 < v5;
  if (v4 == v5
    && (v9 = *(int *)(type metadata accessor for Replica() + 20),
        v10 = *(_QWORD *)(a1 + v9),
        v11 = *(_QWORD *)(a2 + v9),
        v6 = v10 < v11,
        v10 == v11))
  {
    v12 = sub_1BDDB2BF8();
  }
  else
  {
    v12 = v6;
  }
  return (v12 & 1) == 0;
}

uint64_t sub_1BDF002C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(int *)(a3 + 20);
  v4 = *(_QWORD *)(a2 + v3);
  v5 = *(_QWORD *)(a1 + v3);
  v6 = v4 < v5;
  if (v4 == v5)
  {
    v9 = *(int *)(type metadata accessor for Replica() + 20);
    v10 = *(_QWORD *)(a2 + v9);
    v11 = *(_QWORD *)(a1 + v9);
    v6 = v10 < v11;
    if (v10 == v11)
      return sub_1BDDB2BF8();
  }
  return v6;
}

uint64_t sub_1BDF00328()
{
  uint64_t v1;

  v1 = sub_1BE128350();
  sub_1BE1B284C();
  sub_1BE1B32E4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return v1;
}

id sub_1BDF00660()
{
  return sub_1BDF00B60(type metadata accessor for ObjCReplica);
}

id sub_1BDF006D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  id v18;
  objc_super v20;

  v1 = sub_1BE1B1F58();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Timestamp(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  v14 = v0 + OBJC_IVAR___ObjCTimestamp_timestamp;
  sub_1BDD9C318(v14, (uint64_t)&v20 - v12, type metadata accessor for Timestamp);
  sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  sub_1BDD9C318(v14, (uint64_t)v11, type metadata accessor for Timestamp);
  v15 = *(_QWORD *)&v11[*(int *)(v5 + 20)];
  sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v16 = (objc_class *)type metadata accessor for ObjCReplica(0);
  v17 = (char *)objc_allocWithZone(v16);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(&v17[OBJC_IVAR___ObjCReplica_uuid], v4, v1);
  *(_QWORD *)&v17[OBJC_IVAR___ObjCReplica_index] = v15;
  v20.receiver = v17;
  v20.super_class = v16;
  v18 = objc_msgSendSuper2(&v20, sel_init);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v18;
}

id sub_1BDF00B54()
{
  return sub_1BDF00B60(type metadata accessor for ObjCTimestamp);
}

id sub_1BDF00B60(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;

  v4 = type metadata accessor for Replica();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v25 - v8;
  v10 = type metadata accessor for Timestamp(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v25 - v15;
  v17 = *(int *)(v14 + 20);
  v18 = *(_QWORD *)(a1 + v17);
  v19 = *(_QWORD *)(a2 + v17);
  sub_1BDD9C318(a1, (uint64_t)&v25 - v15, type metadata accessor for Timestamp);
  sub_1BDD9C318(a2, (uint64_t)v13, type metadata accessor for Timestamp);
  if (v18 == v19)
  {
    v20 = *(int *)(v4 + 20);
    v21 = *(_QWORD *)&v16[v20];
    v22 = *(_QWORD *)&v13[v20];
    sub_1BDD9C318((uint64_t)v16, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C318((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v21 == v22)
      v23 = sub_1BE1B1F10();
    else
      v23 = 0;
    sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  else
  {
    v23 = 0;
  }
  sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Timestamp);
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Timestamp);
  return v23 & 1;
}

unint64_t sub_1BDF00D88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52DD58;
  if (!qword_1EF52DD58)
  {
    v1 = type metadata accessor for Timestamp(255);
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Timestamp, v1);
    atomic_store(result, (unint64_t *)&qword_1EF52DD58);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Timestamp(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BE1B1F58();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for Replica();
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for Timestamp(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE1B1F58();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for Replica();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for Replica();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for Replica();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for Replica();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for Timestamp()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDF0106C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Replica();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Timestamp()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDF010B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Replica();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1BDF010F4()
{
  return type metadata accessor for ObjCReplica(0);
}

uint64_t type metadata accessor for ObjCReplica(uint64_t a1)
{
  return sub_1BDD88618(a1, qword_1ED6F3870);
}

uint64_t sub_1BDF01110()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1F58();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDF01188()
{
  return type metadata accessor for ObjCTimestamp(0);
}

uint64_t type metadata accessor for ObjCTimestamp(uint64_t a1)
{
  return sub_1BDD88618(a1, qword_1EF52DD60);
}

uint64_t sub_1BDF011A4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Timestamp(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RetainedResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RetainedResource);
}

uint64_t sub_1BDF01220()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDF01298(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_1BDF01348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BDF013A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BDF01400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BDF0145C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BDF014B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1BDF01528 + 4 * byte_1BE1BC1D0[v8]))();
}

void sub_1BDF01580(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1BDF01668()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BDF01670(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BDF01678);
}

void sub_1BDF01694()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1BDF0169C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1BDF016A4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x1BDF016ACLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for RetainedResource.Retained(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RetainedResource.Retained);
}

uint64_t sub_1BDF016D0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_1BE1B2C78();
  if (!v18)
    return sub_1BE1B29D8();
  v19 = v18;
  v25 = v15;
  v39 = sub_1BE1B2588();
  v32 = sub_1BE1B3140();
  sub_1BE1B30F8();
  v36 = v17;
  result = sub_1BE1B2C60();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_1BE1B2D14();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_1BE1B3128();
      sub_1BE1B2C9C();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t sub_1BDF019AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a4;
  v47 = a2;
  MEMORY[0x1E0C80A78](a1);
  v39 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Value(0);
  v40 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v46 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v43 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for Proto_RepeatedValue(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v44 = (uint64_t *)((char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v19 = (char **)((char *)&v39 - v18);
  v48 = a3;
  v49 = sub_1BE1B2588();
  v42 = *(int *)(v8 + 20);
  v20 = a1;
  v21 = *(_QWORD *)(a1 + v42)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v14, &qword_1ED6F26F0);
  v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  v24 = v23(v14, 1, v22);
  v25 = MEMORY[0x1E0DEE9D8];
  if (v24 == 1)
  {
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      v26 = v25;
      sub_1BDF03540((uint64_t)v14, (uint64_t)v19);
      goto LABEL_7;
    }
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v26 = v25;
  *v19 = v25;
  sub_1BE1B20E4();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_RepeatedValue);
  swift_bridgeObjectRelease();
  v45 = sub_1BE1B2A5C();
  sub_1BE1B29C0();
  v27 = *(_QWORD *)(v20 + v42)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v28 = v43;
  sub_1BDD86DEC(v27, v43, &qword_1ED6F26F0);
  if (v23((char *)v28, 1, v22) == 1)
  {
    sub_1BDD86E30(v28, &qword_1ED6F26F0);
    v29 = v44;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v29 = v44;
    if (EnumCaseMultiPayload == 10)
    {
      sub_1BDF03540(v28, (uint64_t)v44);
      goto LABEL_13;
    }
    sub_1BDD9C3E0(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v29 = v26;
  sub_1BE1B20E4();
LABEL_13:
  v43 = v20;
  v31 = *v29;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v29, type metadata accessor for Proto_RepeatedValue);
  v32 = *(_QWORD *)(v31 + 16);
  v42 = v31;
  if (v32)
  {
    v44 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 8);
    v33 = v31 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v34 = *(_QWORD *)(v40 + 72);
    v35 = v47;
    while (1)
    {
      v36 = v46;
      sub_1BDDD2EB4(v33, v46);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      sub_1BDDB4FC0(v36, v35);
      swift_release();
      v37 = swift_retain();
      ((void (*)(uint64_t))v44)(v37);
      if (v4)
        break;
      sub_1BE1B2A20();
      swift_release();
      v33 += v34;
      if (!--v32)
        goto LABEL_17;
    }
    swift_release();
    swift_release();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_17:
    swift_release();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    return v49;
  }
}

uint64_t sub_1BDF01E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v10);
  v31 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Proto_RepeatedValue(0);
  MEMORY[0x1E0C80A78](v29);
  v30 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BE1B20E4();
  v13 = type metadata accessor for Proto_Value(0);
  v14 = (char *)v13;
  v15 = *(int *)(v13 + 20);
  if (qword_1ED6F2718 != -1)
    v13 = swift_once();
  *(_QWORD *)(a5 + v15) = qword_1ED6F2708;
  v33 = a2;
  MEMORY[0x1E0C80A78](v13);
  *(&v28 - 4) = a3;
  *(&v28 - 3) = a4;
  *(&v28 - 2) = a1;
  v16 = sub_1BE1B2A5C();
  swift_retain();
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  v18 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v16);
  v19 = v32;
  v20 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF034EC, (uint64_t)(&v28 - 6), v16, v14, v17, v18, MEMORY[0x1E0DEDB38], (uint64_t)&v34);
  if (v19)
    return sub_1BDD9C3E0(a5, type metadata accessor for Proto_Value);
  v22 = v20;
  v23 = *(_QWORD *)(a5 + v15)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v24 = v31;
  sub_1BDD86DEC(v23, v31, &qword_1ED6F26F0);
  v25 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25) == 1)
  {
    sub_1BDD86E30(v24, &qword_1ED6F26F0);
LABEL_10:
    v27 = v30;
    *v30 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_1BDD9C3E0(v24, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  v26 = v24;
  v27 = v30;
  sub_1BDF03540(v26, (uint64_t)v30);
LABEL_11:
  swift_bridgeObjectRelease();
  *v27 = v22;
  return sub_1BE1295CC((uint64_t)v27);
}

uint64_t sub_1BDF02134(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_1BE1B2EE8();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_1BE1B2894();
  v57 = sub_1BE1B2588();
  v53 = sub_1BE1B3140();
  sub_1BE1B30F8();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_1BE1B2888();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_1BE1B2F00();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_1BE1B3128();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_1BE1B2F00();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_1BE1B3128();
      sub_1BE1B2F00();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t Array<A>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v11, (uint64_t)v10, &qword_1ED6F3770);
  v12 = type metadata accessor for Proto_Value(0);
  LODWORD(v11) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3770);
  if ((_DWORD)v11 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000017;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v4 = sub_1BDE15870(a2, a3);
  }
  swift_release();
  return v4;
}

uint64_t Array<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v4)
  {
    swift_retain();
    sub_1BDE20A78(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t Array<A>.observableDifference(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[10];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v9 = MEMORY[0x1C3B7C8EC](a3, a4);
  v10 = 0;
  if (v9 == MEMORY[0x1C3B7C8EC](a1, a4))
  {
    v11 = sub_1BE1B2A5C();
    v12 = MEMORY[0x1E0DEAF38];
    v13 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v11);
    v14 = sub_1BE1B3668();
    v32 = v33;
    v15 = MEMORY[0x1E0C80A78](v14);
    v25[8] = a4;
    v25[9] = a5;
    v26 = a2;
    MEMORY[0x1E0C80A78](v15);
    v25[2] = a4;
    v25[3] = a5;
    v25[4] = sub_1BDF032D0;
    v25[5] = v16;
    v28 = v11;
    v29 = v11;
    v30 = v13;
    v31 = v13;
    v17 = sub_1BE1B30B0();
    swift_getAssociatedTypeWitness();
    v18 = sub_1BE1B2EE8();
    v19 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEC3A0], v17);
    v10 = sub_1BDF02134((void (*)(char *, char *))sub_1BDF0330C, (uint64_t)v25, v17, v18, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
    swift_bridgeObjectRelease();
    v21 = swift_bridgeObjectRelease();
    v28 = v10;
    MEMORY[0x1E0C80A78](v21);
    v26 = a4;
    v27 = a5;
    v22 = sub_1BE1B2A5C();
    MEMORY[0x1C3B7DF54](v12, v22);
    v23 = sub_1BE1B290C();
    if ((v23 & 1) != 0)
    {
      v28 = v10;
      MEMORY[0x1E0C80A78](v23);
      v26 = a4;
      v27 = a5;
      if ((sub_1BE1B290C() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  return v10;
}

uint64_t sub_1BDF02AD8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_1BE1B2EE8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v11 - v5, a1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_6:
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DDF0);
  if (!swift_dynamicCast())
    goto LABEL_6;
  v7 = *((_QWORD *)&v12 + 1);
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_7:
    sub_1BDD86E30((uint64_t)&v11, qword_1EF52C570);
    v9 = 0;
    return v9 & 1;
  }
  v8 = v13;
  __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  return v9 & 1;
}

uint64_t Array<A>.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1);
  swift_bridgeObjectRetain();
  if (!MEMORY[0x1C3B7C928](a2, a3))
    return swift_bridgeObjectRelease();
  v10 = 0;
  v11 = *(_QWORD *)(a4 + 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  while (1)
  {
    v13 = sub_1BE1B29FC();
    sub_1BE1B29A8();
    if ((v13 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v10, a3);
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = sub_1BE1B30BC();
    if (v9 != 8)
      break;
    v17 = result;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(&v16 - 2, &v17, a3);
    swift_unknownObjectRelease();
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_10:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_5:
    v12(a1, a3, v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
    ++v10;
    if (v14 == MEMORY[0x1C3B7C928](a2, a3))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.copy(renamingReferences:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[8];

  v9[7] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a1;
  v5 = sub_1BE1B2A5C();
  v6 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v5);
  return sub_1BDF016D0((void (*)(char *, char *))sub_1BDF033F4, (uint64_t)v9, v5, a3, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
}

uint64_t Array<A>.needToFinalizeTimestamps()()
{
  uint64_t v0;

  v0 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v0);
  return sub_1BE1B290C() & 1;
}

uint64_t Array<A>.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char isClassOrObjCExistentialType;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v23 = a3;
  v22[0] = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = sub_1BE1B2EE8();
  v24 = *(_QWORD *)(v11 - 8);
  v25 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (_QWORD *)((char *)v22 - v15);
  v28 = *v3;
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], a2);
  sub_1BE1B28B8();
  v26 = v27;
  sub_1BE1B3230();
  sub_1BE1B320C();
  v22[1] = a2;
  sub_1BE1B3224();
  while (1)
  {
    sub_1BE1B3218();
    (*(void (**)(unint64_t *, char *, uint64_t))(v24 + 32))(v16, v14, v25);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8)
                                                                              + 48))(v16, 1, TupleTypeMetadata2) == 1)break;
    v17 = *v16;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, (char *)v16 + *(int *)(TupleTypeMetadata2 + 48), v6);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v23 + 8) + 56))(v22[0], v6);
    sub_1BE1B29CC();
    v18 = *v4;
    sub_1BDF03280(v17, *v4);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    v20 = v18 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0)
      v20 = v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 24))(v20+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17, v9, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t static Array<A>.canContainAssets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 64))() & 1;
}

uint64_t sub_1BDF03178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;

  result = Array<A>.copy(renamingReferences:)(a1, *v4, *(char **)(a2 + 16), *(_QWORD *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_1BDF031AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t result;

  result = Array<A>.observableDifference(from:with:)(*a1, a2, *v5, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
  *a5 = result;
  return result;
}

uint64_t sub_1BDF031E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.visitReferences(_:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t sub_1BDF031F8()
{
  return Array<A>.needToFinalizeTimestamps()();
}

uint64_t sub_1BDF0320C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.finalizeTimestamps(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_1BDF03214(uint64_t a1, uint64_t a2)
{
  return static Array<A>.canContainAssets.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t sub_1BDF03220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = Array<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_1BDF03250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.encode(to:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

void Array<A>.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1BDF03280(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1BDF032D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2[3] + 8) + 32))(a2, v2[4], v2[2]);
}

uint64_t sub_1BDF0330C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

BOOL sub_1BDF03374(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(a1, 1, AssociatedTypeWitness) != 1;
}

uint64_t sub_1BDF033D8(uint64_t a1)
{
  return sub_1BDF02AD8(a1) & 1;
}

uint64_t sub_1BDF033F4()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0[3] + 8) + 24))(v0[4], v0[2]);
}

uint64_t sub_1BDF03430()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 8) + 48))(*(_QWORD *)(v0 + 16)) & 1;
}

uint64_t sub_1BDF0346C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> [A], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF034AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> [A], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF034EC@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDE1CC84((void (*)(uint64_t))sub_1BDE27F68, a2);
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_1BDF03540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_RepeatedValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF03584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int EnumCaseMultiPayload;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = a5;
  v55 = a2;
  v46 = a4;
  v52 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v51 = (char *)&v44 - v10;
  v11 = type metadata accessor for Proto_Value(0);
  v45 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v53 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v49 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v44 - v16;
  v18 = type metadata accessor for Proto_RepeatedValue(0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v50 = (uint64_t *)((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19);
  v22 = (uint64_t *)((char *)&v44 - v21);
  v23 = *(int *)(v11 + 20);
  v48 = a1;
  v24 = *(_QWORD *)(a1 + v23);
  v25 = v24 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v25, (uint64_t)v17, &qword_1ED6F26F0);
  v26 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48);
  if (v27(v17, 1, v26) == 1)
  {
    sub_1BDD86E30((uint64_t)v17, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1BDF03540((uint64_t)v17, (uint64_t)v22);
      goto LABEL_7;
    }
    sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v22 = MEMORY[0x1E0DEE9D8];
  sub_1BE1B20E4();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v22, type metadata accessor for Proto_RepeatedValue);
  swift_bridgeObjectRelease();
  v28 = sub_1BE1B2B7C();
  v56 = v28;
  v29 = v24 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v30 = v49;
  sub_1BDD86DEC(v29, v49, &qword_1ED6F26F0);
  if (v27((char *)v30, 1, v26) == 1)
  {
    sub_1BDD86E30(v30, &qword_1ED6F26F0);
    v31 = v50;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v31 = v50;
    if (EnumCaseMultiPayload == 10)
    {
      sub_1BDF03540(v30, (uint64_t)v50);
      goto LABEL_13;
    }
    sub_1BDD9C3E0(v30, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v31 = MEMORY[0x1E0DEE9D8];
  sub_1BE1B20E4();
LABEL_13:
  v33 = *v31;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v31, type metadata accessor for Proto_RepeatedValue);
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8);
    v36 = *(uint64_t **)(v35 + 8);
    v37 = *(unsigned __int8 *)(v45 + 80);
    v46 = v33;
    v38 = v33 + ((v37 + 32) & ~v37);
    v49 = *(_QWORD *)(v45 + 72);
    v50 = v36;
    while (1)
    {
      v39 = v53;
      sub_1BDDD2EB4(v38, v53);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      v28 = v55;
      swift_retain();
      sub_1BDDB4FC0(v39, v28);
      swift_release();
      v40 = swift_retain();
      ((void (*)(uint64_t, uint64_t, uint64_t))v50)(v40, a3, v35);
      if (v5)
        break;
      sub_1BE1B2BF4();
      v41 = v51;
      sub_1BE1B2BB8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v41, a3);
      v38 += v49;
      if (!--v34)
      {
        swift_release();
        v28 = v56;
        v42 = v48;
        goto LABEL_19;
      }
    }
    swift_release();
    swift_release();
    sub_1BDD9C3E0(v48, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    v42 = v48;
LABEL_19:
    sub_1BDD9C3E0(v42, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
  }
  return v28;
}

uint64_t sub_1BDF03A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v11);
  v32 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Proto_RepeatedValue(0);
  MEMORY[0x1E0C80A78](v30);
  v31 = (uint64_t *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BE1B20E4();
  v14 = type metadata accessor for Proto_Value(0);
  v15 = (char *)v14;
  v16 = *(int *)(v14 + 20);
  if (qword_1ED6F2718 != -1)
    v14 = swift_once();
  *(_QWORD *)(a6 + v16) = qword_1ED6F2708;
  v35 = a2;
  MEMORY[0x1E0C80A78](v14);
  v17 = v33;
  *(&v30 - 4) = a3;
  *(&v30 - 3) = v17;
  *(&v30 - 2) = a5;
  *(&v30 - 1) = a1;
  v18 = sub_1BE1B2BF4();
  swift_retain();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  v20 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB3E0], v18);
  v21 = v34;
  v22 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF04EF8, (uint64_t)(&v30 - 6), v18, v15, v19, v20, MEMORY[0x1E0DEDB38], (uint64_t)&v36);
  if (v21)
    return sub_1BDD9C3E0(a6, type metadata accessor for Proto_Value);
  v24 = v22;
  v25 = *(_QWORD *)(a6 + v16)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v26 = v32;
  sub_1BDD86DEC(v25, v32, &qword_1ED6F26F0);
  v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27) == 1)
  {
    sub_1BDD86E30(v26, &qword_1ED6F26F0);
LABEL_10:
    v29 = v31;
    *v31 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_1BDD9C3E0(v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  v28 = v26;
  v29 = v31;
  sub_1BDF03540(v28, (uint64_t)v31);
LABEL_11:
  swift_bridgeObjectRelease();
  *v29 = v24;
  return sub_1BE1295CC((uint64_t)v29);
}

uint64_t Set<>.observableDifference(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v75 = a2;
  v74 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v65 = sub_1BE1B2EE8();
  v64 = *(_QWORD *)(v65 - 8);
  v11 = MEMORY[0x1E0C80A78](v65);
  v73 = (char *)v58 - v12;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v63 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v62 = (char *)v58 - v17;
  v18 = *(_QWORD *)(a4 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v72 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v77 = (char *)v58 - v21;
  v22 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v58 - v23;
  v25 = a3;
  v26 = sub_1BE1B2BAC();
  v80 = a1;
  v76 = a6;
  v27 = 0;
  if (v26 != sub_1BE1B2BAC())
    return v27;
  v69 = v13;
  v70 = AssociatedTypeWitness;
  v82 = sub_1BE1B2588();
  if ((v25 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1BE1B2FB4();
    result = sub_1BE1B2BDC();
    v25 = v83;
    v59 = v84;
    v29 = v85;
    v30 = v86;
    v31 = v87;
  }
  else
  {
    v32 = -1 << *(_BYTE *)(v25 + 32);
    v33 = *(_QWORD *)(v25 + 56);
    v59 = v25 + 56;
    v34 = ~v32;
    v35 = -v32;
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v31 = v36 & v33;
    result = swift_bridgeObjectRetain();
    v29 = v34;
    v30 = 0;
  }
  v60 = v25 & 0x7FFFFFFFFFFFFFFFLL;
  v58[1] = v29;
  v66 = (unint64_t)(v29 + 64) >> 6;
  v68 = v25;
  v61 = a4;
  v67 = v18;
  while (1)
  {
    v71 = v30;
    if ((v25 & 0x8000000000000000) == 0)
      break;
    if (!sub_1BE1B3008())
      goto LABEL_33;
    sub_1BE1B3494();
    swift_unknownObjectRelease();
    v78 = v31;
    v79 = v30;
LABEL_29:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, a4);
    v42 = v77;
    v43 = v24;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v77, v24, a4);
    v44 = sub_1BE1B2B64();
    if (v46 == 0xFF)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v42, a4);
      sub_1BDE27FD0();
      swift_bridgeObjectRelease();
      return 0;
    }
    v47 = v44;
    v48 = v45;
    v49 = v46;
    v50 = v72;
    sub_1BE1B2C0C();
    v51 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v50, v75, a4);
    v52 = *(void (**)(char *, uint64_t))(v18 + 8);
    v52(v50, a4);
    v53 = v69;
    v54 = v70;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v51, 1, v70) == 1)
    {
      v52(v42, a4);
      sub_1BDF04E60(v47, v48, v49);
      result = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v51, v65);
    }
    else
    {
      v55 = v62;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v62, v51, v54);
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v63, v55, v54);
      sub_1BE1B2A5C();
      sub_1BE1B2A20();
      sub_1BDF04E60(v47, v48, v49);
      v56 = v55;
      a4 = v61;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v54);
      result = ((uint64_t (*)(char *, uint64_t))v52)(v77, a4);
    }
    v31 = v78;
    v30 = v79;
    v18 = v67;
    v25 = v68;
    v24 = v43;
  }
  if (v31)
  {
    v78 = (v31 - 1) & v31;
    v79 = v30;
    v37 = __clz(__rbit64(v31)) | (v30 << 6);
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v24, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v18 + 72) * v37, a4);
    goto LABEL_29;
  }
  v38 = v30 + 1;
  if (__OFADD__(v30, 1))
  {
    __break(1u);
    return result;
  }
  if (v38 >= v66)
    goto LABEL_33;
  v39 = *(_QWORD *)(v59 + 8 * v38);
  v40 = v30 + 1;
  if (v39)
    goto LABEL_27;
  v40 = v30 + 2;
  if (v30 + 2 >= v66)
    goto LABEL_33;
  v39 = *(_QWORD *)(v59 + 8 * v40);
  if (v39)
    goto LABEL_27;
  v40 = v30 + 3;
  if (v30 + 3 >= v66)
    goto LABEL_33;
  v39 = *(_QWORD *)(v59 + 8 * v40);
  if (v39)
  {
LABEL_27:
    v78 = (v39 - 1) & v39;
    v79 = v40;
    v37 = __clz(__rbit64(v39)) + (v40 << 6);
    goto LABEL_28;
  }
  v41 = v30 + 4;
  while (v66 != v41)
  {
    v39 = *(_QWORD *)(v59 + 8 * v41++);
    if (v39)
    {
      v40 = v41 - 1;
      goto LABEL_27;
    }
  }
LABEL_33:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v24, 1, 1, a4);
  sub_1BDE27FD0();
  v27 = v82;
  v81 = v82;
  v57 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v57);
  if ((sub_1BE1B2CD8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return v27;
}

uint64_t Set<>.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - v9;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1BE1B2FB4();
    result = sub_1BE1B2BDC();
    a2 = v30;
    v28 = v31;
    v12 = v32;
    v13 = v33;
    v14 = v34;
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 56);
    v28 = a2 + 56;
    v12 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & v16;
    result = swift_bridgeObjectRetain();
    v13 = 0;
  }
  v29 = a2 & 0x7FFFFFFFFFFFFFFFLL;
  v27 = v12;
  v19 = (unint64_t)(v12 + 64) >> 6;
  while (a2 < 0)
  {
    if (!sub_1BE1B3008())
      goto LABEL_27;
    sub_1BE1B3494();
    swift_unknownObjectRelease();
    v22 = *(_QWORD *)(a3 - 8);
LABEL_10:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + 40))(a1, a3);
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, a3);
  }
  if (v14)
  {
    v20 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v21 = v20 | (v13 << 6);
LABEL_9:
    v22 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v10, *(_QWORD *)(a2 + 48) + *(_QWORD *)(v22 + 72) * v21, a3);
    goto LABEL_10;
  }
  v23 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v23 >= v19)
      goto LABEL_27;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    v25 = v13 + 1;
    if (!v24)
    {
      v25 = v13 + 2;
      if (v13 + 2 >= v19)
        goto LABEL_27;
      v24 = *(_QWORD *)(v28 + 8 * v25);
      if (!v24)
      {
        v25 = v13 + 3;
        if (v13 + 3 >= v19)
          goto LABEL_27;
        v24 = *(_QWORD *)(v28 + 8 * v25);
        if (!v24)
        {
          v26 = v13 + 4;
          while (v19 != v26)
          {
            v24 = *(_QWORD *)(v28 + 8 * v26++);
            if (v24)
            {
              v25 = v26 - 1;
              goto LABEL_24;
            }
          }
LABEL_27:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v10, 1, 1, a3);
          return sub_1BDE27FD0();
        }
      }
    }
LABEL_24:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v25 << 6);
    v13 = v25;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t Set<>.copy(renamingReferences:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;

  v12 = a2;
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a1;
  v6 = sub_1BE1B2BF4();
  v7 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB3E0], v6);
  v12 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDEE38E8, (uint64_t)v11, v6, a3, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  v9 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v9);
  return sub_1BE1B2C00();
}

uint64_t Set<>.needToFinalizeTimestamps()()
{
  uint64_t v0;

  v0 = sub_1BE1B2BF4();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB3D0], v0);
  return sub_1BE1B290C() & 1;
}

uint64_t Set<>.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v39 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v37 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v37 - v14;
  v16 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v37 - v17;
  v38 = v3;
  v19 = *v3;
  result = Set<>.needToFinalizeTimestamps()();
  if ((result & 1) != 0)
  {
    v44 = a3;
    v45 = a2;
    v21 = v39;
    v46 = sub_1BE1B2594();
    sub_1BE1B2BAC();
    result = sub_1BE1B2B88();
    if ((v19 & 0xC000000000000001) != 0)
    {
      sub_1BE1B2FB4();
      result = sub_1BE1B2BDC();
      v19 = v47;
      v41 = v48;
      v22 = v49;
      v43 = v50;
      v23 = v51;
    }
    else
    {
      v43 = 0;
      v24 = -1 << *(_BYTE *)(v19 + 32);
      v25 = *(_QWORD *)(v19 + 56);
      v41 = v19 + 56;
      v26 = ~v24;
      v27 = -v24;
      if (v27 < 64)
        v28 = ~(-1 << v27);
      else
        v28 = -1;
      v23 = v28 & v25;
      v22 = v26;
    }
    v29 = v21;
    v42 = v19 & 0x7FFFFFFFFFFFFFFFLL;
    v37[1] = v22;
    v40 = (unint64_t)(v22 + 64) >> 6;
    while (1)
    {
      if (v19 < 0)
      {
        if (!sub_1BE1B3008())
          goto LABEL_28;
        sub_1BE1B3494();
        swift_unknownObjectRelease();
        v29 = v21;
      }
      else
      {
        if (v23)
        {
          v30 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          v31 = v30 | (v43 << 6);
        }
        else
        {
          v33 = v43 + 1;
          if (__OFADD__(v43, 1))
          {
            __break(1u);
            return result;
          }
          if (v33 >= v40)
            goto LABEL_28;
          v34 = *(_QWORD *)(v41 + 8 * v33);
          v35 = v43 + 1;
          if (!v34)
          {
            v35 = v43 + 2;
            if (v43 + 2 >= v40)
              goto LABEL_28;
            v34 = *(_QWORD *)(v41 + 8 * v35);
            if (!v34)
            {
              v35 = v43 + 3;
              if (v43 + 3 >= v40)
                goto LABEL_28;
              v34 = *(_QWORD *)(v41 + 8 * v35);
              if (!v34)
              {
                v36 = v43 + 4;
                while (v40 != v36)
                {
                  v34 = *(_QWORD *)(v41 + 8 * v36++);
                  if (v34)
                  {
                    v35 = v36 - 1;
                    goto LABEL_25;
                  }
                }
LABEL_28:
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v18, 1, 1, v6);
                result = sub_1BDE27FD0();
                *v38 = v46;
                return result;
              }
            }
          }
LABEL_25:
          v23 = (v34 - 1) & v34;
          v31 = __clz(__rbit64(v34)) + (v35 << 6);
          v43 = v35;
        }
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v18, *(_QWORD *)(v19 + 48) + *(_QWORD *)(v7 + 72) * v31, v6);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v18, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 + 8) + 56))(v29, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v15, v6);
      sub_1BE1B2BB8();
      v32 = *(void (**)(char *, uint64_t))(v7 + 8);
      v32(v13, v6);
      result = ((uint64_t (*)(char *, uint64_t))v32)(v15, v6);
      v29 = v21;
    }
  }
  return result;
}

uint64_t static Set<>.canContainAssets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 64))() & 1;
}

uint64_t sub_1BDF04B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;

  result = Set<>.copy(renamingReferences:)(a1, *v4, *(char **)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_1BDF04B7C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t result;

  result = Set<>.observableDifference(from:with:)(*a1, a2, *v5, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), *(_QWORD *)(a3 + 24));
  *a5 = result;
  return result;
}

uint64_t sub_1BDF04BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Set<>.visitReferences(_:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t sub_1BDF04BC8()
{
  return Set<>.needToFinalizeTimestamps()();
}

uint64_t sub_1BDF04BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Set<>.finalizeTimestamps(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_1BDF04BE4(uint64_t a1, uint64_t a2)
{
  return static Set<>.canContainAssets.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t sub_1BDF04BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = Set<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t Set<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v12, &qword_1ED6F3770);
  v14 = type metadata accessor for Proto_Value(0);
  LODWORD(v13) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v12, 1, v14);
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3770);
  if ((_DWORD)v13 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000017;
    *(_QWORD *)(v15 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v15 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v5 = sub_1BDE159B8(a2, a3, a4);
  }
  swift_release();
  return v5;
}

uint64_t sub_1BDF04DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Set<>.encode(to:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
}

uint64_t Set<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v5)
  {
    swift_retain();
    sub_1BDE20B50(a2, a3, a4, a5);
    return swift_release();
  }
  return result;
}

void Set<>.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1BDF04E60(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1BDE27EC8(result, a2, a3 & 1);
  return result;
}

uint64_t sub_1BDF04E78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <> Set<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF04EB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <> Set<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF04EF8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF04F50, a2);
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_1BDF04F50()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[3] + 8) + 8) + 16))(v0[6], v0[2]);
}

uint64_t Data.init(from:)(uint64_t a1)
{
  return sub_1BDF061B4(a1);
}

uint64_t Data.encode(to:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v3)
  {
    swift_beginAccess();
    swift_retain();
    sub_1BDDB6CA4(a2, a3);
    sub_1BE1297E0(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t (*Int.init(from:)(uint64_t a1))(void)
{
  return sub_1BDF06A74(a1, sub_1BDE25FD8);
}

uint64_t Int.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDF050EC(a1, a2);
}

void Int.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Int.canContainAssets.getter()
{
  return 0;
}

uint64_t (*sub_1BDF05074@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X8>))(void)
{
  uint64_t v2;
  uint64_t (*result)(void);

  result = sub_1BDF06A74(a1, sub_1BDE25FD8);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF050A4(uint64_t a1)
{
  uint64_t *v1;

  return Int.encode(to:)(a1, *v1);
}

uint64_t (*Int64.init(from:)(uint64_t a1))(void)
{
  return sub_1BDF06A74(a1, sub_1BDE25FD8);
}

uint64_t Int64.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDF050EC(a1, a2);
}

uint64_t sub_1BDF050EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(result + 16) + 72) == 1)
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE128944(a2);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE1293B0(a2);
    }
    return swift_release();
  }
  return result;
}

uint64_t static Int64.canContainAssets.getter()
{
  return 0;
}

uint64_t UInt.init(from:)(uint64_t a1)
{
  return sub_1BDF06908(a1);
}

uint64_t (*UInt64.init(from:)(uint64_t a1))(void)
{
  return sub_1BDF06A74(a1, sub_1BDE26AEC);
}

uint64_t UInt.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(result + 16) + 72) == 1 && a2 < 0)
    {
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE128944(a2);
      return swift_release();
    }
  }
  return result;
}

uint64_t UInt64.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(result + 16) + 72) == 1 && a2 < 0)
    {
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE128944(a2);
      return swift_release();
    }
  }
  return result;
}

uint64_t static UInt.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1BDF05308@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDF06908(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF05330(uint64_t a1)
{
  uint64_t *v1;

  return UInt.encode(to:)(a1, *v1);
}

uint64_t static UInt64.canContainAssets.getter()
{
  return 0;
}

uint64_t (*sub_1BDF05350@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X8>))(void)
{
  uint64_t v2;
  uint64_t (*result)(void);

  result = sub_1BDF06A74(a1, sub_1BDE26AEC);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF05380(uint64_t a1)
{
  uint64_t *v1;

  return UInt64.encode(to:)(a1, *v1);
}

uint64_t String.init(from:)(uint64_t a1)
{
  return sub_1BDF06328(a1);
}

uint64_t String.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  result = sub_1BDE25870();
  if (!v3)
  {
    swift_retain();
    v7 = sub_1BDDA84A8(a2, a3);
    swift_beginAccess();
    sub_1BE1295C4(v7);
    return swift_release();
  }
  return result;
}

void String.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static String.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1BDF0545C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1BDF06328(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1BDF05484()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *v0;
  v3 = v0[1];
  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    v5 = sub_1BDDA84A8(v2, v3);
    swift_beginAccess();
    sub_1BE1295C4(v5);
    return swift_release();
  }
  return result;
}

uint64_t Date.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    sub_1BDE1F980(v0);
    return swift_release();
  }
  return result;
}

BOOL Date._crIsLessThan(_:)()
{
  double v0;
  double v1;
  double v2;

  sub_1BE1B1EC8();
  v1 = v0;
  sub_1BE1B1EC8();
  return v1 < v2;
}

uint64_t static Date.canContainAssets.getter()
{
  return 0;
}

BOOL sub_1BDF055BC()
{
  double v0;
  double v1;
  double v2;

  sub_1BE1B1EC8();
  v1 = v0;
  sub_1BE1B1EC8();
  return v1 < v2;
}

uint64_t sub_1BDF055F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    sub_1BDE1F980(v0);
    return swift_release();
  }
  return result;
}

void Data._crIsLessThan(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDF056A8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v0;
  v7 = v1;
  v8 = BYTE2(v1);
  v9 = BYTE3(v1);
  v10 = BYTE4(v1);
  v11 = BYTE5(v1);
  sub_1BDDB6CA4(v3, v2);
  sub_1BDE0AB3C((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v1), v3, v2);
  sub_1BDDB796C(v3, v2);
  sub_1BDDB796C(v0, v1);
  return v5 & 1;
}

void Data.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Data.canContainAssets.getter()
{
  return 0;
}

void sub_1BDF058F8(uint64_t *a1)
{
  uint64_t *v1;

  Data._crIsLessThan(_:)(*a1, a1[1], *v1, v1[1]);
}

uint64_t sub_1BDF05908@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1BDF061B4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t UUID.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    v3 = sub_1BDDAE244(v0);
    swift_beginAccess();
    sub_1BE129E04(v3);
    return swift_release();
  }
  return result;
}

uint64_t UUID._crIsLessThan(_:)()
{
  return sub_1BDDB2BF8();
}

uint64_t static UUID.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1BDF059D4()
{
  return sub_1BDDB2BF8();
}

uint64_t sub_1BDF059E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1BDE25870();
  if (!v1)
  {
    swift_retain();
    v3 = sub_1BDDAE244(v0);
    swift_beginAccess();
    sub_1BE129E04(v3);
    return swift_release();
  }
  return result;
}

float Float.init(from:)(uint64_t a1)
{
  return sub_1BDF06794(a1);
}

uint64_t Float.encode(to:)(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v1)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(result + 16) + 72) >= 2u)
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE129BF8(a1);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE1299EC(a1);
    }
    return swift_release();
  }
  return result;
}

void Float.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Float.canContainAssets.getter()
{
  return 0;
}

void sub_1BDF05B68(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  float v4;

  v4 = sub_1BDF06794(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1BDF05B90()
{
  float *v0;

  return Float.encode(to:)(*v0);
}

double Double.init(from:)(uint64_t a1)
{
  return sub_1BDF06620(a1);
}

uint64_t Double.encode(to:)(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v1)
  {
    swift_beginAccess();
    swift_retain();
    sub_1BE1299EC(a1);
    return swift_release();
  }
  return result;
}

void Double.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Double.canContainAssets.getter()
{
  return 0;
}

void sub_1BDF05C54(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v4;

  v4 = sub_1BDF06620(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1BDF05C7C()
{
  double *v0;
  uint64_t v1;
  double v2;
  uint64_t result;

  v2 = *v0;
  result = sub_1BDE25870();
  if (!v1)
  {
    swift_beginAccess();
    swift_retain();
    sub_1BE1299EC(v2);
    return swift_release();
  }
  return result;
}

BOOL Bool.init(from:)(uint64_t a1)
{
  return sub_1BDF064A8(a1);
}

uint64_t Bool.encode(to:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1BDE25870();
  if (!v2)
  {
    v5 = a2 & 1;
    if (*(_BYTE *)(*(_QWORD *)(result + 16) + 72) == 1)
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE128944(v5);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1BE1293B0(v5);
    }
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall Bool._crIsLessThan(_:)(Swift::Bool a1)
{
  char v1;

  return a1 & ~v1 & 1;
}

void Bool.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Bool.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1BDF05DF0(_BYTE *a1)
{
  _BYTE *v1;

  return *a1 & ~*v1 & 1;
}

BOOL sub_1BDF05E04@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _BOOL8 result;

  result = sub_1BDF064A8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF05E30(uint64_t a1)
{
  char *v1;

  return Bool.encode(to:)(a1, *v1);
}

uint64_t URL.CodingKeys.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t URL.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4;
  uint64_t result;
  char v8;
  char v9;

  v4 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v4 || (sub_1BE1B34AC() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 0;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v8 = 1;
  }
  else
  {
    v9 = sub_1BE1B34AC();
    result = swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      v8 = 1;
    else
      v8 = 2;
  }
  *a3 = v8;
  return result;
}

uint64_t URL.CodingKeys.init(intValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result)
  {
    if (result == 1)
      *a2 = 1;
    else
      *a2 = 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void *static URL.CodingKeys.allCases.getter()
{
  return &unk_1E7753F40;
}

uint64_t URL.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t URL.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t URL.CodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x65766974616C6572;
  else
    return 1702060386;
}

BOOL sub_1BDF05FD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

_QWORD *sub_1BDF05FEC@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1BDF0600C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1BDF06018()
{
  _BYTE *v0;

  if (*v0)
    return 0x65766974616C6572;
  else
    return 1702060386;
}

uint64_t sub_1BDF06050()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1BDF0605C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

void sub_1BDF06078(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7754028;
}

uint64_t sub_1BDF06088()
{
  sub_1BDF06C9C();
  return sub_1BE1B3794();
}

uint64_t sub_1BDF060B0()
{
  sub_1BDF06C9C();
  return sub_1BE1B37A0();
}

void URL.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static URL.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1BDF060E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1BE1B1C70();
  v11 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1BE1B1C88();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1BDE0AB3C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_1BDF061B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v7, (uint64_t)v6);
  v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1BDD86E30((uint64_t)v6, &qword_1ED6F3770);
  if ((_DWORD)v7 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000017;
    *(_QWORD *)(v9 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v2 = sub_1BDDCA244();
  }
  swift_release();
  return v2;
}

uint64_t sub_1BDF06328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v7, (uint64_t)v6);
  v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1BDD86E30((uint64_t)v6, &qword_1ED6F3770);
  if ((_DWORD)v7 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000017;
    *(_QWORD *)(v9 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v10 = sub_1BDE25D14();
    if (!v1)
    {
      v2 = v10;
      swift_bridgeObjectRetain();
      swift_release();
      return v2;
    }
  }
  swift_release();
  return v2;
}

BOOL sub_1BDF064A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v6, (uint64_t)v5);
  v7 = type metadata accessor for Proto_Value(0);
  LODWORD(v6) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  sub_1BDD86E30((uint64_t)v5, &qword_1ED6F3770);
  if ((_DWORD)v6 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000017;
    *(_QWORD *)(v8 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v8 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v9 = sub_1BDE25FD8();
    if (!v1)
    {
      v11 = v9;
      swift_release();
      return v11 != 0;
    }
  }
  swift_release();
  return v10;
}

double sub_1BDF06620(uint64_t a1)
{
  double v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _BYTE v11[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v6, (uint64_t)v5);
  v7 = type metadata accessor for Proto_Value(0);
  LODWORD(v6) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  sub_1BDD86E30((uint64_t)v5, &qword_1ED6F3770);
  if ((_DWORD)v6 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000017;
    *(_QWORD *)(v8 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v8 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDE26378();
    v1 = v9;
  }
  swift_release();
  return v1;
}

float sub_1BDF06794(uint64_t a1)
{
  float v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE v11[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v6, (uint64_t)v5);
  v7 = type metadata accessor for Proto_Value(0);
  LODWORD(v6) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  sub_1BDD86E30((uint64_t)v5, &qword_1ED6F3770);
  if ((_DWORD)v6 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000017;
    *(_QWORD *)(v8 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v8 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDE26728();
    v1 = v9;
  }
  swift_release();
  return v1;
}

uint64_t sub_1BDF06908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v7, (uint64_t)v6);
  v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1BDD86E30((uint64_t)v6, &qword_1ED6F3770);
  if ((_DWORD)v7 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000017;
    *(_QWORD *)(v9 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v2 = sub_1BDE26AEC();
  }
  swift_release();
  return v2;
}

uint64_t (*sub_1BDF06A74(uint64_t a1, uint64_t (*a2)(void)))(void)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v7, (uint64_t)v6);
  v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1BDD86E30((uint64_t)v6, &qword_1ED6F3770);
  if ((_DWORD)v7 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000017;
    *(_QWORD *)(v9 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    a2 = (uint64_t (*)(void))a2();
  }
  swift_release();
  return a2;
}

unint64_t sub_1BDF06BE8()
{
  unint64_t result;

  result = qword_1EF52DDF8;
  if (!qword_1EF52DDF8)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DDF8);
  }
  return result;
}

unint64_t sub_1BDF06C2C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 16) = sub_1BDF06C58();
  result = sub_1BDF06C9C();
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

unint64_t sub_1BDF06C58()
{
  unint64_t result;

  result = qword_1EF52DE00;
  if (!qword_1EF52DE00)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DE00);
  }
  return result;
}

unint64_t sub_1BDF06C9C()
{
  unint64_t result;

  result = qword_1EF52DE08;
  if (!qword_1EF52DE08)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DE08);
  }
  return result;
}

unint64_t sub_1BDF06CE4()
{
  unint64_t result;

  result = qword_1EF52DE10;
  if (!qword_1EF52DE10)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DE10);
  }
  return result;
}

unint64_t sub_1BDF06D2C()
{
  unint64_t result;

  result = qword_1EF52DE18;
  if (!qword_1EF52DE18)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DE18);
  }
  return result;
}

unint64_t sub_1BDF06D74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52DE20;
  if (!qword_1EF52DE20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF52DE28);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF52DE20);
  }
  return result;
}

unint64_t sub_1BDF06DC4()
{
  unint64_t result;

  result = qword_1EF52DE30;
  if (!qword_1EF52DE30)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for URL.CodingKeys, &type metadata for URL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF52DE30);
  }
  return result;
}

uint64_t sub_1BDF06E08(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = sub_1BDF06E54(qword_1EF52DE38, MEMORY[0x1E0CB0038]);
  result = sub_1BDF06E54(&qword_1EF52DD40, MEMORY[0x1E0CB0010]);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1BDF06E54(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BE1B1DF0();
    result = MEMORY[0x1C3B7DF54](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BDF06F70 + 4 * byte_1BE1BC36D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BDF06FA4 + 4 * byte_1BE1BC368[v4]))();
}

uint64_t sub_1BDF06FA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDF06FAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BDF06FB4);
  return result;
}

uint64_t sub_1BDF06FC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BDF06FC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BDF06FCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDF06FD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1BDF06FE0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for URL.CodingKeys()
{
  return &type metadata for URL.CodingKeys;
}

uint64_t (*sub_1BDF07010@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X8>))(void)
{
  return sub_1BDF05074(a1, a2);
}

uint64_t sub_1BDF07028(uint64_t a1)
{
  return sub_1BDF050A4(a1);
}

double RefBinding.init(wrappedValue:_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double result;
  __int128 v13;
  __int128 v14;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v10, a1);
  v13 = xmmword_1BE1B6B20;
  swift_retain();
  v11 = Ref.init<A>(_:_:identity:)((uint64_t)v10, (uint64_t *)&v13, a3, &v14);
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 8))(a1, a3, v11);
  result = *(double *)&v14;
  *(_OWORD *)a4 = v14;
  *(_QWORD *)(a4 + 16) = a2;
  return result;
}

__n128 RefBinding.init(wrappedValue:_:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = a2;
  return result;
}

uint64_t RefBinding.wrappedValue.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v3 = *v1;
  v4 = v1[2];
  v8 = v1[1];
  sub_1BDDB6CA4(*v1, v8);
  v6 = type metadata accessor for Ref(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v5);
  Ref.subscript.getter(v4, v6);
  return sub_1BDDB796C(v3, v8);
}

void sub_1BDF07198()
{
  type metadata accessor for RefBinding();
}

uint64_t sub_1BDF071D4(uint64_t a1)
{
  return RefBinding.wrappedValue.getter(a1);
}

void sub_1BDF071F0()
{
  type metadata accessor for RefBinding();
}

uint64_t sub_1BDF07224(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[8];

  v2 = RefBinding.wrappedValue.modify(v6, a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v3, v1);
  return ((uint64_t (*)(_QWORD *, _QWORD))v2)(v6, 0);
}

void (*RefBinding.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  v5[4] = *v2;
  v5[5] = v7;
  sub_1BDDB6CA4(v6, v7);
  v10 = type metadata accessor for Ref(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), v9);
  v5[6] = Ref.subscript.modify(v5, v8, v10);
  return sub_1BDF072E8;
}

void sub_1BDF072E8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  sub_1BDDB796C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  free((void *)v1);
}

uint64_t RefBinding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54[3];
  uint64_t v55;
  unint64_t v56;

  v49 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v47 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2[1];
  v9 = *(_QWORD *)(v2[2] + *(_QWORD *)(*(_QWORD *)v2[2] + 112));
  *(_QWORD *)&v50 = *v2;
  v8 = v50;
  *((_QWORD *)&v50 + 1) = v7;
  sub_1BDDB6CA4(v50, v7);
  v48 = v8;
  v45 = v7;
  sub_1BDDB6CA4(v8, v7);
  v10 = v5;
  v12 = type metadata accessor for Ref(0, v5, *(_QWORD *)(a2 + 32), v11);
  swift_retain();
  v13 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v12);
  v43 = v12;
  v14 = v13;
  Reference.identity.getter(v12, v13);
  v16 = v55;
  v15 = v56;
  v44 = v9;
  v17 = v9 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v18 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1BDDB6CA4(v16, v15);
  sub_1BDDB6CA4(v16, v15);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = *(_QWORD *)(v17 + v18);
  v20 = v53;
  *(_QWORD *)(v17 + v18) = 0x8000000000000000;
  sub_1BDDB6CA4(v16, v15);
  v22 = sub_1BDDB7F0C(v16, v15);
  v23 = *(_QWORD *)(v20 + 16);
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v21;
  if (*(_QWORD *)(v20 + 24) >= v25)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v21 & 1) != 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    sub_1BDDB7F70();
    if ((v3 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1BDDC50C4(v25, isUniquelyReferenced_nonNull_native);
  v26 = sub_1BDDB7F0C(v16, v15);
  if ((v3 & 1) != (v27 & 1))
  {
LABEL_16:
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v22 = v26;
  if ((v3 & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v28 = (__int128 *)(*(_QWORD *)(v53 + 56) + 48 * v22);
  v50 = *v28;
  v51 = v28[1];
  v52 = v28[2];
  v29 = v50;
  if (!(_QWORD)v50)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v30 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 160))();
    *(_QWORD *)&v50 = v30;
    swift_release();
    v29 = v30;
  }
  swift_retain();
  sub_1BDDBA064((uint64_t *)&v50, 1, &v53, v22, v16, v15);
  sub_1BDDBA008(v50, *((uint64_t *)&v50 + 1), v51);
  sub_1BDDB796C(v16, v15);
  *(_QWORD *)(v17 + v18) = v53;
  sub_1BDDB796C(v16, v15);
  swift_endAccess();
  sub_1BDDB796C(v16, v15);
  v31 = sub_1BDDB796C(v16, v15);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v29 + 240))(&v50, v31);
  v32 = v46;
  v33 = v10;
  swift_dynamicCast();
  v34 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 24))(v32, v49, v10);
  *((_QWORD *)&v51 + 1) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
  (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v32, v10);
  (*(void (**)(__int128 *))(*(_QWORD *)v29 + 248))(&v50);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  v36 = v48;
  v37 = v45;
  *(_QWORD *)&v50 = v48;
  *((_QWORD *)&v50 + 1) = v45;
  Reference.identity.getter(v43, v14);
  v38 = v55;
  v39 = v56;
  swift_beginAccess();
  sub_1BDDBC6BC(v54, v38, v39);
  swift_endAccess();
  sub_1BDDB796C(v54[0], v54[1]);
  v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v32, v33);
  swift_release();
  swift_release();
  sub_1BDDB796C(v36, v37);
  sub_1BDDB796C(v36, v37);
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v49, v33);
}

uint64_t RefBinding.projectedValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1BDDB6CA4(v2, v3);
}

uint64_t sub_1BDF0775C()
{
  return 32;
}

__n128 sub_1BDF07768(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BDF07778(uint64_t a1)
{
  sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_release();
}

uint64_t *sub_1BDF077A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

uint64_t *sub_1BDF077F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1BDDB796C(v6, v7);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *sub_1BDF07850(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1BDDB796C(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void type metadata accessor for RefBinding()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF078A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v5, type metadata accessor for Proto_Sequence);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Sequence);
  v6 = objc_allocWithZone(MEMORY[0x1E0CB37A0]);
  v7 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithString_, v7);

  result = sub_1BDDC6C38(0, &qword_1EF52C3E8);
  a1[3] = result;
  *a1 = v8;
  return result;
}

id sub_1BDF07A34()
{
  return sub_1BDF07AA8(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, 0xD000000000000018, 0x80000001BE1CEE80);
}

id sub_1BDF07A74()
{
  return sub_1BDF07AA8(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion, 0xD000000000000022, 0x80000001BE1CEE50);
}

id sub_1BDF07AA8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  id result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  objc_super v50;
  __int128 v51;
  uint64_t v52;

  v52 = a3;
  v48 = a2;
  v5 = type metadata accessor for Proto_Version(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v43 = (_QWORD **)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v9 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)&v49 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for Proto_Sequence(0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v46 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - v16;
  v44 = v3;
  v18 = v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded;
  v19 = v5;
  sub_1BDD9C318(v18, (uint64_t)&v43 - v16, v20);
  v21 = *(_QWORD *)&v17[*(int *)(v13 + 20)];
  v47 = a1;
  v22 = v21 + *a1;
  swift_beginAccess();
  sub_1BDD86DEC(v22, (uint64_t)v12, &qword_1ED6F37A8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v22) = v23(v12, 1, v19);
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F37A8);
  sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Sequence);
  if ((_DWORD)v22 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    v24 = v52;
    *(_QWORD *)v25 = v48;
    *(_QWORD *)(v25 + 8) = v24;
    *(_BYTE *)(v25 + 16) = 0;
    return (id)swift_willThrow();
  }
  else
  {
    v27 = v18;
    v28 = v46;
    sub_1BDD9C318(v27, v46, type metadata accessor for Proto_Sequence);
    v29 = *(_QWORD *)(v28 + *(int *)(v13 + 20)) + *v47;
    swift_beginAccess();
    v30 = v29;
    v31 = v49;
    sub_1BDD86DEC(v30, v49, &qword_1ED6F37A8);
    v32 = v23((char *)v31, 1, v19);
    v33 = v28;
    if (v32 == 1)
    {
      v34 = MEMORY[0x1E0DEE9D8];
      v35 = v43;
      *v43 = MEMORY[0x1E0DEE9D8];
      v35[1] = v34;
      sub_1BE1B20E4();
      sub_1BDD86E30(v31, &qword_1ED6F37A8);
    }
    else
    {
      v35 = v43;
      sub_1BDDA2E8C(v31, (uint64_t)v43, type metadata accessor for Proto_Version);
    }
    v37 = v44;
    v36 = v45;
    sub_1BDD9C3E0(v33, type metadata accessor for Proto_Sequence);
    v38 = *(_QWORD *)(v37 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder);
    swift_retain();
    result = (id)sub_1BDDA9DA0(v35, v38, &v51);
    if (!v36)
    {
      v39 = (objc_class *)type metadata accessor for ObjCVersion();
      v49 = v51;
      v40 = (char *)objc_allocWithZone(v39);
      v41 = &v40[OBJC_IVAR___ObjCVersion_version];
      v42 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)v41 = MEMORY[0x1E0DEE9E0];
      *((_QWORD *)v41 + 1) = v42;
      swift_beginAccess();
      *(_OWORD *)v41 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50.receiver = v40;
      v50.super_class = v39;
      return objc_msgSendSuper2(&v50, sel_init);
    }
  }
  return result;
}

id sub_1BDF07E4C()
{
  return sub_1BDF07AA8(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromVersion, 0xD00000000000001DLL, 0x80000001BE1CEE30);
}

id sub_1BDF07E8C()
{
  return sub_1BDF07AA8(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromAddedByVersion, 0xD000000000000025, 0x80000001BE1CEE00);
}

id sub_1BDF07ECC(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5;
  void *v6;

  v5 = a1;
  v6 = (void *)a4();

  return v6;
}

uint64_t sub_1BDF08034(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[24];

  v3 = type metadata accessor for Proto_Subsequence(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BDD9C318(v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v9, type metadata accessor for Proto_Sequence);
  v10 = *(_QWORD *)&v9[*(int *)(v7 + 20)];
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain();
  result = sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_Sequence);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v11 + 16) > a1)
  {
    sub_1BDD9C318(v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * a1, (uint64_t)v6, type metadata accessor for Proto_Subsequence);
    swift_bridgeObjectRelease();
    v13 = v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
    swift_beginAccess();
    sub_1BDF0DBE0((uint64_t)v6, v13);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDF081EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;

  v32 = a1;
  v2 = type metadata accessor for Proto_Timestamp(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v35 = (unint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v6 = MEMORY[0x1E0C80A78](v5);
  v33 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Proto_Subsequence(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v31 - v14;
  v34 = v1;
  v16 = v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1BDD9C318(v16, (uint64_t)v15, type metadata accessor for Proto_Subsequence);
  v17 = *(_QWORD *)&v15[*(int *)(v10 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v9, &qword_1ED6F3850);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  LODWORD(v17) = v18(v9, 1, v2);
  sub_1BDD86E30((uint64_t)v9, &qword_1ED6F3850);
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_Subsequence);
  if ((_DWORD)v17 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v19 = 0xD00000000000003ALL;
    *(_QWORD *)(v19 + 8) = 0x80000001BE1CEDC0;
    *(_BYTE *)(v19 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    v21 = *(_QWORD *)(v34 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder);
    sub_1BDD9C318(v16, (uint64_t)v13, type metadata accessor for Proto_Subsequence);
    v22 = *(_QWORD *)&v13[*(int *)(v10 + 20)]
        + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
    swift_beginAccess();
    v23 = v22;
    v24 = v33;
    sub_1BDD86DEC(v23, v33, &qword_1ED6F3850);
    if (v18((char *)v24, 1, v2) == 1)
    {
      v25 = v35;
      *v35 = 0;
      v25[1] = 0;
      swift_retain();
      sub_1BE1B20E4();
      sub_1BDD86E30(v24, &qword_1ED6F3850);
    }
    else
    {
      v25 = v35;
      sub_1BDDA2E8C(v24, (uint64_t)v35, type metadata accessor for Proto_Timestamp);
      swift_retain();
    }
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_Subsequence);
    v26 = *v25;
    sub_1BDD9C3E0((uint64_t)v25, type metadata accessor for Proto_Timestamp);
    v27 = *(_QWORD *)(v21 + 24);
    v28 = *(_QWORD *)(v27 + 16);
    if (v28 && v26 < v28)
    {
      v29 = sub_1BE1B1F58();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v32, v27+ ((*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v26, v29);
      return swift_release();
    }
    else
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_OWORD *)v30 = xmmword_1BE1BB990;
      *(_BYTE *)(v30 + 16) = 0;
      swift_willThrow();
      return swift_release();
    }
  }
}

uint64_t sub_1BDF08694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  MEMORY[0x1E0C80A78](v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Proto_Timestamp(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Proto_Subsequence(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v0 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1BDD9C318(v11, (uint64_t)v10, type metadata accessor for Proto_Subsequence);
  v12 = *(_QWORD *)&v10[*(int *)(v8 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v3, &qword_1ED6F3850);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *v7 = 0;
    v7[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v3, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v3, (uint64_t)v7, type metadata accessor for Proto_Timestamp);
  }
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Subsequence);
  v13 = v7[1];
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Timestamp);
  if ((v13 & 0x8000000000000000) == 0 && !HIDWORD(v13))
    return v13;
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

uint64_t sub_1BDF08944@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDF08AD8(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy, a2);
}

uint64_t sub_1BDF0896C(unint64_t a1)
{
  return sub_1BDF08E2C(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy);
}

uint64_t sub_1BDF089BC(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _BYTE v14[24];

  v5 = type metadata accessor for Proto_Subsequence(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (uint64_t)a1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1BDD9C318(v8, (uint64_t)v7, type metadata accessor for Proto_Subsequence);
  v9 = (uint64_t *)(*(_QWORD *)&v7[*(int *)(v5 + 20)] + *a3);
  swift_beginAccess();
  v10 = *v9;
  v11 = a1;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Subsequence);
  v12 = *(_QWORD *)(v10 + 16);

  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1BDF08ABC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDF08AD8(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy, a2);
}

uint64_t sub_1BDF08AD8@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v6 = type metadata accessor for Proto_Timestamp(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (unint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Proto_Subsequence(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder);
  v14 = v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1BDD9C318(v14, (uint64_t)v12, type metadata accessor for Proto_Subsequence);
  v15 = (uint64_t *)(*(_QWORD *)&v12[*(int *)(v10 + 20)] + *a2);
  swift_beginAccess();
  v16 = *v15;
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Subsequence);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(v16 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_1BDD9C318(v16+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * a1, (uint64_t)v9, type metadata accessor for Proto_Timestamp);
  swift_bridgeObjectRelease();
  v18 = *v9;
  sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_Timestamp);
  v19 = *(_QWORD *)(v13 + 24);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
    v21 = v18 >= v20;
  else
    v21 = 1;
  if (v21)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v22 = xmmword_1BE1BB990;
    *(_BYTE *)(v22 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    v23 = sub_1BE1B1F58();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v25, v19+ ((*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v18, v23);
    return swift_release();
  }
}

id sub_1BDF08D20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v15;

  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1;
  a5(a3);

  v13 = (void *)sub_1BE1B1F04();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t sub_1BDF08E20(unint64_t a1)
{
  return sub_1BDF08E2C(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy);
}

uint64_t sub_1BDF08E2C(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  _BYTE v17[24];

  v5 = type metadata accessor for Proto_Timestamp(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Proto_Subsequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v2 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1BDD9C318(v12, (uint64_t)v11, type metadata accessor for Proto_Subsequence);
  v13 = (uint64_t *)(*(_QWORD *)&v11[*(int *)(v9 + 20)] + *a2);
  swift_beginAccess();
  v14 = *v13;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Subsequence);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v14 + 16) <= a1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1BDD9C318(v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * a1, (uint64_t)v8, type metadata accessor for Proto_Timestamp);
  swift_bridgeObjectRelease();
  v15 = *((_QWORD *)v8 + 1);
  sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Timestamp);
  if ((v15 & 0x8000000000000000) == 0 && !HIDWORD(v15))
    return v15;
LABEL_8:
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

id sub_1BDF09388()
{
  return sub_1BDF00B60(type metadata accessor for CRStringDecoder);
}

uint64_t sub_1BDF093B0()
{
  return type metadata accessor for CRStringDecoder(0);
}

uint64_t type metadata accessor for CRStringDecoder(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EF600);
}

uint64_t sub_1BDF093D0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  _BYTE v24[4];
  unsigned int v25;

  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v24[-v8];
  v10 = type metadata accessor for Proto_Timestamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)&v24[-v15];
  swift_retain();
  v17 = sub_1BDDAE244(a1);
  swift_release();
  v18 = v2 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  v19 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  v20 = *(_QWORD *)(v18 + v19)
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v9, &qword_1ED6F3850);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  if (v21(v9, 1, v10) == 1)
  {
    *v16 = 0;
    v16[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v16, type metadata accessor for Proto_Timestamp);
  }
  *v16 = v17;
  sub_1BE12AC84((uint64_t)v16);
  v22 = *(_QWORD *)(v18 + v19)
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v22, (uint64_t)v7, &qword_1ED6F3850);
  if (v21(v7, 1, v10) == 1)
  {
    *v14 = 0;
    v14[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v14, type metadata accessor for Proto_Timestamp);
  }
  v14[1] = v25;
  sub_1BE12AC84((uint64_t)v14);
  return swift_endAccess();
}

uint64_t sub_1BDF09660(uint64_t a1, unsigned int a2)
{
  return sub_1BDF09684(a1, a2, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy);
}

uint64_t sub_1BDF09678(uint64_t a1, unsigned int a2)
{
  return sub_1BDF09684(a1, a2, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy);
}

uint64_t sub_1BDF09684(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v26;

  v5 = v3;
  v8 = type metadata accessor for Proto_Timestamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v26 - v13);
  sub_1BE1B20E4();
  swift_retain();
  v15 = sub_1BDDAE244(a1);
  swift_release();
  *v14 = v15;
  v14[1] = a2;
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v12, type metadata accessor for Proto_Timestamp);
  v16 = v5 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  v17 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  v18 = (unint64_t *)(*(_QWORD *)(v16 + v17) + *a3);
  swift_beginAccess();
  v19 = *v18;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = sub_1BDE07184(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
  v21 = *(_QWORD *)(v19 + 16);
  v20 = *(_QWORD *)(v19 + 24);
  if (v21 >= v20 >> 1)
    v19 = sub_1BDE07184(v20 > 1, v21 + 1, 1, v19);
  *(_QWORD *)(v19 + 16) = v21 + 1;
  sub_1BDDA2E8C((uint64_t)v12, v19+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v21, type metadata accessor for Proto_Timestamp);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    v22 = swift_retain();
    v23 = sub_1BE148B38(v22);
    swift_release();
    *(_QWORD *)(v16 + v17) = v23;
    swift_release();
  }
  v24 = (unint64_t *)(*(_QWORD *)(v16 + v17) + *a3);
  swift_beginAccess();
  *v24 = v19;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Timestamp);
}

uint64_t sub_1BDF098F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v14;

  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1F1C();
  v12 = a1;
  a5(v11, a4);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1BDF09A98(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  v4 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = sub_1BE148B38(v5);
    swift_release();
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v3 + v4)
     + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__contentOptions;
  swift_beginAccess();
  *(_QWORD *)v7 = a1;
  *(_BYTE *)(v7 + 8) = a1 < 3;
  return swift_endAccess();
}

uint64_t sub_1BDF09BC0(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;

  v3 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  v4 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  v5 = (char **)(*(_QWORD *)(v3 + v4)
               + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child);
  swift_beginAccess();
  v6 = *v5;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1BDE07198(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
  v8 = *((_QWORD *)v6 + 2);
  v7 = *((_QWORD *)v6 + 3);
  if (v8 >= v7 >> 1)
    v6 = sub_1BDE07198((char *)(v7 > 1), v8 + 1, 1, v6);
  *((_QWORD *)v6 + 2) = v8 + 1;
  *(_DWORD *)&v6[4 * v8 + 32] = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_1BE148B38(v9);
    swift_release();
    *(_QWORD *)(v3 + v4) = v10;
    swift_release();
  }
  v11 = (char **)(*(_QWORD *)(v3 + v4)
                + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child);
  swift_beginAccess();
  *v11 = v6;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDF09D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v1 = type metadata accessor for Proto_Subsequence(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v3);
  v7 = &v19[-v6];
  v8 = v0 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  sub_1BDD9C318(v8, (uint64_t)v7, type metadata accessor for Proto_Subsequence);
  v9 = v0 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  v10 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  v11 = *(_QWORD *)(v9 + v10);
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 40);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = sub_1BDE072A4(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  if (v14 >= v13 >> 1)
    v12 = sub_1BDE072A4(v13 > 1, v14 + 1, 1, v12);
  *(_QWORD *)(v12 + 16) = v14 + 1;
  sub_1BDDA2E8C((uint64_t)v7, v12+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v14, type metadata accessor for Proto_Subsequence);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    v15 = (_QWORD *)swift_retain();
    *(_QWORD *)(v9 + v10) = sub_1BE13BE10(v15);
    swift_release();
  }
  v16 = *(_QWORD *)(v9 + v10);
  swift_beginAccess();
  *(_QWORD *)(v16 + 40) = v12;
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_1BE1B20E4();
  v17 = *(int *)(v1 + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v5[v17] = qword_1ED6EF678;
  swift_beginAccess();
  swift_retain();
  sub_1BDF0DBE0((uint64_t)v5, v8);
  return swift_endAccess();
}

uint64_t sub_1BDF0A03C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  _BYTE v12[32];

  sub_1BDDC1538(a1, (uint64_t)v12);
  sub_1BDDC6C38(0, &qword_1EF52C3E0);
  if (swift_dynamicCast())
  {
    v2 = sub_1BE1B27C8();
    v4 = v3;
    v5 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
    swift_beginAccess();
    v6 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Sequence._StorageClass(0);
      swift_allocObject();
      v7 = (_QWORD *)swift_retain();
      *(_QWORD *)(v5 + v6) = sub_1BE13BE10(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(v5 + v6);
    swift_beginAccess();
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)(v8 + 24) = v4;
    swift_endAccess();

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD00000000000001BLL;
    *(_QWORD *)(v10 + 8) = 0x80000001BE1CED80;
    *(_BYTE *)(v10 + 16) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_1BDF0A1D4(uint64_t a1)
{
  return sub_1BDF0A428(a1, (void (*)(_QWORD *))sub_1BE12AE0C);
}

uint64_t sub_1BDF0A234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v1 = v0;
  v2 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (_QWORD *)((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ObjCVersion();
  v5 = (_QWORD *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v6 = v5[1];
  v9[0] = *v5;
  v9[1] = v6;
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BDDAD780(v7, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  sub_1BE12AF90((uint64_t)v4);
  return swift_endAccess();
}

uint64_t sub_1BDF0A3BC(uint64_t a1)
{
  return sub_1BDF0A428(a1, (void (*)(_QWORD *))sub_1BE12B114);
}

uint64_t sub_1BDF0A41C(uint64_t a1)
{
  return sub_1BDF0A428(a1, (void (*)(_QWORD *))sub_1BE12B298);
}

uint64_t sub_1BDF0A428(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  v4 = v2;
  v6 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (_QWORD *)((char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (_QWORD *)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v10 = v9[1];
  v13[0] = *v9;
  v13[1] = v10;
  v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BDDAD780(v11, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  a2(v8);
  return swift_endAccess();
}

id sub_1BDF0A5C8()
{
  return sub_1BDF00B60(type metadata accessor for CRStringEncoder);
}

uint64_t sub_1BDF0A5F0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  sub_1BDD9C3E0(a1 + *a3, type metadata accessor for Proto_Sequence);
  sub_1BDD9C3E0(a1 + *a4, type metadata accessor for Proto_Subsequence);
  return swift_release();
}

uint64_t sub_1BDF0A64C()
{
  return type metadata accessor for CRStringEncoder(0);
}

uint64_t type metadata accessor for CRStringEncoder(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EE738);
}

uint64_t sub_1BDF0A668()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Proto_Sequence(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Proto_Subsequence(319);
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1BDF0A6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC9Coherence17CRSequenceDecoder_getStorage);
  sub_1BDD9C318(v0 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v3, type metadata accessor for Proto_Sequence);
  v5 = *(_QWORD *)&v3[*(int *)(v1 + 20)];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for Proto_Sequence);
  v4(v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BDF0A818()
{
  return swift_release();
}

id sub_1BDF0A82C()
{
  return sub_1BDF00B60(type metadata accessor for CRSequenceDecoder);
}

uint64_t sub_1BDF0A84C()
{
  return type metadata accessor for CRSequenceDecoder(0);
}

uint64_t type metadata accessor for CRSequenceDecoder(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EF658);
}

uint64_t sub_1BDF0A868()
{
  return sub_1BDF0BAB0();
}

uint64_t sub_1BDF0A878(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(uint64_t (**)(uint64_t))(v1 + OBJC_IVAR____TtC9Coherence17CRSequenceEncoder_getElements);
  swift_retain();
  v4 = v3(a1);
  swift_release();
  v5 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  v6 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    v7 = (_QWORD *)swift_retain();
    *(_QWORD *)(v5 + v6) = sub_1BE13BE10(v7);
    swift_release();
  }
  v8 = *(_QWORD *)(v5 + v6);
  swift_beginAccess();
  *(_QWORD *)(v8 + 32) = v4;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDF0A9F4()
{
  return swift_release();
}

id sub_1BDF0AA08()
{
  return sub_1BDF00B60(type metadata accessor for CRSequenceEncoder);
}

uint64_t sub_1BDF0AA28()
{
  return type metadata accessor for CRSequenceEncoder(0);
}

uint64_t type metadata accessor for CRSequenceEncoder(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EE748);
}

uint64_t sub_1BDF0AA44()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1BDF0AA88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void (*v69)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  char v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  char v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  unint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  objc_class *v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  id v124;
  _QWORD *v125;
  char isUniquelyReferenced_nonNull_native;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t result;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  _QWORD *v176;
  objc_super v177;
  _OWORD v178[2];
  __int128 v179;
  ValueMetadata *v180;
  _QWORD *v181;

  v2 = v1;
  v145 = a1;
  v161 = type metadata accessor for Proto_Timestamp(0);
  v153 = *(_QWORD *)(v161 - 8);
  v3 = MEMORY[0x1E0C80A78](v161);
  v142 = (uint64_t *)((char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v3);
  v144 = (unint64_t *)((char *)&v139 - v5);
  v6 = sub_1BE1B1F58();
  v149 = *(_QWORD *)(v6 - 8);
  v150 = v6;
  MEMORY[0x1E0C80A78](v6);
  v148 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v141);
  v140 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v10 = MEMORY[0x1E0C80A78](v9);
  v139 = (uint64_t)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v143 = (uint64_t)&v139 - v13;
  MEMORY[0x1E0C80A78](v12);
  v152 = (uint64_t)&v139 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v15);
  v173 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto_Value(0);
  v169 = *(_QWORD *)(v17 - 8);
  v170 = v17;
  MEMORY[0x1E0C80A78](v17);
  v174 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for Proto_Sequence.AttributeRun.Attribute(0);
  v154 = *(_QWORD *)(v168 - 8);
  MEMORY[0x1E0C80A78](v168);
  v172 = (uint64_t)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Proto_Sequence.AttributeRun(0);
  v21 = *(_QWORD *)(v20 - 8);
  v159 = v20;
  v160 = v21;
  MEMORY[0x1E0C80A78](v20);
  v164 = (uint64_t)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded;
  sub_1BDD9C318(v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v25, type metadata accessor for Proto_Sequence);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v25, type metadata accessor for Proto_Sequence);
  v27 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v28 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v162 = objc_msgSend(v27, sel_initWithString_, v28);

  sub_1BDD9C318(v26, (uint64_t)v25, type metadata accessor for Proto_Sequence);
  v29 = (uint64_t *)(*(_QWORD *)&v25[*(int *)(v23 + 20)]
                  + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  v30 = *v29;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v25, type metadata accessor for Proto_Sequence);
  v151 = *(_QWORD *)(v30 + 16);
  if (!v151)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    result = sub_1BDDC6C38(0, &qword_1EF52B6F0);
    v132 = v145;
    v145[3] = result;
    *v132 = v162;
    return result;
  }
  v158 = 0;
  v31 = 0;
  v167 = (uint64_t *)(v1 + OBJC_IVAR____TtC9Coherence25CRAttributedStringDecoder_scope);
  v156 = v30 + ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80));
  v171 = OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder;
  v146 = MEMORY[0x1E0DEE9B8] + 8;
  v32 = v164;
  v33 = v172;
  v34 = (uint64_t)v174;
  v35 = v160;
  v165 = v1;
  v155 = v30;
  while (1)
  {
    if (v31 >= *(_QWORD *)(v30 + 16))
      goto LABEL_68;
    v36 = *(_QWORD *)(v35 + 72);
    v157 = v31;
    sub_1BDD9C318(v156 + v36 * v31, v32, type metadata accessor for Proto_Sequence.AttributeRun);
    v176 = (_QWORD *)sub_1BE126A08(MEMORY[0x1E0DEE9D8]);
    v37 = *(int *)(v159 + 20);
    v38 = *(_QWORD *)(v32 + v37);
    swift_beginAccess();
    v39 = *(_QWORD *)(v38 + 24);
    v40 = *(_QWORD *)(v39 + 16);
    v163 = v37;
    if (v40)
      break;
LABEL_43:
    v99 = *(_QWORD *)(v32 + v37)
        + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    v100 = v37;
    v101 = v152;
    sub_1BDD86DEC(v99, v152, &qword_1ED6F3850);
    v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48);
    LODWORD(v99) = v102(v101, 1, v161);
    sub_1BDD86E30(v101, &qword_1ED6F3850);
    if ((_DWORD)v99 == 1)
    {
      v30 = v155;
      v32 = v164;
    }
    else
    {
      v103 = *(_QWORD *)(v2 + v171);
      v104 = *(_QWORD *)(v164 + v100)
           + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      v105 = v143;
      sub_1BDD86DEC(v104, v143, &qword_1ED6F3850);
      v106 = v102;
      if (v102(v105, 1, v161) == 1)
      {
        v107 = v144;
        *v144 = 0;
        v107[1] = 0;
        v108 = v161;
        swift_retain();
        sub_1BE1B20E4();
        sub_1BDD86E30(v105, &qword_1ED6F3850);
      }
      else
      {
        v107 = v144;
        sub_1BDDA2E8C(v105, (uint64_t)v144, type metadata accessor for Proto_Timestamp);
        swift_retain();
        v108 = v161;
      }
      v109 = (uint64_t)v107;
      v110 = *v107;
      sub_1BDD9C3E0(v109, type metadata accessor for Proto_Timestamp);
      v111 = *(_QWORD *)(v103 + 24);
      v112 = *(_QWORD *)(v111 + 16);
      v32 = v164;
      if (!v112 || v110 >= v112)
      {
        sub_1BDDFCAFC();
        v137 = swift_allocError();
        *(_OWORD *)v138 = xmmword_1BE1BB990;
        *(_BYTE *)(v138 + 16) = 0;
        v175 = v137;
        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_release();
        v135 = v32;
LABEL_59:
        sub_1BDD9C3E0(v135, type metadata accessor for Proto_Sequence.AttributeRun);
        return swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v149 + 16))(v148, v111+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(_QWORD *)(v149 + 72) * v110, v150);
      swift_release();
      v113 = *(_QWORD *)(v32 + v163)
           + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      v114 = v113;
      v115 = v139;
      sub_1BDD86DEC(v114, v139, &qword_1ED6F3850);
      if (v106(v115, 1, v108) == 1)
      {
        v116 = v142;
        *v142 = 0;
        v116[1] = 0;
        sub_1BE1B20E4();
        sub_1BDD86E30(v115, &qword_1ED6F3850);
      }
      else
      {
        v116 = v142;
        sub_1BDDA2E8C(v115, (uint64_t)v142, type metadata accessor for Proto_Timestamp);
      }
      v117 = v116[1];
      sub_1BDD9C3E0((uint64_t)v116, type metadata accessor for Proto_Timestamp);
      v118 = (uint64_t)v140;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v140, v148, v150);
      *(_QWORD *)(v118 + *(int *)(v141 + 20)) = v117;
      v119 = (objc_class *)type metadata accessor for ObjCFinalizedTimestamp(0);
      v120 = objc_allocWithZone(v119);
      sub_1BDD9C318(v118, (uint64_t)v120 + OBJC_IVAR___ObjCFinalizedTimestamp_timestamp, type metadata accessor for FinalizedTimestamp);
      v177.receiver = v120;
      v177.super_class = v119;
      v121 = objc_msgSendSuper2(&v177, sel_init);
      sub_1BDD9C3E0(v118, type metadata accessor for FinalizedTimestamp);
      if (qword_1EF52B6C0 != -1)
        swift_once();
      v122 = (void *)qword_1EF52B6B8;
      v180 = (ValueMetadata *)v119;
      *(_QWORD *)&v179 = v121;
      sub_1BDE77688(&v179, v178);
      v123 = v122;
      v124 = v121;
      v125 = v176;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v181 = v125;
      sub_1BE1541C0(v178, v123, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      v30 = v155;
    }
    type metadata accessor for Key(0);
    sub_1BDF0DB98();
    v127 = (void *)sub_1BE1B25A0();
    swift_bridgeObjectRelease();
    v128 = *(_QWORD *)(v32 + v163);
    swift_beginAccess();
    v129 = v158;
    objc_msgSend(v162, sel_setAttributes_range_, v127, v158, *(unsigned int *)(v128 + 16));

    v130 = *(unsigned int *)(v128 + 16);
    sub_1BDD9C3E0(v32, type metadata accessor for Proto_Sequence.AttributeRun);
    v95 = __OFADD__(v129, v130);
    v158 = v129 + v130;
    v34 = (uint64_t)v174;
    if (v95)
      goto LABEL_69;
    v31 = v157 + 1;
    v35 = v160;
    if (v157 + 1 == v151)
      goto LABEL_58;
  }
  v41 = v154;
  v42 = v39 + ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
  v147 = v39;
  swift_bridgeObjectRetain();
  v166 = *(_QWORD *)(v41 + 72);
  v43 = (uint64_t)v173;
  while (1)
  {
    sub_1BDD9C318(v42, v33, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    v45 = *(int *)(v168 + 20);
    v46 = *(_QWORD *)(v33 + v45)
        + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    sub_1BDD86DEC(v46, v43, &qword_1ED6F3770);
    v47 = v170;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v43, 1, v170) == 1)
    {
      sub_1BE1B20E4();
      v48 = *(int *)(v47 + 20);
      if (qword_1ED6F2718 != -1)
        swift_once();
      *(_QWORD *)(v34 + v48) = qword_1ED6F2708;
      swift_retain();
      sub_1BDD86E30(v43, &qword_1ED6F3770);
    }
    else
    {
      sub_1BDDA2E8C(v43, v34, type metadata accessor for Proto_Value);
    }
    v49 = *(_QWORD *)(v2 + v171);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v50 = sub_1BDDB4FC0(v34, v49);
    swift_release();
    v51 = *(_QWORD *)(v33 + v45);
    swift_beginAccess();
    v52 = *(unsigned int *)(v51 + 16);
    v53 = *(_QWORD *)(v50 + 32);
    v54 = *(_QWORD *)(v53 + 16);
    if (v54)
      v55 = v54 > v52;
    else
      v55 = 0;
    if (!v55)
    {
      sub_1BDDFCAFC();
      v133 = swift_allocError();
      *(_OWORD *)v134 = xmmword_1BE1B63E0;
      *(_BYTE *)(v134 + 16) = 0;
      v175 = v133;
      swift_willThrow();
      swift_release();

      sub_1BDD9C3E0(v33, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v135 = v164;
      goto LABEL_59;
    }
    v56 = v53 + 16 * v52;
    v58 = *(_QWORD *)(v56 + 32);
    v57 = *(_QWORD *)(v56 + 40);
    v59 = *v167;
    v60 = v167[1];
    v61 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8);
    swift_bridgeObjectRetain();
    v62 = v61(v59, v60);
    if (*(_QWORD *)(v62 + 16))
    {
      swift_bridgeObjectRetain();
      v63 = sub_1BDDB271C(v58, v57);
      if ((v64 & 1) != 0)
      {
        v65 = (uint64_t *)(*(_QWORD *)(v62 + 56) + 16 * v63);
        v66 = *v65;
        v67 = v65[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68 = (void *)sub_1BE1B27A4();
        swift_bridgeObjectRelease();
        v69 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v67 + 8);
        v180 = &type metadata for AnyCRValue;
        v70 = v175;
        v69(&v179, v50, v66, v67);
        v175 = v70;
        if (!v70)
        {
          sub_1BDE77688(&v179, v178);
          v71 = v176;
          v72 = swift_isUniquelyReferenced_nonNull_native();
          v181 = v71;
          v74 = sub_1BDDC4B9C((uint64_t)v68);
          v75 = v71[2];
          v76 = (v73 & 1) == 0;
          v77 = v75 + v76;
          if (__OFADD__(v75, v76))
            goto LABEL_66;
          v78 = v73;
          if (v71[3] >= v77)
          {
            if ((v72 & 1) == 0)
              sub_1BDE6461C();
          }
          else
          {
            sub_1BDE5FB40(v77, v72);
            v79 = sub_1BDDC4B9C((uint64_t)v68);
            if ((v78 & 1) != (v80 & 1))
              goto LABEL_70;
            v74 = v79;
          }
          v43 = (uint64_t)v173;
          v92 = v181;
          v176 = v181;
          if ((v78 & 1) == 0)
          {
            v181[(v74 >> 6) + 8] |= 1 << v74;
            *(_QWORD *)(v176[6] + 8 * v74) = v68;
            sub_1BDE77688(v178, (_OWORD *)(v176[7] + 32 * v74));
            v93 = v176;
            v97 = v176[2];
            v95 = __OFADD__(v97, 1);
            v96 = v97 + 1;
            if (v95)
              goto LABEL_67;
            goto LABEL_41;
          }
          goto LABEL_6;
        }
        swift_release();

        v136 = v172;
LABEL_62:
        sub_1BDD9C3E0(v136, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDD9C3E0(v164, type metadata accessor for Proto_Sequence.AttributeRun);
        swift_bridgeObjectRelease();
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)&v179);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v68 = (void *)sub_1BE1B27A4();
    swift_bridgeObjectRelease();
    v180 = &type metadata for AnyCRValue;
    v81 = swift_retain();
    v82 = v175;
    AnyCRValue.init(from:)(v81, (uint64_t *)&v179);
    v175 = v82;
    if (v82)
    {
      swift_release();

      v136 = v33;
      goto LABEL_62;
    }
    sub_1BDE77688(&v179, v178);
    v83 = v176;
    v84 = swift_isUniquelyReferenced_nonNull_native();
    v181 = v83;
    v74 = sub_1BDDC4B9C((uint64_t)v68);
    v86 = v83[2];
    v87 = (v85 & 1) == 0;
    v88 = v86 + v87;
    if (__OFADD__(v86, v87))
      break;
    v89 = v85;
    if (v83[3] >= v88)
    {
      if ((v84 & 1) == 0)
        sub_1BDE6461C();
    }
    else
    {
      sub_1BDE5FB40(v88, v84);
      v90 = sub_1BDDC4B9C((uint64_t)v68);
      if ((v89 & 1) != (v91 & 1))
        goto LABEL_70;
      v74 = v90;
    }
    v43 = (uint64_t)v173;
    v92 = v181;
    v176 = v181;
    if ((v89 & 1) == 0)
    {
      v181[(v74 >> 6) + 8] |= 1 << v74;
      *(_QWORD *)(v176[6] + 8 * v74) = v68;
      sub_1BDE77688(v178, (_OWORD *)(v176[7] + 32 * v74));
      v93 = v176;
      v94 = v176[2];
      v95 = __OFADD__(v94, 1);
      v96 = v94 + 1;
      if (v95)
        goto LABEL_65;
LABEL_41:
      v93[2] = v96;
      v98 = v68;
      goto LABEL_7;
    }
LABEL_6:
    v44 = (_OWORD *)(v92[7] + 32 * v74);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    sub_1BDE77688(v178, v44);
LABEL_7:
    swift_release();

    swift_bridgeObjectRelease();
    v33 = v172;
    sub_1BDD9C3E0(v172, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    v2 = v165;
    v42 += v166;
    --v40;
    v34 = (uint64_t)v174;
    if (!v40)
    {
      swift_bridgeObjectRelease();
      v37 = v163;
      v32 = v164;
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  type metadata accessor for Key(0);
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

id sub_1BDF0B9CC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr))
{
  id v5;
  void *v6;
  _QWORD v8[4];

  v5 = a1;
  a4(v8);

  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  v6 = (void *)sub_1BE1B34A0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

id sub_1BDF0BA7C()
{
  return sub_1BDF00B60(type metadata accessor for CRAttributedStringDecoder);
}

uint64_t sub_1BDF0BA88()
{
  return type metadata accessor for CRAttributedStringDecoder(0);
}

uint64_t type metadata accessor for CRAttributedStringDecoder(uint64_t a1)
{
  return sub_1BDD88618(a1, qword_1EF52B588);
}

uint64_t sub_1BDF0BAA4()
{
  return sub_1BDF0BAB0();
}

uint64_t sub_1BDF0BAB0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1BDF0BAE8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[6];
  id v47;
  id v48;

  v3 = v1;
  v5 = type metadata accessor for Proto_Sequence.AttributeRun(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDC1538(a1, (uint64_t)aBlock);
  sub_1BDDC6C38(0, &qword_1EF52DF30);
  if (!swift_dynamicCast())
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v33 = 0xD000000000000019;
    *(_QWORD *)(v33 + 8) = 0x80000001BE1CED30;
    *(_BYTE *)(v33 + 16) = 0;
    return swift_willThrow();
  }
  v41 = v5;
  v42 = v8;
  v43 = v6;
  v44 = v2;
  v12 = v47;
  v13 = objc_msgSend(v47, sel_string);
  v14 = sub_1BE1B27C8();
  v16 = v15;

  v17 = (uint64_t)v3 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  v18 = *(int *)(v9 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    v19 = (_QWORD *)swift_retain();
    *(_QWORD *)(v17 + v18) = sub_1BE13BE10(v19);
    swift_release();
  }
  v20 = *(_QWORD *)(v17 + v18);
  swift_beginAccess();
  *(_QWORD *)(v20 + 16) = v14;
  *(_QWORD *)(v20 + 24) = v16;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v48 = 0;
  v21 = (uint64_t *)objc_msgSend(v12, sel_length);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v3;
  *(_QWORD *)(v22 + 24) = &v48;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_1BDF0DB44;
  *(_QWORD *)(v23 + 24) = v22;
  v45 = v22;
  aBlock[4] = sub_1BDF0DB5C;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BE149BB0;
  aBlock[3] = &block_descriptor_5;
  v24 = _Block_copy(aBlock);
  v25 = (uint64_t)v12;
  v26 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateAttributesInRange_options_usingBlock_, 0, v21, 0, v24);
  _Block_release(v24);
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v24 & 1) != 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_10;
  }
  sub_1BDD9C318(v17, (uint64_t)v11, type metadata accessor for Proto_Sequence);
  v21 = &qword_1ED6EEFE0[4];
  v27 = (uint64_t *)(*(_QWORD *)&v11[*(int *)(v9 + 20)]
                  + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  v28 = *v27;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Sequence);
  v29 = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRelease();
  if (v29)
  {
    v30 = v48;
    if (v48)
    {
LABEL_7:
      v31 = v30;
      swift_willThrow();

      return swift_release();
    }
    goto LABEL_17;
  }
  v25 = (uint64_t)v42;
  sub_1BE1B20E4();
  v23 = *(int *)(v41 + 20);
  if (qword_1EF52B3F8 != -1)
    goto LABEL_19;
LABEL_10:
  *(_QWORD *)(v25 + v23) = qword_1EF52B3E8;
  swift_beginAccess();
  v34 = *(int *)(v9 + 20);
  v35 = (unint64_t *)(*(_QWORD *)(v17 + v34) + v21[180]);
  swift_beginAccess();
  v36 = *v35;
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = sub_1BDE072B8(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
  v38 = *(_QWORD *)(v36 + 16);
  v37 = *(_QWORD *)(v36 + 24);
  if (v38 >= v37 >> 1)
    v36 = sub_1BDE072B8(v37 > 1, v38 + 1, 1, v36);
  *(_QWORD *)(v36 + 16) = v38 + 1;
  sub_1BDDA2E8C(v25, v36+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v38, type metadata accessor for Proto_Sequence.AttributeRun);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    v39 = (_QWORD *)swift_retain();
    *(_QWORD *)(v17 + v34) = sub_1BE13BE10(v39);
    swift_release();
  }
  v40 = (unint64_t *)(*(_QWORD *)(v17 + v34) + v21[180]);
  swift_beginAccess();
  *v40 = v36;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v30 = v48;
  if (v48)
    goto LABEL_7;
LABEL_17:

  return swift_release();
}

void sub_1BDF0C094(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4, char *a5, void **a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  objc_class *v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  void (*v72)(uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t *v162;
  void *v163;
  void *v164;
  id v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void **v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  int64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t *v196;
  char *v197;
  uint64_t *v198;
  _QWORD *v199;
  unsigned int (*v200)(uint64_t, uint64_t, uint64_t);
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  void (*v208)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  objc_super v213;
  void (*v214)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v215[32];
  _OWORD v216[2];
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;

  v169 = a6;
  v170 = a4;
  v197 = a5;
  v194 = a1;
  v7 = type metadata accessor for Proto_Value(0);
  v180 = *(_QWORD *)(v7 - 8);
  v181 = v7;
  MEMORY[0x1E0C80A78](v7);
  v182 = (uint64_t)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v10 = MEMORY[0x1E0C80A78](v9);
  v175 = (uint64_t)&v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v179 = (uint64_t)&v166 - v12;
  v176 = type metadata accessor for Proto_Sequence.AttributeRun.Attribute(0);
  v174 = *(_QWORD *)(v176 - 8);
  v13 = MEMORY[0x1E0C80A78](v176);
  v178 = (uint64_t)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v166 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v18 = MEMORY[0x1E0C80A78](v17);
  v192 = (uint64_t)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v204 = (uint64_t)&v166 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v211 = (uint64_t)&v166 - v23;
  MEMORY[0x1E0C80A78](v22);
  v191 = (uint64_t)&v166 - v24;
  v25 = type metadata accessor for Proto_Timestamp(0);
  v209 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v25);
  v199 = (uint64_t *)((char *)&v166 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v26);
  v198 = (uint64_t *)((char *)&v166 - v28);
  v29 = sub_1BE1B1F58();
  v189 = *(_QWORD *)(v29 - 8);
  v190 = v29;
  MEMORY[0x1E0C80A78](v29);
  v188 = (char *)&v166 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v187);
  v186 = (uint64_t)&v166 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Proto_Sequence.AttributeRun(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x1E0C80A78](v32);
  v172 = (uint64_t)&v166 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v37 = (uint64_t *)((char *)&v166 - v36);
  sub_1BE1B20E4();
  v38 = *(int *)(v32 + 20);
  if (qword_1EF52B3F8 != -1)
LABEL_76:
    swift_once();
  *(uint64_t *)((char *)v37 + v38) = qword_1EF52B3E8;
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    while (1)
    {
LABEL_77:
      sub_1BE1B31F4();
      __break(1u);
    }
  }
  v173 = v33;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v212 = v25;
  v25 = (uint64_t)v37;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
    swift_allocObject();
    v40 = swift_retain();
    *(uint64_t *)((char *)v37 + v38) = sub_1BE13DFEC(v40);
    swift_release();
  }
  v41 = *(uint64_t *)((char *)v37 + v38);
  swift_beginAccess();
  *(_DWORD *)(v41 + 16) = a3;
  v42 = *(_QWORD *)(v194 + 64);
  v177 = v194 + 64;
  v43 = 1 << *(_BYTE *)(v194 + 32);
  v44 = -1;
  if (v43 < 64)
    v44 = ~(-1 << v43);
  v33 = v44 & v42;
  v45 = (unint64_t)(v43 + 63) >> 6;
  v193 = (uint64_t)v216 + 8;
  v196 = &v219;
  v167 = v45 - 1;
  v46 = swift_bridgeObjectRetain();
  v47 = 0;
  v183 = 0;
  v184 = v45;
  v168 = v45 - 5;
  v171 = v46 + 104;
  v185 = MEMORY[0x1E0DEE9B8] + 8;
  v206 = v37;
  v195 = v16;
  v210 = v38;
  while (1)
  {
    if (v33)
    {
      v51 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v52 = v51 | (v47 << 6);
LABEL_12:
      v53 = *(_QWORD *)(v194 + 56);
      *(_QWORD *)&v216[0] = *(_QWORD *)(*(_QWORD *)(v194 + 48) + 8 * v52);
      v54 = *(void **)&v216[0];
      sub_1BDDC1538(v53 + 32 * v52, v193);
      v55 = v54;
      goto LABEL_22;
    }
    v56 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      goto LABEL_76;
    }
    if (v56 < v184)
    {
      v57 = *(_QWORD *)(v177 + 8 * v56);
      if (v57)
        goto LABEL_16;
      if ((uint64_t)(v47 + 2) >= v184)
      {
        ++v47;
      }
      else
      {
        v57 = *(_QWORD *)(v177 + 8 * (v47 + 2));
        if (v57)
        {
          v56 = v47 + 2;
LABEL_16:
          v33 = (v57 - 1) & v57;
          v52 = __clz(__rbit64(v57)) + (v56 << 6);
          v47 = v56;
          goto LABEL_12;
        }
        if ((uint64_t)(v47 + 3) >= v184)
        {
          v47 += 2;
        }
        else
        {
          v57 = *(_QWORD *)(v177 + 8 * (v47 + 3));
          if (v57)
          {
            v56 = v47 + 3;
            goto LABEL_16;
          }
          v56 = v47 + 4;
          if ((uint64_t)(v47 + 4) >= v184)
          {
            v47 += 3;
          }
          else
          {
            v57 = *(_QWORD *)(v177 + 8 * v56);
            if (v57)
              goto LABEL_16;
            while (v168 != v47)
            {
              v57 = *(_QWORD *)(v171 + 8 * v47++);
              if (v57)
              {
                v56 = v47 + 4;
                goto LABEL_16;
              }
            }
            v47 = v167;
          }
        }
      }
    }
    v33 = 0;
    v217 = 0;
    memset(v216, 0, sizeof(v216));
LABEL_22:
    sub_1BDDA2EF0((uint64_t)v216, (uint64_t)&v218, &qword_1EF52B6B0);
    v37 = v218;
    if (!v218)
      break;
    sub_1BDE77688(v196, v216);
    if (qword_1EF52B6C0 != -1)
      swift_once();
    v58 = sub_1BE1B27C8();
    v60 = v59;
    v61 = sub_1BE1B27C8();
    a3 = v62;
    if (v58 == v61 && v60 == v62)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
    v63 = sub_1BE1B34AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v63 & 1) != 0)
    {
LABEL_29:
      v207 = v37;
      v205 = v33;
      sub_1BDDC1538((uint64_t)v216, (uint64_t)v215);
      type metadata accessor for ObjCFinalizedTimestamp(0);
      swift_dynamicCast();
      v201 = (char *)v214 + OBJC_IVAR___ObjCFinalizedTimestamp_timestamp;
      v202 = (uint64_t)v214;
      v64 = v186;
      sub_1BDD9C318((uint64_t)v214 + OBJC_IVAR___ObjCFinalizedTimestamp_timestamp, v186, type metadata accessor for FinalizedTimestamp);
      v66 = (uint64_t)v188;
      v65 = v189;
      v67 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v189 + 32))(v188, v64, v190);
      v68 = (objc_class *)type metadata accessor for ObjCReplica(0);
      v69 = (char *)objc_allocWithZone(v68);
      v70 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      v70(&v69[OBJC_IVAR___ObjCReplica_uuid], v66, v67);
      *(_QWORD *)&v69[OBJC_IVAR___ObjCReplica_index] = 0;
      v213.receiver = v69;
      v213.super_class = v68;
      swift_retain();
      v71 = (char *)objc_msgSendSuper2(&v213, sel_init);
      v72 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v72(v66, v67);
      v73 = &v71[OBJC_IVAR___ObjCReplica_uuid];
      swift_beginAccess();
      v70((char *)v66, (uint64_t)v73, v67);

      v74 = sub_1BDDAE244(v66);
      swift_release();
      v72(v66, v67);
      v25 = (uint64_t)v206;
      v75 = *(uint64_t *)((char *)v206 + v210)
          + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      v76 = v75;
      v77 = v191;
      sub_1BDD86DEC(v76, v191, &qword_1ED6F3850);
      v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      v79 = v212;
      v80 = v78(v77, 1, v212);
      v203 = v47;
      v200 = v78;
      v81 = v198;
      if (v80 == 1)
      {
        *v198 = 0;
        v81[1] = 0;
        sub_1BE1B20E4();
        sub_1BDD86E30(v77, &qword_1ED6F3850);
      }
      else
      {
        sub_1BDDA2E8C(v77, (uint64_t)v198, type metadata accessor for Proto_Timestamp);
      }
      *v81 = v74;
      v38 = v210;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v82 = *(_QWORD *)(v25 + v38);
        type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
        v83 = swift_allocObject();
        *(_DWORD *)(v83 + 16) = 0;
        *(_QWORD *)(v83 + 24) = MEMORY[0x1E0DEE9D8];
        v84 = v83
            + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56))(v83+ OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, 1, 1, v212);
        swift_beginAccess();
        v85 = *(_DWORD *)(v82 + 16);
        swift_beginAccess();
        *(_DWORD *)(v83 + 16) = v85;
        swift_beginAccess();
        v86 = *(_QWORD *)(v82 + 24);
        swift_beginAccess();
        *(_QWORD *)(v83 + 24) = v86;
        swift_retain();
        swift_bridgeObjectRetain();
        v25 = (uint64_t)v206;
        swift_bridgeObjectRelease();
        v87 = v82
            + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        swift_beginAccess();
        v88 = v87;
        v89 = v211;
        sub_1BDD86DEC(v88, v211, &qword_1ED6F3850);
        v79 = v212;
        swift_release();
        swift_beginAccess();
        sub_1BDDA1AF4(v89, v84, &qword_1ED6F3850);
        swift_endAccess();
        *(_QWORD *)(v25 + v38) = v83;
        v81 = v198;
        swift_release();
      }
      v90 = *(_QWORD *)(v25 + v38);
      v91 = v211;
      sub_1BDDA2E8C((uint64_t)v81, v211, type metadata accessor for Proto_Timestamp);
      v208 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56);
      v208(v91, 0, 1, v79);
      v92 = v204;
      v37 = &qword_1ED6F3850;
      sub_1BDDA2EF0(v91, v204, &qword_1ED6F3850);
      v93 = v90
          + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v92, v93, &qword_1ED6F3850);
      swift_endAccess();
      swift_release();
      v94 = *(_QWORD *)&v201[*(int *)(v187 + 20)];
      v95 = *(_QWORD *)(v25 + v38)
          + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      v96 = v95;
      v97 = v192;
      sub_1BDD86DEC(v96, v192, &qword_1ED6F3850);
      if (v200(v97, 1, v79) == 1)
      {
        v98 = v199;
        *v199 = 0;
        v98[1] = 0;
        sub_1BE1B20E4();
        sub_1BDD86E30(v97, &qword_1ED6F3850);
      }
      else
      {
        v98 = v199;
        sub_1BDDA2E8C(v97, (uint64_t)v199, type metadata accessor for Proto_Timestamp);
      }
      v99 = (void *)v202;
      v98[1] = v94;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v100 = *(_QWORD *)(v25 + v38);
        type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
        v101 = swift_allocObject();
        *(_DWORD *)(v101 + 16) = 0;
        *(_QWORD *)(v101 + 24) = MEMORY[0x1E0DEE9D8];
        v102 = v101
             + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        v208(v101+ OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, 1, 1, v212);
        swift_beginAccess();
        v103 = *(_DWORD *)(v100 + 16);
        swift_beginAccess();
        *(_DWORD *)(v101 + 16) = v103;
        swift_beginAccess();
        v104 = *(_QWORD *)(v100 + 24);
        swift_beginAccess();
        *(_QWORD *)(v101 + 24) = v104;
        v25 = (uint64_t)v206;
        swift_retain();
        swift_bridgeObjectRetain();
        v38 = v210;
        swift_bridgeObjectRelease();
        v105 = v100
             + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        swift_beginAccess();
        v106 = v105;
        v107 = v211;
        v37 = &qword_1ED6F3850;
        sub_1BDD86DEC(v106, v211, &qword_1ED6F3850);
        v79 = v212;
        swift_release();
        swift_beginAccess();
        v108 = v107;
        v98 = v199;
        sub_1BDDA1AF4(v108, v102, &qword_1ED6F3850);
        swift_endAccess();
        *(_QWORD *)(v25 + v38) = v101;
        swift_release();
      }
      v48 = *(_QWORD *)(v25 + v38);
      v49 = v211;
      sub_1BDDA2E8C((uint64_t)v98, v211, type metadata accessor for Proto_Timestamp);
      v208(v49, 0, 1, v79);
      v50 = v204;
      sub_1BDDA2EF0(v49, v204, &qword_1ED6F3850);
      a3 = v48
         + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v50, a3, &qword_1ED6F3850);
      swift_endAccess();

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
      v16 = v195;
      v47 = v203;
      v33 = v205;
    }
    else
    {
      sub_1BDDC1538((uint64_t)v216, (uint64_t)v215);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v205 = v33;
        v208 = v214;
        v202 = OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder;
        v109 = sub_1BE1B27C8();
        v111 = v110;
        swift_retain();
        v112 = sub_1BDDA84A8(v109, v111);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1BE1B20E4();
        v113 = *(int *)(v176 + 20);
        if (qword_1EF52B3A0 != -1)
          swift_once();
        *(_QWORD *)&v16[v113] = qword_1EF52B398;
        if (HIDWORD(v112))
          goto LABEL_77;
        swift_retain();
        v114 = swift_isUniquelyReferenced_nonNull_native();
        v207 = v37;
        if ((v114 & 1) == 0)
        {
          v115 = *(_QWORD *)&v16[v113];
          type metadata accessor for Proto_Sequence.AttributeRun.Attribute._StorageClass(0);
          v116 = swift_allocObject();
          *(_DWORD *)(v116 + 16) = 0;
          v117 = v116
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56))(v116+ OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value, 1, 1, v181);
          swift_beginAccess();
          v118 = *(_DWORD *)(v115 + 16);
          swift_beginAccess();
          *(_DWORD *)(v116 + 16) = v118;
          v16 = v195;
          v119 = v115
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          v38 = v210;
          swift_beginAccess();
          v120 = v119;
          v121 = v179;
          sub_1BDD86DEC(v120, v179, &qword_1ED6F3770);
          swift_beginAccess();
          v122 = v117;
          v37 = v207;
          v25 = (uint64_t)v206;
          sub_1BDDA1AF4(v121, v122, &qword_1ED6F3770);
          swift_endAccess();
          *(_QWORD *)&v16[v113] = v116;
          swift_release();
        }
        v123 = *(_QWORD *)&v16[v113];
        swift_beginAccess();
        *(_DWORD *)(v123 + 16) = v112;
        v124 = v197;
        v125 = (uint64_t)v208;
        swift_retain();
        v126 = v124;
        v127 = swift_retain();
        v128 = v126;
        v129 = v183;
        sub_1BDE1CB1C(v127, v125, v128, v182);
        swift_release();
        v183 = v129;
        if (v129)
        {

          sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
          swift_release();
          sub_1BDD9C3E0(v25, type metadata accessor for Proto_Sequence.AttributeRun);
          swift_release();
          v163 = *v169;
          v164 = v183;
          *v169 = v183;
          v165 = v164;

          *v170 = 1;
          return;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v130 = *(_QWORD *)&v16[v113];
          type metadata accessor for Proto_Sequence.AttributeRun.Attribute._StorageClass(0);
          v131 = swift_allocObject();
          *(_DWORD *)(v131 + 16) = 0;
          v132 = v131
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56))(v131+ OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value, 1, 1, v181);
          swift_beginAccess();
          v133 = *(_DWORD *)(v130 + 16);
          swift_beginAccess();
          *(_DWORD *)(v131 + 16) = v133;
          v134 = v130
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          v25 = (uint64_t)v206;
          swift_beginAccess();
          v135 = v134;
          v136 = v179;
          sub_1BDD86DEC(v135, v179, &qword_1ED6F3770);
          swift_beginAccess();
          sub_1BDDA1AF4(v136, v132, &qword_1ED6F3770);
          swift_endAccess();
          *(_QWORD *)&v16[v113] = v131;
          swift_release();
        }
        v137 = *(_QWORD *)&v16[v113];
        v138 = v179;
        sub_1BDDA2E8C(v182, v179, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v180 + 56))(v138, 0, 1, v181);
        v139 = v175;
        sub_1BDDA2EF0(v138, v175, &qword_1ED6F3770);
        v140 = v137
             + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        swift_retain();
        sub_1BDDA1AF4(v139, v140, &qword_1ED6F3770);
        swift_endAccess();
        swift_release();
        sub_1BDD9C318((uint64_t)v16, v178, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        v141 = *(_QWORD *)(v25 + v38);
        swift_beginAccess();
        v142 = *(_QWORD *)(v141 + 24);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v142 = sub_1BDE072CC(0, *(_QWORD *)(v142 + 16) + 1, 1, v142);
        v144 = *(_QWORD *)(v142 + 16);
        v143 = *(_QWORD *)(v142 + 24);
        v37 = v207;
        if (v144 >= v143 >> 1)
          v142 = sub_1BDE072CC(v143 > 1, v144 + 1, 1, v142);
        *(_QWORD *)(v142 + 16) = v144 + 1;
        sub_1BDDA2E8C(v178, v142+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80))+ *(_QWORD *)(v174 + 72) * v144, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v145 = *(_QWORD *)(v25 + v38);
          type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
          v146 = swift_allocObject();
          *(_DWORD *)(v146 + 16) = 0;
          *(_QWORD *)(v146 + 24) = MEMORY[0x1E0DEE9D8];
          v147 = v146
               + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56))(v146+ OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, 1, 1, v212);
          swift_beginAccess();
          v148 = *(_DWORD *)(v145 + 16);
          swift_beginAccess();
          *(_DWORD *)(v146 + 16) = v148;
          swift_beginAccess();
          v149 = *(_QWORD *)(v145 + 24);
          swift_beginAccess();
          *(_QWORD *)(v146 + 24) = v149;
          v25 = (uint64_t)v206;
          swift_retain();
          swift_bridgeObjectRetain();
          v16 = v195;
          swift_bridgeObjectRelease();
          v150 = v145
               + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
          swift_beginAccess();
          v151 = v150;
          v152 = v211;
          sub_1BDD86DEC(v151, v211, &qword_1ED6F3850);
          swift_release();
          swift_beginAccess();
          v37 = v207;
          sub_1BDDA1AF4(v152, v147, &qword_1ED6F3850);
          swift_endAccess();
          *(_QWORD *)(v25 + v210) = v146;
          v38 = v210;
          swift_release();
        }
        v153 = *(_QWORD *)(v25 + v38);
        swift_beginAccess();
        a3 = *(_QWORD *)(v153 + 24);
        *(_QWORD *)(v153 + 24) = v142;
        swift_release();

        swift_bridgeObjectRelease();
        sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
        v33 = v205;
      }
      else
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
      }
    }
  }
  swift_release();
  v154 = v172;
  sub_1BDD9C318(v25, v172, type metadata accessor for Proto_Sequence.AttributeRun);
  v155 = &v197[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
  swift_beginAccess();
  v156 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  v157 = (unint64_t *)(*(_QWORD *)&v155[v156]
                            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  v158 = *v157;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v158 = sub_1BDE072B8(0, *(_QWORD *)(v158 + 16) + 1, 1, v158);
  v160 = *(_QWORD *)(v158 + 16);
  v159 = *(_QWORD *)(v158 + 24);
  if (v160 >= v159 >> 1)
    v158 = sub_1BDE072B8(v159 > 1, v160 + 1, 1, v158);
  *(_QWORD *)(v158 + 16) = v160 + 1;
  sub_1BDDA2E8C(v154, v158+ ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(_QWORD *)(v173 + 72) * v160, type metadata accessor for Proto_Sequence.AttributeRun);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    v161 = (_QWORD *)swift_retain();
    *(_QWORD *)&v155[v156] = sub_1BE13BE10(v161);
    swift_release();
  }
  v162 = (unint64_t *)(*(_QWORD *)&v155[v156]
                            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  *v162 = v158;
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_1BDD9C3E0((uint64_t)v206, type metadata accessor for Proto_Sequence.AttributeRun);
}

uint64_t sub_1BDF0D714(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *))
{
  id v7;
  _BYTE v9[32];

  swift_unknownObjectRetain();
  v7 = a1;
  sub_1BE1B2F3C();
  swift_unknownObjectRelease();
  a5(v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);

  return 1;
}

id sub_1BDF0D7CC()
{
  return sub_1BDF00B60(type metadata accessor for CRAttributedStringEncoder);
}

uint64_t sub_1BDF0D7D8()
{
  return type metadata accessor for CRAttributedStringEncoder(0);
}

uint64_t type metadata accessor for CRAttributedStringEncoder(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52DF20);
}

uint64_t sub_1BDF0D7F4()
{
  return swift_updateClassMetadata2();
}

id sub_1BDF0D828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  char *v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v4[OBJC_IVAR____TtC9Coherence25CRAttributedStringDecoder_scope];
  *(_QWORD *)v12 = a3;
  *((_QWORD *)v12 + 1) = a4;
  sub_1BDD9C318(a1, (uint64_t)v11, v13);
  v14 = &v4[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  v15 = v4;
  sub_1BE1B20E4();
  v16 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v14[v16] = qword_1ED6EF678;
  sub_1BDD9C318((uint64_t)v11, (uint64_t)&v15[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(_QWORD *)&v15[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a2;
  swift_retain();
  swift_retain();

  v17 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  v20.receiver = v15;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, sel_init);
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Sequence);
  sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
  return v18;
}

id sub_1BDF0D9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  char *v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v4[OBJC_IVAR____TtC9Coherence17CRSequenceDecoder_getStorage];
  *(_QWORD *)v12 = a3;
  *((_QWORD *)v12 + 1) = a4;
  sub_1BDD9C318(a1, (uint64_t)v11, v13);
  v14 = &v4[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  swift_retain();
  v15 = v4;
  sub_1BE1B20E4();
  v16 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v14[v16] = qword_1ED6EF678;
  sub_1BDD9C318((uint64_t)v11, (uint64_t)&v15[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(_QWORD *)&v15[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a2;
  swift_retain();
  swift_retain();

  v17 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  v20.receiver = v15;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, sel_init);
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Sequence);
  sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
  return v18;
}

uint64_t sub_1BDF0DB20()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1BDF0DB44(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  sub_1BDF0C094(a1, a2, a3, a4, *(char **)(v4 + 16), *(void ***)(v4 + 24));
}

uint64_t sub_1BDF0DB4C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDF0DB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BE149B90(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1C3B7E068);
  return result;
}

unint64_t sub_1BDF0DB98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52B6D0;
  if (!qword_1EF52B6D0)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1C3B7DF54](&unk_1BE1B5A58, v1);
    atomic_store(result, (unint64_t *)&qword_1EF52B6D0);
  }
  return result;
}

uint64_t sub_1BDF0DBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Subsequence(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_1BDF0DC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_super v12;

  v5 = &v3[OBJC_IVAR____TtC9Coherence17CRSequenceEncoder_getElements];
  *(_QWORD *)v5 = a2;
  *((_QWORD *)v5 + 1) = a3;
  v6 = &v3[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
  swift_retain();
  v7 = v3;
  sub_1BE1B20E4();
  v8 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v6[v8] = qword_1ED6EF5B0;
  v9 = &v7[OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence];
  swift_retain();
  sub_1BE1B20E4();
  v10 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v9[v10] = qword_1ED6EF678;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder] = a1;
  swift_retain();
  swift_retain();

  v12.receiver = v7;
  v12.super_class = (Class)type metadata accessor for CRStringEncoder(0);
  return objc_msgSendSuper2(&v12, sel_init);
}

uint64_t sub_1BDF0DD54(uint64_t a1)
{
  return sub_1BDF0DD8C(a1, (uint64_t)&unk_1E7760768, (uint64_t)sub_1BDF1122C, (uint64_t)&block_descriptor_7);
}

uint64_t sub_1BDF0DD70(uint64_t a1)
{
  return sub_1BDF0DD8C(a1, (uint64_t)&unk_1E7760740, (uint64_t)sub_1BDF1095C, (uint64_t)&block_descriptor_6);
}

uint64_t sub_1BDF0DD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v8 = sub_1BE1B248C();
  v19 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B24BC();
  v12 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v18[1] = *(_QWORD *)(v4 + 40);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = v4;
    aBlock[4] = a3;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = a4;
    v17 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B24A4();
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD88A78();
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v15, v10, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDF0DF6C(uint64_t a1)
{
  return sub_1BDF0DD8C(a1, (uint64_t)&unk_1E7760790, (uint64_t)sub_1BDF114E4, (uint64_t)&block_descriptor_13_0);
}

uint64_t sub_1BDF0DF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, _QWORD);
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  int64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;

  v122 = type metadata accessor for RetainedMapRun(0);
  v4 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122);
  v117 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v121 = *(_QWORD *)(v127 - 8);
  MEMORY[0x1E0C80A78](v127);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v126 = (uint64_t)&v90 - v12;
  v113 = sub_1BE1B203C();
  v115 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113);
  v114 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v99);
  v112 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Replica();
  v97 = *(_QWORD *)(v91 - 8);
  v15 = MEMORY[0x1E0C80A78](v91);
  v96 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v90 - v17;
  v108 = sub_1BE1B206C();
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v109 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v101 = (uint64_t)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v90 - v23;
  v25 = *(_QWORD *)(a1 + 64);
  v93 = a1 + 64;
  v26 = 1 << *(_BYTE *)(a1 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v106 = v27 & v25;
  v100 = a2 + 16;
  v95 = &v130;
  v94 = (unint64_t)(v26 + 63) >> 6;
  v92 = v94 - 1;
  v98 = a1;
  swift_bridgeObjectRetain();
  v103 = 0;
  v120 = v11;
  v104 = v24;
  v105 = a2;
  v123 = v4;
  v119 = v7;
  v102 = v18;
  while (1)
  {
    if (v106)
    {
      v28 = v18;
      v29 = __clz(__rbit64(v106));
      v106 &= v106 - 1;
      v30 = v29 | (v103 << 6);
LABEL_7:
      v31 = v98;
      v32 = v101;
      sub_1BDD9C318(*(_QWORD *)(v98 + 48) + *(_QWORD *)(v97 + 72) * v30, v101, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v33 = v107;
      v34 = *(_QWORD *)(v31 + 56) + *(_QWORD *)(v107 + 72) * v30;
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 16))(v32 + *(int *)(v35 + 48), v34, v108);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v32, 0, 1, v35);
      v24 = v104;
      v18 = v28;
      a2 = v105;
      goto LABEL_29;
    }
    v36 = v103 + 1;
    if (__OFADD__(v103, 1))
      goto LABEL_63;
    v32 = v101;
    if (v36 < v94)
    {
      v37 = *(_QWORD *)(v93 + 8 * v36);
      if (v37)
        goto LABEL_11;
      v38 = v103 + 2;
      ++v103;
      if (v36 + 1 < v94)
      {
        v37 = *(_QWORD *)(v93 + 8 * v38);
        if (v37)
          goto LABEL_14;
        v103 = v36 + 1;
        if (v36 + 2 < v94)
        {
          v37 = *(_QWORD *)(v93 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
LABEL_11:
            v28 = v18;
            v106 = (v37 - 1) & v37;
            v30 = __clz(__rbit64(v37)) + (v36 << 6);
            v103 = v36;
            goto LABEL_7;
          }
          v103 = v36 + 2;
          if (v36 + 3 < v94)
          {
            v37 = *(_QWORD *)(v93 + 8 * (v36 + 3));
            if (v37)
            {
              v36 += 3;
              goto LABEL_11;
            }
            v38 = v36 + 4;
            v103 = v36 + 3;
            if (v36 + 4 < v94)
            {
              v37 = *(_QWORD *)(v93 + 8 * v38);
              if (!v37)
              {
                while (1)
                {
                  v36 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    goto LABEL_64;
                  if (v36 >= v94)
                  {
                    v103 = v92;
                    goto LABEL_28;
                  }
                  v37 = *(_QWORD *)(v93 + 8 * v36);
                  ++v38;
                  if (v37)
                    goto LABEL_11;
                }
              }
LABEL_14:
              v36 = v38;
              goto LABEL_11;
            }
          }
        }
      }
    }
LABEL_28:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v32, 1, 1, v39);
    v106 = 0;
LABEL_29:
    sub_1BDDA2EF0(v32, (uint64_t)v24, &qword_1ED6F3CC0);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v24, 1, v40) == 1)
      return swift_release();
    (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v109, &v24[*(int *)(v40 + 48)], v108);
    sub_1BDDA2E8C((uint64_t)v24, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v128 = *(_QWORD *)(a2 + 32);
    v42 = v128;
    *(_QWORD *)(a2 + 32) = 0x8000000000000000;
    v44 = sub_1BDDB3EC0((uint64_t)v18);
    v45 = *(_QWORD *)(v42 + 16);
    v46 = (v43 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
      goto LABEL_62;
    v48 = v43;
    if (*(_QWORD *)(v42 + 24) >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE63924();
        v42 = v128;
      }
    }
    else
    {
      sub_1BDD8BE10(v47, isUniquelyReferenced_nonNull_native);
      v42 = v128;
      v49 = sub_1BDDB3EC0((uint64_t)v18);
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_65;
      v44 = v49;
    }
    *(_QWORD *)(a2 + 32) = v42;
    swift_bridgeObjectRelease();
    v51 = *(_QWORD **)(a2 + 32);
    if ((v48 & 1) == 0)
    {
      v129 = MEMORY[0x1E0DEE9D8];
      swift_weakInit();
      swift_weakAssign();
      sub_1BDDB4F58(&v129, &v128);
      v52 = v96;
      sub_1BDD9C318((uint64_t)v102, v96, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDC4DA8(v44, v52, &v128, v51);
    }
    v53 = v44;
    v125 = v51[7];
    v54 = v114;
    sub_1BE1B2054();
    v55 = (uint64_t)v112;
    sub_1BE1B2030();
    v56 = v54;
    v57 = v113;
    v111 = *(void (**)(char *, uint64_t))(v115 + 8);
    v111(v56, v113);
    v58 = (_QWORD *)(v55 + *(int *)(v99 + 36));
    v59 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
    v60 = *v58;
    sub_1BE1B2C90();
    if (v60 != v128)
      break;
LABEL_4:
    sub_1BDD86E30(v55, &qword_1ED6EFF58);
    swift_endAccess();
    v18 = v102;
    sub_1BDD9C3E0((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v108);
    a2 = v105;
    v24 = v104;
  }
  v110 = v125 + 16 * v53;
  while (1)
  {
    v62 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
    v63 = v55;
    v65 = *v64;
    v66 = v64[1];
    v62(&v128, 0);
    v67 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v114, v63, v57);
    sub_1BE1B2C9C();
    v111(v67, v57);
    v68 = v66;
    v69 = v123;
    v70 = (unint64_t *)v110;
    v116 = sub_1BDDC0538(v65, v68);
    v72 = (uint64_t)v119;
    v73 = v58;
    v74 = v71;
    if (v116 != v71)
      break;
LABEL_40:
    sub_1BDD85EF0(v116, v74);
    v61 = *v73;
    v55 = (uint64_t)v112;
    v57 = v113;
    sub_1BE1B2C90();
    v58 = v73;
    if (v61 == v128)
      goto LABEL_4;
  }
  if (v71 < v116)
  {
    __break(1u);
  }
  else
  {
    v75 = v116;
    v118 = v71;
    if (v116 < v71)
    {
      while ((v75 & 0x8000000000000000) == 0)
      {
        v76 = *v70;
        if (v75 >= *(_QWORD *)(*v70 + 16))
          goto LABEL_56;
        v125 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
        v124 = *(_QWORD *)(v121 + 72) * v75;
        sub_1BDD86DEC(v76 + v125 + v124, v72, qword_1ED6F25C0);
        sub_1BDD86DEC(v72 + *(int *)(v127 + 36), (uint64_t)v11, &qword_1ED6F2520);
        v77 = v122;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v11, 1, v122) == 1)
        {
          sub_1BDD86E30((uint64_t)v11, &qword_1ED6F2520);
          v78 = type metadata accessor for FinalizedTimestamp(0);
          v79 = v126;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v126, 1, 1, v78);
          *(_QWORD *)(v79 + *(int *)(v77 + 20)) = 2;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v79, 0, 1, v77);
        }
        else
        {
          v80 = v59;
          v81 = v117;
          sub_1BDDA2E8C((uint64_t)v11, v117, type metadata accessor for RetainedMapRun);
          v82 = v126;
          sub_1BDD86DEC(v81, v126, (uint64_t *)&unk_1ED6F2DC0);
          v83 = *(int *)(v77 + 20);
          v84 = *(_QWORD *)(v81 + v83);
          v85 = __OFADD__(v84, 1);
          v86 = v84 + 1;
          if (v85)
            goto LABEL_58;
          *(_QWORD *)(v82 + v83) = v86;
          sub_1BDD9C3E0(v81, type metadata accessor for RetainedMapRun);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v82, 0, 1, v77);
          v59 = v80;
          v74 = v118;
          v72 = (uint64_t)v119;
        }
        sub_1BDD86E30(v72, qword_1ED6F25C0);
        v87 = *v70;
        v88 = swift_isUniquelyReferenced_nonNull_native();
        *v70 = v87;
        if ((v88 & 1) == 0)
        {
          v87 = sub_1BDFCEA00(v87);
          *v70 = v87;
        }
        v11 = v120;
        if (v75 >= *(_QWORD *)(v87 + 16))
          goto LABEL_57;
        ++v75;
        sub_1BDDA1AF4(v126, v87 + v125 + *(int *)(v127 + 36) + v124, &qword_1ED6F2520);
        v69 = v123;
        if (v74 == v75)
          goto LABEL_40;
      }
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      return swift_release();
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDF0EB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD);
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t result;
  _QWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  int64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  uint64_t v113;
  char v114;

  v111 = type metadata accessor for RetainedMapRun(0);
  v106 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111);
  v103 = (uint64_t)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v10 = MEMORY[0x1E0C80A78](v9);
  v105 = (uint64_t)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v83 - v12;
  v99 = sub_1BE1B203C();
  v101 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v100 = (char *)v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v88);
  v98 = (char *)v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83[0] = type metadata accessor for Replica();
  v16 = MEMORY[0x1E0C80A78](v83[0]);
  v84 = (uint64_t)v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v83 - v18;
  v94 = sub_1BE1B206C();
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v96 = (char *)v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v90 = (uint64_t)v83 - v25;
  v91 = *(_QWORD *)(a1 + 16);
  v89 = a2 + 16;
  v83[1] = &v114;
  v85 = a1;
  swift_bridgeObjectRetain();
  v26 = 0;
  v95 = v24;
  v87 = a2;
  v104 = v8;
  v86 = v19;
  while (1)
  {
    v27 = v91;
    if (v26 == v91)
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v24, 1, 1, v28);
      v92 = v27;
    }
    else
    {
      if (v26 >= v91)
        goto LABEL_41;
      v29 = v26;
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v31 = *(_QWORD *)(v30 - 8);
      sub_1BDD86DEC(v85+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v29, (uint64_t)v95, &qword_1ED6F3CB8);
      v92 = v29 + 1;
      v32 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56);
      v24 = v95;
      v32(v95, 0, 1, v30);
    }
    v33 = (uint64_t)v24;
    v34 = v90;
    sub_1BDDA2EF0(v33, v90, &qword_1ED6F3CC0);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35) == 1)
      return swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v96, v34 + *(int *)(v35 + 48), v94);
    sub_1BDDA2E8C(v34, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v112[0] = *(_QWORD *)(a2 + 32);
    v37 = v112[0];
    *(_QWORD *)(a2 + 32) = 0x8000000000000000;
    v39 = sub_1BDDB3EC0((uint64_t)v19);
    v40 = *(_QWORD *)(v37 + 16);
    v41 = (v38 & 1) == 0;
    v42 = v40 + v41;
    if (__OFADD__(v40, v41))
      goto LABEL_40;
    v43 = v38;
    if (*(_QWORD *)(v37 + 24) >= v42)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE63924();
        v37 = v112[0];
      }
    }
    else
    {
      sub_1BDD8BE10(v42, isUniquelyReferenced_nonNull_native);
      v37 = v112[0];
      v44 = sub_1BDDB3EC0((uint64_t)v19);
      if ((v43 & 1) != (v45 & 1))
        goto LABEL_42;
      v39 = v44;
    }
    *(_QWORD *)(a2 + 32) = v37;
    swift_bridgeObjectRelease();
    v46 = *(_QWORD **)(a2 + 32);
    if ((v43 & 1) == 0)
    {
      v113 = MEMORY[0x1E0DEE9D8];
      swift_weakInit();
      swift_weakAssign();
      sub_1BDDB4F58(&v113, v112);
      v47 = v84;
      sub_1BDD9C318((uint64_t)v19, v84, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDC4DA8(v39, v47, v112, v46);
    }
    v110 = v39;
    v48 = v46[7];
    v49 = v100;
    sub_1BE1B2054();
    v50 = (uint64_t)v98;
    sub_1BE1B2030();
    v51 = v99;
    v97 = *(void (**)(char *, uint64_t))(v101 + 8);
    v97(v49, v99);
    v52 = (_QWORD *)(v50 + *(int *)(v88 + 36));
    v53 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
    v54 = *v52;
    sub_1BE1B2C90();
    if (v54 != v112[0])
      break;
LABEL_2:
    sub_1BDD86E30(v50, &qword_1ED6EFF58);
    swift_endAccess();
    v19 = v86;
    sub_1BDD9C3E0((uint64_t)v86, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
    a2 = v87;
    v24 = v95;
    v26 = v92;
  }
  v107 = v53;
  v108 = v52;
  v110 = v48 + 16 * v110;
  while (1)
  {
    v56 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
    v57 = v51;
    v60 = *v58;
    v59 = v58[1];
    v56(v112, 0);
    v61 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v50, v57);
    sub_1BE1B2C9C();
    v62 = v57;
    v63 = v110;
    v97(v61, v62);
    v102 = sub_1BDDC0538(v60, v59);
    v65 = (uint64_t)v104;
    if (v102 != v64)
      break;
LABEL_18:
    sub_1BDD85EF0(v102, v64);
    v55 = *v52;
    v50 = (uint64_t)v98;
    v51 = v99;
    sub_1BE1B2C90();
    if (v55 == v112[0])
      goto LABEL_2;
  }
  if (v64 < v102)
  {
    __break(1u);
  }
  else
  {
    v66 = v102;
    v109 = v64;
    if (v102 < v64)
    {
      while ((v66 & 0x8000000000000000) == 0)
      {
        if (v66 >= *(_QWORD *)(*(_QWORD *)v63 + 16))
          goto LABEL_34;
        v67 = (uint64_t)v13;
        v68 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v69 = *(_QWORD *)(v6 + 72) * v66;
        sub_1BDD86DEC(*(_QWORD *)v63 + v68 + v69, v65, qword_1ED6F25C0);
        v70 = v105;
        sub_1BDD86DEC(v65 + *(int *)(v5 + 36), v105, &qword_1ED6F2520);
        v71 = v106;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v70, 1, v111) == 1)
        {
          sub_1BDD86E30(v70, &qword_1ED6F2520);
          v72 = type metadata accessor for FinalizedTimestamp(0);
          v13 = (char *)v67;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v67, 1, 1, v72);
          *(_QWORD *)(v67 + *(int *)(v111 + 20)) = 2;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v71 + 56))(v67, 0, 1);
        }
        else
        {
          v73 = v70;
          v74 = v111;
          v75 = v103;
          sub_1BDDA2E8C(v73, v103, type metadata accessor for RetainedMapRun);
          sub_1BDD86DEC(v75, v67, (uint64_t *)&unk_1ED6F2DC0);
          v76 = *(int *)(v74 + 20);
          v77 = *(_QWORD *)(v75 + v76);
          v78 = __OFADD__(v77, 1);
          v79 = v77 + 1;
          if (v78)
            goto LABEL_36;
          *(_QWORD *)(v67 + v76) = v79;
          sub_1BDD9C3E0(v75, type metadata accessor for RetainedMapRun);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v67, 0, 1, v74);
          v65 = (uint64_t)v104;
          v13 = (char *)v67;
        }
        sub_1BDD86E30(v65, qword_1ED6F25C0);
        v63 = v110;
        v80 = *(_QWORD *)v110;
        v81 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v63 = v80;
        if ((v81 & 1) == 0)
        {
          v80 = sub_1BDFCEA00(v80);
          *(_QWORD *)v63 = v80;
        }
        if (v66 >= *(_QWORD *)(v80 + 16))
          goto LABEL_35;
        ++v66;
        sub_1BDDA1AF4((uint64_t)v13, v80 + v68 + *(int *)(v5 + 36) + v69, &qword_1ED6F2520);
        v52 = v108;
        v64 = v109;
        if (v109 == v66)
          goto LABEL_18;
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDF0F518(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a3;
  v51 = a1;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DF50);
  v5 = MEMORY[0x1E0C80A78](v52);
  v50 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v45 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RetainedMapRun(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD86DEC((uint64_t)v3 + *(int *)(v17 + 36), (uint64_t)v11, &qword_1ED6F2520);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v53 = v12;
  if (v20(v11, 1, v12) == 1)
  {
    result = sub_1BDD86E30((uint64_t)v11, &qword_1ED6F2520);
    v22 = *v3;
    v23 = v54;
    if (*v3 > v54)
    {
      __break(1u);
    }
    else
    {
      v24 = v3;
      v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v26 = v53;
      result = v25(&v19[*(int *)(v16 + 36)], 1, 1, v53);
      *(_QWORD *)v19 = v22;
      *((_QWORD *)v19 + 1) = v23;
      v27 = v24[1];
      if (v27 >= v23)
      {
        v25(&a2[*(int *)(v16 + 36)], 1, 1, v26);
        *(_QWORD *)a2 = v23;
        *((_QWORD *)a2 + 1) = v27;
        return sub_1BDDA2EF0((uint64_t)v19, v51, qword_1ED6F25C0);
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  v48 = a2;
  result = sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v15, type metadata accessor for RetainedMapRun);
  v28 = *v3;
  v29 = v54;
  v30 = v54 - *v3;
  if (__OFSUB__(v54, *v3))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v31 = v52;
  v49 = &v8[*(int *)(v52 + 48)];
  result = sub_1BE19AE14((uint64_t)v8, (uint64_t)v49, v30);
  if (v28 > v29)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v32 = *(int *)(v16 + 36);
  v47 = v3;
  v33 = (uint64_t)&v19[v32];
  v34 = v50;
  v35 = v50 + *(int *)(v31 + 48);
  sub_1BDD9C318((uint64_t)v8, v50, type metadata accessor for RetainedMapRun);
  sub_1BDD9C318((uint64_t)v49, v35, type metadata accessor for RetainedMapRun);
  sub_1BDDA2E8C(v34, v33, type metadata accessor for RetainedMapRun);
  v36 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56);
  v37 = v33;
  v38 = v53;
  v39 = v54;
  v46 = v36;
  v36(v37, 0, 1, v53);
  *(_QWORD *)v19 = v28;
  *((_QWORD *)v19 + 1) = v39;
  sub_1BDD9C3E0(v35, type metadata accessor for RetainedMapRun);
  v40 = v47[1];
  result = sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for RetainedMapRun);
  if (v40 >= v39)
  {
    v41 = v39;
    v42 = v48;
    v43 = (uint64_t)&v48[*(int *)(v16 + 36)];
    v44 = v34 + *(int *)(v52 + 48);
    sub_1BDDA2E8C((uint64_t)v8, v34, type metadata accessor for RetainedMapRun);
    sub_1BDDA2E8C((uint64_t)v49, v44, type metadata accessor for RetainedMapRun);
    sub_1BDDA2E8C(v44, v43, type metadata accessor for RetainedMapRun);
    v46(v43, 0, 1, v38);
    *(_QWORD *)v42 = v41;
    *((_QWORD *)v42 + 1) = v40;
    sub_1BDD9C3E0(v34, type metadata accessor for RetainedMapRun);
    return sub_1BDDA2EF0((uint64_t)v19, v51, qword_1ED6F25C0);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1BDF0F8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED6F4510 != -1)
    swift_once();
  v5 = v1 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  sub_1BDD9C318(v5, (uint64_t)v4, type metadata accessor for Timestamp);
  if (*(_QWORD *)&v4[*(int *)(type metadata accessor for Replica() + 20)])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE778);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8) - 8) + 80);
    v7 = (v6 + 32) & ~v6;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1BE1B61B0;
    sub_1BDD9C318((uint64_t)v4, v8 + v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_retain();
    sub_1BE1B2000();
    sub_1BDF0DD8C(v8, (uint64_t)&unk_1E7760790, (uint64_t)sub_1BDF114E4, (uint64_t)&block_descriptor_13_0);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_1BDD9C3E0((uint64_t)v4, type metadata accessor for Timestamp);
  sub_1BDD9C3E0(v5, type metadata accessor for Timestamp);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDF0FA8C()
{
  return type metadata accessor for CRTimestampRef();
}

uint64_t type metadata accessor for CRTimestampRef()
{
  uint64_t result;

  result = qword_1EF52DF38;
  if (!qword_1EF52DF38)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for CRTimestamp()
{
  return &type metadata for CRTimestamp;
}

uint64_t sub_1BDF0FAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Timestamp(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v22 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v21 - v9);
  v11 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  sub_1BDD9C318(v14, (uint64_t)v13, type metadata accessor for Timestamp);
  v15 = *(_QWORD *)&v13[*(int *)(v3 + 20)];
  result = sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *v10 = 0;
    sub_1BE1B20E4();
    v10[1] = *(_QWORD *)(v14 + *(int *)(v11 + 20));
    sub_1BDD9C318(v14, (uint64_t)v13, type metadata accessor for Timestamp);
    sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v17 = sub_1BDDAE244((uint64_t)v5);
    v18 = sub_1BE1B1F58();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v5, v18);
    *v10 = v17;
    v19 = v23;
    sub_1BDE25870();
    if (!v19)
    {
      v20 = v22;
      sub_1BDD9C318((uint64_t)v10, v22, type metadata accessor for Proto_Timestamp);
      swift_beginAccess();
      swift_retain();
      sub_1BE12851C(v20);
      swift_release();
    }
    return sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Timestamp);
  }
  return result;
}

uint64_t sub_1BDF0FD48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void **p_vtable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for Timestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)v32 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v32 - v11;
  v13 = *v2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  sub_1BDD9C318(v13, (uint64_t)v12, type metadata accessor for Timestamp);
  v14 = type metadata accessor for Replica();
  v15 = *(_QWORD *)&v12[*(int *)(v14 + 20)];
  result = sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Timestamp);
  if (v15 >= 1)
  {
    p_vtable = (void **)(&OBJC_METACLASS____TtC9Coherence13RetainVisitor + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v18 = *v2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
      swift_beginAccess();
      sub_1BDD9C318(v18, (uint64_t)v10, type metadata accessor for Timestamp);
      type metadata accessor for CRTimestampRef();
      v19 = swift_allocObject();
      p_vtable = &OBJC_METACLASS____TtC9Coherence13RetainVisitor.vtable;
      sub_1BDD9C318((uint64_t)v10, v19 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp, type metadata accessor for Timestamp);
      if (qword_1ED6F4510 != -1)
        swift_once();
      if (*(_QWORD *)&v10[*(int *)(v14 + 20)])
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE778);
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
        v32[0] = a1;
        v21 = *(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80);
        v22 = (v21 + 32) & ~v21;
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_1BE1B61B0;
        sub_1BDD9C318((uint64_t)v10, v23 + v22, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        swift_retain();
        a1 = v32[0];
        sub_1BE1B2000();
        sub_1BDF0DD8C(v23, (uint64_t)&unk_1E7760740, (uint64_t)sub_1BDF1095C, (uint64_t)&block_descriptor_6);
        p_vtable = &OBJC_METACLASS____TtC9Coherence13RetainVisitor.vtable;
        swift_release();
        swift_bridgeObjectRelease();
      }
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Timestamp);
      *v2 = v19;
      swift_release();
    }
    v35 = MEMORY[0x1E0DEE9E0];
    v36 = MEMORY[0x1E0DEE9E0];
    v24 = *v2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
    swift_beginAccess();
    sub_1BDD9C318(v24, (uint64_t)v7, type metadata accessor for Timestamp);
    sub_1BDDCB81C((uint64_t)v7);
    v25 = sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Timestamp);
    if (p_vtable[162] != (void *)-1)
      v25 = swift_once();
    v26 = qword_1ED6F8BE8;
    v27 = v35;
    v28 = v36;
    MEMORY[0x1E0C80A78](v25);
    v32[-4] = v26;
    v32[-3] = v27;
    v32[-2] = v28;
    v32[-1] = a1;
    swift_retain();
    sub_1BE1B2E40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v29 = v32[2];
    v30 = v33;
    v31 = v34;
    swift_beginAccess();
    sub_1BDEFF6FC(v29, v30, v31);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BDF10164()
{
  sub_1BE1B36F8();
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF101B8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF10200()
{
  sub_1BE1B36F8();
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BDF10250(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDF10524(*a1, *a2);
}

BOOL sub_1BDF1025C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  return *(_QWORD *)(v1 + *(int *)(type metadata accessor for Replica() + 20)) > 0;
}

uint64_t sub_1BDF102BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDF10CA8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF102E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDF0FAE0(a1, *v1);
}

unint64_t sub_1BDF10300()
{
  unint64_t result;

  result = qword_1EF52DF48;
  if (!qword_1EF52DF48)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BC980, &type metadata for CRTimestamp);
    atomic_store(result, (unint64_t *)&qword_1EF52DF48);
  }
  return result;
}

uint64_t sub_1BDF10344(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1BDDC5D60(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0) - 8);
  v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_25;
  v18 = *(_QWORD *)(v5 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_33;
  if (v19 < 0)
  {
LABEL_35:
    result = sub_1BE1B326C();
    __break(1u);
    return result;
  }
  v20 = v17 + v16;
  v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v9);
  v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1)
    sub_1BDD86DEC(a3, v17, qword_1ED6F25C0);
  return sub_1BDD86E30(a3, &qword_1ED6F26A0);
}

uint64_t sub_1BDF1051C(uint64_t *a1, uint64_t a2)
{
  return sub_1BDF0DF88(*a1, a2);
}

uint64_t sub_1BDF10524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for Timestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v28 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v29 = (uint64_t)&v28 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v28 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v28 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v28 - v18;
  v20 = a1 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  v21 = type metadata accessor for Replica();
  v22 = *(_QWORD *)(v20 + *(int *)(v21 + 20));
  v23 = a2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  if (v22 > 0 == *(_QWORD *)(v23 + *(int *)(v21 + 20)) < 1)
  {
    if (v22 < 1)
    {
      v25 = v28;
      sub_1BDD9C318(v23, v28, type metadata accessor for Timestamp);
      v26 = v29;
      sub_1BDD9C318(v25, v29, type metadata accessor for Timestamp);
      v33 = MEMORY[0x1E0DEE9E0];
      v34 = MEMORY[0x1E0DEE9E0];
      sub_1BDDCB81C(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1ED6F4510 != -1)
        swift_once();
      swift_retain();
      sub_1BE1B2E40();
      swift_release();
      sub_1BDEFF6FC(v30, v31, v32);
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0(v25, type metadata accessor for Timestamp);
      sub_1BDD9C318(v20, (uint64_t)v19, type metadata accessor for Timestamp);
      v24 = _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0(v26, (uint64_t)v19);
      v17 = v19;
      v14 = (char *)v26;
    }
    else
    {
      sub_1BDD9C318(v20, (uint64_t)v11, type metadata accessor for Timestamp);
      sub_1BDD9C318((uint64_t)v11, (uint64_t)v14, type metadata accessor for Timestamp);
      v33 = MEMORY[0x1E0DEE9E0];
      v34 = MEMORY[0x1E0DEE9E0];
      sub_1BDDCB81C((uint64_t)v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1ED6F4510 != -1)
        swift_once();
      swift_retain();
      sub_1BE1B2E40();
      swift_release();
      sub_1BDEFF6FC(v30, v31, v32);
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Timestamp);
      sub_1BDD9C318(v23, (uint64_t)v19, type metadata accessor for Timestamp);
      v24 = _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0((uint64_t)v14, (uint64_t)v19);
      v17 = v19;
    }
  }
  else
  {
    sub_1BDD9C318(v20, (uint64_t)v19, type metadata accessor for Timestamp);
    sub_1BDD9C318(v23, (uint64_t)v17, type metadata accessor for Timestamp);
    v24 = _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v17);
    v14 = v19;
  }
  sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Timestamp);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Timestamp);
  return v24 & 1;
}

uint64_t sub_1BDF1095C()
{
  uint64_t v0;

  return sub_1BDF0EB74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDF10964(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[4];

  v5 = type metadata accessor for Timestamp(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v27 - v9;
  v11 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
    v17 = v14 >= v16;
  else
    v17 = 1;
  if (v17)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v18 = xmmword_1BE1BB990;
    *(_BYTE *)(v18 + 16) = 0;
    swift_willThrow();
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Timestamp);
  }
  else
  {
    v27[3] = v2;
    v19 = sub_1BE1B1F58();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v15+ ((*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v14, v19);
    *(_QWORD *)&v13[*(int *)(v11 + 20)] = 0;
    sub_1BDD9C318((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    *(_QWORD *)&v10[*(int *)(v5 + 20)] = a1[1];
    sub_1BDD9C318((uint64_t)v10, (uint64_t)v8, type metadata accessor for Timestamp);
    type metadata accessor for CRTimestampRef();
    v15 = swift_allocObject();
    sub_1BDD9C318((uint64_t)v8, v15 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp, type metadata accessor for Timestamp);
    if (qword_1ED6F4510 != -1)
      swift_once();
    if (*(_QWORD *)&v8[*(int *)(v11 + 20)])
    {
      v27[1] = qword_1ED6F8BE8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE778);
      v20 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8) - 8) + 80);
      v21 = a1;
      v22 = v15;
      v23 = (v20 + 32) & ~v20;
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1BE1B61B0;
      v25 = v24 + v23;
      v15 = v22;
      a1 = v21;
      sub_1BDD9C318((uint64_t)v8, v25, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      swift_retain();
      sub_1BE1B2000();
      sub_1BDF0DD8C(v24, (uint64_t)&unk_1E7760740, (uint64_t)sub_1BDF1095C, (uint64_t)&block_descriptor_6);
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Timestamp);
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Timestamp);
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Timestamp);
    sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  return v15;
}

uint64_t sub_1BDF10CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (unint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Proto_Value(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v24 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v23 - v13;
  v15 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1ED6F3770);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v7) = v16(v14, 1, v6);
  sub_1BDD86E30((uint64_t)v14, &qword_1ED6F3770);
  if ((_DWORD)v7 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000017;
    *(_QWORD *)(v17 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v17 + 16) = 0;
    swift_willThrow();
    swift_release();
    return (uint64_t)v16;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  sub_1BDD86DEC(v15, (uint64_t)v12, &qword_1ED6F3770);
  result = v16(v12, 1, v6);
  if ((_DWORD)result != 1)
  {
    v19 = v24;
    sub_1BDDA2E8C((uint64_t)v12, v24, type metadata accessor for Proto_Value);
    swift_retain();
    swift_release();
    v20 = *(_QWORD *)(v19 + *(int *)(v6 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v20, (uint64_t)v4, &qword_1ED6F26F0);
    v21 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v4, 1, v21) == 1)
    {
      sub_1BDD86E30((uint64_t)v4, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        v22 = v25;
        sub_1BDDA2E8C((uint64_t)v4, (uint64_t)v25, type metadata accessor for Proto_Timestamp);
LABEL_10:
        sub_1BDD9C3E0(v19, type metadata accessor for Proto_Value);
        v16 = (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDF10964(v22, a1);
        swift_release();
        return (uint64_t)v16;
      }
      sub_1BDD9C3E0((uint64_t)v4, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v22 = v25;
    *v25 = 0;
    v22[1] = 0;
    sub_1BE1B20E4();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDF11034(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1BDDC5D60(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0) - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF111E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF1122C()
{
  uint64_t v0;

  return sub_1BDF0DF88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

char *sub_1BDF11234(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = sub_1BDE069F0(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = v12 - a2;
  if (__OFSUB__(v12, a2))
    goto LABEL_27;
  if ((v13 & 0x8000000000000000) == 0)
  {
    result = &v4[a1 + 32];
    v14 = &v4[a2 + 32];
    if (a1 != a2 || result >= &v14[v13])
      result = (char *)memmove(result, v14, v13);
    v15 = *((_QWORD *)v4 + 2);
    v16 = __OFADD__(v15, v8);
    v17 = v15 + v8;
    if (!v16)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDF11388(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = sub_1BDE06AE8(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[2 * a1 + 32];
    v15 = &v4[2 * a2 + 32];
    if (a1 != a2 || result >= &v15[2 * v14])
      result = (char *)memmove(result, v15, 2 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF114E4()
{
  uint64_t v0;

  return sub_1BDE29C34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDF114EC(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1BDE07078(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF11664()
{
  return type metadata accessor for CRStructDecoder();
}

uint64_t sub_1BDF1166C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1BDDD0518(a1, a5, a7, a4);
}

uint64_t sub_1BDF11694@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = &type metadata for CRStructDecoder.UnkeyedContainer;
  a2[4] = sub_1BDF15778();
  *a2 = a1;
  a2[1] = 0;
  return swift_retain();
}

uint64_t sub_1BDF116E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructDecoder();
  a2[4] = sub_1BDF15898();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1BDF11734@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructDecoder();
  a2[4] = sub_1BDF15898();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1BDF11784()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BDF11790()
{
  return sub_1BDF158E0();
}

uint64_t sub_1BDF1179C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v6;

  sub_1BDDD06C4(MEMORY[0x1E0DEAFA0], *v2, *(_QWORD *)(a2 + 16), MEMORY[0x1E0DEAFA0], (uint64_t)&v6);
  if (!v3)
    v4 = v6;
  return v4 & 1;
}

uint64_t sub_1BDF117F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = sub_1BDDD06C4(MEMORY[0x1E0DEA968], *v2, *(_QWORD *)(a2 + 16), MEMORY[0x1E0DEA968], (uint64_t)&v5);
  if (!v3)
    return v5;
  return result;
}

double sub_1BDF11840(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  double result;
  double v5;

  sub_1BDDD06C4(MEMORY[0x1E0DEB070], *v2, *(_QWORD *)(a2 + 16), MEMORY[0x1E0DEB070], (uint64_t)&v5);
  if (!v3)
    return v5;
  return result;
}

float sub_1BDF11890(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  float result;
  float v5;

  sub_1BDDD06C4(MEMORY[0x1E0DEB188], *v2, *(_QWORD *)(a2 + 16), MEMORY[0x1E0DEB188], (uint64_t)&v5);
  if (!v3)
    return v5;
  return result;
}

uint64_t sub_1BDF118E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11B34(a1, a2, a3, MEMORY[0x1E0DEB418]);
}

uint64_t sub_1BDF11904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF119F0(a1, a2, a3, MEMORY[0x1E0DEDA70]);
}

uint64_t sub_1BDF11928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11A5C(a1, a2, a3, MEMORY[0x1E0DEDB58]);
}

uint64_t sub_1BDF1194C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11AC8(a1, a2, a3, MEMORY[0x1E0DEDBC8]);
}

uint64_t sub_1BDF11970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11B34(a1, a2, a3, MEMORY[0x1E0DEDC60]);
}

uint64_t sub_1BDF11994()
{
  return sub_1BE1B3590();
}

uint64_t sub_1BDF119A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11B34(a1, a2, a3, MEMORY[0x1E0DEBB98]);
}

uint64_t sub_1BDF119CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF119F0(a1, a2, a3, MEMORY[0x1E0DEDE70]);
}

uint64_t sub_1BDF119F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 v7;

  result = sub_1BDDD06C4(a4, *v4, *(_QWORD *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

uint64_t sub_1BDF11A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11A5C(a1, a2, a3, MEMORY[0x1E0DEE068]);
}

uint64_t sub_1BDF11A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int16 v7;

  result = sub_1BDDD06C4(a4, *v4, *(_QWORD *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

uint64_t sub_1BDF11AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11AC8(a1, a2, a3, MEMORY[0x1E0DEE0F8]);
}

uint64_t sub_1BDF11AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;

  result = sub_1BDDD06C4(a4, *v4, *(_QWORD *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

uint64_t sub_1BDF11B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11B34(a1, a2, a3, MEMORY[0x1E0DEE190]);
}

uint64_t sub_1BDF11B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = sub_1BDDD06C4(a4, *v4, *(_QWORD *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

uint64_t sub_1BDF11B7C()
{
  return sub_1BE1B359C();
}

uint64_t sub_1BDF11B90()
{
  return sub_1BE1B353C();
}

uint64_t sub_1BDF11BA4()
{
  return sub_1BE1B3530();
}

uint64_t sub_1BDF11BB8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3548();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF11BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11D68(a1, a2, a3, MEMORY[0x1E0DED7E8]);
}

uint64_t sub_1BDF11BF4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3554();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF11C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11CE0(a1, a2, a3, MEMORY[0x1E0DED808]);
}

uint64_t sub_1BDF11C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11D24(a1, a2, a3, MEMORY[0x1E0DED810]);
}

uint64_t sub_1BDF11C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11D68(a1, a2, a3, MEMORY[0x1E0DED818]);
}

uint64_t sub_1BDF11C68()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3578();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF11C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11DD4(a1, a2, a3, MEMORY[0x1E0DED830]);
}

uint64_t sub_1BDF11CA4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3560();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF11CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11CE0(a1, a2, a3, MEMORY[0x1E0DED828]);
}

uint64_t sub_1BDF11CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1BDF11D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11D24(a1, a2, a3, MEMORY[0x1E0DED838]);
}

uint64_t sub_1BDF11D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_1BDF11D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11D68(a1, a2, a3, MEMORY[0x1E0DED840]);
}

uint64_t sub_1BDF11D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1BDF11D98()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3584();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF11DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDF11DD4(a1, a2, a3, MEMORY[0x1E0DED850]);
}

uint64_t sub_1BDF11DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1BDF11DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_1BDF1166C(a1, a2, *v5, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1BDF11E20@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDF11694(*v1, a1);
}

uint64_t sub_1BDF11E40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDF116E4(*v1, a1);
}

uint64_t sub_1BDF11E60@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDF11734(*v1, a1);
}

uint64_t sub_1BDF11E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  char v14;
  uint64_t v15[5];
  char v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEAFA0];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v15[3] = v7;
  v15[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v15);
  v13(v12, v7, v10);
  if (v1)
  {
    __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
    swift_dynamicCast();
    v14 = v16;
  }
  return v14 & 1;
}

uint64_t sub_1BDF11FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15[6];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEA968];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v15[3] = v7;
  v15[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v15);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v15[5];
}

uint64_t sub_1BDF1216C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14[5];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEB070];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  return swift_dynamicCast();
}

uint64_t sub_1BDF122E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14[5];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEB188];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  return swift_dynamicCast();
}

uint64_t sub_1BDF12454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14[6];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEB418];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1BDF125C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15[5];
  unsigned __int8 v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEDA70];
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_1BDDD2EB4(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      v11 = *(_QWORD *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
      swift_release();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BCA00;
    *(_BYTE *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF12780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15[5];
  unsigned __int16 v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEDB58];
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_1BDDD2EB4(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      v11 = *(_QWORD *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
      swift_release();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BCA00;
    *(_BYTE *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF12938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15[5];
  unsigned int v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEDBC8];
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_1BDDD2EB4(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      v11 = *(_QWORD *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
      swift_release();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BCA00;
    *(_BYTE *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF12AF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14[6];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEDC60];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1BDF12C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14[6];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEBB98];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1BDF12DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15[5];
  unsigned __int8 v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEDE70];
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_1BDDD2EB4(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      v11 = *(_QWORD *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
      swift_release();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BCA00;
    *(_BYTE *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF12F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15[5];
  unsigned __int16 v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE068];
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_1BDDD2EB4(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      v11 = *(_QWORD *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
      swift_release();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BCA00;
    *(_BYTE *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF13148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15[5];
  unsigned int v16;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE0F8];
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_1BDDD2EB4(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      v11 = *(_QWORD *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
      swift_release();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BCA00;
    *(_BYTE *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF13300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14[6];

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE190];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = result;
  sub_1BDDD2EB4(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v12 = sub_1BDDB4FC0((uint64_t)v6, v11);
  swift_release();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1BDF13474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17[5];

  v5 = type metadata accessor for Proto_Value(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_conformsToProtocol2();
  if (result)
    v10 = result;
  else
    v10 = 0;
  if (!result)
    a1 = 0;
  if (a1)
  {
    v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(_QWORD *)(v11 + 16))
    {
      sub_1BDDD2EB4(v11 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v8);
      v12 = *(_QWORD *)(a2 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v13 = sub_1BDDB4FC0((uint64_t)v8, v12);
      swift_release();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
      v17[3] = a1;
      v17[4] = v10;
      __swift_allocate_boxed_opaque_existential_1(v17);
      v14(v13, a1, v10);
      if (v2)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        return swift_dynamicCast();
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v15 = xmmword_1BE1BCA00;
    *(_BYTE *)(v15 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDF13630()
{
  uint64_t *v0;

  return sub_1BDF11E80(*v0) & 1;
}

uint64_t sub_1BDF1364C()
{
  uint64_t *v0;

  return sub_1BDF11FF8(*v0);
}

uint64_t sub_1BDF13664()
{
  uint64_t *v0;

  return sub_1BDF1216C(*v0);
}

uint64_t sub_1BDF1367C()
{
  uint64_t *v0;

  return sub_1BDF122E0(*v0);
}

uint64_t sub_1BDF13694()
{
  uint64_t *v0;

  return sub_1BDF12454(*v0);
}

uint64_t sub_1BDF136AC()
{
  uint64_t *v0;

  return sub_1BDF125C8(*v0);
}

uint64_t sub_1BDF136C4()
{
  uint64_t *v0;

  return sub_1BDF12780(*v0);
}

uint64_t sub_1BDF136DC()
{
  uint64_t *v0;

  return sub_1BDF12938(*v0);
}

uint64_t sub_1BDF136F4()
{
  uint64_t *v0;

  return sub_1BDF12AF0(*v0);
}

uint64_t sub_1BDF1370C()
{
  return sub_1BE1B34DC();
}

uint64_t sub_1BDF13720()
{
  uint64_t *v0;

  return sub_1BDF12C64(*v0);
}

uint64_t sub_1BDF13738()
{
  uint64_t *v0;

  return sub_1BDF12DD8(*v0);
}

uint64_t sub_1BDF13750()
{
  uint64_t *v0;

  return sub_1BDF12F90(*v0);
}

uint64_t sub_1BDF13768()
{
  uint64_t *v0;

  return sub_1BDF13148(*v0);
}

uint64_t sub_1BDF13780()
{
  uint64_t *v0;

  return sub_1BDF13300(*v0);
}

uint64_t sub_1BDF13798()
{
  return sub_1BE1B34E8();
}

uint64_t sub_1BDF137AC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDF13474(a1, *v1);
}

uint64_t sub_1BDF137CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  char v16;
  uint64_t v18[5];
  char v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEAFA0];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v18[3] = v6;
  v18[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v11);
  if (v1)
  {
    __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
    swift_dynamicCast();
    v16 = v19;
  }
  return v16 & 1;
}

uint64_t sub_1BDF13968()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[6];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEA968];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v17[5];
}

uint64_t sub_1BDF13B00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[5];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEB070];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  return swift_dynamicCast();
}

uint64_t sub_1BDF13C98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[5];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEB188];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  return swift_dynamicCast();
}

uint64_t sub_1BDF13E30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[7];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEB418];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1BDF13FC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18[5];
  unsigned __int8 v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEDA70];
  result = swift_conformsToProtocol2();
  if (result)
    v8 = result;
  else
    v8 = 0;
  if (!result)
    v6 = 0;
  if (!v6)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v16 = xmmword_1BE1BCA00;
    *(_BYTE *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = *v0;
  v11 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  v18[3] = v6;
  v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1BDF141A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18[5];
  unsigned __int16 v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEDB58];
  result = swift_conformsToProtocol2();
  if (result)
    v8 = result;
  else
    v8 = 0;
  if (!result)
    v6 = 0;
  if (!v6)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v16 = xmmword_1BE1BCA00;
    *(_BYTE *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = *v0;
  v11 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  v18[3] = v6;
  v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1BDF14380()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18[5];
  unsigned int v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEDBC8];
  result = swift_conformsToProtocol2();
  if (result)
    v8 = result;
  else
    v8 = 0;
  if (!result)
    v6 = 0;
  if (!v6)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v16 = xmmword_1BE1BCA00;
    *(_BYTE *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = *v0;
  v11 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  v18[3] = v6;
  v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1BDF1455C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[7];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEDC60];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1BDF146F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[7];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEBB98];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1BDF1488C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18[5];
  unsigned __int8 v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEDE70];
  result = swift_conformsToProtocol2();
  if (result)
    v8 = result;
  else
    v8 = 0;
  if (!result)
    v6 = 0;
  if (!v6)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v16 = xmmword_1BE1BCA00;
    *(_BYTE *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = *v0;
  v11 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  v18[3] = v6;
  v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1BDF14A68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18[5];
  unsigned __int16 v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEE068];
  result = swift_conformsToProtocol2();
  if (result)
    v8 = result;
  else
    v8 = 0;
  if (!result)
    v6 = 0;
  if (!v6)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v16 = xmmword_1BE1BCA00;
    *(_BYTE *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = *v0;
  v11 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  v18[3] = v6;
  v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1BDF14C44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18[5];
  unsigned int v19;

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEE0F8];
  result = swift_conformsToProtocol2();
  if (result)
    v8 = result;
  else
    v8 = 0;
  if (!result)
    v6 = 0;
  if (!v6)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v16 = xmmword_1BE1BCA00;
    *(_BYTE *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = *v0;
  v11 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  v18[3] = v6;
  v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1BDF14E20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17[7];

  v2 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEE190];
  result = swift_conformsToProtocol2();
  if (!result)
    goto LABEL_10;
  v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(_QWORD *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1BDDD2EB4(v12, (uint64_t)v5);
  v13 = *(_QWORD *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v14 = sub_1BDDB4FC0((uint64_t)v5, v13);
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1BDF14FB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19[5];

  v4 = type metadata accessor for Proto_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_conformsToProtocol2();
  if (result)
    v9 = result;
  else
    v9 = 0;
  if (!result)
    a1 = 0;
  if (!a1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v17 = xmmword_1BE1BCA00;
    *(_BYTE *)(v17 + 16) = 4;
    return swift_willThrow();
  }
  v10 = v1[1];
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v11 = *v1;
  v12 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v10 >= *(_QWORD *)(v12 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v13 = v12
      + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(_QWORD *)(v5 + 72) * v10;
  v1[1] = v10 + 1;
  sub_1BDDD2EB4(v13, (uint64_t)v7);
  v14 = *(_QWORD *)(v11 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v15 = sub_1BDDB4FC0((uint64_t)v7, v14);
  swift_release();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  v19[3] = a1;
  v19[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v19);
  v16(v15, a1, v9);
  if (v2)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  return swift_dynamicCast();
}

uint64_t sub_1BDF15198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BDDD0518(a1, a4, a5, a4);
}

uint64_t sub_1BDF151C0()
{
  _QWORD *v0;

  return *(_QWORD *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8) + 16);
}

BOOL sub_1BDF151E0()
{
  _QWORD *v0;

  return v0[1] >= *(_QWORD *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8) + 16);
}

uint64_t sub_1BDF15204()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1BDF1520C()
{
  return sub_1BDF137CC() & 1;
}

uint64_t sub_1BDF15224()
{
  return sub_1BDF13968();
}

uint64_t sub_1BDF15238()
{
  return sub_1BDF13B00();
}

uint64_t sub_1BDF1524C()
{
  return sub_1BDF13C98();
}

uint64_t sub_1BDF15260()
{
  return sub_1BDF13E30();
}

uint64_t sub_1BDF15274()
{
  return sub_1BDF13FC8();
}

uint64_t sub_1BDF15288()
{
  return sub_1BDF141A4();
}

uint64_t sub_1BDF1529C()
{
  return sub_1BDF14380();
}

uint64_t sub_1BDF152B0()
{
  return sub_1BDF1455C();
}

uint64_t sub_1BDF152C4()
{
  return sub_1BE1B335C();
}

uint64_t sub_1BDF152D8()
{
  return sub_1BDF146F4();
}

uint64_t sub_1BDF152EC()
{
  return sub_1BDF1488C();
}

uint64_t sub_1BDF15300()
{
  return sub_1BDF14A68();
}

uint64_t sub_1BDF15314()
{
  return sub_1BDF14C44();
}

uint64_t sub_1BDF15328()
{
  return sub_1BDF14E20();
}

uint64_t sub_1BDF1533C()
{
  return sub_1BE1B3368();
}

uint64_t sub_1BDF15350(uint64_t a1)
{
  return sub_1BDF14FB8(a1);
}

uint64_t sub_1BDF15364()
{
  return sub_1BE1B3308();
}

uint64_t sub_1BDF15378()
{
  return sub_1BE1B32FC();
}

uint64_t sub_1BDF1538C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3314();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF153AC(uint64_t a1, uint64_t a2)
{
  return sub_1BDF1553C(a1, a2, MEMORY[0x1E0DED2E0]);
}

uint64_t sub_1BDF153C8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3320();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF153E8(uint64_t a1, uint64_t a2)
{
  return sub_1BDF154B4(a1, a2, MEMORY[0x1E0DED300]);
}

uint64_t sub_1BDF15404(uint64_t a1, uint64_t a2)
{
  return sub_1BDF154F8(a1, a2, MEMORY[0x1E0DED308]);
}

uint64_t sub_1BDF15420(uint64_t a1, uint64_t a2)
{
  return sub_1BDF1553C(a1, a2, MEMORY[0x1E0DED310]);
}

uint64_t sub_1BDF1543C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3344();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF1545C(uint64_t a1, uint64_t a2)
{
  return sub_1BDF155A8(a1, a2, MEMORY[0x1E0DED328]);
}

uint64_t sub_1BDF15478()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B332C();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF15498(uint64_t a1, uint64_t a2)
{
  return sub_1BDF154B4(a1, a2, MEMORY[0x1E0DED320]);
}

uint64_t sub_1BDF154B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1BDF154DC(uint64_t a1, uint64_t a2)
{
  return sub_1BDF154F8(a1, a2, MEMORY[0x1E0DED330]);
}

uint64_t sub_1BDF154F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1BDF15520(uint64_t a1, uint64_t a2)
{
  return sub_1BDF1553C(a1, a2, MEMORY[0x1E0DED338]);
}

uint64_t sub_1BDF1553C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_1BDF1556C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_1BE1B3350();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1BDF1558C(uint64_t a1, uint64_t a2)
{
  return sub_1BDF155A8(a1, a2, MEMORY[0x1E0DED348]);
}

uint64_t sub_1BDF155A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t sub_1BDF155CC()
{
  return sub_1BE1B3338();
}

uint64_t sub_1BDF155F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1BDF15198(a1, *v3, v3[1], a2, a3);
}

uint64_t sub_1BDF15614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  v5 = v3[1];
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  a3[1] = v5;
  return swift_retain();
}

uint64_t sub_1BDF15638@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for CRStructDecoder();
  a1[4] = sub_1BDF15898();
  *a1 = v3;
  return swift_retain();
}

unint64_t sub_1BDF15688()
{
  return sub_1BE126B34(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1BDF15694@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = &type metadata for CRStructDecoder.UnkeyedContainer;
  a1[4] = sub_1BDF15778();
  *a1 = v3;
  a1[1] = 0;
  return swift_retain();
}

uint64_t sub_1BDF156E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = &type metadata for CRStructDecoder.SingleValueContainer;
  a1[4] = sub_1BDF15734();
  *a1 = v3;
  return swift_retain();
}

unint64_t sub_1BDF15734()
{
  unint64_t result;

  result = qword_1EF52DF58;
  if (!qword_1EF52DF58)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BCDD8, &type metadata for CRStructDecoder.SingleValueContainer);
    atomic_store(result, (unint64_t *)&qword_1EF52DF58);
  }
  return result;
}

unint64_t sub_1BDF15778()
{
  unint64_t result;

  result = qword_1EF52DF60[0];
  if (!qword_1EF52DF60[0])
  {
    result = MEMORY[0x1C3B7DF54]("9=Z)", &type metadata for CRStructDecoder.UnkeyedContainer);
    atomic_store(result, qword_1EF52DF60);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CRStructDecoder.UnkeyedContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CRStructDecoder.UnkeyedContainer()
{
  return swift_release();
}

_QWORD *assignWithCopy for CRStructDecoder.UnkeyedContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for CRStructDecoder.UnkeyedContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for CRStructDecoder.UnkeyedContainer()
{
  return &type metadata for CRStructDecoder.UnkeyedContainer;
}

ValueMetadata *type metadata accessor for CRStructDecoder.SingleValueContainer()
{
  return &type metadata for CRStructDecoder.SingleValueContainer;
}

unint64_t sub_1BDF15898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F2758;
  if (!qword_1ED6F2758)
  {
    v1 = type metadata accessor for CRStructDecoder();
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BCA34, v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F2758);
  }
  return result;
}

uint64_t sub_1BDF158E0()
{
  return sub_1BE1B29D8();
}

__n128 sub_1BDF158F0(__n128 *a1)
{
  uint64_t v2;
  __n128 result;

  v2 = swift_allocObject();
  result = *a1;
  *(__n128 *)(v2 + 16) = *a1;
  return result;
}

uint64_t sub_1BDF15924(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v5 = v4;
  v64 = a3;
  v65 = a4;
  v8 = type metadata accessor for Proto_KeyPath(0);
  v66 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v55 = (uint64_t)&v52 - v12;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DFF8);
  v13 = MEMORY[0x1E0C80A78](v63);
  v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v54 = (uint64_t)&v52 - v16;
  MEMORY[0x1E0C80A78](v15);
  v53 = (uint64_t)&v52 - v17;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a2 + 16);
  if (v19 >= v18)
    v20 = *(_QWORD *)(a1 + 16);
  else
    v20 = *(_QWORD *)(a2 + 16);
  v70 = MEMORY[0x1E0DEE9D8];
  sub_1BDE22780(0, v20, 0);
  v60 = v18;
  v61 = a1;
  v58 = v20;
  v59 = a2;
  v62 = v19;
  if (v20)
  {
    v21 = v70;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v23 = 0;
    v56 = v11;
    while (v18 != v23)
    {
      result = sub_1BDD9C318(a1+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v23, (uint64_t)v11, type metadata accessor for Proto_KeyPath);
      if (v19 == v23)
        goto LABEL_35;
      v24 = *(_QWORD *)(a2 + 8 * v23 + 32);
      v25 = *(int *)(v63 + 48);
      v26 = v57;
      sub_1BDF17210((uint64_t)v11, v57);
      *(_QWORD *)(v26 + v25) = v24;
      v27 = v26;
      v28 = v64(&v67, v26, v24);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1BDF17254(v26);
      }
      v29 = v28;
      v69 = v28;
      sub_1BDF17254(v27);
      v31 = v67;
      v30 = v68;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1BDE22780(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v70;
      }
      v33 = *(_QWORD *)(v21 + 16);
      v32 = *(_QWORD *)(v21 + 24);
      if (v33 >= v32 >> 1)
      {
        result = sub_1BDE22780(v32 > 1, v33 + 1, 1);
        v21 = v70;
      }
      ++v23;
      *(_QWORD *)(v21 + 16) = v33 + 1;
      v34 = (_QWORD *)(v21 + 24 * v33);
      v34[4] = v31;
      v34[5] = v30;
      v34[6] = v29;
      a2 = v59;
      v5 = 0;
      v18 = v60;
      a1 = v61;
      v19 = v62;
      v11 = v56;
      if (v58 == v23)
        goto LABEL_16;
    }
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_16:
    if (v18 <= v19)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v70;
    }
    v57 = a2 + 32;
    v35 = v58;
    if (v58 <= (uint64_t)v19)
      v36 = v19;
    else
      v36 = v58;
    while (v18 != v35)
    {
      v37 = v55;
      result = sub_1BDD9C318(a1+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v35, v55, type metadata accessor for Proto_KeyPath);
      if (v62 == v35)
      {
        sub_1BDD9C3E0(v37, type metadata accessor for Proto_KeyPath);
        goto LABEL_32;
      }
      if (v36 == v35)
        goto LABEL_37;
      v38 = *(_QWORD *)(v57 + 8 * v35);
      v39 = v63;
      v40 = *(int *)(v63 + 48);
      v41 = v37;
      v42 = v54;
      sub_1BDF17210(v41, v54);
      *(_QWORD *)(v42 + v40) = v38;
      v43 = v53;
      sub_1BDF17294(v42, v53);
      v44 = v64(&v67, v43, *(_QWORD *)(v43 + *(int *)(v39 + 48)));
      if (v5)
      {
        sub_1BDF17254(v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v45 = v44;
      v69 = v44;
      sub_1BDF17254(v43);
      v47 = v67;
      v46 = v68;
      v48 = v70;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1BDE22780(0, *(_QWORD *)(v48 + 16) + 1, 1);
        v48 = v70;
      }
      v50 = *(_QWORD *)(v48 + 16);
      v49 = *(_QWORD *)(v48 + 24);
      if (v50 >= v49 >> 1)
      {
        result = sub_1BDE22780(v49 > 1, v50 + 1, 1);
        v48 = v70;
      }
      ++v35;
      *(_QWORD *)(v48 + 16) = v50 + 1;
      v51 = (_QWORD *)(v48 + 24 * v50);
      v51[4] = v47;
      v51[5] = v46;
      v51[6] = v45;
      v18 = v60;
      a1 = v61;
      if (v60 == v35)
        goto LABEL_32;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDF15DBC(uint64_t *a1)
{
  _QWORD *v1;
  char v2;
  _QWORD **v3;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;

  v3 = (_QWORD **)v1;
  v4 = *a1;
  v5 = a1[1];
  sub_1BDDB6CA4(*a1, v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = (_QWORD *)*v1;
  v21 = v7;
  *v3 = (_QWORD *)0x8000000000000000;
  v9 = sub_1BDDB7F0C(v4, v5);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_11;
  }
  v2 = v8;
  if (v7[3] >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    sub_1BDE5F540(v12, isUniquelyReferenced_nonNull_native);
    v13 = sub_1BDDB7F0C(v4, v5);
    if ((v2 & 1) != (v14 & 1))
    {
      result = sub_1BE1B3680();
      __break(1u);
      return result;
    }
    v9 = v13;
  }
  while (1)
  {
    *v3 = v7;
    swift_bridgeObjectRelease();
    v15 = (uint64_t)*v3;
    if ((v2 & 1) == 0)
    {
      sub_1BE1550D4(v9, v4, v5, 0, *v3);
      sub_1BDDB6CA4(v4, v5);
    }
    v16 = *(_QWORD *)(v15 + 56);
    v17 = *(_QWORD *)(v16 + 8 * v9);
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (!v18)
      break;
LABEL_11:
    __break(1u);
LABEL_12:
    sub_1BDE642C4();
    v7 = v21;
  }
  *(_QWORD *)(v16 + 8 * v9) = v19;
  return sub_1BDDB796C(v4, v5);
}

void sub_1BDF15F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;

  v3 = type metadata accessor for Proto_KeyPath(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(a2, (uint64_t)v5, v6);
  __asm { BR              X10 }
}

uint64_t sub_1BDF15F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if ((v4 & 0xFF000000000000) != 0)
  {
    sub_1BDDB6CA4(v3, v4);
    sub_1BDD9C3E0(v1, type metadata accessor for Proto_KeyPath);
    *v2 = v3;
    v2[1] = v4;
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000016;
    *(_QWORD *)(v5 + 8) = 0x80000001BE1CD380;
    *(_BYTE *)(v5 + 16) = 0;
    swift_willThrow();
    sub_1BDD9C3E0(v1, type metadata accessor for Proto_KeyPath);
  }
  return v0;
}

void sub_1BDF1605C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF160B4()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF1610C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF16164()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t type metadata accessor for AnyReference()
{
  return objc_opt_self();
}

uint64_t sub_1BDF161DC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1BDF16210()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 104))(v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BDF16258()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t sub_1BDF16280()
{
  uint64_t v0;
  _BYTE v2[72];

  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 104))(v2);
  return sub_1BE1B371C();
}

uint64_t sub_1BDF162C4(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 96))(*a2) & 1;
}

uint64_t sub_1BDF162F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_1BDF1631C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))() & 1;
}

uint64_t sub_1BDF16348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  unint64_t v14;

  type metadata accessor for TypedReference(0, *(_QWORD *)(*v4 + 144), *(_QWORD *)(*v4 + 152), a4);
  v5 = swift_dynamicCastClass();
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 24);
    v9 = v4[2];
    v8 = v4[3];
    sub_1BDDB6CA4(v6, v7);
    sub_1BDDB6CA4(v6, v7);
    sub_1BDDB6CA4(v9, v8);
    sub_1BDDD6F30(v6, v7);
    v11 = v10;
    sub_1BDDB796C(v9, v8);
    sub_1BDDB796C(v6, v7);
    sub_1BDDB796C(v6, v7);
    return v11 & 1;
  }
  else
  {
    v13 = v4[2];
    v14 = v4[3];
    sub_1BDDB6CA4(v13, v14);
    sub_1BDD9CC0C(0, 0xF000000000000000);
    sub_1BDD9CC0C(v13, v14);
    return 0;
  }
}

uint64_t sub_1BDF16430()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_1BDDB6CA4(v2, v1);
  sub_1BE1B1E8C();
  return sub_1BDDB796C(v2, v1);
}

uint64_t sub_1BDF1647C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 152) + 16) + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  v11 = swift_retain();
  result = v10(v11, v5, v9);
  if (!v3)
    return sub_1BDD85BB4((uint64_t)v7, v5, a2);
  return result;
}

BOOL sub_1BDF16524(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t DynamicType;
  _QWORD v5[4];

  v2 = *v1;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 88))(v5);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  DynamicType = swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return DynamicType == *(_QWORD *)(v2 + 144);
}

uint64_t sub_1BDF16598()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 152) + 16) + 64))() & 1;
}

uint64_t type metadata accessor for TypedReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedReference);
}

ValueMetadata *type metadata accessor for RetainCounts()
{
  return &type metadata for RetainCounts;
}

uint64_t sub_1BDF165E8(uint64_t a1, uint64_t a2)
{
  return sub_1BDF171B8(&qword_1EF52DFE8, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyReference, (uint64_t)&unk_1BE1BCF08);
}

void sub_1BDF16614(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  LOBYTE(v4) = a2;
  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_3;
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[4];
  sub_1BDDB6CA4(v9, v8);
  if (v8 >> 60 == 15)
    goto LABEL_3;
  v39 = v9;
  v40 = v8;
  v10 = (_QWORD *)*a3;
  v11 = sub_1BDDB7F0C(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_1BDE5F540(v16, v4 & 1);
    v11 = sub_1BDDB7F0C(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_9;
LABEL_7:
    v11 = sub_1BE1B3680();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_9:
    if ((v17 & 1) != 0)
      goto LABEL_10;
LABEL_13:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v24 = (uint64_t *)(v23[6] + 16 * v11);
    *v24 = v9;
    v24[1] = v8;
    *(_QWORD *)(v23[7] + 8 * v11) = v7;
    v25 = v23[2];
    v15 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (!v15)
    {
      v23[2] = v26;
      if (v6 == 1)
      {
LABEL_3:
        swift_bridgeObjectRelease_n();
        return;
      }
      v4 = a1 + 9;
      v7 = 1;
      while (v7 < a1[2])
      {
        v8 = *(v4 - 1);
        v27 = *v4;
        v9 = *(v4 - 2);
        sub_1BDDB6CA4(v9, v8);
        if (v8 >> 60 == 15)
          goto LABEL_3;
        v39 = v9;
        v40 = v8;
        v28 = (_QWORD *)*a3;
        v29 = sub_1BDDB7F0C(v9, v8);
        v31 = v28[2];
        v32 = (v30 & 1) == 0;
        v15 = __OFADD__(v31, v32);
        v33 = v31 + v32;
        if (v15)
          goto LABEL_25;
        v17 = v30;
        if (v28[3] < v33)
        {
          sub_1BDE5F540(v33, 1);
          v29 = sub_1BDDB7F0C(v9, v8);
          if ((v17 & 1) != (v34 & 1))
            goto LABEL_7;
        }
        if ((v17 & 1) != 0)
          goto LABEL_10;
        v35 = (_QWORD *)*a3;
        *(_QWORD *)(*a3 + 8 * (v29 >> 6) + 64) |= 1 << v29;
        v36 = (uint64_t *)(v35[6] + 16 * v29);
        *v36 = v9;
        v36[1] = v8;
        *(_QWORD *)(v35[7] + 8 * v29) = v27;
        v37 = v35[2];
        v15 = __OFADD__(v37, 1);
        v38 = v37 + 1;
        if (v15)
          goto LABEL_26;
        ++v7;
        v35[2] = v38;
        v4 += 3;
        if (v6 == v7)
          goto LABEL_3;
      }
      goto LABEL_27;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = v11;
  sub_1BDE642C4();
  v11 = v22;
  if ((v17 & 1) == 0)
    goto LABEL_13;
LABEL_10:
  sub_1BDDFCAFC();
  v19 = (void *)swift_allocError();
  *(_QWORD *)v20 = 0xD000000000000015;
  *(_QWORD *)(v20 + 8) = 0x80000001BE1CD7D0;
  *(_BYTE *)(v20 + 16) = 0;
  swift_willThrow();
  v21 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v39, v40);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_28:
  sub_1BE1B305C();
  sub_1BE1B284C();
  sub_1BE1B3164();
  sub_1BE1B284C();
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BDF169D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v5;
  a2[3] = v4;
  sub_1BDDB6CA4(v3, v2);
  return swift_retain();
}

void sub_1BDF16A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65[3];
  unsigned __int8 v66[32];
  unint64_t v67;

  v5 = type metadata accessor for Proto_RetainCounts(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = (uint64_t *)sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v67 = sub_1BDDB6CE8(v8);
  sub_1BDD9C318(a1, (uint64_t)v7, type metadata accessor for Proto_RetainCounts);
  v66[0] = 1;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  v10 = sub_1BDE12178((uint64_t)v7, v66);
  if (v2)
  {
    swift_release();
    sub_1BDD9C3E0(a1, type metadata accessor for Proto_RetainCounts);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v62 = v9;
    v11 = *(int *)(v5 + 20);
    v12 = *(_QWORD *)(a1 + v11);
    v13 = (uint64_t *)(v12
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceKeys);
    v14 = v10;
    swift_beginAccess();
    v15 = *v13;
    v16 = (uint64_t *)(v12
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceRetainCounts);
    swift_beginAccess();
    v17 = *v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = (_QWORD *)sub_1BDF15924(v15, v17, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1BDF171F8, v14);
    v56 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED650);
      v19 = sub_1BE1B3260();
    }
    else
    {
      v19 = MEMORY[0x1E0DEE9E0];
    }
    v65[0] = v19;
    sub_1BDF16614(v18, 1, v65);
    v61 = a2;
    v54[2] = 0;
    swift_bridgeObjectRelease();
    v54[1] = v65[0];
    v55 = a1;
    v20 = *(_QWORD *)(a1 + v11);
    v21 = (uint64_t *)(v20
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assetRetainCounts);
    swift_beginAccess();
    v62 = v21;
    v22 = *(_QWORD *)(*v21 + 16);
    v23 = sub_1BDE067B0(0, v22, 0, MEMORY[0x1E0DEE9D8]);
    v60 = v22;
    if (v22)
    {
      v24 = (uint64_t *)(v20
                      + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assetDigests);
      swift_beginAccess();
      v25 = 0;
      v26 = v22;
      while (v25 != 0x7FFFFFFFFFFFFFE0)
      {
        if (v25 + 32 <= v25)
          goto LABEL_26;
        v27 = *v24;
        v28 = v24[1];
        sub_1BDDB6CA4(*v24, v28);
        v29 = sub_1BE1B1E5C();
        v31 = v30;
        sub_1BDDB796C(v27, v28);
        sub_1BDE08544(v29, v31);
        v33 = v32;
        v35 = v34;
        v37 = v23[2];
        v36 = v23[3];
        if (v37 >= v36 >> 1)
          v23 = sub_1BDE067B0((_QWORD *)(v36 > 1), v37 + 1, 1, v23);
        v23[2] = v37 + 1;
        v38 = &v23[2 * v37];
        v38[4] = v33;
        v38[5] = v35;
        v25 += 32;
        if (!--v26)
          goto LABEL_13;
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    else
    {
LABEL_13:
      v39 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DFF0);
      sub_1BE1B25D0();
      v40 = *v62;
      v60 = v23[2];
      v54[0] = v23;
      if (v60)
      {
        v41 = *(_QWORD *)(v40 + 16);
        v42 = v67;
        v58 = v40 + 32;
        v59 = v41;
        swift_bridgeObjectRetain();
        v43 = 0;
        v44 = v39 + 5;
        v57 = v40;
        while (v59 != v43)
        {
          if (v43 >= *(_QWORD *)(v40 + 16))
            goto LABEL_27;
          v46 = *(v44 - 1);
          v47 = *v44;
          v62 = *(uint64_t **)(v58 + 8 * v43);
          sub_1BDDB6CA4(v46, v47);
          sub_1BE108BC8(v46, v47, &v64);
          v48 = v64;
          v49 = *(_QWORD *)(v64 + 16);
          v50 = *(_QWORD *)(v64 + 24);
          if (*(_QWORD *)(v42 + 16))
          {
            swift_retain();
            sub_1BDDB6CA4(v49, v50);
            v51 = sub_1BDE5E12C(v49, v50);
            if ((v52 & 1) != 0)
            {
              v53 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 16 * v51);
              swift_retain();
              sub_1BDDB796C(v49, v50);
              swift_release();
              swift_release();
              if (v53)
              {
                __break(1u);
                goto LABEL_23;
              }
            }
            else
            {
              sub_1BDDB796C(v49, v50);
              swift_release();
            }
          }
          ++v43;
          v44 += 2;
          swift_retain();
          sub_1BDDB6CA4(v49, v50);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v63 = v42;
          sub_1BE15443C(v48, (uint64_t)v62, v49, v50, isUniquelyReferenced_nonNull_native);
          v42 = v63;
          v67 = v63;
          swift_bridgeObjectRelease();
          sub_1BDDB796C(v49, v50);
          sub_1BDDB796C(v46, v47);
          swift_release();
          v40 = v57;
          if (v60 == v43)
            break;
        }
      }
      else
      {
LABEL_23:
        swift_bridgeObjectRetain();
      }
      swift_release();
      swift_release();
      sub_1BDD9C3E0(v55, type metadata accessor for Proto_RetainCounts);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1BDF16FF4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;

  v7 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for Proto_RetainCounts(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v16 - v12;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_1BDDB6CA4(a1, a2);
  sub_1BE1B20FC();
  sub_1BDF171B8(&qword_1EF52BB50, 255, type metadata accessor for Proto_RetainCounts, (uint64_t)&unk_1BE1C642C);
  sub_1BE1B2270();
  if (v3)
  {
    swift_release();
    sub_1BDDB796C(a1, a2);
  }
  else
  {
    sub_1BDD9C318((uint64_t)v13, (uint64_t)v11, type metadata accessor for Proto_RetainCounts);
    sub_1BDF16A0C((uint64_t)v11, a3);
    a3 = v14;
    sub_1BDDB796C(a1, a2);
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_RetainCounts);
  }
  return a3;
}

uint64_t sub_1BDF171B8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1C3B7DF54](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BDF171F8(uint64_t a1, uint64_t a2)
{
  sub_1BDF15F0C(a1, a2);
}

uint64_t sub_1BDF17210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_KeyPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF17254(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DFF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDF17294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52DFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF172DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _UNKNOWN **v65;
  uint64_t v66;
  uint64_t v67;

  v5 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_bridgeObjectRetain();
  v67 = sub_1BDF1A524(v8);
  v66 = a1;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1BDDC48BC(v9);
  if (!v10[2])
  {
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v67;
  }
  v55 = v2;
  v60 = a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  result = swift_beginAccess();
  v12 = 0;
  v13 = v10[2];
  v56 = v7;
  v57 = v5;
  while (1)
  {
    if (v12 >= v13)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v16 = &v10[2 * v12];
    v17 = v16[4];
    v18 = v16[5];
    sub_1BDF1AB98(v60, (uint64_t)v7);
    v19 = *(_QWORD *)&v7[*(int *)(v5 + 20)];
    v20 = *(_QWORD *)(v19 + 16);
    sub_1BDDB6CA4(v17, v18);
    if (v20)
    {
      v21 = sub_1BDDB7F0C(v17, v18);
      if ((v22 & 1) != 0)
        break;
    }
    sub_1BDF1ABDC((uint64_t)v7);
    v14 = v17;
    v15 = v18;
LABEL_4:
    ++v12;
    result = sub_1BDDB796C(v14, v15);
    v13 = v10[2];
    if (v12 >= v13)
      goto LABEL_39;
  }
  v58 = v18;
  v59 = v17;
  v61 = v10;
  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 48 * v21);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDF1ABDC((uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_38:
    v10 = v61;
    v15 = v58;
    v14 = v59;
    goto LABEL_4;
  }
  v24 = type metadata accessor for RetainVisitor();
  v25 = swift_allocObject();
  v26 = MEMORY[0x1E0DEE9D8];
  v27 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v28 = sub_1BDDB6CE8(v26);
  *(_QWORD *)(v25 + 16) = v27;
  *(_QWORD *)(v25 + 24) = v28;
  v64 = v24;
  v65 = &off_1E7755DD0;
  v62 = v25;
  v29 = *(void (**)(uint64_t *))(*(_QWORD *)v23 + 120);
  swift_retain();
  v29(&v62);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  swift_release();
  swift_beginAccess();
  v30 = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v32 = v30 + 64;
  v31 = *(_QWORD *)(v30 + 64);
  v33 = 1 << *(_BYTE *)(v30 + 32);
  result = swift_bridgeObjectRelease();
  v34 = 0;
  if (v33 < 64)
    v35 = ~(-1 << v33);
  else
    v35 = -1;
  v36 = v35 & v31;
  v37 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      v38 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v39 = v38 | (v34 << 6);
      goto LABEL_14;
    }
    v44 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v44 >= v37)
      goto LABEL_37;
    v45 = *(_QWORD *)(v32 + 8 * v44);
    ++v34;
    if (!v45)
    {
      v34 = v44 + 1;
      if (v44 + 1 >= v37)
        goto LABEL_37;
      v45 = *(_QWORD *)(v32 + 8 * v34);
      if (!v45)
      {
        v34 = v44 + 2;
        if (v44 + 2 >= v37)
          goto LABEL_37;
        v45 = *(_QWORD *)(v32 + 8 * v34);
        if (!v45)
        {
          v34 = v44 + 3;
          if (v44 + 3 >= v37)
            goto LABEL_37;
          v45 = *(_QWORD *)(v32 + 8 * v34);
          if (!v45)
          {
            v46 = v44 + 4;
            if (v46 >= v37)
            {
LABEL_37:
              swift_release();
              v7 = v56;
              v5 = v57;
              goto LABEL_38;
            }
            v45 = *(_QWORD *)(v32 + 8 * v46);
            v34 = v46;
            if (!v45)
              break;
          }
        }
      }
    }
LABEL_31:
    v36 = (v45 - 1) & v45;
    v39 = __clz(__rbit64(v45)) + (v34 << 6);
LABEL_14:
    v40 = (uint64_t *)(*(_QWORD *)(v30 + 48) + 16 * v39);
    v42 = *v40;
    v41 = v40[1];
    sub_1BDDB6CA4(*v40, v41);
    sub_1BDDB6CA4(v42, v41);
    v43 = sub_1BDDBC6BC(&v62, v42, v41);
    sub_1BDDB796C(v62, v63);
    if ((v43 & 1) != 0)
    {
      sub_1BDDB6CA4(v42, v41);
      sub_1BDDBC6BC(&v62, v42, v41);
      sub_1BDDB796C(v62, v63);
      sub_1BDDB6CA4(v42, v41);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v61 = sub_1BDE0667C(0, v61[2] + 1, 1, v61);
      v48 = v61[2];
      v47 = v61[3];
      v49 = v48 + 1;
      if (v48 >= v47 >> 1)
      {
        v54 = v48 + 1;
        v52 = sub_1BDE0667C((_QWORD *)(v47 > 1), v48 + 1, 1, v61);
        v49 = v54;
        v61 = v52;
      }
      v50 = v61;
      v61[2] = v49;
      v51 = &v50[2 * v48];
      v51[4] = v42;
      v51[5] = v41;
    }
    result = sub_1BDDB796C(v42, v41);
  }
  while (1)
  {
    v34 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v34 >= v37)
      goto LABEL_37;
    v45 = *(_QWORD *)(v32 + 8 * v34);
    ++v46;
    if (v45)
      goto LABEL_31;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1BDF177A0(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *, uint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t (*v49)(uint64_t *);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v9 = swift_bridgeObjectRetain();
  v49 = a2;
  v10 = sub_1BDDC6728(v9, a2);
  v11 = v5;
  v53 = v10;
  v52 = a1;
  v12 = swift_bridgeObjectRetain();
  result = (uint64_t)sub_1BDDC48BC(v12);
  v48 = (_QWORD *)result;
  v14 = *(_QWORD *)(result + 16);
  if (!v14)
    goto LABEL_38;
  v10 = 0;
  v42 = a5;
  v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 88);
  while (1)
  {
    if (v10 >= v14)
      goto LABEL_42;
    v17 = &v48[2 * v10];
    v15 = v17[4];
    v16 = v17[5];
    v50 = v15;
    v51 = v16;
    sub_1BDDB6CA4(v15, v16);
    v18 = v11;
    v19 = v43(&v50, a4, a5);
    if (v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v15, v16);
      swift_bridgeObjectRelease();
      return v10;
    }
    v20 = v19;
    if (v19)
      break;
LABEL_4:
    ++v10;
    result = sub_1BDDB796C(v15, v16);
    v14 = v48[2];
    if (v10 >= v14)
    {
      v10 = v53;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
  }
  v45 = v16;
  v46 = v15;
  v47 = v10;
  v22 = v19 + 64;
  v21 = *(_QWORD *)(v19 + 64);
  v23 = 1 << *(_BYTE *)(v19 + 32);
  result = swift_bridgeObjectRelease();
  v24 = 0;
  if (v23 < 64)
    v25 = ~(-1 << v23);
  else
    v25 = -1;
  v26 = v25 & v21;
  v27 = (unint64_t)(v23 + 63) >> 6;
  while (v26)
  {
    v29 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    v30 = v29 | (v24 << 6);
LABEL_30:
    v34 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * v30);
    v36 = *v34;
    v35 = v34[1];
    sub_1BDDB6CA4(*v34, v35);
    sub_1BDDB6CA4(v36, v35);
    v37 = sub_1BDDBC6BC(&v50, v36, v35);
    sub_1BDDB796C(v50, v51);
    if ((v37 & 1) != 0)
    {
      v50 = v36;
      v51 = v35;
      if ((v49(&v50) & 1) != 0)
      {
        sub_1BDDB6CA4(v36, v35);
        sub_1BDDBC6BC(&v50, v36, v35);
        sub_1BDDB796C(v50, v51);
        sub_1BDDB6CA4(v36, v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v48 = sub_1BDE0667C(0, v48[2] + 1, 1, v48);
        v39 = v48[2];
        v38 = v48[3];
        v40 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          v41 = sub_1BDE0667C((_QWORD *)(v38 > 1), v39 + 1, 1, v48);
          v40 = v39 + 1;
          v48 = v41;
        }
        v48[2] = v40;
        v28 = &v48[2 * v39];
        v28[4] = v36;
        v28[5] = v35;
      }
    }
    result = sub_1BDDB796C(v36, v35);
  }
  v31 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v31 >= v27)
    goto LABEL_3;
  v32 = *(_QWORD *)(v22 + 8 * v31);
  ++v24;
  if (v32)
    goto LABEL_29;
  v24 = v31 + 1;
  if (v31 + 1 >= v27)
    goto LABEL_3;
  v32 = *(_QWORD *)(v22 + 8 * v24);
  if (v32)
    goto LABEL_29;
  v24 = v31 + 2;
  if (v31 + 2 >= v27)
    goto LABEL_3;
  v32 = *(_QWORD *)(v22 + 8 * v24);
  if (v32)
  {
LABEL_29:
    v26 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v24 << 6);
    goto LABEL_30;
  }
  v33 = v31 + 3;
  if (v33 >= v27)
  {
LABEL_3:
    swift_release();
    v10 = v47;
    v11 = v18;
    a5 = v42;
    v16 = v45;
    v15 = v46;
    goto LABEL_4;
  }
  v32 = *(_QWORD *)(v22 + 8 * v33);
  if (v32)
  {
    v24 = v33;
    goto LABEL_29;
  }
  while (1)
  {
    v24 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v24 >= v27)
      goto LABEL_3;
    v32 = *(_QWORD *)(v22 + 8 * v24);
    ++v33;
    if (v32)
      goto LABEL_29;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1BDF17B24(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v23)(uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t result;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t *);
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t *__return_ptr, uint64_t *, _QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  void (*v96)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t AssociatedTypeWitness;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t AssociatedConformanceWitness;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t (*v120)(_QWORD);
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;

  v122 = a5;
  v102 = a4;
  v115 = a3;
  v120 = a2;
  v101 = sub_1BE1B1F58();
  v100 = *(_QWORD *)(v101 - 8);
  v13 = MEMORY[0x1E0C80A78](v101);
  v99 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v98 = (char *)&v94 - v15;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v105 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v110 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v103 = (char *)&v94 - v16;
  v107 = swift_checkMetadataState();
  v106 = *(_QWORD *)(v107 - 8);
  v17 = MEMORY[0x1E0C80A78](v107);
  v118 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v94 - v19;
  v138 = MEMORY[0x1E0DEE9E8];
  v131 = MEMORY[0x1E0DEE9E8];
  v132 = MEMORY[0x1E0DEE9E8];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 24))(&v126, a6, a8);
  v108 = v126;
  v109 = v127;
  v114 = v8;
  v129 = v8;
  v117 = a7;
  v21 = *(_QWORD *)(a7 + 16);
  v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 24);
  v22(&v126, v122, v21);
  v129 = v126;
  v130 = v127;
  v23 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a8 + 56);
  v119 = a1;
  v24 = v121;
  v23(&v129, a6, a8);
  v121 = v24;
  if (!v24)
  {
    v96 = v22;
    v113 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 40);
    v27 = v107;
    v111 = a6;
    v112 = a8;
    v26(v20, v107, AssociatedConformanceWitness, a6, a8);
    v28 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
    v97 = v20;
    v95 = v28;
    v28(v118, v20, v27);
    v29 = v103;
    sub_1BE1B2888();
    v30 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_1BE1B2F00();
    v31 = v127;
    if (v127 >> 60 == 15)
    {
      v32 = v117;
      v33 = v121;
    }
    else
    {
      v39 = v126;
      v32 = v117;
      v40 = (uint64_t (*)(uint64_t *))v120;
      v33 = v121;
      do
      {
        if (v40)
        {
          v126 = v39;
          v127 = v31;
          swift_retain();
          v41 = v40(&v126);
          sub_1BDE0D5B8((uint64_t)v40);
          if ((v41 & 1) == 0)
            goto LABEL_10;
        }
        sub_1BDDB6CA4(v39, v31);
        v42 = sub_1BDDBC6BC(&v126, v39, v31);
        sub_1BDDB796C(v126, v127);
        if ((v42 & 1) == 0)
          goto LABEL_10;
        v126 = v39;
        v127 = v31;
        (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v32 + 56))(&v129, &v126, v122, v32);
        if (v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v110 + 8))(v29, v30);
          (*(void (**)(char *, uint64_t))(v106 + 8))(v97, v107);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return sub_1BDD9CC0C(v39, v31);
        }
        v43 = v129;
        if (v129)
        {
          v129 = v39;
          v130 = v31;
          v123[0] = v43;
          v44 = v112;
          v45 = *(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v112 + 48);
          swift_retain();
          v45(&v126, &v129, v123, &type metadata for AnyCRDT, &off_1E775A650, v111, v44);
          v33 = 0;
          swift_release();
          v46 = v126;
          if (v126)
          {
            v47 = v127;
            v121 = v128;
            sub_1BDDB6CA4(v39, v31);
            sub_1BDDBC6BC(&v126, v39, v31);
            sub_1BDDB796C(v126, v127);
            v129 = v39;
            v130 = v31;
            AssociatedTypeWitness = v47;
            v123[0] = v47;
            v123[1] = v121;
            v124 = v46;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, _QWORD *, uint64_t))(v117 + 48))(&v125, &v126, &v129, &v124, v123, v122);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_release();
          sub_1BDD9CC0C(v39, v31);
          v32 = v117;
        }
        else
        {
LABEL_10:
          sub_1BDD9CC0C(v39, v31);
        }
        sub_1BE1B2F00();
        v39 = v126;
        v31 = v127;
        v40 = (uint64_t (*)(uint64_t *))v120;
      }
      while (v127 >> 60 != 15);
    }
    (*(void (**)(char *, uint64_t))(v110 + 8))(v29, v30);
    swift_bridgeObjectRelease();
    v34 = v102;
    if (v102)
    {
      v35 = v114;
      v121 = v33;
      if ((v102 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1BE1B2FB4();
        type metadata accessor for AnyReference();
        sub_1BDF1A8A8();
        result = sub_1BE1B2BDC();
        v34 = v133;
        v115 = v134;
        v36 = v135;
        v37 = v136;
        v38 = v137;
      }
      else
      {
        v52 = -1 << *(_BYTE *)(v102 + 32);
        v53 = *(_QWORD *)(v102 + 56);
        v115 = v102 + 56;
        v54 = ~v52;
        v55 = -v52;
        if (v55 < 64)
          v56 = ~(-1 << v55);
        else
          v56 = -1;
        v38 = v56 & v53;
        result = swift_bridgeObjectRetain();
        v36 = v54;
        v37 = 0;
      }
      v51 = v118;
      AssociatedTypeWitness = v34 & 0x7FFFFFFFFFFFFFFFLL;
      v102 = v36;
      v110 = (unint64_t)(v36 + 64) >> 6;
      v103 = (char *)(MEMORY[0x1E0DEE9B0] + 8);
      while (1)
      {
        v120 = (uint64_t (*)(_QWORD))v37;
        AssociatedConformanceWitness = v38;
        if (v34 < 0)
        {
          v59 = sub_1BE1B3008();
          if (!v59)
          {
            v33 = v121;
            v50 = v119;
            goto LABEL_59;
          }
          v129 = v59;
          type metadata accessor for AnyReference();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v60 = v126;
          swift_unknownObjectRelease();
          if (!v60)
            goto LABEL_53;
        }
        else
        {
          if (v38)
          {
            v57 = __clz(__rbit64(v38));
            v38 &= v38 - 1;
            v58 = v57 | (v37 << 6);
          }
          else
          {
            if (__OFADD__(v37++, 1))
            {
              __break(1u);
              return result;
            }
            if (v37 >= v110)
            {
              v33 = v121;
              v50 = v119;
              goto LABEL_59;
            }
            v62 = *(_QWORD *)(v115 + 8 * v37);
            v50 = v119;
            if (!v62)
            {
              v63 = v37 + 1;
              if (v37 + 1 >= v110)
                goto LABEL_58;
              v62 = *(_QWORD *)(v115 + 8 * v63);
              if (v62)
                goto LABEL_41;
              v63 = v37 + 2;
              if (v37 + 2 >= v110)
                goto LABEL_58;
              v62 = *(_QWORD *)(v115 + 8 * v63);
              if (v62)
              {
LABEL_41:
                v37 = v63;
              }
              else
              {
                v37 += 3;
                if (v37 >= v110)
                {
LABEL_58:
                  v33 = v121;
                  goto LABEL_59;
                }
                v62 = *(_QWORD *)(v115 + 8 * v37);
                if (!v62)
                {
                  v70 = (char *)v120 + 5;
                  while ((char *)v110 != v70)
                  {
                    v62 = *(_QWORD *)(v115 + 8 * (_QWORD)v70++);
                    if (v62)
                    {
                      v37 = (int64_t)(v70 - 1);
                      goto LABEL_42;
                    }
                  }
                  v33 = v121;
                  goto LABEL_59;
                }
              }
            }
LABEL_42:
            v38 = (v62 - 1) & v62;
            v58 = __clz(__rbit64(v62)) + (v37 << 6);
          }
          v60 = *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * v58);
          swift_retain();
          if (!v60)
          {
LABEL_53:
            v33 = v121;
            v51 = v118;
            v50 = v119;
LABEL_59:
            sub_1BDE27FD0();
            v32 = v117;
            v48 = v122;
            v49 = v111;
            goto LABEL_60;
          }
        }
        v64 = v34;
        v129 = v35;
        v65 = v35;
        v67 = *(_QWORD *)(v60 + 16);
        v66 = *(_QWORD *)(v60 + 24);
        v126 = v67;
        v127 = v66;
        v68 = v122;
        if (((*(uint64_t (**)(uint64_t *, uint64_t))(v113 + 64))(&v126, v122) & 1) != 0)
        {
          result = swift_release();
          v35 = v65;
        }
        else
        {
          sub_1BDDB6CA4(v67, v66);
          sub_1BDDBC6BC(&v126, v67, v66);
          sub_1BDDB796C(v126, v127);
          v69 = v121;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 64))(&v126, v60, v119, v111, v112, v68);
          v121 = v69;
          if (v69)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BDE27FD0();
            (*(void (**)(char *, uint64_t))(v106 + 8))(v97, v107);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          v35 = v65;
          swift_release();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
        }
        v51 = v118;
        v34 = v64;
      }
    }
    v48 = v122;
    v49 = v111;
    v51 = v118;
    v50 = v119;
    v35 = v114;
LABEL_60:
    v71 = swift_bridgeObjectRetain();
    v72 = sub_1BDF198EC(v71, v50, v48, v49, v32, v112);
    if (v33)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v97, v107);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v74 = v72;
    v75 = v73;
    swift_bridgeObjectRelease();
    sub_1BDDBC54C(v74);
    sub_1BDDBC54C(v75);
    v129 = v35;
    v96(&v126, v48, v113);
    v76 = v126;
    if ((sub_1BDDB04C0(v127, v109) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v77 = v107;
      v78 = v112;
    }
    else
    {
      v79 = sub_1BDDB04C0(v76, v108);
      swift_bridgeObjectRelease();
      v80 = swift_bridgeObjectRelease();
      v77 = v107;
      v78 = v112;
      if ((v79 & 1) == 0)
      {
        v82 = v107;
LABEL_67:
        v84 = v108;
        MEMORY[0x1E0C80A78](v80);
        v85 = v109;
        *(&v94 - 2) = v84;
        *(&v94 - 1) = v85;
        v86 = v122;
        (*(void (**)(uint64_t (*)()))(v32 + 24))(sub_1BDF1A86C);
        v129 = v35;
        v96(&v126, v86, v113);
        v87 = v126;
        if ((sub_1BDDBDDBC(v127, v85) & 1) != 0)
        {
          v88 = sub_1BDDBDDBC(v87, v108);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v88 & 1) != 0)
          {
            v89 = v98;
            (*(void (**)(uint64_t))(v112 + 32))(v111);
LABEL_72:
            v90 = v122;
            (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v89, v122, v32);
            (*(void (**)(char *, uint64_t))(v100 + 8))(v89, v101);
            v91 = v138;
            if (*(_QWORD *)(v138 + 16))
            {
              v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
              v93 = swift_bridgeObjectRetain();
              v92(v93, v90, v32);
              swift_bridgeObjectRelease();
            }
            sub_1BDDBC54C(v91);
            (*(void (**)(uint64_t, uint64_t))(v32 + 104))(v90, v32);
            (*(void (**)(char *, uint64_t))(v106 + 8))(v97, v82);
            return v132;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v89 = v99;
        sub_1BE1B1F4C();
        goto LABEL_72;
      }
    }
    v126 = v108;
    v127 = v109;
    v95(v51, v97, v77);
    sub_1BDDBFF68();
    v82 = v77;
    v81 = sub_1BE1B2C00();
    v83 = sub_1BDF1A230(&v126, v81, v119, v122, v111, v32, v78);
    swift_bridgeObjectRelease();
    v80 = sub_1BDDBC54C(v83);
    goto LABEL_67;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDF18BBC(unint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t (*v45)(unint64_t *, unint64_t, uint64_t, uint64_t);
  char v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v60;
  unint64_t v61;
  __int128 v63;
  _QWORD v64[2];
  unint64_t v65;
  unint64_t v66;
  int64_t v67;

  v8 = sub_1BDDB6CE8(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v65 = v8;
  sub_1BDDB87E8(a2, (uint64_t)sub_1BDF169D8, 0, isUniquelyReferenced_nonNull_native, &v65);
  if (v5)
    goto LABEL_78;
  v10 = v65;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_37:
    v33 = 0;
    v61 = v10 + 64;
    v34 = 1 << *(_BYTE *)(v10 + 32);
    v35 = -1;
    if (v34 < 64)
      v35 = ~(-1 << v34);
    v36 = v35 & *(_QWORD *)(v10 + 64);
    v67 = (unint64_t)(v34 + 63) >> 6;
    v54 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v55 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v57 = v10;
    while (1)
    {
      if (v36)
      {
        v37 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        v38 = v37 | (v33 << 6);
      }
      else
      {
        v20 = __OFADD__(v33++, 1);
        if (v20)
          goto LABEL_76;
        if (v33 >= v67)
        {
LABEL_73:
          swift_release();
          return (uint64_t)v54;
        }
        v39 = *(_QWORD *)(v61 + 8 * v33);
        if (!v39)
        {
          v40 = v33 + 1;
          if (v33 + 1 >= v67)
            goto LABEL_73;
          v39 = *(_QWORD *)(v61 + 8 * v40);
          if (!v39)
          {
            v40 = v33 + 2;
            if (v33 + 2 >= v67)
              goto LABEL_73;
            v39 = *(_QWORD *)(v61 + 8 * v40);
            if (!v39)
            {
              v40 = v33 + 3;
              if (v33 + 3 >= v67)
                goto LABEL_73;
              v39 = *(_QWORD *)(v61 + 8 * v40);
              if (!v39)
              {
                while (1)
                {
                  v33 = v40 + 1;
                  if (__OFADD__(v40, 1))
                    goto LABEL_77;
                  if (v33 >= v67)
                    goto LABEL_73;
                  v39 = *(_QWORD *)(v61 + 8 * v33);
                  ++v40;
                  if (v39)
                    goto LABEL_54;
                }
              }
            }
          }
          v33 = v40;
        }
LABEL_54:
        v36 = (v39 - 1) & v39;
        v38 = __clz(__rbit64(v39)) + (v33 << 6);
      }
      v41 = 16 * v38;
      v42 = (unint64_t *)(*(_QWORD *)(v10 + 56) + v41);
      v43 = v42[1];
      if (v43)
      {
        v63 = *(_OWORD *)(*(_QWORD *)(v10 + 48) + v41);
        v44 = *v42;
        v65 = *v42;
        v45 = *(uint64_t (**)(unint64_t *, unint64_t, uint64_t, uint64_t))(a5 + 16);
        swift_retain_n();
        sub_1BDDB6CA4(v63, *((unint64_t *)&v63 + 1));
        v46 = v45(&v65, v43, a4, a5);
        swift_release();
        if (v46)
        {
          if (v46 == 1)
          {
            sub_1BDDB6CA4(v63, *((unint64_t *)&v63 + 1));
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v47 = v55;
            else
              v47 = sub_1BDE067B0(0, v55[2] + 1, 1, v55);
            v49 = v47[2];
            v48 = v47[3];
            if (v49 >= v48 >> 1)
              v47 = sub_1BDE067B0((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
            v47[2] = v49 + 1;
            v55 = v47;
            *(_OWORD *)&v47[2 * v49 + 4] = v63;
          }
        }
        else
        {
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v50 = v54;
          else
            v50 = sub_1BDE06BF0(0, v54[2] + 1, 1, v54);
          v52 = v50[2];
          v51 = v50[3];
          if (v52 >= v51 >> 1)
            v50 = sub_1BDE06BF0((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
          v50[2] = v52 + 1;
          v54 = v50;
          v50[v52 + 4] = v44;
        }
        sub_1BDDB796C(v63, *((unint64_t *)&v63 + 1));
        swift_release();
        v10 = v57;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v56 = v10;
    v12 = sub_1BDDB6E0C(v11);
    v13 = sub_1BDDB6CE8(v11);
    swift_bridgeObjectRelease();
    v14 = 0;
    v65 = v12;
    v66 = v13;
    v60 = a1 + 64;
    v15 = 1 << *(_BYTE *)(a1 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & *(_QWORD *)(a1 + 64);
    v67 = (unint64_t)(v15 + 63) >> 6;
    while (1)
    {
      if (v17)
      {
        v18 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v19 = v18 | (v14 << 6);
        goto LABEL_23;
      }
      v20 = __OFADD__(v14++, 1);
      if (v20)
      {
        __break(1u);
        goto LABEL_75;
      }
      if (v14 >= v67)
      {
LABEL_33:
        v30 = v56;
        v11 = MEMORY[0x1E0DEE9D8];
        goto LABEL_35;
      }
      v21 = *(_QWORD *)(v60 + 8 * v14);
      if (!v21)
        break;
LABEL_22:
      v17 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_23:
      v23 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v19);
      v24 = *v23;
      v25 = v23[1];
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v19);
      if ((a3 & 1) != 0 || v26)
      {
        v64[0] = *v23;
        v64[1] = v25;
        v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a5 + 8);
        sub_1BDDB6CA4(v24, v25);
        v28 = v27(v64, v26, a4, a5);
        if ((unint64_t)(v28 - 1) < 2)
        {
          sub_1BDDCCD34(v28);
          goto LABEL_9;
        }
        if (!v28 || v28 == 3)
        {
LABEL_9:
          sub_1BDDB796C(v24, v25);
        }
        else
        {
          sub_1BDDB8E4C(v28, v29);
          sub_1BDDB796C(v24, v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    v22 = v14 + 1;
    if (v14 + 1 >= v67)
      goto LABEL_34;
    v21 = *(_QWORD *)(v60 + 8 * v22);
    if (v21)
      goto LABEL_21;
    v22 = v14 + 2;
    if (v14 + 2 >= v67)
      goto LABEL_34;
    v21 = *(_QWORD *)(v60 + 8 * v22);
    if (v21)
      goto LABEL_21;
    v22 = v14 + 3;
    if (v14 + 3 >= v67)
    {
LABEL_34:
      v30 = v56;
      v11 = MEMORY[0x1E0DEE9D8];
LABEL_35:
      swift_release();
      v31 = v66;
      swift_bridgeObjectRetain_n();
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v64[0] = v30;
      sub_1BDDB87E8(v31, (uint64_t)sub_1BDF169D8, 0, v32, v64);
      v10 = v64[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v65;
      if (!*(_QWORD *)(v65 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  v21 = *(_QWORD *)(v60 + 8 * v22);
  if (v21)
  {
LABEL_21:
    v14 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v14 >= v67)
      goto LABEL_33;
    v21 = *(_QWORD *)(v60 + 8 * v14);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1BDF19284(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  _QWORD v14[9];
  uint64_t v15;

  v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1BE1B2FCC() == *(_DWORD *)(a4 + 36))
      {
        v15 = sub_1BE1B2FD8();
        type metadata accessor for AnyReference();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v8 = v14[0];
        swift_unknownObjectRelease();
        sub_1BE1B36F8();
        (*(void (**)(_QWORD *))(*(_QWORD *)v14[0] + 104))(v14);
        v9 = sub_1BE1B371C();
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v5 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        {
          v11 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 48) + 8 * v5) + 96);
          swift_retain();
          LOBYTE(v11) = v11(v8);
          swift_release();
          if ((v11 & 1) == 0)
          {
            v12 = ~v10;
            do
            {
              v5 = (v5 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
                goto LABEL_25;
              v13 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 48) + 8 * v5) + 96);
              swift_retain();
              LOBYTE(v13) = v13(v8);
              swift_release();
            }
            while ((v13 & 1) == 0);
          }
          swift_release();
LABEL_20:
          v7 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
LABEL_25:
        result = swift_release();
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v6 = a4;
    else
      v6 = a4 & 0xFFFFFFFFFFFFFF8;
    v15 = MEMORY[0x1C3B7CEE0](result, a2, v6);
    type metadata accessor for AnyReference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v7 = v14[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1BDF194F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v48;
  uint64_t v49[2];
  uint64_t v50;

  v4 = v3;
  v5 = a1;
  v50 = MEMORY[0x1E0DEE9E8];
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v39 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  v37 = v6;
  v38 = result;
  while (1)
  {
    if (v9)
    {
      v40 = (v9 - 1) & v9;
      v41 = v11;
      v12 = __clz(__rbit64(v9)) | (v11 << 6);
    }
    else
    {
      v13 = __OFADD__(v11, 1);
      v14 = v11 + 1;
      if (v13)
        goto LABEL_55;
      if (v14 >= v39)
      {
LABEL_52:
        swift_release();
        return v50;
      }
      v15 = *(_QWORD *)(v6 + 8 * v14);
      if (!v15)
      {
        v16 = v14 + 1;
        if (v14 + 1 >= v39)
          goto LABEL_52;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v16 = v14 + 2;
          if (v14 + 2 >= v39)
            goto LABEL_52;
          v15 = *(_QWORD *)(v6 + 8 * v16);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v14 + 3 >= v39)
              goto LABEL_52;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v14 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_56;
                if (v14 >= v39)
                  goto LABEL_52;
                v15 = *(_QWORD *)(v6 + 8 * v14);
                ++v16;
                if (v15)
                  goto LABEL_19;
              }
            }
          }
        }
        v14 = v16;
      }
LABEL_19:
      v40 = (v15 - 1) & v15;
      v41 = v14;
      v12 = __clz(__rbit64(v15)) + (v14 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v12);
    v18 = v17[1];
    v49[0] = *v17;
    v49[1] = v18;
    v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 88);
    v42 = v49[0];
    v43 = v18;
    sub_1BDDB6CA4(v49[0], v18);
    v20 = v19(v49, a2, a3);
    v48 = v21;
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return sub_1BDDB796C(v42, v43);
    }
    if (v20)
      break;
LABEL_6:
    result = sub_1BDDB796C(v42, v43);
    v9 = v40;
    v11 = v41;
  }
  result = swift_bridgeObjectRelease();
  v22 = 0;
  v23 = *(_QWORD *)(v48 + 64);
  v44 = v48 + 64;
  v24 = 1 << *(_BYTE *)(v48 + 32);
  if (v24 < 64)
    v25 = ~(-1 << v24);
  else
    v25 = -1;
  v26 = v25 & v23;
  v45 = (unint64_t)(v24 + 63) >> 6;
  if ((v25 & v23) != 0)
  {
    do
    {
      while (1)
      {
        v27 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        v28 = v27 | (v22 << 6);
LABEL_40:
        v31 = 16 * v28;
        v32 = (uint64_t *)(*(_QWORD *)(v48 + 48) + v31);
        v34 = *v32;
        v33 = v32[1];
        v35 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + v31);
        v36 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 72);
        sub_1BDDB6CA4(*v32, v33);
        swift_retain();
        if ((v36(v34, v33, a2, a3) & 1) != 0)
          break;
        swift_retain();
        sub_1BDE69020(v49, v35);
        sub_1BDDB796C(v34, v33);
        swift_release();
        result = swift_release();
        if (!v26)
          goto LABEL_29;
      }
      swift_release();
      result = sub_1BDDB796C(v34, v33);
    }
    while (v26);
  }
LABEL_29:
  v13 = __OFADD__(v22++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v22 >= v45)
    goto LABEL_5;
  v29 = *(_QWORD *)(v44 + 8 * v22);
  if (v29)
    goto LABEL_39;
  v30 = v22 + 1;
  if (v22 + 1 >= v45)
    goto LABEL_5;
  v29 = *(_QWORD *)(v44 + 8 * v30);
  if (v29)
    goto LABEL_38;
  v30 = v22 + 2;
  if (v22 + 2 >= v45)
    goto LABEL_5;
  v29 = *(_QWORD *)(v44 + 8 * v30);
  if (v29)
    goto LABEL_38;
  v30 = v22 + 3;
  if (v22 + 3 >= v45)
  {
LABEL_5:
    v6 = v37;
    v5 = v38;
    swift_release();
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(v44 + 8 * v30);
  if (v29)
  {
LABEL_38:
    v22 = v30;
LABEL_39:
    v26 = (v29 - 1) & v29;
    v28 = __clz(__rbit64(v29)) + (v22 << 6);
    goto LABEL_40;
  }
  while (1)
  {
    v22 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v22 >= v45)
      goto LABEL_5;
    v29 = *(_QWORD *)(v44 + 8 * v22);
    ++v30;
    if (v29)
      goto LABEL_39;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1BDF198EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(uint64_t *, _QWORD);
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t i;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t);
  int64_t v82;
  uint64_t v83;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  unint64_t v105;
  uint64_t v106;

  v8 = v7;
  v9 = a5;
  v10 = a3;
  v11 = a1;
  v106 = MEMORY[0x1E0DEE9E8];
  v100 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v12 = sub_1BDF1A934(v11, v6, v10, v9);
      if (v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v13 = v12;
      swift_bridgeObjectRelease();
      v90 = v13;
      v92 = v13 & 0xC000000000000001;
      if ((v13 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1BE1B2FB4();
        type metadata accessor for AnyReference();
        sub_1BDF1A8A8();
        result = sub_1BE1B2BDC();
        v13 = v101;
        v83 = v102;
        v15 = v103;
        v16 = v104;
        v17 = v105;
      }
      else
      {
        v18 = -1 << *(_BYTE *)(v13 + 32);
        v83 = v13 + 56;
        v19 = ~v18;
        v20 = -v18;
        if (v20 < 64)
          v21 = ~(-1 << v20);
        else
          v21 = -1;
        v17 = v21 & *(_QWORD *)(v13 + 56);
        result = swift_bridgeObjectRetain();
        v15 = v19;
        v16 = 0;
      }
      v82 = (unint64_t)(v15 + 64) >> 6;
      while ((v13 & 0x8000000000000000) == 0)
      {
        if (v17)
        {
          v24 = (v17 - 1) & v17;
          v25 = __clz(__rbit64(v17)) | (v16 << 6);
          v26 = v16;
        }
        else
        {
          v26 = v16 + 1;
          if (__OFADD__(v16, 1))
          {
            __break(1u);
LABEL_92:
            __break(1u);
            goto LABEL_93;
          }
          if (v26 >= v82)
            goto LABEL_39;
          v29 = *(_QWORD *)(v83 + 8 * v26);
          if (!v29)
          {
            v30 = v16 + 2;
            if (v16 + 2 >= v82)
              goto LABEL_39;
            v29 = *(_QWORD *)(v83 + 8 * v30);
            if (v29)
              goto LABEL_27;
            v30 = v16 + 3;
            if (v16 + 3 >= v82)
              goto LABEL_39;
            v29 = *(_QWORD *)(v83 + 8 * v30);
            if (v29)
            {
LABEL_27:
              v26 = v30;
            }
            else
            {
              v26 = v16 + 4;
              if (v16 + 4 >= v82)
                goto LABEL_39;
              v29 = *(_QWORD *)(v83 + 8 * v26);
              if (!v29)
              {
                v36 = v16 + 5;
                do
                {
                  if (v82 == v36)
                    goto LABEL_39;
                  v29 = *(_QWORD *)(v83 + 8 * v36++);
                }
                while (!v29);
                v26 = v36 - 1;
              }
            }
          }
          v24 = (v29 - 1) & v29;
          v25 = __clz(__rbit64(v29)) + (v26 << 6);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v25);
        swift_retain();
        if (!v28)
          goto LABEL_39;
LABEL_30:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 64))(&v94, v28, a2, a4, a6, a3, a5);
        v17 = v24;
        v31 = v13;
        v32 = v94;
        v33 = v95;
        v96 = v89;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a5 + 16) + 24))(&v94, a3);
        v34 = v94;
        if ((sub_1BDEED578(v95, v33) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_12:
          v22 = *(_QWORD *)(v28 + 16);
          v23 = *(_QWORD *)(v28 + 24);
          sub_1BDDB6CA4(v22, v23);
          sub_1BDDBC6BC(&v94, v22, v23);
          swift_release();
          result = sub_1BDDB796C(v94, v95);
          goto LABEL_13;
        }
        v35 = sub_1BDEED578(v34, v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0)
          goto LABEL_12;
        result = swift_release();
LABEL_13:
        v16 = v26;
        v13 = v31;
      }
      v27 = sub_1BE1B3008();
      if (v27)
      {
        v96 = v27;
        type metadata accessor for AnyReference();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v28 = v94;
        swift_unknownObjectRelease();
        v26 = v16;
        v24 = v17;
        if (v28)
          goto LABEL_30;
      }
LABEL_39:
      sub_1BDE27FD0();
      if (!v92)
      {
        v37 = v90;
        v38 = *(_QWORD *)(v90 + 16);
        if (!v38)
          goto LABEL_44;
LABEL_41:
        v99 = MEMORY[0x1E0DEE9D8];
        sub_1BDD93E38(0, v38 & ~(v38 >> 63), 0);
        if (v92)
        {
          result = sub_1BE1B2FA8();
          v40 = 1;
        }
        else
        {
          result = sub_1BDF1A7E4(v37);
          v40 = v42 & 1;
        }
        v96 = result;
        v97 = v39;
        v98 = v40;
        if ((v38 & 0x8000000000000000) == 0)
        {
          do
          {
            while (1)
            {
              v49 = v96;
              v48 = v97;
              v50 = v98;
              v51 = sub_1BDF19284(v96, v97, v98, v37);
              v52 = *(_QWORD *)(v51 + 16);
              v53 = *(_QWORD *)(v51 + 24);
              sub_1BDDB6CA4(v52, v53);
              swift_release();
              v54 = v99;
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                result = sub_1BDD93E38(0, *(_QWORD *)(v54 + 16) + 1, 1);
                v54 = v99;
              }
              v56 = *(_QWORD *)(v54 + 16);
              v55 = *(_QWORD *)(v54 + 24);
              if (v56 >= v55 >> 1)
              {
                result = sub_1BDD93E38(v55 > 1, v56 + 1, 1);
                v54 = v99;
              }
              *(_QWORD *)(v54 + 16) = v56 + 1;
              v57 = v54 + 16 * v56;
              *(_QWORD *)(v57 + 32) = v52;
              *(_QWORD *)(v57 + 40) = v53;
              if (v92)
                break;
              v37 = v90;
              v43 = sub_1BDFCFFA8(v49, v48, v50, v90);
              v45 = v44;
              v47 = v46;
              sub_1BDE27EC8(v49, v48, v50);
              v96 = v43;
              v97 = v45;
              v98 = v47 & 1;
              if (!--v38)
                goto LABEL_58;
            }
            v37 = v90;
            if ((v50 & 1) == 0)
              goto LABEL_95;
            if (sub_1BE1B2FC0())
              swift_isUniquelyReferenced_nonNull_native();
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFE0);
            v58 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2BA0();
            sub_1BE1B3014();
            v58(&v94, 0);
            --v38;
          }
          while (v38);
LABEL_58:
          sub_1BDE27EC8(v96, v97, v98);
          v41 = v99;
          goto LABEL_59;
        }
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      v37 = v90;
      v38 = sub_1BE1B2FE4();
      if (v38)
        goto LABEL_41;
LABEL_44:
      v41 = MEMORY[0x1E0DEE9D8];
LABEL_59:
      v11 = sub_1BDDBFED0(v41);
      swift_bridgeObjectRelease();
      v59 = sub_1BDDC7F38(v37);
      v8 = 0;
      swift_bridgeObjectRelease();
      v60 = *(_QWORD *)(v59 + 16);
      if (v60)
      {
        v61 = (unint64_t *)(v59 + 40);
        do
        {
          v62 = *(v61 - 1);
          v63 = *v61;
          sub_1BDDB6CA4(v62, *v61);
          sub_1BDDBC6BC(&v94, v62, v63);
          sub_1BDDB796C(v94, v95);
          v61 += 2;
          --v60;
        }
        while (v60);
      }
      swift_bridgeObjectRelease();
      v9 = a5;
      v6 = v89;
      v10 = a3;
      if (!*(_QWORD *)(v11 + 16))
      {
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_65:
  v64 = swift_bridgeObjectRetain();
  v65 = sub_1BDF194F0(v64, v10, v9);
  if (v8)
  {
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  v66 = v65;
  result = swift_bridgeObjectRelease();
  v67 = 0;
  v68 = *(_QWORD *)(v66 + 56);
  v91 = v66 + 56;
  v69 = 1 << *(_BYTE *)(v66 + 32);
  v70 = -1;
  if (v69 < 64)
    v70 = ~(-1 << v69);
  v71 = v70 & v68;
  v93 = (unint64_t)(v69 + 63) >> 6;
  if ((v70 & v68) == 0)
    goto LABEL_71;
LABEL_70:
  v72 = __clz(__rbit64(v71));
  v71 &= v71 - 1;
  for (i = v72 | (v67 << 6); ; i = __clz(__rbit64(v75)) + (v67 << 6))
  {
    v77 = v66;
    v78 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 8 * i);
    v79 = *(_QWORD *)(v78 + 16);
    v80 = *(_QWORD *)(v78 + 24);
    v81 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 72);
    swift_retain();
    sub_1BDDB6CA4(v79, v80);
    v81(&v94, v79, v80, a4, a6);
    sub_1BDDB796C(v79, v80);
    v96 = v94;
    (*(void (**)(uint64_t *, uint64_t))(a5 + 80))(&v96, a3);
    swift_release();
    result = swift_release();
    v66 = v77;
    if (v71)
      goto LABEL_70;
LABEL_71:
    if (__OFADD__(v67++, 1))
      goto LABEL_92;
    if (v67 >= v93)
    {
LABEL_90:
      swift_release();
      return v106;
    }
    v75 = *(_QWORD *)(v91 + 8 * v67);
    if (!v75)
      break;
LABEL_81:
    v71 = (v75 - 1) & v75;
  }
  v76 = v67 + 1;
  if (v67 + 1 >= v93)
    goto LABEL_90;
  v75 = *(_QWORD *)(v91 + 8 * v76);
  if (v75)
    goto LABEL_80;
  v76 = v67 + 2;
  if (v67 + 2 >= v93)
    goto LABEL_90;
  v75 = *(_QWORD *)(v91 + 8 * v76);
  if (v75)
    goto LABEL_80;
  v76 = v67 + 3;
  if (v67 + 3 >= v93)
    goto LABEL_90;
  v75 = *(_QWORD *)(v91 + 8 * v76);
  if (v75)
  {
LABEL_80:
    v67 = v76;
    goto LABEL_81;
  }
  while (1)
  {
    v67 = v76 + 1;
    if (__OFADD__(v76, 1))
      break;
    if (v67 >= v93)
      goto LABEL_90;
    v75 = *(_QWORD *)(v91 + 8 * v67);
    ++v76;
    if (v75)
      goto LABEL_81;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_1BDF1A230(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t *__return_ptr, _QWORD *, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  char v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = a6;
  v11 = *a1;
  v12 = a1[1];
  v54 = MEMORY[0x1E0DEE9E8];
  v44 = a4;
  v45 = a5;
  v46 = a6;
  v47 = a7;
  v48 = a3;
  result = sub_1BDF177A0(a2, (uint64_t (*)(uint64_t *))sub_1BDF1A8F0, (uint64_t)v43, a4, a6);
  if (v8)
    return swift_bridgeObjectRelease();
  v40 = v12;
  v41 = a4;
  v14 = 0;
  v37 = v11;
  v38 = result + 56;
  v15 = 1 << *(_BYTE *)(result + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(result + 56);
  v39 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v42 = v14;
      v21 = v20 | (v14 << 6);
      goto LABEL_22;
    }
    v22 = __OFADD__(v14, 1);
    v23 = v14 + 1;
    if (v22)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v39)
      goto LABEL_30;
    v24 = *(_QWORD *)(v38 + 8 * v23);
    if (!v24)
      break;
LABEL_21:
    v17 = (v24 - 1) & v24;
    v42 = v23;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
LABEL_22:
    v26 = result;
    v27 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v21);
    v28 = *v27;
    v29 = v27[1];
    v30 = v7;
    v50[2] = v7;
    v50[0] = v28;
    v50[1] = v29;
    v49 = 0;
    v31 = v9;
    v32 = *(_QWORD *)(v9 + 16);
    v33 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v32 + 48);
    sub_1BDDB6CA4(v28, v29);
    v33(&v51, v50, &v49, &type metadata for AnyCRDT, &off_1E775A650, v41, v32);
    result = v51;
    if (!v51)
      goto LABEL_33;
    v34 = v52;
    v35 = v53;
    swift_release();
    if ((sub_1BDEED578(v35, v40) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      sub_1BDDBC6BC(&v51, v28, v29);
      v18 = v51;
      v19 = v52;
      goto LABEL_8;
    }
    v36 = sub_1BDEED578(v34, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
      goto LABEL_7;
    v18 = v28;
    v19 = v29;
LABEL_8:
    sub_1BDDB796C(v18, v19);
    v7 = v30;
    v9 = v31;
    result = v26;
    v14 = v42;
  }
  v25 = v23 + 1;
  if (v23 + 1 >= v39)
    goto LABEL_30;
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
    goto LABEL_20;
  v25 = v23 + 2;
  if (v23 + 2 >= v39)
    goto LABEL_30;
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
    goto LABEL_20;
  v25 = v23 + 3;
  if (v23 + 3 >= v39)
  {
LABEL_30:
    swift_release();
    return v54;
  }
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
  {
LABEL_20:
    v23 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v39)
      goto LABEL_30;
    v24 = *(_QWORD *)(v38 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1BDF1A524(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_1BDF1A680((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v6 = sub_1BDF1A680((uint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x1C3B7E068](v7, -1, -1);
  }
  return v6;
}

uint64_t sub_1BDF1A680(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = *(_QWORD *)(a3 + 56) & v10;
  v12 = (unint64_t)(v9 + 63) >> 6;
  do
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
    }
    else
    {
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_23;
      if (v16 >= v12)
      {
LABEL_21:
        swift_retain();
        return sub_1BDDC68A4(v5, a2, v6, a3);
      }
      v17 = *(_QWORD *)(v8 + 8 * v16);
      ++v7;
      if (!v17)
      {
        v7 = v16 + 1;
        if (v16 + 1 >= v12)
          goto LABEL_21;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 2;
          if (v16 + 2 >= v12)
            goto LABEL_21;
          v17 = *(_QWORD *)(v8 + 8 * v7);
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v12)
              goto LABEL_21;
            v17 = *(_QWORD *)(v8 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_24;
                if (v7 >= v12)
                  goto LABEL_21;
                v17 = *(_QWORD *)(v8 + 8 * v7);
                ++v18;
                if (v17)
                  goto LABEL_20;
              }
            }
            v7 = v18;
          }
        }
      }
LABEL_20:
      v11 = (v17 - 1) & v17;
      v14 = __clz(__rbit64(v17)) + (v7 << 6);
    }
    *(_QWORD *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
  }
  while (!__OFADD__(v6++, 1));
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1BDF1A7E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1BDF1A86C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1BDDAF714(*(_QWORD *)(v0 + 24));
  return sub_1BDDAF714(v1);
}

unint64_t sub_1BDF1A8A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52CFD8;
  if (!qword_1EF52CFD8)
  {
    v1 = type metadata accessor for AnyReference();
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BCF30, v1);
    atomic_store(result, (unint64_t *)&qword_1EF52CFD8);
  }
  return result;
}

BOOL sub_1BDF1A8F0(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 40);
  v5 = *a1;
  return ((*(uint64_t (**)(__int128 *, uint64_t))(v3 + 64))(&v5, v2) & 1) == 0;
}

uint64_t sub_1BDF1A934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;

  v26 = type metadata accessor for MissingTypedRefVisitor(0, a3, a4, a4);
  v28 = sub_1BDFD0710(a2);
  v24 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v8 + 63) >> 6;
  v11 = a2;
  swift_unknownObjectRetain();
  v12 = a1;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v29[0] = v22;
    v29[1] = v21;
    v30 = v28;
    v23 = *(void (**)(_QWORD *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a4 + 96);
    sub_1BDDB6CA4(v22, v21);
    v23(v29, &v30, v26, &off_1E77592C8, a3, a4);
    if (v4)
    {
      swift_release();
      swift_release();
      sub_1BDDB796C(v22, v21);
      return v11;
    }
    result = sub_1BDDB796C(v22, v21);
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
      break;
    if (v14 >= v25)
      goto LABEL_24;
    v18 = *(_QWORD *)(v24 + 8 * v14);
    if (!v18)
    {
      v19 = v14 + 1;
      if (v14 + 1 >= v25)
        goto LABEL_24;
      v18 = *(_QWORD *)(v24 + 8 * v19);
      if (v18)
        goto LABEL_14;
      v19 = v14 + 2;
      if (v14 + 2 >= v25)
        goto LABEL_24;
      v18 = *(_QWORD *)(v24 + 8 * v19);
      if (v18)
      {
LABEL_14:
        v14 = v19;
        goto LABEL_15;
      }
      v19 = v14 + 3;
      if (v14 + 3 < v25)
      {
        v18 = *(_QWORD *)(v24 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            v14 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_27;
            if (v14 >= v25)
              goto LABEL_24;
            v18 = *(_QWORD *)(v24 + 8 * v14);
            ++v19;
            if (v18)
              goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
LABEL_24:
      swift_release();
      swift_beginAccess();
      v11 = *(_QWORD *)(v28 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      return v11;
    }
LABEL_15:
    v10 = (v18 - 1) & v18;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BDF1AB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PartiallyOrderedReferenceMap();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF1ABDC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PartiallyOrderedReferenceMap();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDF1AC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  BOOL v53;
  _QWORD v54[3];
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  _QWORD v63[5];
  uint64_t v64;

  v60 = a2;
  v64 = a4;
  v58 = (char *)a1;
  v5 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1E0C80A78](v5);
  v56 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_Value(0);
  v59 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (_QWORD *)((char *)v54 - v15);
  v57 = v4;
  v17 = *(_QWORD *)(v4 + 16);
  v18 = type metadata accessor for CRStructEncoder();
  v19 = swift_allocObject();
  v20 = (_QWORD *)(v19 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  v21 = MEMORY[0x1E0DEE9D8];
  *v20 = MEMORY[0x1E0DEE9D8];
  v20[1] = v21;
  v22 = v19;
  swift_retain();
  sub_1BE1B20E4();
  *(_QWORD *)(v22 + 16) = v17;
  v63[3] = v18;
  v63[4] = sub_1BDF1DB08();
  v63[0] = v22;
  swift_retain();
  v23 = v61;
  sub_1BE1B26CC();
  if (v23)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  }
  else
  {
    v61 = (uint64_t *)v14;
    v64 = v10;
    v58 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    v25 = (_QWORD *)(v22 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
    swift_beginAccess();
    v26 = (_QWORD *)*v25;
    if (*(_QWORD *)(*v25 + 16))
    {
      v55 = v25;
      v27 = v25[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v28 = (_QWORD *)sub_1BDFCF900((uint64_t)v26, v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = v28;
      sub_1BDEF7C74(&v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v62;
      v30 = v62[2];
      v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v30)
      {
        v54[1] = 0;
        v54[2] = v22;
        v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        sub_1BDE22534(0, v30, 0);
        v32 = *(unsigned __int8 *)(v11 + 80);
        v54[0] = v29;
        v33 = (uint64_t)v29 + ((v32 + 32) & ~v32);
        v60 = *(_QWORD *)(v11 + 72);
        v34 = v62;
        v35 = v33;
        v36 = v30;
        do
        {
          sub_1BDF1DB50(v35, (uint64_t)v16);
          v37 = *(int *)(v64 + 48);
          v38 = v61;
          v39 = (uint64_t)v61 + v37;
          v40 = *v16;
          *v61 = *v16;
          sub_1BDD9C318((uint64_t)v16 + v37, (uint64_t)v38 + v37, type metadata accessor for Proto_Value);
          sub_1BDD9C3E0(v39, type metadata accessor for Proto_Value);
          sub_1BDD86E30((uint64_t)v16, &qword_1ED6EFC80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BDE22534(0, v34[2] + 1, 1);
            v34 = v62;
          }
          v42 = v34[2];
          v41 = v34[3];
          if (v42 >= v41 >> 1)
          {
            sub_1BDE22534(v41 > 1, v42 + 1, 1);
            v34 = v62;
          }
          v34[2] = v42 + 1;
          v34[v42 + 4] = v40;
          v35 += v60;
          --v36;
        }
        while (v36);
        *v55 = v34;
        swift_bridgeObjectRelease();
        v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        sub_1BDE225DC(0, v30, 0);
        v31 = v62;
        v43 = (uint64_t)v58;
        do
        {
          sub_1BDF1DB50(v33, (uint64_t)v16);
          v44 = *(int *)(v64 + 48);
          v45 = (uint64_t)v61 + v44;
          sub_1BDD9C318((uint64_t)v16 + v44, (uint64_t)v61 + v44, type metadata accessor for Proto_Value);
          sub_1BDF1DB98(v45, v43);
          sub_1BDD86E30((uint64_t)v16, &qword_1ED6EFC80);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BDE225DC(0, v31[2] + 1, 1);
            v31 = v62;
          }
          v46 = v59;
          v48 = v31[2];
          v47 = v31[3];
          if (v48 >= v47 >> 1)
          {
            sub_1BDE225DC(v47 > 1, v48 + 1, 1);
            v46 = v59;
            v31 = v62;
          }
          v31[2] = v48 + 1;
          v49 = (uint64_t)v31
              + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
              + *(_QWORD *)(v46 + 72) * v48;
          v43 = (uint64_t)v58;
          sub_1BDF1DB98((uint64_t)v58, v49);
          v33 += v60;
          --v30;
        }
        while (v30);
        swift_release();
        v25 = v55;
      }
      else
      {
        v25 = v55;
        *v55 = MEMORY[0x1E0DEE9D8];
        swift_release();
        swift_bridgeObjectRelease();
      }
      v25[1] = v31;
      swift_bridgeObjectRelease();
      v26 = (_QWORD *)*v25;
      v50 = *(_QWORD *)(*v25 + 16);
    }
    else
    {
      v50 = 0;
    }
    v51 = (uint64_t)v56;
    v52 = sub_1BDDC47E0(0, v50);
    v53 = sub_1BDDFED94(v26, v52);
    swift_release();
    if (v53)
    {
      *v25 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
    }
    sub_1BDD9C318((uint64_t)v25, v51, type metadata accessor for Proto_CustomCRValue);
    swift_beginAccess();
    sub_1BE128730(v51);
    return swift_release();
  }
}

uint64_t sub_1BDF1B1B4()
{
  uint64_t v0;

  swift_release();
  sub_1BDD9C3E0(v0 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value, type metadata accessor for Proto_CustomCRValue);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDF1B1F4()
{
  return type metadata accessor for CRStructEncoder();
}

uint64_t type metadata accessor for CRStructEncoder()
{
  uint64_t result;

  result = qword_1ED6EFC50;
  if (!qword_1ED6EFC50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BDF1B238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for CRStructEncoder.KeyedContainer(0, a2, a3, a4);
  swift_retain();
  MEMORY[0x1C3B7DF54](&unk_1BE1BD074, v4);
  return sub_1BE1B32C0();
}

uint64_t sub_1BDF1B2A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t i;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77[2];
  uint64_t v78;
  _QWORD v79[5];
  uint64_t v80;

  v75 = a7;
  v80 = a3;
  v72 = type metadata accessor for Proto_Value(0);
  v74 = *(_QWORD *)(v72 - 8);
  v11 = MEMORY[0x1E0C80A78](v72);
  v76 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t)&v69 - v14;
  v16 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (unint64_t)&v69 - v20;
  v22 = sub_1BE1B3788();
  if ((v23 & 1) != 0)
    goto LABEL_47;
  v24 = (_QWORD *)v22;
  if (v22 < 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, a5);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF0E8);
    if (swift_dynamicCast())
    {
      v15 = 0;
      v25 = (_QWORD *)v79[0];
      v33 = *(_QWORD *)(v79[0] + 64);
      v69 = v79[0] + 64;
      v34 = 1 << *(_BYTE *)(v79[0] + 32);
      v35 = -1;
      if (v34 < 64)
        v35 = ~(-1 << v34);
      a6 = v35 & v33;
      v70 = (unint64_t)(v34 + 63) >> 6;
      v71 = (_QWORD *)v79[0];
      v36 = v73;
      if ((v35 & v33) == 0)
        goto LABEL_14;
LABEL_13:
      v37 = __clz(__rbit64(a6));
      v38 = (a6 - 1) & a6;
      for (i = v37 | (v15 << 6); ; i = __clz(__rbit64(v41)) + (v15 << 6))
      {
        v43 = 8 * i;
        v44 = *(_QWORD *)(v25[6] + v43);
        if (v44 < 0)
          goto LABEL_60;
        v24 = *(_QWORD **)(v25[7] + v43);
        a5 = v80 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
        swift_beginAccess();
        v45 = *(_QWORD **)a5;
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)a5 = v45;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v45 = sub_1BDDAEBFC(0, v45[2] + 1, 1, v45);
          *(_QWORD *)a5 = v45;
        }
        v48 = v45[2];
        v47 = v45[3];
        v75 = v38;
        if (v48 >= v47 >> 1)
        {
          v45 = sub_1BDDAEBFC((_QWORD *)(v47 > 1), v48 + 1, 1, v45);
          *(_QWORD *)a5 = v45;
        }
        v45[2] = v48 + 1;
        v45[v48 + 4] = v44;
        swift_endAccess();
        v49 = v80;
        v50 = *(_QWORD *)(v80 + 16);
        v52 = *(_QWORD *)(v50 + 80);
        v51 = *(_QWORD *)(v50 + 88);
        *(_QWORD *)(v50 + 80) = 0;
        *(_QWORD *)(v50 + 88) = 0;
        swift_retain();
        swift_release();
        (*(void (**)(_QWORD))(*v24 + 152))(*(_QWORD *)(v49 + 16));
        if (v36)
          goto LABEL_53;
        if (*(_QWORD *)(v50 + 88))
        {
          sub_1BDDFCAFC();
          swift_allocError();
          *(_QWORD *)v64 = 0xD00000000000003DLL;
          *(_QWORD *)(v64 + 8) = 0x80000001BE1CD990;
          *(_BYTE *)(v64 + 16) = 3;
          swift_willThrow();
LABEL_53:
          swift_release();
          swift_release();
          swift_release();
          return swift_release();
        }
        v53 = *(_QWORD *)(v50 + 80);
        if (!v53)
        {
          v73 = 0;
          type metadata accessor for CREncoder.CRValueContainer(0);
          v54 = swift_allocObject();
          v55 = v54 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
          swift_retain();
          sub_1BE1B20E4();
          v56 = *(int *)(v72 + 20);
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v55 + v56) = qword_1ED6F2708;
          *(_QWORD *)(v54 + 16) = v50;
          *(_QWORD *)(v50 + 80) = v54;
          swift_retain();
          swift_release();
          v53 = *(_QWORD *)(v50 + 80);
          v36 = v73;
          if (!v53)
          {
            __break(1u);
LABEL_60:
            result = sub_1BE1B31F4();
            __break(1u);
            return result;
          }
        }
        v57 = v53 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        sub_1BDD9C318(v57, v76, type metadata accessor for Proto_Value);
        *(_QWORD *)(v50 + 80) = v52;
        swift_retain();
        swift_release();
        *(_QWORD *)(v50 + 88) = v51;
        swift_release();
        swift_release();
        swift_beginAccess();
        a4 = *(_QWORD *)(a5 + 8);
        v58 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a5 + 8) = a4;
        if ((v58 & 1) == 0)
        {
          a4 = sub_1BDE069C8(0, *(_QWORD *)(a4 + 16) + 1, 1, a4);
          *(_QWORD *)(a5 + 8) = a4;
        }
        v25 = v71;
        a6 = v75;
        v21 = *(_QWORD *)(a4 + 16);
        v59 = *(_QWORD *)(a4 + 24);
        if (v21 >= v59 >> 1)
        {
          a4 = sub_1BDE069C8(v59 > 1, v21 + 1, 1, a4);
          *(_QWORD *)(a5 + 8) = a4;
        }
        *(_QWORD *)(a4 + 16) = v21 + 1;
        sub_1BDF1DB98(v76, a4+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v21);
        swift_endAccess();
        swift_release();
        if (a6)
          goto LABEL_13;
LABEL_14:
        if (__OFADD__(v15++, 1))
        {
          __break(1u);
          goto LABEL_56;
        }
        if (v15 >= v70)
          return swift_release();
        v41 = *(_QWORD *)(v69 + 8 * v15);
        if (!v41)
        {
          v42 = v15 + 1;
          if (v15 + 1 >= v70)
            return swift_release();
          v41 = *(_QWORD *)(v69 + 8 * v42);
          if (!v41)
          {
            v42 = v15 + 2;
            if (v15 + 2 >= v70)
              return swift_release();
            v41 = *(_QWORD *)(v69 + 8 * v42);
            if (!v41)
            {
              v42 = v15 + 3;
              if (v15 + 3 >= v70)
                return swift_release();
              v41 = *(_QWORD *)(v69 + 8 * v42);
              if (!v41)
              {
                while (1)
                {
                  v15 = v42 + 1;
                  if (__OFADD__(v42, 1))
                    break;
                  if (v15 >= v70)
                    return swift_release();
                  v41 = *(_QWORD *)(v69 + 8 * v15);
                  ++v42;
                  if (v41)
                    goto LABEL_24;
                }
                __break(1u);
LABEL_58:
                v24 = (_QWORD *)sub_1BDE069C8(0, v24[2] + 1, 1, (unint64_t)v24);
                *(_QWORD *)(v21 + 8) = v24;
LABEL_49:
                v63 = v24[2];
                v62 = v24[3];
                if (v63 >= v62 >> 1)
                {
                  v24 = (_QWORD *)sub_1BDE069C8(v62 > 1, v63 + 1, 1, (unint64_t)v24);
                  *(_QWORD *)(v21 + 8) = v24;
                }
                v24[2] = v63 + 1;
                sub_1BDF1DB98(v15, (uint64_t)v24+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v63);
                swift_endAccess();
                return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
              }
            }
          }
          v15 = v42;
        }
LABEL_24:
        v38 = (v41 - 1) & v41;
      }
    }
LABEL_47:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v60 = xmmword_1BE1BCA00;
    *(_BYTE *)(v60 + 16) = 4;
    return swift_willThrow();
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 16))(v21, a1, a5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  if (!swift_dynamicCast())
  {
    v78 = 0;
    memset(v77, 0, sizeof(v77));
    sub_1BDD86E30((uint64_t)v77, qword_1EF52E010);
    goto LABEL_47;
  }
  sub_1BDD85B8C(v77, (uint64_t)v79);
  v21 = v80 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
  swift_beginAccess();
  v25 = *(_QWORD **)v21;
  v26 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v21 = v25;
  if ((v26 & 1) == 0)
  {
LABEL_56:
    v25 = sub_1BDDAEBFC(0, v25[2] + 1, 1, v25);
    *(_QWORD *)v21 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    v25 = sub_1BDDAEBFC((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
    *(_QWORD *)v21 = v25;
  }
  v25[2] = v28 + 1;
  v25[v28 + 4] = v24;
  v29 = swift_endAccess();
  MEMORY[0x1E0C80A78](v29);
  *(&v69 - 6) = a4;
  *(&v69 - 5) = a5;
  v65 = a6;
  v66 = v75;
  v67 = v79;
  v68 = v30;
  v31 = v73;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF1DC58, v15);
  if (!v31)
  {
    swift_beginAccess();
    v24 = *(_QWORD **)(v21 + 8);
    v61 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v21 + 8) = v24;
    if ((v61 & 1) == 0)
      goto LABEL_58;
    goto LABEL_49;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
}

uint64_t sub_1BDF1BB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1BDF1B238(a1, a5, a7, a4);
}

uint64_t sub_1BDF1BB64@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = &type metadata for CRStructEncoder.UnkeyedContanier;
  a2[4] = sub_1BDF1DAB8();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1BDF1BBA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructEncoder();
  a2[4] = sub_1BDF1DB08();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1BDF1BBDC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructEncoder();
  a2[4] = sub_1BDF1DB08();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1BDF1BC18(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char v5;

  v5 = a1;
  return sub_1BDF1B2A8((uint64_t)&v5, a2, *v3, *(_QWORD *)(a3 + 16), MEMORY[0x1E0DEAFA0], *(_QWORD *)(a3 + 24), MEMORY[0x1E0DEAFA8]);
}

uint64_t sub_1BDF1BC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  return sub_1BDF1B2A8((uint64_t)v6, a3, *v4, *(_QWORD *)(a4 + 16), MEMORY[0x1E0DEA968], *(_QWORD *)(a4 + 24), MEMORY[0x1E0DEA970]);
}

uint64_t sub_1BDF1BCA0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  double v5;

  v5 = a3;
  return sub_1BDF1B2A8((uint64_t)&v5, a1, *v3, *(_QWORD *)(a2 + 16), MEMORY[0x1E0DEB070], *(_QWORD *)(a2 + 24), MEMORY[0x1E0DEB080]);
}

uint64_t sub_1BDF1BCE4(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v3;
  float v5;

  v5 = a3;
  return sub_1BDF1B2A8((uint64_t)&v5, a1, *v3, *(_QWORD *)(a2 + 16), MEMORY[0x1E0DEB188], *(_QWORD *)(a2 + 24), MEMORY[0x1E0DEB198]);
}

uint64_t sub_1BDF1BD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BF40(a1, a2, a3, a4, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB420]);
}

uint64_t sub_1BDF1BD4C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BE38(a1, a2, a3, a4, MEMORY[0x1E0DEDA70], MEMORY[0x1E0DEDA78]);
}

uint64_t sub_1BDF1BD70(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BE90(a1, a2, a3, a4, MEMORY[0x1E0DEDB58], MEMORY[0x1E0DEDB60]);
}

uint64_t sub_1BDF1BD94(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BEE8(a1, a2, a3, a4, MEMORY[0x1E0DEDBC8], MEMORY[0x1E0DEDBD0]);
}

uint64_t sub_1BDF1BDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BF40(a1, a2, a3, a4, MEMORY[0x1E0DEDC60], MEMORY[0x1E0DEDC68]);
}

uint64_t sub_1BDF1BDDC()
{
  return sub_1BE1B362C();
}

uint64_t sub_1BDF1BDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BF40(a1, a2, a3, a4, MEMORY[0x1E0DEBB98], MEMORY[0x1E0DEBBA0]);
}

uint64_t sub_1BDF1BE14(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BE38(a1, a2, a3, a4, MEMORY[0x1E0DEDE70], MEMORY[0x1E0DEDE78]);
}

uint64_t sub_1BDF1BE38(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  char v8;

  v8 = a1;
  return sub_1BDF1B2A8((uint64_t)&v8, a2, *v6, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24), a6);
}

uint64_t sub_1BDF1BE6C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BE90(a1, a2, a3, a4, MEMORY[0x1E0DEE068], MEMORY[0x1E0DEE070]);
}

uint64_t sub_1BDF1BE90(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  __int16 v8;

  v8 = a1;
  return sub_1BDF1B2A8((uint64_t)&v8, a2, *v6, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24), a6);
}

uint64_t sub_1BDF1BEC4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BEE8(a1, a2, a3, a4, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE100]);
}

uint64_t sub_1BDF1BEE8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  int v8;

  v8 = a1;
  return sub_1BDF1B2A8((uint64_t)&v8, a2, *v6, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24), a6);
}

uint64_t sub_1BDF1BF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1BF40(a1, a2, a3, a4, MEMORY[0x1E0DEE190], MEMORY[0x1E0DEE198]);
}

uint64_t sub_1BDF1BF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;

  v8 = a1;
  return sub_1BDF1B2A8((uint64_t)&v8, a2, *v6, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24), a6);
}

uint64_t sub_1BDF1BF74()
{
  return sub_1BE1B3638();
}

uint64_t sub_1BDF1BF88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_1BDF1B2A8(a1, a2, *v5, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1BDF1BFB0()
{
  return sub_1BE1B3620();
}

uint64_t sub_1BDF1BFD8()
{
  return sub_1BE1B35B4();
}

uint64_t sub_1BDF1BFEC()
{
  return sub_1BE1B35A8();
}

uint64_t sub_1BDF1C000()
{
  return sub_1BE1B35C0();
}

uint64_t sub_1BDF1C018(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C17C(a1, a2, a3, a4, MEMORY[0x1E0DED8E8]);
}

uint64_t sub_1BDF1C034()
{
  return sub_1BE1B35CC();
}

uint64_t sub_1BDF1C04C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C104(a1, a2, a3, a4, MEMORY[0x1E0DED908]);
}

uint64_t sub_1BDF1C068(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C140(a1, a2, a3, a4, MEMORY[0x1E0DED910]);
}

uint64_t sub_1BDF1C084(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C17C(a1, a2, a3, a4, MEMORY[0x1E0DED918]);
}

uint64_t sub_1BDF1C0A0()
{
  return sub_1BE1B35F0();
}

uint64_t sub_1BDF1C0B8()
{
  return sub_1BE1B35FC();
}

uint64_t sub_1BDF1C0D0()
{
  return sub_1BE1B35D8();
}

uint64_t sub_1BDF1C0E8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C104(a1, a2, a3, a4, MEMORY[0x1E0DED928]);
}

uint64_t sub_1BDF1C104(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1BDF1C124(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C140(a1, a2, a3, a4, MEMORY[0x1E0DED938]);
}

uint64_t sub_1BDF1C140(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_1BDF1C160(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1C17C(a1, a2, a3, a4, MEMORY[0x1E0DED940]);
}

uint64_t sub_1BDF1C17C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1BDF1C1A4()
{
  return sub_1BE1B3608();
}

uint64_t sub_1BDF1C1BC()
{
  return sub_1BE1B3614();
}

uint64_t sub_1BDF1C1D4()
{
  return sub_1BE1B35E4();
}

uint64_t sub_1BDF1C1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_1BDF1BB3C(a1, a2, *v5, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1BDF1C214@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDF1BB64(*v1, a1);
}

uint64_t sub_1BDF1C224@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDF1BBA0(*v1, a1);
}

uint64_t sub_1BDF1C234@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDF1BBDC(*v1, a1);
}

uint64_t sub_1BDF1C244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1B238(a1, a3, a4, a4);
}

uint64_t sub_1BDF1C26C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[16];
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  _UNKNOWN **v20;

  v5 = type metadata accessor for Proto_Value(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x1E0DEAFA0];
  v20 = &protocol witness table for Bool;
  v18[0] = a1;
  v16 = v18;
  v17 = a2;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF1DBEC, (uint64_t)v8);
  if (!v2)
  {
    v9 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v9 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1BDE069C8(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
      *(_QWORD *)(v9 + 8) = v10;
    }
    v13 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      v10 = sub_1BDE069C8(v12 > 1, v13 + 1, 1, v10);
      *(_QWORD *)(v9 + 8) = v10;
    }
    *(_QWORD *)(v10 + 16) = v13 + 1;
    sub_1BDF1DB98((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_1BDF1C3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _BYTE v17[16];
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[5];

  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20[3] = MEMORY[0x1E0DEA968];
  v20[4] = &protocol witness table for String;
  v20[0] = a1;
  v20[1] = a2;
  v18 = v20;
  v19 = a3;
  swift_bridgeObjectRetain();
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF1DBEC, (uint64_t)v10);
  if (!v3)
  {
    v11 = a3 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    v12 = *(_QWORD *)(v11 + 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v11 + 8) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = sub_1BDE069C8(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
      *(_QWORD *)(v11 + 8) = v12;
    }
    v15 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      v12 = sub_1BDE069C8(v14 > 1, v15 + 1, 1, v12);
      *(_QWORD *)(v11 + 8) = v12;
    }
    *(_QWORD *)(v12 + 16) = v15 + 1;
    sub_1BDF1DB98((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v15);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t sub_1BDF1C578(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[16];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v5 = type metadata accessor for Proto_Value(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18[3] = MEMORY[0x1E0DEB070];
  v18[4] = &protocol witness table for Double;
  *(double *)v18 = a2;
  v16 = v18;
  v17 = a1;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF1DBEC, (uint64_t)v8);
  if (!v2)
  {
    v9 = a1 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v9 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1BDE069C8(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
      *(_QWORD *)(v9 + 8) = v10;
    }
    v13 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      v10 = sub_1BDE069C8(v12 > 1, v13 + 1, 1, v10);
      *(_QWORD *)(v9 + 8) = v10;
    }
    *(_QWORD *)(v10 + 16) = v13 + 1;
    sub_1BDF1DB98((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_1BDF1C700(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[16];
  _DWORD *v16;
  uint64_t v17;
  _DWORD v18[6];
  uint64_t v19;
  _UNKNOWN **v20;

  v5 = type metadata accessor for Proto_Value(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x1E0DEB188];
  v20 = &protocol witness table for Float;
  *(float *)v18 = a2;
  v16 = v18;
  v17 = a1;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF1DBEC, (uint64_t)v8);
  if (!v2)
  {
    v9 = a1 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    v10 = *(_QWORD *)(v9 + 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v9 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1BDE069C8(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
      *(_QWORD *)(v9 + 8) = v10;
    }
    v13 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      v10 = sub_1BDE069C8(v12 > 1, v13 + 1, 1, v10);
      *(_QWORD *)(v9 + 8) = v10;
    }
    *(_QWORD *)(v10 + 16) = v13 + 1;
    sub_1BDF1DB98((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_1BDF1C888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[16];
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[5];

  v11 = type metadata accessor for Proto_Value(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24[3] = a3;
  v24[4] = a4;
  v24[0] = a1;
  v22 = v24;
  v23 = a2;
  sub_1BDE1CC84(a5, (uint64_t)v14);
  if (!v5)
  {
    v15 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    v16 = *(_QWORD *)(v15 + 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v15 + 8) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = sub_1BDE069C8(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
      *(_QWORD *)(v15 + 8) = v16;
    }
    v19 = *(_QWORD *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      v16 = sub_1BDE069C8(v18 > 1, v19 + 1, 1, v16);
      *(_QWORD *)(v15 + 8) = v16;
    }
    *(_QWORD *)(v16 + 16) = v19 + 1;
    sub_1BDF1DB98((uint64_t)v14, v16+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v19);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t sub_1BDF1CA00(char a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  char v26;
  _BYTE v27[40];

  v8 = type metadata accessor for Proto_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  if (swift_dynamicCast())
  {
    v12 = sub_1BDD85B8C(v24, (uint64_t)v27);
    MEMORY[0x1E0C80A78](v12);
    *(&v22 - 2) = (uint64_t)v27;
    *(&v22 - 1) = a2;
    sub_1BDE1CC84(a4, (uint64_t)v11);
    if (!v4)
    {
      v13 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      v14 = *(_QWORD *)(v13 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 8) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_1BDE069C8(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
        *(_QWORD *)(v13 + 8) = v14;
      }
      v17 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        v23 = v17 + 1;
        v21 = sub_1BDE069C8(v16 > 1, v17 + 1, 1, v14);
        v18 = v23;
        v14 = v21;
        *(_QWORD *)(v13 + 8) = v21;
      }
      *(_QWORD *)(v14 + 16) = v18;
      sub_1BDF1DB98((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1BDD86E30((uint64_t)v24, qword_1EF52E010);
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v20 = xmmword_1BE1BCA00;
    *(_BYTE *)(v20 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1BDF1CC28(__int16 a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  __int16 v26;
  _BYTE v27[40];

  v8 = type metadata accessor for Proto_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  if (swift_dynamicCast())
  {
    v12 = sub_1BDD85B8C(v24, (uint64_t)v27);
    MEMORY[0x1E0C80A78](v12);
    *(&v22 - 2) = (uint64_t)v27;
    *(&v22 - 1) = a2;
    sub_1BDE1CC84(a4, (uint64_t)v11);
    if (!v4)
    {
      v13 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      v14 = *(_QWORD *)(v13 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 8) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_1BDE069C8(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
        *(_QWORD *)(v13 + 8) = v14;
      }
      v17 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        v23 = v17 + 1;
        v21 = sub_1BDE069C8(v16 > 1, v17 + 1, 1, v14);
        v18 = v23;
        v14 = v21;
        *(_QWORD *)(v13 + 8) = v21;
      }
      *(_QWORD *)(v14 + 16) = v18;
      sub_1BDF1DB98((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1BDD86E30((uint64_t)v24, qword_1EF52E010);
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v20 = xmmword_1BE1BCA00;
    *(_BYTE *)(v20 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1BDF1CE50(int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  int v26;
  _BYTE v27[40];

  v8 = type metadata accessor for Proto_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  if (swift_dynamicCast())
  {
    v12 = sub_1BDD85B8C(v24, (uint64_t)v27);
    MEMORY[0x1E0C80A78](v12);
    *(&v22 - 2) = (uint64_t)v27;
    *(&v22 - 1) = a2;
    sub_1BDE1CC84(a4, (uint64_t)v11);
    if (!v4)
    {
      v13 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      v14 = *(_QWORD *)(v13 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 8) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_1BDE069C8(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
        *(_QWORD *)(v13 + 8) = v14;
      }
      v17 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        v23 = v17 + 1;
        v21 = sub_1BDE069C8(v16 > 1, v17 + 1, 1, v14);
        v18 = v23;
        v14 = v21;
        *(_QWORD *)(v13 + 8) = v21;
      }
      *(_QWORD *)(v14 + 16) = v18;
      sub_1BDF1DB98((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1BDD86E30((uint64_t)v24, qword_1EF52E010);
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v20 = xmmword_1BE1BCA00;
    *(_BYTE *)(v20 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1BDF1D078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  _BYTE v26[40];
  unint64_t v27;

  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
  if (swift_dynamicCast())
  {
    v14 = sub_1BDD85B8C(v24, (uint64_t)v26);
    MEMORY[0x1E0C80A78](v14);
    *(_QWORD *)&v24[-1] = v26;
    *((_QWORD *)&v24[-1] + 1) = a2;
    sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF1DBEC, (uint64_t)v11);
    if (!v3)
    {
      v15 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      v16 = *(_QWORD *)(v15 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v15 + 8) = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v16 = sub_1BDE069C8(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
        *(_QWORD *)(v15 + 8) = v16;
      }
      v19 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        v27 = v19 + 1;
        v23 = sub_1BDE069C8(v18 > 1, v19 + 1, 1, v16);
        v20 = v27;
        v16 = v23;
        *(_QWORD *)(v15 + 8) = v23;
      }
      *(_QWORD *)(v16 + 16) = v20;
      sub_1BDF1DB98((uint64_t)v11, v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1BDD86E30((uint64_t)v24, qword_1EF52E010);
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v22 = xmmword_1BE1BCA00;
    *(_BYTE *)(v22 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1BDF1D2DC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
}

uint64_t sub_1BDF1D328(char a1)
{
  uint64_t *v1;

  return sub_1BDF1C26C(a1, *v1);
}

uint64_t sub_1BDF1D340(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BDF1C3EC(a1, a2, *v2);
}

uint64_t sub_1BDF1D358(double a1)
{
  uint64_t *v1;

  return sub_1BDF1C578(*v1, a1);
}

uint64_t sub_1BDF1D370(float a1)
{
  uint64_t *v1;

  return sub_1BDF1C700(*v1, a1);
}

uint64_t sub_1BDF1D388(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDF1C888(a1, *v1, MEMORY[0x1E0DEB418], (uint64_t)&protocol witness table for Int, (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D3B8(char a1)
{
  uint64_t *v1;

  return sub_1BDF1CA00(a1, *v1, MEMORY[0x1E0DEDA70], (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D3E0(__int16 a1)
{
  uint64_t *v1;

  return sub_1BDF1CC28(a1, *v1, MEMORY[0x1E0DEDB58], (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D408(int a1)
{
  uint64_t *v1;

  return sub_1BDF1CE50(a1, *v1, MEMORY[0x1E0DEDBC8], (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D430(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDF1C888(a1, *v1, MEMORY[0x1E0DEDC60], (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D460()
{
  sub_1BDF1DA74();
  return sub_1BE1B350C();
}

uint64_t sub_1BDF1D4BC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDF1C888(a1, *v1, MEMORY[0x1E0DEBB98], (uint64_t)&protocol witness table for UInt, (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D4EC(char a1)
{
  uint64_t *v1;

  return sub_1BDF1CA00(a1, *v1, MEMORY[0x1E0DEDE70], (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D514(__int16 a1)
{
  uint64_t *v1;

  return sub_1BDF1CC28(a1, *v1, MEMORY[0x1E0DEE068], (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D53C(int a1)
{
  uint64_t *v1;

  return sub_1BDF1CE50(a1, *v1, MEMORY[0x1E0DEE0F8], (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D564(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDF1C888(a1, *v1, MEMORY[0x1E0DEE190], (uint64_t)&protocol witness table for UInt64, (void (*)(uint64_t))sub_1BDF1DBEC);
}

uint64_t sub_1BDF1D594()
{
  sub_1BDF1DA74();
  return sub_1BE1B3518();
}

uint64_t sub_1BDF1D5F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BDF1D078(a1, *v2, a2);
}

uint64_t sub_1BDF1D610()
{
  return sub_1BE1B338C();
}

uint64_t sub_1BDF1D638()
{
  return sub_1BE1B33B0();
}

uint64_t sub_1BDF1D660()
{
  return sub_1BE1B33A4();
}

uint64_t sub_1BDF1D688()
{
  return sub_1BE1B33BC();
}

uint64_t sub_1BDF1D6B0()
{
  return sub_1BE1B33C8();
}

uint64_t sub_1BDF1D6D8()
{
  return sub_1BE1B33D4();
}

uint64_t sub_1BDF1D700()
{
  return sub_1BE1B33EC();
}

uint64_t sub_1BDF1D728()
{
  return sub_1BE1B33F8();
}

uint64_t sub_1BDF1D750()
{
  return sub_1BE1B3404();
}

uint64_t sub_1BDF1D778()
{
  return sub_1BE1B3410();
}

uint64_t sub_1BDF1D7A0()
{
  return sub_1BE1B3428();
}

uint64_t sub_1BDF1D7C8()
{
  return sub_1BE1B33E0();
}

uint64_t sub_1BDF1D7F0()
{
  return sub_1BE1B341C();
}

uint64_t sub_1BDF1D818()
{
  return sub_1BE1B3434();
}

uint64_t sub_1BDF1D840()
{
  return sub_1BE1B3440();
}

uint64_t sub_1BDF1D868()
{
  return sub_1BE1B344C();
}

uint64_t sub_1BDF1D890()
{
  return sub_1BE1B3458();
}

uint64_t sub_1BDF1D8B8()
{
  return sub_1BE1B3398();
}

uint64_t sub_1BDF1D8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1BDF1C244(a1, *v3, a2, a3);
}

uint64_t sub_1BDF1D8F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  return swift_retain();
}

uint64_t sub_1BDF1D90C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for CRStructEncoder();
  a1[4] = sub_1BDF1DB08();
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_1BDF1D948()
{
  sub_1BDF1DAB8();
  return sub_1BE1B350C();
}

uint64_t sub_1BDF1D9A4()
{
  sub_1BDF1DAB8();
  return sub_1BE1B3518();
}

uint64_t sub_1BDF1DA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDF1B238(a1, a2, a3, a4);
}

uint64_t sub_1BDF1DA20@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BDF1DA38((uint64_t (*)(void))sub_1BDF1DAB8, a1);
}

uint64_t sub_1BDF1DA2C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1BDF1DA38((uint64_t (*)(void))sub_1BDF1DA74, a1);
}

uint64_t sub_1BDF1DA38@<X0>(uint64_t (*a1)(void)@<X2>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  a2[3] = &type metadata for CRStructEncoder.UnkeyedContanier;
  a2[4] = a1();
  *a2 = v4;
  return swift_retain();
}

unint64_t sub_1BDF1DA74()
{
  unint64_t result;

  result = qword_1EF52E000;
  if (!qword_1EF52E000)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BD354, &type metadata for CRStructEncoder.UnkeyedContanier);
    atomic_store(result, (unint64_t *)&qword_1EF52E000);
  }
  return result;
}

unint64_t sub_1BDF1DAB8()
{
  unint64_t result;

  result = qword_1EF52E008;
  if (!qword_1EF52E008)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BD1EC, &type metadata for CRStructEncoder.UnkeyedContanier);
    atomic_store(result, (unint64_t *)&qword_1EF52E008);
  }
  return result;
}

uint64_t type metadata accessor for CRStructEncoder.KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRStructEncoder.KeyedContainer);
}

unint64_t sub_1BDF1DB08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6EFC48;
  if (!qword_1ED6EFC48)
  {
    v1 = type metadata accessor for CRStructEncoder();
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BCFE4, v1);
    atomic_store(result, (unint64_t *)&qword_1ED6EFC48);
  }
  return result;
}

uint64_t sub_1BDF1DB50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF1DB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for CRStructEncoder.UnkeyedContanier()
{
  return &type metadata for CRStructEncoder.UnkeyedContanier;
}

uint64_t sub_1BDF1DBEC()
{
  return sub_1BDF1DC00();
}

uint64_t sub_1BDF1DC00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 16))(*(_QWORD *)(v2 + 16), v3, v4);
}

uint64_t sub_1BDF1DC58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 16))(*(_QWORD *)(v2 + 16), v3, v4);
}

uint64_t sub_1BDF1DCB0(uint64_t a1, uint64_t a2)
{
  return sub_1BDF1D340(a1, a2);
}

uint64_t sub_1BDF1DCC4(char a1)
{
  return sub_1BDF1D328(a1);
}

uint64_t sub_1BDF1DCD8(double a1)
{
  return sub_1BDF1D358(a1);
}

uint64_t sub_1BDF1DCEC(float a1)
{
  return sub_1BDF1D370(a1);
}

uint64_t sub_1BDF1DD00(uint64_t a1)
{
  return sub_1BDF1D388(a1);
}

uint64_t sub_1BDF1DD14(char a1)
{
  return sub_1BDF1D3B8(a1);
}

uint64_t sub_1BDF1DD28(__int16 a1)
{
  return sub_1BDF1D3E0(a1);
}

uint64_t sub_1BDF1DD3C(int a1)
{
  return sub_1BDF1D408(a1);
}

uint64_t sub_1BDF1DD50(uint64_t a1)
{
  return sub_1BDF1D430(a1);
}

uint64_t sub_1BDF1DD64(uint64_t a1)
{
  return sub_1BDF1D4BC(a1);
}

uint64_t sub_1BDF1DD78(char a1)
{
  return sub_1BDF1D4EC(a1);
}

uint64_t sub_1BDF1DD8C(__int16 a1)
{
  return sub_1BDF1D514(a1);
}

uint64_t sub_1BDF1DDA0(int a1)
{
  return sub_1BDF1D53C(a1);
}

uint64_t sub_1BDF1DDB4(uint64_t a1)
{
  return sub_1BDF1D564(a1);
}

uint64_t sub_1BDF1DDC8(uint64_t a1, uint64_t a2)
{
  return sub_1BDF1D5F0(a1, a2);
}

uint64_t sub_1BDF1DDDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 648);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 632);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v5);
  v6 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v1, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 656), v2);
}

uint64_t sub_1BDF1DEA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  v2 = sub_1BE19233C();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 648);
  v4 = *(_QWORD *)(v1 + 632);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v7);
  v8 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 656), v4);
  return v2;
}

uint64_t sub_1BDF1DF80()
{
  sub_1BDF1DEA4();
  return swift_deallocClassInstance();
}

uint64_t *CRCustomFileSyncManager.__allocating_init(_:sync:at:customSync:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1BDDCC808(a1, a2, a3, a4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a4, *(_QWORD *)(v4 + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v11);
  v12 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a2, v12);

  return v8;
}

uint64_t *CRCustomFileSyncManager.init(_:sync:at:customSync:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;

  v8 = *v4;
  v9 = sub_1BDDCC708(a1, a2, a3, a4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v8 + 80) - 8) + 8))(a4, *(_QWORD *)(v8 + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v12);
  v13 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);

  return v9;
}

uint64_t CRCustomFileSyncManager.sync(_:)(uint64_t a1)
{
  return sub_1BE19240C(a1);
}

uint64_t CRCustomFileSyncManager.sync(_:finished:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE19269C(a1, a2, a3);
}

uint64_t CRCustomFileSyncManager.updates.getter()
{
  return sub_1BE1939D0();
}

uint64_t CRCustomFileSyncManager.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t CRCustomFileSyncManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *sub_1BDF1E1EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a5;
  v26 = a6;
  v22 = a4;
  v23 = a1;
  v24 = a2;
  v8 = *v6;
  v9 = sub_1BE1B1DF0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)v6 + *(_QWORD *)(v8 + 648);
  v14 = *(_QWORD *)(v8 + 632);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for Capsule(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))((uint64_t)v6 + *(_QWORD *)(*v6 + 656), v22, v14);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  v19 = sub_1BE195460(v23, v24, v12, v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  return v19;
}

uint64_t dispatch thunk of CRCustomFileSync.read(from:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of CRCustomFileSync.write(_:to:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t method lookup function for CRCustomFileSyncManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRCustomFileSyncManager.__allocating_init(_:sync:at:customSync:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1BDF1E398()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5254F8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BE1B61C0;
  *(_QWORD *)(v0 + 32) = sub_1BDEEECF8();
  *(_QWORD *)(v0 + 40) = sub_1BDEEECF8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525528);
  sub_1BDEF2354();
  sub_1BE1B2708();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return swift_bridgeObjectRelease();
}

__n128 sub_1BDF1E4B8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  sub_1BDDA2E8C(a1, a6, type metadata accessor for FinalizedTimestamp);
  v12 = type metadata accessor for CRDictionaryElement(0, a4, a5, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6 + *(int *)(v12 + 36), a2, a4);
  result = *a3;
  *(__n128 *)(a6 + *(int *)(v12 + 40)) = *a3;
  return result;
}

uint64_t sub_1BDF1E540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = sub_1BE1B1F58();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  result = type metadata accessor for FinalizedTimestamp(0);
  v14 = *(int *)(result + 20);
  v15 = *(_QWORD *)(v4 + v14);
  if (*(_QWORD *)(a1 + v14) > v15)
    v15 = *(_QWORD *)(a1 + v14);
  v16 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1BDD9C3E0(v4, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v4, v12, v9);
    *(_QWORD *)(v4 + v14) = v16;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))(v4 + *(int *)(a3 + 36), a2);
    return sub_1BDD9C318(v4, a4, type metadata accessor for FinalizedTimestamp);
  }
  return result;
}

uint64_t sub_1BDF1E658(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  char v41;
  _BYTE *v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;

  v52 = *(_QWORD *)(a5 - 8);
  v53 = a4;
  v7 = MEMORY[0x1E0C80A78](a1);
  v51 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *(_QWORD *)(v9 + 16);
  v59 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v7);
  v58 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v11;
  v13 = v11[1];
  v15 = (uint64_t)v14[1];
  v60 = *v14;
  v17 = *(int *)(v16 + 40);
  v18 = (uint64_t *)(v5 + v17);
  v19 = *(_QWORD *)(v5 + v17);
  v20 = *(_QWORD *)(v5 + v17 + 8);
  v21 = (uint64_t *)(a1 + v17);
  v22 = *v21;
  v23 = v21[1];
  v55 = v19;
  v56 = v16;
  swift_bridgeObjectRetain();
  v54 = v20;
  v24 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = v13;
  v26 = v5;
  sub_1BDEEAE08(v25, v23, v15);
  v27 = (uint64_t)v60;
  v60 = v18;
  sub_1BDEEAE08(v12, v22, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
  v29 = *(_QWORD *)(v5 + v28);
  v30 = *(_QWORD *)(a1 + v28);
  if (v29 == v30)
  {
    if ((sub_1BDDB2BF8() & 1) == 0)
    {
      if ((sub_1BDDB2BF8() & 1) == 0)
      {
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 + 24) + 16))(a1 + *(int *)(v56 + 36), v57);
      }
      goto LABEL_9;
    }
  }
  else if (v29 >= v30)
  {
    if (v30 >= v29)
      goto LABEL_4;
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 + 24) + 16))(a1 + *(int *)(v56 + 36), v57);
    v42 = v53;
    if ((*v53 & 1) != 0)
    {
      v43 = 1;
    }
    else
    {
      v49 = *v60;
      swift_bridgeObjectRetain();
      v50 = swift_bridgeObjectRetain();
      if ((sub_1BDDB04C0(v50, v54) & 1) != 0)
        v43 = 1;
      else
        v43 = sub_1BDDB04C0(v49, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v42 = v43 & 1;
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v56;
  v33 = v57;
  v34 = a1 + *(int *)(v56 + 36);
  v35 = v58;
  v36 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v34, v57);
  v37 = v26 + *(int *)(v32 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 + 24) + 16))(v37, v33);
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 24))(v37, v35, v33);
  sub_1BDF2E114(v24, v26);
  v39 = v52;
  v38 = v53;
  LOBYTE(v37) = *v53;
  v40 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v24, v32);
  if ((v37 & 1) != 0)
  {
    v41 = 1;
  }
  else
  {
    v44 = (uint64_t *)&v40[*(int *)(v32 + 40)];
    v45 = *v44;
    v46 = v44[1];
    v47 = *v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = swift_bridgeObjectRetain();
    if ((sub_1BDDB04C0(v48, v46) & 1) != 0)
      v41 = 1;
    else
      v41 = sub_1BDDB04C0(v47, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v32);
  result = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v58, v33);
  *v38 = v41 & 1;
  return result;
}

__n128 sub_1BDF1E9F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __n128 v18;

  v12 = type metadata accessor for FinalizedTimestamp(0);
  v18 = *a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a6, 1, 1, v12);
  v14 = type metadata accessor for CRDictionaryElement.Delta(0, a4, a5, v13);
  v15 = a6 + *(int *)(v14 + 36);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v15, 1, 1, a4);
  sub_1BDDA1AF4(a1, a6, (uint64_t *)&unk_1ED6F2DC0);
  v16 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v15, a2, v16);
  result = v18;
  *(__n128 *)(a6 + *(int *)(v14 + 40)) = v18;
  return result;
}

uint64_t sub_1BDF1EAE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int EnumCaseMultiPayload;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(void);
  void (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;

  v196 = a4;
  v198 = a2;
  v200 = a1;
  v7 = sub_1BE1B2EE8();
  v192 = *(_QWORD *)(v7 - 8);
  v193 = v7;
  MEMORY[0x1E0C80A78](v7);
  v162 = (char *)&v155 - v8;
  v186 = type metadata accessor for Proto_Value(0);
  v174 = *(_QWORD *)(v186 - 8);
  MEMORY[0x1E0C80A78](v186);
  v161 = (char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v11 = MEMORY[0x1E0C80A78](v10);
  v160 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v173 = (uint64_t)&v155 - v13;
  v185 = type metadata accessor for Proto_Timestamp(0);
  v180 = *(_QWORD *)(v185 - 8);
  MEMORY[0x1E0C80A78](v185);
  v167 = (unint64_t *)((char *)&v155 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v15);
  v168 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v18 = MEMORY[0x1E0C80A78](v17);
  v166 = (uint64_t)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v179 = (char *)&v155 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v159 = (uint64_t)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v172 = (uint64_t)&v155 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v164 = (uint64_t)&v155 - v27;
  MEMORY[0x1E0C80A78](v26);
  v178 = (char *)&v155 - v28;
  v194 = type metadata accessor for Proto_Register(0);
  v29 = MEMORY[0x1E0C80A78](v194);
  v176 = (uint64_t)&v155 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v182 = (char *)&v155 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v165 = (uint64_t)&v155 - v34;
  MEMORY[0x1E0C80A78](v33);
  v184 = (char *)&v155 - v35;
  v190 = type metadata accessor for Proto_CRDT(0);
  v188 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 - 8);
  v36 = MEMORY[0x1E0C80A78](v190);
  v175 = (uint64_t)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v171 = (uint64_t)&v155 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v181 = (uint64_t)&v155 - v41;
  MEMORY[0x1E0C80A78](v40);
  v187 = (uint64_t)&v155 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v44 = MEMORY[0x1E0C80A78](v43);
  v169 = (uint64_t)&v155 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v44);
  v170 = (uint64_t)&v155 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v177 = (uint64_t)&v155 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v183 = (uint64_t)&v155 - v51;
  MEMORY[0x1E0C80A78](v50);
  v53 = (char *)&v155 - v52;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v54);
  v56 = (char *)&v155 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for Proto_Version(0);
  v58 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v60 = (uint64_t *)((char *)&v155 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = type metadata accessor for FinalizedTimestamp(0);
  v157 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
  v158 = v61;
  v157(a5, 1, 1);
  v189 = type metadata accessor for CRDictionaryElement.Delta(0, a3, v196, v62);
  v63 = *(int *)(v189 + 36);
  v197 = a5;
  v64 = a5 + v63;
  v65 = *(void (**)(void))(*(_QWORD *)(a3 - 8) + 56);
  v191 = v64;
  v163 = a3;
  v156 = v65;
  v65();
  v66 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  v67 = *(_QWORD *)(v200 + v66)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v67, (uint64_t)v56, &qword_1ED6F37A8);
  v68 = v66;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) == 1)
  {
    v69 = MEMORY[0x1E0DEE9D8];
    *v60 = MEMORY[0x1E0DEE9D8];
    v60[1] = v69;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v56, &qword_1ED6F37A8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v56, (uint64_t)v60, type metadata accessor for Proto_Version);
  }
  v70 = v198;
  swift_retain();
  v71 = v195;
  sub_1BDDA9DA0(v60, v70, &v199);
  v72 = v71;
  v73 = v200;
  if (v71)
  {
    swift_release();
    sub_1BDD9C3E0(v73, type metadata accessor for Proto_Set.Element);
    v74 = v197;
    goto LABEL_6;
  }
  v195 = 0;
  *(_OWORD *)(v197 + *(int *)(v189 + 40)) = v199;
  v76 = *(_QWORD *)(v73 + v68)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v76, (uint64_t)v53, &qword_1ED6F3728);
  v77 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v188 + 6);
  v78 = v190;
  LODWORD(v76) = v77(v53, 1, v190);
  sub_1BDD86E30((uint64_t)v53, &qword_1ED6F3728);
  if ((_DWORD)v76 == 1)
  {
    swift_release();
    return sub_1BDD9C3E0(v73, type metadata accessor for Proto_Set.Element);
  }
  v79 = *(_QWORD *)(v73 + v68)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v80 = v183;
  sub_1BDD86DEC(v79, v183, &qword_1ED6F3728);
  v81 = v77((char *)v80, 1, v78);
  v155 = v68;
  v188 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v77;
  if (v81 == 1)
  {
    v82 = v187;
    sub_1BE1B20E4();
    v83 = *(int *)(v78 + 20);
    v84 = v180;
    v85 = (uint64_t)v178;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v82 + v83) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v80, &qword_1ED6F3728);
  }
  else
  {
    v82 = v187;
    sub_1BDDA2E8C(v80, v187, type metadata accessor for Proto_CRDT);
    v84 = v180;
    v85 = (uint64_t)v178;
  }
  v86 = *(_QWORD *)(v82 + *(int *)(v78 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v86, v85, &qword_1ED6F2DF0);
  v87 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48);
  v89 = v88(v85, 1, v87);
  v91 = (uint64_t)v184;
  v90 = v185;
  v183 = v87;
  if (v89 == 1)
  {
    sub_1BDD86E30(v85, &qword_1ED6F2DF0);
    v92 = (uint64_t)v182;
    v93 = (uint64_t)v179;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v92 = (uint64_t)v182;
    v93 = (uint64_t)v179;
    if (!EnumCaseMultiPayload)
    {
      sub_1BDDA2E8C(v85, v91, type metadata accessor for Proto_Register);
      goto LABEL_22;
    }
    sub_1BDD9C3E0(v85, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v95 = *(int *)(v194 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)(v91 + v95) = qword_1ED6EF780;
  swift_retain();
LABEL_22:
  sub_1BDD9C3E0(v187, type metadata accessor for Proto_CRDT);
  v96 = *(_QWORD *)(v91 + *(int *)(v194 + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v96, v93, &qword_1ED6F3850);
  v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  LODWORD(v96) = v97(v93, 1, v90);
  sub_1BDD86E30(v93, &qword_1ED6F3850);
  sub_1BDD9C3E0(v91, type metadata accessor for Proto_Register);
  if ((_DWORD)v96 == 1)
  {
    v98 = v195;
    goto LABEL_43;
  }
  v99 = v88;
  v100 = *(_QWORD *)(v200 + v155)
       + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v101 = v100;
  v102 = v177;
  sub_1BDD86DEC(v101, v177, &qword_1ED6F3728);
  v103 = v190;
  if (v188(v102, 1, v190) == 1)
  {
    v104 = v181;
    sub_1BE1B20E4();
    v105 = *(int *)(v103 + 20);
    v106 = v167;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v104 + v105) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v177, &qword_1ED6F3728);
  }
  else
  {
    v104 = v181;
    sub_1BDDA2E8C(v102, v181, type metadata accessor for Proto_CRDT);
    v106 = v167;
  }
  v107 = *(_QWORD *)(v104 + *(int *)(v103 + 20))
       + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v108 = v164;
  sub_1BDD86DEC(v107, v164, &qword_1ED6F2DF0);
  v88 = v99;
  if (v99(v108, 1, v183) == 1)
  {
    sub_1BDD86E30(v108, &qword_1ED6F2DF0);
    v109 = v165;
  }
  else
  {
    v110 = swift_getEnumCaseMultiPayload();
    v111 = v108;
    v109 = v165;
    if (!v110)
    {
      sub_1BDDA2E8C(v111, v165, type metadata accessor for Proto_Register);
      goto LABEL_36;
    }
    sub_1BDD9C3E0(v111, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v112 = *(int *)(v194 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)(v109 + v112) = qword_1ED6EF780;
  swift_retain();
LABEL_36:
  sub_1BDD9C3E0(v181, type metadata accessor for Proto_CRDT);
  v113 = *(_QWORD *)(v109 + *(int *)(v194 + 20))
       + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v114 = v113;
  v115 = v166;
  sub_1BDD86DEC(v114, v166, &qword_1ED6F3850);
  if (v97(v115, 1, v90) == 1)
  {
    *v106 = 0;
    v106[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30(v115, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C(v115, (uint64_t)v106, type metadata accessor for Proto_Timestamp);
  }
  v74 = v197;
  v116 = v195;
  v117 = (uint64_t)v168;
  sub_1BDD9C3E0(v109, type metadata accessor for Proto_Register);
  v118 = v198;
  swift_retain();
  v119 = v116;
  sub_1BDDAA440(v106, v118, v117);
  v98 = v116;
  if (!v116)
  {
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v157)(v117, 0, 1, v158);
    sub_1BDDA1AF4(v117, v74, (uint64_t *)&unk_1ED6F2DC0);
LABEL_43:
    v120 = v190;
    v121 = *(_QWORD *)(v200 + v155)
         + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    v122 = v170;
    sub_1BDD86DEC(v121, v170, &qword_1ED6F3728);
    v123 = v188(v122, 1, v120);
    v124 = v171;
    if (v123 == 1)
    {
      sub_1BE1B20E4();
      v125 = *(int *)(v120 + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v124 + v125) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v122, &qword_1ED6F3728);
    }
    else
    {
      sub_1BDDA2E8C(v122, v171, type metadata accessor for Proto_CRDT);
    }
    v126 = *(_QWORD *)(v124 + *(int *)(v120 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v127 = v126;
    v128 = v172;
    sub_1BDD86DEC(v127, v172, &qword_1ED6F2DF0);
    if (v88(v128, 1, v183) == 1)
    {
      sub_1BDD86E30(v128, &qword_1ED6F2DF0);
    }
    else
    {
      if (!swift_getEnumCaseMultiPayload())
      {
        sub_1BDDA2E8C(v128, v92, type metadata accessor for Proto_Register);
        goto LABEL_55;
      }
      sub_1BDD9C3E0(v128, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v129 = *(int *)(v194 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v92 + v129) = qword_1ED6EF780;
    swift_retain();
LABEL_55:
    sub_1BDD9C3E0(v124, type metadata accessor for Proto_CRDT);
    v130 = *(_QWORD *)(v92 + *(int *)(v194 + 20))
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    v131 = v173;
    sub_1BDD86DEC(v130, v173, &qword_1ED6F3770);
    v132 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v174 + 48);
    LODWORD(v130) = v132(v131, 1, v186);
    sub_1BDD86E30(v131, &qword_1ED6F3770);
    sub_1BDD9C3E0(v92, type metadata accessor for Proto_Register);
    if ((_DWORD)v130 == 1)
    {
      swift_release();
      return sub_1BDD9C3E0(v200, type metadata accessor for Proto_Set.Element);
    }
    v133 = *(_QWORD *)(v200 + v155)
         + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    v134 = v169;
    sub_1BDD86DEC(v133, v169, &qword_1ED6F3728);
    v135 = v190;
    if (v188(v134, 1, v190) == 1)
    {
      v136 = v175;
      sub_1BE1B20E4();
      v137 = *(int *)(v135 + 20);
      v138 = v163;
      v140 = (uint64_t)v160;
      v139 = (uint64_t)v161;
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v136 + v137) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v169, &qword_1ED6F3728);
    }
    else
    {
      v136 = v175;
      sub_1BDDA2E8C(v134, v175, type metadata accessor for Proto_CRDT);
      v138 = v163;
      v140 = (uint64_t)v160;
      v139 = (uint64_t)v161;
    }
    v141 = *(_QWORD *)(v136 + *(int *)(v190 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v142 = v141;
    v143 = v159;
    sub_1BDD86DEC(v142, v159, &qword_1ED6F2DF0);
    if (v88(v143, 1, v183) == 1)
    {
      sub_1BDD86E30(v143, &qword_1ED6F2DF0);
      v144 = v198;
      v145 = v176;
    }
    else
    {
      v146 = swift_getEnumCaseMultiPayload();
      v144 = v198;
      v147 = v143;
      v145 = v176;
      if (!v146)
      {
        sub_1BDDA2E8C(v147, v176, type metadata accessor for Proto_Register);
LABEL_69:
        sub_1BDD9C3E0(v175, type metadata accessor for Proto_CRDT);
        v149 = *(_QWORD *)(v145 + *(int *)(v194 + 20))
             + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        sub_1BDD86DEC(v149, v140, &qword_1ED6F3770);
        v150 = v186;
        v151 = v132(v140, 1, v186);
        v119 = v195;
        if (v151 == 1)
        {
          sub_1BE1B20E4();
          v152 = *(int *)(v150 + 20);
          v153 = v162;
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v139 + v152) = qword_1ED6F2708;
          swift_retain();
          sub_1BDD86E30(v140, &qword_1ED6F3770);
        }
        else
        {
          sub_1BDDA2E8C(v140, v139, type metadata accessor for Proto_Value);
          v153 = v162;
        }
        sub_1BDD9C3E0(v176, type metadata accessor for Proto_Register);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        v154 = sub_1BDDB4FC0(v139, v144);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v196 + 8) + 8) + 8))(v154, v138);
        if (!v98)
        {
          swift_release();
          sub_1BDD9C3E0(v200, type metadata accessor for Proto_Set.Element);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v156)(v153, 0, 1, v138);
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v192 + 40))(v191, v153, v193);
        }
        swift_release();
        sub_1BDD9C3E0(v200, type metadata accessor for Proto_Set.Element);
        v74 = v197;
        goto LABEL_76;
      }
      sub_1BDD9C3E0(v147, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v148 = *(int *)(v194 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v145 + v148) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_69;
  }
  swift_release();
  sub_1BDD9C3E0(v200, type metadata accessor for Proto_Set.Element);
LABEL_76:
  v72 = v119;
LABEL_6:
  sub_1BDD86E30(v74, (uint64_t *)&unk_1ED6F2DC0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v192 + 8))(v191, v193);
  if (!v72)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BDF1FE00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v182 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v6 = MEMORY[0x1E0C80A78](v5);
  v147 = (uint64_t)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v146 = (uint64_t)&v142 - v8;
  v145 = type metadata accessor for Proto_Value(0);
  v144 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145);
  v172 = (char *)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  v170 = sub_1BE1B2EE8();
  v168 = *(_QWORD *)(v170 - 8);
  v11 = MEMORY[0x1E0C80A78](v170);
  v169 = (char *)&v142 - v12;
  v173 = v10;
  v176 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v11);
  v160 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v15 = MEMORY[0x1E0C80A78](v14);
  v154 = (uint64_t)&v142 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v153 = (uint64_t)&v142 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v143 = (uint64_t)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v149 = (uint64_t)&v142 - v21;
  v157 = type metadata accessor for Proto_Register(0);
  v22 = MEMORY[0x1E0C80A78](v157);
  v148 = (char *)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v152 = (char *)&v142 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v26 = MEMORY[0x1E0C80A78](v25);
  v142 = (uint64_t)&v142 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v159 = (uint64_t)&v142 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v158 = (uint64_t)&v142 - v31;
  MEMORY[0x1E0C80A78](v30);
  v161 = (uint64_t)&v142 - v32;
  v175 = type metadata accessor for Proto_CRDT(0);
  v177 = *(_QWORD *)(v175 - 8);
  v33 = MEMORY[0x1E0C80A78](v175);
  v156 = (uint64_t)&v142 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v166 = (uint64_t)&v142 - v35;
  v151 = type metadata accessor for Proto_Timestamp(0);
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151);
  v165 = (uint64_t *)((char *)&v142 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v37);
  v163 = (uint64_t)&v142 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for FinalizedTimestamp(0);
  v162 = *(_QWORD *)(v164 - 8);
  MEMORY[0x1E0C80A78](v164);
  v167 = (uint64_t)&v142 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v41 = MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v142 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v142 - v44;
  v46 = type metadata accessor for Proto_Version(0);
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v49 = (uint64_t *)((char *)&v142 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BE1B20E4();
  v50 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1ED6EF6F0 != -1)
    swift_once();
  *(_QWORD *)(a3 + v50) = qword_1ED6EF6E0;
  v171 = a2;
  v51 = (uint64_t *)(v179 + *(int *)(a2 + 40));
  v52 = *v51;
  v53 = v51[1];
  v178 = v50;
  v180 = v52;
  v181 = v53;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDAD780(v182, v49);
  v54 = a3;
  v55 = v178;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v56 = swift_retain();
    *(_QWORD *)(a3 + v55) = sub_1BE13500C(v56);
    swift_release();
  }
  v57 = *(_QWORD *)(a3 + v55);
  sub_1BDDA2E8C((uint64_t)v49, (uint64_t)v45, type metadata accessor for Proto_Version);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v46);
  sub_1BDDA2EF0((uint64_t)v45, (uint64_t)v43, &qword_1ED6F37A8);
  v58 = v57 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v43, v58, &qword_1ED6F37A8);
  swift_endAccess();
  swift_release();
  v59 = v179;
  v60 = v163;
  sub_1BDD86DEC(v179, v163, (uint64_t *)&unk_1ED6F2DC0);
  v61 = v164;
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v60, 1, v164);
  v155 = v54;
  if (v62 == 1)
  {
    sub_1BDD86E30(v60, (uint64_t *)&unk_1ED6F2DC0);
    v63 = v173;
    v64 = v176;
    v65 = (uint64_t)v172;
    v66 = v182;
    v67 = v168;
    goto LABEL_24;
  }
  v68 = v167;
  sub_1BDDA2E8C(v60, v167, type metadata accessor for FinalizedTimestamp);
  v69 = v151;
  v70 = v165;
  sub_1BE1B20E4();
  v71 = sub_1BDDAE244(v68);
  v72 = *(_QWORD *)(v68 + *(int *)(v61 + 20));
  *v70 = v71;
  v70[1] = v72;
  v73 = *(_QWORD *)(v54 + v55)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v74 = v73;
  v75 = v161;
  sub_1BDD86DEC(v74, v161, &qword_1ED6F3728);
  v76 = v175;
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v75, 1, v175);
  v78 = v176;
  v79 = v157;
  v67 = v168;
  if (v77 == 1)
  {
    v80 = v166;
    sub_1BE1B20E4();
    v81 = *(int *)(v76 + 20);
    v82 = (uint64_t)v152;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v80 + v81) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v161, &qword_1ED6F3728);
  }
  else
  {
    v80 = v166;
    sub_1BDDA2E8C(v75, v166, type metadata accessor for Proto_CRDT);
    v82 = (uint64_t)v152;
  }
  v83 = *(_QWORD *)(v80 + *(int *)(v76 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v84 = v83;
  v85 = v149;
  sub_1BDD86DEC(v84, v149, &qword_1ED6F2DF0);
  v86 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v85, 1, v86) == 1)
  {
    sub_1BDD86E30(v85, &qword_1ED6F2DF0);
LABEL_16:
    sub_1BE1B20E4();
    v87 = *(int *)(v79 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v82 + v87) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_19;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BDD9C3E0(v85, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_16;
  }
  sub_1BDDA2E8C(v85, v82, type metadata accessor for Proto_Register);
LABEL_19:
  v88 = *(int *)(v79 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v89 = swift_retain();
    *(_QWORD *)(v82 + v88) = sub_1BE131250(v89);
    swift_release();
  }
  v90 = *(_QWORD *)(v82 + v88);
  v91 = v153;
  sub_1BDDA2E8C((uint64_t)v165, v153, type metadata accessor for Proto_Timestamp);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v91, 0, 1, v69);
  v92 = v82;
  v93 = v154;
  sub_1BDDA2EF0(v91, v154, &qword_1ED6F3850);
  v94 = v90 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v93, v94, &qword_1ED6F3850);
  swift_endAccess();
  swift_release();
  v95 = v166;
  sub_1BE12AA70(v92);
  v96 = v178;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v97 = swift_retain();
    *(_QWORD *)(v54 + v96) = sub_1BE13500C(v97);
    swift_release();
  }
  v98 = *(_QWORD *)(v54 + v96);
  v99 = v158;
  sub_1BDDA2E8C(v95, v158, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v177 + 56))(v99, 0, 1, v76);
  v100 = v159;
  sub_1BDDA2EF0(v99, v159, &qword_1ED6F3728);
  v101 = v98 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  v102 = v101;
  v55 = v178;
  sub_1BDDA1AF4(v100, v102, &qword_1ED6F3728);
  swift_endAccess();
  swift_release();
  sub_1BDD9C3E0(v167, type metadata accessor for FinalizedTimestamp);
  v65 = (uint64_t)v172;
  v66 = v182;
  v59 = v179;
  v63 = v173;
  v64 = v78;
LABEL_24:
  v103 = v171;
  v104 = v59 + *(int *)(v171 + 36);
  v105 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v106 = v67;
  v107 = v169;
  v108 = v170;
  v105(v169, v104, v170);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v107, 1, v63) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v107, v108);
  v110 = (uint64_t)v160;
  v111 = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 32))(v160, v107, v63);
  MEMORY[0x1E0C80A78](v111);
  v112 = *(_QWORD *)(v103 + 24);
  *(&v142 - 4) = v63;
  *(&v142 - 3) = v112;
  *(&v142 - 2) = v110;
  *(&v142 - 1) = v66;
  v113 = v65;
  v114 = v174;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDE27F68, v65);
  if (v114)
  {
    sub_1BDD9C3E0(v155, type metadata accessor for Proto_Set.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v110, v63);
  }
  v115 = v155;
  v116 = *(_QWORD *)(v155 + v55)
       + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v117 = v142;
  sub_1BDD86DEC(v116, v142, &qword_1ED6F3728);
  v118 = v175;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v117, 1, v175) == 1)
  {
    v119 = v156;
    sub_1BE1B20E4();
    v120 = *(int *)(v118 + 20);
    v121 = (uint64_t)v148;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v119 + v120) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v117, &qword_1ED6F3728);
  }
  else
  {
    v119 = v156;
    sub_1BDDA2E8C(v117, v156, type metadata accessor for Proto_CRDT);
    v121 = (uint64_t)v148;
  }
  v122 = *(_QWORD *)(v119 + *(int *)(v175 + 20))
       + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v123 = v143;
  sub_1BDD86DEC(v122, v143, &qword_1ED6F2DF0);
  v124 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 48))(v123, 1, v124);
  v126 = v160;
  if (v125 == 1)
  {
    sub_1BDD86E30(v123, &qword_1ED6F2DF0);
LABEL_38:
    sub_1BE1B20E4();
    v127 = v157;
    v128 = *(int *)(v157 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v121 + v128) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_41;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BDD9C3E0(v123, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_38;
  }
  sub_1BDDA2E8C(v123, v121, type metadata accessor for Proto_Register);
  v127 = v157;
LABEL_41:
  v129 = *(int *)(v127 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v130 = swift_retain();
    v131 = sub_1BE131250(v130);
    v121 = (uint64_t)v148;
    *(_QWORD *)&v148[v129] = v131;
    swift_release();
  }
  v132 = *(_QWORD *)(v121 + v129);
  v133 = v146;
  sub_1BDDA2E8C(v113, v146, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v144 + 56))(v133, 0, 1, v145);
  v134 = v147;
  sub_1BDDA2EF0(v133, v147, &qword_1ED6F3770);
  v135 = v132 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v134, v135, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  sub_1BE12AA70(v121);
  v136 = v178;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v137 = swift_retain();
    *(_QWORD *)(v115 + v136) = sub_1BE13500C(v137);
    swift_release();
  }
  v138 = *(_QWORD *)(v115 + v136);
  v139 = v158;
  sub_1BDDA2E8C(v156, v158, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v177 + 56))(v139, 0, 1, v175);
  v140 = v159;
  sub_1BDDA2EF0(v139, v159, &qword_1ED6F3728);
  v141 = v138 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v140, v141, &qword_1ED6F3728);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v176 + 8))(v126, v63);
}

uint64_t sub_1BDF20EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  int v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  __n128 v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  __n128 v99;

  v97 = (char *)a1;
  v94 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v86 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v85 = (char *)&v78 - v9;
  v93 = *(_QWORD *)(v4 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v82 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v81 = (char *)&v78 - v13;
  MEMORY[0x1E0C80A78](v12);
  v83 = (char *)&v78 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v84 = (uint64_t)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v87 = (uint64_t)&v78 - v18;
  v19 = type metadata accessor for FinalizedTimestamp(0);
  v95 = *(_QWORD *)(v19 - 8);
  v96 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v80 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v78 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v78 - v25;
  v91 = a2;
  v92 = v4;
  v88 = *(_QWORD *)(a2 + 24);
  v28 = type metadata accessor for CRDictionaryElement(255, v4, v88, v27);
  v29 = sub_1BE1B2EE8();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v78 - v32;
  v34 = *(_QWORD *)(v28 - 8);
  v35 = MEMORY[0x1E0C80A78](v31);
  v37 = (char *)&v78 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v78 - v39;
  MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v78 - v41;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v33, v97, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v33, 1, v28) == 1)
  {
    v97 = (char *)v28;
    v43 = v86;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
    v44 = v98;
    v45 = v84;
    sub_1BDD86DEC(v98, v84, (uint64_t *)&unk_1ED6F2DC0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v45, 1, v96) == 1)
    {
      sub_1BDD86E30(v45, (uint64_t *)&unk_1ED6F2DC0);
      v46 = v94;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v34 + 56))(v46, 1, 1, v97);
    }
    v53 = (uint64_t)v24;
    sub_1BDDA2E8C(v45, (uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    v54 = v90;
    v55 = v91;
    v56 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v43, v44 + *(int *)(v91 + 36), v90);
    v57 = v92;
    v58 = v93;
    v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48))(v43, 1, v92);
    v46 = v94;
    if (v59 == 1)
    {
      sub_1BDD9C3E0(v53, type metadata accessor for FinalizedTimestamp);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v54);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v34 + 56))(v46, 1, 1, v97);
    }
    v71 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v72 = v81;
    v71(v81, v43, v57);
    v73 = v80;
    sub_1BDDA2E8C(v53, v80, type metadata accessor for FinalizedTimestamp);
    v74 = (uint64_t)v82;
    v71(v82, v72, v57);
    v75 = (unint64_t *)(v44 + *(int *)(v55 + 40));
    v76 = v75[1];
    v99.n128_u64[0] = *v75;
    v99.n128_u64[1] = v76;
    v77 = sub_1BDF1E4B8(v73, v74, &v99, v57, v88, v46);
    (*(void (**)(uint64_t, _QWORD, uint64_t, char *, __n128))(v34 + 56))(v46, 0, 1, v97, v77);
  }
  else
  {
    v47 = v37;
    v97 = v26;
    v48 = v85;
    v49 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v49(v42, v33, v28);
    v50 = v87;
    sub_1BDD86DEC(v98, v87, (uint64_t *)&unk_1ED6F2DC0);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v40, v42, v28);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v50, 1, v96);
    v79 = v34;
    if (v51 == 1)
    {
      sub_1BDD9C318((uint64_t)v40, (uint64_t)v97, type metadata accessor for FinalizedTimestamp);
      v52 = *(void (**)(char *, uint64_t))(v34 + 8);
      v52(v40, v28);
      sub_1BDD86E30(v50, (uint64_t *)&unk_1ED6F2DC0);
    }
    else
    {
      v52 = *(void (**)(char *, uint64_t))(v34 + 8);
      v52(v40, v28);
      sub_1BDDA2E8C(v50, (uint64_t)v97, type metadata accessor for FinalizedTimestamp);
    }
    v62 = v91;
    v61 = v92;
    v64 = v89;
    v63 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v48, v98 + *(int *)(v91 + 36), v90);
    v49(v47, v42, v28);
    v65 = v93;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v48, 1, v61) == 1)
    {
      v66 = (uint64_t)v83;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v83, &v47[*(int *)(v28 + 36)], v61);
      v52(v47, v28);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v63);
    }
    else
    {
      v52(v47, v28);
      v66 = (uint64_t)v83;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v83, v48, v61);
    }
    v67 = v94;
    v68 = (unint64_t *)(v98 + *(int *)(v62 + 40));
    v69 = v68[1];
    v99.n128_u64[0] = *v68;
    v99.n128_u64[1] = v69;
    v70 = sub_1BDF1E4B8((uint64_t)v97, v66, &v99, v61, v88, v94);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v79 + 56))(v67, 0, 1, v28, v70);
  }
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDF21528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDF1EAE0(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_1BDF21544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1BDF1FE00(a1, a2, a3);
}

uint64_t sub_1BDF2155C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  __n128 v98;

  v91 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v89 = a4;
  v90 = v7;
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v87 = (char *)&v81 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v10);
  v86 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for FinalizedTimestamp(0);
  v85 = *(_QWORD *)(v88 - 8);
  v12 = MEMORY[0x1E0C80A78](v88);
  v83 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v84 = (uint64_t)&v81 - v14;
  v92 = sub_1BE1B2EE8();
  v95 = *(_QWORD *)(v92 - 8);
  v15 = MEMORY[0x1E0C80A78](v92);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v81 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v94 = (char *)&v81 - v22;
  v93 = *(_QWORD *)(a3 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v81 - v26;
  v29 = *a2;
  v28 = a2[1];
  v30 = *(int *)(a3 + 40);
  v96 = v4;
  v31 = (uint64_t *)(v4 + v30);
  v33 = *v31;
  v32 = v31[1];
  swift_bridgeObjectRetain();
  v34 = swift_bridgeObjectRetain();
  if ((sub_1BDDB04C0(v34, v28) & 1) == 0)
  {
    v82 = v25;
    v35 = sub_1BDDB04C0(v33, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_4;
    v54 = v95;
    v55 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v17, v91, v92);
    v56 = v93;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v17, 1, a3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v55);
LABEL_20:
      v75 = type metadata accessor for CRDictionaryElement.Delta(0, v90, *(_QWORD *)(a3 + 24), v57);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v89, 1, 1, v75);
    }
    v69 = v82;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v82, v17, a3);
    v70 = v88;
    v71 = *(int *)(v88 + 20);
    v72 = *(_QWORD *)&v69[v71];
    v73 = v96;
    v74 = *(_QWORD *)(v96 + v71);
    if (v72 == v74)
    {
      if ((sub_1BDDB2BF8() & 1) == 0)
      {
LABEL_19:
        (*(void (**)(char *, uint64_t))(v56 + 8))(v69, a3);
        goto LABEL_20;
      }
    }
    else if (v72 >= v74)
    {
      goto LABEL_19;
    }
    v76 = v86;
    sub_1BDD9C318(v73, v86, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v85 + 56))(v76, 0, 1, v70);
    v77 = v73 + *(int *)(a3 + 36);
    v62 = v90;
    v78 = *(_QWORD *)(v90 - 8);
    v79 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v87, v77, v90);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v79, 0, 1, v62);
    v98.n128_u64[0] = MEMORY[0x1E0DEE9E0];
    v98.n128_u64[1] = MEMORY[0x1E0DEE9E0];
    v65 = *(_QWORD *)(a3 + 24);
    v66 = v89;
    v80 = sub_1BDF1E9F0(v76, v79, &v98, v62, v65, v89);
    (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v69, a3, v80);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_4:
  v98.n128_u64[0] = v33;
  v98.n128_u64[1] = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDEE9868(v28);
  sub_1BDEE9868(v29);
  v36 = v93;
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  v38 = v91;
  v39 = v37(v91, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v27, v96, a3);
  v40 = v94;
  v41 = v95;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  v43 = v38;
  v44 = v92;
  v42(v94, v43, v92);
  if (v39 == 1)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v44);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v27, a3);
    v45 = v88;
    goto LABEL_13;
  }
  v46 = v84;
  sub_1BDD9C318((uint64_t)v27, v84, type metadata accessor for FinalizedTimestamp);
  v42(v20, (uint64_t)v40, v44);
  result = v37((uint64_t)v20, 1, a3);
  if ((_DWORD)result != 1)
  {
    v48 = v83;
    sub_1BDD9C318((uint64_t)v20, v83, type metadata accessor for FinalizedTimestamp);
    v49 = *(void (**)(char *, uint64_t))(v36 + 8);
    v49(v20, a3);
    v45 = v88;
    v50 = *(int *)(v88 + 20);
    v51 = *(_QWORD *)(v48 + v50);
    v52 = *(_QWORD *)(v46 + v50);
    if (v51 == v52)
      v53 = sub_1BDDB2BF8();
    else
      v53 = v51 < v52;
    v58 = v95;
    sub_1BDD9C3E0(v48, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v46, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v94, v44);
    v49(v27, a3);
    if ((v53 & 1) == 0)
    {
      v60 = v86;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v86, 1, 1, v45);
      v62 = v90;
      v64 = (uint64_t)v87;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v87, 1, 1, v90);
      goto LABEL_15;
    }
LABEL_13:
    v59 = v96;
    v60 = v86;
    sub_1BDD9C318(v96, v86, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v85 + 56))(v60, 0, 1, v45);
    v61 = v59 + *(int *)(a3 + 36);
    v62 = v90;
    v63 = *(_QWORD *)(v90 - 8);
    v64 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v87, v61, v90);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v62);
LABEL_15:
    v97 = v98;
    v65 = *(_QWORD *)(a3 + 24);
    v66 = v89;
    sub_1BDF1E9F0(v60, v64, &v97, v62, v65, v89);
LABEL_16:
    v68 = type metadata accessor for CRDictionaryElement.Delta(0, v62, v65, v67);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v66, 0, 1, v68);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDF21BC4()
{
  sub_1BE1B284C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDF1E398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BE1B347C();
  return 0;
}

uint64_t sub_1BDF21C7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 40));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1BDF21CAC())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void sub_1BDF21CCC()
{
  swift_allocObject();
  sub_1BDF2B8D8();
}

_QWORD *sub_1BDF21D04()
{
  swift_allocObject();
  return sub_1BDD9BBA0();
}

uint64_t sub_1BDF21D34(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char v96[32];
  __n128 v97;

  v94 = (char *)a2;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 432);
  v8 = *(_QWORD *)(*v4 + 440);
  v86 = *(_QWORD *)(*v4 + 464);
  v9 = type metadata accessor for CRDictionaryElement(255, v8, v86, a4);
  swift_getTupleTypeMetadata2();
  v10 = sub_1BE1B2EE8();
  v90 = *(char **)(v10 - 8);
  v91 = v10;
  MEMORY[0x1E0C80A78](v10);
  v89 = (uint64_t)&v76 - v11;
  v12 = type metadata accessor for Timestamp(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v80 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = v7;
  v15 = *(_QWORD *)(v7 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v82 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v83 = (char *)&v76 - v19;
  v88 = v9;
  v87 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v18);
  v85 = (uint64_t)&v76 - v20;
  v92 = type metadata accessor for FinalizedTimestamp(0);
  v21 = MEMORY[0x1E0C80A78](v92);
  v81 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (uint64_t)&v76 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v76 - v25;
  v27 = sub_1BE1B2EE8();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v76 - v30;
  v32 = *(_QWORD *)(v8 - 8);
  v33 = MEMORY[0x1E0C80A78](v29);
  v84 = (char *)&v76 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v76 - v35;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v31, a1, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v8) == 1)
  {
    v37 = *(void (**)(char *, uint64_t))(v28 + 8);
    v37(v31, v27);
    v38 = v89;
    v39 = (uint64_t)v94;
    sub_1BE0D0288((uint64_t)v94, v89);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v39, v95);
    v37(a1, v27);
    return (*((uint64_t (**)(uint64_t, uint64_t))v90 + 1))(v38, v91);
  }
  v91 = v15;
  v77 = v28;
  v89 = v27;
  v90 = a1;
  v78 = v32;
  v41 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v76 = v36;
  v41(v36, v31, v8);
  v42 = v93;
  swift_beginAccess();
  v43 = v42;
  v45 = (uint64_t)v94;
  v44 = v95;
  if (*(_QWORD *)(*(_QWORD *)(v42 + 40) + 16))
  {
    v46 = *(_QWORD *)(v6 + 456);
    swift_bridgeObjectRetain();
    sub_1BDE0D1D0(v45, v44, v46);
    v48 = v47;
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
    {
      v86 = v8;
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
      v50 = v83;
      v49(v83, v45, v44);
      v51 = v43 + qword_1ED6F8B40;
      v52 = sub_1BE1B1F58();
      v53 = (uint64_t)v81;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v81, v51, v52);
      v54 = v43 + qword_1ED6F8B38;
      swift_beginAccess();
      *(_QWORD *)(v53 + *(int *)(v92 + 20)) = *(_QWORD *)(v54 + *(int *)(v92 + 20));
      swift_beginAccess();
      v55 = v82;
      v49(v82, (uint64_t)v50, v44);
      v56 = v88;
      sub_1BE1B2654();
      v57 = (void (*)(char *, _QWORD))sub_1BE1B2660();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v58, 1, v56);
      if ((_DWORD)result != 1)
      {
        v59 = v79;
        v60 = (uint64_t)v76;
        sub_1BDF1E540(v53, (uint64_t)v76, v56, v79);
        sub_1BDD9C3E0(v53, type metadata accessor for FinalizedTimestamp);
        v57(v96, 0);
        v61 = *(void (**)(char *, uint64_t))(v91 + 8);
        v61(v55, v44);
        v61(v83, v44);
        swift_endAccess();
        swift_beginAccess();
        sub_1BDF2BC30(v59, v54);
        swift_endAccess();
        v62 = v80;
        sub_1BE0CFF58(v80);
        swift_beginAccess();
        type metadata accessor for Replica();
        sub_1BDDCB81C(v62);
        sub_1BDD9C3E0(v62, type metadata accessor for Timestamp);
        swift_endAccess();
        v61(v94, v44);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v90, v89);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v60, v86);
      }
      goto LABEL_11;
    }
  }
  v63 = v42 + qword_1ED6F8B40;
  v64 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v26, v63, v64);
  v65 = v42 + qword_1ED6F8B38;
  result = swift_beginAccess();
  v66 = v91;
  v67 = *(int *)(v92 + 20);
  v68 = *(_QWORD *)(v65 + v67);
  v69 = __OFADD__(v68, 1);
  v70 = v68 + 1;
  v71 = v90;
  if (v69)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  *(_QWORD *)&v26[v67] = v70;
  swift_beginAccess();
  sub_1BDF2BC30((uint64_t)v26, v65);
  swift_endAccess();
  sub_1BDD9C318(v65, (uint64_t)v26, type metadata accessor for FinalizedTimestamp);
  v72 = v78;
  v73 = (uint64_t)v84;
  v74 = (uint64_t)v76;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v84, v76, v8);
  v97.n128_u64[0] = MEMORY[0x1E0DEE9E0];
  v97.n128_u64[1] = MEMORY[0x1E0DEE9E0];
  v75 = v85;
  sub_1BDF1E4B8((uint64_t)v26, v73, &v97, v8, v86, v85);
  sub_1BE0D0018(v45, v75);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v45, v95);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v71, v89);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v75, v88);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v74, v8);
}

uint64_t sub_1BDF224A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v6 = *v3;
  v7 = type metadata accessor for CRDictionaryElement(255, *(_QWORD *)(*v3 + 440), *(_QWORD *)(*v3 + 464), a2);
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - v10;
  swift_beginAccess();
  v12 = v3[5];
  v13 = *(_QWORD *)(v6 + 432);
  v14 = *(_QWORD *)(v6 + 456);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v12, v13, v7, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v11, 1, v7))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v15 = type metadata accessor for FinalizedTimestamp(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
  }
  else
  {
    sub_1BDD9C318((uint64_t)v11, a3, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v17 = type metadata accessor for FinalizedTimestamp(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 0, 1, v17);
  }
}

uint64_t sub_1BDF22618@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;

  v22[1] = a3;
  v23 = a2;
  v24 = a1;
  v25 = a5;
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 440);
  v8 = type metadata accessor for CRDictionaryElement(255, v7, *(_QWORD *)(*v5 + 464), a4);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v22 - v12;
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v17 = v5[5];
  v18 = *(_QWORD *)(v6 + 432);
  v19 = *(_QWORD *)(v6 + 456);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](v24, v17, v18, v8, v19);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v13, 1, v8))
  {
    v20 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return v23(v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, &v13[*(int *)(v8 + 36)], v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v25, v16, v7);
  }
}

uint64_t sub_1BDF227A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 432);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 440);
  v8 = type metadata accessor for CRDictionaryElement(255, v6, *(_QWORD *)(*(_QWORD *)v3 + 464), a2);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v17 - v12;
  sub_1BE0D0288(a1, (uint64_t)&v17 - v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
  }
  else
  {
    v15 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    v16 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a3, &v15[*(int *)(v8 + 36)], v6);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v15, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a3, 0, 1, v6);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v13, v7);
  }
}

void sub_1BDF2291C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = type metadata accessor for FinalizedTimestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  sub_1BE0CD5C4(a1, a2, (uint64_t)&v7);
}

void sub_1BDF22AE4(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = a1[2];
  type metadata accessor for CRDictionary.MergeableDelta();
}

uint64_t sub_1BDF22B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1BDDA2E8C(v1, v2 + *(int *)(a1 + 68), type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDF22B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BDD9C3E0(v0 + qword_1ED6F8B38, type metadata accessor for FinalizedTimestamp);
  v1 = v0 + qword_1ED6F8B40;
  v2 = sub_1BE1B1F58();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

void CRDictionary.copy(renamingReferences:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[30];

  v19[5] = a1;
  v19[1] = a3;
  v4 = a2[3];
  v5 = sub_1BE1B2EE8();
  v19[10] = *(_QWORD *)(v5 - 8);
  v19[11] = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v19[9] = (char *)v19 - v7;
  v19[8] = *(_QWORD *)(a2[2] - 8);
  MEMORY[0x1E0C80A78](v6);
  v19[4] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v19[6] = (char *)v19 - v12;
  v13 = sub_1BE1B2EE8();
  v14 = MEMORY[0x1E0C80A78](v13);
  v19[2] = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = a2[5];
  v17 = a2[6];
  v18 = a2[7];
  v19[18] = v4;
  v19[14] = v16;
  v19[3] = v17;
  v19[13] = v18;
  CRDictionary.init()();
}

void sub_1BDF22D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v6 - 208) = v3;
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 280) = v4;
  *(_QWORD *)(v6 - 216) = v1;
  v7 = *(_QWORD *)(v6 - 296);
  *(_QWORD *)(v6 - 240) = v2;
  if (v7)
  {
    *(_QWORD *)(v6 - 184) = v0;
    CRDictionary.makeIterator()((_QWORD *)(v6 - 136));
    v8 = *(_QWORD *)(v6 - 312);
    v9 = *(_QWORD *)(v6 - 192);
    *(_QWORD *)(v6 - 184) = v5;
    *(_QWORD *)(v6 - 176) = v9;
    v10 = *(_QWORD *)(v6 - 224);
    *(_QWORD *)(v6 - 168) = v1;
    *(_QWORD *)(v6 - 160) = v10;
    v11 = *(_QWORD *)(v6 - 232);
    *(_QWORD *)(v6 - 152) = v8;
    *(_QWORD *)(v6 - 144) = v11;
    type metadata accessor for CRDictionary.Iterator();
  }
  *(_QWORD *)(v6 - 184) = v0;
  CRDictionary.makeIterator()((_QWORD *)(v6 - 136));
  v12 = *(_QWORD *)(v6 - 192);
  *(_QWORD *)(v6 - 184) = v5;
  *(_QWORD *)(v6 - 176) = v12;
  v13 = *(_QWORD *)(v6 - 224);
  *(_QWORD *)(v6 - 168) = v1;
  *(_QWORD *)(v6 - 160) = v13;
  v14 = *(_QWORD *)(v6 - 232);
  *(_QWORD *)(v6 - 152) = *(_QWORD *)(v6 - 312);
  *(_QWORD *)(v6 - 144) = v14;
  type metadata accessor for CRDictionary.Iterator();
}

uint64_t sub_1BDF22F58(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD);
  void (*v20)(uint64_t, uint64_t, _QWORD);
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;

  v11 = *(char **)(v10 - 320);
  CRDictionary.Iterator.next()(a1, a4, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) != 1)
  {
    v12 = *(int *)(v6 + 48);
    v13 = v8 + v12;
    v14 = &v11[v12];
    v15 = *(_QWORD *)(v10 - 272);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v8, v11, v9);
    v16 = *(_QWORD *)(*(_QWORD *)(v10 - 192) - 8);
    v17 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v17(v13, v14, *(_QWORD *)(v10 - 192));
    v18 = v4 + *(int *)(*(_QWORD *)(v10 - 208) + 48);
    *(_QWORD *)(v10 - 296) = v18;
    v19 = *(void (**)(uint64_t, uint64_t, _QWORD))(v15 + 16);
    v19(v4, v8, *(_QWORD *)(v10 - 200));
    v20 = *(void (**)(uint64_t, uint64_t, _QWORD))(v16 + 16);
    v20(v18, v13, *(_QWORD *)(v10 - 192));
    v21 = (char *)(v5 + *(int *)(*(_QWORD *)(v10 - 208) + 48));
    v19(v5, v8, *(_QWORD *)(v10 - 200));
    v20((uint64_t)v21, v13, *(_QWORD *)(v10 - 192));
    v22 = *(_QWORD *)(v10 - 264);
    v23 = v21;
    v24 = *(_QWORD *)(v10 - 192);
    v17(v22, v23, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v24);
    sub_1BDF2B938();
  }
  result = sub_1BDE27FD0();
  **(_QWORD **)(v10 - 328) = *(_QWORD *)(v10 - 96);
  return result;
}

void sub_1BDF23084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11 = *(_QWORD *)(v9 - 208);
  v10(v2, v8);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 256) + 8))(v4, *(_QWORD *)(v9 - 248));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v11);
  v10(v3, v8);
  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v9 - 296), v0);
  JUMPOUT(0x1BDF22F30);
}

void CRDictionary.subscript.setter()
{
  sub_1BDF2B938();
}

{
  sub_1BDF2BB54();
}

uint64_t sub_1BDF23140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
  v3 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t CRDictionary.version.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void CRDictionary.init(_:)()
{
  CRDictionary.init()();
}

void sub_1BDF23208()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
}

uint64_t CRDictionary.MutatingAction.init(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  unsigned int v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *TupleTypeMetadata2;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  uint64_t v95;
  uint64_t v96;

  v87 = a7;
  v86 = a6;
  v92 = a5;
  v89 = a4;
  v90 = a3;
  v88 = a2;
  v81 = a8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v82 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v73 - v12;
  v91 = (uint64_t *)type metadata accessor for Proto_Set(0);
  v14 = MEMORY[0x1E0C80A78](v91);
  v84 = (uint64_t)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v73 - v16;
  v18 = type metadata accessor for Proto_CRDT(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v83 = (uint64_t)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v73 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v27, (uint64_t)v26, &qword_1ED6F3728);
  LODWORD(v27) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v26, 1, v18);
  sub_1BDD86E30((uint64_t)v26, &qword_1ED6F3728);
  if ((_DWORD)v27 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v28 = 0xD000000000000014;
    *(_QWORD *)(v28 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v28 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  sub_1BDDA0528((uint64_t)v23);
  v31 = *(_QWORD *)&v23[*(int *)(v18 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v31, (uint64_t)v13, &qword_1ED6F2DF0);
  v32 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48);
  v34 = v33(v13, 1, v32);
  v80 = inited;
  v79 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  v78 = v32;
  if (v34 == 1)
  {
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6F2DF0);
    v35 = v92;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v35 = v92;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v17, type metadata accessor for Proto_Set);
      v37 = v91;
      goto LABEL_11;
    }
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v37 = v91;
  v38 = *((int *)v91 + 5);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)&v17[v38] = qword_1ED6F2800;
  swift_retain();
LABEL_11:
  sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for Proto_CRDT);
  v39 = (uint64_t *)(*(_QWORD *)&v17[*((int *)v37 + 5)]
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  v40 = *v39;
  swift_bridgeObjectRetain();
  v41 = sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Set);
  v95 = v40;
  MEMORY[0x1E0C80A78](v41);
  v42 = v88;
  v43 = v90;
  *(&v73 - 8) = (uint64_t)v88;
  *(&v73 - 7) = v43;
  *(&v73 - 6) = v89;
  *(&v73 - 5) = v35;
  v44 = v87;
  *(&v73 - 4) = v86;
  *(&v73 - 3) = v44;
  *(&v73 - 2) = a1;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE998);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  v47 = a1;
  v48 = sub_1BDDA9D60((unint64_t *)&qword_1ED6EE9A0, &qword_1ED6EE998, MEMORY[0x1E0DEAF50]);
  v49 = v85;
  v50 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2BA28, (uint64_t)(&v73 - 10), v45, v42, v46, v48, MEMORY[0x1E0DEDB38], (uint64_t)v94);
  if (v49)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    return swift_release();
  }
  v51 = v50;
  v74 = v47;
  v75 = v48;
  v76 = v46;
  v77 = v45;
  swift_bridgeObjectRelease();
  v95 = v51;
  v52 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v52);
  v85 = sub_1BE1B2C00();
  swift_bridgeObjectRetain();
  v53 = v83;
  sub_1BDDA0528(v83);
  v54 = *(_QWORD *)(v53 + *(int *)(v18 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v55 = v54;
  v56 = v82;
  sub_1BDD86DEC(v55, v82, &qword_1ED6F2DF0);
  if (v79(v56, 1, v78) == 1)
  {
    sub_1BDD86E30(v56, &qword_1ED6F2DF0);
    v57 = v90;
    v58 = v87;
    v59 = v89;
    v60 = v84;
    v61 = v74;
LABEL_18:
    sub_1BE1B20E4();
    v63 = *((int *)v91 + 5);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)(v60 + v63) = qword_1ED6F2800;
    swift_retain();
    goto LABEL_21;
  }
  v62 = swift_getEnumCaseMultiPayload();
  v57 = v90;
  v59 = v89;
  v60 = v84;
  v61 = v74;
  if (v62 != 1)
  {
    sub_1BDD9C3E0(v56, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    v58 = v87;
    goto LABEL_18;
  }
  sub_1BDDA2E8C(v56, v84, type metadata accessor for Proto_Set);
  v58 = v87;
LABEL_21:
  sub_1BDD9C3E0(v53, type metadata accessor for Proto_CRDT);
  v64 = (uint64_t *)(*(_QWORD *)(v60 + *((int *)v91 + 5))
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
  swift_beginAccess();
  v65 = *v64;
  swift_bridgeObjectRetain();
  v66 = sub_1BDD9C3E0(v60, type metadata accessor for Proto_Set);
  v91 = &v73;
  v96 = v65;
  MEMORY[0x1E0C80A78](v66);
  *(&v73 - 8) = (uint64_t)v88;
  *(&v73 - 7) = v57;
  *(&v73 - 6) = v59;
  v67 = v86;
  *(&v73 - 5) = v92;
  *(&v73 - 4) = v67;
  *(&v73 - 3) = v58;
  *(&v73 - 2) = v61;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v69 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2BA44, (uint64_t)(&v73 - 10), v77, TupleTypeMetadata2, v76, v75, MEMORY[0x1E0DEDB38], (uint64_t)&v93);
  swift_bridgeObjectRelease();
  v96 = v69;
  v70 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v70);
  v71 = sub_1BE1B25E8();
  swift_release();
  swift_setDeallocating();
  swift_release();
  v72 = v81;
  *v81 = v85;
  v72[1] = v71;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDF23B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD v22[6];

  v22[0] = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Value(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20))
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v12, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1BE1B20E4();
    v18 = *(int *)(v13 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v16[v18] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v16, type metadata accessor for Proto_Value);
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v19 = sub_1BDDB4FC0((uint64_t)v16, a2);
  swift_release();
  v20 = v22[5];
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8))(v19, a3);
  if (v20)
    *a6 = v20;
  return result;
}

uint64_t sub_1BDF23D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, _QWORD *a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v62 = a6;
  v75 = a5;
  v63 = a4;
  v78 = a3;
  v74 = a2;
  v77 = a7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v9);
  v67 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v69);
  v72 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Proto_CRDT(0);
  v64 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v66 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v18 = MEMORY[0x1E0C80A78](v17);
  v70 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v61 - v20;
  v22 = type metadata accessor for Proto_Value(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v71 = (uint64_t)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v73 = (uint64_t)&v61 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v61 - v28;
  v30 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  v31 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v31, (uint64_t)v21, &qword_1ED6F3770);
  v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v32 = v65(v21, 1, v22);
  v68 = v22;
  if (v32 == 1)
  {
    sub_1BE1B20E4();
    v33 = *(int *)(v22 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v29[v33] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v21, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v21, (uint64_t)v29, type metadata accessor for Proto_Value);
  }
  v34 = v74;
  v35 = (uint64_t)v66;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v74 = sub_1BDDB4FC0((uint64_t)v29, v34);
  swift_release();
  v36 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v36, (uint64_t)v14, &qword_1ED6F3728);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v14, 1, v15) == 1)
  {
    sub_1BE1B20E4();
    v37 = *(int *)(v15 + 20);
    v38 = v78;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v35 + v37) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F3728);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v14, v35, type metadata accessor for Proto_CRDT);
    v38 = v78;
  }
  v39 = *(_QWORD *)(v35 + *(int *)(v15 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v40 = v67;
  sub_1BDD86DEC(v39, v67, &qword_1ED6F2DF0);
  v41 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41);
  v43 = (uint64_t)v72;
  if (v42 == 1)
  {
    sub_1BDD86E30(v40, &qword_1ED6F2DF0);
    v44 = v69;
    v45 = (_QWORD *)&unk_1ED6F2000;
  }
  else
  {
    v45 = &unk_1ED6F2000;
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1BDDA2E8C(v40, v43, type metadata accessor for Proto_Register);
      v44 = v69;
      goto LABEL_18;
    }
    sub_1BDD9C3E0(v40, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    v44 = v69;
  }
  sub_1BE1B20E4();
  v46 = *(int *)(v44 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)(v43 + v46) = qword_1ED6EF780;
  swift_retain();
LABEL_18:
  sub_1BDD9C3E0(v35, type metadata accessor for Proto_CRDT);
  v47 = *(_QWORD *)(v43 + *(int *)(v44 + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v48 = v47;
  v49 = v70;
  sub_1BDD86DEC(v48, v70, &qword_1ED6F3770);
  v50 = v68;
  if (v65((char *)v49, 1, v68) == 1)
  {
    v51 = v73;
    sub_1BE1B20E4();
    v52 = *(int *)(v50 + 20);
    if (v45[227] != -1)
      swift_once();
    *(_QWORD *)(v51 + v52) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v49, &qword_1ED6F3770);
  }
  else
  {
    v51 = v73;
    sub_1BDDA2E8C(v49, v73, type metadata accessor for Proto_Value);
  }
  sub_1BDD9C3E0(v43, type metadata accessor for Proto_Register);
  v53 = v71;
  sub_1BDD9C318(v51, v71, type metadata accessor for Proto_Value);
  swift_allocObject();
  swift_retain();
  v54 = sub_1BDDB4FC0(v53, v34);
  swift_release();
  v55 = *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 8);
  v57 = swift_retain();
  v58 = v76;
  v56(v57, v38, v55);
  if (v58)
  {
    sub_1BDD9C3E0(v51, type metadata accessor for Proto_Value);
    swift_release();
    result = swift_release();
    *a8 = v58;
  }
  else
  {
    v60 = v63;
    swift_getTupleTypeMetadata2();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 8) + 8))(v54, v60);
    sub_1BDD9C3E0(v51, type metadata accessor for Proto_Value);
    return swift_release();
  }
  return result;
}

uint64_t CRDictionary.MutatingAction.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  _QWORD v60[3];
  _QWORD v61[7];
  uint64_t v62;

  v6 = type metadata accessor for Proto_Set(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v48 - v10;
  v12 = *v2;
  v13 = v2[1];
  result = sub_1BDDA8D6C();
  if (!v3)
  {
    v62 = a1;
    v56 = v13;
    v57 = result;
    v51 = v9;
    swift_retain();
    v15 = sub_1BE1B20E4();
    v16 = *(int *)(v6 + 20);
    if (qword_1ED6F2808 != -1)
      v15 = swift_once();
    v59 = &v48;
    *(_QWORD *)&v11[v16] = qword_1ED6F2800;
    v61[3] = v12;
    MEMORY[0x1E0C80A78](v15);
    v53 = v16;
    v18 = a2[2];
    v17 = a2[3];
    v58 = v11;
    *(&v48 - 8) = v18;
    *(&v48 - 7) = v17;
    v52 = v17;
    v19 = a2[5];
    v55 = a2[4];
    *(&v48 - 6) = v55;
    *(&v48 - 5) = v19;
    v20 = a2[7];
    v54 = a2[6];
    *(&v48 - 4) = v54;
    *(&v48 - 3) = v20;
    *(&v48 - 2) = v62;
    v21 = sub_1BE1B2BF4();
    v22 = (char *)type metadata accessor for Proto_Set.Element(0);
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v24 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEB3E0], v21);
    v25 = v23;
    v26 = v21;
    v27 = v22;
    v28 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2BA60, (uint64_t)(&v48 - 10), v26, v22, v23, v24, MEMORY[0x1E0DEDB38], (uint64_t)v61);
    v48 = v20;
    v49 = v25;
    v29 = v52;
    v50 = v27;
    swift_bridgeObjectRelease();
    v30 = (uint64_t)v58;
    v31 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      v32 = swift_retain();
      *(_QWORD *)(v30 + v31) = sub_1BDDA1768(v32);
      swift_release();
    }
    v33 = (uint64_t *)(*(_QWORD *)(v30 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *v33 = v28;
    v34 = swift_bridgeObjectRelease();
    v61[0] = v56;
    v35 = MEMORY[0x1E0C80A78](v34);
    *(&v48 - 8) = v18;
    *(&v48 - 7) = v29;
    v36 = v54;
    *(&v48 - 6) = v55;
    *(&v48 - 5) = v19;
    v37 = v48;
    *(&v48 - 4) = v36;
    *(&v48 - 3) = v37;
    *(&v48 - 2) = v62;
    MEMORY[0x1E0C80A78](v35);
    *(&v48 - 8) = v18;
    *(&v48 - 7) = v29;
    *(&v48 - 6) = v38;
    *(&v48 - 5) = v19;
    *(&v48 - 4) = v39;
    *(&v48 - 3) = v40;
    *(&v48 - 2) = (uint64_t)sub_1BDF2BA7C;
    *(&v48 - 1) = v41;
    v42 = sub_1BE1B2684();
    swift_bridgeObjectRetain();
    v43 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0E0], v42);
    v44 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2BAAC, (uint64_t)(&v48 - 10), v42, v50, v49, v43, MEMORY[0x1E0DEDB38], (uint64_t)v60);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      v45 = swift_retain();
      *(_QWORD *)(v30 + v31) = sub_1BDDA1768(v45);
      swift_release();
    }
    v46 = (uint64_t *)(*(_QWORD *)(v30 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
    swift_beginAccess();
    *v46 = v44;
    swift_bridgeObjectRelease();
    v47 = (uint64_t)v51;
    sub_1BDD9C318(v30, (uint64_t)v51, type metadata accessor for Proto_Set);
    swift_beginAccess();
    sub_1BE12B5A0(v47);
    swift_release();
    return sub_1BDD9C3E0(v30, type metadata accessor for Proto_Set);
  }
  return result;
}

uint64_t sub_1BDF249A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a7;
  v40 = a8;
  v38 = a6;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v17 = MEMORY[0x1E0C80A78](v16);
  v37 = (uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v36 = (uint64_t)&v34 - v19;
  v20 = type metadata accessor for Proto_Value(0);
  v34 = *(_QWORD *)(v20 - 8);
  v35 = v20;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v23 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1ED6EF6F0 != -1)
    swift_once();
  v24 = qword_1ED6EF6E0;
  *(_QWORD *)(a9 + v23) = qword_1ED6EF6E0;
  MEMORY[0x1E0C80A78](v24);
  *(&v34 - 8) = a3;
  *(&v34 - 7) = a4;
  v25 = v38;
  *(&v34 - 6) = a5;
  *(&v34 - 5) = v25;
  v26 = v40;
  *(&v34 - 4) = v39;
  *(&v34 - 3) = v26;
  *(&v34 - 2) = a1;
  *(&v34 - 1) = a2;
  swift_retain();
  v27 = v41;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF2E158, (uint64_t)v22);
  if (v27)
  {
    result = sub_1BDD9C3E0(a9, type metadata accessor for Proto_Set.Element);
    *a10 = v27;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set.Element._StorageClass(0);
      swift_allocObject();
      v29 = swift_retain();
      *(_QWORD *)(a9 + v23) = sub_1BE13500C(v29);
      swift_release();
    }
    v30 = *(_QWORD *)(a9 + v23);
    v31 = v36;
    sub_1BDDA2E8C((uint64_t)v22, v36, type metadata accessor for Proto_Value);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v35);
    v32 = v37;
    sub_1BDDA2EF0(v31, v37, &qword_1ED6F3770);
    v33 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v32, v33, &qword_1ED6F3770);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDF24C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t, _QWORD, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int EnumCaseMultiPayload;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);

  v104 = a5;
  v107 = a8;
  v105 = a7;
  v106 = a6;
  v98 = a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v14);
  v88 = (uint64_t)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v89);
  v90 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v18 = MEMORY[0x1E0C80A78](v17);
  v94 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v93 = (uint64_t)&v85 - v21;
  MEMORY[0x1E0C80A78](v20);
  v95 = (uint64_t)&v85 - v22;
  v92 = type metadata accessor for Proto_CRDT(0);
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v97 = (uint64_t)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v25 = MEMORY[0x1E0C80A78](v24);
  v101 = (uint64_t)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v100 = (uint64_t)&v85 - v27;
  v99 = type metadata accessor for Proto_Value(0);
  v28 = *(_QWORD *)(v99 - 8);
  v29 = MEMORY[0x1E0C80A78](v99);
  v96 = (uint64_t)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v102 = (uint64_t)&v85 - v32;
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v85 - v33;
  sub_1BE1B20E4();
  v35 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1ED6EF6F0 != -1)
    swift_once();
  v36 = qword_1ED6EF6E0;
  *(_QWORD *)(a9 + v35) = qword_1ED6EF6E0;
  MEMORY[0x1E0C80A78](v36);
  v37 = v104;
  *(&v85 - 8) = a4;
  *(&v85 - 7) = v37;
  v38 = v105;
  *(&v85 - 6) = v106;
  *(&v85 - 5) = v38;
  *(&v85 - 4) = (uint64_t)v107;
  *(&v85 - 3) = a10;
  *(&v85 - 2) = a1;
  *(&v85 - 1) = a3;
  swift_retain();
  v39 = v103;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF2E158, (uint64_t)v34);
  if (v39)
    return sub_1BDD9C3E0(a9, type metadata accessor for Proto_Set.Element);
  v86 = a10;
  v87 = a4;
  v40 = v104;
  v103 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v41 = swift_retain();
    *(_QWORD *)(a9 + v35) = sub_1BE13500C(v41);
    swift_release();
  }
  v42 = *(_QWORD *)(a9 + v35);
  v43 = v100;
  sub_1BDDA2E8C((uint64_t)v34, v100, type metadata accessor for Proto_Value);
  v44 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56);
  v44(v43, 0, 1, v99);
  v45 = v43;
  v46 = v101;
  sub_1BDDA2EF0(v45, v101, &qword_1ED6F3770);
  v47 = v42 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v46, v47, &qword_1ED6F3770);
  swift_endAccess();
  v48 = swift_release();
  MEMORY[0x1E0C80A78](v48);
  *(&v85 - 8) = v87;
  *(&v85 - 7) = v40;
  v49 = v105;
  *(&v85 - 6) = v106;
  *(&v85 - 5) = v49;
  v50 = v86;
  *(&v85 - 4) = (uint64_t)v107;
  *(&v85 - 3) = v50;
  *(&v85 - 2) = v98;
  *(&v85 - 1) = a3;
  v52 = v102;
  v51 = v103;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF2E16C, v102);
  if (v51)
    return sub_1BDD9C3E0(a9, type metadata accessor for Proto_Set.Element);
  v103 = 0;
  v107 = v44;
  sub_1BDD9C318(v52, v96, type metadata accessor for Proto_Value);
  v105 = a9;
  v106 = v35;
  v54 = *(_QWORD *)(a9 + v35)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v55 = v54;
  v56 = v95;
  sub_1BDD86DEC(v55, v95, &qword_1ED6F3728);
  v57 = v91;
  v58 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v56, 1, v92) == 1)
  {
    v59 = v97;
    sub_1BE1B20E4();
    v60 = *(int *)(v58 + 20);
    v61 = (uint64_t)v90;
    v63 = v100;
    v62 = v101;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v59 + v60) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v95, &qword_1ED6F3728);
  }
  else
  {
    v59 = v97;
    sub_1BDDA2E8C(v56, v97, type metadata accessor for Proto_CRDT);
    v61 = (uint64_t)v90;
    v63 = v100;
    v62 = v101;
  }
  v64 = *(_QWORD *)(v59 + *(int *)(v58 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v65 = v88;
  sub_1BDD86DEC(v64, v88, &qword_1ED6F2DF0);
  v66 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v65, 1, v66) == 1)
  {
    sub_1BDD86E30(v65, &qword_1ED6F2DF0);
    v67 = v89;
LABEL_17:
    sub_1BE1B20E4();
    v70 = *(int *)(v67 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v61 + v70) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_20;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v69 = v65;
  v67 = v89;
  if (EnumCaseMultiPayload)
  {
    sub_1BDD9C3E0(v69, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_17;
  }
  sub_1BDDA2E8C(v69, v61, type metadata accessor for Proto_Register);
LABEL_20:
  v71 = *(int *)(v67 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v72 = swift_retain();
    *(_QWORD *)(v61 + v71) = sub_1BE131250(v72);
    swift_release();
  }
  v73 = *(_QWORD *)(v61 + v71);
  sub_1BDDA2E8C(v96, v63, type metadata accessor for Proto_Value);
  v107(v63, 0, 1, v99);
  sub_1BDDA2EF0(v63, v62, &qword_1ED6F3770);
  v74 = v61;
  v75 = v73 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v62, v75, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  v76 = v97;
  sub_1BE12AA70(v74);
  v78 = v105;
  v77 = v106;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v79 = swift_retain();
    *(_QWORD *)(v78 + v77) = sub_1BE13500C(v79);
    swift_release();
  }
  v80 = *(_QWORD *)(v78 + v77);
  v81 = v76;
  v82 = v93;
  sub_1BDDA2E8C(v81, v93, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v82, 0, 1, v58);
  v83 = v94;
  sub_1BDDA2EF0(v82, v94, &qword_1ED6F3728);
  v84 = v80 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v83, v84, &qword_1ED6F3728);
  swift_endAccess();
  swift_release();
  return sub_1BDD9C3E0(v102, type metadata accessor for Proto_Value);
}

void CRDictionary.MutatingAction.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BDF25530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return CRDictionary.MutatingAction.init(from:)(a1, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), a3);
}

uint64_t sub_1BDF25554(uint64_t a1, _QWORD *a2)
{
  return CRDictionary.MutatingAction.encode(to:)(a1, a2);
}

void sub_1BDF25568(_BYTE *a1@<X8>)
{
  CRDictionary.MutatingAction.minEncodingVersion.getter(a1);
}

uint64_t CRDictionary.actionUndoingDifference(from:)@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t TupleTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  __int16 v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t result;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  int64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;

  v4 = a2;
  v118 = a3;
  v6 = 0;
  v157 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 24);
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v122 = (char *)&v116 - v9;
  v10 = *(_QWORD *)(v4 + 48);
  v133 = v7;
  v145 = v10;
  v12 = type metadata accessor for CRDictionaryElement(255, v7, v10, v11);
  v129 = sub_1BE1B2EE8();
  v128 = *(_QWORD *)(v129 - 8);
  v13 = MEMORY[0x1E0C80A78](v129);
  v15 = (char *)&v116 - v14;
  v147 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v126 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v125 = (char *)&v116 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v137 = (char *)&v116 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v146 = (char *)&v116 - v23;
  v24 = *(_QWORD *)(*(_QWORD *)(v4 + 16) - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v121 = (char *)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v143 = (char *)&v116 - v27;
  v132 = v28;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v139 = sub_1BE1B2EE8();
  v138 = *(_QWORD *)(v139 - 8);
  v30 = MEMORY[0x1E0C80A78](v139);
  v141 = (char *)&v116 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v140 = (char *)&v116 - v32;
  v33 = (_QWORD *)*a1;
  v34 = *(_QWORD **)v3;
  v35 = *(_QWORD *)(*(_QWORD *)v3 + 48) == v33[6];
  v131 = v24;
  if (v35)
  {
    v116 = 0;
    swift_retain();
    swift_retain();
    v120 = v33;
    v36 = v34;
    goto LABEL_6;
  }
  if (qword_1ED6F4510 == -1)
    goto LABEL_5;
  while (1)
  {
    swift_once();
LABEL_5:
    swift_retain();
    sub_1BE1B2E40();
    v116 = v6;
    swift_release();
    v37 = v154;
    v38 = BYTE8(v154);
    v39 = v155;
    v120 = sub_1BE0CF4FC(v154, SBYTE8(v154), v155);
    v36 = sub_1BE0CF4FC(v37, v38, v39);
    swift_bridgeObjectRelease();
LABEL_6:
    v40 = *(_QWORD *)(v4 + 40);
    v41 = v132;
    v153 = sub_1BE1B2594();
    v42 = v133;
    v152 = sub_1BE1B257C();
    v156 = 0;
    v154 = 0u;
    v155 = 0u;
    v43 = MEMORY[0x1E0C80A78](v152);
    *(&v116 - 8) = v41;
    *(&v116 - 7) = v42;
    *(&v116 - 6) = *(_QWORD *)(v4 + 32);
    *(&v116 - 5) = v40;
    v142 = v40;
    v44 = *(_QWORD *)(v4 + 56);
    *(&v116 - 4) = v145;
    *(&v116 - 3) = v44;
    *(&v116 - 2) = (uint64_t)&v153;
    MEMORY[0x1E0C80A78](v43);
    v124 = v45;
    *(&v116 - 4) = v45;
    *(&v116 - 3) = (uint64_t)&v152;
    v46 = (uint64_t)v120;
    *(&v116 - 2) = (uint64_t)v120;
    sub_1BE0D09E8(v46, (uint64_t)&v154, (void (*)(char *))sub_1BDF2BB24, v47, (void (*)(char *))sub_1BDF2BB28, (uint64_t)(&v116 - 6));
    v6 = v41;
    sub_1BDD86E30((uint64_t)&v154, &qword_1ED6EF878);
    swift_beginAccess();
    v119 = v36;
    v48 = v36[5];
    v49 = *(_QWORD *)(v48 + 64);
    v123 = v48 + 64;
    v50 = 1 << *(_BYTE *)(v48 + 32);
    v51 = -1;
    if (v50 < 64)
      v51 = ~(-1 << v50);
    v4 = v51 & v49;
    v134 = v48;
    swift_bridgeObjectRetain();
    v135 = (uint64_t *)(v46 + 40);
    swift_beginAccess();
    v52 = 0;
    v130 = (unint64_t)(v50 + 63) >> 6;
    v117 = v130 - 1;
    v53 = v141;
    v54 = v140;
    v55 = v131;
    v127 = v15;
    v136 = TupleTypeMetadata2;
    if (v4)
      break;
LABEL_14:
    v62 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v62 >= v130)
    {
      v145 = v52;
LABEL_19:
      v56 = v15;
      v58 = 0;
      v61 = 1;
      goto LABEL_20;
    }
    v63 = *(_QWORD *)(v123 + 8 * v62);
    if (v63)
      goto LABEL_17;
    v101 = v52 + 2;
    if (v52 + 2 >= v130)
    {
      v56 = v15;
      v58 = 0;
      v61 = 1;
      v145 = v52 + 1;
      goto LABEL_20;
    }
    v63 = *(_QWORD *)(v123 + 8 * v101);
    if (v63)
    {
      v62 = v52 + 2;
LABEL_17:
      v56 = v15;
      v58 = (v63 - 1) & v63;
      v59 = __clz(__rbit64(v63)) + (v62 << 6);
      v145 = v62;
      goto LABEL_13;
    }
    v108 = v52 + 3;
    if (v108 >= v130)
    {
      v145 = v101;
      goto LABEL_19;
    }
    v63 = *(_QWORD *)(v123 + 8 * v108);
    if (v63)
    {
      v62 = v108;
      goto LABEL_17;
    }
    while (1)
    {
      v62 = v108 + 1;
      if (__OFADD__(v108, 1))
        break;
      if (v62 >= v130)
      {
        v56 = v15;
        v58 = 0;
        v61 = 1;
        v145 = v117;
        goto LABEL_20;
      }
      v63 = *(_QWORD *)(v123 + 8 * v62);
      ++v108;
      if (v63)
        goto LABEL_17;
    }
LABEL_58:
    __break(1u);
  }
  while (1)
  {
    v56 = v15;
    v57 = __clz(__rbit64(v4));
    v58 = (v4 - 1) & v4;
    v145 = v52;
    v59 = v57 | (v52 << 6);
LABEL_13:
    v60 = v134;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v53, *(_QWORD *)(v134 + 48) + *(_QWORD *)(v55 + 72) * v59, v6);
    (*(void (**)(char *, unint64_t, uint64_t))(v147 + 16))(&v53[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v60 + 56) + *(_QWORD *)(v147 + 72) * v59, v12);
    v61 = 0;
LABEL_20:
    v64 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v53, v61, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v54, v53, v139);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v54, 1, TupleTypeMetadata2) == 1)
      break;
    v144 = v58;
    v65 = &v54[*(int *)(TupleTypeMetadata2 + 48)];
    v66 = v143;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v143, v54, v6);
    v67 = v6;
    v68 = v55;
    v69 = v146;
    v70 = v147;
    v71 = *(void (**)(char *, char *, uint64_t))(v147 + 32);
    v71(v146, v65, v12);
    v72 = *v135;
    swift_bridgeObjectRetain();
    MEMORY[0x1C3B7C58C](v66, v72, v67, v12, v142);
    swift_bridgeObjectRelease();
    v15 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v56, 1, v12) == 1)
    {
      (*(void (**)(char *, uint64_t))(v147 + 8))(v69, v12);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v56, v129);
      v6 = v67;
      v53 = v141;
      v54 = v140;
      TupleTypeMetadata2 = v136;
      v55 = v68;
      goto LABEL_11;
    }
    v73 = v137;
    v71(v137, v56, v12);
    v74 = &v73[*(int *)(v12 + 36)];
    v75 = sub_1BE1B2798();
    v76 = v146;
    v77 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
    v78 = v125;
    v77(v125, v73, v12);
    v79 = v126;
    v77(v126, v76, v12);
    if ((v75 & 1) != 0)
    {
      v80 = *(void (**)(char *, uint64_t))(v147 + 8);
      v80(v79, v12);
      v80(v78, v12);
      v53 = v141;
      v54 = v140;
      TupleTypeMetadata2 = v136;
LABEL_40:
      v4 = v144;
      v80(v137, v12);
      v80(v76, v12);
      v55 = v131;
      v6 = v132;
      (*(void (**)(char *, uint64_t))(v131 + 8))(v143, v132);
      v15 = v127;
      v52 = v145;
      if (!v4)
        goto LABEL_14;
    }
    else
    {
      v81 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
      v82 = *(_QWORD *)&v78[v81];
      v83 = *(_QWORD *)&v79[v81];
      if (v82 == v83)
      {
        v150 = sub_1BE1B1F40();
        LOWORD(v151) = v84;
        BYTE2(v151) = v85;
        BYTE3(v151) = v86;
        BYTE4(v151) = v87;
        BYTE5(v151) = v88;
        BYTE6(v151) = v89;
        HIBYTE(v151) = v90;
        v148 = sub_1BE1B1F40();
        LOWORD(v149) = v91;
        BYTE2(v149) = v92;
        BYTE3(v149) = v93;
        BYTE4(v149) = v94;
        BYTE5(v149) = v95;
        BYTE6(v149) = v96;
        HIBYTE(v149) = v97;
        v98 = bswap64(v150);
        v99 = bswap64(v148);
        if (v98 != v99)
        {
          TupleTypeMetadata2 = v136;
LABEL_33:
          if (v98 < v99)
            v102 = -1;
          else
            v102 = 1;
          v100 = v102 >> 31;
          goto LABEL_37;
        }
        v98 = bswap64(v151);
        v99 = bswap64(v149);
        TupleTypeMetadata2 = v136;
        if (v98 != v99)
          goto LABEL_33;
        LOBYTE(v100) = 0;
      }
      else
      {
        LOBYTE(v100) = v82 < v83;
        TupleTypeMetadata2 = v136;
      }
LABEL_37:
      v80 = *(void (**)(char *, uint64_t))(v147 + 8);
      v80(v79, v12);
      v80(v78, v12);
      if ((v100 & 1) == 0)
      {
        v53 = v141;
        v54 = v140;
        goto LABEL_40;
      }
      v103 = v131;
      v6 = v132;
      (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v121, v143, v132);
      v104 = v133;
      v105 = *(_QWORD *)(v133 - 8);
      v106 = v122;
      v107 = v74;
      v55 = v103;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v122, v107, v133);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v106, 0, 1, v104);
      sub_1BE1B2684();
      sub_1BE1B26B4();
      v80(v137, v12);
      v80(v146, v12);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v143, v6);
      v15 = v127;
      v53 = v141;
      v54 = v140;
LABEL_11:
      v4 = v144;
      v52 = v145;
      if (!v144)
        goto LABEL_14;
    }
  }
  swift_release();
  v109 = v153;
  swift_bridgeObjectRetain();
  v110 = sub_1BE1B2BAC();
  swift_bridgeObjectRelease();
  if (v110 >= 1)
  {
    swift_release();
    result = swift_release();
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  v112 = sub_1BE1B260C();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if (v112 < 1)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v115 = v118;
    *v118 = 0;
    v115[1] = 0;
  }
  else
  {
LABEL_55:
    v113 = v152;
    v114 = v118;
    *v118 = v109;
    v114[1] = v113;
  }
  return result;
}

uint64_t sub_1BDF26238(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v5 = *a3;
  v6 = *(_QWORD *)(*a3 + 88);
  v7 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(v6 + 16);
  v11 = sub_1BE1B2EE8();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(v5 + 80);
  MEMORY[0x1E0C80A78](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
  swift_beginAccess();
  v18 = a3[5];
  v19 = *(_QWORD *)(v5 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v18, v15, v6, v19);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v22 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v14, &v9[*(int *)(v6 + 36)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, v10);
    sub_1BE1B2684();
    sub_1BE1B26B4();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v6);
  }
  return result;
}

uint64_t CRDictionary.apply(_:)(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[20];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14[19] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v3 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v14[9] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v14[8] = (char *)v14 - v6;
  MEMORY[0x1E0C80A78](v5);
  v14[15] = (char *)v14 - v7;
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v9 = sub_1BE1B2EE8();
  v14[17] = *(_QWORD *)(v9 - 8);
  v14[18] = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v14[16] = (char *)v14 - v11;
  MEMORY[0x1E0C80A78](v10);
  v12 = sub_1BE1B2EE8();
  result = MEMORY[0x1E0C80A78](v12);
  if (*a1)
  {
    v14[5] = a1[1];
    sub_1BDD9A640();
  }
  return result;
}

void CRDictionary.removeValue(forKey:)()
{
  sub_1BDD9A640();
}

uint64_t sub_1BDF26C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1BDF227A4(v4, a4, v5);
}

void sub_1BDF26C90()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF26CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return CRDictionary.subscript.getter(v4, a4, v5);
}

void sub_1BDF26CF8()
{
  type metadata accessor for CRDictionary();
}

void sub_1BDF26D38()
{
  sub_1BDF2B938();
}

void (*CRDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = sub_1BE1B2EE8();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = *(_QWORD *)(a3 + 16);
  v7[5] = v11;
  v7[6] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[7] = v13;
  v7[8] = malloc(*(_QWORD *)(v13 + 64));
  (*(void (**)(void))(v13 + 16))();
  sub_1BDDB1770(a2, v14, (uint64_t)v11);
  return sub_1BDF26E20;
}

void sub_1BDF26E20(uint64_t **a1, char a2)
{
  sub_1BDF27078(a1, a2, (void (*)(void *, void *, uint64_t))sub_1BDF2B938);
}

uint64_t sub_1BDF26E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1BDF224A0(a1, a2, a3);
}

uint64_t CRDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v10 + 16))(v12);
  v16 = v9;
  v17 = *(_OWORD *)(a4 + 24);
  v18 = *(_OWORD *)(a4 + 40);
  v19 = *(_QWORD *)(a4 + 56);
  v20 = a2;
  v21 = a3;
  sub_1BDF22618((uint64_t)v12, (uint64_t (*)(uint64_t))sub_1BDF2BB34, (uint64_t)v15, v13, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1BDF26F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v2);
}

void (*CRDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  *v11 = a5;
  v11[1] = v5;
  v12 = *(_QWORD *)(a5 + 24);
  v11[2] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[3] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[4] = malloc(v14);
  v15 = malloc(v14);
  v16 = *(_QWORD *)(a5 + 16);
  v11[5] = v15;
  v11[6] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v11[7] = v17;
  v11[8] = malloc(*(_QWORD *)(v17 + 64));
  (*(void (**)(void))(v17 + 16))();
  CRDictionary.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
  return sub_1BDF2706C;
}

void sub_1BDF2706C(uint64_t **a1, char a2)
{
  sub_1BDF27078(a1, a2, (void (*)(void *, void *, uint64_t))sub_1BDF2BB54);
}

void sub_1BDF27078(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, uint64_t);
  uint64_t v13;

  v4 = *a1;
  v6 = (*a1)[7];
  v5 = (void *)(*a1)[8];
  v7 = (void *)(*a1)[5];
  v13 = (*a1)[6];
  v9 = (*a1)[3];
  v8 = (void *)(*a1)[4];
  v10 = (*a1)[2];
  v11 = **a1;
  if ((a2 & 1) == 0)
  {
    a3(v7, v5, *v4);
    JUMPOUT(0x1BDF27114);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))(v4[4], v7, v4[2]);
  a3(v8, v5, v11);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v13);
  v12 = *(void (**)(void *, uint64_t))(v9 + 8);
  v12(v8, v10);
  v12(v7, v10);
  free(v5);
  free(v7);
  free(v8);
  free(v4);
}

uint64_t CRDictionary.index(where:)@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t result;
  _QWORD *v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  __int128 v53;
  unsigned __int8 v54;
  __int128 v55;
  char v56;
  uint64_t v57;

  v46 = a1;
  v47 = a2;
  v39 = a4;
  v7 = a3[3];
  v43 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v45 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v42 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v53 = *v4;
  v14 = v53;
  CRDictionary.startIndex.getter(v15, (uint64_t)&v55);
  v38 = v14;
  *(_QWORD *)&v51 = v14;
  CRDictionary.endIndex.getter(a3, (uint64_t)&v53);
  v16 = *((_QWORD *)&v53 + 1);
  v50 = v53;
  LODWORD(v14) = v54;
  v18 = a3[5];
  v17 = a3[6];
  v37 = a3;
  v44 = v7;
  v20 = type metadata accessor for CRDictionaryElement(0, v7, v17, v19);
  v22 = *((_QWORD *)&v55 + 1);
  v21 = v55;
  v23 = v56;
  v41 = v18;
  v48 = v16;
  v49 = v14;
  v40 = v20;
  if ((sub_1BE1B25F4() & 1) != 0)
  {
LABEL_6:
    sub_1BDE27EC8(v21, v22, v23);
    result = sub_1BDE27EC8(v50, v48, v49);
    v35 = v39;
    *v39 = 0;
    v35[1] = 0;
    v36 = -1;
  }
  else
  {
    v24 = v38;
    v25 = v37;
    while (1)
    {
      *(_QWORD *)&v51 = v24;
      *(_QWORD *)&v53 = v21;
      *((_QWORD *)&v53 + 1) = v22;
      v54 = v23 & 1;
      v26 = v45;
      CRDictionary.subscript.getter((uint64_t)v13, v45, (uint64_t)&v53, v25);
      v27 = v46(v13, v26);
      if (v5)
      {
        sub_1BDE27EC8(v50, v48, v49);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v44);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v11);
        return sub_1BDE27EC8(v55, *((uint64_t *)&v55 + 1), v56);
      }
      v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v44);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v11);
      if ((v28 & 1) != 0)
        break;
      v57 = v24;
      v30 = *((_QWORD *)&v55 + 1);
      v29 = v55;
      v31 = v11;
      v32 = v56;
      v51 = v55;
      v52 = v56;
      CRDictionary.index(after:)((uint64_t)v25, (uint64_t)&v53);
      v33 = v32;
      v11 = v31;
      sub_1BDE27EC8(v29, v30, v33);
      v22 = *((_QWORD *)&v53 + 1);
      v21 = v53;
      v23 = v54;
      v55 = v53;
      v56 = v54;
      if ((sub_1BE1B25F4() & 1) != 0)
        goto LABEL_6;
    }
    result = sub_1BDE27EC8(v50, v48, v49);
    v36 = v56;
    v35 = v39;
    *(_OWORD *)v39 = v55;
  }
  *((_BYTE *)v35 + 16) = v36;
  return result;
}

uint64_t CRDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v6 = a4[2];
  v5 = a4[3];
  v29 = a1;
  v30 = v5;
  v7 = type metadata accessor for CRDictionaryElement(255, v5, a4[6], (uint64_t)a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v28 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v27 - v15;
  v27 = *(char **)(a3 + 8);
  v17 = (char *)&v27 + *(int *)(v14 + 48) - v15;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BE1B26C0();
  swift_bridgeObjectRelease();
  v27 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v18 = v27;
  v19 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v13, v16, v6);
  v20 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v17, v7);
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v21(v29, v13, v6);
  v22 = *(int *)(TupleTypeMetadata2 + 48);
  v23 = v28;
  v24 = &v28[v22];
  v21((uint64_t)v28, v16, v6);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v24, v17, v7);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v30 - 8) + 16))(v31, &v24[*(int *)(v7 + 36)]);
  v25 = *(void (**)(char *, uint64_t))(v20 + 8);
  v25(v24, v7);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v6);
  return ((uint64_t (*)(char *, uint64_t))v25)(v27, v7);
}

uint64_t CRDictionary.index(after:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  swift_beginAccess();
  type metadata accessor for CRDictionaryElement(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), v4);
  swift_bridgeObjectRetain();
  v5 = sub_1BE1B2618();
  v7 = v6;
  v9 = v8;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  return result;
}

uint64_t CRDictionary.merge(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];
  _QWORD v19[3];

  v3 = v2;
  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  result = MEMORY[0x1E0C80A78](v9);
  v19[0] = *a1;
  if (*v3 != v19[0])
  {
    v11 = MEMORY[0x1C3B7DF54](&unk_1BE1BD5B8, a2);
    v12 = sub_1BDD9A6B0((uint64_t)v19, a2, v11);
    v13 = *v3;
    swift_beginAccess();
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(_QWORD *)(v13 + 32);
    swift_beginAccess();
    v16 = *(_QWORD *)(v12 + 24);
    v18[0] = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    sub_1BDEEDAB4(v17, v18, v15);
    sub_1BDEEDAB4(v16, v18, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18[0] == 1)
      sub_1BDF28E9C();
    if (v18[0] == 3)
      sub_1BDD9A640();
    return swift_release();
  }
  return result;
}

uint64_t CRDictionary.finalizeTimestamps(_:)()
{
  uint64_t result;

  result = sub_1BDD8C52C();
  if ((result & 1) != 0)
    sub_1BDD9A640();
  return result;
}

uint64_t static CRDictionary.== infix(_:_:)(uint64_t a1, _QWORD **a2)
{
  return sub_1BE0CF568(*a2) & 1;
}

uint64_t CRDictionary.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = sub_1BE1B1F58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_1BE1B305C();
  v20 = v18;
  v21 = v19;
  sub_1BE1B284C();
  v8 = *(_QWORD *)(v7 + 16) + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BE1B61C0;
  v10 = sub_1BE1B1F40();
  v11 = MEMORY[0x1E0DEDE70];
  v12 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v9 + 64) = v12;
  *(_BYTE *)(v9 + 32) = v10;
  v13 = sub_1BE1B1F40();
  *(_QWORD *)(v9 + 96) = v11;
  *(_QWORD *)(v9 + 104) = v12;
  *(_BYTE *)(v9 + 72) = BYTE1(v13);
  sub_1BE1B27EC();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDF1E398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  swift_beginAccess();
  v17 = *(_QWORD *)(v7 + 40);
  type metadata accessor for CRDictionaryElement(255, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), v14);
  v15 = sub_1BE1B2684();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0E8], v15);
  sub_1BE1B3488();
  sub_1BE1B284C();
  return v20;
}

void CRDictionary.delta(_:from:)(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  _OWORD v12[3];
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v6 = *v3;
  v15 = *a2;
  v16 = v6;
  swift_retain();
  swift_retain();
  CRDictionary.finalizeTimestamps(_:)();
  CRDictionary.finalizeTimestamps(_:)();
  v7 = v16;
  v14[0] = v16;
  CRDictionary.version.getter(v12);
  v8 = v12[0];
  v13 = v15;
  CRDictionary.version.getter(v14);
  v9 = v14[0];
  if ((sub_1BDDB04C0(*((uint64_t *)&v8 + 1), v14[1]) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_1BDDB04C0(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      swift_release();
      swift_release();
      v11 = a3[2];
      v12[0] = a3[1];
      v12[1] = v11;
      v12[2] = a3[3];
      type metadata accessor for CRDictionary.MergeableDelta();
    }
  }
  swift_retain();
  swift_retain();
  sub_1BDF2291C(a1, v7);
}

void sub_1BDF27F8C()
{
  JUMPOUT(0x1BDF27FA0);
}

uint64_t CRDictionary.canMerge(delta:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = sub_1BE0D175C(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void CRDictionary.merge(delta:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v6 = type metadata accessor for FinalizedTimestamp(0);
  v3 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v5 - v4;
  v5 = a2;
  sub_1BDD9A640();
}

uint64_t sub_1BDF280C0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v4 = *v0;
  v5 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  *(_QWORD *)(v3 - 128) = *v2;
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v7;
  *(_QWORD *)(v3 - 104) = v6;
  *(_QWORD *)(v3 - 96) = v8;
  *(_QWORD *)(v3 - 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_1BE0D1904((__int128 *)(v3 - 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    v11 = v4 + qword_1ED6F8B38;
    swift_beginAccess();
    sub_1BDD9C318(v11, v1, type metadata accessor for FinalizedTimestamp);
    v12 = *(_OWORD **)(v3 - 176);
    v13 = v12[2];
    *(_OWORD *)(v3 - 128) = v12[1];
    *(_OWORD *)(v3 - 112) = v13;
    *(_OWORD *)(v3 - 96) = v12[3];
    type metadata accessor for CRDictionary.MergeableDelta();
  }
  return v10 & 1;
}

uint64_t CRDictionary.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  __int16 v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  _BOOL4 v96;
  unsigned int v97;
  char *v98;
  uint64_t *v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t AssociatedTypeWitness;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[8];

  v110 = a4;
  v147[7] = *MEMORY[0x1E0C80C00];
  v7 = a3[6];
  v8 = a3[3];
  v114 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v9);
  v113 = (char *)&v108 - v10;
  v130 = v8;
  v11 = v7;
  v13 = type metadata accessor for CRDictionaryElement(255, v8, v7, v12);
  v124 = sub_1BE1B2EE8();
  v123 = *(_QWORD *)(v124 - 8);
  v14 = MEMORY[0x1E0C80A78](v124);
  v115 = (char *)&v108 - v15;
  v16 = *(_QWORD *)(v13 - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v126 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v127 = (char *)&v108 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v132 = (char *)&v108 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v140 = (char *)&v108 - v24;
  v25 = a3[2];
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v112 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v125 = (char *)&v108 - v29;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = sub_1BE1B2EE8();
  v134 = *(_QWORD *)(v31 - 8);
  v135 = v31;
  v32 = MEMORY[0x1E0C80A78](v31);
  v136 = (char *)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v32);
  v133 = (char *)&v108 - v35;
  v36 = *a1;
  v37 = *v139;
  v116 = a2;
  if (!*(_QWORD *)(a2 + 24) && v37 == v36)
    goto LABEL_3;
  v39 = a3[5];
  v147[0] = sub_1BE1B2594();
  v146 = sub_1BE1B2594();
  v40 = sub_1BE1B257C();
  v139 = &v108;
  v145 = v40;
  v41 = MEMORY[0x1E0C80A78](v40);
  v42 = v130;
  *(&v108 - 8) = v25;
  *(&v108 - 7) = v42;
  *(&v108 - 6) = a3[4];
  *(&v108 - 5) = v39;
  v43 = a3[7];
  *(&v108 - 4) = v11;
  *(&v108 - 3) = v43;
  *(&v108 - 2) = (uint64_t)v147;
  MEMORY[0x1E0C80A78](v41);
  *(&v108 - 8) = v25;
  *(&v108 - 7) = v44;
  *(&v108 - 6) = v45;
  *(&v108 - 5) = v39;
  v137 = v39;
  *(&v108 - 4) = v11;
  *(&v108 - 3) = v46;
  v118 = v46;
  *(&v108 - 2) = (uint64_t)&v146;
  sub_1BE0D09E8(v36, v116, (void (*)(char *))sub_1BDF2BB24, v47, (void (*)(char *))sub_1BDF2BB24, (uint64_t)(&v108 - 10));
  swift_beginAccess();
  v48 = *(_QWORD *)(v36 + 40);
  v49 = *(_QWORD *)(v48 + 64);
  v111 = v48 + 64;
  v50 = 1 << *(_BYTE *)(v48 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & v49;
  v128 = v48;
  swift_bridgeObjectRetain();
  v131 = (uint64_t *)(v37 + 40);
  swift_beginAccess();
  v53 = 0;
  v54 = v52;
  v122 = (unint64_t)(v50 + 63) >> 6;
  v109 = (uint64_t *)(v122 - 1);
  v55 = v115;
  v56 = v125;
  v121 = v25;
  v119 = v26;
  v120 = TupleTypeMetadata2;
  while (1)
  {
    v57 = v136;
    if (v54)
    {
      v58 = v55;
      v138 = (v54 - 1) & v54;
      v139 = v53;
      v59 = __clz(__rbit64(v54)) | ((_QWORD)v53 << 6);
      goto LABEL_11;
    }
    v62 = (int64_t)v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
    }
    if (v62 >= v122)
    {
      v139 = v53;
LABEL_17:
      v138 = 0;
LABEL_18:
      v61 = 1;
      goto LABEL_19;
    }
    v63 = *(_QWORD *)(v111 + 8 * v62);
    if (v63)
      goto LABEL_15;
    v99 = (uint64_t *)((char *)v53 + 2);
    if ((uint64_t)v53 + 2 >= v122)
    {
      v138 = 0;
      v139 = (uint64_t *)((char *)v53 + 1);
      goto LABEL_18;
    }
    v63 = *(_QWORD *)(v111 + 8 * (_QWORD)v99);
    if (v63)
    {
      v62 = (int64_t)v53 + 2;
      goto LABEL_15;
    }
    v100 = (int64_t)v53 + 3;
    if (v100 >= v122)
    {
      v139 = v99;
      goto LABEL_17;
    }
    v63 = *(_QWORD *)(v111 + 8 * v100);
    if (v63)
    {
      v62 = v100;
LABEL_15:
      v58 = v55;
      v138 = (v63 - 1) & v63;
      v139 = (uint64_t *)v62;
      v59 = __clz(__rbit64(v63)) + (v62 << 6);
LABEL_11:
      v60 = v128;
      (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v136, *(_QWORD *)(v128 + 48) + *(_QWORD *)(v26 + 72) * v59, v25);
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(&v57[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v60 + 56) + *(_QWORD *)(v16 + 72) * v59, v13);
      v61 = 0;
      v55 = v58;
      goto LABEL_19;
    }
    while (1)
    {
      v62 = v100 + 1;
      if (__OFADD__(v100, 1))
        goto LABEL_55;
      if (v62 >= v122)
        break;
      v63 = *(_QWORD *)(v111 + 8 * v62);
      ++v100;
      if (v63)
        goto LABEL_15;
    }
    v138 = 0;
    v61 = 1;
    v139 = v109;
LABEL_19:
    v64 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v57, v61, 1, TupleTypeMetadata2);
    v65 = v133;
    (*(void (**)(void))(v134 + 32))();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v65, 1, TupleTypeMetadata2) == 1)
      break;
    v66 = &v65[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v56, v65, v25);
    v67 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v67(v140, v66, v13);
    v68 = *v131;
    swift_bridgeObjectRetain();
    MEMORY[0x1C3B7C58C](v56, v68, v25, v13, v137);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v55, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v140, v13);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v56, v25);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v55, v124);
      goto LABEL_8;
    }
    v69 = v16;
    v70 = v140;
    v71 = v132;
    v67(v132, v55, v13);
    v129 = &v70[*(int *)(v13 + 36)];
    v72 = sub_1BE1B2798();
    v73 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
    v74 = v127;
    v73(v127, v71, v13);
    v75 = v126;
    v73(v126, v70, v13);
    if ((v72 & 1) != 0)
    {
      v76 = *(void (**)(char *, uint64_t))(v69 + 8);
      v76(v75, v13);
      v76(v74, v13);
      v16 = v69;
      v26 = v119;
    }
    else
    {
      v77 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
      v78 = *(_QWORD *)&v75[v77];
      v79 = *(_QWORD *)&v74[v77];
      if (v78 == v79)
      {
        v143 = sub_1BE1B1F40();
        LOWORD(v144) = v80;
        BYTE2(v144) = v81;
        BYTE3(v144) = v82;
        BYTE4(v144) = v83;
        BYTE5(v144) = v84;
        BYTE6(v144) = v85;
        HIBYTE(v144) = v86;
        v141 = sub_1BE1B1F40();
        LOWORD(v142) = v87;
        BYTE2(v142) = v88;
        BYTE3(v142) = v89;
        BYTE4(v142) = v90;
        BYTE5(v142) = v91;
        BYTE6(v142) = v92;
        HIBYTE(v142) = v93;
        v94 = bswap64(v143);
        v95 = bswap64(v141);
        v16 = v69;
        v26 = v119;
        if (v94 == v95 && (v94 = bswap64(v144), v95 = bswap64(v142), v94 == v95))
        {
          v75 = v126;
          v96 = 0;
        }
        else
        {
          v75 = v126;
          if (v94 < v95)
            v97 = -1;
          else
            v97 = 1;
          v96 = v97 >> 31;
        }
      }
      else
      {
        v96 = v78 < v79;
        v16 = v69;
        v26 = v119;
      }
      v76 = *(void (**)(char *, uint64_t))(v16 + 8);
      v76(v75, v13);
      v76(v127, v13);
      if (!v96)
      {
        v76(v132, v13);
        v76(v140, v13);
        v56 = v125;
        v25 = v121;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v125, v121);
        goto LABEL_35;
      }
    }
    v98 = v125;
    v25 = v121;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v112, v125, v121);
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v129, v116, v130);
    sub_1BE1B2684();
    sub_1BE1B26B4();
    v76(v132, v13);
    v76(v140, v13);
    v56 = v98;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v98, v25);
    v55 = v115;
LABEL_35:
    TupleTypeMetadata2 = v120;
LABEL_8:
    v54 = v138;
    v53 = v139;
  }
  swift_release();
  v101 = v147[0];
  swift_bridgeObjectRetain();
  v102 = sub_1BE1B2BAC();
  result = swift_bridgeObjectRelease();
  if (v102 <= 0)
  {
    swift_bridgeObjectRetain();
    v103 = sub_1BE1B2BAC();
    result = swift_bridgeObjectRelease();
    if (v103 <= 0)
    {
      swift_bridgeObjectRetain();
      v104 = sub_1BE1B260C();
      result = swift_bridgeObjectRelease();
      if (v104 < 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
LABEL_3:
        v38 = v110;
        *v110 = 0;
        v38[1] = 0;
        v38[2] = 0;
        return result;
      }
    }
  }
  v106 = v145;
  v105 = v146;
  v107 = v110;
  *v110 = v101;
  v107[1] = v105;
  v107[2] = v106;
  return result;
}

uint64_t sub_1BDF28DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CRDictionary.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(uint64_t **)(a2 + 48), *(_QWORD **)(a2 + 56), a3);
}

uint64_t sub_1BDF28E08()
{
  return CRDictionary.encode(to:)();
}

BOOL CRDictionary.hasEncodedData.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16) || *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) != 0;
}

void sub_1BDF28E80(_BYTE *a1@<X8>)
{
  CRDictionary.minEncodingVersion.getter(a1);
}

void CRDictionary.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1BDF28E9C()
{
  type metadata accessor for CRDictionaryRef();
}

uint64_t sub_1BDF28ECC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = swift_dynamicCastClassUnconditional();
  result = swift_release();
  *v0 = v1;
  return result;
}

uint64_t CRDictionary.ObservableDifference.addedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRDictionary.ObservableDifference.removedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRDictionary.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDF28F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *))(v4 + 16))(v7);
  sub_1BE1B2BF4();
  sub_1BE1B2BB8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, a3);
}

uint64_t sub_1BDF28FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[6];
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v59 = a9;
  v53 = a8;
  v62 = a6;
  v69 = a5;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  MEMORY[0x1E0C80A78](v14);
  v58 = (uint64_t)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_Timestamp(0);
  v56 = *(_QWORD *)(v16 - 8);
  v57 = v16;
  MEMORY[0x1E0C80A78](v16);
  v55 = (_QWORD *)((char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a1;
  sub_1BDD9C318(a1, (uint64_t)v23, v24);
  v54 = a4;
  v25 = a7;
  v27 = type metadata accessor for CRDictionaryElement(0, a4, a7, v26);
  swift_retain();
  v28 = MEMORY[0x1C3B7DF54](&unk_1BE1BDA6C, v27);
  v29 = a3;
  v30 = v60;
  sub_1BE0D2CE0((uint64_t)v23, a2, a3, v27, v69, v62, v28, (uint64_t)&v63);
  if (!v30)
  {
    v60 = a2;
    v32 = v55;
    v51 = v20;
    v52 = v29;
    v33 = v25;
    v34 = v64;
    v35 = v65;
    v36 = v66;
    v37 = v67;
    v38 = v68;
    v50[5] = v63;
    v39 = v59;
    *v59 = v63;
    v39[1] = v34;
    v50[4] = v35;
    v39[2] = v35;
    v39[3] = v36;
    v50[3] = v36;
    v50[2] = v37;
    v39[4] = v37;
    v39[5] = v38;
    v50[1] = v38;
    v40 = v61;
    v41 = *(_QWORD *)(v61 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    v42 = v41;
    v43 = v58;
    sub_1BDD86DEC(v42, v58, &qword_1ED6F3850);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v43, 1, v57) == 1)
    {
      *v32 = 0;
      v32[1] = 0;
      sub_1BE1B20E4();
      sub_1BDD86E30(v43, &qword_1ED6F3850);
    }
    else
    {
      sub_1BDDA2E8C(v43, (uint64_t)v32, type metadata accessor for Proto_Timestamp);
    }
    v44 = v32;
    v45 = v33;
    v46 = v62;
    v47 = v69;
    v48 = v54;
    v49 = v52;
    sub_1BDDAA440(v44, v60, (uint64_t)v51);
    sub_1BDD9C3E0(v40, type metadata accessor for Proto_Set);
    v63 = v49;
    v64 = v48;
    v65 = v47;
    v66 = v46;
    v67 = v45;
    v68 = v53;
    type metadata accessor for CRDictionary.MergeableDelta();
  }
  swift_release();
  return sub_1BDD9C3E0(v61, type metadata accessor for Proto_Set);
}

void CRDictionary.MergeableDelta.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v18 = a7;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v13);
  v21 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1;
  v24 = a2;
  v29 = a1;
  v30 = a2;
  v25 = a3;
  v26 = a4;
  v31 = a3;
  v32 = a4;
  v27 = a5;
  v28 = a6;
  v33 = a5;
  v34 = a6;
  type metadata accessor for CRDictionary.MergeableDelta();
}

uint64_t sub_1BDF294AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[96];

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = &v26[-v7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v11, &qword_1ED6F3728);
  LODWORD(v12) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2);
  sub_1BDD86E30((uint64_t)v11, &qword_1ED6F3728);
  if ((_DWORD)v12 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000014;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  v15 = a1;
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v1;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  v17 = *(_QWORD *)(v4 - 272);
  sub_1BDDA0528(v17);
  v18 = *(_QWORD *)(v17 + *(int *)(v2 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v19 = v18;
  v20 = *(_QWORD *)(v4 - 264);
  sub_1BDD86DEC(v19, v20, &qword_1ED6F2DF0);
  v21 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21) == 1)
  {
    sub_1BDD86E30(v20, &qword_1ED6F2DF0);
    v22 = *(_QWORD *)(v4 - 256);
LABEL_8:
    sub_1BE1B20E4();
    v24 = *(int *)(*(_QWORD *)(v4 - 280) + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)(v22 + v24) = qword_1ED6F2800;
    swift_retain();
    goto LABEL_11;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v22 = *(_QWORD *)(v4 - 256);
  if (EnumCaseMultiPayload != 1)
  {
    sub_1BDD9C3E0(v20, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  sub_1BDDA2E8C(v20, *(_QWORD *)(v4 - 256), type metadata accessor for Proto_Set);
LABEL_11:
  sub_1BDD9C3E0(v17, type metadata accessor for Proto_CRDT);
  v25 = *(_QWORD *)(v4 - 72);
  sub_1BDF28FE0(v22, v1, *(_QWORD *)(v4 - 248), *(_QWORD *)(v4 - 240), *(_QWORD *)(v4 - 232), *(_QWORD *)(v4 - 224), *(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 208), v8);
  swift_setDeallocating();
  result = swift_release();
  if (!v25)
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(v6 + 32))(*(_QWORD *)(v4 - 288), v8, v15);
  return result;
}

void sub_1BDF297A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v22 = a1;
  v33 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v6 = MEMORY[0x1E0C80A78](v5);
  v19[3] = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v19[2] = (char *)v19 - v8;
  v20 = type metadata accessor for Proto_Timestamp(0);
  v19[1] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v19[4] = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3[1];
  v12 = v3[2];
  v11 = v3[3];
  v14 = v3[4];
  v13 = v3[5];
  v27 = *v3;
  v28 = v10;
  v29 = v12;
  v30 = v11;
  v31 = v14;
  v32 = v13;
  v15 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(a2 + 16);
  v17 = type metadata accessor for CRDictionaryElement(255, v15, *(_QWORD *)(a2 + 48), v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x1C3B7DF54](&unk_1BE1BDA6C, v17);
  v23 = v21;
  v24 = v17;
  v25 = *(_OWORD *)(a2 + 32);
  v26 = v18;
  type metadata accessor for CRSetRefMergeableDelta();
}

uint64_t sub_1BDF298FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(v3 - 184);
  sub_1BE0D36E4(*(_QWORD *)(v3 - 176), a1, *(_QWORD *)(v3 - 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v4)
  {
    *(_QWORD *)(v3 - 184) = 0;
    v7 = *(_QWORD *)(v3 - 232);
    v6 = *(_QWORD *)(v3 - 224);
    v8 = v2 + *(int *)(v1 + 68);
    v9 = *(_QWORD *)(v3 - 200);
    v10 = *(_QWORD *)(v3 - 216);
    v11 = *(uint64_t **)(v3 - 208);
    sub_1BE1B20E4();
    *v11 = sub_1BDDAE244(v8);
    v11[1] = *(_QWORD *)(v8 + *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20));
    v12 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
    v13 = *(_QWORD *)(v3 - 72);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      v14 = swift_retain();
      *(_QWORD *)(v13 + v12) = sub_1BDDA1768(v14);
      swift_release();
    }
    v15 = *(_QWORD *)(v13 + v12);
    sub_1BDDA2E8C((uint64_t)v11, v6, type metadata accessor for Proto_Timestamp);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v9);
    sub_1BDDA2EF0(v6, v10, &qword_1ED6F3850);
    v16 = v15 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v10, v16, &qword_1ED6F3850);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t CRDictionary.MergeableDelta.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v5 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BDDA8D6C();
  if (!v2)
  {
    swift_retain();
    sub_1BDF297A0(a1, a2, (uint64_t)v7);
  }
  return result;
}

uint64_t CRDictionary.MergeableDelta.visitReferences(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t (*v47)(char *, uint64_t);
  char *v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t TupleTypeMetadata2;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v58 = a1;
  v6 = a2[3];
  v56 = a2[6];
  v57 = v6;
  v7 = type metadata accessor for CRDictionaryElement.Delta(0, v6, v56, a4);
  v66 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v49 - v9;
  v59 = a2;
  v65 = *(_QWORD *)(a2[2] - 8);
  MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v11;
  v64 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_1BE1B2EE8();
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v49 - v17;
  v19 = *(_QWORD *)(v4 + 40);
  v20 = *(_QWORD *)(v19 + 64);
  v50 = v19 + 64;
  v21 = 1 << *(_BYTE *)(v19 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v51 = (unint64_t)(v21 + 63) >> 6;
  v52 = v19;
  v49 = v51 - 1;
  result = swift_bridgeObjectRetain();
  v25 = 0;
  v53 = v16;
  v26 = v64;
  v27 = v58;
  if (!v23)
    goto LABEL_6;
LABEL_4:
  v28 = __clz(__rbit64(v23));
  v29 = (v23 - 1) & v23;
  v30 = v28 | (v25 << 6);
  v31 = TupleTypeMetadata2;
  while (2)
  {
    v32 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v16, *(_QWORD *)(v52 + 48) + *(_QWORD *)(v65 + 72) * v30, v63);
    (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(&v16[*(int *)(v31 + 48)], *(_QWORD *)(v32 + 56) + *(_QWORD *)(v66 + 72) * v30, v64);
    for (i = 0; ; i = 1)
    {
      while (1)
      {
LABEL_18:
        v37 = *(_QWORD *)(v31 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v16, i, 1, v31);
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v18, v16, v61);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v18, 1, v31) == 1)
          return swift_release();
        v38 = &v18[*(int *)(v31 + 48)];
        v67 = v29;
        v39 = v65;
        v40 = v54;
        v41 = v63;
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v54, v18, v63);
        v42 = v18;
        v43 = v66;
        v44 = v55;
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v55, v38, v26);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59[4] + 8) + 40))(v27, v41);
        v45 = sub_1BE1B2EE8();
        Optional<A>.visitReferences(_:)(v27, v45, v56);
        v46 = *(void (**)(char *, uint64_t))(v43 + 8);
        v18 = v42;
        v46(v44, v26);
        v47 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
        v23 = v67;
        v48 = v40;
        v16 = v53;
        result = v47(v48, v41);
        if (v23)
          goto LABEL_4;
LABEL_6:
        v34 = v25 + 1;
        v31 = TupleTypeMetadata2;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        if (v34 < v51)
          break;
LABEL_17:
        v29 = 0;
        i = 1;
      }
      v35 = *(_QWORD *)(v50 + 8 * v34);
      if (v35)
        goto LABEL_9;
      v25 += 2;
      if (v34 + 1 < v51)
        break;
      v29 = 0;
      v25 = v34;
    }
    v35 = *(_QWORD *)(v50 + 8 * v25);
    if (v35)
    {
      ++v34;
LABEL_9:
      v29 = (v35 - 1) & v35;
      v30 = __clz(__rbit64(v35)) + (v34 << 6);
      v25 = v34;
      continue;
    }
    break;
  }
  v36 = v34 + 2;
  if (v34 + 2 >= v51)
    goto LABEL_17;
  v35 = *(_QWORD *)(v50 + 8 * v36);
  if (v35)
  {
    v34 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v34 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v34 >= v51)
    {
      v29 = 0;
      i = 1;
      v25 = v49;
      goto LABEL_18;
    }
    v35 = *(_QWORD *)(v50 + 8 * v34);
    ++v36;
    if (v35)
      goto LABEL_9;
  }
LABEL_28:
  __break(1u);
  return result;
}

void CRDictionary.MergeableDelta.merge(delta:)()
{
  sub_1BDF2BCB0();
}

void CRDictionary.MergeableDelta.canMerge(delta:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF29FCC()
{
  sub_1BDF2BCB0();
}

void sub_1BDF29FD4()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF2A020(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  CRDictionary.MergeableDelta.init(from:)(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t sub_1BDF2A044(uint64_t a1, uint64_t a2)
{
  return CRDictionary.MergeableDelta.encode(to:)(a1, a2);
}

uint64_t sub_1BDF2A058@<X0>(_QWORD *a1@<X8>)
{
  CRDictionary.makeIterator()(a1);
  return swift_release();
}

uint64_t sub_1BDF2A070(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary<A, B>, a1);
  return sub_1BE1B2CA8();
}

uint64_t sub_1BDF2A0A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary<A, B>, a1);
  v4 = sub_1BE1AE084(v1, a1, v3);
  swift_release();
  return v4;
}

uint64_t static CRDictionary.Index.< infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1BDD8C19C(a1, a2, a3, a4, a5, a6, a7, a8, MEMORY[0x1E0DE9EF0]) & 1;
}

uint64_t CRDictionary.Index.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_BYTE *)(v2 + 16);
  sub_1BDF2BCF8(v4, v5, v6);
  type metadata accessor for CRDictionaryElement(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 48), v7);
  sub_1BE1B2600();
  return sub_1BDE27EC8(v4, v5, v6);
}

uint64_t CRDictionary.Index.hashValue.getter(uint64_t a1)
{
  __int128 *v1;
  char v3;
  _BYTE v5[72];
  __int128 v6;
  char v7;

  v3 = *((_BYTE *)v1 + 16);
  v6 = *v1;
  v7 = v3;
  sub_1BE1B36F8();
  CRDictionary.Index.hash(into:)((uint64_t)v5, a1);
  return sub_1BE1B371C();
}

uint64_t sub_1BDF2A1FC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CRDictionary.Index.< infix(_:_:)(a1, a2, a3[2], a3[3], a5, a3[5], a3[6], a8);
}

uint64_t sub_1BDF2A220(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_1BE1B36F8();
  CRDictionary.Index.hash(into:)((uint64_t)v4, a2);
  return sub_1BE1B371C();
}

uint64_t CRDictionary.count.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  type metadata accessor for CRDictionaryElement(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), v2);
  swift_bridgeObjectRetain();
  v3 = sub_1BE1B260C();
  swift_bridgeObjectRelease();
  return v3;
}

void (*sub_1BDF2A2F0(uint64_t **a1, uint64_t a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  char *v11;
  void (*v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  v7 = a3[2];
  v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[5] = v10;
  v11 = (char *)malloc(*(_QWORD *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  v12 = sub_1BDF2A424(v6, a2, a3);
  v14 = v13;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v14, v8);
  return sub_1BDF2A3D0;
}

void sub_1BDF2A3D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_1BDF2A424(uint64_t *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  void *v8;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  CRDictionary.subscript.getter((uint64_t)v8, (uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_1BDEE623C;
}

void sub_1BDF2A4C8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

double sub_1BDF2A4EC(uint64_t a1, uint64_t a2)
{
  char v3;
  double result;
  __int128 v5;
  char v6;

  CRDictionary.index(after:)(a2, (uint64_t)&v5);
  sub_1BDE27EC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1BDF2A534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83[3];
  __n128 v84;
  uint64_t v85;

  v80 = a5;
  v85 = a2;
  v63 = a7;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v12);
  v69 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Proto_Version(0);
  v66 = *(_QWORD *)(v68 - 8);
  v14 = MEMORY[0x1E0C80A78](v68);
  v70 = (uint64_t *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14);
  v72 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v17);
  v71 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = a4;
  v79 = a6;
  v62 = type metadata accessor for CRDictionaryElement(0, a4, a6, v19);
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v60 = (uint64_t)&v60 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v21);
  v76 = (uint64_t)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Proto_CRDT(0);
  v74 = *(_QWORD *)(v75 - 8);
  v23 = MEMORY[0x1E0C80A78](v75);
  v77 = (uint64_t)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a3;
  v73 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Proto_Value(0);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  v67 = a1;
  v65 = v33;
  v34 = *(_QWORD *)(a1 + v33);
  v35 = v34 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v35, (uint64_t)v28, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    sub_1BE1B20E4();
    v36 = *(int *)(v29 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v32[v36] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v28, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v28, (uint64_t)v32, type metadata accessor for Proto_Value);
  }
  v37 = v85;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v32, v37);
  swift_release();
  v38 = *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8);
  v40 = swift_retain();
  v41 = v81;
  v39(v40, v25, v38);
  if (v41)
  {
    result = swift_release();
    *a8 = v41;
  }
  else
  {
    v42 = v34 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    v43 = v76;
    sub_1BDD86DEC(v42, v76, &qword_1ED6F3728);
    v44 = v75;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v43, 1, v75) == 1)
    {
      v45 = v77;
      sub_1BE1B20E4();
      v46 = *(int *)(v44 + 20);
      v47 = v78;
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v45 + v46) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v43, &qword_1ED6F3728);
    }
    else
    {
      v45 = v77;
      sub_1BDDA2E8C(v43, v77, type metadata accessor for Proto_CRDT);
      v47 = v78;
    }
    swift_retain();
    v48 = v79;
    sub_1BDFA224C(v45, v37, v47, v79, v83);
    v51 = v83[0];
    v52 = type metadata accessor for CRRegister(0, v47, v48, v49);
    CRRegister.timestamp.getter(v71);
    v83[0] = v51;
    CRRegister.value.getter(v52, v72);
    v53 = *(_QWORD *)(v67 + v65)
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
    swift_beginAccess();
    v54 = v69;
    sub_1BDD86DEC(v53, v69, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v54, 1, v68) == 1)
    {
      v55 = MEMORY[0x1E0DEE9D8];
      v56 = v70;
      *v70 = MEMORY[0x1E0DEE9D8];
      v56[1] = v55;
      sub_1BE1B20E4();
      sub_1BDD86E30(v54, &qword_1ED6F37A8);
    }
    else
    {
      v56 = v70;
      sub_1BDDA2E8C(v54, (uint64_t)v70, type metadata accessor for Proto_Version);
    }
    swift_retain();
    sub_1BDDA9DA0(v56, v37, &v84);
    swift_release();
    swift_release();
    v82 = v84;
    v57 = v60;
    sub_1BDF1E4B8(v71, v72, &v82, v47, v79, v60);
    v58 = v62;
    v59 = v63 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(void))(v73 + 32))();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v59, v57, v58);
  }
  return result;
}

uint64_t sub_1BDF2ACE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v86 = a2;
  v91 = a7;
  v92 = a8;
  v96 = a5;
  v84 = a1;
  v89 = a12;
  v90 = a6;
  v87 = a11;
  v88 = a4;
  v93 = a10;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v82 = (uint64_t)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v81 = (uint64_t)&v72 - v17;
  v18 = type metadata accessor for Proto_Version(0);
  v79 = *(_QWORD *)(v18 - 8);
  v80 = v18;
  MEMORY[0x1E0C80A78](v18);
  v78 = (uint64_t *)((char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v21 = MEMORY[0x1E0C80A78](v20);
  v77 = (uint64_t)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v76 = (uint64_t)&v72 - v23;
  v75 = type metadata accessor for Proto_Value(0);
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v83 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v72 - v29;
  v31 = type metadata accessor for Proto_CRDT(0);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v72 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v35 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1ED6EF6F0 != -1)
    swift_once();
  v36 = qword_1ED6EF6E0;
  *(_QWORD *)(a9 + v35) = qword_1ED6EF6E0;
  MEMORY[0x1E0C80A78](v36);
  v37 = v96;
  *(&v72 - 10) = v88;
  *(&v72 - 9) = v37;
  v38 = v91;
  *(&v72 - 8) = v90;
  *(&v72 - 7) = v38;
  v39 = v93;
  *(&v72 - 6) = v92;
  *(&v72 - 5) = v39;
  v40 = v89;
  *(&v72 - 4) = v87;
  *(&v72 - 3) = v40;
  *(&v72 - 2) = v86;
  *(&v72 - 1) = a3;
  swift_retain();
  v41 = v85;
  sub_1BDDA82F8((void (*)(uint64_t))sub_1BDF2E278, (uint64_t)v34);
  v85 = v35;
  if (v41)
    return sub_1BDD9C3E0(a9, type metadata accessor for Proto_Set.Element);
  v73 = a3;
  v42 = v85;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v43 = swift_retain();
    *(_QWORD *)(a9 + v42) = sub_1BE13500C(v43);
    swift_release();
  }
  v44 = *(_QWORD *)(a9 + v42);
  sub_1BDDA2E8C((uint64_t)v34, (uint64_t)v30, type metadata accessor for Proto_CRDT);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
  sub_1BDDA2EF0((uint64_t)v30, (uint64_t)v28, &qword_1ED6F3728);
  v45 = v44 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v28, v45, &qword_1ED6F3728);
  swift_endAccess();
  v46 = swift_release();
  MEMORY[0x1E0C80A78](v46);
  v47 = v96;
  *(&v72 - 10) = v88;
  *(&v72 - 9) = v47;
  v48 = v91;
  *(&v72 - 8) = v90;
  *(&v72 - 7) = v48;
  v49 = v93;
  *(&v72 - 6) = v92;
  *(&v72 - 5) = v49;
  v50 = v89;
  *(&v72 - 4) = v87;
  *(&v72 - 3) = v50;
  v51 = (uint64_t)v83;
  v52 = v73;
  *(&v72 - 2) = v84;
  *(&v72 - 1) = v52;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF2E2AC, v51);
  v54 = v85;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v55 = swift_retain();
    *(_QWORD *)(a9 + v54) = sub_1BE13500C(v55);
    swift_release();
  }
  v56 = *(_QWORD *)(a9 + v54);
  v57 = v51;
  v58 = v76;
  sub_1BDDA2E8C(v57, v76, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v58, 0, 1, v75);
  v59 = v77;
  sub_1BDDA2EF0(v58, v77, &qword_1ED6F3770);
  v60 = v56 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v59, v60, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  v62 = type metadata accessor for CRDictionaryElement(0, v47, v49, v61);
  v63 = (uint64_t *)(v86 + *(int *)(v62 + 40));
  v64 = v63[1];
  v94 = *v63;
  v95 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65 = v78;
  sub_1BDDAD780(v73, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v66 = v85;
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v67 = swift_retain();
    *(_QWORD *)(a9 + v66) = sub_1BE13500C(v67);
    swift_release();
  }
  v68 = *(_QWORD *)(a9 + v85);
  v69 = v81;
  sub_1BDDA2E8C((uint64_t)v65, v81, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v69, 0, 1, v80);
  v70 = v82;
  sub_1BDDA2EF0(v69, v82, &qword_1ED6F37A8);
  v71 = v68 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v70, v71, &qword_1ED6F37A8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDF2B38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;

  v12 = type metadata accessor for FinalizedTimestamp(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CRDictionaryElement(0, a4, a8, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1 + *(int *)(v20 + 36), a4);
  sub_1BDD9C318(a1, (uint64_t)v15, type metadata accessor for FinalizedTimestamp);
  sub_1BDFA3970((uint64_t)v18, (uint64_t)v15, a4, a8, &v25);
  v24[1] = v25;
  v22 = type metadata accessor for CRRegister(0, a4, a8, v21);
  CRRegister.encode(to:)(a2, v22);
  return swift_release();
}

uint64_t sub_1BDF2B4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a7;
  v25 = a5;
  v26 = a2;
  v27 = a4;
  v12 = (_QWORD *)*a3;
  v13 = *(_QWORD *)(*a3 + 88);
  v14 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - v15;
  swift_beginAccess();
  v17 = a3[5];
  v18 = v12[10];
  v19 = v12[13];
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v17, v18, v13, v19);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v22 = v28;
    sub_1BDF2ACE0(a1, (uint64_t)v16, v26, v18, *(_QWORD *)(v13 + 16), v27, v12[12], v19, a8, *(_QWORD *)(v13 + 24), v25, a6);
    result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v16, v13);
    if (v22)
      *v24 = v22;
  }
  return result;
}

uint64_t sub_1BDF2B640(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  type metadata accessor for CRDictionaryElement(255, a5, a9, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  if (v12)
    *a12 = v12;
  return result;
}

uint64_t CRDictionary<>.encode(to:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[8];

  v41[0] = *v4;
  v8 = a2[3];
  v32 = a2[2];
  v33 = v8;
  v9 = a2[5];
  v34 = a2[4];
  v35 = a3;
  v10 = a2[6];
  v11 = a2[7];
  v36 = v9;
  v37 = v10;
  v38 = a4;
  v39 = v11;
  v21 = v32;
  v22 = v8;
  v23 = v34;
  v24 = a3;
  v25 = v9;
  v26 = v10;
  v27 = a4;
  v28 = v11;
  v29 = sub_1BDF2BD04;
  v30 = &v31;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v13 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary<A, B>, a2);
  v41[0] = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2BD58, (uint64_t)v20, (uint64_t)a2, TupleTypeMetadata2, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  v15 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v15);
  v16 = sub_1BE1B25E8();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3770();
  v41[7] = v16;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v41, v41[3]);
  v17 = sub_1BE1B2684();
  v40[0] = a3;
  v40[1] = a4;
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0B8], v17, v40);
  sub_1BE1B34F4();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
}

uint64_t sub_1BDF2B8BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return CRDictionary<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void sub_1BDF2B8D8()
{
  sub_1BE1B1F4C();
  swift_release();
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF2B938()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1BE1B2EE8();
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  sub_1BDD9A640();
}

uint64_t sub_1BDF2B9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v0, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v3, v1, v2);
  return sub_1BDF21D34(v3, v5, v8, v9);
}

uint64_t sub_1BDF2BA28(uint64_t a1, uint64_t a2)
{
  return sub_1BDF2E300(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1BDF23B6C);
}

uint64_t sub_1BDF2BA44(uint64_t a1, uint64_t a2)
{
  return sub_1BDF2E300(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1BDF23D70);
}

uint64_t sub_1BDF2BA60(uint64_t a1, uint64_t a2)
{
  return sub_1BDF2E300(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1BDF249A0);
}

uint64_t sub_1BDF2BA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1BDF24C48(a1, a2, *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 48), a3, *(_QWORD *)(v3 + 56));
}

uint64_t sub_1BDF2BAAC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 64);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = v6(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_1BDF2BB28(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDF26238(a1, *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32));
}

uint64_t sub_1BDF2BB34()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 64))();
}

void sub_1BDF2BB54()
{
  uint64_t v0;

  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  sub_1BDD9A640();
}

void sub_1BDF2BBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v2, 0, 1, v1);
  sub_1BDF2B938();
}

uint64_t sub_1BDF2BC00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1BDF2BC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinalizedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CRDictionary.MergeableDelta()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF2BC80(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDF28F20(a1, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for CRDictionaryElement.Delta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDictionaryElement.Delta);
}

void sub_1BDF2BCB0()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BDF2BCF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1BDF2BD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, a4, v9);
}

uint64_t sub_1BDF2BD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 80);
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a2, a2 + *(int *)(TupleTypeMetadata2 + 48), a1, v6);
}

_UNKNOWN **sub_1BDF2BDF4()
{
  return &protocol witness table for CRDictionary<A, B>.MergeableDelta;
}

uint64_t sub_1BDF2BE00(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary<A, B>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDF2BE2C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_1BDF2BE34(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

void sub_1BDF2BE3C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDF2BE4C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDF2BE5C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDF2BE6C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDF2BE7C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDF2BE8C()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDF2BEA4()
{
  return 48;
}

__n128 sub_1BDF2BEB0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void type metadata accessor for CRDictionary.MutatingAction()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF2BED0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s9Coherence17CapsuleUndoActionVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s9Coherence17CapsuleUndoActionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s9Coherence17CapsuleUndoActionVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9Coherence17CapsuleUndoActionVwta_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CRDictionary.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF2C024()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDF2C098(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = *(int *)(a3 + 68);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    a1[5] = a2[5];
    v11 = sub_1BE1B1F58();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v9, v10, v11);
    v12 = type metadata accessor for FinalizedTimestamp(0);
    *(_QWORD *)&v9[*(int *)(v12 + 20)] = *(_QWORD *)&v10[*(int *)(v12 + 20)];
  }
  return v5;
}

uint64_t sub_1BDF2C1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 68);
  v5 = sub_1BE1B1F58();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1BDF2C214(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 68);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = sub_1BE1B1F58();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v8, v9, v10);
  v11 = type metadata accessor for FinalizedTimestamp(0);
  *(_QWORD *)&v8[*(int *)(v11 + 20)] = *(_QWORD *)&v9[*(int *)(v11 + 20)];
  return a1;
}

_QWORD *sub_1BDF2C2F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 68);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B1F58();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for FinalizedTimestamp(0);
  *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
  return a1;
}

_OWORD *sub_1BDF2C3F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 68);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1BE1B1F58();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = type metadata accessor for FinalizedTimestamp(0);
  *(_QWORD *)&v6[*(int *)(v9 + 20)] = *(_QWORD *)&v7[*(int *)(v9 + 20)];
  return a1;
}

_QWORD *sub_1BDF2C468(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 68);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B1F58();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = type metadata accessor for FinalizedTimestamp(0);
  *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
  return a1;
}

uint64_t sub_1BDF2C538()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDF2C544(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FinalizedTimestamp(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 68)], a2, v8);
  }
}

uint64_t sub_1BDF2C5C0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BDF2C5CC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FinalizedTimestamp(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 68)], a2, a2, v7);
  }
  return result;
}

_QWORD *initializeWithCopy for PartiallyOrderedReferenceMap.Iterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_1BDE77680();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

_QWORD *assignWithCopy for PartiallyOrderedReferenceMap.Iterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_1BDE77680();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  sub_1BDE27FD0();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PartiallyOrderedReferenceMap.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  sub_1BDE27FD0();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartiallyOrderedReferenceMap.Iterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PartiallyOrderedReferenceMap.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

uint64_t sub_1BDF2C830(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BDF2BCF8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1BDF2C878(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BDF2BCF8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BDE27EC8(v6, v7, v8);
  return a1;
}

uint64_t sub_1BDF2C8CC(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BDE27EC8(v4, v5, v6);
  return a1;
}

uint64_t sub_1BDF2C910(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BDF2C958(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

void sub_1BDF2C99C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BDD86EE0();
  if (v0 <= 0x3F)
  {
    sub_1BE1B2EE8();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *sub_1BDF2CA2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v32;
  size_t __n;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v11 = v9 + 9;
  v12 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v12)
    v13 = v10;
  else
    v13 = v11;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v13 + v16;
  if (*(_DWORD *)(v15 + 84))
    v18 = *(_QWORD *)(v15 + 64);
  else
    v18 = *(_QWORD *)(v15 + 64) + 1;
  v19 = v16 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v19 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v15 + 80)) & 0x100000) != 0
    || ((v18 + 7 + ((v13 + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7)));
    swift_retain();
    return a1;
  }
  v23 = v6;
  v34 = ~v16;
  v35 = v18 + 7;
  v32 = v10;
  __n = v18;
  if ((_DWORD)v12)
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, v12, v6))
    {
LABEL_24:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v23);
      *(_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      v26 = v34;
      if (!(_DWORD)v12)
        *((_BYTE *)a1 + v32) = 0;
      goto LABEL_26;
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + v10))
      goto LABEL_24;
    v24 = *((unsigned __int8 *)a2 + v10) - 1;
    v25 = v10 & 0xFFFFFFF8;
    if ((v10 & 0xFFFFFFF8) != 0)
    {
      v24 = 0;
      v25 = *(_DWORD *)a2;
    }
    if ((v25 | v24) == 0xFFFFFFFF)
      goto LABEL_24;
  }
  memcpy(a1, a2, v13);
  v26 = v34;
LABEL_26:
  v27 = (void *)(((unint64_t)a1 + v17) & v26);
  v28 = (const void *)(((unint64_t)a2 + v17) & v26);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v28, 1, v14))
  {
    memcpy(v27, v28, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v27, v28, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, v14);
  }
  v29 = (_QWORD *)(((unint64_t)v27 + v35) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v28 + v35) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDF2CC6C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = (*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  if (v6)
  {
    if ((*(unsigned int (**)(_DWORD *, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (!*((_BYTE *)a1 + v8))
    goto LABEL_8;
  v9 = *((unsigned __int8 *)a1 + v8) - 1;
  v10 = v8 & 0xFFFFFFF8;
  if ((v8 & 0xFFFFFFF8) != 0)
  {
    v9 = 0;
    v10 = *a1;
  }
  if ((v10 | v9) == 0xFFFFFFFF)
LABEL_8:
    (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, v4);
LABEL_9:
  v11 = v7 + 9;
  if (v6)
    v11 = v7 + 8;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = ((unint64_t)a1 + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12))
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v14, v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1BDF2CD94(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  int v22;
  size_t v23;
  size_t v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  if (!v8)
  {
    if (!*((_BYTE *)a2 + v11))
      goto LABEL_12;
    v12 = *((unsigned __int8 *)a2 + v11) - 1;
    v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0)
    {
      v12 = 0;
      v13 = *a2;
    }
    if ((v13 | v12) == 0xFFFFFFFF)
      goto LABEL_12;
LABEL_8:
    if (v8)
      v14 = v10 + 8;
    else
      v14 = v10 + 9;
    memcpy(a1, a2, v14);
    goto LABEL_14;
  }
  if ((*(unsigned int (**)(_DWORD *, _QWORD, uint64_t))(v7 + 48))(a2, *(unsigned int *)(v7 + 84), v6))
    goto LABEL_8;
LABEL_12:
  (*(void (**)(void *, _DWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
  *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
  if (!v8)
    *((_BYTE *)a1 + v11) = 0;
LABEL_14:
  v15 = v10 + 9;
  if (v8)
    v15 = v10 + 8;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v15 + v18;
  v20 = (void *)(((unint64_t)a1 + v19) & ~v18);
  v21 = (const void *)(((unint64_t)a2 + v19) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v21, 1, v16))
  {
    v22 = *(_DWORD *)(v17 + 84);
    v23 = *(_QWORD *)(v17 + 64);
    if (v22)
      v24 = v23;
    else
      v24 = v23 + 1;
    memcpy(v20, v21, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v20, v21, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
    v22 = *(_DWORD *)(v17 + 84);
    v23 = *(_QWORD *)(v17 + 64);
  }
  if (v22)
    v25 = v23;
  else
    v25 = v23 + 1;
  v26 = (_QWORD *)(((unint64_t)v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v21 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

int *sub_1BDF2CF74(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t (*v13)(int *, uint64_t, uint64_t);
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v40;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  if ((_DWORD)v8)
  {
    v12 = a3;
    v13 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    v14 = v13(a1, v8, v6);
    v15 = v8;
    v16 = v14;
    v40 = v15;
    v17 = ((uint64_t (*)(int *))v13)(a2);
    a3 = v12;
    v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      LODWORD(v8) = v40;
      if (!v17)
        goto LABEL_29;
LABEL_25:
      if ((_DWORD)v8)
        v24 = v11;
      else
        v24 = v10 + 9;
      memcpy(a1, a2, v24);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!*((_BYTE *)a1 + v11)
    || ((v18 = *((unsigned __int8 *)a1 + v11) - 1, (_DWORD)v10 == -8) ? (v19 = 0) : (v18 = 0, v19 = *a1),
        (v19 | v18) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)a2 + v11))
      goto LABEL_22;
    v22 = *((unsigned __int8 *)a2 + v11) - 1;
    if ((_DWORD)v10 != -8)
      v22 = 0;
    v40 = 0;
    if ((_DWORD)v10 == -8)
      v23 = 0;
    else
      v23 = *a2;
    v17 = (v23 | v22) + 1;
LABEL_20:
    LODWORD(v8) = v40;
    if (v17)
    {
      (*(void (**)(int *, uint64_t))(v7 + 8))(a1, v6);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(int *, int *, uint64_t))(v7 + 24))(a1, a2, v6);
    *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + v11))
  {
    v20 = *((unsigned __int8 *)a2 + v11) - 1;
    if ((_DWORD)v10 == -8)
    {
      v21 = 0;
    }
    else
    {
      v20 = 0;
      v21 = *a2;
    }
    if ((v21 | v20) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_29:
  (*(void (**)(int *, int *, uint64_t))(v7 + 16))(a1, a2, v6);
  *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v8)
    *((_BYTE *)a1 + v11) = 0;
LABEL_31:
  v25 = v10 + 9;
  if ((_DWORD)v8)
    v25 = v11;
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v25 + v28;
  v30 = (void *)(((unint64_t)a1 + v29) & ~v28);
  v31 = (void *)(((unint64_t)a2 + v29) & ~v28);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v33 = v32(v30, 1, v26);
  v34 = v32(v31, 1, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v30, v31, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
      goto LABEL_42;
    }
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v30, v31, v26);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v30, v26);
  }
  if (*(_DWORD *)(v27 + 84))
    v35 = *(_QWORD *)(v27 + 64);
  else
    v35 = *(_QWORD *)(v27 + 64) + 1;
  memcpy(v30, v31, v35);
LABEL_42:
  if (*(_DWORD *)(v27 + 84))
    v36 = *(_QWORD *)(v27 + 64);
  else
    v36 = *(_QWORD *)(v27 + 64) + 1;
  v37 = (_QWORD *)(((unint64_t)v30 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1BDF2D2B0(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  int v22;
  size_t v23;
  size_t v24;
  size_t v25;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  if (!v8)
  {
    if (!*((_BYTE *)a2 + v11))
      goto LABEL_12;
    v12 = *((unsigned __int8 *)a2 + v11) - 1;
    v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0)
    {
      v12 = 0;
      v13 = *a2;
    }
    if ((v13 | v12) == 0xFFFFFFFF)
      goto LABEL_12;
LABEL_8:
    if (v8)
      v14 = v10 + 8;
    else
      v14 = v10 + 9;
    memcpy(a1, a2, v14);
    goto LABEL_14;
  }
  if ((*(unsigned int (**)(_DWORD *, _QWORD, uint64_t))(v7 + 48))(a2, *(unsigned int *)(v7 + 84), v6))
    goto LABEL_8;
LABEL_12:
  (*(void (**)(void *, _DWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
  *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
  if (!v8)
    *((_BYTE *)a1 + v11) = 0;
LABEL_14:
  v15 = v10 + 9;
  if (v8)
    v15 = v10 + 8;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v15 + v18;
  v20 = (void *)(((unint64_t)a1 + v19) & ~v18);
  v21 = (const void *)(((unint64_t)a2 + v19) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v21, 1, v16))
  {
    v22 = *(_DWORD *)(v17 + 84);
    v23 = *(_QWORD *)(v17 + 64);
    if (v22)
      v24 = v23;
    else
      v24 = v23 + 1;
    memcpy(v20, v21, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v20, v21, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
    v22 = *(_DWORD *)(v17 + 84);
    v23 = *(_QWORD *)(v17 + 64);
  }
  if (v22)
    v25 = v23;
  else
    v25 = v23 + 1;
  *(_OWORD *)(((unint64_t)v20 + v25 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + v25 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

int *sub_1BDF2D47C(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t (*v13)(int *, uint64_t, uint64_t);
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v40;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  if ((_DWORD)v8)
  {
    v12 = a3;
    v13 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    v14 = v13(a1, v8, v6);
    v15 = v8;
    v16 = v14;
    v40 = v15;
    v17 = ((uint64_t (*)(int *))v13)(a2);
    a3 = v12;
    v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      LODWORD(v8) = v40;
      if (!v17)
        goto LABEL_29;
LABEL_25:
      if ((_DWORD)v8)
        v24 = v11;
      else
        v24 = v10 + 9;
      memcpy(a1, a2, v24);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!*((_BYTE *)a1 + v11)
    || ((v18 = *((unsigned __int8 *)a1 + v11) - 1, (_DWORD)v10 == -8) ? (v19 = 0) : (v18 = 0, v19 = *a1),
        (v19 | v18) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)a2 + v11))
      goto LABEL_22;
    v22 = *((unsigned __int8 *)a2 + v11) - 1;
    if ((_DWORD)v10 != -8)
      v22 = 0;
    v40 = 0;
    if ((_DWORD)v10 == -8)
      v23 = 0;
    else
      v23 = *a2;
    v17 = (v23 | v22) + 1;
LABEL_20:
    LODWORD(v8) = v40;
    if (v17)
    {
      (*(void (**)(int *, uint64_t))(v7 + 8))(a1, v6);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(int *, int *, uint64_t))(v7 + 40))(a1, a2, v6);
    *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((_BYTE *)a2 + v11))
  {
    v20 = *((unsigned __int8 *)a2 + v11) - 1;
    if ((_DWORD)v10 == -8)
    {
      v21 = 0;
    }
    else
    {
      v20 = 0;
      v21 = *a2;
    }
    if ((v21 | v20) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_29:
  (*(void (**)(int *, int *, uint64_t))(v7 + 32))(a1, a2, v6);
  *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v8)
    *((_BYTE *)a1 + v11) = 0;
LABEL_31:
  v25 = v10 + 9;
  if ((_DWORD)v8)
    v25 = v11;
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v25 + v28;
  v30 = (void *)(((unint64_t)a1 + v29) & ~v28);
  v31 = (void *)(((unint64_t)a2 + v29) & ~v28);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v33 = v32(v30, 1, v26);
  v34 = v32(v31, 1, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v30, v31, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
      goto LABEL_42;
    }
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v30, v31, v26);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v30, v26);
  }
  if (*(_DWORD *)(v27 + 84))
    v35 = *(_QWORD *)(v27 + 64);
  else
    v35 = *(_QWORD *)(v27 + 64) + 1;
  memcpy(v30, v31, v35);
LABEL_42:
  if (*(_DWORD *)(v27 + 84))
    v36 = *(_QWORD *)(v27 + 64);
  else
    v36 = *(_QWORD *)(v27 + 64) + 1;
  v37 = (_QWORD *)(((unint64_t)v30 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  swift_bridgeObjectRelease();
  v37[1] = v38[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDF2D7A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v26;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = v12;
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  if (v8)
    v14 = 8;
  else
    v14 = 9;
  v15 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v15;
  if (!a2)
    return 0;
  v16 = ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v14;
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = v16 + v17;
  v19 = v15 + 7;
  if (v13 < a2)
  {
    if (((((v19 + (v18 & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v20 = 2;
    else
      v20 = a2 - v13 + 1;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v22 = v21;
    else
      v22 = 0;
    __asm { BR              X6 }
  }
  if (v9 == v13)
  {
    if (v8 >= 2)
    {
      v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
      goto LABEL_41;
    }
    return 0;
  }
  v24 = (v18 + a1) & ~v17;
  if (v12 == v13)
  {
    if (v11 >= 2)
    {
      v23 = (*(uint64_t (**)(uint64_t))(v10 + 48))(v24);
LABEL_41:
      if (v23 >= 2)
        return v23 - 1;
      else
        return 0;
    }
    return 0;
  }
  v26 = *(_QWORD *)((v19 + v24) & 0xFFFFFFFFFFFFF8);
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  return (v26 + 1);
}

void sub_1BDF2D978(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  v8 = 0u;
  v9 = *(_QWORD *)(sub_1BE1B1F58() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  if (v13)
    v14 = v13 - 1;
  else
    v14 = 0;
  if (v14 <= v11)
    v15 = v11;
  else
    v15 = v14;
  if (v15 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  v16 = (*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 8;
  v18 = v16 + 9;
  if (v10)
    v18 = v17;
  v19 = (v18 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v20 = *(_QWORD *)(v12 + 64);
  if (!v13)
    ++v20;
  v21 = ((v20 + 7 + v19) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 < a3)
  {
    if ((((_DWORD)v20 + 7 + (_DWORD)v19) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v22 = a3 - v15 + 1;
    else
      v22 = 2;
    if (v22 >= 0x10000)
      v23 = 4;
    else
      v23 = 2;
    if (v22 < 0x100)
      v23 = 1;
    if (v22 >= 2)
      v8 = v23;
    else
      v8 = 0;
  }
  if (a2 > v15)
  {
    if ((_DWORD)v21)
    {
      v24 = ~v15 + a2;
      bzero(a1, v21);
      *a1 = v24;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

void sub_1BDF2DACC(int a1, size_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  void (*v31)(_DWORD *, uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v33;

  *((_BYTE *)v25 + v27) = 0;
  if (v26)
  {
    if (v21 == v19)
    {
      if (v26 + 1 > a3)
      {
        if ((_DWORD)a2)
        {
          v28 = v26 - a3;
          bzero(v25, a2);
          *v25 = v28;
        }
        return;
      }
      if (v26 == -1)
        return;
      v31 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v17 + 56);
      v29 = v25;
      v30 = (v26 + 1);
LABEL_10:
      v31(v29, v30, a3);
      return;
    }
    v29 = (_DWORD *)(((unint64_t)v25 + v23) & v24);
    if (v20 == v19)
    {
      v30 = (v26 + 1);
      v31 = *(void (**)(_DWORD *, uint64_t, uint64_t))(v18 + 56);
      a3 = v16;
      goto LABEL_10;
    }
    v32 = (_QWORD *)(((unint64_t)v29 + v22) & 0xFFFFFFFFFFFFFFF8);
    if (v26 < 0)
    {
      v33 = v26 ^ 0x80000000;
      v32[1] = 0;
    }
    else
    {
      v33 = (v26 - 1);
    }
    *v32 = v33;
  }
}

uint64_t *sub_1BDF2DBA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  v13 = *(_QWORD *)(v10 + 64) + 7;
  v14 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }
  else
  {
    v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    *(_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    v19 = ((unint64_t)a2 + v12) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, v19, v9);
    v20 = (_QWORD *)((v13 + (((unint64_t)a1 + v12) & v18)) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)((v13 + v19) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v20[1] = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BDF2DCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + ((*(_QWORD *)(v5 + 64)
                                                                                              + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDF2DD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))(v12, v13);
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDF2DE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(v12, v13);
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDF2DF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))(v12, v13);
  *(_OWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BDF2E024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(v12, v13);
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1BDF2E104()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDF2E114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinalizedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF2E158()
{
  return sub_1BDF2E1A4();
}

uint64_t sub_1BDF2E16C()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[6] + 8) + 8) + 16))(v0[9], v0[3]);
}

uint64_t sub_1BDF2E1A4()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[4] + 8) + 8) + 16))(v0[9], v0[2]);
}

uint64_t sub_1BDF2E1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1BDF2ACE0(a1, a2, v3[10], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7], v3[8], v3[9]);
}

uint64_t sub_1BDF2E214(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1BDF2B640(a1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 80), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), a2);
}

uint64_t sub_1BDF2E254@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1BDF2B4D4(a1, *(_QWORD *)(v3 + 40), *(_QWORD **)(v3 + 48), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a2, a3);
}

uint64_t sub_1BDF2E278()
{
  uint64_t *v0;

  return sub_1BDF2B38C(v0[10], v0[11], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_1BDF2E2AC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[5] + 8) + 8) + 16))(v0[11], v0[2]);
}

uint64_t sub_1BDF2E2E4(uint64_t a1, uint64_t a2)
{
  return sub_1BDF2E300(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1BDF2A534);
}

uint64_t sub_1BDF2E300(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[8], v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], a2);
}

uint64_t sub_1BDF2E338()
{
  uint64_t v0;

  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v0 = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 8) = 0x80000001BE1CF0A0;
  *(_BYTE *)(v0 + 16) = 0;
  return swift_willThrow();
}

uint64_t CRCodable.minAppFormatVersion.getter()
{
  return 0;
}

void CRCodable.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t dispatch thunk of CRCodable.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CRCodable.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CRCodable.hasEncodedData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void sub_1BDF2E3EC(_BYTE *a1@<X8>)
{
  CRCodable.minEncodingVersion.getter(a1);
}

uint64_t dispatch thunk of CRCodable.minEncodingVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CRCodable.minAppFormatVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1BDF2E410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *))(v3 + 16))(v6);
  sub_1BE1B2BB8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1BDF2E4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_1BE1B2EE8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - v2;
  sub_1BE1B2BC4();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_1BDF2E54C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[8];

  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v7 = type metadata accessor for TreeNode(255, v4, v5, v6);
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v13 - v9;
  v11 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v13 - v9, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v7);
  v12 = MEMORY[0x1C3B7DF54](&unk_1BE1C8294, v7);
  v13[2] = v4;
  v13[3] = v7;
  v13[4] = v5;
  v13[5] = v6;
  v13[6] = &off_1E775B0E8;
  v13[7] = v12;
  type metadata accessor for CRDictionary();
}

void sub_1BDF2E630()
{
  sub_1BDF2B938();
}

uint64_t sub_1BDF2E644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1BDF2E674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - v7;
  (*(void (**)(char *))(v3 + 16))(v6);
  sub_1BE1B2BF4();
  sub_1BE1B2BB8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t CRUnorderedTree.insert(_:inParent:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[8];
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;

  v25 = a2;
  v6 = a3[2];
  v7 = a3[4];
  v20 = a3[3];
  v21 = v7;
  v8 = type metadata accessor for TreeNode(0, v6, v20, v7);
  v24 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v19[3] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v27 = (char *)v19 - v12;
  v23 = *(_QWORD *)(v6 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v22 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v19[4] = (char *)v19 - v15;
  v26 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v26);
  v16 = sub_1BE1B2EE8();
  v19[6] = *(_QWORD *)(v16 - 8);
  v19[7] = v16;
  MEMORY[0x1E0C80A78](v16);
  v17 = *((_QWORD *)v3 + 2);
  v28 = *v3;
  v29 = v17;
  result = sub_1BE0E0D1C(a1, v25, a3);
  if ((result & 1) != 0)
  {
    v19[5] = a1;
    v19[1] = a3;
    sub_1BE0E1150(a1, a3);
  }
  return result;
}

uint64_t sub_1BDF2EC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1BE1B29D8();
  if (MEMORY[0x1C3B7C934](v5, a1))
    v6 = sub_1BDF33648(v5, a1, a3);
  else
    v6 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t CRUnorderedTree.children(of:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v19 = a1;
  v5 = a2[2];
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = type metadata accessor for TreeNode(0, v5, a2[3], a2[4]);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v17 - v12;
  v18 = *(_QWORD *)(v3 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
  sub_1BE17C5BC((uint64_t)v9, v5, v13);
  v14 = sub_1BE1B2BF4();
  v15 = MEMORY[0x1C3B7DF54](&unk_1BE1C8254, v10);
  MEMORY[0x1C3B7C58C](&v20, v13, v18, v10, v14, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  result = v20;
  if (!v20)
    return sub_1BE1B2594();
  return result;
}

uint64_t sub_1BDF2EDE8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDF2EDF8()
{
  uint64_t *v0;

  return sub_1BDF2EC14(v0[2], v0[3], v0[4]);
}

uint64_t sub_1BDF2EE04()
{
  return swift_deallocObject();
}

_UNKNOWN **sub_1BDF2EE14()
{
  return &protocol witness table for CRUnorderedTree<A>.MergeableDelta;
}

uint64_t sub_1BDF2EE24()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BDF2EE54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BDF2EEA0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDF2EF14(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CRUnorderedTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRUnorderedTree);
}

void CRDictionary_v1.init(_:)()
{
  CRDictionary.init()();
}

void sub_1BDF2EFA8()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
}

void CRDictionary_v1.copy(renamingReferences:)()
{
  swift_retain();
  type metadata accessor for CRDictionary();
}

void sub_1BDF2F018(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  CRDictionary.copy(renamingReferences:)(v9, a1, (uint64_t)&a9);
}

uint64_t sub_1BDF2F02C()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  result = swift_release();
  *v0 = v2;
  return result;
}

void CRDictionary_v1.actionUndoingDifference(from:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F090(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  return CRDictionary.actionUndoingDifference(from:)((_QWORD *)(v2 - 32), a1, v1);
}

void CRDictionary_v1.apply(_:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F0E4()
{
  uint64_t v0;

  return CRDictionary.apply(_:)((_QWORD *)(v0 - 16));
}

void sub_1BDF2F0FC()
{
  type metadata accessor for CRDictionary_v1();
}

void sub_1BDF2F140()
{
  CRDictionary_v1.subscript.getter();
}

void sub_1BDF2F168()
{
  type metadata accessor for CRDictionary_v1();
}

void sub_1BDF2F1A8()
{
  sub_1BDF302D8();
}

void CRDictionary_v1.subscript.setter()
{
  sub_1BDF302D8();
}

uint64_t sub_1BDF2F1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
  v3 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

void CRDictionary_v1.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = malloc(0x48uLL);
  *a1 = v6;
  *v6 = a3;
  v6[1] = v3;
  v7 = sub_1BE1B2EE8();
  v6[2] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[4] = malloc(v9);
  v10 = malloc(v9);
  v11 = *(_QWORD *)(a3 + 16);
  v6[5] = v10;
  v6[6] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[7] = v12;
  v6[8] = malloc(*(_QWORD *)(v12 + 64));
  (*(void (**)(void))(v12 + 16))();
  CRDictionary_v1.subscript.getter();
}

void (*sub_1BDF2F2E4())(uint64_t **a1, char a2)
{
  return sub_1BDF2F30C;
}

void sub_1BDF2F30C(uint64_t **a1, char a2)
{
  sub_1BDF27078(a1, a2, (void (*)(void *, void *, uint64_t))sub_1BDF302D8);
}

void CRDictionary_v1.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[20];

  v17[0] = a3;
  v17[1] = a5;
  v8 = a4[2];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = *v5;
  (*(void (**)(char *))(v9 + 16))((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a4[3];
  v13 = a4[4];
  v17[4] = v8;
  v17[5] = v12;
  v14 = a4[5];
  v15 = a4[6];
  v17[6] = v13;
  v17[7] = v14;
  v16 = a4[7];
  v17[8] = v15;
  v17[9] = v16;
  v17[10] = a2;
  v17[11] = v17[0];
  v17[18] = v11;
  swift_retain();
  v17[12] = v8;
  v17[13] = v12;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v17[17] = v16;
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F3D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  CRDictionary.subscript.getter(v2, (uint64_t)sub_1BDF2BB34, v4 - 224, a1, *(_QWORD *)(v4 - 232));
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

void CRDictionary_v1.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1BDF30334(a1, a2, a5);
}

uint64_t sub_1BDF2F44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v2);
}

void CRDictionary_v1.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  *v11 = a5;
  v11[1] = v5;
  v12 = a5[3];
  v11[2] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[3] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[4] = malloc(v14);
  v15 = malloc(v14);
  v16 = a5[2];
  v11[5] = v15;
  v11[6] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v11[7] = v17;
  v11[8] = malloc(*(_QWORD *)(v17 + 64));
  (*(void (**)(void))(v17 + 16))();
  CRDictionary_v1.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
}

void (*sub_1BDF2F544())(uint64_t **a1, char a2)
{
  return sub_1BDF2F570;
}

void sub_1BDF2F570(uint64_t **a1, char a2)
{
  sub_1BDF27078(a1, a2, (void (*)(void *, void *, uint64_t))sub_1BDF30334);
}

void CRDictionary_v1.removeValue(forKey:)()
{
  type metadata accessor for CRDictionary();
}

void sub_1BDF2F5B4()
{
  CRDictionary.removeValue(forKey:)();
}

void CRDictionary_v1.index(where:)()
{
  swift_retain();
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F630(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *, uint64_t);
  _QWORD *v3;

  CRDictionary.index(where:)(v2, v1, a1, v3);
  return swift_release();
}

void CRDictionary_v1.finalizeTimestamps(_:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F6A4()
{
  return CRDictionary.finalizeTimestamps(_:)();
}

uint64_t static CRDictionary_v1.== infix(_:_:)(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  return static CRDictionary.== infix(_:_:)((uint64_t)&v5, &v4) & 1;
}

void CRDictionary_v1.description.getter()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F728(uint64_t a1)
{
  return CRDictionary.description.getter(a1);
}

void CRDictionary_v1.delta(_:from:)()
{
  swift_retain();
  swift_retain();
  type metadata accessor for CRDictionary();
}

void sub_1BDF2F7A8(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  CRDictionary.delta(_:from:)(v1, &v2, a1);
}

void CRDictionary_v1.canMerge(delta:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F824()
{
  uint64_t *v0;

  return CRDictionary.canMerge(delta:)(v0) & 1;
}

void CRDictionary_v1.merge(delta:)()
{
  type metadata accessor for CRDictionary();
}

void sub_1BDF2F87C(uint64_t a1)
{
  uint64_t v1;

  CRDictionary.merge(delta:)(v1, a1);
}

uint64_t sub_1BDF2F888(char a1)
{
  return a1 & 1;
}

uint64_t sub_1BDF2F89C(uint64_t *a1, _QWORD **a2)
{
  return static CRDictionary_v1.== infix(_:_:)(a1, a2);
}

void CRDictionary_v1.observableDifference(from:with:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2F900(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  return CRDictionary.observableDifference(from:with:)(&v4, v1, a1, v2);
}

void sub_1BDF2F930(_BYTE *a1@<X8>)
{
  CRDictionary_v1.minEncodingVersion.getter(a1);
}

void CRDictionary_v1.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1BDF2F94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[7];
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v36 = a5;
  v37 = a1;
  v38 = a8;
  v35 = a6;
  v26[3] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v26[2] = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v30);
  v29 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRDictionaryElement(255, a4, a7, v14);
  v27 = sub_1BE1B2EE8();
  v26[6] = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v32 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v26[1] = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v34 = (char *)v26 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v28 = (char *)v26 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v23 = MEMORY[0x1E0C80A78](v22);
  v31 = (char *)v26 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v33 = (char *)v26 - v25;
  v45 = a2;
  v39 = a3;
  v40 = a4;
  v26[5] = a4;
  v41 = v36;
  v42 = v35;
  v26[4] = a7;
  v43 = a7;
  v44 = v38;
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF2FB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);

  v8 = sub_1BDDAF70C();
  *(_QWORD *)(v7 - 208) = v1;
  v9 = *(int *)(v1 + 48);
  v10 = v5;
  v11 = v3 + v9;
  v12 = *(_QWORD *)(v7 - 152) + v9;
  v13 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 - 192) = v13;
  v14 = *(void (**)(uint64_t))(v13 + 16);
  *(_QWORD *)(v7 - 168) = v14;
  v14(v3);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16);
  *(_QWORD *)(v7 - 176) = v12;
  v16 = v12;
  v17 = v15;
  v15(v11, v16, v2);
  swift_beginAccess();
  v18 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 - 144) = v10;
  MEMORY[0x1C3B7C58C](v3, v18, v10, v2, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 48))(v4, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 272) + 8))(v4, *(_QWORD *)(v7 - 264));
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v11, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 192) + 8))(v3, *(_QWORD *)(v7 - 144));
    v19 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v7 - 216);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v20, v4, v2);
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
    v21(v11, v2);
    v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 8);
    v23 = *(_QWORD *)(v7 - 144);
    *(_QWORD *)(v7 - 184) = v22;
    v22(v3, v23);
    v24 = *(_QWORD *)(v7 - 208);
    v25 = *(_QWORD *)(v7 - 256);
    v26 = v25 + *(int *)(v24 + 48);
    v27 = *(_QWORD *)(v7 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 168))(v25, v27, v23);
    v17(v26, *(_QWORD *)(v7 - 176), v2);
    v28 = *(_QWORD *)(v7 - 248);
    sub_1BDE7949C(v26, v28);
    *(_QWORD *)(v7 - 192) = v21;
    v21(v26, v2);
    v29 = *(int *)(*(_QWORD *)(v7 - 240) + 20);
    v30 = *(_QWORD *)(v20 + v29);
    v31 = *(_QWORD *)(v28 + v29);
    v32 = v25;
    v33 = v17;
    if (v30 == v31)
      *(_DWORD *)(v7 - 240) = sub_1BDDB2BF8();
    else
      *(_DWORD *)(v7 - 240) = v30 < v31;
    v34 = *(_QWORD *)(v7 - 200);
    sub_1BDE794E0(v28);
    v35 = *(_QWORD *)(v7 - 144);
    (*(void (**)(uint64_t, uint64_t))(v7 - 184))(v32, v35);
    v36 = v34 + *(int *)(v24 + 48);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 - 168);
    v37(v34, v27, v35);
    v33(v36, *(_QWORD *)(v7 - 176), v2);
    v38 = *(_QWORD *)(v7 - 232);
    v33(v38, v20, v2);
    if ((*(_DWORD *)(v7 - 240) & 1) != 0)
    {
      v39 = *(void (**)(uint64_t, uint64_t))(v7 - 192);
      v39(v38, v2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 8))(v34, v24);
      v39(v20, v2);
      v19 = 1;
    }
    else
    {
      v40 = *(_QWORD *)(v7 - 312);
      v41 = v40 + *(int *)(v24 + 48);
      v37(v40, v34, *(_QWORD *)(v7 - 144));
      v33(v41, v36, v2);
      v42 = *(_QWORD *)(v7 - 296);
      v43 = *(_QWORD *)(v7 - 304);
      v44 = *(_QWORD *)(v7 - 280);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v43, v41 + *(int *)(v2 + 36), v44);
      v45 = *(void (**)(uint64_t, uint64_t))(v7 - 192);
      v45(v41, v2);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 288) + 24))(v38 + *(int *)(v2 + 36), v44);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
      v45(v38, v2);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 224) + 8))(*(_QWORD *)(v7 - 200), *(_QWORD *)(v7 - 208));
      v45(*(_QWORD *)(v7 - 216), v2);
      (*(void (**)(uint64_t, _QWORD))(v7 - 184))(v40, *(_QWORD *)(v7 - 144));
    }
  }
  return v19 & 1;
}

uint64_t sub_1BDF2FF18(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary_v1<A, B>, a1);
  return sub_1BE1B2CA8();
}

uint64_t sub_1BDF2FF4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary_v1<A, B>, a1);
  v4 = sub_1BE1AE084(v1, a1, v3);
  swift_release();
  return v4;
}

uint64_t sub_1BDF2FFE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  return CRDictionary.subscript.getter(v2, v1, (uint64_t)&v4, a1);
}

void CRDictionary_v1.index(after:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF30054(uint64_t a1)
{
  uint64_t v1;

  return CRDictionary.index(after:)(a1, v1);
}

void sub_1BDF30078(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;

  v2 = (uint64_t *)malloc(0x40uLL);
  *a1 = v2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v2[4] = TupleTypeMetadata2;
  v4 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v2[5] = v4;
  v2[6] = (uint64_t)malloc(*(_QWORD *)(v4 + 64));
  sub_1BDF30158(v2);
}

void (*sub_1BDF300FC(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 56) = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v7, a2, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v7 + *(int *)(v6 + 48), a3, v5);
  return sub_1BDF2A3D0;
}

void sub_1BDF30158(uint64_t *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v3;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v3 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v3 + 64));
  CRDictionary_v1.subscript.getter();
}

void (*sub_1BDF301C8())(_QWORD *a1)
{
  return sub_1BDEE623C;
}

void sub_1BDF301F4()
{
  CRDictionary_v1.index(after:)();
}

__n128 sub_1BDF30210()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  char v3;

  sub_1BDE27EC8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  result = v2;
  *(__n128 *)v0 = v2;
  *(_BYTE *)(v0 + 16) = v3;
  return result;
}

void CRDictionary_v1<>.encode(to:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDF30288(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  return CRDictionary<>.encode(to:)(v3, a1, v2, v1);
}

void sub_1BDF302BC()
{
  CRDictionary_v1<>.encode(to:)();
}

void sub_1BDF302D8()
{
  type metadata accessor for CRDictionary();
}

void sub_1BDF30310()
{
  sub_1BDF2B938();
}

void sub_1BDF30334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v11 - v7;
  v9 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v11 - v7, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, v5);
  v11[0] = *(_QWORD *)(a3 + 16);
  v11[1] = v5;
  v10 = *(_OWORD *)(a3 + 48);
  v12 = *(_OWORD *)(a3 + 32);
  v13 = v10;
  type metadata accessor for CRDictionary();
}

void sub_1BDF303E8()
{
  sub_1BDF2B938();
}

uint64_t sub_1BDF303F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1BDF30428(uint64_t a1)
{
  uint64_t *v1;

  sub_1BDF2F94C(a1, v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1BDF30444(char a1)
{
  return a1 & 1;
}

_UNKNOWN **sub_1BDF30450()
{
  return &protocol witness table for CRDictionary<A, B>.MergeableDelta;
}

void sub_1BDF3045C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDF3046C()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDF30484()
{
  return 48;
}

__n128 sub_1BDF30490(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for CRUnknownCRDT()
{
  return &type metadata for CRUnknownCRDT;
}

uint64_t sub_1BDF304B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1BDE068BC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF30604(uint64_t a1)
{
  return sub_1BDDC78AC(a1, (uint64_t (*)(void))sub_1BDE069C8, type metadata accessor for Proto_Value);
}

uint64_t sub_1BDF30618(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1BDE06BF0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF3076C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  unint64_t v43;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_1BDE0667C(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = sub_1BDFCF200((uint64_t)v40, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v13 = v4[2];
    v14 = __OFADD__(v13, result);
    v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v4[2] = v15;
  }
  if (result != v12)
    goto LABEL_13;
LABEL_16:
  v2 = v4[2];
  v7 = v41;
  v38 = v40[1];
  v39 = v40[0];
  v6 = v42;
  v37 = v41;
  if (!v43)
  {
LABEL_51:
    v30 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    v21 = (unint64_t)(v7 + 64) >> 6;
    if (v30 >= v21)
      goto LABEL_13;
    v34 = *(_QWORD *)(v38 + 8 * v30);
    if (!v34)
    {
      v35 = v6 + 2;
      if (v6 + 2 >= v21)
        goto LABEL_13;
      v34 = *(_QWORD *)(v38 + 8 * v35);
      if (v34)
      {
LABEL_59:
        v30 = v35;
      }
      else
      {
        if (v6 + 3 >= v21)
          goto LABEL_13;
        v34 = *(_QWORD *)(v38 + 8 * (v6 + 3));
        if (!v34)
          goto LABEL_65;
        v30 = v6 + 3;
      }
    }
LABEL_54:
    v16 = (v34 - 1) & v34;
    v17 = __clz(__rbit64(v34)) + (v30 << 6);
    v6 = v30;
    v7 = v37;
    goto LABEL_18;
  }
  v16 = (v43 - 1) & v43;
  v17 = __clz(__rbit64(v43)) | (v42 << 6);
LABEL_18:
  v18 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * v17);
  v19 = *v18;
  v20 = v18[1];
  sub_1BDDB6CA4(*v18, v20);
  if (v20 >> 60 == 15)
    goto LABEL_13;
  v22 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v23 = v4[3];
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
    {
      v4 = sub_1BDE0667C((_QWORD *)(v23 > 1), v2 + 1, 1, v4);
      v24 = v4[3] >> 1;
    }
    if (v2 < v24)
      break;
LABEL_20:
    v4[2] = v2;
    if (v20 >> 60 == 15)
      goto LABEL_13;
  }
  while (1)
  {
    v29 = &v4[2 * v2 + 4];
    *v29 = v19;
    v29[1] = v20;
    ++v2;
    if (!v16)
      break;
    v25 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v26 = v25 | (v6 << 6);
LABEL_26:
    v27 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * v26);
    v19 = *v27;
    v20 = v27[1];
    sub_1BDDB6CA4(*v27, v20);
    if (v20 >> 60 == 15 || v2 >= v24)
      goto LABEL_20;
  }
  v30 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v30 >= v22)
      goto LABEL_55;
    v31 = *(_QWORD *)(v38 + 8 * v30);
    if (v31)
      goto LABEL_41;
    v32 = v6 + 2;
    if (v6 + 2 >= v22)
      goto LABEL_55;
    v31 = *(_QWORD *)(v38 + 8 * v32);
    if (!v31)
    {
      if (v6 + 3 >= v22)
        goto LABEL_55;
      v31 = *(_QWORD *)(v38 + 8 * (v6 + 3));
      if (v31)
      {
        v30 = v6 + 3;
        goto LABEL_41;
      }
      v32 = v6 + 4;
      if (v6 + 4 >= v22)
        goto LABEL_55;
      v31 = *(_QWORD *)(v38 + 8 * v32);
      if (!v31)
      {
        v30 = v6 + 5;
        if (v6 + 5 >= v22)
          goto LABEL_55;
        v31 = *(_QWORD *)(v38 + 8 * v30);
        if (!v31)
        {
          v33 = v6 + 6;
          while (v22 != v33)
          {
            v31 = *(_QWORD *)(v38 + 8 * v33++);
            if (v31)
            {
              v30 = v33 - 1;
              goto LABEL_41;
            }
          }
LABEL_55:
          v4[2] = v2;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    v30 = v32;
LABEL_41:
    v16 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v30 << 6);
    v6 = v30;
    goto LABEL_26;
  }
  __break(1u);
LABEL_65:
  v35 = v30 + 3;
  if (v30 + 3 < v21)
  {
    v34 = *(_QWORD *)(v38 + 8 * v35);
    if (v34)
      goto LABEL_59;
    v30 += 4;
    if (v30 >= v21)
      goto LABEL_13;
    v34 = *(_QWORD *)(v38 + 8 * v30);
    if (!v34)
    {
      v36 = v6 + 6;
      while (v21 != v36)
      {
        v34 = *(_QWORD *)(v38 + 8 * v36++);
        if (v34)
        {
          v30 = v36 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  result = sub_1BDE27FD0();
  *(_QWORD *)v1 = v4;
  return result;
}

uint64_t sub_1BDF30B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1BDDA8B2C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF30CDC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_18:
      if (!v2)
        goto LABEL_19;
      goto LABEL_21;
    }
  }
  if (v4 <= v5)
    v16 = v4 + v2;
  else
    v16 = v4;
  v3 = sub_1BDE07400(isUniquelyReferenced_nonNull_native, v16, 1, v3);
  v8 = v3[3] >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_18;
LABEL_5:
  v10 = v3[2];
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = (unint64_t)&v3[3 * v10 + 4];
  if (a1 + 32 < v11 + 24 * v9 && v11 < a1 + 32 + 24 * v9)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3B0);
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = v3[2];
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    v3[2] = v15;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDF30E58(uint64_t a1)
{
  return sub_1BDDC78AC(a1, (uint64_t (*)(void))sub_1BDDAEBE8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t sub_1BDF30E6C(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[2];
  v5 = v1[3];
  if (*v1)
  {
    v6 = v1[1];
    sub_1BE1B3710();
    sub_1BDDC8E74(v3);
    swift_bridgeObjectRetain();
    sub_1BDEF5748(a1, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BDEF5748(a1, v6);
    swift_bridgeObjectRelease();
    sub_1BDDC8EA0(v3);
  }
  else
  {
    sub_1BE1B3710();
  }
  sub_1BDDB6CA4(v4, v5);
  sub_1BE1B1E8C();
  return sub_1BDDB796C(v4, v5);
}

uint64_t sub_1BDF30F38()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v6[4];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_1BE1B36F8();
  sub_1BE1B3710();
  if (v1)
  {
    sub_1BDDC8E74(v1);
    swift_bridgeObjectRetain();
    sub_1BDEF5748(v6, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BDEF5748(v6, v2);
    swift_bridgeObjectRelease();
    sub_1BDDC8EA0(v1);
  }
  sub_1BDDB6CA4(v3, v4);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v3, v4);
  return sub_1BE1B371C();
}

uint64_t sub_1BDF31020()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v6[4];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_1BE1B36F8();
  sub_1BE1B3710();
  if (v1)
  {
    sub_1BDDC8E74(v1);
    swift_bridgeObjectRetain();
    sub_1BDEF5748(v6, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BDEF5748(v6, v2);
    swift_bridgeObjectRelease();
    sub_1BDDC8EA0(v1);
  }
  sub_1BDDB6CA4(v3, v4);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v3, v4);
  return sub_1BE1B371C();
}

uint64_t sub_1BDF31100(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  v26[3] = *MEMORY[0x1E0C80C00];
  v19 = *(_QWORD *)(a2 + 16);
  if (!v19)
    return 0;
  v3 = a2 + 32;
  swift_bridgeObjectRetain_n();
  v4 = 0;
  v5 = (unint64_t *)(a1 + 56);
  v21 = a1;
  v17 = (unint64_t *)(a1 + 56);
  v18 = v3;
  while (2)
  {
    v6 = (uint64_t *)(v3 + 32 * v4);
    v25 = *v6;
    if (*v6 && (v7 = *(_QWORD *)(a1 + 16)) != 0)
    {
      v9 = v6[1];
      v8 = v6[2];
      v20 = v4 + 1;
      v10 = v6[3];
      swift_bridgeObjectRetain_n();
      v24 = v9;
      sub_1BDDC8E74(v25);
      sub_1BDDB6CA4(v8, v10);
      v22 = v10;
      v23 = v8;
      while (1)
      {
        v12 = *(v5 - 3);
        v11 = *(v5 - 2);
        v14 = *(v5 - 1);
        v13 = *v5;
        if (!v12)
          __asm { BR              X10 }
        v26[0] = 0;
        sub_1BDDC8E74(v12);
        sub_1BDDB6CA4(v14, v13);
        sub_1BDEEDAB4(v11, v26, v24);
        sub_1BDEEDAB4(v12, v26, v25);
        sub_1BDDC8EA0(v12);
        sub_1BDDB796C(v14, v13);
        if ((v26[0] & 2) == 0)
          break;
        v5 += 4;
        if (!--v7)
        {
          swift_bridgeObjectRelease_n();
          sub_1BDDC8EA0(v25);
          sub_1BDDB796C(v23, v22);
          goto LABEL_13;
        }
      }
      a1 = v21;
      swift_bridgeObjectRelease_n();
      sub_1BDDC8EA0(v25);
      sub_1BDDB796C(v23, v22);
      v4 = v20;
      v5 = v17;
      v3 = v18;
      if (v20 != v19)
        continue;
      v15 = 0;
    }
    else
    {
LABEL_13:
      v15 = 1;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  return v15;
}

uint64_t sub_1BDF3165C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Proto_CustomCRDT(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (uint64_t *)((char *)&v11 - v5);
  result = sub_1BDDA8D6C();
  if (!v0)
  {
    v8 = result;
    swift_retain();
    sub_1BE1B20E4();
    swift_retain();
    v9 = swift_bridgeObjectRetain();
    v10 = sub_1BDF32164(v9, v8);
    swift_bridgeObjectRelease();
    swift_release();
    *v6 = v10;
    sub_1BDF32680((uint64_t)v6, (uint64_t)v4);
    swift_beginAccess();
    sub_1BE12919C((uint64_t)v4);
    swift_release();
    return sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
  }
  return result;
}

void sub_1BDF317AC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1BDF317B8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1BDF31100(*a1, *v1);
}

uint64_t sub_1BDF317C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = v0;
  v7 = *v0;
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  sub_1BDF304B4(v2);
  v3 = sub_1BDEF9BE4(v7);
  swift_bridgeObjectRelease();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1BDF32934(v4, v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v1 = v5;
  return result;
}

uint64_t *sub_1BDF31864@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *result;

  result = sub_1BDF31E00(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF3188C()
{
  return sub_1BDF3165C();
}

_UNKNOWN **sub_1BDF318A4()
{
  return &off_1E7755C58;
}

uint64_t sub_1BDF318B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  v7 = *v0;
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  sub_1BDF304B4(v2);
  v3 = sub_1BDEF9BE4(v7);
  swift_bridgeObjectRelease();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1BDF32934(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v1 = v5;
  return 1;
}

void sub_1BDF31950(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v7 = *a2;
  v6 = a2[1];
  if (!*a1)
  {
    if (!v7)
      goto LABEL_7;
    goto LABEL_9;
  }
  v8 = *a1;
  if (!v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_9:
    sub_1BDDC8E74(v7);
    sub_1BDDC8EA0(v3);
    v10 = v7;
LABEL_11:
    sub_1BDDC8EA0(v10);
    return;
  }
  sub_1BDDC8E74(v8);
  sub_1BDDC8E74(v3);
  sub_1BDDC8E74(v7);
  if ((sub_1BDDBDDBC(v2, v6) & 1) == 0)
  {
    sub_1BDDC8EA0(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v3;
    goto LABEL_11;
  }
  v9 = sub_1BDDBDDBC(v3, v7);
  sub_1BDDC8EA0(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDDC8EA0(v3);
  if ((v9 & 1) != 0)
LABEL_7:
    sub_1BDDD6F30(v4, v5);
}

_QWORD *sub_1BDF31AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**i)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _QWORD *v46;

  v38 = a2;
  v4 = type metadata accessor for Proto_Version(0);
  v44 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v8 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  v43 = (uint64_t)&v35 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v36 = v6;
    v37 = v9;
    v42 = v2;
    v46 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1BDE22660(0, v11, 0);
    v12 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
    v40 = v4;
    v41 = v12;
    v13 = *(_QWORD *)(v12 - 8);
    v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v39 = *(_QWORD *)(v13 + 72);
    for (i = off_1EF52B000; ; i = off_1EF52B000)
    {
      v16 = *(int *)(v41 + 20);
      v17 = (uint64_t)i[139] + *(_QWORD *)(v14 + v16);
      swift_beginAccess();
      v18 = v43;
      sub_1BDD86DEC(v17, v43, &qword_1ED6F37A8);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
      LODWORD(v17) = v19(v18, 1, v4);
      sub_1BDD86E30(v18, &qword_1ED6F37A8);
      if ((_DWORD)v17 == 1)
      {
        v20 = 0;
        v21 = 0;
      }
      else
      {
        v22 = (uint64_t)i[139] + *(_QWORD *)(v14 + v16);
        swift_beginAccess();
        v23 = v37;
        sub_1BDD86DEC(v22, v37, &qword_1ED6F37A8);
        if (v19(v23, 1, v4) == 1)
        {
          v24 = v36;
          v25 = MEMORY[0x1E0DEE9D8];
          *v36 = MEMORY[0x1E0DEE9D8];
          v24[1] = v25;
          sub_1BE1B20E4();
          sub_1BDD86E30(v23, &qword_1ED6F37A8);
        }
        else
        {
          v24 = v36;
          sub_1BDDA2E8C(v23, (uint64_t)v36, type metadata accessor for Proto_Version);
        }
        v26 = v42;
        v27 = *(_QWORD *)(v38 + 16);
        swift_retain();
        sub_1BDDA9DA0(v24, v27, &v45);
        if (v26)
        {
          swift_release();
          return v24;
        }
        v42 = 0;
        v21 = *((_QWORD *)&v45 + 1);
        v20 = v45;
      }
      v28 = (uint64_t *)(*(_QWORD *)(v14 + v16)
                      + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
      swift_beginAccess();
      v30 = *v28;
      v29 = v28[1];
      v24 = v46;
      sub_1BDDB6CA4(v30, v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE22660(0, v24[2] + 1, 1);
        v24 = v46;
      }
      v32 = v24[2];
      v31 = v24[3];
      if (v32 >= v31 >> 1)
      {
        sub_1BDE22660(v31 > 1, v32 + 1, 1);
        v24 = v46;
      }
      v24[2] = v32 + 1;
      v33 = &v24[4 * v32];
      v33[4] = v20;
      v33[5] = v21;
      v33[6] = v30;
      v33[7] = v29;
      v4 = v40;
      v14 += v39;
      if (!--v11)
        return v24;
    }
  }
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

uint64_t *sub_1BDF31E00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1E0C80A78](v21);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Proto_CRDT(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v14, (uint64_t)v13, &qword_1ED6F3728);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7);
  sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3728);
  if ((_DWORD)v14 != 1)
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    swift_retain();
    sub_1BDDA0528((uint64_t)v10);
    v17 = *(_QWORD *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v17, (uint64_t)v4, &qword_1ED6F2DF0);
    v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v4, 1, v18) == 1)
    {
      sub_1BDD86E30((uint64_t)v4, &qword_1ED6F2DF0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        sub_1BDDA2E8C((uint64_t)v4, (uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
LABEL_9:
        sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_CRDT);
        v19 = *v6;
        swift_bridgeObjectRetain();
        sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
        swift_retain();
        v6 = sub_1BDF31AA0(v19, inited);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_setDeallocating();
        swift_release();
        return v6;
      }
      sub_1BDD9C3E0((uint64_t)v4, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    *v6 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_9;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v15 = 0xD000000000000014;
  *(_QWORD *)(v15 + 8) = 0x80000001BE1CD0F0;
  *(_BYTE *)(v15 + 16) = 0;
  swift_willThrow();
  swift_release();
  return v6;
}

uint64_t sub_1BDF32164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t result;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v51 = a2;
  v4 = type metadata accessor for Proto_Version(0);
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v56 = (uint64_t)&v48 - v10;
  v55 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v48 = v2;
    v64 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22608(0, v13, 0);
    v60 = v64;
    v15 = (unint64_t *)(a1 + 56);
    v49 = v6;
    do
    {
      v59 = v13;
      v16 = *(v15 - 3);
      v17 = *(v15 - 1);
      v18 = *v15;
      v61 = *(v15 - 2);
      sub_1BDDC8E74(v16);
      sub_1BDDB6CA4(v17, v18);
      sub_1BE1B20E4();
      v19 = *(int *)(v55 + 20);
      if (qword_1EF52B448 != -1)
        swift_once();
      *(_QWORD *)&v12[v19] = qword_1EF52B440;
      swift_retain();
      sub_1BDDB6CA4(v17, v18);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v20 = *(_QWORD *)&v12[v19];
        type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
        v21 = swift_allocObject();
        v53 = v17;
        v22 = v21;
        v23 = v21
            + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v21+ OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, 1, 1, v58);
        v52 = v18;
        v24 = (uint64_t *)(v22
                        + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
        swift_retain();
        *v24 = sub_1BE1B20CC();
        v24[1] = v25;
        v26 = v20
            + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        swift_beginAccess();
        v27 = v26;
        v28 = v56;
        sub_1BDD86DEC(v27, v56, &qword_1ED6F37A8);
        swift_beginAccess();
        sub_1BDF326C4(v28, v23);
        swift_endAccess();
        v29 = (uint64_t *)(v20
                        + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
        swift_beginAccess();
        v31 = *v29;
        v30 = v29[1];
        sub_1BDDB6CA4(v31, v30);
        swift_release();
        swift_beginAccess();
        v32 = *v24;
        v33 = v24[1];
        *v24 = v31;
        v24[1] = v30;
        v6 = v49;
        v18 = v52;
        sub_1BDDB796C(v32, v33);
        *(_QWORD *)&v12[v19] = v22;
        v17 = v53;
        swift_release();
      }
      v34 = (uint64_t *)(*(_QWORD *)&v12[v19]
                      + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
      swift_beginAccess();
      v35 = *v34;
      v36 = v34[1];
      *v34 = v17;
      v34[1] = v18;
      sub_1BDDB796C(v35, v36);
      if (v16)
      {
        v37 = v18;
        v38 = v17;
        v62 = v16;
        v63 = v61;
        sub_1BDDAD780(*(_QWORD *)(v51 + 16), v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
          swift_allocObject();
          v39 = swift_retain();
          *(_QWORD *)&v12[v19] = sub_1BE1398A8(v39);
          swift_release();
        }
        v40 = *(_QWORD *)&v12[v19];
        v41 = v56;
        sub_1BDDA2E8C((uint64_t)v6, v56, type metadata accessor for Proto_Version);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v41, 0, 1, v58);
        v42 = v50;
        sub_1BDF3270C(v41, v50);
        v43 = v40
            + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        swift_beginAccess();
        swift_retain();
        sub_1BDF326C4(v42, v43);
        swift_endAccess();
        swift_release();
        v17 = v38;
        v18 = v37;
      }
      sub_1BDDC8EA0(v16);
      sub_1BDDB796C(v17, v18);
      v44 = v60;
      v64 = v60;
      v46 = *(_QWORD *)(v60 + 16);
      v45 = *(_QWORD *)(v60 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_1BDE22608(v45 > 1, v46 + 1, 1);
        v44 = v64;
      }
      v15 += 4;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      v47 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      v60 = v44;
      sub_1BDDA2E8C((uint64_t)v12, v44 + v47 + *(_QWORD *)(v54 + 72) * v46, type metadata accessor for Proto_CustomCRDT.Sibling);
      v13 = v59 - 1;
    }
    while (v59 != 1);
    return v60;
  }
  return result;
}

uint64_t sub_1BDF32680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_CustomCRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF326C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF3270C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDF32754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;

  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_25;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_25;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            goto LABEL_25;
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_21:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_22:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v12);
    v17 = *v16;
    if (*v16)
    {
      v19 = v16[2];
      v18 = v16[3];
      v20 = v16[1];
      v24 = 0;
      sub_1BDDC8E74(v17);
      sub_1BDDB6CA4(v19, v18);
      sub_1BDEEDAB4(v20, &v24, a3);
      sub_1BDEEDAB4(v17, &v24, a2);
      sub_1BDDC8EA0(v17);
      result = sub_1BDDB796C(v19, v18);
      if (v24 == 1)
      {
        v21 = 1;
LABEL_26:
        swift_release();
        return v21;
      }
    }
  }
  v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_25:
    v21 = 0;
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_25;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BDF32934(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;

  v2 = 0;
  v5 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v4 = v5;
  v25 = result;
  v6 = 1 << *(_BYTE *)(result - 24);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v26 = (unint64_t)(v6 + 63) >> 6;
  v9 = MEMORY[0x1E0DEE9D8];
  if ((v7 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v2 << 6); ; i = __clz(__rbit64(v13)) + (v2 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * i);
    v16 = *v15;
    v17 = v15[1];
    v19 = v15[2];
    v18 = v15[3];
    if (*v15)
    {
      sub_1BDDC8E74(*v15);
      sub_1BDDB6CA4(v19, v18);
      sub_1BDDC8E74(v16);
      v20 = sub_1BDF32754(a2, v16, v17);
      sub_1BDDC8EA0(v16);
      if ((v20 & 1) != 0)
      {
        sub_1BDDC8EA0(v16);
        result = sub_1BDDB796C(v19, v18);
        if (v8)
          goto LABEL_4;
        goto LABEL_5;
      }
    }
    else
    {
      sub_1BDDC8E74(0);
      sub_1BDDB6CA4(v19, v18);
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_1BDE22660(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v22 = *(_QWORD *)(v9 + 16);
    v21 = *(_QWORD *)(v9 + 24);
    v23 = v22 + 1;
    if (v22 >= v21 >> 1)
    {
      result = sub_1BDE22660(v21 > 1, v22 + 1, 1);
      v23 = v22 + 1;
    }
    *(_QWORD *)(v9 + 16) = v23;
    v24 = (_QWORD *)(v9 + 32 * v22);
    v24[4] = v16;
    v24[5] = v17;
    v24[6] = v19;
    v24[7] = v18;
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v2 >= v26)
      goto LABEL_33;
    v13 = *(_QWORD *)(v25 + 8 * v2);
    if (!v13)
      break;
LABEL_17:
    v8 = (v13 - 1) & v13;
  }
  v14 = v2 + 1;
  if (v2 + 1 >= v26)
    goto LABEL_33;
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v2 + 2;
  if (v2 + 2 >= v26)
    goto LABEL_33;
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v2 + 3;
  if (v2 + 3 >= v26)
    goto LABEL_33;
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v2 + 4;
  if (v2 + 4 >= v26)
  {
LABEL_33:
    swift_release();
    return v9;
  }
  v13 = *(_QWORD *)(v25 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v2 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v2 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v2 >= v26)
      goto LABEL_33;
    v13 = *(_QWORD *)(v25 + 8 * v2);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_35:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CRUnknownCRDT.MergeableDelta()
{
  return &type metadata for CRUnknownCRDT.MergeableDelta;
}

uint64_t destroy for CRUnknownCRDT.Sibling(_QWORD *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return sub_1BDDB796C(a1[2], a1[3]);
}

_QWORD *initializeWithCopy for CRUnknownCRDT.Sibling(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v6 = a2[2];
  v5 = a2[3];
  sub_1BDDB6CA4(v6, v5);
  a1[2] = v6;
  a1[3] = v5;
  return a1;
}

uint64_t *assignWithCopy for CRUnknownCRDT.Sibling(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a1;
  v5 = *a2;
  if (!v4)
  {
    if (v5)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v5)
  {
    sub_1BDF32D38((uint64_t)a1);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v7 = a2[2];
  v6 = a2[3];
  sub_1BDDB6CA4(v7, v6);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  sub_1BDDB796C(v8, v9);
  return a1;
}

uint64_t sub_1BDF32D38(uint64_t a1)
{
  destroy for CRVersion();
  return a1;
}

_QWORD *assignWithTake for CRUnknownCRDT.Sibling(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  if (!*a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    sub_1BDF32D38((uint64_t)a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
LABEL_6:
  v4 = a1[2];
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1BDDB796C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRUnknownCRDT.Sibling(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CRUnknownCRDT.Sibling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRUnknownCRDT.Sibling()
{
  return &type metadata for CRUnknownCRDT.Sibling;
}

unint64_t sub_1BDF32EA0()
{
  unint64_t result;

  result = qword_1EF52E218[0];
  if (!qword_1EF52E218[0])
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1BDDE0, &type metadata for CRUnknownCRDT.Sibling);
    atomic_store(result, qword_1EF52E218);
  }
  return result;
}

BOOL Optional.isDefaultState.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 48))(v1, 1) == 1;
}

uint64_t Optional.init(defaultState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t sub_1BDF32F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional.init(defaultState:)(*(_QWORD *)(a1 + 16), a2);
}

BOOL Int.isDefaultState.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t Int.init(defaultState:)()
{
  return 0;
}

BOOL sub_1BDF32F50()
{
  _QWORD *v0;

  return *v0 == 0;
}

BOOL Float.isDefaultState.getter(float a1)
{
  return a1 == 0.0;
}

float Float.init(defaultState:)()
{
  return 0.0;
}

BOOL sub_1BDF32F74()
{
  float *v0;

  return *v0 == 0.0;
}

void sub_1BDF32F84(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL Double.isDefaultState.getter(double a1)
{
  return a1 == 0.0;
}

double Double.init(defaultState:)()
{
  return 0.0;
}

BOOL sub_1BDF32FA0()
{
  double *v0;

  return *v0 == 0.0;
}

BOOL Bool.isDefaultState.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Bool.init(defaultState:)()
{
  return 0;
}

BOOL sub_1BDF32FC4()
{
  _BYTE *v0;

  return (*v0 & 1) == 0;
}

BOOL String.isDefaultState.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  return v2 == 0;
}

uint64_t String.init(defaultState:)()
{
  return 0;
}

BOOL sub_1BDF32FFC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  return v2 == 0;
}

void sub_1BDF3301C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t Data.isDefaultState.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_1BDF3304C + 4 * byte_1BE1BDE50[a2 >> 62]))();
}

BOOL sub_1BDF3304C(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2) == 0;
}

uint64_t Data.init(defaultState:)()
{
  return 0;
}

uint64_t sub_1BDF33080()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_1BDF330A8 + 4 * byte_1BE1BDE54[*(_QWORD *)(v0 + 8) >> 62]))();
}

BOOL sub_1BDF330A8()
{
  uint64_t v0;

  return BYTE6(v0) == 0;
}

double sub_1BDF330D0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1BE1BDF50;
  return result;
}

uint64_t Array.isDefaultState.getter()
{
  uint64_t v0;

  v0 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v0);
  return sub_1BE1B2CD8() & 1;
}

uint64_t Array.init(defaultState:)()
{
  return sub_1BE1B29D8();
}

uint64_t sub_1BDF33140()
{
  return Array.isDefaultState.getter();
}

uint64_t sub_1BDF33150@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Array.init(defaultState:)();
  *a1 = result;
  return result;
}

uint64_t Set.init(defaultState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BE1B29D8();
  if (MEMORY[0x1C3B7C934](v4, a1))
    v5 = sub_1BDF33648(v4, a1, a2);
  else
    v5 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BDF331EC(uint64_t a1)
{
  _QWORD *v1;

  return Set.isDefaultState.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1BDF331FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = Set.init(defaultState:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t Dictionary.init(defaultState:)()
{
  swift_getTupleTypeMetadata2();
  sub_1BE1B29D8();
  return sub_1BE1B25DC();
}

void sub_1BDF33288(_QWORD *a1)
{
  _QWORD *v1;

  Dictionary.isDefaultState.getter(*v1, a1[2], a1[3], a1[4]);
}

uint64_t sub_1BDF3329C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Dictionary.init(defaultState:)();
  *a1 = result;
  return result;
}

uint64_t RawRepresentable<>.isDefaultState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v9 - v6;
  sub_1BE1B2930();
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(AssociatedTypeWitness, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return a3 & 1;
}

uint64_t RawRepresentable<>.init(defaultState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(AssociatedTypeWitness, a2);
  sub_1BE1B293C();
  v10 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a1);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v9, a1);
  __break(1u);
  return result;
}

uint64_t CRExtensible<>.isDefaultState.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v9 - v6;
  CRExtensible.rawValue.getter(a1, (uint64_t)&v9 - v6);
  LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(AssociatedTypeWitness, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return a2 & 1;
}

void CRExtensible<>.init(defaultState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v15 - v13;
  (*(void (**)(void))(a3 + 16))();
  CRExtensible.init(rawValue:)((uint64_t)v14, a1, a2, a4, a5, a6);
}

uint64_t sub_1BDF3362C(uint64_t a1, uint64_t a2)
{
  return CRExtensible<>.isDefaultState.getter(a1, *(_QWORD *)(a2 - 8));
}

void sub_1BDF33634(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  CRExtensible<>.init(defaultState:)(a1[2], a1[3], *(_QWORD *)(a2 - 8), a1[4], a1[5], a3);
}

uint64_t sub_1BDF33648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, unint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v44 = (char *)&v37 - v10;
  v37 = v11;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x1C3B7C8EC](v12))
  {
    sub_1BE1B3050();
    v15 = sub_1BE1B3044();
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9E8];
  }
  v40 = MEMORY[0x1C3B7C934](v5, a2);
  if (!v40)
    return v15;
  v16 = 0;
  v43 = v15 + 56;
  v38 = v14;
  v39 = v5;
  while (1)
  {
    v17 = sub_1BE1B29FC();
    sub_1BE1B29A8();
    if ((v17 & 1) != 0)
    {
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
        goto LABEL_20;
    }
    else
    {
      result = sub_1BE1B30BC();
      if (v37 != 8)
        goto LABEL_23;
      v46 = result;
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, (unint64_t)&v46, a2);
      swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return v15;
      }
    }
    v21 = v45;
    v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v42 = v20;
    v41(v44, v14, a2);
    v22 = sub_1BE1B26D8();
    v23 = -1 << *(_BYTE *)(v15 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
    v27 = 1 << v24;
    v28 = *(_QWORD *)(v21 + 72);
    if (((1 << v24) & v26) != 0)
    {
      v29 = ~v23;
      do
      {
        v18(v8, *(_QWORD *)(v15 + 48) + v28 * v24, a2);
        v30 = a3;
        v31 = sub_1BE1B2798();
        v32 = *(void (**)(char *, uint64_t))(v45 + 8);
        v32(v8, a2);
        if ((v31 & 1) != 0)
        {
          v32(v44, a2);
          a3 = v30;
          v14 = v38;
          v5 = v39;
          goto LABEL_7;
        }
        v24 = (v24 + 1) & v29;
        v25 = v24 >> 6;
        v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
        v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      v14 = v38;
      v5 = v39;
    }
    v33 = v44;
    *(_QWORD *)(v43 + 8 * v25) = v27 | v26;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v28 * v24, v33, a2);
    v35 = *(_QWORD *)(v15 + 16);
    v19 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v19)
      break;
    *(_QWORD *)(v15 + 16) = v36;
LABEL_7:
    v16 = v42;
    if (v42 == v40)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of CRDefaultStateRepresentable.isDefaultState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CRDefaultStateRepresentable.init(defaultState:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t CRExtensible.rawValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, v9, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    sub_1BE1B2930();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

void static CRExtensible.== infix(_:_:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDF33B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  void (*v7)(uint64_t, uint64_t);

  CRExtensible.rawValue.getter(a1, v3);
  CRExtensible.rawValue.getter(a1, v2);
  v6 = sub_1BE1B2798();
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v1);
  v7(v3, v1);
  return v6 & 1;
}

void type metadata accessor for CRExtensible()
{
  JUMPOUT(0x1C3B7DED0);
}

void CRExtensible.init(rawValue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a4;
  v26 = a5;
  v27 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v22 - v11;
  v23 = sub_1BE1B2EE8();
  v13 = *(_QWORD *)(v23 - 8);
  v14 = MEMORY[0x1E0C80A78](v23);
  v16 = (char *)&v22 - v15;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v24 = a1;
  v20(v12, a1, AssociatedTypeWitness);
  sub_1BE1B293C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v27, v24, AssociatedTypeWitness);
    v28 = a2;
    v29 = a3;
    v30 = v25;
    v31 = v26;
    type metadata accessor for CRExtensible();
  }
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, AssociatedTypeWitness);
  v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v19, v16, a2);
  v21(v27, v19, a2);
  v28 = a2;
  v29 = a3;
  v30 = v25;
  v31 = v26;
  type metadata accessor for CRExtensible();
}

void sub_1BDF33D98()
{
  JUMPOUT(0x1BDF33DA0);
}

uint64_t CRValue<>.init(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v28[0] = a4;
  v7 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v28 - v9;
  v28[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v28 - v15;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 8);
  v18 = swift_retain();
  v29 = v16;
  v19 = v33;
  v33 = AssociatedTypeWitness;
  v17(v18, AssociatedTypeWitness, a3);
  if (v19)
    return swift_release();
  v21 = v7;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v14, v29, v33);
  sub_1BE1B293C();
  v22 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
    v31 = 0;
    v32 = 0xE000000000000000;
    sub_1BE1B305C();
    sub_1BE1B284C();
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    v23 = v29;
    v24 = v33;
    sub_1BE1B347C();
    sub_1BE1B284C();
    v25 = v31;
    v26 = v32;
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v27 = v25;
    *(_QWORD *)(v27 + 8) = v26;
    *(_BYTE *)(v27 + 16) = 0;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v23, v24);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v33);
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v22 + 32))(v28[0], v10, a1);
  }
}

uint64_t CRValue<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  sub_1BE1B2930();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t CRValue<>.minEncodingVersion.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v10 - v7;
  sub_1BE1B2930();
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(AssociatedTypeWitness, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

void CRExtensible.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDF34270()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_1BDF34298(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  CRExtensible.init(rawValue:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_1BDF342BC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 56))(v1, 0, 1, v0);
}

uint64_t CRExtensible.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v8 - v5;
  CRExtensible.rawValue.getter(a2, (uint64_t)&v8 - v5);
  sub_1BE1B26E4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t CRExtensible.minEncodingVersion.getter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = (char *)&v7 - v4;
  CRExtensible.rawValue.getter(a1, (uint64_t)&v7 - v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8) + 32))(AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
}

void sub_1BDF3444C()
{
  static CRExtensible.== infix(_:_:)();
}

uint64_t sub_1BDF3445C(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRExtensible<A>, a1);
  return sub_1BE1B2948();
}

uint64_t sub_1BDF344A8()
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRExtensible<A>);
  return sub_1BE1B2954();
}

uint64_t sub_1BDF344F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRExtensible<A>);
  return CRValue<>.init(from:)(a1, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8), a2);
}

uint64_t sub_1BDF34554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRExtensible<A>);
  return CRValue<>.encode(to:)(a1, a2, v5, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 8));
}

uint64_t CRExtensible<>.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  _BYTE v17[40];
  uint64_t v18;

  v18 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = &v17[-v13 - 8];
  sub_1BDED9AB0(a1, (uint64_t)v17);
  sub_1BE1B2B58();
  if (!v6)
    CRExtensible.init(rawValue:)((uint64_t)v14, a2, a3, a4, v18, a6);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t CRExtensible<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v8 - v5;
  CRExtensible.rawValue.getter(a2, (uint64_t)&v8 - v5);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

void sub_1BDF3477C()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDF3478C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  return CRExtensible<>.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_1BDF347B0(uint64_t a1, uint64_t a2)
{
  return CRExtensible<>.encode(to:)(a1, a2);
}

uint64_t sub_1BDF347C8()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1BDF3486C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = (*(_BYTE *)(v9 + 80) | *(_BYTE *)(v6 + 80));
  if (v10 <= 7 && v7 + 1 <= 0x18 && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BDF349CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v5)
    v8 = v5;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    v11 = AssociatedTypeWitness;
  }
  else
  {
    v7 = v4;
    v11 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v11);
}

uint64_t sub_1BDF34AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = AssociatedTypeWitness;
  }
  else
  {
    v9 = v6;
    v13 = v5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v7) = v12;
  return a1;
}

uint64_t sub_1BDF34BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = AssociatedTypeWitness;
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v10 + 64) > v7)
      v7 = *(_QWORD *)(v10 + 64);
    v11 = *(unsigned __int8 *)(a1 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    else
      v13 = v6;
    if (v11 == 1)
      v14 = AssociatedTypeWitness;
    else
      v14 = v5;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v7);
    if (v15 >= 2)
    {
      if (v7 <= 3)
        v16 = v7;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v10;
    else
      v18 = v6;
    if (v15 == 1)
      v19 = v9;
    else
      v19 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v7) = v17;
  }
  return a1;
}

uint64_t sub_1BDF34D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = AssociatedTypeWitness;
  }
  else
  {
    v9 = v6;
    v13 = v5;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v7) = v12;
  return a1;
}

uint64_t sub_1BDF34E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = AssociatedTypeWitness;
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v10 + 64) > v7)
      v7 = *(_QWORD *)(v10 + 64);
    v11 = *(unsigned __int8 *)(a1 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    else
      v13 = v6;
    if (v11 == 1)
      v14 = AssociatedTypeWitness;
    else
      v14 = v5;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v7);
    if (v15 >= 2)
    {
      if (v7 <= 3)
        v16 = v7;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v10;
    else
      v18 = v6;
    if (v15 == 1)
      v19 = v9;
    else
      v19 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v7) = v17;
  }
  return a1;
}

uint64_t sub_1BDF34FE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_22:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_22;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 255);
}

void sub_1BDF35138(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v7)
    v8 = v7;
  v9 = v8 + 1;
  if (a3 < 0xFF)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v11 = a2 - 255;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF35304(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= v3)
    v4 = v3;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF353C4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t AssociatedTypeWitness;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (a2 > 1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v7)
      v7 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v9 = a2 - 2;
    if (v7 < 4)
    {
      v10 = v9 >> (8 * v7);
      v11 = v9 & ~(-1 << (8 * v7));
      a1[v7] = v10 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 <= *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64))
      v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
    a1[v6] = a2;
  }
}

uint64_t sub_1BDF354E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = MEMORY[0x1C3B7DF54](&unk_1BE1C81E8);
  v5 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(a1 + 24);
  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, v5, &v8);
  return CRValue<>.init(from:)(a1, v4, v6, a2);
}

uint64_t sub_1BDF35574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = MEMORY[0x1C3B7DF54](&unk_1BE1C81E8);
  v5 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(a2 + 24);
  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, v5, &v9);
  return CRValue<>.encode(to:)(a1, a2, v7, v4, v6);
}

uint64_t sub_1BDF355F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = MEMORY[0x1C3B7DF54](&unk_1BE1C81E8, a1);
  v3 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(a1 + 24);
  v4 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, v3, &v7);
  return CRValue<>.minEncodingVersion.getter(a1, v5, v2, v4);
}

uint64_t dispatch thunk of EncryptionDelegate.encrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of EncryptionDelegate.decrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EncryptionDelegate.encrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void sub_1BDF356A0()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF356F8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF35750()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF357A8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF35800()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF35858()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDF358B0()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BDF35908()
{
  return 0x6D6F435243796E41;
}

uint64_t sub_1BDF3592C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRComparableBox()
{
  return objc_opt_self();
}

uint64_t sub_1BDF3595C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDF359CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  char v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[24];

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = &v20[-v9];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v20[-v11];
  v13 = swift_dynamicCastClass();
  if (v13)
  {
    v14 = v13 + *(_QWORD *)(*(_QWORD *)v13 + 208);
    swift_beginAccess();
    v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
    v15(v10, v14, v3);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v12, v10, v3);
    v16 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
    swift_beginAccess();
    v15(v7, v16, v3);
    v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 + 192) + 8))(v12, v3);
    v18 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
    v18(v7, v3);
    v18(v12, v3);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1BDF35B40(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 184) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 208), a1);
  return v2;
}

uint64_t sub_1BDF35B94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 184);
  a1[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

uint64_t sub_1BDF35C04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  v11 = (uint64_t)v1 + *(_QWORD *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 24))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v12 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 184) - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 208), v10);
  return v12;
}

uint64_t sub_1BDF35D28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 40))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BDF35DEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 200) + 8) + 48))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_1BDF35EB0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 56))(a1, *(_QWORD *)(v3 + 184));
  return swift_endAccess();
}

uint64_t sub_1BDF35F1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 184) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 208), v6);
  return v8;
}

uint64_t sub_1BDF35FE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 184);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 8) + 16))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BDF360C8()
{
  return sub_1BDF36100(&qword_1ED6EF500, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1D0], (uint64_t *)&unk_1EF52D8C8);
}

uint64_t sub_1BDF360E4()
{
  return sub_1BDF36100(&qword_1EF52E2C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED610], qword_1EF52E2D0);
}

uint64_t sub_1BDF36100(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 184);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3 + *(_QWORD *)(v11 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  if (swift_dynamicCast())
  {
    v13 = *((_QWORD *)&v19 + 1);
    v14 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
    v15 = a2(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  else
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    sub_1BDD86E30((uint64_t)&v18, a3);
    return 0x6D6F435243796E41;
  }
  return v15;
}

uint64_t sub_1BDF36240()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 184) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
}

uint64_t sub_1BDF3625C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 184) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRComparableBoxHelperBuiltIn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRComparableBoxHelperBuiltIn);
}

ValueMetadata *type metadata accessor for AnyCRBuiltInComparable()
{
  return &type metadata for AnyCRBuiltInComparable;
}

uint64_t sub_1BDF362B4(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 88))(*a1) & 1;
}

uint64_t sub_1BDF362E4()
{
  uint64_t v0;
  _QWORD v2[4];
  _QWORD v3[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 80))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1BE1B26CC();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_1BDF36394()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_1BDF363BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t sub_1BDF363E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_1BDF36414()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_1BDF3643C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 120))();
  if ((result & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      *(_QWORD *)v1 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 136))();
      swift_release();
    }
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 128))(a1);
  }
  return result;
}

uint64_t sub_1BDF364B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BDF36504(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDF364DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_1BDF36504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v2);
  v33 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Proto_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v30 = (uint64_t)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v29 = (uint64_t)&v28 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v28 - v16;
  v18 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v17, &qword_1ED6F3770);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v5) = v19(v17, 1, v4);
  sub_1BDD86E30((uint64_t)v17, &qword_1ED6F3770);
  if ((_DWORD)v5 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v20 = 0xD000000000000017;
    *(_QWORD *)(v20 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v20 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDD86DEC(v18, (uint64_t)v15, &qword_1ED6F3770);
    result = v19(v15, 1, v4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v7, type metadata accessor for Proto_Value);
      v22 = *(_QWORD *)&v7[*(int *)(v4 + 20)]
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v23 = v22;
      v24 = v33;
      sub_1BDD86DEC(v23, v33, &qword_1ED6F26F0);
      swift_retain();
      sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Value);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v24, 1, v32) != 1)
      {
        v26 = v29;
        sub_1BDDA2E8C(v24, v29, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        sub_1BDF36CD0(v26, v30);
        v27 = (char *)&loc_1BDF368A0 + dword_1BDF36C94[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      sub_1BDD86E30(v24, &qword_1ED6F26F0);
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v25 = 0xD00000000000001DLL;
      *(_QWORD *)(v25 + 8) = 0x80000001BE1CF110;
      *(_BYTE *)(v25 + 16) = 0;
      swift_willThrow();
      swift_release();
      swift_setDeallocating();
      return swift_release();
    }
  }
  return result;
}

void sub_1BDF36C40()
{
  sub_1BE1B3200();
  __break(1u);
  JUMPOUT(0x1BDF36C94);
}

uint64_t sub_1BDF36CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL TaggedValue_1.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 2;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF36DA4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.taggedEnum.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for TaggedValue_1.TaggedEnum(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t type metadata accessor for TaggedValue_1.TaggedEnum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaggedValue_1.TaggedEnum);
}

uint64_t TaggedValue_1.taggedEnum.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for TaggedValue_1.TaggedEnum(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*TaggedValue_1.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t TaggedValue_1.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  type metadata accessor for TaggedValue_1.TaggedEnum(0, a2, a3, v6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;

  v6 = *a2;
  *a5 = a1;
  a5[1] = v6;
  type metadata accessor for TaggedValue_1.TaggedEnum(0, a3, a4, a4);
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.tagged1.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v6, *(_QWORD *)(a1 + 24), a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, v4, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v11 = *(_QWORD *)(v6 - 8);
    v12 = 1;
  }
  else
  {
    v11 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v10, v6);
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3, v12, 1, v6);
}

uint64_t TaggedValue_1.unknown.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v4 = v3;
  v6 = type metadata accessor for TaggedValue_1.TaggedEnum(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, v4, v6);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v11 = *((_QWORD *)v9 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v11 = 0;
  }
  *a3 = v11;
  return result;
}

uint64_t TaggedValue_1.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  v12 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v5, v10, v11);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, v3, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t))(**((_QWORD **)v14 + 1) + 120))(a1);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 40))(a1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t TaggedValue_1.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v25;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - v12;
  v15 = *(_QWORD *)(v14 + 24);
  v17 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v7, v15, v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)&v25 - v18, v4, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = *(_QWORD *)v19;
    v22 = (*(uint64_t (**)(uint64_t))(**((_QWORD **)v19 + 1) + 104))(a1);
    swift_release();
    *(_QWORD *)a3 = v21;
    *((_QWORD *)a3 + 1) = v22;
  }
  else
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v23(v13, v19, v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 + 8) + 24))(a1, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v23(a3, v11, v7);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v69 = a1;
  v63 = a2;
  v71 = a4;
  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v62 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1BE1B2EE8();
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v64 = (char *)&v56 - v9;
  v65 = AssociatedTypeWitness;
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v56 - v11;
  v66 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v56 - v14;
  v70 = v4;
  v17 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v5, v4, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (uint64_t *)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v56 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v26 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v28 = (char *)&v56 - v27;
  v29 = (uint64_t *)((char *)&v56 + *(int *)(v26 + 48) - v27);
  v67 = v18;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v30((char *)&v56 - v27, v68, v17);
  v30((char *)v29, v69, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30((char *)v21, (uint64_t)v28, v17);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v31 = *v21;
      v32 = *v29;
      swift_release();
      swift_release();
      v34 = type metadata accessor for TaggedValue_1.ObservableDifference(0, v5, v70, v33);
      v35 = v34;
      if (v31 == v32)
      {
        v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
        v37 = v71;
        v38 = 1;
LABEL_14:
        v36((uint64_t)v37, v38, 1, v35);
        goto LABEL_15;
      }
      v51 = v71;
LABEL_13:
      swift_storeEnumTagMultiPayload();
      v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
      v37 = v51;
      v38 = 0;
      goto LABEL_14;
    }
    swift_release();
  }
  else
  {
    v30(v23, (uint64_t)v28, v17);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v42 = v66;
      v43 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
      v43(v15, v23, v5);
      v44 = v60;
      v43(v60, (char *)v29, v5);
      v45 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v44, v63, v5);
      v46 = *(void (**)(char *, uint64_t))(v42 + 8);
      v46(v44, v5);
      v46(v15, v5);
      v47 = v61;
      v48 = v65;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v45, 1, v65) == 1)
      {
        (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v59);
        v50 = type metadata accessor for TaggedValue_1.ObservableDifference(0, v5, v70, v49);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v71, 1, 1, v50);
LABEL_15:
        v25 = v67;
        return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, v17);
      }
      v52 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      v53 = v57;
      v52(v57, v45, v48);
      v51 = v71;
      v52(v71, v53, v48);
      v35 = type metadata accessor for TaggedValue_1.ObservableDifference(0, v5, v70, v54);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v5);
  }
  v40 = type metadata accessor for TaggedValue_1.ObservableDifference(0, v5, v70, v39);
  v41 = v71;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v41, 0, 1, v40);
  v17 = TupleTypeMetadata2;
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, v17);
}

uint64_t type metadata accessor for TaggedValue_1.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaggedValue_1.ObservableDifference);
}

BOOL TaggedValue_2.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 3;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF3786C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_2.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF378A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_2.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_2.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37904(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_2.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_2.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37994()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_2.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37A10()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_2.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = *a2;
  *a3 = a1;
  a3[1] = v4;
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37A68()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_2.tagged1.getter()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 96);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 96) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 96) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 96);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_2.tagged2.getter()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 96) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 96) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 96));
}

void TaggedValue_2.unknown.getter()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37CC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_2.visitReferences(_:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF37DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  _BYTE v17[96];

  MEMORY[0x1E0C80A78](a1);
  v12 = &v17[-v11];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v17[-v11], v6, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_QWORD *)(v9 - 128);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v2, v12, v3);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 8) + 40))(*(_QWORD *)(v9 - 120), v3);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v2, v3);
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v12 + 1) + 120))(*(_QWORD *)(v9 - 120));
      return swift_release();
    }
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(v5, v12, v4);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 + 8) + 40))(*(_QWORD *)(v9 - 120), v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v5, v4);
  }
}

void TaggedValue_2.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];

  v13[4] = a1;
  v13[5] = a3;
  v3 = *(_QWORD *)(a2 + 24);
  v13[2] = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v13[1] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v9);
  v12 = *(_QWORD *)(v10 + 32);
  v11 = *(_QWORD *)(v10 + 40);
  v13[6] = v8;
  v13[7] = v3;
  v13[8] = v12;
  v13[9] = v11;
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

void sub_1BDF37FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[96];

  MEMORY[0x1E0C80A78](a1);
  v12 = &v20[-v11];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 16))(&v20[-v11], *(_QWORD *)(v9 - 136), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_QWORD *)(v9 - 144);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v7, v12, v2);
      v16 = *(_QWORD *)(v9 - 152);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 + 8) + 24))(*(_QWORD *)(v9 - 128), v2);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v7, v2);
      TaggedValue_2.init(_:)(v16, v2, *(_QWORD *)(v9 - 120));
    }
    v17 = *(_QWORD *)v12;
    v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 1) + 104))(*(_QWORD *)(v9 - 128));
    swift_release();
    v19 = *(_QWORD **)(v9 - 120);
    *v19 = v17;
    v19[1] = v18;
    *(_QWORD *)(v9 - 112) = v3;
    *(_QWORD *)(v9 - 104) = v2;
    *(_QWORD *)(v9 - 96) = v5;
    *(_QWORD *)(v9 - 88) = v4;
    type metadata accessor for TaggedValue_2.TaggedEnum();
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v1, v12, v3);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 + 8) + 24))(*(_QWORD *)(v9 - 128), v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v3);
  TaggedValue_2.init(_:)(v8, v3, *(_QWORD *)(v9 - 120));
}

void sub_1BDF38140()
{
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BDF38150);
}

void TaggedValue_2.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v47 = a1;
  v38 = a2;
  v42 = a4;
  v5 = a3[5];
  v6 = a3[3];
  v35 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = sub_1BE1B2EE8();
  v27 = *(_QWORD *)(v28 - 8);
  v8 = MEMORY[0x1E0C80A78](v28);
  v36 = (char *)v24 - v9;
  v37 = AssociatedTypeWitness;
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v26 = (char *)v24 - v11;
  v41 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v33 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v32 = (char *)v24 - v14;
  v15 = a3[4];
  v16 = a3[2];
  v29 = *(_QWORD *)(v15 + 8);
  v17 = swift_getAssociatedTypeWitness();
  v25 = sub_1BE1B2EE8();
  v24[2] = *(_QWORD *)(v25 - 8);
  v18 = MEMORY[0x1E0C80A78](v25);
  v31 = (char *)v24 - v19;
  v30 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v24[1] = (char *)v24 - v21;
  v40 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v39 = (char *)v24 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v45 = v6;
  v46 = v16;
  v48 = v16;
  v49 = v6;
  v43 = v15;
  v44 = v5;
  v50 = v15;
  v51 = v5;
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

void sub_1BDF383CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *v18;
  void (*v19)(uint64_t *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (uint64_t *)&v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (uint64_t *)&v63[-v10];
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)&v63[-v12];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v3 - 184) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v15 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v17 = &v63[-v16];
  v18 = (uint64_t *)&v63[*(int *)(v15 + 48) - v16];
  *(_QWORD *)(v3 - 192) = v5;
  v19 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 16);
  v19((uint64_t *)&v63[-v16], *(_QWORD *)(v3 - 136), a1);
  v19(v18, *(_QWORD *)(v3 - 128), a1);
  *(_QWORD *)(v3 - 128) = v17;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v19(v11, *(_QWORD *)(v3 - 128), a1);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v21 = *(_QWORD *)(v3 - 200);
        v22 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v21 + 32);
        v23 = *(_QWORD *)(v3 - 272);
        v24 = *(_QWORD *)(v3 - 152);
        v22(v23, v11, v24);
        v25 = *(_QWORD *)(v3 - 264);
        v22(v25, v18, v24);
        v26 = *(_QWORD *)(v3 - 240);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 248) + 32))(v25, *(_QWORD *)(v3 - 224), v24);
        v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v27(v25, v24);
        v27(v23, v24);
        v28 = *(_QWORD *)(v3 - 256);
        v29 = *(_QWORD *)(v3 - 232);
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v29);
        v31 = *(_QWORD *)(v3 - 144);
        if (v30 == 1)
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 312) + 8))(v26, *(_QWORD *)(v3 - 304));
          *(_QWORD *)(v3 - 120) = v31;
          *(_QWORD *)(v3 - 112) = v24;
          v32 = *(_QWORD *)(v3 - 160);
          *(_QWORD *)(v3 - 104) = *(_QWORD *)(v3 - 168);
          *(_QWORD *)(v3 - 96) = v32;
          type metadata accessor for TaggedValue_2.ObservableDifference();
        }
        v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
        v57 = *(_QWORD *)(v3 - 320);
        v56(v57, v26, v29);
        v56(*(_QWORD *)(v3 - 176), v57, v29);
        *(_QWORD *)(v3 - 120) = v31;
        *(_QWORD *)(v3 - 112) = v24;
        v58 = *(_QWORD *)(v3 - 160);
        *(_QWORD *)(v3 - 104) = *(_QWORD *)(v3 - 168);
        *(_QWORD *)(v3 - 96) = v58;
        type metadata accessor for TaggedValue_2.ObservableDifference();
      }
      v39 = *(_QWORD *)(v3 - 152);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(v11, v39);
      v38 = *(_QWORD *)(v3 - 160);
    }
    else
    {
      v19(v8, *(_QWORD *)(v3 - 128), a1);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v40 = *v8;
        v41 = *v18;
        swift_release();
        swift_release();
        v42 = *(_QWORD *)(v3 - 144);
        if (v40 == v41)
        {
          *(_QWORD *)(v3 - 120) = v42;
          v43 = *(_QWORD *)(v3 - 168);
          *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 152);
          *(_QWORD *)(v3 - 104) = v43;
          *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 160);
          type metadata accessor for TaggedValue_2.ObservableDifference();
        }
        *(_QWORD *)(v3 - 120) = v42;
        v59 = *(_QWORD *)(v3 - 168);
        *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 152);
        *(_QWORD *)(v3 - 104) = v59;
        *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 160);
        type metadata accessor for TaggedValue_2.ObservableDifference();
      }
      swift_release();
      v38 = *(_QWORD *)(v3 - 160);
      v39 = *(_QWORD *)(v3 - 152);
    }
    v37 = *(_QWORD *)(v3 - 168);
    v36 = *(_QWORD *)(v3 - 144);
  }
  else
  {
    v34 = *(_QWORD *)(v3 - 216);
    v33 = *(_QWORD *)(v3 - 208);
    *(_QWORD *)(v3 - 136) = v1;
    v19(v13, *(_QWORD *)(v3 - 128), a1);
    if (!swift_getEnumCaseMultiPayload())
    {
      v44 = v33;
      v45 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v33 + 32);
      v46 = v2;
      v47 = *(_QWORD *)(v3 - 144);
      v45(v2, v13, v47);
      v45(v34, v18, v47);
      v48 = *(_QWORD *)(v3 - 280);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 296) + 32))(v34, *(_QWORD *)(v3 - 224), v47);
      v49 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v49(v34, v47);
      v49(v46, v47);
      v50 = *(_QWORD *)(v3 - 288);
      v51 = *(_QWORD *)(v3 - 136);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v51);
      v53 = *(_QWORD *)(v3 - 176);
      v54 = *(_QWORD *)(v3 - 152);
      if (v52 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 336) + 8))(v48, *(_QWORD *)(v3 - 328));
        *(_QWORD *)(v3 - 120) = v47;
        *(_QWORD *)(v3 - 112) = v54;
        v55 = *(_QWORD *)(v3 - 160);
        *(_QWORD *)(v3 - 104) = *(_QWORD *)(v3 - 168);
        *(_QWORD *)(v3 - 96) = v55;
        type metadata accessor for TaggedValue_2.ObservableDifference();
      }
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32);
      v61 = *(_QWORD *)(v3 - 344);
      v60(v61, v48, v51);
      v60(v53, v61, v51);
      *(_QWORD *)(v3 - 120) = v47;
      *(_QWORD *)(v3 - 112) = v54;
      v62 = *(_QWORD *)(v3 - 160);
      *(_QWORD *)(v3 - 104) = *(_QWORD *)(v3 - 168);
      *(_QWORD *)(v3 - 96) = v62;
      type metadata accessor for TaggedValue_2.ObservableDifference();
    }
    v35 = v13;
    v36 = *(_QWORD *)(v3 - 144);
    (*(void (**)(uint64_t *, uint64_t))(v33 + 8))(v35, v36);
    v37 = *(_QWORD *)(v3 - 168);
    v38 = *(_QWORD *)(v3 - 160);
    v39 = *(_QWORD *)(v3 - 152);
  }
  *(_QWORD *)(v3 - 120) = v36;
  *(_QWORD *)(v3 - 112) = v39;
  *(_QWORD *)(v3 - 104) = v37;
  *(_QWORD *)(v3 - 96) = v38;
  type metadata accessor for TaggedValue_2.ObservableDifference();
}

void sub_1BDF3897C()
{
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BDF389A8);
}

void type metadata accessor for TaggedValue_2.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_3.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 4;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF38A84()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_3.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_3.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_3.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38B2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_3.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_3.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38BCC()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_3.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38C5C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_3.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38CF0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_3.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = *a2;
  *a3 = a1;
  a3[1] = v4;
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38D50()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_3.tagged1.getter()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 112);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 112) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 112) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 112);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_3.tagged2.getter()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 112) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 112) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 112));
}

void TaggedValue_3.tagged3.getter()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF38FC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 112) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 112) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 112));
}

void TaggedValue_3.unknown.getter()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF390C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 3)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_3.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[12];

  v14[4] = a1;
  v2 = *(_QWORD *)(a2 + 32);
  v14[3] = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v14[2] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v14[1] = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v3);
  v9 = *(_QWORD *)(v8 + 16);
  v14[0] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = v10[5];
  v12 = v10[6];
  v13 = v10[7];
  v14[6] = v9;
  v14[7] = v6;
  v14[8] = v2;
  v14[9] = v11;
  v14[10] = v12;
  v14[11] = v13;
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF39238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 136), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF392A0 + 4 * byte_1BE1BE260[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF392A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 8) + 40))(*(_QWORD *)(v4 - 144), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
}

void TaggedValue_3.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[16];

  v19[8] = a3;
  v19[6] = a1;
  v3 = *(_QWORD *)(a2 + 32);
  v19[3] = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v19[2] = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = *(_QWORD *)(v7 + 24);
  v19[1] = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v19[0] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v14);
  v17 = v15[5];
  v16 = v15[6];
  v18 = v15[7];
  v19[10] = v13;
  v19[11] = v8;
  v19[12] = v3;
  v19[13] = v17;
  v19[4] = v17;
  v19[5] = v16;
  v19[14] = v16;
  v19[15] = v18;
  v19[7] = v18;
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF394E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 136), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF39548 + 4 * byte_1BE1BE264[EnumCaseMultiPayload]))();
}

void sub_1BDF39548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v3, v2);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 - 176) + 8) + 24))(*(_QWORD *)(v5 - 160), v2);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  TaggedValue_3.init(_:)(v4, v2, *(_QWORD *)(v5 - 144));
}

void TaggedValue_3.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v72 = a1;
  v64 = a2;
  v68 = a4;
  v5 = a3[7];
  v6 = a3[4];
  v59 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = sub_1BE1B2EE8();
  v41 = *(_QWORD *)(v42 - 8);
  v8 = MEMORY[0x1E0C80A78](v42);
  v58 = (char *)v35 - v9;
  v60 = AssociatedTypeWitness;
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v40 = (char *)v35 - v11;
  v63 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v55 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v54 = (char *)v35 - v14;
  v15 = a3[6];
  v16 = a3[3];
  v52 = *(_QWORD *)(v15 + 8);
  v17 = swift_getAssociatedTypeWitness();
  v39 = sub_1BE1B2EE8();
  v38 = *(_QWORD *)(v39 - 8);
  v18 = MEMORY[0x1E0C80A78](v39);
  v53 = (char *)v35 - v19;
  v56 = v17;
  v51 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v37 = (char *)v35 - v21;
  v62 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v50 = (char *)v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v49 = (char *)v35 - v24;
  v25 = a3[5];
  v26 = a3[2];
  v46 = *(_QWORD *)(v25 + 8);
  v27 = swift_getAssociatedTypeWitness();
  v36 = sub_1BE1B2EE8();
  v35[1] = *(_QWORD *)(v36 - 8);
  v28 = MEMORY[0x1E0C80A78](v36);
  v47 = (char *)v35 - v29;
  v48 = v27;
  v45 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v35[0] = (char *)v35 - v31;
  v61 = *(_QWORD *)(v26 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v44 = (char *)v35 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v43 = (char *)v35 - v34;
  v69 = v26;
  v70 = v16;
  v73 = v26;
  v74 = v16;
  v71 = v6;
  v75 = v6;
  v76 = v25;
  v65 = v25;
  v66 = v15;
  v77 = v15;
  v78 = v5;
  v67 = v5;
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF39AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v13 = MEMORY[0x1E0C80A78](v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = (char *)&a9 - v17;
  v19 = (char *)&a9 + *(int *)(v16 + 48) - v17;
  *(_QWORD *)(v9 - 216) = v11;
  v20 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v20((char *)&a9 - v17, *(_QWORD *)(v9 - 152), a1);
  v20(v19, *(_QWORD *)(v9 - 144), a1);
  *(_QWORD *)(v9 - 144) = v18;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF39BC8 + 4 * byte_1BE1BE268[EnumCaseMultiPayload]))();
}

void sub_1BDF39BC8()
{
  void (*v0)(uint64_t, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v0(v2, *(_QWORD *)(v4 - 144), v1);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = *(_QWORD *)(v4 - 176);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 248) + 8))(v2, v5);
    v6 = *(_QWORD *)(v4 - 192);
    v8 = *(_QWORD *)(v4 - 168);
    v7 = *(_QWORD *)(v4 - 160);
    v10 = *(_QWORD *)(v4 - 208);
    v9 = *(_QWORD *)(v4 - 200);
    *(_QWORD *)(v4 - 136) = v5;
    *(_QWORD *)(v4 - 128) = v8;
    *(_QWORD *)(v4 - 120) = v7;
    *(_QWORD *)(v4 - 112) = v10;
    *(_QWORD *)(v4 - 104) = v9;
    *(_QWORD *)(v4 - 96) = v6;
    type metadata accessor for TaggedValue_3.ObservableDifference();
  }
  v11 = *(_QWORD *)(v4 - 248);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v13 = *(_QWORD *)(v4 - 392);
  v14 = *(_QWORD *)(v4 - 176);
  v12(v13, v2, v14);
  v15 = *(_QWORD *)(v4 - 384);
  v12(v15, v3, v14);
  v16 = *(_QWORD *)(v4 - 360);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 368) + 32))(v15, *(_QWORD *)(v4 - 224), v14);
  v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v17(v15, v14);
  v17(v13, v14);
  v18 = *(_QWORD *)(v4 - 376);
  v19 = *(_QWORD *)(v4 - 352);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v19);
  v21 = v16;
  v22 = *(_QWORD *)(v4 - 192);
  v23 = *(_QWORD *)(v4 - 184);
  v24 = *(_QWORD *)(v4 - 208);
  v25 = *(_QWORD *)(v4 - 200);
  if (v20 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 456) + 8))(v21, *(_QWORD *)(v4 - 448));
    v26 = *(_QWORD *)(v4 - 168);
    *(_QWORD *)(v4 - 136) = v14;
    *(_QWORD *)(v4 - 128) = v26;
    *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 160);
    *(_QWORD *)(v4 - 112) = v24;
    *(_QWORD *)(v4 - 104) = v25;
    *(_QWORD *)(v4 - 96) = v22;
    type metadata accessor for TaggedValue_3.ObservableDifference();
  }
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v28 = *(_QWORD *)(v4 - 464);
  v27(v28, v21, v19);
  v27(v23, v28, v19);
  v29 = *(_QWORD *)(v4 - 168);
  *(_QWORD *)(v4 - 136) = v14;
  *(_QWORD *)(v4 - 128) = v29;
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 160);
  *(_QWORD *)(v4 - 112) = v24;
  *(_QWORD *)(v4 - 104) = v25;
  *(_QWORD *)(v4 - 96) = v22;
  type metadata accessor for TaggedValue_3.ObservableDifference();
}

void sub_1BDF3A264()
{
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BDF3A284);
}

void type metadata accessor for TaggedValue_3.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_4.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 5;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF3A374()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_4.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_4.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_4.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_4.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_4.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A4CC()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_4.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A570()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_4.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A618()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_4.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A6C0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_4.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A72C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_4.tagged1.getter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A78C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 128);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 128);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_4.tagged2.getter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A8A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 128));
}

void TaggedValue_4.tagged3.getter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3A9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 128));
}

void TaggedValue_4.tagged4.getter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3AACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 128) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 128));
}

void TaggedValue_4.unknown.getter()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3ABD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 4)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_4.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[18];

  v20[9] = a1;
  v20[6] = *(_QWORD *)(*(_QWORD *)(a2 + 40) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v20[5] = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 32);
  v20[4] = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v2);
  v20[3] = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v20[2] = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v6);
  v20[1] = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v20[0] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = v14[6];
  v16 = v14[7];
  v18 = v14[8];
  v17 = v14[9];
  v20[10] = v13;
  v20[11] = v9;
  v20[12] = v5;
  v20[13] = v19;
  v20[7] = v19;
  v20[14] = v15;
  v20[15] = v16;
  v20[16] = v18;
  v20[17] = v17;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3AD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 160), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF3ADEC + 4 * byte_1BE1BE26C[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF3ADEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v0, v2);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 8) + 40))(*(_QWORD *)(v4 - 152), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
}

void TaggedValue_4.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[24];

  v25[8] = a1;
  v25[13] = a3;
  v25[4] = *(_QWORD *)(*(_QWORD *)(a2 + 40) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v25[5] = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v25[3] = (char *)v25 - v6;
  v25[1] = *(_QWORD *)(*(_QWORD *)(v7 + 32) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v25[2] = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = *(_QWORD *)(v11 + 24);
  v25[0] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = *(_QWORD *)(v15 + 16);
  v17 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v17);
  v20 = v18[6];
  v19 = v18[7];
  v21 = v18[8];
  v22 = v18[9];
  v25[15] = v16;
  v25[16] = v12;
  v25[11] = v21;
  v25[12] = v23;
  v25[17] = v23;
  v25[18] = v24;
  v25[14] = v24;
  v25[9] = v20;
  v25[10] = v19;
  v25[19] = v20;
  v25[20] = v19;
  v25[21] = v21;
  v25[22] = v22;
  v25[7] = v22;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3B0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 224), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF3B148 + 4 * byte_1BE1BE271[EnumCaseMultiPayload]))();
}

void sub_1BDF3B148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, v1, v3);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 - 200) + 8) + 24))(*(_QWORD *)(v5 - 208), v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
  TaggedValue_4.init(_:)(v4, v3, *(_QWORD *)(v5 - 168));
}

void TaggedValue_4.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v84 = a2;
  v94 = a1;
  v90 = a4;
  v5 = a3[9];
  v6 = a3[5];
  v78 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = sub_1BE1B2EE8();
  v54 = *(_QWORD *)(v55 - 8);
  v8 = MEMORY[0x1E0C80A78](v55);
  v77 = (char *)v45 - v9;
  v79 = AssociatedTypeWitness;
  v76 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v53 = (char *)v45 - v11;
  v83 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v74 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v73 = (char *)v45 - v14;
  v15 = a3[8];
  v16 = a3[4];
  v71 = *(_QWORD *)(v15 + 8);
  v17 = swift_getAssociatedTypeWitness();
  v52 = sub_1BE1B2EE8();
  v51 = *(_QWORD *)(v52 - 8);
  v18 = MEMORY[0x1E0C80A78](v52);
  v72 = (char *)v45 - v19;
  v75 = v17;
  v70 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v50 = (char *)v45 - v21;
  v82 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v68 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v67 = (char *)v45 - v24;
  v25 = a3[7];
  v26 = a3[3];
  v65 = *(_QWORD *)(v25 + 8);
  v27 = swift_getAssociatedTypeWitness();
  v49 = sub_1BE1B2EE8();
  v48 = *(_QWORD *)(v49 - 8);
  v28 = MEMORY[0x1E0C80A78](v49);
  v66 = (char *)v45 - v29;
  v69 = v27;
  v64 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v47 = (char *)v45 - v31;
  v81 = *(_QWORD *)(v26 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v63 = (char *)v45 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v62 = (char *)v45 - v34;
  v35 = a3[6];
  v36 = a3[2];
  v59 = *(_QWORD *)(v35 + 8);
  v37 = swift_getAssociatedTypeWitness();
  v46 = sub_1BE1B2EE8();
  v45[2] = *(_QWORD *)(v46 - 8);
  v38 = MEMORY[0x1E0C80A78](v46);
  v60 = (char *)v45 - v39;
  v61 = v37;
  v58 = *(_QWORD *)(v37 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v45[1] = (char *)v45 - v41;
  v80 = *(_QWORD *)(v36 - 8);
  v42 = MEMORY[0x1E0C80A78](v40);
  v57 = (char *)v45 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42);
  v56 = (char *)v45 - v44;
  v85 = v36;
  v86 = v35;
  v95 = v36;
  v96 = v26;
  v91 = v26;
  v92 = v16;
  v97 = v16;
  v98 = v6;
  v93 = v6;
  v99 = v35;
  v100 = v25;
  v87 = v25;
  v88 = v15;
  v101 = v15;
  v102 = v5;
  v89 = v5;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF3B88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v13 = MEMORY[0x1E0C80A78](v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v15 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 248) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&a9 - v18;
  v20 = (char *)&a9 + *(int *)(v17 + 48) - v18;
  *(_QWORD *)(v9 - 256) = v11;
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v21((char *)&a9 - v18, *(_QWORD *)(v9 - 168), a1);
  v21(v20, *(_QWORD *)(v9 - 160), a1);
  *(_QWORD *)(v9 - 160) = v19;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF3B9D0 + 4 * byte_1BE1BE276[EnumCaseMultiPayload]))();
}

void sub_1BDF3B9D0()
{
  void (*v0)(uint64_t, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v0(v3, *(_QWORD *)(v4 - 160), v1);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = v3;
    v6 = *(_QWORD *)(v4 - 240);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 296) + 8))(v5, v6);
    v7 = *(_QWORD *)(v4 - 208);
    v9 = *(_QWORD *)(v4 - 184);
    v8 = *(_QWORD *)(v4 - 176);
    v11 = *(_QWORD *)(v4 - 224);
    v10 = *(_QWORD *)(v4 - 216);
    v12 = *(_QWORD *)(v4 - 192);
    v13 = *(_QWORD *)(v4 - 232);
    *(_QWORD *)(v4 - 152) = v6;
    *(_QWORD *)(v4 - 144) = v12;
    *(_QWORD *)(v4 - 136) = v9;
    *(_QWORD *)(v4 - 128) = v8;
    *(_QWORD *)(v4 - 120) = v13;
    *(_QWORD *)(v4 - 112) = v11;
    *(_QWORD *)(v4 - 104) = v10;
    *(_QWORD *)(v4 - 96) = v7;
    type metadata accessor for TaggedValue_4.ObservableDifference();
  }
  v14 = *(_QWORD *)(v4 - 296);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v16 = *(_QWORD *)(v4 - 488);
  v17 = v3;
  v18 = *(_QWORD *)(v4 - 240);
  v15(v16, v17, v18);
  v19 = *(_QWORD *)(v4 - 480);
  v15(v19, v2, v18);
  v20 = *(_QWORD *)(v4 - 456);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 464) + 32))(v19, *(_QWORD *)(v4 - 264), v18);
  v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v21(v19, v18);
  v21(v16, v18);
  v22 = *(_QWORD *)(v4 - 472);
  v23 = *(_QWORD *)(v4 - 448);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v23);
  v25 = *(_QWORD *)(v4 - 176);
  if (v24 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 576) + 8))(v20, *(_QWORD *)(v4 - 568));
    v26 = *(_QWORD *)(v4 - 192);
    *(_QWORD *)(v4 - 152) = v18;
    *(_QWORD *)(v4 - 144) = v26;
    *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 184);
    v27 = *(_QWORD *)(v4 - 232);
    *(_QWORD *)(v4 - 128) = v25;
    *(_QWORD *)(v4 - 120) = v27;
    v28 = *(_QWORD *)(v4 - 216);
    *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 224);
    *(_QWORD *)(v4 - 104) = v28;
    *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 208);
    type metadata accessor for TaggedValue_4.ObservableDifference();
  }
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
  v30 = *(_QWORD *)(v4 - 584);
  v29(v30, v20, v23);
  v29(*(_QWORD *)(v4 - 200), v30, v23);
  v31 = *(_QWORD *)(v4 - 192);
  *(_QWORD *)(v4 - 152) = v18;
  *(_QWORD *)(v4 - 144) = v31;
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 184);
  *(_QWORD *)(v4 - 128) = v25;
  v32 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 112) = v32;
  v33 = *(_QWORD *)(v4 - 208);
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 216);
  *(_QWORD *)(v4 - 96) = v33;
  type metadata accessor for TaggedValue_4.ObservableDifference();
}

void sub_1BDF3C2E4()
{
  JUMPOUT(0x1BDF3C2F4);
}

void type metadata accessor for TaggedValue_4.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_5.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 6;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF3C3F0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_5.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_5.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C4A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_5.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_5.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C56C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C624()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C6E0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C79C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C858()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C8CC()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_5.tagged1.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3C930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 144);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 144);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_5.tagged2.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3CA54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 144));
}

void TaggedValue_5.tagged3.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3CB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 144));
}

void TaggedValue_5.tagged4.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3CC84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 144));
}

void TaggedValue_5.tagged5.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3CD94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 144) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 144));
}

void TaggedValue_5.unknown.getter()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3CEA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 5)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_5.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[26];

  v25[13] = a1;
  v25[11] = *(_QWORD *)(*(_QWORD *)(a2 + 48) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v25[10] = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[8] = *(_QWORD *)(*(_QWORD *)(v4 + 40) - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v25[7] = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 32);
  v25[6] = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v5);
  v25[5] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 24);
  v25[4] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v25[3] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 16);
  v25[2] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = v17[7];
  v19 = v17[8];
  v21 = v17[9];
  v20 = v17[10];
  v22 = v17[11];
  v25[15] = v16;
  v25[16] = v12;
  v25[17] = v8;
  v25[18] = v23;
  v25[9] = v23;
  v25[12] = v24;
  v25[19] = v24;
  v25[20] = v18;
  v25[1] = v18;
  v25[21] = v19;
  v25[22] = v21;
  v25[23] = v20;
  v25[24] = v22;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3D0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 176), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF3D110 + 4 * byte_1BE1BE27B[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF3D110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 - 272);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v2, v0);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 - 280) + 8) + 40))(*(_QWORD *)(v3 - 184), v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
}

void TaggedValue_5.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[32];

  v31[12] = a1;
  v31[18] = a3;
  v31[7] = *(_QWORD *)(*(_QWORD *)(a2 + 48) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v31[8] = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v31[6] = (char *)v31 - v6;
  v31[4] = *(_QWORD *)(*(_QWORD *)(v7 + 40) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v31[5] = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v31[3] = (char *)v31 - v11;
  v31[1] = *(_QWORD *)(*(_QWORD *)(v12 + 32) - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v31[2] = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = MEMORY[0x1E0C80A78](*(_QWORD *)(v15 + 24));
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = MEMORY[0x1E0C80A78](v17);
  v21 = MEMORY[0x1E0C80A78](v20);
  v24 = v22[7];
  v23 = v22[8];
  v25 = v22[9];
  v26 = v22[10];
  v27 = v22[11];
  v31[21] = v19;
  v31[22] = v21;
  v31[15] = v21;
  v31[16] = v28;
  v31[23] = v28;
  v31[24] = v29;
  v31[17] = v29;
  v31[19] = v30;
  v31[25] = v30;
  v31[26] = v24;
  v31[13] = v24;
  v31[14] = v23;
  v31[27] = v23;
  v31[28] = v25;
  v31[10] = v26;
  v31[11] = v25;
  v31[29] = v26;
  v31[30] = v27;
  v31[9] = v27;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3D4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 176), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF3D514 + 4 * byte_1BE1BE281[EnumCaseMultiPayload]))();
}

void sub_1BDF3D514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v4);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 - 232) + 8) + 24))(*(_QWORD *)(v5 - 240), v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v4);
  TaggedValue_5.init(_:)(v1, v4, *(_QWORD *)(v5 - 192));
}

void TaggedValue_5.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v104 = a2;
  v109 = a4;
  v5 = a3[11];
  v115 = a1;
  v116 = v5;
  v6 = a3[6];
  v97 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v68 = sub_1BE1B2EE8();
  v67 = *(_QWORD *)(v68 - 8);
  v8 = MEMORY[0x1E0C80A78](v68);
  v96 = (char *)v55 - v9;
  v98 = AssociatedTypeWitness;
  v95 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v66 = (char *)v55 - v11;
  v103 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v93 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v92 = (char *)v55 - v14;
  v15 = a3[10];
  v16 = a3[5];
  v90 = *(_QWORD *)(v15 + 8);
  v17 = swift_getAssociatedTypeWitness();
  v65 = sub_1BE1B2EE8();
  v64 = *(_QWORD *)(v65 - 8);
  v18 = MEMORY[0x1E0C80A78](v65);
  v91 = (char *)v55 - v19;
  v94 = v17;
  v89 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v63 = (char *)v55 - v21;
  v102 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v87 = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v86 = (char *)v55 - v24;
  v25 = a3[9];
  v26 = a3[4];
  v84 = *(_QWORD *)(v25 + 8);
  v27 = swift_getAssociatedTypeWitness();
  v62 = sub_1BE1B2EE8();
  v61 = *(_QWORD *)(v62 - 8);
  v28 = MEMORY[0x1E0C80A78](v62);
  v85 = (char *)v55 - v29;
  v88 = v27;
  v83 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v60 = (char *)v55 - v31;
  v101 = *(_QWORD *)(v26 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v81 = (char *)v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v80 = (char *)v55 - v34;
  v35 = a3[8];
  v36 = a3[3];
  v78 = *(_QWORD *)(v35 + 8);
  v37 = swift_getAssociatedTypeWitness();
  v59 = sub_1BE1B2EE8();
  v58 = *(_QWORD *)(v59 - 8);
  v38 = MEMORY[0x1E0C80A78](v59);
  v79 = (char *)v55 - v39;
  v82 = v37;
  v77 = *(_QWORD *)(v37 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v57 = (char *)v55 - v41;
  v100 = *(_QWORD *)(v36 - 8);
  v42 = MEMORY[0x1E0C80A78](v40);
  v76 = (char *)v55 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42);
  v75 = (char *)v55 - v44;
  v45 = a3[7];
  v46 = a3[2];
  v72 = *(_QWORD *)(v45 + 8);
  v47 = swift_getAssociatedTypeWitness();
  v56 = sub_1BE1B2EE8();
  v55[1] = *(_QWORD *)(v56 - 8);
  v48 = MEMORY[0x1E0C80A78](v56);
  v73 = (char *)v55 - v49;
  v74 = v47;
  v71 = *(_QWORD *)(v47 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v55[0] = (char *)v55 - v51;
  v99 = *(_QWORD *)(v46 - 8);
  v52 = MEMORY[0x1E0C80A78](v50);
  v70 = (char *)v55 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52);
  v69 = (char *)v55 - v54;
  v113 = v46;
  v114 = v16;
  v117 = v46;
  v118 = v36;
  v110 = v36;
  v111 = v26;
  v119 = v26;
  v120 = v16;
  v112 = v6;
  v121 = v6;
  v122 = v45;
  v105 = v45;
  v106 = v35;
  v123 = v35;
  v124 = v25;
  v107 = v25;
  v108 = v15;
  v125 = v15;
  v126 = v116;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF3DE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v13 = MEMORY[0x1E0C80A78](v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v15 = MEMORY[0x1E0C80A78](v14);
  v16 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 280) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v18 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v20 = (char *)&a9 - v19;
  *(_QWORD *)(v9 - 288) = v18;
  v21 = (char *)&a9 + *(int *)(v18 + 48) - v19;
  *(_QWORD *)(v9 - 296) = v11;
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v22((char *)&a9 - v19, *(_QWORD *)(v9 - 192), a1);
  v22(v21, *(_QWORD *)(v9 - 184), a1);
  *(_QWORD *)(v9 - 184) = v20;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF3E008 + 4 * word_1BE1BE288[EnumCaseMultiPayload]))();
}

void sub_1BDF3E008()
{
  void (*v0)(uint64_t, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v0(v3, *(_QWORD *)(v4 - 184), v2);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = *(_QWORD *)(v4 - 208);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 344) + 8))(v3, v5);
    v6 = *(_QWORD *)(v4 - 248);
    v7 = *(_QWORD *)(v4 - 176);
    v9 = *(_QWORD *)(v4 - 224);
    v8 = *(_QWORD *)(v4 - 216);
    v10 = *(_QWORD *)(v4 - 200);
    v11 = *(_QWORD *)(v4 - 256);
    v12 = *(_QWORD *)(v4 - 264);
    v13 = *(_QWORD *)(v4 - 232);
    v14 = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 168) = v5;
    *(_QWORD *)(v4 - 160) = v13;
    *(_QWORD *)(v4 - 152) = v9;
    *(_QWORD *)(v4 - 144) = v10;
    *(_QWORD *)(v4 - 136) = v8;
    *(_QWORD *)(v4 - 128) = v14;
    *(_QWORD *)(v4 - 120) = v12;
    *(_QWORD *)(v4 - 112) = v11;
    *(_QWORD *)(v4 - 104) = v6;
    *(_QWORD *)(v4 - 96) = v7;
    type metadata accessor for TaggedValue_5.ObservableDifference();
  }
  v15 = *(_QWORD *)(v4 - 344);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v17 = *(_QWORD *)(v4 - 584);
  v18 = *(_QWORD *)(v4 - 208);
  v16(v17, v3, v18);
  v19 = *(_QWORD *)(v4 - 576);
  v16(v19, v1, v18);
  v20 = *(_QWORD *)(v4 - 552);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 560) + 32))(v19, *(_QWORD *)(v4 - 304), v18);
  v21 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v21(v19, v18);
  v21(v17, v18);
  v22 = *(_QWORD *)(v4 - 568);
  v23 = *(_QWORD *)(v4 - 544);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v23);
  v25 = *(_QWORD *)(v4 - 216);
  if (v24 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 696) + 8))(v20, *(_QWORD *)(v4 - 688));
    v26 = *(_QWORD *)(v4 - 232);
    *(_QWORD *)(v4 - 168) = v18;
    *(_QWORD *)(v4 - 160) = v26;
    v27 = *(_QWORD *)(v4 - 200);
    *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 224);
    *(_QWORD *)(v4 - 144) = v27;
    *(_QWORD *)(v4 - 136) = v25;
    v28 = *(_QWORD *)(v4 - 264);
    *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 120) = v28;
    v29 = *(_QWORD *)(v4 - 248);
    *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 256);
    *(_QWORD *)(v4 - 104) = v29;
    *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 176);
    type metadata accessor for TaggedValue_5.ObservableDifference();
  }
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
  v31 = *(_QWORD *)(v4 - 704);
  v30(v31, v20, v23);
  v30(*(_QWORD *)(v4 - 240), v31, v23);
  v32 = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 168) = v18;
  *(_QWORD *)(v4 - 160) = v32;
  v33 = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 144) = v33;
  v34 = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 136) = v25;
  *(_QWORD *)(v4 - 128) = v34;
  v35 = *(_QWORD *)(v4 - 256);
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 264);
  *(_QWORD *)(v4 - 112) = v35;
  v36 = *(_QWORD *)(v4 - 176);
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v4 - 96) = v36;
  type metadata accessor for TaggedValue_5.ObservableDifference();
}

void sub_1BDF3EC3C()
{
  JUMPOUT(0x1BDF3EC4CLL);
}

void type metadata accessor for TaggedValue_5.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_6.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF3ED50()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3ED9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_6.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_6.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3EE08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_6.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_6.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3EEDC()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3EFA4()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F070()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F13C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F208()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F2D4()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F348()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_6.tagged1.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 160);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 160);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_6.tagged2.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F4DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 160));
}

void TaggedValue_6.tagged3.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F5EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 160));
}

void TaggedValue_6.tagged4.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 160));
}

void TaggedValue_6.tagged5.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 160));
}

void TaggedValue_6.tagged6.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3F950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 160) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 160));
}

void TaggedValue_6.unknown.getter()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3FA5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 6)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_6.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[32];

  v31[18] = a1;
  v31[15] = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v31[14] = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[12] = *(_QWORD *)(*(_QWORD *)(v4 + 48) - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v31[11] = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[9] = *(_QWORD *)(*(_QWORD *)(v7 + 40) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v31[8] = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 32);
  v31[7] = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v31[6] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 + 24);
  v31[5] = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v31[4] = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 + 16);
  v31[3] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v16);
  v31[2] = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v21[8];
  v23 = v21[9];
  v24 = v21[10];
  v25 = v21[11];
  v26 = v21[12];
  v27 = v21[13];
  v31[19] = v19;
  v31[20] = v15;
  v31[21] = v11;
  v31[22] = v28;
  v31[10] = v28;
  v31[13] = v29;
  v31[23] = v29;
  v31[24] = v30;
  v31[16] = v30;
  v31[1] = v22;
  v31[25] = v22;
  v31[26] = v23;
  v31[27] = v24;
  v31[28] = v25;
  v31[29] = v26;
  v31[30] = v27;
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF3FCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 200), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF3FD28 + 4 * byte_1BE1BE294[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF3FD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 312);
  v4 = *(_QWORD *)(v2 - 320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v0);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 - 328) + 8) + 40))(*(_QWORD *)(v2 - 192), v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v0);
}

void TaggedValue_6.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[37];

  v38[17] = a1;
  v38[23] = a3;
  v38[9] = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v38[10] = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v38[8] = (char *)v38 - v6;
  v38[6] = *(_QWORD *)(*(_QWORD *)(v7 + 48) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v38[7] = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v38[5] = (char *)v38 - v11;
  v38[3] = *(_QWORD *)(*(_QWORD *)(v12 + 40) - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v38[4] = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v38[2] = (char *)v38 - v15;
  v17 = *(_QWORD *)(v16 + 32);
  v38[0] = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v38[1] = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v21 = MEMORY[0x1E0C80A78](v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = MEMORY[0x1E0C80A78](v22);
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = v27[8];
  v29 = v27[9];
  v30 = v27[10];
  v31 = v27[11];
  v32 = v27[12];
  v33 = v27[13];
  v38[25] = v24;
  v38[26] = v34;
  v38[19] = v34;
  v38[20] = v26;
  v38[27] = v26;
  v38[28] = v35;
  v38[21] = v35;
  v38[22] = v36;
  v38[29] = v36;
  v38[30] = v37;
  v38[24] = v37;
  v38[18] = v28;
  v38[31] = v28;
  v38[32] = v29;
  v38[16] = v29;
  v38[15] = v30;
  v38[33] = v30;
  v38[34] = v31;
  v38[14] = v31;
  v38[13] = v32;
  v38[35] = v32;
  v38[36] = v33;
  v38[12] = v33;
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF401AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 296), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF40218 + 4 * word_1BE1BE29C[EnumCaseMultiPayload]))();
}

void sub_1BDF40218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v4);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 - 240) + 8) + 24))(*(_QWORD *)(v5 - 248), v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  TaggedValue_6.init(_:)(v0, v4, *(_QWORD *)(v5 - 200));
}

void TaggedValue_6.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v123 = a2;
  v134 = a1;
  v128 = a4;
  v136 = a3[13];
  v5 = a3[7];
  v115 = *(_QWORD *)(v136 + 8);
  v6 = v5;
  v137 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v80 = sub_1BE1B2EE8();
  v79 = *(_QWORD *)(v80 - 8);
  v8 = MEMORY[0x1E0C80A78](v80);
  v114 = (char *)v64 - v9;
  v116 = AssociatedTypeWitness;
  v113 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v78 = (char *)v64 - v11;
  v122 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v111 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v110 = (char *)v64 - v14;
  v135 = a3[12];
  v15 = a3[6];
  v108 = *(_QWORD *)(v135 + 8);
  v16 = swift_getAssociatedTypeWitness();
  v77 = sub_1BE1B2EE8();
  v76 = *(_QWORD *)(v77 - 8);
  v17 = MEMORY[0x1E0C80A78](v77);
  v109 = (char *)v64 - v18;
  v112 = v16;
  v107 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v75 = (char *)v64 - v20;
  v121 = *(_QWORD *)(v15 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v105 = (char *)v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v104 = (char *)v64 - v23;
  v24 = a3[11];
  v25 = a3[5];
  v102 = *(_QWORD *)(v24 + 8);
  v26 = swift_getAssociatedTypeWitness();
  v74 = sub_1BE1B2EE8();
  v73 = *(_QWORD *)(v74 - 8);
  v27 = MEMORY[0x1E0C80A78](v74);
  v103 = (char *)v64 - v28;
  v106 = v26;
  v101 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v72 = (char *)v64 - v30;
  v120 = *(_QWORD *)(v25 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v99 = (char *)v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v98 = (char *)v64 - v33;
  v34 = a3[10];
  v35 = a3[4];
  v96 = *(_QWORD *)(v34 + 8);
  v36 = swift_getAssociatedTypeWitness();
  v71 = sub_1BE1B2EE8();
  v70 = *(_QWORD *)(v71 - 8);
  v37 = MEMORY[0x1E0C80A78](v71);
  v97 = (char *)v64 - v38;
  v100 = v36;
  v95 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v37);
  v69 = (char *)v64 - v40;
  v119 = *(_QWORD *)(v35 - 8);
  v41 = MEMORY[0x1E0C80A78](v39);
  v93 = (char *)v64 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v92 = (char *)v64 - v43;
  v44 = a3[9];
  v45 = a3[3];
  v90 = *(_QWORD *)(v44 + 8);
  v46 = swift_getAssociatedTypeWitness();
  v68 = sub_1BE1B2EE8();
  v67 = *(_QWORD *)(v68 - 8);
  v47 = MEMORY[0x1E0C80A78](v68);
  v91 = (char *)v64 - v48;
  v94 = v46;
  v89 = *(_QWORD *)(v46 - 8);
  v49 = MEMORY[0x1E0C80A78](v47);
  v66 = (char *)v64 - v50;
  v118 = *(_QWORD *)(v45 - 8);
  v51 = MEMORY[0x1E0C80A78](v49);
  v88 = (char *)v64 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v87 = (char *)v64 - v53;
  v54 = a3[8];
  v55 = a3[2];
  v84 = *(_QWORD *)(v54 + 8);
  v56 = swift_getAssociatedTypeWitness();
  v65 = sub_1BE1B2EE8();
  v64[1] = *(_QWORD *)(v65 - 8);
  v57 = MEMORY[0x1E0C80A78](v65);
  v85 = (char *)v64 - v58;
  v86 = v56;
  v83 = *(_QWORD *)(v56 - 8);
  v59 = MEMORY[0x1E0C80A78](v57);
  v64[0] = (char *)v64 - v60;
  v117 = *(_QWORD *)(v55 - 8);
  v61 = MEMORY[0x1E0C80A78](v59);
  v82 = (char *)v64 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61);
  v81 = (char *)v64 - v63;
  v133 = v55;
  v138 = v55;
  v139 = v45;
  v130 = v45;
  v129 = v35;
  v140 = v35;
  v141 = v25;
  v131 = v25;
  v132 = v15;
  v142 = v15;
  v143 = v137;
  v124 = v54;
  v144 = v54;
  v145 = v44;
  v125 = v44;
  v126 = v34;
  v146 = v34;
  v147 = v24;
  v127 = v24;
  v148 = v135;
  v149 = v136;
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF40E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 384) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 392) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 312) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v21 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v23 = (char *)&a9 - v22;
  *(_QWORD *)(v9 - 320) = v21;
  v24 = (char *)&a9 + *(int *)(v21 + 48) - v22;
  *(_QWORD *)(v9 - 328) = v11;
  v25 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v25((char *)&a9 - v22, *(_QWORD *)(v9 - 224), a1);
  v25(v24, *(_QWORD *)(v9 - 216), a1);
  *(_QWORD *)(v9 - 216) = v23;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF40FE4 + 4 * word_1BE1BE2AA[EnumCaseMultiPayload]))();
}

void sub_1BDF40FE4()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1(v3, *(_QWORD *)(v4 - 216), v0);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = *(_QWORD *)(v4 - 232);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 400) + 8))(v3, v5);
    v7 = *(_QWORD *)(v4 - 208);
    v6 = *(_QWORD *)(v4 - 200);
    v8 = *(_QWORD *)(v4 - 192);
    v9 = *(_QWORD *)(v4 - 280);
    v11 = *(_QWORD *)(v4 - 248);
    v10 = *(_QWORD *)(v4 - 240);
    v12 = *(_QWORD *)(v4 - 288);
    v13 = *(_QWORD *)(v4 - 296);
    v14 = *(_QWORD *)(v4 - 264);
    v15 = *(_QWORD *)(v4 - 304);
    v16 = *(_QWORD *)(v4 - 256);
    *(_QWORD *)(v4 - 184) = v5;
    *(_QWORD *)(v4 - 176) = v16;
    *(_QWORD *)(v4 - 168) = v14;
    *(_QWORD *)(v4 - 160) = v11;
    *(_QWORD *)(v4 - 152) = v10;
    *(_QWORD *)(v4 - 144) = v8;
    *(_QWORD *)(v4 - 136) = v15;
    *(_QWORD *)(v4 - 128) = v13;
    *(_QWORD *)(v4 - 120) = v12;
    *(_QWORD *)(v4 - 112) = v9;
    *(_QWORD *)(v4 - 104) = v7;
    *(_QWORD *)(v4 - 96) = v6;
    type metadata accessor for TaggedValue_6.ObservableDifference();
  }
  v17 = *(_QWORD *)(v4 - 400);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v19 = *(_QWORD *)(v4 - 688);
  v20 = *(_QWORD *)(v4 - 232);
  v18(v19, v3, v20);
  v21 = *(_QWORD *)(v4 - 680);
  v18(v21, v2, v20);
  v22 = *(_QWORD *)(v4 - 656);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 664) + 32))(v21, *(_QWORD *)(v4 - 336), v20);
  v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v23(v21, v20);
  v23(v19, v20);
  v24 = *(_QWORD *)(v4 - 672);
  v25 = *(_QWORD *)(v4 - 648);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v25) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 824) + 8))(v22, *(_QWORD *)(v4 - 816));
    v26 = *(_QWORD *)(v4 - 256);
    *(_QWORD *)(v4 - 184) = v20;
    *(_QWORD *)(v4 - 176) = v26;
    v27 = *(_QWORD *)(v4 - 248);
    *(_QWORD *)(v4 - 168) = *(_QWORD *)(v4 - 264);
    *(_QWORD *)(v4 - 160) = v27;
    v28 = *(_QWORD *)(v4 - 192);
    *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 240);
    *(_QWORD *)(v4 - 144) = v28;
    v29 = *(_QWORD *)(v4 - 296);
    *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 304);
    *(_QWORD *)(v4 - 128) = v29;
    v30 = *(_QWORD *)(v4 - 280);
    *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 288);
    *(_QWORD *)(v4 - 112) = v30;
    v31 = *(_QWORD *)(v4 - 200);
    *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 208);
    *(_QWORD *)(v4 - 96) = v31;
    type metadata accessor for TaggedValue_6.ObservableDifference();
  }
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
  v33 = *(_QWORD *)(v4 - 832);
  v32(v33, v22, v25);
  v32(*(_QWORD *)(v4 - 272), v33, v25);
  v34 = *(_QWORD *)(v4 - 256);
  *(_QWORD *)(v4 - 184) = v20;
  *(_QWORD *)(v4 - 176) = v34;
  v35 = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v4 - 168) = *(_QWORD *)(v4 - 264);
  *(_QWORD *)(v4 - 160) = v35;
  v36 = *(_QWORD *)(v4 - 192);
  *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 240);
  *(_QWORD *)(v4 - 144) = v36;
  v37 = *(_QWORD *)(v4 - 296);
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 304);
  *(_QWORD *)(v4 - 128) = v37;
  v38 = *(_QWORD *)(v4 - 280);
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 288);
  *(_QWORD *)(v4 - 112) = v38;
  v39 = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 208);
  *(_QWORD *)(v4 - 96) = v39;
  type metadata accessor for TaggedValue_6.ObservableDifference();
}

void sub_1BDF41F2C()
{
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BDF41F58);
}

void type metadata accessor for TaggedValue_6.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_7.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF42014()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_7.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_7.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF420DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_7.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF421C0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42298()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42374()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42450()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF4252C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42608()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF426E4()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42760()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_7.tagged1.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF427CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 176);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 176);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_7.tagged2.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 176));
}

void TaggedValue_7.tagged3.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42A14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 176));
}

void TaggedValue_7.tagged4.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42B48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 176));
}

void TaggedValue_7.tagged5.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 176));
}

void TaggedValue_7.tagged6.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 176));
}

void TaggedValue_7.tagged7.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 176) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 176));
}

void TaggedValue_7.unknown.getter()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF42FBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 7)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_7.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[37];

  v36[22] = a1;
  v36[19] = *(_QWORD *)(*(_QWORD *)(a2 + 64) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v36[18] = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[16] = *(_QWORD *)(*(_QWORD *)(v4 + 56) - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v36[15] = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[13] = *(_QWORD *)(*(_QWORD *)(v7 + 48) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v36[12] = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[10] = *(_QWORD *)(*(_QWORD *)(v10 + 40) - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v36[9] = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 32);
  v36[8] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v36[7] = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 + 24);
  v36[6] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v36[5] = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 16);
  v36[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v19);
  v36[3] = (char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v24[9];
  v26 = v24[10];
  v28 = v24[11];
  v27 = v24[12];
  v29 = v24[13];
  v30 = v24[14];
  v31 = v24[15];
  v36[23] = v22;
  v36[24] = v18;
  v36[25] = v14;
  v36[26] = v32;
  v36[11] = v32;
  v36[14] = v33;
  v36[27] = v33;
  v36[28] = v34;
  v36[17] = v34;
  v36[20] = v35;
  v36[29] = v35;
  v36[30] = v25;
  v36[2] = v25;
  v36[1] = v26;
  v36[31] = v26;
  v36[32] = v28;
  v36[33] = v27;
  v36[34] = v29;
  v36[35] = v30;
  v36[36] = v31;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF43280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 216), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF432E8 + 4 * byte_1BE1BE2B8[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF432E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 352);
  v4 = *(_QWORD *)(v2 - 360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v0, v1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 - 368) + 8) + 40))(*(_QWORD *)(v2 - 208), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v1);
}

void sub_1BDF434D4()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 8) + 120))(*(_QWORD *)(v1 - 208));
  swift_release();
  JUMPOUT(0x1BDF434B4);
}

void TaggedValue_7.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[45];

  v43[22] = a1;
  v43[28] = a3;
  v43[12] = *(_QWORD *)(*(_QWORD *)(a2 + 64) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v43[13] = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v43[11] = (char *)v43 - v6;
  v43[9] = *(_QWORD *)(*(_QWORD *)(v7 + 56) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v43[10] = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v43[8] = (char *)v43 - v11;
  v43[6] = *(_QWORD *)(*(_QWORD *)(v12 + 48) - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v43[7] = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v43[5] = (char *)v43 - v15;
  v17 = *(_QWORD *)(v16 + 40);
  v43[3] = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v43[4] = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v43[1] = *(_QWORD *)(*(_QWORD *)(v21 + 32) - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v43[2] = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v25 = MEMORY[0x1E0C80A78](v24);
  v26 = MEMORY[0x1E0C80A78](v25);
  v27 = MEMORY[0x1E0C80A78](v26);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = v29[9];
  v31 = v29[10];
  v32 = v29[11];
  v33 = v29[12];
  v34 = v29[13];
  v35 = v29[14];
  v36 = v29[15];
  v43[23] = v37;
  v43[31] = v37;
  v43[32] = v38;
  v43[24] = v38;
  v43[25] = v39;
  v43[33] = v39;
  v43[34] = v28;
  v43[26] = v28;
  v43[27] = v40;
  v43[35] = v40;
  v43[36] = v41;
  v43[29] = v41;
  v43[30] = v42;
  v43[37] = v42;
  v43[38] = v30;
  v43[21] = v30;
  v43[20] = v31;
  v43[39] = v31;
  v43[40] = v32;
  v43[19] = v32;
  v43[18] = v33;
  v43[41] = v33;
  v43[42] = v34;
  v43[17] = v34;
  v43[16] = v35;
  v43[43] = v35;
  v43[44] = v36;
  v43[15] = v36;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF43828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 336), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF43894 + 4 * word_1BE1BE2C0[EnumCaseMultiPayload]))();
}

void sub_1BDF43894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v5);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 - 280) + 8) + 24))(*(_QWORD *)(v4 - 272), v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  TaggedValue_7.init(_:)(v0, v5, *(_QWORD *)(v4 - 224));
}

void TaggedValue_7.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  v143 = a2;
  v153 = a1;
  v154 = a4;
  v157 = a3[15];
  v5 = a3[8];
  v134 = *(_QWORD *)(v157 + 8);
  v6 = v5;
  v159 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v93 = sub_1BE1B2EE8();
  v92 = *(_QWORD *)(v93 - 8);
  v8 = MEMORY[0x1E0C80A78](v93);
  v133 = (char *)v74 - v9;
  v135 = AssociatedTypeWitness;
  v132 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v91 = (char *)v74 - v11;
  v142 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v130 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v129 = (char *)v74 - v14;
  v156 = a3[14];
  v15 = a3[7];
  v127 = *(_QWORD *)(v156 + 8);
  v16 = v15;
  v158 = v15;
  v17 = swift_getAssociatedTypeWitness();
  v90 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v90 - 8);
  v18 = MEMORY[0x1E0C80A78](v90);
  v128 = (char *)v74 - v19;
  v131 = v17;
  v126 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v88 = (char *)v74 - v21;
  v141 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v124 = (char *)v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v123 = (char *)v74 - v24;
  v155 = a3[13];
  v25 = a3[6];
  v121 = *(_QWORD *)(v155 + 8);
  v26 = swift_getAssociatedTypeWitness();
  v87 = sub_1BE1B2EE8();
  v86 = *(_QWORD *)(v87 - 8);
  v27 = MEMORY[0x1E0C80A78](v87);
  v122 = (char *)v74 - v28;
  v125 = v26;
  v120 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v85 = (char *)v74 - v30;
  v140 = *(_QWORD *)(v25 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v118 = (char *)v74 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v117 = (char *)v74 - v33;
  v34 = a3[12];
  v35 = a3[5];
  v115 = *(_QWORD *)(v34 + 8);
  v36 = swift_getAssociatedTypeWitness();
  v84 = sub_1BE1B2EE8();
  v83 = *(_QWORD *)(v84 - 8);
  v37 = MEMORY[0x1E0C80A78](v84);
  v116 = (char *)v74 - v38;
  v119 = v36;
  v114 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v37);
  v82 = (char *)v74 - v40;
  v139 = *(_QWORD *)(v35 - 8);
  v41 = MEMORY[0x1E0C80A78](v39);
  v112 = (char *)v74 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v111 = (char *)v74 - v43;
  v44 = a3[11];
  v45 = a3[4];
  v109 = *(_QWORD *)(v44 + 8);
  v46 = swift_getAssociatedTypeWitness();
  v81 = sub_1BE1B2EE8();
  v80 = *(_QWORD *)(v81 - 8);
  v47 = MEMORY[0x1E0C80A78](v81);
  v110 = (char *)v74 - v48;
  v113 = v46;
  v108 = *(_QWORD *)(v46 - 8);
  v49 = MEMORY[0x1E0C80A78](v47);
  v79 = (char *)v74 - v50;
  v138 = *(_QWORD *)(v45 - 8);
  v51 = MEMORY[0x1E0C80A78](v49);
  v106 = (char *)v74 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v105 = (char *)v74 - v53;
  v54 = a3[10];
  v55 = a3[3];
  v103 = *(_QWORD *)(v54 + 8);
  v56 = swift_getAssociatedTypeWitness();
  v78 = sub_1BE1B2EE8();
  v77 = *(_QWORD *)(v78 - 8);
  v57 = MEMORY[0x1E0C80A78](v78);
  v104 = (char *)v74 - v58;
  v107 = v56;
  v102 = *(_QWORD *)(v56 - 8);
  v59 = MEMORY[0x1E0C80A78](v57);
  v76 = (char *)v74 - v60;
  v137 = *(_QWORD *)(v55 - 8);
  v61 = MEMORY[0x1E0C80A78](v59);
  v101 = (char *)v74 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61);
  v100 = (char *)v74 - v63;
  v64 = a3[9];
  v65 = a3[2];
  v97 = *(_QWORD *)(v64 + 8);
  v66 = swift_getAssociatedTypeWitness();
  v75 = sub_1BE1B2EE8();
  v74[2] = *(_QWORD *)(v75 - 8);
  v67 = MEMORY[0x1E0C80A78](v75);
  v98 = (char *)v74 - v68;
  v99 = v66;
  v96 = *(_QWORD *)(v66 - 8);
  v69 = MEMORY[0x1E0C80A78](v67);
  v74[1] = (char *)v74 - v70;
  v136 = *(_QWORD *)(v65 - 8);
  v71 = MEMORY[0x1E0C80A78](v69);
  v95 = (char *)v74 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71);
  v94 = (char *)v74 - v73;
  v144 = v65;
  v160 = v65;
  v161 = v55;
  v152 = v55;
  v149 = v45;
  v162 = v45;
  v163 = v35;
  v150 = v35;
  v151 = v25;
  v164 = v25;
  v165 = v158;
  v166 = v159;
  v167 = v64;
  v145 = v64;
  v146 = v54;
  v168 = v54;
  v169 = v44;
  v147 = v44;
  v148 = v34;
  v170 = v34;
  v171 = v155;
  v172 = v156;
  v173 = v157;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF447C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 376) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 384) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v9 - 392) = (char *)&a9 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v19 = MEMORY[0x1E0C80A78](v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 352) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v23 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v25 = (char *)&a9 - v24;
  *(_QWORD *)(v9 - 344) = v23;
  v26 = (char *)&a9 + *(int *)(v23 + 48) - v24;
  *(_QWORD *)(v9 - 360) = v11;
  v27 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v27((char *)&a9 - v24, *(_QWORD *)(v9 - 264), a1);
  v27(v26, *(_QWORD *)(v9 - 256), a1);
  *(_QWORD *)(v9 - 256) = v25;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF44990 + 4 * word_1BE1BE2D0[EnumCaseMultiPayload]))();
}

void sub_1BDF44990()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2(v0, *(_QWORD *)(v4 - 256), v3);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = *(_QWORD *)(v4 - 336);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 448) + 8))(v0, v5);
    v6 = *(_QWORD *)(v4 - 240);
    v8 = *(_QWORD *)(v4 - 232);
    v7 = *(_QWORD *)(v4 - 224);
    v10 = *(_QWORD *)(v4 - 216);
    v9 = *(_QWORD *)(v4 - 208);
    v11 = *(_QWORD *)(v4 - 304);
    v12 = *(_QWORD *)(v4 - 280);
    v13 = *(_QWORD *)(v4 - 312);
    v14 = *(_QWORD *)(v4 - 288);
    v15 = *(_QWORD *)(v4 - 320);
    v16 = *(_QWORD *)(v4 - 296);
    v17 = *(_QWORD *)(v4 - 328);
    v18 = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 200) = v5;
    *(_QWORD *)(v4 - 192) = v18;
    *(_QWORD *)(v4 - 184) = v16;
    *(_QWORD *)(v4 - 176) = v14;
    *(_QWORD *)(v4 - 168) = v12;
    *(_QWORD *)(v4 - 160) = v10;
    *(_QWORD *)(v4 - 152) = v9;
    *(_QWORD *)(v4 - 144) = v17;
    *(_QWORD *)(v4 - 136) = v15;
    *(_QWORD *)(v4 - 128) = v13;
    *(_QWORD *)(v4 - 120) = v11;
    *(_QWORD *)(v4 - 112) = v6;
    *(_QWORD *)(v4 - 104) = v8;
    *(_QWORD *)(v4 - 96) = v7;
    type metadata accessor for TaggedValue_7.ObservableDifference();
  }
  v19 = *(_QWORD *)(v4 - 448);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
  v21 = *(_QWORD *)(v4 - 784);
  v22 = *(_QWORD *)(v4 - 336);
  v20(v21, v0, v22);
  v23 = *(_QWORD *)(v4 - 776);
  v20(v23, v1, v22);
  v24 = *(_QWORD *)(v4 - 752);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 760) + 32))(v23, *(_QWORD *)(v4 - 368), v22);
  v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v25(v23, v22);
  v25(v21, v22);
  v26 = *(_QWORD *)(v4 - 768);
  v27 = *(_QWORD *)(v4 - 744);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v27);
  v29 = *(_QWORD *)(v4 - 248);
  v30 = *(_QWORD *)(v4 - 216);
  v31 = *(_QWORD *)(v4 - 280);
  v32 = *(_QWORD *)(v4 - 288);
  if (v28 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 944) + 8))(v24, *(_QWORD *)(v4 - 936));
    v33 = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 200) = v22;
    *(_QWORD *)(v4 - 192) = v33;
    *(_QWORD *)(v4 - 184) = *(_QWORD *)(v4 - 296);
    *(_QWORD *)(v4 - 176) = v32;
    *(_QWORD *)(v4 - 168) = v31;
    *(_QWORD *)(v4 - 160) = v30;
    v34 = *(_QWORD *)(v4 - 328);
    *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 208);
    *(_QWORD *)(v4 - 144) = v34;
    v35 = *(_QWORD *)(v4 - 312);
    *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 320);
    *(_QWORD *)(v4 - 128) = v35;
    v36 = *(_QWORD *)(v4 - 240);
    *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 304);
    *(_QWORD *)(v4 - 112) = v36;
    v37 = *(_QWORD *)(v4 - 224);
    *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 232);
    *(_QWORD *)(v4 - 96) = v37;
    type metadata accessor for TaggedValue_7.ObservableDifference();
  }
  v38 = v24;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
  v40 = *(_QWORD *)(v4 - 952);
  v39(v40, v38, v27);
  v39(v29, v40, v27);
  v41 = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 200) = v22;
  *(_QWORD *)(v4 - 192) = v41;
  *(_QWORD *)(v4 - 184) = *(_QWORD *)(v4 - 296);
  *(_QWORD *)(v4 - 176) = v32;
  *(_QWORD *)(v4 - 168) = v31;
  *(_QWORD *)(v4 - 160) = v30;
  v42 = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 208);
  *(_QWORD *)(v4 - 144) = v42;
  v43 = *(_QWORD *)(v4 - 312);
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 320);
  *(_QWORD *)(v4 - 128) = v43;
  v44 = *(_QWORD *)(v4 - 240);
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 304);
  *(_QWORD *)(v4 - 112) = v44;
  v45 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 96) = v45;
  type metadata accessor for TaggedValue_7.ObservableDifference();
}

void sub_1BDF45B7C()
{
  JUMPOUT(0x1BDF45B8CLL);
}

void type metadata accessor for TaggedValue_7.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_8.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 9;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF45C8C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF45CE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_8.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_8.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF45D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_8.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF45E48()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF45F30()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF4601C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF46108()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF461F4()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF462E0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF463CC()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF464B0()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF4652C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_8.tagged1.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF4659C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 192);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 192);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_8.tagged2.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF466D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.tagged3.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF467F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.tagged4.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF4692C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.tagged5.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF46A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.tagged6.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF46B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.tagged7.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF46C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.tagged8.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF46DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 192) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 192));
}

void TaggedValue_8.unknown.getter()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF46EE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 8)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_8.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[43];

  v41[26] = a1;
  v41[23] = *(_QWORD *)(*(_QWORD *)(a2 + 72) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v41[22] = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[20] = *(_QWORD *)(*(_QWORD *)(v4 + 64) - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v41[19] = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[17] = *(_QWORD *)(*(_QWORD *)(v7 + 56) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v41[16] = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[14] = *(_QWORD *)(*(_QWORD *)(v10 + 48) - 8);
  MEMORY[0x1E0C80A78](v8);
  v41[13] = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 40);
  v41[11] = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v41[10] = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[8] = *(_QWORD *)(*(_QWORD *)(v16 + 32) - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v41[7] = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 + 24);
  v41[6] = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v17);
  v41[5] = (char *)v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v23 + 16);
  v41[4] = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v41[3] = (char *)v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v27[10];
  v29 = v27[11];
  v31 = v27[12];
  v30 = v27[13];
  v32 = v27[14];
  v33 = v27[15];
  v35 = v27[16];
  v34 = v27[17];
  v41[27] = v24;
  v41[28] = v20;
  v41[9] = v36;
  v41[29] = v36;
  v41[30] = v25;
  v41[12] = v25;
  v41[15] = v37;
  v41[31] = v37;
  v41[32] = v38;
  v41[18] = v38;
  v41[21] = v39;
  v41[33] = v39;
  v41[34] = v40;
  v41[24] = v40;
  v41[2] = v28;
  v41[35] = v28;
  v41[36] = v29;
  v41[1] = v29;
  v41[37] = v31;
  v41[38] = v30;
  v41[39] = v32;
  v41[40] = v33;
  v41[41] = v35;
  v41[42] = v34;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF47200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 232), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF47268 + 4 * byte_1BE1BE2E0[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF47268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 400);
  v4 = *(_QWORD *)(v2 - 408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v0);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 - 416) + 8) + 40))(*(_QWORD *)(v2 - 224), v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v0);
}

void sub_1BDF4749C()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 8) + 120))(*(_QWORD *)(v1 - 224));
  swift_release();
  JUMPOUT(0x1BDF4747CLL);
}

void TaggedValue_8.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[51];

  v50[24] = a1;
  v50[33] = a3;
  v50[14] = *(_QWORD *)(*(_QWORD *)(a2 + 72) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v50[15] = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v50[12] = (char *)v50 - v6;
  v50[11] = *(_QWORD *)(*(_QWORD *)(v7 + 64) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v50[13] = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v50[9] = (char *)v50 - v11;
  v50[8] = *(_QWORD *)(*(_QWORD *)(v12 + 56) - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v50[10] = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v50[6] = (char *)v50 - v15;
  v17 = *(_QWORD *)(v16 + 48);
  v50[5] = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v50[7] = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v50[3] = (char *)v50 - v21;
  v50[2] = *(_QWORD *)(*(_QWORD *)(v22 + 40) - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v50[4] = (char *)v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v50[0] = *(_QWORD *)(*(_QWORD *)(v26 + 32) - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v50[1] = (char *)v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v30 = MEMORY[0x1E0C80A78](v29);
  v31 = MEMORY[0x1E0C80A78](v30);
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = MEMORY[0x1E0C80A78](v32);
  v35 = v34[10];
  v36 = v34[11];
  v37 = v34[12];
  v38 = v34[13];
  v39 = v34[14];
  v40 = v34[15];
  v42 = v34[16];
  v41 = v34[17];
  v50[26] = v43;
  v50[35] = v43;
  v50[36] = v44;
  v50[27] = v44;
  v50[28] = v45;
  v50[37] = v45;
  v50[38] = v46;
  v50[29] = v46;
  v50[30] = v33;
  v50[31] = v47;
  v50[39] = v33;
  v50[40] = v48;
  v50[32] = v48;
  v50[34] = v49;
  v50[41] = v49;
  v50[42] = v47;
  v50[25] = v35;
  v50[43] = v35;
  v50[44] = v36;
  v50[23] = v36;
  v50[22] = v37;
  v50[45] = v37;
  v50[46] = v38;
  v50[21] = v38;
  v50[20] = v39;
  v50[47] = v39;
  v50[48] = v40;
  v50[19] = v40;
  v50[18] = v42;
  v50[49] = v42;
  v50[50] = v41;
  v50[17] = v41;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF47878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 368), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF478E4 + 4 * word_1BE1BE2EA[EnumCaseMultiPayload]))();
}

void sub_1BDF478E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 - 288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v0, v3, v5);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 - 296) + 8) + 24))(*(_QWORD *)(v4 - 304), v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v5);
  TaggedValue_8.init(_:)(v2, v5, *(_QWORD *)(v4 - 232));
}

void TaggedValue_8.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v163 = a2;
  v174 = a1;
  v173 = a4;
  v178 = a3[17];
  v5 = a3[9];
  v153 = *(_QWORD *)(v178 + 8);
  v6 = v5;
  v180 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v106 = sub_1BE1B2EE8();
  v105 = *(_QWORD *)(v106 - 8);
  v8 = MEMORY[0x1E0C80A78](v106);
  v152 = (char *)v84 - v9;
  v154 = AssociatedTypeWitness;
  v151 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v104 = (char *)v84 - v11;
  v162 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v149 = (char *)v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v148 = (char *)v84 - v14;
  v177 = a3[16];
  v15 = a3[8];
  v146 = *(_QWORD *)(v177 + 8);
  v16 = v15;
  v181 = v15;
  v17 = swift_getAssociatedTypeWitness();
  v103 = sub_1BE1B2EE8();
  v102 = *(_QWORD *)(v103 - 8);
  v18 = MEMORY[0x1E0C80A78](v103);
  v147 = (char *)v84 - v19;
  v150 = v17;
  v145 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v101 = (char *)v84 - v21;
  v161 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v143 = (char *)v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v142 = (char *)v84 - v24;
  v176 = a3[15];
  v25 = a3[7];
  v140 = *(_QWORD *)(v176 + 8);
  v26 = v25;
  v179 = v25;
  v27 = swift_getAssociatedTypeWitness();
  v100 = sub_1BE1B2EE8();
  v99 = *(_QWORD *)(v100 - 8);
  v28 = MEMORY[0x1E0C80A78](v100);
  v141 = (char *)v84 - v29;
  v144 = v27;
  v139 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v98 = (char *)v84 - v31;
  v160 = *(_QWORD *)(v26 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v137 = (char *)v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v136 = (char *)v84 - v34;
  v175 = a3[14];
  v35 = a3[6];
  v134 = *(_QWORD *)(v175 + 8);
  v36 = swift_getAssociatedTypeWitness();
  v97 = sub_1BE1B2EE8();
  v96 = *(_QWORD *)(v97 - 8);
  v37 = MEMORY[0x1E0C80A78](v97);
  v135 = (char *)v84 - v38;
  v138 = v36;
  v133 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v37);
  v95 = (char *)v84 - v40;
  v159 = *(_QWORD *)(v35 - 8);
  v41 = MEMORY[0x1E0C80A78](v39);
  v131 = (char *)v84 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v130 = (char *)v84 - v43;
  v44 = a3[13];
  v45 = a3[5];
  v128 = *(_QWORD *)(v44 + 8);
  v46 = swift_getAssociatedTypeWitness();
  v94 = sub_1BE1B2EE8();
  v93 = *(_QWORD *)(v94 - 8);
  v47 = MEMORY[0x1E0C80A78](v94);
  v129 = (char *)v84 - v48;
  v132 = v46;
  v127 = *(_QWORD *)(v46 - 8);
  v49 = MEMORY[0x1E0C80A78](v47);
  v92 = (char *)v84 - v50;
  v158 = *(_QWORD *)(v45 - 8);
  v51 = MEMORY[0x1E0C80A78](v49);
  v125 = (char *)v84 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v124 = (char *)v84 - v53;
  v54 = a3[12];
  v55 = a3[4];
  v122 = *(_QWORD *)(v54 + 8);
  v56 = swift_getAssociatedTypeWitness();
  v91 = sub_1BE1B2EE8();
  v90 = *(_QWORD *)(v91 - 8);
  v57 = MEMORY[0x1E0C80A78](v91);
  v123 = (char *)v84 - v58;
  v126 = v56;
  v121 = *(_QWORD *)(v56 - 8);
  v59 = MEMORY[0x1E0C80A78](v57);
  v89 = (char *)v84 - v60;
  v157 = *(_QWORD *)(v55 - 8);
  v61 = MEMORY[0x1E0C80A78](v59);
  v119 = (char *)v84 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61);
  v118 = (char *)v84 - v63;
  v64 = a3[11];
  v65 = a3[3];
  v116 = *(_QWORD *)(v64 + 8);
  v66 = swift_getAssociatedTypeWitness();
  v88 = sub_1BE1B2EE8();
  v87 = *(_QWORD *)(v88 - 8);
  v67 = MEMORY[0x1E0C80A78](v88);
  v117 = (char *)v84 - v68;
  v120 = v66;
  v115 = *(_QWORD *)(v66 - 8);
  v69 = MEMORY[0x1E0C80A78](v67);
  v86 = (char *)v84 - v70;
  v156 = *(_QWORD *)(v65 - 8);
  v71 = MEMORY[0x1E0C80A78](v69);
  v114 = (char *)v84 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71);
  v113 = (char *)v84 - v73;
  v74 = a3[10];
  v75 = a3[2];
  v110 = *(_QWORD *)(v74 + 8);
  v76 = swift_getAssociatedTypeWitness();
  v85 = sub_1BE1B2EE8();
  v84[1] = *(_QWORD *)(v85 - 8);
  v77 = MEMORY[0x1E0C80A78](v85);
  v111 = (char *)v84 - v78;
  v112 = v76;
  v109 = *(_QWORD *)(v76 - 8);
  v79 = MEMORY[0x1E0C80A78](v77);
  v84[0] = (char *)v84 - v80;
  v155 = *(_QWORD *)(v75 - 8);
  v81 = MEMORY[0x1E0C80A78](v79);
  v108 = (char *)v84 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v81);
  v107 = (char *)v84 - v83;
  v171 = v75;
  v182 = v75;
  v183 = v65;
  v169 = v65;
  v172 = v55;
  v184 = v55;
  v185 = v45;
  v168 = v45;
  v170 = v35;
  v186 = v35;
  v187 = v179;
  v188 = v181;
  v189 = v180;
  v164 = v74;
  v190 = v74;
  v191 = v64;
  v165 = v64;
  v166 = v54;
  v192 = v54;
  v193 = v44;
  v167 = v44;
  v194 = v175;
  v195 = v176;
  v196 = v177;
  v197 = v178;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF48B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 472) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 480) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v9 - 488) = (char *)&a9 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v9 - 496) = (char *)&a9 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v21 = MEMORY[0x1E0C80A78](v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 376) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v25 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v27 = (char *)&a9 - v26;
  *(_QWORD *)(v9 - 384) = v25;
  v28 = (char *)&a9 + *(int *)(v25 + 48) - v26;
  *(_QWORD *)(v9 - 392) = v11;
  v29 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v29((char *)&a9 - v26, *(_QWORD *)(v9 - 296), a1);
  v29(v28, *(_QWORD *)(v9 - 280), a1);
  *(_QWORD *)(v9 - 280) = v27;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF48D6C + 4 * word_1BE1BE2FC[EnumCaseMultiPayload]))();
}

void sub_1BDF48D6C()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1(v2, *(_QWORD *)(v4 - 280), v3);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = *(_QWORD *)(v4 - 312);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 464) + 8))(v2, v5);
    v7 = *(_QWORD *)(v4 - 256);
    v6 = *(_QWORD *)(v4 - 248);
    v8 = *(_QWORD *)(v4 - 232);
    v9 = *(_QWORD *)(v4 - 224);
    v10 = *(_QWORD *)(v4 - 264);
    v11 = *(_QWORD *)(v4 - 272);
    v12 = *(_QWORD *)(v4 - 240);
    v13 = *(_QWORD *)(v4 - 344);
    v14 = *(_QWORD *)(v4 - 320);
    v15 = *(_QWORD *)(v4 - 352);
    v16 = *(_QWORD *)(v4 - 336);
    v17 = *(_QWORD *)(v4 - 360);
    v18 = *(_QWORD *)(v4 - 304);
    v19 = *(_QWORD *)(v4 - 368);
    v20 = *(_QWORD *)(v4 - 328);
    *(_QWORD *)(v4 - 216) = v5;
    *(_QWORD *)(v4 - 208) = v20;
    *(_QWORD *)(v4 - 200) = v18;
    *(_QWORD *)(v4 - 192) = v16;
    *(_QWORD *)(v4 - 184) = v14;
    *(_QWORD *)(v4 - 176) = v12;
    *(_QWORD *)(v4 - 168) = v9;
    *(_QWORD *)(v4 - 160) = v8;
    *(_QWORD *)(v4 - 152) = v19;
    *(_QWORD *)(v4 - 144) = v17;
    *(_QWORD *)(v4 - 136) = v15;
    *(_QWORD *)(v4 - 128) = v13;
    *(_QWORD *)(v4 - 120) = v11;
    *(_QWORD *)(v4 - 112) = v10;
    *(_QWORD *)(v4 - 104) = v7;
    *(_QWORD *)(v4 - 96) = v6;
    type metadata accessor for TaggedValue_8.ObservableDifference();
  }
  v21 = *(_QWORD *)(v4 - 464);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v23 = *(_QWORD *)(v4 - 880);
  v24 = *(_QWORD *)(v4 - 312);
  v22(v23, v2, v24);
  v25 = *(_QWORD *)(v4 - 872);
  v22(v25, v0, v24);
  v26 = *(_QWORD *)(v4 - 848);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 856) + 32))(v25, *(_QWORD *)(v4 - 400), v24);
  v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v27(v25, v24);
  v27(v23, v24);
  v28 = v26;
  v29 = *(_QWORD *)(v4 - 864);
  v30 = *(_QWORD *)(v4 - 840);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v28, 1, v30);
  v32 = *(_QWORD *)(v4 - 224);
  v33 = *(_QWORD *)(v4 - 240);
  v34 = *(_QWORD *)(v4 - 320);
  v35 = *(_QWORD *)(v4 - 304);
  if (v31 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 1064) + 8))(v28, *(_QWORD *)(v4 - 1056));
    v36 = *(_QWORD *)(v4 - 328);
    *(_QWORD *)(v4 - 216) = v24;
    *(_QWORD *)(v4 - 208) = v36;
    v37 = *(_QWORD *)(v4 - 336);
    *(_QWORD *)(v4 - 200) = v35;
    *(_QWORD *)(v4 - 192) = v37;
    *(_QWORD *)(v4 - 184) = v34;
    *(_QWORD *)(v4 - 176) = v33;
    v38 = *(_QWORD *)(v4 - 232);
    *(_QWORD *)(v4 - 168) = v32;
    *(_QWORD *)(v4 - 160) = v38;
    v39 = *(_QWORD *)(v4 - 360);
    *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 368);
    *(_QWORD *)(v4 - 144) = v39;
    v40 = *(_QWORD *)(v4 - 344);
    *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 352);
    *(_QWORD *)(v4 - 128) = v40;
    v41 = *(_QWORD *)(v4 - 264);
    *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 112) = v41;
    v42 = *(_QWORD *)(v4 - 248);
    *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 256);
    *(_QWORD *)(v4 - 96) = v42;
    type metadata accessor for TaggedValue_8.ObservableDifference();
  }
  v43 = v28;
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  v45 = *(_QWORD *)(v4 - 1072);
  v44(v45, v43, v30);
  v44(*(_QWORD *)(v4 - 288), v45, v30);
  v46 = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 216) = v24;
  *(_QWORD *)(v4 - 208) = v46;
  v47 = *(_QWORD *)(v4 - 336);
  *(_QWORD *)(v4 - 200) = v35;
  *(_QWORD *)(v4 - 192) = v47;
  *(_QWORD *)(v4 - 184) = v34;
  *(_QWORD *)(v4 - 176) = v33;
  v48 = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 168) = v32;
  *(_QWORD *)(v4 - 160) = v48;
  v49 = *(_QWORD *)(v4 - 360);
  *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 368);
  *(_QWORD *)(v4 - 144) = v49;
  v50 = *(_QWORD *)(v4 - 344);
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 352);
  *(_QWORD *)(v4 - 128) = v50;
  v51 = *(_QWORD *)(v4 - 264);
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 112) = v51;
  v52 = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 256);
  *(_QWORD *)(v4 - 96) = v52;
  type metadata accessor for TaggedValue_8.ObservableDifference();
}

void sub_1BDF4A478()
{
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1BDF4A4A4);
}

void type metadata accessor for TaggedValue_8.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

BOOL TaggedValue_9.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload() == 10;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDF4A560()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.taggedEnum.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4A5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void type metadata accessor for TaggedValue_9.TaggedEnum()
{
  JUMPOUT(0x1C3B7DED0);
}

void TaggedValue_9.taggedEnum.setter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4A638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*TaggedValue_9.taggedEnum.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4A73C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4A834()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4A930()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AA2C()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AB28()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AC24()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AD20()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1, a3);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AE14()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a2, a1, a4);
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AF04()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.init(tag:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AF88()
{
  return swift_storeEnumTagMultiPayload();
}

void TaggedValue_9.tagged1.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4AFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v12[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v12[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_OWORD *)(v3 - 208);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v9 + 32))(v1, v7);
    v8 = *(_OWORD *)(v3 - 208);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v1, v10, 1, v8);
}

void TaggedValue_9.tagged2.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged3.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B25C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged4.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B3A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged5.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B4C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged6.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged7.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged8.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.tagged9.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4B980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[64];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v11[-v6], v2, a1);
  if (swift_getEnumCaseMultiPayload() == 8)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    (*(void (**)(uint64_t, _BYTE *))(v8 + 32))(v1, v7);
    v9 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v3 - 208) - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 56))(v1, v9, 1, *(_QWORD *)(v3 - 208));
}

void TaggedValue_9.unknown.getter()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4BA9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[64];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v9[-v5];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(&v9[-v5], v2, a1);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 9)
  {
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
    v8 = 0;
  }
  *v1 = v8;
  return result;
}

void TaggedValue_9.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[49];

  v46[30] = a1;
  v46[27] = *(_QWORD *)(*(_QWORD *)(a2 + 80) - 8);
  v2 = MEMORY[0x1E0C80A78](a1);
  v46[26] = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[24] = *(_QWORD *)(*(_QWORD *)(v4 + 72) - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v46[23] = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[21] = *(_QWORD *)(*(_QWORD *)(v7 + 64) - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v46[20] = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[18] = *(_QWORD *)(*(_QWORD *)(v10 + 56) - 8);
  MEMORY[0x1E0C80A78](v8);
  v46[17] = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 48);
  v46[15] = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v46[14] = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[12] = *(_QWORD *)(*(_QWORD *)(v16 + 40) - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v46[11] = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[9] = *(_QWORD *)(*(_QWORD *)(v19 + 32) - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v46[8] = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 + 24);
  v46[7] = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v20);
  v46[6] = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v26 + 16);
  v46[5] = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v46[4] = (char *)v46 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v30[11];
  v32 = v30[12];
  v33 = v30[13];
  v34 = v30[14];
  v35 = v30[15];
  v36 = v30[16];
  v38 = v30[17];
  v37 = v30[18];
  v39 = v30[19];
  v46[31] = v27;
  v46[32] = v23;
  v46[10] = v40;
  v46[33] = v40;
  v46[34] = v41;
  v46[13] = v41;
  v46[16] = v28;
  v46[35] = v28;
  v46[36] = v42;
  v46[19] = v42;
  v46[22] = v43;
  v46[37] = v43;
  v46[38] = v44;
  v46[25] = v44;
  v46[28] = v45;
  v46[39] = v45;
  v46[40] = v31;
  v46[3] = v31;
  v46[2] = v32;
  v46[41] = v32;
  v46[42] = v33;
  v46[1] = v33;
  v46[43] = v34;
  v46[44] = v35;
  v46[45] = v36;
  v46[46] = v38;
  v46[47] = v37;
  v46[48] = v39;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4BE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 248), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF4BE84 + 4 * byte_1BE1BE30E[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF4BE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 440);
  v4 = *(_QWORD *)(v2 - 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v0, v1);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 - 456) + 8) + 40))(*(_QWORD *)(v2 - 240), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v1);
}

void sub_1BDF4C108()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 8) + 120))(*(_QWORD *)(v1 - 240));
  swift_release();
  JUMPOUT(0x1BDF4C0E8);
}

void TaggedValue_9.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[59];

  v57[29] = a1;
  v57[39] = a3;
  v57[18] = *(_QWORD *)(*(_QWORD *)(a2 + 80) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v57[19] = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v57[16] = (char *)v57 - v5;
  v7 = *(_QWORD *)(v6 + 72);
  v57[15] = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v57[17] = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v57[13] = (char *)v57 - v11;
  v57[12] = *(_QWORD *)(*(_QWORD *)(v12 + 64) - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v57[14] = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v57[10] = (char *)v57 - v16;
  v57[9] = *(_QWORD *)(*(_QWORD *)(v17 + 56) - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v57[11] = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v57[7] = (char *)v57 - v21;
  v57[6] = *(_QWORD *)(*(_QWORD *)(v22 + 48) - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v57[8] = (char *)v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v57[4] = (char *)v57 - v26;
  v57[3] = *(_QWORD *)(*(_QWORD *)(v27 + 40) - 8);
  v28 = MEMORY[0x1E0C80A78](v25);
  v57[5] = (char *)v57 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v57[1] = *(_QWORD *)(*(_QWORD *)(v31 + 32) - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v57[2] = (char *)v57 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v35 = MEMORY[0x1E0C80A78](v34);
  v36 = MEMORY[0x1E0C80A78](v35);
  v37 = MEMORY[0x1E0C80A78](v36);
  v38 = MEMORY[0x1E0C80A78](v37);
  v40 = v39[11];
  v41 = v39[12];
  v42 = v39[13];
  v43 = v39[14];
  v44 = v39[15];
  v45 = v39[16];
  v47 = v39[17];
  v46 = v39[18];
  v48 = v39[19];
  v57[31] = v49;
  v57[41] = v49;
  v57[42] = v50;
  v57[32] = v50;
  v57[33] = v51;
  v57[43] = v51;
  v57[44] = v52;
  v57[34] = v52;
  v57[35] = v53;
  v57[45] = v53;
  v57[46] = v54;
  v57[38] = v54;
  v57[40] = v55;
  v57[47] = v55;
  v57[48] = v38;
  v57[36] = v38;
  v57[37] = v56;
  v57[49] = v56;
  v57[50] = v40;
  v57[30] = v40;
  v57[28] = v41;
  v57[51] = v41;
  v57[52] = v42;
  v57[27] = v42;
  v57[26] = v43;
  v57[53] = v43;
  v57[54] = v44;
  v57[25] = v44;
  v57[24] = v45;
  v57[55] = v45;
  v57[56] = v47;
  v57[23] = v47;
  v57[22] = v46;
  v57[57] = v46;
  v57[58] = v48;
  v57[21] = v48;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4C56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 400), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF4C5D8 + 4 * word_1BE1BE318[EnumCaseMultiPayload]))();
}

void sub_1BDF4C5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 - 312);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v5);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 - 320) + 8) + 24))(*(_QWORD *)(v4 - 328), v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v5);
  TaggedValue_9.init(_:)(v1, v5, *(_QWORD *)(v4 - 248));
}

void TaggedValue_9.observableDifference(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;

  v183 = a2;
  v194 = a1;
  v193 = a4;
  v199 = a3[19];
  v5 = a3[10];
  v172 = *(_QWORD *)(v199 + 8);
  v6 = v5;
  v203 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v119 = sub_1BE1B2EE8();
  v118 = *(_QWORD *)(v119 - 8);
  v8 = MEMORY[0x1E0C80A78](v119);
  v171 = (char *)v94 - v9;
  v173 = AssociatedTypeWitness;
  v170 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v117 = (char *)v94 - v11;
  v182 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v168 = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v167 = (char *)v94 - v14;
  v198 = a3[18];
  v15 = a3[9];
  v165 = *(_QWORD *)(v198 + 8);
  v16 = v15;
  v202 = v15;
  v17 = swift_getAssociatedTypeWitness();
  v116 = sub_1BE1B2EE8();
  v115 = *(_QWORD *)(v116 - 8);
  v18 = MEMORY[0x1E0C80A78](v116);
  v166 = (char *)v94 - v19;
  v169 = v17;
  v164 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v114 = (char *)v94 - v21;
  v181 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v162 = (char *)v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v161 = (char *)v94 - v24;
  v197 = a3[17];
  v25 = a3[8];
  v159 = *(_QWORD *)(v197 + 8);
  v26 = v25;
  v201 = v25;
  v27 = swift_getAssociatedTypeWitness();
  v113 = sub_1BE1B2EE8();
  v112 = *(_QWORD *)(v113 - 8);
  v28 = MEMORY[0x1E0C80A78](v113);
  v160 = (char *)v94 - v29;
  v163 = v27;
  v158 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v111 = (char *)v94 - v31;
  v180 = *(_QWORD *)(v26 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v156 = (char *)v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v155 = (char *)v94 - v34;
  v196 = a3[16];
  v35 = a3[7];
  v153 = *(_QWORD *)(v196 + 8);
  v36 = v35;
  v200 = v35;
  v37 = swift_getAssociatedTypeWitness();
  v110 = sub_1BE1B2EE8();
  v109 = *(_QWORD *)(v110 - 8);
  v38 = MEMORY[0x1E0C80A78](v110);
  v154 = (char *)v94 - v39;
  v157 = v37;
  v152 = *(_QWORD *)(v37 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v108 = (char *)v94 - v41;
  v179 = *(_QWORD *)(v36 - 8);
  v42 = MEMORY[0x1E0C80A78](v40);
  v150 = (char *)v94 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42);
  v149 = (char *)v94 - v44;
  v195 = a3[15];
  v45 = a3[6];
  v147 = *(_QWORD *)(v195 + 8);
  v46 = swift_getAssociatedTypeWitness();
  v107 = sub_1BE1B2EE8();
  v106 = *(_QWORD *)(v107 - 8);
  v47 = MEMORY[0x1E0C80A78](v107);
  v148 = (char *)v94 - v48;
  v151 = v46;
  v146 = *(_QWORD *)(v46 - 8);
  v49 = MEMORY[0x1E0C80A78](v47);
  v105 = (char *)v94 - v50;
  v178 = *(_QWORD *)(v45 - 8);
  v51 = MEMORY[0x1E0C80A78](v49);
  v144 = (char *)v94 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v143 = (char *)v94 - v53;
  v54 = a3[14];
  v55 = a3[5];
  v141 = *(_QWORD *)(v54 + 8);
  v56 = swift_getAssociatedTypeWitness();
  v104 = sub_1BE1B2EE8();
  v103 = *(_QWORD *)(v104 - 8);
  v57 = MEMORY[0x1E0C80A78](v104);
  v142 = (char *)v94 - v58;
  v145 = v56;
  v140 = *(_QWORD *)(v56 - 8);
  v59 = MEMORY[0x1E0C80A78](v57);
  v102 = (char *)v94 - v60;
  v177 = *(_QWORD *)(v55 - 8);
  v61 = MEMORY[0x1E0C80A78](v59);
  v138 = (char *)v94 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61);
  v137 = (char *)v94 - v63;
  v64 = a3[13];
  v65 = a3[4];
  v135 = *(_QWORD *)(v64 + 8);
  v66 = swift_getAssociatedTypeWitness();
  v101 = sub_1BE1B2EE8();
  v100 = *(_QWORD *)(v101 - 8);
  v67 = MEMORY[0x1E0C80A78](v101);
  v136 = (char *)v94 - v68;
  v139 = v66;
  v134 = *(_QWORD *)(v66 - 8);
  v69 = MEMORY[0x1E0C80A78](v67);
  v99 = (char *)v94 - v70;
  v176 = *(_QWORD *)(v65 - 8);
  v71 = MEMORY[0x1E0C80A78](v69);
  v132 = (char *)v94 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71);
  v131 = (char *)v94 - v73;
  v74 = a3[12];
  v75 = a3[3];
  v129 = *(_QWORD *)(v74 + 8);
  v76 = swift_getAssociatedTypeWitness();
  v98 = sub_1BE1B2EE8();
  v97 = *(_QWORD *)(v98 - 8);
  v77 = MEMORY[0x1E0C80A78](v98);
  v130 = (char *)v94 - v78;
  v133 = v76;
  v128 = *(_QWORD *)(v76 - 8);
  v79 = MEMORY[0x1E0C80A78](v77);
  v96 = (char *)v94 - v80;
  v175 = *(_QWORD *)(v75 - 8);
  v81 = MEMORY[0x1E0C80A78](v79);
  v127 = (char *)v94 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v81);
  v126 = (char *)v94 - v83;
  v84 = a3[11];
  v85 = a3[2];
  v123 = *(_QWORD *)(v84 + 8);
  v86 = swift_getAssociatedTypeWitness();
  v95 = sub_1BE1B2EE8();
  v94[2] = *(_QWORD *)(v95 - 8);
  v87 = MEMORY[0x1E0C80A78](v95);
  v124 = (char *)v94 - v88;
  v125 = v86;
  v122 = *(_QWORD *)(v86 - 8);
  v89 = MEMORY[0x1E0C80A78](v87);
  v94[1] = (char *)v94 - v90;
  v174 = *(_QWORD *)(v85 - 8);
  v91 = MEMORY[0x1E0C80A78](v89);
  v121 = (char *)v94 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v91);
  v120 = (char *)v94 - v93;
  v184 = v85;
  v204 = v85;
  v205 = v75;
  v189 = v75;
  v190 = v65;
  v206 = v65;
  v207 = v55;
  v191 = v55;
  v192 = v45;
  v208 = v45;
  v209 = v200;
  v210 = v201;
  v211 = v202;
  v212 = v203;
  v213 = v84;
  v185 = v84;
  v186 = v74;
  v214 = v74;
  v215 = v64;
  v187 = v64;
  v188 = v54;
  v216 = v54;
  v217 = v195;
  v218 = v196;
  v219 = v197;
  v220 = v198;
  v221 = v199;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF4DBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 512) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 520) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v9 - 528) = (char *)&a9 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v9 - 536) = (char *)&a9 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v9 - 544) = (char *)&a9 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v23 = MEMORY[0x1E0C80A78](v22);
  v24 = MEMORY[0x1E0C80A78](v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 408) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v27 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v29 = (char *)&a9 - v28;
  *(_QWORD *)(v9 - 416) = v27;
  v30 = (char *)&a9 + *(int *)(v27 + 48) - v28;
  *(_QWORD *)(v9 - 424) = v11;
  v31 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v31((char *)&a9 - v28, *(_QWORD *)(v9 - 328), a1);
  v31(v30, *(_QWORD *)(v9 - 312), a1);
  *(_QWORD *)(v9 - 312) = v29;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1BDF4DE14 + 4 * word_1BE1BE32C[EnumCaseMultiPayload]))();
}

void sub_1BDF4DE14()
{
  void (*v0)(uint64_t, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v0(v2, *(_QWORD *)(v4 - 312), v3);
  if (swift_getEnumCaseMultiPayload())
  {
    v5 = *(_QWORD *)(v4 - 400);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 504) + 8))(v2, v5);
    v6 = v5;
    v7 = *(_QWORD *)(v4 - 272);
    v8 = *(_QWORD *)(v4 - 280);
    v9 = *(_QWORD *)(v4 - 288);
    v11 = *(_QWORD *)(v4 - 248);
    v10 = *(_QWORD *)(v4 - 240);
    v12 = *(_QWORD *)(v4 - 296);
    v13 = *(_QWORD *)(v4 - 304);
    v14 = *(_QWORD *)(v4 - 256);
    v15 = *(_QWORD *)(v4 - 368);
    v16 = *(_QWORD *)(v4 - 264);
    v17 = *(_QWORD *)(v4 - 376);
    v18 = *(_QWORD *)(v4 - 336);
    v19 = *(_QWORD *)(v4 - 384);
    v20 = *(_QWORD *)(v4 - 344);
    v21 = *(_QWORD *)(v4 - 392);
    v22 = *(_QWORD *)(v4 - 352);
    v23 = *(_QWORD *)(v4 - 360);
    *(_QWORD *)(v4 - 232) = v6;
    *(_QWORD *)(v4 - 224) = v23;
    *(_QWORD *)(v4 - 216) = v22;
    *(_QWORD *)(v4 - 208) = v20;
    *(_QWORD *)(v4 - 200) = v18;
    *(_QWORD *)(v4 - 192) = v16;
    *(_QWORD *)(v4 - 184) = v14;
    *(_QWORD *)(v4 - 176) = v11;
    *(_QWORD *)(v4 - 168) = v10;
    *(_QWORD *)(v4 - 160) = v21;
    *(_QWORD *)(v4 - 152) = v19;
    *(_QWORD *)(v4 - 144) = v17;
    *(_QWORD *)(v4 - 136) = v15;
    *(_QWORD *)(v4 - 128) = v13;
    *(_QWORD *)(v4 - 120) = v12;
    *(_QWORD *)(v4 - 112) = v9;
    *(_QWORD *)(v4 - 104) = v8;
    *(_QWORD *)(v4 - 96) = v7;
    type metadata accessor for TaggedValue_9.ObservableDifference();
  }
  v24 = *(_QWORD *)(v4 - 504);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
  v26 = *(_QWORD *)(v4 - 976);
  v27 = *(_QWORD *)(v4 - 400);
  v25(v26, v2, v27);
  v28 = *(_QWORD *)(v4 - 968);
  v25(v28, v1, v27);
  v29 = *(_QWORD *)(v4 - 944);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 952) + 32))(v28, *(_QWORD *)(v4 - 432), v27);
  v30 = v29;
  v31 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v31(v28, v27);
  v31(v26, v27);
  v32 = *(_QWORD *)(v4 - 960);
  v33 = *(_QWORD *)(v4 - 936);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v33);
  v35 = *(_QWORD *)(v4 - 256);
  v36 = *(_QWORD *)(v4 - 336);
  v37 = *(_QWORD *)(v4 - 344);
  v38 = *(_QWORD *)(v4 - 352);
  if (v34 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 1184) + 8))(v30, *(_QWORD *)(v4 - 1176));
    v39 = *(_QWORD *)(v4 - 360);
    *(_QWORD *)(v4 - 232) = v27;
    *(_QWORD *)(v4 - 224) = v39;
    *(_QWORD *)(v4 - 216) = v38;
    *(_QWORD *)(v4 - 208) = v37;
    v40 = *(_QWORD *)(v4 - 264);
    *(_QWORD *)(v4 - 200) = v36;
    *(_QWORD *)(v4 - 192) = v40;
    *(_QWORD *)(v4 - 184) = v35;
    *(_QWORD *)(v4 - 176) = *(_QWORD *)(v4 - 248);
    *(_QWORD *)(v4 - 168) = *(_QWORD *)(v4 - 240);
    v41 = *(_QWORD *)(v4 - 384);
    *(_QWORD *)(v4 - 160) = *(_QWORD *)(v4 - 392);
    *(_QWORD *)(v4 - 152) = v41;
    v42 = *(_QWORD *)(v4 - 368);
    *(_QWORD *)(v4 - 144) = *(_QWORD *)(v4 - 376);
    *(_QWORD *)(v4 - 136) = v42;
    v43 = *(_QWORD *)(v4 - 296);
    *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 304);
    *(_QWORD *)(v4 - 120) = v43;
    v44 = *(_QWORD *)(v4 - 280);
    *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 288);
    *(_QWORD *)(v4 - 104) = v44;
    *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 272);
    type metadata accessor for TaggedValue_9.ObservableDifference();
  }
  v45 = v30;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
  v47 = *(_QWORD *)(v4 - 1192);
  v46(v47, v45, v33);
  v46(*(_QWORD *)(v4 - 320), v47, v33);
  v48 = *(_QWORD *)(v4 - 360);
  *(_QWORD *)(v4 - 232) = v27;
  *(_QWORD *)(v4 - 224) = v48;
  *(_QWORD *)(v4 - 216) = v38;
  *(_QWORD *)(v4 - 208) = v37;
  v49 = *(_QWORD *)(v4 - 264);
  *(_QWORD *)(v4 - 200) = v36;
  *(_QWORD *)(v4 - 192) = v49;
  v50 = *(_QWORD *)(v4 - 248);
  *(_QWORD *)(v4 - 184) = v35;
  *(_QWORD *)(v4 - 176) = v50;
  v51 = *(_QWORD *)(v4 - 392);
  *(_QWORD *)(v4 - 168) = *(_QWORD *)(v4 - 240);
  *(_QWORD *)(v4 - 160) = v51;
  v52 = *(_QWORD *)(v4 - 376);
  *(_QWORD *)(v4 - 152) = *(_QWORD *)(v4 - 384);
  *(_QWORD *)(v4 - 144) = v52;
  v53 = *(_QWORD *)(v4 - 304);
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 368);
  *(_QWORD *)(v4 - 128) = v53;
  v54 = *(_QWORD *)(v4 - 288);
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 296);
  *(_QWORD *)(v4 - 112) = v54;
  v55 = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 280);
  *(_QWORD *)(v4 - 96) = v55;
  type metadata accessor for TaggedValue_9.ObservableDifference();
}

void sub_1BDF4F94C()
{
  JUMPOUT(0x1BDF4F964);
}

void type metadata accessor for TaggedValue_9.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t static TaggedValue_1<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  v34 = a5;
  v35 = v7;
  v8 = MEMORY[0x1E0C80A78](a1);
  v33 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v32 = (char *)&v31 - v10;
  v13 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v11, v12, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v31 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v21 = (char *)&v31 - v20;
  v22 = (char *)&v31 + *(int *)(v19 + 48) - v20;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23((char *)&v31 - v20, a1, v13);
  v23(v22, v36, v13);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v23(v16, (uint64_t)v21, v13);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v25 = v35;
      v26 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v27 = v32;
      v26(v32, v16, a3);
      v28 = v33;
      v26(v33, v22, a3);
      v24 = sub_1BE1B2798();
      v29 = *(void (**)(char *, uint64_t))(v25 + 8);
      v29(v28, a3);
      v29(v27, a3);
      v18 = v14;
      TupleTypeMetadata2 = v13;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v16, a3);
  }
  v24 = 0;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, TupleTypeMetadata2);
  return v24 & 1;
}

uint64_t sub_1BDF4FBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TaggedValue_1<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

void static TaggedValue_2<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[16];

  v19[5] = a8;
  v19[2] = a6;
  v19[10] = a1;
  v19[11] = a2;
  v19[8] = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v19[4] = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v19[3] = (char *)v19 - v11;
  v19[9] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v19[1] = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v19[12] = v15;
  v19[13] = v16;
  v19[7] = v16;
  v19[14] = v17;
  v19[15] = v18;
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF4FCF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _BYTE *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _BYTE *, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  _BYTE v32[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v32[-v9];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v15 = &v32[-v14];
  v16 = &v32[*(int *)(v13 + 48) - v14];
  *(_QWORD *)(v3 - 160) = v5;
  v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v17(&v32[-v14], *(_BYTE **)(v3 - 128), a1);
  v17(v16, *(_BYTE **)(v3 - 120), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v17(v8, v15, a1);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v19 = *(_QWORD *)(v3 - 152);
        v20 = *(_QWORD *)(v3 - 144);
        v21 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32);
        v22 = *(_QWORD *)(v3 - 184);
        v21(v22, v8, v19);
        v23 = *(_QWORD *)(v3 - 176);
        v21(v23, v16, v19);
        v24 = sub_1BE1B2798();
        v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
        v25(v23, v19);
        v25(v22, v19);
LABEL_10:
        v12 = *(_QWORD *)(v3 - 160);
        TupleTypeMetadata2 = a1;
        goto LABEL_11;
      }
      (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v3 - 144) + 8))(v8, *(_QWORD *)(v3 - 152));
    }
  }
  else
  {
    v26 = v1;
    v27 = *(_QWORD *)(v3 - 136);
    v17(v10, v15, a1);
    if (!swift_getEnumCaseMultiPayload())
    {
      v28 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v27 + 32);
      v28(v2, v10, v26);
      v29 = *(_QWORD *)(v3 - 200);
      v28(v29, v16, v26);
      v24 = sub_1BE1B2798();
      v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8);
      v30(v29, v26);
      v30(v2, v26);
      goto LABEL_10;
    }
    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v10, v26);
  }
  v24 = 0;
LABEL_11:
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, TupleTypeMetadata2);
  return v24 & 1;
}

void sub_1BDF4FF44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_2<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8), a3[5], *(_QWORD *)(a4 - 16));
}

void static TaggedValue_3<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[24];

  v30[2] = a7;
  v30[16] = a1;
  v30[7] = a9;
  v30[8] = a11;
  v30[10] = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v30[6] = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v30[5] = (char *)v30 - v14;
  v30[9] = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v30[4] = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v30[3] = (char *)v30 - v19;
  v30[13] = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v18);
  v30[1] = (char *)v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v30[0] = (char *)v30 - v23;
  v30[14] = v24;
  v30[17] = v24;
  v30[18] = v25;
  v30[11] = v25;
  v30[12] = v26;
  v30[19] = v26;
  v30[20] = v27;
  v30[21] = v28;
  v30[22] = v29;
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF500B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;

  v12 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = (char *)&a9 + *(int *)(v16 + 48) - v17;
  *(_QWORD *)(v10 - 152) = v12;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19((char *)&a9 - v17, *(_QWORD *)(v10 - 144), a1);
  v19(v18, v9, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF501BC + 4 * byte_1BE1BE340[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF501BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v3(v5, v0, v2);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 168) + 8))(v5, *(_QWORD *)(v7 - 160));
    v8 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v7 - 168);
    v9 = *(_QWORD *)(v7 - 160);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    v12 = *(_QWORD *)(v7 - 272);
    v11(v12, v5, v9);
    v13 = *(_QWORD *)(v7 - 264);
    v11(v13, v4, v9);
    v8 = sub_1BE1B2798();
    v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v14(v13, v9);
    v14(v12, v9);
    v1 = *(_QWORD *)(v7 - 152);
    v6 = v2;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v6);
  return v8 & 1;
}

void sub_1BDF503D4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_3<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(_QWORD *)(a4 - 8), a3[6], *(_QWORD *)(a4 - 16), a3[7], *(_QWORD *)(a4 - 24));
}

uint64_t sub_1BDF50404(char a1)
{
  return a1 & 1;
}

void static TaggedValue_4<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[32];

  v40[2] = a8;
  v40[21] = a1;
  v40[10] = a12;
  v40[11] = a14;
  v40[9] = a10;
  v40[14] = *(_QWORD *)(a6 - 8);
  v14 = MEMORY[0x1E0C80A78](a1);
  v40[8] = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v40[7] = (char *)v40 - v17;
  v40[13] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v40[6] = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v40[5] = (char *)v40 - v22;
  v40[12] = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v21);
  v40[4] = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v40[3] = (char *)v40 - v27;
  v40[18] = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v26);
  v40[1] = (char *)v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v40[0] = (char *)v40 - v31;
  v40[19] = v32;
  v40[23] = v32;
  v40[24] = v33;
  v40[15] = v33;
  v40[16] = v34;
  v40[25] = v34;
  v40[26] = v35;
  v40[17] = v35;
  v40[27] = v36;
  v40[28] = v37;
  v40[29] = v39;
  v40[30] = v38;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF505F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;

  v12 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = MEMORY[0x1E0C80A78](v13);
  v15 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v10 - 160) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&a9 + *(int *)(v17 + 48) - v18;
  *(_QWORD *)(v10 - 176) = v12;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)&a9 - v18, *(_QWORD *)(v10 - 168), a1);
  v20(v19, v9, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF50720 + 4 * byte_1BE1BE344[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF50720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v3(v2, v0, v1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 192) + 8))(v2, *(_QWORD *)(v6 - 184));
    v7 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v6 - 192);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v10 = *(_QWORD *)(v6 - 336);
    v11 = v2;
    v12 = *(_QWORD *)(v6 - 184);
    v9(v10, v11, v12);
    v13 = *(_QWORD *)(v6 - 328);
    v9(v13, v4, v12);
    v7 = sub_1BE1B2798();
    v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v14(v13, v12);
    v14(v10, v12);
    *(_QWORD *)(v6 - 160) = *(_QWORD *)(v6 - 176);
    v5 = v1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 160) + 8))(v0, v5);
  return v7 & 1;
}

void sub_1BDF509DC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_4<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(_QWORD *)(a4 - 8), a3[7], *(_QWORD *)(a4 - 16), a3[8], *(_QWORD *)(a4 - 24), a3[9], *(_QWORD *)(a4 - 32));
}

uint64_t sub_1BDF50A14(char a1)
{
  return a1 & 1;
}

void static TaggedValue_5<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[39];

  v45[27] = a1;
  v45[14] = a17;
  v45[13] = a15;
  v45[12] = a13;
  v45[11] = a11;
  v45[2] = a9;
  v45[18] = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v45[10] = (char *)v45 - v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v45[9] = (char *)v45 - v19;
  v45[17] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v45[8] = (char *)v45 - v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v45[7] = (char *)v45 - v23;
  v45[16] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  v45[6] = (char *)v45 - v26;
  v27 = MEMORY[0x1E0C80A78](v26);
  v45[5] = (char *)v45 - v27;
  v45[15] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  v45[4] = (char *)v45 - v30;
  v31 = MEMORY[0x1E0C80A78](v30);
  v45[3] = (char *)v45 - v31;
  v45[24] = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  v45[1] = (char *)v45 - v34;
  v45[0] = (char *)v45 - MEMORY[0x1E0C80A78](v34);
  v45[25] = v35;
  v45[29] = v35;
  v45[30] = v36;
  v45[19] = v36;
  v45[20] = v37;
  v45[31] = v37;
  v45[32] = v38;
  v45[21] = v38;
  v45[22] = v39;
  v45[33] = v39;
  v45[34] = v40;
  v45[35] = v42;
  v45[36] = v41;
  v45[37] = v44;
  v45[38] = v43;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF50C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;

  v12 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v10 - 216) = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v16 = MEMORY[0x1E0C80A78](v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v10 - 176) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v21 = (char *)&a9 + *(int *)(v19 + 48) - v20;
  *(_QWORD *)(v10 - 192) = v12;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22((char *)&a9 - v20, *(_QWORD *)(v10 - 184), a1);
  v22(v21, v9, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF50DE4 + 4 * byte_1BE1BE349[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF50DE4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1(v4, v0, v2);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 208) + 8))(v4, *(_QWORD *)(v6 - 200));
    v7 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(v6 - 208);
    v8 = *(_QWORD *)(v6 - 200);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v11 = *(_QWORD *)(v6 - 400);
    v10(v11, v4, v8);
    v12 = *(_QWORD *)(v6 - 392);
    v10(v12, v3, v8);
    v7 = sub_1BE1B2798();
    v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v12, v8);
    v13(v11, v8);
    *(_QWORD *)(v6 - 176) = *(_QWORD *)(v6 - 192);
    v5 = v2;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 8))(v0, v5);
  return v7 & 1;
}

void sub_1BDF51128(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_5<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], *(_QWORD *)(a4 - 8), a3[8], *(_QWORD *)(a4 - 16), a3[9], *(_QWORD *)(a4 - 24), a3[10], *(_QWORD *)(a4 - 32), a3[11], *(_QWORD *)(a4 - 40));
}

uint64_t sub_1BDF51170(char a1)
{
  return a1 & 1;
}

void static TaggedValue_6<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[49];

  v60[36] = a2;
  v60[34] = a1;
  v60[18] = a20;
  v60[17] = a18;
  v60[16] = a16;
  v60[15] = a14;
  v60[14] = a12;
  v60[3] = a10;
  v60[23] = *(_QWORD *)(a8 - 8);
  v20 = MEMORY[0x1E0C80A78](a11);
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v60[13] = (char *)v60 - v22;
  v23 = MEMORY[0x1E0C80A78](v20);
  v60[12] = (char *)v60 - v22;
  v60[22] = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  v60[11] = (char *)v60 - v27;
  v28 = MEMORY[0x1E0C80A78](v25);
  v60[10] = (char *)v60 - v27;
  v60[21] = *(_QWORD *)(v29 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  v60[9] = (char *)v60 - v32;
  v33 = MEMORY[0x1E0C80A78](v30);
  v60[8] = (char *)v60 - v32;
  v60[20] = *(_QWORD *)(v34 - 8);
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  v60[7] = (char *)v60 - v37;
  v38 = MEMORY[0x1E0C80A78](v35);
  v60[6] = (char *)v60 - v37;
  v60[19] = *(_QWORD *)(v39 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  v60[5] = (char *)v60 - v42;
  v43 = MEMORY[0x1E0C80A78](v40);
  v60[4] = (char *)v60 - v42;
  v60[31] = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x1E0C80A78](v43);
  v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  v60[2] = (char *)v60 - v47;
  v48 = MEMORY[0x1E0C80A78](v45);
  v60[1] = (char *)v60 - v47;
  v60[32] = v49;
  v60[37] = v49;
  v60[38] = v50;
  v60[24] = v50;
  v60[25] = v51;
  v60[39] = v51;
  v60[40] = v52;
  v60[26] = v52;
  v60[27] = v53;
  v60[41] = v53;
  v60[42] = v54;
  v60[28] = v54;
  v60[43] = v55;
  v60[44] = v48;
  v60[45] = v57;
  v60[46] = v56;
  v60[47] = v59;
  v60[48] = v58;
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF5147C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 240) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 248) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 200) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v22 = (char *)&a9 - v21;
  v23 = (char *)&a9 + *(int *)(v20 + 48) - v21;
  *(_QWORD *)(v9 - 216) = v11;
  v24 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v24((char *)&a9 - v21, *(_QWORD *)(v9 - 208), a1);
  v24(v23, *(_QWORD *)(v9 - 192), a1);
  *(_QWORD *)(v9 - 192) = v22;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF515EC + 4 * word_1BE1BE350[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF515EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v3(v0, *(_QWORD *)(v5 - 192), v1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 232) + 8))(v0, *(_QWORD *)(v5 - 224));
    v6 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 - 232);
    v7 = *(_QWORD *)(v5 - 224);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v10 = *(_QWORD *)(v5 - 472);
    v9(v10, v0, v7);
    v11 = *(_QWORD *)(v5 - 464);
    v9(v11, v2, v7);
    v6 = sub_1BE1B2798();
    v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v11, v7);
    v12(v10, v7);
    *(_QWORD *)(v5 - 200) = *(_QWORD *)(v5 - 216);
    v4 = v1;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 200) + 8))(*(_QWORD *)(v5 - 192), v4);
  return v6 & 1;
}

void sub_1BDF51A2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_6<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], *(_QWORD *)(a4 - 8), a3[9], *(_QWORD *)(a4 - 16), a3[10], *(_QWORD *)(a4 - 24), a3[11], *(_QWORD *)(a4 - 32), a3[12], *(_QWORD *)(a4 - 40), a3[13],
    *(_QWORD *)(a4 - 48));
}

uint64_t sub_1BDF51A80(char a1)
{
  return a1 & 1;
}

void static TaggedValue_7<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[57];

  v68[42] = a2;
  v68[40] = a1;
  v68[21] = a23;
  v68[20] = a21;
  v68[19] = a19;
  v68[18] = a17;
  v68[17] = a15;
  v68[16] = a13;
  v68[3] = a11;
  v68[27] = *(_QWORD *)(a9 - 8);
  v23 = MEMORY[0x1E0C80A78](a14);
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[15] = (char *)v68 - v25;
  v26 = MEMORY[0x1E0C80A78](v23);
  v68[14] = (char *)v68 - v25;
  v68[26] = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[13] = (char *)v68 - v30;
  v31 = MEMORY[0x1E0C80A78](v28);
  v68[12] = (char *)v68 - v30;
  v68[25] = *(_QWORD *)(v32 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[11] = (char *)v68 - v35;
  v36 = MEMORY[0x1E0C80A78](v33);
  v68[10] = (char *)v68 - v35;
  v68[24] = *(_QWORD *)(v37 - 8);
  v38 = MEMORY[0x1E0C80A78](v36);
  v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[9] = (char *)v68 - v40;
  v41 = MEMORY[0x1E0C80A78](v38);
  v68[8] = (char *)v68 - v40;
  v68[23] = *(_QWORD *)(v42 - 8);
  v43 = MEMORY[0x1E0C80A78](v41);
  v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[7] = (char *)v68 - v45;
  v46 = MEMORY[0x1E0C80A78](v43);
  v68[6] = (char *)v68 - v45;
  v68[22] = *(_QWORD *)(v47 - 8);
  v48 = MEMORY[0x1E0C80A78](v46);
  v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[5] = (char *)v68 - v50;
  v51 = MEMORY[0x1E0C80A78](v48);
  v68[4] = (char *)v68 - v50;
  v68[37] = *(_QWORD *)(v52 - 8);
  v53 = MEMORY[0x1E0C80A78](v51);
  v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  v68[2] = (char *)v68 - v55;
  v56 = MEMORY[0x1E0C80A78](v53);
  v68[1] = (char *)v68 - v55;
  v68[38] = v57;
  v68[43] = v57;
  v68[44] = v58;
  v68[29] = v58;
  v68[30] = v59;
  v68[45] = v59;
  v68[46] = v60;
  v68[31] = v60;
  v68[32] = v61;
  v68[47] = v61;
  v68[48] = v62;
  v68[33] = v62;
  v68[28] = a9;
  v68[49] = a9;
  v68[50] = a10;
  v68[51] = v63;
  v68[52] = v56;
  v68[53] = v65;
  v68[54] = v64;
  v68[55] = v67;
  v68[56] = v66;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF51E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 256) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 264) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v9 - 272) = (char *)&a9 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v19 = MEMORY[0x1E0C80A78](v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  MEMORY[0x1E0C80A78](v20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 216) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v22 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v24 = (char *)&a9 - v23;
  v25 = (char *)&a9 + *(int *)(v22 + 48) - v23;
  *(_QWORD *)(v9 - 232) = v11;
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v26((char *)&a9 - v23, *(_QWORD *)(v9 - 224), a1);
  v26(v25, *(_QWORD *)(v9 - 208), a1);
  *(_QWORD *)(v9 - 208) = v24;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF51FC0 + 4 * word_1BE1BE35E[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF51FC0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v2(v3, *(_QWORD *)(v5 - 208), v0);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 248) + 8))(v3, *(_QWORD *)(v5 - 240));
    v6 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 - 248);
    v7 = *(_QWORD *)(v5 - 240);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v10 = *(_QWORD *)(v5 - 536);
    v9(v10, v3, v7);
    v11 = *(_QWORD *)(v5 - 528);
    v9(v11, v1, v7);
    v6 = sub_1BE1B2798();
    v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v11, v7);
    v12(v10, v7);
    *(_QWORD *)(v5 - 216) = *(_QWORD *)(v5 - 232);
    v4 = v0;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 216) + 8))(*(_QWORD *)(v5 - 208), v4);
  return v6 & 1;
}

void sub_1BDF524A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_7<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], *(_QWORD *)(a4 - 8), a3[10], *(_QWORD *)(a4 - 16), a3[11], *(_QWORD *)(a4 - 24), a3[12], *(_QWORD *)(a4 - 32), a3[13], *(_QWORD *)(a4 - 40),
    a3[14],
    *(_QWORD *)(a4 - 48),
    a3[15],
    *(_QWORD *)(a4 - 56));
}

uint64_t sub_1BDF52514(char a1)
{
  return a1 & 1;
}

void static TaggedValue_8<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[65];

  v75[48] = a2;
  v75[45] = a1;
  v75[24] = a26;
  v75[23] = a24;
  v75[22] = a22;
  v75[21] = a20;
  v75[20] = a18;
  v75[19] = a16;
  v75[18] = a14;
  v75[3] = a12;
  v75[31] = *(_QWORD *)(a10 - 8);
  v26 = MEMORY[0x1E0C80A78](a17);
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[17] = (char *)v75 - v28;
  v29 = MEMORY[0x1E0C80A78](v26);
  v75[16] = (char *)v75 - v28;
  v75[30] = *(_QWORD *)(a9 - 8);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[15] = (char *)v75 - v32;
  v33 = MEMORY[0x1E0C80A78](v30);
  v75[14] = (char *)v75 - v32;
  v75[29] = *(_QWORD *)(v34 - 8);
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[13] = (char *)v75 - v37;
  v38 = MEMORY[0x1E0C80A78](v35);
  v75[12] = (char *)v75 - v37;
  v75[28] = *(_QWORD *)(v39 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[11] = (char *)v75 - v42;
  v43 = MEMORY[0x1E0C80A78](v40);
  v75[10] = (char *)v75 - v42;
  v75[27] = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x1E0C80A78](v43);
  v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[9] = (char *)v75 - v47;
  v48 = MEMORY[0x1E0C80A78](v45);
  v75[8] = (char *)v75 - v47;
  v75[26] = *(_QWORD *)(v49 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[7] = (char *)v75 - v52;
  v53 = MEMORY[0x1E0C80A78](v50);
  v75[6] = (char *)v75 - v52;
  v75[25] = *(_QWORD *)(v54 - 8);
  v55 = MEMORY[0x1E0C80A78](v53);
  v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[5] = (char *)v75 - v57;
  v58 = MEMORY[0x1E0C80A78](v55);
  v75[4] = (char *)v75 - v57;
  v75[42] = *(_QWORD *)(v59 - 8);
  v60 = MEMORY[0x1E0C80A78](v58);
  v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  v75[2] = (char *)v75 - v62;
  v63 = MEMORY[0x1E0C80A78](v60);
  v75[1] = (char *)v75 - v62;
  v75[43] = v64;
  v75[49] = v64;
  v75[50] = v65;
  v75[34] = v65;
  v75[35] = v66;
  v75[51] = v66;
  v75[52] = v67;
  v75[36] = v67;
  v75[37] = v68;
  v75[53] = v68;
  v75[54] = v69;
  v75[38] = v69;
  v75[32] = a9;
  v75[55] = a9;
  v75[56] = a10;
  v75[33] = a10;
  v75[57] = a11;
  v75[58] = a13;
  v75[59] = v70;
  v75[60] = v63;
  v75[61] = v72;
  v75[62] = v71;
  v75[63] = v74;
  v75[64] = v73;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF5292C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 280) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 288) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v9 - 296) = (char *)&a9 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v19 = MEMORY[0x1E0C80A78](v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 232) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v23 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v25 = (char *)&a9 - v24;
  *(_QWORD *)(v9 - 240) = v23;
  v26 = (char *)&a9 + *(int *)(v23 + 48) - v24;
  *(_QWORD *)(v9 - 256) = v11;
  v27 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v27((char *)&a9 - v24, *(_QWORD *)(v9 - 248), a1);
  v27(v26, *(_QWORD *)(v9 - 224), a1);
  *(_QWORD *)(v9 - 224) = v25;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF52AE4 + 4 * word_1BE1BE36E[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF52AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t);
  uint64_t v4;
  char v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v3(v2, *(_QWORD *)(v4 - 224), v0);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 272) + 8))(v2, *(_QWORD *)(v4 - 264));
    v5 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 - 272);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v8 = *(_QWORD *)(v4 - 600);
    v9 = *(_QWORD *)(v4 - 264);
    v7(v8, v2, v9);
    v10 = *(_QWORD *)(v4 - 592);
    v7(v10, v1, v9);
    v5 = sub_1BE1B2798();
    v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v10, v9);
    v11(v8, v9);
    v12 = *(_QWORD *)(v4 - 256);
    *(_QWORD *)(v4 - 240) = v0;
    *(_QWORD *)(v4 - 232) = v12;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 232) + 8))(*(_QWORD *)(v4 - 224), *(_QWORD *)(v4 - 240));
  return v5 & 1;
}

void sub_1BDF5306C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_8<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], *(_QWORD *)(a4 - 8), a3[11], *(_QWORD *)(a4 - 16), a3[12], *(_QWORD *)(a4 - 24), a3[13], *(_QWORD *)(a4 - 32), a3[14],
    *(_QWORD *)(a4 - 40),
    a3[15],
    *(_QWORD *)(a4 - 48),
    a3[16],
    *(_QWORD *)(a4 - 56),
    a3[17],
    *(_QWORD *)(a4 - 64));
}

uint64_t sub_1BDF530E0(char a1)
{
  return a1 & 1;
}

void static TaggedValue_9<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[73];

  v82[54] = a2;
  v82[51] = a1;
  v82[27] = a29;
  v82[26] = a27;
  v82[25] = a25;
  v82[24] = a23;
  v82[23] = a21;
  v82[22] = a19;
  v82[21] = a17;
  v82[20] = a15;
  v82[3] = a13;
  v82[35] = *(_QWORD *)(a11 - 8);
  v29 = MEMORY[0x1E0C80A78](a20);
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[19] = (char *)v82 - v31;
  v32 = MEMORY[0x1E0C80A78](v29);
  v82[18] = (char *)v82 - v31;
  v82[34] = *(_QWORD *)(a10 - 8);
  v33 = MEMORY[0x1E0C80A78](v32);
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[17] = (char *)v82 - v35;
  v36 = MEMORY[0x1E0C80A78](v33);
  v82[16] = (char *)v82 - v35;
  v82[33] = *(_QWORD *)(a9 - 8);
  v37 = MEMORY[0x1E0C80A78](v36);
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[15] = (char *)v82 - v39;
  v40 = MEMORY[0x1E0C80A78](v37);
  v82[14] = (char *)v82 - v39;
  v82[32] = *(_QWORD *)(v41 - 8);
  v42 = MEMORY[0x1E0C80A78](v40);
  v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[13] = (char *)v82 - v44;
  v45 = MEMORY[0x1E0C80A78](v42);
  v82[12] = (char *)v82 - v44;
  v82[31] = *(_QWORD *)(v46 - 8);
  v47 = MEMORY[0x1E0C80A78](v45);
  v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[11] = (char *)v82 - v49;
  v50 = MEMORY[0x1E0C80A78](v47);
  v82[10] = (char *)v82 - v49;
  v82[30] = *(_QWORD *)(v51 - 8);
  v52 = MEMORY[0x1E0C80A78](v50);
  v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[9] = (char *)v82 - v54;
  v55 = MEMORY[0x1E0C80A78](v52);
  v82[8] = (char *)v82 - v54;
  v82[29] = *(_QWORD *)(v56 - 8);
  v57 = MEMORY[0x1E0C80A78](v55);
  v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[7] = (char *)v82 - v59;
  v60 = MEMORY[0x1E0C80A78](v57);
  v82[6] = (char *)v82 - v59;
  v82[28] = *(_QWORD *)(v61 - 8);
  v62 = MEMORY[0x1E0C80A78](v60);
  v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[5] = (char *)v82 - v64;
  v65 = MEMORY[0x1E0C80A78](v62);
  v82[4] = (char *)v82 - v64;
  v82[48] = *(_QWORD *)(v66 - 8);
  v67 = MEMORY[0x1E0C80A78](v65);
  v69 = (v68 + 15) & 0xFFFFFFFFFFFFFFF0;
  v82[2] = (char *)v82 - v69;
  v70 = MEMORY[0x1E0C80A78](v67);
  v82[1] = (char *)v82 - v69;
  v82[49] = v71;
  v82[55] = v71;
  v82[56] = v72;
  v82[39] = v72;
  v82[40] = v73;
  v82[57] = v73;
  v82[58] = v74;
  v82[41] = v74;
  v82[42] = v75;
  v82[59] = v75;
  v82[60] = v76;
  v82[43] = v76;
  v82[37] = a9;
  v82[61] = a9;
  v82[62] = a10;
  v82[38] = a10;
  v82[36] = a11;
  v82[63] = a11;
  v82[64] = a12;
  v82[65] = a14;
  v82[66] = a16;
  v82[67] = v77;
  v82[68] = v70;
  v82[69] = v79;
  v82[70] = v78;
  v82[71] = v81;
  v82[72] = v80;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF53594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, _QWORD, uint64_t);
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v9 - 296) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 304) = (char *)&a9 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v9 - 312) = (char *)&a9 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v9 - 320) = (char *)&a9 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v21 = MEMORY[0x1E0C80A78](v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v9 - 248) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v25 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v27 = (char *)&a9 - v26;
  *(_QWORD *)(v9 - 256) = v25;
  v28 = (char *)&a9 + *(int *)(v25 + 48) - v26;
  *(_QWORD *)(v9 - 272) = v11;
  v29 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 16);
  v29((char *)&a9 - v26, *(_QWORD *)(v9 - 264), a1);
  v29(v28, *(_QWORD *)(v9 - 240), a1);
  *(_QWORD *)(v9 - 240) = v27;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF5377C + 4 * word_1BE1BE380[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF5377C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v2(v0, *(_QWORD *)(v4 - 240), v3);
  v5 = v1;
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 288) + 8))(v0, *(_QWORD *)(v4 - 280));
    v6 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 - 288);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v9 = *(_QWORD *)(v4 - 664);
    v10 = v0;
    v11 = *(_QWORD *)(v4 - 280);
    v8(v9, v10, v11);
    v12 = *(_QWORD *)(v4 - 656);
    v8(v12, v5, v11);
    v6 = sub_1BE1B2798();
    v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v13(v12, v11);
    v13(v9, v11);
    v14 = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 256) = v3;
    *(_QWORD *)(v4 - 248) = v14;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 248) + 8))(*(_QWORD *)(v4 - 240), *(_QWORD *)(v4 - 256));
  return v6 & 1;
}

void sub_1BDF53D84(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  static TaggedValue_9<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], *(_QWORD *)(a4 - 8), a3[12], *(_QWORD *)(a4 - 16), a3[13], *(_QWORD *)(a4 - 24), a3[14], *(_QWORD *)(a4 - 32),
    a3[15],
    *(_QWORD *)(a4 - 40),
    a3[16],
    *(_QWORD *)(a4 - 48),
    a3[17],
    *(_QWORD *)(a4 - 56),
    a3[18],
    *(_QWORD *)(a4 - 64),
    a3[19],
    *(_QWORD *)(a4 - 72));
}

uint64_t sub_1BDF53E10(char a1)
{
  return a1 & 1;
}

uint64_t TaggedValue_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t result;
  uint64_t inited;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int EnumCaseMultiPayload;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v124 = a5;
  v120 = a2;
  v119 = a3;
  v123 = type metadata accessor for TaggedValue_1.TaggedEnum(0, a2, a3, a4);
  v122 = *(_QWORD *)(v123 - 8);
  v6 = MEMORY[0x1E0C80A78](v123);
  v115 = (_QWORD *)((char *)v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v121 = (char *)v112 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v128 = (uint64_t)v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v117 = (uint64_t)v112 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v112 - v14;
  v138 = type metadata accessor for Proto_TaggedValue(0);
  v16 = MEMORY[0x1E0C80A78](v138);
  v131 = (uint64_t)v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v125 = (uint64_t)v112 - v19;
  MEMORY[0x1E0C80A78](v18);
  v136 = (uint64_t)v112 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v130 = (char *)v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v137 = (uint64_t)v112 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v118 = (uint64_t)v112 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v133 = (uint64_t)v112 - v30;
  MEMORY[0x1E0C80A78](v29);
  v135 = (uint64_t)v112 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v33 = MEMORY[0x1E0C80A78](v32);
  v129 = (uint64_t)v112 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v132 = (uint64_t)v112 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v127 = (uint64_t)v112 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v126 = (uint64_t)v112 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v43 = (char *)v112 - v42;
  MEMORY[0x1E0C80A78](v41);
  v45 = (char *)v112 - v44;
  v46 = a1;
  v47 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v47, (uint64_t)v45, &qword_1ED6F3770);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v48(v45, 1, v21);
  sub_1BDD86E30((uint64_t)v45, &qword_1ED6F3770);
  if ((_DWORD)v22 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v49 = 0xD000000000000017;
    *(_QWORD *)(v49 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v49 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v46;
  sub_1BDD86DEC(v47, (uint64_t)v43, &qword_1ED6F3770);
  v116 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48;
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v48)(v43, 1, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v52 = v46;
  v53 = v135;
  sub_1BDDA2E8C((uint64_t)v43, v135, type metadata accessor for Proto_Value);
  v114 = v21;
  v54 = *(_QWORD *)(v53 + *(int *)(v21 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v54, (uint64_t)v15, &qword_1ED6F26F0);
  v55 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48);
  v57 = v56(v15, 1, v55);
  v113 = v52;
  if (v57 == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      v58 = v136;
      sub_1BDDA2E8C((uint64_t)v15, v136, type metadata accessor for Proto_TaggedValue);
      v59 = v58;
      v60 = v116;
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v60 = v116;
  v59 = v136;
  sub_1BE1B20E4();
  v61 = *(int *)(v138 + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)(v59 + v61) = qword_1EF52B518;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0(v53, type metadata accessor for Proto_Value);
  v62 = v138;
  v63 = *(_QWORD *)(v59 + *(int *)(v138 + 20));
  swift_beginAccess();
  v64 = *(_QWORD *)(v63 + 16);
  sub_1BDD9C3E0(v59, type metadata accessor for Proto_TaggedValue);
  v112[1] = inited;
  if (v64)
  {
    v65 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    swift_beginAccess();
    v66 = v65;
    v67 = v132;
    sub_1BDD86DEC(v66, v132, &qword_1ED6F3770);
    v68 = v114;
    result = v60(v67, 1, v114);
    if ((_DWORD)result != 1)
    {
      v69 = v67;
      v70 = v137;
      sub_1BDDA2E8C(v69, v137, type metadata accessor for Proto_Value);
      v71 = *(_QWORD *)(v70 + *(int *)(v68 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v72 = v71;
      v73 = v128;
      sub_1BDD86DEC(v72, v128, &qword_1ED6F26F0);
      if (v56((char *)v73, 1, v55) == 1)
      {
        sub_1BDD86E30(v73, &qword_1ED6F26F0);
        v74 = v134;
        v75 = v131;
        v76 = (uint64_t)v130;
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v76 = (uint64_t)v130;
        if (EnumCaseMultiPayload == 11)
        {
          v75 = v131;
          sub_1BDDA2E8C(v73, v131, type metadata accessor for Proto_TaggedValue);
          v74 = v134;
          goto LABEL_27;
        }
        sub_1BDD9C3E0(v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        v74 = v134;
        v75 = v131;
      }
      sub_1BE1B20E4();
      v94 = *(int *)(v62 + 20);
      if (qword_1EF52B520 != -1)
        swift_once();
      *(_QWORD *)(v75 + v94) = qword_1EF52B518;
      swift_retain();
LABEL_27:
      sub_1BDD9C3E0(v137, type metadata accessor for Proto_Value);
      v95 = *(_QWORD *)(v75 + *(int *)(v62 + 20))
          + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      v96 = v129;
      sub_1BDD86DEC(v95, v129, &qword_1ED6F3770);
      if (v60(v96, 1, v68) == 1)
      {
        sub_1BE1B20E4();
        v97 = *(int *)(v68 + 20);
        if (qword_1ED6F2718 != -1)
          swift_once();
        *(_QWORD *)(v76 + v97) = qword_1ED6F2708;
        swift_retain();
        sub_1BDD86E30(v96, &qword_1ED6F3770);
      }
      else
      {
        sub_1BDDA2E8C(v96, v76, type metadata accessor for Proto_Value);
      }
      sub_1BDD9C3E0(v75, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      v98 = v113;
      swift_retain();
      v99 = sub_1BDDB4FC0(v76, v98);
      swift_release();
      AnyCRValue.init(from:)(v99, &v139);
      if (!v74)
      {
        swift_release();
        swift_release();
        v100 = v139;
        v101 = v115;
        *v115 = v64;
        v101[1] = v100;
        v102 = v123;
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v122 + 32))(v124, v101, v102);
      }
      goto LABEL_44;
    }
    goto LABEL_47;
  }
  v77 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v78 = v77;
  v79 = v126;
  sub_1BDD86DEC(v78, v126, &qword_1ED6F3770);
  v80 = v114;
  result = v60(v79, 1, v114);
  if ((_DWORD)result == 1)
  {
LABEL_48:
    __break(1u);
    return result;
  }
  v81 = v79;
  v82 = v133;
  sub_1BDDA2E8C(v81, v133, type metadata accessor for Proto_Value);
  v83 = *(_QWORD *)(v82 + *(int *)(v80 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v84 = v83;
  v85 = v117;
  sub_1BDD86DEC(v84, v117, &qword_1ED6F26F0);
  v86 = v56((char *)v85, 1, v55);
  v87 = v113;
  if (v86 == 1)
  {
    sub_1BDD86E30(v85, &qword_1ED6F26F0);
    v88 = v134;
    v89 = v121;
    v90 = v119;
LABEL_35:
    v93 = v125;
    sub_1BE1B20E4();
    v103 = *(int *)(v62 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v93 + v103) = qword_1EF52B518;
    swift_retain();
    goto LABEL_38;
  }
  v92 = swift_getEnumCaseMultiPayload();
  v90 = v119;
  if (v92 != 11)
  {
    sub_1BDD9C3E0(v85, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v88 = v134;
    v89 = v121;
    goto LABEL_35;
  }
  v93 = v125;
  sub_1BDDA2E8C(v85, v125, type metadata accessor for Proto_TaggedValue);
  v88 = v134;
  v89 = v121;
LABEL_38:
  sub_1BDD9C3E0(v133, type metadata accessor for Proto_Value);
  v104 = *(_QWORD *)(v93 + *(int *)(v62 + 20))
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  v105 = v104;
  v106 = v127;
  sub_1BDD86DEC(v105, v127, &qword_1ED6F3770);
  if (v116(v106, 1, v80) == 1)
  {
    v107 = v118;
    sub_1BE1B20E4();
    v108 = *(int *)(v80 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v107 + v108) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v127, &qword_1ED6F3770);
  }
  else
  {
    v107 = v118;
    sub_1BDDA2E8C(v106, v118, type metadata accessor for Proto_Value);
  }
  v109 = v120;
  sub_1BDD9C3E0(v93, type metadata accessor for Proto_TaggedValue);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v110 = sub_1BDDB4FC0(v107, v87);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 8) + 8) + 8))(v110, v109);
  if (v88)
  {
LABEL_44:
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
  swift_release();
  swift_release();
  v111 = v123;
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v122 + 32))(v124, v89, v111);
}

uint64_t TaggedValue_1.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int EnumCaseMultiPayload;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v4 = MEMORY[0x1E0C80A78](v3);
  v117 = (uint64_t)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v116 = (uint64_t)&v107 - v6;
  v125 = type metadata accessor for Proto_Value(0);
  v115 = *(_QWORD *)(v125 - 8);
  v7 = MEMORY[0x1E0C80A78](v125);
  v120 = (uint64_t)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v121 = (uint64_t)&v107 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v111 = (uint64_t)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v119 = (uint64_t)&v107 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v112 = (uint64_t)&v107 - v16;
  MEMORY[0x1E0C80A78](v15);
  v118 = (uint64_t)&v107 - v17;
  v124 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v124);
  v113 = (uint64_t)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v122 = (uint64_t)&v107 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v114 = (uint64_t)&v107 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v107 - v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v24);
  v30 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(a2 + 24);
  v33 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v27, v31, v32);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v36 = (uint64_t *)((char *)&v107 - v35);
  v37 = v126;
  result = sub_1BDE25870();
  if (v37)
    return result;
  v107 = v26;
  v109 = (uint64_t)v30;
  v108 = v28;
  v110 = v27;
  v126 = result;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v34 + 16))(v36, v123, v33);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v40 = *v36;
    v39 = v36[1];
    v41 = v126 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    v42 = *(_QWORD *)(v41 + *(int *)(v125 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v43 = v119;
    sub_1BDD86DEC(v42, v119, &qword_1ED6F26F0);
    v44 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48);
    if (v45(v43, 1, v44) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v43, &qword_1ED6F26F0);
      v46 = v122;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v46 = v122;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v43, v122, type metadata accessor for Proto_TaggedValue);
        swift_retain();
        v57 = v124;
        goto LABEL_15;
      }
      swift_retain();
      sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v57 = v124;
    v61 = v46;
    v62 = *(int *)(v124 + 20);
    if (qword_1EF52B520 != -1)
    {
      swift_once();
      v57 = v124;
    }
    *(_QWORD *)(v61 + v62) = qword_1EF52B518;
    swift_retain();
    v46 = v61;
LABEL_15:
    v63 = *(int *)(v57 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_TaggedValue._StorageClass(0);
      swift_allocObject();
      v64 = swift_retain();
      v65 = sub_1BE138794(v64);
      v46 = v122;
      *(_QWORD *)(v122 + v63) = v65;
      swift_release();
    }
    v66 = v46;
    v67 = *(_QWORD *)(v46 + v63);
    swift_beginAccess();
    *(_QWORD *)(v67 + 16) = v40;
    sub_1BE12A434(v66);
    swift_endAccess();
    swift_retain();
    v68 = swift_retain();
    sub_1BDE1C9DC(v68, v39, v68, v120);
    swift_beginAccess();
    v69 = *(_QWORD *)(v41 + *(int *)(v125 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v70 = v69;
    v71 = v111;
    sub_1BDD86DEC(v70, v111, &qword_1ED6F26F0);
    if (v45(v71, 1, v44) == 1)
    {
      sub_1BDD86E30(v71, &qword_1ED6F26F0);
      v72 = v116;
      v73 = v115;
      v74 = v113;
    }
    else
    {
      v90 = swift_getEnumCaseMultiPayload();
      v73 = v115;
      v74 = v113;
      if (v90 == 11)
      {
        sub_1BDDA2E8C(v71, v113, type metadata accessor for Proto_TaggedValue);
        v72 = v116;
        v91 = v124;
LABEL_35:
        v95 = *(int *)(v91 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          v96 = swift_retain();
          *(_QWORD *)(v74 + v95) = sub_1BE138794(v96);
          swift_release();
        }
        v97 = *(_QWORD *)(v74 + v95);
        sub_1BDDA2E8C(v120, v72, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v72, 0, 1, v125);
        v98 = v72;
        v99 = v117;
        sub_1BDEFF368(v98, v117);
        v100 = v97
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1BDEFF3B0(v99, v100);
        swift_endAccess();
        swift_release();
        sub_1BE12A434(v74);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
      sub_1BDD9C3E0(v71, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      v72 = v116;
    }
    sub_1BE1B20E4();
    v91 = v124;
    v94 = *(int *)(v124 + 20);
    if (qword_1EF52B520 != -1)
    {
      swift_once();
      v91 = v124;
    }
    *(_QWORD *)(v74 + v94) = qword_1EF52B518;
    swift_retain();
    goto LABEL_35;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v108 + 32))(v109, v36, v110);
  v47 = v126 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v48 = v125;
  v49 = *(_QWORD *)(v47 + *(int *)(v125 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v50 = v49;
  v51 = v118;
  sub_1BDD86DEC(v50, v118, &qword_1ED6F26F0);
  v52 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48);
  if (v53(v51, 1, v52) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v51, &qword_1ED6F26F0);
    v54 = v31;
    v55 = (uint64_t)v107;
  }
  else
  {
    v58 = swift_getEnumCaseMultiPayload();
    v54 = v31;
    v59 = v51;
    v55 = (uint64_t)v107;
    if (v58 == 11)
    {
      sub_1BDDA2E8C(v59, (uint64_t)v107, type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v60 = v124;
      goto LABEL_23;
    }
    swift_retain();
    sub_1BDD9C3E0(v59, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v60 = v124;
  v75 = v55;
  v76 = *(int *)(v124 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v60 = v124;
  }
  *(_QWORD *)(v75 + v76) = qword_1EF52B518;
  swift_retain();
  v55 = v75;
LABEL_23:
  v77 = *(int *)(v60 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v78 = swift_retain();
    v55 = (uint64_t)v107;
    *(_QWORD *)(v55 + v77) = sub_1BE138794(v78);
    swift_release();
  }
  v79 = v55;
  v80 = *(_QWORD *)(v55 + v77);
  swift_beginAccess();
  *(_QWORD *)(v80 + 16) = 0;
  sub_1BE12A434(v79);
  v81 = swift_endAccess();
  MEMORY[0x1E0C80A78](v81);
  *(&v107 - 4) = (char *)v110;
  *(&v107 - 3) = (char *)v54;
  v82 = v127;
  *(&v107 - 2) = (char *)v109;
  *(&v107 - 1) = (char *)v82;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDE27F68, v121);
  swift_beginAccess();
  v83 = *(_QWORD *)(v47 + *(int *)(v48 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v84 = v83;
  v85 = v112;
  sub_1BDD86DEC(v84, v112, &qword_1ED6F26F0);
  if (v53(v85, 1, v52) == 1)
  {
    sub_1BDD86E30(v85, &qword_1ED6F26F0);
    v86 = v117;
    v87 = v115;
    v88 = v121;
    v89 = v114;
LABEL_39:
    sub_1BE1B20E4();
    v93 = v124;
    v101 = *(int *)(v124 + 20);
    if (qword_1EF52B520 != -1)
    {
      swift_once();
      v93 = v124;
    }
    *(_QWORD *)(v89 + v101) = qword_1EF52B518;
    swift_retain();
    goto LABEL_42;
  }
  v92 = swift_getEnumCaseMultiPayload();
  v86 = v117;
  v87 = v115;
  v88 = v121;
  v89 = v114;
  if (v92 != 11)
  {
    sub_1BDD9C3E0(v85, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_39;
  }
  sub_1BDDA2E8C(v85, v114, type metadata accessor for Proto_TaggedValue);
  v93 = v124;
LABEL_42:
  v102 = *(int *)(v93 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v103 = swift_retain();
    *(_QWORD *)(v89 + v102) = sub_1BE138794(v103);
    swift_release();
  }
  v104 = *(_QWORD *)(v89 + v102);
  v105 = v116;
  sub_1BDDA2E8C(v88, v116, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v87 + 56))(v105, 0, 1, v125);
  sub_1BDEFF368(v105, v86);
  v106 = v104
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1BDEFF3B0(v86, v106);
  swift_endAccess();
  swift_release();
  sub_1BE12A434(v89);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 8))(v109, v110);
}

void TaggedValue_1.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1BDF55878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return TaggedValue_1.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_1BDF55894(uint64_t a1, uint64_t a2)
{
  return TaggedValue_1.encode(to:)(a1, a2);
}

void sub_1BDF558A8(_BYTE *a1@<X8>)
{
  TaggedValue_1.minEncodingVersion.getter(a1);
}

uint64_t TaggedValue_1<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v16[4];
  _QWORD v17[4];

  v3 = v2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaggedValue_1.TaggedEnum(0, v4, *(_QWORD *)(v8 + 24), v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v16[-1] - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16[-1] - v11, v3, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)v12 + 1) + 80))(v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
    swift_dynamicCast();
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    sub_1BE1B26CC();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v12, v4);
    sub_1BE1B26CC();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1BDF55A64(uint64_t a1, uint64_t a2)
{
  return TaggedValue_1<>.encode(to:)(a1, a2);
}

void TaggedValue_2.init(from:)()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF55AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(_BYTE *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t result;
  uint64_t inited;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int EnumCaseMultiPayload;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _BYTE v137[96];

  *(_QWORD *)(v2 - 344) = a1;
  *(_QWORD *)(v2 - 352) = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v2 - 528) = &v137[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 448) = &v137[-v6];
  MEMORY[0x1E0C80A78](v5);
  *(_QWORD *)(v2 - 456) = &v137[-v7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v9 = MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v2 - 512) = &v137[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)(v2 - 416) = &v137[-v12];
  v13 = MEMORY[0x1E0C80A78](v11);
  *(_QWORD *)(v2 - 424) = &v137[-v14];
  MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v2 - 288) = &v137[-v15];
  v16 = type metadata accessor for Proto_TaggedValue(0);
  *(_QWORD *)(v2 - 272) = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v2 - 464) = &v137[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v2 - 472) = &v137[-v20];
  v21 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v2 - 488) = &v137[-v22];
  MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v2 - 280) = &v137[-v23];
  v24 = type metadata accessor for Proto_Value(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  *(_QWORD *)(v2 - 480) = &v137[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = MEMORY[0x1E0C80A78](v26);
  *(_QWORD *)(v2 - 320) = &v137[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  *(_QWORD *)(v2 - 496) = &v137[-v31];
  v32 = MEMORY[0x1E0C80A78](v30);
  *(_QWORD *)(v2 - 304) = &v137[-v33];
  v34 = MEMORY[0x1E0C80A78](v32);
  *(_QWORD *)(v2 - 504) = &v137[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  *(_QWORD *)(v2 - 312) = &v137[-v37];
  MEMORY[0x1E0C80A78](v36);
  v39 = &v137[-v38];
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v41 = MEMORY[0x1E0C80A78](v40);
  *(_QWORD *)(v2 - 520) = &v137[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v43 = MEMORY[0x1E0C80A78](v41);
  *(_QWORD *)(v2 - 360) = &v137[-v44];
  v45 = MEMORY[0x1E0C80A78](v43);
  *(_QWORD *)(v2 - 432) = &v137[-v46];
  v47 = MEMORY[0x1E0C80A78](v45);
  *(_QWORD *)(v2 - 368) = &v137[-v48];
  v49 = MEMORY[0x1E0C80A78](v47);
  *(_QWORD *)(v2 - 440) = &v137[-v50];
  v51 = MEMORY[0x1E0C80A78](v49);
  *(_QWORD *)(v2 - 376) = &v137[-v52];
  v53 = MEMORY[0x1E0C80A78](v51);
  v55 = &v137[-v54];
  MEMORY[0x1E0C80A78](v53);
  v57 = &v137[-v56];
  v58 = v1;
  v59 = v1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v59, (uint64_t)v57, &qword_1ED6F3770);
  v60 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v25) = v60(v57, 1, v24);
  sub_1BDD86E30((uint64_t)v57, &qword_1ED6F3770);
  if ((_DWORD)v25 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v61 = 0xD000000000000017;
    *(_QWORD *)(v61 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v61 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v58;
  sub_1BDD86DEC(v59, (uint64_t)v55, &qword_1ED6F3770);
  *(_QWORD *)(v2 - 328) = v60;
  result = v60(v55, 1, v24);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  sub_1BDDA2E8C((uint64_t)v55, (uint64_t)v39, type metadata accessor for Proto_Value);
  *(_QWORD *)(v2 - 536) = v24;
  v64 = *(_QWORD *)&v39[*(int *)(v24 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v65 = *(_QWORD *)(v2 - 288);
  sub_1BDD86DEC(v64, v65, &qword_1ED6F26F0);
  v66 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48);
  v68 = v67(v65, 1, v66);
  v69 = *(_QWORD *)(v2 - 280);
  if (v68 == 1)
  {
    swift_retain();
    sub_1BDD86E30(v65, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1BDDA2E8C(v65, v69, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0(v65, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v70 = *(int *)(*(_QWORD *)(v2 - 272) + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)(v69 + v70) = qword_1EF52B518;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0((uint64_t)v39, type metadata accessor for Proto_Value);
  v71 = *(_QWORD *)(v2 - 272);
  v72 = *(_QWORD *)(v69 + *(int *)(v71 + 20));
  swift_beginAccess();
  v73 = *(_QWORD *)(v72 + 16);
  sub_1BDD9C3E0(v69, type metadata accessor for Proto_TaggedValue);
  if (!v73)
  {
    v86 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    swift_beginAccess();
    v87 = v86;
    v88 = *(_QWORD *)(v2 - 376);
    sub_1BDD86DEC(v87, v88, &qword_1ED6F3770);
    v89 = *(_QWORD *)(v2 - 536);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 328))(v88, 1, v89);
    if ((_DWORD)result == 1)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v90 = v88;
    v91 = *(_QWORD *)(v2 - 312);
    sub_1BDDA2E8C(v90, v91, type metadata accessor for Proto_Value);
    v92 = *(_QWORD *)(v91 + *(int *)(v89 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v93 = v92;
    v94 = *(_QWORD *)(v2 - 424);
    sub_1BDD86DEC(v93, v94, &qword_1ED6F26F0);
    v95 = v67(v94, 1, v66);
    v96 = *(_QWORD *)(v2 - 440);
    if (v95 == 1)
    {
      sub_1BDD86E30(v94, &qword_1ED6F26F0);
      v97 = *(_QWORD *)(v2 - 296);
      v98 = *(_QWORD *)(v2 - 488);
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v98 = *(_QWORD *)(v2 - 488);
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v94, *(_QWORD *)(v2 - 488), type metadata accessor for Proto_TaggedValue);
        v97 = *(_QWORD *)(v2 - 296);
        goto LABEL_44;
      }
      sub_1BDD9C3E0(v94, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      v97 = *(_QWORD *)(v2 - 296);
    }
    sub_1BE1B20E4();
    v122 = *(int *)(v71 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v98 + v122) = qword_1EF52B518;
    swift_retain();
LABEL_44:
    sub_1BDD9C3E0(*(_QWORD *)(v2 - 312), type metadata accessor for Proto_Value);
    v123 = *(_QWORD *)(v98 + *(int *)(v71 + 20))
         + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1BDD86DEC(v123, v96, &qword_1ED6F3770);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 - 328))(v96, 1, v89) == 1)
    {
      v124 = *(_QWORD *)(v2 - 504);
      sub_1BE1B20E4();
      v125 = *(int *)(v89 + 20);
      if (qword_1ED6F2718 != -1)
        swift_once();
      *(_QWORD *)(v124 + v125) = qword_1ED6F2708;
      swift_retain();
      sub_1BDD86E30(v96, &qword_1ED6F3770);
    }
    else
    {
      v124 = *(_QWORD *)(v2 - 504);
      sub_1BDDA2E8C(v96, v124, type metadata accessor for Proto_Value);
    }
    v126 = *(_QWORD *)(v2 - 456);
    sub_1BDD9C3E0(v98, type metadata accessor for Proto_TaggedValue);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v127 = sub_1BDDB4FC0(v124, v58);
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 408) + 8) + 8) + 8))(v127);
    if (!v97)
    {
      swift_release();
      swift_release();
      v128 = *(_QWORD *)(v2 - 344);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 352) + 32))(*(_QWORD *)(v2 - 336), v126, v128);
    }
    goto LABEL_50;
  }
  if (v73 == 1)
  {
    v74 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    swift_beginAccess();
    v75 = v74;
    v76 = *(_QWORD *)(v2 - 368);
    sub_1BDD86DEC(v75, v76, &qword_1ED6F3770);
    v77 = *(_QWORD *)(v2 - 536);
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 328);
    result = v78(v76, 1, v77);
    if ((_DWORD)result != 1)
    {
      v79 = v76;
      v80 = *(_QWORD *)(v2 - 304);
      sub_1BDDA2E8C(v79, v80, type metadata accessor for Proto_Value);
      v81 = *(_QWORD *)(v80 + *(int *)(v77 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v82 = v81;
      v83 = *(_QWORD *)(v2 - 416);
      sub_1BDD86DEC(v82, v83, &qword_1ED6F26F0);
      if (v67(v83, 1, v66) == 1)
      {
        sub_1BDD86E30(v83, &qword_1ED6F26F0);
        v84 = *(_QWORD *)(v2 - 296);
        v85 = *(_QWORD *)(v2 - 472);
      }
      else
      {
        v111 = swift_getEnumCaseMultiPayload();
        v85 = *(_QWORD *)(v2 - 472);
        if (v111 == 11)
        {
          sub_1BDDA2E8C(v83, *(_QWORD *)(v2 - 472), type metadata accessor for Proto_TaggedValue);
          v84 = *(_QWORD *)(v2 - 296);
          goto LABEL_33;
        }
        sub_1BDD9C3E0(v83, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        v84 = *(_QWORD *)(v2 - 296);
      }
      sub_1BE1B20E4();
      v114 = *(int *)(v71 + 20);
      if (qword_1EF52B520 != -1)
        swift_once();
      *(_QWORD *)(v85 + v114) = qword_1EF52B518;
      swift_retain();
LABEL_33:
      sub_1BDD9C3E0(*(_QWORD *)(v2 - 304), type metadata accessor for Proto_Value);
      v115 = *(_QWORD *)(v85 + *(int *)(v71 + 20))
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      v116 = *(_QWORD *)(v2 - 432);
      sub_1BDD86DEC(v115, v116, &qword_1ED6F3770);
      if (v78(v116, 1, v77) == 1)
      {
        v117 = *(_QWORD *)(v2 - 496);
        sub_1BE1B20E4();
        v118 = *(int *)(v77 + 20);
        if (qword_1ED6F2718 != -1)
          swift_once();
        *(_QWORD *)(v117 + v118) = qword_1ED6F2708;
        swift_retain();
        sub_1BDD86E30(v116, &qword_1ED6F3770);
      }
      else
      {
        v117 = *(_QWORD *)(v2 - 496);
        sub_1BDDA2E8C(v116, v117, type metadata accessor for Proto_Value);
      }
      v119 = *(_QWORD *)(v2 - 448);
      sub_1BDD9C3E0(v85, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v120 = sub_1BDDB4FC0(v117, v58);
      swift_release();
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 400) + 8) + 8) + 8))(v120);
      if (!v84)
      {
        swift_release();
        swift_release();
        v121 = *(_QWORD *)(v2 - 344);
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 352) + 32))(*(_QWORD *)(v2 - 336), v119, v121);
      }
      goto LABEL_50;
    }
    goto LABEL_65;
  }
  v99 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v100 = v99;
  v101 = *(_QWORD *)(v2 - 360);
  sub_1BDD86DEC(v100, v101, &qword_1ED6F3770);
  v102 = *(_QWORD *)(v2 - 536);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 328))(v101, 1, v102);
  if ((_DWORD)result != 1)
  {
    v103 = v101;
    v104 = *(_QWORD *)(v2 - 320);
    sub_1BDDA2E8C(v103, v104, type metadata accessor for Proto_Value);
    v105 = *(_QWORD *)(v104 + *(int *)(v102 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v106 = v105;
    v107 = *(_QWORD *)(v2 - 512);
    sub_1BDD86DEC(v106, v107, &qword_1ED6F26F0);
    if (v67(v107, 1, v66) == 1)
    {
      sub_1BDD86E30(v107, &qword_1ED6F26F0);
      v108 = *(_QWORD *)(v2 - 296);
      v109 = *(_QWORD *)(v2 - 464);
      v110 = *(_QWORD *)(v2 - 520);
    }
    else
    {
      v113 = swift_getEnumCaseMultiPayload();
      v109 = *(_QWORD *)(v2 - 464);
      v110 = *(_QWORD *)(v2 - 520);
      if (v113 == 11)
      {
        sub_1BDDA2E8C(v107, *(_QWORD *)(v2 - 464), type metadata accessor for Proto_TaggedValue);
        v108 = *(_QWORD *)(v2 - 296);
        goto LABEL_56;
      }
      sub_1BDD9C3E0(v107, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      v108 = *(_QWORD *)(v2 - 296);
    }
    sub_1BE1B20E4();
    v129 = *(int *)(v71 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v109 + v129) = qword_1EF52B518;
    swift_retain();
LABEL_56:
    sub_1BDD9C3E0(*(_QWORD *)(v2 - 320), type metadata accessor for Proto_Value);
    v130 = *(_QWORD *)(v109 + *(int *)(v71 + 20))
         + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1BDD86DEC(v130, v110, &qword_1ED6F3770);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 - 328))(v110, 1, v102) == 1)
    {
      v131 = *(_QWORD *)(v2 - 480);
      sub_1BE1B20E4();
      v132 = *(int *)(v102 + 20);
      if (qword_1ED6F2718 != -1)
        swift_once();
      *(_QWORD *)(v131 + v132) = qword_1ED6F2708;
      swift_retain();
      sub_1BDD86E30(v110, &qword_1ED6F3770);
    }
    else
    {
      v131 = *(_QWORD *)(v2 - 480);
      sub_1BDDA2E8C(v110, v131, type metadata accessor for Proto_Value);
    }
    sub_1BDD9C3E0(v109, type metadata accessor for Proto_TaggedValue);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v133 = sub_1BDDB4FC0(v131, v58);
    swift_release();
    AnyCRValue.init(from:)(v133, (uint64_t *)(v2 - 72));
    if (!v108)
    {
      swift_release();
      swift_release();
      v134 = *(_QWORD *)(v2 - 72);
      v135 = *(_QWORD **)(v2 - 528);
      *v135 = v73;
      v135[1] = v134;
      v136 = *(_QWORD *)(v2 - 344);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 352) + 32))(*(_QWORD *)(v2 - 336), v135, v136);
    }
LABEL_50:
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
LABEL_67:
  __break(1u);
  return result;
}

