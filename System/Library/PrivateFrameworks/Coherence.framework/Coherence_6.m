uint64_t sub_1BE155AA8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE155AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BE153BA4(a1, a2, a3, a4, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t type metadata accessor for CRAttributedString.ObservableDifference.Edit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.ObservableDifference.Edit);
}

uint64_t sub_1BE155AEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE155B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BE1509D0(a1, a2, a3, a4, v4[4], v4[2], v4[3]);
}

uint64_t objectdestroy_68Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE155B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BE150A58(a1, a2, a3, a4, v4[4], v4[5], v4[6], v4[2], v4[3]);
}

uint64_t type metadata accessor for CRAttributedString.Cursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Cursor);
}

void sub_1BE155B8C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE155B9C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE155BAC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE155BBC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE155BCC()
{
  JUMPOUT(0x1C3B7DF54);
}

_UNKNOWN **sub_1BE155BDC()
{
  return &protocol witness table for CRAttributedString<A>.Partial;
}

uint64_t sub_1BE155BE8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAttributedString<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BE155C14(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAttributedString<A>.Cursor);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **sub_1BE155C40()
{
  return &protocol witness table for CRAttributedString<A>.Cursor;
}

void sub_1BE155C4C()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE155C64()
{
  return 32;
}

__n128 sub_1BE155C70(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BE155C84()
{
  return 16;
}

__n128 sub_1BE155C90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BE155CA4()
{
  return 32;
}

__n128 sub_1BE155CB0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BE155CC4()
{
  return 16;
}

__n128 sub_1BE155CD0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static CRAttributeStringDecodingKey.loadAttribute(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static CRAttributeStringKey.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static CRAttributeStringAttributeScope.attributeTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1BE155D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_1BE155D48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BE155DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CRAttributedString.Attributes.Keys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Attributes.Keys);
}

uint64_t sub_1BE155DF4()
{
  sub_1BDE27FD0();
  return swift_release();
}

_QWORD *sub_1BE155E24(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  sub_1BDE77680();
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  v10 = a2[5];
  v9 = a2[6];
  a1[4] = v8;
  a1[5] = v10;
  a1[6] = v9;
  swift_retain();
  return a1;
}

_QWORD *sub_1BE155E9C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  sub_1BDE77680();
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  sub_1BDE27FD0();
  v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1BE155F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  sub_1BDE27FD0();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t sub_1BE155FA0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BE155FE8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CRAttributedString.Attributes.Keys.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Attributes.Keys.Iterator);
}

uint64_t type metadata accessor for CRAttributedString.Attributes.Keys.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Attributes.Keys.Index);
}

uint64_t sub_1BE15604C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t sub_1BE156080()
{
  return swift_release();
}

uint64_t sub_1BE15608C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CRAttributedString.Runs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Runs);
}

uint64_t sub_1BE1560D8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BE15610C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BE156154(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CRAttributedString.Runs.Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Runs.Run);
}

_QWORD *sub_1BE156198(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CRAttributedString.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.ObservableDifference);
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1BE156200(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1BE156248(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BE156290(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1BE156298(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

uint64_t sub_1BE1562A8()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BE1562D0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BE156304(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1BE156360(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CRAttributedString.MutatingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.MutatingAction);
}

uint64_t type metadata accessor for CRAttributedString.Partial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRAttributedString.Partial);
}

ValueMetadata *type metadata accessor for CRAttributeStringEmptyScope()
{
  return &type metadata for CRAttributeStringEmptyScope;
}

uint64_t sub_1BE1563C4(uint64_t a1, uint64_t a2)
{
  assignWithTake for CapsuleReference(a2, a1);
  return a2;
}

_QWORD *sub_1BE156400(_QWORD *a1, _QWORD *a2)
{
  assignWithTake for RLEMapping(a2, a1);
  return a2;
}

uint64_t sub_1BE15643C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BE152F44(a1, a2, v2);
}

__n128 sub_1BE156454@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u8[8] = 1;
  return result;
}

uint64_t sub_1BE15646C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BE156490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BE151530(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_1BE15649C()
{
  return swift_deallocObject();
}

uint64_t sub_1BE1564AC()
{
  return objectdestroy_134Tm();
}

void sub_1BE1564B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BE1516F8(a1, a2, a3, a4, v4 + 16, *(__int128 **)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD **)(v4 + 64));
}

uint64_t sub_1BE1564C4()
{
  return swift_deallocObject();
}

uint64_t sub_1BE1564D4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BE1564F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BE1510B4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(void **)(v4 + 48), *(_QWORD *)(v4 + 56));
}

uint64_t sub_1BE156524()
{
  return swift_deallocObject();
}

uint64_t sub_1BE156534()
{
  return objectdestroy_134Tm();
}

uint64_t objectdestroy_134Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void sub_1BE156574(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  sub_1BE15126C(a1, a2, a3, a4, v4 + 16, *(_BYTE **)(v4 + 48), *(_BYTE **)(v4 + 56));
}

uint64_t sub_1BE156580()
{
  return swift_deallocObject();
}

uint64_t sub_1BE156590()
{
  return swift_deallocObject();
}

uint64_t sub_1BE1565A0()
{
  return swift_deallocObject();
}

uint64_t sub_1BE1565B0(uint64_t a1, uint64_t a2)
{
  assignWithTake for CRContext.WeakContext(a2, a1);
  return a2;
}

uint64_t sub_1BE15668C(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;

  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 192))(a1, &v4);
}

void sub_1BE1566BC()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE15671C(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v11 = *a2;
  v10 = a2[1];
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16))
  {
    sub_1BDDB6CA4(v11, v10);
    swift_bridgeObjectRetain();
    sub_1BDDB7F0C(v11, v10);
    if ((v14 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v11, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    result = sub_1BDDB796C(v11, v10);
  }
  if ((a4 & 1) == 0)
  {
    type metadata accessor for CRDecodeContext.DecodingReference(0, a5, a6, v13);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(v15 + 24) = v10;
    swift_beginAccess();
    sub_1BDDB6CA4(v11, v10);
    sub_1BDDB6CA4(v11, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_1BDD8CE44(v15, v11, v10, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v6 + 16) = v17;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BE1568F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;

  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v8 + 16))
  {
    sub_1BDDB6CA4(a2, a3);
    swift_bridgeObjectRetain();
    v9 = sub_1BDE5E12C(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_retain();
      swift_bridgeObjectRelease();
      result = sub_1BDDB796C(a2, a3);
      *a4 = v11;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease();
  result = sub_1BDDB796C(a2, a3);
  __break(1u);
  return result;
}

void sub_1BE1569C8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE156A10()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE156A58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v41 = a6;
  v12 = *v6;
  v13 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v13);
  v43 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Proto_Document(0);
  v15 = MEMORY[0x1E0C80A78](v42);
  v44 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v12 + 112);
  v51 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v40 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v39 - v20;
  sub_1BDDB6CA4(a1, a2);
  sub_1BDDB6CA4(a3, a4);
  v45 = a3;
  v46 = a4;
  sub_1BDDB796C(a3, a4);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v22 = v47;
  result = sub_1BDE11D48(a1, a2, a5);
  if (!v22)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 120) + 16) + 8) + 8))(result, v17);
    v24 = swift_allocObject();
    v25 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = v25;
    v26 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v26;
    *(_BYTE *)(v24 + 48) = 0;
    *(_QWORD *)(v24 + 56) = 0;
    v27 = v24 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v28 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
    v29 = v24 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v30 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    *(_QWORD *)(v24 + 16) = a5;
    swift_retain();
    swift_release();
    *(_BYTE *)(v24 + 49) = 1;
    v49 = 0;
    memset(v48, 0, sizeof(v48));
    sub_1BDDB6CA4(v45, v46);
    sub_1BE1B20FC();
    sub_1BE156F40();
    v31 = (uint64_t)v44;
    sub_1BE1B2270();
    sub_1BDE0F688(v31, &v50);
    sub_1BE156F88(v31);
    swift_setDeallocating();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD86E30(v24 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
    sub_1BDD86E30(v24 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
    swift_deallocClassInstance();
    v47 = v50;
    v32 = v51;
    v33 = (uint64_t)v40;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v40, v21, v17);
    sub_1BDD85BB4(v33, v17, (uint64_t **)v48);
    v34 = *(_QWORD *)&v48[0];
    v35 = MEMORY[0x1E0DEE9D8];
    v36 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v37 = sub_1BDDB6CE8(v35);
    sub_1BDDB6E0C(v35);
    sub_1BDDB6CE8(v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v38 = v41;
    *v41 = v34;
    v38[1] = 0;
    *((_OWORD *)v38 + 1) = v47;
    v38[4] = v36;
    v38[5] = v37;
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v21, v17);
  }
  return result;
}

uint64_t type metadata accessor for CRDecodeContext()
{
  return objc_opt_self();
}

unint64_t sub_1BE156F40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F3820;
  if (!qword_1ED6F3820)
  {
    v1 = type metadata accessor for Proto_Document(255);
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C690C, v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F3820);
  }
  return result;
}

uint64_t sub_1BE156F88(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Proto_Document(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BE156FC4()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1BDDC6C38(0, &qword_1EF531148);
    sub_1BE1B27C8();

    qword_1EF5497D0 = sub_1BE1B2ED0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1BE157088(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;

  v25 = a4;
  v23 = a2;
  v24 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v16 = *(int *)(v13 + 20);
  if (qword_1EF52BEB8 != -1)
    swift_once();
  *(_QWORD *)&v15[v16] = qword_1EF530418;
  sub_1BDD9C318(v24, (uint64_t)v12, a3);
  swift_retain();
  v25(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
  sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
  v17 = v27;
  v18 = sub_1BE1B227C();
  if (!v17)
  {
    v20 = v18;
    v21 = v19;
    (*(void (**)(void))(*(_QWORD *)(v23 + 24) + 32))();
    sub_1BDDB796C(v20, v21);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Peer_Message);
}

uint64_t sub_1BE15727C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 32))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_1BE157298(uint64_t a1, uint64_t a2)
{
  return sub_1BE157088(a1, a2, type metadata accessor for Peer_MergeResponse, (void (*)(char *))sub_1BE118C60);
}

uint64_t sub_1BE1572BC(uint64_t a1, uint64_t a2)
{
  return sub_1BE157088(a1, a2, type metadata accessor for Peer_MergeRequest, (void (*)(char *))sub_1BE118A4C);
}

uint64_t sub_1BE1572E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE15727C(a1, a2, a3);
}

uint64_t sub_1BE1572F4(uint64_t a1, uint64_t a2)
{
  return sub_1BE15DED8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BE157300);
}

uint64_t *sub_1BE157300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 120);
  *(uint64_t *)((char *)v4 + v8) = 0;
  v9 = (uint64_t)v4 + *(_QWORD *)(*v4 + 112);
  type metadata accessor for Capsule(255, *(_QWORD *)(v7 + 80), *(_QWORD *)(*(_QWORD *)(v7 + 96) + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v10 = sub_1BE1B242C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a2, v10);
  *(uint64_t *)((char *)v4 + v8) = a1;
  swift_release();
  return v4;
}

uint64_t sub_1BE1573AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 112);
  type metadata accessor for Capsule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 96) + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v6 = sub_1BE1B242C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return v4;
}

uint64_t sub_1BE15743C()
{
  return sub_1BDD93094((void (*)(void))sub_1BE1573AC);
}

void CRPeerSyncManager.CRPeerPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)();
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v5 = v4;
  v77 = a4;
  v83 = *(_QWORD *)(a2 + 16);
  v84 = a2;
  v82 = *(_QWORD *)(a2 + 32);
  v8 = type metadata accessor for Capsule(255, v83, *(_QWORD *)(v82 + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v75 = v8;
  v9 = sub_1BE1B242C();
  v72 = sub_1BE1B2EE8();
  v71 = *(_QWORD *)(v72 - 8);
  v10 = MEMORY[0x1E0C80A78](v72);
  v76 = (_QWORD *)((char *)v69 - v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v70 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v74 = (char *)v69 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v73 = (char *)v69 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v78 = (char *)v69 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v69 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)v69 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (_QWORD *)((char *)v69 - v30);
  MEMORY[0x1E0C80A78](v29);
  v79 = (char *)v69 - v32;
  v33 = *v5;
  v81 = v34;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v85 = a1;
  v36 = a1;
  v38 = v37;
  v35(v25, v36, a3);
  v35(v22, (uint64_t)v25, a3);
  v80 = v33;
  v39 = (char *)v76;
  swift_retain();
  v40 = swift_dynamicCast();
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  if (v40)
  {
    v41(v39, 0, 1, v9);
    v42 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v42(v28, v39, v9);
    v42((char *)v31, v28, v9);
  }
  else
  {
    v69[1] = v38;
    v41(v39, 1, 1, v9);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v39, v72);
    v43 = v77;
    sub_1BE1B23CC();
    sub_1BE1B2450();
    v35(v78, (uint64_t)v25, a3);
    v44 = sub_1BE1B245C();
    v76 = v31;
    *v31 = v44;
    v45 = (void (*)(char *, char *, uint64_t))v35;
    v35(v73, (uint64_t)v25, a3);
    v73 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF500);
    v46 = v25;
    v47 = a3;
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1BDD85B8C(&v86, (uint64_t)&v89);
      sub_1BDD85B8C(&v89, (uint64_t)&v86);
      v48 = swift_allocObject();
      sub_1BDD85B8C(&v86, v48 + 16);
      v49 = sub_1BE15E8E8;
    }
    else
    {
      v88 = 0;
      v86 = 0u;
      v87 = 0u;
      sub_1BDD86E30((uint64_t)&v86, (uint64_t *)&unk_1EF52D8C8);
      swift_getDynamicType();
      v50 = v43;
      v51 = sub_1BE1B37AC();
      v53 = v52;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v51;
      *(_QWORD *)(v48 + 24) = v53;
      v43 = v50;
      v49 = sub_1BE15E490;
    }
    v54 = v81;
    v55 = v76;
    v76[1] = (uint64_t)v49;
    v55[2] = v48;
    v56 = v78;
    v45(v78, v46, v47);
    v57 = (*(unsigned __int8 *)(v54 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    v58 = (char *)swift_allocObject();
    *((_QWORD *)v58 + 2) = v75;
    *((_QWORD *)v58 + 3) = v47;
    *((_QWORD *)v58 + 4) = v43;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v58[v57], v56, v47);
    v55[3] = (uint64_t)sub_1BDEE1CA8;
    v55[4] = (uint64_t)v58;
    v45(v74, v46, v47);
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED6EF510);
    if (swift_dynamicCast())
    {
      sub_1BDD85B8C(&v86, (uint64_t)&v89);
      sub_1BDD85B8C(&v89, (uint64_t)&v86);
      v59 = swift_allocObject();
      sub_1BDD85B8C(&v86, v59 + 16);
      v55[5] = (uint64_t)sub_1BE15E8A0;
      v55[6] = v59;
    }
    else
    {
      v88 = 0;
      v86 = 0u;
      v87 = 0u;
      sub_1BDD86E30((uint64_t)&v86, (uint64_t *)&unk_1EF52D8D8);
      v45(v70, v46, v47);
      if (swift_dynamicCast())
      {
        sub_1BDD85B8C(&v86, (uint64_t)&v89);
        sub_1BDD85B8C(&v89, (uint64_t)&v86);
        v60 = swift_allocObject();
        sub_1BDD85B8C(&v86, v60 + 16);
        v61 = (char *)v76;
        v76[5] = (uint64_t)sub_1BE15E7E4;
        *((_QWORD *)v61 + 6) = v60;
      }
      else
      {
        v88 = 0;
        v86 = 0u;
        v87 = 0u;
        sub_1BDD86E30((uint64_t)&v86, (uint64_t *)&unk_1EF52D8C8);
        swift_getDynamicType();
        v62 = sub_1BE1B37AC();
        v64 = v63;
        v65 = swift_allocObject();
        *(_QWORD *)(v65 + 16) = v62;
        *(_QWORD *)(v65 + 24) = v64;
        v66 = (char *)v76;
        v76[5] = (uint64_t)sub_1BE15E770;
        *((_QWORD *)v66 + 6) = v65;
      }
    }
  }
  v67 = *(_QWORD *)(v84 + 24);
  v68 = *(_QWORD *)(v84 + 40);
  *(_QWORD *)&v89 = v83;
  *((_QWORD *)&v89 + 1) = v67;
  v90 = v82;
  v91 = v68;
  type metadata accessor for CRPeerSyncManagerSubscription();
}

uint64_t sub_1BE157AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(v7 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v6, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v1);
  v10 = swift_allocObject();
  sub_1BE157300(*(_QWORD *)(v7 - 224), v9, v11, v12);
  *(_QWORD *)(v7 - 176) = v10;
  swift_beginAccess();
  sub_1BE1B2A5C();
  swift_retain();
  sub_1BE1B2A20();
  swift_endAccess();
  *(_QWORD *)(v7 - 104) = a1;
  *(_QWORD *)(v7 - 96) = MEMORY[0x1C3B7DF54](&unk_1BE1C75B0, a1);
  *(_QWORD *)(v7 - 128) = v10;
  sub_1BE1B23E4();
  return __swift_destroy_boxed_opaque_existential_1(v7 - 128);
}

void sub_1BE157BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CRPeerSyncManager.CRPeerPublisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t CRPeerSyncManager.publisher.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t sub_1BE157BE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 104);
  v3 = *(_QWORD *)(v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v9 - v6;
  v10 = 0;
  v11 = 0xE000000000000000;
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_release();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
    sub_1BE1B347C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1BE157D44()
{
  __asm { BR              X10 }
}

uint64_t sub_1BE157D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF52C0F8 != -1)
    swift_once();
  sub_1BE1B2DC8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BE1B61B0;
  v1 = sub_1BE157BE4();
  v3 = v2;
  *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v0 + 64) = sub_1BE160264();
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = v3;
  sub_1BE1B239C();
  return swift_bridgeObjectRelease();
}

void sub_1BE158018()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t aBlock;
  uint64_t v41;
  uint64_t v42;
  _UNKNOWN **v43;

  v1 = (_QWORD *)*v0;
  v37 = sub_1BE1B248C();
  v2 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B24BC();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v32 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B2498();
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x1E0C80A78](v7);
  v28 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Peer_Message(0);
  v9 = MEMORY[0x1E0C80A78](v23);
  v39 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1[11];
  v12 = MEMORY[0x1E0C80A78](v9);
  v24 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v13;
  MEMORY[0x1E0C80A78](v12);
  v38 = v1[13];
  v15 = type metadata accessor for CRPeerDataConsumer(0, v11, v38, v14);
  MEMORY[0x1E0C80A78](v15);
  if (swift_weakLoadStrong())
  {
    v35 = v4;
    v36 = v2;
    v17 = v1[10];
    v18 = v1[12];
    type metadata accessor for Capsule(0, v17, *(_QWORD *)(v18 + 16), v16);
    v29 = swift_allocBox();
    sub_1BE1586C4(v29, v19, v20, v21);
    v25 = v17;
    aBlock = v17;
    v41 = v15;
    v26 = v18;
    v42 = v18;
    v43 = &off_1E77589A8;
    type metadata accessor for LocalCapsuleSource();
  }
  sub_1BE1B3200();
  __break(1u);
  JUMPOUT(0x1BE158678);
}

uint64_t sub_1BE1586C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Capsule(0, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 96) + 16), a4);
  return sub_1BE1B2E40();
}

void sub_1BE158730(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;
  _QWORD *v39;

  v30 = a5;
  v27 = a4;
  v6 = (_QWORD *)*a2;
  v23 = a3;
  v7 = *a3;
  v8 = sub_1BE1B248C();
  MEMORY[0x1E0C80A78](v8);
  v34 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B24BC();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v31 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(*(_QWORD *)(v7 + 88) - 8);
  MEMORY[0x1E0C80A78](v11);
  v25 = v13;
  v28 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v7 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v20[2] = (char *)v20 - v14;
  v15 = v6[10];
  v16 = v6[12];
  v18 = type metadata accessor for Capsule(0, v15, *(_QWORD *)(v16 + 16), v17);
  v20[1] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  swift_projectBox();
  v39 = a2;
  swift_beginAccess();
  v19 = v6[11];
  v22 = v15;
  v35 = v15;
  v36 = v19;
  v24 = v16;
  v37 = v16;
  v38 = &off_1E77589A8;
  type metadata accessor for LocalCapsuleSource();
}

uint64_t sub_1BE15892C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = MEMORY[0x1C3B7DF54](&unk_1BE1C2740, a1);
  sub_1BE1703A4(v7 - 96, v1, a1, v9);
  swift_endAccess();
  *(_QWORD *)(v7 - 192) = v3;
  *(_QWORD *)(v7 - 184) = v2;
  if (qword_1EF52C0F8 != -1)
    swift_once();
  sub_1BE1B2DC8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BE1B61B0;
  v11 = *(_QWORD *)(v7 - 288);
  v12 = sub_1BE157BE4();
  v14 = v13;
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v10 + 64) = sub_1BE160264();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  sub_1BE1B239C();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v15 = *(_QWORD *)(v7 - 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v6, v4, v1);
  v16 = *(_QWORD *)(v7 - 264);
  v17 = *(_QWORD *)(v7 - 320);
  v18 = *(_QWORD *)(v7 - 232);
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v5, v16);
  sub_1BE158CAC(v6, v17);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 312) + 8))(v17, *(_QWORD *)(v7 - 304));
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v1);
  v20 = *(_QWORD *)(v7 - 248);
  v19 = *(_QWORD *)(v7 - 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v20, v18, v5);
  v21 = (*(unsigned __int8 *)(v19 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v22 = (*(_QWORD *)(v7 - 272) + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = *(_QWORD *)(v7 - 296);
  *((_QWORD *)v23 + 3) = v5;
  *((_QWORD *)v23 + 4) = *(_QWORD *)(v7 - 280);
  *((_QWORD *)v23 + 5) = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(&v23[v21], v20, v5);
  *(_QWORD *)&v23[v22] = v11;
  *(_QWORD *)(v7 - 144) = sub_1BE160614;
  *(_QWORD *)(v7 - 136) = v23;
  *(_QWORD *)(v7 - 176) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v7 - 168) = 1107296256;
  *(_QWORD *)(v7 - 160) = sub_1BDDBE6A4;
  *(_QWORD *)(v7 - 152) = &block_descriptor_84_0;
  v24 = _Block_copy((const void *)(v7 - 176));
  swift_retain();
  v25 = *(_QWORD *)(v7 - 224);
  sub_1BE1B24A4();
  *(_QWORD *)(v7 - 96) = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v26 = *(_QWORD *)(v7 - 200);
  v27 = *(_QWORD *)(v7 - 184);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v25, v26, v24);
  _Block_release(v24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 8))(v26, v27);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 216) + 8))(v25, *(_QWORD *)(v7 - 208));
  return swift_release();
}

uint64_t sub_1BE158CAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[7];

  v35 = a1;
  v36 = a2;
  v3 = (_QWORD *)*v2;
  v40 = sub_1BE1B248C();
  v43 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v39 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B24BC();
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  MEMORY[0x1E0C80A78](v5);
  v38 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v3[13];
  v33 = v3[11];
  v34 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = v3[12];
  v31 = v3[10];
  v32 = v12;
  v14 = type metadata accessor for Capsule(0, v31, *(_QWORD *)(v12 + 16), v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v30 - v17;
  v37 = *(_QWORD *)((char *)v2 + v3[20]);
  v30 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v35, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v36, AssociatedTypeWitness);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = (v16 + *(unsigned __int8 *)(v9 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v21 = (char *)swift_allocObject();
  v22 = v30;
  v23 = v33;
  *((_QWORD *)v21 + 2) = v31;
  *((_QWORD *)v21 + 3) = v23;
  v24 = v34;
  *((_QWORD *)v21 + 4) = v32;
  *((_QWORD *)v21 + 5) = v24;
  *((_QWORD *)v21 + 6) = v22;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v21[v19], v18, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v20], v11, AssociatedTypeWitness);
  aBlock[4] = sub_1BE16043C;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_72_0;
  v25 = _Block_copy(aBlock);
  swift_retain();
  v26 = v38;
  sub_1BE1B24A4();
  v44 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v27 = v39;
  v28 = v40;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v26, v27, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v42);
  swift_release();
  return swift_release();
}

uint64_t sub_1BE15900C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *a2;
  v3 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v6 = *(int *)(v3 + 20);
  if (qword_1EF52BEB8 != -1)
    swift_once();
  *(_QWORD *)&v5[v6] = qword_1EF530418;
  swift_retain();
  sub_1BE118E74(1);
  sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
  v7 = sub_1BE1B227C();
  v9 = v8;
  (*(void (**)(void))(*(_QWORD *)(v2 + 104) + 32))();
  sub_1BDDB796C(v7, v9);
  sub_1BE159174(0, v10, v11, v12);
  return sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Peer_Message);
}

void sub_1BE159174(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = v4;
  v7 = *v5;
  v8 = type metadata accessor for Capsule(0, *(_QWORD *)(*v5 + 80), *(_QWORD *)(*(_QWORD *)(*v5 + 96) + 16), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(v7 + 144);
  if ((*((_BYTE *)v5 + v12) & 1) != 0 || (a1 & 1) != 0)
  {
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_1BE1586C4(Strong, v14, v15, v16);
      swift_release();
      sub_1BE15B0BC((uint64_t)v11, v17, v18, v19);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      *((_BYTE *)v5 + v12) = 0;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BE15FF00(0xC000000000000000);
  }
}

void sub_1BE15926C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v48 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v50);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v1;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v13 = *(id *)(Strong + qword_1EF5497D8);
    swift_release();
    v15 = type metadata accessor for Capsule(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(*(_QWORD *)(v3 + 96) + 16), v14);
    Capsule<>.delta(_:from:)((uint64_t)v13, v2, v15, &v51);
    if (!v51)
    {

      return;
    }
    v41 = v51;
    v42 = v3;
    v45 = v9;
    v46 = v5;
    v47 = v4;
    v16 = v54;
    v43 = v53;
    v44 = v52;
    v17 = v55;
    v18 = v56;
    v40 = v57;
    if (qword_1EF52C0F8 != -1)
      swift_once();
    sub_1BE1B2DC8();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1BE1B61B0;
    v20 = sub_1BE157BE4();
    v22 = v21;
    *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v19 + 64) = sub_1BE160264();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v22;
    sub_1BE1B239C();
    swift_bridgeObjectRelease();
    sub_1BE1B20E4();
    v23 = *(int *)(v50 + 20);
    if (qword_1EF52BEB8 != -1)
      swift_once();
    *(_QWORD *)&v11[v23] = qword_1EF530418;
    type metadata accessor for CREncoder();
    v24 = swift_allocObject();
    v25 = MEMORY[0x1E0DEE9D8];
    v26 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v24 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v24 + 40) = v25;
    *(_QWORD *)(v24 + 48) = v25;
    *(_QWORD *)(v24 + 56) = v26;
    *(_QWORD *)(v24 + 64) = v25;
    *(_QWORD *)(v24 + 80) = 0;
    *(_QWORD *)(v24 + 88) = 0;
    *(_QWORD *)(v24 + 16) = v13;
    *(_QWORD *)(v24 + 24) = v25;
    *(_BYTE *)(v24 + 72) = 2;
    v27 = v41;
    v51 = v41;
    v52 = v44;
    v38 = v11;
    v53 = v43;
    v54 = v16;
    v55 = v17;
    v56 = v18;
    v57 = v40;
    v28 = v13;
    swift_retain();
    v29 = (uint64_t)v45;
    v39 = v28;
    sub_1BDE18088(v28, (uint64_t)&v51, (uint64_t)v45);
    swift_release();
    v37 = 0;
    sub_1BDEE1E04(v27);
    v30 = (uint64_t)v38;
    sub_1BE116D30(v29);
    v2 = (uint64_t)v48;
    v5 = v46;
    v4 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, (uint64_t)v49 + *(_QWORD *)(*v49 + 112), v47);
    sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
    v31 = v37;
    v32 = sub_1BE1B227C();
    if (!v31)
    {
      v34 = v32;
      v35 = v33;
      (*(void (**)(void))(*(_QWORD *)(v42 + 104) + 32))();
      sub_1BDDB796C(v34, v35);

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
      sub_1BDD9C3E0(v30, type metadata accessor for Peer_Message);
      return;
    }
  }
  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_1BE1596EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v35 = *(_QWORD *)(*v1 + 88);
  v36 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v34 = (char *)&v34 - v7;
  v8 = *(_QWORD *)(v3 + 80);
  v39 = *(_QWORD *)(v3 + 96);
  v9 = *(_QWORD *)(v39 + 16);
  v43 = type metadata accessor for Capsule(0, v8, v9, v10);
  v11 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v13 = (char *)&v34 - v12;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v40 = Strong;
    v41 = v1;
    sub_1BE1586C4(Strong, v15, v16, v17);
    type metadata accessor for CRDecoder(0);
    v18 = swift_allocObject();
    v19 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = v19;
    v20 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 56) = 0;
    v21 = v18 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v22 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
    v23 = v18 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v24 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    *(_QWORD *)(v18 + 16) = 0;
    swift_release();
    *(_WORD *)(v18 + 48) = 513;
    if (qword_1ED6F3C80 != -1)
      swift_once();
    v37 = v6;
    v38 = AssociatedTypeWitness;
    v42 = v11;
    v25 = qword_1ED6F8BA8;
    swift_retain();
    sub_1BDE0FE60(a1, (uint64_t)v13, v25, v8, v9, &v44);
    swift_release();
    v26 = Capsule<>.merge(delta:)(&v44, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
      if (qword_1EF52C0F8 != -1)
        swift_once();
      sub_1BE1B2DC8();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1BE1B61B0;
      v29 = sub_1BE157BE4();
      v31 = v30;
      *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v28 + 64) = sub_1BE160264();
      *(_QWORD *)(v28 + 32) = v29;
      *(_QWORD *)(v28 + 40) = v31;
      sub_1BE1B239C();
      swift_bridgeObjectRelease();
      v32 = (uint64_t)v34;
      (*(void (**)(uint64_t))(v36 + 24))(v35);
      sub_1BE158CAC((uint64_t)v13, v32);
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v32, v38);
    }
    else
    {
      sub_1BE159B98(v27);
      swift_release();
      swift_setDeallocating();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDD86E30(v18 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
      sub_1BDD86E30(v18 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
      swift_deallocClassInstance();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v43);
  }
  else
  {
    sub_1BE1B3200();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE159B98(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v20 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v20 + 88);
  v21 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF52C0F8 != -1)
    swift_once();
  sub_1BE1B2DC8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BE1B61B0;
  v10 = sub_1BE157BE4();
  v12 = v11;
  *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v9 + 64) = sub_1BE160264();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  sub_1BE1B239C();
  swift_bridgeObjectRelease();
  sub_1BE1B20E4();
  v13 = *(int *)(v6 + 20);
  if (qword_1EF52BEB8 != -1)
    swift_once();
  *(_QWORD *)&v8[v13] = qword_1EF530418;
  swift_retain();
  sub_1BE118834(1);
  v14 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v5, &v2[*(_QWORD *)(*(_QWORD *)v2 + 112)], v3);
  sub_1BDD8422C((unint64_t *)&unk_1EF52D8E8, type metadata accessor for Peer_Message, (uint64_t)&unk_1BE1C3740);
  v15 = sub_1BE1B227C();
  v17 = v16;
  (*(void (**)(void))(*(_QWORD *)(v20 + 104) + 32))();
  sub_1BDDB796C(v15, v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v3);
  return sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Peer_Message);
}

uint64_t sub_1BE159E4C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1BE1B248C();
  v19 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B24BC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)((char *)v3 + *(_QWORD *)(v6 + 120));
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v6 + 80);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v6 + 88);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v6 + 104);
  *(_QWORD *)(v15 + 48) = v14;
  *(_QWORD *)(v15 + 56) = a1;
  *(_QWORD *)(v15 + 64) = a2;
  aBlock[4] = sub_1BE1602E0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_65;
  v16 = _Block_copy(aBlock);
  swift_retain();
  sub_1BDDB6CA4(a1, a2);
  sub_1BE1B24A4();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_1BE15A098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a2;
  v54 = a3;
  v8 = type metadata accessor for Peer_MergeResponse(0);
  MEMORY[0x1E0C80A78](v8);
  v39[4] = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5301C0);
  MEMORY[0x1E0C80A78](v10);
  v46 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Peer_MergeRequest(0);
  MEMORY[0x1E0C80A78](v12);
  v42 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1BE1B1F58();
  v39[3] = *(_QWORD *)(v40 - 8);
  v14 = MEMORY[0x1E0C80A78](v40);
  v39[1] = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v39[2] = (char *)v39 - v16;
  v48 = type metadata accessor for Capsule(255, a4, *(_QWORD *)(a6 + 16), v17);
  v51 = sub_1BE1B2EE8();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v50 = (char *)v39 - v18;
  v19 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v19);
  v41 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D8F8);
  v22 = MEMORY[0x1E0C80A78](v21);
  v44 = (char *)v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v25 = MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  v26 = sub_1BE1B2108();
  v27 = MEMORY[0x1E0C80A78](v26);
  v28 = MEMORY[0x1E0C80A78](v27);
  v29 = MEMORY[0x1E0C80A78](v28);
  MEMORY[0x1E0C80A78](v29);
  v30 = type metadata accessor for Peer_Message(0);
  v31 = MEMORY[0x1E0C80A78](v30);
  v43 = (char *)v39 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v45 = (char *)v39 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v47 = (char *)v39 - v36;
  MEMORY[0x1E0C80A78](v35);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v38 = *(_QWORD *)(*(_QWORD *)result + 128);
    v52 = result;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1BE15B0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD v28[2];

  v6 = *v4;
  v7 = type metadata accessor for Capsule(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*(_QWORD *)(*v4 + 96) + 16), a4);
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v28 - v14;
  v16 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v28 - v17;
  v19 = (uint64_t)v4 + *(_QWORD *)(v6 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v19, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    goto LABEL_6;
  }
  v28[0] = v12;
  v28[1] = v4;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v7);
  sub_1BE17A3A0(v7);
  v20 = swift_bridgeObjectRetain();
  v21 = sub_1BDEF6288(v20);
  sub_1BE17A3A0(v7);
  v22 = swift_bridgeObjectRetain();
  v23 = sub_1BDEF6288(v22);
  v24 = a1;
  v25 = sub_1BE15F3C8(v21, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v7);
    a1 = v24;
LABEL_6:
    sub_1BE15B318(a1);
  }
  sub_1BE15926C((uint64_t)v18);
  v26 = v28[0];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v16 + 16))(v28[0], v24, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v7);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v19, v26, v8);
  swift_endAccess();
  sub_1BE15FF00(0xC000000000000000);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v7);
}

void sub_1BE15B318(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;

  v17 = a1;
  v2 = (_QWORD *)*v1;
  v3 = sub_1BE1B1F58();
  v13[3] = *(_QWORD *)(v3 - 8);
  v13[4] = v3;
  MEMORY[0x1E0C80A78](v3);
  v13[2] = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Peer_Message(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v7 = v2[11];
  v8 = MEMORY[0x1E0C80A78](v6);
  v15 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v14 = v2[13];
  v11 = type metadata accessor for CRPeerDataConsumer(0, v7, v14, v10);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v1 + v2[17];
  if (swift_weakLoadStrong())
  {
    v12 = v2[12];
    v18 = v2[10];
    v19 = v11;
    v20 = v12;
    v21 = &off_1E77589A8;
    type metadata accessor for RemoteCapsuleSource();
  }
  __break(1u);
  JUMPOUT(0x1BE15B690);
}

uint64_t sub_1BE15B6E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v2 = v1;
  v22[0] = a1;
  v3 = (_QWORD *)*v1;
  v24 = sub_1BE1B248C();
  v27 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v23 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B24BC();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v3[10];
  v9 = v3[12];
  v11 = type metadata accessor for Capsule(0, v8, *(_QWORD *)(v9 + 16), v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v22 - v13;
  v22[1] = *(_QWORD *)((char *)v2 + v3[15]);
  v15 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 16))(v14, v22[0], v11);
  v16 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = v8;
  *((_QWORD *)v17 + 3) = v3[11];
  *((_QWORD *)v17 + 4) = v9;
  *((_QWORD *)v17 + 5) = v3[13];
  *((_QWORD *)v17 + 6) = v15;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v17[v16], v14, v11);
  aBlock[4] = sub_1BE15F360;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_58_0;
  v18 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v20 = v23;
  v19 = v24;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v7, v20, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v19);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
  swift_release();
  return swift_release();
}

uint64_t sub_1BE15B9A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_QWORD *)(result + *(_QWORD *)(*(_QWORD *)result + 128)) == 0xC000000000000000)
      sub_1BE15B0BC(a2, v4, v5, v6);
    else
      *(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result + 144)) = 1;
    return swift_release();
  }
  return result;
}

uint64_t *sub_1BE15BA28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));

  swift_release();
  swift_weakDestroy();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  type metadata accessor for Capsule(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(*(_QWORD *)(v1 + 96) + 16), v3);
  v4 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  return v0;
}

uint64_t sub_1BE15BADC()
{
  return sub_1BDD93094((void (*)(void))sub_1BE15BA28);
}

uint64_t CRPeerSyncManager.name.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CRPeerSyncManager.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 176));
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*CRPeerSyncManager.name.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t CRPeerSyncManager.enableMeshForwarding.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_beginAccess();
  return *v1;
}

uint64_t CRPeerSyncManager.enableMeshForwarding.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184));
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*CRPeerSyncManager.enableMeshForwarding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CRPeerSyncManager.addPeer(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  char *v22;
  _QWORD v24[2];
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = (_QWORD *)*v1;
  v26 = sub_1BE1B248C();
  v29 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v25 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BE1B24BC();
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v4[11];
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v7);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)((char *)v2 + qword_1EF5497D8);
  v24[1] = *(_QWORD *)((char *)v2 + v4[21]);
  v15 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v16 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = v4[10];
  *((_QWORD *)v18 + 3) = v10;
  *((_QWORD *)v18 + 4) = v4[12];
  *((_QWORD *)v18 + 5) = v4[13];
  *((_QWORD *)v18 + 6) = v15;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v18[v16], v13, v10);
  *(_QWORD *)&v18[v17] = v14;
  aBlock[4] = sub_1BE15E9D4;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_14;
  v19 = _Block_copy(aBlock);
  swift_retain();
  v20 = v14;
  sub_1BE1B24A4();
  v30 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v22 = v25;
  v21 = v26;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v9, v22, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_1BE15BF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23[10] = a2;
  v11 = *(_QWORD *)(a5 - 8);
  v23[5] = a3;
  v23[6] = v11;
  MEMORY[0x1E0C80A78](a1);
  v23[11] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Capsule(0, v14, *(_QWORD *)(v13 + 16), v14);
  v23[8] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v23[9] = (char *)v23 - v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23[7] = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v21 = result;
    v23[4] = v15;
    v24 = *(void (**)(uint64_t, uint64_t))(a7 + 24);
    v24(a5, a7);
    v22 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 144);
    swift_beginAccess();
    v23[3] = v22;
    v25 = a4;
    v26 = a5;
    v27 = a6;
    v28 = a7;
    type metadata accessor for CRPeerSyncManager.PeerInfo();
  }
  return result;
}

uint64_t sub_1BE15C500@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v6 = (uint64_t)a1 + *(_QWORD *)(*a1 + 136);
  swift_beginAccess();
  v8 = type metadata accessor for Capsule(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(*(_QWORD *)(v5 + 96) + 16), v7);
  Capsule.finalizeTimestamps(_:)(a2, v8);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, v6, v8);
}

uint64_t CRPeerSyncManager.receive(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v28 = a1;
  v29 = a2;
  v5 = (_QWORD *)*v3;
  v32 = sub_1BE1B248C();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B24BC();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x1E0C80A78](v7);
  v27 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v5[13];
  v10 = v5[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v27 - v14;
  v30 = *(_QWORD *)((char *)v3 + v5[21]);
  v16 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, AssociatedTypeWitness);
  v17 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = v5[10];
  *((_QWORD *)v18 + 3) = v10;
  *((_QWORD *)v18 + 4) = v5[12];
  *((_QWORD *)v18 + 5) = v9;
  *((_QWORD *)v18 + 6) = v16;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v18[v17], v15, AssociatedTypeWitness);
  v19 = (uint64_t *)&v18[(v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8];
  v21 = v28;
  v20 = v29;
  *v19 = v28;
  v19[1] = v20;
  aBlock[4] = sub_1BE15EAB4;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_28;
  v22 = _Block_copy(aBlock);
  swift_retain();
  sub_1BDDB6CA4(v21, v20);
  v23 = v27;
  sub_1BE1B24A4();
  v36 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v25 = v31;
  v24 = v32;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v23, v25, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v34);
  swift_release();
  return swift_release();
}

uint64_t CRPeerSyncManager.removePeer(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[2];
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v2 = v1;
  v21[0] = a1;
  v3 = (_QWORD *)*v1;
  v23 = sub_1BE1B248C();
  v26 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v22 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B24BC();
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v3[13];
  v9 = v3[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v21 - v12;
  v21[1] = *(_QWORD *)((char *)v2 + v3[21]);
  v14 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))(v13, v21[0], AssociatedTypeWitness);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v3[10];
  *((_QWORD *)v16 + 3) = v9;
  *((_QWORD *)v16 + 4) = v3[12];
  *((_QWORD *)v16 + 5) = v8;
  *((_QWORD *)v16 + 6) = v14;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v13, AssociatedTypeWitness);
  aBlock[4] = sub_1BE15EBC8;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_35;
  v17 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v19 = v22;
  v18 = v23;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v7, v19, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
  swift_release();
  return swift_release();
}

uint64_t sub_1BE15CB64()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    swift_getAssociatedTypeWitness();
    type metadata accessor for CRPeerSyncManager.PeerInfo();
  }
  return result;
}

uint64_t sub_1BE15CC9C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v1);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    type metadata accessor for CRPeerSyncManager.PeerInfo();
  }
  return result;
}

uint64_t sub_1BE15D068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = *(_QWORD *)(a6 + 16);
  v28 = a4;
  v12 = type metadata accessor for Capsule(255, a4, v11, a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v13 = sub_1BE1B242C();
  v14 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  v31 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v29 = &v25[-v16];
  v17 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = &v25[-v18];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v26 = a5;
    v27 = a7;
    v21 = a6;
    v22 = result + *(_QWORD *)(*(_QWORD *)result + 136);
    swift_beginAccess();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v19, v22, v12);
    v23 = Capsule.hasDelta(from:)((uint64_t)v19, v12);
    (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v12);
    if ((v23 & 1) != 0)
    {
      swift_beginAccess();
      v24 = v28;
      Capsule.merge<A>(_:)(a2, v12, v28, v11);
      swift_endAccess();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v32 = v24;
      v33 = v26;
      v34 = v21;
      v35 = v27;
      type metadata accessor for CRPeerSyncManagerSubscription();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1BE15D3AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *(uint64_t *)((char *)a1 + qword_1EF5497D8);
  v5 = (uint64_t)a1 + *(_QWORD *)(*a1 + 136);
  swift_beginAccess();
  v7 = type metadata accessor for Capsule(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(*(_QWORD *)(v3 + 96) + 16), v6);
  Capsule.finalizeTimestamps(_:)(v4, v7);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v5, v7);
}

uint64_t CRPeerSyncManager.sync(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = (_QWORD *)*v1;
  v32 = sub_1BE1B248C();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BE1B24BC();
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x1E0C80A78](v6);
  v29 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v4[10];
  v9 = v4[12];
  v11 = type metadata accessor for Capsule(0, v8, *(_QWORD *)(v9 + 16), v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v27 - v14;
  v28 = *(void **)((char *)v2 + qword_1EF5497D8);
  v30 = *(_QWORD *)((char *)v2 + v4[20]);
  v16 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  v17 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = v8;
  *((_QWORD *)v19 + 3) = v4[11];
  *((_QWORD *)v19 + 4) = v9;
  *((_QWORD *)v19 + 5) = v4[13];
  *((_QWORD *)v19 + 6) = v16;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v19[v17], v15, v11);
  v20 = v28;
  *(_QWORD *)&v19[v18] = v28;
  aBlock[4] = sub_1BE15ED30;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_42_0;
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = v20;
  v23 = v29;
  sub_1BE1B24A4();
  v36 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v25 = v31;
  v24 = v32;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v23, v25, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v34);
  swift_release();
  return swift_release();
}

uint64_t sub_1BE15D748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[6];

  v41 = a7;
  v38 = a3;
  v39 = a5;
  v37 = a2;
  v9 = sub_1BE1B248C();
  v45 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v44 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B24BC();
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a6;
  v14 = *(_QWORD *)(a6 + 16);
  v16 = type metadata accessor for Capsule(0, a4, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v35 - v21;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v24 = result;
    v25 = *(_QWORD *)(*(_QWORD *)result + 136);
    v36 = v9;
    v26 = result + v25;
    swift_beginAccess();
    Capsule.merge<A>(_:)(v37, v16, a4, v14);
    Capsule.finalizeTimestamps(_:)(v38, v16);
    swift_endAccess();
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    v27(v22, v26, v16);
    v38 = *(_QWORD *)(v24 + *(_QWORD *)(*(_QWORD *)v24 + 168));
    v27(v20, (uint64_t)v22, v16);
    v28 = (*(unsigned __int8 *)(v17 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v29 = (char *)swift_allocObject();
    v30 = v39;
    *((_QWORD *)v29 + 2) = a4;
    *((_QWORD *)v29 + 3) = v30;
    v31 = v41;
    *((_QWORD *)v29 + 4) = v40;
    *((_QWORD *)v29 + 5) = v31;
    *((_QWORD *)v29 + 6) = v24;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v29[v28], v20, v16);
    aBlock[4] = sub_1BE15F240;
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = &block_descriptor_49;
    v32 = _Block_copy(aBlock);
    swift_retain();
    sub_1BE1B24A4();
    v46 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    v33 = v44;
    v34 = v36;
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v13, v33, v32);
    _Block_release(v32);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1BE15DAA4()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for CRPeerSyncManager.PeerInfo();
}

uint64_t CRPeerSyncManager.__allocating_init(_:model:)(uint64_t a1, uint64_t a2)
{
  return sub_1BE15DED8(a1, a2, (void (*)(uint64_t, uint64_t))CRPeerSyncManager.init(_:model:));
}

uint64_t sub_1BE15DED8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = swift_allocObject();
  a3(a1, a2);
  return v6;
}

void CRPeerSyncManager.init(_:model:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[11];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = a1;
  v14 = a2;
  v3 = (_QWORD *)*v2;
  v12 = sub_1BE1B2E28();
  v11[9] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v11[7] = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v5);
  v11[6] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v7);
  v8 = v3[11];
  v9 = v3[12];
  v10 = v3[13];
  v15 = v3[10];
  v16 = v8;
  v11[10] = v15;
  v17 = v9;
  v18 = v10;
  v11[8] = v9;
  type metadata accessor for CRPeerSyncManagerSubscription();
}

void sub_1BE15E030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = sub_1BE1B2588();
  sub_1BE1B1F4C();
  swift_getAssociatedTypeWitness();
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v4;
  type metadata accessor for CRPeerSyncManager.PeerInfo();
}

uint64_t sub_1BE15E088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v3 - 192) = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v3 - 184) = v2;
  *(_QWORD *)(v0 + v1) = sub_1BE1B257C();
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EF530EB8);
  *(_QWORD *)(v0 + v4) = sub_1BE1B257C();
  *(_QWORD *)(v3 - 200) = *(_QWORD *)(*(_QWORD *)v0 + 160);
  sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
  sub_1BE1B24A4();
  *(_QWORD *)(v3 - 112) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 - 216) = sub_1BDD8422C(qword_1ED6F4480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  *(_QWORD *)(v3 - 224) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  *(_QWORD *)(v3 - 208) = sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  sub_1BE1B2F78();
  v5 = *MEMORY[0x1E0DEF8D0];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 104);
  v7 = *(_QWORD *)(v3 - 168);
  v8 = *(_QWORD *)(v3 - 136);
  v6(v7, v5, v8);
  *(_QWORD *)(v0 + *(_QWORD *)(v3 - 200)) = sub_1BE1B2E58();
  *(_QWORD *)(v3 - 152) = *(_QWORD *)(*(_QWORD *)v0 + 168);
  sub_1BE1B24A4();
  *(_QWORD *)(v3 - 112) = MEMORY[0x1E0DEE9D8];
  sub_1BE1B2F78();
  v6(v7, v5, v8);
  *(_QWORD *)(v0 + *(_QWORD *)(v3 - 152)) = sub_1BE1B2E58();
  v9 = (_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
  *v9 = 0;
  v9[1] = 0;
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184)) = 0;
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 192)) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  *(_QWORD *)(v0 + v10) = sub_1BE1B2594();
  *(_QWORD *)(v0 + qword_1EF5497D8) = *(_QWORD *)(v3 - 128);
  v11 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  v13 = type metadata accessor for Capsule(0, *(_QWORD *)(v3 - 144), *(_QWORD *)(*(_QWORD *)(v3 - 160) + 16), v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, *(_QWORD *)(v3 - 120), v13);
  return v0;
}

uint64_t *CRPeerSyncManager.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + qword_1EF5497E0;
  v3 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);

  v4 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v6 = type metadata accessor for Capsule(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(*(_QWORD *)(v1 + 96) + 16), v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CRPeerSyncManager.__deallocating_deinit()
{
  return sub_1BDD93094((void (*)(void))CRPeerSyncManager.deinit);
}

uint64_t sub_1BE15E43C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BE15E46C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BE15E490()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BE15E4BC(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return sub_1BE1B32E4();
}

uint64_t sub_1BE15E4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  _QWORD v24[4];

  v6 = sub_1BE1B3734();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531150);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18((char *)v22 - v19, a1, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531158);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_1BDD85B8C(v22, (uint64_t)v24);
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    sub_1BE1B3188();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    sub_1BDD86E30((uint64_t)v22, qword_1EF531160);
    v18(v16, a1, a4);
    v21 = sub_1BE1B3728();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEDFE8], v6);
    return sub_1BE1B3740();
  }
}

uint64_t sub_1BE15E700()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_1BE15E758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = MEMORY[0x1E0DEA968];
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE15E770@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void type metadata accessor for CRPeerSyncManagerSubscription()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BE15E794@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = sub_1BE1B32E4();
  a2[3] = MEMORY[0x1E0DEA968];
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BE15E7E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  result = sub_1BE1B32E4();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BE15E838(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return sub_1BE1B365C();
}

uint64_t sub_1BE15E87C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1BE15E8A0()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return sub_1BE1B365C();
}

uint64_t sub_1BE15E8E8()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return sub_1BE1B32E4();
}

uint64_t sub_1BE15E928()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BE15E94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1BE15E9D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return sub_1BE15BF74(v0[6], (uint64_t)v0 + v3, *(uint64_t *)((char *)v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)), v0[2], v1, v0[4], v0[5]);
}

uint64_t sub_1BE15EA0C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  sub_1BDDB796C(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  return swift_deallocObject();
}

uint64_t sub_1BE15EAB4()
{
  swift_getAssociatedTypeWitness();
  return sub_1BE15CC9C();
}

uint64_t sub_1BE15EB40()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_1BE15EBC8()
{
  swift_getAssociatedTypeWitness();
  return sub_1BE15CB64();
}

uint64_t sub_1BE15EC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  swift_release();
  v10 = (uint64_t *)(v4 + v8);
  v11 = *(_QWORD *)(v4 + v8 + 8);
  if (v11 >> 60 != 15)
    sub_1BDDB796C(*v10, v11);
  v12 = (char *)v10 + *(int *)(v6 + 36);
  v13 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v5);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BE15ED30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for Capsule(0, v5, *(_QWORD *)(v7 + 16), a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_1BE15D748(v4[6], (uint64_t)v4 + v10, *(_QWORD *)((char *)v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)), v5, v6, v7, v8);
}

void type metadata accessor for CRPeerSyncManager.PeerInfo()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t dispatch thunk of CRPeer.peerID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CRPeer.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_1BE15EDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Capsule(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  result = sub_1BE1B242C();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BE15EE80(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = sub_1BE1B1F58();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for Capsule(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), v3);
    if (v5 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

void type metadata accessor for CRPeerSyncManager()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t method lookup function for CRPeerSyncManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRPeerSyncManager.__allocating_init(_:model:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

void type metadata accessor for CRPeerSyncManager.CRPeerPublisher()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BE15EF8C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    type metadata accessor for Capsule(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16), v3);
    result = sub_1BE1B2EE8();
    if (v5 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_1BE15F05C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t sub_1BE15F08C()
{
  return swift_release();
}

_QWORD *sub_1BE15F098(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_1BE15F0D8(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_1BE15F10C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1BE15F168(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1BE15F1B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

_QWORD *sub_1BE15F1D4(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1BE15F1E4(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

void type metadata accessor for CRPeerSyncManager.PeerState()
{
  JUMPOUT(0x1C3B7DED0);
}

void sub_1BE15F21C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE15F22C()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE15F240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Capsule(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16), a4);
  sub_1BE15DAA4();
}

uint64_t objectdestroy_45Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_release();
  v8 = (uint64_t *)(v4 + ((v7 + 56) & ~v7));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1BDDB796C(*v8, v9);
  v10 = (char *)v8 + *(int *)(v6 + 36);
  v11 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE15F360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule(0, v4[2], *(_QWORD *)(v4[4] + 16), a4) - 8)
                          + 80);
  return sub_1BE15B9A4(v4[6], (uint64_t)v4 + ((v5 + 56) & ~v5));
}

uint64_t sub_1BE15F3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v18;
  _QWORD *v19;

  if (*(_QWORD *)(a1 + 16) >= *(_QWORD *)(a2 + 16))
  {
    v19 = (_QWORD *)(a2 + 56);
    v5 = -1 << *(_BYTE *)(a2 + 32);
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(a2 + 56);
    v18 = (unint64_t)(63 - v5) >> 6;
    v8 = a1 + 56;
    swift_bridgeObjectRetain();
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_27;
      goto LABEL_22;
    }
    if (v18 > 1)
    {
      v10 = v19[1];
      v11 = 1;
      if (v10)
        goto LABEL_21;
      v11 = 2;
      if (v18 > 2)
      {
        v10 = v19[2];
        if (v10)
          goto LABEL_21;
        v11 = 3;
        if (v18 > 3)
        {
          v10 = v19[3];
          if (v10)
            goto LABEL_21;
          v12 = 4;
          if (v18 > 4)
          {
            v10 = v19[4];
            if (v10)
            {
              v11 = 4;
LABEL_21:
              v9 = __clz(__rbit64(v10)) + (v11 << 6);
              if (!*(_QWORD *)(a1 + 16))
              {
LABEL_27:
                v2 = 0;
LABEL_25:
                sub_1BDE27FD0();
                return v2;
              }
LABEL_22:
              v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v9);
              v15 = *v13;
              v14 = v13[1];
              sub_1BE1B36F8();
              sub_1BDDB6CA4(v15, v14);
              sub_1BE1B1E8C();
              v16 = sub_1BE1B371C() & ~(-1 << *(_BYTE *)(a1 + 32));
              if (((*(_QWORD *)(v8 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
                __asm { BR              X8 }
              sub_1BDDB796C(v15, v14);
              v2 = 0;
              goto LABEL_25;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
                __break(1u);
              if (v11 >= v18)
                break;
              v10 = v19[v11];
              ++v12;
              if (v10)
                goto LABEL_21;
            }
          }
        }
      }
    }
    v2 = 1;
    goto LABEL_25;
  }
  return 0;
}

void sub_1BE15FF00(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128)) = a1;
  swift_retain();
  swift_release();
  sub_1BE157D44();
}

uint64_t **sub_1BE15FF3C(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v3 = v2;
  v25 = a1;
  v5 = *v2;
  v6 = sub_1BE1B2E28();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x1E0C80A78](v6);
  v22 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v21);
  v20[2] = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v9);
  v10 = v5[13];
  v11 = v5[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)v20 - v14;
  *(uint64_t **)((char *)v2 + v5[16]) = (uint64_t *)0xC000000000000000;
  v20[1] = (char *)v2 + (*v2)[17];
  swift_weakInit();
  *((_BYTE *)v2 + (*v2)[18]) = 0;
  v16 = (char *)v2 + (*v2)[19];
  v18 = type metadata accessor for Capsule(0, v5[10], *(_QWORD *)(v5[12] + 16), v17);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  v20[0] = sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
  v26 = 0;
  v27 = 0xE000000000000000;
  sub_1BE1B284C();
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v11, v10);
  sub_1BE1B347C();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  sub_1BE1B24A4();
  v26 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C(qword_1ED6F4480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v22, *MEMORY[0x1E0DEF8D0], v24);
  *(uint64_t **)((char *)v3 + (*v3)[15]) = (uint64_t *)sub_1BE1B2E58();
  swift_weakAssign();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))((char *)v3 + (*v3)[14], a2, v11);
  return v3;
}

unint64_t sub_1BE160264()
{
  unint64_t result;

  result = qword_1EF531140;
  if (!qword_1EF531140)
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF531140);
  }
  return result;
}

uint64_t type metadata accessor for CRPeerDataConsumer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRPeerDataConsumer);
}

uint64_t sub_1BE1602B4()
{
  uint64_t v0;

  swift_release();
  sub_1BDDB796C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t sub_1BE1602E0()
{
  uint64_t *v0;

  return sub_1BE15A098(v0[6], v0[7], v0[8], v0[2], v0[3], v0[4]);
}

uint64_t sub_1BE1602F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v16 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  swift_release();
  v11 = (uint64_t *)(v4 + v8);
  v12 = *(_QWORD *)(v4 + v8 + 8);
  if (v12 >> 60 != 15)
    sub_1BDDB796C(*v11, v12);
  v13 = (char *)v11 + *(int *)(v6 + 36);
  v14 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v5))
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v5);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v4 + ((v8 + v16 + v10) & ~v10), AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_1BE16043C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for Capsule(0, v5, *(_QWORD *)(v7 + 16), a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return sub_1BE15D068(v4[6], (uint64_t)v4 + v10, (uint64_t)v4 + ((v10 + v11 + v12) & ~v12), v5, v6, v7, v8);
}

uint64_t sub_1BE1604E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1BE15D3AC(v1, a1);
}

uint64_t sub_1BE160500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_1BE160584()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80);
  sub_1BE158730(*(_QWORD *)(v0 + 48), *(_QWORD **)(v0 + 56), *(_QWORD **)(v0 + 64), *(_QWORD *)(v0 + 72), v0 + ((v1 + 80) & ~v1));
}

uint64_t sub_1BE1605A8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE160614()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1BE15900C(v0 + v2, *(uint64_t **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1BE160644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BE15C500(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BE16065C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BE1606C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BE160778 + 4 * byte_1BE1C7364[(v7 - 1)]))();
}

void sub_1BE1607C8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1BE1609D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v67 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  MEMORY[0x1E0C80A78](v11);
  v58 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for Proto_Sequence(0);
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v59 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v63 = (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v54 - v17;
  v19 = type metadata accessor for Proto_Set(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v64 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v54 - v23;
  v55 = type metadata accessor for CROrderedSet(0, a3, a4, a5);
  v25 = *(int *)(v55 + 48);
  v60 = a6;
  v26 = (uint64_t)a6 + v25;
  v65 = a4;
  v27 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, a3, a4, a5);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v61 = v26;
  v29 = v26;
  v30 = a3;
  v62 = v27;
  v28(v29, 1, 1);
  v69 = type metadata accessor for CROrderedSetElement(0, a3, a5, v31);
  v73 = sub_1BE1B2588();
  v32 = *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20);
  v68 = a1;
  v70 = v32;
  v33 = *(_QWORD *)(a1 + v32)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1BDD86DEC(v33, (uint64_t)v18, qword_1ED6F2EF8);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v34(v18, 1, v19) == 1)
  {
    sub_1BE1B20E4();
    v35 = *(int *)(v19 + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v24[v35] = qword_1ED6F2800;
    swift_retain();
    sub_1BDD86E30((uint64_t)v18, qword_1ED6F2EF8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v18, (uint64_t)v24, type metadata accessor for Proto_Set);
  }
  v36 = (uint64_t)v64;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Set);
  swift_bridgeObjectRelease();
  sub_1BE1B2A5C();
  sub_1BE1B29C0();
  v37 = v68;
  v38 = *(_QWORD *)(v68 + v70)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  v39 = v63;
  sub_1BDD86DEC(v38, v63, qword_1ED6F2EF8);
  if (v34((char *)v39, 1, v19) == 1)
  {
    sub_1BE1B20E4();
    v40 = *(int *)(v19 + 20);
    v41 = v67;
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)(v36 + v40) = qword_1ED6F2800;
    swift_retain();
    v42 = sub_1BDD86E30(v39, qword_1ED6F2EF8);
  }
  else
  {
    v42 = sub_1BDDA2E8C(v39, v36, type metadata accessor for Proto_Set);
    v41 = v67;
  }
  MEMORY[0x1E0C80A78](v42);
  v43 = v65;
  *(&v54 - 6) = v30;
  *(&v54 - 5) = v43;
  *(&v54 - 4) = a5;
  *(&v54 - 3) = v41;
  *(&v54 - 2) = v37;
  *(&v54 - 1) = (uint64_t)&v73;
  swift_retain();
  v44 = v66;
  sub_1BE0DE06C(v36, (uint64_t)sub_1BE170200, (uint64_t)(&v54 - 8), v41, v30, v43, a5, (uint64_t)&v72);
  if (v44)
  {
    swift_release();
    sub_1BDD9C3E0(v37, type metadata accessor for Proto_OrderedSet);
    swift_bridgeObjectRelease();
    v52 = sub_1BE1B2EE8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v61, v52);
  }
  else
  {
    v45 = v60;
    v60[1] = v72;
    v46 = *(_QWORD *)(v37 + v70)
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    v47 = v58;
    sub_1BDD86DEC(v46, v58, &qword_1ED6F2E98);
    v48 = v57;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v47, 1, v57) == 1)
    {
      v49 = v59;
      sub_1BE1B20E4();
      v50 = *(int *)(v48 + 20);
      if (qword_1ED6EF5C0 != -1)
        swift_once();
      *(_QWORD *)(v49 + v50) = qword_1ED6EF5B0;
      swift_retain();
      sub_1BDD86E30(v47, &qword_1ED6F2E98);
    }
    else
    {
      v49 = v59;
      sub_1BDDA2E8C(v47, v59, type metadata accessor for Proto_Sequence);
    }
    v51 = v73;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1BE0C714C(v49, v51, v41, v69, (uint64_t)&off_1E7758E40, &v71);
    *v45 = v71;
    sub_1BE162D38(0, v55);
    swift_release();
    sub_1BDD9C3E0(v37, type metadata accessor for Proto_OrderedSet);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BE161084@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;

  v69 = a1;
  v70 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v60 = (uint64_t)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v59 = (uint64_t)v55 - v7;
  v8 = type metadata accessor for Proto_Set(0);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  MEMORY[0x1E0C80A78](v8);
  v66 = (uint64_t)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  v11 = MEMORY[0x1E0C80A78](v10);
  v65 = (uint64_t)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v64 = (uint64_t)v55 - v13;
  v14 = type metadata accessor for Proto_Sequence(0);
  v62 = *(_QWORD *)(v14 - 8);
  v63 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto_OrderedSet(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v61 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v55 - v20;
  sub_1BE1B20E4();
  v22 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1ED6F2E18 != -1)
    swift_once();
  v67 = a3;
  *(_QWORD *)(a3 + v22) = qword_1ED6F2E08;
  swift_retain();
  sub_1BE1B20E4();
  v24 = *(int *)(v17 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v21[v24] = qword_1ED6EF618;
  v72 = *v71;
  v25 = v70[2];
  v26 = v70[4];
  v27 = type metadata accessor for CROrderedSetElement(255, v25, v26, v23);
  v29 = type metadata accessor for CRSequence(0, v27, (uint64_t)&off_1E7758E40, v28);
  swift_retain();
  swift_retain();
  v30 = v68;
  v31 = v69;
  sub_1BE0C732C(v69, (uint64_t)v16);
  swift_release();
  if (v30)
    goto LABEL_10;
  v55[1] = v29;
  v56 = v25;
  v68 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    v32 = swift_retain();
    *(_QWORD *)&v21[v24] = sub_1BE13A9C4(v32);
    swift_release();
  }
  v33 = *(_QWORD *)&v21[v24];
  v34 = (uint64_t)v16;
  v35 = v64;
  sub_1BDDA2E8C(v34, v64, type metadata accessor for Proto_Sequence);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v35, 0, 1, v63);
  v36 = v65;
  sub_1BDDA2EF0(v35, v65, &qword_1ED6F2E98);
  v37 = v33 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v36, v37, &qword_1ED6F2E98);
  swift_endAccess();
  v38 = swift_release();
  v39 = v71;
  v73 = v71[1];
  MEMORY[0x1E0C80A78](v38);
  v40 = v70[3];
  v41 = v56;
  v55[-6] = v56;
  v55[-5] = v40;
  v55[-4] = v26;
  v55[-3] = v39;
  v55[-2] = v31;
  type metadata accessor for CRSet(0, v41, v40, v26);
  swift_retain();
  v42 = v68;
  sub_1BE0DE854(v31, sub_1BE17017C, (uint64_t)&v55[-8], v66);
  if (v42)
  {
    swift_release();
LABEL_10:
    sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for Proto_OrderedSet);
    return sub_1BDD9C3E0(v67, type metadata accessor for Proto_CRDT);
  }
  v68 = 0;
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    v44 = swift_retain();
    *(_QWORD *)&v21[v24] = sub_1BE13A9C4(v44);
    swift_release();
  }
  v45 = *(_QWORD *)&v21[v24];
  v46 = v59;
  sub_1BDDA2E8C(v66, v59, type metadata accessor for Proto_Set);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v46, 0, 1, v58);
  v47 = v60;
  sub_1BDDA2EF0(v46, v60, qword_1ED6F2EF8);
  v48 = v45 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v47, v48, qword_1ED6F2EF8);
  swift_endAccess();
  v49 = swift_release();
  v72 = *v39;
  MEMORY[0x1E0C80A78](v49);
  v55[-4] = v56;
  v55[-3] = v40;
  v50 = v69;
  v55[-2] = v26;
  v55[-1] = v50;
  type metadata accessor for Proto_Timestamp(0);
  swift_retain();
  v51 = sub_1BE0C745C((void (*)(char *))sub_1BE17019C, (uint64_t)&v55[-6]);
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    v52 = swift_retain();
    *(_QWORD *)&v21[v24] = sub_1BE13A9C4(v52);
    swift_release();
  }
  v53 = (uint64_t *)(*(_QWORD *)&v21[v24]
                  + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
  swift_beginAccess();
  *v53 = v51;
  swift_bridgeObjectRelease();
  v54 = v61;
  sub_1BDD9C318((uint64_t)v21, v61, type metadata accessor for Proto_OrderedSet);
  sub_1BE128D74(v54);
  return sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for Proto_OrderedSet);
}

void (*sub_1BE161728(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = sub_1BE1B36C8();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = sub_1BE1B2D98();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  sub_1BE16199C(a2, a3, a4, v13);
  return sub_1BE161868;
}

void sub_1BE161868(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE48], v8);
    sub_1BE1B32D8();
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }
  else
  {
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE48], v2[3]);
    sub_1BE1B32D8();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t sub_1BE16199C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t TupleTypeMetadata2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v48 = a1;
  v49 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v40 - v12;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v40 - v17;
  swift_getAssociatedConformanceWitness();
  v45 = sub_1BE1B2D98();
  v43 = *(_QWORD *)(v45 - 8);
  v19 = MEMORY[0x1E0C80A78](v45);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v40 = (char *)&v40 - v22;
  sub_1BE1B2C60();
  v46 = a2;
  v47 = v4;
  v44 = v6;
  sub_1BE1B2C90();
  result = sub_1BE1B2720();
  if ((result & 1) != 0)
  {
    v25 = v41;
    v24 = TupleTypeMetadata2;
    v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v27(v13, v18, AssociatedTypeWitness);
    v27(v26, v16, AssociatedTypeWitness);
    v28 = &v10[*(int *)(v24 + 48)];
    v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v10, v13, AssociatedTypeWitness);
    v29(v28, v26, AssociatedTypeWitness);
    v27(v21, v10, AssociatedTypeWitness);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v28, AssociatedTypeWitness);
    v31 = &v10[*(int *)(v24 + 48)];
    v27(v10, v13, AssociatedTypeWitness);
    v27(v31, v26, AssociatedTypeWitness);
    v32 = v45;
    v27(&v21[*(int *)(v45 + 36)], v31, AssociatedTypeWitness);
    v30(v10, AssociatedTypeWitness);
    v33 = v43;
    v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v21, v32);
    v36 = v47;
    v35 = v48;
    v37 = v46;
    sub_1BE1B2C6C();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    v38 = sub_1BE1B36C8();
    v39 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(&v49[*(int *)(v38 + 40)], v36, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v32);
    v27(v39, v34, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t))v27)(&v39[*(int *)(v38 + 36)], &v34[*(int *)(v32 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE161D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = type metadata accessor for CROrderedSetElement(0, a3, a4, v9);
  return sub_1BDDA2E8C(a2, a5 + *(int *)(v10 + 36), type metadata accessor for Timestamp);
}

void sub_1BE161D90()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE161DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF500);
  if (swift_dynamicCast())
  {
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    v3 = sub_1BE1B32E4();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    sub_1BDD86E30((uint64_t)&v5, (uint64_t *)&unk_1EF52D8C8);
    return 63;
  }
  return v3;
}

uint64_t sub_1BE161ECC()
{
  sub_1BE1B26E4();
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  type metadata accessor for Timestamp(0);
  return sub_1BE1B3704();
}

uint64_t sub_1BE161F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  if ((sub_1BE1B2798() & 1) == 0)
    return 0;
  v9 = *(int *)(type metadata accessor for CROrderedSetElement(0, a3, a4, v8) + 36);
  return _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0(a1 + v9, a2 + v9);
}

uint64_t sub_1BE161FAC()
{
  sub_1BE1B36F8();
  sub_1BE161ECC();
  return sub_1BE1B371C();
}

uint64_t sub_1BE161FF8()
{
  sub_1BE1B36F8();
  sub_1BE161ECC();
  return sub_1BE1B371C();
}

uint64_t sub_1BE16203C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE161F40(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_1BE162048()
{
  sub_1BE161D90();
}

void sub_1BE162054()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE16209C(_BYTE *a1@<X8>)
{
  CROrderedSet.minEncodingVersion.getter(a1);
}

void CROrderedSet.copy(renamingReferences:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
  {
    v10 = MEMORY[0x1E0C80A78](v6);
    v11 = a2[2];
    v12 = a2[3];
    v19[-4] = v11;
    v19[-3] = v12;
    v13 = a2[4];
    v19[-2] = v13;
    v19[-1] = v10;
    v19[0] = CROrderedSet.map<A>(_:)((void (*)(uint64_t))sub_1BDEE38E8, (uint64_t)&v19[-6], (uint64_t)a2);
    v14 = sub_1BE1B2A5C();
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v14);
    v15 = (char *)v19;
    v16 = a3;
    v17 = v11;
  }
  else
  {
    (*(void (**)(char *, uint64_t, _QWORD *))(v7 + 16))(v9, v3, a2);
    v18 = a2[2];
    v12 = a2[3];
    v13 = a2[4];
    MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a2);
    v16 = a3;
    v15 = v9;
    v17 = v18;
  }
  CROrderedSet.init<A>(_:)((uint64_t)v15, v17, v12, v13, v16);
}

uint64_t CROrderedSet.map<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v38 = a1;
  v39 = a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_1BE1B2EE8();
  v7 = MEMORY[0x1E0C80A78](v6);
  v42 = (uint64_t)&v33 - v8;
  v41 = *(_QWORD *)(v5 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(a3 + 32);
  v14 = type metadata accessor for CROrderedSetElement(0, v5, v40, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v34 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v46 = (char *)&v33 - v16;
  v49 = sub_1BE1B2588();
  CROrderedSet.count.getter(a3);
  v17 = v14;
  v36 = sub_1BE1B2A5C();
  sub_1BE1B29C0();
  v43 = a3;
  v44 = v3;
  v18 = sub_1BE165AA8(a3);
  if (MEMORY[0x1C3B7C928](v18, v14))
  {
    v19 = 0;
    v35 = v18;
    while (1)
    {
      v20 = sub_1BE1B29FC();
      sub_1BE1B29A8();
      if ((v20 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v46, v18+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v19, v17);
        v21 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_12;
      }
      else
      {
        result = sub_1BE1B30BC();
        if (v34 != 8)
          goto LABEL_17;
        v48 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))(v46, &v48, v17);
        swift_unknownObjectRelease();
        v21 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
      }
      v45 = v21;
      v22 = *(_QWORD *)(v44 + 8);
      v23 = v17;
      v24 = v41;
      v25 = v46;
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v11, v46, v5);
      swift_retain();
      v26 = v15;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v25, v23);
      v48 = v22;
      v27 = type metadata accessor for CRSet(0, v5, *(_QWORD *)(v43 + 24), v40);
      v28 = v42;
      CRSet.subscript.getter((uint64_t)v11, v27, v42);
      swift_release();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v28, 1, v5);
      if ((_DWORD)result == 1)
        break;
      v30 = *(void (**)(char *, uint64_t))(v24 + 8);
      v30(v11, v5);
      v31 = v47;
      v38(v28);
      if (v31)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(uint64_t, uint64_t))v30)(v28, v5);
      }
      v47 = 0;
      v30((char *)v28, v5);
      sub_1BE1B2A20();
      v18 = v35;
      v17 = v23;
      v32 = MEMORY[0x1C3B7C928](v35, v23);
      ++v19;
      v15 = v26;
      if (v45 == v32)
        goto LABEL_13;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v49;
  }
  return result;
}

void CROrderedSet.init<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  MEMORY[0x1E0C80A78](a1);
  v7 = sub_1BE1B2EE8();
  v8 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  CROrderedSet.init()(a2, a3, a4, a5);
}

uint64_t type metadata accessor for CROrderedSetElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSetElement);
}

void CROrderedSet.init(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  CROrderedSet.init()(a1, a2, a3, a4);
}

void sub_1BE162828()
{
  void *v0;

}

void CROrderedSet.init()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = a4 + *(int *)(type metadata accessor for CROrderedSet(0, a1, a2, a3) + 48);
  v8 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  CRSet.init()();
}

void sub_1BE1628C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[1] = v7;
  type metadata accessor for CROrderedSetElement(0, v5, v4, a4);
  CRSequence.init()(&v7);
  *v6 = v7;
}

void CROrderedSet.init<A>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v12);
  CROrderedSet.init<A>(_:)((uint64_t)v12, a2, a4, a5, a6);
}

uint64_t sub_1BE1629A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

uint64_t CROrderedSet.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  sub_1BDE7A054(v4, v4);
  v5 = *(_QWORD *)(v4 - 8);
  swift_allocObject();
  v6 = sub_1BE1B299C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  sub_1BDE79568();
  v11 = v6;
  v8 = sub_1BE1B2A5C();
  v9 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v8);
  sub_1BE164360((uint64_t)&v11, 0, 1, a2, v8, v9);
  return swift_bridgeObjectRelease();
}

uint64_t CROrderedSet.merge(_:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;

  v27[0] = *a1;
  v7 = a2[2];
  v8 = a2[4];
  v9 = type metadata accessor for CROrderedSetElement(255, v7, v8, a4);
  v11 = type metadata accessor for CRSequence(0, v9, (uint64_t)&off_1E7758E40, v10);
  v12 = sub_1BE0CAB00(v27, 1, v11);
  v28 = a1[1];
  v13 = type metadata accessor for CRSet(0, v7, a2[3], v8);
  v14 = sub_1BDDAF70C();
  result = sub_1BDDAF70C();
  if (v14 == result)
  {
LABEL_8:
    if (v12 == 1)
      return result;
    return sub_1BE162D38(0, (uint64_t)a2);
  }
  v24 = v12;
  v25 = v4;
  swift_retain();
  v16 = MEMORY[0x1C3B7DF54](&unk_1BE1C1BC0, v13);
  v17 = sub_1BDD9A6B0((uint64_t)&v28, v13, v16);
  v18 = sub_1BDDAF70C();
  swift_beginAccess();
  v20 = *(_QWORD *)(v18 + 24);
  v19 = *(_QWORD *)(v18 + 32);
  swift_beginAccess();
  v21 = *(_QWORD *)(v17 + 24);
  v26 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = swift_bridgeObjectRetain();
  sub_1BDEEDAB4(v22, &v26, v19);
  sub_1BDEEDAB4(v21, &v26, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26 == 3)
    sub_1BE0D7654();
  if (v26 != 1)
  {
    swift_release();
    result = swift_release();
    v12 = v24;
    goto LABEL_8;
  }
  sub_1BE0D91C4(v17);
  swift_release();
  if (v24 == 2)
  {
    v23 = *(a2 - 1);
    (*(void (**)(uint64_t, _QWORD *))(v23 + 8))(v25, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(v23 + 16))(v25, a1, a2);
  }
  return sub_1BE162D38(0, (uint64_t)a2);
}

uint64_t sub_1BE162D38(int a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t *, uint64_t);
  void (*v66)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  char *v106;
  char **v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  int v117;
  uint64_t *v118;
  char *v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(_QWORD *, _QWORD);
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t *, uint64_t);
  uint64_t v159;
  void (*v160)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t TupleTypeMetadata2;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD v209[5];
  uint64_t v210;
  uint64_t v211;

  v3 = v2;
  v168 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF768);
  MEMORY[0x1E0C80A78](v5);
  v167 = (char *)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF760);
  v8 = MEMORY[0x1E0C80A78](v7);
  v166 = (char *)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v157 - v10;
  v177 = type metadata accessor for Replica();
  v12 = MEMORY[0x1E0C80A78](v177);
  v172 = (uint64_t)&v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v171 = (uint64_t)&v157 - v14;
  v190 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF740);
  MEMORY[0x1E0C80A78](v190);
  v206 = (uint64_t)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = type metadata accessor for CROrderedSetElement(255, v16, v17, v18);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v194 = sub_1BE1B2EE8();
  v193 = *(_QWORD *)(v194 - 8);
  v20 = MEMORY[0x1E0C80A78](v194);
  v192 = (char *)&v157 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v191 = (char *)&v157 - v22;
  v170 = sub_1BE1B206C();
  v169 = *(_QWORD *)(v170 - 8);
  v23 = MEMORY[0x1E0C80A78](v170);
  v198 = (char *)&v157 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v23);
  v175 = (char *)&v157 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF738);
  v27 = MEMORY[0x1E0C80A78](v26);
  v184 = (char *)&v157 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v157 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v197 = (uint64_t)&v157 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v196 = (uint64_t)&v157 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v180 = (char *)&v157 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v174 = (uint64_t)&v157 - v39;
  MEMORY[0x1E0C80A78](v38);
  v188 = (char *)&v157 - v40;
  v41 = type metadata accessor for Timestamp(0);
  v199 = *(_QWORD *)(v41 - 8);
  v42 = MEMORY[0x1E0C80A78](v41);
  v182 = (uint64_t)&v157 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42);
  v181 = (uint64_t)&v157 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v183 = (uint64_t)&v157 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v179 = (uint64_t)&v157 - v49;
  v202 = *(_QWORD *)(v19 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v189 = (char *)&v157 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0C80A78](v50);
  v205 = (char *)&v157 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v201 = (char *)&v157 - v55;
  v164 = v56;
  MEMORY[0x1E0C80A78](v54);
  v203 = (char *)&v157 - v57;
  v58 = *v3;
  v208 = v19;
  v209[0] = v58;
  v60 = type metadata accessor for CRSequence(0, v19, (uint64_t)&off_1E7758E40, v59);
  result = CRSequence.isEmpty.getter();
  if ((result & 1) != 0)
    return result;
  v163 = v7;
  v62 = (char *)v3 + *(int *)(a2 + 48);
  v186 = *(_QWORD *)(a2 + 24);
  v63 = type metadata accessor for CROrderedSet.DeduplicatedInfo(255, v16, v186, v17);
  v64 = sub_1BE1B2EE8();
  v65 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v64 - 8) + 8);
  v159 = v64;
  v158 = v65;
  ((void (*)(char *))v65)(v62);
  v66 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56);
  v162 = (uint64_t *)v62;
  v161 = v63;
  v160 = v66;
  v66((uint64_t *)v62, 1, 1, v63);
  v211 = sub_1BE1B257C();
  v187 = v3;
  v67 = *v3;
  v209[0] = v67;
  CRSequence.count.getter();
  v204 = v16;
  v173 = sub_1BE1B2684();
  sub_1BE1B25D0();
  v209[0] = v67;
  v68 = sub_1BE0C6404();
  v69 = MEMORY[0x1C3B7C928](v68, v208);
  v185 = v31;
  v207 = v17;
  v165 = v60;
  if (v69)
  {
    v70 = 0;
    v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    while (1)
    {
      v73 = sub_1BE1B29FC();
      sub_1BE1B29A8();
      if ((v73 & 1) != 0)
      {
        result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v202 + 16))(v203, v68+ ((*(unsigned __int8 *)(v202 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80))+ *(_QWORD *)(v202 + 72) * v70, v208);
        v74 = v187;
      }
      else
      {
        result = sub_1BE1B30BC();
        v74 = v187;
        if (v164 != 8)
          goto LABEL_56;
        v209[0] = result;
        (*(void (**)(char *, _QWORD *, uint64_t))(v202 + 16))(v203, v209, v208);
        result = swift_unknownObjectRelease();
      }
      v75 = v70 + 1;
      v76 = v207;
      if (__OFADD__(v70, 1))
      {
        __break(1u);
LABEL_56:
        __break(1u);
        return result;
      }
      v77 = (uint64_t)v201;
      v78 = v202;
      (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v201, v203, v208);
      v209[0] = v74[1];
      v79 = v204;
      v80 = type metadata accessor for CRSet(0, v204, v186, v76);
      if (CRSet.contains(_:)(v77, v80))
      {
        v81 = (uint64_t)v188;
        MEMORY[0x1C3B7C58C](v77, v211, v79, v41, v76);
        v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48);
        if (v82(v81, 1, v41) == 1)
        {
          sub_1BDD86E30(v81, &qword_1ED6EF738);
          goto LABEL_16;
        }
        v83 = v179;
        sub_1BDDA2E8C(v81, v179, type metadata accessor for Timestamp);
        v84 = v77 + *(int *)(v208 + 36);
        v85 = *(int *)(v41 + 20);
        v86 = *(_QWORD *)(v83 + v85);
        v87 = *(_QWORD *)(v84 + v85);
        v88 = v86 < v87;
        if (v86 == v87
          && (v89 = *(int *)(v177 + 20),
              v90 = *(_QWORD *)(v83 + v89),
              v91 = *(_QWORD *)(v84 + v89),
              v88 = v90 < v91,
              v90 == v91))
        {
          if ((sub_1BDDB2BF8() & 1) == 0)
            goto LABEL_15;
        }
        else if (!v88)
        {
LABEL_15:
          sub_1BDD9C3E0(v83, type metadata accessor for Timestamp);
          v77 = (uint64_t)v201;
LABEL_16:
          v92 = (uint64_t)v180;
          v93 = v204;
          MEMORY[0x1C3B7C58C](v77, v211, v204, v41, v207);
          v94 = v82(v92, 1, v41);
          sub_1BDD86E30(v92, &qword_1ED6EF738);
          if (v94 == 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v176 + 16))(v175, v77, v93);
            v95 = v208;
            v96 = v174;
            sub_1BDD9C318(v77 + *(int *)(v208 + 36), v174, type metadata accessor for Timestamp);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v199 + 56))(v96, 0, 1, v41);
            sub_1BE1B26B4();
            (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v77, v95);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v77, v208);
          }
          goto LABEL_5;
        }
        v97 = v201;
        (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v175, v201, v204);
        v98 = v174;
        sub_1BDD9C318(v84, v174, type metadata accessor for Timestamp);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v199 + 56))(v98, 0, 1, v41);
        sub_1BE1B26B4();
        sub_1BDD9C3E0(v179, type metadata accessor for Timestamp);
        (*(void (**)(char *, uint64_t))(v202 + 8))(v97, v208);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v208);
      }
LABEL_5:
      v68 = (uint64_t)v195;
      ++v70;
      v71 = v75 == MEMORY[0x1C3B7C928](v195, v208);
      v72 = TupleTypeMetadata2;
      if (v71)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
  }
  swift_bridgeObjectRelease();
  v72 = TupleTypeMetadata2;
LABEL_26:
  sub_1BE1B2060();
  v209[0] = *v187;
  v209[0] = sub_1BE0C6404();
  v99 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v99);
  sub_1BE1B28B8();
  swift_bridgeObjectRelease();
  v209[4] = v210;
  sub_1BE1B3230();
  sub_1BE1B320C();
  v188 = (char *)sub_1BE1B3224();
  v100 = 0;
  v101 = v204;
  v102 = v206;
  v103 = v202;
  v178 = v41;
  while (1)
  {
    v106 = v192;
    sub_1BE1B3218();
    v107 = (char **)v191;
    (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v191, v106, v194);
    if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48))(v107, 1, v72) == 1)
      break;
    LODWORD(v203) = v100;
    v201 = *v107;
    v108 = (char *)v107 + *(int *)(v72 + 48);
    v109 = v205;
    v110 = v208;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v205, v108, v208);
    v111 = v196;
    MEMORY[0x1C3B7C58C](v109, v211, v101, v41, v207);
    v112 = (uint64_t)&v109[*(int *)(v110 + 36)];
    v113 = v197;
    sub_1BDD9C318(v112, v197, type metadata accessor for Timestamp);
    v114 = v199;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v199 + 56))(v113, 0, 1, v41);
    v115 = v102 + *(int *)(v190 + 48);
    sub_1BDD86DEC(v111, v102, &qword_1ED6EF738);
    sub_1BDD86DEC(v113, v115, &qword_1ED6EF738);
    v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
    v117 = v116(v102, 1, v41);
    v195 = v116;
    if (v117 == 1)
    {
      sub_1BDD86E30(v113, &qword_1ED6EF738);
      sub_1BDD86E30(v111, &qword_1ED6EF738);
      v118 = &qword_1ED6EF740;
      if (v116(v115, 1, v41) == 1)
      {
        sub_1BDD86E30(v206, &qword_1ED6EF738);
        v119 = v205;
        v120 = (char)v203;
        goto LABEL_43;
      }
      goto LABEL_41;
    }
    v121 = (uint64_t)v185;
    sub_1BDD86DEC(v102, (uint64_t)v185, &qword_1ED6EF738);
    v118 = &qword_1ED6EF740;
    if (v116(v115, 1, v41) == 1)
      goto LABEL_40;
    v122 = v183;
    sub_1BDDA2E8C(v115, v183, type metadata accessor for Timestamp);
    v123 = *(int *)(v41 + 20);
    v124 = *(_QWORD *)(v121 + v123);
    v125 = *(_QWORD *)(v122 + v123);
    v126 = v181;
    sub_1BDD9C318(v121, v181, type metadata accessor for Timestamp);
    v127 = v182;
    sub_1BDD9C318(v122, v182, type metadata accessor for Timestamp);
    if (v124 != v125)
      goto LABEL_39;
    v128 = *(int *)(v177 + 20);
    v129 = *(_QWORD *)(v126 + v128);
    v130 = v126;
    v131 = *(_QWORD *)(v127 + v128);
    v132 = v171;
    sub_1BDD9C318(v130, v171, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v133 = v172;
    sub_1BDD9C318(v127, v172, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v129 != v131)
    {
      sub_1BDD9C3E0(v133, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDD9C3E0(v132, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v121 = (uint64_t)v185;
      v126 = v130;
      v122 = v183;
LABEL_39:
      sub_1BDD9C3E0(v127, type metadata accessor for Timestamp);
      sub_1BDD9C3E0(v126, type metadata accessor for Timestamp);
      sub_1BDD9C3E0(v122, type metadata accessor for Timestamp);
      v118 = &qword_1ED6EF738;
      v41 = v178;
      v103 = v202;
LABEL_40:
      sub_1BDD86E30(v197, &qword_1ED6EF738);
      sub_1BDD86E30(v196, &qword_1ED6EF738);
      sub_1BDD9C3E0(v121, type metadata accessor for Timestamp);
LABEL_41:
      sub_1BDD86E30(v206, v118);
      v119 = v205;
      v120 = (char)v203;
LABEL_42:
      sub_1BE1B1FF4();
      goto LABEL_43;
    }
    v134 = sub_1BE1B1F10();
    sub_1BDD9C3E0(v133, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v132, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v127, type metadata accessor for Timestamp);
    sub_1BDD9C3E0(v130, type metadata accessor for Timestamp);
    sub_1BDD9C3E0(v183, type metadata accessor for Timestamp);
    sub_1BDD86E30(v197, &qword_1ED6EF738);
    sub_1BDD86E30(v196, &qword_1ED6EF738);
    sub_1BDD9C3E0((uint64_t)v185, type metadata accessor for Timestamp);
    sub_1BDD86E30(v206, &qword_1ED6EF738);
    v41 = v178;
    v103 = v202;
    v119 = v205;
    v120 = (char)v203;
    if ((v134 & 1) == 0)
      goto LABEL_42;
LABEL_43:
    v135 = v189;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v189, v119, v208);
    v101 = v204;
    if ((v120 & 1) != 0)
    {
      v104 = *(void (**)(char *, uint64_t))(v103 + 8);
      v105 = v208;
      v104(v135, v208);
      v104(v119, v105);
      v100 = 1;
    }
    else
    {
      v136 = v208;
      v137 = v119;
      v138 = (uint64_t)v184;
      MEMORY[0x1C3B7C58C](v135, v211, v204, v41, v207);
      v139 = *(void (**)(char *, uint64_t))(v103 + 8);
      v139(v135, v136);
      v139(v137, v136);
      v100 = v195(v138, 1, v41) == 1;
      sub_1BDD86E30(v138, &qword_1ED6EF738);
    }
    v102 = v206;
    v72 = TupleTypeMetadata2;
  }
  swift_bridgeObjectRelease();
  v140 = (uint64_t)v198;
  if ((sub_1BE1B200C() & 1) != 0)
    goto LABEL_48;
  if (((v168 | v100) & 1) != 0)
  {
    sub_1BE0CA770(v140, v165);
LABEL_48:
    (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v140, v170);
  }
  else
  {
    v209[0] = *v187;
    v210 = sub_1BE0C6404();
    v141 = v167;
    sub_1BE1B2054();
    v142 = sub_1BE1B203C();
    v143 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
    v144 = *(_QWORD *)(v142 - 8);
    v145 = (uint64_t)v166;
    (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v166, v141, v142);
    sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v143, MEMORY[0x1E0CB1378]);
    sub_1BE1B2C90();
    (*(void (**)(char *, uint64_t))(v144 + 8))(v141, v142);
    v146 = v163;
    *(_QWORD *)(v145 + *(int *)(v163 + 36)) = v209[0];
    sub_1BDDA2EF0(v145, (uint64_t)v11, &qword_1ED6EF760);
    v147 = &v11[*(int *)(v146 + 36)];
    v148 = *(_QWORD *)v147;
    sub_1BE1B2C60();
    if (v148 != v209[0])
    {
      sub_1BDD8422C(qword_1EF52D9E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1368]);
      v149 = MEMORY[0x1E0DEAF58];
      do
      {
        sub_1BE1B26F0();
        v150 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
        v152 = *v151;
        v153 = v151[1];
        v150(v209, 0);
        v209[0] = v152;
        v209[1] = v153;
        MEMORY[0x1C3B7DF54](v149, v99);
        sub_1BE1B2D38();
        v154 = *(_QWORD *)v147;
        sub_1BE1B2C60();
      }
      while (v154 != v209[0]);
    }
    sub_1BDD86E30((uint64_t)v11, &qword_1ED6EF760);
    v155 = v162;
    v158(v162, v159);
    *v155 = v210;
    v156 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, v204, v186, v207);
    (*(void (**)(char *, char *, uint64_t))(v169 + 32))((char *)v155 + *(int *)(v156 + 44), v198, v170);
    v160(v155, 0, 1, v161);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE163FCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = type metadata accessor for CROrderedSet.DeduplicatedInfo(255, v3, *(_QWORD *)(a1 + 24), v4);
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v21 - v12;
  v14 = v1 + *(int *)(a1 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v14, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
  v16 = (uint64_t)&v13[*(int *)(v5 + 44)];
  v18 = type metadata accessor for CROrderedSetElement(255, v3, v4, v17);
  v20 = type metadata accessor for CRSequence(0, v18, (uint64_t)&off_1E7758E40, v19);
  sub_1BE0CA770(v16, v20);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v14, 1, 1, v5);
}

uint64_t CROrderedSet.visitReferences(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for CRSet(0, a2[2], a2[3], a2[4]);
  return CRSet.visitReferences(_:)(a1, v3);
}

Swift::Bool __swiftcall CROrderedSet.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  Swift::Bool v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = v0;
  v4 = *(_QWORD *)(v0 - 8);
  v5 = (_QWORD *)((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(v1 + 8);
  v8 = v5[2];
  v9 = v5[4];
  type metadata accessor for CRSet(0, v8, v5[3], v9);
  v10 = CRSet.needToFinalizeTimestamps()();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
  if (v10)
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v7, v3);
    return 1;
  }
  else
  {
    v17 = *v7;
    v13 = type metadata accessor for CROrderedSetElement(255, v8, v9, v11);
    type metadata accessor for CRSequence(0, v13, (uint64_t)&off_1E7758E40, v14);
    v12 = CRSequence.needToFinalizeTimestamps()();
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v12;
}

uint64_t CROrderedSet.finalizeTimestamps(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a2[2];
  v7 = a2[4];
  v8 = type metadata accessor for CROrderedSetElement(255, v6, v7, a4);
  v10 = type metadata accessor for CRSequence(0, v8, (uint64_t)&off_1E7758E40, v9);
  CRSequence.finalizeTimestamps(_:)(a1, v10);
  type metadata accessor for CRSet(0, v6, a2[3], v7);
  return CRSet.finalizeTimestamps(_:)();
}

uint64_t CROrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BE164360(a1, 0, 1, a2, a3, a4);
}

uint64_t sub_1BE164360(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = a6;
  v48 = a3;
  v46 = a2;
  v54 = a4;
  v8 = *(_QWORD *)(a4 + 16);
  v49 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v46 - v10;
  v12 = sub_1BE1B2EE8();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v46 - v14;
  v16 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21 = (char *)&v46 - v20;
  v58 = sub_1BE1B2588();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a5);
  sub_1BE1B2888();
  v47 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v55 = v21;
  v56 = AssociatedTypeWitness;
  v53 = AssociatedConformanceWitness;
  sub_1BE1B2F00();
  v23 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v15, 1, v8) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v11, v15, v8);
    type metadata accessor for CRSet(0, v8, *(_QWORD *)(v54 + 24), *(_QWORD *)(v54 + 32));
    CRSet.insert(_:)();
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v55, v56);
  v24 = v58;
  v57 = v58;
  v25 = sub_1BE1B2A5C();
  v26 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v25);
  if ((sub_1BE1B2CD8() & 1) == 0)
  {
    v27 = v54;
    v28 = v51;
    sub_1BE163FCC(v54);
    v29 = *(_QWORD *)(v27 + 32);
    v31 = (char *)type metadata accessor for CROrderedSetElement(255, v8, v29, v30);
    v56 = type metadata accessor for CRSequence(0, (uint64_t)v31, (uint64_t)&off_1E7758E40, v32);
    v36 = sub_1BE0C6554(v56, v33, v34, v35);
    v57 = v24;
    MEMORY[0x1E0C80A78](v36);
    *(&v46 - 6) = v8;
    v37 = *(_QWORD *)(v27 + 24);
    *(&v46 - 5) = v47;
    *(&v46 - 4) = v37;
    v38 = v52;
    *(&v46 - 3) = v29;
    *(&v46 - 2) = v38;
    *(&v46 - 1) = v28;
    swift_bridgeObjectRetain();
    v40 = sub_1BDF016D0((void (*)(char *, char *))sub_1BE170120, (uint64_t)(&v46 - 8), v25, v31, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v57 = v40;
    if ((v48 & 1) != 0)
    {
      v43 = sub_1BE1B2A5C();
      v44 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v43);
      CRSequence.append<A>(contentsOf:)((uint64_t)&v57, v56, v43, v44);
    }
    else
    {
      v41 = sub_1BE1B2A5C();
      v42 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v41);
      CRSequence.insert<A>(contentsOf:at:)((uint64_t)&v57, v46, v56, v41, v42);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t CROrderedSet.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 16);
  sub_1BDE7A054(v6, v6);
  v7 = *(_QWORD *)(v6 - 8);
  swift_allocObject();
  v8 = sub_1BE1B299C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  sub_1BDE79568();
  v13 = v8;
  v10 = sub_1BE1B2A5C();
  v11 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v10);
  sub_1BE164360((uint64_t)&v13, a2, 0, a3, v10, v11);
  return swift_bridgeObjectRelease();
}

uint64_t CROrderedSet.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BE164360(a1, a2, 0, a3, a4, a5);
}

Swift::Void __swiftcall CROrderedSet.remove(at:)(Swift::Int at)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](at);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v8 + 32);
  v10 = type metadata accessor for CROrderedSetElement(0, v4, v20, v9);
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v15 - v11;
  v13 = sub_1BE1B2EE8();
  v18 = *(_QWORD *)(v13 - 8);
  v19 = v13;
  MEMORY[0x1E0C80A78](v13);
  v17 = v2;
  sub_1BE163FCC(v3);
  v21 = *v2;
  v15[1] = type metadata accessor for CRSequence(0, v10, (uint64_t)&off_1E7758E40, v14);
  CRSequence.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v10);
  type metadata accessor for CRSet(0, v4, *(_QWORD *)(v3 + 24), v20);
  CRSet.remove(_:)();
}

void sub_1BE164A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 112) + 8))(v4, *(_QWORD *)(v5 - 104));
  CRSequence.remove(at:)(v3);
}

uint64_t CROrderedSet.remove(atOffsets:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD);
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD v82[5];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF768);
  MEMORY[0x1E0C80A78](v6);
  v59 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF760);
  v8 = MEMORY[0x1E0C80A78](v60);
  v58 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v57 - v11;
  v13 = *(_QWORD *)(a2 + 16);
  v71 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v10);
  v69 = *(_QWORD *)(a2 + 32);
  v70 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CROrderedSetElement(0, v13, v69, v15);
  v68 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v67 = (char *)&v57 - v17;
  v72 = v13;
  v18 = sub_1BE1B2EE8();
  v65 = *(_QWORD *)(v18 - 8);
  v66 = v18;
  MEMORY[0x1E0C80A78](v18);
  v64 = (char *)&v57 - v19;
  v79 = sub_1BE1B206C();
  v63 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v62 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_1BE1B1F64();
  v21 = *(_QWORD *)(v75 - 8);
  v22 = MEMORY[0x1E0C80A78](v75);
  v77 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v76 = (char *)&v57 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26A8);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a2;
  sub_1BE163FCC(a2);
  v57 = a1;
  sub_1BE1B1F94();
  v80 = &v27[*(int *)(v25 + 36)];
  v81 = v27;
  v78 = v21;
  v74 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v61 = v3 + 1;
  v28 = v79;
  v29 = v75;
  v30 = v76;
  v74(v76, v80, v75);
  sub_1BDD8422C(qword_1ED6EF220, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
  v31 = v77;
  sub_1BE1B2C90();
  sub_1BDD8422C(&qword_1ED6EF208, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
  LOBYTE(a2) = sub_1BE1B2798();
  v32 = *(void (**)(char *, uint64_t))(v78 + 8);
  v32(v31, v29);
  v32(v30, v29);
  if ((a2 & 1) == 0)
  {
    v33 = (uint64_t)v81;
    v34 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
    v34(v82, 0);
    v35 = v63;
    v36 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v33, v28);
    sub_1BE1B2C9C();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v28);
    v82[0] = *v3;
    type metadata accessor for CRSequence(0, v16, (uint64_t)&off_1E7758E40, v37);
    v38 = v67;
    CRSequence.subscript.getter();
    v39 = v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v70, v38, v72);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v38, v16);
    type metadata accessor for CRSet(0, v39, *(_QWORD *)(v73 + 24), v69);
    CRSet.remove(_:)();
  }
  sub_1BDD86E30((uint64_t)v81, &qword_1ED6F26A8);
  v40 = v59;
  sub_1BE1B2054();
  v41 = sub_1BE1B203C();
  v42 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
  v43 = *(_QWORD *)(v41 - 8);
  v44 = (uint64_t)v58;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v58, v40, v41);
  sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v42, MEMORY[0x1E0CB1378]);
  sub_1BE1B2C90();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v41);
  v45 = v60;
  *(_QWORD *)(v44 + *(int *)(v60 + 36)) = v82[0];
  sub_1BDDA2EF0(v44, (uint64_t)v12, &qword_1ED6EF760);
  v46 = &v12[*(int *)(v45 + 36)];
  v47 = *(_QWORD *)v46;
  sub_1BE1B2C60();
  if (v47 != v82[0])
  {
    sub_1BDD8422C(qword_1EF52D9E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1368]);
    do
    {
      sub_1BE1B26F0();
      v48 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
      v50 = *v49;
      v51 = v49[1];
      v48(v82, 0);
      v53 = type metadata accessor for CRSequence(0, v16, (uint64_t)&off_1E7758E40, v52);
      CRSequence.removeSubrange(_:)(v50, v51, v53, v54);
      v55 = *(_QWORD *)v46;
      sub_1BE1B2C60();
    }
    while (v55 != v82[0]);
  }
  return sub_1BDD86E30((uint64_t)v12, &qword_1ED6EF760);
}

uint64_t sub_1BE16510C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;

  v47 = a6;
  v48 = a1;
  v46 = a5;
  v43 = *(_QWORD *)(a5 - 8);
  v44 = a3;
  v9 = MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  v41 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(v15 + 32);
  v55 = (char *)type metadata accessor for CROrderedSetElement(0, v12, v53, v15);
  v16 = *((_QWORD *)v55 - 1);
  MEMORY[0x1E0C80A78](v55);
  v18 = (char *)&v40 - v17;
  v19 = sub_1BE1B2EE8();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v54 = (uint64_t *)a4;
  result = sub_1BE163FCC(a4);
  if (v48 == a2)
  {
    v42 = a2;
    v25 = v46;
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, v44, v46);
    MEMORY[0x1E0C80A78](v26);
    *(&v40 - 6) = v12;
    *(&v40 - 5) = v25;
    v27 = v53;
    v28 = v54[3];
    *(&v40 - 4) = v28;
    *(&v40 - 3) = v27;
    v29 = v47;
    *(&v40 - 2) = v47;
    *(&v40 - 1) = (uint64_t)v6;
    v30 = sub_1BE1B28E8();
    v54 = &v40;
    v56 = v30;
    MEMORY[0x1E0C80A78](v30);
    *(&v40 - 6) = v12;
    *(&v40 - 5) = v25;
    *(&v40 - 4) = v28;
    *(&v40 - 3) = v27;
    *(&v40 - 2) = v29;
    *(&v40 - 1) = (uint64_t)v6;
    v31 = sub_1BE1B2A5C();
    v32 = MEMORY[0x1E0DEAF50];
    v33 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v31);
    v34 = v55;
    v36 = sub_1BDF016D0((void (*)(char *, char *))sub_1BE170120, (uint64_t)(&v40 - 8), v31, v55, MEMORY[0x1E0DEDCE8], v33, MEMORY[0x1E0DEDD18], v35);
    swift_bridgeObjectRelease();
    v56 = v36;
    v38 = type metadata accessor for CRSequence(0, (uint64_t)v34, (uint64_t)&off_1E7758E40, v37);
    v39 = sub_1BE1B2A5C();
    MEMORY[0x1C3B7DF54](v32, v39);
    CRSequence.replaceSubrange<A>(_:with:)(v48, v42, (uint64_t)&v56, v38, v39);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v40 = v20;
    v23 = v41;
    if (a2 < v48)
    {
      __break(1u);
    }
    else if (v48 < a2)
    {
      v52 = v6 + 1;
      v24 = type metadata accessor for CRSequence(0, (uint64_t)v55, (uint64_t)&off_1E7758E40, v22);
      v50 = v16;
      v51 = v24;
      v49 = v19;
      v56 = *v6;
      CRSequence.subscript.getter();
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v14, v18, v12);
      (*(void (**)(char *, char *))(v50 + 8))(v18, v55);
      type metadata accessor for CRSet(0, v12, v54[3], v53);
      CRSet.remove(_:)();
    }
    __break(1u);
  }
  return result;
}

void sub_1BE1654CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for CRSet(0, v1, v3, v2);
  CRSet.insert(_:)();
}

uint64_t sub_1BE165540(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return a1 & 1;
}

uint64_t sub_1BE165574@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[4];

  v10 = type metadata accessor for Timestamp(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a3);
  v23[3] = *a2;
  v18 = type metadata accessor for CROrderedSetElement(255, a3, a4, v17);
  type metadata accessor for CRSequence(0, v18, (uint64_t)&off_1E7758E40, v19);
  sub_1BE0C65BC((uint64_t)v13);
  *(_QWORD *)&v13[*(int *)(type metadata accessor for Replica() + 20)] = 0;
  *(_QWORD *)&v13[*(int *)(v10 + 20)] = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v16, a3);
  v21 = type metadata accessor for CROrderedSetElement(0, a3, a4, v20);
  return sub_1BDDA2E8C((uint64_t)v13, a5 + *(int *)(v21 + 36), type metadata accessor for Timestamp);
}

Swift::Void __swiftcall CROrderedSet.removeAll()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v0;
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  type metadata accessor for CRSet(0, v3, v4, v5);
  CRSet.removeAll(keepingCapacity:)(0);
  v7 = type metadata accessor for CROrderedSetElement(255, v3, v5, v6);
  type metadata accessor for CRSequence(0, v7, (uint64_t)&off_1E7758E40, v8);
  CRSequence.removeAll()();
  v9 = v1 + *((int *)v2 + 12);
  v10 = type metadata accessor for CROrderedSet.DeduplicatedInfo(255, v3, v4, v5);
  v11 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t CROrderedSet.removeAll(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v38 = a1;
  v39 = a2;
  v37 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 32);
  v40 = v10;
  v12 = type metadata accessor for CROrderedSetElement(255, v10, v9, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = sub_1BE1B2EE8();
  v42 = *(_QWORD *)(v14 - 8);
  v43 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v30 - v18;
  v20 = sub_1BE1B206C();
  v33 = *(_QWORD *)(v20 - 8);
  v34 = v20;
  MEMORY[0x1E0C80A78](v20);
  v35 = (uint64_t)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B2060();
  v31 = a3;
  v32 = v3;
  v44 = sub_1BE165AA8(a3);
  v36 = v12;
  v22 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v22);
  sub_1BE1B28B8();
  swift_bridgeObjectRelease();
  v44 = v45;
  sub_1BE1B3230();
  sub_1BE1B320C();
  v41 = sub_1BE1B3224();
  v23 = v37;
  v24 = v40;
  while (1)
  {
    sub_1BE1B3218();
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v19, v17, v43);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v19, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      v28 = v35;
      CROrderedSet.remove(atOffsets:)(v35, v31);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v28, v34);
    }
    v25 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v7, v25, v24);
    (*(void (**)(char *))(*(_QWORD *)(v36 - 8) + 8))(v25);
    v26 = v38(v7);
    if (v4)
      break;
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
    if ((v27 & 1) != 0)
      sub_1BE1B1FF4();
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
}

uint64_t sub_1BE165AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[2];

  v3 = *(_QWORD *)(a1 - 8);
  v4 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v6 = (uint64_t *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = v4[3];
  v8 = v4[4];
  v21[0] = v4[2];
  v9 = type metadata accessor for CROrderedSet.DeduplicatedInfo(255, v21[0], v7, v8);
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)v21 - v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v21 - v12, v1 + *(int *)(a1 + 48), v10);
  v14 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v6, v1, a1);
LABEL_4:
    v21[1] = *v6;
    v18 = type metadata accessor for CROrderedSetElement(255, v21[0], v8, v15);
    type metadata accessor for CRSequence(0, v18, (uint64_t)&off_1E7758E40, v19);
    v16 = sub_1BE0C6404();
    goto LABEL_5;
  }
  v16 = *v13;
  v17 = *(void (**)(uint64_t *, uint64_t))(v14 + 8);
  swift_bridgeObjectRetain();
  v17(v13, v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v6, v1, a1);
  if (!v16)
    goto LABEL_4;
LABEL_5:
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v6, a1);
  return v16;
}

void CROrderedSet.remove(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[2];
  v5 = sub_1BE1B2EE8();
  v4 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v4);
  type metadata accessor for CRSet(0, v3, a2[3], a2[4]);
  CRSet.remove(_:)();
}

uint64_t sub_1BE165D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  char v20;
  _QWORD v22[18];

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v0) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v6, *(_QWORD *)(v8 - 128));
    v9 = 1;
    v10 = *(_QWORD *)(v8 - 104);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    *(_QWORD *)(v8 - 136) = v11;
    *(_QWORD *)(v8 - 128) = v1;
    v11(v1, v6, v0);
    v12 = *(_QWORD **)(v8 - 112);
    v13 = sub_1BE163FCC(v4);
    *(_QWORD *)(v8 - 88) = *v12;
    MEMORY[0x1E0C80A78](v13);
    v22[2] = v0;
    v22[3] = v7;
    v14 = *(_QWORD *)(v8 - 120);
    v22[4] = v5;
    v22[5] = v14;
    v16 = type metadata accessor for CROrderedSetElement(255, v0, v5, v15);
    v18 = type metadata accessor for CRSequence(0, v16, (uint64_t)&off_1E7758E40, v17);
    swift_retain();
    MEMORY[0x1C3B7DF54](&unk_1BE1C7C70, v16);
    v19 = sub_1BE0C671C((uint64_t (*)(char *))sub_1BE16E094, (uint64_t)v22, v18);
    LOBYTE(v16) = v20;
    swift_release();
    if ((v16 & 1) == 0)
      CRSequence.remove(at:)(v19);
    v10 = *(_QWORD *)(v8 - 104);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 - 136))(v10, *(_QWORD *)(v8 - 128), v0);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v9, 1, v0);
}

Swift::Void __swiftcall CROrderedSet.move(from:to:)(Swift::Int from, Swift::Int to)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v4 = v3;
  v5 = v2;
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](from);
  v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Timestamp(0);
  v11 = MEMORY[0x1E0C80A78](v42);
  v40 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v36 - v13;
  v16 = type metadata accessor for CROrderedSetElement(0, v8, *(_QWORD *)(v5 + 32), v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v36 - v21;
  if (from < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v38 = v20;
  v39 = v9;
  v23 = CROrderedSet.count.getter(v5);
  if (to < 0 || v23 <= from)
    goto LABEL_13;
  if (CROrderedSet.count.getter(v5) < to)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (from == to || to - 1 == from)
    return;
  v37 = to - 1;
  sub_1BE163FCC(v5);
  v43 = *v4;
  v25 = type metadata accessor for CRSequence(0, v16, (uint64_t)&off_1E7758E40, v24);
  CRSequence.subscript.getter();
  CRSequence.remove(at:)(from);
  v43 = *v4;
  sub_1BE0C65BC((uint64_t)v14);
  *(_QWORD *)&v14[*(int *)(type metadata accessor for Replica() + 20)] = 0;
  v26 = *(int *)(v42 + 20);
  v27 = *(_QWORD *)&v22[*(int *)(v16 + 36) + v26];
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v30 = v37;
  if (from >= (unint64_t)to)
    v30 = to;
  v42 = v30;
  *(_QWORD *)&v14[v26] = v29;
  v31 = v39;
  v32 = v41;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v41, v22, v8);
  v33 = v40;
  sub_1BDD9C318((uint64_t)v14, v40, type metadata accessor for Timestamp);
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v19, v32, v8);
  sub_1BDDA2E8C(v33, (uint64_t)&v19[*(int *)(v16 + 36)], type metadata accessor for Timestamp);
  CRSequence.insert(_:at:)((uint64_t)v19, v42, v25, v34);
  v35 = *(void (**)(char *, uint64_t))(v38 + 8);
  v35(v19, v16);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Timestamp);
  v35(v22, v16);
}

uint64_t CROrderedSet.count.getter(uint64_t a1)
{
  return sub_1BE16C8D0(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAE60]);
}

Swift::Void __swiftcall CROrderedSet.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v6;
  Swift::Int v7;

  if (a1 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v3 = v2;
  v6 = CROrderedSet.count.getter(v2);
  if (a2 < 0 || v6 <= a1)
    goto LABEL_11;
  if (CROrderedSet.count.getter(v3) <= a2)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (a2 < (unint64_t)a1)
  {
    v7 = a2;
    a2 = a1;
LABEL_8:
    CROrderedSet.move(from:to:)(a2, v7 + 1);
    CROrderedSet.move(from:to:)(v7, a2 + 1);
    return;
  }
  v7 = a1;
  if (a1 < (unint64_t)a2)
    goto LABEL_8;
}

BOOL CROrderedSet.contains(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for CRSet(0, a2[2], a2[3], a2[4]);
  return CRSet.contains(_:)(a1, v3);
}

uint64_t CROrderedSet.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for CRSet(0, a2[2], a2[3], a2[4]);
  return CRSet.subscript.getter(a1, v5, a3);
}

uint64_t CROrderedSet.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, _QWORD *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD *);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = v3;
  v41 = a1;
  v35 = a3;
  v6 = a2[2];
  v7 = sub_1BE1B2EE8();
  v8 = MEMORY[0x1E0C80A78](v7);
  v40 = (uint64_t)&v35 - v9;
  v10 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v8);
  v38 = a2[4];
  v39 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CROrderedSetElement(0, v6, v38, v12);
  v36 = *(_QWORD *)(v13 - 8);
  v37 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - v15;
  v17 = *(a2 - 1);
  v18 = MEMORY[0x1E0C80A78](v14);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v35 - v21;
  v23 = *(void (**)(char *, uint64_t, _QWORD *))(v17 + 16);
  v24 = v4;
  v23((char *)&v35 - v21, v4, a2);
  v23(v20, (uint64_t)v22, a2);
  if (v41 < 0)
  {
    v34 = *(void (**)(char *, _QWORD *))(v17 + 8);
    v34(v20, a2);
    result = ((uint64_t (*)(char *, _QWORD *))v34)(v22, a2);
    goto LABEL_6;
  }
  v25 = v41;
  v26 = CROrderedSet.count.getter((uint64_t)a2);
  v27 = *(void (**)(char *, _QWORD *))(v17 + 8);
  v27(v20, a2);
  result = ((uint64_t (*)(char *, _QWORD *))v27)(v22, a2);
  if (v26 <= v25)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v29 = *(_QWORD *)(v24 + 8);
  swift_retain();
  sub_1BE165AA8((uint64_t)a2);
  v30 = v37;
  sub_1BE1B2A8C();
  swift_bridgeObjectRelease();
  v31 = (uint64_t)v39;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v16, v6);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v30);
  v42 = v29;
  v32 = type metadata accessor for CRSet(0, v6, a2[3], v38);
  v33 = v40;
  CRSet.subscript.getter(v31, v32, v40);
  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33, 1, v6);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v31, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v35, v33, v6);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1BE166580@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *a1;
  v5 = (_QWORD *)type metadata accessor for CROrderedSet(0, *(uint64_t *)((char *)a1 + a2 - 24), *(uint64_t *)((char *)a1 + a2 - 16), *(uint64_t *)((char *)a1 + a2 - 8));
  return CROrderedSet.subscript.getter(v4, v5, a3);
}

uint64_t sub_1BE1665D4(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4)
{
  Swift::Int v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for CROrderedSet(0, *(Swift::Int *)((char *)a3 + a4 - 24), *(Swift::Int *)((char *)a3 + a4 - 16), *(Swift::Int *)((char *)a3 + a4 - 8));
  return sub_1BE16E0CC(a1, v5, v6);
}

uint64_t CROrderedSet.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  sub_1BE16E0CC(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*CROrderedSet.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(Swift::Int **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = a3[2];
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v11 = malloc(v10);
  v7[6] = v11;
  CROrderedSet.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_1BE1666F8;
}

void sub_1BE1666F8(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  void (*v9)(void *, Swift::Int);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[5], v4, v5);
    sub_1BE16E0CC((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    sub_1BE16E0CC((*a1)[6], v8, v7);
    v9 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CROrderedSet.index(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a1;
  v24 = a2;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = sub_1BE1B2EE8();
  v27 = *(_QWORD *)(v28 - 8);
  v9 = MEMORY[0x1E0C80A78](v28);
  v26 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - v11;
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  v13 = sub_1BE1B3230();
  MEMORY[0x1E0C80A78](v13);
  sub_1BE1B28B8();
  sub_1BE1B320C();
  v25 = sub_1BE1B3224();
  v15 = v21;
  v14 = v22;
  while (1)
  {
    v16 = v26;
    sub_1BE1B3218();
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v12, v16, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v12, 1, TupleTypeMetadata2) == 1)break;
    v17 = *(_QWORD *)v12;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v6, &v12[*(int *)(TupleTypeMetadata2 + 48)], v14);
    v18 = v23(v6);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v14);
    if (v3 || (v18 & 1) != 0)
      goto LABEL_7;
  }
  v17 = 0;
LABEL_7:
  swift_release();
  swift_bridgeObjectRelease();
  return v17;
}

void CROrderedSet.actionUndoingDifference(from:)(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v7 = *(a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CROrderedSet.hasDelta(from:)(v3, v10) & 1) != 0)
  {
    v11 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a2);
    CRDT.merging(_:)((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)v9);
    CROrderedSet.actionUndoingDifference(from:)(a1, a2);
    (*(void (**)(char *, _QWORD *))(v7 + 8))(v9, a2);
  }
  else
  {
    v12 = v3[1];
    v24 = a1[1];
    v25 = v12;
    v14 = a2[2];
    v13 = a2[3];
    v15 = a2[4];
    v16 = (_QWORD *)type metadata accessor for CRSet(0, v14, v13, v15);
    CRSet.actionUndoingDifference(from:)(&v24, v16, v26);
    v17 = v26[0];
    v18 = v26[1];
    v19 = *v3;
    v24 = *a1;
    v25 = v19;
    v21 = type metadata accessor for CROrderedSetElement(255, v14, v15, v20);
    type metadata accessor for CRSequence(0, v21, (uint64_t)&off_1E7758E40, v22);
    CRSequence.actionUndoingDifference(from:)(&v24, v26);
    v23 = v26[0];
    if (v17 | v26[0])
    {
      *a3 = v17;
      a3[1] = v18;
      a3[2] = v23;
    }
    else
    {
      *a3 = 1;
      a3[1] = 0;
      a3[2] = 0;
    }
  }
}

void CROrderedSet.apply(_:)(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13[2];

  v2 = *(void **)a1;
  if (*(_QWORD *)a1 != 1)
  {
    v4 = *(void **)(a1 + 8);
    v13[0] = *(id *)(a1 + 16);
    v5 = v13[0];
    sub_1BDDC8E74((uint64_t)v2);
    v6 = a2[2];
    v7 = a2[4];
    v9 = type metadata accessor for CROrderedSetElement(255, v6, v7, v8);
    v11 = type metadata accessor for CRSequence(0, v9, (uint64_t)&off_1E7758E40, v10);
    v12 = v13[0];
    if ((sub_1BE0C7084(v13, v11) & 1) != 0)
    {
      v13[0] = v2;
      v13[1] = v4;
      type metadata accessor for CRSet(0, v6, a2[3], v7);
      CRSet.apply(_:)(v13);
      sub_1BE162D38(1, (uint64_t)a2);
    }
    sub_1BDFB6538((uint64_t)v2, (uint64_t)v4, v5);
  }
}

uint64_t CROrderedSet.hasDelta(from:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD **v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void (*v26)(char *, _QWORD *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  BOOL v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (_QWORD *)((char *)v37 - v11);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v37 - v14;
  v16 = (_QWORD **)MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v37 - v17;
  v19 = *v2;
  v40 = *v16;
  v41 = v19;
  v21 = *(_QWORD *)(a2 + 32);
  v38 = *(_QWORD *)(v20 + 16);
  v39 = v21;
  v23 = type metadata accessor for CROrderedSetElement(255, v38, v21, v22);
  v37[1] = type metadata accessor for CRSequence(0, v23, (uint64_t)&off_1E7758E40, v24);
  v25 = sub_1BE0C6C7C(&v40);
  v26 = *(void (**)(char *, _QWORD *, uint64_t))(v6 + 16);
  v26(v18, v3, a2);
  v26(v15, a1, a2);
  if (v25)
  {
    v27 = *((_QWORD *)v18 + 1);
    v37[0] = v9;
    v28 = v12;
    v29 = *((_QWORD *)v15 + 1);
    v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v18, a2);
    v30(v15, a2);
    v31 = v27 == v29;
    v12 = v28;
    v9 = (char *)v37[0];
    if (v31)
    {
      v32 = 0;
      return v32 & 1;
    }
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t))(v6 + 8);
    v30(v18, a2);
    v30(v15, a2);
  }
  v33 = v3[1];
  v40 = (_QWORD *)a1[1];
  v41 = v33;
  type metadata accessor for CRSet(0, v38, *(_QWORD *)(a2 + 24), v39);
  v34 = CRSet.hasDelta(from:)(&v40);
  v26((char *)v12, v3, a2);
  v26(v9, a1, a2);
  if ((v34 & 1) != 0)
  {
    v30(v9, a2);
    v30((char *)v12, a2);
    v32 = 1;
  }
  else
  {
    v35 = *v12;
    v40 = *(_QWORD **)v9;
    v41 = v35;
    v32 = CRSequence.hasDelta(from:)((uint64_t *)&v40);
    v30(v9, a2);
    v30((char *)v12, a2);
  }
  return v32 & 1;
}

uint64_t CROrderedSet.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = v4[1];
  v28 = a2[1];
  v29 = v8;
  v9 = a3[2];
  v10 = a3[4];
  type metadata accessor for CRSet(0, v9, a3[3], v10);
  swift_retain();
  swift_retain();
  CRSet.delta(_:from:)(a1, &v28, &v30);
  swift_release();
  swift_release();
  v11 = v30;
  v26 = v31;
  v27 = *((_QWORD *)&v30 + 1);
  v12 = v34;
  v24 = v33;
  v25 = v32;
  v13 = *v4;
  v28 = *a2;
  v29 = v13;
  v15 = type metadata accessor for CROrderedSetElement(255, v9, v10, v14);
  v17 = type metadata accessor for CRSequence(0, v15, (uint64_t)&off_1E7758E40, v16);
  swift_retain();
  swift_retain();
  CRSequence.delta(_:from:)(a1, &v28, v17, &v30);
  swift_release();
  result = swift_release();
  v19 = v30;
  v20 = v11 | v30;
  if (v11 | (unint64_t)v30)
  {
    v21 = v26;
    v20 = v27;
    v23 = v24;
    v22 = v25;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v12 = 0;
    v19 = 0;
    v11 = 1;
  }
  *a4 = v11;
  a4[1] = v20;
  a4[2] = v21;
  a4[3] = v22;
  a4[4] = v23;
  a4[5] = v12;
  a4[6] = v19;
  return result;
}

uint64_t CROrderedSet.canMerge(delta:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)a1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v17 = v4[1];
    v13 = v6;
    v9 = *(_OWORD *)(a1 + 24);
    v14 = *(_OWORD *)(a1 + 8);
    v15 = v9;
    v16 = v8;
    type metadata accessor for CRSet(0, a2[2], a2[3], a2[4]);
    if ((CRSet.canMerge(delta:)(&v13) & 1) == 0)
      return 0;
  }
  if (v7
    && (v13 = *v4,
        v17 = v7,
        v10 = type metadata accessor for CROrderedSetElement(255, a2[2], a2[4], a4),
        type metadata accessor for CRSequence(0, v10, (uint64_t)&off_1E7758E40, v11),
        (CRSequence.canMerge(delta:)(&v17) & 1) == 0))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t CROrderedSet.merge(delta:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v9 = a1[5];
  v11 = a1[6];
  v20 = *a1;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v10;
  v25 = v9;
  v26 = v11;
  v13 = CROrderedSet.canMerge(delta:)((uint64_t)&v20, a2, a3, a4);
  if ((v13 & 1) != 0)
  {
    if (v5)
    {
      v20 = v5;
      v21 = v6;
      v22 = v7;
      v23 = v8;
      v24 = v10;
      v25 = v9;
      type metadata accessor for CRSet(0, a2[2], a2[3], a2[4]);
      CRSet.merge(delta:)();
    }
    if (v11)
    {
      v20 = v11;
      v14 = type metadata accessor for CROrderedSetElement(255, a2[2], a2[4], v12);
      v16 = type metadata accessor for CRSequence(0, v14, (uint64_t)&off_1E7758E40, v15);
      CRSequence.merge(delta:)(&v20, v16, v17, v18);
    }
    sub_1BE162D38(0, (uint64_t)a2);
  }
  return v13 & 1;
}

uint64_t CROrderedSet.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((CROrderedSet.hasDelta(from:)(v4, v12) & 1) == 0)
    return sub_1BE167D1C(v4, a2, a3, a4);
  v13 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  CRDT.merging(_:)(a1, (uint64_t)a3, v13, (uint64_t)v11);
  sub_1BE167D1C(v11, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t *, _QWORD *))(v9 + 8))(v11, a3);
}

uint64_t sub_1BE167350@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CROrderedSet.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t CROrderedSet.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CROrderedSet(0, a2, a3, a4);
  v29 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v29 - v15);
  v17 = *(int *)(v14 + 48);
  v30 = a5;
  v18 = a5 + v17;
  v19 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, a2, a3, a4);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v33 = v18;
  v20(v18, 1, 1, v19);
  v32 = a1;
  v21 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v12, &qword_1ED6F3728);
  v22 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v12, 1, v22);
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3728);
  if ((_DWORD)v21 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000014;
    *(_QWORD *)(v23 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v23 + 16) = 0;
    swift_willThrow();
LABEL_4:
    swift_release();
    v26 = sub_1BE1B2EE8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v33, v26);
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  v25 = v31;
  *(_QWORD *)(inited + 16) = v32;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  sub_1BDE13254(a2, a3, a4, v16);
  if (v25)
    goto LABEL_4;
  swift_release();
  v28 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v33, v28);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v29 + 32))(v30, v16, v13);
}

uint64_t sub_1BE1675FC(uint64_t a1, _QWORD *a2)
{
  return CROrderedSet.encode(to:)(a1, a2);
}

uint64_t CROrderedSet.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1BDDA8D6C();
  if (!v3)
  {
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    swift_retain();
    sub_1BDE1DF60(v2, v6, v7, v8);
    return swift_release();
  }
  return result;
}

BOOL CROrderedSet.hasEncodedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16) || *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) != 0;
}

void CROrderedSet.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static CROrderedSet.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  void (*v18)(uint64_t **, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t **, uint64_t);
  void (*v24)(uint64_t **, uint64_t);
  uint64_t *v26;
  uint64_t *v27;

  v9 = type metadata accessor for CROrderedSet(0, a3, a4, a5);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t **)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t **)((char *)&v26 - v14);
  v16 = *(uint64_t **)(a1 + 8);
  v26 = *(uint64_t **)(a2 + 8);
  v27 = v16;
  v17 = static CRSet.== infix(_:_:)((uint64_t)&v27, &v26);
  v18 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 16);
  v18(v15, a1, v9);
  v18(v13, a2, v9);
  if ((v17 & 1) != 0)
  {
    v20 = *v15;
    v26 = *v13;
    v27 = v20;
    v21 = type metadata accessor for CROrderedSetElement(0, a3, a5, v19);
    MEMORY[0x1C3B7DF54](&unk_1BE1C7C70, v21);
    v22 = sub_1BE0CB884(&v27, &v26);
    v23 = *(void (**)(uint64_t **, uint64_t))(v10 + 8);
    v23(v13, v9);
    v23(v15, v9);
  }
  else
  {
    v24 = *(void (**)(uint64_t **, uint64_t))(v10 + 8);
    v24(v13, v9);
    v24(v15, v9);
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_1BE16788C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static CROrderedSet.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

id CROrderedSet.filter(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  id result;

  v6 = v4;
  v11 = *(a3 - 1);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(a4, v6);
  result = sub_1BE167920(a1, a2, a3);
  if (v5)
    return (id)(*(uint64_t (**)(uint64_t, _QWORD *))(v11 + 8))(a4, a3);
  return result;
}

id sub_1BE167920(uint64_t (*a1)(char *), uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[10];
  uint64_t v20;

  v5 = v4;
  sub_1BE163FCC((uint64_t)a3);
  v19[9] = *(_QWORD *)(v3 + 8);
  v9 = a3[2];
  v10 = a3[3];
  v11 = a3[4];
  v12 = (_QWORD *)type metadata accessor for CRSet(0, v9, v10, v11);
  swift_retain();
  CRSet.filter(_:)(a1, a2, v12, (uint64_t)&v20);
  result = (id)swift_release();
  if (!v5)
  {
    v14 = swift_release();
    *(_QWORD *)(v3 + 8) = v20;
    MEMORY[0x1E0C80A78](v14);
    v19[2] = v9;
    v19[3] = v10;
    v19[4] = v11;
    v19[5] = a1;
    v19[6] = a2;
    v16 = type metadata accessor for CROrderedSetElement(255, v9, v11, v15);
    v18 = type metadata accessor for CRSequence(0, v16, (uint64_t)&off_1E7758E40, v17);
    return sub_1BE0CAF74((uint64_t)sub_1BE170134, (uint64_t)v19, v18);
  }
  return result;
}

uint64_t CROrderedSet.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CROrderedSet.ObservableDifference.removed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CROrderedSet.ObservableDifference.moved.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CROrderedSet.ObservableDifference.added.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CROrderedSet.ObservableDifference.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - v10;
  v12 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  v12((char *)&v19 - v10, v3, a2);
  v12(v9, (uint64_t *)v11, a2);
  if (a1 < 0)
  {
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v11, a2);
    result = ((uint64_t (*)(char *, uint64_t))v18)(v9, a2);
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v14 = sub_1BE1B260C();
    v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v11, a2);
    result = ((uint64_t (*)(char *, uint64_t))v15)(v9, a2);
    if (v14 > a1)
    {
      v17 = *v3;
      v20 = a1;
      return MEMORY[0x1C3B7C58C](&v20, v17, MEMORY[0x1E0DEB418], AssociatedTypeWitness, MEMORY[0x1E0DEB428]);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE167C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int *v12;
  char *v13;
  uint64_t v14;
  void (*v16)(char *, uint64_t, uint64_t);

  *a8 = a1;
  v12 = (int *)type metadata accessor for CROrderedSet.ObservableDifference(0, a5, a6, a7);
  v13 = (char *)a8 + v12[11];
  v14 = sub_1BE1B206C();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v16(v13, a2, v14);
  *(_QWORD *)((char *)a8 + v12[12]) = a3;
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v16)((char *)a8 + v12[13], a4, v14);
}

uint64_t sub_1BE167D1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  void (*v88)(void);
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  void (*v92)(char *, uint64_t *, _QWORD *);
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t *, _QWORD *);
  char *v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  BOOL v103;
  uint64_t v104;
  uint64_t result;
  char *v106;
  char *v107;
  void (*v108)(void);
  uint64_t v109;
  uint64_t v110;
  int v111;
  void (*v112)(char *, void (*)(void));
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  void (*v127)(void);
  void (*v128)(void);
  void (*v129)(char *, void (*)(void));
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void (*v153)(void);
  unsigned int (*v154)(uint64_t *, uint64_t, uint64_t);
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t TupleTypeMetadata3;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  char *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  char *v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  char *v238;
  uint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  _QWORD *v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v290;
  uint64_t v291;
  unsigned int (*v292)(uint64_t *, uint64_t, uint64_t);
  int v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t (*v301)(uint64_t, uint64_t, uint64_t);
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void (*v308)(char *, char *, uint64_t);
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  void (*v322)(char *, uint64_t);
  uint64_t v323;
  uint64_t v324;
  uint64_t (*v325)(uint64_t, uint64_t, uint64_t);
  uint64_t v326;
  char *v327;
  void (*v328)(char *, uint64_t);
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  BOOL v339;
  void (*v340)(char *, uint64_t);
  uint64_t v341;
  _QWORD v342[3];
  char *v343;
  char *v344;
  _QWORD *v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t *v367;
  char *v368;
  uint64_t v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  void (*v384)(void);
  uint64_t TupleTypeMetadata2;
  __int128 v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  _QWORD *v390;
  __int128 v391;
  uint64_t v392;
  __int128 v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;

  v367 = a1;
  v345 = a4;
  v6 = a3[2];
  v7 = sub_1BE1B2EE8();
  v8 = MEMORY[0x1E0C80A78](v7);
  v358 = (uint64_t)v342 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v369 = (uint64_t)v342 - v10;
  v11 = a3[3];
  v356 = *(_QWORD *)(v11 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v349 = sub_1BE1B2EE8();
  v348 = *(_QWORD *)(v349 - 8);
  v13 = MEMORY[0x1E0C80A78](v349);
  v347 = (char *)v342 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v357 = (char *)v342 - v16;
  v362 = AssociatedTypeWitness;
  v355 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15);
  v346 = (char *)v342 - v17;
  v18 = a3[4];
  v20 = type metadata accessor for CROrderedSetElement(255, v6, v18, v19);
  v21 = sub_1BE1B2EE8();
  v22 = MEMORY[0x1E0C80A78](v21);
  v360 = (uint64_t)v342 - v23;
  v24 = *(_QWORD *)(v20 - 8);
  v397 = v20;
  v25 = MEMORY[0x1E0C80A78](v22);
  v359 = (char *)v342 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v370 = (char *)v342 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  *(_QWORD *)&v393 = (char *)v342 - v30;
  v352 = v31;
  v32 = MEMORY[0x1E0C80A78](v29);
  *(_QWORD *)&v391 = (char *)v342 - v33;
  v395 = *(_QWORD *)(v6 - 8);
  v34 = MEMORY[0x1E0C80A78](v32);
  v368 = (char *)v342 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v380 = (char *)v342 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v377 = (char *)v342 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v389 = (uint64_t)v342 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v44 = (char *)v342 - v43;
  MEMORY[0x1E0C80A78](v42);
  v46 = (char *)v342 - v45;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v387 = sub_1BE1B2EE8();
  v394 = *(_QWORD *)(v387 - 8);
  v47 = MEMORY[0x1E0C80A78](v387);
  v354 = (char *)v342 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0C80A78](v47);
  v382 = (char *)v342 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v388 = (char *)v342 - v52;
  MEMORY[0x1E0C80A78](v51);
  v54 = (_QWORD *)((char *)v342 - v53);
  v361 = v11;
  v396 = (char *)v18;
  v392 = type metadata accessor for CROrderedSet.DeduplicatedInfo(255, v6, v11, v18);
  v384 = (void (*)(void))sub_1BE1B2EE8();
  v383 = *((_QWORD *)v384 - 1);
  v55 = MEMORY[0x1E0C80A78](v384);
  v379 = (char *)v342 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v55);
  v373 = (char *)v342 - v57;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v59 = MEMORY[0x1E0C80A78](v58);
  v372 = (char *)v342 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v59);
  v371 = (char *)v342 - v61;
  v351 = sub_1BE1B206C();
  v350 = *(_QWORD *)(v351 - 8);
  v62 = MEMORY[0x1E0C80A78](v351);
  v344 = (char *)v342 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = MEMORY[0x1E0C80A78](v62);
  v343 = (char *)v342 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v375 = (char *)v342 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v376 = (char *)v342 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v364 = (char *)v342 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v353 = (char *)v342 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v381 = (char *)v342 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = MEMORY[0x1E0C80A78](v74);
  *(_QWORD *)&v386 = (char *)v342 - v77;
  v78 = MEMORY[0x1E0C80A78](v76);
  v80 = (_QWORD *)((char *)v342 - v79);
  MEMORY[0x1E0C80A78](v78);
  v82 = (_QWORD *)((char *)v342 - v81);
  v363 = a2;
  v83 = *(_QWORD *)(a2 + 24);
  v374 = v84;
  v85 = *(char **)(v84 + 16);
  ((void (*)(char *, _QWORD *, _QWORD *))v85)((char *)v342 - v81, v366, a3);
  v86 = a3;
  v87 = v397;
  v390 = v86;
  v378 = v85;
  ((void (*)(_QWORD *, uint64_t *))v85)(v80, v367);
  if (v83)
  {
    v88 = *(void (**)(void))(v374 + 8);
    v89 = v80;
    v90 = v390;
    ((void (*)(_QWORD *, _QWORD *))v88)(v89, v390);
    ((void (*)(uint64_t *, _QWORD *))v88)(v82, v90);
    v91 = v366;
    v92 = (void (*)(char *, uint64_t *, _QWORD *))v378;
    ((void (*)(_QWORD, _QWORD *, _QWORD *))v378)(v386, v366, v90);
    v92(v381, v367, v90);
    v93 = v395;
    v94 = v90;
LABEL_8:
    ((void (*)(_QWORD, _QWORD *))v88)(v386, v94);
    ((void (*)(char *, _QWORD *))v88)(v381, v94);
    goto LABEL_9;
  }
  v365 = *v82;
  v88 = *(void (**)(void))(v374 + 8);
  swift_retain();
  v95 = v390;
  ((void (*)(uint64_t *, _QWORD *))v88)(v82, v390);
  v407 = (char *)v365;
  v96 = *v80;
  swift_retain();
  ((void (*)(_QWORD *, _QWORD *))v88)(v80, v95);
  v404 = v96;
  type metadata accessor for CRSequence(0, v87, (uint64_t)&off_1E7758E40, v97);
  LODWORD(v374) = sub_1BE0C6C7C(&v404);
  swift_release();
  swift_release();
  v91 = v366;
  v98 = (void (*)(char *, uint64_t *, _QWORD *))v378;
  ((void (*)(_QWORD, _QWORD *, _QWORD *))v378)(v386, v366, v95);
  v99 = v381;
  v98(v381, v367, v95);
  if ((v374 & 1) == 0)
  {
    v93 = v395;
    v94 = v390;
    goto LABEL_8;
  }
  v378 = *(char **)(v386 + 8);
  v100 = v91;
  v101 = (char *)*((_QWORD *)v99 + 1);
  v102 = v99;
  v94 = v390;
  v88();
  ((void (*)(char *, _QWORD *))v88)(v102, v94);
  v103 = v378 == v101;
  v91 = v100;
  v93 = v395;
  if (v103)
  {
    v104 = type metadata accessor for CROrderedSet.ObservableDifference(0, v6, v361, (uint64_t)v396);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v345, 1, 1, v104);
  }
LABEL_9:
  *(_QWORD *)&v386 = *v91;
  v413 = v386;
  v106 = (char *)v91 + *((int *)v94 + 12);
  v107 = v373;
  v108 = v384;
  v381 = *(char **)(v383 + 16);
  ((void (*)(char *, char *, void (*)(void)))v381)(v373, v106, v384);
  v109 = v392;
  v110 = *(_QWORD *)(v392 - 8);
  v374 = *(_QWORD *)(v110 + 48);
  v111 = ((uint64_t (*)(char *, uint64_t, uint64_t))v374)(v107, 1, v392);
  v378 = v46;
  v365 = v110;
  if (v111 == 1)
  {
    v112 = *(void (**)(char *, void (*)(void)))(v383 + 8);
    swift_retain();
    v112(v107, v108);
    v113 = (uint64_t)v371;
    *(_QWORD *)&v386 = *(_QWORD *)(v350 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v386)(v371, 1, 1, v351);
    v114 = v367;
LABEL_13:
    v120 = v390;
    sub_1BDD86E30(v113, &qword_1ED6F3C78);
    goto LABEL_15;
  }
  v115 = v371;
  v116 = v351;
  (*(void (**)(char *, char *, uint64_t))(v350 + 16))(v371, &v107[*(int *)(v109 + 44)], v351);
  v117 = *(void (**)(char *, uint64_t))(v110 + 8);
  swift_retain();
  v118 = v109;
  v113 = (uint64_t)v115;
  v119 = v350;
  v117(v107, v118);
  *(_QWORD *)&v386 = *(_QWORD *)(v119 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v386)(v113, 0, 1, v116);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v113, 1, v116) == 1)
  {
    v114 = v367;
    v46 = v378;
    goto LABEL_13;
  }
  v121 = v353;
  (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))(v353, v113, v116);
  v123 = type metadata accessor for CRSequence(0, v397, (uint64_t)&off_1E7758E40, v122);
  sub_1BE0CA770((uint64_t)v121, v123);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v116);
  v114 = v367;
  v46 = v378;
  v120 = v390;
LABEL_15:
  v124 = v392;
  v412 = *v114;
  v125 = (char *)v114 + *((int *)v120 + 12);
  v126 = v379;
  v127 = v384;
  ((void (*)(char *, char *, void (*)(void)))v381)(v379, v125, v384);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v374)(v126, 1, v124) == 1)
  {
    v128 = v127;
    v129 = *(void (**)(char *, void (*)(void)))(v383 + 8);
    swift_retain();
    v129(v126, v128);
    v130 = (uint64_t)v372;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v386)(v372, 1, 1, v351);
LABEL_18:
    sub_1BDD86E30(v130, &qword_1ED6F3C78);
    v138 = v397;
    goto LABEL_20;
  }
  v131 = &v126[*(int *)(v124 + 44)];
  v132 = v350;
  v133 = v372;
  v134 = v351;
  (*(void (**)(char *, char *, uint64_t))(v350 + 16))(v372, v131, v351);
  v135 = *(void (**)(char *, uint64_t))(v365 + 8);
  v130 = (uint64_t)v133;
  swift_retain();
  v135(v379, v392);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v386)(v133, 0, 1, v134);
  v136 = v134;
  v46 = v378;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v133, 1, v136) == 1)
    goto LABEL_18;
  v139 = v350;
  v140 = (uint64_t)v364;
  v141 = v351;
  (*(void (**)(char *, uint64_t, uint64_t))(v350 + 32))(v364, v130, v351);
  v138 = v397;
  v143 = type metadata accessor for CRSequence(0, v397, (uint64_t)&off_1E7758E40, v142);
  sub_1BE0CA770(v140, v143);
  v144 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
  v46 = v378;
  v144(v140, v141);
LABEL_20:
  v145 = v413;
  v404 = v412;
  v411 = v413;
  v146 = type metadata accessor for CRSequence(0, v138, (uint64_t)&off_1E7758E40, v137);
  swift_retain();
  swift_retain();
  v392 = v146;
  CRSequence.observableDifference(from:with:)((uint64_t)&v411, v146, (uint64_t *)&v407);
  swift_release();
  swift_release();
  if (v407)
  {
    v372 = v407;
  }
  else
  {
    type metadata accessor for _NSRange(255);
    type metadata accessor for CRSequenceStorage(255, v397, (uint64_t)&off_1E7758E40, v147);
    sub_1BE1B2EE8();
    swift_getTupleTypeMetadata3();
    v372 = (char *)sub_1BE1B29D8();
  }
  v148 = v387;
  v411 = sub_1BE1B257C();
  v410 = sub_1BE1B257C();
  v407 = (char *)v145;
  v149 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSequence<A>, v392);
  sub_1BE1B28B8();
  v406 = v404;
  v342[1] = sub_1BE1B3230();
  sub_1BE1B320C();
  v342[2] = v149;
  v150 = sub_1BE1B3224();
  v151 = TupleTypeMetadata2;
  v374 = v150;
  v152 = v388;
  while (1)
  {
    sub_1BE1B3218();
    v153 = *(void (**)(void))(v394 + 32);
    ((void (*)(uint64_t *, char *, uint64_t))v153)(v54, v152, v148);
    v154 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 48);
    if (v154(v54, 1, v151) == 1)
      break;
    v155 = *v54;
    v156 = (char *)v54 + *(int *)(v151 + 48);
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v46, v156, v6);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v156, v397);
    v404 = v155;
    v148 = v387;
    v405 = 0;
    sub_1BE1B2684();
    sub_1BE1B26B4();
  }
  v384 = v153;
  swift_bridgeObjectRelease();
  sub_1BE1B2060();
  sub_1BE1B2060();
  type metadata accessor for _NSRange(255);
  v157 = v397;
  type metadata accessor for CRSequenceStorage(255, v397, (uint64_t)&off_1E7758E40, v158);
  sub_1BE1B2EE8();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v160 = v372;
  v161 = MEMORY[0x1C3B7C8EC](v372, TupleTypeMetadata3);
  v394 = v24;
  if (v161 < 1)
  {
    swift_bridgeObjectRelease();
    v389 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v381 = (char *)v154;
    v406 = sub_1BE1B2594();
    v403 = sub_1BE1B2594();
    v162 = swift_bridgeObjectRetain();
    v163 = MEMORY[0x1C3B7C928](v162, TupleTypeMetadata3);
    v371 = (char *)TupleTypeMetadata3;
    if (v163)
    {
      v164 = 0;
      v165 = 0;
      v379 = v160 + 32;
      while (1)
      {
        v166 = sub_1BE1B29FC();
        sub_1BE1B29A8();
        if ((v166 & 1) == 0)
          break;
        if (__OFADD__(v165, 1))
          goto LABEL_210;
        v167 = &v379[32 * v165];
        v168 = *(_QWORD *)v167;
        v169 = *((_QWORD *)v167 + 1);
        v170 = *(_QWORD *)v167 + v169;
        if (__OFADD__(*(_QWORD *)v167, v169))
          goto LABEL_211;
        if (v170 < v168)
          goto LABEL_212;
        v172 = *((_QWORD *)v167 + 2);
        v171 = (_QWORD *)*((_QWORD *)v167 + 3);
        v383 = v165 + 1;
        *(_QWORD *)&v386 = v172;
        v390 = v171;
        if (v168 != v170)
        {
          if (v168 < v170)
          {
            v174 = v171;
            while (!__OFADD__(v168, v164))
            {
              ++v168;
              v407 = (char *)v413;
              v175 = v391;
              CRSequence.subscript.getter();
              (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v44, v175, v6);
              sub_1BE1B2BF4();
              sub_1BE1B2BB8();
              (*(void (**)(char *, uint64_t))(v93 + 8))(v46, v6);
              (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v175, v397);
              if (!--v169)
                goto LABEL_39;
            }
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            v338 = sub_1BE1B1FB8();
            swift_release();
            swift_release();
            v339 = v338 < 1;
            v305 = v351;
            v306 = v350;
            if (!v339)
              goto LABEL_174;
            swift_bridgeObjectRelease();
            v340 = *(void (**)(char *, uint64_t))(v306 + 8);
            v340(v375, v305);
            v340(v376, v305);
            v341 = type metadata accessor for CROrderedSet.ObservableDifference(0, v6, v361, (uint64_t)v44);
            (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v341 - 8) + 56))(v345, 1, 1, v341);
            swift_bridgeObjectRelease();
            goto LABEL_175;
          }
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v173 = v171;
LABEL_39:
        v176 = v397;
        v177 = v390;
        if (v390)
        {
          v178 = sub_1BE0CC97C();
          v390 = v177;
          v179 = swift_bridgeObjectRetain();
          if (MEMORY[0x1C3B7C928](v179, v176))
          {
            v180 = 0;
            do
            {
              v181 = sub_1BE1B29FC();
              sub_1BE1B29A8();
              if ((v181 & 1) != 0)
              {
                (*(void (**)(_QWORD, unint64_t, uint64_t))(v24 + 16))(v393, v178+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v180, v176);
                v182 = v180 + 1;
                if (__OFADD__(v180, 1))
                  goto LABEL_191;
              }
              else
              {
                result = sub_1BE1B30BC();
                if (v352 != (char *)8)
                  goto LABEL_227;
                v407 = (char *)result;
                (*(void (**)(_QWORD, char **, uint64_t))(v24 + 16))(v393, &v407, v176);
                swift_unknownObjectRelease();
                v182 = v180 + 1;
                if (__OFADD__(v180, 1))
                  goto LABEL_191;
              }
              v183 = v393;
              (*(void (**)(char *, _QWORD, uint64_t))(v93 + 16))(v44, v393, v6);
              v184 = v394;
              v176 = v397;
              (*(void (**)(uint64_t, uint64_t))(v394 + 8))(v183, v397);
              sub_1BE1B2BF4();
              sub_1BE1B2BB8();
              (*(void (**)(char *, uint64_t))(v395 + 8))(v46, v6);
              ++v180;
              v103 = v182 == MEMORY[0x1C3B7C928](v178, v176);
              v24 = v184;
              v93 = v395;
            }
            while (!v103);
          }
          v185 = v390;

          swift_bridgeObjectRelease();
        }
        v186 = __OFSUB__(v164, (_QWORD)v386);
        v164 -= v386;
        if (v186)
          goto LABEL_213;
        v160 = v372;
        TupleTypeMetadata3 = (uint64_t)v371;
        v187 = MEMORY[0x1C3B7C928](v372, v371);
        v165 = v383;
        if (v383 == v187)
          goto LABEL_54;
      }
LABEL_209:
      sub_1BE1B30BC();
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }
LABEL_54:
    swift_bridgeObjectRelease();
    v188 = (uint64_t)v396;
    v402 = sub_1BE1B257C();
    v373 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F110);
    v401 = sub_1BE1B257C();
    if (MEMORY[0x1C3B7C928](v160, TupleTypeMetadata3))
    {
      v379 = 0;
      v189 = 0;
      v190 = 0;
      v352 = v160 + 32;
      v390 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v191 = sub_1BE1B29FC();
        result = sub_1BE1B29A8();
        if ((v191 & 1) == 0)
          break;
        v192 = v190 + 1;
        if (__OFADD__(v190, 1))
          goto LABEL_216;
        v193 = &v352[32 * (_QWORD)v190];
        v194 = *(_QWORD *)v193;
        *(_QWORD *)&v386 = *((_QWORD *)v193 + 1);
        v195 = v194 + v386;
        if (__OFADD__(v194, (_QWORD)v386))
          goto LABEL_217;
        if (v195 < v194)
          goto LABEL_218;
        v197 = *((_QWORD *)v193 + 2);
        v196 = (void *)*((_QWORD *)v193 + 3);
        *(_QWORD *)&v393 = v194;
        v364 = v192;
        v365 = v197;
        v383 = (uint64_t)v196;
        if (v194 != v195)
        {
          v198 = v377;
          if (v194 >= v195)
            goto LABEL_225;
          v225 = v196;
          v226 = 0;
          while (1)
          {
            v227 = (uint64_t)&v379[v194 + v226];
            if (__OFADD__(v194 + v226, v379))
              break;
            v407 = (char *)v413;
            v228 = v391;
            CRSequence.subscript.getter();
            v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
            v229(v389, v228, v6);
            v230 = v228;
            v231 = v389;
            (*(void (**)(uint64_t, uint64_t))(v394 + 8))(v230, v397);
            swift_bridgeObjectRetain();
            v232 = sub_1BE1B2BE8();
            swift_bridgeObjectRelease();
            if ((v232 & 1) != 0)
            {
              v233 = v189 + v393;
              if (__OFADD__(v189, (_QWORD)v393))
                goto LABEL_205;
              v188 = (uint64_t)v396;
              MEMORY[0x1C3B7C58C](&v407, v231, v402, v6, MEMORY[0x1E0DEB418], v396);
              if ((v408 & 1) != 0)
              {
                v234 = v378;
                v229((uint64_t)v378, v231, v6);
                v46 = v234;
                v407 = (char *)v227;
                v408 = v233;
                v409 = 0;
                sub_1BE1B2684();
                sub_1BE1B26B4();
                v93 = v395;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(v395 + 8))(v231, v6);
              }
              else
              {
                v235 = (unint64_t)v407;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  v46 = v378;
                  v236 = v390;
                  if ((v235 & 0x8000000000000000) != 0)
                    goto LABEL_207;
                }
                else
                {
                  v236 = sub_1BDFCEA28(v390);
                  v46 = v378;
                  if ((v235 & 0x8000000000000000) != 0)
                    goto LABEL_207;
                }
                if (v235 >= v236[2])
                  goto LABEL_208;
                v390 = v236;
                v237 = &v236[4 * v235];
                v237[4] = v227;
                v237[5] = v233;
                v93 = v395;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(v395 + 8))(v231, v6);
                v188 = (uint64_t)v396;
              }
              v186 = __OFADD__(v189++, 1);
              v194 = v393;
              if (v186)
                goto LABEL_206;
            }
            else
            {
              sub_1BE1B1FF4();
              result = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v231, v6);
              v188 = (uint64_t)v396;
              v46 = v378;
              v194 = v393;
            }
            if ((_QWORD)v386 == ++v226)
              goto LABEL_62;
          }
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
          goto LABEL_209;
        }
        result = v196;
        v198 = v377;
LABEL_62:
        v199 = (void *)v383;
        if (v383)
        {
          v200 = v188;
          v407 = (char *)sub_1BE0CC97C();
          v201 = v397;
          v202 = sub_1BE1B2A5C();
          v353 = v199;
          MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v202);
          sub_1BE1B28B8();
          v400 = (_QWORD *)v404;
          sub_1BE1B3230();
          sub_1BE1B320C();
          v383 = sub_1BE1B3224();
          v203 = v387;
          while (1)
          {
            sub_1BE1B3218();
            v205 = (uint64_t *)v382;
            v384();
            v206 = TupleTypeMetadata2;
            if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v381)(v205, 1, TupleTypeMetadata2) == 1)
              break;
            v207 = v201;
            v208 = *v205;
            v209 = (char *)v205 + *(int *)(v206 + 48);
            v210 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
            v210(v198, v209, v6);
            (*(void (**)(char *, uint64_t))(v394 + 8))(v209, v207);
            swift_bridgeObjectRetain();
            LOBYTE(v207) = sub_1BE1B2BE8();
            swift_bridgeObjectRelease();
            if ((v207 & 1) != 0)
            {
              v211 = v393 + v189;
              if (__OFADD__((_QWORD)v393, v189))
                goto LABEL_197;
              v212 = v211 + v208;
              if (__OFADD__(v211, v208))
                goto LABEL_200;
              v210(v46, v198, v6);
              v404 = v390[2];
              v405 = 0;
              sub_1BE1B2684();
              sub_1BE1B26B4();
              v213 = v198;
              v214 = (uint64_t)v380;
              v210(v380, v213, v6);
              v215 = v401;
              v216 = *(_QWORD *)(v401 + 16);
              *(_QWORD *)&v217 = -1;
              *((_QWORD *)&v217 + 1) = -1;
              v386 = v217;
              if (v216)
              {
                v218 = sub_1BDE0D1D0(v214, v6, v200);
                if ((v219 & 1) != 0)
                  v386 = *(_OWORD *)(*(_QWORD *)(v215 + 56) + 16 * v218);
              }
              v44 = *(char **)(v93 + 8);
              ((void (*)(char *, uint64_t))v44)(v380, v6);
              v186 = __OFADD__((_QWORD)v393, v208);
              v220 = v393 + v208;
              v198 = v377;
              if (v186)
                goto LABEL_201;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                v221 = v390;
              else
                v221 = sub_1BDE06F6C(0, v390[2] + 1, 1, v390);
              v223 = v221[2];
              v222 = v221[3];
              if (v223 >= v222 >> 1)
                v221 = sub_1BDE06F6C((_QWORD *)(v222 > 1), v223 + 1, 1, v221);
              v221[2] = v223 + 1;
              v390 = v221;
              v204 = &v221[4 * v223];
              *((_OWORD *)v204 + 2) = v386;
              v204[6] = v212;
              v204[7] = v220;
              v93 = v395;
              v200 = (uint64_t)v396;
              ((void (*)(char *, uint64_t))v44)(v198, v6);
            }
            else
            {
              if (__OFADD__(v208, (_QWORD)v393))
                goto LABEL_198;
              sub_1BE1B1FF4();
              v44 = *(char **)(v93 + 8);
              ((void (*)(char *, uint64_t))v44)(v198, v6);
            }
            v186 = __OFSUB__(v189--, 1);
            v201 = v397;
            v203 = v387;
            if (v186)
              goto LABEL_192;
          }
          v224 = v353;

          result = swift_bridgeObjectRelease();
          v188 = v200;
        }
        else
        {
          v203 = v387;
        }
        v186 = __OFSUB__(v379, v365);
        v379 -= v365;
        v238 = v388;
        if (v186)
          goto LABEL_219;
        v239 = MEMORY[0x1C3B7C928](v372, v371);
        v190 = v364;
        if (v364 == (char *)v239)
          goto LABEL_106;
      }
LABEL_215:
      result = sub_1BE1B30BC();
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }
    v390 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v203 = v387;
    v238 = v388;
LABEL_106:
    result = swift_bridgeObjectRelease();
    v399 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v400 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v240 = v390;
    if (v390[2])
    {
      v241 = 0;
      v242 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v243 = v390[2];
      v244 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v393 = v243;
      while (v241 < v243)
      {
        v245 = (uint64_t)&v240[4 * v241 + 4];
        v248 = *(_QWORD *)(v245 + 8);
        v247 = (uint64_t *)(v245 + 8);
        v246 = v248;
        v249 = v244[2];
        if (v249)
        {
          v250 = 0;
          v251 = v244 + 4;
          v252 = v244[2];
          while (1)
          {
            v253 = *v251++;
            if (v246 >= v253)
            {
              v186 = __OFADD__(v250++, 1);
              if (v186)
                goto LABEL_199;
            }
            if (!--v252)
              goto LABEL_117;
          }
        }
        v250 = 0;
LABEL_117:
        v254 = v242[2];
        if (v254)
        {
          v255 = v242 + 4;
          v256 = v242[2];
          do
          {
            v257 = *v255++;
            if (v257 < v246)
            {
              v186 = __OFSUB__(v250--, 1);
              if (v186)
                goto LABEL_202;
            }
          }
          while (--v256);
        }
        v258 = v240[4 * v241 + 6];
        v259 = 0;
        if (v249)
        {
          v260 = v244 + 4;
          do
          {
            v261 = *v260++;
            if (v258 >= v261)
            {
              v186 = __OFADD__(v259++, 1);
              if (v186)
                goto LABEL_203;
            }
          }
          while (--v249);
        }
        if (v254)
        {
          v262 = v242 + 4;
          do
          {
            v263 = *v262++;
            if (v263 < v258)
            {
              v186 = __OFSUB__(v259--, 1);
              if (v186)
                goto LABEL_204;
            }
          }
          while (--v254);
        }
        swift_beginAccess();
        v244 = v400;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v244 = sub_1BDE06F60(0, v244[2] + 1, 1, v244);
        v265 = v244[2];
        v264 = v244[3];
        if (v265 >= v264 >> 1)
          v244 = sub_1BDE06F60((_QWORD *)(v264 > 1), v265 + 1, 1, v244);
        v244[2] = v265 + 1;
        v244[v265 + 4] = v258;
        v400 = v244;
        result = swift_endAccess();
        if (v241 >= v240[2])
          goto LABEL_221;
        v266 = *v247;
        swift_beginAccess();
        v242 = v399;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v242 = sub_1BDE06F60(0, v242[2] + 1, 1, v242);
        v268 = v242[2];
        v267 = v242[3];
        if (v268 >= v267 >> 1)
          v242 = sub_1BDE06F60((_QWORD *)(v267 > 1), v268 + 1, 1, v242);
        v242[2] = v268 + 1;
        v242[v268 + 4] = v266;
        v399 = v242;
        swift_endAccess();
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1BDFCEA28(v240);
          v240 = (_QWORD *)result;
        }
        v93 = v395;
        v269 = (uint64_t *)v354;
        v243 = v240[2];
        v270 = v393;
        if (v241 >= v243)
          goto LABEL_222;
        v271 = (uint64_t)&v240[4 * v241 + 4];
        v272 = *(_QWORD *)(v271 + 8);
        v273 = v272 + v250;
        if (__OFADD__(v272, v250))
          goto LABEL_223;
        *(_QWORD *)(v271 + 8) = v273;
        v275 = *(_QWORD *)(v271 + 16);
        v274 = (_QWORD *)(v271 + 16);
        v276 = v275 + v259;
        if (__OFADD__(v275, v259))
          goto LABEL_224;
        ++v241;
        *v274 = v276;
        v238 = v388;
        if (v241 == v270)
        {
          v277 = v240;
          result = swift_bridgeObjectRetain();
          v278 = v240 + 6;
          v279 = MEMORY[0x1E0DEE9D8];
          v203 = v387;
          do
          {
            v285 = *((_OWORD *)v278 - 1);
            v286 = *(v278 - 1);
            v287 = *v278;
            if (v286 != *v278)
            {
              v186 = __OFSUB__(v287, 1);
              v288 = v287 - 1;
              if (v186)
                goto LABEL_226;
              if (v286 != v288)
              {
                v391 = *(_OWORD *)v278;
                v393 = v285;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v407 = (char *)v279;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_1BDE22918(0, *(_QWORD *)(v279 + 16) + 1, 1);
                  v279 = (uint64_t)v407;
                }
                v280 = v393;
                v281 = v391;
                v283 = *(_QWORD *)(v279 + 16);
                v282 = *(_QWORD *)(v279 + 24);
                result = (uint64_t)v277;
                if (v283 >= v282 >> 1)
                {
                  sub_1BDE22918(v282 > 1, v283 + 1, 1);
                  v281 = v391;
                  v280 = v393;
                  result = (uint64_t)v277;
                  v279 = (uint64_t)v407;
                }
                *(_QWORD *)(v279 + 16) = v283 + 1;
                v284 = v279 + 32 * v283;
                *(_OWORD *)(v284 + 32) = v280;
                *(_OWORD *)(v284 + 48) = v281;
                v203 = v387;
                v269 = (uint64_t *)v354;
              }
            }
            v278 += 4;
            --v243;
          }
          while (v243);
          v389 = v279;
          swift_bridgeObjectRelease();
          goto LABEL_165;
        }
      }
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
      return result;
    }
    v389 = MEMORY[0x1E0DEE9D8];
    v269 = (uint64_t *)v354;
LABEL_165:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v407 = (char *)v412;
    sub_1BE1B28B8();
    v398 = v404;
    sub_1BE1B320C();
    v290 = v374;
    sub_1BE1B3218();
    ((void (*)(uint64_t *, char *, uint64_t))v384)(v269, v238, v203);
    v291 = TupleTypeMetadata2;
    v292 = (unsigned int (*)(uint64_t *, uint64_t, uint64_t))v381;
    v293 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v381)(v269, 1, TupleTypeMetadata2);
    v294 = v378;
    if (v293 != 1)
    {
      *(_QWORD *)&v393 = *(_QWORD *)(v93 + 16);
      do
      {
        v295 = v290;
        v296 = *v269;
        v297 = (char *)v269 + *(int *)(v291 + 48);
        ((void (*)(char *, char *, uint64_t))v393)(v294, v297, v6);
        (*(void (**)(char *, uint64_t))(v394 + 8))(v297, v397);
        v404 = v296;
        v290 = v295;
        v405 = 0;
        sub_1BE1B2684();
        sub_1BE1B26B4();
        sub_1BE1B3218();
        v291 = TupleTypeMetadata2;
        ((void (*)(uint64_t *, char *, uint64_t))v384)(v269, v238, v203);
      }
      while (v292(v269, 1, v291) != 1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v157 = v397;
  }
  v406 = sub_1BE1B257C();
  v404 = v412;
  CRSequence.makeIterator()((uint64_t *)&v407);
  v299 = type metadata accessor for CRSequence.Iterator(0, v157, (uint64_t)&off_1E7758E40, v298);
  v300 = v360;
  CRSequence.Iterator.next()(v299, v360);
  v301 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v394 + 48);
  v302 = v301(v300, 1, v157);
  v303 = (uint64_t)v370;
  v44 = v396;
  if (v302 != 1)
  {
    v315 = *(_QWORD **)(v394 + 32);
    *(_QWORD *)&v393 = v299;
    *(_QWORD *)&v391 = v301;
    v390 = v315;
    ((void (*)(char *, uint64_t, uint64_t))v315)(v370, v300, v157);
    while (1)
    {
      MEMORY[0x1C3B7C58C](&v404, v303, v411, v6, MEMORY[0x1E0DEB418], v44);
      if (v405 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v394 + 8))(v303, v157);
      }
      else
      {
        v316 = (uint64_t)v44;
        v317 = v404;
        v318 = v367[1];
        v404 = v413;
        swift_retain();
        v319 = v359;
        CRSequence.subscript.getter();
        v320 = v395;
        v321 = (uint64_t)v368;
        (*(void (**)(char *, char *, uint64_t))(v395 + 16))(v368, v319, v6);
        v322 = *(void (**)(char *, uint64_t))(v394 + 8);
        v322(v319, v157);
        v404 = v318;
        v323 = type metadata accessor for CRSet(0, v6, v361, v316);
        v324 = v369;
        CRSet.subscript.getter(v321, v323, v369);
        swift_release();
        v325 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v320 + 48);
        result = v325(v324, 1, v6);
        if ((_DWORD)result == 1)
          goto LABEL_228;
        v404 = v366[1];
        v326 = v358;
        CRSet.subscript.getter((uint64_t)v370, v323, v358);
        result = v325(v326, 1, v6);
        v327 = v357;
        if ((_DWORD)result == 1)
          goto LABEL_229;
        v328 = *(void (**)(char *, uint64_t))(v395 + 8);
        v328(v368, v6);
        v329 = v369;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v356 + 32))(v326, v363, v6);
        v328((char *)v326, v6);
        v328((char *)v329, v6);
        v330 = v355;
        v331 = v362;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v355 + 48))(v327, 1, v362) == 1)
        {
          v303 = (uint64_t)v370;
          v157 = v397;
          v322(v370, v397);
          (*(void (**)(char *, uint64_t))(v348 + 8))(v327, v349);
          v44 = v396;
        }
        else
        {
          v332 = v346;
          (*(void (**)(char *, char *, uint64_t))(v330 + 32))(v346, v327, v331);
          v333 = (uint64_t)v370;
          v334 = v330;
          v335 = (uint64_t)v396;
          MEMORY[0x1C3B7C58C](&v404, v370, v410, v6, MEMORY[0x1E0DEB418], v396);
          if (v405)
            v336 = v317;
          else
            v336 = v404;
          v44 = (char *)v335;
          v337 = v347;
          (*(void (**)(char *, char *, uint64_t))(v334 + 16))(v347, v332, v331);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v334 + 56))(v337, 0, 1, v331);
          v404 = v336;
          sub_1BE1B2684();
          v303 = v333;
          sub_1BE1B26B4();
          (*(void (**)(char *, uint64_t))(v334 + 8))(v332, v331);
          v157 = v397;
          v322((char *)v333, v397);
        }
        v300 = v360;
        v299 = v393;
        v301 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v391;
        v315 = v390;
      }
      CRSequence.Iterator.next()(v299, v300);
      if (v301(v300, 1, v157) == 1)
        break;
      ((void (*)(uint64_t, uint64_t, uint64_t))v315)(v303, v300, v157);
    }
  }
  swift_bridgeObjectRelease();
  if (sub_1BE1B1FB8() <= 0)
  {
    swift_bridgeObjectRetain();
    v304 = sub_1BE1B260C();
    swift_bridgeObjectRelease();
    if (v304 <= 0 && !*(_QWORD *)(v389 + 16))
      goto LABEL_193;
  }
  swift_release();
  swift_release();
  v305 = v351;
  v306 = v350;
LABEL_174:
  v307 = v406;
  v308 = *(void (**)(char *, char *, uint64_t))(v306 + 32);
  v309 = (uint64_t)v343;
  v308(v343, v375, v305);
  v310 = (uint64_t)v344;
  v308(v344, v376, v305);
  v311 = v345;
  v312 = v307;
  v313 = v361;
  sub_1BE167C68(v312, v309, v389, v310, v6, v361, (uint64_t)v44, v345);
  v314 = type metadata accessor for CROrderedSet.ObservableDifference(0, v6, v313, (uint64_t)v44);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v314 - 8) + 56))(v311, 0, 1, v314);
LABEL_175:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t CROrderedSet.MergeableDelta.merge(delta:)()
{
  return sub_1BDDCD1A4();
}

uint64_t CROrderedSet.MergeableDelta.canMerge(delta:)()
{
  return 0;
}

uint64_t CROrderedSet.MergeableDelta.visitReferences(_:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = result;
  v7 = v4[6];
  if (*v4)
  {
    v8 = type metadata accessor for CRSet.Partial(0, a2[2], a2[3], a2[4]);
    result = CRSet.Partial.visitReferences(_:)(v6, v8);
  }
  if (v7)
  {
    v9 = type metadata accessor for CROrderedSetElement(255, a2[2], a2[4], a4);
    v11 = type metadata accessor for CRSequence.MergeableDelta(0, v9, (uint64_t)&off_1E7758E40, v10);
    return CRSequence.MergeableDelta.visitReferences(_:)(v6, v11);
  }
  return result;
}

void CROrderedSet.MergeableDelta.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t inited;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int EnumCaseMultiPayload;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(char *, uint64_t, uint64_t);
  uint64_t *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  _QWORD v163[18];
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;

  v159 = a3;
  v160 = a4;
  v158 = a2;
  v137 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  v7 = MEMORY[0x1E0C80A78](v6);
  v140 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v150 = (uint64_t)&v132 - v9;
  v149 = type metadata accessor for Proto_Sequence(0);
  v144 = *(_QWORD *)(v149 - 8);
  v10 = MEMORY[0x1E0C80A78](v149);
  v139 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v146 = (uint64_t)&v132 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  MEMORY[0x1E0C80A78](v13);
  v161 = (uint64_t)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for Proto_Set(0);
  v153 = *(_QWORD *)(v155 - 8);
  MEMORY[0x1E0C80A78](v155);
  v156 = (uint64_t)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v141 = (uint64_t)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v147 = (uint64_t)&v132 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v143 = (uint64_t)&v132 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v132 - v23;
  v157 = type metadata accessor for Proto_OrderedSet(0);
  v25 = MEMORY[0x1E0C80A78](v157);
  v138 = (uint64_t)&v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v148 = (uint64_t)&v132 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v152 = (uint64_t)&v132 - v30;
  MEMORY[0x1E0C80A78](v29);
  v162 = (char *)&v132 - v31;
  v32 = type metadata accessor for Proto_CRDT(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x1E0C80A78](v32);
  v142 = (uint64_t)&v132 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v145 = (uint64_t)&v132 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v151 = (char *)&v132 - v39;
  MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v132 - v40;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v42);
  v44 = (char *)&v132 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1;
  v46 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v46, (uint64_t)v44, &qword_1ED6F3728);
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v44, 1, v32);
  sub_1BDD86E30((uint64_t)v44, &qword_1ED6F3728);
  if ((_DWORD)v46 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v47 = 0xD000000000000014;
    *(_QWORD *)(v47 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v47 + 16) = 0;
    swift_willThrow();
LABEL_18:
    swift_release();
    return;
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v45;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  sub_1BDDA0528((uint64_t)v41);
  v135 = v32;
  v49 = *(_QWORD *)&v41[*(int *)(v32 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v49, (uint64_t)v24, &qword_1ED6F2DF0);
  v50 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48);
  v51 = v136(v24, 1, v50);
  v52 = v45;
  v134 = v50;
  if (v51 == 1)
  {
    sub_1BDD86E30((uint64_t)v24, &qword_1ED6F2DF0);
    v53 = v157;
    v54 = v153;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v53 = v157;
    v54 = v153;
    if (EnumCaseMultiPayload == 8)
    {
      v56 = (uint64_t)v24;
      v57 = v162;
      sub_1BDDA2E8C(v56, (uint64_t)v162, type metadata accessor for Proto_OrderedSet);
      goto LABEL_11;
    }
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  v57 = v162;
  sub_1BE1B20E4();
  v58 = *(int *)(v53 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v57[v58] = qword_1ED6EF618;
  swift_retain();
LABEL_11:
  sub_1BDD9C3E0((uint64_t)v41, type metadata accessor for Proto_CRDT);
  v59 = *(_QWORD *)&v57[*(int *)(v53 + 20)]
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  v60 = v59;
  v61 = v161;
  sub_1BDD86DEC(v60, v161, qword_1ED6F2EF8);
  v62 = v155;
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v61, 1, v155);
  v64 = v156;
  if (v63 == 1)
  {
    sub_1BE1B20E4();
    v65 = *(int *)(v62 + 20);
    v66 = v158;
    v67 = v154;
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)(v64 + v65) = qword_1ED6F2800;
    swift_retain();
    sub_1BDD86E30(v161, qword_1ED6F2EF8);
  }
  else
  {
    sub_1BDDA2E8C(v61, v156, type metadata accessor for Proto_Set);
    v66 = v158;
    v67 = v154;
  }
  sub_1BDD9C3E0((uint64_t)v162, type metadata accessor for Proto_OrderedSet);
  swift_retain();
  sub_1BE0DA6FC(v64, v52, v66, v159, v160, &v164);
  if (v67)
  {
    swift_release();
    swift_setDeallocating();
    goto LABEL_18;
  }
  v68 = *((_QWORD *)&v164 + 1);
  v69 = v165;
  v70 = v166;
  v71 = v167;
  v72 = v168;
  v133 = v164;
  swift_bridgeObjectRetain();
  v153 = v68;
  swift_bridgeObjectRetain();
  v154 = v69;
  swift_bridgeObjectRetain();
  v155 = v70;
  swift_bridgeObjectRetain();
  v156 = v71;
  swift_bridgeObjectRetain();
  v161 = v72;
  swift_bridgeObjectRetain();
  v73 = v151;
  v162 = (char *)inited;
  sub_1BDDA0528((uint64_t)v151);
  v74 = v135;
  v75 = *(_QWORD *)&v73[*(int *)(v135 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v76 = v75;
  v77 = v143;
  sub_1BDD86DEC(v76, v143, &qword_1ED6F2DF0);
  v78 = v134;
  if (v136((char *)v77, 1, v134) == 1)
  {
    sub_1BDD86E30(v77, &qword_1ED6F2DF0);
    v79 = v149;
    v80 = v152;
  }
  else
  {
    v81 = swift_getEnumCaseMultiPayload();
    v79 = v149;
    v80 = v152;
    if (v81 == 8)
    {
      sub_1BDDA2E8C(v77, v152, type metadata accessor for Proto_OrderedSet);
      goto LABEL_27;
    }
    sub_1BDD9C3E0(v77, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v82 = *(int *)(v53 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)(v80 + v82) = qword_1ED6EF618;
  swift_retain();
LABEL_27:
  sub_1BDD9C3E0((uint64_t)v151, type metadata accessor for Proto_CRDT);
  v83 = *(_QWORD *)(v80 + *(int *)(v53 + 20))
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  v84 = v83;
  v85 = v150;
  sub_1BDD86DEC(v84, v150, &qword_1ED6F2E98);
  v151 = *(char **)(v144 + 48);
  v86 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v151)(v85, 1, v79);
  v132 = v52;
  if (v86 == 1)
  {
    v87 = v146;
    sub_1BE1B20E4();
    v88 = *(int *)(v79 + 20);
    if (qword_1ED6EF5C0 != -1)
      swift_once();
    *(_QWORD *)(v87 + v88) = qword_1ED6EF5B0;
    swift_retain();
    sub_1BDD86E30(v150, &qword_1ED6F2E98);
  }
  else
  {
    v87 = v146;
    sub_1BDDA2E8C(v85, v146, type metadata accessor for Proto_Sequence);
  }
  sub_1BDD9C3E0(v152, type metadata accessor for Proto_OrderedSet);
  v89 = *(_QWORD *)(v87 + *(int *)(v79 + 20));
  swift_beginAccess();
  v90 = *(_QWORD *)(v89 + 32);
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0(v87, type metadata accessor for Proto_Sequence);
  v91 = v145;
  sub_1BDDA0528(v145);
  v92 = *(_QWORD *)(v91 + *(int *)(v74 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v93 = v92;
  v94 = v147;
  sub_1BDD86DEC(v93, v147, &qword_1ED6F2DF0);
  if (v136((char *)v94, 1, v78) == 1)
  {
    sub_1BDD86E30(v94, &qword_1ED6F2DF0);
    v95 = v148;
  }
  else
  {
    v96 = swift_getEnumCaseMultiPayload();
    v95 = v148;
    if (v96 == 8)
    {
      sub_1BDDA2E8C(v94, v148, type metadata accessor for Proto_OrderedSet);
      goto LABEL_40;
    }
    sub_1BDD9C3E0(v94, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v97 = *(int *)(v53 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)(v95 + v97) = qword_1ED6EF618;
  swift_retain();
LABEL_40:
  sub_1BDD9C3E0(v91, type metadata accessor for Proto_CRDT);
  v98 = (uint64_t *)(*(_QWORD *)(v95 + *(int *)(v53 + 20))
                  + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
  swift_beginAccess();
  v99 = *v98;
  swift_bridgeObjectRetain();
  v100 = sub_1BDD9C3E0(v95, type metadata accessor for Proto_OrderedSet);
  v163[3] = v90;
  v163[4] = v99;
  MEMORY[0x1E0C80A78](v100);
  v102 = v158;
  v101 = v159;
  *(&v132 - 4) = v158;
  *(&v132 - 3) = v101;
  v103 = v160;
  v104 = v132;
  *(&v132 - 2) = v160;
  *(&v132 - 1) = v104;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5311E8);
  v107 = type metadata accessor for CROrderedSetElement(0, v102, v103, v106);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  v109 = sub_1BE16E338();
  v110 = sub_1BDF02134((void (*)(char *, char *))sub_1BE16E318, (uint64_t)(&v132 - 6), v105, v107, v108, v109, MEMORY[0x1E0DEDB38], (uint64_t)v163);
  v111 = v104;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v112 = v142;
  sub_1BDDA0528(v142);
  v113 = *(_QWORD *)(v112 + *(int *)(v135 + 20))
       + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v114 = v113;
  v115 = v141;
  sub_1BDD86DEC(v114, v141, &qword_1ED6F2DF0);
  if (v136((char *)v115, 1, v134) == 1)
  {
    sub_1BDD86E30(v115, &qword_1ED6F2DF0);
    v117 = (uint64_t)v139;
    v116 = (uint64_t)v140;
    v118 = v138;
LABEL_45:
    sub_1BE1B20E4();
    v120 = *(int *)(v157 + 20);
    if (qword_1ED6EF620 != -1)
      swift_once();
    *(_QWORD *)(v118 + v120) = qword_1ED6EF618;
    swift_retain();
    goto LABEL_48;
  }
  v119 = swift_getEnumCaseMultiPayload();
  v117 = (uint64_t)v139;
  v116 = (uint64_t)v140;
  v118 = v138;
  if (v119 != 8)
  {
    sub_1BDD9C3E0(v115, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_45;
  }
  sub_1BDDA2E8C(v115, v138, type metadata accessor for Proto_OrderedSet);
LABEL_48:
  sub_1BDD9C3E0(v142, type metadata accessor for Proto_CRDT);
  v121 = *(_QWORD *)(v118 + *(int *)(v157 + 20))
       + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  sub_1BDD86DEC(v121, v116, &qword_1ED6F2E98);
  v122 = v149;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v151)(v116, 1, v149) == 1)
  {
    sub_1BE1B20E4();
    v123 = *(int *)(v122 + 20);
    if (qword_1ED6EF5C0 != -1)
      swift_once();
    *(_QWORD *)(v117 + v123) = qword_1ED6EF5B0;
    swift_retain();
    sub_1BDD86E30(v116, &qword_1ED6F2E98);
  }
  else
  {
    sub_1BDDA2E8C(v116, v117, type metadata accessor for Proto_Sequence);
  }
  sub_1BDD9C3E0(v118, type metadata accessor for Proto_OrderedSet);
  sub_1BE0CBECC(v117, v111, v110, v107, (uint64_t)&off_1E7758E40, &v169);
  swift_setDeallocating();
  swift_release();
  v124 = v169;
  v125 = v133;
  v127 = v153;
  v126 = v154;
  v129 = v155;
  v128 = v156;
  v130 = v161;
  sub_1BE16E3F0(v133);
  v162 = v124;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v131 = v137;
  *v137 = v125;
  v131[1] = v127;
  v131[2] = v126;
  v131[3] = v129;
  v131[4] = v128;
  v131[5] = v130;
  v131[6] = (uint64_t)v124;
  sub_1BE16E384(v125);

}

uint64_t sub_1BE16B4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, char *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;

  v51 = a6;
  v52 = a4;
  v45 = a7;
  v46 = a5;
  v10 = type metadata accessor for Timestamp(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v44 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v49 = (uint64_t)&v43 - v14;
  v47 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v43 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v43 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5312F8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v50 = (uint64_t)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v43 - v23;
  v25 = *(int *)(v22 + 48);
  v26 = (char *)&v43 + v25 - v23;
  v27 = a1 + v25;
  v48 = a1;
  sub_1BDD9C318(a1, (uint64_t)&v43 - v23, type metadata accessor for Proto_Value);
  sub_1BDD9C318(v27, (uint64_t)v26, type metadata accessor for Proto_Timestamp);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v24, a2);
  swift_release();
  sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for Proto_Timestamp);
  v28 = *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 8);
  v30 = swift_retain();
  v31 = v53;
  v29(v30, a3, v28);
  if (v31)
  {
    result = swift_release();
    *v51 = v31;
  }
  else
  {
    v33 = v47;
    v34 = (unint64_t *)(v50 + *(int *)(v19 + 48));
    sub_1BDD9C318(v48, v50, type metadata accessor for Proto_Value);
    sub_1BDD9C318(v27, (uint64_t)v34, type metadata accessor for Proto_Timestamp);
    swift_retain();
    v35 = v49;
    sub_1BDEFF448(v34, a2, v49);
    swift_release();
    sub_1BDD9C3E0(v50, type metadata accessor for Proto_Value);
    v36 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v37 = v43;
    v36(v43, v18, a3);
    v38 = v35;
    v39 = v44;
    sub_1BDDA2E8C(v38, v44, type metadata accessor for Timestamp);
    v40 = v45;
    v36(v45, v37, a3);
    v42 = type metadata accessor for CROrderedSetElement(0, a3, v46, v41);
    return sub_1BDDA2E8C(v39, (uint64_t)&v40[*(int *)(v42 + 36)], type metadata accessor for Timestamp);
  }
  return result;
}

void CROrderedSet.MergeableDelta.encode(to:)(uint64_t a1, uint64_t *a2)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t *v120;

  v4 = v3;
  v120 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v97 = (char *)&v85 - v10;
  v96 = type metadata accessor for Proto_Set(0);
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v112 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  v13 = MEMORY[0x1E0C80A78](v12);
  v98 = (uint64_t)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v110 = (uint64_t)&v85 - v16;
  MEMORY[0x1E0C80A78](v15);
  v109 = (uint64_t)&v85 - v17;
  v18 = type metadata accessor for Proto_Sequence(0);
  v107 = *(_QWORD *)(v18 - 8);
  v108 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v101 = (uint64_t)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v85 - v21;
  v23 = type metadata accessor for Proto_OrderedSet(0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v94 = (uint64_t)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v85 - v26;
  v111 = *v2;
  v106 = v2[1];
  v105 = v2[2];
  v104 = v2[3];
  v103 = v2[4];
  v28 = v2[6];
  v102 = v2[5];
  sub_1BE1B20E4();
  v30 = *(int *)(v23 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v27[v30] = qword_1ED6EF618;
  if (v28)
  {
    v99 = v27;
    v92 = v30;
    v93 = v9;
    v114 = (uint64_t)v28;
    v31 = v120[2];
    v32 = v120[4];
    v33 = type metadata accessor for CROrderedSetElement(255, v31, v32, v29);
    type metadata accessor for CRSequence.MergeableDelta(0, v33, (uint64_t)&off_1E7758E40, v34);
    swift_retain();
    v35 = v28;
    sub_1BE0CC274((uint64_t)v22);
    v100 = v3;
    if (v3)
    {
      sub_1BDD9C3E0((uint64_t)v99, type metadata accessor for Proto_OrderedSet);

      return;
    }
    v89 = v31;
    v90 = v32;
    v91 = a1;
    v36 = v92;
    v27 = v99;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_OrderedSet._StorageClass(0);
      swift_allocObject();
      v37 = swift_retain();
      *(_QWORD *)&v27[v36] = sub_1BE13A9C4(v37);
      swift_release();
    }
    v38 = *(_QWORD *)&v27[v36];
    v39 = v109;
    sub_1BDDA2E8C((uint64_t)v22, v109, type metadata accessor for Proto_Sequence);
    v86 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56);
    v86(v39, 0, 1, v108);
    v40 = v39;
    v41 = v110;
    sub_1BDDA2EF0(v40, v110, &qword_1ED6F2E98);
    v42 = v38
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v41, v42, &qword_1ED6F2E98);
    swift_endAccess();
    swift_release();
    v88 = v35;
    v43 = objc_msgSend(v35, sel_attributedString);
    type metadata accessor for CRSequenceStorage(0, v33, (uint64_t)&off_1E7758E40, v44);
    swift_dynamicCastClassUnconditional();
    v45 = sub_1BE0CC97C();
    swift_bridgeObjectRetain();
    v46 = swift_unknownObjectRelease();
    v114 = v45;
    MEMORY[0x1E0C80A78](v46);
    v47 = v120[3];
    *(&v85 - 4) = v89;
    *(&v85 - 3) = v47;
    v87 = v47;
    v48 = v91;
    *(&v85 - 2) = v90;
    *(&v85 - 1) = v48;
    v49 = sub_1BE1B2A5C();
    v50 = type metadata accessor for Proto_Timestamp(0);
    v51 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v49);
    v52 = (char *)v50;
    v53 = v51;
    v54 = v100;
    v56 = sub_1BDF016D0((void (*)(char *, char *))sub_1BE16E45C, (uint64_t)(&v85 - 6), v49, v52, MEMORY[0x1E0DEDCE8], v51, MEMORY[0x1E0DEDD18], v55);
    v100 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_OrderedSet._StorageClass(0);
      swift_allocObject();
      v57 = swift_retain();
      *(_QWORD *)&v27[v36] = sub_1BE13A9C4(v57);
      swift_release();
    }
    v58 = (uint64_t *)(*(_QWORD *)&v27[v36]
                    + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
    swift_beginAccess();
    *v58 = v56;
    v59 = swift_bridgeObjectRelease();
    v114 = v45;
    MEMORY[0x1E0C80A78](v59);
    v60 = v87;
    *(&v85 - 4) = v89;
    *(&v85 - 3) = v60;
    v61 = v91;
    *(&v85 - 2) = v90;
    *(&v85 - 1) = v61;
    v62 = (char *)type metadata accessor for Proto_Value(0);
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v64 = v100;
    v65 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF04EF8, (uint64_t)(&v85 - 6), v49, v62, v63, v53, MEMORY[0x1E0DEDB38], (uint64_t)&v113);
    if (v64)
    {
      sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Proto_OrderedSet);
      swift_bridgeObjectRelease();

      return;
    }
    v67 = v65;
    v4 = 0;
    swift_bridgeObjectRelease();
    v68 = *(_QWORD *)&v27[v36]
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    v69 = v68;
    v70 = v98;
    sub_1BDD86DEC(v69, v98, &qword_1ED6F2E98);
    v71 = v108;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v70, 1, v108) == 1)
    {
      v72 = v101;
      sub_1BE1B20E4();
      v73 = *(int *)(v71 + 20);
      if (qword_1ED6EF5C0 != -1)
        swift_once();
      *(_QWORD *)(v72 + v73) = qword_1ED6EF5B0;
      swift_retain();
      sub_1BDD86E30(v98, &qword_1ED6F2E98);
      v74 = v72;
    }
    else
    {
      v75 = v70;
      v74 = v101;
      sub_1BDDA2E8C(v75, v101, type metadata accessor for Proto_Sequence);
    }
    v76 = *(int *)(v71 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Sequence._StorageClass(0);
      swift_allocObject();
      v77 = (_QWORD *)swift_retain();
      v78 = sub_1BE13BE10(v77);
      v74 = v101;
      *(_QWORD *)(v101 + v76) = v78;
      swift_release();
    }
    v79 = *(_QWORD *)(v74 + v76);
    swift_beginAccess();
    *(_QWORD *)(v79 + 32) = v67;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_OrderedSet._StorageClass(0);
      swift_allocObject();
      v80 = swift_retain();
      *(_QWORD *)&v27[v36] = sub_1BE13A9C4(v80);
      swift_release();
    }
    v81 = *(_QWORD *)&v27[v36];
    v82 = v109;
    sub_1BDDA2E8C(v101, v109, type metadata accessor for Proto_Sequence);
    v86(v82, 0, 1, v71);
    v83 = v110;
    sub_1BDDA2EF0(v82, v110, &qword_1ED6F2E98);
    v84 = v81
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v83, v84, &qword_1ED6F2E98);
    swift_endAccess();

    swift_release();
  }
  else
  {
    swift_retain();
  }
  if (v111)
  {
    v114 = (uint64_t)v111;
    v115 = v106;
    v116 = v105;
    v117 = v104;
    v118 = v103;
    v119 = v102;
    type metadata accessor for CRSet.Partial(0, v120[2], v120[3], v120[4]);
    sub_1BE0DAB84();
  }
  sub_1BDDA8D6C();
  if (!v4)
  {
    v66 = v94;
    sub_1BDD9C318((uint64_t)v27, v94, type metadata accessor for Proto_OrderedSet);
    swift_beginAccess();
    swift_retain();
    sub_1BE128D74(v66);
    swift_release();
  }
  sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Proto_OrderedSet);
}

uint64_t sub_1BE16C368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + *(int *)(type metadata accessor for CROrderedSetElement(0, a2, a3, v11) + 36);
  type metadata accessor for Proto_Timestamp(0);
  *a4 = 0;
  a4[1] = 0;
  sub_1BE1B20E4();
  sub_1BDD9C318(v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v13 = sub_1BDDAE244((uint64_t)v10);
  v14 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v10, v14);
  *a4 = v13;
  result = type metadata accessor for Timestamp(0);
  a4[1] = *(_QWORD *)(v12 + *(int *)(result + 20));
  return result;
}

void sub_1BE16C47C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  CROrderedSet.MergeableDelta.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1BE16C49C(uint64_t a1, uint64_t *a2)
{
  CROrderedSet.MergeableDelta.encode(to:)(a1, a2);
}

uint64_t CROrderedSet.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v32 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v4);
  v31 = (char *)&v27 - v6;
  v29 = *(_QWORD *)(v30 + 32);
  v8 = type metadata accessor for CROrderedSetElement(255, v3, v29, v7);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v27 - v14;
  v17 = *v2;
  v16 = v2[1];
  if (v16 == MEMORY[0x1C3B7C928](*v2, v8))
  {
    v18 = *(_QWORD *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v15, 1, 1, v8);
    goto LABEL_6;
  }
  v19 = sub_1BE1B29FC();
  sub_1BE1B29A8();
  if ((v19 & 1) == 0)
  {
    result = sub_1BE1B30BC();
    v18 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v18 + 64) != 8)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    v34 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 16))(v15, &v34, v8);
    result = swift_unknownObjectRelease();
    v21 = v16 + 1;
    if (!__OFADD__(v16, 1))
      goto LABEL_5;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v18 + 16))(v15, v17+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v16, v8);
  v21 = v16 + 1;
  if (__OFADD__(v16, 1))
    goto LABEL_13;
LABEL_5:
  v2[1] = v21;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v8);
LABEL_6:
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v8) == 1)
  {
    v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v22(v13, v9);
    v22(v15, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v33, 1, 1, v3);
  }
  else
  {
    v23 = v32;
    v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v28, v13, v3);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v8);
    v25 = (uint64_t)v31;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v31, v24, v3);
    v34 = v2[2];
    v26 = type metadata accessor for CRSet(0, v3, *(_QWORD *)(v30 + 24), v29);
    CRSet.subscript.getter(v25, v26, v33);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

uint64_t CROrderedSet.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BE165AA8(a1);
  v5 = *(_QWORD *)(v2 + 8);
  *a2 = v4;
  a2[1] = 0;
  a2[2] = v5;
  return swift_retain();
}

uint64_t sub_1BE16C7E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  CROrderedSet.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_1BE16C814(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a1);
  return sub_1BE1B2CA8();
}

uint64_t sub_1BE16C848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a1);
  v4 = sub_1BE1AE084(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t CROrderedSet.startIndex.getter(uint64_t a1)
{
  sub_1BE165AA8(a1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t CROrderedSet.endIndex.getter(uint64_t a1)
{
  return sub_1BE16C8D0(a1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAE98]);
}

uint64_t sub_1BE16C8D0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1BE165AA8(a1);
  v6 = type metadata accessor for CROrderedSetElement(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v5);
  v7 = a2(v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int __swiftcall CROrderedSet.index(after:)(Swift::Int after)
{
  uint64_t v1;
  Swift::Int result;

  sub_1BE165AA8(v1);
  swift_bridgeObjectRelease();
  result = after + 1;
  if (__OFADD__(after, 1))
    __break(1u);
  return result;
}

uint64_t CROrderedSet.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v12 = sub_1BE1B206C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1BE1B2C84() & 1) == 0)
    return sub_1BE16510C(a1, a2, a3, a4, a5, a6);
  sub_1BE1B1F70();
  CROrderedSet.remove(atOffsets:)((uint64_t)v15, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_1BE16CA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDEE6064(a1, a2, a3, a4, (void (*)(void))sub_1BE16E0CC);
}

uint64_t (*sub_1BE16CA74(_QWORD *a1, uint64_t *a2, _QWORD *a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = CROrderedSet.subscript.modify(v6, *a2, a3);
  return sub_1BDE5DFF8;
}

uint64_t sub_1BE16CAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  sub_1BE16E2A0();
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  v5 = sub_1BE1B36C8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t sub_1BE16CB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  return sub_1BE1B2774();
}

void sub_1BE16CBB4(Swift::Int *a1, Swift::Int *a2)
{
  CROrderedSet.swapAt(_:_:)(*a1, *a2);
}

void sub_1BE16CBC4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CROrderedSet.init()(a1[2], a1[3], a1[4], a2);
}

uint64_t sub_1BE16CBD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CROrderedSet.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void sub_1BE16CC2C(uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  CROrderedSet.init<A>(_:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1BE16CC44(uint64_t a1, uint64_t a2)
{
  CROrderedSet.append(_:)(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t sub_1BE16CC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CROrderedSet.append<A>(contentsOf:)(a1, a4, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

void sub_1BE16CCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDEE6064(a1, a2, a3, a4, (void (*)(void))CROrderedSet.insert(_:at:));
}

uint64_t sub_1BE16CCD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CROrderedSet.insert<A>(contentsOf:at:)(a1, *a2, a5, a3, *(_QWORD *)(a4 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t sub_1BE16CD40(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return CROrderedSet.removeAll(where:)(a1, a2, a3);
}

uint64_t sub_1BE16CD54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = CROrderedSet.startIndex.getter(a1);
  *a2 = 0;
  return result;
}

uint64_t sub_1BE16CD78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = CROrderedSet.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t (*sub_1BE16CD9C(_QWORD *a1, uint64_t *a2, _QWORD *a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1BE16CDF8(v6, *a2, a3);
  return sub_1BDE5DFF8;
}

void (*sub_1BE16CDF8(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = v8;
  CROrderedSet.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_1BDEE623C;
}

uint64_t sub_1BE16CE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  return sub_1BE16199C(a1, a2, v6, a3);
}

uint64_t sub_1BE16CEAC(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a1);
  return sub_1BE1B2C48();
}

Swift::Int sub_1BE16CEFC@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result;

  result = CROrderedSet.index(after:)(*a1);
  *a2 = result;
  return result;
}

Swift::Int sub_1BE16CF24(Swift::Int *a1)
{
  Swift::Int result;

  result = CROrderedSet.index(after:)(*a1);
  *a1 = result;
  return result;
}

uint64_t sub_1BE16CF4C()
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  return sub_1BE1B2C30();
}

uint64_t sub_1BE16CF9C(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  result = sub_1BE1B2C30();
  *a1 = v3;
  return result;
}

uint64_t sub_1BE16CFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  return sub_1BE1B2C3C();
}

uint64_t sub_1BE16D060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a4);
  return sub_1BE1B2C24();
}

uint64_t sub_1BE16D0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  return sub_1BE1B2C54();
}

uint64_t sub_1BE16D118(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t result;
  __int128 v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char *v84;

  v67 = a7;
  v73 = a6;
  v74 = a3;
  v82 = a5;
  v69 = a2;
  v68 = a1;
  v80 = a9;
  v12 = type metadata accessor for Proto_Timestamp(0);
  v70 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v71 = (unint64_t *)((char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v14);
  v72 = (uint64_t)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for CROrderedSetElement(0, a8, a10, v16);
  v65 = *(_QWORD *)(v66 - 8);
  v17 = MEMORY[0x1E0C80A78](v66);
  v63 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v64 = (char *)&v63 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Proto_Version(0);
  v78 = *(_QWORD *)(v23 - 8);
  v79 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v76 = (char **)((char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = a8;
  v77 = *(_QWORD *)(a8 - 8);
  v27 = MEMORY[0x1E0C80A78](v24);
  v75 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v84 = (char *)&v63 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Proto_Value(0);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v63 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a4 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  v38 = v37 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v38, (uint64_t)v32, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
  {
    sub_1BE1B20E4();
    v39 = *(int *)(v33 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v36[v39] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v32, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v32, (uint64_t)v36, type metadata accessor for Proto_Value);
  }
  v40 = v26;
  v41 = v80;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  v42 = v82;
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v36, v42);
  swift_release();
  v43 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 8);
  v45 = swift_retain();
  v46 = v81;
  v44(v45, v40, v43);
  if (v46)
    return swift_release();
  v47 = v37 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v47, (uint64_t)v22, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v22, 1, v79) == 1)
  {
    v48 = MEMORY[0x1E0DEE9D8];
    v49 = v76;
    *v76 = MEMORY[0x1E0DEE9D8];
    v49[1] = v48;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v22, &qword_1ED6F37A8);
  }
  else
  {
    v49 = v76;
    sub_1BDDA2E8C((uint64_t)v22, (uint64_t)v76, type metadata accessor for Proto_Version);
  }
  v50 = v84;
  v51 = v77;
  swift_retain();
  sub_1BDDA9DA0(v49, v42, &v83);
  v53 = v83;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v75, v50, v40);
  v54 = *(_QWORD *)(v73 + *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20))
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps;
  result = swift_beginAccess();
  if ((v74 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v81 = *((_QWORD *)&v53 + 1);
    if (*(_QWORD *)(*(_QWORD *)v54 + 16) > v74)
    {
      v55 = v71;
      sub_1BDD9C318(*(_QWORD *)v54+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v74, (uint64_t)v71, type metadata accessor for Proto_Timestamp);
      swift_retain();
      v56 = v72;
      sub_1BDEFF448(v55, v42, v72);
      v57 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v58 = v64;
      v57(v64, v75, v40);
      v59 = v66;
      sub_1BDDA2E8C(v56, (uint64_t)&v58[*(int *)(v66 + 36)], type metadata accessor for Timestamp);
      v60 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v63, v58, v59);
      sub_1BE1B2A5C();
      sub_1BE1B2A20();
      swift_release();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v57)(v68, v84, v40);
      v61 = v69;
      v62 = v81;
      *v69 = v53;
      v61[1] = v62;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE16D7A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[10];

  v10[9] = *a2;
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a6;
  v10[5] = a1;
  v10[6] = a3;
  v6 = type metadata accessor for CROrderedSetElement(255, a4, a6, a4);
  type metadata accessor for CRSequence(0, v6, (uint64_t)&off_1E7758E40, v7);
  type metadata accessor for Proto_Set.Element(0);
  swift_retain();
  v8 = sub_1BE0C745C((void (*)(char *))sub_1BE1701B8, (uint64_t)v10);
  swift_release();
  return v8;
}

uint64_t sub_1BE16D858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v66 = a5;
  v73 = a3;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (uint64_t)v54 - v17;
  v62 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v16);
  v61 = (char *)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Proto_Version(0);
  v64 = *(_QWORD *)(v20 - 8);
  v65 = v20;
  MEMORY[0x1E0C80A78](v20);
  v63 = (_QWORD *)((char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v23 = MEMORY[0x1E0C80A78](v22);
  v60 = (uint64_t)v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (uint64_t)v54 - v25;
  v27 = type metadata accessor for Proto_Value(0);
  v28 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)v54 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16))
  {
    v58 = v29;
    v59 = v28;
    v68 = a6;
    v32 = sub_1BDE0D1D0(a1, a4, a6);
    if ((v33 & 1) != 0)
    {
      a6 = v32;
      v55 = v26;
      v56 = v18;
      v57 = v15;
      v26 = *(unsigned int *)(a2 + 36);
      sub_1BE1B20E4();
      v18 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
      if (qword_1ED6EF6F0 == -1)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_13:
  swift_once();
LABEL_4:
  v34 = qword_1ED6EF6E0;
  *(_QWORD *)(a7 + v18) = qword_1ED6EF6E0;
  MEMORY[0x1E0C80A78](v34);
  v35 = v66;
  v54[-8] = a4;
  v54[-7] = v35;
  v54[-6] = v68;
  v54[-5] = a2;
  v54[-4] = a6;
  v54[-3] = v26;
  LOBYTE(v52) = 0;
  v53 = v73;
  swift_retain();
  v36 = v67;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BE1701D8, (uint64_t)v31);
  if (v36)
    return sub_1BDD9C3E0(a7, type metadata accessor for Proto_Set.Element);
  v54[0] = a4;
  v54[1] = v26;
  v66 = a6;
  v67 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v38 = swift_retain();
    *(_QWORD *)(a7 + v18) = sub_1BE13500C(v38);
    swift_release();
  }
  v39 = *(_QWORD *)(a7 + v18);
  v40 = v55;
  sub_1BDDA2E8C((uint64_t)v31, v55, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v40, 0, 1, v59);
  v41 = v40;
  v42 = v60;
  sub_1BDDA2EF0(v41, v60, &qword_1ED6F3770);
  v43 = v39 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v42, v43, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  v52 = v68;
  v44 = v61;
  v45 = v54[0];
  sub_1BE1B26C0();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v45);
  v69 = v71;
  v70 = v72;
  v46 = v63;
  sub_1BDDAD780(v73, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v47 = swift_retain();
    *(_QWORD *)(a7 + v18) = sub_1BE13500C(v47);
    swift_release();
  }
  v48 = *(_QWORD *)(a7 + v18);
  v49 = v56;
  sub_1BDDA2E8C((uint64_t)v46, v56, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v49, 0, 1, v65);
  v50 = (uint64_t)v57;
  sub_1BDDA2EF0(v49, (uint64_t)v57, &qword_1ED6F37A8);
  v51 = v48 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v50, v51, &qword_1ED6F37A8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BE16DD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B26C0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 16))(a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a6);
}

uint64_t CROrderedSet<>.encode(to:)(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[5];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v21[1] = a3;
  v7 = a2[2];
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v21 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14 = v8;
  sub_1BE1B3764();
  v15 = sub_1BE165AA8((uint64_t)a2);
  v16 = *(_QWORD *)(v4 + 8);
  v21[2] = v15;
  v21[3] = 0;
  v21[4] = v16;
  v17 = type metadata accessor for CROrderedSet.Iterator(0, v7, a2[3], a2[4]);
  swift_retain();
  CROrderedSet.Iterator.next()(v17, (uint64_t)v13);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v18(v13, 1, v7) != 1)
  {
    v21[0] = *(_QWORD *)(v14 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v21[0])(v10, v13, v7);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      v19 = v24;
      sub_1BE1B3380();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v7);
      if (v19)
        break;
      v24 = 0;
      CROrderedSet.Iterator.next()(v17, (uint64_t)v13);
    }
    while (v18(v13, 1, v7) != 1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t sub_1BE16E064(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return CROrderedSet<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t type metadata accessor for CROrderedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSet);
}

uint64_t type metadata accessor for CROrderedSet.DeduplicatedInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSet.DeduplicatedInfo);
}

uint64_t sub_1BE16E094()
{
  return sub_1BE1B2798() & 1;
}

uint64_t sub_1BE16E0CC(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;

  v4 = v3;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v12 + 32);
  v14 = type metadata accessor for CROrderedSetElement(0, v8, v25, v13);
  v15 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v24 - v17;
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v24 = a1;
  v26 = a2;
  result = CROrderedSet.count.getter(a3);
  if (result <= v26)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  sub_1BE163FCC(a3);
  v27 = *v4;
  type metadata accessor for CRSequence(0, v14, (uint64_t)&off_1E7758E40, v19);
  CRSequence.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v18, v8);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v21 = v24;
  v20 = v25;
  v22 = sub_1BE1B2798();
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v22 & 1) == 0)
  {
    v27 = v4[1];
    v23 = type metadata accessor for CRSet(0, v8, *(_QWORD *)(a3 + 24), v20);
    result = CRSet.contains(_:)(v21, v23);
    if ((result & 1) == 0)
      CROrderedSet.remove(at:)(v26);
  }
  return result;
}

uint64_t sub_1BE16E2A0()
{
  uint64_t v0;

  v0 = sub_1BE1B36C8();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE48], v0);
  return sub_1BE1B32D8();
}

uint64_t sub_1BE16E318@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t *v3;

  return sub_1BE16B4B8(a1, v3[5], v3[2], v3[3], v3[4], a2, a3);
}

unint64_t sub_1BE16E338()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF5311F0[0];
  if (!qword_1EF5311F0[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF5311E8);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEC3A0], v1);
    atomic_store(result, qword_1EF5311F0);
  }
  return result;
}

uint64_t sub_1BE16E384(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BE16E3F0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BE16E45C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BE16C368(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

uint64_t type metadata accessor for CROrderedSet.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSet.Iterator);
}

_UNKNOWN **sub_1BE16E488()
{
  return &protocol witness table for CROrderedSet<A>.MergeableDelta;
}

uint64_t sub_1BE16E494(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_1BE16E4C0()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE16E4D0()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE16E4E0(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1BE16E528()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE16E538(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_1BE16E580(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE50], a1, &v3);
}

void sub_1BE16E5C8()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE16E5D8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>);
  return MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1BE16E628()
{
  return 24;
}

__n128 sub_1BE16E634(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1BE16E648(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  type metadata accessor for CROrderedSet.DeduplicatedInfo(255, a1[2], a1[3], a1[4]);
  result = sub_1BE1B2EE8();
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BE16E6DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 48);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
    swift_retain();
    swift_retain();
    if (v11(v8, 1, v9))
    {
      v12 = sub_1BE1B2EE8();
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      v13 = *(int *)(v9 + 44);
      v14 = (char *)v7 + v13;
      v15 = (char *)v8 + v13;
      v16 = sub_1BE1B206C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t sub_1BE16E820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 44);
    v8 = sub_1BE1B206C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  return result;
}

_QWORD *sub_1BE16E8BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 48);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  v8 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  swift_retain();
  if (v10(v7, 1, v8))
  {
    v11 = sub_1BE1B2EE8();
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v6 = *v7;
    v12 = *(int *)(v8 + 44);
    v13 = (char *)v6 + v12;
    v14 = (char *)v7 + v12;
    v15 = sub_1BE1B206C();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *sub_1BE16E9D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 48);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *v7 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v21 = *(int *)(v9 + 44);
      v22 = (char *)v7 + v21;
      v23 = (char *)v8 + v21;
      v24 = sub_1BE1B206C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v19 = sub_1BE1B2EE8();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *v7 = *v8;
  v14 = *(int *)(v9 + 44);
  v15 = (char *)v7 + v14;
  v16 = (char *)v8 + v14;
  v17 = sub_1BE1B206C();
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *sub_1BE16EB74(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 48);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (_QWORD *)((char *)a2 + v4);
  v7 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_1BE1B2EE8();
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v10 = *(int *)(v7 + 44);
    v11 = (char *)v5 + v10;
    v12 = (char *)v6 + v10;
    v13 = sub_1BE1B206C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_1BE16EC5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = *(int *)(a3 + 48);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for CROrderedSet.DeduplicatedInfo(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *v7 = *v8;
      swift_bridgeObjectRelease();
      v20 = *(int *)(v9 + 44);
      v21 = (char *)v7 + v20;
      v22 = (char *)v8 + v20;
      v23 = sub_1BE1B206C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v18 = sub_1BE1B2EE8();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  *v7 = *v8;
  v14 = *(int *)(v9 + 44);
  v15 = (char *)v7 + v14;
  v16 = (char *)v8 + v14;
  v17 = sub_1BE1B206C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1BE16EDD4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE16EDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for CROrderedSet.DeduplicatedInfo(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
    v8 = sub_1BE1B2EE8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_1BE16EE70()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE16EE7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for CROrderedSet.DeduplicatedInfo(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32));
    v7 = sub_1BE1B2EE8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BE16EF04()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE16EF14()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for CROrderedSet.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSet.ObservableDifference);
}

uint64_t *sub_1BE16EF30(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v5 = *a1;
  v6 = *a2;
  if (!v5)
  {
    if (v6)
    {
      *a1 = v6;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    v7 = type metadata accessor for CRSet.MutatingAction(0, a3[2], a3[3], a3[4]);
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    goto LABEL_7;
  }
  *a1 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v8 = (void *)a1[2];
  v9 = (void *)a2[2];
  a1[2] = (uint64_t)v9;
  v10 = v9;

  return a1;
}

_QWORD *sub_1BE16EFF8(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;

  if (!*a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    v5 = type metadata accessor for CRSet.MutatingAction(0, a3[2], a3[3], a3[4]);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
LABEL_6:
  v6 = (void *)a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t type metadata accessor for CROrderedSet.MutatingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSet.MutatingAction);
}

void sub_1BE16F094(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

_QWORD *sub_1BE16F0E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  id v11;

  if (*a2)
  {
    v4 = a2[1];
    v5 = a2[2];
    *a1 = *a2;
    a1[1] = v4;
    v6 = a2[3];
    v7 = a2[4];
    a1[2] = v5;
    a1[3] = v6;
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v9;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  v10 = (void *)a2[6];
  a1[6] = v10;
  v11 = v10;
  return a1;
}

_QWORD *sub_1BE16F190(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;
  id v12;

  v5 = *a1;
  v6 = *a2;
  if (!v5)
  {
    if (v6)
    {
      *a1 = v6;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    v8 = *(_OWORD *)a2;
    v9 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v9;
    *(_OWORD *)a1 = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    v7 = type metadata accessor for CRSet.Partial(0, a3[2], a3[3], a3[4]);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    goto LABEL_7;
  }
  *a1 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v10 = (void *)a1[6];
  v11 = (void *)a2[6];
  a1[6] = v11;
  v12 = v11;

  return a1;
}

uint64_t sub_1BE16F310(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v6;
  void *v7;

  if (!*(_QWORD *)a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    v5 = type metadata accessor for CRSet.Partial(0, a3[2], a3[3], a3[4]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
LABEL_6:
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  return a1;
}

uint64_t sub_1BE16F3E8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1BE16F444(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for CROrderedSet.MergeableDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedSet.MergeableDelta);
}

uint64_t sub_1BE16F4B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B206C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BE16F528(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 44);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1BE1B206C();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1BE16F5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1BE16F608(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 44);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B206C();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *sub_1BE16F678(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B206C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *sub_1BE16F6EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 44);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B206C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1BE16F748(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 44);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B206C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1BE16F7B4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm_0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE1B206C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 44)], a2, v8);
  }
}

uint64_t sub_1BE16F840()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_2Tm_0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1BE1B206C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 44)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BE16F8C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Timestamp(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1BE16F94C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8 | 7;
  v12 = v7 + v11;
  v13 = (v7 + v11) & ~v11;
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (((v14 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  v16 = *(_DWORD *)(v6 + 80) & 0xF8 | v11;
  v17 = (*(_DWORD *)(v6 + 80) | v10) & 0x100000;
  if ((_DWORD)v16 != 7 || v17 != 0 || v15 > 0x18)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  else
  {
    v21 = v8;
    v22 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v23 = ((unint64_t)a1 + v12) & v22;
    v24 = ((unint64_t)a2 + v12) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v23, v24, v21);
    *(_QWORD *)((v14 + v23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + v24) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(v23 + (v14 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)(v24 + (v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  return a1;
}

uint64_t sub_1BE16FA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = sub_1BE1B1F58();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))((v4 + a1 + v7) & ~v7, v5);
}

uint64_t sub_1BE16FAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v11) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v12);
  return a1;
}

uint64_t sub_1BE16FB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v11) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v12);
  return a1;
}

uint64_t sub_1BE16FC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v11) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v12);
  return a1;
}

uint64_t sub_1BE16FCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v11) = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8 + v12);
  return a1;
}

uint64_t sub_1BE16FD98(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (v11 < a2)
  {
    if (((((((*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + (v13 & ~v12) + 8) & 0xFFFFFFF8) != 0)
      v14 = 2;
    else
      v14 = a2 - v11 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X16 }
  }
  if (!v11)
    return 0;
  if (v7 >= v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
}

void sub_1BE16FF08(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(sub_1BE1B1F58() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((((*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8
      + ((*(_QWORD *)(v7 + 64) + (*(_DWORD *)(v9 + 80) & 0xF8 | 7)) & ~(*(_DWORD *)(v9 + 80) & 0xF8 | 7));
  if (v10 >= a3)
  {
    v14 = 0u;
    if (a2 <= v10)
      goto LABEL_17;
  }
  else
  {
    if ((_DWORD)v11)
      v12 = 2;
    else
      v12 = a3 - v10 + 1;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_17:
      __asm { BR              X13 }
  }
  if ((_DWORD)v11)
  {
    v15 = ~v10 + a2;
    bzero(a1, v11);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_1BE170038()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1BE170040()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1BE170048);
}

void sub_1BE170094()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_1BE17009C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

void sub_1BE1700A4(uint64_t a1, size_t a2, unsigned int a3)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  *(_WORD *)(v7 + v10) = 0;
  if (v8)
  {
    if (v9 >= a3)
      JUMPOUT(0x1BE1700D0);
    v3 = (_DWORD *)((v5 + v7) & v6);
    if (a3 >= v8)
      JUMPOUT(0x1BE1700C4);
    if ((_DWORD)a2)
    {
      v4 = ~a3 + v8;
      bzero(v3, a2);
      *v3 = v4;
    }
  }
  JUMPOUT(0x1BE1700ACLL);
}

void sub_1BE1700EC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE1700FC(uint64_t a1)
{
  sub_1BE1654CC(a1);
}

uint64_t sub_1BE170114(char a1)
{
  return a1 & 1;
}

uint64_t sub_1BE170120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BE170158(a1, a2);
}

uint64_t sub_1BE170134()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))() & 1;
}

uint64_t sub_1BE170158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BE165574(a1, *(_QWORD **)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1BE17017C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE16D7A4(a1, *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1BE17019C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BE16C368(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1BE1701B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1BE16D858(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_1BE1701D8()
{
  uint64_t v0;

  return sub_1BE16DD50(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BE170200(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1BE16D118(a1, a2, a3, a4, v4[5], v4[6], v4[7], v4[2], v4[3], v4[4]);
}

BOOL sub_1BE170238(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_WORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 17; ; ++i)
  {
    v5 = i - 15;
    if (__OFADD__(i - 16, 1))
      break;
    v6 = *(unsigned __int16 *)(a2 + 2 * i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE170298(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73746E65746E6F63;
  else
    v3 = 25705;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73746E65746E6F63;
  else
    v5 = 25705;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1BE1B34AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t Capsule.versionUUID.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + *(int *)(result + 40));
  if (v4)
  {
    v5 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
    swift_beginAccess();
    v6 = sub_1BE1B1F58();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, v5, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE1703A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = sub_1BDDCB3C0(a2);
  if (*(_QWORD *)(v4 + *(int *)(a2 + 40)))
  {
    result = sub_1BDE58CC8(a1, a3, a4);
    if (!v5)
      return sub_1BDDB639C(0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE170424@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v10 = *a1;
  v11 = a1[1];
  v12 = type metadata accessor for Capsule(0, a4, a5, a4);
  v13 = (char *)a6 + *(int *)(v12 + 36);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v13, 1, 1, a4);
  v14 = *(int *)(v12 + 40);
  *(_QWORD *)((char *)a6 + v14) = 0;
  *a6 = v10;
  a6[1] = v11;
  v15 = sub_1BE1B2EE8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, a2, v15);
  result = swift_release();
  *(_QWORD *)((char *)a6 + v14) = a3;
  return result;
}

uint64_t sub_1BE1704E8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE170544@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
  swift_beginAccess();
  v4 = sub_1BE1B1F58();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Capsule<>.delta(_:from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(int *)(a3 + 40);
  if (*(_QWORD *)(v4 + v5))
  {
    v6 = *(_QWORD *)(a2 + v5);
    if (v6)
      return sub_1BDE5BE00(result, v6, a4);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *Capsule<>.merge(delta:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(int *)(a2 + 40);
  if (*(_QWORD *)(v2 + v3))
  {
    v5 = *result;
    v6 = result[1];
    v7 = result[2];
    v8 = result[3];
    v10 = result[4];
    v9 = result[5];
    v11 = result[6];
    v15 = *result;
    v16 = v6;
    v17 = v7;
    v18 = v8;
    v19 = v10;
    v20 = v9;
    v13 = v11;
    v14 = v9;
    v21 = v11;
    v12 = sub_1BDE5CC74((uint64_t)&v15);
    if ((v12 & 1) == 0)
      return (uint64_t *)(v12 & 1);
    result = (uint64_t *)sub_1BDDCB3C0(a2);
    if (*(_QWORD *)(v2 + v3))
    {
      v15 = v5;
      v16 = v6;
      v17 = v7;
      v18 = v8;
      v19 = v10;
      v20 = v14;
      v21 = v13;
      sub_1BDE5D36C(&v15);
      return (uint64_t *)(v12 & 1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *Capsule.subscript.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BE1709D4(a1, a2, a3, a4, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1BDE565B0);
}

{
  return sub_1BE1709D4(a1, a2, a3, a4, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1BDE56C40);
}

uint64_t Capsule<>.ObservableDifference.subscript.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1BE17600C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Ref, (uint64_t)&protocol conformance descriptor for Ref<A>, a5);
}

{
  return sub_1BE17600C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakRef, (uint64_t)&protocol conformance descriptor for WeakRef<A>, a5);
}

uint64_t sub_1BE1706CC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 120) = a4;
  *(_QWORD *)(v5 + 128) = v4;
  *(_BYTE *)(v5 + 176) = a2;
  *(_QWORD *)(v5 + 104) = a1;
  *(_QWORD *)(v5 + 112) = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  *(_QWORD *)(v5 + 136) = v6;
  *(_QWORD *)(v5 + 144) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 152) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BE170738()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 160) = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 24);
  return swift_task_switch();
}

uint64_t sub_1BE170758()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[19];
  v2 = v0[17];
  v3 = v0[18];
  v0[2] = v0;
  v0[3] = sub_1BE17082C;
  v4 = swift_continuation_init();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v0[10] = &unk_1EF5315E0;
  v0[11] = v5;
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
  sub_1BE1B2AEC();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_continuation_await();
}

uint64_t sub_1BE17082C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = *v0;
  v2 = *v0;
  v5 = (char *)&dword_1EF52F168 + dword_1EF52F168;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 168) = v3;
  *v3 = v2;
  v3[1] = sub_1BE1708B0;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v5)(*(_QWORD *)(v1 + 104), *(unsigned __int8 *)(v1 + 176), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_1BE1708B0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 1);
}

void sub_1BE170934()
{
  dword_1EF548FC0 = 0;
}

uint64_t sub_1BE170940()
{
  uint64_t v0;

  swift_release();
  sub_1BDD9CC0C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BE170974(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_1BDD9CC20(a1, a2, a3);
  return v6;
}

uint64_t *sub_1BE1709D4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (*(_QWORD *)(v5 + *(int *)(a2 + 40)))
  {
    v10 = *result;
    v9 = result[1];
    v11[0] = v10;
    v11[1] = v9;
    sub_1BDDB6CA4(v10, v9);
    a5(v11, a3, a4);
    return (uint64_t *)sub_1BDDB796C(v10, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.copy(newContext:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return Capsule.copy()(a1, a2);
}

uint64_t Capsule.copy()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  if (*(uint64_t *)((char *)v2 + *(int *)(result + 40)))
  {
    v4 = result;
    v5 = *v2;
    v6 = v2[1];
    v8[0] = v5;
    v8[1] = v6;
    v7 = (uint64_t)v2 + *(int *)(result + 36);
    sub_1BDD9C9A0(v5, v6);
    sub_1BDE526B0(v8, v7, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a2);
    return sub_1BDD9CC0C(v5, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.copyAssets(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  v3[16] = v4;
  v3[17] = *(_QWORD *)(v4 - 8);
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BE170B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  result = sub_1BDDCB3C0(v1);
  v4 = *(_QWORD *)(v2 + *(int *)(v1 + 40));
  *(_QWORD *)(v0 + 152) = v4;
  if (!v4)
    goto LABEL_26;
  v5 = sub_1BE17A3A0(*(_QWORD *)(v0 + 112));
  v6 = v5;
  *(_QWORD *)(v0 + 160) = v5;
  v7 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v0 + 240) = v7;
  v8 = v5 + 64;
  v9 = 1 << v7;
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v13 = 0;
  while (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v13 << 6);
LABEL_6:
    *(_QWORD *)(v0 + 168) = v13;
    *(_QWORD *)(v0 + 176) = v11;
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v15);
    *(_QWORD *)(v0 + 184) = v17;
    if (*(_QWORD *)(v17 + 32) != v16)
    {
      v21 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v15);
      v22 = *v21;
      *(_QWORD *)(v0 + 192) = *v21;
      v23 = v21[1];
      *(_QWORD *)(v0 + 200) = v23;
      swift_retain_n();
      sub_1BDDB6CA4(v22, v23);
      swift_retain();
      swift_retain();
      sub_1BDDB6CA4(v22, v23);
      v24 = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v0 + 208) = v24;
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(v24 + 24);
      swift_retain();
      swift_retain();
      return swift_task_switch();
    }
  }
  v18 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v18 >= v12)
    goto LABEL_23;
  v19 = *(_QWORD *)(v8 + 8 * v18);
  ++v13;
  if (v19)
    goto LABEL_21;
  v13 = v18 + 1;
  if (v18 + 1 >= v12)
    goto LABEL_23;
  v19 = *(_QWORD *)(v8 + 8 * v13);
  if (v19)
    goto LABEL_21;
  v13 = v18 + 2;
  if (v18 + 2 >= v12)
    goto LABEL_23;
  v19 = *(_QWORD *)(v8 + 8 * v13);
  if (v19)
  {
LABEL_21:
    v11 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v13 << 6);
    goto LABEL_6;
  }
  v20 = v18 + 3;
  if (v20 >= v12)
  {
LABEL_23:
    swift_release();
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v12)
      goto LABEL_23;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1BE170D90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[16];
  v0[2] = v0;
  v0[3] = sub_1BE170E70;
  v4 = swift_continuation_init();
  v5 = swift_allocObject();
  v0[10] = &unk_1EF52F150;
  *(_QWORD *)(v5 + 16) = v4;
  v0[11] = v5;
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
  sub_1BE1B2AEC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_continuation_await();
}

uint64_t sub_1BE170E70()
{
  return swift_task_switch();
}

uint64_t sub_1BE170EBC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[24];
  v2 = v0[25];
  v3 = v0[19];
  swift_retain();
  swift_retain();
  sub_1BDDB6CA4(v1, v2);
  v6 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EF5303C8 + dword_1EF5303C8);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[28] = v4;
  *v4 = v0;
  v4[1] = sub_1BE170F78;
  return v6(v0[23], 0, v0[27], v0[23], v0[13], v3, v0[24], v0[25]);
}

uint64_t sub_1BE170F78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1BDDB796C(*(_QWORD *)(v2 + 192), *(_QWORD *)(v2 + 200));
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 200);
    v4 = *(_QWORD *)(v2 + 192);
    sub_1BDDB796C(v4, v3);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release();
    sub_1BDDB796C(v4, v3);
  }
  return swift_task_switch();
}

uint64_t sub_1BE17106C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  swift_release_n();
  result = sub_1BDDB796C(v1, v2);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  while (v5)
  {
    v6 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v7 = v6 | (v4 << 6);
    result = *(_QWORD *)(v0 + 160);
LABEL_3:
    *(_QWORD *)(v0 + 168) = v4;
    *(_QWORD *)(v0 + 176) = v5;
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(*(_QWORD *)(result + 56) + 16 * v7);
    *(_QWORD *)(v0 + 184) = v9;
    if (*(_QWORD *)(v9 + 32) != v8)
    {
      v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v7);
      v16 = *v15;
      *(_QWORD *)(v0 + 192) = *v15;
      v17 = v15[1];
      *(_QWORD *)(v0 + 200) = v17;
      swift_retain_n();
      sub_1BDDB6CA4(v16, v17);
      swift_retain();
      swift_retain();
      sub_1BDDB6CA4(v16, v17);
      v18 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v0 + 208) = v18;
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(v18 + 24);
      swift_retain();
      swift_retain();
      return swift_task_switch();
    }
  }
  v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  v11 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 160);
  if (v10 >= v11)
    goto LABEL_20;
  v12 = result + 64;
  v13 = *(_QWORD *)(result + 64 + 8 * v10);
  ++v4;
  if (v13)
    goto LABEL_18;
  v4 = v10 + 1;
  if (v10 + 1 >= v11)
    goto LABEL_20;
  v13 = *(_QWORD *)(v12 + 8 * v4);
  if (v13)
    goto LABEL_18;
  v4 = v10 + 2;
  if (v10 + 2 >= v11)
    goto LABEL_20;
  v13 = *(_QWORD *)(v12 + 8 * v4);
  if (v13)
  {
LABEL_18:
    v5 = (v13 - 1) & v13;
    v7 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_3;
  }
  v14 = v10 + 3;
  if (v14 >= v11)
  {
LABEL_20:
    swift_release();
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v12 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v11)
      goto LABEL_20;
    v13 = *(_QWORD *)(v12 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1BE171274()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 192);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1BDDB796C(v2, v1);
  sub_1BDDB796C(v2, v1);
  swift_release();
  swift_release_n();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BE171324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  return swift_task_switch();
}

uint64_t sub_1BE171344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)();
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 32) + 56;
  sub_1BDD86DEC(v1, v0 + 16, qword_1ED6F3DD0);
  v2 = *(_QWORD *)(v0 + 40);
  sub_1BDD86E30(v0 + 16, qword_1ED6F3DD0);
  if (v2
    || (sub_1BDD86DEC(*(_QWORD *)(v0 + 112) + 56, v0 + 16, qword_1ED6F3DD0),
        v3 = *(_QWORD *)(v0 + 40),
        sub_1BDD86E30(v0 + 16, qword_1ED6F3DD0),
        v3))
  {
    sub_1BDD86DEC(v1, v0 + 56, qword_1ED6F3DD0);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_1BDD85B8C((__int128 *)(v0 + 56), v0 + 16);
      v4 = sub_1BE1B1E08();
      v6 = v5;
      v7 = *(_QWORD *)(v0 + 40);
      v8 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v7);
      v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 16))(v4, v6, v7, v8);
      v16 = v15;
      v17 = *(_QWORD *)(v0 + 104);
      v18 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      sub_1BDDB6CA4(v18, v19);
      sub_1BE10889C(v18, v19, v14, v16, v28);
      sub_1BDDB796C(v14, v16);
      sub_1BDDB796C(v4, v6);
      sub_1BDDB796C(v18, v19);
      v20 = v28[0];
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 96);
      sub_1BDD86E30(v0 + 56, qword_1ED6F3DD0);
      sub_1BE10EF38(v9, 0, v28);
      v20 = v28[0];
    }
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    sub_1BDDB6CA4(v12, v13);
    sub_1BE109230(v12, v13, v11, v28);
    sub_1BDDB796C(v12, v13);
    v20 = v28[0];
  }
  v22 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 136);
  swift_beginAccess();
  sub_1BDDB6CA4(v22, v21);
  v24 = sub_1BDE5259C((_QWORD *)(v0 + 16), v22, v21);
  v26 = *(_QWORD *)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 136);
  if (*v23)
  {
    *v23 = v20;
    swift_retain();
    ((void (*)(uint64_t, _QWORD))v24)(v0 + 16, 0);
    swift_endAccess();
    swift_release();
    swift_release();
    sub_1BDDB796C(v26, v25);
  }
  else
  {
    ((void (*)(uint64_t, _QWORD))v24)(v0 + 16, 0);
    swift_endAccess();
    sub_1BDDB796C(v26, v25);
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Capsule.copyAssetsSync(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  dispatch_semaphore_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD *, unint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t (*v88)();
  uint64_t result;
  uint64_t v90;
  id v91;
  _QWORD v92[2];
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int64_t v117;
  uint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  dispatch_semaphore_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[2];
  uint64_t v137;
  uint64_t v138;
  char v139[8];
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v100 = (char *)v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1BE1B1F58();
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v97 = (char *)v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1BE1B1DF0();
  v95 = *(_QWORD *)(v96 - 8);
  v7 = MEMORY[0x1E0C80A78](v96);
  v94 = (char *)v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v93 = (char *)v92 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  v11 = MEMORY[0x1E0C80A78](v10);
  v110 = (uint64_t)v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v121 = (uint64_t)v92 - v13;
  sub_1BDDCB3C0(a2);
  v14 = *(_QWORD *)(v2 + *(int *)(a2 + 40));
  if (!v14)
    goto LABEL_54;
  v15 = sub_1BE17A3A0(a2);
  v16 = *(_QWORD *)(v15 + 64);
  v111 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v114 = a1 + 56;
  v106 = v14 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets;
  v20 = a1 + OBJC_IVAR____TtC9Coherence14CRAssetManager_temporaryDirectory;
  v112 = (unint64_t)(v17 + 63) >> 6;
  v92[0] = &v133;
  swift_bridgeObjectRetain();
  v105 = v14;
  swift_retain();
  v21 = 0;
  v109 = xmmword_1BE1C7CB0;
  v108 = MEMORY[0x1E0DEE9C0] + 8;
  v107 = v15;
  v115 = a1;
  v92[1] = v20;
  while (1)
  {
    do
    {
      if (v19)
      {
        v22 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v23 = v22 | (v21 << 6);
      }
      else
      {
        if (__OFADD__(v21++, 1))
        {
          __break(1u);
          goto LABEL_53;
        }
        if (v21 >= v112)
          goto LABEL_49;
        v25 = *(_QWORD *)(v111 + 8 * v21);
        if (!v25)
        {
          v26 = v21 + 1;
          if (v21 + 1 >= v112)
            goto LABEL_49;
          v25 = *(_QWORD *)(v111 + 8 * v26);
          if (!v25)
          {
            v26 = v21 + 2;
            if (v21 + 2 >= v112)
              goto LABEL_49;
            v25 = *(_QWORD *)(v111 + 8 * v26);
            if (!v25)
            {
              v26 = v21 + 3;
              if (v21 + 3 >= v112)
              {
LABEL_49:
                swift_release();
                return swift_release();
              }
              v25 = *(_QWORD *)(v111 + 8 * v26);
              if (!v25)
              {
                while (1)
                {
                  v21 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    break;
                  if (v21 >= v112)
                    goto LABEL_49;
                  v25 = *(_QWORD *)(v111 + 8 * v21);
                  ++v26;
                  if (v25)
                    goto LABEL_19;
                }
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
              }
            }
          }
          v21 = v26;
        }
LABEL_19:
        v19 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v21 << 6);
      }
      v27 = 16 * v23;
      v28 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + v27);
      v29 = *(_QWORD *)(v28 + 32);
    }
    while (v29 == a1);
    v116 = v19;
    v117 = v21;
    v30 = (uint64_t *)(*(_QWORD *)(v15 + 48) + v27);
    v32 = *v30;
    v31 = v30[1];
    type metadata accessor for AssetWrapper();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = 0;
    v118 = (uint64_t *)(v33 + 16);
    *(_QWORD *)(v33 + 24) = 0;
    *(_OWORD *)(v33 + 32) = v109;
    swift_retain_n();
    v123 = v32;
    v119 = v31;
    sub_1BDDB6CA4(v32, v31);
    v125 = dispatch_semaphore_create(0);
    sub_1BDD86DEC(v29 + 56, (uint64_t)v139, qword_1ED6F3DD0);
    v34 = a1;
    v35 = sub_1BE1B2ABC();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = v121;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v121, 1, 1, v35);
    sub_1BDD86DEC((uint64_t)v139, (uint64_t)v136, qword_1ED6F3DD0);
    sub_1BDD86DEC(v114, (uint64_t)&v132, qword_1ED6F3DD0);
    v38 = (_QWORD *)swift_allocObject();
    v38[2] = 0;
    v120 = v38 + 2;
    v38[3] = 0;
    v38[4] = v28;
    sub_1BDDA2EF0((uint64_t)v136, (uint64_t)(v38 + 5), qword_1ED6F3DD0);
    sub_1BDDA2EF0((uint64_t)&v132, (uint64_t)(v38 + 10), qword_1ED6F3DD0);
    v38[15] = v33;
    v38[16] = v34;
    v39 = v125;
    v38[17] = v125;
    v40 = v37;
    v41 = v110;
    v42 = v36;
    sub_1BDD86DEC(v40, v110, (uint64_t *)&unk_1ED6F3C10);
    LODWORD(v36) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v41, 1, v35);
    v124 = v28;
    swift_retain();
    v122 = (_QWORD *)v33;
    swift_retain();
    swift_retain();
    v125 = v39;
    if ((_DWORD)v36 == 1)
    {
      sub_1BDD86E30(v41, (uint64_t *)&unk_1ED6F3C10);
    }
    else
    {
      sub_1BE1B2AB0();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v35);
    }
    if (*v120)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v43 = sub_1BE1B2A98();
      v45 = v44;
      swift_unknownObjectRelease();
    }
    else
    {
      v43 = 0;
      v45 = 0;
    }
    v46 = v122;
    if (v45 | v43)
    {
      v127 = 0;
      v126 = 0;
      v128 = v43;
      v129 = v45;
    }
    a1 = v115;
    swift_task_create();
    swift_release();
    sub_1BDD86E30(v121, (uint64_t *)&unk_1ED6F3C10);
    sub_1BE1B2EA0();
    v47 = v46[4];
    v48 = v123;
    if (v47 >> 60 == 15)
      goto LABEL_36;
    v49 = (_QWORD *)v46[3];
    sub_1BDD86DEC((uint64_t)v139, (uint64_t)&v132, qword_1ED6F3DD0);
    if (!v134)
    {
      sub_1BDD86E30((uint64_t)&v132, qword_1ED6F3DD0);
LABEL_36:
      v73 = v46[5];
      if (v73)
      {
        v74 = v73 + OBJC_IVAR____TtC9Coherence14CRFileSnapshot_url;
        swift_retain();
        sub_1BE10EF38(v74, 0, v136);
        v75 = v118;
        *v118 = v136[0];
        swift_release();
        swift_release();
        v15 = v107;
        v76 = v119;
      }
      else
      {
        v15 = v107;
        v76 = v119;
        v75 = v118;
      }
      goto LABEL_46;
    }
    sub_1BDD85B8C(&v132, (uint64_t)v136);
    v50 = v137;
    v51 = v138;
    __swift_project_boxed_opaque_existential_1(v136, v137);
    v52 = *(uint64_t (**)(_QWORD *, unint64_t, uint64_t, uint64_t))(v51 + 16);
    sub_1BDDB6CA4((uint64_t)v49, v47);
    v120 = v49;
    v53 = v113;
    v54 = v52(v49, v47, v50, v51);
    if (v53)
    {
      sub_1BDD9CC0C((uint64_t)v120, v47);
      swift_release();
      sub_1BDDB796C(v123, v119);
      swift_release_n();
      swift_release();

      sub_1BDD86E30((uint64_t)v139, qword_1ED6F3DD0);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
    }
    v56 = v54;
    v57 = v55;
    v104 = v47;
    v113 = 0;
    v58 = *(_QWORD *)(v124 + 16);
    v59 = *(_QWORD *)(v124 + 24);
    type metadata accessor for CRAssetRef();
    v60 = (_QWORD *)swift_allocObject();
    v60[2] = v58;
    v60[3] = v59;
    v103 = v60;
    v60[4] = v115;
    v61 = (void *)objc_opt_self();
    sub_1BDDB6CA4(v58, v59);
    swift_retain();
    sub_1BDDB6CA4(v58, v59);
    v62 = objc_msgSend(v61, sel_defaultManager);
    v63 = (void *)sub_1BE1B1D90();
    *(_QWORD *)&v132 = 0;
    v64 = objc_msgSend(v62, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v63, 1, 0, &v132);

    if ((v64 & 1) == 0)
      break;
    v65 = (id)v132;
    v66 = v97;
    sub_1BE1B1F4C();
    sub_1BE1B1EF8();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v66, v99);
    v67 = v93;
    sub_1BE1B1DA8();
    swift_bridgeObjectRelease();
    sub_1BDD86DEC(v114, (uint64_t)&v130, qword_1ED6F3DD0);
    if (v131)
    {
      sub_1BDD85B8C(&v130, (uint64_t)&v132);
      v68 = v134;
      v69 = v135;
      __swift_project_boxed_opaque_existential_1(&v132, v134);
      v70 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v69 + 8))(v56, v57, v68, v69);
      v72 = v71;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    }
    else
    {
      sub_1BDD86E30((uint64_t)&v130, qword_1ED6F3DD0);
      v70 = v56;
      v72 = v57;
      sub_1BDDB6CA4(v56, v57);
    }
    v77 = v113;
    sub_1BE1B1E98();
    v113 = v77;
    v78 = v70;
    v79 = v72;
    if (v77)
      goto LABEL_56;
    sub_1BDDB796C(v70, v72);
    v80 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    v81 = v94;
    v82 = v96;
    v80(v94, v67, v96);
    type metadata accessor for CRFileSnapshot();
    v83 = swift_allocObject();
    v80((char *)(v83 + OBJC_IVAR____TtC9Coherence14CRFileSnapshot_url), v81, v82);
    a1 = v115;
    v84 = (_QWORD *)swift_allocObject();
    v84[2] = v58;
    v84[3] = v59;
    v84[4] = v83;
    *(_QWORD *)&v132 = &unk_1EF5303C0;
    *((_QWORD *)&v132 + 1) = v84;
    swift_weakInit();
    sub_1BDDB6CA4(v58, v59);
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
    v85 = v100;
    sub_1BE1B2AEC();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v85, v102);
    swift_release();
    swift_release();
    sub_1BDD9CC0C((uint64_t)v120, v104);
    sub_1BDDB796C(v56, v57);
    sub_1BDDB796C(v58, v59);
    v75 = v118;
    *v118 = (uint64_t)v103;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
    v15 = v107;
    v76 = v119;
    v48 = v123;
LABEL_46:
    v86 = *v75;
    if (!*v75)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v90 = 0xD000000000000014;
      *(_QWORD *)(v90 + 8) = 0x80000001BE1D1CB0;
      *(_BYTE *)(v90 + 16) = 3;
      swift_willThrow();
      swift_release();
      sub_1BDDB796C(v48, v76);
      swift_release_n();
      swift_release();

      sub_1BDD86E30((uint64_t)v139, qword_1ED6F3DD0);
      return swift_release();
    }
    swift_beginAccess();
    sub_1BDDB6CA4(v48, v76);
    swift_retain();
    v88 = sub_1BDE5259C(v136, v48, v76);
    if (*v87)
    {
      *v87 = v86;
      swift_retain();
      ((void (*)(_QWORD *, _QWORD))v88)(v136, 0);
      swift_endAccess();
      swift_release();
      swift_release();
      sub_1BDDB796C(v48, v76);
      swift_release_n();
      swift_release();

      sub_1BDDB796C(v48, v76);
    }
    else
    {
      ((void (*)(_QWORD *, _QWORD))v88)(v136, 0);
      swift_endAccess();
      sub_1BDDB796C(v48, v76);
      swift_release();
      sub_1BDDB796C(v48, v76);
      swift_release_n();
      swift_release();

    }
    sub_1BDD86E30((uint64_t)v139, qword_1ED6F3DD0);
    v21 = v117;
    v19 = v116;
  }
  v91 = (id)v132;
  sub_1BE1B1D3C();

  swift_willThrow();
  v78 = swift_unexpectedError();
  __break(1u);
LABEL_56:
  sub_1BDDB796C(v78, v79);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1BE1724B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[6] = a8;
  v8[7] = v10;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  return swift_task_switch();
}

uint64_t sub_1BE1724DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, char, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  v3 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 48) = v1;
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 32);
  v6 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t))((char *)&dword_1EF5315D0 + dword_1EF5315D0);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = sub_1BE172590;
  return v6(*(_QWORD *)(v0 + 16), 0, (uint64_t)&unk_1EF5315C8, v2);
}

uint64_t sub_1BE172590()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  swift_release();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BE17260C()
{
  uint64_t v0;

  sub_1BE1B2EAC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BE172640()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BE172674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  v7[13] = swift_task_alloc();
  v8 = sub_1BE1B1DF0();
  v7[14] = v8;
  v7[15] = *(_QWORD *)(v8 - 8);
  v7[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BE172700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24);
  sub_1BDD86DEC(*(_QWORD *)(v0 + 72), v0 + 16, qword_1ED6F3DD0);
  v2 = v1 | *(_QWORD *)(v0 + 40);
  sub_1BDD86E30(v0 + 16, qword_1ED6F3DD0);
  if (!v2)
  {
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    sub_1BDDB6CA4(v6, v7);
    sub_1BE109230(v6, v7, v5, &v21);
    sub_1BDDB796C(v6, v7);
    *(_QWORD *)(v4 + 16) = v21;
LABEL_6:
    swift_release();
    goto LABEL_7;
  }
  if (!v1)
  {
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v15(v9, *(_QWORD *)(v0 + 56), v11);
    v15(v12, v13 + OBJC_IVAR____TtC9Coherence14CRAssetManager_temporaryDirectory, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v11);
    *(_QWORD *)(v14 + 40) = sub_1BE0C59D4(v9, 0, 0, 0, v12);
    goto LABEL_6;
  }
  v8 = sub_1BE1B1E08();
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v17 + 24);
  v19 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v17 + 32) = v20;
  sub_1BDD9CC0C(v18, v19);
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Capsule.in(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[2] = a1;
  v4[3] = a2;
  return Capsule.mutate<A>(_:)((void (*)(uint64_t))sub_1BDFC5D74, (uint64_t)v4, a3, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0]);
}

uint64_t Capsule.mutate<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  sub_1BE172934(a1, a2, a3, a4, a5);
  return sub_1BE172B80(v5, *(_QWORD *)(a3 + 16), a4, *(_QWORD *)(a3 + 24));
}

{
  uint64_t v5;
  uint64_t result;

  result = sub_1BE172934(a1, a2, a3, a4, a5);
  if (*(_QWORD *)(v5 + *(int *)(a3 + 40)))
    return sub_1BDDB639C(1, 1);
  __break(1u);
  return result;
}

uint64_t sub_1BE172934@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  void (*v22)(uint64_t);
  uint64_t v23[2];

  v6 = (uint64_t)v5;
  v21[0] = a4;
  v21[1] = a5;
  v21[2] = a2;
  v22 = a1;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v21 - v11;
  sub_1BDDCB3C0(a3);
  v13 = *v5;
  v14 = v5[1];
  v23[0] = *v5;
  v23[1] = v14;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v12, (char *)v5 + *(int *)(a3 + 36), v9);
  v17 = *(int *)(a3 + 40);
  v18 = *(uint64_t *)((char *)v5 + v17);
  if (v18)
  {
    type metadata accessor for Capsule.Ref(0, v8, *(_QWORD *)(a3 + 24), v16);
    sub_1BDD9C9A0(v13, v14);
    v19 = swift_allocObject();
    sub_1BDD9CC20(v23, (uint64_t)v12, v18);
    *(_QWORD *)(v6 + v17) = 0;
    v22(v19);
    sub_1BE172A7C(v6, v19, v21[0], v20);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE172A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  *(_QWORD *)(a1
            + *(int *)(type metadata accessor for Capsule(0, *(_QWORD *)(*(_QWORD *)a2 + 80), *(_QWORD *)(*(_QWORD *)a2 + 88), a4)+ 40)) = v4;
  swift_retain();
  return swift_release();
}

uint64_t Capsule.mutate<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _QWORD v9[6];

  v9[2] = a4;
  v9[3] = a1;
  v9[4] = a2;
  sub_1BE172934((void (*)(uint64_t))sub_1BE17A540, (uint64_t)v9, a3, a4, a5);
  return sub_1BE172B80(v5, *(_QWORD *)(a3 + 16), a4, *(_QWORD *)(a3 + 24));
}

uint64_t sub_1BE172B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for Capsule(0, a2, a4, a4);
  if (*(_QWORD *)(a1 + *(int *)(result + 40)))
  {
    swift_retain();
    sub_1BDDB639C(1, 1);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE172BD0(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  _QWORD v7[5];

  v7[3] = type metadata accessor for Capsule.Ref(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v7[4] = &protocol witness table for Capsule<A>.Ref;
  v7[0] = a1;
  swift_retain();
  a2(v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t Capsule.callAsFunction<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Capsule.mutate<A>(_:)(a1, a2, a3, a4, a5);
}

{
  return Capsule.mutate<A>(_:)(a1, a2, a3, a4, a5);
}

uint64_t Capsule.mutateCachedValues(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[5];

  v4 = *(int *)(a3 + 40);
  v5 = *(_QWORD *)(v3 + v4);
  if (v5)
  {
    v8 = result;
    v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated);
    v10 = swift_beginAccess();
    v11 = *v9;
    MEMORY[0x1E0C80A78](v10);
    v14[2] = v8;
    v14[3] = a2;
    swift_bridgeObjectRetain();
    result = sub_1BE172934((void (*)(uint64_t))sub_1BE17BF50, (uint64_t)v14, a3, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0]);
    v12 = *(_QWORD *)(v3 + v4);
    if (v12)
    {
      v13 = (_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated);
      swift_beginAccess();
      *v13 = v11;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id Capsule.context.getter()
{
  id v0;
  _OWORD v2[2];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  v0 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v2);
  sub_1BDD86E30((uint64_t)v2, qword_1ED6F3DD0);
  return v0;
}

uint64_t Capsule.mergeCopied(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *v2;
  v8 = v2[1];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  if (v8 >> 60 == 15)
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, a2);
  }
  else
  {
    v10 = *v7;
    v11 = v7[1];
    if (v11 >> 60 == 15)
    {
      sub_1BDDB6CA4(v9, v8);
      sub_1BDDB6CA4(v9, v8);
      (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, a2);
      sub_1BDDB796C(v9, v8);
      sub_1BDD9CC0C(v9, v8);
      sub_1BDD9CC0C(v10, v11);
    }
    else
    {
      sub_1BDD9C9A0(v9, v8);
      sub_1BDD9C9A0(v9, v8);
      sub_1BDD9C9A0(v10, v11);
      sub_1BDDD6F30(v9, v8);
      v13 = v12;
      sub_1BDD9CC0C(v10, v11);
      (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, a2);
      sub_1BDDB796C(v9, v8);
      sub_1BDD9CC0C(v9, v8);
      if ((v13 & 1) != 0)
        return Capsule.merge<A>(_:)(a1, a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 24))(v2, a1, a2);
}

uint64_t Capsule.merging<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a5, v5, a2);
  return Capsule.merge<A>(_:)(a1, a2, a3, a4);
}

uint64_t Capsule.encapsulate<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *__return_ptr, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *__return_ptr, unint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v7 = v6;
  v13 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v37 = (char *)&v30 - v17;
  v18 = *(_QWORD *)(v7 + *(int *)(a2 + 40));
  if (!v18)
  {
    __break(1u);
    goto LABEL_7;
  }
  v19 = v18 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v19, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v20 = *(void (**)(uint64_t *__return_ptr, unint64_t, uint64_t))(a4 + 48);
  v35 = a1;
  v36 = a3;
  v34 = v20;
  v20(&v39, a3, a4);
  v5 = v39;
  a3 = v40;
  v21 = *(_QWORD *)&v15[*(int *)(v13 + 20)];
  if (!*(_QWORD *)(v21 + 16))
  {
LABEL_8:
    sub_1BDDB796C(v5, a3);
    result = sub_1BDD9C3E0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    __break(1u);
    goto LABEL_9;
  }
  v31 = a5;
  v32 = a2;
  v33 = v7;
  sub_1BDDB6CA4(v39, v40);
  v22 = sub_1BDDB7F0C(v5, a3);
  if ((v23 & 1) == 0)
  {
LABEL_7:
    sub_1BDDB796C(v5, a3);
    goto LABEL_8;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 48 * v22);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v5, a3);
  sub_1BDDB796C(v5, a3);
  sub_1BDD9C3E0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v24)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v24 + 88))(&v41, result);
    swift_release();
    v26 = (uint64_t)v37;
    swift_dynamicCast();
    v34(&v41, v36, a4);
    v27 = v41;
    v28 = v42;
    v39 = v41;
    v40 = v42;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Capsule.encapsulate<A>(crdt:id:)(v26, v32, AssociatedTypeWitness, AssociatedConformanceWitness, v31);
    sub_1BDDB796C(v27, v28);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v26, AssociatedTypeWitness);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Capsule.encapsulate<A>(crdt:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24[2];

  v21 = a1;
  v22 = a3;
  v23 = a5;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v9 + 8);
  v15 = *(_QWORD *)v5;
  v14 = *(_QWORD *)(v5 + 8);
  if (v14 >> 60 == 15)
  {
    sub_1BDDB6CA4(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
    sub_1BDD9CC0C(v15, v14);
    result = sub_1BDD9CC0C(v12, v13);
  }
  else
  {
    sub_1BDD9C9A0(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    sub_1BDD9C9A0(v15, v14);
    sub_1BDDB6CA4(v12, v13);
    sub_1BDDD6F30(v15, v14);
    v18 = v17;
    sub_1BDDB796C(v12, v13);
    sub_1BDDB796C(v15, v14);
    result = sub_1BDD9CC0C(v15, v14);
    if ((v18 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v5, a2);
      type metadata accessor for Capsule(0, v22, *(_QWORD *)(a4 + 16), v19);
      return swift_dynamicCast();
    }
  }
  if (*(_QWORD *)(v5 + *(int *)(a2 + 40)))
  {
    v24[0] = v12;
    v24[1] = v13;
    return sub_1BDE536D0(v21, v24, v22, a4, v23);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.hashState<A>(from:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v6 = v4;
  v11 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v30 - v16;
  v35 = *(int *)(a2 + 40);
  v17 = *(_QWORD *)(v6 + v35);
  if (!v17)
  {
    __break(1u);
    goto LABEL_8;
  }
  v18 = v17 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v18, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v19 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 48);
  v33 = a1;
  v34 = a3;
  v31 = v19;
  v19(&v37, a3, a4);
  v5 = v37;
  a1 = v38;
  v20 = *(_QWORD *)&v13[*(int *)(v11 + 20)];
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_9:
    sub_1BDDB796C(v5, a1);
    result = sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    __break(1u);
    goto LABEL_10;
  }
  v32 = v6;
  v30 = v15;
  sub_1BDDB6CA4(v37, v38);
  v21 = sub_1BDDB7F0C(v5, a1);
  if ((v22 & 1) == 0)
  {
LABEL_8:
    sub_1BDDB796C(v5, a1);
    goto LABEL_9;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 48 * v21);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v5, a1);
  sub_1BDDB796C(v5, a1);
  sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 88))(&v39, result);
  swift_release();
  v25 = (uint64_t)v36;
  result = swift_dynamicCast();
  if (*(_QWORD *)(v32 + v35))
  {
    v31(&v39, v34, a4);
    v26 = v39;
    v27 = v40;
    v37 = v39;
    v38 = v40;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v29 = sub_1BDE54408(v25, &v37, AssociatedTypeWitness, AssociatedConformanceWitness);
    sub_1BDDB796C(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v25, AssociatedTypeWitness);
    return v29;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t Capsule.encapsulateTransient<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v16 - v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 48))(&v17, a2, a3);
  v16 = v17;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  v14 = *(_QWORD *)(v4 + *(int *)(a1 + 40));
  if (v14)
  {
    v15 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
    swift_retain();
    return sub_1BE170424((uint64_t *)&v16, (uint64_t)v12, v14, AssociatedTypeWitness, v15, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Capsule.finalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _OWORD v3[2];
  uint64_t v4;

  v1 = v0;
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v2 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v3);
  sub_1BDD86E30((uint64_t)v3, qword_1ED6F3DD0);
  Capsule.finalizeTimestamps(_:)((uint64_t)v2, v1);

}

uint64_t Capsule.hasDelta(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Capsule.hasDelta(from:)(v2, a2) & 1;
}

uint64_t Capsule.actionUndoing(deltaTo:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return Capsule.actionUndoingDifference(from:)(v2, a1, a2);
}

uint64_t Capsule.actionUndoingDifference(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  v5 = *(int *)(a2 + 40);
  if (!*(_QWORD *)(v3 + v5))
  {
    __break(1u);
    goto LABEL_8;
  }
  result = *(_QWORD *)(result + v5);
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  result = sub_1BDE54EE4(result, v9);
  v6 = v9[0];
  if (v9[0])
  {
    v8 = v9[1];
    v7 = v9[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1BE17A6CC(v6, v8, v7, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
  a3[2] = v7;
  return result;
}

uint64_t *Capsule.apply(_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];

  v3 = *result;
  if (*result)
  {
    v5 = result[1];
    v6 = result[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (uint64_t *)sub_1BDDCB3C0(a2);
    if (*(_QWORD *)(v2 + *(int *)(a2 + 40)))
    {
      v7[0] = v3;
      v7[1] = v5;
      v7[2] = v6;
      sub_1BDE5A470(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t *)sub_1BDDB639C(1, 0);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[3];

  v3 = *result;
  if (*result)
  {
    v5 = result[1];
    v6 = result[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (uint64_t *)sub_1BDDCB3C0(a2);
    if (*(_QWORD *)(v2 + *(int *)(a2 + 40)))
    {
      v7[0] = v3;
      v7[1] = v5;
      v7[2] = v6;
      sub_1BDE5A470(v7);
      sub_1BE17A6CC(v3, v5, v6, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
      return (uint64_t *)sub_1BDDB639C(1, 0);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t Capsule.applying(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];

  v4 = v3;
  v6 = *a1;
  if (!*a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v4, a2);
  v8 = a1[1];
  v7 = a1[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v4, a2);
  v10[0] = v6;
  v10[1] = v8;
  v10[2] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Capsule.apply(_:)(v10, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Capsule.actionUndoingDifference(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(int *)(a2 + 40);
  if (*(_QWORD *)(v3 + v4))
  {
    result = *(_QWORD *)(result + v4);
    if (result)
      return sub_1BDE54EE4(result, a3);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *Capsule.applying(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];

  v5 = *a1;
  if (!*a1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = a1[1];
  v6 = a1[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v9[0] = v5;
  v9[1] = v7;
  v9[2] = v6;
  return Capsule.apply(_:)(v9, a2);
}

uint64_t Capsule.getCachedValue<A>(forKey:recompute:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24[4];
  __int128 v25;
  __int128 v26;

  v23 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v13 = *v10;
  v14 = v10[1];
  if (qword_1EF525700 != -1)
    swift_once();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&dword_1EF548FC0);
  result = swift_endAccess();
  v16 = *(_QWORD *)(v5 + *(int *)(a3 + 40));
  if (v16)
  {
    v17 = (uint64_t *)(v16 + OBJC_IVAR____TtC9Coherence10CapsuleRef_caches);
    swift_beginAccess();
    v18 = *v17;
    if (*(_QWORD *)(v18 + 16))
    {
      sub_1BDDB6CA4(v13, v14);
      v19 = sub_1BDDB7F0C(v13, v14);
      if ((v20 & 1) != 0)
      {
        sub_1BDDC1538(*(_QWORD *)(v18 + 56) + 32 * v19, (uint64_t)&v25);
      }
      else
      {
        v25 = 0u;
        v26 = 0u;
      }
      sub_1BDDB796C(v13, v14);
    }
    else
    {
      v25 = 0u;
      v26 = 0u;
    }
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EF548FC0);
    v21 = swift_endAccess();
    if (*((_QWORD *)&v26 + 1))
    {
      sub_1BDDA2EF0((uint64_t)&v25, (uint64_t)v24, qword_1EF52B750);
      __swift_instantiateConcreteTypeFromMangledName(qword_1EF52B750);
      return swift_dynamicCast();
    }
    else
    {
      a2(v21);
      swift_beginAccess();
      os_unfair_lock_lock((os_unfair_lock_t)&dword_1EF548FC0);
      swift_endAccess();
      v24[3] = a4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
      (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v12, a4);
      swift_beginAccess();
      sub_1BDDB6CA4(v13, v14);
      sub_1BE149348((uint64_t)v24, v13, v14);
      swift_endAccess();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EF548FC0);
      swift_endAccess();
      sub_1BDD86E30((uint64_t)&v25, qword_1EF52B750);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v23, v12, a4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.getCachedValue<A>(forKey:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v9 = *a1;
  v8 = a1[1];
  if (qword_1EF525700 != -1)
    swift_once();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&dword_1EF548FC0);
  result = swift_endAccess();
  v11 = *(_QWORD *)(v4 + *(int *)(a2 + 40));
  if (v11)
  {
    v12 = (uint64_t *)(v11 + OBJC_IVAR____TtC9Coherence10CapsuleRef_caches);
    swift_beginAccess();
    v13 = *v12;
    if (*(_QWORD *)(v13 + 16))
    {
      sub_1BDDB6CA4(v9, v8);
      v14 = sub_1BDDB7F0C(v9, v8);
      if ((v15 & 1) != 0)
      {
        sub_1BDDC1538(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v18);
      }
      else
      {
        v18 = 0u;
        v19 = 0u;
      }
      sub_1BDDB796C(v9, v8);
    }
    else
    {
      v18 = 0u;
      v19 = 0u;
    }
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EF548FC0);
    swift_endAccess();
    sub_1BDDA2EF0((uint64_t)&v18, (uint64_t)&v17, qword_1EF52B750);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF52B750);
    v16 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v16 ^ 1u, 1, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.setCachedValue<A>(_:forKey:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12[4];

  v8 = *a2;
  v9 = a2[1];
  if (qword_1EF525700 != -1)
    swift_once();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&dword_1EF548FC0);
  result = swift_endAccess();
  if (*(_QWORD *)(v4 + *(int *)(a3 + 40)))
  {
    v12[3] = a4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
    swift_beginAccess();
    sub_1BDDB6CA4(v8, v9);
    sub_1BE149348((uint64_t)v12, v8, v9);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EF548FC0);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.clearCachedValue(forKey:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  _OWORD v7[2];

  v4 = *a1;
  v5 = a1[1];
  if (qword_1EF525700 != -1)
    swift_once();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&dword_1EF548FC0);
  result = swift_endAccess();
  if (*(_QWORD *)(v2 + *(int *)(a2 + 40)))
  {
    memset(v7, 0, sizeof(v7));
    swift_beginAccess();
    sub_1BDDB6CA4(v4, v5);
    sub_1BE149348((uint64_t)v7, v4, v5);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1EF548FC0);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule<>.init(_:_:id:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[2];

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v15 = v13[1];
  (*(void (**)(char *))(v10 + 16))(v12);
  v17[0] = v14;
  v17[1] = v15;
  Capsule<>.init(_:id:)((uint64_t)v12, v17, a3, a4, a5);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
}

void Capsule<>.init<A>(_:initClosure:)(void *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  Capsule<>.init<A>(initClosure:)(a2, a3, a4, a5, a6, a7);

}

void (*Capsule<>.init<A>(initClosure:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>))(uint64_t *, _QWORD)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*result)(uint64_t *, _QWORD);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(void);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56[3];

  v49 = a5;
  v50 = a2;
  v51 = a1;
  v8 = *(_QWORD *)(a4 - 8);
  v48 = a4;
  v45 = v8;
  MEMORY[0x1E0C80A78](a1);
  v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BE1B1F58();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a6 = xmmword_1BE1B6B20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for Capsule(0, a3, *(_QWORD *)(AssociatedConformanceWitness + 16), v18);
  v20 = *(int *)(v19 + 36);
  v21 = v19;
  v47 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a6 + v20, 1, 1, a3);
  v22 = *(int *)(v21 + 40);
  *(_QWORD *)(a6 + v22) = 0;
  sub_1BDDCB1B4((uint64_t)v16);
  type metadata accessor for ReplicaState();
  v23 = swift_allocObject();
  v24 = v23 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v25 = type metadata accessor for Replica();
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v24, 1, 1, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v16, v13);
  *(_QWORD *)(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v26((uint64_t)v12, 1, 1, v25);
  v27 = v46;
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v12, v24);
  swift_endAccess();
  v28 = sub_1BDE75D50(v23);
  swift_release();
  *(_QWORD *)(a6 + v22) = v28;
  sub_1BE1B1F4C();
  v52 = sub_1BDDC4278((uint64_t)&unk_1E775AA80);
  v53 = v29;
  v30 = sub_1BDEE7C7C();
  v32 = v31;
  sub_1BE1B1EA4();
  sub_1BDDB796C(v30, v32);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v33 = v52;
  v34 = v53;
  sub_1BDD9CC0C(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  *(_QWORD *)a6 = v33;
  *(_QWORD *)(a6 + 8) = v34;
  sub_1BDD9C8AC(v47);
  v51();
  v35 = v48;
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(v49 + 48))(&v52, v35);
  result = (void (*)(uint64_t *, _QWORD))sub_1BDDB796C(v33, v34);
  v37 = v52;
  v38 = v53;
  *(_QWORD *)a6 = v52;
  *(_QWORD *)(a6 + 8) = v38;
  if (!*(_QWORD *)(a6 + v22))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v38 >> 60 == 15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_1BDDB6CA4(v37, v38);
  swift_beginAccess();
  v54 = v37;
  v55 = v38;
  swift_retain();
  result = (void (*)(uint64_t *, _QWORD))sub_1BDDB7C54(&v52, &v54);
  if (*(_QWORD *)(v39 + 16))
  {
    v40 = *(_QWORD *)(v39 + 8);
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (!v41)
    {
      *(_QWORD *)(v39 + 8) = v42;
      result(&v52, 0);
      swift_endAccess();
      swift_release();
      result = (void (*)(uint64_t *, _QWORD))sub_1BDDB796C(v54, v55);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_10;
  }
  result(&v52, 0);
  sub_1BDDB796C(v54, v55);
  swift_endAccess();
  result = (void (*)(uint64_t *, _QWORD))swift_release();
LABEL_7:
  v43 = *(_QWORD *)(a6 + 8);
  if (v43 >> 60 != 15)
  {
    v44 = *(_QWORD *)a6;
    sub_1BDDB6CA4(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
    swift_beginAccess();
    swift_retain();
    sub_1BDDBC6BC(v56, v44, v43);
    swift_endAccess();
    swift_release();
    sub_1BDDB796C(v56[0], v56[1]);
    swift_retain();
    sub_1BDDB639C(1, 1);
    swift_release();
    return (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v27, v35);
  }
LABEL_12:
  __break(1u);
  return result;
}

void Capsule<>.init(_:id:initClosure:)(void *a1@<X0>, __int128 *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v8;

  v8 = *a2;
  Capsule<>.init(id:initClosure:)((uint64_t *)&v8, a3, a4, a5, a6, a7);

}

uint64_t Capsule<>.init(id:initClosure:)@<X0>(uint64_t *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(void);
  char *v55;
  uint64_t v56[3];
  uint64_t v57[2];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;

  v51 = a5;
  v53 = a3;
  v54 = a2;
  v48 = *(_QWORD *)(a4 - 8);
  v10 = v48;
  v11 = MEMORY[0x1E0C80A78](a1);
  v52 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v55 = (char *)&v46 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1BE1B1F58();
  v17 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v49 = a1[1];
  v50 = v20;
  *(_OWORD *)a6 = xmmword_1BE1B6B20;
  v21 = *(_QWORD *)(a5 + 16);
  v47 = a4;
  v23 = type metadata accessor for Capsule(0, a4, v21, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a6 + *(int *)(v23 + 36), 1, 1, a4);
  v24 = *(int *)(v23 + 40);
  *(_QWORD *)(a6 + v24) = 0;
  sub_1BDDCB1B4((uint64_t)v19);
  type metadata accessor for ReplicaState();
  v25 = swift_allocObject();
  v26 = v25 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v27 = type metadata accessor for Replica();
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v19, v46);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v28((uint64_t)v16, 1, 1, v27);
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v16, v26);
  swift_endAccess();
  v29 = sub_1BDE75D50(v25);
  swift_release();
  *(_QWORD *)(a6 + v24) = v29;
  v30 = v47;
  sub_1BDD9CC0C(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v31 = v49;
  *(_QWORD *)a6 = v50;
  *(_QWORD *)(a6 + 8) = v31;
  v32 = v23;
  v33 = v48;
  sub_1BDD9C8AC(v32);
  v34 = v55;
  v54();
  swift_release();
  v35 = (uint64_t)v52;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v52, v34, v30);
  swift_retain();
  sub_1BDD85BB4(v35, v30, (uint64_t **)&v58);
  v36 = v58;
  v37 = MEMORY[0x1E0DEE9D8];
  v38 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v39 = sub_1BDDB6CE8(v37);
  sub_1BDDB6E0C(v37);
  sub_1BDDB6CE8(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = MEMORY[0x1E0DEE9E0];
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)&v58 = v36;
  *((_QWORD *)&v58 + 1) = 1;
  v59 = v40;
  v60 = v40;
  v61 = v38;
  v62 = v39;
  v42 = *(_QWORD *)(a6 + 8);
  if (v42 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v43 = *(_QWORD *)a6;
    sub_1BDDB6CA4(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
    v57[0] = v43;
    v57[1] = v42;
    swift_beginAccess();
    sub_1BDD8B18C(&v58, v57);
    swift_endAccess();
    swift_release();
    sub_1BDDB796C(v43, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_release();
    v44 = *(_QWORD *)(a6 + 8);
    if (v44 >> 60 != 15)
    {
      v45 = *(_QWORD *)a6;
      sub_1BDDB6CA4(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
      swift_beginAccess();
      swift_retain();
      sub_1BDDBC6BC(v56, v45, v44);
      swift_endAccess();
      swift_release();
      sub_1BDDB796C(v56[0], v56[1]);
      swift_retain();
      sub_1BDDB639C(1, 1);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v55, v30);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  uint64_t v59[3];
  uint64_t v60[2];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;

  v57 = a2;
  v56 = a3;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v48 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v66 = (char *)&v47 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v14);
  v53 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1BE1B1F58();
  v16 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v54 = a1[1];
  v55 = v19;
  *(_OWORD *)a6 = xmmword_1BE1B6B20;
  v49 = a5;
  v21 = type metadata accessor for Capsule(0, a4, *(_QWORD *)(a5 + 16), v20);
  v22 = a6 + *(int *)(v21 + 36);
  v50 = v10;
  v51 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v22, 1, 1, a4);
  v23 = *(int *)(v21 + 40);
  *(_QWORD *)(a6 + v23) = 0;
  sub_1BDDCB1B4((uint64_t)v18);
  type metadata accessor for ReplicaState();
  v24 = swift_allocObject();
  v25 = v24 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v26 = type metadata accessor for Replica();
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v24 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v18, v52);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v24 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v28 = (uint64_t)v53;
  v29 = v26;
  v30 = v66;
  v27((uint64_t)v53, 1, 1, v29);
  swift_beginAccess();
  sub_1BDDACC5C(v28, v25);
  swift_endAccess();
  v31 = sub_1BDE75D50(v24);
  swift_release();
  *(_QWORD *)(a6 + v23) = v31;
  sub_1BDD9CC0C(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v32 = v54;
  *(_QWORD *)a6 = v55;
  *(_QWORD *)(a6 + 8) = v32;
  sub_1BDD9C8AC(v21);
  v33 = v58;
  v57();
  if (v33)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a6, v21);
  }
  swift_release();
  v35 = (uint64_t)v48;
  v36 = v30;
  v37 = v51;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v48, v36, v51);
  swift_retain();
  sub_1BDD85BB4(v35, v37, (uint64_t **)&v61);
  v38 = v61;
  v39 = MEMORY[0x1E0DEE9D8];
  v40 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v41 = sub_1BDDB6CE8(v39);
  sub_1BDDB6E0C(v39);
  sub_1BDDB6CE8(v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x1E0DEE9E0];
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)&v61 = v38;
  *((_QWORD *)&v61 + 1) = 1;
  v62 = v42;
  v63 = v42;
  v64 = v40;
  v65 = v41;
  v43 = *(_QWORD *)(a6 + 8);
  if (v43 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_8;
  }
  v44 = *(_QWORD *)a6;
  sub_1BDDB6CA4(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v60[0] = v44;
  v60[1] = v43;
  swift_beginAccess();
  sub_1BDD8B18C(&v61, v60);
  swift_endAccess();
  swift_release();
  sub_1BDDB796C(v44, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  result = swift_release();
  v45 = *(_QWORD *)(a6 + 8);
  if (v45 >> 60 == 15)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v46 = *(_QWORD *)a6;
  sub_1BDDB6CA4(*(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  swift_beginAccess();
  swift_retain();
  sub_1BDDBC6BC(v59, v46, v45);
  swift_endAccess();
  swift_release();
  sub_1BDDB796C(v59[0], v59[1]);
  swift_retain();
  sub_1BDDB639C(1, 1);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v66, v51);
}

uint64_t Capsule<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE176A88(a1, a2, a3, (void (*)(uint64_t))Capsule.Ref<>.root.getter);
}

{
  return sub_1BE176A88(a1, a2, a3, (void (*)(uint64_t))Capsule.Ref<>.root.getter);
}

uint64_t Capsule<>.observableDifference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  __n128 v29;
  __n128 v30;

  v5 = v4;
  v28 = a4;
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v27 - 8);
  result = MEMORY[0x1E0C80A78](v27);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(v5 + 8);
  if (v15 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_8;
  }
  _s27CapsuleReferenceDifferencerCMa(0, v8, a3, v12);
  v16 = *(_QWORD *)v5;
  sub_1BDDB6CA4(*(_QWORD *)v5, v15);
  v29.n128_u64[0] = v16;
  v29.n128_u64[1] = v15;
  result = (uint64_t)sub_1BE17A668((uint64_t *)&v29, a1, v5, v17);
  v18 = *(_QWORD *)(v5 + 8);
  if (v18 >> 60 == 15)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v19 = (_QWORD *)result;
  v20 = *(_QWORD *)v5;
  sub_1BDDB6CA4(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  v30.n128_u64[0] = v20;
  v30.n128_u64[1] = v18;
  Ref.init(id:)(&v30, &v29);
  v21 = v29;
  v30 = v29;
  sub_1BE1754EC((uint64_t *)&v30, v8, a3, v14);
  sub_1BDDB796C(v21.n128_i64[0], v21.n128_u64[1]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v27);
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v27);
    swift_beginAccess();
    v22 = v19[2];
    v23 = v19[3];
    v24 = v19[4];
    sub_1BDDB6CA4(v22, v23);
    swift_bridgeObjectRetain();
    result = swift_release();
  }
  v25 = v28;
  *v28 = v22;
  v25[1] = v23;
  v25[2] = v24;
  return result;
}

uint64_t Capsule<>.delta(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return Capsule<>.observableDifference(from:)(v3, a1, a2, a3);
}

uint64_t sub_1BE1754EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, __int128 *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(__int128 *, __int128 *, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  __int128 v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  _UNKNOWN **v84;
  __int128 v85;
  uint64_t v86;

  v5 = v4;
  v78 = a4;
  v9 = *v5;
  v69 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = sub_1BE1B2EE8();
  v65 = *(_QWORD *)(v66 - 8);
  v11 = MEMORY[0x1E0C80A78](v66);
  v75 = (char *)&v62 - v12;
  v76 = AssociatedTypeWitness;
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v67 = (char *)&v62 - v14;
  v70 = *(_QWORD *)(a2 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v72 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v79 = (char *)&v62 - v17;
  v19 = *a1;
  v18 = a1[1];
  *(_QWORD *)&v85 = *a1;
  *((_QWORD *)&v85 + 1) = v18;
  v71 = a2;
  v21 = type metadata accessor for Ref(0, a2, a3, v20);
  v22 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v21);
  Reference.identity.getter(v21, v22);
  v23 = v82;
  v77 = v5 + 2;
  swift_beginAccess();
  v24 = v5;
  v25 = v5[4];
  v74 = v5 + 4;
  v80 = v23;
  sub_1BDDB6CA4(v23, *((unint64_t *)&v23 + 1));
  v26 = *(_QWORD *)(v9 + 80);
  v68 = *(_QWORD *)(v9 + 88);
  v28 = _s20ObservableDifferenceV19ReferenceDifferenceOMa(0, v26, v68, v27);
  v29 = sub_1BDDBFF68();
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](&v85, &v80, v25, &type metadata for CRKeyPath, v28, v29);
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v23, *((unint64_t *)&v23 + 1));
  if (v86 == 2)
  {
    v30 = sub_1BE1B2EE8();
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(&v85, v30);
    v82 = 0u;
    v83 = 0u;
    v80 = v23;
    swift_beginAccess();
    v63 = *((_QWORD *)&v23 + 1);
    sub_1BDDB6CA4(v23, *((unint64_t *)&v23 + 1));
    v64 = sub_1BE1B2684();
    sub_1BE1B26B4();
    swift_endAccess();
    v31 = (uint64_t)v24 + *(_QWORD *)(*v24 + 104);
    *(_QWORD *)&v82 = v19;
    *((_QWORD *)&v82 + 1) = v18;
    sub_1BDDB6CA4(v19, v18);
    v32 = v68;
    v33 = *(_QWORD *)(v68 + 16);
    Ref.subscript.getter(v31, v21, v26, v33);
    sub_1BDDB796C(v19, v18);
    v34 = (uint64_t)v24 + *(_QWORD *)(*v24 + 112);
    *(_QWORD *)&v82 = v19;
    *((_QWORD *)&v82 + 1) = v18;
    sub_1BDDB6CA4(v19, v18);
    Ref.subscript.getter(v34, v21, v26, v33);
    sub_1BDDB796C(v19, v18);
    *((_QWORD *)&v83 + 1) = _s27CapsuleReferenceDifferencerCMa(0, v26, v32, v35);
    v84 = &off_1E775AA68;
    *(_QWORD *)&v82 = v24;
    v36 = v69;
    v37 = *(void (**)(char *, __int128 *, uint64_t, uint64_t))(v69 + 32);
    swift_retain();
    v38 = v75;
    v39 = v72;
    v40 = v71;
    v37(v79, &v82, v71, v36);
    sub_1BDD86E30((uint64_t)&v82, &qword_1ED6EF878);
    v41 = v73;
    v42 = v38;
    v43 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v42, 1, v76) == 1)
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v75, v66);
      v82 = 0uLL;
      *(_QWORD *)&v83 = 0;
      *((_QWORD *)&v83 + 1) = 1;
      v44 = v63;
      *(_QWORD *)&v80 = v23;
      *((_QWORD *)&v80 + 1) = v63;
      swift_beginAccess();
      sub_1BDDB6CA4(v23, v44);
      sub_1BE1B26B4();
      swift_endAccess();
      sub_1BDDB796C(v23, v44);
      v45 = *(void (**)(char *, uint64_t))(v70 + 8);
      v45(v39, v40);
      v45(v79, v40);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
      v47 = v78;
      v48 = 1;
    }
    else
    {
      v53 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      v54 = v67;
      v53(v67, v75, v43);
      *((_QWORD *)&v83 + 1) = v43;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v82);
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 16))(boxed_opaque_existential_1, v54, v43);
      v56 = v63;
      *(_QWORD *)&v80 = v23;
      *((_QWORD *)&v80 + 1) = v63;
      swift_beginAccess();
      sub_1BDDB6CA4(v23, v56);
      sub_1BE1B26B4();
      swift_endAccess();
      sub_1BDDB796C(v23, v56);
      v57 = *(void (**)(char *, uint64_t))(v70 + 8);
      v57(v39, v40);
      v57(v79, v40);
      v58 = v78;
      v53(v78, v54, v43);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
      v47 = v58;
      v48 = 0;
    }
    v59 = v43;
  }
  else
  {
    v49 = v73;
    v50 = v76;
    sub_1BDDB796C(v23, *((unint64_t *)&v23 + 1));
    v51 = *(_QWORD *)(v28 - 8);
    v52 = *(void (**)(__int128 *, __int128 *, uint64_t))(v51 + 32);
    v52(&v82, &v85, v28);
    v52(&v80, &v82, v28);
    if (v81 >= 2)
    {
      sub_1BDE77688(&v80, &v85);
      sub_1BDE77688(&v85, &v80);
      v60 = v78;
      swift_dynamicCast();
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
      v47 = v60;
      v48 = 0;
    }
    else
    {
      (*(void (**)(__int128 *, uint64_t))(v51 + 8))(&v80, v28);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
      v47 = v78;
      v48 = 1;
    }
    v59 = v50;
  }
  return v46((uint64_t)v47, v48, 1, v59);
}

uint64_t sub_1BE175B74@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  int v39;
  uint64_t result;
  __int128 v41;
  uint64_t v42;
  __n128 v43;
  char *v44;
  int v45;
  void (**v46)(char *, char *, uint64_t);
  __int128 *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t AssociatedTypeWitness;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (**v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  __int128 *v59;
  __n128 v60;
  __n128 v61;

  v5 = v4;
  v59 = a4;
  v9 = *(_QWORD **)v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  MEMORY[0x1E0C80A78](v10);
  v49 = (char *)&v48 - v11;
  v55 = a2;
  v58 = sub_1BE1B2EE8();
  v56 = *(void (***)(char *, char *, uint64_t))(v58 - 8);
  v12 = MEMORY[0x1E0C80A78](v58);
  v57 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v48 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v48 - v17;
  v19 = a1[1];
  v21 = v5 + v9[13];
  v61.n128_u64[0] = *a1;
  v20 = v61.n128_u64[0];
  v61.n128_u64[1] = v19;
  sub_1BDDB6CA4(v61.n128_i64[0], v19);
  v53 = a3;
  v23 = type metadata accessor for WeakRef(0, a2, a3, v22);
  v24 = v9[10];
  v25 = *(_QWORD *)(v9[11] + 16);
  WeakRef.subscript.getter(v21, v23, v24, v25);
  sub_1BDDB796C(v20, v19);
  v26 = *(_QWORD *)(*(_QWORD *)v5 + 112);
  v54 = v5;
  v27 = v5 + v26;
  v28 = v56;
  v61.n128_u64[0] = v20;
  v61.n128_u64[1] = v19;
  sub_1BDDB6CA4(v20, v19);
  v29 = v27;
  v30 = v18;
  v31 = v16;
  v32 = v55;
  v33 = v23;
  v34 = v25;
  v35 = v57;
  v36 = v58;
  WeakRef.subscript.getter(v29, v33, v24, v34);
  sub_1BDDB796C(v20, v19);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48);
  LODWORD(a1) = v37(v30, 1, v32);
  v28[2](v35, v31, v36);
  if ((_DWORD)a1 == 1 || v37(v35, 1, v32) == 1)
  {
    v38 = v28[1];
    ((void (*)(char *, uint64_t))v38)(v35, v36);
    if (v37(v31, 1, v32) != 1)
    {
      ((void (*)(char *, uint64_t))v38)(v31, v36);
      result = ((uint64_t (*)(char *, uint64_t))v38)(v30, v36);
      v41 = xmmword_1BE1BFD40;
      goto LABEL_9;
    }
    v39 = v37(v30, 1, v32);
    ((void (*)(char *, uint64_t))v38)(v31, v36);
    result = ((uint64_t (*)(char *, uint64_t))v38)(v30, v36);
    if (v39 != 1)
    {
      v41 = xmmword_1BE1C7CC0;
LABEL_9:
      *v59 = v41;
      return result;
    }
LABEL_8:
    v41 = xmmword_1BE1C7CD0;
    goto LABEL_9;
  }
  v56 = (void (**)(char *, char *, uint64_t))v28[1];
  ((void (*)(char *, uint64_t))v56)(v35, v36);
  v60.n128_u64[0] = v20;
  v60.n128_u64[1] = v19;
  v42 = v53;
  Ref.init(id:)(&v60, &v61);
  v43 = v61;
  v60 = v61;
  sub_1BDDB6CA4(v20, v19);
  v44 = v49;
  sub_1BE1754EC((uint64_t *)&v60, v32, v42, v49);
  sub_1BDDB796C(v43.n128_i64[0], v43.n128_u64[1]);
  v45 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v44, 1);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v44, v51);
  v46 = v56;
  ((void (*)(char *, uint64_t))v56)(v31, v36);
  result = ((uint64_t (*)(char *, uint64_t))v46)(v30, v36);
  if (v45 == 1)
    goto LABEL_8;
  v47 = v59;
  *(_QWORD *)v59 = v20;
  *((_QWORD *)v47 + 1) = v19;
  return sub_1BDDB6CA4(v20, v19);
}

uint64_t *sub_1BE175F28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  sub_1BDDB796C(v0[2], v0[3]);
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v4 = type metadata accessor for Capsule(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(*(_QWORD *)(v1 + 88) + 16), v3);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v2, v4);
  v5((uint64_t)v0 + *(_QWORD *)(*v0 + 112), v4);
  return v0;
}

uint64_t sub_1BE175FAC()
{
  return sub_1BDD93094((void (*)(void))sub_1BE175F28);
}

uint64_t sub_1BE175FB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return sub_1BE1754EC(a1, a2, a3, a4);
}

uint64_t sub_1BE175FD8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X8>)
{
  return sub_1BE175B74(a1, a2, a3, a4);
}

uint64_t sub_1BE17600C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _OWORD v43[2];

  v37 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1BE1B2EE8();
  v35 = *(_QWORD *)(v15 - 8);
  v36 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v34 - v16;
  v18 = *(_QWORD *)(v7 + 16);
  v39 = *a1;
  v19 = a5(0, a3, a4);
  v20 = MEMORY[0x1C3B7DF54](a6, v19);
  Reference.identity.getter(v19, v20);
  v21 = v41;
  v22 = v42;
  v38[0] = v41;
  v38[1] = v42;
  v24 = _s20ObservableDifferenceV19ReferenceDifferenceOMa(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v23);
  v25 = sub_1BDDBFF68();
  MEMORY[0x1C3B7C58C](&v39, v38, v18, &type metadata for CRKeyPath, v24, v25);
  sub_1BDDB796C(v21, v22);
  if (v40 < 2)
    goto LABEL_5;
  if (v40 == 2)
  {
    v24 = sub_1BE1B2EE8();
LABEL_5:
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(&v39, v24);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v37, 1, 1, AssociatedTypeWitness);
  }
  sub_1BDE77688(&v39, v43);
  sub_1BDE77688(v43, &v39);
  v27 = swift_dynamicCast();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  if (v27)
  {
    v29(v17, 0, 1, AssociatedTypeWitness);
    v30 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v31 = v37;
    v30(v37, v17, AssociatedTypeWitness);
    v32 = v31;
    v33 = 0;
  }
  else
  {
    v29(v17, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v36);
    v32 = v37;
    v33 = 1;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v29)(v32, v33, 1, AssociatedTypeWitness);
}

uint64_t Capsule<>.ObservableDifference.subscript.getter(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*a1 + *MEMORY[0x1E0DEC880]);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v9 - v4;
  v6 = *((_QWORD *)v1 + 2);
  v9 = *v1;
  v10 = v6;
  Capsule<>.ObservableDifference.root.getter(v7);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Capsule<>.ObservableDifference.root.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  __int128 v11;
  unint64_t v12;
  _OWORD v13[2];

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v10[0] = v3;
  v10[1] = v4;
  sub_1BDDB6CA4(v3, v4);
  v7 = _s20ObservableDifferenceV19ReferenceDifferenceOMa(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v6);
  v8 = sub_1BDDBFF68();
  MEMORY[0x1C3B7C58C](&v11, v10, v5, &type metadata for CRKeyPath, v7, v8);
  sub_1BDDB796C(v3, v4);
  if (v12 >= 2)
  {
    if (v12 != 2)
    {
      sub_1BDE77688(&v11, v13);
      sub_1BDE77688(v13, &v11);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    }
    v7 = sub_1BE1B2EE8();
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(&v11, v7);
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

void Capsule<>.init(_:initClosure:)(void *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  Capsule<>.init(initClosure:)(a2, a3, a4, a5, a6);

}

void (*Capsule<>.init(initClosure:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>))(_QWORD *, _QWORD)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*result)(_QWORD *, _QWORD);
  int64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[6];

  v64 = a4;
  v61 = a2;
  v62 = a1;
  v65 = sub_1BE1B2EE8();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v60 = (char *)&v56 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1BE1B1F58();
  v12 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a5 = xmmword_1BE1B6B20;
  v16 = type metadata accessor for Capsule(0, a3, *(_QWORD *)(a4 + 8), v15);
  v17 = (char *)a5 + *(int *)(v16 + 36);
  v58 = a3;
  v59 = v17;
  v57 = *(void (**)(void))(*(_QWORD *)(a3 - 8) + 56);
  v57();
  v18 = *(int *)(v16 + 40);
  *(_QWORD *)((char *)a5 + v18) = 0;
  sub_1BDDCB1B4((uint64_t)v14);
  type metadata accessor for ReplicaState();
  v19 = swift_allocObject();
  v20 = v19 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v21 = type metadata accessor for Replica();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v14, v56);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v22((uint64_t)v11, 1, 1, v21);
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v11, v20);
  swift_endAccess();
  v23 = sub_1BDE75D50(v19);
  swift_release();
  v24 = v18;
  *(_QWORD *)((char *)a5 + v18) = v23;
  v25 = a5;
  sub_1BDD9C8AC(v16);
  v26 = v60;
  v62();
  swift_release();
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v57)(v26, 0, 1, v58);
  v27 = v65;
  (*(void (**)(char *, char *, int64_t))(v63 + 40))(v59, v26, v65);
  v28 = type metadata accessor for RetainVisitor();
  v29 = swift_allocObject();
  v30 = MEMORY[0x1E0DEE9D8];
  v31 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v32 = sub_1BDDB6CE8(v30);
  *(_QWORD *)(v29 + 16) = v31;
  *(_QWORD *)(v29 + 24) = v32;
  v68[3] = v28;
  v68[4] = &off_1E7755DD0;
  v68[0] = v29;
  v63 = v29;
  swift_retain();
  Optional<A>.visitReferences(_:)((uint64_t)v68, v27, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  swift_beginAccess();
  v33 = *(_QWORD *)(v29 + 16);
  v34 = *(_QWORD *)(v33 + 64);
  v64 = v33 + 64;
  v35 = 1 << *(_BYTE *)(v33 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & v34;
  v65 = (unint64_t)(v35 + 63) >> 6;
  result = (void (*)(_QWORD *, _QWORD))swift_bridgeObjectRetain();
  v39 = 0;
  if (v37)
    goto LABEL_24;
LABEL_6:
  v40 = v39 + 1;
  if (__OFADD__(v39, 1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v40 < v65)
  {
    v41 = *(_QWORD *)(v64 + 8 * v40);
    ++v39;
    if (v41)
      goto LABEL_19;
    v39 = v40 + 1;
    if (v40 + 1 < v65)
    {
      v41 = *(_QWORD *)(v64 + 8 * v39);
      if (v41)
        goto LABEL_19;
      v39 = v40 + 2;
      if (v40 + 2 < v65)
      {
        v41 = *(_QWORD *)(v64 + 8 * v39);
        if (v41)
          goto LABEL_19;
        v42 = v40 + 3;
        if (v42 < v65)
        {
          v41 = *(_QWORD *)(v64 + 8 * v42);
          if (v41)
          {
            v39 = v42;
LABEL_19:
            v37 = (v41 - 1) & v41;
            v43 = __clz(__rbit64(v41)) + (v39 << 6);
            while (*(_QWORD *)((char *)v25 + v24))
            {
              v44 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v43);
              v46 = *v44;
              v45 = v44[1];
              v47 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v43);
              swift_beginAccess();
              v66 = v46;
              v67 = v45;
              sub_1BDDB6CA4(v46, v45);
              sub_1BDDB6CA4(v46, v45);
              swift_retain();
              result = (void (*)(_QWORD *, _QWORD))sub_1BDDB7C54(v68, &v66);
              if (*(_QWORD *)(v48 + 16))
              {
                v49 = *(_QWORD *)(v48 + 8);
                v50 = __OFADD__(v49, v47);
                v51 = v49 + v47;
                if (v50)
                {
                  __break(1u);
                  goto LABEL_28;
                }
                *(_QWORD *)(v48 + 8) = v51;
                result(v68, 0);
                swift_endAccess();
                swift_release();
                sub_1BDDB796C(v46, v45);
                result = (void (*)(_QWORD *, _QWORD))sub_1BDDB796C(v66, v67);
                if (!v37)
                  goto LABEL_6;
              }
              else
              {
                result(v68, 0);
                sub_1BDDB796C(v66, v67);
                swift_endAccess();
                sub_1BDDB796C(v46, v45);
                result = (void (*)(_QWORD *, _QWORD))swift_release();
                if (!v37)
                  goto LABEL_6;
              }
LABEL_24:
              v52 = __clz(__rbit64(v37));
              v37 &= v37 - 1;
              v43 = v52 | (v39 << 6);
            }
            goto LABEL_30;
          }
          while (1)
          {
            v39 = v42 + 1;
            if (__OFADD__(v42, 1))
              break;
            if (v39 >= v65)
              goto LABEL_25;
            v41 = *(_QWORD *)(v64 + 8 * v39);
            ++v42;
            if (v41)
              goto LABEL_19;
          }
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
    }
  }
LABEL_25:
  result = (void (*)(_QWORD *, _QWORD))swift_release();
  v53 = *(_QWORD *)((char *)v25 + v24);
  if (v53)
  {
    v54 = *(_QWORD *)(v63 + 24);
    v55 = (_QWORD *)(v53 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
    swift_beginAccess();
    *v55 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1BDDB639C(1, 1);
    swift_release();
    return (void (*)(_QWORD *, _QWORD))swift_release();
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1BE176A88(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C8AC(v10);
  a4(a3);
  swift_release();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1BE176B3C()
{
  RefContainer.mutate<A>(_:)();
}

void RefContainer.mutate<A>(_:)()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t *sub_1BE176B90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Capsule.subscript.getter(a1, a4, a2, a3);
}

uint64_t *sub_1BE176BA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Capsule.subscript.getter(a1, a4, a2, a3);
}

uint64_t sub_1BE176BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Capsule.mutate<A>(_:)(a1, a2, a4, a3, a5);
}

uint64_t sub_1BE176BD8(void (*a1)(_QWORD *))
{
  return Capsule.Ref.mutate<A>(_:)(a1);
}

uint64_t Capsule.Ref.mutate<A>(_:)(void (*a1)(_QWORD *))
{
  _QWORD *v1;
  _QWORD v4[5];

  v4[3] = *v1;
  v4[4] = &protocol witness table for Capsule<A>.Ref;
  swift_retain();
  a1(v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

void Capsule<>.init(_:serializedData:)(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  Capsule<>.init(serializedData:allowedAppFormats:)(a2, a3, 0, a4, a5, a6);

}

uint64_t Capsule<>.init(serializedData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int16 v17;
  __int16 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v25 = a3;
  v26 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v23 - v14;
  v16 = (char *)&v23 + *(int *)(v13 + 64) - v14;
  sub_1BDDD1368((uint64_t)&v23 - v14, (uint64_t)v16, a1, a2);
  if (v5)
    return sub_1BDDB796C(a1, a2);
  v19 = v17;
  v24 = a5;
  *((_WORD *)v15 + 1) = v17;
  v20 = (uint64_t)&v12[*(int *)(v9 + 64)];
  v21 = *v15;
  *v12 = *v15;
  *((_WORD *)v12 + 1) = v17;
  sub_1BDD9C318((uint64_t)v16, v20, type metadata accessor for Proto_Document);
  v27 = v21;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v22 = qword_1ED6F8BA8;
  swift_retain();
  sub_1BDD975F4(&v27, v19, v20, 0, v22, v25, v26, v24);
  sub_1BDDB796C(a1, a2);
  return sub_1BDD86E30((uint64_t)v15, qword_1ED6F29D8);
}

uint64_t Capsule<>.serializedData()(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v4 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v7);
  sub_1BDD86E30((uint64_t)v7, qword_1ED6F3DD0);
  LOBYTE(v7[0]) = 1;
  v5 = Capsule<>.serializedData(_:version:allowedAppFormats:)((uint64_t)v4, v7, 0, a1, a2);

  return v5;
}

uint64_t Capsule<>.serializedData(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 1;
  return Capsule<>.serializedData(_:version:allowedAppFormats:)(a1, &v4, 0, a2, a3);
}

uint64_t Capsule<>.serializedData(_:version:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = *a2;
  return Capsule<>.serializedData(_:version:allowedAppFormats:)(a1, &v5, 0, a3, a4);
}

uint64_t sub_1BE176F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Capsule.merge<A>(_:)(a1, a2, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a3 - 8) + 16));
}

uint64_t sub_1BE176F60(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return Capsule<>.serializedData(_:version:)(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t sub_1BE176F78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Capsule<>.init(serializedData:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t sub_1BE176F94(char *a1, char *a2)
{
  return sub_1BE170298(*a1, *a2);
}

uint64_t sub_1BE176FA0()
{
  sub_1BE1B36F8();
  sub_1BE1B2834();
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

uint64_t sub_1BE177014()
{
  sub_1BE1B2834();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE177064()
{
  sub_1BE1B36F8();
  sub_1BE1B2834();
  swift_bridgeObjectRelease();
  return sub_1BE1B371C();
}

uint64_t sub_1BE1770D4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1BE1B3290();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1BE177130(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 25705;
  if (*v1)
    v2 = 0x73746E65746E6F63;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BE177164()
{
  _BYTE *v0;

  if (*v0)
    return 0x73746E65746E6F63;
  else
    return 25705;
}

uint64_t sub_1BE177194@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1BE1B3290();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1BE1771F4()
{
  sub_1BE17BC1C();
  return sub_1BE1B3794();
}

uint64_t sub_1BE17721C()
{
  sub_1BE17BC1C();
  return sub_1BE1B37A0();
}

uint64_t sub_1BE177244(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _QWORD v38[9];
  _BOOL4 v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t __s1;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[8];
  uint64_t v63;

  v4 = v3;
  v63 = *MEMORY[0x1E0C80C00];
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531598);
  v43 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PartiallyOrderedReferenceMap();
  v9 = MEMORY[0x1E0C80A78](v8);
  v47 = (uint64_t)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v38 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3764();
  v14 = type metadata accessor for Capsule(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16), v13);
  v15 = *(_QWORD *)(v4 + 8);
  if (v15 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_17;
  }
  v16 = v14;
  v2 = *(_QWORD *)v4;
  sub_1BDDB6CA4(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  v57 = v2;
  v58 = v15;
  sub_1BDDA7300(v16, (uint64_t)v12);
  sub_1BDDB6CA4(v2, v15);
  v17 = *(_QWORD *)&v12[*(int *)(v8 + 20)];
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_18;
  v48 = v12;
  v40 = v16;
  v46 = v4;
  sub_1BDDB6CA4(v2, v15);
  v18 = sub_1BDDB7F0C(v2, v15);
  if ((v19 & 1) == 0)
  {
LABEL_17:
    sub_1BDDB796C(v2, v15);
    v12 = v48;
LABEL_18:
    sub_1BDDB796C(v2, v15);
    sub_1BDD9C3E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    __break(1u);
  }
  v20 = (uint64_t *)(*(_QWORD *)(v17 + 56) + 48 * v18);
  v21 = *v20;
  v22 = v20[1];
  v24 = v20[2];
  v23 = v20[3];
  v26 = v20[4];
  v25 = v20[5];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v2, v15);
  sub_1BDDB796C(v2, v15);
  sub_1BDD9C3E0((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __s1 = v21;
  v51 = v22;
  v52 = v24;
  v53 = v23;
  v54 = v26;
  v55 = v25;
  v27 = v49;
  sub_1BE1782A0(&v57, &__s1, (uint64_t)v62);
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1BDDB796C(v57, v58);
  }
  else
  {
    v45 = v2;
    v44 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1BDDB796C(v57, v58);
    v28 = v47;
    sub_1BDDA7300(v40, v47);
    v29 = *(_QWORD *)(v28 + *(int *)(v8 + 20));
    v30 = -1 << *(_BYTE *)(v29 + 32);
    v31 = ~v30;
    v32 = -v30;
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v34 = v33 & *(_QWORD *)(v29 + 64);
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0(v28, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v57 = v29;
    v58 = v29 + 64;
    v59 = v31;
    v60 = 0;
    v61 = v34;
    sub_1BDDA7144((uint64_t)&__s1);
    if (v54)
    {
      v35 = v51;
      v38[5] = HIDWORD(v45);
      v36 = __OFSUB__(HIDWORD(v45), (_DWORD)v45);
      v39 = v36;
      v38[8] = HIDWORD(v45) - (int)v45;
      v47 = BYTE6(v44);
      v40 = v44 & 0x3FFFFFFFFFFFFFFFLL;
      v38[7] = (int)v45;
      v38[4] = v45 >> 32;
      v38[3] = (v45 >> 32) - (int)v45;
      v46 = v44 >> 62;
      v48 = (char *)v56;
      v49 = v55;
      sub_1BDDB6CA4(v45, v44);
      __asm { BR              X10 }
    }
    sub_1BDE27FD0();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
}

uint64_t sub_1BE1782A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531598);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v11 = a1[1];
  v14 = *a2;
  swift_beginAccess();
  __swift_mutable_project_boxed_opaque_existential_1(a3, *(_QWORD *)(a3 + 24));
  sub_1BE17BC1C();
  sub_1BE1B3374();
  swift_endAccess();
  v15 = v12;
  v16 = v11;
  v17 = 0;
  sub_1BE17BC60();
  sub_1BE1B32B4();
  if (!v3)
  {
    v15 = v14;
    v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5315B0);
    sub_1BE17BCA4();
    sub_1BE1B32B4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1BE178420(_QWORD *a1, uint64_t a2)
{
  return sub_1BE177244(a1, a2);
}

uint64_t Capsule<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(_QWORD *)(v11 + 16);
  v15 = type metadata accessor for _CapsuleCodable(0, v12, v13, v14);
  v21 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = &v22[-v16 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  v19 = type metadata accessor for Capsule(0, v12, *(_QWORD *)(a3 + 16), v18);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v10, v19);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3770();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
  MEMORY[0x1C3B7DF54](&unk_1BE1C8008, v15);
  sub_1BE1B34F4();
  (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v17, v15);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t sub_1BE1785B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return Capsule<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

double CapsuleMergeableDelta.init<A>(_:serializedData:in:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD v24[3];
  uint64_t v25;
  id v26;

  v26 = a1;
  v23 = a7;
  v13 = type metadata accessor for Capsule(0, a5, a6, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v22 - v15, a4, v13);
  CapsuleMergeableDelta.init<A>(serializedData:in:)(a2, a3, (uint64_t)v16, a5, a6, (uint64_t)v24);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a4, v13);
  if (!v7)
  {
    v18 = v25;
    result = *(double *)v24;
    v19 = v24[1];
    v20 = v24[2];
    v21 = v23;
    *v23 = v24[0];
    v21[1] = v19;
    v21[2] = v20;
    *((_QWORD *)v21 + 6) = v18;
  }
  return result;
}

double CapsuleMergeableDelta.init<A>(serializedData:in:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];
  uint64_t v28;

  type metadata accessor for CRDecoder(0);
  v13 = swift_allocObject();
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = v14;
  v15 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v15;
  *(_BYTE *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  v16 = v13 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v17 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v13 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v19 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)(v13 + 16) = 0;
  swift_release();
  *(_BYTE *)(v13 + 49) = 2;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v20 = qword_1ED6F8BA8;
  swift_retain();
  sub_1BDE0FD6C(a1, a2, a3, v20, a4, a5, v27);
  swift_release();
  swift_setDeallocating();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v13 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v13 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
  swift_deallocClassInstance();
  sub_1BDDB796C(a1, a2);
  v22 = type metadata accessor for Capsule(0, a4, a5, v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a3, v22);
  if (!v6)
  {
    v24 = v28;
    result = *(double *)v27;
    v25 = v27[1];
    v26 = v27[2];
    *(_OWORD *)a6 = v27[0];
    *(_OWORD *)(a6 + 16) = v25;
    *(_OWORD *)(a6 + 32) = v26;
    *(_QWORD *)(a6 + 48) = v24;
  }
  return result;
}

double CapsuleMergeableDelta.init<A>(serializedData:version:in:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v7;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD v29[3];
  uint64_t v30;
  _OWORD *v31;

  v31 = a7;
  v13 = *a3;
  type metadata accessor for CRDecoder(0);
  v14 = swift_allocObject();
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v15;
  v16 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  *(_BYTE *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = 0;
  v17 = v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v18 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v20 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)(v14 + 16) = 0;
  swift_release();
  *(_BYTE *)(v14 + 49) = v13;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v21 = qword_1ED6F8BA8;
  swift_retain();
  sub_1BDE0FD6C(a1, a2, a4, v21, a5, a6, v29);
  swift_release();
  swift_setDeallocating();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
  swift_deallocClassInstance();
  sub_1BDDB796C(a1, a2);
  v23 = type metadata accessor for Capsule(0, a5, a6, v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a4, v23);
  if (!v7)
  {
    v25 = v30;
    result = *(double *)v29;
    v26 = v29[1];
    v27 = v29[2];
    v28 = v31;
    *v31 = v29[0];
    v28[1] = v26;
    v28[2] = v27;
    *((_QWORD *)v28 + 6) = v25;
  }
  return result;
}

uint64_t CapsuleMergeableDelta.serializedData(context:version:)(void *a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;

  v3 = *a2;
  return CapsuleMergeableDelta.deltaSerializedData(_:version:)(a1, &v3);
}

uint64_t CapsuleMergeableDelta.deltaSerializedData(_:version:)(void *a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[5];
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[14];
  unsigned __int8 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v48 = a1;
  v65 = *MEMORY[0x1E0C80C00];
  v46 = type metadata accessor for Proto_Document(0);
  v4 = MEMORY[0x1E0C80A78](v46);
  v47 = (uint64_t)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v45 - v6;
  v50 = *a2;
  v9 = *v2;
  v8 = v2[1];
  v11 = v2[2];
  v10 = v2[3];
  v13 = v2[4];
  v12 = v2[5];
  v14 = v2[6];
  *(_QWORD *)&v59 = *v2;
  *((_QWORD *)&v59 + 1) = v8;
  v60 = v11;
  v61 = v10;
  v62 = v13;
  v63 = v12;
  v64 = v14;
  if (CapsuleMergeableDelta.needsToFinalizeTimestamps()())
  {
    *(_QWORD *)&v59 = v9;
    *((_QWORD *)&v59 + 1) = v8;
    v60 = v11;
    v61 = v10;
    v62 = v13;
    v63 = v12;
    v64 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v48;
    CapsuleMergeableDelta.finalizeTimestamps(_:)();
    type metadata accessor for CREncoder();
    v16 = swift_allocObject();
    v17 = MEMORY[0x1E0DEE9D8];
    v18 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v16 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v16 + 40) = v17;
    *(_QWORD *)(v16 + 48) = v17;
    *(_QWORD *)(v16 + 56) = v18;
    *(_QWORD *)(v16 + 64) = v17;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = 0;
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v17;
    *(_BYTE *)(v16 + 72) = v50;
    v19 = *((_QWORD *)&v59 + 1);
    v20 = v60;
    v21 = v61;
    v22 = v7;
    v24 = v62;
    v23 = v63;
    v25 = v64;
    v47 = v59;
    v53 = v59;
    v54 = v60;
    v55 = v61;
    v56 = v62;
    v57 = v63;
    v58 = v64;
    v26 = v15;
    v48 = v22;
    v27 = (uint64_t)v22;
    v28 = v16;
    v29 = v49;
    sub_1BDE18088(v26, (uint64_t)&v53, v27);
    if (!v29)
    {
      v45[0] = v25;
      v45[1] = v23;
      v45[2] = v24;
      v45[3] = v21;
      v45[4] = v20;
      v49 = v19;
      memset(v51, 0, sizeof(v51));
      v52 = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&v53 = *(_QWORD *)v51;
      *((_QWORD *)&v53 + 1) = *(unsigned int *)&v51[8] | ((unint64_t)v51[12] << 32) | ((unint64_t)v51[13] << 40) | ((unint64_t)v52 << 48);
      sub_1BE156F40();
      v37 = (uint64_t)v48;
      v42 = sub_1BE1B227C();
      v44 = v43;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v42, v44);
      v28 = v53;
      sub_1BDD9C3E0(v37, type metadata accessor for Proto_Document);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for CREncoder();
    v30 = swift_allocObject();
    v31 = MEMORY[0x1E0DEE9D8];
    v32 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v30 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v30 + 40) = v31;
    *(_QWORD *)(v30 + 48) = v31;
    *(_QWORD *)(v30 + 56) = v32;
    *(_QWORD *)(v30 + 64) = v31;
    *(_QWORD *)(v30 + 80) = 0;
    *(_QWORD *)(v30 + 88) = 0;
    v33 = v48;
    *(_QWORD *)(v30 + 16) = v48;
    *(_QWORD *)(v30 + 24) = v31;
    *(_BYTE *)(v30 + 72) = v50;
    *(_QWORD *)&v59 = v9;
    *((_QWORD *)&v59 + 1) = v8;
    v60 = v11;
    v61 = v10;
    v62 = v13;
    v63 = v12;
    v64 = v14;
    v34 = v33;
    v35 = v47;
    v28 = v30;
    v36 = v49;
    sub_1BDE18088(v34, (uint64_t)&v59, v47);
    if (!v36)
    {
      *(_QWORD *)((char *)&v53 + 6) = 0;
      *(_QWORD *)&v53 = 0;
      BYTE14(v53) = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&v59 = v53;
      *((_QWORD *)&v59 + 1) = DWORD2(v53) | ((unint64_t)BYTE12(v53) << 32) | ((unint64_t)BYTE13(v53) << 40) | ((unint64_t)BYTE14(v53) << 48);
      sub_1BE156F40();
      v39 = sub_1BE1B227C();
      v41 = v40;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v39, v41);
      v28 = v59;
      sub_1BDD9C3E0(v35, type metadata accessor for Proto_Document);
    }
    swift_release();
  }
  return v28;
}

Swift::Bool __swiftcall CapsuleMergeableDelta.needsToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Bool result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::Bool v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;

  v1 = *(_QWORD *)(v0 + 32);
  v35 = *(_QWORD *)(v0 + 40);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v36 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 24 * v9 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BDDB6CA4(v11, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v11, v12);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v14)
    {
      v18 = 1;
LABEL_52:
      swift_release();
      swift_bridgeObjectRelease();
      return v18;
    }
  }
  v15 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v15 >= v36)
    goto LABEL_26;
  v16 = *(_QWORD *)(v2 + 8 * v15);
  ++v7;
  if (v16)
    goto LABEL_24;
  v7 = v15 + 1;
  if (v15 + 1 >= v36)
    goto LABEL_26;
  v16 = *(_QWORD *)(v2 + 8 * v7);
  if (v16)
    goto LABEL_24;
  v7 = v15 + 2;
  if (v15 + 2 >= v36)
    goto LABEL_26;
  v16 = *(_QWORD *)(v2 + 8 * v7);
  if (v16)
    goto LABEL_24;
  v7 = v15 + 3;
  if (v15 + 3 >= v36)
    goto LABEL_26;
  v16 = *(_QWORD *)(v2 + 8 * v7);
  if (v16)
    goto LABEL_24;
  v7 = v15 + 4;
  if (v15 + 4 >= v36)
    goto LABEL_26;
  v16 = *(_QWORD *)(v2 + 8 * v7);
  if (v16)
  {
LABEL_24:
    v5 = (v16 - 1) & v16;
    v9 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_5;
  }
  v17 = v15 + 5;
  if (v17 < v36)
  {
    v16 = *(_QWORD *)(v2 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        v7 = v17 + 1;
        if (__OFADD__(v17, 1))
          break;
        if (v7 >= v36)
          goto LABEL_26;
        v16 = *(_QWORD *)(v2 + 8 * v7);
        ++v17;
        if (v16)
          goto LABEL_24;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v7 = v17;
    goto LABEL_24;
  }
LABEL_26:
  swift_release();
  swift_bridgeObjectRelease();
  v19 = v35 + 64;
  v20 = 1 << *(_BYTE *)(v35 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(v35 + 64);
  v23 = (unint64_t)(v20 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v24 = 0;
  while (v22)
  {
    v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    v26 = v25 | (v24 << 6);
LABEL_30:
    v27 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v26);
    v28 = *v27;
    v29 = v27[1];
    v30 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 24 * v26 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BDDB6CA4(v28, v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = *(_QWORD *)(v30 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v28, v29);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v31)
    {
      v18 = 1;
      goto LABEL_52;
    }
  }
  v32 = v24 + 1;
  if (__OFADD__(v24, 1))
    goto LABEL_54;
  if (v32 >= v23)
  {
LABEL_51:
    v18 = 0;
    goto LABEL_52;
  }
  v33 = *(_QWORD *)(v19 + 8 * v32);
  ++v24;
  if (v33)
    goto LABEL_49;
  v24 = v32 + 1;
  if (v32 + 1 >= v23)
    goto LABEL_51;
  v33 = *(_QWORD *)(v19 + 8 * v24);
  if (v33)
    goto LABEL_49;
  v24 = v32 + 2;
  if (v32 + 2 >= v23)
    goto LABEL_51;
  v33 = *(_QWORD *)(v19 + 8 * v24);
  if (v33)
    goto LABEL_49;
  v24 = v32 + 3;
  if (v32 + 3 >= v23)
    goto LABEL_51;
  v33 = *(_QWORD *)(v19 + 8 * v24);
  if (v33)
    goto LABEL_49;
  v24 = v32 + 4;
  if (v32 + 4 >= v23)
    goto LABEL_51;
  v33 = *(_QWORD *)(v19 + 8 * v24);
  if (v33)
  {
LABEL_49:
    v22 = (v33 - 1) & v33;
    v26 = __clz(__rbit64(v33)) + (v24 << 6);
    goto LABEL_30;
  }
  v34 = v32 + 5;
  if (v34 >= v23)
    goto LABEL_51;
  v33 = *(_QWORD *)(v19 + 8 * v34);
  if (v33)
  {
    v24 = v34;
    goto LABEL_49;
  }
  while (1)
  {
    v24 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v24 >= v23)
      goto LABEL_51;
    v33 = *(_QWORD *)(v19 + 8 * v24);
    ++v34;
    if (v33)
      goto LABEL_49;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t CapsuleMergeableDelta.finalizeTimestamps(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9E0];
  v3 = *(_QWORD *)(v0 + 8);
  v100 = MEMORY[0x1E0DEE9E0];
  v101 = v3;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_1BDDAF714(v4);
  sub_1BDDAF714(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0 + 32);
  v93 = v5 + 64;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v5 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = MEMORY[0x1E0DEE9E0];
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v14 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v93 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_24;
      v15 = *(_QWORD *)(v93 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_24;
        v15 = *(_QWORD *)(v93 + 8 * v10);
        if (!v15)
        {
          v16 = v14 + 3;
          if (v16 >= v9)
            goto LABEL_24;
          v15 = *(_QWORD *)(v93 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v10 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_121;
              if (v10 >= v9)
                break;
              v15 = *(_QWORD *)(v93 + 8 * v10);
              ++v16;
              if (v15)
                goto LABEL_21;
            }
LABEL_24:
            swift_release();
            v20 = *(_QWORD *)(v1 + 40);
            v94 = v20 + 64;
            v21 = 1 << *(_BYTE *)(v20 + 32);
            v22 = -1;
            if (v21 < 64)
              v22 = ~(-1 << v21);
            v23 = v22 & *(_QWORD *)(v20 + 64);
            v24 = (unint64_t)(v21 + 63) >> 6;
            swift_bridgeObjectRetain();
            v25 = 0;
            v26 = MEMORY[0x1E0DEE9E0];
            while (1)
            {
              if (v23)
              {
                v28 = __clz(__rbit64(v23));
                v23 &= v23 - 1;
                v29 = v28 | (v25 << 6);
              }
              else
              {
                v30 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_120;
                if (v30 >= v24)
                  goto LABEL_47;
                v31 = *(_QWORD *)(v94 + 8 * v30);
                ++v25;
                if (!v31)
                {
                  v25 = v30 + 1;
                  if (v30 + 1 >= v24)
                    goto LABEL_47;
                  v31 = *(_QWORD *)(v94 + 8 * v25);
                  if (!v31)
                  {
                    v25 = v30 + 2;
                    if (v30 + 2 >= v24)
                      goto LABEL_47;
                    v31 = *(_QWORD *)(v94 + 8 * v25);
                    if (!v31)
                    {
                      v32 = v30 + 3;
                      if (v32 >= v24)
                        goto LABEL_47;
                      v31 = *(_QWORD *)(v94 + 8 * v32);
                      if (!v31)
                      {
                        while (1)
                        {
                          v25 = v32 + 1;
                          if (__OFADD__(v32, 1))
                            goto LABEL_122;
                          if (v25 >= v24)
                            break;
                          v31 = *(_QWORD *)(v94 + 8 * v25);
                          ++v32;
                          if (v31)
                            goto LABEL_44;
                        }
LABEL_47:
                        swift_release();
                        v35 = qword_1ED6F4510;
                        swift_bridgeObjectRetain();
                        v36 = swift_bridgeObjectRetain();
                        if (v35 == -1)
                          goto LABEL_48;
                        goto LABEL_123;
                      }
                      v25 = v32;
                    }
                  }
                }
LABEL_44:
                v23 = (v31 - 1) & v31;
                v29 = __clz(__rbit64(v31)) + (v25 << 6);
              }
              v33 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 24 * v29 + 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v34 = *(_QWORD *)(v33 + 16);
              swift_retain();
              if (v34)
              {
                v27 = swift_bridgeObjectRetain();
                sub_1BDDAF714(v27);
                sub_1BDDAF714(v26);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_release();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
          v10 = v16;
        }
      }
    }
LABEL_21:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_22:
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 24 * v13 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = *(_QWORD *)(v17 + 16);
    swift_retain();
    if (v18)
    {
      v19 = swift_bridgeObjectRetain();
      sub_1BDDAF714(v19);
      sub_1BDDAF714(v11);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  v36 = swift_once();
LABEL_48:
  MEMORY[0x1E0C80A78](v36);
  swift_retain();
  sub_1BE1B2E40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v92 = BYTE8(v98);
  v95 = v98;
  v96 = v99;
  v37 = *(_QWORD *)(v1 + 32);
  v88 = v37 + 64;
  v38 = 1 << *(_BYTE *)(v37 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & *(_QWORD *)(v37 + 64);
  v90 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain();
  v41 = 0;
  if (v40)
  {
LABEL_51:
    v42 = __clz(__rbit64(v40));
    v40 &= v40 - 1;
    v43 = v42 | (v41 << 6);
    goto LABEL_70;
  }
  while (1)
  {
    v44 = v41 + 1;
    if (__OFADD__(v41, 1))
      goto LABEL_117;
    if (v44 >= v90)
      goto LABEL_81;
    v45 = *(_QWORD *)(v88 + 8 * v44);
    ++v41;
    if (!v45)
    {
      v41 = v44 + 1;
      if (v44 + 1 >= v90)
        goto LABEL_81;
      v45 = *(_QWORD *)(v88 + 8 * v41);
      if (!v45)
      {
        v41 = v44 + 2;
        if (v44 + 2 >= v90)
          goto LABEL_81;
        v45 = *(_QWORD *)(v88 + 8 * v41);
        if (!v45)
        {
          v41 = v44 + 3;
          if (v44 + 3 >= v90)
            goto LABEL_81;
          v45 = *(_QWORD *)(v88 + 8 * v41);
          if (!v45)
          {
            v41 = v44 + 4;
            if (v44 + 4 >= v90)
              goto LABEL_81;
            v45 = *(_QWORD *)(v88 + 8 * v41);
            if (!v45)
              break;
          }
        }
      }
    }
LABEL_69:
    v40 = (v45 - 1) & v45;
    v43 = __clz(__rbit64(v45)) + (v41 << 6);
LABEL_70:
    v47 = (uint64_t *)(*(_QWORD *)(v37 + 48) + 16 * v43);
    v49 = *v47;
    v48 = v47[1];
    sub_1BDDB6CA4(*v47, v48);
    sub_1BDDB6CA4(v49, v48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = *(_QWORD *)(v1 + 32);
    v51 = v97[0];
    *(_QWORD *)(v1 + 32) = 0x8000000000000000;
    sub_1BDDB6CA4(v49, v48);
    v53 = sub_1BDDB7F0C(v49, v48);
    v54 = *(_QWORD *)(v51 + 16);
    v55 = (v52 & 1) == 0;
    v56 = v54 + v55;
    if (__OFADD__(v54, v55))
    {
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    v57 = v52;
    if (*(_QWORD *)(v51 + 24) >= v56)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v52 & 1) == 0)
          goto LABEL_80;
      }
      else
      {
        sub_1BDE65FD0();
        if ((v57 & 1) == 0)
          goto LABEL_80;
      }
    }
    else
    {
      sub_1BDE62340(v56, isUniquelyReferenced_nonNull_native);
      v58 = sub_1BDDB7F0C(v49, v48);
      if ((v57 & 1) != (v59 & 1))
        goto LABEL_126;
      v53 = v58;
      if ((v57 & 1) == 0)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        swift_release();
        v62 = *(_QWORD *)(v1 + 40);
        v89 = v62 + 64;
        v63 = 1 << *(_BYTE *)(v62 + 32);
        v64 = -1;
        if (v63 < 64)
          v64 = ~(-1 << v63);
        v65 = v64 & *(_QWORD *)(v62 + 64);
        v91 = (unint64_t)(v63 + 63) >> 6;
        swift_bridgeObjectRetain();
        v66 = 0;
        if (v65)
        {
LABEL_84:
          v67 = __clz(__rbit64(v65));
          v65 &= v65 - 1;
          v68 = v67 | (v66 << 6);
          goto LABEL_103;
        }
        while (1)
        {
          v69 = v66 + 1;
          if (__OFADD__(v66, 1))
            goto LABEL_119;
          if (v69 >= v91)
            goto LABEL_114;
          v70 = *(_QWORD *)(v89 + 8 * v69);
          ++v66;
          if (!v70)
          {
            v66 = v69 + 1;
            if (v69 + 1 >= v91)
              goto LABEL_114;
            v70 = *(_QWORD *)(v89 + 8 * v66);
            if (!v70)
            {
              v66 = v69 + 2;
              if (v69 + 2 >= v91)
                goto LABEL_114;
              v70 = *(_QWORD *)(v89 + 8 * v66);
              if (!v70)
              {
                v66 = v69 + 3;
                if (v69 + 3 >= v91)
                  goto LABEL_114;
                v70 = *(_QWORD *)(v89 + 8 * v66);
                if (!v70)
                {
                  v66 = v69 + 4;
                  if (v69 + 4 >= v91)
                    goto LABEL_114;
                  v70 = *(_QWORD *)(v89 + 8 * v66);
                  if (!v70)
                  {
                    v71 = v69 + 5;
                    if (v71 >= v91)
                      goto LABEL_114;
                    v70 = *(_QWORD *)(v89 + 8 * v71);
                    if (!v70)
                    {
                      while (1)
                      {
                        v66 = v71 + 1;
                        if (__OFADD__(v71, 1))
                          goto LABEL_125;
                        if (v66 >= v91)
                          goto LABEL_114;
                        v70 = *(_QWORD *)(v89 + 8 * v66);
                        ++v71;
                        if (v70)
                          goto LABEL_102;
                      }
                    }
                    v66 = v71;
                  }
                }
              }
            }
          }
LABEL_102:
          v65 = (v70 - 1) & v70;
          v68 = __clz(__rbit64(v70)) + (v66 << 6);
LABEL_103:
          v72 = (uint64_t *)(*(_QWORD *)(v62 + 48) + 16 * v68);
          v73 = *v72;
          v74 = v72[1];
          sub_1BDDB6CA4(*v72, v74);
          sub_1BDDB6CA4(v73, v74);
          v75 = swift_isUniquelyReferenced_nonNull_native();
          v97[0] = *(_QWORD *)(v1 + 40);
          v76 = v97[0];
          *(_QWORD *)(v1 + 40) = 0x8000000000000000;
          sub_1BDDB6CA4(v73, v74);
          v78 = sub_1BDDB7F0C(v73, v74);
          v79 = *(_QWORD *)(v76 + 16);
          v80 = (v77 & 1) == 0;
          v81 = v79 + v80;
          if (__OFADD__(v79, v80))
            goto LABEL_116;
          v82 = v77;
          if (*(_QWORD *)(v76 + 24) >= v81)
          {
            if ((v75 & 1) != 0)
            {
              if ((v77 & 1) == 0)
                goto LABEL_113;
            }
            else
            {
              sub_1BDE65FC4();
              if ((v82 & 1) == 0)
                goto LABEL_113;
            }
          }
          else
          {
            sub_1BDE62334(v81, v75);
            v83 = sub_1BDDB7F0C(v73, v74);
            if ((v82 & 1) != (v84 & 1))
              goto LABEL_126;
            v78 = v83;
            if ((v82 & 1) == 0)
            {
LABEL_113:
              __break(1u);
LABEL_114:
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1BDDB2D90(v95, v92, v96);
              sub_1BDDB2D90(v95, v92, v96);
              return swift_bridgeObjectRelease();
            }
          }
          v85 = *(_QWORD *)(v97[0] + 56) + 24 * v78;
          v86 = *(_QWORD *)(v85 + 16);
          v98 = *(_OWORD *)v85;
          v99 = v86;
          sub_1BDDB2D90(v95, v92, v96);
          sub_1BDE67ECC((uint64_t *)&v98, 1, v97, v78, v73, v74);
          sub_1BE17A6CC(v98, *((uint64_t *)&v98 + 1), v99, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
          sub_1BDDB796C(v73, v74);
          *(_QWORD *)(v1 + 40) = v97[0];
          sub_1BDDB796C(v73, v74);
          sub_1BDDB796C(v73, v74);
          if (v65)
            goto LABEL_84;
        }
      }
    }
    v60 = *(_QWORD *)(v97[0] + 56) + 24 * v53;
    v61 = *(_QWORD *)(v60 + 16);
    v98 = *(_OWORD *)v60;
    v99 = v61;
    sub_1BDDB2D90(v95, v92, v96);
    sub_1BDE67ECC((uint64_t *)&v98, 1, v97, v53, v49, v48);
    sub_1BE17A6CC(v98, *((uint64_t *)&v98 + 1), v99, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
    sub_1BDDB796C(v49, v48);
    *(_QWORD *)(v1 + 32) = v97[0];
    sub_1BDDB796C(v49, v48);
    sub_1BDDB796C(v49, v48);
    if (v40)
      goto LABEL_51;
  }
  v46 = v44 + 5;
  if (v46 >= v90)
    goto LABEL_81;
  v45 = *(_QWORD *)(v88 + 8 * v46);
  if (v45)
  {
    v41 = v46;
    goto LABEL_69;
  }
  while (1)
  {
    v41 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v41 >= v90)
      goto LABEL_81;
    v45 = *(_QWORD *)(v88 + 8 * v41);
    ++v46;
    if (v45)
      goto LABEL_69;
  }
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t CapsuleMergeableDelta.visitReferences(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v17 >= v9)
      goto LABEL_21;
    v18 = *(_QWORD *)(v5 + 8 * v17);
    ++v11;
    if (!v18)
    {
      v11 = v17 + 1;
      if (v17 + 1 >= v9)
        goto LABEL_21;
      v18 = *(_QWORD *)(v5 + 8 * v11);
      if (!v18)
      {
        v11 = v17 + 2;
        if (v17 + 2 >= v9)
          goto LABEL_21;
        v18 = *(_QWORD *)(v5 + 8 * v11);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v8 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_5:
    v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 24 * v13 + 16);
    v14 = a1[3];
    v15 = a1[4];
    v16 = __swift_project_boxed_opaque_existential_1(a1, v14);
    result = sub_1BE1914E8((uint64_t)v16, (uint64_t)&v34, v14, v15);
  }
  v19 = v17 + 3;
  if (v19 >= v9)
  {
LABEL_21:
    swift_release();
    v20 = v3 + 64;
    v21 = 1 << *(_BYTE *)(v3 + 32);
    v22 = -1;
    if (v21 < 64)
      v22 = ~(-1 << v21);
    v23 = v22 & *(_QWORD *)(v3 + 64);
    v24 = (unint64_t)(v21 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v25 = 0;
    while (1)
    {
      if (v23)
      {
        v26 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        v27 = v26 | (v25 << 6);
      }
      else
      {
        v31 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_43;
        if (v31 >= v24)
          return swift_release();
        v32 = *(_QWORD *)(v20 + 8 * v31);
        ++v25;
        if (!v32)
        {
          v25 = v31 + 1;
          if (v31 + 1 >= v24)
            return swift_release();
          v32 = *(_QWORD *)(v20 + 8 * v25);
          if (!v32)
          {
            v25 = v31 + 2;
            if (v31 + 2 >= v24)
              return swift_release();
            v32 = *(_QWORD *)(v20 + 8 * v25);
            if (!v32)
            {
              v33 = v31 + 3;
              if (v33 >= v24)
                return swift_release();
              v32 = *(_QWORD *)(v20 + 8 * v33);
              if (!v32)
              {
                while (1)
                {
                  v25 = v33 + 1;
                  if (__OFADD__(v33, 1))
                    goto LABEL_45;
                  if (v25 >= v24)
                    return swift_release();
                  v32 = *(_QWORD *)(v20 + 8 * v25);
                  ++v33;
                  if (v32)
                    goto LABEL_40;
                }
              }
              v25 = v33;
            }
          }
        }
LABEL_40:
        v23 = (v32 - 1) & v32;
        v27 = __clz(__rbit64(v32)) + (v25 << 6);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v27 + 16);
      v28 = a1[3];
      v29 = a1[4];
      v30 = __swift_project_boxed_opaque_existential_1(a1, v28);
      result = sub_1BE191478((uint64_t)v30, (uint64_t)&v34, v28, v29);
    }
  }
  v18 = *(_QWORD *)(v5 + 8 * v19);
  if (v18)
  {
    v11 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v9)
      goto LABEL_21;
    v18 = *(_QWORD *)(v5 + 8 * v11);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t _s20ObservableDifferenceV19ReferenceDifferenceOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s20ObservableDifferenceV19ReferenceDifferenceOMn);
}

uint64_t sub_1BE17A3A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + *(int *)(result + 40));
  if (v2)
  {
    v3 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets;
    swift_beginAccess();
    return *(_QWORD *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE17A3F4()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for AssetWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1BE17A424()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  if (*(_QWORD *)(v0 + 104))
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BE17A488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 120);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1BDE28004;
  *(_QWORD *)(v4 + 56) = v3;
  *(_OWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 24) = v0 + 40;
  *(_QWORD *)(v4 + 32) = v0 + 80;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch();
}

uint64_t sub_1BE17A514()
{
  uint64_t v0;

  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE17A540(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE172BD0(a1, *(void (**)(_QWORD *))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t _s27CapsuleReferenceDifferencerCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s27CapsuleReferenceDifferencerCMn);
}

char *sub_1BE17A568(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v7 = *a1;
  v8 = a1[1];
  v9 = &v4[*(_QWORD *)(*(_QWORD *)v4 + 104)];
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v11 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v12 = type metadata accessor for Capsule(0, v10, *(_QWORD *)(v11 + 16), a4);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v9, a2, v12);
  v13(&v4[*(_QWORD *)(*(_QWORD *)v4 + 112)], a3, v12);
  _s20ObservableDifferenceV19ReferenceDifferenceOMa(255, v10, v11, v14);
  swift_getTupleTypeMetadata2();
  sub_1BE1B29D8();
  sub_1BDDBFF68();
  v15 = sub_1BE1B25DC();
  *((_QWORD *)v4 + 2) = v7;
  *((_QWORD *)v4 + 3) = v8;
  *((_QWORD *)v4 + 4) = v15;
  return v4;
}

char *sub_1BE17A668(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;

  _s27CapsuleReferenceDifferencerCMa(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  swift_allocObject();
  return sub_1BE17A568(a1, a2, a3, v8);
}

uint64_t type metadata accessor for _CapsuleCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CapsuleCodable);
}

uint64_t sub_1BE17A6CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a4(a3);
  }
  return result;
}

ValueMetadata *type metadata accessor for CapsuleUndoAction()
{
  return &type metadata for CapsuleUndoAction;
}

uint64_t sub_1BE17A738()
{
  return type metadata accessor for CapsuleRef();
}

_OWORD *sub_1BE17A744(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  *(_QWORD *)(((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_1BE17A830(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = a1[1];
  if ((v6 & 0x3000000000000000) != 0)
    goto LABEL_4;
  v7 = a2[1];
  if ((v7 & 0x3000000000000000) != 0)
  {
    sub_1BDDB796C(*a1, v6);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_5;
  }
  v19 = *a1;
  *a1 = *a2;
  a1[1] = v7;
  sub_1BDDB796C(v19, v6);
LABEL_5:
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)a1 + v10 + 16) & ~v10);
  v12 = (void *)(((unint64_t)a2 + v10 + 16) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_14;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_14:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  *(_QWORD *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t method lookup function for Capsule.Ref()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for Capsule.UndoAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Capsule.UndoAction);
}

uint64_t sub_1BE17A9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Capsule(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BE17AA48(uint64_t a1)
{
  sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1BE17AA74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1BE17AAC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1BDDB796C(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_1BE17AB20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1BDDB796C(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Capsule<>.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Capsule<>.ObservableDifference);
}

uint64_t dispatch thunk of RefContainer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of RefContainer.mutate<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of MutableRefContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of MutableRefContainer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of MutableRefContainer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t destroy for CapsuleMergeableDelta()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CapsuleMergeableDelta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CapsuleMergeableDelta(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CapsuleMergeableDelta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CapsuleMergeableDelta(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CapsuleMergeableDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CapsuleMergeableDelta()
{
  return &type metadata for CapsuleMergeableDelta;
}

_QWORD *initializeWithCopy for CapsuleReference(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CapsuleReference(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CapsuleReference(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CapsuleReference(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CapsuleReference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BE17B0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Capsule(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BE17B11C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = *(_QWORD *)(v6 + 64) + 1;
  v10 = v7 & 0x100000;
  if (v8 > 7 || v10 != 0 || ((v9 + 7 + ((v8 + 16) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    v14 = ~v8;
    v15 = a2[1];
    if ((v15 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v16 = *a2;
      sub_1BDDB6CA4(*a2, a2[1]);
      *v4 = v16;
      v4[1] = v15;
    }
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a2 + v8 + 16) & v14, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v8 + 16) & v14), (const void *)(((unint64_t)a2 + v8 + 16) & v14), v9);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v8 + 16) & v14, ((unint64_t)a2 + v8 + 16) & v14, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)v4 + v8 + 16) & v14, 0, 1, v5);
    }
    *(_QWORD *)((v9 + 7 + (((unint64_t)v4 + v8 + 16) & v14)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + 7 + (((unint64_t)a2 + v8 + 16) & v14)) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

_OWORD *sub_1BE17B280(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  *(_QWORD *)(((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_1BE17B374(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = a1[1];
  v7 = a2[1];
  if ((v6 & 0x3000000000000000) != 0)
    goto LABEL_4;
  if ((v7 & 0x3000000000000000) != 0)
  {
    sub_1BDDB796C(*a1, v6);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_5;
  }
  v19 = *a1;
  *a1 = *a2;
  a1[1] = v7;
  sub_1BDDB796C(v19, v6);
LABEL_5:
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)a1 + v10 + 16) & ~v10);
  v12 = (void *)(((unint64_t)a2 + v10 + 16) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v14 = v13(v11, 1, v8);
  v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_14;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_14:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  *(_QWORD *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1BE17B4F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2)
  {
    if (((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  v15 = (a1 + v9 + 16) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v17 = *(_QWORD *)((v10 + v15) & 0xFFFFFFFFFFFFF8);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((v17 + 1) >= 2)
      return v17;
    else
      return 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

void sub_1BE17B64C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_1BE17B758@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  *(_BYTE *)(v15 + v16) = 0;
  if (a1)
  {
    v17 = (void *)((v15 + v14 + 16) & v10);
    if (v11 < 0x7FFFFFFE)
    {
      v19 = (_QWORD *)(((unint64_t)v17 + v13) & 0xFFFFFFFFFFFFFFF8);
      if (a1 > 0x7FFFFFFE)
      {
        *v19 = 0;
        *(_DWORD *)v19 = a1 - 0x7FFFFFFF;
      }
      else
      {
        *v19 = a1;
      }
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v18 = a2;
      else
        v18 = 4;
      bzero(v17, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_1BE17B868()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1BE17B878()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1BE17B880()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_1BE17B88C(uint64_t result)
{
  if (*(_QWORD *)(result + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t sub_1BE17B8B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t sub_1BE17B900(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1BE17BAE8(uint64_t a1, _OWORD *a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t sub_1BE17BB2C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t sub_1BE17BB80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t sub_1BE17BBE0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1BE17BBF8(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[3] = (a2 - 1);
  }
  return result;
}

unint64_t sub_1BE17BC1C()
{
  unint64_t result;

  result = qword_1EF5315A0;
  if (!qword_1EF5315A0)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C8138, &type metadata for CRReferenceCodingKey);
    atomic_store(result, (unint64_t *)&qword_1EF5315A0);
  }
  return result;
}

unint64_t sub_1BE17BC60()
{
  unint64_t result;

  result = qword_1EF5315A8;
  if (!qword_1EF5315A8)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRKeyPath, &type metadata for CRKeyPath);
    atomic_store(result, (unint64_t *)&qword_1EF5315A8);
  }
  return result;
}

unint64_t sub_1BE17BCA4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF5315B8;
  if (!qword_1EF5315B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF5315B0);
    v2 = sub_1BDFDDDF4();
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, &qword_1EF5315B8);
  }
  return result;
}

uint64_t sub_1BE17BD08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_1BDE281A0;
  return sub_1BE172674(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_1BE17BD98()
{
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for CRReferenceCodingKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BE17BDF4 + 4 * byte_1BE1C7D0B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BE17BE28 + 4 * byte_1BE1C7D06[v4]))();
}

uint64_t sub_1BE17BE28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE17BE30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE17BE38);
  return result;
}

uint64_t sub_1BE17BE44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE17BE4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BE17BE50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE17BE58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRReferenceCodingKey()
{
  return &type metadata for CRReferenceCodingKey;
}

unint64_t sub_1BE17BE78()
{
  unint64_t result;

  result = qword_1EF5315E8;
  if (!qword_1EF5315E8)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C8110, &type metadata for CRReferenceCodingKey);
    atomic_store(result, (unint64_t *)&qword_1EF5315E8);
  }
  return result;
}

unint64_t sub_1BE17BEC0()
{
  unint64_t result;

  result = qword_1EF5315F0;
  if (!qword_1EF5315F0)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C8048, &type metadata for CRReferenceCodingKey);
    atomic_store(result, (unint64_t *)&qword_1EF5315F0);
  }
  return result;
}

unint64_t sub_1BE17BF08()
{
  unint64_t result;

  result = qword_1EF5315F8[0];
  if (!qword_1EF5315F8[0])
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C8070, &type metadata for CRReferenceCodingKey);
    atomic_store(result, qword_1EF5315F8);
  }
  return result;
}

uint64_t sub_1BE17BF50()
{
  return sub_1BDFC5D74();
}

uint64_t sub_1BE17BF64()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1BE1B1F58();
  __swift_allocate_value_buffer(v3, qword_1EF5497E8);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1EF5497E8);
  sub_1BE1B1EEC();
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_1BE17C044@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  uint64_t *v22;
  uint64_t v23;

  v22 = a2;
  v23 = sub_1BE1B1F58();
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v21 - v10;
  v12 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  swift_beginAccess();
  sub_1BDDBE65C(v12, (uint64_t)v11);
  v13 = type metadata accessor for Replica();
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v9, 1, 1, v13);
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v9, v12);
  swift_endAccess();
  v15 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v23);
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter);
  sub_1BDDBE65C((uint64_t)v11, (uint64_t)v9);
  v18 = swift_allocObject();
  v19 = v18 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v14((char *)(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica), 1, 1, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v21, v23);
  *(_QWORD *)(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = v16;
  *(_QWORD *)(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = v17;
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v9, v19);
  swift_endAccess();
  result = sub_1BDDACC1C((uint64_t)v11);
  *v22 = v18;
  return result;
}

uint64_t sub_1BE17C294()
{
  return type metadata accessor for ReplicaState();
}

uint64_t sub_1BE17C29C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1BE17C3DC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1BE17C584()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BE17C58C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for TreeNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TreeNode);
}

uint64_t sub_1BE17C5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v11 - v8, a1, v6);
  sub_1BE17C660((uint64_t)v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t sub_1BE17C660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, a2) == 1)
  {
    v10 = sub_1BE1B2EE8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, 1, 1, a2);
  }
  else
  {
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    v12(v9, a1, a2);
    v12(a3, (uint64_t)v9, a2);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a3, 0, 1, a2);
  }
}

uint64_t sub_1BE17C764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v5, v7);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
}

uint64_t sub_1BE17C830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  sub_1BE17C660(a1, *(_QWORD *)(a2 + 16), a3);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1, a2);
}

uint64_t sub_1BE17C870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x1C3B7DF54](&unk_1BE1C81E8, a3);
  v4 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEE998], v4, &v6);
  return sub_1BE1B3524() & 1;
}

uint64_t sub_1BE17C900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1C3B7DF54](&unk_1BE1C81E8, a1);
  v2 = sub_1BE1B2EE8();
  v4 = *(_QWORD *)(a1 + 32);
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEE990], v2, &v4);
  return sub_1BE1B2948();
}

uint64_t sub_1BE17C980(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1C3B7DF54](&unk_1BE1C81E8);
  v3 = sub_1BE1B2EE8();
  v5 = *(_QWORD *)(a2 + 32);
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEE990], v3, &v5);
  return sub_1BE1B2960();
}

uint64_t sub_1BE17CA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1C3B7DF54](&unk_1BE1C81E8);
  v3 = sub_1BE1B2EE8();
  v5 = *(_QWORD *)(a2 + 32);
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEE990], v3, &v5);
  return sub_1BE1B2954();
}

uint64_t sub_1BE17CA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - v8;
  sub_1BE17C764(a2, (uint64_t)&v11 - v8);
  Optional<A>.encode(to:)(a1, v6, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BE17CB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE17CA98(a1, a2, *(_QWORD *)(a3 - 8));
}

void sub_1BE17CB68()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t AnyCRDT.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t (*v59)(_QWORD, _QWORD, _QWORD);
  uint64_t v60;
  uint64_t result;
  uint64_t inited;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD v69[6];
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;

  v97 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531680);
  MEMORY[0x1E0C80A78](v3);
  v76 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531688);
  v95 = *(_QWORD *)(v75 - 8);
  v5 = MEMORY[0x1E0C80A78](v75);
  v96 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v88 = (char *)v69 - v7;
  v94 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v94);
  v89 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v79);
  v81 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v85);
  v90 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v12 = MEMORY[0x1E0C80A78](v11);
  v86 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v77 = (char *)v69 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531690);
  MEMORY[0x1E0C80A78](v15);
  v71 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531698);
  v69[4] = *(_QWORD *)(v70 - 8);
  v17 = MEMORY[0x1E0C80A78](v70);
  v69[5] = (char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v78 = (char *)v69 - v19;
  v82 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v82);
  v87 = (char *)v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v83 = (char *)v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v100 = (char *)v69 - v24;
  v25 = type metadata accessor for Proto_CRDT(0);
  v101 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v25);
  v93 = (char *)v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v84 = (char *)v69 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v72 = (char *)v69 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v80 = (char *)v69 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v92 = (char *)v69 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v74 = (char *)v69 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v73 = (char *)v69 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (char *)v69 - v41;
  MEMORY[0x1E0C80A78](v40);
  v44 = (char *)v69 - v43;
  v99 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v98 = *(_QWORD *)(v99 - 8);
  v45 = MEMORY[0x1E0C80A78](v99);
  v47 = (char *)v69 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45);
  v49 = (char *)v69 - v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v51 = MEMORY[0x1E0C80A78](v50);
  v53 = (char *)v69 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v55 = (char *)v69 - v54;
  v102 = a1;
  v56 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v56, (uint64_t)v55, &qword_1ED6F3728);
  v57 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v101 + 48);
  v101 = v25;
  v58 = v25;
  v59 = v57;
  LODWORD(v56) = v57(v55, 1, v58);
  sub_1BDD86E30((uint64_t)v55, &qword_1ED6F3728);
  if ((_DWORD)v56 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v60 = 0xD000000000000014;
    *(_QWORD *)(v60 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v60 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    v69[2] = v59;
    v69[3] = v53;
    v69[1] = v42;
    v91 = v49;
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v102;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    swift_retain();
    sub_1BDDA0528((uint64_t)v44);
    v63 = *(_QWORD *)&v44[*(int *)(v101 + 20)]
        + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v64 = (uint64_t)v100;
    sub_1BDD86DEC(v63, (uint64_t)v100, &qword_1ED6F2DF0);
    sub_1BDD9C3E0((uint64_t)v44, type metadata accessor for Proto_CRDT);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v64, 1, v99) != 1)
    {
      v66 = v64;
      v67 = (uint64_t)v91;
      sub_1BDDA2E8C(v66, (uint64_t)v91, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
      sub_1BDD9C318(v67, (uint64_t)v47, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
      v100 = v47;
      v68 = (char *)&loc_1BE17D39C + 4 * word_1BE1C82D0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    swift_release();
    swift_release();
    sub_1BDD86E30(v64, &qword_1ED6F2DF0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5316A0);
    v65 = swift_allocObject();
    *(_BYTE *)(v65 + 16) = 1;
    result = swift_beginAccess();
    *(_BYTE *)(v65 + 16) = 0;
    *v97 = v65;
  }
  return result;
}

uint64_t AnyCRDT.visitReferences(_:)(_QWORD *a1)
{
  return sub_1BE183368(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))sub_1BE191478);
}

uint64_t AnyCRDT.initPartialCRDT(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t sub_1BE17E1C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  ValueMetadata *v74;
  uint64_t result;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int EnumCaseMultiPayload;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198[3];
  uint64_t v199;

  v194 = a3;
  v197 = a2;
  v4 = type metadata accessor for Proto_CRDT(0);
  v186 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v166 = (uint64_t)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v171 = (uint64_t)&v158 - v7;
  v192 = type metadata accessor for Proto_Value(0);
  v189 = *(_QWORD *)(v192 - 8);
  v8 = MEMORY[0x1E0C80A78](v192);
  v167 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v184 = (char *)&v158 - v10;
  v191 = type metadata accessor for Proto_Timestamp(0);
  v188 = *(_QWORD *)(v191 - 8);
  v11 = MEMORY[0x1E0C80A78](v191);
  v172 = (unint64_t *)((char *)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v177 = (unint64_t *)((char *)&v158 - v14);
  MEMORY[0x1E0C80A78](v13);
  v182 = (unint64_t *)((char *)&v158 - v15);
  v16 = type metadata accessor for FinalizedTimestamp(0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v161 = (uint64_t)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v173 = (char *)&v158 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v178 = (uint64_t)&v158 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v168 = (uint64_t)&v158 - v24;
  MEMORY[0x1E0C80A78](v23);
  v183 = (uint64_t)&v158 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v27 = MEMORY[0x1E0C80A78](v26);
  v170 = (char *)&v158 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v176 = (uint64_t)&v158 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v180 = (uint64_t)&v158 - v32;
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v158 - v33;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v36 = MEMORY[0x1E0C80A78](v35);
  v163 = (uint64_t)&v158 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v174 = (uint64_t)&v158 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v179 = (uint64_t)&v158 - v41;
  MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v158 - v42;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v45 = MEMORY[0x1E0C80A78](v44);
  v165 = (uint64_t)&v158 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v181 = (char *)&v158 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v185 = (uint64_t)&v158 - v50;
  MEMORY[0x1E0C80A78](v49);
  v52 = (char *)&v158 - v51;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v54 = MEMORY[0x1E0C80A78](v53);
  v162 = (uint64_t)&v158 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x1E0C80A78](v54);
  v169 = (uint64_t)&v158 - v57;
  MEMORY[0x1E0C80A78](v56);
  v59 = (char *)&v158 - v58;
  v190 = type metadata accessor for Proto_Register(0);
  v60 = MEMORY[0x1E0C80A78](v190);
  v164 = (uint64_t)&v158 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = MEMORY[0x1E0C80A78](v60);
  v175 = (uint64_t)&v158 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v66 = (char *)&v158 - v65;
  MEMORY[0x1E0C80A78](v64);
  v193 = (uint64_t)&v158 - v67;
  v187 = v4;
  v68 = *(int *)(v4 + 20);
  v196 = a1;
  v69 = *(_QWORD *)(a1 + v68)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v69, (uint64_t)v59, &qword_1ED6F2DF0);
  v70 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48);
  if (v71(v59, 1, v70) == 1)
  {
    sub_1BDD86E30((uint64_t)v59, &qword_1ED6F2DF0);
LABEL_6:
    if (swift_conformsToProtocol2())
      v74 = &type metadata for AnyCRValue;
    else
      v74 = 0;
    if (v74)
    {
      swift_release();
      result = sub_1BDD9C3E0(v196, type metadata accessor for Proto_CRDT);
      *v194 = 0;
      return result;
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v76 = 0xD00000000000001CLL;
    *(_QWORD *)(v76 + 8) = 0x80000001BE1CF3F0;
    *(_BYTE *)(v76 + 16) = 0;
    swift_willThrow();
    swift_release();
    v77 = type metadata accessor for Proto_CRDT;
    v78 = v196;
    return sub_1BDD9C3E0(v78, v77);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    v72 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf;
    v73 = (uint64_t)v59;
LABEL_5:
    sub_1BDD9C3E0(v73, v72);
    goto LABEL_6;
  }
  v158 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v71;
  v159 = v70;
  v79 = v193;
  sub_1BDDA2E8C((uint64_t)v59, v193, type metadata accessor for Proto_Register);
  v80 = v190;
  v160 = *(int *)(v190 + 20);
  v81 = *(_QWORD *)(v79 + v160)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v81, (uint64_t)v52, &qword_1ED6F3770);
  v189 = *(_QWORD *)(v189 + 48);
  LODWORD(v81) = ((uint64_t (*)(char *, uint64_t, uint64_t))v189)(v52, 1, v192);
  sub_1BDD86E30((uint64_t)v52, &qword_1ED6F3770);
  sub_1BDD9C318(v79, (uint64_t)v66, type metadata accessor for Proto_Register);
  if ((_DWORD)v81 == 1)
  {
    v82 = *(_QWORD *)&v66[*(int *)(v80 + 20)]
        + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    sub_1BDD86DEC(v82, (uint64_t)v43, &qword_1ED6F3728);
    LODWORD(v82) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v186 + 48))(v43, 1, v187);
    sub_1BDD86E30((uint64_t)v43, &qword_1ED6F3728);
    sub_1BDD9C3E0((uint64_t)v66, type metadata accessor for Proto_Register);
    v83 = v191;
    if ((_DWORD)v82 == 1)
    {
      v72 = type metadata accessor for Proto_Register;
      v73 = v193;
      goto LABEL_5;
    }
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v66, type metadata accessor for Proto_Register);
    v83 = v191;
  }
  v84 = v193;
  v85 = v160;
  v86 = *(_QWORD *)(v193 + v160)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v86, (uint64_t)v34, &qword_1ED6F3850);
  v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v188 + 48);
  LODWORD(v86) = v87(v34, 1, v83);
  sub_1BDD86E30((uint64_t)v34, &qword_1ED6F3850);
  v88 = v197;
  if ((_DWORD)v86 == 1)
  {
    sub_1BDD9C3E0(v84, type metadata accessor for Proto_Register);
    goto LABEL_6;
  }
  v89 = *(_QWORD *)(v84 + v85)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v90 = v185;
  sub_1BDD86DEC(v89, v185, &qword_1ED6F3770);
  LODWORD(v89) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v189)(v90, 1, v192);
  sub_1BDD86E30(v90, &qword_1ED6F3770);
  v91 = *(_QWORD *)(v84 + v85);
  if ((_DWORD)v89 == 1)
  {
    v92 = v91 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    v93 = v179;
    sub_1BDD86DEC(v92, v179, &qword_1ED6F3728);
    v94 = v187;
    v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v186 + 48);
    LODWORD(v92) = v95(v93, 1, v187);
    sub_1BDD86E30(v93, &qword_1ED6F3728);
    if ((_DWORD)v92 == 1)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v96 = 0xD00000000000001CLL;
      *(_QWORD *)(v96 + 8) = 0x80000001BE1CF3F0;
      *(_BYTE *)(v96 + 16) = 0;
      swift_willThrow();
LABEL_35:
      swift_release();
      sub_1BDD9C3E0(v196, type metadata accessor for Proto_CRDT);
      v77 = type metadata accessor for Proto_Register;
      v78 = v193;
      return sub_1BDD9C3E0(v78, v77);
    }
    v100 = *(_QWORD *)(v193 + v160)
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    v101 = v176;
    sub_1BDD86DEC(v100, v176, &qword_1ED6F3850);
    if (v87((char *)v101, 1, v191) == 1)
    {
      v102 = v177;
      *v177 = 0;
      v102[1] = 0;
      sub_1BE1B20E4();
      sub_1BDD86E30(v101, &qword_1ED6F3850);
    }
    else
    {
      v102 = v177;
      sub_1BDDA2E8C(v101, (uint64_t)v177, type metadata accessor for Proto_Timestamp);
    }
    v111 = v195;
    v112 = v178;
    swift_retain();
    sub_1BDDAA440(v102, v88, v112);
    if (v111)
      goto LABEL_35;
    v114 = *(_QWORD *)(v193 + v160)
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    v115 = v114;
    v116 = v174;
    sub_1BDD86DEC(v115, v174, &qword_1ED6F3728);
    if (v95(v116, 1, v94) == 1)
    {
      v117 = v171;
      sub_1BE1B20E4();
      v118 = *(int *)(v94 + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v117 + v118) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v174, &qword_1ED6F3728);
    }
    else
    {
      v117 = v171;
      sub_1BDDA2E8C(v116, v171, type metadata accessor for Proto_CRDT);
    }
    v123 = *(_QWORD *)(v117 + *(int *)(v94 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v124 = v169;
    sub_1BDD86DEC(v123, v169, &qword_1ED6F2DF0);
    if (v158(v124, 1, v159) == 1)
    {
      sub_1BDD86E30(v124, &qword_1ED6F2DF0);
      v125 = (uint64_t)v170;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v127 = v124;
      v125 = (uint64_t)v170;
      if (!EnumCaseMultiPayload)
      {
        v131 = v175;
        sub_1BDDA2E8C(v127, v175, type metadata accessor for Proto_Register);
        goto LABEL_50;
      }
      sub_1BDD9C3E0(v127, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    v128 = v175;
    sub_1BE1B20E4();
    v129 = v128;
    v130 = *(int *)(v190 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v129 + v130) = qword_1ED6EF780;
    swift_retain();
    v131 = v129;
LABEL_50:
    sub_1BDD9C3E0(v117, type metadata accessor for Proto_CRDT);
    v132 = *(_QWORD *)(v131 + *(int *)(v190 + 20))
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    sub_1BDD86DEC(v132, v125, &qword_1ED6F3850);
    if (v87((char *)v125, 1, v191) == 1)
    {
      v133 = v172;
      *v172 = 0;
      v133[1] = 0;
      sub_1BE1B20E4();
      sub_1BDD86E30(v125, &qword_1ED6F3850);
    }
    else
    {
      v133 = v172;
      sub_1BDDA2E8C(v125, (uint64_t)v172, type metadata accessor for Proto_Timestamp);
    }
    v134 = v193;
    v135 = (uint64_t)v173;
    sub_1BDD9C3E0(v175, type metadata accessor for Proto_Register);
    v136 = v197;
    swift_retain();
    sub_1BDDAA440(v133, v136, v135);
    v137 = *(_QWORD *)(v134 + v160)
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    v138 = v163;
    sub_1BDD86DEC(v137, v163, &qword_1ED6F3728);
    v139 = v187;
    if (v95(v138, 1, v187) == 1)
    {
      v140 = v166;
      sub_1BE1B20E4();
      v141 = *(int *)(v139 + 20);
      v142 = (uint64_t)v167;
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v140 + v141) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v138, &qword_1ED6F3728);
    }
    else
    {
      v140 = v166;
      sub_1BDDA2E8C(v138, v166, type metadata accessor for Proto_CRDT);
      v142 = (uint64_t)v167;
    }
    v143 = *(_QWORD *)(v140 + *(int *)(v187 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v144 = v143;
    v145 = v162;
    sub_1BDD86DEC(v144, v162, &qword_1ED6F2DF0);
    if (v158(v145, 1, v159) == 1)
    {
      sub_1BDD86E30(v145, &qword_1ED6F2DF0);
    }
    else
    {
      if (!swift_getEnumCaseMultiPayload())
      {
        v146 = v164;
        sub_1BDDA2E8C(v145, v164, type metadata accessor for Proto_Register);
LABEL_66:
        v148 = v197;
        sub_1BDD9C3E0(v140, type metadata accessor for Proto_CRDT);
        v149 = *(_QWORD *)(v146 + *(int *)(v190 + 20))
             + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        v150 = v165;
        sub_1BDD86DEC(v149, v165, &qword_1ED6F3770);
        v151 = v192;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v189)(v150, 1, v192) == 1)
        {
          sub_1BE1B20E4();
          v152 = *(int *)(v151 + 20);
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v142 + v152) = qword_1ED6F2708;
          swift_retain();
          sub_1BDD86E30(v150, &qword_1ED6F3770);
        }
        else
        {
          sub_1BDDA2E8C(v150, v142, type metadata accessor for Proto_Value);
        }
        sub_1BDD9C3E0(v146, type metadata accessor for Proto_Register);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        v153 = sub_1BDDB4FC0(v142, v148);
        swift_release();
        AnyCRValue.init(from:)(v153, &v199);
        swift_release();
        sub_1BDD9C3E0(v196, type metadata accessor for Proto_CRDT);
        sub_1BDD9C3E0(v134, type metadata accessor for Proto_Register);
        v154 = v199;
        v155 = v168;
        sub_1BDDA2E8C(v178, v168, type metadata accessor for FinalizedTimestamp);
        v156 = v161;
        sub_1BDDA2E8C(v135, v161, type metadata accessor for FinalizedTimestamp);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531820);
        v157 = (_QWORD *)swift_allocObject();
        v157[2] = v154;
        sub_1BDDA2E8C(v155, (uint64_t)v157 + *(_QWORD *)(*v157 + 216), type metadata accessor for FinalizedTimestamp);
        result = sub_1BDDA2E8C(v156, (uint64_t)v157 + *(_QWORD *)(*v157 + 224), type metadata accessor for FinalizedTimestamp);
        *v194 = v157;
        return result;
      }
      sub_1BDD9C3E0(v145, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    v146 = v164;
    sub_1BE1B20E4();
    v147 = *(int *)(v190 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v146 + v147) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_66;
  }
  v97 = v91 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v98 = v180;
  sub_1BDD86DEC(v97, v180, &qword_1ED6F3850);
  if (v87((char *)v98, 1, v83) == 1)
  {
    v99 = v182;
    *v182 = 0;
    v99[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30(v98, &qword_1ED6F3850);
  }
  else
  {
    v99 = v182;
    sub_1BDDA2E8C(v98, (uint64_t)v182, type metadata accessor for Proto_Timestamp);
  }
  v103 = v195;
  v104 = v193;
  v105 = (uint64_t)v184;
  v106 = (uint64_t)v181;
  swift_retain();
  v107 = v183;
  sub_1BDDAA440(v99, v88, v183);
  if (v103)
  {
    swift_release();
    sub_1BDD9C3E0(v196, type metadata accessor for Proto_CRDT);
    v77 = type metadata accessor for Proto_Register;
    v78 = v104;
    return sub_1BDD9C3E0(v78, v77);
  }
  v108 = *(_QWORD *)(v104 + v160)
       + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v108, v106, &qword_1ED6F3770);
  v109 = v192;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v189)(v106, 1, v192) == 1)
  {
    sub_1BE1B20E4();
    v110 = *(int *)(v109 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v105 + v110) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v106, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C(v106, v105, type metadata accessor for Proto_Value);
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v113 = sub_1BDDB4FC0(v105, v88);
  swift_release();
  AnyCRValue.init(from:)(v113, v198);
  swift_release();
  sub_1BDD9C3E0(v196, type metadata accessor for Proto_CRDT);
  sub_1BDD9C3E0(v104, type metadata accessor for Proto_Register);
  v119 = v198[0];
  v120 = v107;
  v121 = v168;
  sub_1BDDA2E8C(v120, v168, type metadata accessor for FinalizedTimestamp);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531828);
  v122 = (_QWORD *)swift_allocObject();
  v122[2] = v119;
  result = sub_1BDDA2E8C(v121, (uint64_t)v122 + *(_QWORD *)(*v122 + 216), type metadata accessor for FinalizedTimestamp);
  *v194 = v122;
  return result;
}

uint64_t sub_1BE17F614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v72 = a2;
  v62 = a3;
  v4 = type metadata accessor for Proto_CRDT(0);
  v66 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v64 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v7 = MEMORY[0x1E0C80A78](v6);
  v63 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v65 = (uint64_t)&v61 - v9;
  v10 = type metadata accessor for Proto_Timestamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v69 = (unint64_t *)((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v61 - v17;
  v19 = type metadata accessor for FinalizedTimestamp(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v68 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v71 = (uint64_t)&v61 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v26);
  v74 = (uint64_t)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v4;
  v28 = *(int *)(v4 + 20);
  v73 = a1;
  v29 = *(_QWORD *)(a1 + v28)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v29, (uint64_t)v25, &qword_1ED6F2DF0);
  v30 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v25, 1, v30) == 1)
  {
    sub_1BDD86E30((uint64_t)v25, &qword_1ED6F2DF0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      v31 = v74;
      sub_1BDDA2E8C((uint64_t)v25, v74, type metadata accessor for Proto_Register);
      goto LABEL_8;
    }
    sub_1BDD9C3E0((uint64_t)v25, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  v31 = v74;
  sub_1BE1B20E4();
  v32 = *(int *)(v26 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)(v31 + v32) = qword_1ED6EF780;
  swift_retain();
LABEL_8:
  v33 = *(int *)(v26 + 20);
  v34 = *(_QWORD *)(v31 + v33)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v34, (uint64_t)v18, &qword_1ED6F3850);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v34) = v35(v18, 1, v10);
  sub_1BDD86E30((uint64_t)v18, &qword_1ED6F3850);
  if ((_DWORD)v34 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v36 = 0xD000000000000021;
    *(_QWORD *)(v36 + 8) = 0x80000001BE1CF980;
    *(_BYTE *)(v36 + 16) = 0;
    swift_willThrow();
LABEL_14:
    swift_release();
    sub_1BDD9C3E0(v73, type metadata accessor for Proto_CRDT);
    v44 = v31;
    return sub_1BDD9C3E0(v44, type metadata accessor for Proto_Register);
  }
  v37 = *(_QWORD *)(v31 + v33)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v37, (uint64_t)v16, &qword_1ED6F3850);
  v38 = v35(v16, 1, v10);
  v39 = v72;
  v40 = v69;
  if (v38 == 1)
  {
    *v69 = 0;
    v40[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v16, (uint64_t)v69, type metadata accessor for Proto_Timestamp);
  }
  v41 = v71;
  swift_retain();
  v42 = v68;
  v43 = v70;
  sub_1BDDAA440(v40, v39, v68);
  if (v43)
    goto LABEL_14;
  sub_1BDDA2E8C(v42, v41, type metadata accessor for FinalizedTimestamp);
  v46 = *(_QWORD *)(v31 + v33)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  v47 = v65;
  sub_1BDD86DEC(v46, v65, &qword_1ED6F3728);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v49 = v31;
  v50 = v67;
  LODWORD(v46) = v48(v47, 1, v67);
  sub_1BDD86E30(v47, &qword_1ED6F3728);
  if ((_DWORD)v46 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v51 = 0xD000000000000016;
    *(_QWORD *)(v51 + 8) = 0x80000001BE1CF9B0;
    *(_BYTE *)(v51 + 16) = 0;
    swift_willThrow();
    swift_release();
    sub_1BDD9C3E0(v73, type metadata accessor for Proto_CRDT);
    sub_1BDD9C3E0(v71, type metadata accessor for FinalizedTimestamp);
    v44 = v49;
    return sub_1BDD9C3E0(v44, type metadata accessor for Proto_Register);
  }
  v52 = v71;
  v53 = *(_QWORD *)(v49 + v33)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  v54 = v63;
  sub_1BDD86DEC(v53, v63, &qword_1ED6F3728);
  if (v48(v54, 1, v50) == 1)
  {
    v55 = v64;
    sub_1BE1B20E4();
    v56 = *(int *)(v50 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v55 + v56) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v54, &qword_1ED6F3728);
  }
  else
  {
    v55 = v64;
    sub_1BDDA2E8C(v54, v64, type metadata accessor for Proto_CRDT);
  }
  v57 = v74;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v58 = sub_1BDDA1B44(v55, v39);
  swift_release();
  AnyCRDT.init(from:)(&v75, v58);
  swift_release();
  sub_1BDD9C3E0(v73, type metadata accessor for Proto_CRDT);
  sub_1BDD9C3E0(v57, type metadata accessor for Proto_Register);
  v59 = v75;
  v60 = v62;
  sub_1BDDA2E8C(v52, v62, type metadata accessor for FinalizedTimestamp);
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531698);
  *(_QWORD *)(v60 + *(int *)(result + 36)) = v59;
  return result;
}

uint64_t sub_1BE17FDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  ValueMetadata *v29;
  void (*v30)(ValueMetadata *, uint64_t);
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v41 = a3;
  v42 = a2;
  v4 = type metadata accessor for Proto_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v40 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v40 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  v43 = a1;
  v20 = *(_QWORD *)(a1 + v19)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v15, &qword_1ED6F2DF0);
  v21 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      v22 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf;
      v23 = (uint64_t)v15;
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v18, type metadata accessor for Proto_Register);
      v24 = *(int *)(v16 + 20);
      v25 = *(_QWORD *)&v18[v24]
          + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
      swift_beginAccess();
      sub_1BDD86DEC(v25, (uint64_t)v12, &qword_1ED6F3770);
      v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
      LODWORD(v25) = v26(v12, 1, v4);
      sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3770);
      if ((_DWORD)v25 != 1)
      {
        v34 = *(_QWORD *)&v18[v24]
            + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        sub_1BDD86DEC(v34, (uint64_t)v10, &qword_1ED6F3770);
        if (v26(v10, 1, v4) == 1)
        {
          v35 = v40;
          sub_1BE1B20E4();
          v36 = *(int *)(v4 + 20);
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v35 + v36) = qword_1ED6F2708;
          swift_retain();
          sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3770);
        }
        else
        {
          v35 = v40;
          sub_1BDDA2E8C((uint64_t)v10, v40, type metadata accessor for Proto_Value);
        }
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        v37 = v42;
        swift_retain();
        v38 = sub_1BDDB4FC0(v35, v37);
        swift_release();
        v39 = v44;
        v32 = sub_1BDF36504(v38);
        swift_release();
        sub_1BDD9C3E0(v43, type metadata accessor for Proto_CRDT);
        result = sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Register);
        if (!v39)
          goto LABEL_19;
        return result;
      }
      v22 = type metadata accessor for Proto_Register;
      v23 = (uint64_t)v18;
    }
    sub_1BDD9C3E0(v23, v22);
  }
  v27 = swift_conformsToProtocol2();
  if (v27)
    v28 = v27;
  else
    v28 = 0;
  if (v27)
    v29 = &type metadata for AnyCRBuiltInComparable;
  else
    v29 = 0;
  if (v29)
  {
    v30 = *(void (**)(ValueMetadata *, uint64_t))(v28 + 16);
    *((_QWORD *)&v46 + 1) = v29;
    v47 = v28;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v45);
    v30(v29, v28);
  }
  else
  {
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF4E0);
  if (swift_dynamicCast())
  {
    swift_release();
    result = sub_1BDD9C3E0(v43, type metadata accessor for Proto_CRDT);
    v32 = v48;
LABEL_19:
    *v41 = v32;
    return result;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v33 = 0xD000000000000020;
  *(_QWORD *)(v33 + 8) = 0x80000001BE1CEA90;
  *(_BYTE *)(v33 + 16) = 0;
  swift_willThrow();
  swift_release();
  return sub_1BDD9C3E0(v43, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BE1802BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v9, &qword_1ED6F2DF0);
  v14 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v12, type metadata accessor for Proto_Set);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v15 = *(int *)(v10 + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)&v12[v15] = qword_1ED6F2800;
  swift_retain();
LABEL_9:
  sub_1BE187CB0((uint64_t)v12, a2, &v18);
  result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
  if (!v3)
    *a3 = v18;
  return result;
}

uint64_t sub_1BE1804B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v9, &qword_1ED6F2DF0);
  v14 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v12, type metadata accessor for Proto_Set);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v15 = *(int *)(v10 + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)&v12[v15] = qword_1ED6F2800;
  swift_retain();
LABEL_9:
  sub_1BE185288((uint64_t)v12, a2, 0, 0, (void (*)(void (*)(uint64_t), uint64_t))sub_1BE192318, &qword_1EF52C538, (void (*)(BOOL, unint64_t, uint64_t))sub_1BDE22754, (void (*)(uint64_t, uint64_t))sub_1BE18648C, &v18, &qword_1EF52CFF8, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1BE190FC0, (uint64_t)sub_1BDD874E8, &qword_1EF531838);
  result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
  if (!v3)
    *a3 = v18;
  return result;
}

uint64_t sub_1BE18070C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v9, &qword_1ED6F2DF0);
  v14 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v9, 1, v14) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v12, type metadata accessor for Proto_Set);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v15 = *(int *)(v10 + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)&v12[v15] = qword_1ED6F2800;
  swift_retain();
LABEL_9:
  v16 = sub_1BE18F730((uint64_t)v12, a2, 0, 0);
  if (v3)
  {
    swift_release();
    sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
    return sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Set);
  }
  else
  {
    v18 = v16;
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Set);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531840);
    v19 = swift_allocObject();
    sub_1BE1B1F4C();
    *(_QWORD *)(v19 + 16) = v18;
    swift_release();
    result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
    *a3 = v19;
  }
  return result;
}

uint64_t sub_1BE180984@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v23[2];
  uint64_t **v24;

  v24 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_OrderedSet(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v23[-1] - v10;
  v12 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v23[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v14);
  v15 = *(_QWORD *)&v14[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v5, &qword_1ED6F2DF0);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v5, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v11, type metadata accessor for Proto_OrderedSet);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v17 = *(int *)(v6 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v11[v17] = qword_1ED6EF618;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
  v18 = *(_QWORD *)(v1 + 16);
  sub_1BDD9C318((uint64_t)v11, (uint64_t)v9, type metadata accessor for Proto_OrderedSet);
  swift_retain();
  sub_1BE181DE8((uint64_t)v9, v18, v23);
  result = sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_OrderedSet);
  if (!v2)
  {
    v20 = v23[1];
    v21 = v24;
    *v24 = v23[0];
    v21[1] = v20;
  }
  return result;
}

uint64_t sub_1BE180C00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v11);
  v12 = *(_QWORD *)&v11[*(int *)(v9 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1ED6F2DF0);
  v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v8, type metadata accessor for Proto_Sequence);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v14 = *(int *)(v6 + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v8[v14] = qword_1ED6EF5B0;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_CRDT);
  v15 = *(_QWORD *)(v1 + 16);
  swift_retain();
  return sub_1BE180E1C((uint64_t)v8, v15, a1);
}

uint64_t sub_1BE180E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t result;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  id v22[2];

  v21 = a3;
  v22[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for Proto_Sequence(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  sub_1BDD9C318(a1, (uint64_t)&v20 - v9, type metadata accessor for Proto_Sequence);
  type metadata accessor for CRAttributedStringRef();
  v11 = swift_allocObject();
  sub_1BDD9C318((uint64_t)v10, (uint64_t)v8, type metadata accessor for Proto_Sequence);
  v12 = objc_allocWithZone((Class)type metadata accessor for CRAttributedStringDecoder(0));
  v13 = sub_1BDF0D828((uint64_t)v8, a2, (uint64_t)&type metadata for CRAttributeStringEmptyScope, (uint64_t)&off_1E7759B40);
  v14 = objc_allocWithZone((Class)CRTTMergeableString);
  v22[0] = 0;
  v15 = objc_msgSend(v14, sel_initWithDecoder_error_, v13, v22);
  if (v15)
  {
    v16 = v15;
    v17 = v22[0];
    swift_release();

    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Sequence);
    *(_QWORD *)(v11 + 16) = v16;
    result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
    *v21 = v11;
  }
  else
  {
    v19 = v22[0];
    sub_1BE1B1D3C();

    swift_willThrow();
    swift_release();

    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Sequence);
    swift_deallocPartialClassInstance();
    return sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
  }
  return result;
}

uint64_t sub_1BE181030@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v11);
  v12 = *(_QWORD *)&v11[*(int *)(v9 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1ED6F2DF0);
  v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v8, type metadata accessor for Proto_Sequence);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v14 = *(int *)(v6 + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v8[v14] = qword_1ED6EF5B0;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_CRDT);
  v15 = *(_QWORD *)(v1 + 16);
  swift_retain();
  return sub_1BE18124C((uint64_t)v8, v15, a1);
}

uint64_t sub_1BE18124C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  id v18;
  id v19[2];

  v19[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(a1, (uint64_t)v8, v9);
  objc_allocWithZone((Class)type metadata accessor for CRSequenceDecoder(0));
  swift_retain_n();
  v10 = sub_1BDF0D9A0((uint64_t)v8, a2, (uint64_t)sub_1BE19227C, a2);
  swift_release_n();
  v11 = objc_allocWithZone((Class)CRTTMergeableString);
  v19[0] = 0;
  v12 = v10;
  v13 = objc_msgSend(v11, sel_initWithDecoder_error_, v12, v19);
  if (v13)
  {
    v14 = v13;
    v15 = v19[0];

    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531870);
    v16 = swift_allocObject();
    sub_1BE1B1F4C();
    *(_QWORD *)(v16 + qword_1ED6F8B80) = v14;

    swift_release();
    result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
    *a3 = v16;
  }
  else
  {
    v18 = v19[0];
    sub_1BE1B1D3C();

    swift_willThrow();
    swift_release();

    return sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
  }
  return result;
}

uint64_t sub_1BE181440@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v11);
  v12 = *(_QWORD *)&v11[*(int *)(v9 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1ED6F2DF0);
  v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v8, type metadata accessor for Proto_OrderedSet);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v14 = *(int *)(v6 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v8[v14] = qword_1ED6EF618;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_CRDT);
  v15 = *(_QWORD *)(v1 + 16);
  swift_retain();
  return sub_1BE18165C((uint64_t)v8, v15, a1);
}

uint64_t sub_1BE18165C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int isUniquelyReferenced_nonNull_native;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;

  v71 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v5);
  v64 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  MEMORY[0x1E0C80A78](v7);
  v69 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for Proto_Sequence(0);
  v63 = *(_QWORD *)(v66 - 8);
  v9 = MEMORY[0x1E0C80A78](v66);
  v61 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v70 = (char *)&v60 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v60 - v16;
  v18 = type metadata accessor for Proto_Set(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v60 - v23;
  v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF531688) + 48);
  v65 = a3;
  v26 = (uint64_t)a3 + v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531880);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v67 = v26;
  v28(v26, 1, 1, v27);
  v74 = MEMORY[0x1E0DEE9D8];
  v29 = *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20);
  v72 = a1;
  v62 = v29;
  v30 = *(_QWORD *)(a1 + v29);
  v31 = v30 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1BDD86DEC(v31, (uint64_t)v17, qword_1ED6F2EF8);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v32(v17, 1, v18) == 1)
  {
    sub_1BE1B20E4();
    v33 = *(int *)(v18 + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v24[v33] = qword_1ED6F2800;
    swift_retain();
    sub_1BDD86E30((uint64_t)v17, qword_1ED6F2EF8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v17, (uint64_t)v24, type metadata accessor for Proto_Set);
  }
  v34 = (uint64_t *)(*(_QWORD *)&v24[*(int *)(v18 + 20)]
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  v35 = *v34;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Set);
  v36 = *(_QWORD *)(v35 + 16);
  swift_bridgeObjectRelease();
  v37 = MEMORY[0x1E0DEE9D8];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v36 > *(_QWORD *)(v37 + 24) >> 1)
  {
    if (*(_QWORD *)(v37 + 16) <= v36)
      v39 = v36;
    else
      v39 = *(_QWORD *)(v37 + 16);
    v37 = sub_1BDE0679C(isUniquelyReferenced_nonNull_native, v39, 0, v37);
  }
  v74 = v37;
  v40 = v30 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1BDD86DEC(v40, (uint64_t)v15, qword_1ED6F2EF8);
  if (v32(v15, 1, v18) == 1)
  {
    sub_1BE1B20E4();
    v41 = *(int *)(v18 + 20);
    v43 = v71;
    v42 = v72;
    v44 = (uint64_t)v69;
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v22[v41] = qword_1ED6F2800;
    swift_retain();
    v45 = sub_1BDD86E30((uint64_t)v15, qword_1ED6F2EF8);
    v46 = (uint64_t)v70;
  }
  else
  {
    v45 = sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v22, type metadata accessor for Proto_Set);
    v43 = v71;
    v42 = v72;
    v44 = (uint64_t)v69;
    v46 = (uint64_t)v70;
  }
  MEMORY[0x1E0C80A78](v45);
  *(&v60 - 4) = v43;
  *(&v60 - 3) = v42;
  *(&v60 - 2) = (uint64_t)&v74;
  swift_retain();
  v47 = v68;
  sub_1BE188604((uint64_t)v22, (uint64_t)sub_1BE192294, (uint64_t)(&v60 - 6), v43, &v73);
  if (v47)
  {
    swift_release();
    sub_1BDD9C3E0(v42, type metadata accessor for Proto_OrderedSet);
    swift_bridgeObjectRelease();
    return sub_1BDD86E30(v67, &qword_1EF531888);
  }
  else
  {
    v49 = v65;
    v65[1] = v73;
    v50 = *(_QWORD *)(v42 + v62)
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    sub_1BDD86DEC(v50, v44, &qword_1ED6F2E98);
    v51 = v66;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v44, 1, v66) == 1)
    {
      sub_1BE1B20E4();
      v52 = *(int *)(v51 + 20);
      if (qword_1ED6EF5C0 != -1)
        swift_once();
      *(_QWORD *)(v46 + v52) = qword_1ED6EF5B0;
      swift_retain();
      sub_1BDD86E30(v44, &qword_1ED6F2E98);
      v51 = v66;
    }
    else
    {
      sub_1BDDA2E8C(v44, v46, type metadata accessor for Proto_Sequence);
    }
    v53 = v74;
    v54 = *(_QWORD *)(v46 + *(int *)(v51 + 20))
        + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    v55 = v54;
    v56 = v64;
    sub_1BDD86DEC(v55, v64, &qword_1ED6F37A8);
    v57 = type metadata accessor for Proto_Version(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v56, 1, v57) == 1)
    {
      sub_1BDD86E30(v56, &qword_1ED6F37A8);
      sub_1BDD9C3E0(v46, type metadata accessor for Proto_Sequence);
      v58 = 0;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1BDD86E30(v56, &qword_1ED6F37A8);
      v59 = v61;
      sub_1BDD9C318(v46, v61, type metadata accessor for Proto_Sequence);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531890);
      swift_allocObject();
      v58 = sub_1BE1877F0(v59, v53, v43, (uint64_t)&unk_1E77641A8, (uint64_t)sub_1BE1922B0);
      sub_1BDD9C3E0(v46, type metadata accessor for Proto_Sequence);
    }
    *v49 = v58;
    sub_1BE188CB0(0);
    swift_release();
    sub_1BDD9C3E0(v42, type metadata accessor for Proto_OrderedSet);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BE181DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;

  v54 = a2;
  v47 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  MEMORY[0x1E0C80A78](v6);
  v50 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Proto_Sequence(0);
  v49 = *(_QWORD *)(v51 - 8);
  v8 = MEMORY[0x1E0C80A78](v51);
  v46 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v48 = (uint64_t)&v45 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Proto_Set(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject();
  v56 = v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (uint64_t *)(v18 + 16);
  v20 = *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20);
  v21 = a1;
  v22 = *(_QWORD *)(a1 + v20)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1BDD86DEC(v22, (uint64_t)v13, qword_1ED6F2EF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1BE1B20E4();
    v23 = *(int *)(v14 + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v17[v23] = qword_1ED6F2800;
    swift_retain();
    sub_1BDD86E30((uint64_t)v13, qword_1ED6F2EF8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v17, type metadata accessor for Proto_Set);
  }
  v24 = v53;
  v25 = v54;
  v26 = v56;
  swift_retain();
  swift_retain();
  sub_1BE185288((uint64_t)v17, v25, (void (*)(uint64_t))sub_1BE19223C, v26, (void (*)(void (*)(uint64_t), uint64_t))sub_1BDE0D5B8, &qword_1EF52C568, (void (*)(BOOL, unint64_t, uint64_t))sub_1BDE2270C, (void (*)(uint64_t, uint64_t))sub_1BE185C5C, &v55, &qword_1EF52D008, (void (*)(uint64_t, uint64_t, uint64_t *))sub_1BE19061C, (uint64_t)sub_1BDD874E8, &qword_1EF531868);
  if (v24)
  {
    swift_release();
    sub_1BDD9C3E0(v21, type metadata accessor for Proto_OrderedSet);
    return swift_release();
  }
  v27 = v55;
  result = swift_beginAccess();
  v29 = *v19;
  if (v29)
  {
    v30 = v21;
    v31 = (uint64_t *)(*(_QWORD *)(v21 + v20)
                    + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
    swift_beginAccess();
    v32 = *v31;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = sub_1BE182CD8(v29, v32, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BE192244, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v30 + v20)
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    v35 = v50;
    sub_1BDD86DEC(v34, v50, &qword_1ED6F2E98);
    v36 = v51;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v35, 1, v51) == 1)
    {
      v37 = v48;
      sub_1BE1B20E4();
      v38 = *(int *)(v36 + 20);
      if (qword_1ED6EF5C0 != -1)
        swift_once();
      *(_QWORD *)(v37 + v38) = qword_1ED6EF5B0;
      swift_retain();
      sub_1BDD86E30(v35, &qword_1ED6F2E98);
    }
    else
    {
      v37 = v48;
      sub_1BDDA2E8C(v35, v48, type metadata accessor for Proto_Sequence);
    }
    v39 = *(_QWORD *)(v37 + *(int *)(v36 + 20))
        + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    v40 = v52;
    sub_1BDD86DEC(v39, v52, &qword_1ED6F37A8);
    v41 = type metadata accessor for Proto_Version(0);
    LODWORD(v39) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41);
    sub_1BDD86E30(v40, &qword_1ED6F37A8);
    if ((_DWORD)v39 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0(v37, type metadata accessor for Proto_Sequence);
      v42 = 0;
    }
    else
    {
      v43 = v46;
      sub_1BDD9C318(v37, v46, type metadata accessor for Proto_Sequence);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531850);
      swift_allocObject();
      v42 = sub_1BE1877F0(v43, v33, v25, (uint64_t)&unk_1E7764180, (uint64_t)sub_1BE19225C);
      sub_1BDD9C3E0(v37, type metadata accessor for Proto_Sequence);
    }
    sub_1BDD9C3E0(v30, type metadata accessor for Proto_OrderedSet);
    swift_retain();
    swift_release();
    v44 = v47;
    *v47 = v42;
    v44[1] = v27;
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BE18246C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  unsigned int v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a2;
  v4 = type metadata accessor for Proto_Value(0);
  v41 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v44 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v40 - v10;
  v12 = type metadata accessor for Proto_RepeatedValue(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v17 = (uint64_t *)((char *)&v40 - v16);
  v18 = *(int *)(v4 + 20);
  v43 = a1;
  v19 = *(_QWORD *)(a1 + v18);
  v20 = v19 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v11, &qword_1ED6F26F0);
  v21 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  v23 = v22(v11, 1, v21);
  v42 = v22;
  if (v23 == 1)
  {
    sub_1BDD86E30((uint64_t)v11, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v17, type metadata accessor for Proto_RepeatedValue);
      goto LABEL_7;
    }
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v17 = MEMORY[0x1E0DEE9D8];
  sub_1BE1B20E4();
LABEL_7:
  v24 = *v17;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_RepeatedValue);
  v25 = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRelease();
  v26 = MEMORY[0x1E0DEE9D8];
  v27 = sub_1BDE06788(0, v25, 0, MEMORY[0x1E0DEE9D8]);
  v28 = v19 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v28, (uint64_t)v9, &qword_1ED6F26F0);
  if (v42(v9, 1, v21) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v15, type metadata accessor for Proto_RepeatedValue);
      goto LABEL_13;
    }
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v15 = v26;
  sub_1BE1B20E4();
LABEL_13:
  v29 = *v15;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_RepeatedValue);
  v30 = *(_QWORD *)(v29 + 16);
  v42 = (unsigned int (*)(char *, uint64_t, uint64_t))v29;
  if (v30)
  {
    v31 = v29 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
    v32 = *(_QWORD *)(v41 + 72);
    while (1)
    {
      v33 = v44;
      sub_1BDD9C318(v31, v44, type metadata accessor for Proto_Value);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      v34 = v45;
      swift_retain();
      sub_1BDDB4FC0(v33, v34);
      swift_release();
      v35 = swift_retain();
      AnyCRValue.init(from:)(&v46, v35);
      if (v2)
        break;
      v36 = v46;
      v38 = v27[2];
      v37 = v27[3];
      if (v38 >= v37 >> 1)
        v27 = sub_1BDE06788((_QWORD *)(v37 > 1), v38 + 1, 1, v27);
      v27[2] = v38 + 1;
      v27[v38 + 4] = v36;
      swift_release();
      v31 += v32;
      if (!--v30)
        goto LABEL_19;
    }
    swift_release();
    swift_release();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_19:
    swift_release();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
  }
  return v27;
}

uint64_t AnyCRDT.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

{
  uint64_t v0;
  _QWORD v2[4];
  _QWORD v3[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 88))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1BE1B26CC();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t AnyCRDT.MergeableDelta.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t AnyCRDT.copy(renamingReferences:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 80))();
  *a1 = result;
  return result;
}

uint64_t AnyCRDT.actionUndoingDifference(from:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 128))(*a1);
}

uint64_t AnyCRDT.merge(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = *v1;
  if (*v1 != v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      *v1 = (*(uint64_t (**)(void))(*(_QWORD *)*v1 + 160))();
      swift_release();
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v1 + 96))(v2);
  }
  return result;
}

uint64_t sub_1BE1829F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  id v21;
  _OWORD v22[2];
  uint64_t v23;

  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v4;
  *(_QWORD *)&v22[0] = *v4;
  if (((*(uint64_t (**)(_OWORD *))(v11 + 16))(v22) & 1) != 0)
  {
    *a4 = v10;
    return swift_retain();
  }
  else
  {
    v20[1] = v9;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    v13 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v22);
    sub_1BDD86E30((uint64_t)v22, qword_1ED6F3DD0);
    type metadata accessor for CREncoder();
    v14 = swift_allocObject();
    v15 = MEMORY[0x1E0DEE9D8];
    v16 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v14 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v14 + 40) = v15;
    *(_QWORD *)(v14 + 48) = v15;
    *(_QWORD *)(v14 + 56) = v16;
    *(_QWORD *)(v14 + 64) = v15;
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = v15;
    *(_BYTE *)(v14 + 72) = 2;
    v17 = *(void (**)(uint64_t))(*(_QWORD *)v10 + 176);
    v21 = v13;
    v17(v14);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v18 = swift_retain();
    v19 = sub_1BDE27BC4(v18);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(v19, a2, a3);

    swift_release();
    return swift_release();
  }
}

uint64_t sub_1BE182CD8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v64 = a3;
  v65 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C558);
  v61 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v70 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v56 = (uint64_t)&v51 - v9;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C568);
  v66 = *(_QWORD *)(v63 - 8);
  v10 = MEMORY[0x1E0C80A78](v63);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v55 = (uint64_t)&v51 - v13;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531860);
  v14 = MEMORY[0x1E0C80A78](v62);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v54 = (uint64_t)&v51 - v18;
  MEMORY[0x1E0C80A78](v17);
  v53 = (uint64_t)&v51 - v19;
  v20 = *(_QWORD *)(a1 + 16);
  v68 = *(_QWORD *)(a2 + 16);
  if (v68 >= v20)
    v21 = v20;
  else
    v21 = v68;
  v71 = MEMORY[0x1E0DEE9D8];
  sub_1BDE226E0(0, v21, 0);
  v22 = a1;
  v67 = a1;
  v60 = v20;
  if (v21)
  {
    v58 = v16;
    v59 = v12;
    v69 = v71;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v24 = 0;
    v25 = v52;
    v57 = a2;
    while (v20 != v24)
    {
      v26 = v25;
      v27 = (uint64_t)v59;
      result = sub_1BDD86DEC(v22+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v24, (uint64_t)v59, &qword_1EF52C568);
      if (v68 == v24)
        goto LABEL_36;
      v28 = (uint64_t)v58;
      v29 = type metadata accessor for Proto_Timestamp(0);
      v30 = a2
          + ((*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v24;
      v31 = v28 + *(int *)(v62 + 48);
      sub_1BDDA2EF0(v27, v28, &qword_1EF52C568);
      sub_1BDD9C318(v30, v31, type metadata accessor for Proto_Timestamp);
      v64(v28, v28 + *(int *)(v63 + 48), v31);
      if (v26)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1BDD86E30(v28, &qword_1EF531860);
      }
      sub_1BDD86E30(v28, &qword_1EF531860);
      v32 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE226E0(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v71;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        sub_1BDE226E0(v33 > 1, v34 + 1, 1);
        v32 = v71;
      }
      ++v24;
      *(_QWORD *)(v32 + 16) = v34 + 1;
      v35 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      v69 = v32;
      result = sub_1BDDA2EF0(v70, v32 + v35 + *(_QWORD *)(v61 + 72) * v34, &qword_1EF52C558);
      v22 = v67;
      a2 = v57;
      v20 = v60;
      v25 = 0;
      if (v21 == v24)
        goto LABEL_16;
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v25 = v52;
LABEL_16:
    v36 = v68;
    v37 = a2;
    if (v20 <= v68)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v71;
    }
    if (v21 <= (uint64_t)v68)
      v38 = v68;
    else
      v38 = v21;
    v39 = v62;
    while (v20 != v21)
    {
      v40 = v55;
      result = sub_1BDD86DEC(v67+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v21, v55, &qword_1EF52C568);
      if (v36 == v21)
      {
        sub_1BDD86E30(v40, &qword_1EF52C568);
        goto LABEL_33;
      }
      if (v38 == v21)
        goto LABEL_38;
      v41 = type metadata accessor for Proto_Timestamp(0);
      v42 = v37
          + ((*(unsigned __int8 *)(*(_QWORD *)(v41 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v41 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v41 - 8) + 72) * v21;
      v43 = v54;
      v44 = v54 + *(int *)(v39 + 48);
      sub_1BDDA2EF0(v40, v54, &qword_1EF52C568);
      sub_1BDD9C318(v42, v44, type metadata accessor for Proto_Timestamp);
      v45 = v43;
      v46 = v53;
      sub_1BDDA2EF0(v45, v53, &qword_1EF531860);
      v64(v46, v46 + *(int *)(v63 + 48), v46 + *(int *)(v39 + 48));
      sub_1BDD86E30(v46, &qword_1EF531860);
      if (v25)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v47 = v71;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE226E0(0, *(_QWORD *)(v47 + 16) + 1, 1);
        v47 = v71;
      }
      v50 = *(_QWORD *)(v47 + 16);
      v49 = *(_QWORD *)(v47 + 24);
      if (v50 >= v49 >> 1)
      {
        sub_1BDE226E0(v49 > 1, v50 + 1, 1);
        v47 = v71;
      }
      ++v21;
      *(_QWORD *)(v47 + 16) = v50 + 1;
      result = sub_1BDDA2EF0(v56, v47+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v50, &qword_1EF52C558);
      v36 = v68;
      if (v20 == v21)
        goto LABEL_33;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t AnyCRDT.apply(_:)(uint64_t a1)
{
  uint64_t v1;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)v1 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 160))();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 136))(a1);
}

uint64_t AnyCRDT.delta(_:from:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)v2 + 208))(a1, *a2);
}

uint64_t AnyCRDT.MergeableDelta.visitReferences(_:)(_QWORD *a1)
{
  return sub_1BE183368(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))sub_1BE1914E8);
}

uint64_t sub_1BE183368(_QWORD *a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  return a2(v5, v2, v3, v4);
}

uint64_t AnyCRDT.canMerge(delta:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 216))(&v4) & 1;
}

uint64_t AnyCRDT.merge(delta:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = (*(uint64_t (**)(void))(*(_QWORD *)*v1 + 160))();
    swift_release();
  }
  v3 = *v1;
  v5 = v2;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v3 + 224))(&v5) & 1;
}

uint64_t sub_1BE183468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t **v30;
  unint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[5];
  uint64_t (*v36)(char *, uint64_t, uint64_t);

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v2);
  v36 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for Proto_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for Proto_CustomCRValue(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v33 = (uint64_t *)((char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15);
  v34 = (uint64_t)&v32 - v17;
  v18 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v13, &qword_1ED6F3770);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v5) = v19(v13, 1, v4);
  sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3770);
  if ((_DWORD)v5 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v20 = 0xD000000000000017;
    v21 = 0x80000001BE1CD110;
    goto LABEL_11;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  sub_1BDD86DEC(v18, (uint64_t)v11, &qword_1ED6F3770);
  result = v19(v11, 1, v4);
  if ((_DWORD)result != 1)
  {
    v23 = a1;
    sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v7, type metadata accessor for Proto_Value);
    swift_retain();
    swift_release();
    v24 = *(_QWORD *)&v7[*(int *)(v4 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v19 = v36;
    sub_1BDD86DEC(v24, (uint64_t)v36, &qword_1ED6F26F0);
    sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Value);
    v25 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v19, 1, v25) == 1)
    {
      sub_1BDD86E30((uint64_t)v19, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        v26 = v34;
        sub_1BDDA2E8C((uint64_t)v19, v34, type metadata accessor for Proto_CustomCRValue);
        v27 = v33;
        sub_1BDD9C318(v26, (uint64_t)v33, type metadata accessor for Proto_CustomCRValue);
        v28 = type metadata accessor for CRStructDecoder();
        v29 = swift_allocObject();
        *(_QWORD *)(v29 + 16) = v23;
        v30 = (unint64_t **)(v29 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
        sub_1BDD9C318((uint64_t)v27, v29 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value, type metadata accessor for Proto_CustomCRValue);
        if (*(_QWORD *)(*v27 + 16))
        {
          swift_retain();
          sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Proto_CustomCRValue);
        }
        else
        {
          v31 = sub_1BDDC47E0(0, *(_QWORD *)(v27[1] + 16));
          swift_retain();
          sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Proto_CustomCRValue);
          *v30 = v31;
          swift_bridgeObjectRelease();
        }
        v35[3] = v28;
        v35[4] = sub_1BDD8422C((unint64_t *)&qword_1ED6F2758, (uint64_t (*)(uint64_t))type metadata accessor for CRStructDecoder, (uint64_t)&unk_1BE1BCA34);
        v35[0] = v29;
        v19 = (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEF9A98(v35);
        swift_release();
        sub_1BDD9C3E0(v26, type metadata accessor for Proto_CustomCRValue);
        return (uint64_t)v19;
      }
      sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v20 = 0xD00000000000001FLL;
    v21 = 0x80000001BE1CE900;
LABEL_11:
    *(_QWORD *)(v20 + 8) = v21;
    *(_BYTE *)(v20 + 16) = 0;
    swift_willThrow();
    swift_release();
    return (uint64_t)v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE183924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t **v33;
  unint64_t *v34;
  uint64_t (*v35)(uint64_t);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v3);
  v42 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Proto_Value(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  v15 = type metadata accessor for Proto_CustomCRValue(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v36 = (_QWORD **)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v37 = (uint64_t)&v36 - v18;
  v19 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v14, &qword_1ED6F3770);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v6) = v20(v14, 1, v5);
  sub_1BDD86E30((uint64_t)v14, &qword_1ED6F3770);
  if ((_DWORD)v6 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v21 = 0xD000000000000017;
    v22 = 0x80000001BE1CD110;
LABEL_11:
    *(_QWORD *)(v21 + 8) = v22;
    *(_BYTE *)(v21 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  sub_1BDD86DEC(v19, (uint64_t)v12, &qword_1ED6F3770);
  result = v20(v12, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v24 = a1;
  sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v8, type metadata accessor for Proto_Value);
  swift_retain();
  swift_release();
  v25 = *(_QWORD *)&v8[*(int *)(v5 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v26 = v42;
  sub_1BDD86DEC(v25, v42, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Value);
  v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27) == 1)
  {
    sub_1BDD86E30(v26, &qword_1ED6F26F0);
LABEL_10:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v21 = 0xD00000000000001FLL;
    v22 = 0x80000001BE1CE900;
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 13)
  {
    sub_1BDD9C3E0(v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  v28 = v26;
  v29 = v37;
  sub_1BDDA2E8C(v28, v37, type metadata accessor for Proto_CustomCRValue);
  v30 = v36;
  sub_1BDD9C318(v29, (uint64_t)v36, type metadata accessor for Proto_CustomCRValue);
  v31 = type metadata accessor for CRStructDecoder();
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v24;
  v33 = (unint64_t **)(v32 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  sub_1BDD9C318((uint64_t)v30, v32 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value, type metadata accessor for Proto_CustomCRValue);
  if (*(_QWORD *)(*v30 + 16))
  {
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v30, type metadata accessor for Proto_CustomCRValue);
  }
  else
  {
    v34 = sub_1BDDC47E0(0, *(_QWORD *)(v30[1] + 16));
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v30, type metadata accessor for Proto_CustomCRValue);
    *v33 = v34;
    swift_bridgeObjectRelease();
  }
  sub_1BE1B1DF0();
  v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v40 = v31;
  v41 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2758, (uint64_t (*)(uint64_t))type metadata accessor for CRStructDecoder, (uint64_t)&unk_1BE1BCA34);
  v39 = v32;
  sub_1BDD8422C(qword_1EF52DE38, v35, MEMORY[0x1E0CB0038]);
  sub_1BE1B2B58();
  swift_release();
  return sub_1BDD9C3E0(v29, type metadata accessor for Proto_CustomCRValue);
}

uint64_t AnyCRValue.visitReferences(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t AnyCRValue.copy(renamingReferences:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 104))();
  *a1 = result;
  return result;
}

uint64_t AnyCRValue.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t inited;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v74 = a2;
  v67 = type metadata accessor for Proto_TaggedValue(0);
  MEMORY[0x1E0C80A78](v67);
  v69 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for Proto_Optional(0);
  MEMORY[0x1E0C80A78](v65);
  v70 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v63);
  v68 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Version(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v62 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v64 = (char *)&v51 - v9;
  v57 = sub_1BE1B1F58();
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v11);
  v77 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Value(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v61 = (char *)&v51 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v53 = (char *)&v51 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v51 - v21;
  v76 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v75 = *(_QWORD *)(v76 - 8);
  v23 = MEMORY[0x1E0C80A78](v76);
  v72 = (uint64_t)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v73 = (uint64_t)&v51 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v27 = MEMORY[0x1E0C80A78](v26);
  v59 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v71 = (char *)&v51 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v60 = (char *)&v51 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v54 = (char *)&v51 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v58 = (char *)&v51 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v51 - v38;
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v51 - v40;
  v42 = a1;
  v43 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v43, (uint64_t)v41, &qword_1ED6F3770);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v14) = v44(v41, 1, v13);
  sub_1BDD86E30((uint64_t)v41, &qword_1ED6F3770);
  if ((_DWORD)v14 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v45 = 0xD000000000000017;
    *(_QWORD *)(v45 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v45 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    v51 = type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v42;
    sub_1BDD86DEC(v43, (uint64_t)v39, &qword_1ED6F3770);
    if (v44(v39, 1, v13) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BE185220);
    }
    sub_1BDDA2E8C((uint64_t)v39, (uint64_t)v22, type metadata accessor for Proto_Value);
    v47 = *(_QWORD *)&v22[*(int *)(v13 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v48 = v77;
    sub_1BDD86DEC(v47, v77, &qword_1ED6F26F0);
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v22, type metadata accessor for Proto_Value);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v48, 1, v76) != 1)
    {
      v49 = v73;
      sub_1BDDA2E8C(v48, v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      sub_1BDD9C318(v49, v72, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      v50 = (char *)&loc_1BE1844D8 + dword_1BE185224[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    swift_release();
    swift_release();
    sub_1BDD86E30(v48, &qword_1ED6F26F0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531718);
    result = swift_allocObject();
    *v74 = result;
  }
  return result;
}

uint64_t AnyCRValue.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

{
  uint64_t v0;
  _QWORD v2[4];
  _QWORD v3[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 80))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1BE1B26CC();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_1BE185288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(void (*)(uint64_t), uint64_t)@<X4>, uint64_t *a6@<X5>, void (*a7)(BOOL, unint64_t, uint64_t)@<X6>, void (*a8)(uint64_t, uint64_t)@<X7>, _QWORD *a9@<X8>, uint64_t *a10, void (*a11)(uint64_t, uint64_t, uint64_t *), uint64_t a12, uint64_t *a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  void (*v77)(BOOL, unint64_t, uint64_t);
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91[3];
  __int128 v92;
  void (*v93)(void (*)(uint64_t), uint64_t);

  v77 = a7;
  v76 = a6;
  v93 = a5;
  v89 = a3;
  v90 = a4;
  v74 = a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  MEMORY[0x1E0C80A78](v16);
  v80 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for Proto_Timestamp(0);
  v79 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v78 = (unint64_t *)((char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for FinalizedTimestamp(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v73 = (uint64_t)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v81 = (uint64_t)&v72 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for Proto_Version(0);
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v82 = (void (**)(uint64_t, uint64_t))((char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1BE1B1F58();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  v34 = *(_QWORD *)(a1 + v87);
  swift_beginAccess();
  v88 = a2;
  v35 = *(_QWORD *)(a2 + 24);
  v36 = *(_QWORD *)(v35 + 16);
  if (!v36 || (v37 = *(_QWORD *)(v34 + 16), v37 >= v36))
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v46 = xmmword_1BE1BB990;
    *(_BYTE *)(v46 + 16) = 0;
    swift_willThrow();
    v93(v89, v90);
    swift_release();
    v47 = a1;
    return sub_1BDD9C3E0(v47, type metadata accessor for Proto_Set);
  }
  v72 = a8;
  (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v33, v35+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v37, v30);
  type metadata accessor for ReplicaState();
  v38 = swift_allocObject();
  v75 = a1;
  v39 = v38 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v40 = type metadata accessor for Replica();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
  v41(v39, 1, 1, v40);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v38 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v33, v30);
  *(_QWORD *)(v38 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v38 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v41((uint64_t)v29, 1, 1, v40);
  swift_beginAccess();
  v42 = v75;
  sub_1BDDA1AF4((uint64_t)v29, v39, &qword_1ED6F43C0);
  swift_endAccess();
  v43 = *(_QWORD *)(v42 + v87)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v43, (uint64_t)v25, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v25, 1, v86) == 1)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    v45 = v82;
    *v82 = MEMORY[0x1E0DEE9D8];
    v45[1] = v44;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v25, &qword_1ED6F37A8);
  }
  else
  {
    v45 = v82;
    sub_1BDDA2E8C((uint64_t)v25, (uint64_t)v82, type metadata accessor for Proto_Version);
  }
  v49 = v88;
  v48 = v89;
  v50 = v84;
  v51 = v83;
  swift_retain();
  sub_1BDDA9DA0(v45, v49, &v92);
  if (v51)
  {
    swift_release();
    v93(v48, v90);
    swift_release();
    v47 = v42;
    return sub_1BDD9C3E0(v47, type metadata accessor for Proto_Set);
  }
  v86 = *((_QWORD *)&v92 + 1);
  v52 = v92;
  v53 = *(_QWORD *)(v42 + v87)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v54 = v53;
  v55 = v80;
  sub_1BDD86DEC(v54, v80, &qword_1ED6F3850);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v55, 1, v50) == 1)
  {
    v56 = v52;
    v57 = v55;
    v58 = v78;
    *v78 = 0;
    v58[1] = 0;
    sub_1BE1B20E4();
    v59 = v57;
    v52 = v56;
    sub_1BDD86E30(v59, &qword_1ED6F3850);
  }
  else
  {
    v60 = v55;
    v58 = v78;
    sub_1BDDA2E8C(v60, (uint64_t)v78, type metadata accessor for Proto_Timestamp);
  }
  v61 = v81;
  swift_retain();
  sub_1BDDAA440(v58, v49, v61);
  v63 = v52;
  swift_beginAccess();
  swift_retain();
  v64 = swift_bridgeObjectRetain();
  v65 = sub_1BE191684(v64, v49, v76, v77, v72);
  swift_bridgeObjectRelease();
  swift_release();
  if (v48)
  {
    v66 = v90;
    swift_retain();
    v48(v65);
    v93(v48, v66);
  }
  v67 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(v65 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a10);
    v67 = sub_1BE1B3260();
  }
  v91[0] = v67;
  a11(v65, 1, v91);
  v87 = v91[0];
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v85 = v91[0];
  v68 = v81;
  v69 = v73;
  sub_1BDD9C318(v81, v73, type metadata accessor for FinalizedTimestamp);
  __swift_instantiateConcreteTypeFromMangledName(a13);
  v70 = (_QWORD *)swift_allocObject();
  swift_retain();
  sub_1BE1B1F4C();
  sub_1BDD9C318(v69, (uint64_t)v70 + qword_1ED6F8B38, type metadata accessor for FinalizedTimestamp);
  swift_release();
  v71 = MEMORY[0x1E0DEE9E0];
  v70[3] = MEMORY[0x1E0DEE9E0];
  v70[4] = v71;
  v70[5] = v71;
  v70[6] = 0;
  v70[2] = v38;
  swift_beginAccess();
  v70[3] = v63;
  v70[4] = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v70[5] = v87;
  swift_bridgeObjectRelease();
  v70[6] = v85;
  sub_1BDD9C3E0(v69, type metadata accessor for FinalizedTimestamp);
  v93(v89, v90);
  swift_release();
  sub_1BDD9C3E0(v75, type metadata accessor for Proto_Set);
  result = sub_1BDD9C3E0(v68, type metadata accessor for FinalizedTimestamp);
  *v74 = v70;
  return result;
}

uint64_t sub_1BE185C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  ValueMetadata *v46;
  void (*v47)(ValueMetadata *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v73 = a2;
  v61 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v4);
  v65 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Proto_Version(0);
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v66 = (uint64_t *)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = type metadata accessor for FinalizedTimestamp(0);
  v7 = MEMORY[0x1E0C80A78](v57);
  v62 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v67 = (uint64_t)&v55 - v9;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  MEMORY[0x1E0C80A78](v59);
  v60 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Proto_CRDT(0);
  v68 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1BE1B1F58();
  v70 = *(_QWORD *)(v17 - 8);
  v71 = v17;
  MEMORY[0x1E0C80A78](v17);
  v74 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Proto_Value(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  v58 = a1;
  v56 = v26;
  v69 = *(_QWORD *)(a1 + v26);
  v27 = v69 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v27, (uint64_t)v21, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_1BE1B20E4();
    v28 = *(int *)(v22 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v25[v28] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v21, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v21, (uint64_t)v25, type metadata accessor for Proto_Value);
  }
  v29 = v73;
  v30 = (uint64_t)v74;
  v31 = v72;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v25, v29);
  swift_release();
  v32 = swift_retain();
  UUID.init(from:)(v32, v30);
  if (v31)
    return swift_release();
  v33 = v69;
  v34 = v69 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v34, (uint64_t)v13, &qword_1ED6F3728);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v13, 1, v14) == 1)
  {
    sub_1BE1B20E4();
    v35 = *(int *)(v14 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)&v16[v35] = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3728);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v16, type metadata accessor for Proto_CRDT);
  }
  swift_retain();
  v36 = sub_1BE17E1C8((uint64_t)v16, v29, &v76);
  v38 = v76;
  if ((_QWORD)v76)
  {
    v39 = (uint64_t)v62;
    v40 = v33;
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 120))(v36);
    v41 = sub_1BDDA2E8C(v39, v67, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v38 + 96))(&v79, v41);
    v42 = (uint64_t)v65;
  }
  else
  {
    if (qword_1ED6EF4D8 != -1)
      swift_once();
    v43 = __swift_project_value_buffer(v57, (uint64_t)qword_1ED6F8A38);
    sub_1BDD9C318(v43, v67, type metadata accessor for FinalizedTimestamp);
    v44 = swift_conformsToProtocol2();
    if (v44)
      v45 = v44;
    else
      v45 = 0;
    if (v44)
      v46 = &type metadata for AnyCRValue;
    else
      v46 = 0;
    if (v46)
    {
      v47 = *(void (**)(ValueMetadata *, uint64_t))(v45 + 16);
      *((_QWORD *)&v77 + 1) = v46;
      v78 = v45;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
      v47(v46, v45);
    }
    else
    {
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
    }
    v42 = (uint64_t)v65;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF4E0);
    if (!swift_dynamicCast())
    {
      result = sub_1BE1B3200();
      __break(1u);
      return result;
    }
    v79 = v75;
    v40 = *(_QWORD *)(v58 + v56);
  }
  v48 = v40 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v48, v42, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v42, 1, v64) == 1)
  {
    v49 = MEMORY[0x1E0DEE9D8];
    v50 = v66;
    *v66 = MEMORY[0x1E0DEE9D8];
    v50[1] = v49;
    sub_1BE1B20E4();
    sub_1BDD86E30(v42, &qword_1ED6F37A8);
  }
  else
  {
    v50 = v66;
    sub_1BDDA2E8C(v42, (uint64_t)v66, type metadata accessor for Proto_Version);
  }
  swift_retain();
  sub_1BDDA9DA0(v50, v29, &v75);
  swift_release();
  swift_release();
  v51 = v59;
  v52 = (uint64_t)v60;
  *(_QWORD *)&v60[*(int *)(v59 + 36)] = v79;
  sub_1BDDA2E8C(v67, v52, type metadata accessor for FinalizedTimestamp);
  *(_OWORD *)(v52 + *(int *)(v51 + 40)) = v75;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C568);
  v54 = v61 + *(int *)(v53 + 48);
  (*(void (**)(void))(v70 + 32))();
  return sub_1BDDA2EF0(v52, v54, &qword_1EF52CFF0);
}

uint64_t sub_1BE18648C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ValueMetadata *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(ValueMetadata *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v68 = a2;
  v58 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v4);
  v61 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for Proto_Version(0);
  v60 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v62 = (uint64_t *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = type metadata accessor for FinalizedTimestamp(0);
  v7 = MEMORY[0x1E0C80A78](v54);
  v59 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v63 = (uint64_t)&v53 - v9;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  MEMORY[0x1E0C80A78](v56);
  v57 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Proto_CRDT(0);
  v64 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Proto_Value(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  v55 = a1;
  v53 = v24;
  v66 = *(_QWORD *)(a1 + v24);
  v25 = v66 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v25, (uint64_t)v19, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_1BE1B20E4();
    v26 = *(int *)(v20 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v23[v26] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v19, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v19, (uint64_t)v23, type metadata accessor for Proto_Value);
  }
  v27 = v67;
  v28 = v68;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v23, v28);
  swift_release();
  v29 = swift_retain();
  AnyCRValue.init(from:)(v29, &v74);
  if (v27)
    return swift_release();
  v30 = v66 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v30, (uint64_t)v13, &qword_1ED6F3728);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v13, 1, v14) == 1)
  {
    sub_1BE1B20E4();
    v31 = *(int *)(v14 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)&v16[v31] = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3728);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v16, type metadata accessor for Proto_CRDT);
  }
  swift_retain();
  v32 = sub_1BE17E1C8((uint64_t)v16, v28, &v70);
  v33 = v65;
  v34 = v70;
  if ((_QWORD)v70)
  {
    v35 = v59;
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 120))(v32);
    v36 = (uint64_t)v35;
    v37 = v66;
    v38 = sub_1BDDA2E8C(v36, v63, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v34 + 96))(&v73, v38);
  }
  else
  {
    if (qword_1ED6EF4D8 != -1)
      swift_once();
    v39 = __swift_project_value_buffer(v54, (uint64_t)qword_1ED6F8A38);
    sub_1BDD9C318(v39, v63, type metadata accessor for FinalizedTimestamp);
    v40 = &type metadata for AnyCRValue;
    v41 = swift_conformsToProtocol2();
    if (v41)
      v42 = v41;
    else
      v42 = 0;
    if (!v41)
      v40 = 0;
    if (v40)
    {
      v43 = *(void (**)(ValueMetadata *, uint64_t))(v42 + 16);
      *((_QWORD *)&v71 + 1) = v40;
      v72 = v42;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v70);
      v43(v40, v42);
    }
    else
    {
      v72 = 0;
      v70 = 0u;
      v71 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF4E0);
    if (!swift_dynamicCast())
    {
      result = sub_1BE1B3200();
      __break(1u);
      return result;
    }
    v73 = v69;
    v37 = *(_QWORD *)(v55 + v53);
  }
  v44 = v37 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  v45 = v61;
  sub_1BDD86DEC(v44, v61, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v45, 1, v33) == 1)
  {
    v46 = MEMORY[0x1E0DEE9D8];
    v47 = v62;
    *v62 = MEMORY[0x1E0DEE9D8];
    v47[1] = v46;
    sub_1BE1B20E4();
    sub_1BDD86E30(v45, &qword_1ED6F37A8);
  }
  else
  {
    v47 = v62;
    sub_1BDDA2E8C(v45, (uint64_t)v62, type metadata accessor for Proto_Version);
  }
  swift_retain();
  sub_1BDDA9DA0(v47, v28, &v69);
  swift_release();
  swift_release();
  v48 = v56;
  v49 = (uint64_t)v57;
  *(_QWORD *)&v57[*(int *)(v56 + 36)] = v73;
  sub_1BDDA2E8C(v63, v49, type metadata accessor for FinalizedTimestamp);
  *(_OWORD *)(v49 + *(int *)(v48 + 40)) = v69;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C538);
  v51 = (uint64_t)v58 + *(int *)(v50 + 48);
  *v58 = v74;
  return sub_1BDDA2EF0(v49, v51, &qword_1EF52CFF0);
}

void AnyCRValue.observableDifference(from:with:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_1BE186CFC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(ValueMetadata *, uint64_t *, uint64_t, _QWORD, ValueMetadata *, _UNKNOWN **);
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v43 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v3);
  v47 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Proto_KeyPath(0);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v48 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v50);
  v45 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_Value(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v53 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v42 - v17;
  v19 = a1;
  v20 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v18, &qword_1ED6F3770);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v11) = v21(v18, 1, v10);
  sub_1BDD86E30((uint64_t)v18, &qword_1ED6F3770);
  if ((_DWORD)v11 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v22 = 0xD000000000000017;
    *(_QWORD *)(v22 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v22 + 16) = 0;
    swift_willThrow();
LABEL_17:
    swift_release();
    return;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = v19;
  sub_1BDD86DEC(v20, (uint64_t)v16, &qword_1ED6F3770);
  if (v21(v16, 1, v10) == 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  v23 = v19;
  v24 = v53;
  sub_1BDDA2E8C((uint64_t)v16, v53, type metadata accessor for Proto_Value);
  v25 = *(_QWORD *)(v24 + *(int *)(v10 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v25, (uint64_t)v8, &qword_1ED6F26F0);
  v26 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v8, 1, v26) == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F26F0);
    v28 = v46;
    v27 = (uint64_t)v47;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v30 = v44;
    v29 = v45;
    if (EnumCaseMultiPayload == 7)
    {
      sub_1BDDA2E8C((uint64_t)v8, v45, type metadata accessor for Proto_Reference);
      v27 = (uint64_t)v47;
      v32 = v48;
      v28 = v46;
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v28 = v46;
    v27 = (uint64_t)v47;
  }
  sub_1BE1B20E4();
  v33 = *(int *)(v50 + 20);
  v32 = v48;
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v29 + v33) = qword_1ED6EFD68;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0(v53, type metadata accessor for Proto_Value);
  v34 = *(_QWORD *)(v29 + *(int *)(v50 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1BDD86DEC(v34, v27, &qword_1ED6F3790);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28) == 1)
  {
    *v32 = MEMORY[0x1E0DEE9D8];
    v32[1] = sub_1BE1B20CC();
    v32[2] = v35;
    sub_1BE1B20E4();
    sub_1BDD86E30(v27, &qword_1ED6F3790);
  }
  else
  {
    sub_1BDDA2E8C(v27, (uint64_t)v32, type metadata accessor for Proto_KeyPath);
  }
  v36 = v49;
  sub_1BDD9C3E0(v29, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1BDDC8ECC((uint64_t)v32);
  if (v36)
  {
    swift_release();
    swift_setDeallocating();
    goto LABEL_17;
  }
  v37 = *(_QWORD *)(v23 + 16);
  if (v37)
  {
    v39 = v51;
    v38 = v52;
    v40 = *(void (**)(ValueMetadata *, uint64_t *, uint64_t, _QWORD, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v37 + 176);
    sub_1BDDB6CA4(v51, v52);
    swift_retain();
    v40(&type metadata for AnyCRDT, &v51, v23, 0, &type metadata for AnyCRDT, &protocol witness table for AnyCRDT);
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v39, v38);
    v41 = v43;
    *v43 = v39;
    v41[1] = v38;
    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_1BE1872C4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BE187314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v33 = a3;
  v30 = a5;
  v31 = a1;
  v6 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (unint64_t *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C568);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v30 - v17;
  v19 = (char *)&v30 + *(int *)(v16 + 48) - v17;
  v20 = sub_1BE1B1F58();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v31, v20);
  sub_1BDD86DEC(v32, (uint64_t)v19, &qword_1EF52CFF0);
  sub_1BDD9C318(v33, (uint64_t)v8, type metadata accessor for Proto_Timestamp);
  swift_retain();
  v22 = v34;
  sub_1BDEFF448(v8, a4, (uint64_t)v11);
  if (v22)
  {
    v23 = &qword_1EF52C568;
    v24 = (uint64_t)v18;
  }
  else
  {
    v25 = (uint64_t)&v15[*(int *)(v12 + 48)];
    v26 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v26(v15, v18, v20);
    sub_1BDDA2EF0((uint64_t)v19, v25, &qword_1EF52CFF0);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C558);
    v28 = v30;
    sub_1BDDA2E8C((uint64_t)v11, (uint64_t)&v30[*(int *)(v27 + 36)], type metadata accessor for Timestamp);
    v26(v28, v15, v20);
    v24 = v25;
    v23 = &qword_1EF52CFF0;
  }
  return sub_1BDD86E30(v24, v23);
}

uint64_t AnyCRDT.finalizeTimestamps(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 144);
  v4 = swift_retain();
  LOBYTE(v3) = v3(v4);
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      *(_QWORD *)v1 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 160))();
      swift_release();
    }
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 152))(a1);
  }
  return result;
}

uint64_t sub_1BE1875B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  objc_class *v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  _QWORD v20[2];
  _QWORD v21[4];

  v2 = v1;
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1F4C();
  if (a1)
  {
    v8 = *(void **)(a1 + qword_1ED6F8B80);
    swift_retain();
    objc_msgSend(v8, sel_copy);
    sub_1BE1B2F3C();
    swift_unknownObjectRelease();
    swift_release_n();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
    swift_dynamicCast();
    *(_QWORD *)(v2 + qword_1ED6F8B80) = v20[1];
  }
  else
  {
    v9 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF531898);
    v10 = objc_msgSend(objc_allocWithZone(v9), sel_init);
    v21[3] = v9;
    v21[0] = v10;
    sub_1BE1B1F4C();
    if (v9)
    {
      v11 = __swift_project_boxed_opaque_existential_1(v21, (uint64_t)v9);
      v12 = *((_QWORD *)v9 - 1);
      MEMORY[0x1E0C80A78](v11);
      v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v14);
      v15 = sub_1BE1B34A0();
      (*(void (**)(char *, objc_class *))(v12 + 8))(v14, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      v15 = 0;
    }
    v16 = objc_allocWithZone((Class)CRTTMergeableString);
    v17 = (void *)sub_1BE1B1F04();
    v18 = objc_msgSend(v16, sel_initWithStorage_uuid_, v15, v17);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v2 + qword_1ED6F8B80) = v18;
  }
  return v2;
}

uint64_t *sub_1BE1877F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v25;
  id v26[2];

  v7 = v5;
  v26[1] = *(id *)MEMORY[0x1E0C80C00];
  v25 = *v7;
  v11 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (char *)v7 + qword_1ED6F8B78;
  sub_1BE1B1F4C();
  sub_1BDD9C318(a1, (uint64_t)v13, type metadata accessor for Proto_Sequence);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  v16 = objc_allocWithZone((Class)type metadata accessor for CRSequenceDecoder(0));
  swift_retain();
  v17 = sub_1BDF0D9A0((uint64_t)v13, a3, a5, v15);
  swift_release();
  swift_release();
  v18 = objc_allocWithZone((Class)CRTTMergeableString);
  v26[0] = 0;
  v19 = objc_msgSend(v18, sel_initWithDecoder_error_, v17, v26, v25);
  if (v19)
  {
    v20 = (uint64_t)v19;
    v21 = v26[0];
    swift_release();

    sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
    *(uint64_t *)((char *)v7 + qword_1ED6F8B80) = v20;
  }
  else
  {
    v22 = v26[0];
    sub_1BE1B1D3C();

    swift_willThrow();
    swift_release();

    sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
    v23 = sub_1BE1B1F58();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v14, v23);
    swift_deallocPartialClassInstance();
  }
  return v7;
}

id sub_1BE187A1C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  objc_class *v5;
  char *v6;
  id result;
  objc_super v8;

  v5 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[qword_1EF52F968] = a1;
  v8.receiver = v6;
  v8.super_class = v5;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v8, sel_init);
  a3[3] = v5;
  *a3 = result;
  return result;
}

id sub_1BE187A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id result;
  objc_class *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_super v27;
  uint64_t v28;
  uint64_t v29;

  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v26 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v23 = a3;
    v29 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1BDE226B4(0, v10, 0);
    v11 = v29;
    v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v13 = *(_QWORD *)(v8 + 72);
    v24 = a1;
    v25 = v13;
    while (1)
    {
      v14 = v26;
      sub_1BDD9C318(v12, v26, type metadata accessor for Proto_Value);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v15 = sub_1BDDB4FC0(v14, a2);
      swift_release();
      AnyCRValue.init(from:)(v15, &v28);
      if (v3)
        break;
      v16 = v28;
      v29 = v11;
      v18 = *(_QWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_1BDE226B4(v17 > 1, v18 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v11 + 16) = v18 + 1;
      *(_QWORD *)(v11 + 8 * v18 + 32) = v16;
      v12 += v25;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        swift_release();
        a3 = v23;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    return (id)swift_release();
  }
  else
  {
LABEL_9:
    v20 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EF531878);
    v21 = (char *)objc_allocWithZone(v20);
    *(_QWORD *)&v21[qword_1EF52F968] = v11;
    v27.receiver = v21;
    v27.super_class = v20;
    result = objc_msgSendSuper2(&v27, sel_init);
    a3[3] = v20;
    *a3 = result;
  }
  return result;
}

uint64_t sub_1BE187CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  __int128 v52;
  uint64_t v53;

  v45 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Proto_Version(0);
  v8 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v48 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BE1B1F58();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  v17 = *(_QWORD *)(a1 + v53);
  swift_beginAccess();
  v18 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19 || (v20 = *(_QWORD *)(v17 + 16), v20 >= v19))
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v31 = xmmword_1BE1BB990;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow();
LABEL_9:
    swift_release();
    return sub_1BDD9C3E0(a1, type metadata accessor for Proto_Set);
  }
  v47 = a2;
  (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v16, v18+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v20, v13);
  type metadata accessor for ReplicaState();
  v21 = swift_allocObject();
  v44 = v8;
  v22 = v21;
  v23 = v21 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v24 = type metadata accessor for Replica();
  v46 = a1;
  v25 = v24;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v26(v23, 1, 1, v24);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v16, v13);
  *(_QWORD *)(v22 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v27 = v25;
  a1 = v46;
  v26((uint64_t)v12, 1, 1, v27);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v12, v23, &qword_1ED6F43C0);
  swift_endAccess();
  v28 = *(_QWORD *)(a1 + v53)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v28, (uint64_t)v7, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v7, 1, v49) == 1)
  {
    v29 = MEMORY[0x1E0DEE9D8];
    v30 = v48;
    *v48 = MEMORY[0x1E0DEE9D8];
    v30[1] = v29;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F37A8);
  }
  else
  {
    v30 = v48;
    sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v48, type metadata accessor for Proto_Version);
  }
  v32 = v47;
  swift_retain();
  v33 = v50;
  sub_1BDDA9DA0(v30, v32, &v52);
  if (v33)
  {
    swift_release();
    goto LABEL_9;
  }
  v35 = v52;
  swift_beginAccess();
  swift_retain();
  v36 = swift_bridgeObjectRetain();
  v37 = (_QWORD *)sub_1BE191558(v36, v32);
  swift_bridgeObjectRelease();
  swift_release();
  v38 = MEMORY[0x1E0DEE9E0];
  if (v37[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFE8);
    v39 = sub_1BE1B3260();
  }
  else
  {
    v39 = MEMORY[0x1E0DEE9E0];
  }
  v51[0] = v39;
  sub_1BE19024C(v37, 1, v51);
  v40 = v51[0];
  v41 = v38;
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v53 = v51[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531830);
  v42 = (_QWORD *)swift_allocObject();
  v42[3] = v41;
  v42[4] = v41;
  v42[5] = v41;
  v42[6] = 0;
  v42[2] = v22;
  swift_beginAccess();
  *(_OWORD *)(v42 + 3) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v42[5] = v40;
  swift_bridgeObjectRelease();
  v42[6] = v53;
  swift_release();
  result = sub_1BDD9C3E0(v46, type metadata accessor for Proto_Set);
  *v45 = v42;
  return result;
}

double sub_1BE1882C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  double v32[3];
  uint64_t v33;

  v33 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Version(0);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  MEMORY[0x1E0C80A78](v8);
  v30 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Value(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  v18 = v17 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v12, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1BE1B20E4();
    v19 = *(int *)(v13 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v16[v19] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v16, type metadata accessor for Proto_Value);
  }
  v20 = v33;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v16, a2);
  swift_release();
  v21 = swift_retain();
  v22 = v31;
  AnyCRValue.init(from:)(v21, (uint64_t *)v20);
  if (v22)
  {
    swift_release();
  }
  else
  {
    v23 = v17
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
    swift_beginAccess();
    sub_1BDD86DEC(v23, (uint64_t)v7, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v7, 1, v29) == 1)
    {
      v24 = MEMORY[0x1E0DEE9D8];
      v25 = v30;
      *v30 = MEMORY[0x1E0DEE9D8];
      v25[1] = v24;
      sub_1BE1B20E4();
      sub_1BDD86E30((uint64_t)v7, &qword_1ED6F37A8);
    }
    else
    {
      v25 = v30;
      sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v30, type metadata accessor for Proto_Version);
    }
    swift_retain();
    sub_1BDDA9DA0(v25, a2, v32);
    swift_release();
    result = v32[0];
    *(_OWORD *)(v20 + 8) = *(_OWORD *)v32;
  }
  return result;
}

uint64_t sub_1BE188604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56[3];
  __int128 v57;
  uint64_t v58;

  v50 = a2;
  v48 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Proto_Version(0);
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v55 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1BE1B1F58();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  v19 = *(_QWORD *)(a1 + v53);
  swift_beginAccess();
  v20 = *(_QWORD *)(a4 + 24);
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21 || (v22 = *(_QWORD *)(v19 + 16), v22 >= v21))
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v32 = xmmword_1BE1BB990;
    *(_BYTE *)(v32 + 16) = 0;
    swift_willThrow();
LABEL_9:
    swift_release();
    return sub_1BDD9C3E0(a1, type metadata accessor for Proto_Set);
  }
  v47 = a3;
  v51 = a4;
  (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, v20+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v22, v15);
  type metadata accessor for ReplicaState();
  v23 = swift_allocObject();
  v24 = v23 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v25 = type metadata accessor for Replica();
  v49 = a1;
  v26 = v25;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v27(v24, 1, 1, v25);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v18, v15);
  *(_QWORD *)(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v28 = v26;
  a1 = v49;
  v27((uint64_t)v14, 1, 1, v28);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v14, v24, &qword_1ED6F43C0);
  swift_endAccess();
  v29 = *(_QWORD *)(a1 + v53)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v29, (uint64_t)v10, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v10, 1, v54) == 1)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    v31 = v55;
    *v55 = MEMORY[0x1E0DEE9D8];
    v31[1] = v30;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v10, &qword_1ED6F37A8);
  }
  else
  {
    v31 = v55;
    sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v55, type metadata accessor for Proto_Version);
  }
  v33 = v51;
  v34 = v58;
  swift_retain();
  sub_1BDDA9DA0(v31, v33, &v57);
  if (v34)
  {
    swift_release();
    goto LABEL_9;
  }
  v36 = v23;
  v37 = v57;
  v38 = swift_beginAccess();
  MEMORY[0x1E0C80A78](v38);
  v39 = v47;
  *(&v46 - 2) = v50;
  *(&v46 - 1) = v39;
  v40 = swift_bridgeObjectRetain();
  v41 = sub_1BE1917F8(v40, (void (*)(__int128 *, char *, _QWORD, char *))sub_1BDFC5D74, (uint64_t)(&v46 - 4));
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(v41 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFE8);
    v43 = sub_1BE1B3260();
  }
  else
  {
    v43 = MEMORY[0x1E0DEE9E0];
  }
  v56[0] = v43;
  sub_1BE191A78(v41, 1, v56);
  swift_bridgeObjectRelease();
  v58 = v56[0];
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v44 = v56[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531830);
  v45 = (_QWORD *)swift_allocObject();
  v45[3] = v42;
  v45[4] = v42;
  v45[5] = v42;
  v45[6] = 0;
  v45[2] = v36;
  swift_beginAccess();
  *(_OWORD *)(v45 + 3) = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v45[5] = v58;
  swift_bridgeObjectRelease();
  v45[6] = v44;
  swift_release();
  result = sub_1BDD9C3E0(v49, type metadata accessor for Proto_Set);
  *v48 = v45;
  return result;
}

uint64_t AnyCRValue.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for CRValueBoxHelper(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 200) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 224), a1);
  *a5 = v7;
  return result;
}

uint64_t sub_1BE188CB0(int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(unint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  id v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  _QWORD *v80;
  uint64_t *v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  int isUniquelyReferenced_nonNull_native;
  char v108;
  unint64_t v109;
  uint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  char v115;
  _QWORD *v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  int v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  char v126;
  unint64_t v127;
  char v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  id v133;
  char **v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  unint64_t v150;
  char v151;
  void (*v152)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  int v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t *v181;
  _QWORD *v182;
  unint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t *v188;
  char isUniquelyReferenced_native;
  uint64_t v190;
  char **v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t (*v194)(uint64_t);
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  uint64_t v199;
  char **v200;
  void (*v201)(_QWORD **, _QWORD);
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  id v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t (*v211)(uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(_QWORD **, _QWORD);
  uint64_t *v219;
  uint64_t v220;
  int64_t v221;
  int64_t v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  int v226;
  int64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  uint64_t v237;
  void (*v238)(unint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v239;
  unint64_t *v240;
  uint64_t v241;
  char **v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t *v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;

  v246 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF768);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char **)((char *)&v238 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF760);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v238 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v247 = (char *)&v238 - v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v238 - v11;
  v254 = type metadata accessor for Replica();
  v13 = MEMORY[0x1E0C80A78](v254);
  v15 = (char *)&v238 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v253 = (uint64_t)&v238 - v16;
  v271 = type metadata accessor for Timestamp(0);
  v277 = *(_QWORD *)(v271 - 8);
  v17 = MEMORY[0x1E0C80A78](v271);
  v258 = (char *)&v238 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v250 = (uint64_t)&v238 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v251 = (uint64_t)&v238 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v265 = (uint64_t)&v238 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v238 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v257 = (uint64_t)&v238 - v29;
  MEMORY[0x1E0C80A78](v28);
  v256 = (uint64_t)&v238 - v30;
  v267 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF740);
  MEMORY[0x1E0C80A78](v267);
  v276 = (uint64_t)&v238 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF738);
  v33 = MEMORY[0x1E0C80A78](v32);
  v273 = (uint64_t)&v238 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v261 = (uint64_t)&v238 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v264 = (uint64_t)&v238 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v272 = (uint64_t)&v238 - v40;
  MEMORY[0x1E0C80A78](v39);
  v260 = (uint64_t)&v238 - v41;
  v282 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3F8);
  v281 = *(_QWORD *)(v282 - 8);
  v42 = MEMORY[0x1E0C80A78](v282);
  v275 = (uint64_t)&v238 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42);
  v266 = (uint64_t *)((char *)&v238 - v45);
  MEMORY[0x1E0C80A78](v44);
  v279 = (uint64_t *)((char *)&v238 - v46);
  v270 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5318A0);
  v269 = *(_QWORD *)(v270 - 8);
  MEMORY[0x1E0C80A78](v270);
  v259 = (char *)&v238 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5318A8);
  v49 = MEMORY[0x1E0C80A78](v48);
  v280 = (void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))((char *)&v238
                                                                            - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v49);
  v268 = (uint64_t *)((char *)&v238 - v51);
  v249 = sub_1BE1B206C();
  v248 = *(_QWORD *)(v249 - 8);
  result = MEMORY[0x1E0C80A78](v249);
  v54 = (char *)&v238 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = v1;
  if (!*v1)
    return result;
  v55 = objc_msgSend(*(id *)(*v1 + qword_1ED6F8B80), sel_attributedString);
  v245 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531898);
  v56 = (uint64_t *)(swift_dynamicCastClassUnconditional() + qword_1EF52F968);
  swift_beginAccess();
  v57 = *v56;
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  v58 = *(_QWORD *)(v57 + 16);
  result = swift_bridgeObjectRelease();
  if (!v58)
    return result;
  v255 = v27;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531688);
  v60 = v263;
  v61 = (uint64_t)v263 + *(int *)(v59 + 48);
  sub_1BDD86E30(v61, &qword_1EF531888);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531880);
  v63 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v62 - 8) + 56);
  v240 = (unint64_t *)v61;
  v239 = v62;
  v238 = (void (*)(unint64_t *, _QWORD, uint64_t, uint64_t))v63;
  v63(v61, 1, 1);
  v284 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v64 = *v60;
  if (*v60)
  {
    objc_msgSend(objc_msgSend(*(id *)(v64 + qword_1ED6F8B80), sel_attributedString), sel_length);
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF5318B0);
    sub_1BE1B25D0();
    v65 = objc_msgSend(*(id *)(v64 + qword_1ED6F8B80), sel_attributedString);
    v66 = (uint64_t *)(swift_dynamicCastClassUnconditional() + qword_1EF52F968);
    swift_beginAccess();
    v67 = *v66;
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF5318B0);
    sub_1BE1B25D0();
    v67 = MEMORY[0x1E0DEE9D8];
  }
  v68 = *(_QWORD *)(v67 + 16);
  v278 = v8;
  v262 = v54;
  v252 = v15;
  v243 = v5;
  v242 = v4;
  if (v68)
  {
    v69 = (*(unsigned __int8 *)(v281 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v281 + 80);
    v241 = v67;
    v70 = v67 + v69;
    v71 = &qword_1EF52C3F8;
    v274 = *(_QWORD *)(v281 + 72);
    v72 = v271;
    v73 = (uint64_t)v258;
    v74 = (uint64_t *)v275;
    do
    {
      v75 = v71;
      sub_1BDD86DEC(v70, (uint64_t)v74, v71);
      v76 = v263[1];
      v77 = *v74;
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)(v76 + 40) + 16))
        goto LABEL_10;
      swift_bridgeObjectRetain();
      sub_1BDE5E140(v77);
      v79 = v78;
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0)
        goto LABEL_10;
      v80 = v284;
      v81 = (uint64_t *)v275;
      if (!v284[2])
        goto LABEL_22;
      v82 = sub_1BDE5E140(v77);
      if ((v83 & 1) == 0)
        goto LABEL_19;
      v84 = v80[7];
      v244 = *(_QWORD *)(v277 + 72);
      v85 = v81;
      v86 = v251;
      sub_1BDD9C318(v84 + v244 * v82, v251, type metadata accessor for Timestamp);
      v87 = v86;
      v88 = v265;
      sub_1BDDA2E8C(v87, v265, type metadata accessor for Timestamp);
      v89 = v88;
      v90 = (uint64_t)v85 + *(int *)(v282 + 36);
      v91 = *(int *)(v72 + 20);
      v92 = *(_QWORD *)(v89 + v91);
      v93 = *(_QWORD *)(v90 + v91);
      v94 = v92 < v93;
      if (v92 == v93
        && (v95 = *(int *)(v254 + 20),
            v96 = *(_QWORD *)(v89 + v95),
            v97 = *(_QWORD *)(v90 + v95),
            v94 = v96 < v97,
            v96 == v97))
      {
        v98 = sub_1BDDB2BF8();
        v89 = v265;
        if ((v98 & 1) == 0)
          goto LABEL_18;
      }
      else if (!v94)
      {
LABEL_18:
        sub_1BDD9C3E0(v89, type metadata accessor for Timestamp);
        v73 = (uint64_t)v258;
        v81 = (uint64_t *)v275;
LABEL_19:
        if (v80[2])
        {
          v99 = sub_1BDE5E140(*v81);
          if ((v100 & 1) != 0)
          {
            v101 = v80[7];
            v102 = v277;
            v103 = v273;
            sub_1BDD9C318(v101 + *(_QWORD *)(v277 + 72) * v99, v273, type metadata accessor for Timestamp);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v102 + 56))(v103, 0, 1, v72);
            sub_1BDD86E30(v103, &qword_1ED6EF738);
            goto LABEL_10;
          }
        }
LABEL_22:
        v104 = v273;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v277 + 56))(v273, 1, 1, v72);
        sub_1BDD86E30(v104, &qword_1ED6EF738);
        v105 = *v81;
        sub_1BDD9C318((uint64_t)v81 + *(int *)(v282 + 36), v73, type metadata accessor for Timestamp);
        swift_retain();
        v106 = v284;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v283 = v106;
        v109 = sub_1BDE5E140(v105);
        v110 = v106[2];
        v111 = (v108 & 1) == 0;
        v112 = v110 + v111;
        if (__OFADD__(v110, v111))
          goto LABEL_129;
        v113 = v108;
        if (v106[3] >= v112)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1BDE64B48();
        }
        else
        {
          sub_1BDE6018C(v112, isUniquelyReferenced_nonNull_native);
          v114 = sub_1BDE5E140(v105);
          if ((v113 & 1) != (v115 & 1))
            goto LABEL_135;
          v109 = v114;
        }
        v72 = v271;
        v116 = v283;
        if ((v113 & 1) != 0)
        {
          sub_1BE1922D0(v73, v283[7] + *(_QWORD *)(v277 + 72) * v109);
        }
        else
        {
          v283[(v109 >> 6) + 8] |= 1 << v109;
          *(_QWORD *)(v116[6] + 8 * v109) = v105;
          sub_1BDDA2E8C(v73, v116[7] + *(_QWORD *)(v277 + 72) * v109, type metadata accessor for Timestamp);
          v117 = v116[2];
          v118 = __OFADD__(v117, 1);
          v119 = v117 + 1;
          if (v118)
            goto LABEL_130;
          v116[2] = v119;
          swift_retain();
        }
        v284 = v116;
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      sub_1BDD9C318(v90, v250, type metadata accessor for Timestamp);
      swift_retain();
      v120 = swift_isUniquelyReferenced_nonNull_native();
      v283 = v80;
      v122 = sub_1BDE5E140(v77);
      v123 = v80[2];
      v124 = (v121 & 1) == 0;
      v125 = v123 + v124;
      if (__OFADD__(v123, v124))
        goto LABEL_131;
      v126 = v121;
      if (v80[3] >= v125)
      {
        if ((v120 & 1) == 0)
          sub_1BDE64B48();
      }
      else
      {
        sub_1BDE6018C(v125, v120);
        v127 = sub_1BDE5E140(v77);
        if ((v126 & 1) != (v128 & 1))
          goto LABEL_135;
        v122 = v127;
      }
      v72 = v271;
      v129 = v283;
      if ((v126 & 1) != 0)
      {
        sub_1BE1922D0(v250, v283[7] + v122 * v244);
      }
      else
      {
        v283[(v122 >> 6) + 8] |= 1 << v122;
        *(_QWORD *)(v129[6] + 8 * v122) = v77;
        sub_1BDDA2E8C(v250, v129[7] + v122 * v244, type metadata accessor for Timestamp);
        v130 = v129[2];
        v118 = __OFADD__(v130, 1);
        v131 = v130 + 1;
        if (v118)
          goto LABEL_132;
        v129[2] = v131;
        swift_retain();
      }
      v73 = (uint64_t)v258;
      v284 = v129;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0(v265, type metadata accessor for Timestamp);
LABEL_10:
      v74 = (uint64_t *)v275;
      v71 = v75;
      sub_1BDD86E30(v275, v75);
      v70 += v274;
      --v68;
    }
    while (v68);
  }
  swift_bridgeObjectRelease();
  sub_1BE1B2060();
  v132 = (_QWORD *)v277;
  if (*v263)
  {
    v133 = objc_msgSend(*(id *)(*v263 + qword_1ED6F8B80), sel_attributedString);
    v134 = (char **)(swift_dynamicCastClassUnconditional() + qword_1EF52F968);
    swift_beginAccess();
    v135 = *v134;
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
  }
  else
  {
    v135 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v136 = v271;
  v137 = v260;
  v138 = v270;
  v139 = v280;
  LODWORD(v275) = 0;
  v140 = 0;
  v258 = v135;
  v141 = *((_QWORD *)v135 + 2);
  v142 = v279;
  v265 = v141;
  if (v141)
    goto LABEL_50;
LABEL_52:
  v145 = 1;
  v274 = v141;
  while (1)
  {
    v146 = v269;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v269 + 56))(v139, v145, 1, v138);
    v147 = (uint64_t)v139;
    v148 = v268;
    sub_1BDDA2EF0(v147, (uint64_t)v268, &qword_1EF5318A8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v146 + 48))(v148, 1, v138) == 1)
      break;
    v273 = *v148;
    sub_1BDDA2EF0((uint64_t)v148 + *(int *)(v138 + 48), (uint64_t)v142, &qword_1EF52C3F8);
    v149 = v284;
    if (v284[2] && (v150 = sub_1BDE5E140(*v142), (v151 & 1) != 0))
    {
      sub_1BDD9C318(v149[7] + v132[9] * v150, v137, type metadata accessor for Timestamp);
      v152 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v132[7];
      v152(v137, 0, 1, v136);
    }
    else
    {
      v152 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v132[7];
      v152(v137, 1, 1, v136);
    }
    v153 = v137;
    v154 = v272;
    sub_1BDD9C318((uint64_t)v279 + *(int *)(v282 + 36), v272, type metadata accessor for Timestamp);
    v152(v154, 0, 1, v136);
    v155 = v276;
    v156 = v276 + *(int *)(v267 + 48);
    sub_1BDD86DEC(v153, v276, &qword_1ED6EF738);
    sub_1BDD86DEC(v154, v156, &qword_1ED6EF738);
    v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v132[6];
    if (v157(v155, 1, v136) == 1)
    {
      sub_1BDD86E30(v154, &qword_1ED6EF738);
      sub_1BDD86E30(v153, &qword_1ED6EF738);
      v158 = v157(v156, 1, v136);
      v159 = &qword_1ED6EF740;
      v137 = v153;
      v160 = v266;
      if (v158 == 1)
      {
        v161 = v274;
        sub_1BDD86E30(v276, &qword_1ED6EF738);
        goto LABEL_71;
      }
      goto LABEL_69;
    }
    v162 = v155;
    v163 = v264;
    sub_1BDD86DEC(v162, v264, &qword_1ED6EF738);
    v164 = v157(v156, 1, v136);
    v159 = &qword_1ED6EF740;
    v160 = v266;
    if (v164 == 1)
      goto LABEL_68;
    v165 = v256;
    sub_1BDDA2E8C(v156, v256, type metadata accessor for Timestamp);
    v166 = *(int *)(v271 + 20);
    v167 = *(_QWORD *)(v163 + v166);
    v168 = v163;
    v169 = v165;
    v170 = *(_QWORD *)(v165 + v166);
    v171 = v257;
    sub_1BDD9C318(v168, v257, type metadata accessor for Timestamp);
    v172 = (uint64_t)v255;
    sub_1BDD9C318(v169, (uint64_t)v255, type metadata accessor for Timestamp);
    if (v167 != v170)
      goto LABEL_67;
    v173 = *(int *)(v254 + 20);
    v174 = *(_QWORD *)(v171 + v173);
    v175 = v171;
    v176 = *(_QWORD *)(v172 + v173);
    v177 = v253;
    sub_1BDD9C318(v175, v253, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v178 = (uint64_t)v252;
    sub_1BDD9C318(v172, (uint64_t)v252, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v174 != v176)
    {
      sub_1BDD9C3E0(v178, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDD9C3E0(v177, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v171 = v257;
      v169 = v256;
LABEL_67:
      sub_1BDD9C3E0(v172, type metadata accessor for Timestamp);
      sub_1BDD9C3E0(v171, type metadata accessor for Timestamp);
      sub_1BDD9C3E0(v169, type metadata accessor for Timestamp);
      v159 = &qword_1ED6EF738;
      v163 = v264;
LABEL_68:
      sub_1BDD86E30(v272, &qword_1ED6EF738);
      v137 = v260;
      sub_1BDD86E30(v260, &qword_1ED6EF738);
      sub_1BDD9C3E0(v163, type metadata accessor for Timestamp);
LABEL_69:
      v161 = v274;
      sub_1BDD86E30(v276, v159);
LABEL_70:
      sub_1BE1B1FF4();
      goto LABEL_71;
    }
    v179 = v177;
    v161 = v274;
    v180 = sub_1BE1B1F10();
    sub_1BDD9C3E0(v178, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v179, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v172, type metadata accessor for Timestamp);
    sub_1BDD9C3E0(v257, type metadata accessor for Timestamp);
    sub_1BDD9C3E0(v256, type metadata accessor for Timestamp);
    sub_1BDD86E30(v272, &qword_1ED6EF738);
    v137 = v260;
    sub_1BDD86E30(v260, &qword_1ED6EF738);
    sub_1BDD9C3E0(v264, type metadata accessor for Timestamp);
    sub_1BDD86E30(v276, &qword_1ED6EF738);
    if ((v180 & 1) == 0)
      goto LABEL_70;
LABEL_71:
    v181 = v279;
    sub_1BDD86DEC((uint64_t)v279, (uint64_t)v160, &qword_1EF52C3F8);
    v136 = v271;
    if ((v275 & 1) != 0)
    {
      sub_1BDD86E30((uint64_t)v160, &qword_1EF52C3F8);
      sub_1BDD86E30((uint64_t)v181, &qword_1EF52C3F8);
      LODWORD(v275) = 1;
      v132 = (_QWORD *)v277;
      v142 = v181;
      v138 = v270;
      v139 = v280;
      v141 = v265;
      v140 = v161;
      if (v161 == v265)
        goto LABEL_52;
    }
    else
    {
      v182 = v284;
      if (v284[2])
      {
        v183 = sub_1BDE5E140(*v160);
        v140 = v161;
        if ((v184 & 1) != 0)
        {
          sub_1BDD9C318(v182[7] + *(_QWORD *)(v277 + 72) * v183, v261, type metadata accessor for Timestamp);
          v185 = 0;
        }
        else
        {
          v185 = 1;
        }
      }
      else
      {
        v185 = 1;
        v140 = v161;
      }
      v186 = v261;
      v152(v261, v185, 1, v136);
      sub_1BDD86E30((uint64_t)v160, &qword_1EF52C3F8);
      v142 = v279;
      sub_1BDD86E30((uint64_t)v279, &qword_1EF52C3F8);
      LODWORD(v275) = v157(v186, 1, v136) == 1;
      sub_1BDD86E30(v186, &qword_1ED6EF738);
      v132 = (_QWORD *)v277;
      v138 = v270;
      v139 = v280;
      v141 = v265;
      if (v140 == v265)
        goto LABEL_52;
    }
LABEL_50:
    if (v140 >= *((_QWORD *)v258 + 2))
      goto LABEL_128;
    v143 = (uint64_t)&v259[*(int *)(v138 + 48)];
    sub_1BDD86DEC((uint64_t)&v258[((*(unsigned __int8 *)(v281 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v281 + 80))+ *(_QWORD *)(v281 + 72) * v140], v143, &qword_1EF52C3F8);
    v144 = (uint64_t)v280 + *(int *)(v138 + 48);
    *v280 = v140;
    sub_1BDDA2EF0(v143, v144, &qword_1EF52C3F8);
    v139 = v280;
    v145 = 0;
    v274 = v140 + 1;
    v132 = (_QWORD *)v277;
  }
  swift_bridgeObjectRelease();
  v187 = v262;
  if ((sub_1BE1B200C() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v248 + 8))(v187, v249);
    return swift_bridgeObjectRelease();
  }
  if (((v246 | v275) & 1) == 0)
  {
    v199 = v243;
    v200 = v242;
    if (*v263)
    {
      v206 = objc_msgSend(*(id *)(*v263 + qword_1ED6F8B80), sel_attributedString);
      v207 = (unint64_t *)(swift_dynamicCastClassUnconditional() + qword_1EF52F968);
      swift_beginAccess();
      v208 = *v207;
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
    }
    else
    {
LABEL_95:
      v208 = MEMORY[0x1E0DEE9D8];
    }
    v209 = (uint64_t)v278;
    sub_1BE1B2054();
    v210 = sub_1BE1B203C();
    v211 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
    v212 = *(_QWORD *)(v210 - 8);
    v213 = (uint64_t)v247;
    (*(void (**)(char *, char **, uint64_t))(v212 + 16))(v247, v200, v210);
    sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v211, MEMORY[0x1E0CB1378]);
    sub_1BE1B2C90();
    (*(void (**)(char **, uint64_t))(v212 + 8))(v200, v210);
    *(_QWORD *)(v213 + *(int *)(v199 + 36)) = v283;
    sub_1BDDA2EF0(v213, v209, &qword_1ED6EF760);
    v214 = (uint64_t *)(v209 + *(int *)(v199 + 36));
    v215 = (_QWORD *)*v214;
    sub_1BE1B2C60();
    if (v215 == v283)
    {
LABEL_120:
      sub_1BDD86E30(v209, &qword_1ED6EF760);
      v236 = v240;
      sub_1BDD86E30((uint64_t)v240, &qword_1EF531888);
      *v236 = v208;
      v237 = v239;
      (*(void (**)(char *, char *, uint64_t))(v248 + 32))((char *)v236 + *(int *)(v239 + 44), v262, v249);
      v238(v236, 0, 1, v237);
      return swift_bridgeObjectRelease();
    }
    v280 = (_QWORD *)sub_1BDD8422C(qword_1EF52D9E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1368]);
    v279 = v214;
    while (1)
    {
      sub_1BE1B26F0();
      v217 = v210;
      v218 = (void (*)(_QWORD **, _QWORD))sub_1BE1B2D14();
      v220 = *v219;
      v221 = v219[1];
      v218(&v283, 0);
      if (v220 < 0)
        break;
      v222 = *(_QWORD *)(v208 + 16);
      if (v222 < v221)
        goto LABEL_122;
      v223 = v221 - v220;
      if (__OFSUB__(v221, v220))
        goto LABEL_123;
      v224 = v220 - v221;
      if (__OFSUB__(0, v223))
        goto LABEL_124;
      v225 = v222 - v223;
      if (__OFADD__(v222, v224))
        goto LABEL_125;
      v226 = swift_isUniquelyReferenced_nonNull_native();
      if (!v226 || v225 > *(_QWORD *)(v208 + 24) >> 1)
      {
        if (v222 <= v225)
          v227 = v222 + v224;
        else
          v227 = v222;
        v208 = sub_1BDE0679C(v226, v227, 1, v208);
      }
      v228 = v208 + ((*(unsigned __int8 *)(v281 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v281 + 80));
      v229 = *(_QWORD *)(v281 + 72);
      v230 = v229 * v220;
      v231 = v228 + v229 * v220;
      swift_arrayDestroy();
      if (v223)
      {
        v232 = *(_QWORD *)(v208 + 16);
        v233 = v232 - v221;
        if (__OFSUB__(v232, v221))
          goto LABEL_126;
        if (v233 < 0)
          goto LABEL_134;
        if (v230 < v229 * v221 || v231 >= v228 + v229 * v221 + v233 * v229)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v230 != v229 * v221)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v234 = *(_QWORD *)(v208 + 16);
        v118 = __OFADD__(v234, v224);
        v235 = v234 - v223;
        if (v118)
          goto LABEL_127;
        *(_QWORD *)(v208 + 16) = v235;
      }
      v216 = *v279;
      v209 = (uint64_t)v278;
      v210 = v217;
      sub_1BE1B2C60();
      if ((_QWORD *)v216 == v283)
        goto LABEL_120;
    }
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v188 = v263;
  isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
  v190 = v243;
  v191 = v242;
  if ((isUniquelyReferenced_native & 1) == 0)
  {
    v192 = *v188;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531890);
    swift_allocObject();
    *v188 = sub_1BE1875B8(v192);
  }
  sub_1BE1B2054();
  v193 = sub_1BE1B203C();
  v194 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
  v195 = *(_QWORD *)(v193 - 8);
  v196 = (uint64_t)v247;
  (*(void (**)(char *, char **, uint64_t))(v195 + 16))(v247, v191, v193);
  sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v194, MEMORY[0x1E0CB1378]);
  sub_1BE1B2C90();
  (*(void (**)(char **, uint64_t))(v195 + 8))(v191, v193);
  *(_QWORD *)(v196 + *(int *)(v190 + 36)) = v283;
  sub_1BDDA2EF0(v196, (uint64_t)v12, &qword_1ED6EF760);
  v197 = &v12[*(int *)(v190 + 36)];
  v198 = *(_QWORD **)v197;
  sub_1BE1B2C60();
  if (v198 == v283)
  {
LABEL_91:
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6EF760);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v262, v249);
    return swift_bridgeObjectRelease();
  }
  v199 = sub_1BDD8422C(qword_1EF52D9E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1368]);
  v200 = &off_1E776D000;
  while (1)
  {
    sub_1BE1B26F0();
    v201 = (void (*)(_QWORD **, _QWORD))sub_1BE1B2D14();
    v203 = *v202;
    v204 = v202[1];
    v201(&v283, 0);
    if (!*v188)
      break;
    if (__OFSUB__(v204, v203))
    {
      __break(1u);
      goto LABEL_95;
    }
    objc_msgSend(*(id *)(*v188 + qword_1ED6F8B80), sel_removeObjectsInRange_, v203, v204 - v203);
    v205 = *(_QWORD **)v197;
    sub_1BE1B2C60();
    if (v205 == v283)
      goto LABEL_91;
  }
LABEL_133:
  __break(1u);
LABEL_134:
  sub_1BE1B326C();
  __break(1u);
LABEL_135:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BE18A7A0(unint64_t *a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  _OWORD *v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;

  v63 = a5;
  v52 = a7;
  v58 = a6;
  v59 = a3;
  v51 = a2;
  v50 = a1;
  v8 = type metadata accessor for Proto_Timestamp(0);
  v55 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v56 = (unint64_t *)((char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v10);
  v57 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3F8);
  v49 = *(_QWORD *)(v48 - 8);
  v12 = MEMORY[0x1E0C80A78](v48);
  v53 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v54 = (unint64_t *)((char *)&v48 - v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Proto_Version(0);
  v60 = *(_QWORD *)(v18 - 8);
  v61 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (uint64_t *)((char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Proto_Value(0);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a4 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  v29 = v28 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v29, (uint64_t)v23, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_1BE1B20E4();
    v30 = *(int *)(v24 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v27[v30] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v23, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v23, (uint64_t)v27, type metadata accessor for Proto_Value);
  }
  v31 = v63;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v27, v31);
  swift_release();
  v32 = swift_retain();
  v33 = v62;
  AnyCRValue.init(from:)(v32, (uint64_t *)&v65);
  if (v33)
    return swift_release();
  v34 = v28 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v34, (uint64_t)v17, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v17, 1, v61) == 1)
  {
    v35 = MEMORY[0x1E0DEE9D8];
    *v20 = MEMORY[0x1E0DEE9D8];
    v20[1] = v35;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v17, &qword_1ED6F37A8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v17, (uint64_t)v20, type metadata accessor for Proto_Version);
  }
  swift_retain();
  sub_1BDDA9DA0(v20, v31, &v64);
  v37 = v64;
  v38 = v65;
  v39 = *(_QWORD *)(v58 + *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20))
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps;
  swift_beginAccess();
  if ((v59 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (*(_QWORD *)(*(_QWORD *)v39 + 16) <= v59)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v40 = v56;
  sub_1BDD9C318(*(_QWORD *)v39+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v59, (uint64_t)v56, type metadata accessor for Proto_Timestamp);
  swift_retain();
  swift_retain();
  v41 = v57;
  sub_1BDEFF448(v40, v31, v57);
  v42 = v41;
  v43 = v54;
  *v54 = v38;
  sub_1BDDA2E8C(v42, (uint64_t)v43 + *(int *)(v48 + 36), type metadata accessor for Timestamp);
  sub_1BDD86DEC((uint64_t)v43, v53, &qword_1EF52C3F8);
  v44 = v52;
  v38 = *v52;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v44 = v38;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_20:
    v38 = sub_1BDE0679C(0, *(_QWORD *)(v38 + 16) + 1, 1, v38);
    *v52 = v38;
  }
  v47 = *(_QWORD *)(v38 + 16);
  v46 = *(_QWORD *)(v38 + 24);
  if (v47 >= v46 >> 1)
  {
    v38 = sub_1BDE0679C(v46 > 1, v47 + 1, 1, v38);
    *v52 = v38;
  }
  *(_QWORD *)(v38 + 16) = v47 + 1;
  sub_1BDDA2EF0(v53, v38+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v47, &qword_1EF52C3F8);
  swift_release();
  result = sub_1BDD86E30((uint64_t)v54, &qword_1EF52C3F8);
  *v50 = v65;
  *v51 = v37;
  return result;
}

uint64_t AnyCRDT.minAppFormatVersion.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

void sub_1BE18ADE4()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18AE3C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18AE94()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18AEEC()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18AF44()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18AF9C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18AFF4()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B04C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B0A4()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B0FC()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B154()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B1AC()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B204()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B25C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B2B4()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B30C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B364()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B3BC()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18B414()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE18B46C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

uint64_t *sub_1BE18B494(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)v1 + *(_QWORD *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v13, v5);
  result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 16) + 24))(a1, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v4);
    return sub_1BDD85C5C((uint64_t)v12);
  }
  return result;
}

uint64_t sub_1BE18B5D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[4];

  v41 = a2;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 264);
  v42 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v42 - 8);
  v9 = MEMORY[0x1E0C80A78](v42);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v36 - v12;
  v40 = *(_QWORD *)(*(_QWORD *)(v6 + 272) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1BE1B2EE8();
  result = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v36 - v18;
  if (v3 == a1)
  {
    v32 = 0uLL;
    goto LABEL_8;
  }
  v36 = v17;
  v37 = result;
  v38 = a3;
  v39 = a1;
  v20 = swift_dynamicCastClass();
  if (!v20)
    goto LABEL_13;
  v21 = v20;
  v22 = (uint64_t)v3 + *(_QWORD *)(v6 + 280);
  swift_beginAccess();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v24 = v42;
  v23(v13, v22, v42);
  v25 = *(_QWORD *)(v7 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v13, 1, v7) == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v27 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 280);
  swift_beginAccess();
  v23(v11, v27, v24);
  if (v26(v11, 1, v7) == 1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    v45[0] = 0;
    v45[1] = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRelease();
    v43 = 0xD00000000000001DLL;
    v44 = 0x80000001BE1D1F60;
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v35 = sub_1BE1B284C();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v39 + 88))(v45, v35);
    __swift_project_boxed_opaque_existential_1(v45, v45[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    result = sub_1BE1B3200();
    __break(1u);
    return result;
  }
  v28 = v40;
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 32);
  swift_retain();
  v29(v11, v41, v7, v28);
  v30 = *(void (**)(char *, uint64_t))(v25 + 8);
  v30(v11, v7);
  v30(v13, v7);
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v19, v37);
    v32 = 0uLL;
    a3 = v38;
LABEL_8:
    *a3 = v32;
    a3[1] = v32;
    return result;
  }
  v33 = (uint64_t *)v38;
  *((_QWORD *)v38 + 3) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
  (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 32))(boxed_opaque_existential_1, v19, AssociatedTypeWitness);
  return swift_release();
}

uint64_t sub_1BE18B970(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  _QWORD v22[4];
  _QWORD v23[4];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v22 - v10;
  if (v1 == a1)
  {
    v18 = 0;
    return v18 & 1;
  }
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = v12;
    v14 = (char *)v1 + *(_QWORD *)(v3 + 280);
    swift_beginAccess();
    v15 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v15(v11, v14, v5);
    a1 = *(_QWORD **)(v4 - 8);
    v16 = (unsigned int (*)(char *, uint64_t, uint64_t))a1[6];
    if (v16(v11, 1, v4) == 1)
    {
      __break(1u);
    }
    else
    {
      v17 = v13 + *(_QWORD *)(*(_QWORD *)v13 + 280);
      swift_beginAccess();
      v15(v9, (char *)v17, v5);
      if (v16(v9, 1, v4) != 1)
      {
        v18 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 + 272) + 72))(v9, v4);
        v19 = (void (*)(char *, uint64_t))a1[1];
        v19(v9, v4);
        v19(v11, v4);
        return v18 & 1;
      }
    }
    __break(1u);
  }
  v23[0] = 0;
  v23[1] = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v22[1] = 0xD00000000000001DLL;
  v22[2] = 0x80000001BE1D1F60;
  sub_1BE1B37AC();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  v21 = sub_1BE1B284C();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*a1 + 88))(v23, v21);
  __swift_project_boxed_opaque_existential_1(v23, v23[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  sub_1BE1B37AC();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BE18BC24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[4];

  v3 = v2;
  v40 = a2;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 264);
  v7 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v35 - v12;
  v38 = *(_QWORD *)(v5 + 272);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v35 - v15;
  v41 = a1;
  v17 = swift_dynamicCastClass();
  if (!v17)
    goto LABEL_10;
  v18 = v17;
  v19 = (uint64_t)v3 + *(_QWORD *)(v5 + 280);
  swift_beginAccess();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v21 = v7;
  v20(v13, v19, v7);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v13, 1, v6) == 1)
  {
    __break(1u);
    goto LABEL_9;
  }
  v24 = v18 + *(_QWORD *)(*(_QWORD *)v18 + 280);
  swift_beginAccess();
  v20(v11, v24, v21);
  if (v23(v11, 1, v6) == 1)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    v44[0] = 0;
    v44[1] = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRelease();
    v42 = 0xD00000000000001DLL;
    v43 = 0x80000001BE1D1F60;
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v34 = sub_1BE1B284C();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v41 + 88))(v44, v34);
    __swift_project_boxed_opaque_existential_1(v44, v44[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    result = sub_1BE1B3200();
    __break(1u);
    return result;
  }
  v25 = v38;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 56);
  swift_retain();
  v26(v11, v6, v25);
  v27 = *(void (**)(char *, uint64_t))(v22 + 8);
  v27(v11, v6);
  v27(v13, v6);
  v28 = AssociatedTypeWitness;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v16, v37);
    v31 = v40;
    *(_OWORD *)v40 = 0u;
    *((_OWORD *)v31 + 1) = 0u;
  }
  else
  {
    v32 = v40;
    v40[3] = v28;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
    (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 32))(boxed_opaque_existential_1, v16, v28);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BE18BFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  sub_1BDD86DEC(a1, (uint64_t)&v13, qword_1EF52B750);
  if (!v14)
    return sub_1BDD86E30((uint64_t)&v13, qword_1EF52B750);
  sub_1BDE77688(&v13, v15);
  sub_1BDDC1538((uint64_t)v15, (uint64_t)&v13);
  swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 0, 1, AssociatedTypeWitness);
  v10 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 280);
  swift_beginAccess();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 64))(v9, v4, v3);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t sub_1BE18C14C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 280);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 264);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 16) + 56))(a1, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BE18C1E0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 264);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 272) + 16) + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  v11 = swift_retain();
  result = v10(v11, v5, v9);
  if (!v3)
    return sub_1BDD85BB4((uint64_t)v7, v5, a2);
  return result;
}

uint64_t sub_1BE18C288()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 264);
  v3 = sub_1BE1B2EE8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - v5;
  v7 = (uint64_t)v0 + *(_QWORD *)(v1 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 272) + 16) + 8) + 32))(v2);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_1BE18C388()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 264);
  v3 = sub_1BE1B2EE8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - v5;
  v7 = (uint64_t)v0 + *(_QWORD *)(v1 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 272) + 16) + 8) + 40))(v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v2);
    return v10;
  }
  return result;
}

uint64_t sub_1BE18C480@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t result;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[4];

  v49 = a1;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 264);
  v51 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v51 - 8);
  v9 = MEMORY[0x1E0C80A78](v51);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v41 - v12;
  v50 = *(_QWORD *)(v6 + 272);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1BE1B2EE8();
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v41 - v17;
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v20 = MEMORY[0x1E0C80A78](v19);
  if (v3 == a2)
  {
    result = 0;
LABEL_10:
    *a3 = result;
    return result;
  }
  v41 = (char *)&v41 - v21;
  v42 = v23;
  v43 = v22;
  v44 = v20;
  v46 = a2;
  v47 = a3;
  v24 = swift_dynamicCastClass();
  if (v24)
  {
    v25 = v24;
    v26 = (uint64_t)v3 + *(_QWORD *)(v6 + 280);
    swift_beginAccess();
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v28 = v51;
    v27(v13, v26, v51);
    v45 = *(_QWORD *)(v7 - 8);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    if (v29(v13, 1, v7) == 1)
    {
      __break(1u);
    }
    else
    {
      v30 = v25 + *(_QWORD *)(*(_QWORD *)v25 + 280);
      swift_beginAccess();
      v27(v11, v30, v28);
      if (v29(v11, 1, v7) != 1)
      {
        v31 = v50;
        v32 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v50 + 80);
        swift_retain();
        v32(v49, v11, v7, v31);
        swift_release();
        v33 = *(void (**)(char *, uint64_t))(v45 + 8);
        v33(v11, v7);
        v33(v13, v7);
        v34 = v48;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v18, 1, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v44);
          result = 0;
        }
        else
        {
          v36 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
          v37 = v41;
          v36(v41, v18, AssociatedTypeWitness);
          type metadata accessor for AnyCRDT.MergeableDeltaBoxHelper(0, v7, v31, v38);
          v39 = v43;
          v36((char *)v43, v37, AssociatedTypeWitness);
          result = sub_1BE18C8A0(v39);
        }
        a3 = v47;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  v54[0] = 0;
  v54[1] = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v52 = 0xD00000000000001DLL;
  v53 = 0x80000001BE1D1F60;
  sub_1BE1B37AC();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  v40 = sub_1BE1B284C();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v46 + 88))(v54, v40);
  __swift_project_boxed_opaque_existential_1(v54, v54[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  sub_1BE1B37AC();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BE18C8A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v2;
}

uint64_t sub_1BE18C91C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 264);
  v6 = sub_1BE1B2EE8();
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - v7;
  v26 = *(_QWORD *)(v4 + 272);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v25 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v25 - v17;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)a1 + 80))(v29, v16);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (!v19)
  {
    v20(v14, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v24 = 0;
    return v24 & 1;
  }
  v20(v14, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, AssociatedTypeWitness);
  v21 = (uint64_t)v2 + *(_QWORD *)(*v2 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v8, v21, v28);
  v22 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v5);
  if ((_DWORD)result != 1)
  {
    v24 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v18, v5);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v5);
    return v24 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE18CB54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  char v20;
  _QWORD v21[4];

  v2 = v1;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 264);
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 272);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v21 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)v21 - v14;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)a1 + 80))(v21, v13);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v16)
  {
    v17(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v20 = 0;
    return v20 & 1;
  }
  v17(v11, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
  v18 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 280);
  swift_beginAccess();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v18, 1, v5);
  if ((_DWORD)result != 1)
  {
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 96))(v15, v5, v4);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
    return v20 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE18CD30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v18 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v13 = swift_retain();
  v14 = v19;
  result = v12(v13, AssociatedTypeWitness, v11);
  if (!v14)
  {
    type metadata accessor for AnyCRDT.MergeableDeltaBoxHelper(0, v3, v2, v16);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, AssociatedTypeWitness);
    result = sub_1BE18C8A0((uint64_t)v8);
    *v18 = result;
  }
  return result;
}

uint64_t sub_1BE18CE7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v16[24];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v16[-v10];
  v12 = (uint64_t)v1 + *(_QWORD *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v11, v12, v5);
  v13 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    a1[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v11, v4);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 40))(v12, v9, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BE18CFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE v11[32];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v4 = sub_1BE1B2EE8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = v11 - v6 + 16;
  sub_1BDDC1538(a1, (uint64_t)v11);
  swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1, v3);
  v8 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 280);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t sub_1BE18D0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 280);
  v2 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t AnyCRDT.observableDifference(from:with:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 104))(*a1);
}

uint64_t AnyCRDT.hasDelta(from:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 112))(*a1) & 1;
}

Swift::Bool __swiftcall AnyCRDT.needToFinalizeTimestamps()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))() & 1;
}

uint64_t AnyCRDT.minEncodingVersion.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t sub_1BE18D268(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 128))(*a1);
}

uint64_t sub_1BE18D294(uint64_t a1)
{
  uint64_t v1;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)v1 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 160))();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 136))(a1);
}

uint64_t sub_1BE18D2FC(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 112))(*a1) & 1;
}

uint64_t sub_1BE18D32C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)v2 + 208))(a1, *a2);
}

uint64_t sub_1BE18D358(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *a1;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 216))(&v4) & 1;
}

uint64_t sub_1BE18D398(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v1 = (*(uint64_t (**)(void))(*(_QWORD *)*v1 + 160))();
    swift_release();
  }
  v3 = *v1;
  v5 = v2;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v3 + 224))(&v5) & 1;
}

uint64_t sub_1BE18D410()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

BOOL sub_1BE18D438(_QWORD **a1)
{
  _QWORD **v1;

  return **v1 == **a1;
}

uint64_t sub_1BE18D454()
{
  uint64_t v0;
  _QWORD v2[4];
  _QWORD v3[4];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v0 + 88))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1BE1B26CC();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_1BE18D504@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 80))();
  *a1 = result;
  return result;
}

uint64_t sub_1BE18D534(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 104))(*a1);
}

uint64_t sub_1BE18D560()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))() & 1;
}

uint64_t sub_1BE18D594@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return AnyCRDT.init(from:)(a1, a2);
}

uint64_t sub_1BE18D5A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t sub_1BE18D5D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t sub_1BE18D5F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

void sub_1BE18D620()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18D678()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18D6D0()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE18D728@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_1;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  a1[3] = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, v3, AssociatedTypeWitness);
}

uint64_t sub_1BE18D794(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v4 = swift_checkMetadataState();
  return v3(a1, v4, v2);
}

uint64_t sub_1BE18D848(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t sub_1BE18D8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t sub_1BE18D93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return swift_deallocClassInstance();
}

void AnyCRDT.MergeableDelta.init(from:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void AnyCRDT.MergeableDelta.merge(delta:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void AnyCRDT.MergeableDelta.canMerge(delta:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DA78()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DAC0()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DB08()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE18DB50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

void sub_1BE18DB78()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DBD0()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DC28()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DC80()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DCD8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DD30()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DD88()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DDE0()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DE38()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE18DE90()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE18DEE8()
{
  return 0x6C61565243796E41;
}

uint64_t sub_1BE18DF04(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 200) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 224), a1);
  return v2;
}

uint64_t sub_1BE18DF58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 224);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 200);
  a1[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

uint64_t sub_1BE18DFC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  sub_1BE1B26E4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1BE18E084(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[24];

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v18[-v8];
  v10 = swift_dynamicCastClass();
  if (v10)
  {
    v11 = v10;
    v12 = (uint64_t)v1 + *(_QWORD *)(v2 + 224);
    swift_beginAccess();
    v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
    v13(v9, v12, v3);
    v14 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 224);
    swift_beginAccess();
    v13(v7, v14, v3);
    v15 = sub_1BE1B2798();
    v16 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v9, v3);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1BE18E1C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 200);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  v11 = (uint64_t)v1 + *(_QWORD *)(v3 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 8) + 24))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v12 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 200) - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 224), v10);
  return v12;
}

uint64_t sub_1BE18E2E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 200);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 8) + 40))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BE18E3AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 8) + 48))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_1BE18E470(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 8) + 56))(a1, *(_QWORD *)(v3 + 200));
  return swift_endAccess();
}

uint64_t sub_1BE18E4D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 200) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 224), v6);
  return v8;
}

uint64_t sub_1BE18E5A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 200);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 8) + 8) + 16))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BE18E684(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 208) + 8) + 8) + 32))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1BE18E74C()
{
  return sub_1BE18E784(&qword_1ED6EF500, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1D0], (uint64_t *)&unk_1EF52D8C8);
}

uint64_t sub_1BE18E768()
{
  return sub_1BE18E784(&qword_1EF52E2C8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED610], qword_1EF52E2D0);
}

uint64_t sub_1BE18E784(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 200);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3 + *(_QWORD *)(v11 + 224);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  if (swift_dynamicCast())
  {
    v13 = *((_QWORD *)&v19 + 1);
    v14 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
    v15 = a2(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  else
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    sub_1BDD86E30((uint64_t)&v18, a3);
    return 0x6C61565243796E41;
  }
  return v15;
}

uint64_t sub_1BE18E8BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 200) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
}

uint64_t sub_1BE18E8D8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 200) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_deallocClassInstance();
}

uint64_t AnyCRValue.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t static AnyCRValue.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 96))(*a2) & 1;
}

Swift::Bool __swiftcall AnyCRValue.needToFinalizeTimestamps()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))() & 1;
}

uint64_t AnyCRValue.finalizeTimestamps(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 128);
  v4 = swift_retain();
  LOBYTE(v3) = v3(v4);
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      *(_QWORD *)v1 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 144))();
      swift_release();
    }
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 136))(a1);
  }
  return result;
}

void sub_1BE18EA24(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  unsigned int v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int EnumCaseMultiPayload;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void (*v73)(ValueMetadata *, uint64_t *, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **);
  uint64_t *v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t *v77;
  uint64_t inited;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[2];
  uint64_t v92;

  v77 = a2;
  v90 = type metadata accessor for Proto_KeyPath(0);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v82 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v5 = MEMORY[0x1E0C80A78](v4);
  v81 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v88 = (uint64_t)&v75 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v79 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v75 - v11;
  v92 = type metadata accessor for Proto_Reference(0);
  v13 = MEMORY[0x1E0C80A78](v92);
  v80 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v87 = (uint64_t)&v75 - v15;
  v16 = type metadata accessor for Proto_Value(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v85 = (uint64_t)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v86 = (uint64_t)&v75 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v22 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v75 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v75 - v27;
  v29 = a1;
  v30 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v30, (uint64_t)v28, &qword_1ED6F3770);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v17) = v31(v28, 1, v16);
  sub_1BDD86E30((uint64_t)v28, &qword_1ED6F3770);
  if ((_DWORD)v17 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v32 = 0xD000000000000017;
    *(_QWORD *)(v32 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v32 + 16) = 0;
    swift_willThrow();
    swift_release();
    return;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v29;
  sub_1BDD86DEC(v30, (uint64_t)v26, &qword_1ED6F3770);
  if (v31(v26, 1, v16) == 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  v33 = v29;
  v34 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v31;
  v35 = v86;
  sub_1BDDA2E8C((uint64_t)v26, v86, type metadata accessor for Proto_Value);
  v36 = *(_QWORD *)(v35 + *(int *)(v16 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v36, (uint64_t)v12, &qword_1ED6F26F0);
  v37 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48);
  v39 = v38(v12, 1, v37);
  v76 = v33;
  v75 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v38;
  if (v39 == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 7)
    {
      v40 = v16;
      v41 = v34;
      v42 = (uint64_t)v12;
      v43 = v87;
      sub_1BDDA2E8C(v42, v87, type metadata accessor for Proto_Reference);
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v43 = v87;
  sub_1BE1B20E4();
  v44 = *(int *)(v92 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  v40 = v16;
  v41 = v34;
  *(_QWORD *)(v43 + v44) = qword_1ED6EFD68;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0(v35, type metadata accessor for Proto_Value);
  v45 = *(_QWORD *)(v43 + *(int *)(v92 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  v46 = v88;
  sub_1BDD86DEC(v45, v88, &qword_1ED6F3790);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  v48 = v90;
  LODWORD(v45) = v47(v46, 1, v90);
  sub_1BDD86E30(v46, &qword_1ED6F3790);
  sub_1BDD9C3E0(v43, type metadata accessor for Proto_Reference);
  if ((_DWORD)v45 == 1)
  {
    sub_1BDDFCAFC();
    v49 = (void *)swift_allocError();
    *(_OWORD *)v50 = xmmword_1BE1C85D0;
    *(_BYTE *)(v50 + 16) = 0;
    swift_willThrow();
    v51 = v76;
LABEL_28:
    v69 = swift_retain();
    CRKeyPath.init(from:)(v69, v91);
    v68 = 0;

    goto LABEL_29;
  }
  v52 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v53 = v52;
  v54 = v84;
  sub_1BDD86DEC(v53, v84, &qword_1ED6F3770);
  if (v41(v54, 1, v40) == 1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v55 = v54;
  v56 = v85;
  sub_1BDDA2E8C(v55, v85, type metadata accessor for Proto_Value);
  v57 = *(_QWORD *)(v56 + *(int *)(v40 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v58 = v57;
  v59 = v79;
  sub_1BDD86DEC(v58, v79, &qword_1ED6F26F0);
  if (v75(v59, 1, v37) == 1)
  {
    sub_1BDD86E30(v59, &qword_1ED6F26F0);
    v60 = v82;
    v61 = (uint64_t)v81;
    v62 = v80;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v61 = (uint64_t)v81;
    v62 = v80;
    if (EnumCaseMultiPayload == 7)
    {
      sub_1BDDA2E8C(v59, v80, type metadata accessor for Proto_Reference);
      v60 = v82;
      goto LABEL_23;
    }
    sub_1BDD9C3E0(v59, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v60 = v82;
  }
  sub_1BE1B20E4();
  v64 = *(int *)(v92 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v62 + v64) = qword_1ED6EFD68;
  swift_retain();
LABEL_23:
  sub_1BDD9C3E0(v85, type metadata accessor for Proto_Value);
  v65 = *(_QWORD *)(v62 + *(int *)(v92 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1BDD86DEC(v65, v61, &qword_1ED6F3790);
  if (v47(v61, 1, v48) == 1)
  {
    *v60 = MEMORY[0x1E0DEE9D8];
    v60[1] = sub_1BE1B20CC();
    v60[2] = v66;
    sub_1BE1B20E4();
    sub_1BDD86E30(v61, &qword_1ED6F3790);
  }
  else
  {
    sub_1BDDA2E8C(v61, (uint64_t)v60, type metadata accessor for Proto_KeyPath);
  }
  v51 = v76;
  v67 = v83;
  sub_1BDD9C3E0(v62, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1BDDC8ECC((uint64_t)v60);
  v68 = v67;
  if (v67)
  {
    v49 = v67;
    goto LABEL_28;
  }
LABEL_29:
  v70 = v91[0];
  v71 = v91[1];
  v72 = *(_QWORD *)(v51 + 16);
  if (!v72)
  {
LABEL_35:
    __break(1u);
    return;
  }
  v73 = *(void (**)(ValueMetadata *, uint64_t *, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v72 + 176);
  swift_retain();
  sub_1BDDB6CA4(v70, v71);
  v73(&type metadata for AnyCRDT, v91, v51, 1, &type metadata for AnyCRDT, &protocol witness table for AnyCRDT);
  if (v68)
  {
    sub_1BDDB796C(v70, v71);
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v70, v71);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v70, v71);
    v74 = v77;
    *v77 = v70;
    v74[1] = v71;
  }
}

uint64_t AnyCRValue.minEncodingVersion.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t AnyCRValue.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t AnyCRValue.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t AnyCRValue.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 88))(v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BE18F4B8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 88))(v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BE18F500()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_1BE18F528()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 88))(v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BE18F56C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t sub_1BE18F594()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t sub_1BE18F5BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 104))();
  *a1 = result;
  return result;
}

uint64_t sub_1BE18F5EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t sub_1BE18F614()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))() & 1;
}

uint64_t sub_1BE18F640(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 128);
  v4 = swift_retain();
  LOBYTE(v3) = v3(v4);
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      *(_QWORD *)v1 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 144))();
      swift_release();
    }
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 136))(a1);
  }
  return result;
}

uint64_t sub_1BE18F6CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return AnyCRValue.init(from:)(a1, a2);
}

uint64_t sub_1BE18F6E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t sub_1BE18F708()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

_QWORD *sub_1BE18F730(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];
  __int128 v50;
  uint64_t v51;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v8);
  v51 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Proto_Version(0);
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v44 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1BE1B1F58();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  v47 = a1;
  v19 = *(_QWORD *)(a1 + v18);
  swift_beginAccess();
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21 && (v22 = *(_QWORD *)(v19 + 16), v22 < v21))
  {
    v41 = a4;
    v42 = a3;
    v43 = a2;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v17, v20+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v22, v14);
    type metadata accessor for ReplicaState();
    v23 = swift_allocObject();
    v24 = v23 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
    v25 = type metadata accessor for Replica();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
    v26(v24, 1, 1, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v17, v14);
    *(_QWORD *)(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
    *(_QWORD *)(v23 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
    v26((uint64_t)v13, 1, 1, v25);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v13, v24, &qword_1ED6F43C0);
    swift_endAccess();
    v13 = *(_QWORD **)(v47 + v18);
    v27 = (uint64_t)v13
        + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    v28 = v51;
    sub_1BDD86DEC(v27, v51, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v28, 1, v48) == 1)
    {
      v29 = MEMORY[0x1E0DEE9D8];
      v30 = v44;
      *v44 = MEMORY[0x1E0DEE9D8];
      v30[1] = v29;
      sub_1BE1B20E4();
      sub_1BDD86E30(v28, &qword_1ED6F37A8);
    }
    else
    {
      v30 = v44;
      sub_1BDDA2E8C(v28, (uint64_t)v44, type metadata accessor for Proto_Version);
    }
    v32 = v43;
    v33 = v45;
    swift_retain();
    sub_1BDDA9DA0(v30, v32, &v50);
    if (v33)
    {
      swift_release();
    }
    else
    {
      v34 = v50;
      swift_beginAccess();
      swift_retain();
      v35 = swift_bridgeObjectRetain();
      v36 = sub_1BE191E48(v35, v32);
      swift_bridgeObjectRelease();
      swift_release();
      if (v42)
        v42(v36);
      v37 = MEMORY[0x1E0DEE9E0];
      if (*(_QWORD *)(v36 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D000);
        v38 = sub_1BE1B3260();
      }
      else
      {
        v38 = MEMORY[0x1E0DEE9E0];
      }
      v49[0] = v38;
      sub_1BE190B70(v36, 1, v49);
      v39 = v49[0];
      if (qword_1ED6F4510 != -1)
        swift_once();
      swift_retain();
      sub_1BE1B2E40();
      swift_release();
      v51 = v49[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF531848);
      v13 = (_QWORD *)swift_allocObject();
      v13[3] = v37;
      v13[4] = v37;
      v13[5] = v37;
      v13[6] = 0;
      v13[2] = v23;
      swift_beginAccess();
      *(_OWORD *)(v13 + 3) = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v13[5] = v39;
      swift_bridgeObjectRelease();
      v13[6] = v51;
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v31 = xmmword_1BE1BB990;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow();
  }
  return v13;
}

__n128 sub_1BE18FCFC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __n128 result;
  __n128 *v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  unint64_t v49;

  v38 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v5);
  v40 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Proto_Version(0);
  v39 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v41 = (__n128 **)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_CRDT(0);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto_Value(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  v21 = v45 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v16, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1BE1B20E4();
    v22 = *(int *)(v17 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v20[v22] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v16, (uint64_t)v20, type metadata accessor for Proto_Value);
  }
  v23 = (uint64_t)v13;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v20, a2);
  swift_release();
  v24 = swift_retain();
  v25 = v46;
  AnyCRValue.init(from:)(v24, (uint64_t *)&v49);
  if (v25)
  {
    swift_release();
  }
  else
  {
    v26 = v45 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    sub_1BDD86DEC(v26, (uint64_t)v10, &qword_1ED6F3728);
    v27 = v43;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v10, 1, v43) == 1)
    {
      sub_1BE1B20E4();
      v28 = *(int *)(v27 + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)&v13[v28] = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3728);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v13, type metadata accessor for Proto_CRDT);
    }
    v29 = v44;
    swift_allocObject();
    swift_retain();
    sub_1BDDA1B44(v23, a2);
    swift_release();
    v30 = swift_retain();
    AnyCRDT.init(from:)(&v48, v30);
    v31 = v48;
    v32 = v45
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
    swift_beginAccess();
    v33 = v40;
    sub_1BDD86DEC(v32, v40, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v33, 1, v29) == 1)
    {
      v34 = MEMORY[0x1E0DEE9D8];
      v35 = v41;
      *v41 = MEMORY[0x1E0DEE9D8];
      v35[1] = v34;
      swift_retain();
      sub_1BE1B20E4();
      sub_1BDD86E30(v33, &qword_1ED6F37A8);
    }
    else
    {
      v35 = v41;
      sub_1BDDA2E8C(v33, (uint64_t)v41, type metadata accessor for Proto_Version);
      swift_retain();
    }
    swift_retain();
    sub_1BDDA9DA0(v35, a2, &v47);
    swift_release();
    swift_release();
    swift_release();
    result = v47;
    v37 = v38;
    v38->n128_u64[0] = v49;
    v37->n128_u64[1] = v31;
    v37[1] = result;
  }
  return result;
}

void sub_1BE19024C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_24;
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_24;
  v10 = (_QWORD *)*a3;
  v12 = sub_1BDE5E140(v9);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      sub_1BDE64D7C();
      if ((v16 & 1) == 0)
        goto LABEL_13;
    }
LABEL_10:
    sub_1BDDFCAFC();
    v19 = (void *)swift_allocError();
    *(_QWORD *)v20 = 0xD000000000000016;
    *(_QWORD *)(v20 + 8) = 0x80000001BE1CFC70;
    *(_BYTE *)(v20 + 16) = 0;
    swift_willThrow();
    v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      return;
    }
    goto LABEL_30;
  }
  sub_1BDE60504(v15, a2 & 1);
  v17 = sub_1BDE5E140(v9);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_29:
    sub_1BE1B3680();
    __break(1u);
LABEL_30:
    sub_1BE1B305C();
    sub_1BE1B284C();
    sub_1BE1B3164();
    sub_1BE1B284C();
    sub_1BE1B3200();
    __break(1u);
    return;
  }
  v12 = v17;
  if ((v16 & 1) != 0)
    goto LABEL_10;
LABEL_13:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
  *(_QWORD *)(v22[6] + 8 * v12) = v9;
  v23 = (_QWORD *)(v22[7] + 16 * v12);
  *v23 = v8;
  v23[1] = v7;
  v24 = v22[2];
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v22[2] = v26;
  if (v6 != 1)
  {
    v27 = a1 + 9;
    v28 = 1;
    while (v28 < a1[2])
    {
      v30 = *(v27 - 1);
      v29 = *v27;
      v31 = *(v27 - 2);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v31)
        goto LABEL_24;
      v32 = (_QWORD *)*a3;
      v33 = sub_1BDE5E140(v31);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v25 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v25)
        goto LABEL_26;
      v38 = v34;
      if (v32[3] < v37)
      {
        sub_1BDE60504(v37, 1);
        v33 = sub_1BDE5E140(v31);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_29;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v40 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      *(_QWORD *)(v40[6] + 8 * v33) = v31;
      v41 = (_QWORD *)(v40[7] + 16 * v33);
      *v41 = v30;
      v41[1] = v29;
      v42 = v40[2];
      v25 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      if (v25)
        goto LABEL_27;
      ++v28;
      v40[2] = v43;
      v27 += 3;
      if (v6 == v28)
        goto LABEL_24;
    }
    goto LABEL_28;
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

void sub_1BE19061C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;

  LODWORD(v64) = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  v63 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B1F58();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C568);
  v14 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v60 = v3;
  v19 = (uint64_t)&v17[*(int *)(v14 + 48)];
  v59 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = a1 + v59;
  v66 = *(_QWORD *)(v15 + 72);
  v62 = a1;
  swift_bridgeObjectRetain();
  sub_1BDD86DEC(v20, (uint64_t)v17, &qword_1EF52C568);
  v61 = v10;
  v68 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v69 = v9;
  v68(v12, v17, v9);
  v65 = v19;
  v67 = v8;
  sub_1BDDA2EF0(v19, (uint64_t)v8, &qword_1EF52CFF0);
  v21 = (_QWORD *)*a3;
  v23 = sub_1BDDAE974((uint64_t)v12);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v64 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1BDE64F44();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v33 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v34 = v33[6];
    v64 = *(_QWORD *)(v61 + 72);
    v68((char *)(v34 + v64 * v23), v12, v69);
    v35 = v33[7];
    v63 = *(_QWORD *)(v63 + 72);
    v36 = v35 + v63 * v23;
    v37 = (uint64_t)v67;
    sub_1BDDA2EF0((uint64_t)v67, v36, &qword_1EF52CFF0);
    v38 = v33[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v33[2] = v40;
    v41 = v18 - 1;
    if (v18 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v42 = v62 + v66 + v59;
    v43 = &qword_1EF52CFF0;
    while (1)
    {
      sub_1BDD86DEC(v42, (uint64_t)v17, &qword_1EF52C568);
      v68(v12, v17, v69);
      v44 = v43;
      sub_1BDDA2EF0(v65, v37, v43);
      v45 = (_QWORD *)*a3;
      v47 = sub_1BDDAE974((uint64_t)v12);
      v48 = v45[2];
      v49 = (v46 & 1) == 0;
      v50 = v48 + v49;
      if (__OFADD__(v48, v49))
        break;
      v51 = v46;
      if (v45[3] < v50)
      {
        sub_1BDE6080C(v50, 1);
        v52 = sub_1BDDAE974((uint64_t)v12);
        if ((v51 & 1) != (v53 & 1))
          goto LABEL_26;
        v47 = v52;
      }
      if ((v51 & 1) != 0)
        goto LABEL_10;
      v54 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v47 >> 6) + 64) |= 1 << v47;
      v68((char *)(v54[6] + v64 * v47), v12, v69);
      v55 = v54[7] + v63 * v47;
      v37 = (uint64_t)v67;
      v43 = v44;
      sub_1BDDA2EF0((uint64_t)v67, v55, v44);
      v56 = v54[2];
      v39 = __OFADD__(v56, 1);
      v57 = v56 + 1;
      if (v39)
        goto LABEL_25;
      v54[2] = v57;
      v42 += v66;
      if (!--v41)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1BDE6080C(v26, v64 & 1);
  v28 = sub_1BDDAE974((uint64_t)v12);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    sub_1BDDFCAFC();
    v30 = (void *)swift_allocError();
    *(_QWORD *)v31 = 0xD00000000000001DLL;
    *(_QWORD *)(v31 + 8) = 0x80000001BE1CF0A0;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow();
    v72 = v30;
    v32 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1BDD86E30((uint64_t)v67, &qword_1EF52CFF0);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v69);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  sub_1BE1B3680();
  __break(1u);
LABEL_27:
  v70 = 0;
  v71 = 0xE000000000000000;
  sub_1BE1B305C();
  sub_1BE1B284C();
  sub_1BE1B3164();
  sub_1BE1B284C();
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE190B70(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6 = *(_QWORD *)(a1 + 56);
    v41 = *(_OWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v7)
    {
      v8 = (_QWORD *)*a3;
      v10 = sub_1BDE5E140(v7);
      v11 = v8[2];
      v12 = (v9 & 1) == 0;
      v13 = v11 + v12;
      if (__OFADD__(v11, v12))
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v14 = v9;
      if (v8[3] >= v13)
      {
        if ((a2 & 1) != 0)
        {
          if ((v9 & 1) == 0)
            goto LABEL_14;
        }
        else
        {
          sub_1BDE65210();
          if ((v14 & 1) == 0)
            goto LABEL_14;
        }
      }
      else
      {
        sub_1BDE60C2C(v13, a2 & 1);
        v15 = sub_1BDE5E140(v7);
        if ((v14 & 1) != (v16 & 1))
        {
LABEL_30:
          sub_1BE1B3680();
          __break(1u);
LABEL_31:
          sub_1BE1B305C();
          sub_1BE1B284C();
          sub_1BE1B3164();
          sub_1BE1B284C();
          sub_1BE1B3200();
          __break(1u);
          return;
        }
        v10 = v15;
        if ((v14 & 1) == 0)
        {
LABEL_14:
          v20 = (_QWORD *)*a3;
          *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
          *(_QWORD *)(v20[6] + 8 * v10) = v7;
          v21 = v20[7] + 24 * v10;
          *(_OWORD *)v21 = v41;
          *(_QWORD *)(v21 + 16) = v6;
          v22 = v20[2];
          v23 = __OFADD__(v22, 1);
          v24 = v22 + 1;
          if (v23)
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
          v20[2] = v24;
          if (v5 != 1)
          {
            v25 = a1 + 64;
            v26 = 1;
            while (v26 < *(_QWORD *)(a1 + 16))
            {
              v27 = *(_QWORD *)(v25 + 24);
              v42 = *(_OWORD *)(v25 + 8);
              v28 = *(_QWORD *)v25;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (!v28)
                goto LABEL_25;
              v29 = (_QWORD *)*a3;
              v30 = sub_1BDE5E140(v28);
              v32 = v29[2];
              v33 = (v31 & 1) == 0;
              v23 = __OFADD__(v32, v33);
              v34 = v32 + v33;
              if (v23)
                goto LABEL_28;
              v35 = v31;
              if (v29[3] < v34)
              {
                sub_1BDE60C2C(v34, 1);
                v30 = sub_1BDE5E140(v28);
                if ((v35 & 1) != (v36 & 1))
                  goto LABEL_30;
              }
              if ((v35 & 1) != 0)
                goto LABEL_11;
              v37 = (_QWORD *)*a3;
              *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
              *(_QWORD *)(v37[6] + 8 * v30) = v28;
              v38 = v37[7] + 24 * v30;
              *(_OWORD *)v38 = v42;
              *(_QWORD *)(v38 + 16) = v27;
              v39 = v37[2];
              v23 = __OFADD__(v39, 1);
              v40 = v39 + 1;
              if (v23)
                goto LABEL_29;
              ++v26;
              v37[2] = v40;
              v25 += 32;
              if (v5 == v26)
                goto LABEL_25;
            }
            goto LABEL_27;
          }
          goto LABEL_25;
        }
      }
LABEL_11:
      sub_1BDDFCAFC();
      v17 = (void *)swift_allocError();
      *(_QWORD *)v18 = 0xD00000000000001DLL;
      *(_QWORD *)(v18 + 8) = 0x80000001BE1CF0A0;
      *(_BYTE *)(v18 + 16) = 0;
      swift_willThrow();
      v19 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        return;
      }
      goto LABEL_31;
    }
  }
LABEL_25:
  swift_bridgeObjectRelease_n();
}

void sub_1BE190FC0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C538);
  v12 = MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v55 = a1;
  v56 = v8;
  v17 = a2;
  v54 = v3;
  v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  v53 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = a1 + v53;
  v58 = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRetain();
  sub_1BDD86DEC(v19, (uint64_t)v15, &qword_1EF52C538);
  v62 = *v15;
  v20 = v62;
  v57 = v18;
  sub_1BDDA2EF0(v18, (uint64_t)v10, &qword_1EF52CFF0);
  v21 = (_QWORD *)*a3;
  v23 = sub_1BDE5E140(v20);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_23;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v17 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1BDE653F4();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v33 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(_QWORD *)(v33[6] + 8 * v23) = v20;
    v34 = v33[7];
    v56 = *(_QWORD *)(v56 + 72);
    sub_1BDDA2EF0((uint64_t)v10, v34 + v56 * v23, &qword_1EF52CFF0);
    v35 = v33[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v33[2] = v37;
    v38 = v16 - 1;
    if (v16 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v39 = v55 + v58 + v53;
    while (1)
    {
      sub_1BDD86DEC(v39, (uint64_t)v15, &qword_1EF52C538);
      v62 = *v15;
      v40 = v62;
      sub_1BDDA2EF0(v57, (uint64_t)v10, &qword_1EF52CFF0);
      v41 = (_QWORD *)*a3;
      v42 = sub_1BDE5E140(v40);
      v44 = v41[2];
      v45 = (v43 & 1) == 0;
      v36 = __OFADD__(v44, v45);
      v46 = v44 + v45;
      if (v36)
        break;
      v47 = v43;
      if (v41[3] < v46)
      {
        sub_1BDE60F6C(v46, 1);
        v42 = sub_1BDE5E140(v40);
        if ((v47 & 1) != (v48 & 1))
          goto LABEL_25;
      }
      if ((v47 & 1) != 0)
        goto LABEL_10;
      v49 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      *(_QWORD *)(v49[6] + 8 * v42) = v40;
      sub_1BDDA2EF0((uint64_t)v10, v49[7] + v56 * v42, &qword_1EF52CFF0);
      v50 = v49[2];
      v36 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v36)
        goto LABEL_24;
      v49[2] = v51;
      v39 += v58;
      if (!--v38)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1BDE60F6C(v26, v17 & 1);
  v28 = sub_1BDE5E140(v20);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    sub_1BDDFCAFC();
    v30 = (void *)swift_allocError();
    *(_QWORD *)v31 = 0xD00000000000001DLL;
    *(_QWORD *)(v31 + 8) = 0x80000001BE1CF0A0;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow();
    v61 = v30;
    v32 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1BDD86E30((uint64_t)v10, &qword_1EF52CFF0);
      swift_bridgeObjectRelease();
      swift_release();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1BE1B3680();
  __break(1u);
LABEL_26:
  v59 = 0;
  v60 = 0xE000000000000000;
  sub_1BE1B305C();
  sub_1BE1B284C();
  sub_1BE1B3164();
  sub_1BE1B284C();
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE191478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9[5];

  v9[3] = a3;
  v9[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  (*(void (**)(uint64_t *))(**(_QWORD **)a2 + 120))(v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_1BE1914E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9[5];

  v9[3] = a3;
  v9[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  (*(void (**)(uint64_t *))(**(_QWORD **)a2 + 112))(v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t sub_1BE191558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22698(0, v3, 0);
    v4 = v19;
    v7 = *(_QWORD *)(type metadata accessor for Proto_Set.Element(0) - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1BE1882C4(v8, a2, (uint64_t)&v17);
      if (v2)
        break;
      v10 = v17;
      v11 = v18;
      v19 = v4;
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v17;
        sub_1BDE22698(v12 > 1, v13 + 1, 1);
        v10 = v16;
        v4 = v19;
      }
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = v4 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 48) = v11;
      v8 += v9;
      if (!--v3)
        return v4;
    }
    swift_release();
  }
  return v4;
}

uint64_t sub_1BE191684(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(BOOL, unint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v20)(BOOL, unint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;

  v22 = a2;
  v23 = a5;
  v21 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x1E0DEE9D8];
  if (v12)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    v20 = a4;
    a4(0, v12, 0);
    v13 = v24;
    v14 = *(_QWORD *)(type metadata accessor for Proto_Set.Element(0) - 8);
    v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v16 = *(_QWORD *)(v14 + 72);
    while (1)
    {
      v23(v15, v22);
      if (v5)
        break;
      v24 = v13;
      v18 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        v20(v17 > 1, v18 + 1, 1);
        v13 = v24;
      }
      *(_QWORD *)(v13 + 16) = v18 + 1;
      sub_1BDDA2EF0((uint64_t)v11, v13+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18, v21);
      v15 += v16;
      if (!--v12)
        return v13;
    }
    swift_release();
  }
  return v13;
}

uint64_t sub_1BE1917F8(uint64_t a1, void (*a2)(__int128 *, char *, _QWORD, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(__int128 *, char *, _QWORD, char *);
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v4 = v3;
  v33 = a2;
  v34 = a3;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF748);
  v6 = MEMORY[0x1E0C80A78](v32);
  v31 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v30 = (_QWORD *)((char *)v26 - v9);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v26 - v10;
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1BDE22698(0, 0, 0);
  v12 = v38;
  v13 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v29 = v13;
  v26[1] = a1;
  if (v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(type metadata accessor for Proto_Set.Element(0) - 8);
    v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v27 = *(_QWORD *)(v15 + 72);
    v28 = (char *)&v36 + 8;
    while (1)
    {
      v17 = v32;
      v18 = (uint64_t)&v31[*(int *)(v32 + 48)];
      sub_1BDD9C318(v16, v18, type metadata accessor for Proto_Set.Element);
      v19 = (uint64_t)v30;
      v20 = (uint64_t)v30 + *(int *)(v17 + 48);
      *v30 = v14;
      sub_1BDDA2E8C(v18, v20, type metadata accessor for Proto_Set.Element);
      sub_1BDDA2EF0(v19, (uint64_t)v11, &qword_1ED6EF748);
      v33(&v36, v28, *(_QWORD *)v11, &v11[*(int *)(v17 + 48)]);
      if (v4)
        break;
      sub_1BDD86E30((uint64_t)v11, &qword_1ED6EF748);
      v35 = v36;
      v21 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE22698(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v38;
      }
      v23 = *(_QWORD *)(v12 + 16);
      v22 = *(_QWORD *)(v12 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_1BDE22698(v22 > 1, v23 + 1, 1);
        v12 = v38;
      }
      ++v14;
      *(_QWORD *)(v12 + 16) = v23 + 1;
      v24 = v12 + 24 * v23;
      *(_OWORD *)(v24 + 32) = v35;
      *(_QWORD *)(v24 + 48) = v21;
      v16 += v27;
      if (v29 == v14)
        goto LABEL_11;
    }
    sub_1BDD86E30((uint64_t)v11, &qword_1ED6EF748);
    swift_release();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1BE191A78(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      v11 = *(v5 - 1);
      v12 = *v5;
      v13 = *(v5 - 2);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v13)
        break;
      v14 = (_QWORD *)*a3;
      v16 = sub_1BDE5E140(v13);
      v17 = v14[2];
      v18 = (v15 & 1) == 0;
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        result = sub_1BE1B3680();
        __break(1u);
        return result;
      }
      v20 = v15;
      if (v14[3] >= v19)
      {
        if ((a2 & 1) == 0)
          sub_1BDE64D7C();
      }
      else
      {
        sub_1BDE60504(v19, a2 & 1);
        v21 = sub_1BDE5E140(v13);
        if ((v20 & 1) != (v22 & 1))
          goto LABEL_18;
        v16 = v21;
      }
      v23 = (_QWORD *)*a3;
      if ((v20 & 1) != 0)
      {
        v6 = 16 * v16;
        v7 = (uint64_t *)(v23[7] + v6);
        v8 = *v7;
        v9 = v7[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = (_QWORD *)(v23[7] + v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v10 = v8;
        v10[1] = v9;
      }
      else
      {
        v23[(v16 >> 6) + 8] |= 1 << v16;
        *(_QWORD *)(v23[6] + 8 * v16) = v13;
        v24 = (_QWORD *)(v23[7] + 16 * v16);
        *v24 = v11;
        v24[1] = v12;
        v25 = v23[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_17;
        v23[2] = v27;
      }
      v5 += 3;
      a2 = 1;
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE191C4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BE191C7C(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t type metadata accessor for CRValueBoxHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRValueBoxHelper);
}

_UNKNOWN **sub_1BE191C98()
{
  return &protocol witness table for AnyCRDT.MergeableDelta;
}

unint64_t sub_1BE191CA8()
{
  unint64_t result;

  result = qword_1EF52B370;
  if (!qword_1EF52B370)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for AnyCRValue, &type metadata for AnyCRValue);
    atomic_store(result, (unint64_t *)&qword_1EF52B370);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyCRDT()
{
  return &type metadata for AnyCRDT;
}

uint64_t type metadata accessor for AnyCRDT.MergeableDeltaBox()
{
  return objc_opt_self();
}

uint64_t sub_1BE191D1C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AnyCRDT.MergeableDeltaBoxHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyCRDT.MergeableDeltaBoxHelper);
}

ValueMetadata *type metadata accessor for AnyCRDT.MergeableDelta()
{
  return &type metadata for AnyCRDT.MergeableDelta;
}

uint64_t type metadata accessor for CRValueBox()
{
  return objc_opt_self();
}

uint64_t sub_1BE191DD8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BE191E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  __n128 v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22738(0, v3, 0);
    v4 = v20;
    v7 = *(_QWORD *)(type metadata accessor for Proto_Set.Element(0) - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1BE18FCFC(v8, a2, &v18);
      if (v2)
        break;
      v10 = v18;
      v11 = v19;
      v20 = v4;
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v19;
        v17 = v18;
        sub_1BDE22738(v12 > 1, v13 + 1, 1);
        v11 = v16;
        v10 = v17;
        v4 = v20;
      }
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = v4 + 32 * v13;
      *(__n128 *)(v14 + 32) = v10;
      *(_OWORD *)(v14 + 48) = v11;
      v8 += v9;
      if (!--v3)
        return v4;
    }
    swift_release();
  }
  return v4;
}

uint64_t sub_1BE191F60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = type metadata accessor for Proto_CRDT(0);
  v31 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v30 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  v7 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v29)
  {
    v33 = v2;
    result = swift_bridgeObjectRetain();
    v9 = 0;
    v10 = MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v11 = *(_QWORD *)(v32 + 8);
      if (v9 >= *(_QWORD *)(v11 + 16))
        break;
      v12 = *(_QWORD *)(v7 + 8 * v9 + 32);
      v13 = v30;
      sub_1BDD9C318(v11+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v9, v30, type metadata accessor for Proto_CRDT);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v14 = sub_1BDDA1B44(v13, a2);
      swift_release();
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
        v17 = v12 >= v16;
      else
        v17 = 1;
      if (v17)
      {
        sub_1BDDFCAFC();
        swift_allocError();
        *(_OWORD *)v28 = xmmword_1BE1B63E0;
        *(_BYTE *)(v28 + 16) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_14;
      }
      v18 = v15 + 16 * v12;
      v19 = *(_QWORD *)(v18 + 32);
      v20 = *(_QWORD *)(v18 + 40);
      swift_bridgeObjectRetain();
      v21 = swift_retain();
      v22 = v33;
      AnyCRDT.init(from:)(&v35, v21);
      if (v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      v33 = 0;
      ++v9;
      v23 = v7;
      v24 = a2;
      v25 = v35;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = v10;
      v27 = v25;
      a2 = v24;
      v7 = v23;
      sub_1BE1542E0(v27, v19, v20, isUniquelyReferenced_nonNull_native);
      v10 = v34;
      swift_release();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v29 == v9)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    swift_release();
    v10 = MEMORY[0x1E0DEE9E0];
LABEL_14:
    sub_1BDD9C3E0(v32, type metadata accessor for Proto_Struct);
    return v10;
  }
  return result;
}

uint64_t sub_1BE192218()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BE19223C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE1872C4(a1, v1);
}

uint64_t sub_1BE192244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;

  return sub_1BE187314(a1, a2, a3, v4, a4);
}

id sub_1BE19225C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1BE187A1C(*(_QWORD *)(v1 + 16), &qword_1EF531858, a1);
}

id sub_1BE19227C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BE187A9C(a1, v2, a2);
}

uint64_t sub_1BE192294(unint64_t *a1, _OWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BE18A7A0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(unint64_t **)(v4 + 32));
}

id sub_1BE1922B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1BE187A1C(*(_QWORD *)(v1 + 16), &qword_1EF531898, a1);
}

uint64_t sub_1BE1922D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE192324(uint64_t a1, uint64_t a2)
{
  return sub_1BE191F60(a1, a2);
}

uint64_t sub_1BE19233C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = (void *)objc_opt_self();
  v2 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_removeFilePresenter_, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1BE1923BC()
{
  unsigned __int8 v1;

  sub_1BE1B2E40();
  return v1;
}

uint64_t sub_1BE19240C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v2 = v1;
  v24 = a1;
  v4 = *v1;
  v25 = sub_1BE1B248C();
  v29 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B24BC();
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v4 + 80);
  v11 = *(_QWORD *)(v4 + 88);
  v26 = *(_QWORD *)(v11 + 16);
  v23 = v10;
  v13 = type metadata accessor for Capsule(0, v10, v26, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v22 - v15;
  v22[1] = v2[4];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v22 - v15, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = v10;
  *((_QWORD *)v18 + 3) = v11;
  *((_QWORD *)v18 + 4) = v2;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v18[v17], v16, v13);
  aBlock[4] = sub_1BE196504;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_111;
  v19 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v30 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v20 = v25;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v9, v6, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  swift_release();
  return sub_1BE192894(v24, v23, v26);
}

uint64_t sub_1BE19269C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v6 = sub_1BE1B248C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v17[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B24BC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE19240C(a1);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  aBlock[4] = sub_1BE1963EC;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_99;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v17[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v17[0] + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1BE192894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD aBlock[8];

  v4 = v3;
  v7 = *v3;
  v26 = a1;
  v27 = v7;
  v8 = sub_1BE1B248C();
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  MEMORY[0x1E0C80A78](v8);
  v30 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B24BC();
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Capsule(0, a2, a3, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v25 - v16;
  v33 = a2;
  v34 = a3;
  v35 = v3;
  result = sub_1BE1B2E40();
  if ((aBlock[0] & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v26, v14);
    v19 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = (char *)swift_allocObject();
    v21 = v27;
    *((_QWORD *)v20 + 2) = *(_QWORD *)(v27 + 80);
    *((_QWORD *)v20 + 3) = a2;
    *((_QWORD *)v20 + 4) = *(_QWORD *)(v21 + 88);
    *((_QWORD *)v20 + 5) = a3;
    *((_QWORD *)v20 + 6) = v4;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v20[v19], v17, v14);
    aBlock[4] = sub_1BE196334;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = &block_descriptor_83;
    v22 = _Block_copy(aBlock);
    swift_retain();
    sub_1BE1B24A4();
    v36 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    v23 = v30;
    v24 = v32;
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v12, v23, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v24);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BE192B50(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t aBlock;
  unint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  _QWORD *v46;

  v32 = *v1;
  v3 = sub_1BE1B248C();
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  MEMORY[0x1E0C80A78](v3);
  v33 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B24BC();
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B2498();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1[6];
  if (v12)
  {
    v13 = v1[5];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1BE1B61C0;
    aBlock = 0;
    v42 = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    aBlock = v13;
    v42 = v12;
    sub_1BE1B284C();
    v15 = aBlock;
    v16 = v42;
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 40) = v16;
    swift_getErrorValue();
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v14 + 88) = v39;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v14 + 64));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_1, v17, v18);
    sub_1BE1B36D4();
    swift_bridgeObjectRelease();
  }
  v20 = v1[3];
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_1BE19611C;
  *(_QWORD *)(v21 + 24) = v1;
  v45 = sub_1BDD843E8;
  v46 = (_QWORD *)v21;
  aBlock = MEMORY[0x1E0C809B0];
  v42 = 1107296256;
  v43 = sub_1BDD843A8;
  v44 = &block_descriptor_57;
  v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v20, v22);
  _Block_release(v22);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v20 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF540], v8);
    v24 = (void *)sub_1BE1B2E64();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v25 = swift_allocObject();
    swift_weakInit();
    v26 = (_QWORD *)swift_allocObject();
    v27 = v32;
    v26[2] = *(_QWORD *)(v32 + 80);
    v26[3] = *(_QWORD *)(v27 + 88);
    v26[4] = v25;
    v26[5] = a1;
    v45 = sub_1BE196188;
    v46 = v26;
    aBlock = MEMORY[0x1E0C809B0];
    v42 = 1107296256;
    v43 = sub_1BDDBE6A4;
    v44 = &block_descriptor_66;
    v28 = _Block_copy(&aBlock);
    swift_retain();
    v29 = a1;
    sub_1BE1B24A4();
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    v30 = v33;
    v31 = v37;
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v7, v30, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1BE192FE4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t aBlock;
  unint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;

  v1 = v0;
  v40 = *v0;
  v2 = sub_1BE1B1EE0();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x1E0C80A78](v2);
  v34 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B1DF0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v34 - v12;
  v41 = v1;
  v14 = v1[2];
  v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_initWithFilePresenter_, v14);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15(v6, v14 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_fileURL, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    goto LABEL_7;
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v13, v6, v7);
  v17 = (void *)sub_1BE1B1D90();
  v18 = (void *)sub_1BE1B1D90();
  v38 = v13;
  v15(v11, (uint64_t)v13, v7);
  v37 = v8;
  v19 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v20 = (v9 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject();
  v22 = v40;
  v23 = v41;
  *((_QWORD *)v21 + 2) = *(_QWORD *)(v40 + 80);
  *((_QWORD *)v21 + 3) = *(_QWORD *)(v22 + 88);
  *((_QWORD *)v21 + 4) = v23;
  v16(&v21[v19], v11, v7);
  v24 = v39;
  *(_QWORD *)&v21[v20] = v39;
  v25 = v23;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = sub_1BE1960A8;
  *(_QWORD *)(v26 + 24) = v21;
  v46 = sub_1BE1966D8;
  v47 = v26;
  aBlock = MEMORY[0x1E0C809B0];
  v43 = 1107296256;
  v44 = sub_1BDDD7274;
  v45 = &block_descriptor_51;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  v28 = v24;
  swift_retain();
  v29 = v28;
  swift_release();
  objc_msgSend(v28, sel_coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_, v17, 0, v18, 0, 0, v27);

  _Block_release(v27);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  if (v25[6])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1BE1B61B0;
    aBlock = 0;
    v43 = 0xE000000000000000;
    sub_1BE1B284C();
    sub_1BE1B284C();
    v31 = v34;
    sub_1BE1B1ED4();
    sub_1BE1B1EC8();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v36);
    sub_1BE1B2B4C();
    v32 = aBlock;
    v33 = v43;
    *(_QWORD *)(v30 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v30 + 32) = v32;
    *(_QWORD *)(v30 + 40) = v33;
    sub_1BE1B36D4();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v7);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v7);
    swift_release();

  }
}

uint64_t sub_1BE193428()
{
  unsigned __int8 v1;

  sub_1BE1B2E40();
  return v1;
}

uint64_t sub_1BE193478(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v3 = *v1;
  v18 = sub_1BE1B248C();
  v21 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BE1B24BC();
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B1DF0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v17 = v1[4];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = *(_QWORD *)(v3 + 80);
  *((_QWORD *)v13 + 3) = *(_QWORD *)(v3 + 88);
  *((_QWORD *)v13 + 4) = v1;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v12], (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1BE195E04;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_26;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v15 = v18;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v8, v5, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
  return swift_release();
}

void sub_1BE1936E8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  id v21;
  id v22[6];
  id v23[2];

  v1 = v0;
  v23[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_initWithFilePresenter_, *(_QWORD *)(v0 + 16));
  v23[0] = 0;
  v3 = (void *)sub_1BE1B1D90();
  v4 = sub_1BE1B1D90();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v1;
  v5[3] = v2;
  v5[4] = v23;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = sub_1BE195D74;
  v6[3] = v5;
  v22[4] = sub_1BE1966D8;
  v22[5] = v6;
  v22[0] = (id)MEMORY[0x1E0C809B0];
  v22[1] = (id)1107296256;
  v22[2] = sub_1BDDD7274;
  v22[3] = &block_descriptor_20;
  v7 = _Block_copy(v22);
  swift_retain();
  v8 = v2;
  swift_retain();
  swift_release();
  v22[0] = 0;
  objc_msgSend(v8, sel_coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_, v3, 0, v4, 0, v22, v7);
  _Block_release(v7);

  v9 = v22[0];
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v4 & 1) != 0)
    __break(1u);
  v10 = v9;
  if (!v9)
  {
    v10 = v23[0];
    if (!v23[0])
    {

      goto LABEL_12;
    }
    v11 = v23[0];
  }
  v12 = v9;
  v13 = (void *)sub_1BE1B1D30();
  v14 = objc_msgSend(v13, sel_domain);

  v15 = sub_1BE1B27C8();
  v17 = v16;

  if (v15 == sub_1BE1B27C8() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v19 = sub_1BE1B34AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
LABEL_10:
      sub_1BE192B50(v10);
      goto LABEL_11;
    }
  }
  v20 = (void *)sub_1BE1B1D30();
  v21 = objc_msgSend(v20, sel_code);

  if (v21 != (id)260)
    goto LABEL_10;
LABEL_11:

LABEL_12:
  swift_release();

}

uint64_t sub_1BE1939D0()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 112))
  {
    swift_retain();
    sub_1BDFAC7A8();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BE193A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1BE1B2ABC();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1BE1B2AB0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1BDD86E30(a1, (uint64_t *)&unk_1ED6F3C10);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1BE1B2A98();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1BE193B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1BE1B2ABC();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1BE1B2AB0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1BDD86E30(a1, (uint64_t *)&unk_1ED6F3C10);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1BE1B2A98();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EF525648);
  return swift_task_create();
}

uint64_t sub_1BE193CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_manager;
  if (MEMORY[0x1C3B7E140](v0 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_manager))
  {
    v5 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
    v9 = v8;
    swift_unknownObjectRelease();
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1BE1B61B0;
      v19 = 0;
      v20 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      v19 = v7;
      v20 = v9;
      sub_1BE1B284C();
      v11 = v19;
      v12 = v20;
      *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v10 + 32) = v11;
      *(_QWORD *)(v10 + 40) = v12;
      sub_1BE1B36D4();
      swift_bridgeObjectRelease();
    }
  }
  result = MEMORY[0x1C3B7E140](v4);
  if (result)
  {
    v14 = *(_QWORD *)(v4 + 8);
    v15 = v0 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_fileURL;
    v16 = sub_1BE1B1DF0();
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v3, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v3, 0, 1, v16);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v3, 1, v16);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v18 = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 8))(v3, v18, v14);
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v3, v16);
    }
  }
  return result;
}

uint64_t sub_1BE193EE0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v2 = v1;
  v4 = sub_1BE1B1DF0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - v12;
  v14 = objc_msgSend(a1, sel_url2);
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
    return sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3C70);
  }
  v15 = v14;
  sub_1BE1B1DD8();

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v7, v4);
  v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v16(v13, 0, 1, v4);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v17(v13, 1, v4) == 1)
    return sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3C70);
  sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3C70);
  v18 = v2 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_manager;
  if (MEMORY[0x1C3B7E140](v2 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_manager))
  {
    v19 = *(_QWORD *)(v18 + 8);
    ObjectType = swift_getObjectType();
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(ObjectType, v19);
    v23 = v22;
    swift_unknownObjectRelease();
    if (v23)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v24 = swift_allocObject();
      v32 = v2;
      v33 = 0;
      v25 = (_QWORD *)v24;
      *(_OWORD *)(v24 + 16) = xmmword_1BE1B61B0;
      v34 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      v33 = v21;
      v34 = v23;
      sub_1BE1B284C();
      v26 = v33;
      v27 = v34;
      v25[7] = MEMORY[0x1E0DEA968];
      v25[4] = v26;
      v25[5] = v27;
      sub_1BE1B36D4();
      v2 = v32;
      swift_bridgeObjectRelease();
    }
  }
  result = MEMORY[0x1C3B7E140](v18);
  if (result)
  {
    v29 = *(_QWORD *)(v18 + 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v2 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_fileURL, v4);
    v16(v11, 0, 1, v4);
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)(v11, 1, v4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v30 = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 8))(v11, v30, v29);
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  return result;
}

id sub_1BE19425C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRFileSyncPresenter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BE1942F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDED755C(a1, a2, a3, a4);
  return swift_deallocClassInstance();
}

void sub_1BE194314()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE19435C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v6 = *a1;
  v7 = type metadata accessor for Capsule(255, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16), a4);
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v18 - v14;
  (*(void (**)(uint64_t))(v6 + 248))(v13);
  v16 = *(_QWORD *)(v7 - 8);
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  if ((_DWORD)v6 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v12, a2, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v7);
    return (*(uint64_t (**)(char *))(*a1 + 256))(v12);
  }
  return result;
}

uint64_t sub_1BE19448C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v4 = sub_1BE1B248C();
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B24BC();
  v18 = *(_QWORD *)(v7 - 8);
  v19 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B2498();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF540], v10);
  v14 = (void *)sub_1BE1B2E64();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  aBlock[4] = sub_1BDD843C8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_105;
  v16 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v9, v6, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  return swift_release();
}

uint64_t sub_1BE194700(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  _QWORD v19[6];
  char v20;
  uint64_t v21;

  v8 = *a1;
  v9 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*a1 + 264))(v19);
  v11 = v10;
  v13 = type metadata accessor for Capsule(0, *(_QWORD *)(v8 + 80), *(_QWORD *)(*(_QWORD *)(v8 + 88) + 16), v12);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13))
    Capsule.merge<A>(_:)(a2, v13, a3, a4);
  v9(v19, 0);
  v21 = 0;
  v20 = 0;
  v14 = a1[3];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = &v21;
  v15[6] = &v20;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_1BE1963B0;
  *(_QWORD *)(v16 + 24) = v15;
  v19[4] = sub_1BDE28190;
  v19[5] = v16;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1107296256;
  v19[2] = sub_1BDD843A8;
  v19[3] = &block_descriptor_93;
  v17 = _Block_copy(v19);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v17);
  _Block_release(v17);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (!v21 && (v20 & 1) == 0)
      sub_1BE192FE4();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BE1948D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v8 = result;
  swift_beginAccess();
  v9 = *(_QWORD *)(v8 + 104);
  v11 = type metadata accessor for CRSyncSubscription(0, a3, a4, v10);
  v12 = swift_bridgeObjectRetain();
  if (!MEMORY[0x1C3B7C928](v12, v11))
    goto LABEL_11;
  v13 = 4;
  while (1)
  {
    v14 = v13 - 4;
    v15 = sub_1BE1B29FC();
    sub_1BE1B29A8();
    if ((v15 & 1) == 0)
      break;
    swift_retain();
    v16 = v13 - 3;
    if (__OFADD__(v14, 1))
      goto LABEL_10;
LABEL_6:
    v17 = a2;
    sub_1BE1B2468();
    swift_release();

    ++v13;
    if (v16 == MEMORY[0x1C3B7C928](v9, v11))
      goto LABEL_11;
  }
  sub_1BE1B30BC();
  v16 = v13 - 3;
  if (!__OFADD__(v14, 1))
    goto LABEL_6;
LABEL_10:
  __break(1u);
LABEL_11:
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1BE194A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1BDDCE860(a4, 1, a5);
}

void sub_1BE194AA8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE194B08()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BE194B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1BE194B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1BE194BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = sub_1BE1B1DF0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  if (*(_BYTE *)(a1 + 89) != 1)
    goto LABEL_8;
  if (qword_1ED6F39E8 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  if (v16 == 1)
  {
    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 40);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1BE1B61B0;
      v16 = 0;
      v17 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16 = v12;
      v17 = v11;
      sub_1BE1B284C();
      sub_1BDD8422C(&qword_1EF52F158, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      v14 = v16;
      v15 = v17;
      *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v13 + 32) = v14;
      *(_QWORD *)(v13 + 40) = v15;
      sub_1BE1B36D4();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    swift_beginAccess();
    sub_1BDE6AAA8((uint64_t)v10, v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    swift_endAccess();
  }
  else
  {
LABEL_8:
    sub_1BE1936E8();
  }
}

void sub_1BE194E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  unsigned int v8;

  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v7 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_fileExistsAtPath_, v7);

  if (v8)
    sub_1BDDCE394(a1, a4);
}

uint64_t sub_1BE194F20()
{
  sub_1BE19233C();
  return swift_deallocClassInstance();
}

uint64_t sub_1BE194F44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BE194F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Capsule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 88) + 16), a4);
  sub_1BE1B2EE8();
  return sub_1BE1B2E40();
}

uint64_t CRBinaryFileSync.write(_:to:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BDDD0160(a1, a2, a3, a5);
}

uint64_t CRCustomFileSyncManager.disableReadingInBackground.getter()
{
  unsigned __int8 v1;

  sub_1BE1B2E40();
  return v1;
}

uint64_t (*CRCustomFileSyncManager.disableReadingInBackground.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  sub_1BE1B2E40();
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return sub_1BE1950B4;
}

uint64_t sub_1BE1950B4(uint64_t a1)
{
  return sub_1BDD8906C(*(_BYTE *)(a1 + 9));
}

uint64_t *CRCustomFileSyncManager.__allocating_init(_:sync:at:)(void *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char v34;

  v31 = a1;
  v5 = *(_QWORD *)(v3 + 80);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = a2;
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B1DF0();
  v29 = *(_QWORD *)(v8 - 8);
  v9 = v29;
  v30 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v14);
  v15 = sub_1BE1B2EE8();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v28 - v17;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)&v28 - v17, v33, v15);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20 = a3;
  v21 = a3;
  v22 = v30;
  v19(v11, v21, v30);
  v34 = 1;
  type metadata accessor for CRBinaryFileSync(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  swift_dynamicCast();
  v24 = v31;
  v25 = sub_1BDDCC808(v31, (uint64_t)v18, (uint64_t)v11, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
  v26 = *(void (**)(char *, uint64_t))(v16 + 8);
  v26(v18, v15);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v20, v22);
  v26(v33, v15);
  return v25;
}

uint64_t sub_1BE1952F8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1BE19535C;
  return v6(a1);
}

uint64_t sub_1BE19535C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1BE1953A8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1BE195410;
  return v5(v2 + 32);
}

uint64_t sub_1BE195410()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

_QWORD *sub_1BE195460(void *a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  objc_class *v44;
  char *v45;
  id v46;
  id v47;
  char *v48;
  id v49;
  uint64_t v50;
  char *v51;
  void (*v52)(_BYTE *, uint64_t);
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  id v58;
  uint64_t v59;
  _BYTE v61[4];
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_BYTE *, uint64_t);
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  objc_super v89;
  _QWORD v90[2];

  v6 = (_QWORD *)v5;
  v80 = a4;
  v81 = a5;
  v88 = a3;
  v85 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 88);
  v77 = *(_QWORD *)(*(_QWORD *)v5 + 80);
  v78 = v7;
  v79 = a1;
  type metadata accessor for Capsule(255, v77, *(_QWORD *)(v7 + 16), a4);
  v8 = sub_1BE1B2EE8();
  v83 = *(_QWORD *)(v8 - 8);
  v84 = v8;
  MEMORY[0x1E0C80A78](v8);
  v82 = &v61[-v9];
  v10 = sub_1BE1B1DF0();
  v75 = *(_QWORD *)(v10 - 8);
  v76 = v10;
  MEMORY[0x1E0C80A78](v10);
  v74 = &v61[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_1BE1B2E28();
  v72 = *(_QWORD *)(v12 - 8);
  v73 = v12;
  MEMORY[0x1E0C80A78](v12);
  v71 = &v61[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v87 = sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v87);
  v86 = &v61[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v15);
  v16 = sub_1BE1B1F58();
  v17 = *(_QWORD *)(v16 - 8);
  v67 = v16;
  MEMORY[0x1E0C80A78](v16);
  v19 = &v61[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
  v90[0] = 0;
  v90[1] = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v90[0] = 0xD000000000000012;
  v90[1] = 0x80000001BE1D2250;
  sub_1BE1B1F4C();
  v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v20 = swift_allocObject();
  v68 = xmmword_1BE1B61C0;
  *(_OWORD *)(v20 + 16) = xmmword_1BE1B61C0;
  v21 = sub_1BE1B1F40();
  v22 = MEMORY[0x1E0DEDE70];
  v23 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v20 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v20 + 64) = v23;
  v24 = v22;
  v25 = v23;
  *(_BYTE *)(v20 + 32) = v21;
  v26 = sub_1BE1B1F40();
  *(_QWORD *)(v20 + 96) = v24;
  *(_QWORD *)(v20 + 104) = v25;
  *(_BYTE *)(v20 + 72) = BYTE1(v26);
  sub_1BE1B27EC();
  v66 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
  v66(v19, v16);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B24A4();
  v90[0] = MEMORY[0x1E0DEE9D8];
  v64 = sub_1BDD8422C(qword_1ED6F4480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  v65 = sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  sub_1BE1B2F78();
  v62 = *MEMORY[0x1E0DEF8D0];
  v27 = v73;
  v72 = *(_QWORD *)(v72 + 104);
  v28 = v71;
  ((void (*)(_BYTE *))v72)(v71);
  *(_QWORD *)(v5 + 24) = sub_1BE1B2E58();
  strcpy((char *)v90, "model-atomic-");
  HIWORD(v90[1]) = -4864;
  sub_1BE1B1F4C();
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v68;
  v30 = sub_1BE1B1F40();
  v31 = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v29 + 56) = MEMORY[0x1E0DEDE70];
  v32 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v29 + 64) = MEMORY[0x1E0DEDEC8];
  *(_BYTE *)(v29 + 32) = v30;
  v33 = sub_1BE1B1F40();
  *(_QWORD *)(v29 + 96) = v31;
  *(_QWORD *)(v29 + 104) = v32;
  *(_BYTE *)(v29 + 72) = BYTE1(v33);
  sub_1BE1B27EC();
  v66(v19, v67);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B24A4();
  v90[0] = MEMORY[0x1E0DEE9D8];
  sub_1BE1B2F78();
  ((void (*)(_BYTE *, _QWORD, uint64_t))v72)(v28, v62, v27);
  *(_QWORD *)(v5 + 32) = sub_1BE1B2E58();
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_WORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = MEMORY[0x1E0DEE9E8];
  v35 = v77;
  v34 = v78;
  type metadata accessor for CRSyncSubscription(0, v77, v78, v36);
  *(_QWORD *)(v5 + 104) = sub_1BE1B2588();
  *(_QWORD *)(v5 + 112) = 0;
  v38 = v79;
  v37 = v80;
  *(_QWORD *)(v5 + 72) = v79;
  v39 = v81;
  *(_QWORD *)(v5 + 40) = v37;
  *(_QWORD *)(v5 + 48) = v39;
  v40 = v74;
  v41 = v75;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v43 = v76;
  v42(v74, (uint64_t)v88, v76);
  v44 = (objc_class *)type metadata accessor for CRFileSyncPresenter();
  v45 = (char *)objc_allocWithZone(v44);
  *(_QWORD *)&v45[OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_manager + 8] = 0;
  swift_unknownObjectWeakInit();
  v42(&v45[OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_fileURL], (uint64_t)v40, v43);
  v46 = objc_allocWithZone(MEMORY[0x1E0CB3828]);
  v47 = v38;
  v48 = v45;
  v49 = objc_msgSend(v46, sel_init);
  *(_QWORD *)&v48[OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_queue] = v49;

  v89.receiver = v48;
  v89.super_class = v44;
  v50 = v43;
  v51 = (char *)objc_msgSendSuper2(&v89, sel_init);
  v52 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
  v52(v40, v43);
  v6[2] = v51;
  *(_QWORD *)&v51[OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_manager + 8] = &off_1E7758A70;
  swift_unknownObjectWeakAssign();
  v53 = v82;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v83 + 16))(v82, v85, v84);
  (*(void (**)(_BYTE *))(*v6 + 256))(v53);
  v55 = type metadata accessor for _CRFileSyncManager(255, v35, v34, v54);
  v56 = MEMORY[0x1C3B7DF54](&unk_1BE1C8868, v55);
  type metadata accessor for AsyncUpdatesActor(0, v35, v55, v56);
  swift_retain();
  v57 = sub_1BDDCFB58();
  swift_release();
  v6[14] = v57;
  swift_release();
  v58 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v59 = qword_1ED6F3A00;
  swift_retain();
  if (v59 != -1)
    swift_once();
  objc_msgSend(v58, sel_addObserver_selector_name_object_, v6, sel_willEnterForeground, qword_1ED6F8BA0, 0);

  swift_release();
  sub_1BDDCD9E4();
  v52(v88, v50);
  return v6;
}

uint64_t sub_1BE195C04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CRCustomFileSyncManager.disableReadingInBackground.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BE195C30(char *a1)
{
  return CRCustomFileSyncManager.disableReadingInBackground.setter(*a1);
}

uint64_t sub_1BE195C54()
{
  return 16;
}

__n128 sub_1BE195C60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BE195C6C()
{
  return type metadata accessor for CRFileSyncPresenter();
}

uint64_t sub_1BE195C74(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BE195CC0 + 4 * byte_1BE1C85E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BE195CF4 + 4 * byte_1BE1C85E0[v4]))();
}

uint64_t sub_1BE195CF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE195CFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE195D04);
  return result;
}

uint64_t sub_1BE195D10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE195D18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BE195D1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE195D24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE195D30()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_1BE195D60()
{
  return swift_deallocObject();
}

void sub_1BE195D74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1BE194E3C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1BE195D80()
{
  return swift_deallocObject();
}

uint64_t sub_1BE195D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BE1B1DF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_1BE195E04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1BE1B1DF0() - 8) + 80);
  sub_1BE194BD0(*(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_1BE195E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objectdestroy_28Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08], a2, a3, a4);
}

uint64_t sub_1BE195E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 16), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  v8 = (uint64_t *)(v4 + ((v7 + 56) & ~v7));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1BDDB796C(*v8, v9);
  v10 = (char *)v8 + *(int *)(v6 + 36);
  v11 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE195F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule(0, v4[4], *(_QWORD *)(v4[5] + 16), a4) - 8)
                          + 80);
  v7 = v4[6];
  v8 = (char *)v4 + ((v6 + 56) & ~v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_1BDE28004;
  v9[2] = v7;
  v9[3] = v8;
  return swift_task_switch();
}

uint64_t sub_1BE195FA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BDE281A0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF531938 + dword_1EF531938))(a1, v4);
}

uint64_t sub_1BE196018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1BE1B1DF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1BE1960A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_1BE1B1DF0() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1BE194A44(a1, a2, *(_QWORD *)(v2 + 32), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1BE19610C()
{
  return swift_deallocObject();
}

void sub_1BE19611C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 88) = 1;
}

uint64_t sub_1BE196128()
{
  return swift_deallocObject();
}

uint64_t sub_1BE196138()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BE19615C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BE196188()
{
  uint64_t v0;

  return sub_1BE1948D8(*(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BE196194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BDE28004;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF531948 + dword_1EF531948))(a1, v4);
}

uint64_t sub_1BE196204()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BE196228(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 89);
}

void sub_1BE196234(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 56) = v5;
    *a1 = *(_BYTE *)(v2 + 88);
  }
}

uint64_t sub_1BE196258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 24);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(v4 + 40), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_release();
  v8 = (uint64_t *)(v4 + ((v7 + 56) & ~v7));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1BDDB796C(*v8, v9);
  v10 = (char *)v8 + *(int *)(v6 + 36);
  v11 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE196334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule(0, v5, v6, a4) - 8) + 80);
  return sub_1BE194700(*(_QWORD **)(v4 + 48), v4 + ((v7 + 56) & ~v7), v5, v6);
}

uint64_t sub_1BE19638C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BE1963B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;

  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + 56);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v6 = (_QWORD *)v0[5];
    v5 = (_BYTE *)v0[6];
    *(_QWORD *)(v1 + 56) = v4;
    *v6 = v4;
    *v5 = *(_BYTE *)(v1 + 88);
  }
}

uint64_t sub_1BE1963DC()
{
  return swift_deallocObject();
}

uint64_t sub_1BE1963EC()
{
  uint64_t v0;

  return sub_1BE19448C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BE1963F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE196418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objectdestroy_28Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30], a2, a3, a4);
}

uint64_t objectdestroy_28Tm(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;

  v6 = v4[2];
  v7 = type metadata accessor for Capsule(0, v6, *(_QWORD *)(v4[3] + 16), a4);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  a1(v4[4]);
  v9 = (_QWORD *)((char *)v4 + ((v8 + 40) & ~v8));
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_1BDDB796C(*v9, v10);
  v11 = (char *)v9 + *(int *)(v7 + 36);
  v12 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v6);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE196504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), a4)- 8)+ 80);
  return sub_1BE19435C(*(uint64_t **)(v4 + 32), v4 + ((v5 + 40) & ~v5), v6, v7);
}

uint64_t sub_1BE196544()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BE196568()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_1BE1965C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1BE19662C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

__n128 WeakRef.init(id:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BE1966E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8[2];

  v5 = *v2;
  v6 = v2[1];
  v8[0] = v5;
  v8[1] = v6;
  sub_1BDDB6CA4(v5, v6);
  sub_1BDE56C40(v8, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return sub_1BDDB796C(v5, v6);
}

uint64_t *WeakRef.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v6;
  __int128 v8;

  v8 = *v4;
  v6 = type metadata accessor for Capsule(0, a3, a4, a4);
  return Capsule.subscript.getter((uint64_t *)&v8, v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void WeakRef.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int EnumCaseMultiPayload;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[2];
  uint64_t v97;

  v81 = a3;
  v80 = a2;
  v79 = a4;
  v95 = type metadata accessor for Proto_KeyPath(0);
  v93 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v86 = (uint64_t *)((char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v7 = MEMORY[0x1E0C80A78](v6);
  v85 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v92 = (uint64_t)&v78 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v83 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v78 - v13;
  v94 = type metadata accessor for Proto_Reference(0);
  v15 = MEMORY[0x1E0C80A78](v94);
  v84 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v91 = (uint64_t)&v78 - v17;
  v18 = type metadata accessor for Proto_Value(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v90 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v97 = (uint64_t)&v78 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v24 = MEMORY[0x1E0C80A78](v23);
  v88 = (uint64_t)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v78 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v78 - v29;
  v31 = a1;
  v32 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v32, (uint64_t)v30, &qword_1ED6F3770);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v19) = v33(v30, 1, v18);
  sub_1BDD86E30((uint64_t)v30, &qword_1ED6F3770);
  if ((_DWORD)v19 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v34 = 0xD000000000000017;
    *(_QWORD *)(v34 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v34 + 16) = 0;
    swift_willThrow();
    swift_release();
    return;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  inited = swift_initStackObject();
  v89 = v31;
  v82 = inited;
  *(_QWORD *)(inited + 16) = v31;
  sub_1BDD86DEC(v32, (uint64_t)v28, &qword_1ED6F3770);
  if (v33(v28, 1, v18) == 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  v36 = v97;
  sub_1BDDA2E8C((uint64_t)v28, v97, type metadata accessor for Proto_Value);
  v37 = *(_QWORD *)(v36 + *(int *)(v18 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v37, (uint64_t)v14, &qword_1ED6F26F0);
  v38 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48);
  v40 = v39(v14, 1, v38);
  v41 = v94;
  if (v40 == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 7)
    {
      v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
      v43 = v91;
      sub_1BDDA2E8C((uint64_t)v14, v91, type metadata accessor for Proto_Reference);
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v43 = v91;
  sub_1BE1B20E4();
  v44 = *(int *)(v41 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v33;
  *(_QWORD *)(v43 + v44) = qword_1ED6EFD68;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0(v97, type metadata accessor for Proto_Value);
  v45 = *(_QWORD *)(v43 + *(int *)(v41 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  v46 = v92;
  sub_1BDD86DEC(v45, v92, &qword_1ED6F3790);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  LODWORD(v45) = v47(v46, 1, v95);
  sub_1BDD86E30(v46, &qword_1ED6F3790);
  sub_1BDD9C3E0(v43, type metadata accessor for Proto_Reference);
  if ((_DWORD)v45 == 1)
  {
    sub_1BDDFCAFC();
    v48 = (void *)swift_allocError();
    *(_OWORD *)v49 = xmmword_1BE1C85D0;
    *(_BYTE *)(v49 + 16) = 0;
    swift_willThrow();
    v50 = v89;
LABEL_28:
    v72 = swift_retain();
    CRKeyPath.init(from:)(v72, v96);
    v71 = 0;

    goto LABEL_29;
  }
  v51 = *(_QWORD *)(v82 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v52 = v51;
  v53 = v88;
  sub_1BDD86DEC(v52, v88, &qword_1ED6F3770);
  if (v42(v53, 1, v18) == 1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v54 = v53;
  v55 = v90;
  sub_1BDDA2E8C(v54, v90, type metadata accessor for Proto_Value);
  v56 = *(_QWORD *)(v55 + *(int *)(v18 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v57 = v56;
  v58 = v83;
  sub_1BDD86DEC(v57, v83, &qword_1ED6F26F0);
  v59 = v39((char *)v58, 1, v38);
  v60 = v94;
  if (v59 == 1)
  {
    sub_1BDD86E30(v58, &qword_1ED6F26F0);
    v50 = v89;
    v61 = v95;
    v62 = (uint64_t)v85;
    v63 = v84;
    v64 = qword_1ED6EEFE0 + 32;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v50 = v89;
    v62 = (uint64_t)v85;
    v63 = v84;
    v64 = &qword_1ED6EEFE0[4];
    if (EnumCaseMultiPayload == 7)
    {
      sub_1BDDA2E8C(v58, v84, type metadata accessor for Proto_Reference);
      v61 = v95;
      goto LABEL_23;
    }
    sub_1BDD9C3E0(v58, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v61 = v95;
  }
  sub_1BE1B20E4();
  v66 = *(int *)(v60 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v63 + v66) = qword_1ED6EFD68;
  swift_retain();
LABEL_23:
  sub_1BDD9C3E0(v90, type metadata accessor for Proto_Value);
  v67 = *(_QWORD *)(v63 + *(int *)(v60 + 20)) + v64[433];
  swift_beginAccess();
  sub_1BDD86DEC(v67, v62, &qword_1ED6F3790);
  if (v47(v62, 1, v61) == 1)
  {
    v68 = v86;
    *v86 = MEMORY[0x1E0DEE9D8];
    v68[1] = sub_1BE1B20CC();
    v68[2] = v69;
    sub_1BE1B20E4();
    sub_1BDD86E30(v62, &qword_1ED6F3790);
  }
  else
  {
    v68 = v86;
    sub_1BDDA2E8C(v62, (uint64_t)v86, type metadata accessor for Proto_KeyPath);
  }
  v70 = v87;
  sub_1BDD9C3E0(v63, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1BDDC8ECC((uint64_t)v68);
  v71 = v70;
  if (v70)
  {
    v48 = v70;
    goto LABEL_28;
  }
LABEL_29:
  v73 = v96[0];
  v74 = v96[1];
  v75 = *(_QWORD *)(v50 + 16);
  if (!v75)
  {
LABEL_35:
    __break(1u);
    return;
  }
  v76 = *(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 176);
  swift_retain();
  sub_1BDDB6CA4(v73, v74);
  v76(v80, v96, v50, 1, v80, v81);
  if (v71)
  {
    sub_1BDDB796C(v73, v74);
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v73, v74);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v73, v74);
    v77 = v79;
    *v79 = v73;
    v77[1] = v74;
  }
}

uint64_t WeakRef.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1BDDB6CA4(v2, v3);
}

uint64_t WeakRef.id.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_1BDDB796C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*WeakRef.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakRef.init(id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v16 = sub_1BDDC4278((uint64_t)&unk_1E775AD40);
  v17 = v8;
  v9 = sub_1BDEE7C7C();
  v11 = v10;
  sub_1BE1B1EA4();
  sub_1BDDB796C(v9, v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  v13 = v16;
  v14 = v17;
  result = ((uint64_t (*)(uint64_t, uint64_t))v12)(a1, v4);
  *a2 = v13;
  a2[1] = v14;
  return result;
}

double WeakRef.init<A>(_:_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  double result;
  __n128 v9;

  swift_retain();
  sub_1BDE58130(a1, a2, a3, &v9);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = v9.n128_f64[0];
  *a4 = v9;
  return result;
}

double WeakRef.init<A>(_:_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;

  swift_release();
  v9 = type metadata accessor for Capsule(0, a2, *(_QWORD *)(a3 + 16), v8);
  Capsule<>.rootID.getter((uint64_t *)&v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  result = *(double *)&v11;
  *a4 = v11;
  return result;
}

double WeakRef.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v8;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 48))(&v8, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = *(double *)&v8;
  *a4 = v8;
  return result;
}

uint64_t WeakRef.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v6;

  v6 = *v4;
  return (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(a4 + 16))(&v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

{
  __int128 *v4;
  __int128 v6;

  v6 = *v4;
  return (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(a4 + 40))(&v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BE1974E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a3 + a2 - 24);
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v7 = type metadata accessor for WeakRef(0, *(_QWORD *)(a3 + a2 - 32), *(_QWORD *)(a3 + a2 - 16), a4);
  return WeakRef.subscript.getter(a2, v7, v5, v6);
}

uint64_t sub_1BE197550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = type metadata accessor for WeakRef(0, *(_QWORD *)(a4 + a3 - 32), *(_QWORD *)(a4 + a3 - 16), a4);
  return sub_1BE198A18(a1, a3, v8, v6, v7);
}

uint64_t WeakRef.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  sub_1BE198A18(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  v8 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
}

void (*WeakRef.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v10 = malloc(0x58uLL);
  *a1 = v10;
  v10[1] = a4;
  v10[2] = a5;
  *v10 = a3;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = sub_1BE1B2EE8();
  v10[3] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v10[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v10[5] = malloc(v14);
  v15 = malloc(v14);
  v16 = *(_QWORD *)(a4 - 8);
  v10[6] = v15;
  v10[7] = v16;
  v17 = malloc(*(_QWORD *)(v16 + 64));
  v19 = *v5;
  v18 = v5[1];
  v10[8] = v17;
  v10[9] = v19;
  v10[10] = v18;
  (*(void (**)(void))(v16 + 16))();
  v21[0] = v19;
  v21[1] = v18;
  (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(a5 + 40))(v21, v11, *(_QWORD *)(a3 + 24), a4, a5);
  return sub_1BE197734;
}

void sub_1BE197734(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = (void *)(*a1)[8];
  v13 = (*a1)[7];
  v4 = (void *)(*a1)[5];
  v5 = (void *)(*a1)[6];
  v6 = (*a1)[3];
  v7 = (*a1)[1];
  v8 = (*a1)[2];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    v12 = v2[4];
    (*(void (**)(void *, void *, uint64_t))((*a1)[4] + 16))(v4, v5, v6);
    sub_1BE198A18((uint64_t)v4, (uint64_t)v3, v9, v7, v8);
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v7);
    v10 = *(void (**)(void *, uint64_t))(v12 + 8);
    v10(v4, v6);
    v10(v5, v6);
  }
  else
  {
    v11 = (*a1)[4];
    sub_1BE198A18((uint64_t)v5, (uint64_t)v3, v9, v7, (*a1)[2]);
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v7);
    (*(void (**)(void *, uint64_t))(v11 + 8))(v5, v6);
  }
  free(v3);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t WeakRef.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8[2];

  v6 = v2[1];
  v8[0] = *v2;
  v5 = v8[0];
  v8[1] = v6;
  swift_retain();
  sub_1BDDB6CA4(v8[0], v6);
  sub_1BDE56C40(v8, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  swift_release();
  return sub_1BDDB796C(v5, v6);
}

uint64_t sub_1BE1978EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v5 = *(_QWORD *)(a3 + a2 - 32);
  v6 = *(_QWORD *)(a3 + a2 - 16);
  v7 = *a1;
  v11 = a1[1];
  sub_1BDDB6CA4(*a1, v11);
  v9 = type metadata accessor for WeakRef(0, v5, v6, v8);
  WeakRef.subscript.getter(v9, a4);
  return sub_1BDDB796C(v7, v11);
}

uint64_t sub_1BE197970(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakRef(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BE198AF0(a1, v5, v6);
  return swift_release();
}

uint64_t WeakRef.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BE198AF0(a1, a2, a3);
  swift_release();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void (*WeakRef.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = sub_1BE1B2EE8();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = *v3;
  v13 = v3[1];
  v7[5] = v11;
  v7[6] = v12;
  v7[7] = v13;
  sub_1BDDB6CA4(v12, v13);
  WeakRef.subscript.getter(a3, (uint64_t)v11);
  sub_1BDDB796C(v12, v13);
  return sub_1BE197B10;
}

void sub_1BE197B10(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    swift_retain();
    sub_1BE198AF0((uint64_t)v3, v7, v8);
    swift_release();
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    swift_retain();
    sub_1BE198AF0((uint64_t)v4, v7, v8);
    swift_release();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t WeakRef.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 *v5;
  __int128 v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  __int128 v12[2];
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16))
  {
    v8 = *(_OWORD *)a1;
    v13 = *(_QWORD *)(a1 + 16);
    v12[0] = *v5;
    v12[1] = v8;
    v9 = type metadata accessor for Capsule<>.ObservableDifference(0, a3, a4, a4);
    return Capsule<>.ObservableDifference.subscript.getter(v12, v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a5);
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a5, 1, 1, AssociatedTypeWitness);
  }
}

uint64_t WeakRef.visitReferences(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = *v2;
  v5 = v2[1];
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v9[0] = v4;
  v9[1] = v5;
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(v7 + 16))(v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v6, v7);
}

uint64_t WeakRef.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v5 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  if (a1 && *(_QWORD *)(a1 + 16))
  {
    sub_1BDDB6CA4(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
    v7 = sub_1BDDB7F0C(v5, v4);
    if ((v8 & 1) != 0)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v7);
      v10 = *v9;
      v11 = v9[1];
      sub_1BDDB6CA4(*v9, v11);
      result = sub_1BDDB796C(v5, v4);
      *a2 = v10;
      a2[1] = v11;
      return result;
    }
    sub_1BDDB796C(v5, v4);
  }
  *a2 = v5;
  a2[1] = v4;
  return sub_1BDDB6CA4(v5, v4);
}

uint64_t static WeakRef.canContainAssets.getter()
{
  return 0;
}

uint64_t WeakRef.ObservableDifference.contents.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t result;

  v2 = v1[1];
  if ((v2 >> 60) > 0xF || ((1 << (v2 >> 60)) & 0x8880) == 0)
  {
    v4 = *v1;
    *a1 = *v1;
    a1[1] = v2;
    return sub_1BDDB6CA4(v4, v2);
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1BE1B6B20;
  }
  return result;
}

uint64_t WeakRef.ObservableDifference.didChange.getter()
{
  uint64_t v0;

  return ((int)(*(_QWORD *)(v0 + 8) >> 60 << 28) >> 28 > -6) & (0x1011u >> (((*(_QWORD *)(v0 + 8) >> 60) + 5) & 0xF));
}

uint64_t WeakRef.ObservableDifference.isIdentityChanged.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v3;
  __int128 v4;

  v1 = *v0;
  v3 = xmmword_1BE1B6B20;
  v4 = v1;
  return static WeakRef.ObservableDifference.== infix(_:_:)((uint64_t *)&v4, (uint64_t)&v3) & 1;
}

uint64_t static WeakRef.ObservableDifference.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v10[2];
  uint64_t v11[2];

  v3 = *a1;
  v2 = a1[1];
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v2 >> 60;
  if (v2 >> 60 == 7)
  {
    if (v4 >> 60 != 7)
      goto LABEL_14;
  }
  else if ((_DWORD)v6 == 11)
  {
    if (v4 >> 60 != 11)
      goto LABEL_14;
  }
  else
  {
    if ((_DWORD)v6 != 15)
    {
      if ((v4 >> 60) > 0xF || ((1 << (v4 >> 60)) & 0x8880) == 0)
      {
        v11[0] = *a1;
        v11[1] = v2;
        v10[0] = v5;
        v10[1] = v4;
        sub_1BE198BC8(v5, v4);
        sub_1BE198BC8(v3, v2);
        sub_1BE198BC8(v5, v4);
        sub_1BE198BC8(v3, v2);
        v7 = static WeakRef.== infix(_:_:)(v11, v10);
        sub_1BE198BF0(v3, v2);
        sub_1BE198BF0(v5, v4);
        sub_1BE198BF0(v5, v4);
        sub_1BE198BF0(v3, v2);
        return v7 & 1;
      }
      goto LABEL_14;
    }
    if (v4 >> 60 != 15)
    {
LABEL_14:
      sub_1BE198BC8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      sub_1BE198BC8(v3, v2);
      sub_1BE198BF0(v3, v2);
      sub_1BE198BF0(v5, v4);
      v7 = 0;
      return v7 & 1;
    }
  }
  sub_1BE198BF0(*a1, v2);
  sub_1BE198BF0(v5, v4);
  v7 = 1;
  return v7 & 1;
}

uint64_t static WeakRef.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a1, v3);
  sub_1BDDB6CA4(v4, v5);
  sub_1BDDD6F30(v2, v3);
  v7 = v6;
  sub_1BDDB796C(v4, v5);
  sub_1BDDB796C(v2, v3);
  return v7 & 1;
}

uint64_t sub_1BE198088(uint64_t *a1, uint64_t a2)
{
  return static WeakRef.ObservableDifference.== infix(_:_:)(a1, a2);
}

uint64_t WeakRef.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v8 = *a1;
  v9 = a1[1];
  v10 = *v4;
  v11 = v4[1];
  sub_1BDDB6CA4(*v4, v11);
  sub_1BDDB6CA4(v8, v9);
  sub_1BDDD6F30(v10, v11);
  v13 = v12;
  sub_1BDDB796C(v8, v9);
  result = sub_1BDDB796C(v10, v11);
  if ((v13 & 1) != 0)
  {
    sub_1BDD86DEC(a2, (uint64_t)v21, &qword_1ED6EF878);
    v15 = v22;
    if (v22)
    {
      v16 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      v19[0] = v10;
      v19[1] = v11;
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(v16 + 16))(v20, v19, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v15, v16);
      v17 = v20[0];
      v18 = v20[1];
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      if (v18 >> 60 != 3)
        goto LABEL_8;
    }
    else
    {
      result = sub_1BDD86E30((uint64_t)v21, &qword_1ED6EF878);
    }
    v17 = 0;
    v18 = 0x3000000000000000;
  }
  else
  {
    v17 = 0;
    v18 = 0xF000000000000000;
  }
LABEL_8:
  *a4 = v17;
  a4[1] = v18;
  return result;
}

uint64_t WeakRef.hash(into:)()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_1BDDB6CA4(v2, v1);
  sub_1BE1B1E8C();
  return sub_1BDDB796C(v2, v1);
}

uint64_t WeakRef.hashValue.getter()
{
  sub_1BE1B36F8();
  WeakRef.hash(into:)();
  return sub_1BE1B371C();
}

uint64_t sub_1BE198264()
{
  sub_1BE1B36F8();
  WeakRef.hash(into:)();
  return sub_1BE1B371C();
}

void sub_1BE1982AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WeakRef.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BE1982C8()
{
  return WeakRef.encode(to:)();
}

uint64_t WeakRef.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v2 = MEMORY[0x1E0C80A78](v1);
  v66 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v65 = (uint64_t)&v55 - v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v67 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v64 = (uint64_t)&v55 - v8;
  v9 = type metadata accessor for Proto_Reference(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v55 - v13;
  v63 = type metadata accessor for Proto_KeyPath(0);
  v15 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *v0;
  v19 = v0[1];
  v20 = v68;
  result = sub_1BDE25870();
  if (v20)
    return result;
  v22 = result;
  v58 = v15;
  v61 = v12;
  v62 = v14;
  v68 = v9;
  v60 = 0;
  *v17 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  sub_1BDDB6CA4(v18, v19);
  v23 = sub_1BE1B20CC();
  v25 = v24;
  v26 = v63;
  sub_1BE1B20E4();
  sub_1BDDB796C(v23, v25);
  v17[1] = v18;
  v17[2] = v19;
  v59 = v22;
  v27 = v22 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v56 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
  v28 = *(_QWORD *)(v27 + v56)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v29 = v64;
  sub_1BDD86DEC(v28, v64, &qword_1ED6F26F0);
  v30 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48);
  v32 = v31(v29, 1, v30);
  v57 = v30;
  if (v32 == 1)
  {
    sub_1BDD86E30(v29, &qword_1ED6F26F0);
    v33 = v68;
    v34 = (uint64_t)v66;
    v35 = (uint64_t)v62;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v33 = v68;
    v34 = (uint64_t)v66;
    v35 = (uint64_t)v62;
    if (EnumCaseMultiPayload == 7)
    {
      sub_1BDDA2E8C(v29, (uint64_t)v62, type metadata accessor for Proto_Reference);
      goto LABEL_10;
    }
    sub_1BDD9C3E0(v29, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v37 = v35;
  v38 = *(int *)(v33 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v37 + v38) = qword_1ED6EFD68;
  swift_retain();
  v35 = v37;
LABEL_10:
  v39 = *(int *)(v33 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v40 = swift_retain();
    v35 = (uint64_t)v62;
    *(_QWORD *)(v35 + v39) = sub_1BDDA1424(v40);
    swift_release();
  }
  v41 = v35;
  v42 = *(_QWORD *)(v35 + v39);
  v43 = v65;
  sub_1BDDA2E8C((uint64_t)v17, v65, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v43, 0, 1, v26);
  sub_1BDFA1E6C(v43, v34);
  v44 = v42 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1BDFA1EB4(v34, v44);
  swift_endAccess();
  swift_release();
  sub_1BE12A648(v41);
  v45 = *(_QWORD *)(v27 + v56)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v46 = v45;
  v47 = v67;
  sub_1BDD86DEC(v46, v67, &qword_1ED6F26F0);
  if (v31(v47, 1, v57) == 1)
  {
    sub_1BDD86E30(v47, &qword_1ED6F26F0);
    v48 = (uint64_t)v61;
LABEL_17:
    v50 = v68;
    sub_1BE1B20E4();
    v51 = *(int *)(v50 + 20);
    if (qword_1ED6EFD78 != -1)
      swift_once();
    *(_QWORD *)(v48 + v51) = qword_1ED6EFD68;
    swift_retain();
    goto LABEL_20;
  }
  v49 = swift_getEnumCaseMultiPayload();
  v48 = (uint64_t)v61;
  if (v49 != 7)
  {
    sub_1BDD9C3E0(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_17;
  }
  sub_1BDDA2E8C(v47, (uint64_t)v61, type metadata accessor for Proto_Reference);
  v50 = v68;
LABEL_20:
  v52 = *(int *)(v50 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v53 = swift_retain();
    *(_QWORD *)(v48 + v52) = sub_1BDDA1424(v53);
    swift_release();
  }
  v54 = *(_QWORD *)(v48 + v52);
  swift_beginAccess();
  *(_QWORD *)(v54 + 24) = 1;
  *(_BYTE *)(v54 + 32) = 1;
  sub_1BE12A648(v48);
  swift_endAccess();
  return swift_release();
}

void sub_1BE1988C8(_BYTE *a1@<X8>)
{
  WeakRef.minEncodingVersion.getter(a1);
}

void WeakRef.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WeakRef.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[24];
  uint64_t v6;

  v2 = *v1;
  v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B3770();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_1BDE0B580();
  sub_1BE1B34F4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return sub_1BDDB796C(v2, v3);
}

void WeakRef.init(from:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE1989F8()
{
  WeakRef.init(from:)();
}

uint64_t sub_1BE198A04(_QWORD *a1)
{
  return WeakRef.encode(to:)(a1);
}

uint64_t sub_1BE198A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD v19[2];

  v10 = *(_QWORD *)(a3 + 16);
  v11 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v19 - v12;
  v15 = *v5;
  v14 = v5[1];
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)v19 - v12, a1);
  v19[0] = v15;
  v19[1] = v14;
  v17 = *(uint64_t (**)(char *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(a5 + 48);
  sub_1BDDB6CA4(v15, v14);
  return v17(v13, v19, v10, *(_QWORD *)(a3 + 24), a4, a5);
}

uint64_t sub_1BE198AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v14 - v8;
  v11 = *v3;
  v10 = v3[1];
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)v14 - v8, a1);
  v14[0] = v11;
  v14[1] = v10;
  swift_retain();
  sub_1BDDB6CA4(v11, v10);
  sub_1BDE56E90((uint64_t)v9, (uint64_t)v14, v6, *(_QWORD *)(a3 + 24));
  return swift_release();
}

uint64_t sub_1BE198BC8(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 60) > 0xF || ((1 << (a2 >> 60)) & 0x8880) == 0)
    return sub_1BDDB6CA4(a1, a2);
  return a1;
}

uint64_t sub_1BE198BF0(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 60) > 0xF || ((1 << (a2 >> 60)) & 0x8880) == 0)
    return sub_1BDDB796C(a1, a2);
  return a1;
}

void sub_1BE198C18()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE198C28(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakRef<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BE198C54(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakRef<A>);
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakRef<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BE198CA0()
{
  return 32;
}

__n128 sub_1BE198CAC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BE198CC0()
{
  return 32;
}

__n128 sub_1BE198CCC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for WeakRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakRef);
}

uint64_t sub_1BE198CE4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xA && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 10);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = 0;
  if (v4 >= 4)
    return v4 - 3;
  else
    return 0;
}

uint64_t sub_1BE198D40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 9)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 10;
    if (a3 >= 0xA)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xA)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (13 - a2)) | ((13 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t type metadata accessor for WeakRef.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakRef.ObservableDifference);
}

uint64_t sub_1BE198DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  char v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v14 >= v6)
      goto LABEL_24;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v6)
        goto LABEL_24;
      v15 = *(_QWORD *)(v2 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v6)
          goto LABEL_24;
        v15 = *(_QWORD *)(v2 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v6)
            goto LABEL_24;
          v15 = *(_QWORD *)(v2 + 8 * v8);
          if (!v15)
          {
            v16 = v14 + 4;
            if (v16 >= v6)
            {
LABEL_24:
              v17 = 0;
              goto LABEL_25;
            }
            v15 = *(_QWORD *)(v2 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v8 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_27;
                if (v8 >= v6)
                  goto LABEL_24;
                v15 = *(_QWORD *)(v2 + 8 * v8);
                ++v16;
                if (v15)
                  goto LABEL_22;
              }
            }
            v8 = v16;
          }
        }
      }
    }
LABEL_22:
    v5 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_5:
    v11 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v10) + 144);
    swift_bridgeObjectRetain();
    v12 = swift_retain();
    v13 = v11(v12);
    swift_release();
    result = swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      v17 = 1;
LABEL_25:
      swift_release();
      return v17;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BE198F48@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t);
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  LOBYTE(v10) = 0;
  v11 = 0;
  while (v7)
  {
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v13 = v12 | (v11 << 6);
LABEL_5:
    v14 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v13) + 192);
    v15 = swift_retain();
    v14(&v19, v15);
    result = swift_release();
    if (v19 <= v10)
      v10 = v10;
    else
      v10 = v19;
    if (v10 == 2)
    {
LABEL_24:
      result = swift_release();
      *a2 = v10;
      return result;
    }
  }
  v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >= v8)
    goto LABEL_24;
  v17 = *(_QWORD *)(v4 + 8 * v16);
  ++v11;
  if (v17)
    goto LABEL_23;
  v11 = v16 + 1;
  if (v16 + 1 >= v8)
    goto LABEL_24;
  v17 = *(_QWORD *)(v4 + 8 * v11);
  if (v17)
    goto LABEL_23;
  v11 = v16 + 2;
  if (v16 + 2 >= v8)
    goto LABEL_24;
  v17 = *(_QWORD *)(v4 + 8 * v11);
  if (v17)
  {
LABEL_23:
    v7 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v11 << 6);
    goto LABEL_5;
  }
  v18 = v16 + 3;
  if (v18 >= v8)
    goto LABEL_24;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v8)
      goto LABEL_24;
    v17 = *(_QWORD *)(v4 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t _s9Coherence17UnknownPropertiesV18finalizeTimestampsyyAA9CRContextCF_0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[4];

  v2 = *v1;
  v23 = *v1 + 64;
  v3 = 1 << *(_BYTE *)(*v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_26:
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    v18 = sub_1BDE5260C(v24, v15, v16);
    if (*(_QWORD *)v17)
    {
      v19 = v17;
      v20 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v17 + 144);
      v21 = swift_retain();
      LOBYTE(v20) = v20(v21);
      swift_release();
      if ((v20 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          *(_QWORD *)v19 = (*(uint64_t (**)(void))(**(_QWORD **)v19 + 160))();
          swift_release();
        }
        (*(void (**)(uint64_t))(**(_QWORD **)v19 + 152))(a1);
      }
    }
    ((void (*)(_QWORD *, _QWORD))v18)(v24, 0);
    result = swift_bridgeObjectRelease();
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v6)
    return swift_release();
  v12 = *(_QWORD *)(v23 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_25;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    return swift_release();
  v12 = *(_QWORD *)(v23 + 8 * v8);
  if (v12)
    goto LABEL_25;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    return swift_release();
  v12 = *(_QWORD *)(v23 + 8 * v8);
  if (v12)
    goto LABEL_25;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    return swift_release();
  v12 = *(_QWORD *)(v23 + 8 * v8);
  if (v12)
    goto LABEL_25;
  v8 = v11 + 4;
  if (v11 + 4 >= v6)
    return swift_release();
  v12 = *(_QWORD *)(v23 + 8 * v8);
  if (v12)
  {
LABEL_25:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_26;
  }
  v13 = v11 + 5;
  if (v13 >= v6)
    return swift_release();
  v12 = *(_QWORD *)(v23 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      return swift_release();
    v12 = *(_QWORD *)(v23 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

Coherence::UnknownProperties __swiftcall UnknownProperties.init()()
{
  Coherence::UnknownProperties *v0;
  Coherence::UnknownProperties *v1;
  Coherence::UnknownProperties result;

  v1 = v0;
  result.properties._rawValue = (void *)sub_1BE126E64(MEMORY[0x1E0DEE9D8]);
  v1->properties._rawValue = result.properties._rawValue;
  return result;
}

Coherence::UnknownProperties __swiftcall UnknownProperties.init(_:)(Coherence::UnknownProperties result)
{
  Coherence::UnknownProperties *v1;

  v1->properties._rawValue = result.properties._rawValue;
  return result;
}

Swift::Void __swiftcall UnknownProperties.merge(_:)(Coherence::UnknownProperties a1)
{
  sub_1BDDC8334(*(_QWORD *)a1.properties._rawValue);
}

Coherence::UnknownProperties __swiftcall UnknownProperties.copy(renamingReferences:)(Swift::OpaquePointer_optional renamingReferences)
{
  uint64_t *v1;
  uint64_t *v2;
  void *rawValue;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  Coherence::UnknownProperties result;

  rawValue = renamingReferences.value._rawValue;
  v4 = v1;
  v5 = *v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BE0A03A8(v5, (uint64_t)rawValue);
  result.properties._rawValue = (void *)swift_bridgeObjectRelease();
  *v4 = v6;
  return result;
}

Swift::Bool __swiftcall UnknownProperties.hasDelta(from:)(Coherence::UnknownProperties from)
{
  uint64_t *v1;

  return sub_1BDDB1F18(*(_QWORD *)from.properties._rawValue, *v1);
}

uint64_t UnknownProperties.visitReferences(_:)(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDDB1100(a1, *v1);
}

uint64_t UnknownProperties.minEncodingVersion.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BE198F48(*v1, a1);
}

Swift::Bool __swiftcall UnknownProperties.needToFinalizeTimestamps()()
{
  uint64_t *v0;

  return sub_1BE198DA4(*v0) & 1;
}

uint64_t UnknownProperties.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v3 = *v0;
  v4 = *v0 + 64;
  v5 = 1 << *(_BYTE *)(*v0 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*v0 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    v19 = swift_retain();
    sub_1BDFDD458(v19, v17, v18);
    swift_release();
    if (v2)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    if (!v14)
      break;
LABEL_15:
    v7 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v10 + 2;
  if (v10 + 2 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v10 + 3;
  if (v10 + 3 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v10 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for UnknownProperties()
{
  return &type metadata for UnknownProperties;
}

uint64_t sub_1BE1995A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v3 = MEMORY[0x1E0C80A78](v58);
  v57 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v56 = (uint64_t)&v46 - v6;
  MEMORY[0x1E0C80A78](v5);
  v55 = (char *)&v46 - v7;
  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x1E0DEE9D8];
  if (!v12)
    return v13;
  v48 = v1;
  v62 = MEMORY[0x1E0DEE9D8];
  sub_1BDE229FC(0, v12, 0);
  result = sub_1BE19A384(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v19 = *(_BYTE *)(a1 + 32);
  v47 = a1 + 88;
  v53 = v11;
  v54 = a1;
  v49 = v12;
  v50 = v15;
  v51 = a1 + 64;
  v52 = v9;
  v20 = (uint64_t)v55;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << v19)
  {
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_28;
    v60 = 1 << v16;
    v61 = (unint64_t)v16 >> 6;
    v59 = v17;
    v23 = v8;
    v24 = v58;
    v25 = v20 + *(int *)(v58 + 48);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = type metadata accessor for Replica();
    sub_1BDD9C318(v26 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v16, v20, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v28 = *(_QWORD *)(a1 + 56);
    v29 = sub_1BE1B206C();
    v30 = *(_QWORD *)(v29 - 8);
    v31 = v28 + *(_QWORD *)(v30 + 72) * v16;
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v32(v25, v31, v29);
    v33 = v56;
    sub_1BDD9C318(v20, v56, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v34 = *(int *)(v24 + 48);
    v8 = v23;
    v36 = v52;
    v35 = v53;
    v32(v33 + v34, v25, v29);
    v37 = v57;
    sub_1BDDA2EF0(v33, v57, &qword_1ED6F3CB8);
    sub_1BDD86E30(v20, &qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v37, v8);
    sub_1BDD86E30(v37, &qword_1ED6F3CB8);
    v13 = v62;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1BDE229FC(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = v62;
    }
    v39 = *(_QWORD *)(v13 + 16);
    v38 = *(_QWORD *)(v13 + 24);
    a1 = v54;
    if (v39 >= v38 >> 1)
    {
      sub_1BDE229FC(v38 > 1, v39 + 1, 1);
      v13 = v62;
    }
    *(_QWORD *)(v13 + 16) = v39 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))(v13+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v39, v35, v8);
    v62 = v13;
    v19 = *(_BYTE *)(a1 + 32);
    v21 = 1 << v19;
    if (v16 >= 1 << v19)
      goto LABEL_29;
    v18 = v51;
    v40 = v61;
    v41 = *(_QWORD *)(v51 + 8 * v61);
    if ((v41 & v60) == 0)
      goto LABEL_30;
    LODWORD(v15) = v50;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v50)
      goto LABEL_31;
    v42 = v41 & (-2 << (v16 & 0x3F));
    if (v42)
    {
      v21 = __clz(__rbit64(v42)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v22 = v49;
    }
    else
    {
      v43 = v61 + 1;
      v44 = (v21 + 63) >> 6;
      v22 = v49;
      if (v61 + 1 < v44)
      {
        v45 = *(_QWORD *)(v51 + 8 * v43);
        if (!v45)
        {
          v43 = v61 + 2;
          if (v61 + 2 >= v44)
            goto LABEL_4;
          v45 = *(_QWORD *)(v51 + 8 * v43);
          if (!v45)
          {
            while (v44 - 3 != v40)
            {
              v45 = *(_QWORD *)(v47 + 8 * v40++);
              if (v45)
              {
                v43 = v40 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v21 = __clz(__rbit64(v45)) + (v43 << 6);
      }
    }
LABEL_4:
    v17 = v59 + 1;
    v16 = v21;
    if (v59 + 1 == v22)
      return v13;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1BE1999B4()
{
  unint64_t *v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void (*v26)(uint64_t *, _QWORD);
  uint64_t *v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];

  v1 = v0;
  v2 = type metadata accessor for RetainedMapRun(0);
  v51 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v47 = (uint64_t)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v5 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  v49 = v5;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v38 - v12;
  v14 = sub_1BE1B203C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v50);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B2054();
  sub_1BE1B2030();
  v43 = v17;
  v44 = v15;
  v20 = (uint64_t)v19;
  v42 = *(void (**)(char *, uint64_t))(v15 + 8);
  v42(v17, v14);
  v21 = &v19[*(int *)(v50 + 36)];
  v22 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
  v23 = *(_QWORD *)v21;
  sub_1BE1B2C90();
  if (v23 == v52[0])
    return sub_1BDD86E30(v20, &qword_1ED6EFF58);
  v40 = v20;
  v41 = v14;
  v38 = v22;
  v39 = v21;
  v46 = v1;
  while (1)
  {
    v26 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
    v50 = *v27;
    v45 = v27[1];
    v26(v52, 0);
    v28 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v20, v14);
    sub_1BE1B2C9C();
    v42(v28, v14);
    result = sub_1BDDC0538(v50, v45);
    v45 = result;
    v30 = v48;
    if (result != v29)
      break;
LABEL_4:
    sub_1BDD85EF0(v45, v29);
    v20 = v40;
    v25 = *(_QWORD *)v39;
    v14 = v41;
    sub_1BE1B2C90();
    if (v25 == v52[0])
      return sub_1BDD86E30(v20, &qword_1ED6EFF58);
  }
  if (v29 < v45)
    goto LABEL_24;
  v31 = v45;
  v50 = v29;
  if (v45 < v29)
  {
    while (1)
    {
      if ((v31 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        break;
      }
      if (v31 >= *(_QWORD *)(*v1 + 16))
        goto LABEL_22;
      v32 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v33 = *(_QWORD *)(v49 + 72) * v31;
      sub_1BDD86DEC(*v1 + v32 + v33, (uint64_t)v7, qword_1ED6F25C0);
      sub_1BDD86DEC((uint64_t)&v7[*(int *)(v30 + 36)], (uint64_t)v11, &qword_1ED6F2520);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v11, 1, v2) == 1)
      {
        sub_1BDD86E30((uint64_t)v11, &qword_1ED6F2520);
      }
      else
      {
        v34 = v47;
        sub_1BDDA2E8C((uint64_t)v11, v47, type metadata accessor for RetainedMapRun);
        v35 = *(_QWORD *)(v34 + *(int *)(v2 + 20));
        v36 = v35 - 1;
        if (v35 > 1)
        {
          sub_1BDD86DEC(v34, (uint64_t)v13, (uint64_t *)&unk_1ED6F2DC0);
          *(_QWORD *)&v13[*(int *)(v2 + 20)] = v36;
          sub_1BDD9C3E0(v34, type metadata accessor for RetainedMapRun);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v13, 0, 1, v2);
          v30 = v48;
          v1 = v46;
          goto LABEL_16;
        }
        sub_1BDD9C3E0(v34, type metadata accessor for RetainedMapRun);
        v30 = v48;
        v1 = v46;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v13, 1, 1, v2);
LABEL_16:
      sub_1BDD86E30((uint64_t)v7, qword_1ED6F25C0);
      v37 = *v1;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v1 = v37;
      if ((result & 1) == 0)
      {
        result = sub_1BDFCEA00(v37);
        v37 = result;
        *v1 = result;
      }
      if (v31 >= *(_QWORD *)(v37 + 16))
        goto LABEL_23;
      ++v31;
      result = sub_1BDDD1A10((uint64_t)v13, v37 + v32 + *(int *)(v30 + 36) + v33);
      v29 = v50;
      if (v50 == v31)
        goto LABEL_4;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE199E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a2;
  v4 = sub_1BE1B1F58();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x1E0C80A78](v4);
  v42 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FinalizedTimestamp(0);
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  MEMORY[0x1E0C80A78](v12);
  v41 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFCA0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v40 - v22;
  sub_1BE19A28C(a1, *v2, (uint64_t)&v40 - v22);
  sub_1BDD86DEC((uint64_t)v23, (uint64_t)v21, &qword_1ED6EFCA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v21, 1, v14) == 1)
  {
    sub_1BDD86E30((uint64_t)v23, &qword_1ED6EFCA0);
    sub_1BDD86E30((uint64_t)v21, &qword_1ED6EFCA0);
    v24 = 1;
    v25 = v45;
    v26 = v46;
    v27 = v47;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v25, v24, 1, v27);
  }
  sub_1BDDA2EF0((uint64_t)v21, (uint64_t)v17, qword_1ED6F25C0);
  sub_1BDD86DEC((uint64_t)v17 + *(int *)(v14 + 36), (uint64_t)v8, &qword_1ED6F2520);
  v28 = type metadata accessor for RetainedMapRun(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v8, 1, v28) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F2520);
    v26 = v46;
    v27 = v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v11, 1, 1, v47);
LABEL_6:
    sub_1BDD86E30((uint64_t)v17, qword_1ED6F25C0);
    sub_1BDD86E30((uint64_t)v23, &qword_1ED6EFCA0);
    sub_1BDD86E30((uint64_t)v11, (uint64_t *)&unk_1ED6F2DC0);
    v24 = 1;
    v25 = v45;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v25, v24, 1, v27);
  }
  sub_1BDD86DEC((uint64_t)v8, (uint64_t)v11, (uint64_t *)&unk_1ED6F2DC0);
  sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for RetainedMapRun);
  v26 = v46;
  v27 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v11, 1, v47) == 1)
    goto LABEL_6;
  v29 = v41;
  sub_1BDDA2E8C((uint64_t)v11, v41, type metadata accessor for FinalizedTimestamp);
  v31 = v42;
  v30 = v43;
  v32 = v44;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v29, v44);
  v34 = *(_QWORD *)(v29 + *(int *)(v27 + 20));
  v35 = v34 + a1;
  if (__OFADD__(v34, a1))
  {
    __break(1u);
  }
  else
  {
    v36 = v29;
    v37 = *v17;
    sub_1BDD9C3E0(v36, type metadata accessor for FinalizedTimestamp);
    sub_1BDD86E30((uint64_t)v17, qword_1ED6F25C0);
    result = sub_1BDD86E30((uint64_t)v23, &qword_1ED6EFCA0);
    v38 = __OFSUB__(v35, v37);
    v39 = v35 - v37;
    if (!v38)
    {
      v25 = v45;
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v45, v31, v32);
      v24 = 0;
      *(_QWORD *)(v25 + *(int *)(v27 + 20)) = v39;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v25, v24, 1, v27);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1BE19A28C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4
    || (v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0),
        v8 = *(_QWORD *)(v7 - 8),
        v9 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),
        v10 = *(_QWORD *)(v8 + 72),
        *(_QWORD *)(v9 + v10 * (v4 - 1) + 8) <= a1))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
    v14 = a3;
    v15 = 1;
    return v13(v14, v15, 1, v16);
  }
  v11 = v7;
  result = sub_1BDDC0A40(a1, 0, a2);
  if (result < v4)
  {
    sub_1BDD86DEC(v9 + result * v10, a3, qword_1ED6F25C0);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v14 = a3;
    v15 = 0;
    v16 = v11;
    return v13(v14, v15, 1, v16);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE19A384(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_1BE19A424(_QWORD *result, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v9 = (uint64_t)result;
    v10 = *(_QWORD *)(a6 + 48);
    v11 = type metadata accessor for Replica();
    sub_1BDD9C318(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a3, v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    return sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(a6 + 56) + 16 * a3), a2);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1BE19A4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;

  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE758);
  v5 = MEMORY[0x1E0C80A78](v53);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v50 = (char *)&v44 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v52 = (uint64_t)&v44 - v11;
  MEMORY[0x1E0C80A78](v10);
  v51 = (uint64_t *)((char *)&v44 - v12);
  v60 = 0;
  v61 = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v60 = 0xD000000000000013;
  v61 = 0x80000001BE1D24B0;
  v57 = a1;
  sub_1BE1B32E4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  v14 = v60;
  v13 = v61;
  v15 = *(_QWORD *)(a3 + 16);
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v45 = v60;
    v46 = v61;
    v59 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BDE224EC(0, v15, 0);
    v17 = sub_1BE19A384(a3);
    v19 = v18;
    v21 = v20 & 1;
    v47 = a3 + 64;
    v54 = v15 - 1;
    v48 = xmmword_1BE1B61C0;
    v49 = a3;
    v22 = (uint64_t)v50;
    while (1)
    {
      v23 = v53;
      v24 = v51;
      v25 = (_QWORD *)((char *)v51 + *(int *)(v53 + 48));
      v55 = v19;
      sub_1BE19A424(v51, v25, v17, v19, v21 & 1, a3);
      v26 = v52;
      sub_1BDD9C318((uint64_t)v24, v52, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDB4ED4(v25, (_QWORD *)(v26 + *(int *)(v23 + 48)));
      sub_1BDDA2EF0(v26, v22, &qword_1ED6EE758);
      sub_1BDD86E30((uint64_t)v24, &qword_1ED6EE758);
      v60 = 8224;
      v61 = 0xE200000000000000;
      v27 = *(int *)(v23 + 48);
      v28 = &v7[v27];
      v29 = (_QWORD *)(v22 + v27);
      sub_1BDD9C318(v22, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDB4ED4(v29, v28);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
      v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = v48;
      v31 = sub_1BE1B1F40();
      v32 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v30 + 56) = MEMORY[0x1E0DEDE70];
      v33 = MEMORY[0x1E0DEDEC8];
      *(_QWORD *)(v30 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v30 + 32) = v31;
      v34 = sub_1BE1B1F40();
      *(_QWORD *)(v30 + 96) = v32;
      *(_QWORD *)(v30 + 104) = v33;
      *(_BYTE *)(v30 + 72) = BYTE1(v34);
      v57 = sub_1BE1B27EC();
      v58 = v35;
      sub_1BE1B284C();
      v56 = *(_QWORD *)&v7[*(int *)(type metadata accessor for Replica() + 20)];
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDDB4E78((uint64_t)v28);
      sub_1BE1B284C();
      v36 = &v7[*(int *)(v23 + 48)];
      sub_1BDD9C318(v22, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDB4ED4(v29, v36);
      sub_1BE19AAB0();
      sub_1BDDB4E78((uint64_t)v36);
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v37 = v60;
      v38 = v61;
      sub_1BDD86E30(v22, &qword_1ED6EE758);
      v16 = v59;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_1BDE224EC(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v59;
      }
      v41 = *(_QWORD *)(v16 + 16);
      v40 = *(_QWORD *)(v16 + 24);
      if (v41 >= v40 >> 1)
      {
        result = sub_1BDE224EC(v40 > 1, v41 + 1, 1);
        v16 = v59;
      }
      *(_QWORD *)(v16 + 16) = v41 + 1;
      v42 = v16 + 16 * v41;
      *(_QWORD *)(v42 + 32) = v37;
      *(_QWORD *)(v42 + 40) = v38;
      a3 = v49;
      if (v17 < 0 || v17 >= -(-1 << *(_BYTE *)(v49 + 32)))
        break;
      if (((*(_QWORD *)(v47 + (((unint64_t)v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(v49 + 36) != (_DWORD)v55)
        goto LABEL_17;
      v43 = sub_1BE1B2F90();
      if (!v54)
      {
        swift_bridgeObjectRelease();
        v14 = v45;
        v13 = v46;
        goto LABEL_14;
      }
      v17 = v43;
      v21 = 0;
      v19 = *(unsigned int *)(a3 + 36);
      --v54;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_14:
    v60 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
    sub_1BDEE881C();
    sub_1BE1B2708();
    swift_bridgeObjectRelease();
    v60 = v14;
    v61 = v13;
    swift_bridgeObjectRetain();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    return v60;
  }
  return result;
}

uint64_t sub_1BE19AAB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  strcpy((char *)v28, "RLEMapping: ");
  BYTE5(v28[1]) = 0;
  HIWORD(v28[1]) = -5120;
  v7 = *v0;
  v8 = *(_QWORD *)(*v0 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v27 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BDE224EC(0, v8, 0);
    v10 = *(unsigned __int8 *)(v4 + 80);
    v20 = v7;
    v11 = v7 + ((v10 + 32) & ~v10);
    v21 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_1BDD86DEC(v11, (uint64_t)v6, qword_1ED6F25C0);
      v12 = *v6;
      v23 = v6[1];
      v24 = v12;
      v25 = 0;
      v26 = 0xE000000000000000;
      sub_1BE1B3164();
      sub_1BE1B284C();
      sub_1BE1B3164();
      sub_1BE1B284C();
      sub_1BDD86DEC((uint64_t)v6 + *(int *)(v22 + 36), (uint64_t)v3, &qword_1ED6F2520);
      v13 = type metadata accessor for RetainedMapRun(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v3, 1, v13) == 1)
      {
        sub_1BDD86E30((uint64_t)v3, &qword_1ED6F2520);
      }
      else
      {
        sub_1BE19B058();
        sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for RetainedMapRun);
      }
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      v14 = v25;
      v15 = v26;
      sub_1BDD86E30((uint64_t)v6, qword_1ED6F25C0);
      v9 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE224EC(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v27;
      }
      v17 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1BDE224EC(v16 > 1, v17 + 1, 1);
        v9 = v27;
      }
      *(_QWORD *)(v9 + 16) = v17 + 1;
      v18 = v9 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v14;
      *(_QWORD *)(v18 + 40) = v15;
      v11 += v21;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  v25 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
  sub_1BDEE881C();
  sub_1BE1B2708();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  return v28[0];
}

uint64_t sub_1BE19AE04()
{
  uint64_t v0;

  return sub_1BE19A4D8(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1BE19AE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a3;
  v26 = a2;
  v27 = a1;
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for FinalizedTimestamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD86DEC(v3, (uint64_t)v13, (uint64_t *)&unk_1ED6F2DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1BDD86E30((uint64_t)v13, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD9C318(v3, v27, type metadata accessor for RetainedMapRun);
    return sub_1BDD9C318(v3, v26, type metadata accessor for RetainedMapRun);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v17, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C318(v3, v27, type metadata accessor for RetainedMapRun);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v17, v4);
    v19 = *(_QWORD *)&v17[*(int *)(v14 + 20)];
    result = sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for FinalizedTimestamp);
    v20 = v19 + v25;
    if (__OFADD__(v19, v25))
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
      *(_QWORD *)&v11[*(int *)(v14 + 20)] = v20;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      v21 = type metadata accessor for RetainedMapRun(0);
      v22 = *(_QWORD *)(v3 + *(int *)(v21 + 20));
      v23 = v26;
      result = sub_1BDDA2EF0((uint64_t)v11, v26, (uint64_t *)&unk_1ED6F2DC0);
      *(_QWORD *)(v23 + *(int *)(v21 + 20)) = v22;
    }
  }
  return result;
}

uint64_t sub_1BE19B058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  unint64_t v14;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - v6;
  v13 = 0;
  v14 = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v13 = 980382760;
  v14 = 0xE400000000000000;
  sub_1BDD86DEC(v0, (uint64_t)v7, (uint64_t *)&unk_1ED6F2DC0);
  v8 = type metadata accessor for FinalizedTimestamp(0);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  v10 = v9(v7, 1, v8);
  sub_1BDD86E30((uint64_t)v7, (uint64_t *)&unk_1ED6F2DC0);
  if (v10 == 1)
    goto LABEL_4;
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  sub_1BDD86DEC(v1, (uint64_t)v5, (uint64_t *)&unk_1ED6F2DC0);
  result = v9(v5, 1, v8);
  if ((_DWORD)result != 1)
  {
    FinalizedTimestamp.description.getter();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for FinalizedTimestamp);
LABEL_4:
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    v12[0] = *(_QWORD *)(v1 + *(int *)(type metadata accessor for RetainedMapRun(0) + 20));
    sub_1BE1B32E4();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    return v13;
  }
  __break(1u);
  return result;
}

BOOL sub_1BE19B260(uint64_t a1, uint64_t a2)
{
  return sub_1BE1A12F0(a1, a2, type metadata accessor for RetainedMapRun);
}

uint64_t sub_1BE19B280@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FinalizedTimestamp(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD86DEC(v2, (uint64_t)v10, (uint64_t *)&unk_1ED6F2DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1BDD86E30((uint64_t)v10, (uint64_t *)&unk_1ED6F2DC0);
    v15 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, v15, 1, v11);
  }
  sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v14, v4);
  v16 = *(_QWORD *)&v14[*(int *)(v11 + 20)];
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  result = type metadata accessor for FinalizedTimestampRange(0);
  v18 = *(_QWORD *)(v2 + *(int *)(result + 20));
  v19 = v16 + v18;
  if (!__OFADD__(v16, v18))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
    v15 = 0;
    *(_QWORD *)(a1 + *(int *)(v11 + 20)) = v19;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, v15, 1, v11);
  }
  __break(1u);
  return result;
}

BOOL sub_1BE19B444(uint64_t a1, uint64_t a2)
{
  return sub_1BE1A12F0(a1, a2, type metadata accessor for FinalizedTimestampRange);
}

id sub_1BE19B510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  id v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  objc_class *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;
  _QWORD v43[2];

  v37 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for FinalizedTimestamp(0);
  v7 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v36 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Replica();
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  v15 = a2 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v16 = sub_1BE1B1F58();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(v14, v15, v16);
  *(_QWORD *)&v14[*(int *)(v9 + 20)] = *(_QWORD *)(a2 + OBJC_IVAR___ObjCReplica_index);
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence11ObjCRenames_renames + 16);
  if (*(_QWORD *)(v18 + 16))
  {
    swift_bridgeObjectRetain();
    v19 = sub_1BDDB3EC0((uint64_t)v14);
    if ((v20 & 1) != 0)
    {
      sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v19), &v40);
    }
    else
    {
      v40 = 0;
      v41 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  sub_1BDD9C3E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  if (v40)
  {
    sub_1BDDB4F58(&v40, v43);
    sub_1BE199E98(v37, (uint64_t)v6);
    v21 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v38) != 1)
    {
      v25 = v36;
      sub_1BDDA2E8C((uint64_t)v6, v36, type metadata accessor for FinalizedTimestamp);
      v17(v12, v25, v16);
      *(_QWORD *)&v12[*(int *)(v9 + 20)] = 0;
      v26 = (objc_class *)type metadata accessor for ObjCReplica(0);
      v27 = (char *)objc_allocWithZone(v26);
      v17(&v27[OBJC_IVAR___ObjCReplica_uuid], (uint64_t)v12, v16);
      *(_QWORD *)&v27[OBJC_IVAR___ObjCReplica_index] = 0;
      v42.receiver = v27;
      v42.super_class = v26;
      v28 = (char *)objc_msgSendSuper2(&v42, sel_init);
      sub_1BDD9C3E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v29 = *(_QWORD *)(v25 + *(int *)(v21 + 20));
      v30 = (objc_class *)type metadata accessor for ObjCTimestamp(0);
      v31 = (char *)objc_allocWithZone(v30);
      v32 = &v28[OBJC_IVAR___ObjCReplica_uuid];
      swift_beginAccess();
      v33 = &v31[OBJC_IVAR___ObjCTimestamp_timestamp];
      v17(&v31[OBJC_IVAR___ObjCTimestamp_timestamp], (uint64_t)v32, v16);
      *(_QWORD *)&v33[*(int *)(v9 + 20)] = *(_QWORD *)&v28[OBJC_IVAR___ObjCReplica_index];
      *(_QWORD *)&v33[*(int *)(type metadata accessor for Timestamp(0) + 20)] = v29;
      v39.receiver = v31;
      v39.super_class = v30;
      v24 = objc_msgSendSuper2(&v39, sel_init);

      sub_1BDD9C3E0(v25, type metadata accessor for FinalizedTimestamp);
      sub_1BDDB4E78((uint64_t)v43);
      return v24;
    }
    sub_1BDDB4E78((uint64_t)v43);
    v22 = (uint64_t *)&unk_1ED6F2DC0;
    v23 = v6;
  }
  else
  {
    v22 = qword_1ED6F23F0;
    v23 = (char *)&v40;
  }
  sub_1BDD86E30((uint64_t)v23, v22);
  return 0;
}

id sub_1BE19B8F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  objc_class *v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  objc_class *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  objc_class *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v50;
  uint64_t v51;
  Class v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  objc_super v63;
  uint64_t v64;
  uint64_t v65;
  objc_super v66;
  objc_super v67;
  _QWORD v68[3];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v2);
  v58 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for FinalizedTimestamp(0);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v55 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B1F58();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Replica();
  v10 = MEMORY[0x1E0C80A78](v9);
  v61 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v50 - v12;
  v60 = type metadata accessor for Timestamp(0);
  v14 = MEMORY[0x1E0C80A78](v60);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v50 - v17;
  v19 = a1 + OBJC_IVAR___ObjCTimestamp_timestamp;
  sub_1BDD9C318(v19, (uint64_t)&v50 - v17, type metadata accessor for Timestamp);
  sub_1BDDA2E8C((uint64_t)v18, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v54 = v13;
  v20(v8, v13, v5);
  v56 = v19;
  sub_1BDD9C318(v19, (uint64_t)v16, type metadata accessor for Timestamp);
  v21 = *(_QWORD *)&v16[*(int *)(v9 + 20)];
  sub_1BDD9C3E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v22 = (objc_class *)type metadata accessor for ObjCReplica(0);
  v23 = (char *)objc_allocWithZone(v22);
  v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v24(&v23[OBJC_IVAR___ObjCReplica_uuid], v8, v5);
  *(_QWORD *)&v23[OBJC_IVAR___ObjCReplica_index] = v21;
  v67.receiver = v23;
  v67.super_class = v22;
  v52 = v22;
  v25 = (char *)objc_msgSendSuper2(&v67, sel_init);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v26 = (uint64_t)v61;
  v27 = &v25[OBJC_IVAR___ObjCReplica_uuid];
  swift_beginAccess();
  v53 = (void (*)(char *, uint64_t, uint64_t))v24;
  v24((char *)v26, v27, v5);
  v28 = *(_QWORD *)&v25[OBJC_IVAR___ObjCReplica_index];

  v29 = v9;
  *(_QWORD *)(v26 + *(int *)(v9 + 20)) = v28;
  v30 = *(_QWORD *)(v62 + OBJC_IVAR____TtC9Coherence11ObjCRenames_renames + 16);
  if (*(_QWORD *)(v30 + 16))
  {
    swift_bridgeObjectRetain();
    v31 = sub_1BDDB3EC0(v26);
    if ((v32 & 1) != 0)
    {
      sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v30 + 56) + 16 * v31), &v64);
    }
    else
    {
      v64 = 0;
      v65 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v64 = 0;
    v65 = 0;
  }
  sub_1BDD9C3E0(v26, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  if (v64)
  {
    sub_1BDDB4F58(&v64, v68);
    v33 = v58;
    sub_1BE199E98(*(_QWORD *)(v56 + *(int *)(v60 + 20)), v58);
    v34 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v33, 1, v59) != 1)
    {
      v38 = v55;
      sub_1BDDA2E8C(v33, v55, type metadata accessor for FinalizedTimestamp);
      v39 = (uint64_t)v54;
      v40 = v53;
      v53(v54, v38, v5);
      v51 = v29;
      *(_QWORD *)(v39 + *(int *)(v29 + 20)) = 0;
      v41 = v52;
      v42 = (char *)objc_allocWithZone(v52);
      v40(&v42[OBJC_IVAR___ObjCReplica_uuid], v39, v5);
      *(_QWORD *)&v42[OBJC_IVAR___ObjCReplica_index] = 0;
      v66.receiver = v42;
      v66.super_class = v41;
      v43 = (char *)objc_msgSendSuper2(&v66, sel_init);
      sub_1BDD9C3E0(v39, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v44 = *(_QWORD *)(v38 + *(int *)(v34 + 20));
      v45 = (objc_class *)type metadata accessor for ObjCTimestamp(0);
      v46 = (char *)objc_allocWithZone(v45);
      v47 = &v43[OBJC_IVAR___ObjCReplica_uuid];
      swift_beginAccess();
      v48 = &v46[OBJC_IVAR___ObjCTimestamp_timestamp];
      v40(&v46[OBJC_IVAR___ObjCTimestamp_timestamp], (uint64_t)v47, v5);
      *(_QWORD *)&v48[*(int *)(v51 + 20)] = *(_QWORD *)&v43[OBJC_IVAR___ObjCReplica_index];
      *(_QWORD *)&v48[*(int *)(v60 + 20)] = v44;
      v63.receiver = v46;
      v63.super_class = v45;
      v37 = objc_msgSendSuper2(&v63, sel_init);

      sub_1BDD9C3E0(v38, type metadata accessor for FinalizedTimestamp);
      sub_1BDDB4E78((uint64_t)v68);
      return v37;
    }
    sub_1BDDB4E78((uint64_t)v68);
    v35 = (uint64_t *)&unk_1ED6F2DC0;
    v36 = (uint64_t *)v33;
  }
  else
  {
    v35 = qword_1ED6F23F0;
    v36 = &v64;
  }
  sub_1BDD86E30((uint64_t)v36, v35);
  return 0;
}

uint64_t sub_1BE19BE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  objc_class *v46;
  char *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  objc_super v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[3];
  _QWORD v115[2];
  _QWORD v116[3];

  v103 = a2;
  v5 = sub_1BE1B1F58();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v95 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v100 = (uint64_t)&v91 - v12;
  v109 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v13 = *(_QWORD *)(v109 - 8);
  v14 = MEMORY[0x1E0C80A78](v109);
  v16 = (uint64_t *)((char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v105 = (uint64_t *)((char *)&v91 - v17);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFCA0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v102 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v101 = (char *)&v91 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v99 = (uint64_t)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v106 = (char *)&v91 - v25;
  v26 = type metadata accessor for FinalizedTimestamp(0);
  v27 = *(_QWORD *)(v26 - 8);
  v107 = v26;
  v108 = v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v93 = (uint64_t)&v91 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v98 = (uint64_t)&v91 - v30;
  v31 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)&v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114[0] = MEMORY[0x1E0DEE9D8];
  swift_weakInit();
  swift_weakAssign();
  sub_1BDDB4F58(v114, v116);
  v34 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v91 = v6;
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v96 = v5;
  v92 = v35;
  v35(v33, v34, v5);
  *(_QWORD *)&v33[*(int *)(v31 + 20)] = *(_QWORD *)(a3 + OBJC_IVAR___ObjCReplica_index);
  v36 = *(_QWORD *)(v104 + OBJC_IVAR____TtC9Coherence11ObjCRenames_renames + 16);
  if (*(_QWORD *)(v36 + 16))
  {
    swift_bridgeObjectRetain();
    v37 = sub_1BDDB3EC0((uint64_t)v33);
    if ((v38 & 1) != 0)
    {
      sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v36 + 56) + 16 * v37), &v112);
    }
    else
    {
      v112 = 0;
      v113 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v112 = 0;
    v113 = 0;
  }
  v39 = v109;
  v41 = (uint64_t)v101;
  v40 = (uint64_t)v102;
  v42 = v107;
  sub_1BDD9C3E0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  if (!v112)
  {
    sub_1BDD86E30((uint64_t)&v112, qword_1ED6F23F0);
LABEL_14:
    sub_1BDDB4ED4(v116, v115);
    v46 = (objc_class *)type metadata accessor for ObjCRLE();
    v47 = (char *)objc_allocWithZone(v46);
    sub_1BDDB4ED4(v115, &v47[OBJC_IVAR____TtC9Coherence7ObjCRLE_rle]);
    v111.receiver = v47;
    v111.super_class = v46;
    v48 = objc_msgSendSuper2(&v111, sel_init);
    sub_1BDDB4E78((uint64_t)v115);
    sub_1BDDB4E78((uint64_t)v116);
    return (uint64_t)v48;
  }
  result = (uint64_t)sub_1BDDB4F58(&v112, v115);
  v44 = a1 + v103;
  if (__OFADD__(a1, v103))
    goto LABEL_73;
  if (v44 >= a1)
  {
    v45 = (uint64_t)v106;
    if (v44 != a1)
    {
      v104 = a1 + v103;
      v94 = v11;
      while (1)
      {
        if (a1 >= v44)
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v49 = *(_QWORD *)(v115[0] + 16);
        if (v49)
        {
          v50 = v49 - 1;
          v51 = v115[0] + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
          v52 = *(_QWORD *)(v13 + 72);
          if (a1 < *(_QWORD *)(v51 + v52 * (v49 - 1) + 8))
          {
            v53 = 0;
            v54 = v49 - 1;
            while (1)
            {
              v55 = v54 >= 0 ? v54 : v54 + 1;
              if (v54 < -1)
                break;
              v56 = v55 >> 1;
              if (v55 >> 1 >= v49)
                break;
              v57 = (uint64_t *)(v51 + v56 * v52);
              v58 = *v57;
              v59 = v57[1];
              if (a1 >= v58 && a1 < v59)
              {
                v50 = v56;
LABEL_38:
                if (v50 >= (unint64_t)v49)
                  goto LABEL_68;
                sub_1BDD86DEC(v51 + v50 * v52, v41, qword_1ED6F25C0);
                v62 = 0;
                goto LABEL_40;
              }
              if (v50 < v53)
                goto LABEL_38;
              if (a1 < v58)
              {
                v50 = v56 - 1;
                v54 = v53 + v56 - 1;
              }
              else
              {
                v53 = v56 + 1;
                v61 = __OFADD__(v56 + 1, v50);
                v54 = v56 + 1 + v50;
                if (v61)
                  goto LABEL_66;
              }
            }
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
        }
        v62 = 1;
LABEL_40:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v41, v62, 1, v39);
        sub_1BDD86DEC(v41, v40, &qword_1ED6EFCA0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v40, 1, v39) == 1)
          break;
        v63 = v105;
        sub_1BDDA2EF0(v40, (uint64_t)v105, qword_1ED6F25C0);
        v64 = v100;
        sub_1BDD86DEC((uint64_t)v63 + *(int *)(v39 + 36), v100, &qword_1ED6F2520);
        v65 = type metadata accessor for RetainedMapRun(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v64, 1, v65) == 1)
        {
          sub_1BDD86E30(v64, &qword_1ED6F2520);
          v66 = v99;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v99, 1, 1, v42);
LABEL_45:
          sub_1BDD86E30((uint64_t)v105, qword_1ED6F25C0);
          sub_1BDD86E30(v41, &qword_1ED6EFCA0);
          sub_1BDD86E30(v66, (uint64_t *)&unk_1ED6F2DC0);
          v45 = (uint64_t)v106;
LABEL_46:
          v68 = v108;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v45, 1, 1, v42);
          v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
          goto LABEL_47;
        }
        v66 = v99;
        sub_1BDD86DEC(v64, v99, (uint64_t *)&unk_1ED6F2DC0);
        sub_1BDD9C3E0(v64, type metadata accessor for RetainedMapRun);
        v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
        if (v67(v66, 1, v42) == 1)
          goto LABEL_45;
        v83 = v66;
        v84 = v93;
        sub_1BDDA2E8C(v83, v93, type metadata accessor for FinalizedTimestamp);
        result = v92(v95, v84, v96);
        v85 = *(_QWORD *)(v84 + *(int *)(v42 + 20));
        v86 = v85 + a1;
        if (__OFADD__(v85, a1))
          goto LABEL_71;
        v87 = v84;
        v88 = v105;
        v89 = *v105;
        sub_1BDD9C3E0(v87, type metadata accessor for FinalizedTimestamp);
        sub_1BDD86E30((uint64_t)v88, qword_1ED6F25C0);
        result = sub_1BDD86E30(v41, &qword_1ED6EFCA0);
        v61 = __OFSUB__(v86, v89);
        v90 = v86 - v89;
        if (v61)
          goto LABEL_72;
        v45 = (uint64_t)v106;
        (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v106, v95, v96);
        v42 = v107;
        *(_QWORD *)(v45 + *(int *)(v107 + 20)) = v90;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v45, 0, 1, v42);
        v41 = (uint64_t)v101;
        v40 = (uint64_t)v102;
LABEL_47:
        v69 = a1 + 1;
        if (v67(v45, 1, v42) == 1)
        {
          result = sub_1BDD86E30(v45, (uint64_t *)&unk_1ED6F2DC0);
        }
        else
        {
          v70 = v45;
          v71 = v98;
          sub_1BDDA2E8C(v70, v98, type metadata accessor for FinalizedTimestamp);
          v72 = *(int *)(v42 + 20);
          v73 = v71;
          v74 = *(_QWORD *)(v71 + v72);
          v112 = MEMORY[0x1E0DEE9D8];
          v110 = 0;
          v103 = a1 + 1;
          result = sub_1BDDC0538(a1, a1 + 1);
          v76 = v75;
          if (result != v75)
          {
            if (v75 < result)
              goto LABEL_69;
            v77 = result;
            v97 = result;
            v78 = (uint64_t)v94;
            if (result >= v75)
              goto LABEL_70;
            while ((v77 & 0x8000000000000000) == 0)
            {
              if (v77 >= *(_QWORD *)(v116[0] + 16))
                goto LABEL_63;
              v79 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
              v80 = *(_QWORD *)(v13 + 72) * v77;
              sub_1BDD86DEC(v116[0] + v79 + v80, (uint64_t)v16, qword_1ED6F25C0);
              sub_1BDD8B850(v16, (uint64_t)&v112, v73, v74, &v110, 1, v78);
              sub_1BDD86E30((uint64_t)v16, qword_1ED6F25C0);
              v81 = v116[0];
              result = swift_isUniquelyReferenced_nonNull_native();
              v116[0] = v81;
              if ((result & 1) == 0)
              {
                result = sub_1BDFCEA00(v81);
                v81 = result;
                v116[0] = result;
              }
              if (v77 >= *(_QWORD *)(v81 + 16))
                goto LABEL_64;
              ++v77;
              v82 = v81 + v79;
              v39 = v109;
              result = sub_1BDDD1A10(v78, v82 + *(int *)(v109 + 36) + v80);
              if (v76 == v77)
              {
                result = v97;
                goto LABEL_58;
              }
            }
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
LABEL_58:
          sub_1BDD85EF0(result, v76);
          swift_bridgeObjectRelease();
          result = sub_1BDD9C3E0(v73, type metadata accessor for FinalizedTimestamp);
          v41 = (uint64_t)v101;
          v40 = (uint64_t)v102;
          v45 = (uint64_t)v106;
          v69 = v103;
        }
        a1 = v69;
        v44 = v104;
        v42 = v107;
        if (v69 == v104)
          goto LABEL_12;
      }
      sub_1BDD86E30(v41, &qword_1ED6EFCA0);
      sub_1BDD86E30(v40, &qword_1ED6EFCA0);
      goto LABEL_46;
    }
LABEL_12:
    sub_1BDDB4E78((uint64_t)v115);
    goto LABEL_14;
  }
LABEL_74:
  __break(1u);
  return result;
}

id sub_1BE19C944()
{
  return sub_1BE19F944(type metadata accessor for ObjCRenames);
}

uint64_t type metadata accessor for ObjCRenames()
{
  return objc_opt_self();
}

uint64_t sub_1BE19CA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  result = MEMORY[0x1E0C80A78](v5);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence7ObjCRLE_rle);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = a1 + a2;
    if (!__OFADD__(a1, a2))
    {
      v13 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v14 = *(_QWORD *)(v7 + 72);
      swift_bridgeObjectRetain();
      v15 = 0;
      while (1)
      {
        result = sub_1BDD86DEC(v13, (uint64_t)v9, qword_1ED6F25C0);
        v16 = *v9;
        v17 = v9[1];
        v18 = __OFSUB__(v17, *v9);
        v19 = v17 - *v9;
        if (v18)
          break;
        v18 = __OFADD__(v16, v19);
        v20 = v16 + v19;
        if (v18)
          goto LABEL_20;
        if (v16 > a1 || v20 <= a1)
          v22 = v16 >= a1 && v16 < v12;
        else
          v22 = 1;
        v18 = __OFADD__(v15, v22);
        v15 += v22;
        if (v18)
          goto LABEL_21;
        sub_1BDD86E30((uint64_t)v9, qword_1ED6F25C0);
        v13 += v14;
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

id sub_1BE19CC98()
{
  return sub_1BE19F944(type metadata accessor for ObjCRLE);
}

uint64_t type metadata accessor for ObjCRLE()
{
  return objc_opt_self();
}

uint64_t sub_1BE19CD5C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return sub_1BE19CDD8(a1, a2, a3, (uint64_t)&OBJC_IVAR___ObjCRenameSequence_renameSequence);
}

uint64_t sub_1BE19CDCC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return sub_1BE19CDD8(a1, a2, a3, (uint64_t)&OBJC_IVAR___ObjCRenameSequence_renameAddedBySequence);
}

uint64_t sub_1BE19CDD8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v24[0] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v26 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v25 = (uint64_t)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B206C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v17 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  *(_QWORD *)&v15[*(int *)(v13 + 20)] = *(_QWORD *)(a1 + OBJC_IVAR___ObjCReplica_index);
  if (__OFADD__(a2, a3))
  {
    __break(1u);
  }
  else if ((uint64_t)a3 + a2 >= a2)
  {
    sub_1BE1B1F70();
    v18 = *(int *)(v7 + 48);
    v7 = v25;
    v19 = v25 + v18;
    sub_1BDDA2E8C((uint64_t)v15, v25, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19, v12, v9);
    a3 = (unint64_t *)(v24[1] + *(_QWORD *)v24[0]);
    swift_beginAccess();
    v13 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  v13 = sub_1BDE07630(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
  *a3 = v13;
LABEL_4:
  v22 = *(_QWORD *)(v13 + 16);
  v21 = *(_QWORD *)(v13 + 24);
  if (v22 >= v21 >> 1)
  {
    v13 = sub_1BDE07630(v21 > 1, v22 + 1, 1, v13);
    *a3 = v13;
  }
  *(_QWORD *)(v13 + 16) = v22 + 1;
  sub_1BDDA2EF0(v7, v13+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v22, &qword_1ED6F3CB8);
  return swift_endAccess();
}

uint64_t sub_1BE19D0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  char **v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v82 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v78 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v80 = (uint64_t)&v68 - v6;
  v7 = sub_1BE1B206C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v77 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v79 = (char *)&v68 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v75 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v74 = (uint64_t)&v68 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v68 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v68 - v20;
  v22 = (char **)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v23 = (uint64_t)v22[1];
  v24 = *(_QWORD *)(v23 + 64);
  v69 = v22;
  v70 = v23 + 64;
  v25 = 1 << *(_BYTE *)(v23 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v28 = (unint64_t *)(v1 + OBJC_IVAR___ObjCRenameSequence_renameAddedBySequence);
  v71 = (unint64_t)(v25 + 63) >> 6;
  v68 = v71 - 1;
  v73 = v23;
  result = swift_bridgeObjectRetain();
  v76 = 0;
  v72 = (uint64_t)v28;
  if (!v27)
    goto LABEL_6;
LABEL_4:
  v30 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  v31 = v30 | (v76 << 6);
  v32 = v82;
LABEL_5:
  v33 = v73;
  v34 = *(_QWORD *)(v73 + 48);
  v35 = type metadata accessor for Replica();
  sub_1BDD9C318(v34 + *(_QWORD *)(*(_QWORD *)(v35 - 8) + 72) * v31, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(&v19[*(int *)(v3 + 48)], *(_QWORD *)(v33 + 56) + *(_QWORD *)(v8 + 72) * v31, v7);
  v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v81(v19, 0, 1, v3);
  v28 = (unint64_t *)v72;
  while (1)
  {
    sub_1BDDA2EF0((uint64_t)v19, (uint64_t)v21, &qword_1ED6F3CC0);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    if (v39(v21, 1, v3) == 1)
      break;
    v40 = v79;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v79, &v21[*(int *)(v3 + 48)], v7);
    v41 = v80 + *(int *)(v3 + 48);
    sub_1BDDA2E8C((uint64_t)v21, v80, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v41, v40, v7);
    swift_beginAccess();
    v42 = *v28;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v28 = v42;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v42 = sub_1BDE07630(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
      *v28 = v42;
    }
    v45 = *(_QWORD *)(v42 + 16);
    v44 = *(_QWORD *)(v42 + 24);
    if (v45 >= v44 >> 1)
    {
      v42 = sub_1BDE07630(v44 > 1, v45 + 1, 1, v42);
      *v28 = v42;
    }
    *(_QWORD *)(v42 + 16) = v45 + 1;
    sub_1BDDA2EF0(v80, v42+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v82 + 72) * v45, &qword_1ED6F3CB8);
    swift_endAccess();
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v79, v7);
    if (v27)
      goto LABEL_4;
LABEL_6:
    v36 = v76 + 1;
    v32 = v82;
    if (__OFADD__(v76, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v36 < v71)
    {
      v37 = *(_QWORD *)(v70 + 8 * v36);
      if (v37)
        goto LABEL_9;
      v38 = v76 + 2;
      ++v76;
      if (v36 + 1 < v71)
      {
        v37 = *(_QWORD *)(v70 + 8 * v38);
        if (v37)
          goto LABEL_12;
        v76 = v36 + 1;
        if (v36 + 2 < v71)
        {
          v37 = *(_QWORD *)(v70 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
LABEL_9:
            v27 = (v37 - 1) & v37;
            v31 = __clz(__rbit64(v37)) + (v36 << 6);
            v76 = v36;
            goto LABEL_5;
          }
          v38 = v36 + 3;
          v76 = v36 + 2;
          if (v36 + 3 < v71)
          {
            v37 = *(_QWORD *)(v70 + 8 * v38);
            if (!v37)
            {
              while (1)
              {
                v36 = v38 + 1;
                if (__OFADD__(v38, 1))
                  break;
                if (v36 >= v71)
                {
                  v76 = v68;
                  goto LABEL_23;
                }
                v37 = *(_QWORD *)(v70 + 8 * v36);
                ++v38;
                if (v37)
                  goto LABEL_9;
              }
LABEL_64:
              __break(1u);
              goto LABEL_65;
            }
LABEL_12:
            v36 = v38;
            goto LABEL_9;
          }
        }
      }
    }
LABEL_23:
    v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
    v81(v19, 1, 1, v3);
    v27 = 0;
  }
  swift_release();
  v46 = *v69;
  v47 = *((_QWORD *)*v69 + 8);
  v73 = (uint64_t)(*v69 + 64);
  v48 = 1 << v46[32];
  v49 = -1;
  if (v48 < 64)
    v49 = ~(-1 << v48);
  v50 = v49 & v47;
  v76 = (unint64_t)(v48 + 63) >> 6;
  v72 = v76 - 1;
  v79 = v46;
  result = swift_bridgeObjectRetain();
  v80 = 0;
  v51 = v79;
  v52 = (uint64_t)v75;
  if (!v50)
    goto LABEL_36;
LABEL_34:
  v53 = __clz(__rbit64(v50));
  v50 &= v50 - 1;
  v54 = v53 | (v80 << 6);
  while (2)
  {
    v55 = *((_QWORD *)v51 + 6);
    v56 = type metadata accessor for Replica();
    sub_1BDD9C318(v55 + *(_QWORD *)(*(_QWORD *)(v56 - 8) + 72) * v54, v52, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v52 + *(int *)(v3 + 48), *((_QWORD *)v51 + 7) + *(_QWORD *)(v8 + 72) * v54, v7);
    v81((char *)v52, 0, 1, v3);
    while (1)
    {
      v60 = v52;
      v61 = v74;
      sub_1BDDA2EF0(v60, v74, &qword_1ED6F3CC0);
      if (v39((char *)v61, 1, v3) == 1)
        return swift_release();
      v62 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v77, v61 + *(int *)(v3 + 48), v7);
      v63 = v78 + *(int *)(v3 + 48);
      sub_1BDDA2E8C(v61, v78, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v63, v62, v7);
      swift_beginAccess();
      v64 = *v28;
      v65 = swift_isUniquelyReferenced_nonNull_native();
      *v28 = v64;
      if ((v65 & 1) == 0)
      {
        v64 = sub_1BDE07630(0, *(_QWORD *)(v64 + 16) + 1, 1, v64);
        *v28 = v64;
      }
      v67 = *(_QWORD *)(v64 + 16);
      v66 = *(_QWORD *)(v64 + 24);
      if (v67 >= v66 >> 1)
      {
        v64 = sub_1BDE07630(v66 > 1, v67 + 1, 1, v64);
        *v28 = v64;
      }
      *(_QWORD *)(v64 + 16) = v67 + 1;
      sub_1BDDA2EF0(v78, v64+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v82 + 72) * v67, &qword_1ED6F3CB8);
      swift_endAccess();
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v77, v7);
      v52 = (uint64_t)v75;
      if (v50)
        goto LABEL_34;
LABEL_36:
      v57 = v80 + 1;
      if (__OFADD__(v80, 1))
        goto LABEL_63;
      if (v57 < v76)
      {
        v58 = *(_QWORD *)(v73 + 8 * v57);
        if (v58)
          goto LABEL_39;
        v59 = v80 + 2;
        ++v80;
        if (v57 + 1 < v76)
        {
          v58 = *(_QWORD *)(v73 + 8 * v59);
          if (v58)
            goto LABEL_42;
          v80 = v57 + 1;
          if (v57 + 2 < v76)
          {
            v58 = *(_QWORD *)(v73 + 8 * (v57 + 2));
            if (v58)
            {
              v57 += 2;
              goto LABEL_39;
            }
            v59 = v57 + 3;
            v80 = v57 + 2;
            if (v57 + 3 < v76)
              break;
          }
        }
      }
LABEL_53:
      v81((char *)v52, 1, 1, v3);
      v50 = 0;
    }
    v58 = *(_QWORD *)(v73 + 8 * v59);
    if (v58)
    {
LABEL_42:
      v57 = v59;
LABEL_39:
      v50 = (v58 - 1) & v58;
      v54 = __clz(__rbit64(v58)) + (v57 << 6);
      v80 = v57;
      continue;
    }
    break;
  }
  while (1)
  {
    v57 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    if (v57 >= v76)
    {
      v80 = v72;
      goto LABEL_53;
    }
    v58 = *(_QWORD *)(v73 + 8 * v57);
    ++v59;
    if (v58)
      goto LABEL_39;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t sub_1BE19D9A0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD v57[3];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v1 = v0;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v2 = *(_QWORD *)(v63 - 8);
  v3 = MEMORY[0x1E0C80A78](v63);
  v5 = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v57 - v6;
  v8 = (uint64_t *)(v0 + OBJC_IVAR___ObjCRenameSequence_renameSequence);
  swift_beginAccess();
  v9 = *v8;
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = *(_QWORD *)(*v8 + 16);
  if (v11)
  {
    v59 = v1;
    v65 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BDE224EC(0, v11, 0);
    v12 = *(unsigned __int8 *)(v2 + 80);
    v58 = v9;
    v13 = v9 + ((v12 + 32) & ~v12);
    v60 = v2;
    v62 = *(_QWORD *)(v2 + 72);
    v61 = xmmword_1BE1B61C0;
    do
    {
      sub_1BDD86DEC(v13, (uint64_t)v7, &qword_1ED6F3CB8);
      v67 = 40;
      v68 = 0xE100000000000000;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = v61;
      v15 = sub_1BE1B1F40();
      v16 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEDE70];
      v17 = MEMORY[0x1E0DEDEC8];
      *(_QWORD *)(v14 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v14 + 32) = v15;
      v18 = sub_1BE1B1F40();
      *(_QWORD *)(v14 + 96) = v16;
      *(_QWORD *)(v14 + 104) = v17;
      *(_BYTE *)(v14 + 72) = BYTE1(v18);
      v70 = sub_1BE1B27EC();
      v71 = v19;
      sub_1BE1B284C();
      v69 = *(_QWORD *)&v7[*(int *)(type metadata accessor for Replica() + 20)];
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v20 = *(int *)(v63 + 48);
      v21 = &v5[v20];
      v22 = &v7[v20];
      sub_1BDD9C318((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v23 = sub_1BE1B206C();
      v24 = *(_QWORD *)(v23 - 8);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      sub_1BDEE7D5C();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BE1B284C();
      v25 = v67;
      v26 = v68;
      sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3CB8);
      v10 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE224EC(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v65;
      }
      v28 = *(_QWORD *)(v10 + 16);
      v27 = *(_QWORD *)(v10 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_1BDE224EC(v27 > 1, v28 + 1, 1);
        v10 = v65;
      }
      *(_QWORD *)(v10 + 16) = v28 + 1;
      v29 = v10 + 16 * v28;
      *(_QWORD *)(v29 + 32) = v25;
      *(_QWORD *)(v29 + 40) = v26;
      v13 += v62;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v1 = v59;
    v2 = v60;
  }
  v67 = v10;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
  v59 = sub_1BDEE881C();
  v60 = v30;
  v31 = sub_1BE1B2708();
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = v1 + OBJC_IVAR___ObjCRenameSequence_renameAddedBySequence;
  swift_beginAccess();
  v35 = *(_QWORD *)v34;
  v36 = *(_QWORD *)(*(_QWORD *)v34 + 16);
  v37 = MEMORY[0x1E0DEE9D8];
  if (v36)
  {
    v57[2] = v31;
    v58 = v33;
    v69 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BDE224EC(0, v36, 0);
    v38 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v57[1] = v35;
    v39 = v35 + v38;
    v62 = *(_QWORD *)(v2 + 72);
    v61 = xmmword_1BE1B61C0;
    do
    {
      sub_1BDD86DEC(v39, (uint64_t)v7, &qword_1ED6F3CB8);
      v70 = 40;
      v71 = 0xE100000000000000;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = v61;
      v41 = sub_1BE1B1F40();
      v42 = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v40 + 56) = MEMORY[0x1E0DEDE70];
      v43 = MEMORY[0x1E0DEDEC8];
      *(_QWORD *)(v40 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v40 + 32) = v41;
      v44 = sub_1BE1B1F40();
      *(_QWORD *)(v40 + 96) = v42;
      *(_QWORD *)(v40 + 104) = v43;
      *(_BYTE *)(v40 + 72) = BYTE1(v44);
      v65 = sub_1BE1B27EC();
      v66 = v45;
      sub_1BE1B284C();
      v64 = *(_QWORD *)&v7[*(int *)(type metadata accessor for Replica() + 20)];
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v46 = *(int *)(v63 + 48);
      v47 = &v5[v46];
      v48 = &v7[v46];
      sub_1BDD9C318((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v49 = sub_1BE1B206C();
      v50 = *(_QWORD *)(v49 - 8);
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      sub_1BDEE7D5C();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BE1B284C();
      v51 = v70;
      v52 = v71;
      sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3CB8);
      v37 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE224EC(0, *(_QWORD *)(v37 + 16) + 1, 1);
        v37 = v69;
      }
      v54 = *(_QWORD *)(v37 + 16);
      v53 = *(_QWORD *)(v37 + 24);
      if (v54 >= v53 >> 1)
      {
        sub_1BDE224EC(v53 > 1, v54 + 1, 1);
        v37 = v69;
      }
      *(_QWORD *)(v37 + 16) = v54 + 1;
      v55 = v37 + 16 * v54;
      *(_QWORD *)(v55 + 32) = v51;
      *(_QWORD *)(v55 + 40) = v52;
      v39 += v62;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  v70 = v37;
  sub_1BE1B2708();
  swift_bridgeObjectRelease();
  v70 = 0;
  v71 = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v70 = 0x65636E6575716573;
  v71 = 0xEA00000000005B3ALL;
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return v70;
}

id sub_1BE19E128()
{
  return sub_1BE19F944(type metadata accessor for ObjCRenameSequence);
}

uint64_t type metadata accessor for ObjCRenameSequence()
{
  return objc_opt_self();
}

id sub_1BE19E3A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  objc_super v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR___ObjCVersion_version;
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 8);
  if (a1)
  {
    v8 = a1 + OBJC_IVAR___ObjCReplica_uuid;
    swift_beginAccess();
    v9 = sub_1BE1B1F58();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v5, v8, v9);
    v10 = *(_QWORD *)(a1 + OBJC_IVAR___ObjCReplica_index);
    v11 = type metadata accessor for Replica();
    *(_QWORD *)&v5[*(int *)(v11 + 20)] = v10;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for Replica();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  }
  swift_bridgeObjectRetain();
  sub_1BDD86E30((uint64_t)v5, &qword_1ED6F43C0);
  v13 = (objc_class *)type metadata accessor for ObjCVersion();
  v14 = (char *)objc_allocWithZone(v13);
  v15 = &v14[OBJC_IVAR___ObjCVersion_version];
  v16 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)v15 = MEMORY[0x1E0DEE9E0];
  *((_QWORD *)v15 + 1) = v16;
  swift_beginAccess();
  *(_QWORD *)v15 = v16;
  *((_QWORD *)v15 + 1) = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19.receiver = v14;
  v19.super_class = v13;
  return objc_msgSendSuper2(&v19, sel_init);
}

_QWORD *sub_1BE19E5EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = (_QWORD *)sub_1BE1995A8(v0);
  swift_bridgeObjectRelease();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1BE1995A8(v2);
  swift_bridgeObjectRelease();
  v5 = v1;
  sub_1BDF30E58(v3);
  swift_bridgeObjectRetain();
  sub_1BE19FAFC(&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BE19E8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v10;
  _BYTE v11[24];
  uint64_t v12;

  sub_1BDD86DEC(a1, (uint64_t)v11, qword_1EF52B750);
  if (!v12)
  {
    sub_1BDD86E30((uint64_t)v11, qword_1EF52B750);
    goto LABEL_6;
  }
  type metadata accessor for ObjCVersion();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v8 = 0;
    return v8 & 1;
  }
  v2 = (uint64_t *)&v10[OBJC_IVAR___ObjCVersion_version];
  swift_beginAccess();
  v3 = *v2;
  v4 = v2[1];
  v5 = (uint64_t *)(v1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((sub_1BDDBDDBC(v4, v7) & 1) != 0)
    v8 = sub_1BDDBDDBC(v3, v6);
  else
    v8 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BE19EB68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  objc_class *v28;
  char *v29;
  void (*v30)(void);
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char *v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  objc_class *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  char *v70;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t, uint64_t);
  Class v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(void);
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  objc_super v92;
  objc_super v93;

  v2 = sub_1BE1B206C();
  v3 = *(_QWORD *)(v2 - 8);
  v90 = v2;
  v91 = v3;
  MEMORY[0x1E0C80A78](v2);
  v73 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v6 = MEMORY[0x1E0C80A78](v5);
  v85 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v87 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v72 - v8);
  v9 = sub_1BE1B1F58();
  v10 = *(_QWORD **)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Replica();
  v14 = MEMORY[0x1E0C80A78](v13);
  v84 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v86 = (char *)&v72 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v72 - v18;
  v72 = type metadata accessor for Timestamp(0);
  v20 = MEMORY[0x1E0C80A78](v72);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v72 - v23;
  v25 = a1 + OBJC_IVAR___ObjCTimestamp_timestamp;
  sub_1BDD9C318(v25, (uint64_t)&v72 - v23, type metadata accessor for Timestamp);
  v77 = v24;
  sub_1BDDA2E8C((uint64_t)v24, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v26 = (void (*)(char *, uint64_t, uint64_t))v10[4];
  v81 = v19;
  v75 = v26;
  v26(v12, (uint64_t)v19, v9);
  v89 = v25;
  sub_1BDD9C318(v25, (uint64_t)v22, type metadata accessor for Timestamp);
  v27 = *(_QWORD *)&v22[*(int *)(v13 + 20)];
  v78 = v22;
  sub_1BDD9C3E0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v28 = (objc_class *)type metadata accessor for ObjCReplica(0);
  v29 = (char *)objc_allocWithZone(v28);
  v30 = (void (*)(void))v10[2];
  ((void (*)(char *, char *, uint64_t))v30)(&v29[OBJC_IVAR___ObjCReplica_uuid], v12, v9);
  *(_QWORD *)&v29[OBJC_IVAR___ObjCReplica_index] = v27;
  v93.receiver = v29;
  v93.super_class = v28;
  v76 = v28;
  v31 = (char *)objc_msgSendSuper2(&v93, sel_init);
  v32 = (void (*)(char *, uint64_t))v10[1];
  v82 = v12;
  v74 = v32;
  v32(v12, v9);
  swift_beginAccess();
  v79 = v9;
  v33 = (uint64_t)v86;
  v80 = v30;
  v30();
  v34 = *(_QWORD *)&v31[OBJC_IVAR___ObjCReplica_index];

  v83 = v13;
  *(_QWORD *)(v33 + *(int *)(v13 + 20)) = v34;
  v35 = (char *)v88 + OBJC_IVAR___ObjCVersion_version;
  swift_beginAccess();
  v36 = *(_QWORD *)v35;
  v37 = v91;
  if (*(_QWORD *)(*(_QWORD *)v35 + 16))
  {
    v38 = (uint64_t)v87;
    v39 = v90;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = sub_1BDDB3EC0(v33);
    v37 = v91;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v91 + 16))(v38, *(_QWORD *)(v36 + 56) + *(_QWORD *)(v91 + 72) * v40, v39);
      v42 = *(char **)(v37 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v42)(v38, 0, 1, v39);
    }
    else
    {
      v42 = *(char **)(v91 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42)(v38, 1, 1, v39);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(char **)(v91 + 56);
    v38 = (uint64_t)v87;
    v39 = v90;
    ((void (*)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))v42)(v87, 1, 1, v90);
  }
  sub_1BDD9C3E0(v33, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v43(v38, 1, v39))
  {
    v87 = v43;
    v88 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v42;
    sub_1BDD86E30(v38, &qword_1ED6F3C78);
    v44 = v89;
    v45 = (uint64_t)v77;
    sub_1BDD9C318(v89, (uint64_t)v77, type metadata accessor for Timestamp);
    v46 = v80;
    v47 = v35;
    v48 = (uint64_t)v81;
    sub_1BDDA2E8C(v45, (uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v49 = v82;
    v50 = v79;
    v75(v82, v48, v79);
    v51 = (uint64_t)v78;
    sub_1BDD9C318(v44, (uint64_t)v78, type metadata accessor for Timestamp);
    v52 = v83;
    v53 = *(_QWORD *)(v51 + *(int *)(v83 + 20));
    sub_1BDD9C3E0(v51, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v54 = v76;
    v55 = (char *)objc_allocWithZone(v76);
    ((void (*)(char *, char *, uint64_t))v46)(&v55[OBJC_IVAR___ObjCReplica_uuid], v49, v50);
    *(_QWORD *)&v55[OBJC_IVAR___ObjCReplica_index] = v53;
    v92.receiver = v55;
    v92.super_class = v54;
    v56 = (char *)objc_msgSendSuper2(&v92, sel_init);
    v74(v49, v50);
    v57 = &v56[OBJC_IVAR___ObjCReplica_uuid];
    swift_beginAccess();
    v58 = (uint64_t)v84;
    ((void (*)(char *, char *, uint64_t))v46)(v84, v57, v50);
    v59 = *(_QWORD *)&v56[OBJC_IVAR___ObjCReplica_index];

    *(_QWORD *)(v58 + *(int *)(v52 + 20)) = v59;
    v60 = *((_QWORD *)v47 + 1);
    if (*(_QWORD *)(v60 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v61 = sub_1BDDB3EC0(v58);
      v62 = (uint64_t)v85;
      if ((v63 & 1) != 0)
      {
        v64 = v90;
        (*(void (**)(char *, unint64_t, uint64_t))(v91 + 16))(v85, *(_QWORD *)(v60 + 56) + *(_QWORD *)(v91 + 72) * v61, v90);
        v65 = (char *)v62;
        v66 = 0;
      }
      else
      {
        v65 = v85;
        v66 = 1;
        v64 = v90;
      }
      v88(v65, v66, 1, v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v62 = (uint64_t)v85;
      v64 = v90;
      v88(v85, 1, 1, v90);
    }
    sub_1BDD9C3E0(v58, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v87(v62, 1, v64))
    {
      sub_1BDD86E30(v62, &qword_1ED6F3C78);
      v68 = 0;
    }
    else
    {
      v69 = v91;
      v70 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v73, v62, v64);
      sub_1BDD86E30(v62, &qword_1ED6F3C78);
      v68 = sub_1BE1B2024();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v64);
    }
  }
  else
  {
    v67 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v73, v38, v39);
    sub_1BDD86E30(v38, &qword_1ED6F3C78);
    v68 = sub_1BE1B2024();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v67, v39);
  }
  return v68 & 1;
}

uint64_t sub_1BE19F33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v6 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v10 = sub_1BE1B1F58();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)&v8[*(int *)(v6 + 20)] = *(_QWORD *)(a3 + OBJC_IVAR___ObjCReplica_index);
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else if (a1 + a2 >= a1)
  {
    swift_beginAccess();
    sub_1BDEE9160((uint64_t)v8, a1, a1 + a2);
    sub_1BDD9C3E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE19F4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[24];

  v6 = sub_1BE1B206C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v14 = sub_1BE1B1F58();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_QWORD *)&v12[*(int *)(v10 + 20)] = *(_QWORD *)(a3 + OBJC_IVAR___ObjCReplica_index);
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else if (a1 + a2 >= a1)
  {
    sub_1BE1B1F70();
    swift_beginAccess();
    sub_1BDEE932C((uint64_t)v12, (uint64_t)v9);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    sub_1BDD9C3E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BE19F6F4(void *a1, uint64_t a2, char *a3, void (*a4)(uint64_t))
{
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;

  v7 = &a3[OBJC_IVAR___ObjCVersion_version];
  swift_beginAccess();
  v8 = *(_QWORD *)v7;
  swift_beginAccess();
  v9 = a3;
  v10 = a1;
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a4(v11);
  a4(v8);
  swift_endAccess();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1BE19F938()
{
  return sub_1BE19F944(type metadata accessor for ObjCVersion);
}

id sub_1BE19F944(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ObjCVersion()
{
  return objc_opt_self();
}

_QWORD *assignWithCopy for RLEMapping(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  return a1;
}

_QWORD *assignWithTake for RLEMapping(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  return a1;
}

uint64_t assignWithCopy for Renames(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Renames(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Renames()
{
  return &type metadata for Renames;
}

uint64_t sub_1BE19FAFC(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_1BE1B1F58() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1BDEF9878(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1BE19FB7C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1BE19FB7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  __int16 v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  __int16 v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  __int16 v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  int v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  void (*v117)(char *, uint64_t, uint64_t);
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  char v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  void (*v178)(char *, uint64_t, uint64_t);
  uint64_t v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;

  v2 = v1;
  v192 = *MEMORY[0x1E0C80C00];
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v174 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v181 = (char *)&v170 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v186 = (char *)&v170 - v11;
  MEMORY[0x1E0C80A78](v10);
  v184 = a1;
  v185 = (char *)&v170 - v12;
  v13 = a1[1];
  result = sub_1BE1B32CC();
  if (result >= v13)
  {
    if (v13 < 0)
      goto LABEL_159;
    if (v13)
      return sub_1BE1A08A0(0, v13, 1, v184);
  }
  else
  {
    if (v13 >= 0)
      v15 = v13;
    else
      v15 = v13 + 1;
    if (v13 < -1)
    {
      result = sub_1BE1B31F4();
      __break(1u);
    }
    else
    {
      v187 = v4;
      v172 = result;
      v180 = (_QWORD *)v5;
      if (v13 >= 2)
      {
        v16 = v15 >> 1;
        v17 = sub_1BE1B29E4();
        *(_QWORD *)(v17 + 16) = v16;
        v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v171 = v17;
        v177 = v17 + v18;
LABEL_12:
        v20 = 0;
        v19 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          v22 = (uint64_t)v20;
          v23 = v20 + 1;
          v176 = v20;
          if ((uint64_t)(v20 + 1) >= v13)
          {
            v44 = (uint64_t)(v20 + 1);
          }
          else
          {
            v182 = v13;
            v24 = *v184;
            v25 = v180[9];
            v26 = (void (*)(char *, uint64_t, uint64_t))v180[2];
            v27 = v187;
            v26(v185, *v184 + v25 * (_QWORD)v23, v187);
            v175 = v24;
            v183 = v25;
            v26(v186, v24 + v25 * v22, v27);
            v190 = sub_1BE1B1F40();
            LOWORD(v191) = v28;
            BYTE2(v191) = v29;
            BYTE3(v191) = v30;
            BYTE4(v191) = v31;
            BYTE5(v191) = v32;
            BYTE6(v191) = v33;
            HIBYTE(v191) = v34;
            v188 = sub_1BE1B1F40();
            LOWORD(v189) = v35;
            BYTE2(v189) = v36;
            BYTE3(v189) = v37;
            BYTE4(v189) = v38;
            BYTE5(v189) = v39;
            BYTE6(v189) = v40;
            HIBYTE(v189) = v41;
            v42 = bswap64(v190);
            v43 = bswap64(v188);
            if (v42 == v43 && (v42 = bswap64(v191), v43 = bswap64(v189), v42 == v43))
            {
              LODWORD(v179) = 0;
              v13 = v182;
            }
            else
            {
              v13 = v182;
              if (v42 < v43)
                v45 = -1;
              else
                v45 = 1;
              LODWORD(v179) = v45;
            }
            v46 = (void (*)(char *, uint64_t))v180[1];
            v47 = v187;
            v46(v186, v187);
            v46(v185, v47);
            v44 = v22 + 2;
            if (v22 + 2 >= v13)
            {
LABEL_35:
              if ((v179 & 0x80000000) != 0)
                goto LABEL_38;
            }
            else
            {
              v173 = v19;
              v170 = v2;
              v48 = v183 * (_QWORD)v23;
              v49 = v175;
              v50 = v183 * v44;
              while (1)
              {
                v51 = v44;
                v52 = v187;
                v26(v185, v49 + v50, v187);
                v26(v186, v49 + v48, v52);
                v190 = sub_1BE1B1F40();
                LOWORD(v191) = v53;
                BYTE2(v191) = v54;
                BYTE3(v191) = v55;
                BYTE4(v191) = v56;
                BYTE5(v191) = v57;
                BYTE6(v191) = v58;
                HIBYTE(v191) = v59;
                v188 = sub_1BE1B1F40();
                LOWORD(v189) = v60;
                BYTE2(v189) = v61;
                BYTE3(v189) = v62;
                BYTE4(v189) = v63;
                BYTE5(v189) = v64;
                BYTE6(v189) = v65;
                HIBYTE(v189) = v66;
                v67 = bswap64(v190);
                v68 = bswap64(v188);
                if (v67 != v68)
                  goto LABEL_29;
                v67 = bswap64(v191);
                v68 = bswap64(v189);
                if (v67 == v68)
                  v69 = 0;
                else
LABEL_29:
                  v69 = v67 < v68 ? -1 : 1;
                v70 = v187;
                v46(v186, v187);
                v46(v185, v70);
                if (((v69 ^ v179) & 0x80000000) != 0)
                  break;
                v44 = v51 + 1;
                v13 = v182;
                v49 += v183;
                if (v182 == v44)
                {
                  v44 = v182;
                  v2 = v170;
                  v19 = v173;
                  v22 = (uint64_t)v176;
                  goto LABEL_35;
                }
              }
              v2 = v170;
              v19 = v173;
              v44 = v51;
              v22 = (uint64_t)v176;
              v13 = v182;
              if ((v179 & 0x80000000) != 0)
              {
LABEL_38:
                if (v44 < v22)
                  goto LABEL_162;
                if (v22 < v44)
                {
                  v173 = v19;
                  v71 = 0;
                  v72 = v183 * (v44 - 1);
                  v73 = v44 * v183;
                  v74 = v22 * v183;
                  v178 = (void (*)(char *, uint64_t, uint64_t))v44;
                  do
                  {
                    if (v22 != v44 + v71 - 1)
                    {
                      if (!v175)
                        goto LABEL_165;
                      v76 = v2;
                      v77 = v175 + v74;
                      v78 = v175 + v72;
                      v79 = v175;
                      v179 = v180[4];
                      ((void (*)(char *, uint64_t, uint64_t))v179)(v174, v175 + v74, v187);
                      if (v74 < v72 || v77 >= v79 + v73)
                      {
                        v75 = v187;
                        swift_arrayInitWithTakeFrontToBack();
                      }
                      else
                      {
                        v75 = v187;
                        if (v74 != v72)
                          swift_arrayInitWithTakeBackToFront();
                      }
                      ((void (*)(uint64_t, char *, uint64_t))v179)(v78, v174, v75);
                      v2 = v76;
                      v44 = (uint64_t)v178;
                    }
                    ++v22;
                    --v71;
                    v72 -= v183;
                    v73 -= v183;
                    v74 += v183;
                  }
                  while (v22 < v44 + v71);
                  v19 = v173;
                  v22 = (uint64_t)v176;
                  v13 = v182;
                }
              }
            }
          }
          if (v44 >= v13)
            goto LABEL_76;
          if (__OFSUB__(v44, v22))
            goto LABEL_158;
          if (v44 - v22 >= v172)
            goto LABEL_76;
          if (__OFADD__(v22, v172))
            goto LABEL_160;
          if (v22 + v172 >= v13)
            v80 = v13;
          else
            v80 = v22 + v172;
          if (v80 < v22)
          {
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
          }
          if (v44 == v80)
            goto LABEL_76;
          v173 = v19;
          v170 = v2;
          v81 = v180[9];
          v178 = (void (*)(char *, uint64_t, uint64_t))v180[2];
          v179 = v81;
          v182 = v44 * v81;
          v183 = v81 * (v44 - 1);
          v82 = v187;
          v175 = v80;
          while (2)
          {
            v83 = 0;
            v84 = v22;
            while (1)
            {
              v85 = v44;
              v86 = *v184;
              v87 = v178;
              v178(v185, v182 + v83 + *v184, v82);
              v87(v186, v183 + v83 + v86, v82);
              v190 = sub_1BE1B1F40();
              LOWORD(v191) = v88;
              BYTE2(v191) = v89;
              BYTE3(v191) = v90;
              BYTE4(v191) = v91;
              BYTE5(v191) = v92;
              BYTE6(v191) = v93;
              HIBYTE(v191) = v94;
              v188 = sub_1BE1B1F40();
              LOWORD(v189) = v95;
              BYTE2(v189) = v96;
              BYTE3(v189) = v97;
              BYTE4(v189) = v98;
              BYTE5(v189) = v99;
              BYTE6(v189) = v100;
              HIBYTE(v189) = v101;
              v102 = bswap64(v190);
              v103 = bswap64(v188);
              if (v102 == v103)
              {
                v102 = bswap64(v191);
                v103 = bswap64(v189);
                v104 = v180;
                if (v102 == v103)
                {
                  v105 = 0;
                  goto LABEL_72;
                }
              }
              else
              {
                v104 = v180;
              }
              v105 = v102 < v103 ? -1 : 1;
LABEL_72:
              v106 = (void (*)(char *, uint64_t))v104[1];
              v107 = v187;
              v106(v186, v187);
              v106(v185, v107);
              if ((v105 & 0x80000000) == 0)
                break;
              v108 = *v184;
              if (!*v184)
                goto LABEL_163;
              v109 = (char *)(v108 + v183 + v83);
              v110 = (void (*)(char *, uint64_t, uint64_t))v104[4];
              v111 = v187;
              v110(v181, v108 + v182 + v83, v187);
              v82 = v111;
              swift_arrayInitWithTakeFrontToBack();
              v110(v109, (uint64_t)v181, v111);
              v83 -= v179;
              ++v84;
              v44 = v85;
              if (v85 == v84)
                goto LABEL_62;
            }
            v82 = v187;
            v44 = v85;
LABEL_62:
            ++v44;
            v183 += v179;
            v182 += v179;
            v22 = (uint64_t)v176;
            if (v44 != v175)
              continue;
            break;
          }
          v44 = v175;
          v2 = v170;
          v19 = v173;
LABEL_76:
          if (v44 < v22)
            goto LABEL_153;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v178 = (void (*)(char *, uint64_t, uint64_t))v44;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v19 = sub_1BDEF9288(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
          v114 = *((_QWORD *)v19 + 2);
          v113 = *((_QWORD *)v19 + 3);
          v21 = v114 + 1;
          if (v114 >= v113 >> 1)
            v19 = sub_1BDEF9288((char *)(v113 > 1), v114 + 1, 1, v19);
          *((_QWORD *)v19 + 2) = v21;
          v115 = v19 + 32;
          v116 = &v19[16 * v114 + 32];
          v117 = v178;
          *(_QWORD *)v116 = v22;
          *((_QWORD *)v116 + 1) = v117;
          if (v114)
          {
            while (2)
            {
              v118 = v21 - 1;
              if (v21 >= 4)
              {
                v123 = &v115[16 * v21];
                v124 = *((_QWORD *)v123 - 8);
                v125 = *((_QWORD *)v123 - 7);
                v129 = __OFSUB__(v125, v124);
                v126 = v125 - v124;
                if (v129)
                  goto LABEL_142;
                v128 = *((_QWORD *)v123 - 6);
                v127 = *((_QWORD *)v123 - 5);
                v129 = __OFSUB__(v127, v128);
                v121 = v127 - v128;
                v122 = v129;
                if (v129)
                  goto LABEL_143;
                v130 = v21 - 2;
                v131 = &v115[16 * v21 - 32];
                v133 = *(_QWORD *)v131;
                v132 = *((_QWORD *)v131 + 1);
                v129 = __OFSUB__(v132, v133);
                v134 = v132 - v133;
                if (v129)
                  goto LABEL_145;
                v129 = __OFADD__(v121, v134);
                v135 = v121 + v134;
                if (v129)
                  goto LABEL_148;
                if (v135 >= v126)
                {
                  v153 = &v115[16 * v118];
                  v155 = *(_QWORD *)v153;
                  v154 = *((_QWORD *)v153 + 1);
                  v129 = __OFSUB__(v154, v155);
                  v156 = v154 - v155;
                  if (v129)
                    goto LABEL_152;
                  v146 = v121 < v156;
                }
                else
                {
LABEL_95:
                  if ((v122 & 1) != 0)
                    goto LABEL_144;
                  v130 = v21 - 2;
                  v136 = &v115[16 * v21 - 32];
                  v138 = *(_QWORD *)v136;
                  v137 = *((_QWORD *)v136 + 1);
                  v139 = __OFSUB__(v137, v138);
                  v140 = v137 - v138;
                  v141 = v139;
                  if (v139)
                    goto LABEL_147;
                  v142 = &v115[16 * v118];
                  v144 = *(_QWORD *)v142;
                  v143 = *((_QWORD *)v142 + 1);
                  v129 = __OFSUB__(v143, v144);
                  v145 = v143 - v144;
                  if (v129)
                    goto LABEL_150;
                  if (__OFADD__(v140, v145))
                    goto LABEL_151;
                  if (v140 + v145 < v121)
                    goto LABEL_107;
                  v146 = v121 < v145;
                }
                if (v146)
                  v118 = v130;
              }
              else
              {
                if (v21 == 3)
                {
                  v120 = *((_QWORD *)v19 + 4);
                  v119 = *((_QWORD *)v19 + 5);
                  v129 = __OFSUB__(v119, v120);
                  v121 = v119 - v120;
                  v122 = v129;
                  goto LABEL_95;
                }
                v147 = *((_QWORD *)v19 + 4);
                v148 = *((_QWORD *)v19 + 5);
                v129 = __OFSUB__(v148, v147);
                v140 = v148 - v147;
                v141 = v129;
LABEL_107:
                if ((v141 & 1) != 0)
                  goto LABEL_146;
                v149 = &v115[16 * v118];
                v151 = *(_QWORD *)v149;
                v150 = *((_QWORD *)v149 + 1);
                v129 = __OFSUB__(v150, v151);
                v152 = v150 - v151;
                if (v129)
                  goto LABEL_149;
                if (v152 < v140)
                  goto LABEL_14;
              }
              v157 = v118 - 1;
              if (v118 - 1 >= v21)
              {
                __break(1u);
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
                goto LABEL_161;
              }
              if (!*v184)
                goto LABEL_164;
              v158 = v19;
              v159 = &v115[16 * v157];
              v160 = *(_QWORD *)v159;
              v161 = &v115[16 * v118];
              v162 = *((_QWORD *)v161 + 1);
              sub_1BE1A0C28(*v184 + v180[9] * *(_QWORD *)v159, *v184 + v180[9] * *(_QWORD *)v161, *v184 + v180[9] * v162, v177);
              if (v2)
                goto LABEL_136;
              if (v162 < v160)
                goto LABEL_139;
              if (v118 > *((_QWORD *)v158 + 2))
                goto LABEL_140;
              *(_QWORD *)v159 = v160;
              *(_QWORD *)&v115[16 * v157 + 8] = v162;
              v163 = *((_QWORD *)v158 + 2);
              if (v118 >= v163)
                goto LABEL_141;
              v19 = v158;
              v21 = v163 - 1;
              memmove(&v115[16 * v118], v161 + 16, 16 * (v163 - 1 - v118));
              *((_QWORD *)v158 + 2) = v163 - 1;
              if (v163 <= 2)
                goto LABEL_14;
              continue;
            }
          }
          v21 = 1;
LABEL_14:
          v13 = v184[1];
          v20 = (char *)v178;
          if ((uint64_t)v178 >= v13)
            goto LABEL_125;
        }
      }
      v19 = (char *)MEMORY[0x1E0DEE9D8];
      v177 = MEMORY[0x1E0DEE9D8]
           + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v171 = MEMORY[0x1E0DEE9D8];
      if (v13 == 1)
        goto LABEL_12;
      v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_125:
      if (v21 >= 2)
      {
        v164 = *v184;
        do
        {
          v165 = v21 - 2;
          if (v21 < 2)
            goto LABEL_154;
          if (!v164)
            goto LABEL_166;
          v166 = *(_QWORD *)&v19[16 * v165 + 32];
          v167 = *(_QWORD *)&v19[16 * v21 + 24];
          sub_1BE1A0C28(v164 + v180[9] * v166, v164 + v180[9] * *(_QWORD *)&v19[16 * v21 + 16], v164 + v180[9] * v167, v177);
          if (v2)
            break;
          if (v167 < v166)
            goto LABEL_155;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = sub_1BDEF9798((uint64_t)v19);
          if (v165 >= *((_QWORD *)v19 + 2))
            goto LABEL_156;
          v168 = &v19[16 * v165 + 32];
          *(_QWORD *)v168 = v166;
          *((_QWORD *)v168 + 1) = v167;
          v169 = *((_QWORD *)v19 + 2);
          if (v21 > v169)
            goto LABEL_157;
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v169 - v21));
          *((_QWORD *)v19 + 2) = v169 - 1;
          v21 = v169 - 1;
        }
        while (v169 > 2);
      }
LABEL_136:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v171 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1BE1A08A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  __int16 v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v47 = a1;
  v61 = *MEMORY[0x1E0C80C00];
  v7 = sub_1BE1B1F58();
  v54 = *(_QWORD **)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v51 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  result = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v45 - v13;
  v50 = a3;
  v46 = a2;
  if (a3 != a2)
  {
    v15 = v12;
    v16 = v54[9];
    v48 = (void (*)(uint64_t, uint64_t, uint64_t))v54[2];
    v49 = v16;
    v55 = v16 * v50;
    v56 = v16 * (v50 - 1);
    do
    {
      v17 = 0;
      v18 = v47;
      do
      {
        v19 = *a4;
        v53 = v55 + v17;
        v20 = v48;
        v48((uint64_t)v14, v55 + v17 + v19, v7);
        v52 = v56 + v17;
        v20(v15, v56 + v17 + v19, v7);
        v59 = sub_1BE1B1F40();
        LOWORD(v60) = v21;
        BYTE2(v60) = v22;
        BYTE3(v60) = v23;
        BYTE4(v60) = v24;
        BYTE5(v60) = v25;
        BYTE6(v60) = v26;
        HIBYTE(v60) = v27;
        v57 = sub_1BE1B1F40();
        LOWORD(v58) = v28;
        BYTE2(v58) = v29;
        BYTE3(v58) = v30;
        BYTE4(v58) = v31;
        BYTE5(v58) = v32;
        BYTE6(v58) = v33;
        HIBYTE(v58) = v34;
        v35 = bswap64(v59);
        v36 = bswap64(v57);
        if (v35 == v36 && (v35 = bswap64(v60), v36 = bswap64(v58), v35 == v36))
        {
          v37 = 0;
        }
        else if (v35 < v36)
        {
          v37 = -1;
        }
        else
        {
          v37 = 1;
        }
        v38 = (void (*)(uint64_t, uint64_t))v54[1];
        v38(v15, v7);
        result = ((uint64_t (*)(char *, uint64_t))v38)(v14, v7);
        if ((v37 & 0x80000000) == 0)
          break;
        v39 = *a4;
        if (!*a4)
          __break(1u);
        v40 = v14;
        v41 = v15;
        v42 = a4;
        v43 = v39 + v56 + v17;
        v44 = (void (*)(char *, uint64_t, uint64_t))v54[4];
        v44(v51, v39 + v55 + v17, v7);
        swift_arrayInitWithTakeFrontToBack();
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v44)(v43, v51, v7);
        v17 -= v49;
        ++v18;
        a4 = v42;
        v15 = v41;
        v14 = v40;
      }
      while (v50 != v18);
      v56 += v49;
      v55 += v49;
      ++v50;
    }
    while (v50 != v46);
  }
  return result;
}

uint64_t sub_1BE1A0C28(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(char *, unint64_t, uint64_t);
  __int16 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  void (*v39)(char *, uint64_t);
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  unint64_t v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  __int16 v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void (*v68)(unint64_t, uint64_t);
  unint64_t v69;
  unint64_t v70;
  uint64_t result;
  uint64_t v72;
  void (*v73)(char *, unint64_t, uint64_t);
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85[2];

  v85[1] = *MEMORY[0x1E0C80C00];
  v8 = sub_1BE1B1F58();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v77 = v13;
  v78 = (char *)&v72 - v12;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_74;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
LABEL_75:
    __break(1u);
  v16 = (uint64_t)(a2 - a1) / v14;
  v84 = a4;
  v85[0] = a1;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v43 = a4 + v19;
      v83 = a4 + v19;
      v85[0] = a2;
      if (v19 >= 1 && a1 < a2)
      {
        v75 = -v14;
        v76 = (unint64_t)v11;
        v73 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
        v74 = a1;
        do
        {
          v45 = v75;
          v46 = v73;
          v73(v78, v43 + v75, v8);
          v47 = a2 + v45;
          v46(v11, a2 + v45, v8);
          v81 = sub_1BE1B1F40();
          LOWORD(v82) = v48;
          BYTE2(v82) = v49;
          BYTE3(v82) = v50;
          BYTE4(v82) = v51;
          BYTE5(v82) = v52;
          BYTE6(v82) = v53;
          HIBYTE(v82) = v54;
          v79 = sub_1BE1B1F40();
          LOWORD(v80) = v55;
          BYTE2(v80) = v56;
          BYTE3(v80) = v57;
          BYTE4(v80) = v58;
          BYTE5(v80) = v59;
          BYTE6(v80) = v60;
          HIBYTE(v80) = v61;
          v62 = bswap64(v81);
          v63 = bswap64(v79);
          if (v62 == v63 && (v62 = bswap64(v82), v63 = bswap64(v80), v62 == v63))
          {
            v64 = 0;
            v65 = v75;
          }
          else
          {
            v65 = v75;
            if (v62 < v63)
              v64 = -1;
            else
              v64 = 1;
          }
          v66 = a3;
          v67 = a3 + v65;
          v68 = *(void (**)(unint64_t, uint64_t))(v77 + 8);
          v68(v76, v8);
          v68((unint64_t)v78, v8);
          if (v64 < 0)
          {
            if (v66 < a2 || v67 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v70 = v74;
            }
            else
            {
              v70 = v74;
              if (v66 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v85[0] += v65;
            v11 = (char *)v76;
          }
          else
          {
            v69 = v83;
            v83 += v65;
            if (v66 < v69 || v67 >= v69)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v66 != v69)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v47 = a2;
            v11 = (char *)v76;
            v70 = v74;
          }
          v43 = v83;
          if (v83 <= a4)
            break;
          a2 = v47;
          a3 = v67;
        }
        while (v47 > v70);
      }
      goto LABEL_72;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v76 = a4 + v18;
    v83 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
      do
      {
        v21(v78, a2, v8);
        v21(v11, a4, v8);
        v81 = sub_1BE1B1F40();
        LOWORD(v82) = v22;
        BYTE2(v82) = v23;
        BYTE3(v82) = v24;
        BYTE4(v82) = v25;
        BYTE5(v82) = v26;
        BYTE6(v82) = v27;
        HIBYTE(v82) = v28;
        v79 = sub_1BE1B1F40();
        LOWORD(v80) = v29;
        BYTE2(v80) = v30;
        BYTE3(v80) = v31;
        BYTE4(v80) = v32;
        BYTE5(v80) = v33;
        BYTE6(v80) = v34;
        HIBYTE(v80) = v35;
        v36 = bswap64(v81);
        v37 = bswap64(v79);
        if (v36 == v37 && (v36 = bswap64(v82), v37 = bswap64(v80), v36 == v37))
        {
          v38 = 0;
        }
        else if (v36 < v37)
        {
          v38 = -1;
        }
        else
        {
          v38 = 1;
        }
        v39 = *(void (**)(char *, uint64_t))(v77 + 8);
        v39(v11, v8);
        v39(v78, v8);
        v40 = v85[0];
        if (v38 < 0)
        {
          v42 = a2 + v14;
          if (v85[0] < a2 || v85[0] >= v42)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v85[0] == a2)
          {
            v40 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v41 = v84 + v14;
          if (v85[0] < v84 || v85[0] >= v41)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v85[0] != v84)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v84 = v41;
          v42 = a2;
        }
        v85[0] = v40 + v14;
        a4 = v84;
        if (v84 >= v76)
          break;
        a2 = v42;
      }
      while (v42 < a3);
    }
LABEL_72:
    sub_1BDEF9680(v85, &v84, (uint64_t *)&v83);
    return 1;
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

BOOL sub_1BE1A12F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v38 = a3;
  v5 = type metadata accessor for FinalizedTimestamp(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v37 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v41 = (char *)&v37 - v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v37 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC88);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v42 = (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v37 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v37 - v22;
  v39 = a1;
  sub_1BDD86DEC(a1, (uint64_t)&v37 - v22, (uint64_t *)&unk_1ED6F2DC0);
  v40 = a2;
  sub_1BDD86DEC(a2, (uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
  v24 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_1BDD86DEC((uint64_t)v23, (uint64_t)v15, (uint64_t *)&unk_1ED6F2DC0);
  sub_1BDD86DEC((uint64_t)v21, v24, (uint64_t *)&unk_1ED6F2DC0);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v25((uint64_t)v15, 1, v5) == 1)
  {
    sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD86E30((uint64_t)v23, (uint64_t *)&unk_1ED6F2DC0);
    if (v25(v24, 1, v5) == 1)
    {
      sub_1BDD86E30((uint64_t)v15, (uint64_t *)&unk_1ED6F2DC0);
LABEL_9:
      v35 = v38(0);
      return *(_QWORD *)(v39 + *(int *)(v35 + 20)) == *(_QWORD *)(v40 + *(int *)(v35 + 20));
    }
    goto LABEL_6;
  }
  v26 = (uint64_t)v41;
  v27 = v42;
  sub_1BDD86DEC((uint64_t)v15, v42, (uint64_t *)&unk_1ED6F2DC0);
  if (v25(v24, 1, v5) == 1)
  {
    sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD86E30((uint64_t)v23, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD9C3E0(v27, type metadata accessor for FinalizedTimestamp);
LABEL_6:
    v28 = &qword_1ED6EFC88;
    v29 = (uint64_t)v15;
LABEL_11:
    sub_1BDD86E30(v29, v28);
    return 0;
  }
  sub_1BDDA2E8C(v24, (uint64_t)v12, type metadata accessor for FinalizedTimestamp);
  v30 = *(int *)(v5 + 20);
  v31 = *(_QWORD *)(v27 + v30);
  v32 = *(_QWORD *)&v12[v30];
  sub_1BDD9C318(v27, v26, type metadata accessor for FinalizedTimestamp);
  v33 = v37;
  sub_1BDD9C318((uint64_t)v12, v37, type metadata accessor for FinalizedTimestamp);
  if (v31 != v32)
  {
    sub_1BDD9C3E0(v33, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v26, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for FinalizedTimestamp);
    sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD86E30((uint64_t)v23, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD9C3E0(v27, type metadata accessor for FinalizedTimestamp);
    v29 = (uint64_t)v15;
    v28 = (uint64_t *)&unk_1ED6F2DC0;
    goto LABEL_11;
  }
  v34 = sub_1BE1B1F10();
  sub_1BDD9C3E0(v33, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0(v26, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for FinalizedTimestamp);
  sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
  sub_1BDD86E30((uint64_t)v23, (uint64_t *)&unk_1ED6F2DC0);
  sub_1BDD9C3E0(v27, type metadata accessor for FinalizedTimestamp);
  sub_1BDD86E30((uint64_t)v15, (uint64_t *)&unk_1ED6F2DC0);
  if ((v34 & 1) != 0)
    goto LABEL_9;
  return 0;
}

void sub_1BE1A16EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v71 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v7);
  v69 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for FinalizedTimestamp(0);
  v68 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v66 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v60 - v14;
  v70 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v16 = *(_QWORD *)(v70 - 8);
  v17 = MEMORY[0x1E0C80A78](v70);
  v19 = (uint64_t *)((char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v60 - v20;
  v22 = OBJC_IVAR____TtC9Coherence7ObjCRLE_rle;
  v23 = *(_QWORD *)(a3 + OBJC_IVAR____TtC9Coherence7ObjCRLE_rle);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24 == 1)
  {
    v25 = OBJC_IVAR____TtC9Coherence7ObjCRLE_rle;
    sub_1BDD86DEC(v23 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), (uint64_t)&v60 - v20, qword_1ED6F25C0);
    sub_1BDDA2EF0((uint64_t)&v21[*(int *)(v70 + 36)], (uint64_t)v15, &qword_1ED6F2520);
    v26 = type metadata accessor for RetainedMapRun(0);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v15, 1, v26);
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F2520);
    if (v27 != 1)
    {
      v22 = v25;
      v23 = *(_QWORD *)(a3 + v25);
      v24 = *(_QWORD *)(v23 + 16);
      if (!v24)
      {
LABEL_57:
        __break(1u);
        return;
      }
      goto LABEL_8;
    }
LABEL_5:
    if (qword_1ED6EF4D0 == -1)
      goto LABEL_44;
    goto LABEL_56;
  }
  if (!v24)
    goto LABEL_5;
LABEL_8:
  v63 = a3;
  v67 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v62 = v22;
  v61 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v28 = v23 + v61;
  v73 = *(_QWORD *)(v16 + 72);
  v64 = v23;
  swift_bridgeObjectRetain();
  v29 = qword_1ED6F25C0;
  v30 = v67;
  v65 = a1;
  do
  {
    v31 = v29;
    sub_1BDD86DEC(v28, (uint64_t)v19, v29);
    v33 = *v19;
    v32 = v19[1];
    v34 = __OFSUB__(v32, *v19);
    v35 = v32 - *v19;
    if (v34)
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_56;
    }
    v36 = v33 + v35;
    if (__OFADD__(v33, v35))
      goto LABEL_48;
    if (v30 >= v36)
      v37 = v33 + v35;
    else
      v37 = v30;
    if (v33 > a1 || v36 <= a1)
    {
      if (v33 < a1 || v33 >= v30)
      {
        v29 = v31;
        sub_1BDD86E30((uint64_t)v19, v31);
        goto LABEL_11;
      }
      v39 = v37 - v33;
      v40 = (uint64_t)v69;
      if (__OFSUB__(v37, v33))
        goto LABEL_50;
    }
    else
    {
      v39 = v37 - a1;
      v40 = (uint64_t)v69;
      if (__OFSUB__(v37, a1))
        goto LABEL_49;
      v33 = a1;
    }
    sub_1BDD86DEC((uint64_t)v19 + *(int *)(v70 + 36), (uint64_t)v13, &qword_1ED6F2520);
    v41 = type metadata accessor for RetainedMapRun(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v13, 1, v41) == 1)
    {
      sub_1BDD86E30((uint64_t)v13, &qword_1ED6F2520);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v40, 1, 1, v72);
LABEL_32:
      sub_1BDD86E30(v40, (uint64_t *)&unk_1ED6F2DC0);
      if (qword_1ED6EF4D0 != -1)
        swift_once();
      v42 = sub_1BE1B1F58();
      __swift_project_value_buffer(v42, (uint64_t)qword_1ED6F8A20);
      v43 = (void *)sub_1BE1B1F04();
      v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(v71 + 16))(v71, v33, v39, v43, -1);

      v29 = v31;
      sub_1BDD86E30((uint64_t)v19, v31);
      v30 = v67;
      if (v44)
      {
LABEL_45:
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_11;
    }
    sub_1BDD86DEC((uint64_t)v13, v40, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for RetainedMapRun);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v40, 1, v72) == 1)
      goto LABEL_32;
    v45 = v40;
    v46 = v66;
    sub_1BDDA2E8C(v45, v66, type metadata accessor for FinalizedTimestamp);
    v47 = *(_QWORD *)(v46 + *(int *)(v72 + 20));
    v34 = __OFADD__(v47, v33);
    v48 = v47 + v33;
    if (v34)
      goto LABEL_51;
    v49 = v48 - *v19;
    if (__OFSUB__(v48, *v19))
      goto LABEL_52;
    v50 = v13;
    v51 = v66;
    v52 = (void *)sub_1BE1B1F04();
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(v71 + 16))(v71, v33, v39, v52, v49);

    v54 = v51;
    v13 = v50;
    a1 = v65;
    sub_1BDD9C3E0(v54, type metadata accessor for FinalizedTimestamp);
    v29 = v31;
    sub_1BDD86E30((uint64_t)v19, v31);
    v30 = v67;
    if (v53)
      goto LABEL_45;
LABEL_11:
    v28 += v73;
    --v24;
  }
  while (v24);
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v63 + v62);
  v56 = *(_QWORD *)(v55 + 16);
  if (!v56)
    goto LABEL_57;
  v57 = *(_QWORD *)(v55 + v61 + v73 * (v56 - 1) + 8);
  if (v57 < v30)
  {
    if (__OFSUB__(v30, v57))
      goto LABEL_55;
    if (qword_1ED6EF4D0 == -1)
    {
LABEL_44:
      v58 = sub_1BE1B1F58();
      __swift_project_value_buffer(v58, (uint64_t)qword_1ED6F8A20);
      v59 = (void *)sub_1BE1B1F04();
      (*(void (**)(void))(v71 + 16))();

      return;
    }
LABEL_56:
    swift_once();
    goto LABEL_44;
  }
}

uint64_t sub_1BE1A1D2C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BE1A1D3C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_1BE1A1D4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for FinalizedTimestamp(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = sub_1BE1B1F58();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1BE1A1E4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = type metadata accessor for FinalizedTimestamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_1BE1B1F58();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

char *sub_1BE1A1EB0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = sub_1BE1B1F58();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1BE1A1F84(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v14 = sub_1BE1B1F58();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(a1, a2, v14);
      *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      goto LABEL_7;
    }
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for FinalizedTimestamp);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v11 = sub_1BE1B1F58();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1BE1A20BC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = sub_1BE1B1F58();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1BE1A2190(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v14 = sub_1BE1B1F58();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1, a2, v14);
      *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      goto LABEL_7;
    }
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for FinalizedTimestamp);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v11 = sub_1BE1B1F58();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

Swift::Void __swiftcall MergeResult.merge(_:)(Coherence::MergeResult a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  BOOL v3;

  v2 = *v1;
  if (*(_BYTE *)a1)
    v3 = (_DWORD)v2 == *(unsigned __int8 *)a1;
  else
    v3 = 1;
  if (!v3)
    ((void (*)(void))((char *)&loc_1BE1A22FC + 4 * byte_1BE1C8C8C[v2]))();
}

uint64_t MergeResult.hash(into:)()
{
  return sub_1BE1B3704();
}

BOOL static MergeResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MergeResult.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

unint64_t sub_1BE1A23A8()
{
  unint64_t result;

  result = qword_1EF531A00[0];
  if (!qword_1EF531A00[0])
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for MergeResult, &type metadata for MergeResult);
    atomic_store(result, qword_1EF531A00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MergeResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MergeResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BE1A24C8 + 4 * byte_1BE1C8C96[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BE1A24FC + 4 * byte_1BE1C8C91[v4]))();
}

uint64_t sub_1BE1A24FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE1A2504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BE1A250CLL);
  return result;
}

uint64_t sub_1BE1A2518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BE1A2520);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BE1A2524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BE1A252C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MergeResult()
{
  return &type metadata for MergeResult;
}

uint64_t sub_1BE1A2548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;

  v28 = a3;
  v29 = a2;
  v27[0] = a8;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (uint64_t (**)(uint64_t))((char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  v35 = a1;
  v20 = *(_QWORD *)(a1 + v19)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v15, &qword_1ED6F2DF0);
  v21 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v18, type metadata accessor for Proto_Set);
      v23 = v28;
      v22 = v29;
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  v23 = v28;
  v22 = v29;
  sub_1BE1B20E4();
  v24 = *(int *)(v16 + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(uint64_t (**)(uint64_t))((char *)v18 + v24) = (uint64_t (*)(uint64_t))qword_1ED6F2800;
  swift_retain();
LABEL_9:
  v25 = v27[1];
  sub_1BE1ABC9C(v18, v22, 0, 0, v23, a4, a5, a6, a7);
  if (!v25)
  {
    sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Set);
    v30 = v23;
    v31 = a4;
    v32 = a5;
    v33 = a6;
    v34 = a7;
    type metadata accessor for CRDTDictionaryRef();
  }
  swift_release();
  sub_1BDD9C3E0(v35, type metadata accessor for Proto_CRDT);
  return sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Set);
}

uint64_t sub_1BE1A2800@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v7 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v10 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1ED6F2E18 != -1)
    swift_once();
  *(_QWORD *)(a3 + v10) = qword_1ED6F2E08;
  swift_retain();
  swift_retain();
  v11 = (_QWORD *)sub_1BDDA9128();
  swift_release();
  v16 = 0;
  v12 = sub_1BE1B2A5C();
  v13 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v12);
  sub_1BE1ACB04(v11, a1, (uint64_t)&v16, a2, v12, v13, (uint64_t)v9);
  if (v3)
  {
    sub_1BDD9C3E0(a3, type metadata accessor for Proto_CRDT);
    return swift_release();
  }
  else
  {
    swift_release();
    return sub_1BDDAF0AC((uint64_t)v9);
  }
}

uint64_t sub_1BE1A2974(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _BYTE *v61;

  v61 = a4;
  v8 = *(_QWORD *)(a5 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v54 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v60 = (char *)&v54 - v11;
  v13 = *v12;
  v14 = v12[1];
  v16 = v15[1];
  v57 = *v15;
  v58 = v13;
  v18 = *(int *)(v17 + 36);
  v19 = (uint64_t *)(v5 + v18);
  v20 = *(_QWORD *)(v5 + v18);
  v21 = *(_QWORD *)(v5 + v18 + 8);
  v22 = (uint64_t *)(a1 + v18);
  v23 = *v22;
  v24 = v22[1];
  v55 = v20;
  swift_bridgeObjectRetain();
  v56 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = v14;
  v26 = v8;
  sub_1BDEEAE08(v25, v24, v16);
  sub_1BDEEAE08(v58, v23, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a5 + 16);
  v27 = *(_QWORD *)(a5 + 24);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 72);
  v30 = v59;
  LODWORD(v58) = v29(a1, v28, v27);
  v31 = v29(v30, v28, v27);
  v32 = v60;
  v33 = v31;
  v34 = v28;
  v35 = a5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 + 8) + 8))(a1, v34);
  v36 = *v61;
  v37 = v26;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v39 = v32;
  v38(v32, a1, v35);
  if (v36 == 1)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v35);
LABEL_3:
    v40 = 1;
    goto LABEL_15;
  }
  v41 = v54;
  v38(v54, (uint64_t)v39, v35);
  if ((v33 & 1) == 0)
  {
    v48 = *(void (**)(char *, uint64_t))(v37 + 8);
    v48(v41, v35);
    v48(v39, v35);
    v49 = v56;
    if ((v58 & 1) == 0)
    {
      v40 = 0;
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  v42 = (uint64_t *)&v41[*(int *)(v35 + 36)];
  v44 = *v42;
  v43 = v42[1];
  v45 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = swift_bridgeObjectRetain();
  if ((sub_1BDDB04C0(v46, v43) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = *(void (**)(char *, uint64_t))(v37 + 8);
    v47(v41, v35);
    v47(v39, v35);
    goto LABEL_3;
  }
  v40 = sub_1BDDB04C0(v45, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = *(void (**)(char *, uint64_t))(v37 + 8);
  v50(v41, v35);
  v50(v39, v35);
  if ((v40 & 1) == 0)
  {
    v49 = v56;
    if (((v58 ^ 1) & 1) == 0)
    {
LABEL_12:
      v51 = *v19;
      swift_bridgeObjectRetain();
      v52 = swift_bridgeObjectRetain();
      if ((sub_1BDDB04C0(v52, v49) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40 = 1;
      }
      else
      {
        v40 = sub_1BDDB04C0(v51, v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_15:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v61 = v40 & 1;
  return result;
}

__n128 sub_1BE1A2CE4@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;

  v10 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, a3, a4, a4);
  v14 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = type metadata accessor for CRDTDictionaryElement.Delta(0, a3, a4, v11);
  result = v14;
  *(__n128 *)(a5 + *(int *)(v12 + 36)) = v14;
  return result;
}

uint64_t sub_1BE1A2D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;

  v76 = a4;
  v79 = a2;
  v74 = a3;
  v75 = a5;
  v70 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, a3, a4, a4);
  v65 = *(_QWORD *)(v70 - 8);
  v6 = MEMORY[0x1E0C80A78](v70);
  v64 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v69 = (char *)&v62 - v8;
  v9 = type metadata accessor for Proto_CRDT(0);
  v71 = *(_QWORD *)(v9 - 8);
  v72 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v63 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v68 = (uint64_t)&v62 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v14 = MEMORY[0x1E0C80A78](v13);
  v62 = (uint64_t)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v66 = (uint64_t)&v62 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v67 = (uint64_t)&v62 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v62 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Proto_Version(0);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v28 = (uint64_t *)((char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = a1;
  v73 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  v30 = *(_QWORD *)(a1 + v73);
  v31 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v31, (uint64_t)v24, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    v32 = MEMORY[0x1E0DEE9D8];
    *v28 = MEMORY[0x1E0DEE9D8];
    v28[1] = v32;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v24, &qword_1ED6F37A8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v24, (uint64_t)v28, type metadata accessor for Proto_Version);
  }
  v33 = v79;
  swift_retain();
  v34 = v77;
  sub_1BDDA9DA0(v28, v33, &v78);
  v36 = v29;
  if (v34)
  {
    swift_release();
    return sub_1BDD9C3E0(v29, type metadata accessor for Proto_Set.Element);
  }
  v38 = v74;
  v39 = type metadata accessor for CRDTDictionaryElement.Delta(0, v74, v76, v35);
  v77 = (_OWORD *)(v75 + *(int *)(v39 + 36));
  *v77 = v78;
  v40 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v40, (uint64_t)v21, &qword_1ED6F3728);
  v41 = v72;
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  LODWORD(v40) = v42(v21, 1, v72);
  sub_1BDD86E30((uint64_t)v21, &qword_1ED6F3728);
  v43 = *(_QWORD *)(v36 + v73);
  if ((_DWORD)v40 == 1)
  {
    v44 = v43
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue;
    swift_beginAccess();
    v45 = v66;
    sub_1BDD86DEC(v44, v66, &qword_1ED6F3728);
    LODWORD(v44) = v42((char *)v45, 1, v41);
    sub_1BDD86E30(v45, &qword_1ED6F3728);
    if ((_DWORD)v44 == 1)
    {
      swift_release();
      sub_1BDD9C3E0(v36, type metadata accessor for Proto_Set.Element);
      return swift_storeEnumTagMultiPayload();
    }
    v51 = *(_QWORD *)(v36 + v73)
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue;
    swift_beginAccess();
    v52 = v62;
    sub_1BDD86DEC(v51, v62, &qword_1ED6F3728);
    if (v42((char *)v52, 1, v41) == 1)
    {
      v53 = v63;
      sub_1BE1B20E4();
      v54 = *(int *)(v41 + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v53 + v54) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v52, &qword_1ED6F3728);
    }
    else
    {
      v53 = v63;
      sub_1BDDA2E8C(v52, v63, type metadata accessor for Proto_CRDT);
    }
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v58 = v79;
    swift_retain();
    v59 = sub_1BDDA1B44(v53, v58);
    swift_release();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v50 = v64;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v59, AssociatedTypeWitness);
    swift_release();
    sub_1BDD9C3E0(v36, type metadata accessor for Proto_Set.Element);
    v57 = v70;
  }
  else
  {
    v46 = v43 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    v47 = v67;
    sub_1BDD86DEC(v46, v67, &qword_1ED6F3728);
    if (v42((char *)v47, 1, v41) == 1)
    {
      v48 = v68;
      sub_1BE1B20E4();
      v49 = *(int *)(v41 + 20);
      v50 = v69;
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v48 + v49) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v47, &qword_1ED6F3728);
    }
    else
    {
      v48 = v68;
      sub_1BDDA2E8C(v47, v68, type metadata accessor for Proto_CRDT);
      v50 = v69;
    }
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v55 = v79;
    swift_retain();
    v56 = sub_1BDDA1B44(v48, v55);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v76 + 16) + 8) + 8))(v56, v38);
    swift_release();
    sub_1BDD9C3E0(v36, type metadata accessor for Proto_Set.Element);
    v57 = v70;
  }
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 32))(v75, v50, v57);
}

uint64_t sub_1BE1A3534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v77 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v75 = (char *)&v66 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v10 = MEMORY[0x1E0C80A78](v9);
  v70 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v69 = (uint64_t)&v66 - v12;
  v68 = type metadata accessor for Proto_CRDT(0);
  v67 = *(_QWORD *)(v68 - 8);
  v13 = MEMORY[0x1E0C80A78](v68);
  v72 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v71 = (uint64_t)&v66 - v16;
  v74 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v15);
  v73 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v6;
  v79 = v5;
  v19 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, v5, v6, v18);
  v80 = *(_QWORD *)(v19 - 8);
  v81 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v66 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v66 - v26;
  v28 = type metadata accessor for Proto_Version(0);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v31 = (uint64_t *)((char *)&v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BE1B20E4();
  v32 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1ED6EF6F0 != -1)
    swift_once();
  *(_QWORD *)(a3 + v32) = qword_1ED6EF6E0;
  v33 = (uint64_t *)(v85 + *(int *)(a2 + 36));
  v83 = v32;
  v84 = a3;
  v34 = v33[1];
  v86 = *v33;
  v87 = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDAD780(v88, v31);
  swift_bridgeObjectRelease();
  v36 = v83;
  v35 = v84;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v37 = swift_retain();
    *(_QWORD *)(v35 + v36) = sub_1BE13500C(v37);
    swift_release();
  }
  v38 = *(_QWORD *)(v35 + v36);
  sub_1BDDA2E8C((uint64_t)v31, (uint64_t)v27, type metadata accessor for Proto_Version);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
  sub_1BDDA2EF0((uint64_t)v27, (uint64_t)v25, &qword_1ED6F37A8);
  v39 = v38 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v25, v39, &qword_1ED6F37A8);
  swift_endAccess();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v21, v85, v81);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    v41 = v82;
    v42 = v88;
    if ((_DWORD)result != 1)
      return result;
    v44 = v75;
    v43 = v76;
    v45 = v77;
    v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v76 + 32))(v75, v21, v77);
    MEMORY[0x1E0C80A78](v46);
    v47 = v78;
    *(&v66 - 4) = v79;
    *(&v66 - 3) = v47;
    *(&v66 - 2) = (uint64_t)v44;
    *(&v66 - 1) = v42;
    v48 = v72;
    sub_1BDDA82F8((void (*)(uint64_t))sub_1BDFD74DC, v72);
    if (!v41)
    {
      v50 = v83;
      v49 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Set.Element._StorageClass(0);
        swift_allocObject();
        v51 = swift_retain();
        *(_QWORD *)(v49 + v50) = sub_1BE13500C(v51);
        swift_release();
      }
      v52 = *(_QWORD *)(v49 + v50);
      v53 = v69;
      sub_1BDDA2E8C(v48, v69, type metadata accessor for Proto_CRDT);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v53, 0, 1, v68);
      v54 = v70;
      sub_1BDDA2EF0(v53, v70, &qword_1ED6F3728);
      v55 = OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue;
LABEL_16:
      v65 = v52 + v55;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v54, v65, &qword_1ED6F3728);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v45);
    }
  }
  else
  {
    v44 = v73;
    v43 = v74;
    v45 = v79;
    v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v74 + 32))(v73, v21, v79);
    MEMORY[0x1E0C80A78](v56);
    v57 = v78;
    *(&v66 - 4) = v45;
    *(&v66 - 3) = v57;
    v58 = v88;
    *(&v66 - 2) = (uint64_t)v44;
    *(&v66 - 1) = v58;
    v59 = v71;
    v60 = v82;
    sub_1BDDA82F8((void (*)(uint64_t))sub_1BDE27F9C, v71);
    if (!v60)
    {
      v62 = v83;
      v61 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Set.Element._StorageClass(0);
        swift_allocObject();
        v63 = swift_retain();
        *(_QWORD *)(v61 + v62) = sub_1BE13500C(v63);
        swift_release();
      }
      v52 = *(_QWORD *)(v61 + v62);
      v64 = v69;
      sub_1BDDA2E8C(v59, v69, type metadata accessor for Proto_CRDT);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v68);
      v54 = v70;
      sub_1BDDA2EF0(v64, v70, &qword_1ED6F3728);
      v55 = OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
      goto LABEL_16;
    }
  }
  sub_1BDD9C3E0(v84, type metadata accessor for Proto_Set.Element);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v45);
}

uint64_t sub_1BE1A3BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a1;
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v38 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v34 - v5;
  v7 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, v2, v3, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v39 = v2;
  v35 = v3;
  v15 = type metadata accessor for CRDTDictionaryElement(255, v2, v3, v14);
  v16 = sub_1BE1B2EE8();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v34 - v19;
  v21 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v40, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v20, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v41, v7);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v28 = v36;
        v27 = v37;
        v29 = v38;
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v13, v38);
        v25 = (*(uint64_t (**)(char *, uint64_t))(v35 + 88))(v28, v39);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v15);
        return v25 & 1;
      }
      v30 = *(void (**)(char *, uint64_t))(v21 + 8);
      v31 = v23;
      v32 = v15;
LABEL_13:
      v30(v31, v32);
      v25 = 1;
      return v25 & 1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v15);
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31 = v13;
LABEL_11:
    v32 = v7;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v41, v7);
  v24 = swift_getEnumCaseMultiPayload();
  if (!v24)
  {
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31 = v11;
    goto LABEL_11;
  }
  if (v24 == 1)
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v25 = 0;
  return v25 & 1;
}

uint64_t sub_1BE1A3EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t AssociatedTypeWitness;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;

  v102 = a1;
  v100 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  MEMORY[0x1E0C80A78](v5);
  v93 = (uint64_t)&v87 - v6;
  v96 = a2;
  v7 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v94 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v91 = (char *)&v87 - v9;
  v98 = *(_QWORD *)(v4 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v88 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v95 = (char *)&v87 - v12;
  v14 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, v4, v7, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v87 - v19;
  v97 = v4;
  v99 = v7;
  v22 = type metadata accessor for CRDTDictionaryElement(255, v4, v7, v21);
  v23 = sub_1BE1B2EE8();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v87 - v26;
  v28 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v87 - v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v102, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v27, 1, v22) != 1)
  {
    v34 = v94;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v27, v22);
    v35 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, v101, v14);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v37 = v28;
    v38 = v22;
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        v66 = v97;
        v67 = v98;
        v68 = v95;
        (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v95, v30, v97);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
        v69 = (uint64_t *)(v35 + *(int *)(v96 + 36));
        v70 = *v69;
        v71 = v69[1];
        v72 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 32);
        v73 = v37;
        v74 = v100;
        v72((uint64_t)v100, v68, v66);
        v76 = &v74[*(int *)(type metadata accessor for CRDTDictionaryElement(0, v66, v99, v75) + 36)];
        *(_QWORD *)v76 = v70;
        *((_QWORD *)v76 + 1) = v71;
        v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56);
        v77 = v74;
LABEL_15:
        v65((uint64_t)v77, 0, 1, v38);
        goto LABEL_16;
      }
      v40 = (uint64_t)v91;
      v39 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v91, v20, AssociatedTypeWitness);
      v41 = v93;
      v42 = v97;
      v43 = v99;
      CRDT.merging(delta:)(v40, v97, v99, v93);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v40, v39);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
      v44 = v98;
      v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v41, 1, v42);
      v46 = v100;
      if (v45 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v41, v90);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v46, 1, 1, v38);
      }
      v78 = v37;
      v79 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
      v80 = v88;
      v79(v88, v41, v42);
      v81 = v95;
      v79(v95, (uint64_t)v80, v42);
      v82 = (uint64_t *)(v35 + *(int *)(v96 + 36));
      v83 = *v82;
      v84 = v82[1];
      v79(v46, (uint64_t)v81, v42);
      v86 = &v46[*(int *)(type metadata accessor for CRDTDictionaryElement(0, v42, v43, v85) + 36)];
      *(_QWORD *)v86 = v83;
      *((_QWORD *)v86 + 1) = v84;
      v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v22);
      v56 = v37;
      v57 = v97;
      v58 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
      v59 = v95;
      v58(v95, v20, v97);
      v60 = (uint64_t *)(v35 + *(int *)(v96 + 36));
      v61 = *v60;
      v62 = v60[1];
      v46 = v100;
      v58(v100, v59, v57);
      v64 = &v46[*(int *)(type metadata accessor for CRDTDictionaryElement(0, v57, v99, v63) + 36)];
      *(_QWORD *)v64 = v61;
      *((_QWORD *)v64 + 1) = v62;
      v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56);
    }
    v77 = v46;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  v31 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v101, v14);
  v32 = swift_getEnumCaseMultiPayload();
  if (!v32)
  {
    v47 = v97;
    v48 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
    v49 = v95;
    v48(v95, v18, v97);
    v50 = (uint64_t *)(v31 + *(int *)(v96 + 36));
    v51 = *v50;
    v52 = v50[1];
    v53 = v100;
    v48(v100, v49, v47);
    v55 = &v53[*(int *)(type metadata accessor for CRDTDictionaryElement(0, v47, v99, v54) + 36)];
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v53, 0, 1, v22);
LABEL_16:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (v32 != 1)
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v100, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v100, 1, 1, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_1BE1A4478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BE1A2D74(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_1BE1A4494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1BE1A3534(a1, a2, a3);
}

uint64_t sub_1BE1A44AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  __n128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;

  v88 = a2;
  v79 = a1;
  v91 = a5;
  v9 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_1BE1B2EE8();
  v76 = *(_QWORD *)(v11 - 8);
  v77 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v74 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v78 = (char *)&v70 - v15;
  v80 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v81 = AssociatedTypeWitness;
  v16 = MEMORY[0x1E0C80A78](v14);
  v72 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v75 = (char *)&v70 - v18;
  v19 = sub_1BE1B2EE8();
  v85 = *(_QWORD *)(v19 - 8);
  v86 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v70 - v24;
  v87 = *(_QWORD *)(a4 - 8);
  v26 = MEMORY[0x1E0C80A78](v23);
  v73 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v70 - v28;
  v89 = v9;
  v90 = v8;
  v83 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, v9, v8, v30);
  v31 = MEMORY[0x1E0C80A78](v83);
  v33 = (char *)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v82 = (char *)&v70 - v34;
  v35 = *a3;
  v36 = a3[1];
  v37 = *(int *)(a4 + 36);
  v84 = v5;
  v38 = (uint64_t *)(v5 + v37);
  v40 = *v38;
  v39 = v38[1];
  swift_bridgeObjectRetain();
  v41 = swift_bridgeObjectRetain();
  if ((sub_1BDDB04C0(v41, v36) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    *(_QWORD *)&v93 = v40;
    *((_QWORD *)&v93 + 1) = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDEE9868(v36);
    sub_1BDEE9868(v35);
    v44 = v85;
    v43 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v25, v88, v86);
    v45 = v87;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v25, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v43);
      v46 = v89;
      v47 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v82, v84, v89);
      v48 = v90;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v29, v25, a4);
      v46 = v89;
      v48 = v90;
      v49 = v78;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v90 + 80))(v79, v29, v89, v90);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v29, a4);
      v50 = v80;
      v51 = v81;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v49, 1, v81) == 1)
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v49, v77);
        v47 = (uint64_t)v82;
      }
      else
      {
        v56 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
        v57 = v75;
        v56(v75, v49, v51);
        v47 = (uint64_t)v82;
        v56(v82, v57, v51);
      }
    }
    swift_storeEnumTagMultiPayload();
    v92 = v93;
    v58 = (__n128 *)&v92;
    goto LABEL_12;
  }
  v71 = v33;
  v42 = sub_1BDDB04C0(v40, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
    goto LABEL_4;
  v53 = v85;
  v52 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v22, v88, v86);
  v54 = v87;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v22, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v52);
    v46 = v89;
    v48 = v90;
LABEL_16:
    v67 = type metadata accessor for CRDTDictionaryElement.Delta(0, v46, v48, v55);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v91, 1, 1, v67);
  }
  v63 = v73;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v73, v22, a4);
  v46 = v89;
  v48 = v90;
  v64 = v74;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v90 + 80))(v79, v63, v89, v90);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v63, a4);
  v65 = v80;
  v66 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v64, 1, v81) == 1)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v77);
    goto LABEL_16;
  }
  v68 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
  v69 = v72;
  v68(v72, v64, v66);
  v47 = (uint64_t)v71;
  v68(v71, v69, v66);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&v93 = MEMORY[0x1E0DEE9E0];
  *((_QWORD *)&v93 + 1) = MEMORY[0x1E0DEE9E0];
  v58 = (__n128 *)&v93;
LABEL_12:
  v59 = v91;
  sub_1BE1A2CE4(v47, v58, v46, v48, v91);
  v61 = type metadata accessor for CRDTDictionaryElement.Delta(0, v46, v48, v60);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v59, 0, 1, v61);
}

uint64_t sub_1BE1A4A78()
{
  sub_1BE1B284C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDF1E398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BE1B347C();
  return 0;
}

uint64_t sub_1BE1A4B2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 36));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1BE1A4B5C())()
{
  return nullsub_1;
}

uint64_t sub_1BE1A4B7C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 48);
}

void sub_1BE1A4B88()
{
  swift_allocObject();
  sub_1BE1A4BBC();
}

uint64_t sub_1BE1A4BAC()
{
  uint64_t v0;

  return v0;
}

void sub_1BE1A4BBC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_1BE1B1F4C();
  v3 = type metadata accessor for CRDTDictionaryElement(255, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 112), v2);
  MEMORY[0x1C3B7DF54](&unk_1BE1C930C, v3);
  type metadata accessor for CRSetRef();
}

uint64_t sub_1BE1A4C28()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = sub_1BE0D5EE4();
  return v0;
}

uint64_t sub_1BE1A4C4C(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1BE1B1F4C();
  *(_QWORD *)(v2 + 16) = a1;
  return v2;
}

uint64_t sub_1BE1A4C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 88);
  v8 = type metadata accessor for CRDTDictionaryElement(255, v7, *(_QWORD *)(*v3 + 112), a2);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - v11;
  v13 = v3[2];
  swift_beginAccess();
  v14 = *(_QWORD *)(v13 + 40);
  v15 = *(_QWORD *)(v6 + 80);
  v16 = *(_QWORD *)(v6 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v14, v15, v8, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v12, 1, v8))
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v17 = *(_QWORD *)(v7 - 8);
    v18 = 1;
  }
  else
  {
    v17 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a3, v12, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, v18, 1, v7);
}

uint64_t sub_1BE1A4DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char v82[32];

  v80 = (char *)a2;
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v8 = v6[11];
  v73 = v6[14];
  v9 = type metadata accessor for CRDTDictionaryElement(255, v8, v73, a4);
  swift_getTupleTypeMetadata2();
  v10 = sub_1BE1B2EE8();
  v75 = *(_QWORD *)(v10 - 8);
  v76 = v10;
  MEMORY[0x1E0C80A78](v10);
  v74 = (uint64_t)&v65 - v11;
  v12 = type metadata accessor for Timestamp(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v68 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v7;
  v15 = *(_QWORD *)(v7 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v71 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v70 = (char *)&v65 - v19;
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  MEMORY[0x1E0C80A78](v18);
  v72 = (char *)&v65 - v20;
  v21 = sub_1BE1B2EE8();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v65 - v24;
  v26 = *(_QWORD *)(v8 - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v69 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v65 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v65 - v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, a1, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, v8) == 1)
  {
    v34 = *(void (**)(char *, uint64_t))(v22 + 8);
    v34(v25, v21);
    swift_retain();
    v35 = v74;
    v36 = (uint64_t)v80;
    sub_1BE0D0288((uint64_t)v80, v74);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v36, v79);
    v34((char *)a1, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v35, v76);
  }
  v75 = v15;
  v66 = v22;
  v67 = v21;
  v74 = a1;
  v76 = v26;
  v38 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v38(v33, v25, v8);
  v39 = *(_QWORD *)(v81 + 16);
  swift_beginAccess();
  v40 = v79;
  v41 = (uint64_t)v33;
  if (*(_QWORD *)(*(_QWORD *)(v39 + 40) + 16)
    && (v42 = v6[13],
        swift_bridgeObjectRetain(),
        sub_1BDE0D1D0((uint64_t)v80, v40, v42),
        v44 = v43,
        swift_bridgeObjectRelease(),
        (v44 & 1) != 0))
  {
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
    v46 = v70;
    v45(v70, (uint64_t)v80, v40);
    v47 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v69, v41, v8);
    swift_beginAccess();
    v48 = v71;
    v45(v71, (uint64_t)v46, v40);
    swift_retain();
    v49 = v78;
    sub_1BE1B2654();
    v50 = (void (*)(char *, _QWORD))sub_1BE1B2660();
    v73 = v41;
    v52 = v51;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v51, 1, v49);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v53 = v76;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 40))(v52, v47, v8);
    v50(v82, 0);
    v54 = *(void (**)(char *, uint64_t))(v75 + 8);
    v54(v48, v40);
    v54(v46, v40);
    swift_endAccess();
    swift_release();
    swift_retain();
    v55 = v68;
    sub_1BE0CFF58(v68);
    swift_beginAccess();
    type metadata accessor for Replica();
    sub_1BDDCB81C(v55);
    sub_1BDD9C3E0(v55, type metadata accessor for Timestamp);
    swift_endAccess();
    swift_release();
    v54(v80, v40);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v74, v67);
    v56 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    v57 = v73;
  }
  else
  {
    v58 = v33;
    v59 = v76;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v31, v33, v8);
    v60 = (uint64_t)v72;
    v38(v72, v31, v8);
    v62 = (_QWORD *)(v60 + *(int *)(type metadata accessor for CRDTDictionaryElement(0, v8, v73, v61) + 36));
    v63 = MEMORY[0x1E0DEE9E0];
    *v62 = MEMORY[0x1E0DEE9E0];
    v62[1] = v63;
    swift_retain();
    v64 = (uint64_t)v80;
    sub_1BE0D0018((uint64_t)v80, v60);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v64, v40);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v74, v67);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v60, v78);
    v56 = *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8);
    v57 = (uint64_t)v58;
  }
  return v56(v57, v8);
}

void (*sub_1BE1A53E8(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;

  v5 = malloc(0x48uLL);
  *a1 = v5;
  *v5 = v2;
  v6 = *v2;
  v7 = sub_1BE1B2EE8();
  v5[1] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[2] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[3] = malloc(v9);
  v10 = malloc(v9);
  v5[4] = v10;
  v11 = *(_QWORD *)(v6 + 80);
  v5[5] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[6] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[7] = malloc(v13);
  v5[8] = malloc(v13);
  (*(void (**)(void))(v12 + 16))();
  sub_1BE1A4C94(a2, v14, (uint64_t)v10);
  return sub_1BE1A54C4;
}

void sub_1BE1A54C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 56);
  v6 = *(void **)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    v7 = v4[5];
    v8 = v4[6];
    v10 = (void *)v4[3];
    v9 = (void *)v4[4];
    v11 = v4[1];
    v12 = v4[2];
    (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v10, v9, v11);
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v5, v6, v7);
    sub_1BE1A4DF8((uint64_t)v10, (uint64_t)v5, v13, v14);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    v10 = (void *)v4[3];
    v9 = (void *)v4[4];
    sub_1BE1A4DF8((uint64_t)v9, (uint64_t)v6, a3, a4);
  }
  free(v6);
  free(v5);
  free(v9);
  free(v10);
  free(v4);
}

uint64_t sub_1BE1A5598@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;

  v23[1] = a3;
  v24 = a2;
  v25 = a1;
  v26 = a5;
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 88);
  v8 = type metadata accessor for CRDTDictionaryElement(255, v7, *(_QWORD *)(*v5 + 112), a4);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v23 - v12;
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v5[2];
  swift_beginAccess();
  v18 = *(_QWORD *)(v17 + 40);
  v19 = *(_QWORD *)(v6 + 80);
  v20 = *(_QWORD *)(v6 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](v25, v18, v19, v8, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v13, 1, v8))
  {
    v21 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return v24(v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v13, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v26, v16, v7);
  }
}

uint64_t sub_1BE1A5724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 88);
  v8 = type metadata accessor for CRDTDictionaryElement(255, v6, *(_QWORD *)(*(_QWORD *)v3 + 112), a2);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v17 - v12;
  swift_retain();
  sub_1BE0D0288(a1, (uint64_t)v13);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
  }
  else
  {
    v15 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    v16 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a3, v15, v6);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v15, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a3, 0, 1, v6);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v13, v7);
  }
}

void sub_1BE1A58AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  sub_1BE0CD5C4(a1, v3, (uint64_t)&v4);
}

uint64_t sub_1BE1A5924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + qword_1ED6F8A90;
  v2 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void CRDTDictionary.copy(renamingReferences:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[32];

  v4 = v3;
  v23[5] = a1;
  v23[2] = a3;
  v6 = sub_1BE1B2EE8();
  v23[14] = *(_QWORD *)(v6 - 8);
  v23[15] = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v23[13] = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v23[12] = (char *)v23 - v10;
  v23[19] = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v23[4] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v23[11] = (char *)v23 - v14;
  MEMORY[0x1E0C80A78](v13);
  v23[10] = (char *)v23 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  v23[6] = (char *)v23 - v19;
  v20 = sub_1BE1B2EE8();
  v21 = MEMORY[0x1E0C80A78](v20);
  v23[3] = (char *)v23 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23[1] = *v4;
  v23[17] = *(_QWORD *)(a2 + 40);
  CRDTDictionary.init()();
}

void sub_1BE1A5BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v9 - 280) = v5;
  *(_QWORD *)(v9 - 288) = v7;
  *(_QWORD *)(v9 - 296) = v8;
  *(_QWORD *)(v9 - 192) = v2;
  *(_QWORD *)(v9 - 184) = v0;
  v10 = *(_QWORD *)(v9 - 312);
  *(_QWORD *)(v9 - 224) = v1;
  if (v10)
  {
    *(_QWORD *)(v9 - 176) = *(_QWORD *)(v9 - 344);
    CRDTDictionary.makeIterator()((_QWORD *)(v9 - 136));
    v11 = *(_QWORD *)(v9 - 184);
    *(_QWORD *)(v9 - 176) = v6;
    *(_QWORD *)(v9 - 168) = v11;
    v12 = *(_QWORD *)(v9 - 216);
    *(_QWORD *)(v9 - 160) = v8;
    *(_QWORD *)(v9 - 152) = v12;
    *(_QWORD *)(v9 - 144) = v2;
    type metadata accessor for CRDTDictionary.Iterator();
  }
  *(_QWORD *)(v9 - 208) = v4;
  *(_QWORD *)(v9 - 176) = *(_QWORD *)(v9 - 344);
  CRDTDictionary.makeIterator()((_QWORD *)(v9 - 136));
  *(_QWORD *)(v9 - 320) = v3;
  v13 = *(_QWORD *)(v9 - 184);
  *(_QWORD *)(v9 - 176) = v6;
  *(_QWORD *)(v9 - 168) = v13;
  v14 = *(_QWORD *)(v9 - 216);
  *(_QWORD *)(v9 - 160) = v8;
  *(_QWORD *)(v9 - 152) = v14;
  *(_QWORD *)(v9 - 144) = v2;
  type metadata accessor for CRDTDictionary.Iterator();
}

uint64_t sub_1BE1A5E0C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, _QWORD);
  uint64_t v16;
  void (*v17)(void);
  void (*v18)(uint64_t, uint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v9 = *(_QWORD *)(v8 - 328);
  CRDTDictionary.Iterator.next()(a1, a4, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v5) != 1)
  {
    v10 = *(int *)(v5 + 48);
    v11 = v4 + v10;
    v12 = v9 + v10;
    v13 = *(_QWORD *)(v8 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v4, v9, v6);
    v14 = *(_QWORD *)(*(_QWORD *)(v8 - 184) - 8);
    v15 = *(void (**)(uint64_t, uint64_t, _QWORD))(v14 + 32);
    v15(v11, v12, *(_QWORD *)(v8 - 184));
    v16 = *(_QWORD *)(v8 - 208) + *(int *)(v5 + 48);
    *(_QWORD *)(v8 - 312) = v16;
    v17 = *(void (**)(void))(v13 + 16);
    v17();
    v18 = *(void (**)(uint64_t, uint64_t, _QWORD))(v14 + 16);
    v18(v16, v11, *(_QWORD *)(v8 - 184));
    v19 = *(_QWORD *)(v8 - 320) + *(int *)(v5 + 48);
    ((void (*)(_QWORD, uint64_t, uint64_t))v17)(*(_QWORD *)(v8 - 320), v4, v6);
    v18(v19, v11, *(_QWORD *)(v8 - 184));
    v20 = *(_QWORD *)(v8 - 256);
    v15(v20, v19, *(_QWORD *)(v8 - 184));
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v14 + 56))(v20, 0, 1, *(_QWORD *)(v8 - 184));
    sub_1BE1A6724();
  }
  result = sub_1BDE27FD0();
  **(_QWORD **)(v8 - 336) = *(_QWORD *)(v8 - 96);
  return result;
}

void sub_1BE1A5F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  v7 = *(_QWORD *)(v6 - 272);
  v5(v7, *(_QWORD *)(v6 - 208), v4);
  v8 = *(_QWORD *)(v6 - 264);
  v5(v8, v7, v4);
  v9 = *(_QWORD *)(v6 - 288);
  v10 = *(_QWORD *)(v6 - 248);
  sub_1BE1A4C94(v7, v11, v10);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 240) + 40))(v10, v0, *(_QWORD *)(v6 - 232));
  v12 = v8;
  v13 = *(_QWORD *)(v6 - 280);
  sub_1BE1A4DF8(v10, v12, v14, v15);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 200) + 8);
  v16(v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v13);
  v16(v2, v4);
  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v6 - 312), *(_QWORD *)(v6 - 184));
  v16(*(_QWORD *)(v6 - 208), v4);
  JUMPOUT(0x1BE1A5DECLL);
}

void CRDTDictionary.init()()
{
  type metadata accessor for CRDTDictionaryRef();
}

void sub_1BE1A6058()
{
  swift_allocObject();
  sub_1BE1A4BBC();
}

void sub_1BE1A606C()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

uint64_t CRDTDictionary.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  v5 = -1;
  v6 = *(_QWORD *)(v4 + 64);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  if (-v7 < 64)
    v5 = ~(-1 << -(char)v7);
  *a1 = v4;
  a1[1] = v4 + 64;
  a1[2] = ~v7;
  a1[3] = 0;
  a1[4] = v5 & v6;
  return swift_bridgeObjectRetain();
}

uint64_t CRDTDictionary.Iterator.next()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  int64_t v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(_QWORD, _QWORD, _QWORD);
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v5 = a1[6];
  v87 = a1[3];
  v88 = a3;
  v6 = type metadata accessor for CRDTDictionaryElement(0, v87, v5, a2);
  v90 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v74 - v8;
  v10 = a1[2];
  v91 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = sub_1BE1B2EE8();
  v16 = MEMORY[0x1E0C80A78](v15);
  v84 = (char *)&v74 - v17;
  v18 = TupleTypeMetadata2;
  v19 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v21 = MEMORY[0x1E0C80A78](v20);
  result = MEMORY[0x1E0C80A78](v21);
  v77 = (char *)&v74 - v23;
  v78 = v24;
  v25 = *v3;
  v26 = (char *)v3[1];
  v28 = v3[2];
  v27 = v3[3];
  v29 = v3[4];
  v75 = result;
  v76 = v30;
  v74 = v31;
  v85 = v3;
  v86 = v10;
  if (v29)
  {
    v80 = v28;
    v81 = v26;
    v82 = v19;
    v83 = (void (*)(_QWORD, _QWORD, _QWORD))v27;
    v79 = (v29 - 1) & v29;
    v32 = __clz(__rbit64(v29)) | (v27 << 6);
LABEL_3:
    v33 = v91;
    (*(void (**)(char *, unint64_t, uint64_t))(v91 + 16))(v12, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v91 + 72) * v32, v10);
    v34 = v10;
    v35 = v90;
    v36 = *(_QWORD *)(v25 + 56) + *(_QWORD *)(v90 + 72) * v32;
    v37 = v9;
    v38 = v25;
    v39 = v9;
    v40 = v89;
    (*(void (**)(char *, unint64_t, uint64_t))(v90 + 16))(v37, v36, v89);
    v41 = v84;
    v42 = &v84[*(int *)(v18 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v84, v12, v34);
    v43 = v39;
    v25 = v38;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v42, v43, v40);
    v44 = 0;
    v26 = v81;
    v19 = v82;
    v45 = v79;
    v28 = v80;
    goto LABEL_4;
  }
  v70 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
    return result;
  }
  v71 = (unint64_t)(v28 + 64) >> 6;
  if (v70 >= v71)
  {
    v83 = (void (*)(_QWORD, _QWORD, _QWORD))v27;
    v45 = 0;
    v44 = 1;
    v41 = v84;
    goto LABEL_4;
  }
  v72 = *(_QWORD *)&v26[8 * v70];
  if (v72)
  {
LABEL_11:
    v80 = v28;
    v81 = v26;
    v82 = v19;
    v83 = (void (*)(_QWORD, _QWORD, _QWORD))v70;
    v79 = (v72 - 1) & v72;
    v32 = __clz(__rbit64(v72)) + (v70 << 6);
    goto LABEL_3;
  }
  if (v27 + 2 >= v71)
    goto LABEL_22;
  v72 = *(_QWORD *)&v26[8 * v27 + 16];
  if (v72)
  {
    v70 = v27 + 2;
    goto LABEL_11;
  }
  v70 = v27 + 3;
  if (v27 + 3 < v71)
  {
    v72 = *(_QWORD *)&v26[8 * v70];
    if (v72)
      goto LABEL_11;
    v70 = v71 - 1;
    v73 = v27 + 4;
    while (v71 != v73)
    {
      v72 = *(_QWORD *)&v26[8 * v73++];
      if (v72)
      {
        v70 = v73 - 1;
        goto LABEL_11;
      }
    }
LABEL_22:
    v45 = 0;
    v44 = 1;
    v83 = (void (*)(_QWORD, _QWORD, _QWORD))v70;
    v41 = v84;
    goto LABEL_4;
  }
  v45 = 0;
  v44 = 1;
  v83 = (void (*)(_QWORD, _QWORD, _QWORD))(v27 + 2);
  v41 = v84;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v41, v44, 1, v18);
  v46 = v85;
  *v85 = v25;
  v46[1] = v26;
  v47 = v83;
  v46[2] = v28;
  v46[3] = v47;
  v46[4] = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v41, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v41, v75);
    v48 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v88, 1, 1, v48);
  }
  else
  {
    v49 = v18;
    v50 = *(int *)(v18 + 48);
    v51 = v77;
    v52 = &v77[v50];
    v81 = &v77[v50];
    v53 = &v41[v50];
    v54 = v91;
    v55 = *(void (**)(char *))(v91 + 32);
    v56 = v86;
    v55(v77);
    v83 = *(void (**)(_QWORD, _QWORD, _QWORD))(v90 + 32);
    v57 = v53;
    v58 = v89;
    v83(v52, v57, v89);
    v59 = v87;
    v60 = swift_getTupleTypeMetadata2();
    v61 = v88;
    v82 = v88 + *(int *)(v60 + 48);
    v62 = v76;
    v84 = (char *)(v76 + *(int *)(v49 + 48));
    v63 = v84;
    v85 = (_QWORD *)v60;
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v76, v51, v56);
    v64 = v90;
    v65 = v63;
    v66 = v81;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v65, v81, v58);
    ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v61, v62, v56);
    v67 = v78;
    v68 = v78 + *(int *)(v49 + 48);
    ((void (*)(uint64_t, char *, uint64_t))v55)(v78, v51, v56);
    v83(v68, v66, v58);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v82, v68, v59);
    v69 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v69(v68, v58);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(v85 - 1) + 56))(v61, 0, 1);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v67, v56);
    return ((uint64_t (*)(char *, uint64_t))v69)(v84, v58);
  }
}

void CRDTDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = malloc(*(_QWORD *)(v7 + 64));
  sub_1BE1A6724();
}

void (*sub_1BE1A667C())(_QWORD *a1)
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v0, v1);
  v2[7] = sub_1BE1A53E8(v2, v3);
  return sub_1BE1A66C4;
}

void sub_1BE1A66C4(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void type metadata accessor for CRDTDictionary.Iterator()
{
  JUMPOUT(0x1C3B7DED0);
}

void sub_1BE1A6724()
{
  type metadata accessor for CRDTDictionaryRef();
}

uint64_t sub_1BE1A6758()
{
  uint64_t result;

  result = sub_1BE1B3470();
  if ((result & 1) == 0)
    sub_1BE1AE094();
  return result;
}

void type metadata accessor for CRDTDictionaryRef()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t CRDTDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1BE1A4C94(a1, a2, a3);
}

void sub_1BE1A67C0()
{
  type metadata accessor for CRDTDictionary();
}

uint64_t sub_1BE1A6804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return CRDTDictionary.subscript.getter(v4, a4, v5);
}

void sub_1BE1A6828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t);
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a4 + a3 - 40);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8 = *(_OWORD *)(v7 - 32);
  v11 = *(_OWORD *)(v7 - 16);
  v12 = v8;
  v6((char *)&v11 - v9, v10, v4);
  v13 = v4;
  v14 = v12;
  v15 = v11;
  type metadata accessor for CRDTDictionary();
}

void sub_1BE1A68B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  CRDTDictionary.subscript.modify((_QWORD *)(v2 - 88), v1, a1);
}

uint64_t sub_1BE1A68C4(void (*a1)(uint64_t, _QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v9 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a2, v3, v9);
  a1(v6 - 88, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v2);
}

void CRDTDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[0] = a2;
  v12[3] = a1;
  v5 = sub_1BE1B2EE8();
  v12[1] = *(_QWORD *)(v5 - 8);
  v12[2] = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v10 = MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v12 - v11, a2, v7);
  sub_1BE1A6724();
}

uint64_t sub_1BE1A6A14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v1(v6, v4, v2);
  v1(v5, v6, v2);
  sub_1BE1A4C94(v6, v8, v3);
  v9 = *(_QWORD *)(v7 - 104);
  v10 = *(_QWORD *)(v7 - 96);
  v11 = *(_QWORD *)(v7 - 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v3, v11, v10);
  sub_1BE1A4DF8(v3, v5, v12, v13);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  v14(v6, v2);
  v14(*(_QWORD *)(v7 - 112), v2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  return ((uint64_t (*)(uint64_t, uint64_t))v14)(v4, v2);
}

uint64_t CRDTDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v10 + 16))(v12);
  v16 = v9;
  v17 = *(_OWORD *)(a4 + 24);
  v18 = *(_OWORD *)(a4 + 40);
  v19 = a2;
  v20 = a3;
  sub_1BE1A5598((uint64_t)v12, (uint64_t (*)(uint64_t))sub_1BE1AB3DC, (uint64_t)v15, v13, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

void CRDTDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1BE1AE1BC(a1, a2, a5);
}

uint64_t sub_1BE1A6BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v2);
}

void (*CRDTDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  *v11 = a5;
  v11[1] = v5;
  v12 = *(_QWORD *)(a5 + 24);
  v11[2] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[3] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[4] = malloc(v14);
  v15 = malloc(v14);
  v16 = *(_QWORD *)(a5 + 16);
  v11[5] = v15;
  v11[6] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v11[7] = v17;
  v11[8] = malloc(*(_QWORD *)(v17 + 64));
  (*(void (**)(void))(v17 + 16))();
  CRDTDictionary.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
  return sub_1BE1A6CDC;
}

void sub_1BE1A6CDC(uint64_t **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*a1)[8];
  v3 = (*a1)[4];
  v4 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[3] + 16))((*a1)[4], (*a1)[5], (*a1)[2]);
    sub_1BE1AE1BC(v3, v2, v4);
  }
  sub_1BE1AE1BC((*a1)[5], v2, v4);
}

void sub_1BE1A6D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  JUMPOUT(0x1BE1A6D80);
}

void CRDTDictionary.removeValue(forKey:)()
{
  sub_1BE1A6724();
}

uint64_t sub_1BE1A6DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1BE1A5724(v4, a4, v5);
}

uint64_t *CRDTDictionary.merge(_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *result;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) != *(_QWORD *)(v12 + 16))
  {
    v4 = MEMORY[0x1C3B7DF54](&unk_1BE1C8E2C);
    v5 = sub_1BDD9A6B0((uint64_t)&v12, a2, v4);
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    swift_beginAccess();
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(_QWORD *)(v6 + 32);
    swift_beginAccess();
    v9 = *(_QWORD *)(v5 + 24);
    v11 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    sub_1BDEEDAB4(v10, &v11, v8);
    sub_1BDEEDAB4(v9, &v11, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11 == 1)
      sub_1BE1AE130();
    if (v11 == 3)
      sub_1BE1A6724();
    return (uint64_t *)swift_release();
  }
  return result;
}

uint64_t CRDTDictionary.visitReferences(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t TupleTypeMetadata2;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v57 = a1;
  v6 = a2[3];
  v55 = a2[6];
  v56 = v6;
  v7 = type metadata accessor for CRDTDictionaryElement(0, v6, v55, a4);
  v64 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v54 = (char *)&v46 - v9;
  v58 = a2;
  v63 = *(_QWORD *)(a2[2] - 8);
  MEMORY[0x1E0C80A78](v8);
  v53 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v11;
  v65 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_1BE1B2EE8();
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v46 - v17;
  v19 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  swift_beginAccess();
  v20 = *(_QWORD *)(v19 + 40);
  v21 = *(_QWORD *)(v20 + 64);
  v48 = v20 + 64;
  v22 = 1 << *(_BYTE *)(v20 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v49 = (unint64_t)(v22 + 63) >> 6;
  v47 = v49 - 1;
  v50 = v20;
  result = swift_bridgeObjectRetain();
  v26 = 0;
  v51 = v18;
  v52 = v16;
  v27 = v63;
  v28 = v65;
  v29 = v57;
  if (!v24)
    goto LABEL_6;
LABEL_4:
  v30 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  v31 = v30 | (v26 << 6);
  v32 = TupleTypeMetadata2;
  while (2)
  {
    v33 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v63 + 16))(v16, *(_QWORD *)(v50 + 48) + *(_QWORD *)(v63 + 72) * v31, v62);
    (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))(&v16[*(int *)(v32 + 48)], *(_QWORD *)(v33 + 56) + *(_QWORD *)(v64 + 72) * v31, v65);
    for (i = 0; ; i = 1)
    {
      while (1)
      {
LABEL_18:
        v38 = *(_QWORD *)(v32 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v16, i, 1, v32);
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v18, v16, v60);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v18, 1, v32) == 1)
          return swift_release();
        v39 = &v18[*(int *)(v32 + 48)];
        v40 = v53;
        v41 = v62;
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v53, v18, v62);
        v42 = v64;
        v43 = v54;
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v54, v39, v28);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58[4] + 8) + 40))(v29, v41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 + 16) + 40))(v29, v56);
        v44 = *(void (**)(char *, uint64_t))(v42 + 8);
        v18 = v51;
        v44(v43, v28);
        v45 = v40;
        v16 = v52;
        result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v45, v41);
        if (v24)
          goto LABEL_4;
LABEL_6:
        v35 = v26 + 1;
        v32 = TupleTypeMetadata2;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        if (v35 < v49)
          break;
LABEL_17:
        v24 = 0;
        i = 1;
      }
      v36 = *(_QWORD *)(v48 + 8 * v35);
      if (v36)
        goto LABEL_9;
      v26 += 2;
      if (v35 + 1 < v49)
        break;
      v24 = 0;
      v26 = v35;
    }
    v36 = *(_QWORD *)(v48 + 8 * v26);
    if (v36)
    {
      ++v35;
LABEL_9:
      v24 = (v36 - 1) & v36;
      v31 = __clz(__rbit64(v36)) + (v35 << 6);
      v26 = v35;
      continue;
    }
    break;
  }
  v37 = v35 + 2;
  if (v35 + 2 >= v49)
    goto LABEL_17;
  v36 = *(_QWORD *)(v48 + 8 * v37);
  if (v36)
  {
    v35 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v49)
    {
      v24 = 0;
      i = 1;
      v26 = v47;
      goto LABEL_18;
    }
    v36 = *(_QWORD *)(v48 + 8 * v35);
    ++v37;
    if (v36)
      goto LABEL_9;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CRDTDictionary.needToFinalizeTimestamps()()
{
  char v0;

  swift_retain();
  v0 = sub_1BDD8C52C();
  swift_release();
  return v0 & 1;
}

uint64_t CRDTDictionary.finalizeTimestamps(_:)()
{
  char v0;
  uint64_t result;

  swift_retain();
  v0 = sub_1BDD8C52C();
  result = swift_release();
  if ((v0 & 1) != 0)
    sub_1BE1A6724();
  return result;
}

uint64_t CRDTDictionary.version.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static CRDTDictionary.== infix(_:_:)()
{
  _QWORD *v0;
  char v1;

  swift_retain();
  v0 = (_QWORD *)swift_retain();
  v1 = sub_1BE0CF568(v0);
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t CRDTDictionary.actionUndoingDifference(from:)@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t TupleTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  void (*v79)(char *, uint64_t);
  uint64_t *v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  int64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v94 = a3;
  v95 = 0;
  v6 = a2[6];
  v7 = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v102 = sub_1BE1B2EE8();
  v101 = *(_QWORD *)(v102 - 8);
  v9 = MEMORY[0x1E0C80A78](v102);
  v100 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v108 = (char *)&v91 - v12;
  v112 = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v99 = (char *)&v91 - v14;
  v113 = v7;
  v111 = v6;
  v16 = type metadata accessor for CRDTDictionaryElement(255, v7, v6, v15);
  v107 = sub_1BE1B2EE8();
  v106 = *(_QWORD *)(v107 - 8);
  v17 = MEMORY[0x1E0C80A78](v107);
  v19 = (char *)&v91 - v18;
  v20 = *(_QWORD *)(v16 - 8);
  v21 = MEMORY[0x1E0C80A78](v17);
  v105 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v123 = (uint64_t)a2;
  v124 = (char *)&v91 - v24;
  v25 = a2[2];
  v125 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v23);
  v97 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v110 = (char *)&v91 - v28;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v30 = sub_1BE1B2EE8();
  v118 = *(_QWORD *)(v30 - 8);
  v119 = v30;
  v31 = MEMORY[0x1E0C80A78](v30);
  v120 = (char *)&v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v117 = (char *)&v91 - v33;
  v34 = *a1;
  v35 = *v3;
  v36 = *(_QWORD **)(*v3 + 16);
  if (v36[6] == *(_QWORD *)((*a1)[2] + 48))
  {
    v96 = (_QWORD *)(*a1)[2];
    swift_retain();
    swift_retain();
  }
  else
  {
    v121 = v35;
    v122 = v34;
    if (qword_1ED6F4510 != -1)
LABEL_46:
      swift_once();
    swift_retain();
    v37 = v95;
    sub_1BE1B2E40();
    v95 = v37;
    swift_release();
    v38 = v126;
    v39 = BYTE8(v126);
    LODWORD(v116) = BYTE8(v126);
    v40 = v127;
    swift_retain();
    v96 = sub_1BE0CF4FC(v38, v39, v40);
    swift_release();
    swift_retain();
    v36 = sub_1BE0CF4FC(v38, (char)v116, v40);
    swift_release();
    swift_bridgeObjectRelease();
  }
  v41 = v123;
  v42 = *(_QWORD *)(v123 + 40);
  v131 = sub_1BE1B2594();
  v43 = v113;
  v130 = sub_1BE1B257C();
  v44 = sub_1BE1B257C();
  v122 = &v91;
  v128 = 0;
  v129 = v44;
  v126 = 0u;
  v127 = 0u;
  v45 = MEMORY[0x1E0C80A78](v44);
  *(&v91 - 6) = v25;
  *(&v91 - 5) = v43;
  *(&v91 - 4) = *(_QWORD *)(v41 + 32);
  *(&v91 - 3) = v42;
  v121 = v42;
  *(&v91 - 2) = v111;
  *(&v91 - 1) = (uint64_t)&v131;
  MEMORY[0x1E0C80A78](v45);
  *(&v91 - 2) = (uint64_t)&v130;
  v46 = (uint64_t)v96;
  *(&v91 - 1) = (uint64_t)v96;
  sub_1BE0D09E8(v46, (uint64_t)&v126, (void (*)(char *))sub_1BE1AE41C, v47, (void (*)(char *))sub_1BE1AE420, (uint64_t)(&v91 - 4));
  sub_1BDD86E30((uint64_t)&v126, &qword_1ED6EF878);
  swift_beginAccess();
  v93 = v36;
  v48 = v36[5];
  v49 = *(_QWORD *)(v48 + 64);
  v103 = v48 + 64;
  v50 = 1 << *(_BYTE *)(v48 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & v49;
  v114 = v48;
  swift_bridgeObjectRetain();
  v116 = (uint64_t *)(v46 + 40);
  swift_beginAccess();
  v53 = 0;
  v109 = (unint64_t)(v50 + 63) >> 6;
  v92 = (uint64_t *)(v109 - 1);
  v54 = v110;
  v98 = v19;
  v104 = v20;
  v115 = TupleTypeMetadata2;
  while (1)
  {
    v55 = v120;
    if (v52)
    {
      v122 = v53;
      v123 = (v52 - 1) & v52;
      v56 = __clz(__rbit64(v52)) | ((_QWORD)v53 << 6);
LABEL_12:
      v57 = v114;
      (*(void (**)(char *, unint64_t, uint64_t))(v125 + 16))(v120, *(_QWORD *)(v114 + 48) + *(_QWORD *)(v125 + 72) * v56, v25);
      (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(&v55[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v57 + 56) + *(_QWORD *)(v20 + 72) * v56, v16);
      v58 = 0;
      goto LABEL_20;
    }
    v59 = (int64_t)v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v59 >= v109)
    {
      v122 = v53;
    }
    else
    {
      v60 = *(_QWORD *)(v103 + 8 * v59);
      if (v60)
        goto LABEL_16;
      v80 = (uint64_t *)((char *)v53 + 2);
      if ((uint64_t)v53 + 2 >= v109)
      {
        v122 = (uint64_t *)((char *)v53 + 1);
        v123 = 0;
        goto LABEL_19;
      }
      v60 = *(_QWORD *)(v103 + 8 * (_QWORD)v80);
      if (v60)
      {
        v59 = (int64_t)v53 + 2;
LABEL_16:
        v122 = (uint64_t *)v59;
        v123 = (v60 - 1) & v60;
        v56 = __clz(__rbit64(v60)) + (v59 << 6);
        goto LABEL_12;
      }
      v81 = (int64_t)v53 + 3;
      if (v81 < v109)
      {
        v60 = *(_QWORD *)(v103 + 8 * v81);
        if (!v60)
        {
          while (1)
          {
            v59 = v81 + 1;
            if (__OFADD__(v81, 1))
              goto LABEL_45;
            if (v59 >= v109)
            {
              v123 = 0;
              v58 = 1;
              v122 = v92;
              goto LABEL_20;
            }
            v60 = *(_QWORD *)(v103 + 8 * v59);
            ++v81;
            if (v60)
              goto LABEL_16;
          }
        }
        v59 = v81;
        goto LABEL_16;
      }
      v122 = v80;
    }
    v123 = 0;
LABEL_19:
    v58 = 1;
LABEL_20:
    v61 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v55, v58, 1, TupleTypeMetadata2);
    v62 = v117;
    (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v117, v55, v119);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v62, 1, TupleTypeMetadata2) == 1)
      break;
    v63 = v20;
    v64 = v13;
    v65 = v62;
    v66 = &v62[*(int *)(TupleTypeMetadata2 + 48)];
    v67 = v125;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v54, v65, v25);
    v68 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
    v68(v124, v66, v16);
    v69 = *v116;
    swift_bridgeObjectRetain();
    MEMORY[0x1C3B7C58C](v54, v69, v25, v16, v121);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v19, 1, v16) == 1)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v124, v16);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v54, v25);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v19, v107);
      v13 = v64;
      v20 = v63;
    }
    else
    {
      v70 = v124;
      v71 = v105;
      v68(v105, v19, v16);
      v72 = v108;
      (*(void (**)(char *, uint64_t))(v111 + 56))(v71, v113);
      v13 = v64;
      v73 = v112;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v72, 1, v112) == 1)
      {
        v20 = v104;
        v74 = *(void (**)(char *, uint64_t))(v104 + 8);
        v74(v71, v16);
        v74(v70, v16);
        (*(void (**)(char *, uint64_t))(v125 + 8))(v54, v25);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v72, v102);
      }
      else
      {
        v75 = v25;
        v76 = v99;
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v99, v72, v73);
        (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v97, v110, v75);
        v77 = v100;
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v100, v76, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v77, 0, 1, v73);
        sub_1BE1B2684();
        v54 = v110;
        sub_1BE1B26B4();
        v78 = v76;
        v25 = v75;
        v19 = v98;
        v13 = v64;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v78, v73);
        v20 = v104;
        v79 = *(void (**)(char *, uint64_t))(v104 + 8);
        v79(v71, v16);
        v79(v70, v16);
        (*(void (**)(char *, uint64_t))(v125 + 8))(v54, v25);
      }
    }
    TupleTypeMetadata2 = v115;
    v53 = v122;
    v52 = v123;
  }
  swift_release();
  v82 = v131;
  swift_bridgeObjectRetain();
  v83 = sub_1BE1B2BAC();
  swift_bridgeObjectRelease();
  if (v83 > 0 || (swift_bridgeObjectRetain(), v84 = sub_1BE1B260C(), swift_bridgeObjectRelease(), v84 > 0))
  {
    swift_release();
    result = swift_release();
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v89 = sub_1BE1B260C();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if (v89 > 0)
  {
LABEL_41:
    v87 = v129;
    v86 = v130;
    v88 = v94;
    *v94 = v82;
    v88[1] = v86;
    v88[2] = v87;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v90 = v94;
    *v94 = 0;
    v90[1] = 0;
    v90[2] = 0;
  }
  return result;
}

uint64_t CRDTDictionary.apply(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _QWORD v33[8];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v3 = *(_QWORD *)(a2 + 24);
  v35 = *(_QWORD *)(a2 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = sub_1BE1B2EE8();
  v33[7] = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v33[6] = (char *)v33 - v5;
  v33[2] = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v36 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v42 = (char *)v33 - v10;
  MEMORY[0x1E0C80A78](v9);
  v41 = (char *)v33 - v11;
  v49 = v12;
  v13 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v13);
  v40 = (char *)v33 - v14;
  v15 = swift_getTupleTypeMetadata2();
  v51 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v44 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v52 = (char *)v33 - v19;
  MEMORY[0x1E0C80A78](v18);
  v39 = (char *)v33 - v20;
  v50 = v21;
  v22 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v22);
  v43 = v3;
  v23 = sub_1BE1B2EE8();
  v47 = *(_QWORD *)(v23 - 8);
  v48 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v38 = (char *)v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v46 = (char *)v33 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v37 = (char *)v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v45 = (char *)v33 - v30;
  v31 = sub_1BE1B2EE8();
  result = MEMORY[0x1E0C80A78](v31);
  if (*a1)
  {
    v33[5] = a1[1];
    v33[3] = a1[2];
    sub_1BE1A6724();
  }
  return result;
}

uint64_t CRDTDictionary.hasDelta(from:)()
{
  _QWORD *v0;
  char v1;

  swift_retain();
  v0 = (_QWORD *)swift_retain();
  v1 = sub_1BDDB02F0(v0);
  swift_release();
  swift_release();
  return v1 & 1;
}

void CRDTDictionary.delta(_:from:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_retain();
  swift_retain();
  CRDTDictionary.finalizeTimestamps(_:)();
  CRDTDictionary.finalizeTimestamps(_:)();
  swift_retain();
  swift_retain();
  sub_1BE1A58AC(a1, v3);
}

uint64_t sub_1BE1A91F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = sub_1BE1B260C();
  swift_bridgeObjectRelease();
  if (v4 >= 1
    || (type metadata accessor for CRDTDictionaryElement.Delta(0, v2, v1, v5),
        swift_bridgeObjectRetain(),
        v6 = sub_1BE1B260C(),
        swift_bridgeObjectRelease(),
        v6 >= 1))
  {
    swift_release();
    result = swift_release();
    v9 = v16;
    v8 = v17;
    v11 = v14;
    v10 = v15;
LABEL_4:
    *v18 = v8;
    v18[1] = v9;
    v18[2] = v10;
    v18[3] = v11;
    v18[4] = v0;
    v18[5] = v3;
    return result;
  }
  v8 = v17;
  swift_bridgeObjectRetain();
  v9 = v16;
  swift_bridgeObjectRetain();
  v10 = v15;
  swift_bridgeObjectRetain();
  v11 = v14;
  v12 = swift_bridgeObjectRetain();
  if ((sub_1BDDB04C0(v12, v16) & 1) != 0)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v13 = sub_1BDDB04C0(v15, v17);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *((_OWORD *)v18 + 1) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *(_OWORD *)v18 = 0u;
  return result;
}

uint64_t CRDTDictionary.canMerge(delta:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13[2];

  v1 = a1[1];
  v2 = a1[5];
  v13[0] = *a1;
  v13[1] = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = sub_1BE0D175C(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = swift_release();
  if ((v3 & 1) != 0)
  {
    v13[0] = v2;
    v5 = MEMORY[0x1E0C80A78](v4);
    MEMORY[0x1E0C80A78](v5);
    type metadata accessor for CRDTDictionaryElement.Delta(255, v6, v7, v8);
    v9 = sub_1BE1B2684();
    swift_bridgeObjectRetain();
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0D0], v9);
    v10 = sub_1BE1B290C();
    swift_bridgeObjectRelease();
    v11 = v10 ^ 1;
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void CRDTDictionary.merge(delta:)()
{
  sub_1BE1A6724();
}

uint64_t sub_1BE1A9558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)&v8 = v0;
  *((_QWORD *)&v8 + 1) = v1;
  v9 = v2;
  v10 = v3;
  v11 = v4;
  v12 = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_1BE0D1904(&v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v6 & 1;
}

uint64_t CRDTDictionary.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t TupleTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  char *v120;
  uint64_t *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v121 = a1;
  v93 = a4;
  v7 = a3[6];
  v8 = a3[3];
  v106 = *(_QWORD *)(v7 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v101 = sub_1BE1B2EE8();
  v100 = *(_QWORD *)(v101 - 8);
  v10 = MEMORY[0x1E0C80A78](v101);
  v99 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v115 = (char *)&v92 - v13;
  v109 = AssociatedTypeWitness;
  v110 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12);
  v98 = (char *)&v92 - v14;
  v107 = v8;
  v112 = v7;
  v16 = type metadata accessor for CRDTDictionaryElement(255, v8, v7, v15);
  v105 = sub_1BE1B2EE8();
  v104 = *(_QWORD *)(v105 - 8);
  v17 = MEMORY[0x1E0C80A78](v105);
  v122 = (char *)&v92 - v18;
  v123 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v120 = (char *)&v92 - v23;
  v24 = a3[2];
  v111 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v97 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v92 - v27;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v30 = sub_1BE1B2EE8();
  v117 = *(_QWORD *)(v30 - 8);
  v118 = v30;
  v31 = MEMORY[0x1E0C80A78](v30);
  result = MEMORY[0x1E0C80A78](v31);
  v116 = (char *)&v92 - v34;
  v35 = *v121;
  v36 = *v4;
  v108 = a2;
  if (*(_QWORD *)(a2 + 24) || v36 != v35)
  {
    v114 = v33;
    v102 = v21;
    v38 = a3[5];
    v39 = v36;
    v126 = sub_1BE1B2594();
    v125 = sub_1BE1B2594();
    v40 = sub_1BE1B257C();
    v121 = &v92;
    v124 = v40;
    v113 = v39;
    v41 = MEMORY[0x1E0C80A78](v40);
    v42 = v107;
    *(&v92 - 6) = v24;
    *(&v92 - 5) = v42;
    *(&v92 - 4) = a3[4];
    *(&v92 - 3) = v38;
    *(&v92 - 2) = v112;
    *(&v92 - 1) = (int64_t)&v126;
    MEMORY[0x1E0C80A78](v41);
    *(&v92 - 6) = v24;
    *(&v92 - 5) = v43;
    *(&v92 - 4) = v44;
    *(&v92 - 3) = v38;
    v119 = v38;
    *(&v92 - 2) = v45;
    *(&v92 - 1) = (int64_t)&v125;
    swift_retain();
    v46 = swift_retain();
    sub_1BE0D09E8(v46, v108, (void (*)(char *))sub_1BE1AE41C, (uint64_t)(&v92 - 8), (void (*)(char *))sub_1BE1AE41C, (uint64_t)(&v92 - 8));
    swift_release();
    swift_release();
    v47 = *(_QWORD *)(v35 + 16);
    swift_beginAccess();
    v48 = *(_QWORD *)(v47 + 40);
    v49 = *(_QWORD *)(v48 + 64);
    v96 = v48 + 64;
    v50 = 1 << *(_BYTE *)(v48 + 32);
    v51 = -1;
    if (v50 < 64)
      v51 = ~(-1 << v50);
    v52 = v51 & v49;
    v103 = (unint64_t)(v50 + 63) >> 6;
    v92 = v103 - 1;
    v112 = v48;
    result = swift_bridgeObjectRetain();
    v53 = 0;
    v54 = v123;
    v55 = v120;
    v56 = v111;
    v95 = v16;
    v94 = TupleTypeMetadata2;
    while (1)
    {
      if (v52)
      {
        v120 = v53;
        v121 = (uint64_t *)((v52 - 1) & v52);
        v57 = __clz(__rbit64(v52)) | ((_QWORD)v53 << 6);
        goto LABEL_11;
      }
      v61 = (int64_t)(v53 + 1);
      if (__OFADD__(v53, 1))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }
      if (v61 >= v103)
      {
        v120 = v53;
      }
      else
      {
        v62 = *(_QWORD *)(v96 + 8 * v61);
        if (v62)
          goto LABEL_15;
        v83 = v53 + 2;
        if ((uint64_t)(v53 + 2) >= v103)
        {
          v121 = 0;
          v60 = 1;
LABEL_29:
          v120 = (char *)v61;
          goto LABEL_18;
        }
        v62 = *(_QWORD *)(v96 + 8 * (_QWORD)v83);
        if (v62)
        {
          v61 = (int64_t)(v53 + 2);
          goto LABEL_15;
        }
        v84 = (int64_t)(v53 + 3);
        if (v84 < v103)
        {
          v62 = *(_QWORD *)(v96 + 8 * v84);
          if (!v62)
          {
            while (1)
            {
              v61 = v84 + 1;
              if (__OFADD__(v84, 1))
                goto LABEL_46;
              if (v61 >= v103)
              {
                v121 = 0;
                v60 = 1;
                v61 = v92;
                goto LABEL_29;
              }
              v62 = *(_QWORD *)(v96 + 8 * v61);
              ++v84;
              if (v62)
                goto LABEL_15;
            }
          }
          v61 = v84;
LABEL_15:
          v120 = (char *)v61;
          v121 = (uint64_t *)((v62 - 1) & v62);
          v57 = __clz(__rbit64(v62)) + (v61 << 6);
LABEL_11:
          v58 = v112;
          v59 = v114;
          (*(void (**)(uint64_t, unint64_t, int64_t))(v56 + 16))(v114, *(_QWORD *)(v112 + 48) + *(_QWORD *)(v56 + 72) * v57, v24);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v54 + 16))(v59 + *(int *)(TupleTypeMetadata2 + 48), *(_QWORD *)(v58 + 56) + *(_QWORD *)(v54 + 72) * v57, v16);
          v60 = 0;
          goto LABEL_19;
        }
        v120 = v83;
      }
      v121 = 0;
      v60 = 1;
LABEL_18:
      v59 = v114;
LABEL_19:
      v63 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v59, v60, 1, TupleTypeMetadata2);
      v64 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v116, v59, v118);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v64, 1, TupleTypeMetadata2) == 1)
      {
        swift_release();
        v85 = v126;
        swift_bridgeObjectRetain();
        v86 = sub_1BE1B2BAC();
        result = swift_bridgeObjectRelease();
        if (v86 > 0
          || (swift_bridgeObjectRetain(), v87 = sub_1BE1B2BAC(), result = swift_bridgeObjectRelease(), v87 > 0)
          || (swift_bridgeObjectRetain(), v88 = sub_1BE1B260C(), result = swift_bridgeObjectRelease(), v88 >= 1))
        {
          v90 = v124;
          v89 = v125;
          v91 = v93;
          *v93 = v85;
          v91[1] = v89;
          v91[2] = v90;
          return result;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        break;
      }
      v65 = v64;
      v66 = &v64[*(int *)(TupleTypeMetadata2 + 48)];
      (*(void (**)(char *, char *, int64_t))(v56 + 32))(v28, v65, v24);
      v67 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
      v67(v55, v66, v16);
      v68 = *(_QWORD *)(v113 + 16);
      swift_beginAccess();
      v69 = *(_QWORD *)(v68 + 40);
      swift_bridgeObjectRetain();
      v70 = v122;
      MEMORY[0x1C3B7C58C](v28, v69, v24, v16, v119);
      v54 = v123;
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v70, 1, v16) == 1)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v16);
        (*(void (**)(char *, int64_t))(v56 + 8))(v28, v24);
        result = (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v122, v105);
      }
      else
      {
        v71 = v55;
        v72 = v102;
        v67(v102, v122, v16);
        v73 = v115;
        (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v71, v108, v107);
        v74 = v73;
        v75 = v109;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v74, 1, v109) == 1)
        {
          v54 = v123;
          v76 = *(void (**)(char *, uint64_t))(v123 + 8);
          v76(v72, v16);
          v76(v71, v16);
          v77 = v111;
          (*(void (**)(char *, int64_t))(v111 + 8))(v28, v24);
          result = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v115, v101);
        }
        else
        {
          v78 = v110;
          v79 = v98;
          (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v98, v115, v75);
          (*(void (**)(char *, char *, int64_t))(v111 + 16))(v97, v28, v24);
          v80 = v99;
          (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v99, v79, v75);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v75);
          sub_1BE1B2684();
          TupleTypeMetadata2 = v94;
          sub_1BE1B26B4();
          v81 = v79;
          v16 = v95;
          (*(void (**)(char *, uint64_t))(v78 + 8))(v81, v75);
          v54 = v123;
          v82 = *(void (**)(char *, uint64_t))(v123 + 8);
          v82(v72, v16);
          v82(v71, v16);
          v77 = v111;
          result = (*(uint64_t (**)(char *, int64_t))(v111 + 8))(v28, v24);
        }
        v55 = v71;
        v56 = v77;
      }
      v53 = v120;
      v52 = (unint64_t)v121;
    }
  }
  v37 = v93;
  *v93 = 0;
  v37[1] = 0;
  v37[2] = 0;
  return result;
}

uint64_t sub_1BE1AA030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CRDTDictionary.init(from:)(a1, *(uint64_t (**)(uint64_t))(a2 + 16), *(_QWORD *)(a2 + 24), *(uint64_t (**)(uint64_t))(a2 + 32), *(uint64_t (**)(uint64_t))(a2 + 40), *(_QWORD *)(a2 + 48), a3);
}

uint64_t CRDTDictionary.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t inited;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;

  v22[0] = a7;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v15, &qword_1ED6F3728);
  v17 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v16) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17);
  sub_1BDD86E30((uint64_t)v15, &qword_1ED6F3728);
  if ((_DWORD)v16 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000014;
    *(_QWORD *)(v18 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v18 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    v21 = v22[1];
    sub_1BDE12808(a2, a3, a4, a5, a6, (uint64_t)&v23);
    result = swift_release();
    if (!v21)
      *(_QWORD *)v22[0] = v23;
  }
  return result;
}

uint64_t sub_1BE1AA210()
{
  return CRDTDictionary.encode(to:)();
}

uint64_t CRDTDictionary.encode(to:)()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1BDDA8D6C();
  if (!v0)
  {
    swift_retain();
    sub_1BDE1D904();
  }
  return result;
}

BOOL CRDTDictionary.hasEncodedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16) || *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) != 0;
}

void sub_1BE1AA31C(_BYTE *a1@<X8>)
{
  CRDTDictionary.minEncodingVersion.getter(a1);
}

void CRDTDictionary.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BE1AA33C()
{
  sub_1BE1AE088();
  return swift_retain();
}

uint64_t sub_1BE1AA354(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v5 = *a3;
  v6 = *(_QWORD *)(*a3 + 88);
  v7 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(v6 + 16);
  v11 = sub_1BE1B2EE8();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(v5 + 80);
  MEMORY[0x1E0C80A78](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
  swift_beginAccess();
  v18 = a3[5];
  v19 = *(_QWORD *)(v5 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v18, v15, v6, v19);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v22 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v14, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, v10);
    sub_1BE1B2684();
    sub_1BE1B26B4();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v6);
  }
  return result;
}

uint64_t CRDTDictionary.ObservableDifference.addedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRDTDictionary.ObservableDifference.removedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRDTDictionary.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

double sub_1BE1AA544@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD v26[3];
  _OWORD *v27;

  v27 = a8;
  v16 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B07E0(a1, (uint64_t)v18);
  v20 = type metadata accessor for CRDTDictionaryElement(0, a4, a7, v19);
  v21 = MEMORY[0x1C3B7DF54](&unk_1BE1C930C, v20);
  sub_1BE0D2CE0((uint64_t)v18, a2, a3, v20, a5, a6, v21, (uint64_t)v26);
  sub_1BDD9C3E0(a1, type metadata accessor for Proto_Set);
  if (!v8)
  {
    result = *(double *)v26;
    v23 = v26[1];
    v24 = v26[2];
    v25 = v27;
    *v27 = v26[0];
    v25[1] = v23;
    v25[2] = v24;
  }
  return result;
}

double CRDTDictionary.Partial.init(from:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39;

  v36 = a5;
  v37 = a6;
  v35 = a4;
  v34 = a3;
  v33 = a2;
  v31 = a7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v32);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_CRDT(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v19, &qword_1ED6F3728);
  LODWORD(v20) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13);
  sub_1BDD86E30((uint64_t)v19, &qword_1ED6F3728);
  if ((_DWORD)v20 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v21 = 0xD000000000000014;
    *(_QWORD *)(v21 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v21 + 16) = 0;
    swift_willThrow();
    swift_release();
    return result;
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  sub_1BDDA0528((uint64_t)v16);
  v24 = *(_QWORD *)&v16[*(int *)(v13 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v24, (uint64_t)v10, &qword_1ED6F2DF0);
  v25 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v10, 1, v25) == 1)
  {
    sub_1BDD86E30((uint64_t)v10, &qword_1ED6F2DF0);
LABEL_8:
    sub_1BE1B20E4();
    v26 = *(int *)(v32 + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v12[v26] = qword_1ED6F2800;
    swift_retain();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v12, type metadata accessor for Proto_Set);
LABEL_11:
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_CRDT);
  v27 = v39;
  sub_1BE1AA544((uint64_t)v12, a1, v33, v34, v35, v36, v37, v38);
  swift_setDeallocating();
  swift_release();
  if (!v27)
  {
    result = *(double *)v38;
    v28 = v38[1];
    v29 = v38[2];
    v30 = v31;
    *v31 = v38[0];
    v30[1] = v28;
    v30[2] = v29;
  }
  return result;
}

void sub_1BE1AAA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for CRDTDictionaryElement(255, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 48), a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7DF54](&unk_1BE1C930C, v4);
  type metadata accessor for CRSetRefMergeableDelta();
}

uint64_t sub_1BE1AAAC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1BE0D36E4(v3, a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t CRDTDictionary.Partial.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v5);
  result = sub_1BDDA8D6C();
  if (!v2)
  {
    swift_retain();
    sub_1BE1AAA0C(a1, a2, v7, v8);
  }
  return result;
}

uint64_t CRDTDictionary.Partial.visitReferences(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  int EnumCaseMultiPayload;
  void (*v56)(uint64_t, uint64_t);
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;

  v79 = a1;
  v4 = a2[6];
  v5 = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v66 = AssociatedTypeWitness;
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v64 = (char *)&v59 - v8;
  v63 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v7);
  v62 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(0, v5, v4, v10);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v59 - v12;
  v69 = v5;
  v70 = v4;
  v15 = type metadata accessor for CRDTDictionaryElement.Delta(0, v5, v4, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v82 = (char *)&v59 - v18;
  v74 = a2;
  v19 = *(_QWORD *)(a2[2] - 8);
  MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v23 = sub_1BE1B2EE8();
  v75 = *(_QWORD *)(v23 - 8);
  v76 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v77 = (char *)&v59 - v27;
  v28 = *(_QWORD *)(v2 + 40);
  v29 = *(_QWORD *)(v28 + 64);
  v61 = v28 + 64;
  v30 = 1 << *(_BYTE *)(v28 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v67 = (unint64_t)(v30 + 63) >> 6;
  v60 = v67 - 1;
  v71 = v28;
  result = swift_bridgeObjectRetain();
  v34 = 0;
  v78 = v13;
  v35 = v15;
  v68 = v15;
  while (1)
  {
    v39 = v77;
    if (v32)
    {
      v40 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v80 = v34;
      v41 = v40 | (v34 << 6);
      goto LABEL_9;
    }
    v44 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v44 >= v67)
    {
      v80 = v34;
LABEL_15:
      v32 = 0;
      v43 = 1;
      goto LABEL_16;
    }
    v45 = *(_QWORD *)(v61 + 8 * v44);
    if (v45)
      goto LABEL_13;
    v57 = v34 + 2;
    if (v34 + 2 < v67)
      break;
    v32 = 0;
    v43 = 1;
    v80 = v34 + 1;
LABEL_16:
    v46 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v26, v43, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v39, v26, v76);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v39, 1, TupleTypeMetadata2) == 1)
      return swift_release();
    v47 = v26;
    v48 = &v39[*(int *)(TupleTypeMetadata2 + 48)];
    v49 = v19;
    v50 = v39;
    v51 = v83;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v81, v50, v83);
    v52 = v16;
    v53 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v54 = v82;
    v53(v82, v48, v35);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74[4] + 8) + 40))(v79, v51);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v78, v54, v73);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v36 = v63;
      v37 = v62;
      v38 = v69;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v78, v69);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 + 16) + 40))(v79, v38);
LABEL_5:
      v35 = v68;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
      goto LABEL_6;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v37 = v64;
      v36 = v65;
      v38 = v66;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v78, v66);
      v56 = *(void (**)(uint64_t, uint64_t))(swift_getAssociatedConformanceWitness() + 32);
      v56(v79, v38);
      goto LABEL_5;
    }
LABEL_6:
    v16 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v82, v35);
    v19 = v49;
    result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v81, v83);
    v26 = v47;
    v34 = v80;
  }
  v45 = *(_QWORD *)(v61 + 8 * v57);
  if (v45)
  {
    v44 = v34 + 2;
    goto LABEL_13;
  }
  v58 = v34 + 3;
  if (v58 >= v67)
  {
    v80 = v57;
    goto LABEL_15;
  }
  v45 = *(_QWORD *)(v61 + 8 * v58);
  if (v45)
  {
    v44 = v58;
LABEL_13:
    v32 = (v45 - 1) & v45;
    v41 = __clz(__rbit64(v45)) + (v44 << 6);
    v80 = v44;
LABEL_9:
    v42 = v71;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v26, *(_QWORD *)(v71 + 48) + *(_QWORD *)(v19 + 72) * v41, v83);
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(&v26[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v42 + 56) + *(_QWORD *)(v16 + 72) * v41, v35);
    v43 = 0;
    goto LABEL_16;
  }
  while (1)
  {
    v44 = v58 + 1;
    if (__OFADD__(v58, 1))
      break;
    if (v44 >= v67)
    {
      v32 = 0;
      v43 = 1;
      v80 = v60;
      goto LABEL_16;
    }
    v45 = *(_QWORD *)(v61 + 8 * v44);
    ++v58;
    if (v45)
      goto LABEL_13;
  }
LABEL_35:
  __break(1u);
  return result;
}

void CRDTDictionary.Partial.merge(delta:)()
{
  sub_1BE1AE170();
}

void CRDTDictionary.Partial.canMerge(delta:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE1AB214()
{
  sub_1BE1AE170();
}

void sub_1BE1AB21C()
{
  sub_1BE1B3200();
  __break(1u);
}

double sub_1BE1AB26C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  return CRDTDictionary.Partial.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_1BE1AB290(uint64_t a1, uint64_t a2)
{
  return CRDTDictionary.Partial.encode(to:)(a1, a2);
}

BOOL sub_1BE1AB2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v8 = a8;
  v24 = a2;
  v14 = type metadata accessor for CRDTDictionaryElement(255, a5, a8, a4);
  v15 = sub_1BE1B2EE8();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v24 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  swift_beginAccess();
  v20 = *(_QWORD *)(v19 + 40);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v20, a4, v14, a7);
  swift_bridgeObjectRelease();
  v22 = type metadata accessor for CRDTDictionaryElement.Delta(0, a5, v8, v21);
  LOBYTE(v8) = sub_1BE1A3BE4((uint64_t)v18, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return (v8 & 1) == 0;
}

uint64_t type metadata accessor for CRDTDictionaryElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTDictionaryElement);
}

uint64_t sub_1BE1AB3DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_1BE1AB400@<X0>(_QWORD *a1@<X8>)
{
  CRDTDictionary.makeIterator()(a1);
  return swift_release();
}

uint64_t sub_1BE1AB418(uint64_t a1)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTDictionary<A, B>, a1);
  return sub_1BE1B2CA8();
}

uint64_t sub_1BE1AB44C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTDictionary<A, B>, a1);
  v4 = sub_1BE1AE084(v1, a1, v3);
  swift_release();
  return v4;
}

uint64_t static CRDTDictionary.Index.< infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1BE1AB534(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x1E0DE9EF0]);
}

uint64_t CRDTDictionary.Index.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_BYTE *)(v2 + 16);
  sub_1BDF2BCF8(v4, v5, v6);
  type metadata accessor for CRDTDictionaryElement(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 48), v7);
  sub_1BE1B2600();
  return sub_1BDE27EC8(v4, v5, v6);
}

uint64_t static CRDTDictionary.Index.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1BE1AB534(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DE9EF8]);
}

uint64_t sub_1BE1AB534(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *a1;
  v12 = a1[1];
  v13 = *((unsigned __int8 *)a1 + 16);
  v14 = *a2;
  v15 = a2[1];
  v16 = *((unsigned __int8 *)a2 + 16);
  v17 = type metadata accessor for CRDTDictionaryElement(0, a4, a7, a4);
  return a8(v11, v12, v13, v14, v15, v16, a3, v17, a6) & 1;
}

uint64_t CRDTDictionary.Index.hashValue.getter(uint64_t a1)
{
  __int128 *v1;
  char v3;
  _BYTE v5[72];
  __int128 v6;
  char v7;

  v3 = *((_BYTE *)v1 + 16);
  v6 = *v1;
  v7 = v3;
  sub_1BE1B36F8();
  CRDTDictionary.Index.hash(into:)((uint64_t)v5, a1);
  return sub_1BE1B371C();
}

uint64_t sub_1BE1AB624(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return static CRDTDictionary.Index.< infix(_:_:)(a1, a2, a3[2], a3[3], a5, a3[5], a3[6]);
}

uint64_t sub_1BE1AB648(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_1BE1B36F8();
  CRDTDictionary.Index.hash(into:)((uint64_t)v4, a2);
  return sub_1BE1B371C();
}

uint64_t sub_1BE1AB688(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return static CRDTDictionary.Index.== infix(_:_:)(a1, a2, a3[2], a3[3], a5, a3[5], a3[6]);
}

uint64_t CRDTDictionary.startIndex.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BE1AB6B0(a1, MEMORY[0x1E0DE9E30], a2);
}

uint64_t CRDTDictionary.endIndex.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BE1AB6B0(a1, MEMORY[0x1E0DEA018], a2);
}

uint64_t sub_1BE1AB6B0@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;

  swift_beginAccess();
  v6 = a1[2];
  v8 = type metadata accessor for CRDTDictionaryElement(0, a1[3], a1[6], v7);
  v9 = a1[5];
  v10 = swift_bridgeObjectRetain();
  v11 = a2(v10, v6, v8, v9);
  v13 = v12;
  LOBYTE(v6) = v14;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v6 & 1;
  return result;
}

uint64_t CRDTDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v6 = a4[2];
  v5 = a4[3];
  v29 = a1;
  v30 = v5;
  v7 = type metadata accessor for CRDTDictionaryElement(255, v5, a4[6], (uint64_t)a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v28 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v27 - v15;
  v27 = *(char **)(a3 + 8);
  v17 = (char *)&v27 + *(int *)(v14 + 48) - v15;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1BE1B26C0();
  swift_bridgeObjectRelease();
  v27 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v18 = v27;
  v19 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v13, v16, v6);
  v20 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v17, v7);
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v21(v29, v13, v6);
  v22 = *(int *)(TupleTypeMetadata2 + 48);
  v23 = v28;
  v24 = &v28[v22];
  v21((uint64_t)v28, v16, v6);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v24, v17, v7);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v30 - 8) + 16))(v31, v24);
  v25 = *(void (**)(char *, uint64_t))(v20 + 8);
  v25(v24, v7);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v6);
  return ((uint64_t (*)(char *, uint64_t))v25)(v27, v7);
}

uint64_t CRDTDictionary.index(after:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  swift_beginAccess();
  type metadata accessor for CRDTDictionaryElement(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), v4);
  swift_bridgeObjectRetain();
  v5 = sub_1BE1B2618();
  v7 = v6;
  v9 = v8;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  return result;
}

uint64_t CRDTDictionary.count.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  type metadata accessor for CRDTDictionaryElement(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), v2);
  swift_bridgeObjectRetain();
  v3 = sub_1BE1B260C();
  swift_bridgeObjectRelease();
  return v3;
}

void (*sub_1BE1ABAD8(uint64_t **a1, uint64_t a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  char *v11;
  void (*v12)(_QWORD *);
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  v7 = a3[2];
  v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  v10 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v6[5] = v10;
  v11 = (char *)malloc(*(_QWORD *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  v12 = sub_1BE1ABBB8(v6, a2, a3);
  v14 = v13;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(_QWORD *)(v7 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v14, v8);
  return sub_1BDF2A3D0;
}

void (*sub_1BE1ABBB8(uint64_t *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  void *v8;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  CRDTDictionary.subscript.getter((uint64_t)v8, (uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_1BDEE623C;
}

double sub_1BE1ABC54(uint64_t a1, uint64_t a2)
{
  char v3;
  double result;
  __int128 v5;
  char v6;

  CRDTDictionary.index(after:)(a2, (uint64_t)&v5);
  sub_1BDE27EC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1BE1ABC9C(uint64_t (**a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *TupleTypeMetadata2;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t (*v54)(uint64_t);
  uint64_t (*v55)(uint64_t);
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t (*v63)(uint64_t);
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (**v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t (*v73)(uint64_t);
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;

  v63 = a8;
  v71 = a6;
  v62 = a5;
  v61 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v13);
  v70 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Proto_Version(0);
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v64 = (uint64_t (**)(uint64_t))((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1BE1B1F58();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  v68 = a1;
  v24 = *(uint64_t *)((char *)a1 + v23);
  swift_beginAccess();
  v66 = a2;
  v25 = *(_QWORD *)(a2 + 24);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26 && (v27 = *(_QWORD *)(v24 + 16), v27 < v26))
  {
    v59 = a3;
    v60 = a7;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v22, v25+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v27, v19);
    type metadata accessor for ReplicaState();
    v28 = swift_allocObject();
    v29 = v28 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
    v30 = type metadata accessor for Replica();
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    v31(v29, 1, 1, v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v28 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v22, v19);
    *(_QWORD *)(v28 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
    *(_QWORD *)(v28 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
    v31((uint64_t)v18, 1, 1, v30);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v18, v29, &qword_1ED6F43C0);
    swift_endAccess();
    v32 = *(uint64_t *)((char *)v68 + v23);
    v33 = v32 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    v34 = v70;
    sub_1BDD86DEC(v33, v70, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v34, 1, v69) == 1)
    {
      v35 = MEMORY[0x1E0DEE9D8];
      v36 = v64;
      *v64 = MEMORY[0x1E0DEE9D8];
      v36[1] = v35;
      sub_1BE1B20E4();
      sub_1BDD86E30(v34, &qword_1ED6F37A8);
    }
    else
    {
      v36 = v64;
      sub_1BDDA2E8C(v34, (uint64_t)v64, type metadata accessor for Proto_Version);
    }
    v39 = v71;
    v40 = v65;
    v41 = v66;
    swift_retain();
    sub_1BDDA9DA0(v36, v41, &v72);
    if (!v40)
    {
      v42 = *((_QWORD *)&v72 + 1);
      v69 = v72;
      v70 = v28;
      v43 = (_QWORD *)(v32
                     + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
      swift_beginAccess();
      v68 = &v59;
      *(_QWORD *)&v72 = *v43;
      MEMORY[0x1E0C80A78](v72);
      *(&v59 - 6) = v62;
      *(&v59 - 5) = (uint64_t (*)(uint64_t))v39;
      v44 = v63;
      *(&v59 - 4) = v60;
      *(&v59 - 3) = v44;
      *(&v59 - 2) = (uint64_t (*)(uint64_t))a9;
      *(&v59 - 1) = (uint64_t (*)(uint64_t))v41;
      swift_bridgeObjectRetain();
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE998);
      v47 = type metadata accessor for CRDTDictionaryElement(255, v39, a9, v46);
      TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
      v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
      v50 = sub_1BE1B0944();
      v51 = sub_1BDF016D0((void (*)(char *, char *))sub_1BE1B0920, (uint64_t)(&v59 - 8), v45, TupleTypeMetadata2, v49, v50, MEMORY[0x1E0DEDB38], (uint64_t)&v76);
      v67 = v42;
      v52 = swift_bridgeObjectRelease();
      if (v59)
        v52 = v59(v51);
      v68 = &v59;
      *(_QWORD *)&v72 = v51;
      MEMORY[0x1E0C80A78](v52);
      v53 = v62;
      v54 = (uint64_t (*)(uint64_t))v71;
      *(&v59 - 6) = v62;
      *(&v59 - 5) = v54;
      v55 = v60;
      v56 = v63;
      *(&v59 - 4) = v60;
      *(&v59 - 3) = v56;
      *(&v59 - 2) = (uint64_t (*)(uint64_t))a9;
      v57 = sub_1BE1B2A5C();
      MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v57);
      sub_1BE1B2690();
      v58 = MEMORY[0x1C3B7DF54](&unk_1BE1C930C, v47);
      *(_QWORD *)&v72 = v53;
      *((_QWORD *)&v72 + 1) = v47;
      v73 = v55;
      v74 = v56;
      v75 = v58;
      type metadata accessor for CRSetRef();
    }
    return swift_release();
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v37 = xmmword_1BE1BB990;
    *(_BYTE *)(v37 + 16) = 0;
    return swift_willThrow();
  }
}

void sub_1BE1AC2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 240);
  *(_QWORD *)(v1 - 200) = *(_QWORD *)(v1 - 224);
  *(_QWORD *)(v1 - 192) = v2;
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  sub_1BE0D5E80(*(_QWORD *)(v1 - 216), (_OWORD *)(v1 - 200), v0, *(_QWORD *)(v1 - 72));
  JUMPOUT(0x1BE1AC288);
}

uint64_t sub_1BE1AC374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, _QWORD *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  char *v85;

  v80 = a7;
  v81 = a5;
  v66 = a8;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v13);
  v69 = (uint64_t)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Proto_Version(0);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v70 = (char **)((char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = a6;
  v65 = type metadata accessor for CRDTDictionaryElement(0, a4, a6, v16);
  v64 = *(_QWORD *)(v65 - 8);
  v17 = MEMORY[0x1E0C80A78](v65);
  v63 = (char *)&v63 - v18;
  v78 = a4;
  v72 = *(_QWORD *)(a4 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v71 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v77 = (char *)&v63 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Proto_CRDT(0);
  v74 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v25);
  v75 = (uint64_t)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = a3;
  v73 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v26);
  v85 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Proto_Value(0);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  v36 = v79 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v36, (uint64_t)v31, &qword_1ED6F3770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    sub_1BE1B20E4();
    v37 = *(int *)(v32 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v35[v37] = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30((uint64_t)v31, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v31, (uint64_t)v35, type metadata accessor for Proto_Value);
  }
  v38 = v83;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDB4FC0((uint64_t)v35, a2);
  swift_release();
  v39 = *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 8);
  v41 = swift_retain();
  v42 = v82;
  v40(v41, v38, v39);
  if (v42)
  {
    result = swift_release();
    *v80 = v42;
  }
  else
  {
    v43 = v79 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    sub_1BDD86DEC(v43, (uint64_t)v24, &qword_1ED6F3728);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v24, 1, v25) == 1)
    {
      v44 = v75;
      sub_1BE1B20E4();
      v45 = *(int *)(v25 + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v44 + v45) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30((uint64_t)v24, &qword_1ED6F3728);
    }
    else
    {
      v44 = v75;
      sub_1BDDA2E8C((uint64_t)v24, v75, type metadata accessor for Proto_CRDT);
    }
    v46 = v77;
    swift_allocObject();
    swift_retain();
    sub_1BDDA1B44(v44, a2);
    swift_release();
    v47 = *(_QWORD *)(*(_QWORD *)(v76 + 16) + 8);
    v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 8);
    v49 = swift_retain();
    v50 = v78;
    v48(v49, v78, v47);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v46, v50);
    v52 = v79
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
    swift_beginAccess();
    v53 = v52;
    v54 = v69;
    sub_1BDD86DEC(v53, v69, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v54, 1, v68) == 1)
    {
      v55 = MEMORY[0x1E0DEE9D8];
      v56 = v54;
      v57 = v70;
      *v70 = MEMORY[0x1E0DEE9D8];
      v57[1] = v55;
      sub_1BE1B20E4();
      sub_1BDD86E30(v56, &qword_1ED6F37A8);
    }
    else
    {
      v58 = v54;
      v57 = v70;
      sub_1BDDA2E8C(v58, (uint64_t)v70, type metadata accessor for Proto_Version);
    }
    swift_retain();
    sub_1BDDA9DA0(v57, a2, &v84);
    swift_release();
    swift_release();
    v59 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v50);
    v60 = v63;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v63, v71, v50);
    v61 = v65;
    *(_OWORD *)&v60[*(int *)(v65 + 36)] = v84;
    v62 = v66 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(void))(v73 + 32))();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v62, v60, v61);
  }
  return result;
}

uint64_t sub_1BE1ACB04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;

  v89 = a6;
  v78 = a4;
  v84 = a3;
  v87 = sub_1BE1B2EE8();
  v85 = *(_QWORD *)(v87 - 8);
  v11 = MEMORY[0x1E0C80A78](v87);
  v86 = (char *)&v78 - v12;
  v91 = a5;
  v88 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v11);
  v79 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v83 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v78 - v17;
  v82 = type metadata accessor for Proto_Version(0);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v80 = (_QWORD **)((char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_1BE1B1F58();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v24 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)(a7 + v24) = qword_1ED6F2800;
  v92 = a1;
  v25 = a1[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v25, v20);
  swift_retain();
  v93 = (_QWORD *)a2;
  v26 = sub_1BDDAE244((uint64_t)v23);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    v27 = swift_retain();
    *(_QWORD *)(a7 + v24) = sub_1BDDA1768(v27);
    swift_release();
  }
  v28 = *(_QWORD *)(a7 + v24);
  swift_beginAccess();
  *(_QWORD *)(v28 + 16) = v26;
  v29 = v92;
  swift_beginAccess();
  v30 = v29[4];
  v95[0] = v29[3];
  v95[1] = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = v80;
  sub_1BDDAD780((uint64_t)v93, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33 = v88;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    v34 = swift_retain();
    *(_QWORD *)(a7 + v24) = sub_1BDDA1768(v34);
    swift_release();
  }
  v35 = *(_QWORD *)(a7 + v24);
  sub_1BDDA2E8C((uint64_t)v31, (uint64_t)v18, type metadata accessor for Proto_Version);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v18, 0, 1, v82);
  v36 = v83;
  sub_1BDDA2EF0((uint64_t)v18, v83, &qword_1ED6F37A8);
  v37 = v35 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v36, v37, &qword_1ED6F37A8);
  swift_endAccess();
  swift_release();
  v38 = v85;
  v39 = v86;
  v40 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v86, v84, v87);
  v41 = v91;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v39, 1, v91) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    v42 = v92;
    v43 = swift_beginAccess();
    v94 = v42[5];
    v44 = MEMORY[0x1E0C80A78](v43);
    v45 = v78;
    v47 = (_QWORD *)v78[2];
    v46 = (_QWORD *)v78[3];
    *(&v78 - 8) = v47;
    *(&v78 - 7) = v46;
    v48 = (_QWORD *)v45[4];
    v49 = (_QWORD *)v45[5];
    *(&v78 - 6) = (_QWORD *)v41;
    *(&v78 - 5) = v48;
    v50 = (_QWORD *)v45[6];
    *(&v78 - 4) = v49;
    *(&v78 - 3) = v50;
    v51 = (uint64_t)v93;
    *(&v78 - 2) = (_QWORD *)v89;
    *(&v78 - 1) = (_QWORD *)v51;
    MEMORY[0x1E0C80A78](v44);
    *(&v78 - 10) = v47;
    *(&v78 - 9) = (_QWORD *)v52;
    *(&v78 - 8) = (_QWORD *)v41;
    *(&v78 - 7) = v53;
    *(&v78 - 6) = v49;
    *(&v78 - 5) = (_QWORD *)v54;
    *(&v78 - 4) = v55;
    *(&v78 - 3) = sub_1BE1B0824;
    *(&v78 - 2) = v56;
    type metadata accessor for CRDTDictionaryElement(255, v52, v54, v57);
    v58 = sub_1BE1B2684();
    v59 = (char *)type metadata accessor for Proto_Set.Element(0);
    swift_bridgeObjectRetain();
    v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v61 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0E0], v58);
    v62 = v90;
    v63 = sub_1BDF016D0((void (*)(char *, char *))sub_1BE1B0854, (uint64_t)(&v78 - 12), v58, v59, v60, v61, MEMORY[0x1E0DEDB38], (uint64_t)&v96);
    swift_bridgeObjectRelease();
    if (v62)
    {
      return sub_1BDD9C3E0(a7, type metadata accessor for Proto_Set);
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Set._StorageClass(0);
        swift_allocObject();
        v73 = swift_retain();
        *(_QWORD *)(a7 + v24) = sub_1BDDA1768(v73);
        swift_release();
      }
      v74 = (uint64_t *)(*(_QWORD *)(a7 + v24)
                      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
      swift_beginAccess();
      *v74 = v63;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v65 = v79;
    v66 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v79, v39, v41);
    MEMORY[0x1E0C80A78](v66);
    v67 = v89;
    *(&v78 - 4) = (_QWORD *)v41;
    *(&v78 - 3) = (_QWORD *)v67;
    v68 = v92;
    *(&v78 - 2) = v93;
    *(&v78 - 1) = v68;
    v69 = type metadata accessor for Proto_Set.Element(0);
    v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v71 = v90;
    v72 = sub_1BDF02134((void (*)(char *, char *))sub_1BE1B0890, (uint64_t)(&v78 - 6), v41, v69, v70, v67, MEMORY[0x1E0DEDB38], (uint64_t)v95);
    if (v71)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v65, v41);
      return sub_1BDD9C3E0(a7, type metadata accessor for Proto_Set);
    }
    else
    {
      v75 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Set._StorageClass(0);
        swift_allocObject();
        v76 = swift_retain();
        *(_QWORD *)(a7 + v24) = sub_1BDDA1768(v76);
        swift_release();
      }
      v77 = (uint64_t *)(*(_QWORD *)(a7 + v24)
                      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
      swift_beginAccess();
      *v77 = v75;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v65, v41);
    }
  }
}

uint64_t sub_1BE1AD2D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v83 = a2;
  v87 = a7;
  v88 = a8;
  v92 = a5;
  v84 = a4;
  v81 = a1;
  v85 = a11;
  v86 = a6;
  v89 = a10;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v79 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v78 = (uint64_t)&v70 - v16;
  v17 = type metadata accessor for Proto_Version(0);
  v76 = *(_QWORD *)(v17 - 8);
  v77 = v17;
  MEMORY[0x1E0C80A78](v17);
  v75 = (uint64_t *)((char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v20 = MEMORY[0x1E0C80A78](v19);
  v74 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v73 = (uint64_t)&v70 - v22;
  v72 = type metadata accessor for Proto_Value(0);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v80 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v70 - v28;
  v30 = type metadata accessor for Proto_CRDT(0);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v34 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1ED6EF6F0 != -1)
    swift_once();
  v35 = qword_1ED6EF6E0;
  *(_QWORD *)(a9 + v34) = qword_1ED6EF6E0;
  MEMORY[0x1E0C80A78](v35);
  v36 = v92;
  *(&v70 - 10) = v84;
  *(&v70 - 9) = v36;
  v37 = v87;
  *(&v70 - 8) = v86;
  *(&v70 - 7) = v37;
  v38 = v89;
  *(&v70 - 6) = v88;
  *(&v70 - 5) = v38;
  v39 = v83;
  *(&v70 - 4) = v85;
  *(&v70 - 3) = v39;
  *(&v70 - 2) = a3;
  swift_retain();
  v40 = v82;
  sub_1BDDA82F8((void (*)(uint64_t))sub_1BE1B08B0, (uint64_t)v33);
  v82 = v34;
  if (v40)
    return sub_1BDD9C3E0(a9, type metadata accessor for Proto_Set.Element);
  v70 = a3;
  v41 = v82;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v42 = swift_retain();
    *(_QWORD *)(a9 + v41) = sub_1BE13500C(v42);
    swift_release();
  }
  v43 = *(_QWORD *)(a9 + v41);
  sub_1BDDA2E8C((uint64_t)v33, (uint64_t)v29, type metadata accessor for Proto_CRDT);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, v30);
  sub_1BDDA2EF0((uint64_t)v29, (uint64_t)v27, &qword_1ED6F3728);
  v44 = v43 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v27, v44, &qword_1ED6F3728);
  swift_endAccess();
  v45 = swift_release();
  MEMORY[0x1E0C80A78](v45);
  v46 = v92;
  *(&v70 - 10) = v84;
  *(&v70 - 9) = v46;
  v47 = v87;
  *(&v70 - 8) = v86;
  *(&v70 - 7) = v47;
  v48 = v89;
  *(&v70 - 6) = v88;
  *(&v70 - 5) = v48;
  v50 = (uint64_t)v80;
  v49 = v81;
  *(&v70 - 4) = v85;
  *(&v70 - 3) = v49;
  *(&v70 - 2) = v70;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BE1B08E8, v50);
  v52 = v82;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v53 = swift_retain();
    *(_QWORD *)(a9 + v52) = sub_1BE13500C(v53);
    swift_release();
  }
  v54 = *(_QWORD *)(a9 + v52);
  v55 = v50;
  v56 = v73;
  sub_1BDDA2E8C(v55, v73, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v56, 0, 1, v72);
  v57 = v74;
  sub_1BDDA2EF0(v56, v74, &qword_1ED6F3770);
  v58 = v54 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v57, v58, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  v60 = type metadata accessor for CRDTDictionaryElement(0, v46, v48, v59);
  v61 = (uint64_t *)(v83 + *(int *)(v60 + 36));
  v62 = v61[1];
  v90 = *v61;
  v91 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = v75;
  sub_1BDDAD780(v70, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v64 = v82;
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v65 = swift_retain();
    *(_QWORD *)(a9 + v64) = sub_1BE13500C(v65);
    swift_release();
  }
  v66 = *(_QWORD *)(a9 + v82);
  v67 = v78;
  sub_1BDDA2E8C((uint64_t)v63, v78, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v67, 0, 1, v77);
  v68 = v79;
  sub_1BDDA2EF0(v67, v79, &qword_1ED6F37A8);
  v69 = v66 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v68, v69, &qword_1ED6F37A8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BE1AD968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a6;
  v23 = a2;
  v24 = a4;
  v11 = (_QWORD *)*a3;
  v12 = *(_QWORD *)(*a3 + 88);
  v13 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v22 - v14;
  swift_beginAccess();
  v16 = a3[5];
  v17 = v11[10];
  v18 = v11[13];
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v16, v17, v12, v18);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v21 = v25;
    sub_1BE1AD2D0(a1, (uint64_t)v15, v23, v17, *(_QWORD *)(v12 + 16), v24, v11[12], v18, a7, *(_QWORD *)(v12 + 24), a5);
    result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v15, v12);
    if (v21)
      *v22 = v21;
  }
  return result;
}

uint64_t sub_1BE1ADAC8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  type metadata accessor for CRDTDictionaryElement(255, a5, a9, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  if (v11)
    *a11 = v11;
  return result;
}

uint64_t CRDTDictionary<>.encode(to:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[8];

  v38[0] = *v4;
  v8 = a2[3];
  v30 = a2[2];
  v31 = v8;
  v9 = a2[5];
  v32 = a2[4];
  v33 = a3;
  v10 = a2[6];
  v34 = v9;
  v35 = v10;
  v36 = a4;
  v20 = v30;
  v21 = v8;
  v22 = v32;
  v23 = a3;
  v24 = v9;
  v25 = v10;
  v26 = a4;
  v27 = sub_1BDF2BD04;
  v28 = &v29;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTDictionary<A, B>, a2);
  v38[0] = sub_1BDF016D0((void (*)(char *, char *))sub_1BE1AE4E8, (uint64_t)v19, (uint64_t)a2, TupleTypeMetadata2, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  v14 = sub_1BE1B2A5C();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v14);
  v15 = sub_1BE1B25E8();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3770();
  v38[7] = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v38[3]);
  v16 = sub_1BE1B2684();
  v37[0] = a3;
  v37[1] = a4;
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0B8], v16, v37);
  sub_1BE1B34F4();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

uint64_t sub_1BE1ADD44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return CRDTDictionary<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t sub_1BE1ADD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1BE1B2D98();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_1BE1B2720();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_1BE1B2720();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1BE1ADEE8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = sub_1BE1B2780();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v16 - v11;
  v13 = sub_1BE1B2720();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v14 = sub_1BE1B2720();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1BE1AE088()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

void sub_1BE1AE094()
{
  type metadata accessor for CRDTDictionaryRef();
}

uint64_t sub_1BE1AE0C8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 288);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  v4 = swift_allocObject();
  sub_1BE1B1F4C();
  *(_QWORD *)(v4 + 16) = v3;
  return v4;
}

void sub_1BE1AE130()
{
  swift_retain();
  sub_1BE1A6724();
}

uint64_t sub_1BE1AE154()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = v1;
  return swift_release();
}

void sub_1BE1AE170()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BE1AE1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];

  v10[2] = a2;
  v10[3] = a1;
  v4 = sub_1BE1B2EE8();
  v10[4] = *(_QWORD *)(v4 - 8);
  v10[5] = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  v10[1] = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v10[0] = (char *)v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v9);
  sub_1BE1A6724();
}

void sub_1BE1AE2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 16))(v4, *(_QWORD *)(v5 - 112), v1);
  v6 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v2, *(_QWORD *)(v5 - 104), v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v3);
  sub_1BE1A6724();
}

uint64_t sub_1BE1AE308()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v0(v4, v5, v1);
  v7 = *(_QWORD *)(v6 - 128);
  v0(v7, v4, v1);
  sub_1BE1A4C94(v4, v8, v2);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 96) + 40))(v2, v3, *(_QWORD *)(v6 - 88));
  sub_1BE1A4DF8(v2, v7, v9, v10);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 120) + 8);
  v11(v4, v1);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v5, v1);
}

uint64_t sub_1BE1AE39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v3[3];
  v8 = v3[6];
  v7 = v3[7];
  v9 = type metadata accessor for CRDTDictionaryElement(0, v6, v8, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a3, a1, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 + 16) + 56))(v7, v6);
}

uint64_t sub_1BE1AE420(uint64_t a1)
{
  uint64_t v1;

  return sub_1BE1AA354(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t type metadata accessor for CRDTDictionaryElement.Delta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTDictionaryElement.Delta);
}

BOOL sub_1BE1AE434(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BE1AB2A4(a1, a2, v2[7], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1BE1AE444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v6 = (uint64_t (*)(uint64_t, uint64_t))v4[7];
  type metadata accessor for CRDTDictionaryElement.Delta(255, v4[3], v4[6], a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v6(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_1BE1AE4BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDF28F20(a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTDictionaryElement.Delta.ValueDelta);
}

uint64_t sub_1BE1AE4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 72);
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a2, a2 + *(int *)(TupleTypeMetadata2 + 48), a1, v6);
}

_UNKNOWN **sub_1BE1AE584()
{
  return &protocol witness table for CRDTDictionary<A, B>.Partial;
}

uint64_t sub_1BE1AE590(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTDictionary<A, B>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_1BE1AE5BC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE1AE5CC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE1AE5DC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE1AE5EC()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BE1AE5FC()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE1AE614()
{
  return 40;
}

__n128 sub_1BE1AE620(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1BE1AE634()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1F58();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for CRDTDictionary()
{
  JUMPOUT(0x1C3B7DED0);
}

void type metadata accessor for CRDTDictionary.MutatingAction()
{
  JUMPOUT(0x1C3B7DED0);
}

void type metadata accessor for CRDTDictionary.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

void type metadata accessor for CRDTDictionary.Partial()
{
  JUMPOUT(0x1C3B7DED0);
}

void type metadata accessor for CRDTDictionary.Index()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BE1AE6EC()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1BE1AE790(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = (*(_BYTE *)(v9 + 80) | *(_BYTE *)(v6 + 80));
  if (v10 <= 7 && v7 + 1 <= 0x18 && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BE1AE908(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v7 <= v5)
    v7 = v5;
  if (*(unsigned __int8 *)(a1 + v7) >= 2u)
  {
    if (v7 <= 3)
      v8 = v7;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  if (*(_BYTE *)(a1 + v7))
  {
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v3 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t sub_1BE1AEA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = 0;
  }
  return a1;
}

uint64_t sub_1BE1AEB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = AssociatedTypeWitness;
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v10 + 64) > v7)
      v7 = *(_QWORD *)(v10 + 64);
    if (*(unsigned __int8 *)(a1 + v7) >= 2u)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = v6;
    v13 = v5;
    if (*(_BYTE *)(a1 + v7))
    {
      v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
      v13 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, a2, v9);
      *(_BYTE *)(a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      *(_BYTE *)(a1 + v7) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BE1AED18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = 0;
  }
  return a1;
}

uint64_t sub_1BE1AEE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = AssociatedTypeWitness;
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v10 + 64) > v7)
      v7 = *(_QWORD *)(v10 + 64);
    if (*(unsigned __int8 *)(a1 + v7) >= 2u)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = v6;
    v13 = v5;
    if (*(_BYTE *)(a1 + v7))
    {
      v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
      v13 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1, a2, v9);
      *(_BYTE *)(a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      *(_BYTE *)(a1 + v7) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BE1AF02C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_22;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_22:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_22;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 254);
}

void sub_1BE1AF180(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v7)
    v8 = v7;
  v9 = v8 + 1;
  if (a3 < 0xFE)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v11 = a2 - 254;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BE1AF34C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= v3)
    v4 = v3;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BE1AF40C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v5;
  uint64_t AssociatedTypeWitness;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (a2 > 1)
  {
    v7 = a2 - 2;
    if (v5 < 4)
    {
      v8 = v7 >> (8 * v5);
      v9 = v7 & ~(-1 << (8 * v5));
      a1[v5] = v8 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t sub_1BE1AF4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for CRDTDictionaryElement.Delta.ValueDelta(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BE1AF56C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80);
  if (((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (v7 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE8)
    && (v10 & 0x1000F8) == 0)
  {
    v13 = *((unsigned __int8 *)a2 + v7);
    if (v13 >= 2)
    {
      if (v7 <= 3)
        v14 = v7;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    if (v13 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
    v15 = (_QWORD *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)a2 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v15[1] = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u)));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BE1AF71C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v7 + 64) > v5)
    v5 = *(_QWORD *)(v7 + 64);
  if (*(unsigned __int8 *)(a1 + v5) >= 2u)
  {
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (*(_BYTE *)(a1 + v5))
  {
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v3 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE1AF824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = 0;
  }
  v12 = (_QWORD *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v7 + 8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BE1AF988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = AssociatedTypeWitness;
  if (a1 != a2)
  {
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v10 + 64) <= v7)
      v11 = v7;
    else
      v11 = *(_QWORD *)(v10 + 64);
    if (*(unsigned __int8 *)(a1 + v11) >= 2u)
    {
      if (v11 <= 3)
        v12 = v11;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = v6;
    v14 = v5;
    if (*(_BYTE *)(a1 + v11))
    {
      v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
      v14 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v11);
    if (v15 >= 2)
    {
      if (v11 <= 3)
        v16 = v11;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, a2, v9);
      *(_BYTE *)(a1 + v11) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      *(_BYTE *)(a1 + v11) = 0;
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  if (v17 <= v7)
    v17 = v7;
  v18 = v17 + 8;
  v19 = (_QWORD *)((v18 + a1) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v18 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BE1AFBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = *(unsigned __int8 *)(a2 + v7);
  if (v10 >= 2)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = 0;
  }
  *(_OWORD *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v7 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BE1AFD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = AssociatedTypeWitness;
  if (a1 != a2)
  {
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v10 + 64) <= v7)
      v11 = v7;
    else
      v11 = *(_QWORD *)(v10 + 64);
    if (*(unsigned __int8 *)(a1 + v11) >= 2u)
    {
      if (v11 <= 3)
        v12 = v11;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = v6;
    v14 = v5;
    if (*(_BYTE *)(a1 + v11))
    {
      v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
      v14 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v11);
    if (v15 >= 2)
    {
      if (v11 <= 3)
        v16 = v11;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1, a2, v9);
      *(_BYTE *)(a1 + v11) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      *(_BYTE *)(a1 + v11) = 0;
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  if (v17 <= v7)
    v17 = v7;
  v18 = v17 + 8;
  v19 = (_QWORD *)((v18 + a1) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v18 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  swift_bridgeObjectRelease();
  v19[1] = v20[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BE1AFF98(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= v5)
    v6 = v5;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  v10 = v9 & 0xFFFFFFF8;
  v11 = a2 - 2147483646;
  if ((v9 & 0xFFFFFFF8) != 0)
    v11 = 2;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v13 = 1;
  else
    v13 = v12;
  if (v13 == 4)
  {
    v14 = *(_DWORD *)((char *)a1 + v9);
    if (!v14)
      goto LABEL_5;
  }
  else if (v13 == 2)
  {
    v14 = *(unsigned __int16 *)((char *)a1 + v9);
    if (!v14)
      goto LABEL_5;
  }
  else
  {
    v14 = *((unsigned __int8 *)a1 + v9);
    if (!v14)
    {
LABEL_5:
      v7 = *(_QWORD *)(((unint64_t)a1 + v6 + 8) & 0xFFFFFFFFFFFFF8);
      if (v7 >= 0xFFFFFFFF)
        LODWORD(v7) = -1;
      return (v7 + 1);
    }
  }
  v15 = v14 - 1;
  if (v10)
  {
    v15 = 0;
    LODWORD(v10) = *a1;
  }
  return (v10 | v15) ^ 0x80000000;
}

void sub_1BE1B00AC(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  int v11;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v7)
    v8 = v7;
  if (a3 < 0)
  {
    v10 = a3 - 2147483646;
    if ((v8 & 0xFFFFFFF8) != 0xFFFFFFE8)
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v9 = 1;
    else
      v9 = v11;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X11 }
  }
  else
  {
    v9 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((v8 & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    bzero(a1, (v8 & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = a2 ^ 0x80000000;
  }
  __asm { BR              X10 }
}

void sub_1BE1B01E8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (!v1)
    JUMPOUT(0x1BE1B01D4);
  JUMPOUT(0x1BE1B01C0);
}

void sub_1BE1B01F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BE1B01D4);
}

void sub_1BE1B01FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BE1B01D4);
}

uint64_t sub_1BE1B0208()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BE1B027C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1BE1B0340(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BE1B0388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BE1B03F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BE1B047C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1BE1B04D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BE1B054C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BE1B05C8 + 4 * byte_1BE1C8D9D[v10]))();
  }
}

void sub_1BE1B064C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1BE1B0740()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BE1B07B8);
}

void sub_1BE1B0748(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BE1B0750);
  JUMPOUT(0x1BE1B07B8);
}

void sub_1BE1B0790()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BE1B07B8);
}

void sub_1BE1B0798()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BE1B07B8);
}

uint64_t sub_1BE1B07A0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1BE1B07B8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1BE1B07B4);
    JUMPOUT(0x1BE1B07ACLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void sub_1BE1B07D0()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BE1B07E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Set(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BE1B0824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1BE1AD2D0(a1, a2, v3[9], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7], v3[8]);
}

uint64_t sub_1BE1B0854(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1BE1ADAC8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

uint64_t sub_1BE1B0890@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1BE1AD968(a1, *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t sub_1BE1B08B0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[7] + 16) + 8) + 16))(v0[10], v0[3]);
}

uint64_t sub_1BE1B08E8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[5] + 8) + 8) + 16))(v0[10], v0[2]);
}

uint64_t sub_1BE1B0920@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1BE1AC374(a1, v3[7], v3[2], v3[3], v3[4], v3[6], a2, a3);
}

unint64_t sub_1BE1B0944()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6EE9A0;
  if (!qword_1ED6EE9A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6EE998);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6EE9A0);
  }
  return result;
}

uint64_t CRAsset.digest.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  sub_1BDDB6CA4(v1, *(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t CRAsset.read(withAccessor:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = sub_1BE1B2ABC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  v10 = swift_allocObject();
  swift_weakInit();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v10;
  v11[5] = v8;
  v11[6] = a1;
  v11[7] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BDE220D4((uint64_t)v7, (uint64_t)&unk_1EF52C498, (uint64_t)v11);
  sub_1BDD86E30((uint64_t)v7, (uint64_t *)&unk_1ED6F3C10);
  sub_1BE1B2438();
  swift_allocObject();
  v12 = sub_1BE1B2444();
  swift_release();
  return v12;
}

uint64_t CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  *(_BYTE *)(v6 + 88) = a2;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 56) = *v5;
  return swift_task_switch();
}

uint64_t sub_1BE1B0B50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 16) = v1;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_1BE1B0BD0;
  return sub_1BE1111F0(*(_QWORD *)(v0 + 24), (uint64_t *)(v0 + 16), *(_BYTE *)(v0 + 88), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1BE1B0BD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1BE1B0C44()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CRAsset.init(lazyAssetWithDigest:assetManager:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BE1B1200(a1, a2, (void (*)(uint64_t *__return_ptr))sub_1BE108BC8, a3);
}

uint64_t CRAsset.assetManager.getter()
{
  return swift_retain();
}

uint64_t sub_1BE1B0C68()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BE1B0C8C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t CRAsset.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v8, (uint64_t)v7);
  v9 = type metadata accessor for Proto_Value(0);
  LODWORD(v8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9);
  sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3770);
  if ((_DWORD)v8 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000017;
    *(_QWORD *)(v10 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v10 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDE14FF8(&v13);
    result = swift_release();
    if (!v2)
      *a2 = v13;
  }
  return result;
}

uint64_t sub_1BE1B0E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  v9[1] = &unk_1EF531D18;
  v9[2] = v7;
  swift_weakInit();
  sub_1BDDB6CA4(v6, v5);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
  sub_1BE1B2AEC();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_release();
  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return v0;
}

uint64_t sub_1BE1B0F68()
{
  sub_1BE1B0E3C();
  return swift_deallocClassInstance();
}

uint64_t CRAsset.read(waitIfUnavailable:withAccessor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v4;
  v13 = sub_1BE1B2ABC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v14;
  v15[5] = v12;
  v15[6] = a1;
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BDE220D4((uint64_t)v11, (uint64_t)&unk_1EF531D10, (uint64_t)v15);
  sub_1BDD86E30((uint64_t)v11, (uint64_t *)&unk_1ED6F3C10);
  sub_1BE1B2438();
  swift_allocObject();
  v16 = sub_1BE1B2444();
  swift_release();
  return v16;
}

uint64_t sub_1BE1B1108()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BE1B114C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1BDE281A0;
  return sub_1BE110D84(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1BE1B11EC()
{
  uint64_t v0;

  return sub_1BE1161A4(v0);
}

uint64_t CRAsset.init(data:assetManager:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BE1B1200(a1, a2, (void (*)(uint64_t *__return_ptr))sub_1BE10E750, a3);
}

uint64_t sub_1BE1B1200@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;

  a3(&v8);
  swift_release();
  result = sub_1BDDB796C(a1, a2);
  *a4 = v8;
  return result;
}

uint64_t CRAsset.init(_:data:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  sub_1BE10E750(a1, a2);
  sub_1BDDB796C(a1, a2);
  result = swift_release();
  *a3 = v7;
  return result;
}

uint64_t CRAsset.init(url:coordinated:assetManager:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_1BE10EF38(a1, a2, &v7);
  swift_release();
  v5 = sub_1BE1B1DF0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  *a3 = v7;
  return result;
}

uint64_t static CRAsset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BDDB6CA4(v4, v5);
  sub_1BDDD6F30(v2, v3);
  v7 = v6;
  sub_1BDDB796C(v4, v5);
  sub_1BDDB796C(v2, v3);
  return v7 & 1;
}

uint64_t CRAsset.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1E8C();
  return sub_1BDDB796C(v2, v3);
}

uint64_t CRAsset.visitReferences(_:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 24))(&v6, v3, v4);
}

uint64_t CRAsset.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  sub_1BE1B36F8();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v2, v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BE1B14B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  sub_1BE1B36F8();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v2, v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BE1B1518()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1E8C();
  return sub_1BDDB796C(v2, v3);
}

uint64_t sub_1BE1B1568()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  sub_1BE1B36F8();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v2, v3);
  return sub_1BE1B371C();
}

uint64_t sub_1BE1B15C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BDDB6CA4(v4, v5);
  sub_1BDDD6F30(v2, v3);
  v7 = v6;
  sub_1BDDB796C(v4, v5);
  sub_1BDDB796C(v2, v3);
  return v7 & 1;
}

uint64_t sub_1BE1B164C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 24))(&v6, v3, v4);
}

uint64_t sub_1BE1B16A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CRAsset.init(from:)(a1, a2);
}

uint64_t sub_1BE1B16B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *v0;
  result = sub_1BDE25870();
  if (!v1)
  {
    v4 = v2;
    swift_retain();
    sub_1BDE20080(&v4);
    return swift_release();
  }
  return result;
}

uint64_t CRAsset.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *v0;
  result = sub_1BDE25870();
  if (!v1)
  {
    v4 = v2;
    swift_retain();
    sub_1BDE20080(&v4);
    return swift_release();
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1EB0();
  return sub_1BDDB796C(v2, v3);
}

void CRAsset.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRAsset.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  sub_1BDDB6CA4(v1, v2);
  sub_1BE1B1E74();
  sub_1BDDC8C50();
  sub_1BE1B2F30();
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v1, v2);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return 0x2874657373415243;
}

_QWORD *CRAsset.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  sub_1BDED9AB0(a1, (uint64_t)v11);
  v5 = sub_1BE1B1E80();
  if (v2)
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(a1);
  v8 = v5;
  v9 = v6;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v10 = qword_1ED6F8BA8;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(a1);
  type metadata accessor for CRAssetRef();
  result = (_QWORD *)swift_allocObject();
  result[2] = v8;
  result[3] = v9;
  result[4] = v10;
  *a2 = result;
  return result;
}

_QWORD *sub_1BE1B199C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  sub_1BDED9AB0(a1, (uint64_t)v11);
  v5 = sub_1BE1B1E80();
  if (v2)
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(a1);
  v8 = v5;
  v9 = v6;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v10 = qword_1ED6F8BA8;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(a1);
  type metadata accessor for CRAssetRef();
  result = (_QWORD *)swift_allocObject();
  result[2] = v8;
  result[3] = v9;
  result[4] = v10;
  *a2 = result;
  return result;
}

uint64_t sub_1BE1B1A68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B1EB0();
  return sub_1BDDB796C(v2, v3);
}

uint64_t type metadata accessor for CRAssetRef()
{
  return objc_opt_self();
}

unint64_t sub_1BE1B1AF0()
{
  unint64_t result;

  result = qword_1EF52B858;
  if (!qword_1EF52B858)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAsset, &type metadata for CRAsset);
    atomic_store(result, (unint64_t *)&qword_1EF52B858);
  }
  return result;
}

uint64_t sub_1BE1B1B34()
{
  uint64_t v0;

  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1BE1B1B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1BDE28004;
  return sub_1BE10E6FC(a1, v5, v4);
}

void mergeAddChildren()
{
  __assert_rtn("mergeAddChildren", "TTMergeableString.mm", 1646, "ourChild != charMap.end()");
}

uint64_t sub_1BE1B1C4C()
{
  return MEMORY[0x1E0CADE58]();
}

uint64_t sub_1BE1B1C58()
{
  return MEMORY[0x1E0CAE528]();
}

uint64_t sub_1BE1B1C64()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1BE1B1C70()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1BE1B1C7C()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t sub_1BE1B1C88()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1BE1B1C94()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1BE1B1CA0()
{
  return MEMORY[0x1E0CAE908]();
}

uint64_t sub_1BE1B1CAC()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1BE1B1CB8()
{
  return MEMORY[0x1E0CAF378]();
}

uint64_t sub_1BE1B1CC4()
{
  return MEMORY[0x1E0CAF388]();
}

uint64_t sub_1BE1B1CD0()
{
  return MEMORY[0x1E0CAF3D0]();
}

uint64_t sub_1BE1B1CDC()
{
  return MEMORY[0x1E0CAF3D8]();
}

uint64_t sub_1BE1B1CE8()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t sub_1BE1B1CF4()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t sub_1BE1B1D00()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t sub_1BE1B1D0C()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t sub_1BE1B1D18()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t sub_1BE1B1D24()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t sub_1BE1B1D30()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1BE1B1D3C()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1BE1B1D48()
{
  return MEMORY[0x1E0CAFDA0]();
}

uint64_t sub_1BE1B1D54()
{
  return MEMORY[0x1E0CAFDC0]();
}

uint64_t sub_1BE1B1D60()
{
  return MEMORY[0x1E0CAFDD8]();
}

uint64_t sub_1BE1B1D6C()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1BE1B1D78()
{
  return MEMORY[0x1E0CAFE08]();
}

uint64_t sub_1BE1B1D84()
{
  return MEMORY[0x1E0CAFE18]();
}

uint64_t sub_1BE1B1D90()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1BE1B1D9C()
{
  return MEMORY[0x1E0CAFE78]();
}

uint64_t sub_1BE1B1DA8()
{
  return MEMORY[0x1E0CAFE80]();
}

uint64_t sub_1BE1B1DB4()
{
  return MEMORY[0x1E0CAFE90]();
}

uint64_t sub_1BE1B1DC0()
{
  return MEMORY[0x1E0CAFEB8]();
}

uint64_t sub_1BE1B1DCC()
{
  return MEMORY[0x1E0CAFEC0]();
}

uint64_t sub_1BE1B1DD8()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1BE1B1DE4()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t sub_1BE1B1DF0()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1BE1B1DFC()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1BE1B1E08()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t sub_1BE1B1E14()
{
  return MEMORY[0x1E0CB00F0]();
}

uint64_t sub_1BE1B1E20()
{
  return MEMORY[0x1E0CB0138]();
}

uint64_t sub_1BE1B1E2C()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1BE1B1E38()
{
  return MEMORY[0x1E0CB0150]();
}

uint64_t sub_1BE1B1E44()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t sub_1BE1B1E50()
{
  return MEMORY[0x1E0CB0170]();
}

uint64_t sub_1BE1B1E5C()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_1BE1B1E68()
{
  return MEMORY[0x1E0CB01D0]();
}

uint64_t sub_1BE1B1E74()
{
  return MEMORY[0x1E0CB01F8]();
}

uint64_t sub_1BE1B1E80()
{
  return MEMORY[0x1E0CB0238]();
}

uint64_t sub_1BE1B1E8C()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t sub_1BE1B1E98()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t sub_1BE1B1EA4()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t sub_1BE1B1EB0()
{
  return MEMORY[0x1E0CB02A0]();
}

uint64_t sub_1BE1B1EBC()
{
  return MEMORY[0x1E0CB03A8]();
}

uint64_t sub_1BE1B1EC8()
{
  return MEMORY[0x1E0CB03C0]();
}

uint64_t sub_1BE1B1ED4()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1BE1B1EE0()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1BE1B1EEC()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t sub_1BE1B1EF8()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1BE1B1F04()
{
  return MEMORY[0x1E0CB0930]();
}

uint64_t sub_1BE1B1F10()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_1BE1B1F1C()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_1BE1B1F28()
{
  return MEMORY[0x1E0CB0968]();
}

uint64_t sub_1BE1B1F34()
{
  return MEMORY[0x1E0CB0970]();
}

uint64_t sub_1BE1B1F40()
{
  return MEMORY[0x1E0CB0978]();
}

uint64_t sub_1BE1B1F4C()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1BE1B1F58()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1BE1B1F64()
{
  return MEMORY[0x1E0CB1248]();
}

uint64_t sub_1BE1B1F70()
{
  return MEMORY[0x1E0CB1268]();
}

uint64_t sub_1BE1B1F7C()
{
  return MEMORY[0x1E0CB1270]();
}

uint64_t sub_1BE1B1F88()
{
  return MEMORY[0x1E0CB1280]();
}

uint64_t sub_1BE1B1F94()
{
  return MEMORY[0x1E0CB1288]();
}

uint64_t sub_1BE1B1FA0()
{
  return MEMORY[0x1E0CB1298]();
}

uint64_t sub_1BE1B1FAC()
{
  return MEMORY[0x1E0CB12C8]();
}

uint64_t sub_1BE1B1FB8()
{
  return MEMORY[0x1E0CB12D0]();
}

uint64_t sub_1BE1B1FC4()
{
  return MEMORY[0x1E0CB12E8]();
}

uint64_t sub_1BE1B1FD0()
{
  return MEMORY[0x1E0CB12F0]();
}

uint64_t sub_1BE1B1FDC()
{
  return MEMORY[0x1E0CB12F8]();
}

uint64_t sub_1BE1B1FE8()
{
  return MEMORY[0x1E0CB1300]();
}

uint64_t sub_1BE1B1FF4()
{
  return MEMORY[0x1E0CB1308]();
}

uint64_t sub_1BE1B2000()
{
  return MEMORY[0x1E0CB1328]();
}

uint64_t sub_1BE1B200C()
{
  return MEMORY[0x1E0CB1330]();
}

uint64_t sub_1BE1B2018()
{
  return MEMORY[0x1E0CB1338]();
}

uint64_t sub_1BE1B2024()
{
  return MEMORY[0x1E0CB1348]();
}

uint64_t sub_1BE1B2030()
{
  return MEMORY[0x1E0CB1350]();
}

uint64_t sub_1BE1B203C()
{
  return MEMORY[0x1E0CB1358]();
}

uint64_t sub_1BE1B2048()
{
  return MEMORY[0x1E0CB1380]();
}

uint64_t sub_1BE1B2054()
{
  return MEMORY[0x1E0CB1388]();
}

uint64_t sub_1BE1B2060()
{
  return MEMORY[0x1E0CB1398]();
}

uint64_t sub_1BE1B206C()
{
  return MEMORY[0x1E0CB13A0]();
}

uint64_t sub_1BE1B2078()
{
  return MEMORY[0x1E0D3E588]();
}

uint64_t sub_1BE1B2084()
{
  return MEMORY[0x1E0D3E590]();
}

uint64_t sub_1BE1B2090()
{
  return MEMORY[0x1E0D3E598]();
}

uint64_t sub_1BE1B209C()
{
  return MEMORY[0x1E0D3E5A0]();
}

uint64_t sub_1BE1B20A8()
{
  return MEMORY[0x1E0D3E5A8]();
}

uint64_t sub_1BE1B20B4()
{
  return MEMORY[0x1E0D3E5B0]();
}

uint64_t sub_1BE1B20C0()
{
  return MEMORY[0x1E0D3E5C8]();
}

uint64_t sub_1BE1B20CC()
{
  return MEMORY[0x1E0D3E8D8]();
}

uint64_t sub_1BE1B20D8()
{
  return MEMORY[0x1E0D3E988]();
}

uint64_t sub_1BE1B20E4()
{
  return MEMORY[0x1E0D3E990]();
}

uint64_t sub_1BE1B20F0()
{
  return MEMORY[0x1E0D3E998]();
}

uint64_t sub_1BE1B20FC()
{
  return MEMORY[0x1E0D3EA60]();
}

uint64_t sub_1BE1B2108()
{
  return MEMORY[0x1E0D3EA68]();
}

uint64_t sub_1BE1B2114()
{
  return MEMORY[0x1E0D3EA80]();
}

uint64_t sub_1BE1B2120()
{
  return MEMORY[0x1E0D3EA88]();
}

uint64_t sub_1BE1B212C()
{
  return MEMORY[0x1E0D3EA90]();
}

uint64_t sub_1BE1B2138()
{
  return MEMORY[0x1E0D3EA98]();
}

uint64_t sub_1BE1B2144()
{
  return MEMORY[0x1E0D3EAB8]();
}

uint64_t sub_1BE1B2150()
{
  return MEMORY[0x1E0D3EAC0]();
}

uint64_t sub_1BE1B215C()
{
  return MEMORY[0x1E0D3EAD0]();
}

uint64_t sub_1BE1B2168()
{
  return MEMORY[0x1E0D3EAD8]();
}

uint64_t sub_1BE1B2174()
{
  return MEMORY[0x1E0D3EAE8]();
}

uint64_t sub_1BE1B2180()
{
  return MEMORY[0x1E0D3EAF0]();
}

uint64_t sub_1BE1B218C()
{
  return MEMORY[0x1E0D3EB08]();
}

uint64_t sub_1BE1B2198()
{
  return MEMORY[0x1E0D3EB10]();
}

uint64_t sub_1BE1B21A4()
{
  return MEMORY[0x1E0D3EB18]();
}

uint64_t sub_1BE1B21B0()
{
  return MEMORY[0x1E0D3EB20]();
}

uint64_t sub_1BE1B21BC()
{
  return MEMORY[0x1E0D3EB40]();
}

uint64_t sub_1BE1B21C8()
{
  return MEMORY[0x1E0D3EB48]();
}

uint64_t sub_1BE1B21D4()
{
  return MEMORY[0x1E0D3EB58]();
}

uint64_t sub_1BE1B21E0()
{
  return MEMORY[0x1E0D3EB60]();
}

uint64_t sub_1BE1B21EC()
{
  return MEMORY[0x1E0D3EB68]();
}

uint64_t sub_1BE1B21F8()
{
  return MEMORY[0x1E0D3EB70]();
}

uint64_t sub_1BE1B2204()
{
  return MEMORY[0x1E0D3EB80]();
}

uint64_t sub_1BE1B2210()
{
  return MEMORY[0x1E0D3EB88]();
}

uint64_t sub_1BE1B221C()
{
  return MEMORY[0x1E0D3EB90]();
}

uint64_t sub_1BE1B2228()
{
  return MEMORY[0x1E0D3EBA0]();
}

uint64_t sub_1BE1B2234()
{
  return MEMORY[0x1E0D3EBA8]();
}

uint64_t sub_1BE1B2240()
{
  return MEMORY[0x1E0D3EBB0]();
}

uint64_t sub_1BE1B224C()
{
  return MEMORY[0x1E0D3EBC0]();
}

uint64_t sub_1BE1B2258()
{
  return MEMORY[0x1E0D3EBD8]();
}

uint64_t sub_1BE1B2264()
{
  return MEMORY[0x1E0D3EC48]();
}

uint64_t sub_1BE1B2270()
{
  return MEMORY[0x1E0D3EC50]();
}

uint64_t sub_1BE1B227C()
{
  return MEMORY[0x1E0D3EC58]();
}

uint64_t sub_1BE1B2288()
{
  return MEMORY[0x1E0D3EC68]();
}

uint64_t sub_1BE1B2294()
{
  return MEMORY[0x1E0D3EC80]();
}

uint64_t sub_1BE1B22A0()
{
  return MEMORY[0x1E0D3ECD0]();
}

uint64_t sub_1BE1B22AC()
{
  return MEMORY[0x1E0D3ECE0]();
}

uint64_t sub_1BE1B22B8()
{
  return MEMORY[0x1E0D3ECE8]();
}

uint64_t sub_1BE1B22C4()
{
  return MEMORY[0x1E0D3ECF8]();
}

uint64_t sub_1BE1B22D0()
{
  return MEMORY[0x1E0D3ED00]();
}

uint64_t sub_1BE1B22DC()
{
  return MEMORY[0x1E0D3ED10]();
}

uint64_t sub_1BE1B22E8()
{
  return MEMORY[0x1E0D3ED28]();
}

uint64_t sub_1BE1B22F4()
{
  return MEMORY[0x1E0D3ED30]();
}

uint64_t sub_1BE1B2300()
{
  return MEMORY[0x1E0D3ED40]();
}

uint64_t sub_1BE1B230C()
{
  return MEMORY[0x1E0D3ED48]();
}

uint64_t sub_1BE1B2318()
{
  return MEMORY[0x1E0D3ED58]();
}

uint64_t sub_1BE1B2324()
{
  return MEMORY[0x1E0D3ED60]();
}

uint64_t sub_1BE1B2330()
{
  return MEMORY[0x1E0D3ED68]();
}

uint64_t sub_1BE1B233C()
{
  return MEMORY[0x1E0D3ED70]();
}

uint64_t sub_1BE1B2348()
{
  return MEMORY[0x1E0D3ED78]();
}

uint64_t sub_1BE1B2354()
{
  return MEMORY[0x1E0D3ED80]();
}

uint64_t sub_1BE1B2360()
{
  return MEMORY[0x1E0D3ED98]();
}

uint64_t sub_1BE1B236C()
{
  return MEMORY[0x1E0D3EF28]();
}

uint64_t sub_1BE1B2378()
{
  return MEMORY[0x1E0D3EF38]();
}

uint64_t sub_1BE1B2384()
{
  return MEMORY[0x1E0D3EF40]();
}

uint64_t sub_1BE1B2390()
{
  return MEMORY[0x1E0D3EF48]();
}

uint64_t sub_1BE1B239C()
{
  return MEMORY[0x1E0DF2078]();
}

uint64_t sub_1BE1B23A8()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1BE1B23B4()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1BE1B23C0()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1BE1B23CC()
{
  return MEMORY[0x1E0C95638]();
}

uint64_t sub_1BE1B23D8()
{
  return MEMORY[0x1E0C95640]();
}

uint64_t sub_1BE1B23E4()
{
  return MEMORY[0x1E0C95CE0]();
}

uint64_t sub_1BE1B23F0()
{
  return MEMORY[0x1E0C95CE8]();
}

uint64_t sub_1BE1B23FC()
{
  return MEMORY[0x1E0C95D48]();
}

uint64_t sub_1BE1B2408()
{
  return MEMORY[0x1E0C95D50]();
}

uint64_t sub_1BE1B2414()
{
  return MEMORY[0x1E0C95D88]();
}

uint64_t sub_1BE1B2420()
{
  return MEMORY[0x1E0C95DB0]();
}

uint64_t sub_1BE1B242C()
{
  return MEMORY[0x1E0C95DB8]();
}

uint64_t sub_1BE1B2438()
{
  return MEMORY[0x1E0C95E00]();
}

uint64_t sub_1BE1B2444()
{
  return MEMORY[0x1E0C95E48]();
}

uint64_t sub_1BE1B2450()
{
  return MEMORY[0x1E0C95EB0]();
}

uint64_t sub_1BE1B245C()
{
  return MEMORY[0x1E0C95EB8]();
}

uint64_t sub_1BE1B2468()
{
  return MEMORY[0x1E0C95EF0]();
}

uint64_t sub_1BE1B2474()
{
  return MEMORY[0x1E0C95EF8]();
}

uint64_t sub_1BE1B2480()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_1BE1B248C()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1BE1B2498()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t sub_1BE1B24A4()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1BE1B24B0()
{
  return MEMORY[0x1E0DEF588]();
}

uint64_t sub_1BE1B24BC()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1BE1B24C8()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1BE1B24D4()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1BE1B24E0()
{
  return MEMORY[0x1E0DEF708]();
}

uint64_t sub_1BE1B24EC()
{
  return MEMORY[0x1E0DEF710]();
}

uint64_t sub_1BE1B24F8()
{
  return MEMORY[0x1E0DEF728]();
}

uint64_t sub_1BE1B2504()
{
  return MEMORY[0x1E0DEF758]();
}

uint64_t sub_1BE1B2510()
{
  return MEMORY[0x1E0CA92A8]();
}

uint64_t sub_1BE1B251C()
{
  return MEMORY[0x1E0CA92B0]();
}

uint64_t sub_1BE1B2528()
{
  return MEMORY[0x1E0CA92C8]();
}

uint64_t sub_1BE1B2534()
{
  return MEMORY[0x1E0CA92F8]();
}

uint64_t sub_1BE1B2540()
{
  return MEMORY[0x1E0CA9908]();
}

uint64_t sub_1BE1B254C()
{
  return MEMORY[0x1E0CA9918]();
}

uint64_t sub_1BE1B2558()
{
  return MEMORY[0x1E0CA9920]();
}

uint64_t sub_1BE1B2564()
{
  return MEMORY[0x1E0CA9938]();
}

uint64_t sub_1BE1B2570()
{
  return MEMORY[0x1E0CA9940]();
}

uint64_t sub_1BE1B257C()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t sub_1BE1B2588()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t sub_1BE1B2594()
{
  return MEMORY[0x1E0DE9D78]();
}

uint64_t sub_1BE1B25A0()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1BE1B25AC()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1BE1B25B8()
{
  return MEMORY[0x1E0DE9E40]();
}

uint64_t sub_1BE1B25C4()
{
  return MEMORY[0x1E0DE9E58]();
}

uint64_t sub_1BE1B25D0()
{
  return MEMORY[0x1E0DE9E60]();
}

uint64_t sub_1BE1B25DC()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_1BE1B25E8()
{
  return MEMORY[0x1E0DE9E80]();
}

uint64_t sub_1BE1B25F4()
{
  return MEMORY[0x1E0DE9EF8]();
}

uint64_t sub_1BE1B2600()
{
  return MEMORY[0x1E0DE9F00]();
}

uint64_t sub_1BE1B260C()
{
  return MEMORY[0x1E0DE9F38]();
}

uint64_t sub_1BE1B2618()
{
  return MEMORY[0x1E0DE9F40]();
}

uint64_t sub_1BE1B2624()
{
  return MEMORY[0x1E0DE9F78]();
}

uint64_t sub_1BE1B2630()
{
  return MEMORY[0x1E0DE9FA8]();
}

uint64_t sub_1BE1B263C()
{
  return MEMORY[0x1E0DE9FB0]();
}

uint64_t sub_1BE1B2648()
{
  return MEMORY[0x1E0DE9FC8]();
}

uint64_t sub_1BE1B2654()
{
  return MEMORY[0x1E0DEA000]();
}

uint64_t sub_1BE1B2660()
{
  return MEMORY[0x1E0DEA010]();
}

uint64_t sub_1BE1B266C()
{
  return MEMORY[0x1E0DEA038]();
}

uint64_t sub_1BE1B2678()
{
  return MEMORY[0x1E0DEA040]();
}

uint64_t sub_1BE1B2684()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_1BE1B2690()
{
  return MEMORY[0x1E0DEA058]();
}

uint64_t sub_1BE1B269C()
{
  return MEMORY[0x1E0DEA098]();
}

uint64_t sub_1BE1B26A8()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t sub_1BE1B26B4()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1BE1B26C0()
{
  return MEMORY[0x1E0DEA0B0]();
}

uint64_t sub_1BE1B26CC()
{
  return MEMORY[0x1E0DEA0F0]();
}

uint64_t sub_1BE1B26D8()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1BE1B26E4()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1BE1B26F0()
{
  return MEMORY[0x1E0DEA340]();
}

uint64_t sub_1BE1B26FC()
{
  return MEMORY[0x1E0DEA360]();
}

uint64_t sub_1BE1B2708()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1BE1B2714()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1BE1B2720()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1BE1B272C()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t sub_1BE1B2738()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_1BE1B2744()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t sub_1BE1B2750()
{
  return MEMORY[0x1E0DEA428]();
}

uint64_t sub_1BE1B275C()
{
  return MEMORY[0x1E0DEA430]();
}

uint64_t sub_1BE1B2768()
{
  return MEMORY[0x1E0DEA438]();
}

uint64_t sub_1BE1B2774()
{
  return MEMORY[0x1E0DEA460]();
}

uint64_t sub_1BE1B2780()
{
  return MEMORY[0x1E0DEA4B0]();
}

uint64_t sub_1BE1B278C()
{
  return MEMORY[0x1E0DEA510]();
}

uint64_t sub_1BE1B2798()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1BE1B27A4()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1BE1B27B0()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1BE1B27BC()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1BE1B27C8()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1BE1B27D4()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1BE1B27E0()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1BE1B27EC()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1BE1B27F8()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1BE1B2804()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1BE1B2810()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1BE1B281C()
{
  return MEMORY[0x1E0DEA610]();
}

uint64_t sub_1BE1B2828()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1BE1B2834()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1BE1B2840()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1BE1B284C()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1BE1B2858()
{
  return MEMORY[0x1E0DEA808]();
}

uint64_t sub_1BE1B2864()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1BE1B2870()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1BE1B287C()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1BE1B2888()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1BE1B2894()
{
  return MEMORY[0x1E0DEAA68]();
}

uint64_t sub_1BE1B28A0()
{
  return MEMORY[0x1E0DEAA98]();
}

uint64_t sub_1BE1B28AC()
{
  return MEMORY[0x1E0DEAAA8]();
}

uint64_t sub_1BE1B28B8()
{
  return MEMORY[0x1E0DEAAB0]();
}

uint64_t sub_1BE1B28C4()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t sub_1BE1B28D0()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1BE1B28DC()
{
  return MEMORY[0x1E0DEAAF8]();
}

uint64_t sub_1BE1B28E8()
{
  return MEMORY[0x1E0DEAB08]();
}

uint64_t sub_1BE1B28F4()
{
  return MEMORY[0x1E0DEAB28]();
}

uint64_t sub_1BE1B2900()
{
  return MEMORY[0x1E0DEAB38]();
}

uint64_t sub_1BE1B290C()
{
  return MEMORY[0x1E0DEAB48]();
}

uint64_t sub_1BE1B2918()
{
  return MEMORY[0x1E0DEABA0]();
}

uint64_t sub_1BE1B2924()
{
  return MEMORY[0x1E0DEABE8]();
}

uint64_t sub_1BE1B2930()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_1BE1B293C()
{
  return MEMORY[0x1E0DEAC90]();
}

uint64_t sub_1BE1B2948()
{
  return MEMORY[0x1E0DEAD00]();
}

uint64_t sub_1BE1B2954()
{
  return MEMORY[0x1E0DEAD08]();
}

uint64_t sub_1BE1B2960()
{
  return MEMORY[0x1E0DEAD10]();
}

uint64_t sub_1BE1B296C()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1BE1B2978()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1BE1B2984()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1BE1B2990()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1BE1B299C()
{
  return MEMORY[0x1E0DEADC0]();
}

uint64_t sub_1BE1B29A8()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1BE1B29B4()
{
  return MEMORY[0x1E0DEADD0]();
}

uint64_t sub_1BE1B29C0()
{
  return MEMORY[0x1E0DEADD8]();
}

uint64_t sub_1BE1B29CC()
{
  return MEMORY[0x1E0DEAE08]();
}

uint64_t sub_1BE1B29D8()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1BE1B29E4()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1BE1B29F0()
{
  return MEMORY[0x1E0DEAE30]();
}

uint64_t sub_1BE1B29FC()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1BE1B2A08()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1BE1B2A14()
{
  return MEMORY[0x1E0DEAE78]();
}

uint64_t sub_1BE1B2A20()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1BE1B2A2C()
{
  return MEMORY[0x1E0DEAE88]();
}

uint64_t sub_1BE1B2A38()
{
  return MEMORY[0x1E0DEAE90]();
}

uint64_t sub_1BE1B2A44()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1BE1B2A50()
{
  return MEMORY[0x1E0DEAEA0]();
}

uint64_t sub_1BE1B2A5C()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1BE1B2A68()
{
  return MEMORY[0x1E0DEAEF0]();
}

uint64_t sub_1BE1B2A74()
{
  return MEMORY[0x1E0DEAF00]();
}

uint64_t sub_1BE1B2A80()
{
  return MEMORY[0x1E0DEAF08]();
}

uint64_t sub_1BE1B2A8C()
{
  return MEMORY[0x1E0DEAF78]();
}

uint64_t sub_1BE1B2A98()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1BE1B2AA4()
{
  return MEMORY[0x1E0DF0730]();
}

uint64_t sub_1BE1B2AB0()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1BE1B2ABC()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1BE1B2AC8()
{
  return MEMORY[0x1E0DF0790]();
}

uint64_t sub_1BE1B2AD4()
{
  return MEMORY[0x1E0DF07A0]();
}

uint64_t sub_1BE1B2AE0()
{
  return MEMORY[0x1E0DF07C0]();
}

uint64_t sub_1BE1B2AEC()
{
  return MEMORY[0x1E0DF07D8]();
}

uint64_t sub_1BE1B2AF8()
{
  return MEMORY[0x1E0DF07E0]();
}

uint64_t sub_1BE1B2B04()
{
  return MEMORY[0x1E0DF07E8]();
}

uint64_t sub_1BE1B2B10()
{
  return MEMORY[0x1E0DF07F8]();
}

uint64_t sub_1BE1B2B1C()
{
  return MEMORY[0x1E0DF0800]();
}

uint64_t sub_1BE1B2B28()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t sub_1BE1B2B34()
{
  return MEMORY[0x1E0DF0870]();
}

uint64_t sub_1BE1B2B40()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t sub_1BE1B2B4C()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1BE1B2B58()
{
  return MEMORY[0x1E0DEB120]();
}

uint64_t sub_1BE1B2B64()
{
  return MEMORY[0x1E0DEB200]();
}

uint64_t sub_1BE1B2B70()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t sub_1BE1B2B7C()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1BE1B2B88()
{
  return MEMORY[0x1E0DEB260]();
}

uint64_t sub_1BE1B2B94()
{
  return MEMORY[0x1E0DEB288]();
}

uint64_t sub_1BE1B2BA0()
{
  return MEMORY[0x1E0DEB2A8]();
}

uint64_t sub_1BE1B2BAC()
{
  return MEMORY[0x1E0DEB2C8]();
}

uint64_t sub_1BE1B2BB8()
{
  return MEMORY[0x1E0DEB2E8]();
}

uint64_t sub_1BE1B2BC4()
{
  return MEMORY[0x1E0DEB2F0]();
}

uint64_t _sSh9CoherenceE14isDefaultStateSbvg_0()
{
  return MEMORY[0x1E0DEB300]();
}

uint64_t sub_1BE1B2BDC()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1BE1B2BE8()
{
  return MEMORY[0x1E0DEB340]();
}

uint64_t sub_1BE1B2BF4()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t sub_1BE1B2C00()
{
  return MEMORY[0x1E0DEB3B0]();
}

uint64_t sub_1BE1B2C0C()
{
  return MEMORY[0x1E0DEB3F0]();
}

uint64_t sub_1BE1B2C18()
{
  return MEMORY[0x1E0DEB400]();
}

uint64_t sub_1BE1B2C24()
{
  return MEMORY[0x1E0DEB4F8]();
}

uint64_t sub_1BE1B2C30()
{
  return MEMORY[0x1E0DEB508]();
}

uint64_t sub_1BE1B2C3C()
{
  return MEMORY[0x1E0DEB510]();
}

uint64_t sub_1BE1B2C48()
{
  return MEMORY[0x1E0DEB518]();
}

uint64_t sub_1BE1B2C54()
{
  return MEMORY[0x1E0DEB520]();
}

uint64_t sub_1BE1B2C60()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1BE1B2C6C()
{
  return MEMORY[0x1E0DEB540]();
}

uint64_t sub_1BE1B2C78()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1BE1B2C84()
{
  return MEMORY[0x1E0DEB598]();
}

uint64_t sub_1BE1B2C90()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1BE1B2C9C()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1BE1B2CA8()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t sub_1BE1B2CB4()
{
  return MEMORY[0x1E0DEB618]();
}

uint64_t sub_1BE1B2CC0()
{
  return MEMORY[0x1E0DEB628]();
}

uint64_t sub_1BE1B2CCC()
{
  return MEMORY[0x1E0DEB630]();
}

uint64_t sub_1BE1B2CD8()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1BE1B2CE4()
{
  return MEMORY[0x1E0DEB668]();
}

uint64_t sub_1BE1B2CF0()
{
  return MEMORY[0x1E0DEB6A0]();
}

uint64_t sub_1BE1B2CFC()
{
  return MEMORY[0x1E0DEB6A8]();
}

uint64_t sub_1BE1B2D08()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t sub_1BE1B2D14()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1BE1B2D20()
{
  return MEMORY[0x1E0DEB738]();
}

uint64_t sub_1BE1B2D2C()
{
  return MEMORY[0x1E0DEB740]();
}

uint64_t sub_1BE1B2D38()
{
  return MEMORY[0x1E0DEB748]();
}

uint64_t sub_1BE1B2D44()
{
  return MEMORY[0x1E0DEB768]();
}

uint64_t sub_1BE1B2D50()
{
  return MEMORY[0x1E0DEB790]();
}

uint64_t sub_1BE1B2D5C()
{
  return MEMORY[0x1E0DEB7A0]();
}

uint64_t sub_1BE1B2D68()
{
  return MEMORY[0x1E0DEB7B0]();
}

uint64_t sub_1BE1B2D74()
{
  return MEMORY[0x1E0DEB7C0]();
}

uint64_t sub_1BE1B2D80()
{
  return MEMORY[0x1E0DEB7D0]();
}

uint64_t sub_1BE1B2D8C()
{
  return MEMORY[0x1E0DEB810]();
}

uint64_t sub_1BE1B2D98()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_1BE1B2DA4()
{
  return MEMORY[0x1E0DEB870]();
}

uint64_t sub_1BE1B2DB0()
{
  return MEMORY[0x1E0DEB878]();
}

uint64_t sub_1BE1B2DBC()
{
  return MEMORY[0x1E0CB1DC0]();
}

uint64_t sub_1BE1B2DC8()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1BE1B2DD4()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1BE1B2DE0()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1BE1B2DEC()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1BE1B2DF8()
{
  return MEMORY[0x1E0DEF7E0]();
}

uint64_t sub_1BE1B2E04()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1BE1B2E10()
{
  return MEMORY[0x1E0DEF848]();
}

uint64_t sub_1BE1B2E1C()
{
  return MEMORY[0x1E0DEF8C8]();
}

uint64_t sub_1BE1B2E28()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1BE1B2E34()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1BE1B2E40()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t sub_1BE1B2E4C()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1BE1B2E58()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1BE1B2E64()
{
  return MEMORY[0x1E0DEF920]();
}

uint64_t sub_1BE1B2E70()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t sub_1BE1B2E7C()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t sub_1BE1B2E88()
{
  return MEMORY[0x1E0DEF9F0]();
}

uint64_t sub_1BE1B2E94()
{
  return MEMORY[0x1E0DEFA20]();
}

uint64_t sub_1BE1B2EA0()
{
  return MEMORY[0x1E0DEFA68]();
}

uint64_t sub_1BE1B2EAC()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t sub_1BE1B2EB8()
{
  return MEMORY[0x1E0DEFAB0]();
}

uint64_t sub_1BE1B2EC4()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1BE1B2ED0()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t sub_1BE1B2EDC()
{
  return MEMORY[0x1E0DEB910]();
}

uint64_t sub_1BE1B2EE8()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1BE1B2EF4()
{
  return MEMORY[0x1E0DEB980]();
}

uint64_t sub_1BE1B2F00()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1BE1B2F0C()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1BE1B2F18()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1BE1B2F24()
{
  return MEMORY[0x1E0CB2410]();
}

uint64_t sub_1BE1B2F30()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_1BE1B2F3C()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1BE1B2F48()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t sub_1BE1B2F54()
{
  return MEMORY[0x1E0DEBFC8]();
}

uint64_t sub_1BE1B2F60()
{
  return MEMORY[0x1E0DEBFD0]();
}

uint64_t sub_1BE1B2F6C()
{
  return MEMORY[0x1E0DEBFD8]();
}

uint64_t sub_1BE1B2F78()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1BE1B2F84()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1BE1B2F90()
{
  return MEMORY[0x1E0DEC070]();
}

uint64_t sub_1BE1B2F9C()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_1BE1B2FA8()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t sub_1BE1B2FB4()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1BE1B2FC0()
{
  return MEMORY[0x1E0DEC0B8]();
}

uint64_t sub_1BE1B2FCC()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t sub_1BE1B2FD8()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t sub_1BE1B2FE4()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1BE1B2FF0()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_1BE1B2FFC()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t sub_1BE1B3008()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1BE1B3014()
{
  return MEMORY[0x1E0DEC128]();
}

uint64_t sub_1BE1B3020()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1BE1B302C()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1BE1B3038()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_1BE1B3044()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1BE1B3050()
{
  return MEMORY[0x1E0DEC268]();
}

uint64_t sub_1BE1B305C()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1BE1B3068()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1BE1B3074()
{
  return MEMORY[0x1E0DEC2D0]();
}

uint64_t sub_1BE1B3080()
{
  return MEMORY[0x1E0DEC310]();
}

uint64_t sub_1BE1B308C()
{
  return MEMORY[0x1E0DEC370]();
}

uint64_t sub_1BE1B3098()
{
  return MEMORY[0x1E0DEC378]();
}

uint64_t sub_1BE1B30A4()
{
  return MEMORY[0x1E0DEC380]();
}

uint64_t sub_1BE1B30B0()
{
  return MEMORY[0x1E0DEC390]();
}

uint64_t sub_1BE1B30BC()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1BE1B30C8()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1BE1B30D4()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1BE1B30E0()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1BE1B30EC()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1BE1B30F8()
{
  return MEMORY[0x1E0DEC680]();
}

uint64_t sub_1BE1B3104()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1BE1B3110()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1BE1B311C()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1BE1B3128()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t sub_1BE1B3134()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t sub_1BE1B3140()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_1BE1B314C()
{
  return MEMORY[0x1E0DEC808]();
}

uint64_t sub_1BE1B3158()
{
  return MEMORY[0x1E0DEC8D8]();
}

uint64_t sub_1BE1B3164()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1BE1B3170()
{
  return MEMORY[0x1E0DEC8F8]();
}

uint64_t sub_1BE1B317C()
{
  return MEMORY[0x1E0DEC990]();
}

uint64_t sub_1BE1B3188()
{
  return MEMORY[0x1E0DEC9B8]();
}

uint64_t sub_1BE1B3194()
{
  return MEMORY[0x1E0DECAE0]();
}

uint64_t sub_1BE1B31A0()
{
  return MEMORY[0x1E0DECAE8]();
}

uint64_t sub_1BE1B31AC()
{
  return MEMORY[0x1E0DECB08]();
}

uint64_t sub_1BE1B31B8()
{
  return MEMORY[0x1E0DECB20]();
}

uint64_t sub_1BE1B31C4()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_1BE1B31D0()
{
  return MEMORY[0x1E0DECB90]();
}

uint64_t sub_1BE1B31DC()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_1BE1B31E8()
{
  return MEMORY[0x1E0DECBC0]();
}

uint64_t sub_1BE1B31F4()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1BE1B3200()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1BE1B320C()
{
  return MEMORY[0x1E0DECC38]();
}

uint64_t sub_1BE1B3218()
{
  return MEMORY[0x1E0DECC40]();
}

uint64_t sub_1BE1B3224()
{
  return MEMORY[0x1E0DECC48]();
}

uint64_t sub_1BE1B3230()
{
  return MEMORY[0x1E0DECC58]();
}

uint64_t sub_1BE1B323C()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1BE1B3248()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1BE1B3254()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1BE1B3260()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1BE1B326C()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1BE1B3278()
{
  return MEMORY[0x1E0DECE28]();
}

uint64_t sub_1BE1B3284()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1BE1B3290()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1BE1B329C()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1BE1B32A8()
{
  return MEMORY[0x1E0DED058]();
}

uint64_t sub_1BE1B32B4()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1BE1B32C0()
{
  return MEMORY[0x1E0DED180]();
}

uint64_t sub_1BE1B32CC()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1BE1B32D8()
{
  return MEMORY[0x1E0DED1C0]();
}

uint64_t sub_1BE1B32E4()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1BE1B32F0()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t sub_1BE1B32FC()
{
  return MEMORY[0x1E0DED2C8]();
}

uint64_t sub_1BE1B3308()
{
  return MEMORY[0x1E0DED2D0]();
}

uint64_t sub_1BE1B3314()
{
  return MEMORY[0x1E0DED2D8]();
}

uint64_t sub_1BE1B3320()
{
  return MEMORY[0x1E0DED2E8]();
}

uint64_t sub_1BE1B332C()
{
  return MEMORY[0x1E0DED2F0]();
}

uint64_t sub_1BE1B3338()
{
  return MEMORY[0x1E0DED2F8]();
}

uint64_t sub_1BE1B3344()
{
  return MEMORY[0x1E0DED318]();
}

uint64_t sub_1BE1B3350()
{
  return MEMORY[0x1E0DED340]();
}

uint64_t sub_1BE1B335C()
{
  return MEMORY[0x1E0DED350]();
}

uint64_t sub_1BE1B3368()
{
  return MEMORY[0x1E0DED358]();
}

uint64_t sub_1BE1B3374()
{
  return MEMORY[0x1E0DED368]();
}

uint64_t sub_1BE1B3380()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t sub_1BE1B338C()
{
  return MEMORY[0x1E0DED400]();
}

uint64_t sub_1BE1B3398()
{
  return MEMORY[0x1E0DED408]();
}

uint64_t sub_1BE1B33A4()
{
  return MEMORY[0x1E0DED410]();
}

uint64_t sub_1BE1B33B0()
{
  return MEMORY[0x1E0DED418]();
}

uint64_t sub_1BE1B33BC()
{
  return MEMORY[0x1E0DED420]();
}

uint64_t sub_1BE1B33C8()
{
  return MEMORY[0x1E0DED428]();
}

uint64_t sub_1BE1B33D4()
{
  return MEMORY[0x1E0DED430]();
}

uint64_t sub_1BE1B33E0()
{
  return MEMORY[0x1E0DED438]();
}

uint64_t sub_1BE1B33EC()
{
  return MEMORY[0x1E0DED440]();
}

uint64_t sub_1BE1B33F8()
{
  return MEMORY[0x1E0DED448]();
}

uint64_t sub_1BE1B3404()
{
  return MEMORY[0x1E0DED450]();
}

uint64_t sub_1BE1B3410()
{
  return MEMORY[0x1E0DED458]();
}

uint64_t sub_1BE1B341C()
{
  return MEMORY[0x1E0DED460]();
}

uint64_t sub_1BE1B3428()
{
  return MEMORY[0x1E0DED468]();
}

uint64_t sub_1BE1B3434()
{
  return MEMORY[0x1E0DED470]();
}

uint64_t sub_1BE1B3440()
{
  return MEMORY[0x1E0DED478]();
}

uint64_t sub_1BE1B344C()
{
  return MEMORY[0x1E0DED480]();
}

uint64_t sub_1BE1B3458()
{
  return MEMORY[0x1E0DED488]();
}

uint64_t sub_1BE1B3464()
{
  return MEMORY[0x1E0DED538]();
}

uint64_t sub_1BE1B3470()
{
  return MEMORY[0x1E0DED540]();
}

uint64_t sub_1BE1B347C()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t sub_1BE1B3488()
{
  return MEMORY[0x1E0DED550]();
}

uint64_t sub_1BE1B3494()
{
  return MEMORY[0x1E0DED5A8]();
}

uint64_t sub_1BE1B34A0()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1BE1B34AC()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1BE1B34B8()
{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t sub_1BE1B34C4()
{
  return MEMORY[0x1E0DED610]();
}

uint64_t sub_1BE1B34D0()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t sub_1BE1B34DC()
{
  return MEMORY[0x1E0DED698]();
}

uint64_t sub_1BE1B34E8()
{
  return MEMORY[0x1E0DED6A0]();
}

uint64_t sub_1BE1B34F4()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t sub_1BE1B3500()
{
  return MEMORY[0x1E0DED740]();
}

uint64_t sub_1BE1B350C()
{
  return MEMORY[0x1E0DED758]();
}

uint64_t sub_1BE1B3518()
{
  return MEMORY[0x1E0DED760]();
}

uint64_t sub_1BE1B3524()
{
  return MEMORY[0x1E0DED788]();
}

uint64_t sub_1BE1B3530()
{
  return MEMORY[0x1E0DED7D0]();
}

uint64_t sub_1BE1B353C()
{
  return MEMORY[0x1E0DED7D8]();
}

uint64_t sub_1BE1B3548()
{
  return MEMORY[0x1E0DED7E0]();
}

uint64_t sub_1BE1B3554()
{
  return MEMORY[0x1E0DED7F0]();
}

uint64_t sub_1BE1B3560()
{
  return MEMORY[0x1E0DED7F8]();
}

uint64_t sub_1BE1B356C()
{
  return MEMORY[0x1E0DED800]();
}

uint64_t sub_1BE1B3578()
{
  return MEMORY[0x1E0DED820]();
}

uint64_t sub_1BE1B3584()
{
  return MEMORY[0x1E0DED848]();
}

uint64_t sub_1BE1B3590()
{
  return MEMORY[0x1E0DED858]();
}

uint64_t sub_1BE1B359C()
{
  return MEMORY[0x1E0DED860]();
}

uint64_t sub_1BE1B35A8()
{
  return MEMORY[0x1E0DED8D0]();
}

uint64_t sub_1BE1B35B4()
{
  return MEMORY[0x1E0DED8D8]();
}

uint64_t sub_1BE1B35C0()
{
  return MEMORY[0x1E0DED8E0]();
}

uint64_t sub_1BE1B35CC()
{
  return MEMORY[0x1E0DED8F0]();
}

uint64_t sub_1BE1B35D8()
{
  return MEMORY[0x1E0DED8F8]();
}

uint64_t sub_1BE1B35E4()
{
  return MEMORY[0x1E0DED900]();
}

uint64_t sub_1BE1B35F0()
{
  return MEMORY[0x1E0DED920]();
}

uint64_t sub_1BE1B35FC()
{
  return MEMORY[0x1E0DED930]();
}

uint64_t sub_1BE1B3608()
{
  return MEMORY[0x1E0DED948]();
}

uint64_t sub_1BE1B3614()
{
  return MEMORY[0x1E0DED950]();
}

uint64_t sub_1BE1B3620()
{
  return MEMORY[0x1E0DED958]();
}

uint64_t sub_1BE1B362C()
{
  return MEMORY[0x1E0DED960]();
}

uint64_t sub_1BE1B3638()
{
  return MEMORY[0x1E0DED968]();
}

uint64_t sub_1BE1B3644()
{
  return MEMORY[0x1E0DED980]();
}

uint64_t sub_1BE1B3650()
{
  return MEMORY[0x1E0DED9C0]();
}

uint64_t sub_1BE1B365C()
{
  return MEMORY[0x1E0DED9E0]();
}

uint64_t sub_1BE1B3668()
{
  return MEMORY[0x1E0DEDA30]();
}

uint64_t sub_1BE1B3674()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1BE1B3680()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1BE1B368C()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1BE1B3698()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1BE1B36A4()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1BE1B36B0()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1BE1B36BC()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1BE1B36C8()
{
  return MEMORY[0x1E0DEDE10]();
}

uint64_t sub_1BE1B36D4()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t sub_1BE1B36E0()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1BE1B36EC()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1BE1B36F8()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1BE1B3704()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1BE1B3710()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1BE1B371C()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1BE1B3728()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t sub_1BE1B3734()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t sub_1BE1B3740()
{
  return MEMORY[0x1E0DEE020]();
}

uint64_t sub_1BE1B374C()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t sub_1BE1B3758()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1BE1B3764()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t sub_1BE1B3770()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t sub_1BE1B377C()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1BE1B3788()
{
  return MEMORY[0x1E0DEE8D0]();
}

uint64_t sub_1BE1B3794()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1BE1B37A0()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1BE1B37AC()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t CFHashBytes()
{
  return MEMORY[0x1E0C98760]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E7753770(__p);
}

uint64_t operator delete()
{
  return off_1E7753778();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E7753780(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E7753788(__sz, a2);
}

uint64_t operator new()
{
  return off_1E7753790();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1E0DEE9F8]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C853A0](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
{
  return MEMORY[0x1E0DE8758](db, zDbName);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
  MEMORY[0x1E0DE8968](a1);
}

int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
{
  return MEMORY[0x1E0DE8978](db, zSchema, pSnapshot);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1E0DEEB90]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1E0DEEB98]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1E0DEED28]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1E0DEED90]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1E0DEEDB8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEDF8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x1E0DEEE10]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEE68]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x1E0DEEF88]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x1E0DEEF90]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x1E0DEEFB0]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x1E0DEEFB8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1E0C85A30](uu);
}

